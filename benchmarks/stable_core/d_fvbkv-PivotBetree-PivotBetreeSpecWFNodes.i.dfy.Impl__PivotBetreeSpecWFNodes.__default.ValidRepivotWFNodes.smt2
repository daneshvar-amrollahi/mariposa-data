(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc5 () T@U)
(declare-fun Tagclass._System.___hPartialFunc5 () T@U)
(declare-fun Tagclass._System.___hTotalFunc5 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc6 () T@U)
(declare-fun Tagclass._System.___hPartialFunc6 () T@U)
(declare-fun Tagclass._System.___hTotalFunc6 () T@U)
(declare-fun Tagclass._System.___hFunc7 () T@U)
(declare-fun Tagclass._System.___hPartialFunc7 () T@U)
(declare-fun Tagclass._System.___hTotalFunc7 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun class.PivotBetreeSpecWFNodes.__default () T@U)
(declare-fun Tagclass.PivotBetreeSpecWFNodes.__default () T@U)
(declare-fun Tagclass.PivotBetreeSpec.NodeFlush () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.PivotBetreeGraph.Node () T@U)
(declare-fun Tagclass.BucketsLib.Bucket () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.PivotBetreeSpec.NodeFusion () T@U)
(declare-fun Tagclass.ReferenceType.Reference () T@U)
(declare-fun Tagclass.PivotBetreeSpec.Repivot () T@U)
(declare-fun Tagclass.PivotBetreeSpec.MessageInsertion () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun Tagclass.PivotBetreeSpec.RootGrowth () T@U)
(declare-fun Tagclass.PivotBetreeSpec.BetreeStep () T@U)
(declare-fun Tagclass.PivotBetreeSpec.SuccQuery () T@U)
(declare-fun Tagclass.PivotBetreeSpec.LookupQuery () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun |##UI.RangeStart.SInclusive| () T@U)
(declare-fun Tagclass.UI.RangeStart () T@U)
(declare-fun |##UI.RangeStart.SExclusive| () T@U)
(declare-fun |##UI.RangeStart.NegativeInf| () T@U)
(declare-fun class.UI.RangeStart () T@U)
(declare-fun |##UI.RangeEnd.EInclusive| () T@U)
(declare-fun Tagclass.UI.RangeEnd () T@U)
(declare-fun |##UI.RangeEnd.EExclusive| () T@U)
(declare-fun |##UI.RangeEnd.PositiveInf| () T@U)
(declare-fun class.UI.RangeEnd () T@U)
(declare-fun |##UI.SuccResult.SuccResult| () T@U)
(declare-fun Tagclass.UI.SuccResult () T@U)
(declare-fun class.UI.SuccResult () T@U)
(declare-fun |##UI.SuccResultList.SuccResultList| () T@U)
(declare-fun Tagclass.UI.SuccResultList () T@U)
(declare-fun class.UI.SuccResultList () T@U)
(declare-fun |##UI.Op.NoOp| () T@U)
(declare-fun Tagclass.UI.Op () T@U)
(declare-fun |##UI.Op.SyncOp| () T@U)
(declare-fun |##UI.Op.CrashOp| () T@U)
(declare-fun |##UI.Op.PushSyncOp| () T@U)
(declare-fun |##UI.Op.PopSyncOp| () T@U)
(declare-fun |##UI.Op.GetOp| () T@U)
(declare-fun |##UI.Op.PutOp| () T@U)
(declare-fun |##UI.Op.SuccOp| () T@U)
(declare-fun class.UI.Op () T@U)
(declare-fun class.UI.__default () T@U)
(declare-fun Tagclass.UI.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun |##MapSpec.Constants.Constants| () T@U)
(declare-fun Tagclass.MapSpec.Constants () T@U)
(declare-fun class.MapSpec.Constants () T@U)
(declare-fun |##MapSpec.Variables.Variables| () T@U)
(declare-fun Tagclass.MapSpec.Variables () T@U)
(declare-fun class.MapSpec.Variables () T@U)
(declare-fun |##MapSpec.Step.QueryStep| () T@U)
(declare-fun Tagclass.MapSpec.Step () T@U)
(declare-fun |##MapSpec.Step.WriteStep| () T@U)
(declare-fun |##MapSpec.Step.SuccStep| () T@U)
(declare-fun |##MapSpec.Step.StutterStep| () T@U)
(declare-fun class.MapSpec.Step () T@U)
(declare-fun class.MapSpec.__default () T@U)
(declare-fun Tagclass.MapSpec.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.ReferenceType.__default () T@U)
(declare-fun Tagclass.ReferenceType.__default () T@U)
(declare-fun |##ValueMessage.Delta.NoDelta| () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun |##BetreeGraph.Node.Node| () T@U)
(declare-fun Tagclass.BetreeGraph.Node () T@U)
(declare-fun class.BetreeGraph.Node () T@U)
(declare-fun class.BetreeGraph.__default () T@U)
(declare-fun Tagclass.BetreeGraph.__default () T@U)
(declare-fun |##BetreeGraph.Op.AllocOp| () T@U)
(declare-fun Tagclass.BetreeGraph.Op () T@U)
(declare-fun |##BetreeGraph.Op.WriteOp| () T@U)
(declare-fun class.BetreeGraph.Op () T@U)
(declare-fun |##BetreeGraph.ReadOp.ReadOp| () T@U)
(declare-fun Tagclass.BetreeGraph.ReadOp () T@U)
(declare-fun class.BetreeGraph.ReadOp () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun class.Byte__Order.__default () T@U)
(declare-fun Tagclass.Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun class.PivotsLib.__default () T@U)
(declare-fun Tagclass.PivotsLib.__default () T@U)
(declare-fun class.Multisets.__default () T@U)
(declare-fun Tagclass.Multisets.__default () T@U)
(declare-fun |##BucketsLib.Bucket.BucketMapWithSeq| () T@U)
(declare-fun class.BucketsLib.Bucket () T@U)
(declare-fun class.BucketsLib.__default () T@U)
(declare-fun Tagclass.BucketsLib.__default () T@U)
(declare-fun |##PivotBetreeGraph.Node.Node| () T@U)
(declare-fun class.PivotBetreeGraph.Node () T@U)
(declare-fun class.PivotBetreeGraph.__default () T@U)
(declare-fun Tagclass.PivotBetreeGraph.__default () T@U)
(declare-fun |##PivotBetreeGraph.Op.AllocOp| () T@U)
(declare-fun Tagclass.PivotBetreeGraph.Op () T@U)
(declare-fun |##PivotBetreeGraph.Op.WriteOp| () T@U)
(declare-fun class.PivotBetreeGraph.Op () T@U)
(declare-fun |##PivotBetreeGraph.ReadOp.ReadOp| () T@U)
(declare-fun Tagclass.PivotBetreeGraph.ReadOp () T@U)
(declare-fun class.PivotBetreeGraph.ReadOp () T@U)
(declare-fun class.Bounds.__default () T@U)
(declare-fun Tagclass.Bounds.__default () T@U)
(declare-fun class.Sets.__default () T@U)
(declare-fun Tagclass.Sets.__default () T@U)
(declare-fun class.BucketWeights.__default () T@U)
(declare-fun Tagclass.BucketWeights.__default () T@U)
(declare-fun |##PivotBetreeSpec.LookupQuery.LookupQuery| () T@U)
(declare-fun class.PivotBetreeSpec.LookupQuery () T@U)
(declare-fun |##PivotBetreeSpec.SuccQuery.SuccQuery| () T@U)
(declare-fun class.PivotBetreeSpec.SuccQuery () T@U)
(declare-fun |##PivotBetreeSpec.MessageInsertion.MessageInsertion| () T@U)
(declare-fun class.PivotBetreeSpec.MessageInsertion () T@U)
(declare-fun |##PivotBetreeSpec.NodeFlush.NodeFlush| () T@U)
(declare-fun class.PivotBetreeSpec.NodeFlush () T@U)
(declare-fun |##PivotBetreeSpec.RootGrowth.RootGrowth| () T@U)
(declare-fun class.PivotBetreeSpec.RootGrowth () T@U)
(declare-fun |##PivotBetreeSpec.NodeFusion.NodeFusion| () T@U)
(declare-fun class.PivotBetreeSpec.NodeFusion () T@U)
(declare-fun |##PivotBetreeSpec.Repivot.Repivot| () T@U)
(declare-fun class.PivotBetreeSpec.Repivot () T@U)
(declare-fun |##PivotBetreeSpec.BetreeStep.BetreeQuery| () T@U)
(declare-fun |##PivotBetreeSpec.BetreeStep.BetreeSuccQuery| () T@U)
(declare-fun |##PivotBetreeSpec.BetreeStep.BetreeInsert| () T@U)
(declare-fun |##PivotBetreeSpec.BetreeStep.BetreeFlush| () T@U)
(declare-fun |##PivotBetreeSpec.BetreeStep.BetreeGrow| () T@U)
(declare-fun |##PivotBetreeSpec.BetreeStep.BetreeSplit| () T@U)
(declare-fun |##PivotBetreeSpec.BetreeStep.BetreeMerge| () T@U)
(declare-fun |##PivotBetreeSpec.BetreeStep.BetreeRepivot| () T@U)
(declare-fun class.PivotBetreeSpec.BetreeStep () T@U)
(declare-fun class.PivotBetreeSpec.__default () T@U)
(declare-fun Tagclass.PivotBetreeSpec.__default () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_5 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5TypeInv6 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle5 (T@U T@U T@U) T@U)
(declare-fun Requires5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType6Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6TypeInv2 (T@T) T@T)
(declare-fun MapType6TypeInv3 (T@T) T@T)
(declare-fun MapType6TypeInv4 (T@T) T@T)
(declare-fun MapType6TypeInv5 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_6 (T@U) T@U)
(declare-fun MapType7Type (T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType7TypeInv0 (T@T) T@T)
(declare-fun MapType7TypeInv1 (T@T) T@T)
(declare-fun MapType7TypeInv2 (T@T) T@T)
(declare-fun MapType7TypeInv3 (T@T) T@T)
(declare-fun MapType7TypeInv4 (T@T) T@T)
(declare-fun MapType7TypeInv5 (T@T) T@T)
(declare-fun MapType7TypeInv6 (T@T) T@T)
(declare-fun MapType7TypeInv7 (T@T) T@T)
(declare-fun MapType7Select (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType7Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle6 (T@U T@U T@U) T@U)
(declare-fun Requires6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc7_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_6 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_7 (T@U) T@U)
(declare-fun MapType8Type (T@T T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType8TypeInv0 (T@T) T@T)
(declare-fun MapType8TypeInv1 (T@T) T@T)
(declare-fun MapType8TypeInv2 (T@T) T@T)
(declare-fun MapType8TypeInv3 (T@T) T@T)
(declare-fun MapType8TypeInv4 (T@T) T@T)
(declare-fun MapType8TypeInv5 (T@T) T@T)
(declare-fun MapType8TypeInv6 (T@T) T@T)
(declare-fun MapType8TypeInv7 (T@T) T@T)
(declare-fun MapType8TypeInv8 (T@T) T@T)
(declare-fun MapType8Select (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType8Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply7 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle7 (T@U T@U T@U) T@U)
(declare-fun Requires7 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads7 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_6 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_7 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_7 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass.PivotBetreeSpecWFNodes.__default () T@U)
(declare-fun Tclass.PivotBetreeSpec.NodeFlush () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.PivotBetreeGraph.Node () T@U)
(declare-fun Tclass.BucketsLib.Bucket () T@U)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Tclass.PivotBetreeSpec.NodeFusion () T@U)
(declare-fun Tclass.ReferenceType.Reference () T@U)
(declare-fun Tclass.PivotBetreeSpec.Repivot () T@U)
(declare-fun Tclass.PivotBetreeSpec.MessageInsertion () T@U)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun Tclass.PivotBetreeSpec.RootGrowth () T@U)
(declare-fun Tclass.PivotBetreeSpec.BetreeStep () T@U)
(declare-fun Tclass.PivotBetreeSpec.SuccQuery () T@U)
(declare-fun Tclass.PivotBetreeSpec.LookupQuery () T@U)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun Tclass.KeyType.__default () T@U)
(declare-fun KeyType.__default.MaxLen () Int)
(declare-fun |KeyType.__default.MaxLen#requires| () Bool)
(declare-fun |#UI.RangeStart.SInclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeStart () T@U)
(declare-fun UI.RangeStart.key (T@U) T@U)
(declare-fun |#UI.RangeStart.SExclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeStart.NegativeInf| () T@U)
(declare-fun UI.RangeStart.NegativeInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeStart| (T@U) Bool)
(declare-fun |UI.RangeStart#Equal| (T@U T@U) Bool)
(declare-fun |#UI.RangeEnd.EInclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeEnd () T@U)
(declare-fun UI.RangeEnd.key (T@U) T@U)
(declare-fun |#UI.RangeEnd.EExclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeEnd.PositiveInf| () T@U)
(declare-fun UI.RangeEnd.PositiveInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeEnd| (T@U) Bool)
(declare-fun |UI.RangeEnd#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResult.SuccResult| (T@U T@U) T@U)
(declare-fun UI.SuccResult.SuccResult_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResult () T@U)
(declare-fun UI.SuccResult.key (T@U) T@U)
(declare-fun UI.SuccResult.value (T@U) T@U)
(declare-fun |$IsA#UI.SuccResult| (T@U) Bool)
(declare-fun |UI.SuccResult#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResultList.SuccResultList| (T@U T@U) T@U)
(declare-fun UI.SuccResultList.SuccResultList_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResultList () T@U)
(declare-fun UI.SuccResultList.results (T@U) T@U)
(declare-fun UI.SuccResultList.end (T@U) T@U)
(declare-fun |$IsA#UI.SuccResultList| (T@U) Bool)
(declare-fun |UI.SuccResultList#Equal| (T@U T@U) Bool)
(declare-fun |#UI.Op.NoOp| () T@U)
(declare-fun UI.Op.NoOp_q (T@U) Bool)
(declare-fun Tclass.UI.Op () T@U)
(declare-fun |#UI.Op.SyncOp| () T@U)
(declare-fun UI.Op.SyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.CrashOp| () T@U)
(declare-fun UI.Op.CrashOp_q (T@U) Bool)
(declare-fun |#UI.Op.PushSyncOp| (Int) T@U)
(declare-fun UI.Op.PushSyncOp_q (T@U) Bool)
(declare-fun UI.Op.id (T@U) Int)
(declare-fun |#UI.Op.PopSyncOp| (Int) T@U)
(declare-fun UI.Op.PopSyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetOp| (T@U T@U) T@U)
(declare-fun UI.Op.GetOp_q (T@U) Bool)
(declare-fun UI.Op.key (T@U) T@U)
(declare-fun UI.Op.value (T@U) T@U)
(declare-fun |#UI.Op.PutOp| (T@U T@U) T@U)
(declare-fun UI.Op.PutOp_q (T@U) Bool)
(declare-fun |#UI.Op.SuccOp| (T@U T@U T@U) T@U)
(declare-fun UI.Op.SuccOp_q (T@U) Bool)
(declare-fun UI.Op.start (T@U) T@U)
(declare-fun UI.Op.results (T@U) T@U)
(declare-fun UI.Op.end (T@U) T@U)
(declare-fun |$IsA#UI.Op| (T@U) Bool)
(declare-fun |UI.Op#Equal| (T@U T@U) Bool)
(declare-fun Tclass.UI.__default () T@U)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun |#MapSpec.Constants.Constants| () T@U)
(declare-fun MapSpec.Constants.Constants_q (T@U) Bool)
(declare-fun Tclass.MapSpec.Constants () T@U)
(declare-fun |$IsA#MapSpec.Constants| (T@U) Bool)
(declare-fun |MapSpec.Constants#Equal| (T@U T@U) Bool)
(declare-fun |#MapSpec.Variables.Variables| (T@U) T@U)
(declare-fun MapSpec.Variables.Variables_q (T@U) Bool)
(declare-fun Tclass.MapSpec.Variables () T@U)
(declare-fun MapSpec.Variables.view (T@U) T@U)
(declare-fun |$IsA#MapSpec.Variables| (T@U) Bool)
(declare-fun |MapSpec.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#MapSpec.Step.QueryStep| (T@U T@U) T@U)
(declare-fun MapSpec.Step.QueryStep_q (T@U) Bool)
(declare-fun Tclass.MapSpec.Step () T@U)
(declare-fun MapSpec.Step.key (T@U) T@U)
(declare-fun MapSpec.Step.result (T@U) T@U)
(declare-fun |#MapSpec.Step.WriteStep| (T@U T@U) T@U)
(declare-fun MapSpec.Step.WriteStep_q (T@U) Bool)
(declare-fun MapSpec.Step.new__value (T@U) T@U)
(declare-fun |#MapSpec.Step.SuccStep| (T@U T@U T@U) T@U)
(declare-fun MapSpec.Step.SuccStep_q (T@U) Bool)
(declare-fun MapSpec.Step.start (T@U) T@U)
(declare-fun MapSpec.Step.results (T@U) T@U)
(declare-fun MapSpec.Step.end (T@U) T@U)
(declare-fun |#MapSpec.Step.StutterStep| () T@U)
(declare-fun MapSpec.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#MapSpec.Step| (T@U) Bool)
(declare-fun |MapSpec.Step#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MapSpec.__default () T@U)
(declare-fun MapSpec.__default.EmptyValue () T@U)
(declare-fun |MapSpec.__default.EmptyValue#requires| () Bool)
(declare-fun |ValueType.__default.DefaultValue#canCall| () Bool)
(declare-fun MapSpec.__default.ViewComplete (T@U) Bool)
(declare-fun |MapSpec.__default.ViewComplete#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.ViewComplete#requires| (T@U) Bool)
(declare-fun MapSpec.__default.WF (T@U) Bool)
(declare-fun |MapSpec.__default.WF#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.WF#requires| (T@U) Bool)
(declare-fun MapSpec.__default.InDomain (T@U) Bool)
(declare-fun |MapSpec.__default.InDomain#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.InDomain#requires| (T@U) Bool)
(declare-fun MapSpec.__default.EmptyMap () T@U)
(declare-fun |MapSpec.__default.EmptyMap#requires| () Bool)
(declare-fun |lambda#40| (T@U) T@U)
(declare-fun |lambda#41| (T@U) T@U)
(declare-fun |MapSpec.__default.EmptyValue#canCall| () Bool)
(declare-fun MapSpec.__default.Init (T@U T@U) Bool)
(declare-fun |MapSpec.__default.Init#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.Init#requires| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.EmptyMap#canCall| () Bool)
(declare-fun MapSpec.__default.Query (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Query#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Query#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.LowerBound (T@U T@U) Bool)
(declare-fun |MapSpec.__default.LowerBound#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.LowerBound#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.UpperBound (T@U T@U) Bool)
(declare-fun |MapSpec.__default.UpperBound#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.UpperBound#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.InRange (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.InRange#canCall| (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.InRange#requires| (T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.NonEmptyRange (T@U T@U) Bool)
(declare-fun |MapSpec.__default.NonEmptyRange#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.NonEmptyRange#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.Succ (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Succ#canCall| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Succ#requires| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Write (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Write#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Write#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Stutter (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Stutter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Stutter#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.NextStep (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.NextStep#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.NextStep#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Next (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Next#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Next#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Inv (T@U T@U) Bool)
(declare-fun |MapSpec.__default.Inv#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.Inv#requires| (T@U T@U) Bool)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#44| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.ReferenceType.__default () T@U)
(declare-fun ReferenceType.__default.Root () T@U)
(declare-fun |ReferenceType.__default.Root#requires| () Bool)
(declare-fun ReferenceType.__default.toRef (Int) T@U)
(declare-fun |ReferenceType.__default.toRef#canCall| (Int) Bool)
(declare-fun |ReferenceType.__default.toRef#requires| (Int) Bool)
(declare-fun ReferenceType.__default.toUint64 (T@U) Int)
(declare-fun |ReferenceType.__default.toUint64#canCall| (T@U) Bool)
(declare-fun |ReferenceType.__default.toUint64#requires| (T@U) Bool)
(declare-fun |#ValueMessage.Delta.NoDelta| () T@U)
(declare-fun ValueMessage.Delta.NoDelta_q (T@U) Bool)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun |$IsA#ValueMessage.Delta| (T@U) Bool)
(declare-fun |ValueMessage.Delta#Equal| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestring__to__Message (T@U) T@U)
(declare-fun |ValueMessage.__default.bytestring__to__Message#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestring__to__Message#requires| (T@U) Bool)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessageSeq (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.Message__to__bytestring (T@U) T@U)
(declare-fun |ValueMessage.__default.Message__to__bytestring#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.Message__to__bytestring#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.__default.messageSeq__to__bytestringSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestringSeq__to__MessageSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun ValueMessage.__default.DefineDefault () T@U)
(declare-fun |ValueMessage.__default.DefineDefault#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun |#BetreeGraph.Node.Node| (T@U T@U) T@U)
(declare-fun BetreeGraph.Node.Node_q (T@U) Bool)
(declare-fun Tclass.BetreeGraph.Node () T@U)
(declare-fun BetreeGraph.Node.children (T@U) T@U)
(declare-fun BetreeGraph.Node.buffer (T@U) T@U)
(declare-fun |$IsA#BetreeGraph.Node| (T@U) Bool)
(declare-fun |BetreeGraph.Node#Equal| (T@U T@U) Bool)
(declare-fun Tclass.BetreeGraph.__default () T@U)
(declare-fun BetreeGraph.__default.Successors (T@U) T@U)
(declare-fun |BetreeGraph.__default.Successors#canCall| (T@U) Bool)
(declare-fun |BetreeGraph.__default.Successors#requires| (T@U) Bool)
(declare-fun |lambda#48| (T@U T@U T@U T@U T@U) T@U)
(declare-fun BetreeGraph.__default.Root () T@U)
(declare-fun |BetreeGraph.__default.Root#requires| () Bool)
(declare-fun |ReferenceType.__default.Root#canCall| () Bool)
(declare-fun BetreeGraph.__default.IsClosed (T@U) Bool)
(declare-fun |BetreeGraph.__default.IsClosed#canCall| (T@U) Bool)
(declare-fun |BetreeGraph.__default.IsClosed#requires| (T@U) Bool)
(declare-fun BetreeGraph.__default.IsPath (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsPath#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsPath#requires| (T@U T@U) Bool)
(declare-fun BetreeGraph.__default.IsCycle (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsCycle#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsCycle#requires| (T@U T@U) Bool)
(declare-fun BetreeGraph.__default.IsSimple (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsSimple#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsSimple#requires| (T@U T@U) Bool)
(declare-fun BetreeGraph.__default.IsAcyclic (T@U) Bool)
(declare-fun |BetreeGraph.__default.IsAcyclic#canCall| (T@U) Bool)
(declare-fun |BetreeGraph.__default.IsAcyclic#requires| (T@U) Bool)
(declare-fun BetreeGraph.__default.IsPathFromTo (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsPathFromTo#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.IsPathFromTo#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BetreeGraph.__default.ReachableReferences (T@U T@U) T@U)
(declare-fun |BetreeGraph.__default.ReachableReferences#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.ReachableReferences#requires| (T@U T@U) Bool)
(declare-fun |lambda#50| (T@U T@U Int Int T@U T@U T@U Int T@U) T@U)
(declare-fun BetreeGraph.__default.NewPath (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewPath#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewPath#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BetreeGraph.__default.NewlyReachableReferences (T@U T@U T@U) T@U)
(declare-fun |BetreeGraph.__default.NewlyReachableReferences#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewlyReachableReferences#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#52| (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun BetreeGraph.__default.EditIsLocal (T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.EditIsLocal#canCall| (T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.EditIsLocal#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeGraph.__default.NewNodesAreCycleFree (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewNodesAreCycleFree#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.NewNodesAreCycleFree#requires| (T@U T@U) Bool)
(declare-fun BetreeGraph.__default.FirstInGraph (T@U T@U T@U) Int)
(declare-fun |BetreeGraph.__default.FirstInGraph#canCall| (T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.FirstInGraph#requires| (T@U T@U T@U) Bool)
(declare-fun BetreeGraph.__default.UndoLocalEdit (T@U T@U T@U T@U T@U) T@U)
(declare-fun |BetreeGraph.__default.UndoLocalEdit#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BetreeGraph.__default.UndoLocalEdit#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |$let#4_replacement| (T@U T@U T@U) T@U)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun |#BetreeGraph.Op.AllocOp| (T@U T@U) T@U)
(declare-fun BetreeGraph.Op.AllocOp_q (T@U) Bool)
(declare-fun Tclass.BetreeGraph.Op () T@U)
(declare-fun BetreeGraph.Op.ref (T@U) T@U)
(declare-fun BetreeGraph.Op.node (T@U) T@U)
(declare-fun |#BetreeGraph.Op.WriteOp| (T@U T@U) T@U)
(declare-fun BetreeGraph.Op.WriteOp_q (T@U) Bool)
(declare-fun |$IsA#BetreeGraph.Op| (T@U) Bool)
(declare-fun |BetreeGraph.Op#Equal| (T@U T@U) Bool)
(declare-fun |#BetreeGraph.ReadOp.ReadOp| (T@U T@U) T@U)
(declare-fun BetreeGraph.ReadOp.ReadOp_q (T@U) Bool)
(declare-fun Tclass.BetreeGraph.ReadOp () T@U)
(declare-fun BetreeGraph.ReadOp.ref (T@U) T@U)
(declare-fun BetreeGraph.ReadOp.node (T@U) T@U)
(declare-fun |$IsA#BetreeGraph.ReadOp| (T@U) Bool)
(declare-fun |BetreeGraph.ReadOp#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#54| (T@U T@U T@U) T@U)
(declare-fun |lambda#55| (T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#58| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove11 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#72| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#86| (T@U T@U T@U) T@U)
(declare-fun |lambda#87| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#106| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#107| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#110| (T@U T@U) T@U)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun Tclass.Byte__Order.__default () T@U)
(declare-fun Byte__Order.__default.SomeElement () Int)
(declare-fun |Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Byte__Order.__default.lte (T@U Int Int) Bool)
(declare-fun StartFuel_Byte_Order._default.ltedef () T@U)
(declare-fun |Byte__Order.__default.lte#canCall| (Int Int) Bool)
(declare-fun Byte__Order.__default.ltedef (T@U Int Int) Bool)
(declare-fun |Byte__Order.__default.lte#requires| (T@U Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.ltedef0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.ltedef () T@U)
(declare-fun MoreFuel_Byte_Order._default.ltedef1 () T@U)
(declare-fun |Byte__Order.__default.ltedef#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.ltedef#requires| (T@U Int Int) Bool)
(declare-fun Byte__Order.__default.LargestLte (T@U T@U Int) Int)
(declare-fun StartFuel_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Byte_Order._default.lte () T@U)
(declare-fun |Byte__Order.__default.LargestLte#canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Byte__Order.__default.lt (Int Int) Bool)
(declare-fun |Byte__Order.__default.LargestLte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsSorted () T@U)
(declare-fun |Byte__Order.__default.lt#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Byte__Order.__default.LargestLt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.LargestLt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.LargestLt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Byte__Order.__default.IndexOfFirstGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.IndexOfFirstGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.NotMinimum (T@U Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#canCall| (Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#requires| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapPivotedUnion (T@U T@U Int T@U) T@U)
(declare-fun |Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U Int T@U) Bool)
(declare-fun |lambda#114| (T@U Int) T@U)
(declare-fun |lambda#115| (T@U T@U Int) T@U)
(declare-fun Byte__Order.__default.SetSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SetSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SetSuccessor#requires| (T@U Int) Bool)
(declare-fun |$let#8_next| (T@U Int) Int)
(declare-fun |$let#8$canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapSuccessor (T@U T@U Int) T@U)
(declare-fun |Byte__Order.__default.MapSuccessor#canCall| (T@U T@U Int) Bool)
(declare-fun |Byte__Order.__default.MapSuccessor#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SeqSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SeqSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SeqSuccessor#requires| (T@U Int) Bool)
(declare-fun |lambda#126| (T@U T@U) T@U)
(declare-fun Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Byte__Order.__default.minimum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#11_a| (T@U) Int)
(declare-fun |$let#11$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.minimum () T@U)
(declare-fun Byte__Order.__default.maximum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#14_a| (T@U) Int)
(declare-fun |$let#14$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.maximum () T@U)
(declare-fun |Byte__Order.__default.lt#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Min (Int Int) Int)
(declare-fun |Byte__Order.__default.Min#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Min#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Max (Int Int) Int)
(declare-fun |Byte__Order.__default.Max#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Max#requires| (Int Int) Bool)
(declare-fun |Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Lexicographic__Byte__Order.__default.SomeElement () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Lexicographic__Byte__Order.__default.lte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.ltedef (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.LargestLte (T@U T@U T@U) Int)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.lt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.LargestLt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.NotMinimum (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapPivotedUnion (T@U T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#130| (T@U T@U) T@U)
(declare-fun |lambda#131| (T@U T@U) T@U)
(declare-fun Lexicographic__Byte__Order.__default.SetSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#requires| (T@U T@U) Bool)
(declare-fun |$let#17_next| (T@U T@U) T@U)
(declare-fun |$let#17$canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapSuccessor (T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SeqSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#20_a| (T@U) T@U)
(declare-fun |$let#20$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun Lexicographic__Byte__Order.__default.maximum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#23_a| (T@U) T@U)
(declare-fun |$let#23$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.lt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Min (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Min#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Min#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Max (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Max#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Max#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tclass.PivotsLib.__default () T@U)
(declare-fun PivotsLib.__default.WFPivots (T@U) Bool)
(declare-fun |PivotsLib.__default.WFPivots#canCall| (T@U) Bool)
(declare-fun |PivotsLib.__default.WFPivots#requires| (T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun PivotsLib.__default.NumBuckets (T@U) Int)
(declare-fun |PivotsLib.__default.NumBuckets#canCall| (T@U) Bool)
(declare-fun |PivotsLib.__default.NumBuckets#requires| (T@U) Bool)
(declare-fun PivotsLib.__default.Route (T@U T@U) Int)
(declare-fun |PivotsLib.__default.Route#canCall| (T@U T@U) Bool)
(declare-fun |PivotsLib.__default.Route#requires| (T@U T@U) Bool)
(declare-fun PivotsLib.__default.PivotInsertable (T@U Int T@U) Bool)
(declare-fun |PivotsLib.__default.PivotInsertable#canCall| (T@U Int T@U) Bool)
(declare-fun |PivotsLib.__default.PivotInsertable#requires| (T@U Int T@U) Bool)
(declare-fun PivotsLib.__default.CutoffForLeft (T@U T@U T@U) Int)
(declare-fun |PivotsLib.__default.CutoffForLeft#canCall| (T@U T@U) Bool)
(declare-fun |PivotsLib.__default.CutoffForLeft#requires| (T@U T@U T@U) Bool)
(declare-fun PivotsLib.__default.CutoffForRight (T@U T@U T@U) Int)
(declare-fun |PivotsLib.__default.CutoffForRight#canCall| (T@U T@U) Bool)
(declare-fun |PivotsLib.__default.CutoffForRight#requires| (T@U T@U T@U) Bool)
(declare-fun PivotsLib.__default.PivotTableBucketKeySet (T@U Int) T@U)
(declare-fun |PivotsLib.__default.PivotTableBucketKeySet#canCall| (T@U Int) Bool)
(declare-fun |PivotsLib.__default.PivotTableBucketKeySet#requires| (T@U Int) Bool)
(declare-fun |lambda#146| (T@U T@U Int) T@U)
(declare-fun Tclass.Multisets.__default () T@U)
(declare-fun Multisets.__default.Choose (T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.Choose#canCall| (T@U T@U) Bool)
(declare-fun |Multisets.__default.Choose#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#26_a| (T@U T@U) T@U)
(declare-fun |$let#26$canCall| (T@U T@U) Bool)
(declare-fun Multisets.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.Choose () T@U)
(declare-fun Multisets.__default.Foldable (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Foldable#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Foldable#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.Fold (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.Fold#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Fold#requires| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.FoldSimple (T@U T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.FoldSimple#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.FoldSimple#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#152| (T@U) T@U)
(declare-fun |lambda#148| (T@U) T@U)
(declare-fun |lambda#149| (T@U) T@U)
(declare-fun |lambda#151| (T@U) T@U)
(declare-fun |lambda#150| (Bool) T@U)
(declare-fun StartFuel_Multisets._default.Fold () T@U)
(declare-fun Multisets.__default.IsIdentity (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentity#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentity#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.IsCommutative (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutative#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutative#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.IsAssociative (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociative#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociative#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.IsIdentitySimple (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentitySimple#canCall| (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentitySimple#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.IsIdentity () T@U)
(declare-fun Multisets.__default.IsCommutativeSimple (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutativeSimple#canCall| (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutativeSimple#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.IsCommutative () T@U)
(declare-fun Multisets.__default.IsAssociativeSimple (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociativeSimple#canCall| (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociativeSimple#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.IsAssociative () T@U)
(declare-fun Multisets.__default.AddNat (Int Int) Int)
(declare-fun |Multisets.__default.AddNat#canCall| (Int Int) Bool)
(declare-fun |Multisets.__default.AddNat#requires| (Int Int) Bool)
(declare-fun Multisets.__default.ValueMultisetFn (T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.ValueMultisetFn#canCall| (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.ValueMultisetFn#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#238| (T@U) T@U)
(declare-fun |lambda#239| (T@U T@U) T@U)
(declare-fun Multisets.__default.ValueMultiset (T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.ValueMultiset#canCall| (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.ValueMultiset#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.Apply () T@U)
(declare-fun |#BucketsLib.Bucket.BucketMapWithSeq| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.Bucket.BucketMapWithSeq_q (T@U) Bool)
(declare-fun BucketsLib.Bucket.b (T@U) T@U)
(declare-fun BucketsLib.Bucket.keys (T@U) T@U)
(declare-fun BucketsLib.Bucket.msgs (T@U) T@U)
(declare-fun |$IsA#BucketsLib.Bucket| (T@U) Bool)
(declare-fun |BucketsLib.Bucket#Equal| (T@U T@U) Bool)
(declare-fun Tclass.BucketsLib.__default () T@U)
(declare-fun BucketsLib.__default.maximumKey (T@U) T@U)
(declare-fun |BucketsLib.__default.maximumKey#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.maximumKey#requires| (T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun BucketsLib.__default.minimumKey (T@U) T@U)
(declare-fun |BucketsLib.__default.minimumKey#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.minimumKey#requires| (T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun BucketsLib.__default.BucketMapOfSeq (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketMapOfSeq#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketMapOfSeq#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketOfSeq (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketOfSeq#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketOfSeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.BucketMapOfSeq () T@U)
(declare-fun BucketsLib.__default.WFBucketMap (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketMap#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketMap#requires| (T@U) Bool)
(declare-fun |ValueMessage.__default.IdentityMessage#canCall| () Bool)
(declare-fun BucketsLib.__default.WFMessageSeq (T@U) Bool)
(declare-fun |BucketsLib.__default.WFMessageSeq#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFMessageSeq#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.PreWFBucket (T@U) Bool)
(declare-fun |BucketsLib.__default.PreWFBucket#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.PreWFBucket#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.WFBucket (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucket#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucket#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.BucketWellMarshalled (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketWellMarshalled#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketWellMarshalled#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.BucketListWellMarshalled (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListWellMarshalled#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListWellMarshalled#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.BInternal (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BInternal#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BInternal#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.B (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.B#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.B#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.EmptyBucket () T@U)
(declare-fun StartFuel_BucketsLib._default.B () T@U)
(declare-fun |BucketsLib.__default.EmptyBucket#requires| () Bool)
(declare-fun BucketsLib.__default.SingletonBucket (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SingletonBucket#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SingletonBucket#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketDropLast (T@U) T@U)
(declare-fun |BucketsLib.__default.BucketDropLast#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketDropLast#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.WFBucketAt (T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.WFBucketAt#canCall| (T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.WFBucketAt#requires| (T@U T@U Int) Bool)
(declare-fun BucketsLib.__default.WFBucketList (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketList#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketList#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.WFBucketListProper (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketListProper#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketListProper#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketGet (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketGet#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketGet#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketListGet (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketListGet#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListGet#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketInsert (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketInsert#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketInsert#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketListInsert (T@U T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketListInsert#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListInsert#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketListItemFlush (T@U T@U T@U Int) T@U)
(declare-fun |BucketsLib.__default.BucketListItemFlush#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.BucketListItemFlush#requires| (T@U T@U T@U Int) Bool)
(declare-fun |lambda#248| (T@U T@U T@U T@U Int T@U T@U T@U) T@U)
(declare-fun |lambda#249| (T@U T@U) T@U)
(declare-fun BucketsLib.__default.BucketListFlushPartial (T@U T@U T@U T@U Int) T@U)
(declare-fun |BucketsLib.__default.BucketListFlushPartial#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.BucketListFlushPartial#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun BucketsLib.__default.BucketListFlush (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketListFlush#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListFlush#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.JoinBucketList (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.JoinBucketList#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.JoinBucketList#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun BucketsLib.__default.SplitBucketOnPivots (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketOnPivots#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketOnPivots#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#256| (T@U T@U T@U) T@U)
(declare-fun |lambda#258| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.ClampToSlot (T@U T@U Int) T@U)
(declare-fun |BucketsLib.__default.ClampToSlot#canCall| (T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.ClampToSlot#requires| (T@U T@U Int) Bool)
(declare-fun |lambda#286| (T@U T@U T@U Int) T@U)
(declare-fun BucketsLib.__default.BucketIntersect (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketIntersect#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketIntersect#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#294| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.BucketComplement (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketComplement#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketComplement#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#302| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.BucketsEquivalentForKey (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketsEquivalentForKey#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketsEquivalentForKey#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketsEquivalent (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketsEquivalent#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketsEquivalent#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.Compose (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.Compose#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.Compose#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#310| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.ComposeSeq (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.ComposeSeq#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.ComposeSeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.Compose () T@U)
(declare-fun BucketsLib.__default.FlushEquivalentParentChild (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.FlushEquivalentParentChild#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.FlushEquivalentParentChild#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.FlushEquivalent (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.FlushEquivalent#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.FlushEquivalent#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.InterpretBucketStack (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.InterpretBucketStack#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.InterpretBucketStack#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.ClampRange (T@U T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.ClampRange#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.ClampRange#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#318| (T@U T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.ClampStart (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.ClampStart#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.ClampStart#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#326| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.ClampEnd (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.ClampEnd#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.ClampEnd#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#334| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.KeyValueMapOfBucket (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.KeyValueMapOfBucket#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.KeyValueMapOfBucket#requires| (T@U T@U) Bool)
(declare-fun |lambda#342| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#343| (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.DefineDefault#canCall| () Bool)
(declare-fun BucketsLib.__default.SortedSeqOfKeyValueMap (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.SortedSeqOfKeyValueMap#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.SplitBucketLeft (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketLeft#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketLeft#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.SplitBucketRight (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketRight#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketRight#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.SplitBucketListLeft (T@U T@U Int T@U) T@U)
(declare-fun StartFuel_PivotsLib._default.CutoffForLeft () T@U)
(declare-fun |BucketsLib.__default.SplitBucketListLeft#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketListLeft#requires| (T@U T@U Int T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.SplitBucketLeft () T@U)
(declare-fun BucketsLib.__default.SplitBucketListRight (T@U T@U Int T@U) T@U)
(declare-fun StartFuel_PivotsLib._default.CutoffForRight () T@U)
(declare-fun |BucketsLib.__default.SplitBucketListRight#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketListRight#requires| (T@U T@U Int T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.SplitBucketRight () T@U)
(declare-fun BucketsLib.__default.SplitBucketInList (T@U T@U Int T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketInList#canCall| (T@U Int T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketInList#requires| (T@U T@U Int T@U) Bool)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun BucketsLib.__default.MergeBuckets (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.MergeBuckets#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.MergeBuckets#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.MergeBucketsInList (T@U T@U Int) T@U)
(declare-fun |BucketsLib.__default.MergeBucketsInList#canCall| (T@U Int) Bool)
(declare-fun |BucketsLib.__default.MergeBucketsInList#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_BucketsLib._default.MergeBuckets () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun BucketsLib.__default.emptyList (T@U Int) T@U)
(declare-fun |BucketsLib.__default.emptyList#canCall| (Int) Bool)
(declare-fun |BucketsLib.__default.emptyList#requires| (T@U Int) Bool)
(declare-fun BucketsLib.__default.binarySearch (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.binarySearch#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.binarySearch#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.bucketBinarySearchLookup (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.bucketBinarySearchLookup#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.bucketBinarySearchLookup#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.getMiddleKey (T@U) T@U)
(declare-fun |BucketsLib.__default.getMiddleKey#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.getMiddleKey#requires| (T@U) Bool)
(declare-fun |#PivotBetreeGraph.Node.Node| (T@U T@U T@U) T@U)
(declare-fun PivotBetreeGraph.Node.Node_q (T@U) Bool)
(declare-fun PivotBetreeGraph.Node.pivotTable (T@U) T@U)
(declare-fun PivotBetreeGraph.Node.children (T@U) T@U)
(declare-fun PivotBetreeGraph.Node.buckets (T@U) T@U)
(declare-fun |$IsA#PivotBetreeGraph.Node| (T@U) Bool)
(declare-fun |PivotBetreeGraph.Node#Equal| (T@U T@U) Bool)
(declare-fun Tclass.PivotBetreeGraph.__default () T@U)
(declare-fun PivotBetreeGraph.__default.Successors (T@U) T@U)
(declare-fun |PivotBetreeGraph.__default.Successors#canCall| (T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.Successors#requires| (T@U) Bool)
(declare-fun |lambda#362| (Int Int T@U T@U) T@U)
(declare-fun PivotBetreeGraph.__default.Root () T@U)
(declare-fun |PivotBetreeGraph.__default.Root#requires| () Bool)
(declare-fun PivotBetreeGraph.__default.IsClosed (T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsClosed#canCall| (T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsClosed#requires| (T@U) Bool)
(declare-fun PivotBetreeGraph.__default.IsPath (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsPath#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsPath#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeGraph.__default.IsCycle (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsCycle#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsCycle#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeGraph.__default.IsSimple (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsSimple#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsSimple#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeGraph.__default.IsAcyclic (T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsAcyclic#canCall| (T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsAcyclic#requires| (T@U) Bool)
(declare-fun PivotBetreeGraph.__default.IsPathFromTo (T@U T@U T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsPathFromTo#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.IsPathFromTo#requires| (T@U T@U T@U T@U) Bool)
(declare-fun PivotBetreeGraph.__default.ReachableReferences (T@U T@U) T@U)
(declare-fun |PivotBetreeGraph.__default.ReachableReferences#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.ReachableReferences#requires| (T@U T@U) Bool)
(declare-fun |lambda#364| (T@U T@U Int Int T@U T@U T@U Int T@U) T@U)
(declare-fun PivotBetreeGraph.__default.NewPath (T@U T@U T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.NewPath#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.NewPath#requires| (T@U T@U T@U T@U) Bool)
(declare-fun PivotBetreeGraph.__default.NewlyReachableReferences (T@U T@U T@U) T@U)
(declare-fun |PivotBetreeGraph.__default.NewlyReachableReferences#canCall| (T@U T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.NewlyReachableReferences#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#366| (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun PivotBetreeGraph.__default.EditIsLocal (T@U T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.EditIsLocal#canCall| (T@U T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.EditIsLocal#requires| (T@U T@U T@U) Bool)
(declare-fun PivotBetreeGraph.__default.NewNodesAreCycleFree (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.NewNodesAreCycleFree#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.NewNodesAreCycleFree#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeGraph.__default.FirstInGraph (T@U T@U T@U) Int)
(declare-fun |PivotBetreeGraph.__default.FirstInGraph#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.FirstInGraph#requires| (T@U T@U T@U) Bool)
(declare-fun PivotBetreeGraph.__default.UndoLocalEdit (T@U T@U T@U T@U T@U) T@U)
(declare-fun |PivotBetreeGraph.__default.UndoLocalEdit#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.UndoLocalEdit#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |$let#29_replacement| (T@U T@U T@U) T@U)
(declare-fun |$let#29$canCall| (T@U T@U T@U) Bool)
(declare-fun |#PivotBetreeGraph.Op.AllocOp| (T@U T@U) T@U)
(declare-fun PivotBetreeGraph.Op.AllocOp_q (T@U) Bool)
(declare-fun Tclass.PivotBetreeGraph.Op () T@U)
(declare-fun PivotBetreeGraph.Op.ref (T@U) T@U)
(declare-fun PivotBetreeGraph.Op.node (T@U) T@U)
(declare-fun |#PivotBetreeGraph.Op.WriteOp| (T@U T@U) T@U)
(declare-fun PivotBetreeGraph.Op.WriteOp_q (T@U) Bool)
(declare-fun |$IsA#PivotBetreeGraph.Op| (T@U) Bool)
(declare-fun |PivotBetreeGraph.Op#Equal| (T@U T@U) Bool)
(declare-fun |#PivotBetreeGraph.ReadOp.ReadOp| (T@U T@U) T@U)
(declare-fun PivotBetreeGraph.ReadOp.ReadOp_q (T@U) Bool)
(declare-fun Tclass.PivotBetreeGraph.ReadOp () T@U)
(declare-fun PivotBetreeGraph.ReadOp.ref (T@U) T@U)
(declare-fun PivotBetreeGraph.ReadOp.node (T@U) T@U)
(declare-fun |$IsA#PivotBetreeGraph.ReadOp| (T@U) Bool)
(declare-fun |PivotBetreeGraph.ReadOp#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Bounds.__default () T@U)
(declare-fun Bounds.__default.NodeBlockSizeUint64 () Int)
(declare-fun |Bounds.__default.NodeBlockSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.MinNodeBlockIndexUint64 () Int)
(declare-fun |Bounds.__default.MinNodeBlockIndexUint64#requires| () Bool)
(declare-fun |Bounds.__default.SuperblockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.DiskNumJournalBlocksUint64#canCall| () Bool)
(declare-fun |Bounds.__default.JournalBlockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.NodeBlockSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.SuperblockSizeUint64 () Int)
(declare-fun Bounds.__default.DiskNumJournalBlocksUint64 () Int)
(declare-fun Bounds.__default.JournalBlockSizeUint64 () Int)
(declare-fun Bounds.__default.IndirectionTableBlockSizeUint64 () Int)
(declare-fun |Bounds.__default.SuperblockSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.JournalBlockSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.DiskNumJournalBlocksUint64#requires| () Bool)
(declare-fun |Bounds.__default.IndirectionTableBlockSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.LargestBlockSizeOfAnyTypeUint64 () Int)
(declare-fun |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxTotalBucketWeightUint64 () Int)
(declare-fun |Bounds.__default.MaxTotalBucketWeightUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxCacheSizeUint64 () Int)
(declare-fun |Bounds.__default.MaxCacheSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxNumChildrenUint64 () Int)
(declare-fun |Bounds.__default.MaxNumChildrenUint64#requires| () Bool)
(declare-fun Bounds.__default.FlushTriggerWeightUint64 () Int)
(declare-fun |Bounds.__default.FlushTriggerWeightUint64#requires| () Bool)
(declare-fun |Bounds.__default.MaxTotalBucketWeightUint64#canCall| () Bool)
(declare-fun Bounds.__default.NumBlocksUint64 () Int)
(declare-fun |Bounds.__default.NumBlocksUint64#requires| () Bool)
(declare-fun Bounds.__default.IndirectionTableMaxSizeUint64 () Int)
(declare-fun |Bounds.__default.IndirectionTableMaxSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.SuperblockSize#requires| () Bool)
(declare-fun Bounds.__default.SuperblockSize () Int)
(declare-fun |Bounds.__default.IndirectionTableBlockSize#requires| () Bool)
(declare-fun Bounds.__default.IndirectionTableBlockSize () Int)
(declare-fun |Bounds.__default.NodeBlockSize#requires| () Bool)
(declare-fun Bounds.__default.NodeBlockSize () Int)
(declare-fun |Bounds.__default.MinNodeBlockIndex#requires| () Bool)
(declare-fun |Bounds.__default.MinNodeBlockIndexUint64#canCall| () Bool)
(declare-fun Bounds.__default.MinNodeBlockIndex () Int)
(declare-fun |Bounds.__default.MaxNumChildren#requires| () Bool)
(declare-fun |Bounds.__default.MaxNumChildrenUint64#canCall| () Bool)
(declare-fun Bounds.__default.MaxNumChildren () Int)
(declare-fun |Bounds.__default.MaxTotalBucketWeight#requires| () Bool)
(declare-fun Bounds.__default.MaxTotalBucketWeight () Int)
(declare-fun |Bounds.__default.MaxCacheSize#requires| () Bool)
(declare-fun |Bounds.__default.MaxCacheSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.MaxCacheSize () Int)
(declare-fun |Bounds.__default.FlushTriggerWeight#requires| () Bool)
(declare-fun |Bounds.__default.FlushTriggerWeightUint64#canCall| () Bool)
(declare-fun Bounds.__default.FlushTriggerWeight () Int)
(declare-fun |Bounds.__default.NumBlocks#requires| () Bool)
(declare-fun |Bounds.__default.NumBlocksUint64#canCall| () Bool)
(declare-fun Bounds.__default.NumBlocks () Int)
(declare-fun |Bounds.__default.IndirectionTableMaxSize#requires| () Bool)
(declare-fun |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.IndirectionTableMaxSize () Int)
(declare-fun |Bounds.__default.JournalBlockSize#requires| () Bool)
(declare-fun Bounds.__default.JournalBlockSize () Int)
(declare-fun |Bounds.__default.DiskNumJournalBlocks#requires| () Bool)
(declare-fun Bounds.__default.DiskNumJournalBlocks () Int)
(declare-fun Tclass.Sets.__default () T@U)
(declare-fun Sets.__default.SetRange (Int) T@U)
(declare-fun |Sets.__default.SetRange#requires| (Int) Bool)
(declare-fun |lambda#368| (T@U Int Int) T@U)
(declare-fun Tclass.BucketWeights.__default () T@U)
(declare-fun BucketWeights.__default.WeightKey (T@U) Int)
(declare-fun |BucketWeights.__default.WeightKey#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKey#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.WeightMessage (T@U) Int)
(declare-fun |BucketWeights.__default.WeightMessage#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessage#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.WeightKeyUint64 (T@U) Int)
(declare-fun |BucketWeights.__default.WeightKeyUint64#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKeyUint64#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.WeightMessageUint64 (T@U) Int)
(declare-fun |BucketWeights.__default.WeightMessageUint64#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessageUint64#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.WeightKeyMultiset (T@U T@U) Int)
(declare-fun |BucketWeights.__default.WeightKeyMultiset#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKeyMultiset#requires| (T@U T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKey#Handle| () T@U)
(declare-fun |Multisets.__default.AddNat#Handle| () T@U)
(declare-fun BucketWeights.__default.WeightKeySeq (T@U T@U) Int)
(declare-fun |BucketWeights.__default.WeightKeySeq#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKeySeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun BucketWeights.__default.WeightMessageMultiset (T@U T@U) Int)
(declare-fun |BucketWeights.__default.WeightMessageMultiset#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessageMultiset#requires| (T@U T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessage#Handle| () T@U)
(declare-fun BucketWeights.__default.WeightMessageSeq (T@U T@U) Int)
(declare-fun |BucketWeights.__default.WeightMessageSeq#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessageSeq#requires| (T@U T@U) Bool)
(declare-fun BucketWeights.__default.WeightKeyList (T@U) Int)
(declare-fun |BucketWeights.__default.WeightKeyList#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKeyList#requires| (T@U) Bool)
(declare-fun StartFuel_BucketWeights._default.WeightKeyMultiset () T@U)
(declare-fun BucketWeights.__default.WeightMessageList (T@U) Int)
(declare-fun |BucketWeights.__default.WeightMessageList#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessageList#requires| (T@U) Bool)
(declare-fun StartFuel_BucketWeights._default.WeightMessageMultiset () T@U)
(declare-fun BucketWeights.__default.WeightBucket (T@U) Int)
(declare-fun |BucketWeights.__default.WeightBucket#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightBucket#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.WeightBucketList (T@U T@U) Int)
(declare-fun |BucketWeights.__default.WeightBucketList#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightBucketList#requires| (T@U T@U) Bool)
(declare-fun BucketWeights.__default.AllKeys () T@U)
(declare-fun |BucketWeights.__default.AllKeys#requires| () Bool)
(declare-fun |lambda#370| (T@U Bool) T@U)
(declare-fun BucketWeights.__default.IncludeKey (T@U) T@U)
(declare-fun |BucketWeights.__default.IncludeKey#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.IncludeKey#requires| (T@U) Bool)
(declare-fun |lambda#372| (T@U T@U) T@U)
(declare-fun BucketWeights.__default.ExcludeKey (T@U) T@U)
(declare-fun |BucketWeights.__default.ExcludeKey#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.ExcludeKey#requires| (T@U) Bool)
(declare-fun |lambda#374| (T@U T@U) T@U)
(declare-fun BucketWeights.__default.Image (T@U T@U T@U) T@U)
(declare-fun |BucketWeights.__default.Image#canCall| (T@U T@U) Bool)
(declare-fun |BucketWeights.__default.Image#requires| (T@U T@U T@U) Bool)
(declare-fun BucketWeights.__default.WeightOneKey (T@U T@U) Int)
(declare-fun |BucketWeights.__default.WeightOneKey#canCall| (T@U T@U) Bool)
(declare-fun |BucketWeights.__default.WeightOneKey#requires| (T@U T@U) Bool)
(declare-fun BucketWeights.__default.ILeftKeys (T@U) T@U)
(declare-fun |BucketWeights.__default.ILeftKeys#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.ILeftKeys#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.IRightKeys (T@U) T@U)
(declare-fun |BucketWeights.__default.IRightKeys#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.IRightKeys#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.RouteRange (T@U Int) T@U)
(declare-fun |BucketWeights.__default.RouteRange#canCall| (T@U Int) Bool)
(declare-fun |BucketWeights.__default.RouteRange#requires| (T@U Int) Bool)
(declare-fun BucketWeights.__default.RouteRanges (T@U Int) T@U)
(declare-fun |BucketWeights.__default.RouteRanges#canCall| (T@U Int) Bool)
(declare-fun |BucketWeights.__default.RouteRanges#requires| (T@U Int) Bool)
(declare-fun |lambda#394| (T@U T@U Int) T@U)
(declare-fun |#PivotBetreeSpec.LookupQuery.LookupQuery| (T@U T@U T@U) T@U)
(declare-fun PivotBetreeSpec.LookupQuery.LookupQuery_q (T@U) Bool)
(declare-fun PivotBetreeSpec.LookupQuery.key (T@U) T@U)
(declare-fun PivotBetreeSpec.LookupQuery.value (T@U) T@U)
(declare-fun PivotBetreeSpec.LookupQuery.lookup (T@U) T@U)
(declare-fun |$IsA#PivotBetreeSpec.LookupQuery| (T@U) Bool)
(declare-fun |PivotBetreeSpec.LookupQuery#Equal| (T@U T@U) Bool)
(declare-fun |#PivotBetreeSpec.SuccQuery.SuccQuery| (T@U T@U T@U T@U T@U) T@U)
(declare-fun PivotBetreeSpec.SuccQuery.SuccQuery_q (T@U) Bool)
(declare-fun PivotBetreeSpec.SuccQuery.start (T@U) T@U)
(declare-fun PivotBetreeSpec.SuccQuery.results (T@U) T@U)
(declare-fun PivotBetreeSpec.SuccQuery.end (T@U) T@U)
(declare-fun PivotBetreeSpec.SuccQuery.buckets (T@U) T@U)
(declare-fun PivotBetreeSpec.SuccQuery.lookup (T@U) T@U)
(declare-fun |$IsA#PivotBetreeSpec.SuccQuery| (T@U) Bool)
(declare-fun |PivotBetreeSpec.SuccQuery#Equal| (T@U T@U) Bool)
(declare-fun |#PivotBetreeSpec.MessageInsertion.MessageInsertion| (T@U T@U T@U) T@U)
(declare-fun PivotBetreeSpec.MessageInsertion.MessageInsertion_q (T@U) Bool)
(declare-fun PivotBetreeSpec.MessageInsertion.key (T@U) T@U)
(declare-fun PivotBetreeSpec.MessageInsertion.msg (T@U) T@U)
(declare-fun PivotBetreeSpec.MessageInsertion.oldroot (T@U) T@U)
(declare-fun |$IsA#PivotBetreeSpec.MessageInsertion| (T@U) Bool)
(declare-fun |PivotBetreeSpec.MessageInsertion#Equal| (T@U T@U) Bool)
(declare-fun |#PivotBetreeSpec.NodeFlush.NodeFlush| (T@U T@U T@U T@U T@U T@U Int T@U T@U T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFlush.NodeFlush_q (T@U) Bool)
(declare-fun PivotBetreeSpec.NodeFlush.parentref (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFlush.parent (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFlush.childref (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFlush.child (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFlush.newchildref (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFlush.newchild (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFlush.slotIndex (T@U) Int)
(declare-fun PivotBetreeSpec.NodeFlush.keys (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFlush.newParentBucket (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFlush.newChildBuckets (T@U) T@U)
(declare-fun |$IsA#PivotBetreeSpec.NodeFlush| (T@U) Bool)
(declare-fun |PivotBetreeSpec.NodeFlush#Equal| (T@U T@U) Bool)
(declare-fun |#PivotBetreeSpec.RootGrowth.RootGrowth| (T@U T@U) T@U)
(declare-fun PivotBetreeSpec.RootGrowth.RootGrowth_q (T@U) Bool)
(declare-fun PivotBetreeSpec.RootGrowth.oldroot (T@U) T@U)
(declare-fun PivotBetreeSpec.RootGrowth.newchildref (T@U) T@U)
(declare-fun |$IsA#PivotBetreeSpec.RootGrowth| (T@U) Bool)
(declare-fun |PivotBetreeSpec.RootGrowth#Equal| (T@U T@U) Bool)
(declare-fun |#PivotBetreeSpec.NodeFusion.NodeFusion| (T@U T@U T@U T@U T@U T@U T@U T@U T@U Int Int T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.NodeFusion_q (T@U) Bool)
(declare-fun PivotBetreeSpec.NodeFusion.parentref (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.fused__childref (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.left__childref (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.right__childref (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.fused__parent (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.split__parent (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.fused__child (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.left__child (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.right__child (T@U) T@U)
(declare-fun PivotBetreeSpec.NodeFusion.slot__idx (T@U) Int)
(declare-fun PivotBetreeSpec.NodeFusion.num__children__left (T@U) Int)
(declare-fun PivotBetreeSpec.NodeFusion.pivot (T@U) T@U)
(declare-fun |$IsA#PivotBetreeSpec.NodeFusion| (T@U) Bool)
(declare-fun |PivotBetreeSpec.NodeFusion#Equal| (T@U T@U) Bool)
(declare-fun |#PivotBetreeSpec.Repivot.Repivot| (T@U T@U T@U) T@U)
(declare-fun PivotBetreeSpec.Repivot.Repivot_q (T@U) Bool)
(declare-fun PivotBetreeSpec.Repivot.ref (T@U) T@U)
(declare-fun PivotBetreeSpec.Repivot.leaf (T@U) T@U)
(declare-fun PivotBetreeSpec.Repivot.pivots (T@U) T@U)
(declare-fun |$IsA#PivotBetreeSpec.Repivot| (T@U) Bool)
(declare-fun |PivotBetreeSpec.Repivot#Equal| (T@U T@U) Bool)
(declare-fun |#PivotBetreeSpec.BetreeStep.BetreeQuery| (T@U) T@U)
(declare-fun PivotBetreeSpec.BetreeStep.BetreeQuery_q (T@U) Bool)
(declare-fun PivotBetreeSpec.BetreeStep.q (T@U) T@U)
(declare-fun |#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| (T@U) T@U)
(declare-fun PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (T@U) Bool)
(declare-fun PivotBetreeSpec.BetreeStep.sq (T@U) T@U)
(declare-fun |#PivotBetreeSpec.BetreeStep.BetreeInsert| (T@U) T@U)
(declare-fun PivotBetreeSpec.BetreeStep.BetreeInsert_q (T@U) Bool)
(declare-fun PivotBetreeSpec.BetreeStep.ins (T@U) T@U)
(declare-fun |#PivotBetreeSpec.BetreeStep.BetreeFlush| (T@U) T@U)
(declare-fun PivotBetreeSpec.BetreeStep.BetreeFlush_q (T@U) Bool)
(declare-fun PivotBetreeSpec.BetreeStep.flush (T@U) T@U)
(declare-fun |#PivotBetreeSpec.BetreeStep.BetreeGrow| (T@U) T@U)
(declare-fun PivotBetreeSpec.BetreeStep.BetreeGrow_q (T@U) Bool)
(declare-fun PivotBetreeSpec.BetreeStep.growth (T@U) T@U)
(declare-fun |#PivotBetreeSpec.BetreeStep.BetreeSplit| (T@U) T@U)
(declare-fun PivotBetreeSpec.BetreeStep.BetreeSplit_q (T@U) Bool)
(declare-fun PivotBetreeSpec.BetreeStep.fusion (T@U) T@U)
(declare-fun |#PivotBetreeSpec.BetreeStep.BetreeMerge| (T@U) T@U)
(declare-fun PivotBetreeSpec.BetreeStep.BetreeMerge_q (T@U) Bool)
(declare-fun |#PivotBetreeSpec.BetreeStep.BetreeRepivot| (T@U) T@U)
(declare-fun PivotBetreeSpec.BetreeStep.BetreeRepivot_q (T@U) Bool)
(declare-fun PivotBetreeSpec.BetreeStep.repivot (T@U) T@U)
(declare-fun |$IsA#PivotBetreeSpec.BetreeStep| (T@U) Bool)
(declare-fun |PivotBetreeSpec.BetreeStep#Equal| (T@U T@U) Bool)
(declare-fun Tclass.PivotBetreeSpec.__default () T@U)
(declare-fun PivotBetreeSpec.__default.BoundedNode (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BoundedNode#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BoundedNode#requires| (T@U) Bool)
(declare-fun StartFuel_BucketWeights._default.WeightBucketList () T@U)
(declare-fun |Bounds.__default.MaxNumChildren#canCall| () Bool)
(declare-fun |Bounds.__default.MaxTotalBucketWeight#canCall| () Bool)
(declare-fun PivotBetreeSpec.__default.WFNode (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.WFNode#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.WFNode#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.InvNode (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.InvNode#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.InvNode#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.AddMessageToNode (T@U T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.AddMessageToNode#canCall| (T@U T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.AddMessageToNode#requires| (T@U T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.AddMessagesToNode (T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.AddMessagesToNode#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.AddMessagesToNode#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.BufferIsDefining (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BufferIsDefining#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BufferIsDefining#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.BufferDefinesValue (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BufferDefinesValue#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BufferDefinesValue#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.ValidLayerIndex (T@U Int) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidLayerIndex#canCall| (T@U Int) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidLayerIndex#requires| (T@U Int) Bool)
(declare-fun PivotBetreeSpec.__default.LookupVisitsWFNodes (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupVisitsWFNodes#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupVisitsWFNodes#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer (T@U T@U Int) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| (T@U T@U Int) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#requires| (T@U T@U Int) Bool)
(declare-fun PivotBetreeSpec.__default.LookupFollowsChildRefs (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupFollowsChildRefs#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupFollowsChildRefs#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.NodeLookup (T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.NodeLookup#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.NodeLookup#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.InterpretLookup (T@U T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.InterpretLookup#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.InterpretLookup#requires| (T@U T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf (T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.WFLookupForKey (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.WFLookupForKey#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.WFLookupForKey#requires| (T@U T@U) Bool)
(declare-fun |PivotBetreeGraph.__default.Root#canCall| () Bool)
(declare-fun PivotBetreeSpec.__default.ValidQuery (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidQuery#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidQuery#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.QueryReads (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.QueryReads#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.QueryReads#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.QueryOps (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.QueryOps#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.QueryOps#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.LookupUpperBoundAtLayer (T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.LookupUpperBoundAtLayer#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupUpperBoundAtLayer#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.OptionKeyMin (T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.OptionKeyMin#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.OptionKeyMin#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.LookupUpperBound (T@U T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.LookupUpperBound#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.LookupUpperBound#requires| (T@U T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.BufferDefinesEmptyValue (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BufferDefinesEmptyValue#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BufferDefinesEmptyValue#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.ValidSuccQuery (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidSuccQuery#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidSuccQuery#requires| (T@U) Bool)
(declare-fun StartFuel_PivotBetreeSpec._default.LookupUpperBound () T@U)
(declare-fun StartFuel_BucketsLib._default.ComposeSeq () T@U)
(declare-fun StartFuel_BucketsLib._default.ClampRange () T@U)
(declare-fun StartFuel_BucketsLib._default.KeyValueMapOfBucket () T@U)
(declare-fun StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap () T@U)
(declare-fun PivotBetreeSpec.__default.SuccQueryReads (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.SuccQueryReads#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.SuccQueryReads#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.SuccQueryOps (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.SuccQueryOps#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.SuccQueryOps#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.ValidInsertion (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidInsertion#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidInsertion#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.InsertionReads (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.InsertionReads#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.InsertionReads#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.InsertionOps (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.InsertionOps#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.InsertionOps#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.ValidFlush (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidFlush#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidFlush#requires| (T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.BucketComplement () T@U)
(declare-fun StartFuel_BucketsLib._default.BucketIntersect () T@U)
(declare-fun PivotBetreeSpec.__default.FlushReads (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.FlushReads#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.FlushReads#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.FlushOps (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.FlushOps#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.FlushOps#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.ValidGrow (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidGrow#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidGrow#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.GrowReads (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.GrowReads#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.GrowReads#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.GrowOps (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.GrowOps#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.GrowOps#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.CutoffNodeAndKeepLeft (T@U T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_BucketsLib._default.SplitBucketLeft0 () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SplitBucketLeft () T@U)
(declare-fun MoreFuel_BucketsLib._default.SplitBucketLeft1 () T@U)
(declare-fun PivotBetreeSpec.__default.CutoffNodeAndKeepRight (T@U T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.CutoffNodeAndKeepRight#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.CutoffNodeAndKeepRight#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_BucketsLib._default.SplitBucketRight0 () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SplitBucketRight () T@U)
(declare-fun MoreFuel_BucketsLib._default.SplitBucketRight1 () T@U)
(declare-fun PivotBetreeSpec.__default.CutoffNode (T@U T@U T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.CutoffNode#canCall| (T@U T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.CutoffNode#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft () T@U)
(declare-fun StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepRight () T@U)
(declare-fun PivotBetreeSpec.__default.SplitChildLeft (T@U Int) T@U)
(declare-fun |PivotBetreeSpec.__default.SplitChildLeft#canCall| (T@U Int) Bool)
(declare-fun |PivotBetreeSpec.__default.SplitChildLeft#requires| (T@U Int) Bool)
(declare-fun PivotBetreeSpec.__default.SplitChildRight (T@U Int) T@U)
(declare-fun |PivotBetreeSpec.__default.SplitChildRight#canCall| (T@U Int) Bool)
(declare-fun |PivotBetreeSpec.__default.SplitChildRight#requires| (T@U Int) Bool)
(declare-fun PivotBetreeSpec.__default.SplitParent (T@U T@U Int T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.SplitParent#canCall| (T@U T@U Int T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.SplitParent#requires| (T@U T@U Int T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuel_BucketsLib._default.SplitBucketInList () T@U)
(declare-fun PivotBetreeSpec.__default.ValidSplit (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidSplit#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidSplit#requires| (T@U) Bool)
(declare-fun StartFuel_PivotBetreeSpec._default.CutoffNode () T@U)
(declare-fun PivotBetreeSpec.__default.SplitReads (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.SplitReads#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.SplitReads#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.SplitOps (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.SplitOps#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.SplitOps#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.ValidMerge (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidMerge#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidMerge#requires| (T@U) Bool)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuel_BucketsLib._default.MergeBucketsInList () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun PivotBetreeSpec.__default.MergeReads (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.MergeReads#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.MergeReads#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.MergeOps (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.MergeOps#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.MergeOps#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.ValidRepivot (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidRepivot#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidRepivot#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.RepivotReads (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.RepivotReads#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.RepivotReads#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.ApplyRepivot (T@U T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.ApplyRepivot#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ApplyRepivot#requires| (T@U T@U) Bool)
(declare-fun PivotBetreeSpec.__default.RepivotOps (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.RepivotOps#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.RepivotOps#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.ValidBetreeStep (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidBetreeStep#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.ValidBetreeStep#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.BetreeStepReads (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.BetreeStepReads#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BetreeStepReads#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.BetreeStepOps (T@U) T@U)
(declare-fun |PivotBetreeSpec.__default.BetreeStepOps#canCall| (T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BetreeStepOps#requires| (T@U) Bool)
(declare-fun PivotBetreeSpec.__default.BetreeStepUI (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BetreeStepUI#canCall| (T@U T@U) Bool)
(declare-fun |PivotBetreeSpec.__default.BetreeStepUI#requires| (T@U T@U) Bool)
(declare-fun MapType9Type (T@T T@T) T@T)
(declare-fun MapType9TypeInv0 (T@T) T@T)
(declare-fun MapType9TypeInv1 (T@T) T@T)
(declare-fun MapType9Select (T@U T@U T@U) T@U)
(declare-fun MapType9Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc5) TyTagType)) (= (type Tagclass._System.___hPartialFunc5) TyTagType)) (= (type Tagclass._System.___hTotalFunc5) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc6) TyTagType)) (= (type Tagclass._System.___hPartialFunc6) TyTagType)) (= (type Tagclass._System.___hTotalFunc6) TyTagType)) (= (type Tagclass._System.___hFunc7) TyTagType)) (= (type Tagclass._System.___hPartialFunc7) TyTagType)) (= (type Tagclass._System.___hTotalFunc7) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type class.PivotBetreeSpecWFNodes.__default) ClassNameType)) (= (type Tagclass.PivotBetreeSpecWFNodes.__default) TyTagType)) (= (type Tagclass.PivotBetreeSpec.NodeFlush) TyTagType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type Tagclass.PivotBetreeGraph.Node) TyTagType)) (= (type Tagclass.BucketsLib.Bucket) TyTagType)) (= (type Tagclass.KeyType.Key) TyTagType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.PivotBetreeSpec.NodeFusion) TyTagType)) (= (type Tagclass.ReferenceType.Reference) TyTagType)) (= (type Tagclass.PivotBetreeSpec.Repivot) TyTagType)) (= (type Tagclass.PivotBetreeSpec.MessageInsertion) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type Tagclass.PivotBetreeSpec.RootGrowth) TyTagType)) (= (type Tagclass.PivotBetreeSpec.BetreeStep) TyTagType)) (= (type Tagclass.PivotBetreeSpec.SuccQuery) TyTagType)) (= (type Tagclass.PivotBetreeSpec.LookupQuery) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type class.KeyType.__default) ClassNameType)) (= (type Tagclass.KeyType.__default) TyTagType)) (= (type |##UI.RangeStart.SInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeStart) TyTagType)) (= (type |##UI.RangeStart.SExclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.NegativeInf|) DtCtorIdType)) (= (type class.UI.RangeStart) ClassNameType)) (= (type |##UI.RangeEnd.EInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeEnd) TyTagType)) (= (type |##UI.RangeEnd.EExclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.PositiveInf|) DtCtorIdType)) (= (type class.UI.RangeEnd) ClassNameType)) (= (type |##UI.SuccResult.SuccResult|) DtCtorIdType)) (= (type Tagclass.UI.SuccResult) TyTagType)) (= (type class.UI.SuccResult) ClassNameType)) (= (type |##UI.SuccResultList.SuccResultList|) DtCtorIdType)) (= (type Tagclass.UI.SuccResultList) TyTagType)) (= (type class.UI.SuccResultList) ClassNameType)) (= (type |##UI.Op.NoOp|) DtCtorIdType)) (= (type Tagclass.UI.Op) TyTagType)) (= (type |##UI.Op.SyncOp|) DtCtorIdType)) (= (type |##UI.Op.CrashOp|) DtCtorIdType)) (= (type |##UI.Op.PushSyncOp|) DtCtorIdType)) (= (type |##UI.Op.PopSyncOp|) DtCtorIdType)) (= (type |##UI.Op.GetOp|) DtCtorIdType)) (= (type |##UI.Op.PutOp|) DtCtorIdType)) (= (type |##UI.Op.SuccOp|) DtCtorIdType)) (= (type class.UI.Op) ClassNameType)) (= (type class.UI.__default) ClassNameType)) (= (type Tagclass.UI.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type |##MapSpec.Constants.Constants|) DtCtorIdType)) (= (type Tagclass.MapSpec.Constants) TyTagType)) (= (type class.MapSpec.Constants) ClassNameType)) (= (type |##MapSpec.Variables.Variables|) DtCtorIdType)) (= (type Tagclass.MapSpec.Variables) TyTagType)) (= (type class.MapSpec.Variables) ClassNameType)) (= (type |##MapSpec.Step.QueryStep|) DtCtorIdType)) (= (type Tagclass.MapSpec.Step) TyTagType)) (= (type |##MapSpec.Step.WriteStep|) DtCtorIdType)) (= (type |##MapSpec.Step.SuccStep|) DtCtorIdType)) (= (type |##MapSpec.Step.StutterStep|) DtCtorIdType)) (= (type class.MapSpec.Step) ClassNameType)) (= (type class.MapSpec.__default) ClassNameType)) (= (type Tagclass.MapSpec.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.ReferenceType.__default) ClassNameType)) (= (type Tagclass.ReferenceType.__default) TyTagType)) (= (type |##ValueMessage.Delta.NoDelta|) DtCtorIdType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type |##BetreeGraph.Node.Node|) DtCtorIdType)) (= (type Tagclass.BetreeGraph.Node) TyTagType)) (= (type class.BetreeGraph.Node) ClassNameType)) (= (type class.BetreeGraph.__default) ClassNameType)) (= (type Tagclass.BetreeGraph.__default) TyTagType)) (= (type |##BetreeGraph.Op.AllocOp|) DtCtorIdType)) (= (type Tagclass.BetreeGraph.Op) TyTagType)) (= (type |##BetreeGraph.Op.WriteOp|) DtCtorIdType)) (= (type class.BetreeGraph.Op) ClassNameType)) (= (type |##BetreeGraph.ReadOp.ReadOp|) DtCtorIdType)) (= (type Tagclass.BetreeGraph.ReadOp) TyTagType)) (= (type class.BetreeGraph.ReadOp) ClassNameType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type class.Byte__Order.__default) ClassNameType)) (= (type Tagclass.Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order__Impl.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order__Impl.__default) TyTagType)) (= (type class.PivotsLib.__default) ClassNameType)) (= (type Tagclass.PivotsLib.__default) TyTagType)) (= (type class.Multisets.__default) ClassNameType)) (= (type Tagclass.Multisets.__default) TyTagType)) (= (type |##BucketsLib.Bucket.BucketMapWithSeq|) DtCtorIdType)) (= (type class.BucketsLib.Bucket) ClassNameType)) (= (type class.BucketsLib.__default) ClassNameType)) (= (type Tagclass.BucketsLib.__default) TyTagType)) (= (type |##PivotBetreeGraph.Node.Node|) DtCtorIdType)) (= (type class.PivotBetreeGraph.Node) ClassNameType)) (= (type class.PivotBetreeGraph.__default) ClassNameType)) (= (type Tagclass.PivotBetreeGraph.__default) TyTagType)) (= (type |##PivotBetreeGraph.Op.AllocOp|) DtCtorIdType)) (= (type Tagclass.PivotBetreeGraph.Op) TyTagType)) (= (type |##PivotBetreeGraph.Op.WriteOp|) DtCtorIdType)) (= (type class.PivotBetreeGraph.Op) ClassNameType)) (= (type |##PivotBetreeGraph.ReadOp.ReadOp|) DtCtorIdType)) (= (type Tagclass.PivotBetreeGraph.ReadOp) TyTagType)) (= (type class.PivotBetreeGraph.ReadOp) ClassNameType)) (= (type class.Bounds.__default) ClassNameType)) (= (type Tagclass.Bounds.__default) TyTagType)) (= (type class.Sets.__default) ClassNameType)) (= (type Tagclass.Sets.__default) TyTagType)) (= (type class.BucketWeights.__default) ClassNameType)) (= (type Tagclass.BucketWeights.__default) TyTagType)) (= (type |##PivotBetreeSpec.LookupQuery.LookupQuery|) DtCtorIdType)) (= (type class.PivotBetreeSpec.LookupQuery) ClassNameType)) (= (type |##PivotBetreeSpec.SuccQuery.SuccQuery|) DtCtorIdType)) (= (type class.PivotBetreeSpec.SuccQuery) ClassNameType)) (= (type |##PivotBetreeSpec.MessageInsertion.MessageInsertion|) DtCtorIdType)) (= (type class.PivotBetreeSpec.MessageInsertion) ClassNameType)) (= (type |##PivotBetreeSpec.NodeFlush.NodeFlush|) DtCtorIdType)) (= (type class.PivotBetreeSpec.NodeFlush) ClassNameType)) (= (type |##PivotBetreeSpec.RootGrowth.RootGrowth|) DtCtorIdType)) (= (type class.PivotBetreeSpec.RootGrowth) ClassNameType)) (= (type |##PivotBetreeSpec.NodeFusion.NodeFusion|) DtCtorIdType)) (= (type class.PivotBetreeSpec.NodeFusion) ClassNameType)) (= (type |##PivotBetreeSpec.Repivot.Repivot|) DtCtorIdType)) (= (type class.PivotBetreeSpec.Repivot) ClassNameType)) (= (type |##PivotBetreeSpec.BetreeStep.BetreeQuery|) DtCtorIdType)) (= (type |##PivotBetreeSpec.BetreeStep.BetreeSuccQuery|) DtCtorIdType)) (= (type |##PivotBetreeSpec.BetreeStep.BetreeInsert|) DtCtorIdType)) (= (type |##PivotBetreeSpec.BetreeStep.BetreeFlush|) DtCtorIdType)) (= (type |##PivotBetreeSpec.BetreeStep.BetreeGrow|) DtCtorIdType)) (= (type |##PivotBetreeSpec.BetreeStep.BetreeSplit|) DtCtorIdType)) (= (type |##PivotBetreeSpec.BetreeStep.BetreeMerge|) DtCtorIdType)) (= (type |##PivotBetreeSpec.BetreeStep.BetreeRepivot|) DtCtorIdType)) (= (type class.PivotBetreeSpec.BetreeStep) ClassNameType)) (= (type class.PivotBetreeSpec.__default) ClassNameType)) (= (type Tagclass.PivotBetreeSpec.__default) TyTagType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc5 Tagclass._System.___hPartialFunc5 Tagclass._System.___hTotalFunc5 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc6 Tagclass._System.___hPartialFunc6 Tagclass._System.___hTotalFunc6 Tagclass._System.___hFunc7 Tagclass._System.___hPartialFunc7 Tagclass._System.___hTotalFunc7 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 class.PivotBetreeSpecWFNodes.__default Tagclass.PivotBetreeSpecWFNodes.__default Tagclass.PivotBetreeSpec.NodeFlush Tagclass.NativeTypes.byte Tagclass.PivotBetreeGraph.Node Tagclass.BucketsLib.Bucket Tagclass.KeyType.Key Tagclass.Options.Option Tagclass.PivotBetreeSpec.NodeFusion Tagclass.ReferenceType.Reference Tagclass.PivotBetreeSpec.Repivot Tagclass.PivotBetreeSpec.MessageInsertion Tagclass.ValueMessage.Message Tagclass.PivotBetreeSpec.RootGrowth Tagclass.PivotBetreeSpec.BetreeStep Tagclass.PivotBetreeSpec.SuccQuery Tagclass.PivotBetreeSpec.LookupQuery |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default Tagclass.ValueType.Value class.ValueType.__default Tagclass.ValueType.__default class.KeyType.__default Tagclass.KeyType.__default |##UI.RangeStart.SInclusive| Tagclass.UI.RangeStart |##UI.RangeStart.SExclusive| |##UI.RangeStart.NegativeInf| class.UI.RangeStart |##UI.RangeEnd.EInclusive| Tagclass.UI.RangeEnd |##UI.RangeEnd.EExclusive| |##UI.RangeEnd.PositiveInf| class.UI.RangeEnd |##UI.SuccResult.SuccResult| Tagclass.UI.SuccResult class.UI.SuccResult |##UI.SuccResultList.SuccResultList| Tagclass.UI.SuccResultList class.UI.SuccResultList |##UI.Op.NoOp| Tagclass.UI.Op |##UI.Op.SyncOp| |##UI.Op.CrashOp| |##UI.Op.PushSyncOp| |##UI.Op.PopSyncOp| |##UI.Op.GetOp| |##UI.Op.PutOp| |##UI.Op.SuccOp| class.UI.Op class.UI.__default Tagclass.UI.__default class.SeqComparison.__default Tagclass.SeqComparison.__default |##MapSpec.Constants.Constants| Tagclass.MapSpec.Constants class.MapSpec.Constants |##MapSpec.Variables.Variables| Tagclass.MapSpec.Variables class.MapSpec.Variables |##MapSpec.Step.QueryStep| Tagclass.MapSpec.Step |##MapSpec.Step.WriteStep| |##MapSpec.Step.SuccStep| |##MapSpec.Step.StutterStep| class.MapSpec.Step class.MapSpec.__default Tagclass.MapSpec.__default class.Sequences.__default Tagclass.Sequences.__default class.ReferenceType.__default Tagclass.ReferenceType.__default |##ValueMessage.Delta.NoDelta| Tagclass.ValueMessage.Delta class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message |##BetreeGraph.Node.Node| Tagclass.BetreeGraph.Node class.BetreeGraph.Node class.BetreeGraph.__default Tagclass.BetreeGraph.__default |##BetreeGraph.Op.AllocOp| Tagclass.BetreeGraph.Op |##BetreeGraph.Op.WriteOp| class.BetreeGraph.Op |##BetreeGraph.ReadOp.ReadOp| Tagclass.BetreeGraph.ReadOp class.BetreeGraph.ReadOp class.Maps.__default Tagclass.Maps.__default class.NativeArrays.__default Tagclass.NativeArrays.__default class.Byte__Order.__default Tagclass.Byte__Order.__default class.Lexicographic__Byte__Order.__default Tagclass.Lexicographic__Byte__Order.__default class.Lexicographic__Byte__Order__Impl.__default Tagclass.Lexicographic__Byte__Order__Impl.__default class.PivotsLib.__default Tagclass.PivotsLib.__default class.Multisets.__default Tagclass.Multisets.__default |##BucketsLib.Bucket.BucketMapWithSeq| class.BucketsLib.Bucket class.BucketsLib.__default Tagclass.BucketsLib.__default |##PivotBetreeGraph.Node.Node| class.PivotBetreeGraph.Node class.PivotBetreeGraph.__default Tagclass.PivotBetreeGraph.__default |##PivotBetreeGraph.Op.AllocOp| Tagclass.PivotBetreeGraph.Op |##PivotBetreeGraph.Op.WriteOp| class.PivotBetreeGraph.Op |##PivotBetreeGraph.ReadOp.ReadOp| Tagclass.PivotBetreeGraph.ReadOp class.PivotBetreeGraph.ReadOp class.Bounds.__default Tagclass.Bounds.__default class.Sets.__default Tagclass.Sets.__default class.BucketWeights.__default Tagclass.BucketWeights.__default |##PivotBetreeSpec.LookupQuery.LookupQuery| class.PivotBetreeSpec.LookupQuery |##PivotBetreeSpec.SuccQuery.SuccQuery| class.PivotBetreeSpec.SuccQuery |##PivotBetreeSpec.MessageInsertion.MessageInsertion| class.PivotBetreeSpec.MessageInsertion |##PivotBetreeSpec.NodeFlush.NodeFlush| class.PivotBetreeSpec.NodeFlush |##PivotBetreeSpec.RootGrowth.RootGrowth| class.PivotBetreeSpec.RootGrowth |##PivotBetreeSpec.NodeFusion.NodeFusion| class.PivotBetreeSpec.NodeFusion |##PivotBetreeSpec.Repivot.Repivot| class.PivotBetreeSpec.Repivot |##PivotBetreeSpec.BetreeStep.BetreeQuery| |##PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |##PivotBetreeSpec.BetreeStep.BetreeInsert| |##PivotBetreeSpec.BetreeStep.BetreeFlush| |##PivotBetreeSpec.BetreeStep.BetreeGrow| |##PivotBetreeSpec.BetreeStep.BetreeSplit| |##PivotBetreeSpec.BetreeStep.BetreeMerge| |##PivotBetreeSpec.BetreeStep.BetreeRepivot| class.PivotBetreeSpec.BetreeStep class.PivotBetreeSpec.__default Tagclass.PivotBetreeSpec.__default) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |319| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |320| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |321| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |322| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |323| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |324| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |325| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |326| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |327| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |328| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |329| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |330| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |331| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |332| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |333| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |334| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |335| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |336| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |337| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |338| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |339| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |340| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |341| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |342| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |343| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |344| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |345| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |346| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |347| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |348| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |349| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |350| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |351| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |352| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |353| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |354| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |355| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |356| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |357| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |358| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |359| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |360| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |361| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |362| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |363| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |364| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |365| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |366| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |368| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |370| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |372| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |373| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |375| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |377| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |379| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |381| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |383| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |385| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |387| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |389| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |391| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |392| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |393| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |394| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |395| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |396| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |397| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |398| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |399| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |400| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |401| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |402| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |403| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |404| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |405| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |406| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |407| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |408| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |409| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |410| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |411| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |412| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |413| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |414| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |415| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |416| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |417| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |418| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |419| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |420| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |421| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |422| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |423| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |424| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |425| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |426| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |427| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |428| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |429| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |430| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |435| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |436| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |437| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |438| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |439| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |440| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |441| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |442| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |443| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |444| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |445| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |446| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |447| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |448| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |449| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |450| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |451| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |452| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |453| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |454| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |455| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |456| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |457| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |458| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |459| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |461| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |463| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |464| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |466| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |467| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |468| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |469| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |470| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |471| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |472| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |473| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |474| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |475| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |476| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |477| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |478| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |479| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |480| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |481| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |483| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |485| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |486| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |488| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |489| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |490| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |491| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |492| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |493| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |495| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |496| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |497| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |498| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |499| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |500| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |501| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |502| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |503| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |504| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |505| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |506| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |507| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |508| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |509| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |510| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |511| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |512| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |513| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |514| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |515| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |517| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |519| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |520| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |522| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |523| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |524| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |525| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |526| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |527| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |528| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |529| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |530| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |532| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |533| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |534| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |535| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |536| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |537| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |538| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |539| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |540| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |541| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |542| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |543| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |544| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |545| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |546| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |547| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |548| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |549| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |551| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |552| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |553| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |554| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |556| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |558| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |560| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |561| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |563| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |564| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |565| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |566| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |567| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |568| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |569| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |570| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |571| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |572| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |573| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |574| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |575| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |576| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |577| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |578| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |579| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |580| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |581| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |582| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |583| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |584| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |585| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |586| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |587| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |588| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |589| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |591| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |592| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |593| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |594| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |595| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |596| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |597| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |598| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |599| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |600| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |601| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |602| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |605| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |606| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |608| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |610| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |611| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |612| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |613| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |614| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |615| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |616| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |619| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |620| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |621| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |622| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |623| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |624| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |625| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |626| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |627| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |628| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |629| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |630| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |631| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |632| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |633| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |634| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |635| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |636| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |637| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |638| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |639| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |640| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |641| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |642| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |643| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |644| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |645| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |646| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |647| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |648| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |649| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |650| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |651| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |652| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |653| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |654| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |655| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |656| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |657| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |658| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |659| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |660| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |661| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |662| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |663| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |664| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |665| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |666| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |667| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |668| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |669| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |670| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |671| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |672| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |673| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |674| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |675| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |676| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |677| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |678| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |679| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |680| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |682| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |683| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |684| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |686| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |687| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |688| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |689| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |690| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |691| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |692| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |693| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |694| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |696| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |701| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |702| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |705| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |706| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |707| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |708| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |709| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |710| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |711| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |712| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |713| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |715| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |717| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |718| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |719| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |721| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |722| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |723| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |724| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |726| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |727| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |728| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |729| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |730| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |734| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |736| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |737| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |738| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |739| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |744| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |745| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |746| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |747| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |748| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |750| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@31| T@U) ) (!  (=> (and (= (type |#$T0@@18|) TyType) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |752| :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@32| T@U) ) (!  (=> (and (= (type |#$T0@@19|) TyType) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@33| T@U) ) (!  (=> (and (= (type |#$T0@@20|) TyType) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) |#$R@@33|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@34| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$R@@34|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|)))) :qid |unknown.0:0| :skolemid |755| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@142 T@T) (arg1@@64 T@T) (arg2@@24 T@T) ) (! (= (Ctor (MapType3Type arg0@@142 arg1@@64 arg2@@24)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@143 T@T) (arg1@@65 T@T) (arg2@@25 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@143 arg1@@65 arg2@@25)) arg0@@143) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@143 arg1@@65 arg2@@25)) ))) (forall ((arg0@@144 T@T) (arg1@@66 T@T) (arg2@@26 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@144 arg1@@66 arg2@@26)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@144 arg1@@66 arg2@@26)) ))) (forall ((arg0@@145 T@T) (arg1@@67 T@T) (arg2@@27 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@145 arg1@@67 arg2@@27)) arg2@@27) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@145 arg1@@67 arg2@@27)) ))) (forall ((arg0@@146 T@U) (arg1@@68 T@U) (arg2@@28 T@U) ) (! (let ((aVar2@@0 (MapType3TypeInv2 (type arg0@@146)))) (= (type (MapType3Select arg0@@146 arg1@@68 arg2@@28)) aVar2@@0)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@146 arg1@@68 arg2@@28)) ))) (forall ((arg0@@147 T@U) (arg1@@69 T@U) (arg2@@29 T@U) (arg3@@10 T@U) ) (! (let ((aVar2@@1 (type arg3@@10))) (let ((aVar1@@3 (type arg2@@29))) (let ((aVar0@@1 (type arg1@@69))) (= (type (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@1))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (val@@11 T@U) ) (! (let ((aVar2@@2 (MapType3TypeInv2 (type m@@32)))) (=> (= (type val@@11) aVar2@@2) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 val@@11) x0@@10 x1@@4) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (y0@@7 T@U) (y1@@3 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 val@@12) y0@@7 y1@@3) (MapType3Select m@@33 y0@@7 y1@@3))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (y0@@8 T@U) (y1@@4 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 val@@13) y0@@8 y1@@4) (MapType3Select m@@34 y0@@8 y1@@4))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (y0@@9 T@U) (y1@@5 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 val@@14) y0@@9 y1@@5) (MapType3Select m@@35 y0@@9 y1@@5))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@148 T@U) (arg1@@70 T@U) (arg2@@30 T@U) ) (! (= (type (Handle1 arg0@@148 arg1@@70 arg2@@30)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@148 arg1@@70 arg2@@30)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15) (MapType3Select h@@34 heap@@11 bx0@@15))) :qid |unknown.0:0| :skolemid |756| :pattern ( (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16))) (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) )))
(assert (forall ((arg0@@149 T@U) (arg1@@71 T@U) (arg2@@31 T@U) (arg3@@11 T@U) (arg4@@3 T@U) ) (! (= (type (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53)) (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53))))) :qid |unknown.0:0| :skolemid |758| :pattern ( (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and ($IsBox bx0@@18 t0@@45) ($Is f@@29 (Tclass._System.___hFunc1 t0@@45 t1@@21)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |759| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and ($IsBox bx0@@19 t0@@46) ($Is f@@30 (Tclass._System.___hFunc1 t0@@46 t1@@22)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |761| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads1 t0@@46 t1@@22 h0@@13 f@@30 bx0@@19) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19))) :qid |unknown.0:0| :skolemid |762| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and ($IsBox bx0@@20 t0@@47) ($Is f@@31 (Tclass._System.___hFunc1 t0@@47 t1@@23)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |763| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) (=> (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and ($IsBox bx0@@21 t0@@48) ($Is f@@32 (Tclass._System.___hFunc1 t0@@48 t1@@24)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |765| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) (=> (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21)))) :qid |unknown.0:0| :skolemid |766| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and ($IsBox bx0@@22 t0@@49) ($Is f@@33 (Tclass._System.___hFunc1 t0@@49 t1@@25)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |767| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22))) :qid |unknown.0:0| :skolemid |768| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and ($IsBox bx0@@23 t0@@50) ($Is f@@34 (Tclass._System.___hFunc1 t0@@50 t1@@26)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |769| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply1 t0@@50 t1@@26 h0@@17 f@@34 bx0@@23) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23))) :qid |unknown.0:0| :skolemid |770| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (and ($IsGoodHeap heap@@14) (and ($IsBox bx0@@24 t0@@51) ($Is f@@35 (Tclass._System.___hFunc1 t0@@51 t1@@27))))) (and (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |771| :pattern ( (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) ($IsGoodHeap heap@@14)) :pattern ( (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (and (and ($IsGoodHeap heap@@15) (and ($IsBox bx0@@25 t0@@52) ($Is f@@36 (Tclass._System.___hFunc1 t0@@52 t1@@28)))) (|Set#Equal| (Reads1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) (=> (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25)))) :qid |unknown.0:0| :skolemid |772| :pattern ( (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) ($IsGoodHeap heap@@15)) :pattern ( (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) ) (!  (=> (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29)) (forall ((h@@37 T@U) (bx0@@26 T@U) ) (!  (=> (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (=> (and (and ($IsGoodHeap h@@37) ($IsBox bx0@@26 t0@@53)) (Requires1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ($IsBox (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) ) (!  (=> (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (=> (and (and ($IsGoodHeap h@@38) ($IsBox bx0@@27 t0@@53)) (Requires1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) ($IsBox (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) )) ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))))) :qid |unknown.0:0| :skolemid |774| :pattern ( ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (u0@@1 T@U) (u1@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (and (and ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |775| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t1@@30)) ($IsBox bx@@55 u1@@0)) :qid |unknown.0:0| :skolemid |776| :pattern ( ($IsBox bx@@55 t1@@30)) :pattern ( ($IsBox bx@@55 u1@@0)) )))) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39) (forall ((bx0@@28 T@U) ) (!  (=> (= (type bx0@@28) BoxType) (=> (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) ))) (=> (forall ((bx0@@29 T@U) ) (!  (=> (= (type bx0@@29) BoxType) (=> (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)))) :qid |unknown.0:0| :skolemid |780| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40))) (forall ((bx0@@30 T@U) ) (!  (=> (= (type bx0@@30) BoxType) (=> (and ($IsAllocBox bx0@@30 t0@@56 h@@40) (Requires1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ($IsAllocBox (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30) t1@@32 h@@40))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ))) :qid |unknown.0:0| :skolemid |782| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40)) )))
(assert (forall ((arg0@@150 T@U) (arg1@@72 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@35| T@U) ) (!  (=> (and (= (type |#$T0@@22|) TyType) (= (type |#$R@@35|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |783| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) )))
(assert (forall ((arg0@@151 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@151)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@151)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@36| T@U) ) (!  (=> (and (= (type |#$T0@@23|) TyType) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) |#$T0@@23|)) :qid |unknown.0:0| :skolemid |784| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) )))
(assert (forall ((arg0@@152 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@152)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@152)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@37| T@U) ) (!  (=> (and (= (type |#$T0@@24|) TyType) (= (type |#$R@@37|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) |#$R@@37|)) :qid |unknown.0:0| :skolemid |785| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@38| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$R@@38|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|)))) :qid |unknown.0:0| :skolemid |786| :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@39| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (= (type |#$T0@@26|) TyType) (= (type |#$R@@39|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@3| T@U) ) (!  (=> (and (= (type |x0#0@@3|) BoxType) ($IsBox |x0#0@@3| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@3|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@4| T@U) ) (!  (=> (and (= (type |x0#0@@4|) BoxType) ($IsBox |x0#0@@4| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@4|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))))) :qid |unknown.0:0| :skolemid |788| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))) )))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@40| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$R@@40|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)))) :qid |unknown.0:0| :skolemid |789| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) )))
(assert (forall ((arg0@@153 T@U) (arg1@@73 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@41| T@U) ) (!  (=> (and (= (type |#$T0@@28|) TyType) (= (type |#$R@@41|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) )))
(assert (forall ((arg0@@154 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@154)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@154)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$R@@42| T@U) ) (!  (=> (and (= (type |#$T0@@29|) TyType) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) |#$T0@@29|)) :qid |unknown.0:0| :skolemid |791| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) )))
(assert (forall ((arg0@@155 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@155)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@155)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$R@@43| T@U) ) (!  (=> (and (= (type |#$T0@@30|) TyType) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |792| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@44| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$R@@44|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (= (type |#$T0@@32|) TyType) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@5| T@U) ) (!  (=> (and (= (type |x0#0@@5|) BoxType) ($IsBox |x0#0@@5| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@5|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@5|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@6| T@U) ) (!  (=> (and (= (type |x0#0@@6|) BoxType) ($IsBox |x0#0@@6| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@6|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@6|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))))) :qid |unknown.0:0| :skolemid |795| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@156 T@U) (arg1@@74 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@156 arg1@@74 arg2@@32 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@156 arg1@@74 arg2@@32 arg3@@12)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |797| :pattern ( (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) )))
(assert (forall ((arg0@@157 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@157)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@157)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |798| :pattern ( (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@158 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@158)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@158)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |799| :pattern ( (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@159)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@159)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |800| :pattern ( (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@160)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@160)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) |#$R@@51|)) :qid |unknown.0:0| :skolemid |801| :pattern ( (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|)))) :qid |unknown.0:0| :skolemid |802| :pattern ( ($IsBox bx@@58 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@161 T@T) (arg1@@75 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@161 arg1@@75 arg2@@33 arg3@@13 arg4@@4)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@162 T@T) (arg1@@76 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@162 arg1@@76 arg2@@34 arg3@@14 arg4@@5)) arg0@@162) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@162 arg1@@76 arg2@@34 arg3@@14 arg4@@5)) ))) (forall ((arg0@@163 T@T) (arg1@@77 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@163 arg1@@77 arg2@@35 arg3@@15 arg4@@6)) arg1@@77) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@163 arg1@@77 arg2@@35 arg3@@15 arg4@@6)) ))) (forall ((arg0@@164 T@T) (arg1@@78 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@164 arg1@@78 arg2@@36 arg3@@16 arg4@@7)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@164 arg1@@78 arg2@@36 arg3@@16 arg4@@7)) ))) (forall ((arg0@@165 T@T) (arg1@@79 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@165 arg1@@79 arg2@@37 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@165 arg1@@79 arg2@@37 arg3@@17 arg4@@8)) ))) (forall ((arg0@@166 T@T) (arg1@@80 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@166 arg1@@80 arg2@@38 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@166 arg1@@80 arg2@@38 arg3@@18 arg4@@9)) ))) (forall ((arg0@@167 T@U) (arg1@@81 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@167)))) (= (type (MapType4Select arg0@@167 arg1@@81 arg2@@39 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@167 arg1@@81 arg2@@39 arg3@@19 arg4@@10)) ))) (forall ((arg0@@168 T@U) (arg1@@82 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@40))) (let ((aVar0@@2 (type arg1@@82))) (= (type (MapType4Store arg0@@168 arg1@@82 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@168 arg1@@82 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@36)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@36 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@37 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@37 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@38 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@38 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@39 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@40 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@41 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@169 T@U) (arg1@@83 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@169 arg1@@83 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@169 arg1@@83 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@170 T@U) (arg1@@84 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@170 arg1@@84 arg2@@42)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@170 arg1@@84 arg2@@42)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (t2@@14 T@U) (t3 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) (bx1@@15 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2) (MapType4Select h@@41 heap@@16 bx0@@31 bx1@@15 bx2))) :qid |unknown.0:0| :skolemid |803| :pattern ( (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) (bx1@@16 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32 bx1@@16 bx2@@0))) (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) :qid |unknown.0:0| :skolemid |804| :pattern ( (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) )))
(assert (forall ((arg0@@171 T@U) (arg1@@85 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@171 arg1@@85 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@171 arg1@@85 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@59) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@59)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@59))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@59)) (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@59))))) :qid |unknown.0:0| :skolemid |805| :pattern ( (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@59)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) (bx1@@18 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@34 t0@@60) ($IsBox bx1@@18 t1@@36)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@60 t1@@36 t2@@17 t3@@2)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |806| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2))) :qid |unknown.0:0| :skolemid |807| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) (bx1@@19 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@35 t0@@61) ($IsBox bx1@@19 t1@@37)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@61 t1@@37 t2@@18 t3@@3)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |808| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h0@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3))) :qid |unknown.0:0| :skolemid |809| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) (bx1@@20 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@36 t0@@62) ($IsBox bx1@@20 t1@@38)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@62 t1@@38 t2@@19 t3@@4)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |810| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)))) :qid |unknown.0:0| :skolemid |811| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) (bx1@@21 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@37 t0@@63) ($IsBox bx1@@21 t1@@39)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@63 t1@@39 t2@@20 t3@@5)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |812| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)))) :qid |unknown.0:0| :skolemid |813| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) (bx1@@22 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@38 t0@@64) ($IsBox bx1@@22 t1@@40)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@21 t3@@6)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |814| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6))) :qid |unknown.0:0| :skolemid |815| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) (bx1@@23 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@39 t0@@65) ($IsBox bx1@@23 t1@@41)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@22 t3@@7)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h0@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) (bx1@@24 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and ($IsBox bx0@@40 t0@@66) ($IsBox bx1@@24 t1@@42)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@23 t3@@8))))) (and (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |818| :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) (bx1@@25 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@41 t0@@67) ($IsBox bx1@@25 t1@@43)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9)))) :qid |unknown.0:0| :skolemid |819| :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10)) (forall ((h@@44 T@U) (bx0@@42 T@U) (bx1@@26 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@44) (and (and ($IsBox bx0@@42 t0@@68) ($IsBox bx1@@26 t1@@44)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10) t3@@10)) :qid |DafnyPre.521:12| :skolemid |820| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) (bx1@@27 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (and (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (and (and ($IsGoodHeap h@@45) (and (and ($IsBox bx0@@43 t0@@68) ($IsBox bx1@@27 t1@@44)) ($IsBox bx2@@11 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11) t3@@10)) :qid |DafnyPre.521:12| :skolemid |820| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11)) )) ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) (forall ((bx@@60 T@U) ) (!  (=> (and (= (type bx@@60) BoxType) ($IsBox bx@@60 u0@@2)) ($IsBox bx@@60 t0@@69)) :qid |unknown.0:0| :skolemid |822| :pattern ( ($IsBox bx@@60 u0@@2)) :pattern ( ($IsBox bx@@60 t0@@69)) ))) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u1@@1)) ($IsBox bx@@61 t1@@45)) :qid |unknown.0:0| :skolemid |823| :pattern ( ($IsBox bx@@61 u1@@1)) :pattern ( ($IsBox bx@@61 t1@@45)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u2@@0)) ($IsBox bx@@62 t2@@26)) :qid |unknown.0:0| :skolemid |824| :pattern ( ($IsBox bx@@62 u2@@0)) :pattern ( ($IsBox bx@@62 t2@@26)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 t3@@11)) ($IsBox bx@@63 u3)) :qid |unknown.0:0| :skolemid |825| :pattern ( ($IsBox bx@@63 t3@@11)) :pattern ( ($IsBox bx@@63 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |826| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46) (forall ((bx0@@44 T@U) (bx1@@28 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@44) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (and ($IsBox bx1@@28 t1@@46) ($IsAllocBox bx1@@28 t1@@46 h@@46))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |827| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |828| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) ))) (=> (forall ((bx0@@45 T@U) (bx1@@29 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (= (type bx0@@45) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (=> (and (and (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (and ($IsBox bx1@@29 t1@@46) ($IsAllocBox bx1@@29 t1@@46 h@@46))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |827| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |828| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)))) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47))) (forall ((bx0@@46 T@U) (bx1@@30 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (= (type bx0@@46) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@46 t0@@71 h@@47) ($IsAllocBox bx1@@30 t1@@47 h@@47)) ($IsAllocBox bx2@@14 t2@@28 h@@47)) (Requires3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ($IsAllocBox (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14) t3@@13 h@@47))) :qid |unknown.0:0| :skolemid |830| :pattern ( (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47)) )))
(assert (forall ((arg0@@172 T@U) (arg1@@86 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@172 arg1@@86 arg2@@44 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@172 arg1@@86 arg2@@44 arg3@@23)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |832| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) )))
(assert (forall ((arg0@@173 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@173)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@173)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) |#$T0@@41|)) :qid |unknown.0:0| :skolemid |833| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@174 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@174)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@174)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) |#$T1@@26|)) :qid |unknown.0:0| :skolemid |834| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@175 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@175)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@175)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |835| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@176 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@176)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@176)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) |#$R@@57|)) :qid |unknown.0:0| :skolemid |836| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@64 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@64) BoxType)) ($IsBox bx@@64 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@64)) bx@@64) ($Is ($Unbox HandleTypeType bx@@64) (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|)))) :qid |unknown.0:0| :skolemid |837| :pattern ( ($IsBox bx@@64 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@7| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@7| |#$T0@@46|) ($IsBox |x1#0@@3| |#$T1@@30|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@7| |x1#0@@3| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |838| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@8| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@8| |#$T0@@46|) ($IsBox |x1#0@@4| |#$T1@@30|)) ($IsBox |x2#0@@0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@8| |x1#0@@4| |x2#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |838| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))))) :qid |unknown.0:0| :skolemid |839| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14)))) :qid |unknown.0:0| :skolemid |840| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14)) )))
(assert (forall ((arg0@@177 T@U) (arg1@@87 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@177 arg1@@87 arg2@@45 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@177 arg1@@87 arg2@@45 arg3@@24)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |841| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@178)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@178)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) |#$T0@@49|)) :qid |unknown.0:0| :skolemid |842| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) )))
(assert (forall ((arg0@@179 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@179)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@179)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) |#$T1@@34|)) :qid |unknown.0:0| :skolemid |843| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@180 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@180)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@180)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |844| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@181 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@181)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@181)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |846| :pattern ( ($IsBox bx@@65 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@9| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@9| |#$T0@@54|) ($IsBox |x1#0@@5| |#$T1@@38|)) ($IsBox |x2#0@@1| |#$T2@@19|))) (Requires3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@9| |x1#0@@5| |x2#0@@1|)) :qid |unknown.0:0| :skolemid |847| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@10| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@10| |#$T0@@54|) ($IsBox |x1#0@@6| |#$T1@@38|)) ($IsBox |x2#0@@2| |#$T2@@19|))) (Requires3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@10| |x1#0@@6| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |847| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))))) :qid |unknown.0:0| :skolemid |848| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15)))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15)) )))
(assert (forall ((arg0@@182 T@U) (arg1@@88 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@14 T@U) (arg5@@4 T@U) ) (! (= (type (Tclass._System.___hFunc5 arg0@@182 arg1@@88 arg2@@46 arg3@@25 arg4@@14 arg5@@4)) TyType) :qid |funType:Tclass._System.___hFunc5| :pattern ( (Tclass._System.___hFunc5 arg0@@182 arg1@@88 arg2@@46 arg3@@25 arg4@@14 arg5@@4)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) (|#$T4| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$T4|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tag (Tclass._System.___hFunc5 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$T4| |#$R@@69|)) Tagclass._System.___hFunc5)) :qid |unknown.0:0| :skolemid |850| :pattern ( (Tclass._System.___hFunc5 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$T4| |#$R@@69|)) )))
(assert (forall ((arg0@@183 T@U) ) (! (= (type (Tclass._System.___hFunc5_0 arg0@@183)) TyType) :qid |funType:Tclass._System.___hFunc5_0| :pattern ( (Tclass._System.___hFunc5_0 arg0@@183)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) (|#$T4@@0| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$T4@@0|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc5_0 (Tclass._System.___hFunc5 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$T4@@0| |#$R@@70|)) |#$T0@@57|)) :qid |unknown.0:0| :skolemid |851| :pattern ( (Tclass._System.___hFunc5 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$T4@@0| |#$R@@70|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hFunc5_1 arg0@@184)) TyType) :qid |funType:Tclass._System.___hFunc5_1| :pattern ( (Tclass._System.___hFunc5_1 arg0@@184)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) (|#$T4@@1| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$T4@@1|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc5_1 (Tclass._System.___hFunc5 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$T4@@1| |#$R@@71|)) |#$T1@@42|)) :qid |unknown.0:0| :skolemid |852| :pattern ( (Tclass._System.___hFunc5 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$T4@@1| |#$R@@71|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hFunc5_2 arg0@@185)) TyType) :qid |funType:Tclass._System.___hFunc5_2| :pattern ( (Tclass._System.___hFunc5_2 arg0@@185)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) (|#$T4@@2| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$T4@@2|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc5_2 (Tclass._System.___hFunc5 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$T4@@2| |#$R@@72|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |853| :pattern ( (Tclass._System.___hFunc5 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$T4@@2| |#$R@@72|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hFunc5_3 arg0@@186)) TyType) :qid |funType:Tclass._System.___hFunc5_3| :pattern ( (Tclass._System.___hFunc5_3 arg0@@186)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) (|#$T4@@3| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$T4@@3|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc5_3 (Tclass._System.___hFunc5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$T4@@3| |#$R@@73|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hFunc5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$T4@@3| |#$R@@73|)) )))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hFunc5_4 arg0@@187)) TyType) :qid |funType:Tclass._System.___hFunc5_4| :pattern ( (Tclass._System.___hFunc5_4 arg0@@187)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (|#$T4@@4| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$T4@@4|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc5_4 (Tclass._System.___hFunc5 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$T4@@4| |#$R@@74|)) |#$T4@@4|)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hFunc5 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$T4@@4| |#$R@@74|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hFunc5_5 arg0@@188)) TyType) :qid |funType:Tclass._System.___hFunc5_5| :pattern ( (Tclass._System.___hFunc5_5 arg0@@188)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|#$T4@@5| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$T4@@5|) TyType)) (= (type |#$R@@75|) TyType)) (= (Tclass._System.___hFunc5_5 (Tclass._System.___hFunc5 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$T4@@5| |#$R@@75|)) |#$R@@75|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hFunc5 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$T4@@5| |#$R@@75|)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|#$T4@@6| T@U) (|#$R@@76| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$T4@@6|) TyType)) (= (type |#$R@@76|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hFunc5 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$T4@@6| |#$R@@76|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hFunc5 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$T4@@6| |#$R@@76|)))) :qid |unknown.0:0| :skolemid |857| :pattern ( ($IsBox bx@@66 (Tclass._System.___hFunc5 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$T4@@6| |#$R@@76|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@189 T@T) (arg1@@89 T@T) (arg2@@47 T@T) (arg3@@26 T@T) (arg4@@15 T@T) (arg5@@5 T@T) (arg6@@3 T@T) ) (! (= (Ctor (MapType5Type arg0@@189 arg1@@89 arg2@@47 arg3@@26 arg4@@15 arg5@@5 arg6@@3)) 24) :qid |ctor:MapType5Type| )) (forall ((arg0@@190 T@T) (arg1@@90 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@16 T@T) (arg5@@6 T@T) (arg6@@4 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@190 arg1@@90 arg2@@48 arg3@@27 arg4@@16 arg5@@6 arg6@@4)) arg0@@190) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@190 arg1@@90 arg2@@48 arg3@@27 arg4@@16 arg5@@6 arg6@@4)) ))) (forall ((arg0@@191 T@T) (arg1@@91 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@17 T@T) (arg5@@7 T@T) (arg6@@5 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@191 arg1@@91 arg2@@49 arg3@@28 arg4@@17 arg5@@7 arg6@@5)) arg1@@91) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@191 arg1@@91 arg2@@49 arg3@@28 arg4@@17 arg5@@7 arg6@@5)) ))) (forall ((arg0@@192 T@T) (arg1@@92 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@18 T@T) (arg5@@8 T@T) (arg6@@6 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@192 arg1@@92 arg2@@50 arg3@@29 arg4@@18 arg5@@8 arg6@@6)) arg2@@50) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@192 arg1@@92 arg2@@50 arg3@@29 arg4@@18 arg5@@8 arg6@@6)) ))) (forall ((arg0@@193 T@T) (arg1@@93 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@19 T@T) (arg5@@9 T@T) (arg6@@7 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@193 arg1@@93 arg2@@51 arg3@@30 arg4@@19 arg5@@9 arg6@@7)) arg3@@30) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@193 arg1@@93 arg2@@51 arg3@@30 arg4@@19 arg5@@9 arg6@@7)) ))) (forall ((arg0@@194 T@T) (arg1@@94 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@20 T@T) (arg5@@10 T@T) (arg6@@8 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@194 arg1@@94 arg2@@52 arg3@@31 arg4@@20 arg5@@10 arg6@@8)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@194 arg1@@94 arg2@@52 arg3@@31 arg4@@20 arg5@@10 arg6@@8)) ))) (forall ((arg0@@195 T@T) (arg1@@95 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@21 T@T) (arg5@@11 T@T) (arg6@@9 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@195 arg1@@95 arg2@@53 arg3@@32 arg4@@21 arg5@@11 arg6@@9)) arg5@@11) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@195 arg1@@95 arg2@@53 arg3@@32 arg4@@21 arg5@@11 arg6@@9)) ))) (forall ((arg0@@196 T@T) (arg1@@96 T@T) (arg2@@54 T@T) (arg3@@33 T@T) (arg4@@22 T@T) (arg5@@12 T@T) (arg6@@10 T@T) ) (! (= (MapType5TypeInv6 (MapType5Type arg0@@196 arg1@@96 arg2@@54 arg3@@33 arg4@@22 arg5@@12 arg6@@10)) arg6@@10) :qid |typeInv:MapType5TypeInv6| :pattern ( (MapType5Type arg0@@196 arg1@@96 arg2@@54 arg3@@33 arg4@@22 arg5@@12 arg6@@10)) ))) (forall ((arg0@@197 T@U) (arg1@@97 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@23 T@U) (arg5@@13 T@U) (arg6@@11 T@U) ) (! (let ((aVar6 (MapType5TypeInv6 (type arg0@@197)))) (= (type (MapType5Select arg0@@197 arg1@@97 arg2@@55 arg3@@34 arg4@@23 arg5@@13 arg6@@11)) aVar6)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@197 arg1@@97 arg2@@55 arg3@@34 arg4@@23 arg5@@13 arg6@@11)) ))) (forall ((arg0@@198 T@U) (arg1@@98 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@24 T@U) (arg5@@14 T@U) (arg6@@12 T@U) (arg7@@1 T@U) ) (! (let ((aVar6@@0 (type arg7@@1))) (let ((aVar5 (type arg6@@12))) (let ((aVar4@@2 (type arg5@@14))) (let ((aVar3@@3 (type arg4@@24))) (let ((aVar2@@4 (type arg3@@35))) (let ((aVar1@@5 (type arg2@@56))) (let ((aVar0@@3 (type arg1@@98))) (= (type (MapType5Store arg0@@198 arg1@@98 arg2@@56 arg3@@35 arg4@@24 arg5@@14 arg6@@12 arg7@@1)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5 aVar6@@0))))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@198 arg1@@98 arg2@@56 arg3@@35 arg4@@24 arg5@@14 arg6@@12 arg7@@1)) ))) (forall ((m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (x5 T@U) (val@@21 T@U) ) (! (let ((aVar6@@1 (MapType5TypeInv6 (type m@@42)))) (=> (= (type val@@21) aVar6@@1) (= (MapType5Select (MapType5Store m@@42 x0@@20 x1@@14 x2@@10 x3@@5 x4 x5 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4 x5) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (and (forall ((val@@22 T@U) (m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (x5@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) (y5 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@43 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 x5@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4 y5) (MapType5Select m@@43 y0@@15 y1@@11 y2@@8 y3@@4 y4 y5))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (x5@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) (y5@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@44 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 x5@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0 y5@@0) (MapType5Select m@@44 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0 y5@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (x5@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) (y5@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@45 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 x5@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1 y5@@1) (MapType5Select m@@45 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1 y5@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@46 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (x5@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) (y5@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@46 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 x5@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2 y5@@2) (MapType5Select m@@46 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2 y5@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@47 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (x5@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) (y5@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@47 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 x5@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3 y5@@3) (MapType5Select m@@47 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3 y5@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@48 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (x5@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) (y5@@4 T@U) ) (!  (or (= x5@@5 y5@@4) (= (MapType5Select (MapType5Store m@@48 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 x5@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4 y5@@4) (MapType5Select m@@48 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4 y5@@4))) :qid |mapAx1:MapType5Select:5| :weight 0 ))) (forall ((val@@28 T@U) (m@@49 T@U) (x0@@27 T@U) (x1@@21 T@U) (x2@@17 T@U) (x3@@12 T@U) (x4@@6 T@U) (x5@@6 T@U) (y0@@21 T@U) (y1@@17 T@U) (y2@@14 T@U) (y3@@10 T@U) (y4@@5 T@U) (y5@@5 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@49 x0@@27 x1@@21 x2@@17 x3@@12 x4@@6 x5@@6 val@@28) y0@@21 y1@@17 y2@@14 y3@@10 y4@@5 y5@@5) (MapType5Select m@@49 y0@@21 y1@@17 y2@@14 y3@@10 y4@@5 y5@@5))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@199 T@U) (arg1@@99 T@U) (arg2@@57 T@U) (arg3@@36 T@U) (arg4@@25 T@U) (arg5@@15 T@U) (arg6@@13 T@U) (arg7@@2 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) (arg11 T@U) (arg12 T@U) ) (! (= (type (Apply5 arg0@@199 arg1@@99 arg2@@57 arg3@@36 arg4@@25 arg5@@15 arg6@@13 arg7@@2 arg8@@1 arg9 arg10 arg11 arg12)) BoxType) :qid |funType:Apply5| :pattern ( (Apply5 arg0@@199 arg1@@99 arg2@@57 arg3@@36 arg4@@25 arg5@@15 arg6@@13 arg7@@2 arg8@@1 arg9 arg10 arg11 arg12)) ))) (forall ((arg0@@200 T@U) (arg1@@100 T@U) (arg2@@58 T@U) ) (! (= (type (Handle5 arg0@@200 arg1@@100 arg2@@58)) HandleTypeType) :qid |funType:Handle5| :pattern ( (Handle5 arg0@@200 arg1@@100 arg2@@58)) ))))
(assert (forall ((t0@@72 T@U) (t1@@48 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (t5 T@U) (heap@@21 T@U) (h@@48 T@U) (r@@26 T@U) (rd@@11 T@U) (bx0@@47 T@U) (bx1@@31 T@U) (bx2@@15 T@U) (bx3 T@U) (bx4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@48) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type t5) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@48) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@47) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3) BoxType)) (= (type bx4) BoxType)) (= (Apply5 t0@@72 t1@@48 t2@@29 t3@@14 t4 t5 heap@@21 (Handle5 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3 bx4) (MapType5Select h@@48 heap@@21 bx0@@47 bx1@@31 bx2@@15 bx3 bx4))) :qid |unknown.0:0| :skolemid |858| :pattern ( (Apply5 t0@@72 t1@@48 t2@@29 t3@@14 t4 t5 heap@@21 (Handle5 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3 bx4)) )))
(assert (forall ((t0@@73 T@U) (t1@@49 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (t5@@0 T@U) (heap@@22 T@U) (h@@49 T@U) (r@@27 T@U) (rd@@12 T@U) (bx0@@48 T@U) (bx1@@32 T@U) (bx2@@16 T@U) (bx3@@0 T@U) (bx4@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@49) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type t5@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@49) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@48) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@0) BoxType)) (= (type bx4@@0) BoxType)) (U_2_bool (MapType5Select r@@27 heap@@22 bx0@@48 bx1@@32 bx2@@16 bx3@@0 bx4@@0))) (Requires5 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 t5@@0 heap@@22 (Handle5 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0 bx4@@0)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Requires5 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 t5@@0 heap@@22 (Handle5 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0 bx4@@0)) )))
(assert (forall ((arg0@@201 T@U) (arg1@@101 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@26 T@U) (arg5@@16 T@U) (arg6@@14 T@U) (arg7@@3 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) (arg11@@0 T@U) (arg12@@0 T@U) ) (! (= (type (Reads5 arg0@@201 arg1@@101 arg2@@59 arg3@@37 arg4@@26 arg5@@16 arg6@@14 arg7@@3 arg8@@2 arg9@@0 arg10@@0 arg11@@0 arg12@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads5| :pattern ( (Reads5 arg0@@201 arg1@@101 arg2@@59 arg3@@37 arg4@@26 arg5@@16 arg6@@14 arg7@@3 arg8@@2 arg9@@0 arg10@@0 arg11@@0 arg12@@0)) )))
(assert (forall ((t0@@74 T@U) (t1@@50 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (t5@@1 T@U) (heap@@23 T@U) (h@@50 T@U) (r@@28 T@U) (rd@@13 T@U) (bx0@@49 T@U) (bx1@@33 T@U) (bx2@@17 T@U) (bx3@@1 T@U) (bx4@@1 T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@50) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type t5@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@50) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@49) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx4@@1) BoxType)) (= (type bx@@67) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads5 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 t5@@1 heap@@23 (Handle5 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1 bx4@@1) bx@@67)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1 bx4@@1) bx@@67))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1 bx4@@1) bx@@67)) (U_2_bool (MapType0Select (Reads5 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 t5@@1 heap@@23 (Handle5 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1 bx4@@1) bx@@67))))) :qid |unknown.0:0| :skolemid |860| :pattern ( (MapType0Select (Reads5 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 t5@@1 heap@@23 (Handle5 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1 bx4@@1) bx@@67)) )))
(assert (forall ((t0@@75 T@U) (t1@@51 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (t5@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@50 T@U) (bx1@@34 T@U) (bx2@@18 T@U) (bx3@@2 T@U) (bx4@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@51) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type t5@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@2) BoxType)) (= (type bx4@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and (and ($IsBox bx0@@50 t0@@75) ($IsBox bx1@@34 t1@@51)) ($IsBox bx2@@18 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($IsBox bx4@@2 t4@@2)) ($Is f@@53 (Tclass._System.___hFunc5 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 t5@@2)))) (forall ((o@@78 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads5 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 t5@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2 bx4@@2) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@24 o@@78) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@78) fld@@23)))) :qid |unknown.0:0| :skolemid |861| :no-pattern (type o@@78) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads5 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 t5@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2 bx4@@2) (Reads5 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 t5@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2 bx4@@2))) :qid |unknown.0:0| :skolemid |862| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads5 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 t5@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2 bx4@@2)) )))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (t5@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@51 T@U) (bx1@@35 T@U) (bx2@@19 T@U) (bx3@@3 T@U) (bx4@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type t5@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@3) BoxType)) (= (type bx4@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and (and ($IsBox bx0@@51 t0@@76) ($IsBox bx1@@35 t1@@52)) ($IsBox bx2@@19 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($IsBox bx4@@3 t4@@3)) ($Is f@@54 (Tclass._System.___hFunc5 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 t5@@3)))) (forall ((o@@79 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads5 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 t5@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3 bx4@@3) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@25 o@@79) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@79) fld@@24)))) :qid |unknown.0:0| :skolemid |863| :no-pattern (type o@@79) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads5 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 t5@@3 h0@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3 bx4@@3) (Reads5 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 t5@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3 bx4@@3))) :qid |unknown.0:0| :skolemid |864| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads5 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 t5@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3 bx4@@3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (t5@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@52 T@U) (bx1@@36 T@U) (bx2@@20 T@U) (bx3@@4 T@U) (bx4@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type t5@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@52) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@4) BoxType)) (= (type bx4@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and (and ($IsBox bx0@@52 t0@@77) ($IsBox bx1@@36 t1@@53)) ($IsBox bx2@@20 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($IsBox bx4@@4 t4@@4)) ($Is f@@55 (Tclass._System.___hFunc5 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 t5@@4)))) (forall ((o@@80 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads5 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 t5@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4 bx4@@4) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@26 o@@80) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@80) fld@@25)))) :qid |unknown.0:0| :skolemid |865| :no-pattern (type o@@80) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires5 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 t5@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4 bx4@@4) (Requires5 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 t5@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4 bx4@@4)) (=> (Requires5 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 t5@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4 bx4@@4) (Requires5 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 t5@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4 bx4@@4)))) :qid |unknown.0:0| :skolemid |866| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires5 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 t5@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4 bx4@@4)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (t5@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@53 T@U) (bx1@@37 T@U) (bx2@@21 T@U) (bx3@@5 T@U) (bx4@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type t5@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@53) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@5) BoxType)) (= (type bx4@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and (and ($IsBox bx0@@53 t0@@78) ($IsBox bx1@@37 t1@@54)) ($IsBox bx2@@21 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($IsBox bx4@@5 t4@@5)) ($Is f@@56 (Tclass._System.___hFunc5 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 t5@@5)))) (forall ((o@@81 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads5 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 t5@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5 bx4@@5) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@27 o@@81) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@81) fld@@26)))) :qid |unknown.0:0| :skolemid |867| :no-pattern (type o@@81) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires5 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 t5@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5 bx4@@5) (Requires5 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 t5@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5 bx4@@5)) (=> (Requires5 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 t5@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5 bx4@@5) (Requires5 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 t5@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5 bx4@@5)))) :qid |unknown.0:0| :skolemid |868| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires5 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 t5@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5 bx4@@5)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (t5@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@54 T@U) (bx1@@38 T@U) (bx2@@22 T@U) (bx3@@6 T@U) (bx4@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type t5@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@54) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@6) BoxType)) (= (type bx4@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and (and ($IsBox bx0@@54 t0@@79) ($IsBox bx1@@38 t1@@55)) ($IsBox bx2@@22 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($IsBox bx4@@6 t4@@6)) ($Is f@@57 (Tclass._System.___hFunc5 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 t5@@6)))) (forall ((o@@82 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads5 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 t5@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6 bx4@@6) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@28 o@@82) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@82) fld@@27)))) :qid |unknown.0:0| :skolemid |869| :no-pattern (type o@@82) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply5 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 t5@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6 bx4@@6) (Apply5 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 t5@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6 bx4@@6))) :qid |unknown.0:0| :skolemid |870| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply5 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 t5@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6 bx4@@6)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (t5@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@55 T@U) (bx1@@39 T@U) (bx2@@23 T@U) (bx3@@7 T@U) (bx4@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type t5@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@55) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@7) BoxType)) (= (type bx4@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and (and ($IsBox bx0@@55 t0@@80) ($IsBox bx1@@39 t1@@56)) ($IsBox bx2@@23 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($IsBox bx4@@7 t4@@7)) ($Is f@@58 (Tclass._System.___hFunc5 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 t5@@7)))) (forall ((o@@83 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads5 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 t5@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7 bx4@@7) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@29 o@@83) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@83) fld@@28)))) :qid |unknown.0:0| :skolemid |871| :no-pattern (type o@@83) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply5 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 t5@@7 h0@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7 bx4@@7) (Apply5 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 t5@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7 bx4@@7))) :qid |unknown.0:0| :skolemid |872| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply5 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 t5@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7 bx4@@7)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (t5@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@56 T@U) (bx1@@40 T@U) (bx2@@24 T@U) (bx3@@8 T@U) (bx4@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type t5@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@56) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@8) BoxType)) (= (type bx4@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and (and ($IsBox bx0@@56 t0@@81) ($IsBox bx1@@40 t1@@57)) ($IsBox bx2@@24 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($IsBox bx4@@8 t4@@8)) ($Is f@@59 (Tclass._System.___hFunc5 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 t5@@8))))) (and (=> (|Set#Equal| (Reads5 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 t5@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8 bx4@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 t5@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8 bx4@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads5 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 t5@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8 bx4@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 t5@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8 bx4@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |873| :pattern ( (Reads5 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 t5@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8 bx4@@8) ($IsGoodHeap heap@@24)) :pattern ( (Reads5 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 t5@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8 bx4@@8)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (t5@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@57 T@U) (bx1@@41 T@U) (bx2@@25 T@U) (bx3@@9 T@U) (bx4@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type t5@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@57) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@9) BoxType)) (= (type bx4@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and (and ($IsBox bx0@@57 t0@@82) ($IsBox bx1@@41 t1@@58)) ($IsBox bx2@@25 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($IsBox bx4@@9 t4@@9)) ($Is f@@60 (Tclass._System.___hFunc5 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 t5@@9)))) (|Set#Equal| (Reads5 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 t5@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9 bx4@@9) (|Set#Empty| BoxType)))) (and (=> (Requires5 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 t5@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9 bx4@@9) (Requires5 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 t5@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9 bx4@@9)) (=> (Requires5 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 t5@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9 bx4@@9) (Requires5 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 t5@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9 bx4@@9)))) :qid |unknown.0:0| :skolemid |874| :pattern ( (Requires5 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 t5@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9 bx4@@9) ($IsGoodHeap heap@@25)) :pattern ( (Requires5 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 t5@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9 bx4@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@83 T@U) (t1@@59 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) (t5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@59) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (= (type t5@@10) TyType)) (and (=> ($Is f@@61 (Tclass._System.___hFunc5 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 t5@@10)) (forall ((h@@51 T@U) (bx0@@58 T@U) (bx1@@42 T@U) (bx2@@26 T@U) (bx3@@10 T@U) (bx4@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@51) (MapType0Type refType MapType1Type)) (= (type bx0@@58) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@10) BoxType)) (= (type bx4@@10) BoxType)) (and (and ($IsGoodHeap h@@51) (and (and (and (and ($IsBox bx0@@58 t0@@83) ($IsBox bx1@@42 t1@@59)) ($IsBox bx2@@26 t2@@40)) ($IsBox bx3@@10 t3@@25)) ($IsBox bx4@@10 t4@@10))) (Requires5 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 t5@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10 bx4@@10))) ($IsBox (Apply5 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 t5@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10 bx4@@10) t5@@10)) :qid |DafnyPre.521:12| :skolemid |875| :pattern ( (Apply5 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 t5@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10 bx4@@10)) ))) (=> (forall ((h@@52 T@U) (bx0@@59 T@U) (bx1@@43 T@U) (bx2@@27 T@U) (bx3@@11 T@U) (bx4@@11 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@52) (MapType0Type refType MapType1Type)) (= (type bx0@@59) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@11) BoxType)) (= (type bx4@@11) BoxType)) (and (and ($IsGoodHeap h@@52) (and (and (and (and ($IsBox bx0@@59 t0@@83) ($IsBox bx1@@43 t1@@59)) ($IsBox bx2@@27 t2@@40)) ($IsBox bx3@@11 t3@@25)) ($IsBox bx4@@11 t4@@10))) (Requires5 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 t5@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11 bx4@@11))) ($IsBox (Apply5 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 t5@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11 bx4@@11) t5@@10)) :qid |DafnyPre.521:12| :skolemid |875| :pattern ( (Apply5 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 t5@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11 bx4@@11)) )) ($Is f@@61 (Tclass._System.___hFunc5 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 t5@@10))))) :qid |unknown.0:0| :skolemid |876| :pattern ( ($Is f@@61 (Tclass._System.___hFunc5 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 t5@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@84 T@U) (t1@@60 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (t5@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) (u5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@84) TyType)) (= (type t1@@60) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type t5@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (= (type u5) TyType)) (and (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc5 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11 t5@@11)) (forall ((bx@@68 T@U) ) (!  (=> (and (= (type bx@@68) BoxType) ($IsBox bx@@68 u0@@3)) ($IsBox bx@@68 t0@@84)) :qid |unknown.0:0| :skolemid |877| :pattern ( ($IsBox bx@@68 u0@@3)) :pattern ( ($IsBox bx@@68 t0@@84)) ))) (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 u1@@2)) ($IsBox bx@@69 t1@@60)) :qid |unknown.0:0| :skolemid |878| :pattern ( ($IsBox bx@@69 u1@@2)) :pattern ( ($IsBox bx@@69 t1@@60)) ))) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u2@@1)) ($IsBox bx@@70 t2@@41)) :qid |unknown.0:0| :skolemid |879| :pattern ( ($IsBox bx@@70 u2@@1)) :pattern ( ($IsBox bx@@70 t2@@41)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u3@@0)) ($IsBox bx@@71 t3@@26)) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@71 u3@@0)) :pattern ( ($IsBox bx@@71 t3@@26)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 u4)) ($IsBox bx@@72 t4@@11)) :qid |unknown.0:0| :skolemid |881| :pattern ( ($IsBox bx@@72 u4)) :pattern ( ($IsBox bx@@72 t4@@11)) ))) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 t5@@11)) ($IsBox bx@@73 u5)) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@73 t5@@11)) :pattern ( ($IsBox bx@@73 u5)) )))) ($Is f@@62 (Tclass._System.___hFunc5 u0@@3 u1@@2 u2@@1 u3@@0 u4 u5))) :qid |unknown.0:0| :skolemid |883| :pattern ( ($Is f@@62 (Tclass._System.___hFunc5 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11 t5@@11)) ($Is f@@62 (Tclass._System.___hFunc5 u0@@3 u1@@2 u2@@1 u3@@0 u4 u5))) )))
(assert (forall ((f@@63 T@U) (t0@@85 T@U) (t1@@61 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (t5@@12 T@U) (h@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@85) TyType)) (= (type t1@@61) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type t5@@12) TyType)) (= (type h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@53)) (and (=> ($IsAlloc f@@63 (Tclass._System.___hFunc5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12) h@@53) (forall ((bx0@@60 T@U) (bx1@@44 T@U) (bx2@@28 T@U) (bx3@@12 T@U) (bx4@@12 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@60) BoxType) (= (type bx1@@44) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@12) BoxType)) (= (type bx4@@12) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@60 t0@@85) ($IsAllocBox bx0@@60 t0@@85 h@@53)) (and ($IsBox bx1@@44 t1@@61) ($IsAllocBox bx1@@44 t1@@61 h@@53))) (and ($IsBox bx2@@28 t2@@42) ($IsAllocBox bx2@@28 t2@@42 h@@53))) (and ($IsBox bx3@@12 t3@@27) ($IsAllocBox bx3@@12 t3@@27 h@@53))) (and ($IsBox bx4@@12 t4@@12) ($IsAllocBox bx4@@12 t4@@12 h@@53))) (Requires5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12 bx4@@12)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12 bx4@@12) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |884| :pattern ( (MapType0Select (Reads5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12 bx4@@12) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |885| :pattern ( (Apply5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12 bx4@@12)) :pattern ( (Reads5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12 bx4@@12)) ))) (=> (forall ((bx0@@61 T@U) (bx1@@45 T@U) (bx2@@29 T@U) (bx3@@13 T@U) (bx4@@13 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@61) BoxType) (= (type bx1@@45) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@13) BoxType)) (= (type bx4@@13) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@61 t0@@85) ($IsAllocBox bx0@@61 t0@@85 h@@53)) (and ($IsBox bx1@@45 t1@@61) ($IsAllocBox bx1@@45 t1@@61 h@@53))) (and ($IsBox bx2@@29 t2@@42) ($IsAllocBox bx2@@29 t2@@42 h@@53))) (and ($IsBox bx3@@13 t3@@27) ($IsAllocBox bx3@@13 t3@@27 h@@53))) (and ($IsBox bx4@@13 t4@@12) ($IsAllocBox bx4@@13 t4@@12 h@@53))) (Requires5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13 bx4@@13)) (forall ((r@@30 T@U) ) (!  (=> (= (type r@@30) refType) (=> (and (not (= r@@30 null)) (U_2_bool (MapType0Select (Reads5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13 bx4@@13) ($Box r@@30)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@30) alloc)))) :qid |unknown.0:0| :skolemid |884| :pattern ( (MapType0Select (Reads5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13 bx4@@13) ($Box r@@30))) )))) :qid |unknown.0:0| :skolemid |885| :pattern ( (Apply5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13 bx4@@13)) :pattern ( (Reads5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13 bx4@@13)) )) ($IsAlloc f@@63 (Tclass._System.___hFunc5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12) h@@53)))) :qid |unknown.0:0| :skolemid |886| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc5 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 t5@@12) h@@53)) )))
(assert (forall ((f@@64 T@U) (t0@@86 T@U) (t1@@62 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (t5@@13 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@86) TyType)) (= (type t1@@62) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type t5@@13) TyType)) (= (type h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@54) ($IsAlloc f@@64 (Tclass._System.___hFunc5 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 t5@@13) h@@54))) (forall ((bx0@@62 T@U) (bx1@@46 T@U) (bx2@@30 T@U) (bx3@@14 T@U) (bx4@@14 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@62) BoxType) (= (type bx1@@46) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@14) BoxType)) (= (type bx4@@14) BoxType)) (=> (and (and (and (and (and ($IsAllocBox bx0@@62 t0@@86 h@@54) ($IsAllocBox bx1@@46 t1@@62 h@@54)) ($IsAllocBox bx2@@30 t2@@43 h@@54)) ($IsAllocBox bx3@@14 t3@@28 h@@54)) ($IsAllocBox bx4@@14 t4@@13 h@@54)) (Requires5 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 t5@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14 bx4@@14)) ($IsAllocBox (Apply5 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 t5@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14 bx4@@14) t5@@13 h@@54))) :qid |unknown.0:0| :skolemid |887| :pattern ( (Apply5 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 t5@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14 bx4@@14)) ))) :qid |unknown.0:0| :skolemid |888| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc5 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 t5@@13) h@@54)) )))
(assert (forall ((arg0@@202 T@U) (arg1@@102 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@27 T@U) (arg5@@17 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5 arg0@@202 arg1@@102 arg2@@60 arg3@@38 arg4@@27 arg5@@17)) TyType) :qid |funType:Tclass._System.___hPartialFunc5| :pattern ( (Tclass._System.___hPartialFunc5 arg0@@202 arg1@@102 arg2@@60 arg3@@38 arg4@@27 arg5@@17)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) (|#$T4@@7| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$T4@@7|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tag (Tclass._System.___hPartialFunc5 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$T4@@7| |#$R@@77|)) Tagclass._System.___hPartialFunc5)) :qid |unknown.0:0| :skolemid |889| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$T4@@7| |#$R@@77|)) )))
(assert (forall ((arg0@@203 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_0 arg0@@203)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_0| :pattern ( (Tclass._System.___hPartialFunc5_0 arg0@@203)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) (|#$T4@@8| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$T4@@8|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc5_0 (Tclass._System.___hPartialFunc5 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$T4@@8| |#$R@@78|)) |#$T0@@65|)) :qid |unknown.0:0| :skolemid |890| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$T4@@8| |#$R@@78|)) )))
(assert (forall ((arg0@@204 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_1 arg0@@204)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_1| :pattern ( (Tclass._System.___hPartialFunc5_1 arg0@@204)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$T3@@9| T@U) (|#$T4@@9| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$T4@@9|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc5_1 (Tclass._System.___hPartialFunc5 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$T4@@9| |#$R@@79|)) |#$T1@@50|)) :qid |unknown.0:0| :skolemid |891| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$T4@@9| |#$R@@79|)) )))
(assert (forall ((arg0@@205 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_2 arg0@@205)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_2| :pattern ( (Tclass._System.___hPartialFunc5_2 arg0@@205)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$T3@@10| T@U) (|#$T4@@10| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$T4@@10|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc5_2 (Tclass._System.___hPartialFunc5 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$T4@@10| |#$R@@80|)) |#$T2@@32|)) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$T4@@10| |#$R@@80|)) )))
(assert (forall ((arg0@@206 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_3 arg0@@206)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_3| :pattern ( (Tclass._System.___hPartialFunc5_3 arg0@@206)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (|#$T4@@11| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$T4@@11|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc5_3 (Tclass._System.___hPartialFunc5 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$T4@@11| |#$R@@81|)) |#$T3@@11|)) :qid |unknown.0:0| :skolemid |893| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$T4@@11| |#$R@@81|)) )))
(assert (forall ((arg0@@207 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_4 arg0@@207)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_4| :pattern ( (Tclass._System.___hPartialFunc5_4 arg0@@207)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$T4@@12| T@U) (|#$R@@82| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$T4@@12|) TyType)) (= (type |#$R@@82|) TyType)) (= (Tclass._System.___hPartialFunc5_4 (Tclass._System.___hPartialFunc5 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$T4@@12| |#$R@@82|)) |#$T4@@12|)) :qid |unknown.0:0| :skolemid |894| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$T4@@12| |#$R@@82|)) )))
(assert (forall ((arg0@@208 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_5 arg0@@208)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_5| :pattern ( (Tclass._System.___hPartialFunc5_5 arg0@@208)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$T4@@13| T@U) (|#$R@@83| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$T4@@13|) TyType)) (= (type |#$R@@83|) TyType)) (= (Tclass._System.___hPartialFunc5_5 (Tclass._System.___hPartialFunc5 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$T4@@13| |#$R@@83|)) |#$R@@83|)) :qid |unknown.0:0| :skolemid |895| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$T4@@13| |#$R@@83|)) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$T4@@14| T@U) (|#$R@@84| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$T4@@14|) TyType)) (= (type |#$R@@84|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hPartialFunc5 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$T4@@14| |#$R@@84|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hPartialFunc5 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$T4@@14| |#$R@@84|)))) :qid |unknown.0:0| :skolemid |896| :pattern ( ($IsBox bx@@74 (Tclass._System.___hPartialFunc5 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$T4@@14| |#$R@@84|))) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$T4@@15| T@U) (|#$R@@85| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$T4@@15|) TyType)) (= (type |#$R@@85|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (and (=> ($Is |f#0@@15| (Tclass._System.___hPartialFunc5 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$T4@@15| |#$R@@85|)) (and ($Is |f#0@@15| (Tclass._System.___hFunc5 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$T4@@15| |#$R@@85|)) (forall ((|x0#0@@11| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) (|x3#0| T@U) (|x4#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0|) BoxType)) (= (type |x4#0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@11| |#$T0@@72|) ($IsBox |x1#0@@7| |#$T1@@56|)) ($IsBox |x2#0@@3| |#$T2@@37|)) ($IsBox |x3#0| |#$T3@@15|)) ($IsBox |x4#0| |#$T4@@15|))) (|Set#Equal| (Reads5 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$T4@@15| |#$R@@85| $OneHeap |f#0@@15| |x0#0@@11| |x1#0@@7| |x2#0@@3| |x3#0| |x4#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |897| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0|) :no-pattern (type |x4#0|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) :no-pattern (U_2_int |x4#0|) :no-pattern (U_2_bool |x4#0|) )))) (=> (and ($Is |f#0@@15| (Tclass._System.___hFunc5 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$T4@@15| |#$R@@85|)) (forall ((|x0#0@@12| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) (|x3#0@@0| T@U) (|x4#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@0|) BoxType)) (= (type |x4#0@@0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@12| |#$T0@@72|) ($IsBox |x1#0@@8| |#$T1@@56|)) ($IsBox |x2#0@@4| |#$T2@@37|)) ($IsBox |x3#0@@0| |#$T3@@15|)) ($IsBox |x4#0@@0| |#$T4@@15|))) (|Set#Equal| (Reads5 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$T4@@15| |#$R@@85| $OneHeap |f#0@@15| |x0#0@@12| |x1#0@@8| |x2#0@@4| |x3#0@@0| |x4#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |897| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@0|) :no-pattern (type |x4#0@@0|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) :no-pattern (U_2_int |x4#0@@0|) :no-pattern (U_2_bool |x4#0@@0|) ))) ($Is |f#0@@15| (Tclass._System.___hPartialFunc5 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$T4@@15| |#$R@@85|))))) :qid |unknown.0:0| :skolemid |898| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc5 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$T4@@15| |#$R@@85|))) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$T4@@16| T@U) (|#$R@@86| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$T4@@16|) TyType)) (= (type |#$R@@86|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc5 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$T4@@16| |#$R@@86|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc5 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$T4@@16| |#$R@@86|) $h@@16)) (=> ($IsAlloc |f#0@@16| (Tclass._System.___hFunc5 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$T4@@16| |#$R@@86|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc5 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$T4@@16| |#$R@@86|) $h@@16)))) :qid |unknown.0:0| :skolemid |899| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc5 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$T4@@16| |#$R@@86|) $h@@16)) )))
(assert (forall ((arg0@@209 T@U) (arg1@@103 T@U) (arg2@@61 T@U) (arg3@@39 T@U) (arg4@@28 T@U) (arg5@@18 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5 arg0@@209 arg1@@103 arg2@@61 arg3@@39 arg4@@28 arg5@@18)) TyType) :qid |funType:Tclass._System.___hTotalFunc5| :pattern ( (Tclass._System.___hTotalFunc5 arg0@@209 arg1@@103 arg2@@61 arg3@@39 arg4@@28 arg5@@18)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$T4@@17| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$T4@@17|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tag (Tclass._System.___hTotalFunc5 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$T4@@17| |#$R@@87|)) Tagclass._System.___hTotalFunc5)) :qid |unknown.0:0| :skolemid |900| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$T4@@17| |#$R@@87|)) )))
(assert (forall ((arg0@@210 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_0 arg0@@210)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_0| :pattern ( (Tclass._System.___hTotalFunc5_0 arg0@@210)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$T4@@18| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$T4@@18|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc5_0 (Tclass._System.___hTotalFunc5 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$T4@@18| |#$R@@88|)) |#$T0@@75|)) :qid |unknown.0:0| :skolemid |901| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$T4@@18| |#$R@@88|)) )))
(assert (forall ((arg0@@211 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_1 arg0@@211)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_1| :pattern ( (Tclass._System.___hTotalFunc5_1 arg0@@211)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$T4@@19| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$T4@@19|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc5_1 (Tclass._System.___hTotalFunc5 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$T4@@19| |#$R@@89|)) |#$T1@@60|)) :qid |unknown.0:0| :skolemid |902| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$T4@@19| |#$R@@89|)) )))
(assert (forall ((arg0@@212 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_2 arg0@@212)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_2| :pattern ( (Tclass._System.___hTotalFunc5_2 arg0@@212)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$T4@@20| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$T4@@20|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc5_2 (Tclass._System.___hTotalFunc5 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$T4@@20| |#$R@@90|)) |#$T2@@42|)) :qid |unknown.0:0| :skolemid |903| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$T4@@20| |#$R@@90|)) )))
(assert (forall ((arg0@@213 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_3 arg0@@213)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_3| :pattern ( (Tclass._System.___hTotalFunc5_3 arg0@@213)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$T4@@21| T@U) (|#$R@@91| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$T4@@21|) TyType)) (= (type |#$R@@91|) TyType)) (= (Tclass._System.___hTotalFunc5_3 (Tclass._System.___hTotalFunc5 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$T4@@21| |#$R@@91|)) |#$T3@@21|)) :qid |unknown.0:0| :skolemid |904| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$T4@@21| |#$R@@91|)) )))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_4 arg0@@214)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_4| :pattern ( (Tclass._System.___hTotalFunc5_4 arg0@@214)) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$T4@@22| T@U) (|#$R@@92| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$T4@@22|) TyType)) (= (type |#$R@@92|) TyType)) (= (Tclass._System.___hTotalFunc5_4 (Tclass._System.___hTotalFunc5 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$T4@@22| |#$R@@92|)) |#$T4@@22|)) :qid |unknown.0:0| :skolemid |905| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$T4@@22| |#$R@@92|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_5 arg0@@215)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_5| :pattern ( (Tclass._System.___hTotalFunc5_5 arg0@@215)) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$T4@@23| T@U) (|#$R@@93| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$T4@@23|) TyType)) (= (type |#$R@@93|) TyType)) (= (Tclass._System.___hTotalFunc5_5 (Tclass._System.___hTotalFunc5 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$T4@@23| |#$R@@93|)) |#$R@@93|)) :qid |unknown.0:0| :skolemid |906| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$T4@@23| |#$R@@93|)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@46| T@U) (|#$T3@@24| T@U) (|#$T4@@24| T@U) (|#$R@@94| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$T4@@24|) TyType)) (= (type |#$R@@94|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hTotalFunc5 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@24| |#$T4@@24| |#$R@@94|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hTotalFunc5 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@24| |#$T4@@24| |#$R@@94|)))) :qid |unknown.0:0| :skolemid |907| :pattern ( ($IsBox bx@@75 (Tclass._System.___hTotalFunc5 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@24| |#$T4@@24| |#$R@@94|))) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@47| T@U) (|#$T3@@25| T@U) (|#$T4@@25| T@U) (|#$R@@95| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$T4@@25|) TyType)) (= (type |#$R@@95|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (and (=> ($Is |f#0@@17| (Tclass._System.___hTotalFunc5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@25| |#$R@@95|)) (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@25| |#$R@@95|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) (|x3#0@@1| T@U) (|x4#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@1|) BoxType)) (= (type |x4#0@@1|) BoxType)) (and (and (and (and ($IsBox |x0#0@@13| |#$T0@@82|) ($IsBox |x1#0@@9| |#$T1@@66|)) ($IsBox |x2#0@@5| |#$T2@@47|)) ($IsBox |x3#0@@1| |#$T3@@25|)) ($IsBox |x4#0@@1| |#$T4@@25|))) (Requires5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@25| |#$R@@95| $OneHeap |f#0@@17| |x0#0@@13| |x1#0@@9| |x2#0@@5| |x3#0@@1| |x4#0@@1|)) :qid |unknown.0:0| :skolemid |908| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@1|) :no-pattern (type |x4#0@@1|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) :no-pattern (U_2_int |x4#0@@1|) :no-pattern (U_2_bool |x4#0@@1|) )))) (=> (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@25| |#$R@@95|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) (|x3#0@@2| T@U) (|x4#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@2|) BoxType)) (= (type |x4#0@@2|) BoxType)) (and (and (and (and ($IsBox |x0#0@@14| |#$T0@@82|) ($IsBox |x1#0@@10| |#$T1@@66|)) ($IsBox |x2#0@@6| |#$T2@@47|)) ($IsBox |x3#0@@2| |#$T3@@25|)) ($IsBox |x4#0@@2| |#$T4@@25|))) (Requires5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@25| |#$R@@95| $OneHeap |f#0@@17| |x0#0@@14| |x1#0@@10| |x2#0@@6| |x3#0@@2| |x4#0@@2|)) :qid |unknown.0:0| :skolemid |908| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@2|) :no-pattern (type |x4#0@@2|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) :no-pattern (U_2_int |x4#0@@2|) :no-pattern (U_2_bool |x4#0@@2|) ))) ($Is |f#0@@17| (Tclass._System.___hTotalFunc5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@25| |#$R@@95|))))) :qid |unknown.0:0| :skolemid |909| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@25| |#$R@@95|))) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@48| T@U) (|#$T3@@26| T@U) (|#$T4@@26| T@U) (|#$R@@96| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$T4@@26|) TyType)) (= (type |#$R@@96|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc5 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@26| |#$T4@@26| |#$R@@96|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc5 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@26| |#$T4@@26| |#$R@@96|) $h@@17)) (=> ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc5 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@26| |#$T4@@26| |#$R@@96|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc5 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@26| |#$T4@@26| |#$R@@96|) $h@@17)))) :qid |unknown.0:0| :skolemid |910| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc5 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@26| |#$T4@@26| |#$R@@96|) $h@@17)) )))
(assert (forall ((arg0@@216 T@U) (arg1@@104 T@U) (arg2@@62 T@U) (arg3@@40 T@U) (arg4@@29 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@216 arg1@@104 arg2@@62 arg3@@40 arg4@@29)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@216 arg1@@104 arg2@@62 arg3@@40 arg4@@29)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@49| T@U) (|#$T3@@27| T@U) (|#$R@@97| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$R@@97|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@27| |#$R@@97|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@27| |#$R@@97|)) )))
(assert (forall ((arg0@@217 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@217)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@217)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@50| T@U) (|#$T3@@28| T@U) (|#$R@@98| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$R@@98|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@28| |#$R@@98|)) |#$T0@@85|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.___hFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@28| |#$R@@98|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@218)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@218)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@51| T@U) (|#$T3@@29| T@U) (|#$R@@99| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$R@@99|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@29| |#$R@@99|)) |#$T1@@70|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.___hFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@29| |#$R@@99|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@219)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@219)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@52| T@U) (|#$T3@@30| T@U) (|#$R@@100| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$R@@100|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@30| |#$R@@100|)) |#$T2@@52|)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@30| |#$R@@100|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@220)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@220)) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@53| T@U) (|#$T3@@31| T@U) (|#$R@@101| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$T3@@31|) TyType)) (= (type |#$R@@101|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$R@@101|)) |#$T3@@31|)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$R@@101|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@221)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@221)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@54| T@U) (|#$T3@@32| T@U) (|#$R@@102| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$T3@@32|) TyType)) (= (type |#$R@@102|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$R@@102|)) |#$R@@102|)) :qid |unknown.0:0| :skolemid |916| :pattern ( (Tclass._System.___hFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$R@@102|)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@55| T@U) (|#$T3@@33| T@U) (|#$R@@103| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$T3@@33|) TyType)) (= (type |#$R@@103|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$R@@103|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$R@@103|)))) :qid |unknown.0:0| :skolemid |917| :pattern ( ($IsBox bx@@76 (Tclass._System.___hFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$R@@103|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@222 T@T) (arg1@@105 T@T) (arg2@@63 T@T) (arg3@@41 T@T) (arg4@@30 T@T) (arg5@@19 T@T) ) (! (= (Ctor (MapType6Type arg0@@222 arg1@@105 arg2@@63 arg3@@41 arg4@@30 arg5@@19)) 25) :qid |ctor:MapType6Type| )) (forall ((arg0@@223 T@T) (arg1@@106 T@T) (arg2@@64 T@T) (arg3@@42 T@T) (arg4@@31 T@T) (arg5@@20 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@223 arg1@@106 arg2@@64 arg3@@42 arg4@@31 arg5@@20)) arg0@@223) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@223 arg1@@106 arg2@@64 arg3@@42 arg4@@31 arg5@@20)) ))) (forall ((arg0@@224 T@T) (arg1@@107 T@T) (arg2@@65 T@T) (arg3@@43 T@T) (arg4@@32 T@T) (arg5@@21 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@224 arg1@@107 arg2@@65 arg3@@43 arg4@@32 arg5@@21)) arg1@@107) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@224 arg1@@107 arg2@@65 arg3@@43 arg4@@32 arg5@@21)) ))) (forall ((arg0@@225 T@T) (arg1@@108 T@T) (arg2@@66 T@T) (arg3@@44 T@T) (arg4@@33 T@T) (arg5@@22 T@T) ) (! (= (MapType6TypeInv2 (MapType6Type arg0@@225 arg1@@108 arg2@@66 arg3@@44 arg4@@33 arg5@@22)) arg2@@66) :qid |typeInv:MapType6TypeInv2| :pattern ( (MapType6Type arg0@@225 arg1@@108 arg2@@66 arg3@@44 arg4@@33 arg5@@22)) ))) (forall ((arg0@@226 T@T) (arg1@@109 T@T) (arg2@@67 T@T) (arg3@@45 T@T) (arg4@@34 T@T) (arg5@@23 T@T) ) (! (= (MapType6TypeInv3 (MapType6Type arg0@@226 arg1@@109 arg2@@67 arg3@@45 arg4@@34 arg5@@23)) arg3@@45) :qid |typeInv:MapType6TypeInv3| :pattern ( (MapType6Type arg0@@226 arg1@@109 arg2@@67 arg3@@45 arg4@@34 arg5@@23)) ))) (forall ((arg0@@227 T@T) (arg1@@110 T@T) (arg2@@68 T@T) (arg3@@46 T@T) (arg4@@35 T@T) (arg5@@24 T@T) ) (! (= (MapType6TypeInv4 (MapType6Type arg0@@227 arg1@@110 arg2@@68 arg3@@46 arg4@@35 arg5@@24)) arg4@@35) :qid |typeInv:MapType6TypeInv4| :pattern ( (MapType6Type arg0@@227 arg1@@110 arg2@@68 arg3@@46 arg4@@35 arg5@@24)) ))) (forall ((arg0@@228 T@T) (arg1@@111 T@T) (arg2@@69 T@T) (arg3@@47 T@T) (arg4@@36 T@T) (arg5@@25 T@T) ) (! (= (MapType6TypeInv5 (MapType6Type arg0@@228 arg1@@111 arg2@@69 arg3@@47 arg4@@36 arg5@@25)) arg5@@25) :qid |typeInv:MapType6TypeInv5| :pattern ( (MapType6Type arg0@@228 arg1@@111 arg2@@69 arg3@@47 arg4@@36 arg5@@25)) ))) (forall ((arg0@@229 T@U) (arg1@@112 T@U) (arg2@@70 T@U) (arg3@@48 T@U) (arg4@@37 T@U) (arg5@@26 T@U) ) (! (let ((aVar5@@0 (MapType6TypeInv5 (type arg0@@229)))) (= (type (MapType6Select arg0@@229 arg1@@112 arg2@@70 arg3@@48 arg4@@37 arg5@@26)) aVar5@@0)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@229 arg1@@112 arg2@@70 arg3@@48 arg4@@37 arg5@@26)) ))) (forall ((arg0@@230 T@U) (arg1@@113 T@U) (arg2@@71 T@U) (arg3@@49 T@U) (arg4@@38 T@U) (arg5@@27 T@U) (arg6@@15 T@U) ) (! (let ((aVar5@@1 (type arg6@@15))) (let ((aVar4@@3 (type arg5@@27))) (let ((aVar3@@4 (type arg4@@38))) (let ((aVar2@@5 (type arg3@@49))) (let ((aVar1@@6 (type arg2@@71))) (let ((aVar0@@4 (type arg1@@113))) (= (type (MapType6Store arg0@@230 arg1@@113 arg2@@71 arg3@@49 arg4@@38 arg5@@27 arg6@@15)) (MapType6Type aVar0@@4 aVar1@@6 aVar2@@5 aVar3@@4 aVar4@@3 aVar5@@1)))))))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@230 arg1@@113 arg2@@71 arg3@@49 arg4@@38 arg5@@27 arg6@@15)) ))) (forall ((m@@50 T@U) (x0@@28 T@U) (x1@@22 T@U) (x2@@18 T@U) (x3@@13 T@U) (x4@@7 T@U) (val@@29 T@U) ) (! (let ((aVar5@@2 (MapType6TypeInv5 (type m@@50)))) (=> (= (type val@@29) aVar5@@2) (= (MapType6Select (MapType6Store m@@50 x0@@28 x1@@22 x2@@18 x3@@13 x4@@7 val@@29) x0@@28 x1@@22 x2@@18 x3@@13 x4@@7) val@@29))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@30 T@U) (m@@51 T@U) (x0@@29 T@U) (x1@@23 T@U) (x2@@19 T@U) (x3@@14 T@U) (x4@@8 T@U) (y0@@22 T@U) (y1@@18 T@U) (y2@@15 T@U) (y3@@11 T@U) (y4@@6 T@U) ) (!  (or (= x0@@29 y0@@22) (= (MapType6Select (MapType6Store m@@51 x0@@29 x1@@23 x2@@19 x3@@14 x4@@8 val@@30) y0@@22 y1@@18 y2@@15 y3@@11 y4@@6) (MapType6Select m@@51 y0@@22 y1@@18 y2@@15 y3@@11 y4@@6))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@31 T@U) (m@@52 T@U) (x0@@30 T@U) (x1@@24 T@U) (x2@@20 T@U) (x3@@15 T@U) (x4@@9 T@U) (y0@@23 T@U) (y1@@19 T@U) (y2@@16 T@U) (y3@@12 T@U) (y4@@7 T@U) ) (!  (or (= x1@@24 y1@@19) (= (MapType6Select (MapType6Store m@@52 x0@@30 x1@@24 x2@@20 x3@@15 x4@@9 val@@31) y0@@23 y1@@19 y2@@16 y3@@12 y4@@7) (MapType6Select m@@52 y0@@23 y1@@19 y2@@16 y3@@12 y4@@7))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@32 T@U) (m@@53 T@U) (x0@@31 T@U) (x1@@25 T@U) (x2@@21 T@U) (x3@@16 T@U) (x4@@10 T@U) (y0@@24 T@U) (y1@@20 T@U) (y2@@17 T@U) (y3@@13 T@U) (y4@@8 T@U) ) (!  (or (= x2@@21 y2@@17) (= (MapType6Select (MapType6Store m@@53 x0@@31 x1@@25 x2@@21 x3@@16 x4@@10 val@@32) y0@@24 y1@@20 y2@@17 y3@@13 y4@@8) (MapType6Select m@@53 y0@@24 y1@@20 y2@@17 y3@@13 y4@@8))) :qid |mapAx1:MapType6Select:2| :weight 0 ))) (forall ((val@@33 T@U) (m@@54 T@U) (x0@@32 T@U) (x1@@26 T@U) (x2@@22 T@U) (x3@@17 T@U) (x4@@11 T@U) (y0@@25 T@U) (y1@@21 T@U) (y2@@18 T@U) (y3@@14 T@U) (y4@@9 T@U) ) (!  (or (= x3@@17 y3@@14) (= (MapType6Select (MapType6Store m@@54 x0@@32 x1@@26 x2@@22 x3@@17 x4@@11 val@@33) y0@@25 y1@@21 y2@@18 y3@@14 y4@@9) (MapType6Select m@@54 y0@@25 y1@@21 y2@@18 y3@@14 y4@@9))) :qid |mapAx1:MapType6Select:3| :weight 0 ))) (forall ((val@@34 T@U) (m@@55 T@U) (x0@@33 T@U) (x1@@27 T@U) (x2@@23 T@U) (x3@@18 T@U) (x4@@12 T@U) (y0@@26 T@U) (y1@@22 T@U) (y2@@19 T@U) (y3@@15 T@U) (y4@@10 T@U) ) (!  (or (= x4@@12 y4@@10) (= (MapType6Select (MapType6Store m@@55 x0@@33 x1@@27 x2@@23 x3@@18 x4@@12 val@@34) y0@@26 y1@@22 y2@@19 y3@@15 y4@@10) (MapType6Select m@@55 y0@@26 y1@@22 y2@@19 y3@@15 y4@@10))) :qid |mapAx1:MapType6Select:4| :weight 0 ))) (forall ((val@@35 T@U) (m@@56 T@U) (x0@@34 T@U) (x1@@28 T@U) (x2@@24 T@U) (x3@@19 T@U) (x4@@13 T@U) (y0@@27 T@U) (y1@@23 T@U) (y2@@20 T@U) (y3@@16 T@U) (y4@@11 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@56 x0@@34 x1@@28 x2@@24 x3@@19 x4@@13 val@@35) y0@@27 y1@@23 y2@@20 y3@@16 y4@@11) (MapType6Select m@@56 y0@@27 y1@@23 y2@@20 y3@@16 y4@@11))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@231 T@U) (arg1@@114 T@U) (arg2@@72 T@U) (arg3@@50 T@U) (arg4@@39 T@U) (arg5@@28 T@U) (arg6@@16 T@U) (arg7@@4 T@U) (arg8@@3 T@U) (arg9@@1 T@U) (arg10@@1 T@U) ) (! (= (type (Apply4 arg0@@231 arg1@@114 arg2@@72 arg3@@50 arg4@@39 arg5@@28 arg6@@16 arg7@@4 arg8@@3 arg9@@1 arg10@@1)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@231 arg1@@114 arg2@@72 arg3@@50 arg4@@39 arg5@@28 arg6@@16 arg7@@4 arg8@@3 arg9@@1 arg10@@1)) ))) (forall ((arg0@@232 T@U) (arg1@@115 T@U) (arg2@@73 T@U) ) (! (= (type (Handle4 arg0@@232 arg1@@115 arg2@@73)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@232 arg1@@115 arg2@@73)) ))))
(assert (forall ((t0@@87 T@U) (t1@@63 T@U) (t2@@44 T@U) (t3@@29 T@U) (t4@@14 T@U) (heap@@26 T@U) (h@@55 T@U) (r@@31 T@U) (rd@@14 T@U) (bx0@@63 T@U) (bx1@@47 T@U) (bx2@@31 T@U) (bx3@@15 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@87) TyType) (= (type t1@@63) TyType)) (= (type t2@@44) TyType)) (= (type t3@@29) TyType)) (= (type t4@@14) TyType)) (= (type heap@@26) (MapType0Type refType MapType1Type))) (= (type h@@55) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@31) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@14) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@63) BoxType)) (= (type bx1@@47) BoxType)) (= (type bx2@@31) BoxType)) (= (type bx3@@15) BoxType)) (= (Apply4 t0@@87 t1@@63 t2@@44 t3@@29 t4@@14 heap@@26 (Handle4 h@@55 r@@31 rd@@14) bx0@@63 bx1@@47 bx2@@31 bx3@@15) (MapType6Select h@@55 heap@@26 bx0@@63 bx1@@47 bx2@@31 bx3@@15))) :qid |unknown.0:0| :skolemid |918| :pattern ( (Apply4 t0@@87 t1@@63 t2@@44 t3@@29 t4@@14 heap@@26 (Handle4 h@@55 r@@31 rd@@14) bx0@@63 bx1@@47 bx2@@31 bx3@@15)) )))
(assert (forall ((t0@@88 T@U) (t1@@64 T@U) (t2@@45 T@U) (t3@@30 T@U) (t4@@15 T@U) (heap@@27 T@U) (h@@56 T@U) (r@@32 T@U) (rd@@15 T@U) (bx0@@64 T@U) (bx1@@48 T@U) (bx2@@32 T@U) (bx3@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@88) TyType) (= (type t1@@64) TyType)) (= (type t2@@45) TyType)) (= (type t3@@30) TyType)) (= (type t4@@15) TyType)) (= (type heap@@27) (MapType0Type refType MapType1Type))) (= (type h@@56) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@32) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@15) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@64) BoxType)) (= (type bx1@@48) BoxType)) (= (type bx2@@32) BoxType)) (= (type bx3@@16) BoxType)) (U_2_bool (MapType6Select r@@32 heap@@27 bx0@@64 bx1@@48 bx2@@32 bx3@@16))) (Requires4 t0@@88 t1@@64 t2@@45 t3@@30 t4@@15 heap@@27 (Handle4 h@@56 r@@32 rd@@15) bx0@@64 bx1@@48 bx2@@32 bx3@@16)) :qid |unknown.0:0| :skolemid |919| :pattern ( (Requires4 t0@@88 t1@@64 t2@@45 t3@@30 t4@@15 heap@@27 (Handle4 h@@56 r@@32 rd@@15) bx0@@64 bx1@@48 bx2@@32 bx3@@16)) )))
(assert (forall ((arg0@@233 T@U) (arg1@@116 T@U) (arg2@@74 T@U) (arg3@@51 T@U) (arg4@@40 T@U) (arg5@@29 T@U) (arg6@@17 T@U) (arg7@@5 T@U) (arg8@@4 T@U) (arg9@@2 T@U) (arg10@@2 T@U) ) (! (= (type (Reads4 arg0@@233 arg1@@116 arg2@@74 arg3@@51 arg4@@40 arg5@@29 arg6@@17 arg7@@5 arg8@@4 arg9@@2 arg10@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@233 arg1@@116 arg2@@74 arg3@@51 arg4@@40 arg5@@29 arg6@@17 arg7@@5 arg8@@4 arg9@@2 arg10@@2)) )))
(assert (forall ((t0@@89 T@U) (t1@@65 T@U) (t2@@46 T@U) (t3@@31 T@U) (t4@@16 T@U) (heap@@28 T@U) (h@@57 T@U) (r@@33 T@U) (rd@@16 T@U) (bx0@@65 T@U) (bx1@@49 T@U) (bx2@@33 T@U) (bx3@@17 T@U) (bx@@77 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@89) TyType) (= (type t1@@65) TyType)) (= (type t2@@46) TyType)) (= (type t3@@31) TyType)) (= (type t4@@16) TyType)) (= (type heap@@28) (MapType0Type refType MapType1Type))) (= (type h@@57) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@33) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@16) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@65) BoxType)) (= (type bx1@@49) BoxType)) (= (type bx2@@33) BoxType)) (= (type bx3@@17) BoxType)) (= (type bx@@77) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@89 t1@@65 t2@@46 t3@@31 t4@@16 heap@@28 (Handle4 h@@57 r@@33 rd@@16) bx0@@65 bx1@@49 bx2@@33 bx3@@17) bx@@77)) (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@65 bx1@@49 bx2@@33 bx3@@17) bx@@77))) (=> (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@65 bx1@@49 bx2@@33 bx3@@17) bx@@77)) (U_2_bool (MapType0Select (Reads4 t0@@89 t1@@65 t2@@46 t3@@31 t4@@16 heap@@28 (Handle4 h@@57 r@@33 rd@@16) bx0@@65 bx1@@49 bx2@@33 bx3@@17) bx@@77))))) :qid |unknown.0:0| :skolemid |920| :pattern ( (MapType0Select (Reads4 t0@@89 t1@@65 t2@@46 t3@@31 t4@@16 heap@@28 (Handle4 h@@57 r@@33 rd@@16) bx0@@65 bx1@@49 bx2@@33 bx3@@17) bx@@77)) )))
(assert (forall ((t0@@90 T@U) (t1@@66 T@U) (t2@@47 T@U) (t3@@32 T@U) (t4@@17 T@U) (h0@@30 T@U) (h1@@30 T@U) (f@@65 T@U) (bx0@@66 T@U) (bx1@@50 T@U) (bx2@@34 T@U) (bx3@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@90) TyType) (= (type t1@@66) TyType)) (= (type t2@@47) TyType)) (= (type t3@@32) TyType)) (= (type t4@@17) TyType)) (= (type h0@@30) (MapType0Type refType MapType1Type))) (= (type h1@@30) (MapType0Type refType MapType1Type))) (= (type f@@65) HandleTypeType)) (= (type bx0@@66) BoxType)) (= (type bx1@@50) BoxType)) (= (type bx2@@34) BoxType)) (= (type bx3@@18) BoxType)) (and (and (and ($HeapSucc h0@@30 h1@@30) (and ($IsGoodHeap h0@@30) ($IsGoodHeap h1@@30))) (and (and (and (and ($IsBox bx0@@66 t0@@90) ($IsBox bx1@@50 t1@@66)) ($IsBox bx2@@34 t2@@47)) ($IsBox bx3@@18 t3@@32)) ($Is f@@65 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17)))) (forall ((o@@84 T@U) (fld@@29 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@29)))) (=> (and (and (= (type o@@84) refType) (= (type fld@@29) (FieldType a@@112))) (and (not (= o@@84 null)) (U_2_bool (MapType0Select (Reads4 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17 h0@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@18) ($Box o@@84))))) (= (MapType1Select (MapType0Select h0@@30 o@@84) fld@@29) (MapType1Select (MapType0Select h1@@30 o@@84) fld@@29)))) :qid |unknown.0:0| :skolemid |921| :no-pattern (type o@@84) :no-pattern (type fld@@29) :no-pattern (U_2_int o@@84) :no-pattern (U_2_bool o@@84) :no-pattern (U_2_int fld@@29) :no-pattern (U_2_bool fld@@29) )))) (= (Reads4 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17 h0@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@18) (Reads4 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17 h1@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@18))) :qid |unknown.0:0| :skolemid |922| :pattern ( ($HeapSucc h0@@30 h1@@30) (Reads4 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17 h1@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@18)) )))
(assert (forall ((t0@@91 T@U) (t1@@67 T@U) (t2@@48 T@U) (t3@@33 T@U) (t4@@18 T@U) (h0@@31 T@U) (h1@@31 T@U) (f@@66 T@U) (bx0@@67 T@U) (bx1@@51 T@U) (bx2@@35 T@U) (bx3@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@91) TyType) (= (type t1@@67) TyType)) (= (type t2@@48) TyType)) (= (type t3@@33) TyType)) (= (type t4@@18) TyType)) (= (type h0@@31) (MapType0Type refType MapType1Type))) (= (type h1@@31) (MapType0Type refType MapType1Type))) (= (type f@@66) HandleTypeType)) (= (type bx0@@67) BoxType)) (= (type bx1@@51) BoxType)) (= (type bx2@@35) BoxType)) (= (type bx3@@19) BoxType)) (and (and (and ($HeapSucc h0@@31 h1@@31) (and ($IsGoodHeap h0@@31) ($IsGoodHeap h1@@31))) (and (and (and (and ($IsBox bx0@@67 t0@@91) ($IsBox bx1@@51 t1@@67)) ($IsBox bx2@@35 t2@@48)) ($IsBox bx3@@19 t3@@33)) ($Is f@@66 (Tclass._System.___hFunc4 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18)))) (forall ((o@@85 T@U) (fld@@30 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@30)))) (=> (and (and (= (type o@@85) refType) (= (type fld@@30) (FieldType a@@113))) (and (not (= o@@85 null)) (U_2_bool (MapType0Select (Reads4 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18 h1@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@19) ($Box o@@85))))) (= (MapType1Select (MapType0Select h0@@31 o@@85) fld@@30) (MapType1Select (MapType0Select h1@@31 o@@85) fld@@30)))) :qid |unknown.0:0| :skolemid |923| :no-pattern (type o@@85) :no-pattern (type fld@@30) :no-pattern (U_2_int o@@85) :no-pattern (U_2_bool o@@85) :no-pattern (U_2_int fld@@30) :no-pattern (U_2_bool fld@@30) )))) (= (Reads4 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18 h0@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@19) (Reads4 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18 h1@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@19))) :qid |unknown.0:0| :skolemid |924| :pattern ( ($HeapSucc h0@@31 h1@@31) (Reads4 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18 h1@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@19)) )))
(assert (forall ((t0@@92 T@U) (t1@@68 T@U) (t2@@49 T@U) (t3@@34 T@U) (t4@@19 T@U) (h0@@32 T@U) (h1@@32 T@U) (f@@67 T@U) (bx0@@68 T@U) (bx1@@52 T@U) (bx2@@36 T@U) (bx3@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@92) TyType) (= (type t1@@68) TyType)) (= (type t2@@49) TyType)) (= (type t3@@34) TyType)) (= (type t4@@19) TyType)) (= (type h0@@32) (MapType0Type refType MapType1Type))) (= (type h1@@32) (MapType0Type refType MapType1Type))) (= (type f@@67) HandleTypeType)) (= (type bx0@@68) BoxType)) (= (type bx1@@52) BoxType)) (= (type bx2@@36) BoxType)) (= (type bx3@@20) BoxType)) (and (and (and ($HeapSucc h0@@32 h1@@32) (and ($IsGoodHeap h0@@32) ($IsGoodHeap h1@@32))) (and (and (and (and ($IsBox bx0@@68 t0@@92) ($IsBox bx1@@52 t1@@68)) ($IsBox bx2@@36 t2@@49)) ($IsBox bx3@@20 t3@@34)) ($Is f@@67 (Tclass._System.___hFunc4 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19)))) (forall ((o@@86 T@U) (fld@@31 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@31)))) (=> (and (and (= (type o@@86) refType) (= (type fld@@31) (FieldType a@@114))) (and (not (= o@@86 null)) (U_2_bool (MapType0Select (Reads4 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 h0@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20) ($Box o@@86))))) (= (MapType1Select (MapType0Select h0@@32 o@@86) fld@@31) (MapType1Select (MapType0Select h1@@32 o@@86) fld@@31)))) :qid |unknown.0:0| :skolemid |925| :no-pattern (type o@@86) :no-pattern (type fld@@31) :no-pattern (U_2_int o@@86) :no-pattern (U_2_bool o@@86) :no-pattern (U_2_int fld@@31) :no-pattern (U_2_bool fld@@31) )))) (and (=> (Requires4 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 h0@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20) (Requires4 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 h1@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20)) (=> (Requires4 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 h1@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20) (Requires4 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 h0@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20)))) :qid |unknown.0:0| :skolemid |926| :pattern ( ($HeapSucc h0@@32 h1@@32) (Requires4 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 h1@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20)) )))
(assert (forall ((t0@@93 T@U) (t1@@69 T@U) (t2@@50 T@U) (t3@@35 T@U) (t4@@20 T@U) (h0@@33 T@U) (h1@@33 T@U) (f@@68 T@U) (bx0@@69 T@U) (bx1@@53 T@U) (bx2@@37 T@U) (bx3@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@93) TyType) (= (type t1@@69) TyType)) (= (type t2@@50) TyType)) (= (type t3@@35) TyType)) (= (type t4@@20) TyType)) (= (type h0@@33) (MapType0Type refType MapType1Type))) (= (type h1@@33) (MapType0Type refType MapType1Type))) (= (type f@@68) HandleTypeType)) (= (type bx0@@69) BoxType)) (= (type bx1@@53) BoxType)) (= (type bx2@@37) BoxType)) (= (type bx3@@21) BoxType)) (and (and (and ($HeapSucc h0@@33 h1@@33) (and ($IsGoodHeap h0@@33) ($IsGoodHeap h1@@33))) (and (and (and (and ($IsBox bx0@@69 t0@@93) ($IsBox bx1@@53 t1@@69)) ($IsBox bx2@@37 t2@@50)) ($IsBox bx3@@21 t3@@35)) ($Is f@@68 (Tclass._System.___hFunc4 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20)))) (forall ((o@@87 T@U) (fld@@32 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@32)))) (=> (and (and (= (type o@@87) refType) (= (type fld@@32) (FieldType a@@115))) (and (not (= o@@87 null)) (U_2_bool (MapType0Select (Reads4 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21) ($Box o@@87))))) (= (MapType1Select (MapType0Select h0@@33 o@@87) fld@@32) (MapType1Select (MapType0Select h1@@33 o@@87) fld@@32)))) :qid |unknown.0:0| :skolemid |927| :no-pattern (type o@@87) :no-pattern (type fld@@32) :no-pattern (U_2_int o@@87) :no-pattern (U_2_bool o@@87) :no-pattern (U_2_int fld@@32) :no-pattern (U_2_bool fld@@32) )))) (and (=> (Requires4 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 h0@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21) (Requires4 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21)) (=> (Requires4 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21) (Requires4 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 h0@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21)))) :qid |unknown.0:0| :skolemid |928| :pattern ( ($HeapSucc h0@@33 h1@@33) (Requires4 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21)) )))
(assert (forall ((t0@@94 T@U) (t1@@70 T@U) (t2@@51 T@U) (t3@@36 T@U) (t4@@21 T@U) (h0@@34 T@U) (h1@@34 T@U) (f@@69 T@U) (bx0@@70 T@U) (bx1@@54 T@U) (bx2@@38 T@U) (bx3@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@94) TyType) (= (type t1@@70) TyType)) (= (type t2@@51) TyType)) (= (type t3@@36) TyType)) (= (type t4@@21) TyType)) (= (type h0@@34) (MapType0Type refType MapType1Type))) (= (type h1@@34) (MapType0Type refType MapType1Type))) (= (type f@@69) HandleTypeType)) (= (type bx0@@70) BoxType)) (= (type bx1@@54) BoxType)) (= (type bx2@@38) BoxType)) (= (type bx3@@22) BoxType)) (and (and (and ($HeapSucc h0@@34 h1@@34) (and ($IsGoodHeap h0@@34) ($IsGoodHeap h1@@34))) (and (and (and (and ($IsBox bx0@@70 t0@@94) ($IsBox bx1@@54 t1@@70)) ($IsBox bx2@@38 t2@@51)) ($IsBox bx3@@22 t3@@36)) ($Is f@@69 (Tclass._System.___hFunc4 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21)))) (forall ((o@@88 T@U) (fld@@33 T@U) ) (! (let ((a@@116 (FieldTypeInv0 (type fld@@33)))) (=> (and (and (= (type o@@88) refType) (= (type fld@@33) (FieldType a@@116))) (and (not (= o@@88 null)) (U_2_bool (MapType0Select (Reads4 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21 h0@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@22) ($Box o@@88))))) (= (MapType1Select (MapType0Select h0@@34 o@@88) fld@@33) (MapType1Select (MapType0Select h1@@34 o@@88) fld@@33)))) :qid |unknown.0:0| :skolemid |929| :no-pattern (type o@@88) :no-pattern (type fld@@33) :no-pattern (U_2_int o@@88) :no-pattern (U_2_bool o@@88) :no-pattern (U_2_int fld@@33) :no-pattern (U_2_bool fld@@33) )))) (= (Apply4 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21 h0@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@22) (Apply4 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21 h1@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@22))) :qid |unknown.0:0| :skolemid |930| :pattern ( ($HeapSucc h0@@34 h1@@34) (Apply4 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21 h1@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@22)) )))
(assert (forall ((t0@@95 T@U) (t1@@71 T@U) (t2@@52 T@U) (t3@@37 T@U) (t4@@22 T@U) (h0@@35 T@U) (h1@@35 T@U) (f@@70 T@U) (bx0@@71 T@U) (bx1@@55 T@U) (bx2@@39 T@U) (bx3@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@95) TyType) (= (type t1@@71) TyType)) (= (type t2@@52) TyType)) (= (type t3@@37) TyType)) (= (type t4@@22) TyType)) (= (type h0@@35) (MapType0Type refType MapType1Type))) (= (type h1@@35) (MapType0Type refType MapType1Type))) (= (type f@@70) HandleTypeType)) (= (type bx0@@71) BoxType)) (= (type bx1@@55) BoxType)) (= (type bx2@@39) BoxType)) (= (type bx3@@23) BoxType)) (and (and (and ($HeapSucc h0@@35 h1@@35) (and ($IsGoodHeap h0@@35) ($IsGoodHeap h1@@35))) (and (and (and (and ($IsBox bx0@@71 t0@@95) ($IsBox bx1@@55 t1@@71)) ($IsBox bx2@@39 t2@@52)) ($IsBox bx3@@23 t3@@37)) ($Is f@@70 (Tclass._System.___hFunc4 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22)))) (forall ((o@@89 T@U) (fld@@34 T@U) ) (! (let ((a@@117 (FieldTypeInv0 (type fld@@34)))) (=> (and (and (= (type o@@89) refType) (= (type fld@@34) (FieldType a@@117))) (and (not (= o@@89 null)) (U_2_bool (MapType0Select (Reads4 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22 h1@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@23) ($Box o@@89))))) (= (MapType1Select (MapType0Select h0@@35 o@@89) fld@@34) (MapType1Select (MapType0Select h1@@35 o@@89) fld@@34)))) :qid |unknown.0:0| :skolemid |931| :no-pattern (type o@@89) :no-pattern (type fld@@34) :no-pattern (U_2_int o@@89) :no-pattern (U_2_bool o@@89) :no-pattern (U_2_int fld@@34) :no-pattern (U_2_bool fld@@34) )))) (= (Apply4 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22 h0@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@23) (Apply4 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22 h1@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@23))) :qid |unknown.0:0| :skolemid |932| :pattern ( ($HeapSucc h0@@35 h1@@35) (Apply4 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22 h1@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@23)) )))
(assert (forall ((t0@@96 T@U) (t1@@72 T@U) (t2@@53 T@U) (t3@@38 T@U) (t4@@23 T@U) (heap@@29 T@U) (f@@71 T@U) (bx0@@72 T@U) (bx1@@56 T@U) (bx2@@40 T@U) (bx3@@24 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@96) TyType) (= (type t1@@72) TyType)) (= (type t2@@53) TyType)) (= (type t3@@38) TyType)) (= (type t4@@23) TyType)) (= (type heap@@29) (MapType0Type refType MapType1Type))) (= (type f@@71) HandleTypeType)) (= (type bx0@@72) BoxType)) (= (type bx1@@56) BoxType)) (= (type bx2@@40) BoxType)) (= (type bx3@@24) BoxType)) (and ($IsGoodHeap heap@@29) (and (and (and (and ($IsBox bx0@@72 t0@@96) ($IsBox bx1@@56 t1@@72)) ($IsBox bx2@@40 t2@@53)) ($IsBox bx3@@24 t3@@38)) ($Is f@@71 (Tclass._System.___hFunc4 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23))))) (and (=> (|Set#Equal| (Reads4 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 $OneHeap f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 heap@@29 f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads4 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 heap@@29 f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 $OneHeap f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |933| :pattern ( (Reads4 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 $OneHeap f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24) ($IsGoodHeap heap@@29)) :pattern ( (Reads4 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 heap@@29 f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24)) )))
(assert (forall ((t0@@97 T@U) (t1@@73 T@U) (t2@@54 T@U) (t3@@39 T@U) (t4@@24 T@U) (heap@@30 T@U) (f@@72 T@U) (bx0@@73 T@U) (bx1@@57 T@U) (bx2@@41 T@U) (bx3@@25 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@97) TyType) (= (type t1@@73) TyType)) (= (type t2@@54) TyType)) (= (type t3@@39) TyType)) (= (type t4@@24) TyType)) (= (type heap@@30) (MapType0Type refType MapType1Type))) (= (type f@@72) HandleTypeType)) (= (type bx0@@73) BoxType)) (= (type bx1@@57) BoxType)) (= (type bx2@@41) BoxType)) (= (type bx3@@25) BoxType)) (and (and ($IsGoodHeap heap@@30) (and (and (and (and ($IsBox bx0@@73 t0@@97) ($IsBox bx1@@57 t1@@73)) ($IsBox bx2@@41 t2@@54)) ($IsBox bx3@@25 t3@@39)) ($Is f@@72 (Tclass._System.___hFunc4 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24)))) (|Set#Equal| (Reads4 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25) (|Set#Empty| BoxType)))) (and (=> (Requires4 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25) (Requires4 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 heap@@30 f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25)) (=> (Requires4 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 heap@@30 f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25) (Requires4 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25)))) :qid |unknown.0:0| :skolemid |934| :pattern ( (Requires4 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25) ($IsGoodHeap heap@@30)) :pattern ( (Requires4 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 heap@@30 f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25)) )))
(assert (forall ((f@@73 T@U) (t0@@98 T@U) (t1@@74 T@U) (t2@@55 T@U) (t3@@40 T@U) (t4@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@73) HandleTypeType) (= (type t0@@98) TyType)) (= (type t1@@74) TyType)) (= (type t2@@55) TyType)) (= (type t3@@40) TyType)) (= (type t4@@25) TyType)) (and (=> ($Is f@@73 (Tclass._System.___hFunc4 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25)) (forall ((h@@58 T@U) (bx0@@74 T@U) (bx1@@58 T@U) (bx2@@42 T@U) (bx3@@26 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@58) (MapType0Type refType MapType1Type)) (= (type bx0@@74) BoxType)) (= (type bx1@@58) BoxType)) (= (type bx2@@42) BoxType)) (= (type bx3@@26) BoxType)) (and (and ($IsGoodHeap h@@58) (and (and (and ($IsBox bx0@@74 t0@@98) ($IsBox bx1@@58 t1@@74)) ($IsBox bx2@@42 t2@@55)) ($IsBox bx3@@26 t3@@40))) (Requires4 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 h@@58 f@@73 bx0@@74 bx1@@58 bx2@@42 bx3@@26))) ($IsBox (Apply4 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 h@@58 f@@73 bx0@@74 bx1@@58 bx2@@42 bx3@@26) t4@@25)) :qid |DafnyPre.521:12| :skolemid |935| :pattern ( (Apply4 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 h@@58 f@@73 bx0@@74 bx1@@58 bx2@@42 bx3@@26)) ))) (=> (forall ((h@@59 T@U) (bx0@@75 T@U) (bx1@@59 T@U) (bx2@@43 T@U) (bx3@@27 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@59) (MapType0Type refType MapType1Type)) (= (type bx0@@75) BoxType)) (= (type bx1@@59) BoxType)) (= (type bx2@@43) BoxType)) (= (type bx3@@27) BoxType)) (and (and ($IsGoodHeap h@@59) (and (and (and ($IsBox bx0@@75 t0@@98) ($IsBox bx1@@59 t1@@74)) ($IsBox bx2@@43 t2@@55)) ($IsBox bx3@@27 t3@@40))) (Requires4 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 h@@59 f@@73 bx0@@75 bx1@@59 bx2@@43 bx3@@27))) ($IsBox (Apply4 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 h@@59 f@@73 bx0@@75 bx1@@59 bx2@@43 bx3@@27) t4@@25)) :qid |DafnyPre.521:12| :skolemid |935| :pattern ( (Apply4 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 h@@59 f@@73 bx0@@75 bx1@@59 bx2@@43 bx3@@27)) )) ($Is f@@73 (Tclass._System.___hFunc4 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25))))) :qid |unknown.0:0| :skolemid |936| :pattern ( ($Is f@@73 (Tclass._System.___hFunc4 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25))) )))
(assert (forall ((f@@74 T@U) (t0@@99 T@U) (t1@@75 T@U) (t2@@56 T@U) (t3@@41 T@U) (t4@@26 T@U) (u0@@4 T@U) (u1@@3 T@U) (u2@@2 T@U) (u3@@1 T@U) (u4@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@74) HandleTypeType) (= (type t0@@99) TyType)) (= (type t1@@75) TyType)) (= (type t2@@56) TyType)) (= (type t3@@41) TyType)) (= (type t4@@26) TyType)) (= (type u0@@4) TyType)) (= (type u1@@3) TyType)) (= (type u2@@2) TyType)) (= (type u3@@1) TyType)) (= (type u4@@0) TyType)) (and (and (and (and (and ($Is f@@74 (Tclass._System.___hFunc4 t0@@99 t1@@75 t2@@56 t3@@41 t4@@26)) (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 u0@@4)) ($IsBox bx@@78 t0@@99)) :qid |unknown.0:0| :skolemid |937| :pattern ( ($IsBox bx@@78 u0@@4)) :pattern ( ($IsBox bx@@78 t0@@99)) ))) (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 u1@@3)) ($IsBox bx@@79 t1@@75)) :qid |unknown.0:0| :skolemid |938| :pattern ( ($IsBox bx@@79 u1@@3)) :pattern ( ($IsBox bx@@79 t1@@75)) ))) (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 u2@@2)) ($IsBox bx@@80 t2@@56)) :qid |unknown.0:0| :skolemid |939| :pattern ( ($IsBox bx@@80 u2@@2)) :pattern ( ($IsBox bx@@80 t2@@56)) ))) (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 u3@@1)) ($IsBox bx@@81 t3@@41)) :qid |unknown.0:0| :skolemid |940| :pattern ( ($IsBox bx@@81 u3@@1)) :pattern ( ($IsBox bx@@81 t3@@41)) ))) (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 t4@@26)) ($IsBox bx@@82 u4@@0)) :qid |unknown.0:0| :skolemid |941| :pattern ( ($IsBox bx@@82 t4@@26)) :pattern ( ($IsBox bx@@82 u4@@0)) )))) ($Is f@@74 (Tclass._System.___hFunc4 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0))) :qid |unknown.0:0| :skolemid |942| :pattern ( ($Is f@@74 (Tclass._System.___hFunc4 t0@@99 t1@@75 t2@@56 t3@@41 t4@@26)) ($Is f@@74 (Tclass._System.___hFunc4 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0))) )))
(assert (forall ((f@@75 T@U) (t0@@100 T@U) (t1@@76 T@U) (t2@@57 T@U) (t3@@42 T@U) (t4@@27 T@U) (h@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@75) HandleTypeType) (= (type t0@@100) TyType)) (= (type t1@@76) TyType)) (= (type t2@@57) TyType)) (= (type t3@@42) TyType)) (= (type t4@@27) TyType)) (= (type h@@60) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@60)) (and (=> ($IsAlloc f@@75 (Tclass._System.___hFunc4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27) h@@60) (forall ((bx0@@76 T@U) (bx1@@60 T@U) (bx2@@44 T@U) (bx3@@28 T@U) ) (!  (=> (and (and (and (= (type bx0@@76) BoxType) (= (type bx1@@60) BoxType)) (= (type bx2@@44) BoxType)) (= (type bx3@@28) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@76 t0@@100) ($IsAllocBox bx0@@76 t0@@100 h@@60)) (and ($IsBox bx1@@60 t1@@76) ($IsAllocBox bx1@@60 t1@@76 h@@60))) (and ($IsBox bx2@@44 t2@@57) ($IsAllocBox bx2@@44 t2@@57 h@@60))) (and ($IsBox bx3@@28 t3@@42) ($IsAllocBox bx3@@28 t3@@42 h@@60))) (Requires4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28)) (forall ((r@@34 T@U) ) (!  (=> (= (type r@@34) refType) (=> (and (not (= r@@34 null)) (U_2_bool (MapType0Select (Reads4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28) ($Box r@@34)))) (U_2_bool (MapType1Select (MapType0Select h@@60 r@@34) alloc)))) :qid |unknown.0:0| :skolemid |943| :pattern ( (MapType0Select (Reads4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28) ($Box r@@34))) )))) :qid |unknown.0:0| :skolemid |944| :pattern ( (Apply4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28)) :pattern ( (Reads4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28)) ))) (=> (forall ((bx0@@77 T@U) (bx1@@61 T@U) (bx2@@45 T@U) (bx3@@29 T@U) ) (!  (=> (and (and (and (= (type bx0@@77) BoxType) (= (type bx1@@61) BoxType)) (= (type bx2@@45) BoxType)) (= (type bx3@@29) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@77 t0@@100) ($IsAllocBox bx0@@77 t0@@100 h@@60)) (and ($IsBox bx1@@61 t1@@76) ($IsAllocBox bx1@@61 t1@@76 h@@60))) (and ($IsBox bx2@@45 t2@@57) ($IsAllocBox bx2@@45 t2@@57 h@@60))) (and ($IsBox bx3@@29 t3@@42) ($IsAllocBox bx3@@29 t3@@42 h@@60))) (Requires4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29)) (forall ((r@@35 T@U) ) (!  (=> (= (type r@@35) refType) (=> (and (not (= r@@35 null)) (U_2_bool (MapType0Select (Reads4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29) ($Box r@@35)))) (U_2_bool (MapType1Select (MapType0Select h@@60 r@@35) alloc)))) :qid |unknown.0:0| :skolemid |943| :pattern ( (MapType0Select (Reads4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29) ($Box r@@35))) )))) :qid |unknown.0:0| :skolemid |944| :pattern ( (Apply4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29)) :pattern ( (Reads4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29)) )) ($IsAlloc f@@75 (Tclass._System.___hFunc4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27) h@@60)))) :qid |unknown.0:0| :skolemid |945| :pattern ( ($IsAlloc f@@75 (Tclass._System.___hFunc4 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27) h@@60)) )))
(assert (forall ((f@@76 T@U) (t0@@101 T@U) (t1@@77 T@U) (t2@@58 T@U) (t3@@43 T@U) (t4@@28 T@U) (h@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@76) HandleTypeType) (= (type t0@@101) TyType)) (= (type t1@@77) TyType)) (= (type t2@@58) TyType)) (= (type t3@@43) TyType)) (= (type t4@@28) TyType)) (= (type h@@61) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@61) ($IsAlloc f@@76 (Tclass._System.___hFunc4 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28) h@@61))) (forall ((bx0@@78 T@U) (bx1@@62 T@U) (bx2@@46 T@U) (bx3@@30 T@U) ) (!  (=> (and (and (and (= (type bx0@@78) BoxType) (= (type bx1@@62) BoxType)) (= (type bx2@@46) BoxType)) (= (type bx3@@30) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@78 t0@@101 h@@61) ($IsAllocBox bx1@@62 t1@@77 h@@61)) ($IsAllocBox bx2@@46 t2@@58 h@@61)) ($IsAllocBox bx3@@30 t3@@43 h@@61)) (Requires4 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28 h@@61 f@@76 bx0@@78 bx1@@62 bx2@@46 bx3@@30)) ($IsAllocBox (Apply4 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28 h@@61 f@@76 bx0@@78 bx1@@62 bx2@@46 bx3@@30) t4@@28 h@@61))) :qid |unknown.0:0| :skolemid |946| :pattern ( (Apply4 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28 h@@61 f@@76 bx0@@78 bx1@@62 bx2@@46 bx3@@30)) ))) :qid |unknown.0:0| :skolemid |947| :pattern ( ($IsAlloc f@@76 (Tclass._System.___hFunc4 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28) h@@61)) )))
(assert (forall ((arg0@@234 T@U) (arg1@@117 T@U) (arg2@@75 T@U) (arg3@@52 T@U) (arg4@@41 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@234 arg1@@117 arg2@@75 arg3@@52 arg4@@41)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@234 arg1@@117 arg2@@75 arg3@@52 arg4@@41)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@56| T@U) (|#$T3@@34| T@U) (|#$R@@104| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$T3@@34|) TyType)) (= (type |#$R@@104|) TyType)) (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@34| |#$R@@104|)) Tagclass._System.___hPartialFunc4)) :qid |unknown.0:0| :skolemid |948| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@34| |#$R@@104|)) )))
(assert (forall ((arg0@@235 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@235)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@235)) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@57| T@U) (|#$T3@@35| T@U) (|#$R@@105| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$T3@@35|) TyType)) (= (type |#$R@@105|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@35| |#$R@@105|)) |#$T0@@92|)) :qid |unknown.0:0| :skolemid |949| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@35| |#$R@@105|)) )))
(assert (forall ((arg0@@236 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@236)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@236)) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@58| T@U) (|#$T3@@36| T@U) (|#$R@@106| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$T3@@36|) TyType)) (= (type |#$R@@106|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@36| |#$R@@106|)) |#$T1@@77|)) :qid |unknown.0:0| :skolemid |950| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@36| |#$R@@106|)) )))
(assert (forall ((arg0@@237 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@237)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@237)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@59| T@U) (|#$T3@@37| T@U) (|#$R@@107| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$T3@@37|) TyType)) (= (type |#$R@@107|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@37| |#$R@@107|)) |#$T2@@59|)) :qid |unknown.0:0| :skolemid |951| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@37| |#$R@@107|)) )))
(assert (forall ((arg0@@238 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@238)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@238)) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@60| T@U) (|#$T3@@38| T@U) (|#$R@@108| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$T3@@38|) TyType)) (= (type |#$R@@108|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@38| |#$R@@108|)) |#$T3@@38|)) :qid |unknown.0:0| :skolemid |952| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@38| |#$R@@108|)) )))
(assert (forall ((arg0@@239 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@239)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@239)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@61| T@U) (|#$T3@@39| T@U) (|#$R@@109| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$T3@@39|) TyType)) (= (type |#$R@@109|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$R@@109|)) |#$R@@109|)) :qid |unknown.0:0| :skolemid |953| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$R@@109|)) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$T2@@62| T@U) (|#$T3@@40| T@U) (|#$R@@110| T@U) (bx@@83 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$T3@@40|) TyType)) (= (type |#$R@@110|) TyType)) (= (type bx@@83) BoxType)) ($IsBox bx@@83 (Tclass._System.___hPartialFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$R@@110|))) (and (= ($Box ($Unbox HandleTypeType bx@@83)) bx@@83) ($Is ($Unbox HandleTypeType bx@@83) (Tclass._System.___hPartialFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$R@@110|)))) :qid |unknown.0:0| :skolemid |954| :pattern ( ($IsBox bx@@83 (Tclass._System.___hPartialFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$R@@110|))) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$T2@@63| T@U) (|#$T3@@41| T@U) (|#$R@@111| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$T3@@41|) TyType)) (= (type |#$R@@111|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (and (=> ($Is |f#0@@19| (Tclass._System.___hPartialFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111|)) (and ($Is |f#0@@19| (Tclass._System.___hFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111|)) (forall ((|x0#0@@15| T@U) (|x1#0@@11| T@U) (|x2#0@@7| T@U) (|x3#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@15|) BoxType) (= (type |x1#0@@11|) BoxType)) (= (type |x2#0@@7|) BoxType)) (= (type |x3#0@@3|) BoxType)) (and (and (and ($IsBox |x0#0@@15| |#$T0@@98|) ($IsBox |x1#0@@11| |#$T1@@82|)) ($IsBox |x2#0@@7| |#$T2@@63|)) ($IsBox |x3#0@@3| |#$T3@@41|))) (|Set#Equal| (Reads4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111| $OneHeap |f#0@@19| |x0#0@@15| |x1#0@@11| |x2#0@@7| |x3#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |955| :no-pattern (type |x0#0@@15|) :no-pattern (type |x1#0@@11|) :no-pattern (type |x2#0@@7|) :no-pattern (type |x3#0@@3|) :no-pattern (U_2_int |x0#0@@15|) :no-pattern (U_2_bool |x0#0@@15|) :no-pattern (U_2_int |x1#0@@11|) :no-pattern (U_2_bool |x1#0@@11|) :no-pattern (U_2_int |x2#0@@7|) :no-pattern (U_2_bool |x2#0@@7|) :no-pattern (U_2_int |x3#0@@3|) :no-pattern (U_2_bool |x3#0@@3|) )))) (=> (and ($Is |f#0@@19| (Tclass._System.___hFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111|)) (forall ((|x0#0@@16| T@U) (|x1#0@@12| T@U) (|x2#0@@8| T@U) (|x3#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@16|) BoxType) (= (type |x1#0@@12|) BoxType)) (= (type |x2#0@@8|) BoxType)) (= (type |x3#0@@4|) BoxType)) (and (and (and ($IsBox |x0#0@@16| |#$T0@@98|) ($IsBox |x1#0@@12| |#$T1@@82|)) ($IsBox |x2#0@@8| |#$T2@@63|)) ($IsBox |x3#0@@4| |#$T3@@41|))) (|Set#Equal| (Reads4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111| $OneHeap |f#0@@19| |x0#0@@16| |x1#0@@12| |x2#0@@8| |x3#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |955| :no-pattern (type |x0#0@@16|) :no-pattern (type |x1#0@@12|) :no-pattern (type |x2#0@@8|) :no-pattern (type |x3#0@@4|) :no-pattern (U_2_int |x0#0@@16|) :no-pattern (U_2_bool |x0#0@@16|) :no-pattern (U_2_int |x1#0@@12|) :no-pattern (U_2_bool |x1#0@@12|) :no-pattern (U_2_int |x2#0@@8|) :no-pattern (U_2_bool |x2#0@@8|) :no-pattern (U_2_int |x3#0@@4|) :no-pattern (U_2_bool |x3#0@@4|) ))) ($Is |f#0@@19| (Tclass._System.___hPartialFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111|))))) :qid |unknown.0:0| :skolemid |956| :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111|))) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$T2@@64| T@U) (|#$T3@@42| T@U) (|#$R@@112| T@U) (|f#0@@20| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$T3@@42|) TyType)) (= (type |#$R@@112|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$R@@112|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$R@@112|) $h@@18)) (=> ($IsAlloc |f#0@@20| (Tclass._System.___hFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$R@@112|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$R@@112|) $h@@18)))) :qid |unknown.0:0| :skolemid |957| :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$R@@112|) $h@@18)) )))
(assert (forall ((arg0@@240 T@U) (arg1@@118 T@U) (arg2@@76 T@U) (arg3@@53 T@U) (arg4@@42 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@240 arg1@@118 arg2@@76 arg3@@53 arg4@@42)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@240 arg1@@118 arg2@@76 arg3@@53 arg4@@42)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@65| T@U) (|#$T3@@43| T@U) (|#$R@@113| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$T3@@43|) TyType)) (= (type |#$R@@113|) TyType)) (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@43| |#$R@@113|)) Tagclass._System.___hTotalFunc4)) :qid |unknown.0:0| :skolemid |958| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@43| |#$R@@113|)) )))
(assert (forall ((arg0@@241 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@241)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@241)) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@66| T@U) (|#$T3@@44| T@U) (|#$R@@114| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$T3@@44|) TyType)) (= (type |#$R@@114|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@44| |#$R@@114|)) |#$T0@@101|)) :qid |unknown.0:0| :skolemid |959| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@44| |#$R@@114|)) )))
(assert (forall ((arg0@@242 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@242)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@242)) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@67| T@U) (|#$T3@@45| T@U) (|#$R@@115| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$T3@@45|) TyType)) (= (type |#$R@@115|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@45| |#$R@@115|)) |#$T1@@86|)) :qid |unknown.0:0| :skolemid |960| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@45| |#$R@@115|)) )))
(assert (forall ((arg0@@243 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@243)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@243)) )))
(assert (forall ((|#$T0@@103| T@U) (|#$T1@@87| T@U) (|#$T2@@68| T@U) (|#$T3@@46| T@U) (|#$R@@116| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@103|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$T3@@46|) TyType)) (= (type |#$R@@116|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@46| |#$R@@116|)) |#$T2@@68|)) :qid |unknown.0:0| :skolemid |961| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@46| |#$R@@116|)) )))
(assert (forall ((arg0@@244 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@244)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@244)) )))
(assert (forall ((|#$T0@@104| T@U) (|#$T1@@88| T@U) (|#$T2@@69| T@U) (|#$T3@@47| T@U) (|#$R@@117| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$T3@@47|) TyType)) (= (type |#$R@@117|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@47| |#$R@@117|)) |#$T3@@47|)) :qid |unknown.0:0| :skolemid |962| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@47| |#$R@@117|)) )))
(assert (forall ((arg0@@245 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@245)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@245)) )))
(assert (forall ((|#$T0@@105| T@U) (|#$T1@@89| T@U) (|#$T2@@70| T@U) (|#$T3@@48| T@U) (|#$R@@118| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@105|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$T3@@48|) TyType)) (= (type |#$R@@118|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@48| |#$R@@118|)) |#$R@@118|)) :qid |unknown.0:0| :skolemid |963| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@48| |#$R@@118|)) )))
(assert (forall ((|#$T0@@106| T@U) (|#$T1@@90| T@U) (|#$T2@@71| T@U) (|#$T3@@49| T@U) (|#$R@@119| T@U) (bx@@84 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$T3@@49|) TyType)) (= (type |#$R@@119|) TyType)) (= (type bx@@84) BoxType)) ($IsBox bx@@84 (Tclass._System.___hTotalFunc4 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$R@@119|))) (and (= ($Box ($Unbox HandleTypeType bx@@84)) bx@@84) ($Is ($Unbox HandleTypeType bx@@84) (Tclass._System.___hTotalFunc4 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$R@@119|)))) :qid |unknown.0:0| :skolemid |964| :pattern ( ($IsBox bx@@84 (Tclass._System.___hTotalFunc4 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$R@@119|))) )))
(assert (forall ((|#$T0@@107| T@U) (|#$T1@@91| T@U) (|#$T2@@72| T@U) (|#$T3@@50| T@U) (|#$R@@120| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@107|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$T3@@50|) TyType)) (= (type |#$R@@120|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (and (=> ($Is |f#0@@21| (Tclass._System.___hTotalFunc4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120|)) (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120|)) (forall ((|x0#0@@17| T@U) (|x1#0@@13| T@U) (|x2#0@@9| T@U) (|x3#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@17|) BoxType) (= (type |x1#0@@13|) BoxType)) (= (type |x2#0@@9|) BoxType)) (= (type |x3#0@@5|) BoxType)) (and (and (and ($IsBox |x0#0@@17| |#$T0@@107|) ($IsBox |x1#0@@13| |#$T1@@91|)) ($IsBox |x2#0@@9| |#$T2@@72|)) ($IsBox |x3#0@@5| |#$T3@@50|))) (Requires4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120| $OneHeap |f#0@@21| |x0#0@@17| |x1#0@@13| |x2#0@@9| |x3#0@@5|)) :qid |unknown.0:0| :skolemid |965| :no-pattern (type |x0#0@@17|) :no-pattern (type |x1#0@@13|) :no-pattern (type |x2#0@@9|) :no-pattern (type |x3#0@@5|) :no-pattern (U_2_int |x0#0@@17|) :no-pattern (U_2_bool |x0#0@@17|) :no-pattern (U_2_int |x1#0@@13|) :no-pattern (U_2_bool |x1#0@@13|) :no-pattern (U_2_int |x2#0@@9|) :no-pattern (U_2_bool |x2#0@@9|) :no-pattern (U_2_int |x3#0@@5|) :no-pattern (U_2_bool |x3#0@@5|) )))) (=> (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120|)) (forall ((|x0#0@@18| T@U) (|x1#0@@14| T@U) (|x2#0@@10| T@U) (|x3#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@18|) BoxType) (= (type |x1#0@@14|) BoxType)) (= (type |x2#0@@10|) BoxType)) (= (type |x3#0@@6|) BoxType)) (and (and (and ($IsBox |x0#0@@18| |#$T0@@107|) ($IsBox |x1#0@@14| |#$T1@@91|)) ($IsBox |x2#0@@10| |#$T2@@72|)) ($IsBox |x3#0@@6| |#$T3@@50|))) (Requires4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120| $OneHeap |f#0@@21| |x0#0@@18| |x1#0@@14| |x2#0@@10| |x3#0@@6|)) :qid |unknown.0:0| :skolemid |965| :no-pattern (type |x0#0@@18|) :no-pattern (type |x1#0@@14|) :no-pattern (type |x2#0@@10|) :no-pattern (type |x3#0@@6|) :no-pattern (U_2_int |x0#0@@18|) :no-pattern (U_2_bool |x0#0@@18|) :no-pattern (U_2_int |x1#0@@14|) :no-pattern (U_2_bool |x1#0@@14|) :no-pattern (U_2_int |x2#0@@10|) :no-pattern (U_2_bool |x2#0@@10|) :no-pattern (U_2_int |x3#0@@6|) :no-pattern (U_2_bool |x3#0@@6|) ))) ($Is |f#0@@21| (Tclass._System.___hTotalFunc4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120|))))) :qid |unknown.0:0| :skolemid |966| :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120|))) )))
(assert (forall ((|#$T0@@108| T@U) (|#$T1@@92| T@U) (|#$T2@@73| T@U) (|#$T3@@51| T@U) (|#$R@@121| T@U) (|f#0@@22| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@108|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$T3@@51|) TyType)) (= (type |#$R@@121|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc4 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$R@@121|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc4 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$R@@121|) $h@@19)) (=> ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc4 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$R@@121|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc4 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$R@@121|) $h@@19)))) :qid |unknown.0:0| :skolemid |967| :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc4 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$R@@121|) $h@@19)) )))
(assert  (and (forall ((arg0@@246 T@U) (arg1@@119 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@246 arg1@@119)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@246 arg1@@119)) )) (forall ((arg0@@247 T@U) ) (! (= (type (DatatypeCtorId arg0@@247)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@247)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |968| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |969| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |970| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |971| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@248 T@U) (arg1@@120 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@248 arg1@@120)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@248 arg1@@120)) )))
(assert (forall ((|#$T0@@109| T@U) (|#$T1@@93| T@U) ) (!  (=> (and (= (type |#$T0@@109|) TyType) (= (type |#$T1@@93|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@109| |#$T1@@93|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |972| :pattern ( (Tclass._System.Tuple2 |#$T0@@109| |#$T1@@93|)) )))
(assert (forall ((arg0@@249 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@249)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@249)) )))
(assert (forall ((|#$T0@@110| T@U) (|#$T1@@94| T@U) ) (!  (=> (and (= (type |#$T0@@110|) TyType) (= (type |#$T1@@94|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@110| |#$T1@@94|)) |#$T0@@110|)) :qid |unknown.0:0| :skolemid |973| :pattern ( (Tclass._System.Tuple2 |#$T0@@110| |#$T1@@94|)) )))
(assert (forall ((arg0@@250 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@250)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@250)) )))
(assert (forall ((|#$T0@@111| T@U) (|#$T1@@95| T@U) ) (!  (=> (and (= (type |#$T0@@111|) TyType) (= (type |#$T1@@95|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@111| |#$T1@@95|)) |#$T1@@95|)) :qid |unknown.0:0| :skolemid |974| :pattern ( (Tclass._System.Tuple2 |#$T0@@111| |#$T1@@95|)) )))
(assert (forall ((|#$T0@@112| T@U) (|#$T1@@96| T@U) (bx@@85 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@112|) TyType) (= (type |#$T1@@96|) TyType)) (= (type bx@@85) BoxType)) ($IsBox bx@@85 (Tclass._System.Tuple2 |#$T0@@112| |#$T1@@96|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@85)) bx@@85) ($Is ($Unbox DatatypeTypeType bx@@85) (Tclass._System.Tuple2 |#$T0@@112| |#$T1@@96|)))) :qid |unknown.0:0| :skolemid |975| :pattern ( ($IsBox bx@@85 (Tclass._System.Tuple2 |#$T0@@112| |#$T1@@96|))) )))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@97| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@113| |#$T1@@97|)) (and ($IsBox |a#2#0#0| |#$T0@@113|) ($IsBox |a#2#1#0| |#$T1@@97|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@113|) ($IsBox |a#2#1#0| |#$T1@@97|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@113| |#$T1@@97|))))) :qid |unknown.0:0| :skolemid |976| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@113| |#$T1@@97|))) )))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@98| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@20)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@114| |#$T1@@98|) $h@@20) (and ($IsAllocBox |a#3#0#0| |#$T0@@114| $h@@20) ($IsAllocBox |a#3#1#0| |#$T1@@98| $h@@20))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@114| $h@@20) ($IsAllocBox |a#3#1#0| |#$T1@@98| $h@@20)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@114| |#$T1@@98|) $h@@20)))) :qid |unknown.0:0| :skolemid |977| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@114| |#$T1@@98|) $h@@20)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@115| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@115|) TyType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@21) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@99| T@U) ) (!  (and (= (type |#$T1@@99|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@115| |#$T1@@99|) $h@@21)) :qid |unknown.0:0| :skolemid |978| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@115| |#$T1@@99|) $h@@21)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@115| $h@@21)) :qid |unknown.0:0| :skolemid |979| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@115| $h@@21)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@100| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@100|) TyType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@22) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@116| T@U) ) (!  (and (= (type |#$T0@@116|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@116| |#$T1@@100|) $h@@22)) :qid |unknown.0:0| :skolemid |980| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@116| |#$T1@@100|) $h@@22)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@100| $h@@22)) :qid |unknown.0:0| :skolemid |981| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@100| $h@@22)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |982| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |983| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |984| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |985| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |986| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |987| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@101| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@101|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@117| |#$T1@@101|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |988| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@117| |#$T1@@101|))) )))
(assert (forall ((a@@118 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@118) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@118 b@@61) (and (= (_System.Tuple2._0 a@@118) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@118) (_System.Tuple2._1 b@@61)))) (=> (and (= (_System.Tuple2._0 a@@118) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@118) (_System.Tuple2._1 b@@61))) (|_System.Tuple2#Equal| a@@118 b@@61)))) :qid |unknown.0:0| :skolemid |989| :pattern ( (|_System.Tuple2#Equal| a@@118 b@@61)) )))
(assert (forall ((a@@119 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@119) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@119 b@@62) (= a@@119 b@@62)) (=> (= a@@119 b@@62) (|_System.Tuple2#Equal| a@@119 b@@62)))) :qid |unknown.0:0| :skolemid |990| :pattern ( (|_System.Tuple2#Equal| a@@119 b@@62)) )))
(assert (forall ((arg0@@251 T@U) (arg1@@121 T@U) (arg2@@77 T@U) (arg3@@54 T@U) (arg4@@43 T@U) (arg5@@30 T@U) (arg6@@18 T@U) ) (! (= (type (Tclass._System.___hFunc6 arg0@@251 arg1@@121 arg2@@77 arg3@@54 arg4@@43 arg5@@30 arg6@@18)) TyType) :qid |funType:Tclass._System.___hFunc6| :pattern ( (Tclass._System.___hFunc6 arg0@@251 arg1@@121 arg2@@77 arg3@@54 arg4@@43 arg5@@30 arg6@@18)) )))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@102| T@U) (|#$T2@@74| T@U) (|#$T3@@52| T@U) (|#$T4@@27| T@U) (|#$T5| T@U) (|#$R@@122| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$T3@@52|) TyType)) (= (type |#$T4@@27|) TyType)) (= (type |#$T5|) TyType)) (= (type |#$R@@122|) TyType)) (= (Tag (Tclass._System.___hFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@122|)) Tagclass._System.___hFunc6)) :qid |unknown.0:0| :skolemid |991| :pattern ( (Tclass._System.___hFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@122|)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hFunc6_0 arg0@@252)) TyType) :qid |funType:Tclass._System.___hFunc6_0| :pattern ( (Tclass._System.___hFunc6_0 arg0@@252)) )))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@103| T@U) (|#$T2@@75| T@U) (|#$T3@@53| T@U) (|#$T4@@28| T@U) (|#$T5@@0| T@U) (|#$R@@123| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$T3@@53|) TyType)) (= (type |#$T4@@28|) TyType)) (= (type |#$T5@@0|) TyType)) (= (type |#$R@@123|) TyType)) (= (Tclass._System.___hFunc6_0 (Tclass._System.___hFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@123|)) |#$T0@@119|)) :qid |unknown.0:0| :skolemid |992| :pattern ( (Tclass._System.___hFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@123|)) )))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (Tclass._System.___hFunc6_1 arg0@@253)) TyType) :qid |funType:Tclass._System.___hFunc6_1| :pattern ( (Tclass._System.___hFunc6_1 arg0@@253)) )))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@104| T@U) (|#$T2@@76| T@U) (|#$T3@@54| T@U) (|#$T4@@29| T@U) (|#$T5@@1| T@U) (|#$R@@124| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$T3@@54|) TyType)) (= (type |#$T4@@29|) TyType)) (= (type |#$T5@@1|) TyType)) (= (type |#$R@@124|) TyType)) (= (Tclass._System.___hFunc6_1 (Tclass._System.___hFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@124|)) |#$T1@@104|)) :qid |unknown.0:0| :skolemid |993| :pattern ( (Tclass._System.___hFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@124|)) )))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass._System.___hFunc6_2 arg0@@254)) TyType) :qid |funType:Tclass._System.___hFunc6_2| :pattern ( (Tclass._System.___hFunc6_2 arg0@@254)) )))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@105| T@U) (|#$T2@@77| T@U) (|#$T3@@55| T@U) (|#$T4@@30| T@U) (|#$T5@@2| T@U) (|#$R@@125| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$T3@@55|) TyType)) (= (type |#$T4@@30|) TyType)) (= (type |#$T5@@2|) TyType)) (= (type |#$R@@125|) TyType)) (= (Tclass._System.___hFunc6_2 (Tclass._System.___hFunc6 |#$T0@@121| |#$T1@@105| |#$T2@@77| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@125|)) |#$T2@@77|)) :qid |unknown.0:0| :skolemid |994| :pattern ( (Tclass._System.___hFunc6 |#$T0@@121| |#$T1@@105| |#$T2@@77| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@125|)) )))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass._System.___hFunc6_3 arg0@@255)) TyType) :qid |funType:Tclass._System.___hFunc6_3| :pattern ( (Tclass._System.___hFunc6_3 arg0@@255)) )))
(assert (forall ((|#$T0@@122| T@U) (|#$T1@@106| T@U) (|#$T2@@78| T@U) (|#$T3@@56| T@U) (|#$T4@@31| T@U) (|#$T5@@3| T@U) (|#$R@@126| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@122|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$T3@@56|) TyType)) (= (type |#$T4@@31|) TyType)) (= (type |#$T5@@3|) TyType)) (= (type |#$R@@126|) TyType)) (= (Tclass._System.___hFunc6_3 (Tclass._System.___hFunc6 |#$T0@@122| |#$T1@@106| |#$T2@@78| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@126|)) |#$T3@@56|)) :qid |unknown.0:0| :skolemid |995| :pattern ( (Tclass._System.___hFunc6 |#$T0@@122| |#$T1@@106| |#$T2@@78| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@126|)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (Tclass._System.___hFunc6_4 arg0@@256)) TyType) :qid |funType:Tclass._System.___hFunc6_4| :pattern ( (Tclass._System.___hFunc6_4 arg0@@256)) )))
(assert (forall ((|#$T0@@123| T@U) (|#$T1@@107| T@U) (|#$T2@@79| T@U) (|#$T3@@57| T@U) (|#$T4@@32| T@U) (|#$T5@@4| T@U) (|#$R@@127| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@123|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$T3@@57|) TyType)) (= (type |#$T4@@32|) TyType)) (= (type |#$T5@@4|) TyType)) (= (type |#$R@@127|) TyType)) (= (Tclass._System.___hFunc6_4 (Tclass._System.___hFunc6 |#$T0@@123| |#$T1@@107| |#$T2@@79| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@127|)) |#$T4@@32|)) :qid |unknown.0:0| :skolemid |996| :pattern ( (Tclass._System.___hFunc6 |#$T0@@123| |#$T1@@107| |#$T2@@79| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@127|)) )))
(assert (forall ((arg0@@257 T@U) ) (! (= (type (Tclass._System.___hFunc6_5 arg0@@257)) TyType) :qid |funType:Tclass._System.___hFunc6_5| :pattern ( (Tclass._System.___hFunc6_5 arg0@@257)) )))
(assert (forall ((|#$T0@@124| T@U) (|#$T1@@108| T@U) (|#$T2@@80| T@U) (|#$T3@@58| T@U) (|#$T4@@33| T@U) (|#$T5@@5| T@U) (|#$R@@128| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@124|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$T3@@58|) TyType)) (= (type |#$T4@@33|) TyType)) (= (type |#$T5@@5|) TyType)) (= (type |#$R@@128|) TyType)) (= (Tclass._System.___hFunc6_5 (Tclass._System.___hFunc6 |#$T0@@124| |#$T1@@108| |#$T2@@80| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@128|)) |#$T5@@5|)) :qid |unknown.0:0| :skolemid |997| :pattern ( (Tclass._System.___hFunc6 |#$T0@@124| |#$T1@@108| |#$T2@@80| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@128|)) )))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (Tclass._System.___hFunc6_6 arg0@@258)) TyType) :qid |funType:Tclass._System.___hFunc6_6| :pattern ( (Tclass._System.___hFunc6_6 arg0@@258)) )))
(assert (forall ((|#$T0@@125| T@U) (|#$T1@@109| T@U) (|#$T2@@81| T@U) (|#$T3@@59| T@U) (|#$T4@@34| T@U) (|#$T5@@6| T@U) (|#$R@@129| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@125|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$T3@@59|) TyType)) (= (type |#$T4@@34|) TyType)) (= (type |#$T5@@6|) TyType)) (= (type |#$R@@129|) TyType)) (= (Tclass._System.___hFunc6_6 (Tclass._System.___hFunc6 |#$T0@@125| |#$T1@@109| |#$T2@@81| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@129|)) |#$R@@129|)) :qid |unknown.0:0| :skolemid |998| :pattern ( (Tclass._System.___hFunc6 |#$T0@@125| |#$T1@@109| |#$T2@@81| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@129|)) )))
(assert (forall ((|#$T0@@126| T@U) (|#$T1@@110| T@U) (|#$T2@@82| T@U) (|#$T3@@60| T@U) (|#$T4@@35| T@U) (|#$T5@@7| T@U) (|#$R@@130| T@U) (bx@@86 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@126|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$T3@@60|) TyType)) (= (type |#$T4@@35|) TyType)) (= (type |#$T5@@7|) TyType)) (= (type |#$R@@130|) TyType)) (= (type bx@@86) BoxType)) ($IsBox bx@@86 (Tclass._System.___hFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@130|))) (and (= ($Box ($Unbox HandleTypeType bx@@86)) bx@@86) ($Is ($Unbox HandleTypeType bx@@86) (Tclass._System.___hFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@130|)))) :qid |unknown.0:0| :skolemid |999| :pattern ( ($IsBox bx@@86 (Tclass._System.___hFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@130|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@259 T@T) (arg1@@122 T@T) (arg2@@78 T@T) (arg3@@55 T@T) (arg4@@44 T@T) (arg5@@31 T@T) (arg6@@19 T@T) (arg7@@6 T@T) ) (! (= (Ctor (MapType7Type arg0@@259 arg1@@122 arg2@@78 arg3@@55 arg4@@44 arg5@@31 arg6@@19 arg7@@6)) 26) :qid |ctor:MapType7Type| )) (forall ((arg0@@260 T@T) (arg1@@123 T@T) (arg2@@79 T@T) (arg3@@56 T@T) (arg4@@45 T@T) (arg5@@32 T@T) (arg6@@20 T@T) (arg7@@7 T@T) ) (! (= (MapType7TypeInv0 (MapType7Type arg0@@260 arg1@@123 arg2@@79 arg3@@56 arg4@@45 arg5@@32 arg6@@20 arg7@@7)) arg0@@260) :qid |typeInv:MapType7TypeInv0| :pattern ( (MapType7Type arg0@@260 arg1@@123 arg2@@79 arg3@@56 arg4@@45 arg5@@32 arg6@@20 arg7@@7)) ))) (forall ((arg0@@261 T@T) (arg1@@124 T@T) (arg2@@80 T@T) (arg3@@57 T@T) (arg4@@46 T@T) (arg5@@33 T@T) (arg6@@21 T@T) (arg7@@8 T@T) ) (! (= (MapType7TypeInv1 (MapType7Type arg0@@261 arg1@@124 arg2@@80 arg3@@57 arg4@@46 arg5@@33 arg6@@21 arg7@@8)) arg1@@124) :qid |typeInv:MapType7TypeInv1| :pattern ( (MapType7Type arg0@@261 arg1@@124 arg2@@80 arg3@@57 arg4@@46 arg5@@33 arg6@@21 arg7@@8)) ))) (forall ((arg0@@262 T@T) (arg1@@125 T@T) (arg2@@81 T@T) (arg3@@58 T@T) (arg4@@47 T@T) (arg5@@34 T@T) (arg6@@22 T@T) (arg7@@9 T@T) ) (! (= (MapType7TypeInv2 (MapType7Type arg0@@262 arg1@@125 arg2@@81 arg3@@58 arg4@@47 arg5@@34 arg6@@22 arg7@@9)) arg2@@81) :qid |typeInv:MapType7TypeInv2| :pattern ( (MapType7Type arg0@@262 arg1@@125 arg2@@81 arg3@@58 arg4@@47 arg5@@34 arg6@@22 arg7@@9)) ))) (forall ((arg0@@263 T@T) (arg1@@126 T@T) (arg2@@82 T@T) (arg3@@59 T@T) (arg4@@48 T@T) (arg5@@35 T@T) (arg6@@23 T@T) (arg7@@10 T@T) ) (! (= (MapType7TypeInv3 (MapType7Type arg0@@263 arg1@@126 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@23 arg7@@10)) arg3@@59) :qid |typeInv:MapType7TypeInv3| :pattern ( (MapType7Type arg0@@263 arg1@@126 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@23 arg7@@10)) ))) (forall ((arg0@@264 T@T) (arg1@@127 T@T) (arg2@@83 T@T) (arg3@@60 T@T) (arg4@@49 T@T) (arg5@@36 T@T) (arg6@@24 T@T) (arg7@@11 T@T) ) (! (= (MapType7TypeInv4 (MapType7Type arg0@@264 arg1@@127 arg2@@83 arg3@@60 arg4@@49 arg5@@36 arg6@@24 arg7@@11)) arg4@@49) :qid |typeInv:MapType7TypeInv4| :pattern ( (MapType7Type arg0@@264 arg1@@127 arg2@@83 arg3@@60 arg4@@49 arg5@@36 arg6@@24 arg7@@11)) ))) (forall ((arg0@@265 T@T) (arg1@@128 T@T) (arg2@@84 T@T) (arg3@@61 T@T) (arg4@@50 T@T) (arg5@@37 T@T) (arg6@@25 T@T) (arg7@@12 T@T) ) (! (= (MapType7TypeInv5 (MapType7Type arg0@@265 arg1@@128 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@25 arg7@@12)) arg5@@37) :qid |typeInv:MapType7TypeInv5| :pattern ( (MapType7Type arg0@@265 arg1@@128 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@25 arg7@@12)) ))) (forall ((arg0@@266 T@T) (arg1@@129 T@T) (arg2@@85 T@T) (arg3@@62 T@T) (arg4@@51 T@T) (arg5@@38 T@T) (arg6@@26 T@T) (arg7@@13 T@T) ) (! (= (MapType7TypeInv6 (MapType7Type arg0@@266 arg1@@129 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@26 arg7@@13)) arg6@@26) :qid |typeInv:MapType7TypeInv6| :pattern ( (MapType7Type arg0@@266 arg1@@129 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@26 arg7@@13)) ))) (forall ((arg0@@267 T@T) (arg1@@130 T@T) (arg2@@86 T@T) (arg3@@63 T@T) (arg4@@52 T@T) (arg5@@39 T@T) (arg6@@27 T@T) (arg7@@14 T@T) ) (! (= (MapType7TypeInv7 (MapType7Type arg0@@267 arg1@@130 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@27 arg7@@14)) arg7@@14) :qid |typeInv:MapType7TypeInv7| :pattern ( (MapType7Type arg0@@267 arg1@@130 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@27 arg7@@14)) ))) (forall ((arg0@@268 T@U) (arg1@@131 T@U) (arg2@@87 T@U) (arg3@@64 T@U) (arg4@@53 T@U) (arg5@@40 T@U) (arg6@@28 T@U) (arg7@@15 T@U) ) (! (let ((aVar7 (MapType7TypeInv7 (type arg0@@268)))) (= (type (MapType7Select arg0@@268 arg1@@131 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@28 arg7@@15)) aVar7)) :qid |funType:MapType7Select| :pattern ( (MapType7Select arg0@@268 arg1@@131 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@28 arg7@@15)) ))) (forall ((arg0@@269 T@U) (arg1@@132 T@U) (arg2@@88 T@U) (arg3@@65 T@U) (arg4@@54 T@U) (arg5@@41 T@U) (arg6@@29 T@U) (arg7@@16 T@U) (arg8@@5 T@U) ) (! (let ((aVar7@@0 (type arg8@@5))) (let ((aVar6@@2 (type arg7@@16))) (let ((aVar5@@3 (type arg6@@29))) (let ((aVar4@@4 (type arg5@@41))) (let ((aVar3@@5 (type arg4@@54))) (let ((aVar2@@6 (type arg3@@65))) (let ((aVar1@@7 (type arg2@@88))) (let ((aVar0@@5 (type arg1@@132))) (= (type (MapType7Store arg0@@269 arg1@@132 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@29 arg7@@16 arg8@@5)) (MapType7Type aVar0@@5 aVar1@@7 aVar2@@6 aVar3@@5 aVar4@@4 aVar5@@3 aVar6@@2 aVar7@@0)))))))))) :qid |funType:MapType7Store| :pattern ( (MapType7Store arg0@@269 arg1@@132 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@29 arg7@@16 arg8@@5)) ))) (forall ((m@@57 T@U) (x0@@35 T@U) (x1@@29 T@U) (x2@@25 T@U) (x3@@20 T@U) (x4@@14 T@U) (x5@@7 T@U) (x6 T@U) (val@@36 T@U) ) (! (let ((aVar7@@1 (MapType7TypeInv7 (type m@@57)))) (=> (= (type val@@36) aVar7@@1) (= (MapType7Select (MapType7Store m@@57 x0@@35 x1@@29 x2@@25 x3@@20 x4@@14 x5@@7 x6 val@@36) x0@@35 x1@@29 x2@@25 x3@@20 x4@@14 x5@@7 x6) val@@36))) :qid |mapAx0:MapType7Select| :weight 0 ))) (and (and (and (and (and (and (and (forall ((val@@37 T@U) (m@@58 T@U) (x0@@36 T@U) (x1@@30 T@U) (x2@@26 T@U) (x3@@21 T@U) (x4@@15 T@U) (x5@@8 T@U) (x6@@0 T@U) (y0@@28 T@U) (y1@@24 T@U) (y2@@21 T@U) (y3@@17 T@U) (y4@@12 T@U) (y5@@6 T@U) (y6 T@U) ) (!  (or (= x0@@36 y0@@28) (= (MapType7Select (MapType7Store m@@58 x0@@36 x1@@30 x2@@26 x3@@21 x4@@15 x5@@8 x6@@0 val@@37) y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6) (MapType7Select m@@58 y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6))) :qid |mapAx1:MapType7Select:0| :weight 0 )) (forall ((val@@38 T@U) (m@@59 T@U) (x0@@37 T@U) (x1@@31 T@U) (x2@@27 T@U) (x3@@22 T@U) (x4@@16 T@U) (x5@@9 T@U) (x6@@1 T@U) (y0@@29 T@U) (y1@@25 T@U) (y2@@22 T@U) (y3@@18 T@U) (y4@@13 T@U) (y5@@7 T@U) (y6@@0 T@U) ) (!  (or (= x1@@31 y1@@25) (= (MapType7Select (MapType7Store m@@59 x0@@37 x1@@31 x2@@27 x3@@22 x4@@16 x5@@9 x6@@1 val@@38) y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@0) (MapType7Select m@@59 y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@0))) :qid |mapAx1:MapType7Select:1| :weight 0 ))) (forall ((val@@39 T@U) (m@@60 T@U) (x0@@38 T@U) (x1@@32 T@U) (x2@@28 T@U) (x3@@23 T@U) (x4@@17 T@U) (x5@@10 T@U) (x6@@2 T@U) (y0@@30 T@U) (y1@@26 T@U) (y2@@23 T@U) (y3@@19 T@U) (y4@@14 T@U) (y5@@8 T@U) (y6@@1 T@U) ) (!  (or (= x2@@28 y2@@23) (= (MapType7Select (MapType7Store m@@60 x0@@38 x1@@32 x2@@28 x3@@23 x4@@17 x5@@10 x6@@2 val@@39) y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@1) (MapType7Select m@@60 y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@1))) :qid |mapAx1:MapType7Select:2| :weight 0 ))) (forall ((val@@40 T@U) (m@@61 T@U) (x0@@39 T@U) (x1@@33 T@U) (x2@@29 T@U) (x3@@24 T@U) (x4@@18 T@U) (x5@@11 T@U) (x6@@3 T@U) (y0@@31 T@U) (y1@@27 T@U) (y2@@24 T@U) (y3@@20 T@U) (y4@@15 T@U) (y5@@9 T@U) (y6@@2 T@U) ) (!  (or (= x3@@24 y3@@20) (= (MapType7Select (MapType7Store m@@61 x0@@39 x1@@33 x2@@29 x3@@24 x4@@18 x5@@11 x6@@3 val@@40) y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@2) (MapType7Select m@@61 y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@2))) :qid |mapAx1:MapType7Select:3| :weight 0 ))) (forall ((val@@41 T@U) (m@@62 T@U) (x0@@40 T@U) (x1@@34 T@U) (x2@@30 T@U) (x3@@25 T@U) (x4@@19 T@U) (x5@@12 T@U) (x6@@4 T@U) (y0@@32 T@U) (y1@@28 T@U) (y2@@25 T@U) (y3@@21 T@U) (y4@@16 T@U) (y5@@10 T@U) (y6@@3 T@U) ) (!  (or (= x4@@19 y4@@16) (= (MapType7Select (MapType7Store m@@62 x0@@40 x1@@34 x2@@30 x3@@25 x4@@19 x5@@12 x6@@4 val@@41) y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@3) (MapType7Select m@@62 y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@3))) :qid |mapAx1:MapType7Select:4| :weight 0 ))) (forall ((val@@42 T@U) (m@@63 T@U) (x0@@41 T@U) (x1@@35 T@U) (x2@@31 T@U) (x3@@26 T@U) (x4@@20 T@U) (x5@@13 T@U) (x6@@5 T@U) (y0@@33 T@U) (y1@@29 T@U) (y2@@26 T@U) (y3@@22 T@U) (y4@@17 T@U) (y5@@11 T@U) (y6@@4 T@U) ) (!  (or (= x5@@13 y5@@11) (= (MapType7Select (MapType7Store m@@63 x0@@41 x1@@35 x2@@31 x3@@26 x4@@20 x5@@13 x6@@5 val@@42) y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@4) (MapType7Select m@@63 y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@4))) :qid |mapAx1:MapType7Select:5| :weight 0 ))) (forall ((val@@43 T@U) (m@@64 T@U) (x0@@42 T@U) (x1@@36 T@U) (x2@@32 T@U) (x3@@27 T@U) (x4@@21 T@U) (x5@@14 T@U) (x6@@6 T@U) (y0@@34 T@U) (y1@@30 T@U) (y2@@27 T@U) (y3@@23 T@U) (y4@@18 T@U) (y5@@12 T@U) (y6@@5 T@U) ) (!  (or (= x6@@6 y6@@5) (= (MapType7Select (MapType7Store m@@64 x0@@42 x1@@36 x2@@32 x3@@27 x4@@21 x5@@14 x6@@6 val@@43) y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@5) (MapType7Select m@@64 y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@5))) :qid |mapAx1:MapType7Select:6| :weight 0 ))) (forall ((val@@44 T@U) (m@@65 T@U) (x0@@43 T@U) (x1@@37 T@U) (x2@@33 T@U) (x3@@28 T@U) (x4@@22 T@U) (x5@@15 T@U) (x6@@7 T@U) (y0@@35 T@U) (y1@@31 T@U) (y2@@28 T@U) (y3@@24 T@U) (y4@@19 T@U) (y5@@13 T@U) (y6@@6 T@U) ) (!  (or true (= (MapType7Select (MapType7Store m@@65 x0@@43 x1@@37 x2@@33 x3@@28 x4@@22 x5@@15 x6@@7 val@@44) y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@6) (MapType7Select m@@65 y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@6))) :qid |mapAx2:MapType7Select| :weight 0 )))) (forall ((arg0@@270 T@U) (arg1@@133 T@U) (arg2@@89 T@U) (arg3@@66 T@U) (arg4@@55 T@U) (arg5@@42 T@U) (arg6@@30 T@U) (arg7@@17 T@U) (arg8@@6 T@U) (arg9@@3 T@U) (arg10@@3 T@U) (arg11@@1 T@U) (arg12@@1 T@U) (arg13 T@U) (arg14 T@U) ) (! (= (type (Apply6 arg0@@270 arg1@@133 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@30 arg7@@17 arg8@@6 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) BoxType) :qid |funType:Apply6| :pattern ( (Apply6 arg0@@270 arg1@@133 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@30 arg7@@17 arg8@@6 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) ))) (forall ((arg0@@271 T@U) (arg1@@134 T@U) (arg2@@90 T@U) ) (! (= (type (Handle6 arg0@@271 arg1@@134 arg2@@90)) HandleTypeType) :qid |funType:Handle6| :pattern ( (Handle6 arg0@@271 arg1@@134 arg2@@90)) ))))
(assert (forall ((t0@@102 T@U) (t1@@78 T@U) (t2@@59 T@U) (t3@@44 T@U) (t4@@29 T@U) (t5@@14 T@U) (t6 T@U) (heap@@31 T@U) (h@@62 T@U) (r@@36 T@U) (rd@@17 T@U) (bx0@@79 T@U) (bx1@@63 T@U) (bx2@@47 T@U) (bx3@@31 T@U) (bx4@@15 T@U) (bx5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@102) TyType) (= (type t1@@78) TyType)) (= (type t2@@59) TyType)) (= (type t3@@44) TyType)) (= (type t4@@29) TyType)) (= (type t5@@14) TyType)) (= (type t6) TyType)) (= (type heap@@31) (MapType0Type refType MapType1Type))) (= (type h@@62) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@36) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@17) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@79) BoxType)) (= (type bx1@@63) BoxType)) (= (type bx2@@47) BoxType)) (= (type bx3@@31) BoxType)) (= (type bx4@@15) BoxType)) (= (type bx5) BoxType)) (= (Apply6 t0@@102 t1@@78 t2@@59 t3@@44 t4@@29 t5@@14 t6 heap@@31 (Handle6 h@@62 r@@36 rd@@17) bx0@@79 bx1@@63 bx2@@47 bx3@@31 bx4@@15 bx5) (MapType7Select h@@62 heap@@31 bx0@@79 bx1@@63 bx2@@47 bx3@@31 bx4@@15 bx5))) :qid |unknown.0:0| :skolemid |1000| :pattern ( (Apply6 t0@@102 t1@@78 t2@@59 t3@@44 t4@@29 t5@@14 t6 heap@@31 (Handle6 h@@62 r@@36 rd@@17) bx0@@79 bx1@@63 bx2@@47 bx3@@31 bx4@@15 bx5)) )))
(assert (forall ((t0@@103 T@U) (t1@@79 T@U) (t2@@60 T@U) (t3@@45 T@U) (t4@@30 T@U) (t5@@15 T@U) (t6@@0 T@U) (heap@@32 T@U) (h@@63 T@U) (r@@37 T@U) (rd@@18 T@U) (bx0@@80 T@U) (bx1@@64 T@U) (bx2@@48 T@U) (bx3@@32 T@U) (bx4@@16 T@U) (bx5@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@103) TyType) (= (type t1@@79) TyType)) (= (type t2@@60) TyType)) (= (type t3@@45) TyType)) (= (type t4@@30) TyType)) (= (type t5@@15) TyType)) (= (type t6@@0) TyType)) (= (type heap@@32) (MapType0Type refType MapType1Type))) (= (type h@@63) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@37) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@18) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@80) BoxType)) (= (type bx1@@64) BoxType)) (= (type bx2@@48) BoxType)) (= (type bx3@@32) BoxType)) (= (type bx4@@16) BoxType)) (= (type bx5@@0) BoxType)) (U_2_bool (MapType7Select r@@37 heap@@32 bx0@@80 bx1@@64 bx2@@48 bx3@@32 bx4@@16 bx5@@0))) (Requires6 t0@@103 t1@@79 t2@@60 t3@@45 t4@@30 t5@@15 t6@@0 heap@@32 (Handle6 h@@63 r@@37 rd@@18) bx0@@80 bx1@@64 bx2@@48 bx3@@32 bx4@@16 bx5@@0)) :qid |unknown.0:0| :skolemid |1001| :pattern ( (Requires6 t0@@103 t1@@79 t2@@60 t3@@45 t4@@30 t5@@15 t6@@0 heap@@32 (Handle6 h@@63 r@@37 rd@@18) bx0@@80 bx1@@64 bx2@@48 bx3@@32 bx4@@16 bx5@@0)) )))
(assert (forall ((arg0@@272 T@U) (arg1@@135 T@U) (arg2@@91 T@U) (arg3@@67 T@U) (arg4@@56 T@U) (arg5@@43 T@U) (arg6@@31 T@U) (arg7@@18 T@U) (arg8@@7 T@U) (arg9@@4 T@U) (arg10@@4 T@U) (arg11@@2 T@U) (arg12@@2 T@U) (arg13@@0 T@U) (arg14@@0 T@U) ) (! (= (type (Reads6 arg0@@272 arg1@@135 arg2@@91 arg3@@67 arg4@@56 arg5@@43 arg6@@31 arg7@@18 arg8@@7 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads6| :pattern ( (Reads6 arg0@@272 arg1@@135 arg2@@91 arg3@@67 arg4@@56 arg5@@43 arg6@@31 arg7@@18 arg8@@7 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) )))
(assert (forall ((t0@@104 T@U) (t1@@80 T@U) (t2@@61 T@U) (t3@@46 T@U) (t4@@31 T@U) (t5@@16 T@U) (t6@@1 T@U) (heap@@33 T@U) (h@@64 T@U) (r@@38 T@U) (rd@@19 T@U) (bx0@@81 T@U) (bx1@@65 T@U) (bx2@@49 T@U) (bx3@@33 T@U) (bx4@@17 T@U) (bx5@@1 T@U) (bx@@87 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@104) TyType) (= (type t1@@80) TyType)) (= (type t2@@61) TyType)) (= (type t3@@46) TyType)) (= (type t4@@31) TyType)) (= (type t5@@16) TyType)) (= (type t6@@1) TyType)) (= (type heap@@33) (MapType0Type refType MapType1Type))) (= (type h@@64) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@38) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@19) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@81) BoxType)) (= (type bx1@@65) BoxType)) (= (type bx2@@49) BoxType)) (= (type bx3@@33) BoxType)) (= (type bx4@@17) BoxType)) (= (type bx5@@1) BoxType)) (= (type bx@@87) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads6 t0@@104 t1@@80 t2@@61 t3@@46 t4@@31 t5@@16 t6@@1 heap@@33 (Handle6 h@@64 r@@38 rd@@19) bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@1) bx@@87)) (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@1) bx@@87))) (=> (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@1) bx@@87)) (U_2_bool (MapType0Select (Reads6 t0@@104 t1@@80 t2@@61 t3@@46 t4@@31 t5@@16 t6@@1 heap@@33 (Handle6 h@@64 r@@38 rd@@19) bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@1) bx@@87))))) :qid |unknown.0:0| :skolemid |1002| :pattern ( (MapType0Select (Reads6 t0@@104 t1@@80 t2@@61 t3@@46 t4@@31 t5@@16 t6@@1 heap@@33 (Handle6 h@@64 r@@38 rd@@19) bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@1) bx@@87)) )))
(assert (forall ((t0@@105 T@U) (t1@@81 T@U) (t2@@62 T@U) (t3@@47 T@U) (t4@@32 T@U) (t5@@17 T@U) (t6@@2 T@U) (h0@@36 T@U) (h1@@36 T@U) (f@@77 T@U) (bx0@@82 T@U) (bx1@@66 T@U) (bx2@@50 T@U) (bx3@@34 T@U) (bx4@@18 T@U) (bx5@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@105) TyType) (= (type t1@@81) TyType)) (= (type t2@@62) TyType)) (= (type t3@@47) TyType)) (= (type t4@@32) TyType)) (= (type t5@@17) TyType)) (= (type t6@@2) TyType)) (= (type h0@@36) (MapType0Type refType MapType1Type))) (= (type h1@@36) (MapType0Type refType MapType1Type))) (= (type f@@77) HandleTypeType)) (= (type bx0@@82) BoxType)) (= (type bx1@@66) BoxType)) (= (type bx2@@50) BoxType)) (= (type bx3@@34) BoxType)) (= (type bx4@@18) BoxType)) (= (type bx5@@2) BoxType)) (and (and (and ($HeapSucc h0@@36 h1@@36) (and ($IsGoodHeap h0@@36) ($IsGoodHeap h1@@36))) (and (and (and (and (and (and ($IsBox bx0@@82 t0@@105) ($IsBox bx1@@66 t1@@81)) ($IsBox bx2@@50 t2@@62)) ($IsBox bx3@@34 t3@@47)) ($IsBox bx4@@18 t4@@32)) ($IsBox bx5@@2 t5@@17)) ($Is f@@77 (Tclass._System.___hFunc6 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2)))) (forall ((o@@90 T@U) (fld@@35 T@U) ) (! (let ((a@@120 (FieldTypeInv0 (type fld@@35)))) (=> (and (and (= (type o@@90) refType) (= (type fld@@35) (FieldType a@@120))) (and (not (= o@@90 null)) (U_2_bool (MapType0Select (Reads6 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h0@@36 f@@77 bx0@@82 bx1@@66 bx2@@50 bx3@@34 bx4@@18 bx5@@2) ($Box o@@90))))) (= (MapType1Select (MapType0Select h0@@36 o@@90) fld@@35) (MapType1Select (MapType0Select h1@@36 o@@90) fld@@35)))) :qid |unknown.0:0| :skolemid |1003| :no-pattern (type o@@90) :no-pattern (type fld@@35) :no-pattern (U_2_int o@@90) :no-pattern (U_2_bool o@@90) :no-pattern (U_2_int fld@@35) :no-pattern (U_2_bool fld@@35) )))) (= (Reads6 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h0@@36 f@@77 bx0@@82 bx1@@66 bx2@@50 bx3@@34 bx4@@18 bx5@@2) (Reads6 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h1@@36 f@@77 bx0@@82 bx1@@66 bx2@@50 bx3@@34 bx4@@18 bx5@@2))) :qid |unknown.0:0| :skolemid |1004| :pattern ( ($HeapSucc h0@@36 h1@@36) (Reads6 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h1@@36 f@@77 bx0@@82 bx1@@66 bx2@@50 bx3@@34 bx4@@18 bx5@@2)) )))
(assert (forall ((t0@@106 T@U) (t1@@82 T@U) (t2@@63 T@U) (t3@@48 T@U) (t4@@33 T@U) (t5@@18 T@U) (t6@@3 T@U) (h0@@37 T@U) (h1@@37 T@U) (f@@78 T@U) (bx0@@83 T@U) (bx1@@67 T@U) (bx2@@51 T@U) (bx3@@35 T@U) (bx4@@19 T@U) (bx5@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@106) TyType) (= (type t1@@82) TyType)) (= (type t2@@63) TyType)) (= (type t3@@48) TyType)) (= (type t4@@33) TyType)) (= (type t5@@18) TyType)) (= (type t6@@3) TyType)) (= (type h0@@37) (MapType0Type refType MapType1Type))) (= (type h1@@37) (MapType0Type refType MapType1Type))) (= (type f@@78) HandleTypeType)) (= (type bx0@@83) BoxType)) (= (type bx1@@67) BoxType)) (= (type bx2@@51) BoxType)) (= (type bx3@@35) BoxType)) (= (type bx4@@19) BoxType)) (= (type bx5@@3) BoxType)) (and (and (and ($HeapSucc h0@@37 h1@@37) (and ($IsGoodHeap h0@@37) ($IsGoodHeap h1@@37))) (and (and (and (and (and (and ($IsBox bx0@@83 t0@@106) ($IsBox bx1@@67 t1@@82)) ($IsBox bx2@@51 t2@@63)) ($IsBox bx3@@35 t3@@48)) ($IsBox bx4@@19 t4@@33)) ($IsBox bx5@@3 t5@@18)) ($Is f@@78 (Tclass._System.___hFunc6 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3)))) (forall ((o@@91 T@U) (fld@@36 T@U) ) (! (let ((a@@121 (FieldTypeInv0 (type fld@@36)))) (=> (and (and (= (type o@@91) refType) (= (type fld@@36) (FieldType a@@121))) (and (not (= o@@91 null)) (U_2_bool (MapType0Select (Reads6 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@83 bx1@@67 bx2@@51 bx3@@35 bx4@@19 bx5@@3) ($Box o@@91))))) (= (MapType1Select (MapType0Select h0@@37 o@@91) fld@@36) (MapType1Select (MapType0Select h1@@37 o@@91) fld@@36)))) :qid |unknown.0:0| :skolemid |1005| :no-pattern (type o@@91) :no-pattern (type fld@@36) :no-pattern (U_2_int o@@91) :no-pattern (U_2_bool o@@91) :no-pattern (U_2_int fld@@36) :no-pattern (U_2_bool fld@@36) )))) (= (Reads6 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h0@@37 f@@78 bx0@@83 bx1@@67 bx2@@51 bx3@@35 bx4@@19 bx5@@3) (Reads6 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@83 bx1@@67 bx2@@51 bx3@@35 bx4@@19 bx5@@3))) :qid |unknown.0:0| :skolemid |1006| :pattern ( ($HeapSucc h0@@37 h1@@37) (Reads6 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@83 bx1@@67 bx2@@51 bx3@@35 bx4@@19 bx5@@3)) )))
(assert (forall ((t0@@107 T@U) (t1@@83 T@U) (t2@@64 T@U) (t3@@49 T@U) (t4@@34 T@U) (t5@@19 T@U) (t6@@4 T@U) (h0@@38 T@U) (h1@@38 T@U) (f@@79 T@U) (bx0@@84 T@U) (bx1@@68 T@U) (bx2@@52 T@U) (bx3@@36 T@U) (bx4@@20 T@U) (bx5@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@107) TyType) (= (type t1@@83) TyType)) (= (type t2@@64) TyType)) (= (type t3@@49) TyType)) (= (type t4@@34) TyType)) (= (type t5@@19) TyType)) (= (type t6@@4) TyType)) (= (type h0@@38) (MapType0Type refType MapType1Type))) (= (type h1@@38) (MapType0Type refType MapType1Type))) (= (type f@@79) HandleTypeType)) (= (type bx0@@84) BoxType)) (= (type bx1@@68) BoxType)) (= (type bx2@@52) BoxType)) (= (type bx3@@36) BoxType)) (= (type bx4@@20) BoxType)) (= (type bx5@@4) BoxType)) (and (and (and ($HeapSucc h0@@38 h1@@38) (and ($IsGoodHeap h0@@38) ($IsGoodHeap h1@@38))) (and (and (and (and (and (and ($IsBox bx0@@84 t0@@107) ($IsBox bx1@@68 t1@@83)) ($IsBox bx2@@52 t2@@64)) ($IsBox bx3@@36 t3@@49)) ($IsBox bx4@@20 t4@@34)) ($IsBox bx5@@4 t5@@19)) ($Is f@@79 (Tclass._System.___hFunc6 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4)))) (forall ((o@@92 T@U) (fld@@37 T@U) ) (! (let ((a@@122 (FieldTypeInv0 (type fld@@37)))) (=> (and (and (= (type o@@92) refType) (= (type fld@@37) (FieldType a@@122))) (and (not (= o@@92 null)) (U_2_bool (MapType0Select (Reads6 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h0@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@4) ($Box o@@92))))) (= (MapType1Select (MapType0Select h0@@38 o@@92) fld@@37) (MapType1Select (MapType0Select h1@@38 o@@92) fld@@37)))) :qid |unknown.0:0| :skolemid |1007| :no-pattern (type o@@92) :no-pattern (type fld@@37) :no-pattern (U_2_int o@@92) :no-pattern (U_2_bool o@@92) :no-pattern (U_2_int fld@@37) :no-pattern (U_2_bool fld@@37) )))) (and (=> (Requires6 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h0@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@4) (Requires6 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h1@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@4)) (=> (Requires6 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h1@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@4) (Requires6 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h0@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@4)))) :qid |unknown.0:0| :skolemid |1008| :pattern ( ($HeapSucc h0@@38 h1@@38) (Requires6 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h1@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@4)) )))
(assert (forall ((t0@@108 T@U) (t1@@84 T@U) (t2@@65 T@U) (t3@@50 T@U) (t4@@35 T@U) (t5@@20 T@U) (t6@@5 T@U) (h0@@39 T@U) (h1@@39 T@U) (f@@80 T@U) (bx0@@85 T@U) (bx1@@69 T@U) (bx2@@53 T@U) (bx3@@37 T@U) (bx4@@21 T@U) (bx5@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@108) TyType) (= (type t1@@84) TyType)) (= (type t2@@65) TyType)) (= (type t3@@50) TyType)) (= (type t4@@35) TyType)) (= (type t5@@20) TyType)) (= (type t6@@5) TyType)) (= (type h0@@39) (MapType0Type refType MapType1Type))) (= (type h1@@39) (MapType0Type refType MapType1Type))) (= (type f@@80) HandleTypeType)) (= (type bx0@@85) BoxType)) (= (type bx1@@69) BoxType)) (= (type bx2@@53) BoxType)) (= (type bx3@@37) BoxType)) (= (type bx4@@21) BoxType)) (= (type bx5@@5) BoxType)) (and (and (and ($HeapSucc h0@@39 h1@@39) (and ($IsGoodHeap h0@@39) ($IsGoodHeap h1@@39))) (and (and (and (and (and (and ($IsBox bx0@@85 t0@@108) ($IsBox bx1@@69 t1@@84)) ($IsBox bx2@@53 t2@@65)) ($IsBox bx3@@37 t3@@50)) ($IsBox bx4@@21 t4@@35)) ($IsBox bx5@@5 t5@@20)) ($Is f@@80 (Tclass._System.___hFunc6 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5)))) (forall ((o@@93 T@U) (fld@@38 T@U) ) (! (let ((a@@123 (FieldTypeInv0 (type fld@@38)))) (=> (and (and (= (type o@@93) refType) (= (type fld@@38) (FieldType a@@123))) (and (not (= o@@93 null)) (U_2_bool (MapType0Select (Reads6 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@5) ($Box o@@93))))) (= (MapType1Select (MapType0Select h0@@39 o@@93) fld@@38) (MapType1Select (MapType0Select h1@@39 o@@93) fld@@38)))) :qid |unknown.0:0| :skolemid |1009| :no-pattern (type o@@93) :no-pattern (type fld@@38) :no-pattern (U_2_int o@@93) :no-pattern (U_2_bool o@@93) :no-pattern (U_2_int fld@@38) :no-pattern (U_2_bool fld@@38) )))) (and (=> (Requires6 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h0@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@5) (Requires6 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@5)) (=> (Requires6 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@5) (Requires6 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h0@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@5)))) :qid |unknown.0:0| :skolemid |1010| :pattern ( ($HeapSucc h0@@39 h1@@39) (Requires6 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@5)) )))
(assert (forall ((t0@@109 T@U) (t1@@85 T@U) (t2@@66 T@U) (t3@@51 T@U) (t4@@36 T@U) (t5@@21 T@U) (t6@@6 T@U) (h0@@40 T@U) (h1@@40 T@U) (f@@81 T@U) (bx0@@86 T@U) (bx1@@70 T@U) (bx2@@54 T@U) (bx3@@38 T@U) (bx4@@22 T@U) (bx5@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@109) TyType) (= (type t1@@85) TyType)) (= (type t2@@66) TyType)) (= (type t3@@51) TyType)) (= (type t4@@36) TyType)) (= (type t5@@21) TyType)) (= (type t6@@6) TyType)) (= (type h0@@40) (MapType0Type refType MapType1Type))) (= (type h1@@40) (MapType0Type refType MapType1Type))) (= (type f@@81) HandleTypeType)) (= (type bx0@@86) BoxType)) (= (type bx1@@70) BoxType)) (= (type bx2@@54) BoxType)) (= (type bx3@@38) BoxType)) (= (type bx4@@22) BoxType)) (= (type bx5@@6) BoxType)) (and (and (and ($HeapSucc h0@@40 h1@@40) (and ($IsGoodHeap h0@@40) ($IsGoodHeap h1@@40))) (and (and (and (and (and (and ($IsBox bx0@@86 t0@@109) ($IsBox bx1@@70 t1@@85)) ($IsBox bx2@@54 t2@@66)) ($IsBox bx3@@38 t3@@51)) ($IsBox bx4@@22 t4@@36)) ($IsBox bx5@@6 t5@@21)) ($Is f@@81 (Tclass._System.___hFunc6 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6)))) (forall ((o@@94 T@U) (fld@@39 T@U) ) (! (let ((a@@124 (FieldTypeInv0 (type fld@@39)))) (=> (and (and (= (type o@@94) refType) (= (type fld@@39) (FieldType a@@124))) (and (not (= o@@94 null)) (U_2_bool (MapType0Select (Reads6 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h0@@40 f@@81 bx0@@86 bx1@@70 bx2@@54 bx3@@38 bx4@@22 bx5@@6) ($Box o@@94))))) (= (MapType1Select (MapType0Select h0@@40 o@@94) fld@@39) (MapType1Select (MapType0Select h1@@40 o@@94) fld@@39)))) :qid |unknown.0:0| :skolemid |1011| :no-pattern (type o@@94) :no-pattern (type fld@@39) :no-pattern (U_2_int o@@94) :no-pattern (U_2_bool o@@94) :no-pattern (U_2_int fld@@39) :no-pattern (U_2_bool fld@@39) )))) (= (Apply6 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h0@@40 f@@81 bx0@@86 bx1@@70 bx2@@54 bx3@@38 bx4@@22 bx5@@6) (Apply6 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h1@@40 f@@81 bx0@@86 bx1@@70 bx2@@54 bx3@@38 bx4@@22 bx5@@6))) :qid |unknown.0:0| :skolemid |1012| :pattern ( ($HeapSucc h0@@40 h1@@40) (Apply6 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h1@@40 f@@81 bx0@@86 bx1@@70 bx2@@54 bx3@@38 bx4@@22 bx5@@6)) )))
(assert (forall ((t0@@110 T@U) (t1@@86 T@U) (t2@@67 T@U) (t3@@52 T@U) (t4@@37 T@U) (t5@@22 T@U) (t6@@7 T@U) (h0@@41 T@U) (h1@@41 T@U) (f@@82 T@U) (bx0@@87 T@U) (bx1@@71 T@U) (bx2@@55 T@U) (bx3@@39 T@U) (bx4@@23 T@U) (bx5@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@110) TyType) (= (type t1@@86) TyType)) (= (type t2@@67) TyType)) (= (type t3@@52) TyType)) (= (type t4@@37) TyType)) (= (type t5@@22) TyType)) (= (type t6@@7) TyType)) (= (type h0@@41) (MapType0Type refType MapType1Type))) (= (type h1@@41) (MapType0Type refType MapType1Type))) (= (type f@@82) HandleTypeType)) (= (type bx0@@87) BoxType)) (= (type bx1@@71) BoxType)) (= (type bx2@@55) BoxType)) (= (type bx3@@39) BoxType)) (= (type bx4@@23) BoxType)) (= (type bx5@@7) BoxType)) (and (and (and ($HeapSucc h0@@41 h1@@41) (and ($IsGoodHeap h0@@41) ($IsGoodHeap h1@@41))) (and (and (and (and (and (and ($IsBox bx0@@87 t0@@110) ($IsBox bx1@@71 t1@@86)) ($IsBox bx2@@55 t2@@67)) ($IsBox bx3@@39 t3@@52)) ($IsBox bx4@@23 t4@@37)) ($IsBox bx5@@7 t5@@22)) ($Is f@@82 (Tclass._System.___hFunc6 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7)))) (forall ((o@@95 T@U) (fld@@40 T@U) ) (! (let ((a@@125 (FieldTypeInv0 (type fld@@40)))) (=> (and (and (= (type o@@95) refType) (= (type fld@@40) (FieldType a@@125))) (and (not (= o@@95 null)) (U_2_bool (MapType0Select (Reads6 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@87 bx1@@71 bx2@@55 bx3@@39 bx4@@23 bx5@@7) ($Box o@@95))))) (= (MapType1Select (MapType0Select h0@@41 o@@95) fld@@40) (MapType1Select (MapType0Select h1@@41 o@@95) fld@@40)))) :qid |unknown.0:0| :skolemid |1013| :no-pattern (type o@@95) :no-pattern (type fld@@40) :no-pattern (U_2_int o@@95) :no-pattern (U_2_bool o@@95) :no-pattern (U_2_int fld@@40) :no-pattern (U_2_bool fld@@40) )))) (= (Apply6 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h0@@41 f@@82 bx0@@87 bx1@@71 bx2@@55 bx3@@39 bx4@@23 bx5@@7) (Apply6 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@87 bx1@@71 bx2@@55 bx3@@39 bx4@@23 bx5@@7))) :qid |unknown.0:0| :skolemid |1014| :pattern ( ($HeapSucc h0@@41 h1@@41) (Apply6 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@87 bx1@@71 bx2@@55 bx3@@39 bx4@@23 bx5@@7)) )))
(assert (forall ((t0@@111 T@U) (t1@@87 T@U) (t2@@68 T@U) (t3@@53 T@U) (t4@@38 T@U) (t5@@23 T@U) (t6@@8 T@U) (heap@@34 T@U) (f@@83 T@U) (bx0@@88 T@U) (bx1@@72 T@U) (bx2@@56 T@U) (bx3@@40 T@U) (bx4@@24 T@U) (bx5@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@111) TyType) (= (type t1@@87) TyType)) (= (type t2@@68) TyType)) (= (type t3@@53) TyType)) (= (type t4@@38) TyType)) (= (type t5@@23) TyType)) (= (type t6@@8) TyType)) (= (type heap@@34) (MapType0Type refType MapType1Type))) (= (type f@@83) HandleTypeType)) (= (type bx0@@88) BoxType)) (= (type bx1@@72) BoxType)) (= (type bx2@@56) BoxType)) (= (type bx3@@40) BoxType)) (= (type bx4@@24) BoxType)) (= (type bx5@@8) BoxType)) (and ($IsGoodHeap heap@@34) (and (and (and (and (and (and ($IsBox bx0@@88 t0@@111) ($IsBox bx1@@72 t1@@87)) ($IsBox bx2@@56 t2@@68)) ($IsBox bx3@@40 t3@@53)) ($IsBox bx4@@24 t4@@38)) ($IsBox bx5@@8 t5@@23)) ($Is f@@83 (Tclass._System.___hFunc6 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8))))) (and (=> (|Set#Equal| (Reads6 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 $OneHeap f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 heap@@34 f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads6 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 heap@@34 f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 $OneHeap f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1015| :pattern ( (Reads6 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 $OneHeap f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@8) ($IsGoodHeap heap@@34)) :pattern ( (Reads6 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 heap@@34 f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@8)) )))
(assert (forall ((t0@@112 T@U) (t1@@88 T@U) (t2@@69 T@U) (t3@@54 T@U) (t4@@39 T@U) (t5@@24 T@U) (t6@@9 T@U) (heap@@35 T@U) (f@@84 T@U) (bx0@@89 T@U) (bx1@@73 T@U) (bx2@@57 T@U) (bx3@@41 T@U) (bx4@@25 T@U) (bx5@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@112) TyType) (= (type t1@@88) TyType)) (= (type t2@@69) TyType)) (= (type t3@@54) TyType)) (= (type t4@@39) TyType)) (= (type t5@@24) TyType)) (= (type t6@@9) TyType)) (= (type heap@@35) (MapType0Type refType MapType1Type))) (= (type f@@84) HandleTypeType)) (= (type bx0@@89) BoxType)) (= (type bx1@@73) BoxType)) (= (type bx2@@57) BoxType)) (= (type bx3@@41) BoxType)) (= (type bx4@@25) BoxType)) (= (type bx5@@9) BoxType)) (and (and ($IsGoodHeap heap@@35) (and (and (and (and (and (and ($IsBox bx0@@89 t0@@112) ($IsBox bx1@@73 t1@@88)) ($IsBox bx2@@57 t2@@69)) ($IsBox bx3@@41 t3@@54)) ($IsBox bx4@@25 t4@@39)) ($IsBox bx5@@9 t5@@24)) ($Is f@@84 (Tclass._System.___hFunc6 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9)))) (|Set#Equal| (Reads6 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@9) (|Set#Empty| BoxType)))) (and (=> (Requires6 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@9) (Requires6 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 heap@@35 f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@9)) (=> (Requires6 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 heap@@35 f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@9) (Requires6 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@9)))) :qid |unknown.0:0| :skolemid |1016| :pattern ( (Requires6 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@9) ($IsGoodHeap heap@@35)) :pattern ( (Requires6 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 heap@@35 f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@9)) )))
(assert (forall ((f@@85 T@U) (t0@@113 T@U) (t1@@89 T@U) (t2@@70 T@U) (t3@@55 T@U) (t4@@40 T@U) (t5@@25 T@U) (t6@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@85) HandleTypeType) (= (type t0@@113) TyType)) (= (type t1@@89) TyType)) (= (type t2@@70) TyType)) (= (type t3@@55) TyType)) (= (type t4@@40) TyType)) (= (type t5@@25) TyType)) (= (type t6@@10) TyType)) (and (=> ($Is f@@85 (Tclass._System.___hFunc6 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10)) (forall ((h@@65 T@U) (bx0@@90 T@U) (bx1@@74 T@U) (bx2@@58 T@U) (bx3@@42 T@U) (bx4@@26 T@U) (bx5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@65) (MapType0Type refType MapType1Type)) (= (type bx0@@90) BoxType)) (= (type bx1@@74) BoxType)) (= (type bx2@@58) BoxType)) (= (type bx3@@42) BoxType)) (= (type bx4@@26) BoxType)) (= (type bx5@@10) BoxType)) (and (and ($IsGoodHeap h@@65) (and (and (and (and (and ($IsBox bx0@@90 t0@@113) ($IsBox bx1@@74 t1@@89)) ($IsBox bx2@@58 t2@@70)) ($IsBox bx3@@42 t3@@55)) ($IsBox bx4@@26 t4@@40)) ($IsBox bx5@@10 t5@@25))) (Requires6 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@65 f@@85 bx0@@90 bx1@@74 bx2@@58 bx3@@42 bx4@@26 bx5@@10))) ($IsBox (Apply6 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@65 f@@85 bx0@@90 bx1@@74 bx2@@58 bx3@@42 bx4@@26 bx5@@10) t6@@10)) :qid |DafnyPre.521:12| :skolemid |1017| :pattern ( (Apply6 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@65 f@@85 bx0@@90 bx1@@74 bx2@@58 bx3@@42 bx4@@26 bx5@@10)) ))) (=> (forall ((h@@66 T@U) (bx0@@91 T@U) (bx1@@75 T@U) (bx2@@59 T@U) (bx3@@43 T@U) (bx4@@27 T@U) (bx5@@11 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@66) (MapType0Type refType MapType1Type)) (= (type bx0@@91) BoxType)) (= (type bx1@@75) BoxType)) (= (type bx2@@59) BoxType)) (= (type bx3@@43) BoxType)) (= (type bx4@@27) BoxType)) (= (type bx5@@11) BoxType)) (and (and ($IsGoodHeap h@@66) (and (and (and (and (and ($IsBox bx0@@91 t0@@113) ($IsBox bx1@@75 t1@@89)) ($IsBox bx2@@59 t2@@70)) ($IsBox bx3@@43 t3@@55)) ($IsBox bx4@@27 t4@@40)) ($IsBox bx5@@11 t5@@25))) (Requires6 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@66 f@@85 bx0@@91 bx1@@75 bx2@@59 bx3@@43 bx4@@27 bx5@@11))) ($IsBox (Apply6 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@66 f@@85 bx0@@91 bx1@@75 bx2@@59 bx3@@43 bx4@@27 bx5@@11) t6@@10)) :qid |DafnyPre.521:12| :skolemid |1017| :pattern ( (Apply6 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@66 f@@85 bx0@@91 bx1@@75 bx2@@59 bx3@@43 bx4@@27 bx5@@11)) )) ($Is f@@85 (Tclass._System.___hFunc6 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10))))) :qid |unknown.0:0| :skolemid |1018| :pattern ( ($Is f@@85 (Tclass._System.___hFunc6 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10))) )))
(assert (forall ((f@@86 T@U) (t0@@114 T@U) (t1@@90 T@U) (t2@@71 T@U) (t3@@56 T@U) (t4@@41 T@U) (t5@@26 T@U) (t6@@11 T@U) (u0@@5 T@U) (u1@@4 T@U) (u2@@3 T@U) (u3@@2 T@U) (u4@@1 T@U) (u5@@0 T@U) (u6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@86) HandleTypeType) (= (type t0@@114) TyType)) (= (type t1@@90) TyType)) (= (type t2@@71) TyType)) (= (type t3@@56) TyType)) (= (type t4@@41) TyType)) (= (type t5@@26) TyType)) (= (type t6@@11) TyType)) (= (type u0@@5) TyType)) (= (type u1@@4) TyType)) (= (type u2@@3) TyType)) (= (type u3@@2) TyType)) (= (type u4@@1) TyType)) (= (type u5@@0) TyType)) (= (type u6) TyType)) (and (and (and (and (and (and (and ($Is f@@86 (Tclass._System.___hFunc6 t0@@114 t1@@90 t2@@71 t3@@56 t4@@41 t5@@26 t6@@11)) (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 u0@@5)) ($IsBox bx@@88 t0@@114)) :qid |unknown.0:0| :skolemid |1019| :pattern ( ($IsBox bx@@88 u0@@5)) :pattern ( ($IsBox bx@@88 t0@@114)) ))) (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 u1@@4)) ($IsBox bx@@89 t1@@90)) :qid |unknown.0:0| :skolemid |1020| :pattern ( ($IsBox bx@@89 u1@@4)) :pattern ( ($IsBox bx@@89 t1@@90)) ))) (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 u2@@3)) ($IsBox bx@@90 t2@@71)) :qid |unknown.0:0| :skolemid |1021| :pattern ( ($IsBox bx@@90 u2@@3)) :pattern ( ($IsBox bx@@90 t2@@71)) ))) (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 u3@@2)) ($IsBox bx@@91 t3@@56)) :qid |unknown.0:0| :skolemid |1022| :pattern ( ($IsBox bx@@91 u3@@2)) :pattern ( ($IsBox bx@@91 t3@@56)) ))) (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 u4@@1)) ($IsBox bx@@92 t4@@41)) :qid |unknown.0:0| :skolemid |1023| :pattern ( ($IsBox bx@@92 u4@@1)) :pattern ( ($IsBox bx@@92 t4@@41)) ))) (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 u5@@0)) ($IsBox bx@@93 t5@@26)) :qid |unknown.0:0| :skolemid |1024| :pattern ( ($IsBox bx@@93 u5@@0)) :pattern ( ($IsBox bx@@93 t5@@26)) ))) (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 t6@@11)) ($IsBox bx@@94 u6)) :qid |unknown.0:0| :skolemid |1025| :pattern ( ($IsBox bx@@94 t6@@11)) :pattern ( ($IsBox bx@@94 u6)) )))) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6))) :qid |unknown.0:0| :skolemid |1026| :pattern ( ($Is f@@86 (Tclass._System.___hFunc6 t0@@114 t1@@90 t2@@71 t3@@56 t4@@41 t5@@26 t6@@11)) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6))) )))
(assert (forall ((f@@87 T@U) (t0@@115 T@U) (t1@@91 T@U) (t2@@72 T@U) (t3@@57 T@U) (t4@@42 T@U) (t5@@27 T@U) (t6@@12 T@U) (h@@67 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@87) HandleTypeType) (= (type t0@@115) TyType)) (= (type t1@@91) TyType)) (= (type t2@@72) TyType)) (= (type t3@@57) TyType)) (= (type t4@@42) TyType)) (= (type t5@@27) TyType)) (= (type t6@@12) TyType)) (= (type h@@67) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@67)) (and (=> ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12) h@@67) (forall ((bx0@@92 T@U) (bx1@@76 T@U) (bx2@@60 T@U) (bx3@@44 T@U) (bx4@@28 T@U) (bx5@@12 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@92) BoxType) (= (type bx1@@76) BoxType)) (= (type bx2@@60) BoxType)) (= (type bx3@@44) BoxType)) (= (type bx4@@28) BoxType)) (= (type bx5@@12) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@92 t0@@115) ($IsAllocBox bx0@@92 t0@@115 h@@67)) (and ($IsBox bx1@@76 t1@@91) ($IsAllocBox bx1@@76 t1@@91 h@@67))) (and ($IsBox bx2@@60 t2@@72) ($IsAllocBox bx2@@60 t2@@72 h@@67))) (and ($IsBox bx3@@44 t3@@57) ($IsAllocBox bx3@@44 t3@@57 h@@67))) (and ($IsBox bx4@@28 t4@@42) ($IsAllocBox bx4@@28 t4@@42 h@@67))) (and ($IsBox bx5@@12 t5@@27) ($IsAllocBox bx5@@12 t5@@27 h@@67))) (Requires6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@12)) (forall ((r@@39 T@U) ) (!  (=> (= (type r@@39) refType) (=> (and (not (= r@@39 null)) (U_2_bool (MapType0Select (Reads6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@12) ($Box r@@39)))) (U_2_bool (MapType1Select (MapType0Select h@@67 r@@39) alloc)))) :qid |unknown.0:0| :skolemid |1027| :pattern ( (MapType0Select (Reads6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@12) ($Box r@@39))) )))) :qid |unknown.0:0| :skolemid |1028| :pattern ( (Apply6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@12)) :pattern ( (Reads6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@12)) ))) (=> (forall ((bx0@@93 T@U) (bx1@@77 T@U) (bx2@@61 T@U) (bx3@@45 T@U) (bx4@@29 T@U) (bx5@@13 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@93) BoxType) (= (type bx1@@77) BoxType)) (= (type bx2@@61) BoxType)) (= (type bx3@@45) BoxType)) (= (type bx4@@29) BoxType)) (= (type bx5@@13) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@93 t0@@115) ($IsAllocBox bx0@@93 t0@@115 h@@67)) (and ($IsBox bx1@@77 t1@@91) ($IsAllocBox bx1@@77 t1@@91 h@@67))) (and ($IsBox bx2@@61 t2@@72) ($IsAllocBox bx2@@61 t2@@72 h@@67))) (and ($IsBox bx3@@45 t3@@57) ($IsAllocBox bx3@@45 t3@@57 h@@67))) (and ($IsBox bx4@@29 t4@@42) ($IsAllocBox bx4@@29 t4@@42 h@@67))) (and ($IsBox bx5@@13 t5@@27) ($IsAllocBox bx5@@13 t5@@27 h@@67))) (Requires6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@13)) (forall ((r@@40 T@U) ) (!  (=> (= (type r@@40) refType) (=> (and (not (= r@@40 null)) (U_2_bool (MapType0Select (Reads6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@13) ($Box r@@40)))) (U_2_bool (MapType1Select (MapType0Select h@@67 r@@40) alloc)))) :qid |unknown.0:0| :skolemid |1027| :pattern ( (MapType0Select (Reads6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@13) ($Box r@@40))) )))) :qid |unknown.0:0| :skolemid |1028| :pattern ( (Apply6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@13)) :pattern ( (Reads6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@13)) )) ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12) h@@67)))) :qid |unknown.0:0| :skolemid |1029| :pattern ( ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12) h@@67)) )))
(assert (forall ((f@@88 T@U) (t0@@116 T@U) (t1@@92 T@U) (t2@@73 T@U) (t3@@58 T@U) (t4@@43 T@U) (t5@@28 T@U) (t6@@13 T@U) (h@@68 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@88) HandleTypeType) (= (type t0@@116) TyType)) (= (type t1@@92) TyType)) (= (type t2@@73) TyType)) (= (type t3@@58) TyType)) (= (type t4@@43) TyType)) (= (type t5@@28) TyType)) (= (type t6@@13) TyType)) (= (type h@@68) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@68) ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13) h@@68))) (forall ((bx0@@94 T@U) (bx1@@78 T@U) (bx2@@62 T@U) (bx3@@46 T@U) (bx4@@30 T@U) (bx5@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@94) BoxType) (= (type bx1@@78) BoxType)) (= (type bx2@@62) BoxType)) (= (type bx3@@46) BoxType)) (= (type bx4@@30) BoxType)) (= (type bx5@@14) BoxType)) (=> (and (and (and (and (and (and ($IsAllocBox bx0@@94 t0@@116 h@@68) ($IsAllocBox bx1@@78 t1@@92 h@@68)) ($IsAllocBox bx2@@62 t2@@73 h@@68)) ($IsAllocBox bx3@@46 t3@@58 h@@68)) ($IsAllocBox bx4@@30 t4@@43 h@@68)) ($IsAllocBox bx5@@14 t5@@28 h@@68)) (Requires6 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@68 f@@88 bx0@@94 bx1@@78 bx2@@62 bx3@@46 bx4@@30 bx5@@14)) ($IsAllocBox (Apply6 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@68 f@@88 bx0@@94 bx1@@78 bx2@@62 bx3@@46 bx4@@30 bx5@@14) t6@@13 h@@68))) :qid |unknown.0:0| :skolemid |1030| :pattern ( (Apply6 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@68 f@@88 bx0@@94 bx1@@78 bx2@@62 bx3@@46 bx4@@30 bx5@@14)) ))) :qid |unknown.0:0| :skolemid |1031| :pattern ( ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13) h@@68)) )))
(assert (forall ((arg0@@273 T@U) (arg1@@136 T@U) (arg2@@92 T@U) (arg3@@68 T@U) (arg4@@57 T@U) (arg5@@44 T@U) (arg6@@32 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6 arg0@@273 arg1@@136 arg2@@92 arg3@@68 arg4@@57 arg5@@44 arg6@@32)) TyType) :qid |funType:Tclass._System.___hPartialFunc6| :pattern ( (Tclass._System.___hPartialFunc6 arg0@@273 arg1@@136 arg2@@92 arg3@@68 arg4@@57 arg5@@44 arg6@@32)) )))
(assert (forall ((|#$T0@@127| T@U) (|#$T1@@111| T@U) (|#$T2@@83| T@U) (|#$T3@@61| T@U) (|#$T4@@36| T@U) (|#$T5@@8| T@U) (|#$R@@131| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@127|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$T3@@61|) TyType)) (= (type |#$T4@@36|) TyType)) (= (type |#$T5@@8|) TyType)) (= (type |#$R@@131|) TyType)) (= (Tag (Tclass._System.___hPartialFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@131|)) Tagclass._System.___hPartialFunc6)) :qid |unknown.0:0| :skolemid |1032| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@131|)) )))
(assert (forall ((arg0@@274 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_0 arg0@@274)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_0| :pattern ( (Tclass._System.___hPartialFunc6_0 arg0@@274)) )))
(assert (forall ((|#$T0@@128| T@U) (|#$T1@@112| T@U) (|#$T2@@84| T@U) (|#$T3@@62| T@U) (|#$T4@@37| T@U) (|#$T5@@9| T@U) (|#$R@@132| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@128|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$T3@@62|) TyType)) (= (type |#$T4@@37|) TyType)) (= (type |#$T5@@9|) TyType)) (= (type |#$R@@132|) TyType)) (= (Tclass._System.___hPartialFunc6_0 (Tclass._System.___hPartialFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@84| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@132|)) |#$T0@@128|)) :qid |unknown.0:0| :skolemid |1033| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@84| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@132|)) )))
(assert (forall ((arg0@@275 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_1 arg0@@275)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_1| :pattern ( (Tclass._System.___hPartialFunc6_1 arg0@@275)) )))
(assert (forall ((|#$T0@@129| T@U) (|#$T1@@113| T@U) (|#$T2@@85| T@U) (|#$T3@@63| T@U) (|#$T4@@38| T@U) (|#$T5@@10| T@U) (|#$R@@133| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@129|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$T3@@63|) TyType)) (= (type |#$T4@@38|) TyType)) (= (type |#$T5@@10|) TyType)) (= (type |#$R@@133|) TyType)) (= (Tclass._System.___hPartialFunc6_1 (Tclass._System.___hPartialFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@85| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@133|)) |#$T1@@113|)) :qid |unknown.0:0| :skolemid |1034| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@85| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@133|)) )))
(assert (forall ((arg0@@276 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_2 arg0@@276)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_2| :pattern ( (Tclass._System.___hPartialFunc6_2 arg0@@276)) )))
(assert (forall ((|#$T0@@130| T@U) (|#$T1@@114| T@U) (|#$T2@@86| T@U) (|#$T3@@64| T@U) (|#$T4@@39| T@U) (|#$T5@@11| T@U) (|#$R@@134| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@130|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$T3@@64|) TyType)) (= (type |#$T4@@39|) TyType)) (= (type |#$T5@@11|) TyType)) (= (type |#$R@@134|) TyType)) (= (Tclass._System.___hPartialFunc6_2 (Tclass._System.___hPartialFunc6 |#$T0@@130| |#$T1@@114| |#$T2@@86| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@134|)) |#$T2@@86|)) :qid |unknown.0:0| :skolemid |1035| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@130| |#$T1@@114| |#$T2@@86| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@134|)) )))
(assert (forall ((arg0@@277 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_3 arg0@@277)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_3| :pattern ( (Tclass._System.___hPartialFunc6_3 arg0@@277)) )))
(assert (forall ((|#$T0@@131| T@U) (|#$T1@@115| T@U) (|#$T2@@87| T@U) (|#$T3@@65| T@U) (|#$T4@@40| T@U) (|#$T5@@12| T@U) (|#$R@@135| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@131|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$T3@@65|) TyType)) (= (type |#$T4@@40|) TyType)) (= (type |#$T5@@12|) TyType)) (= (type |#$R@@135|) TyType)) (= (Tclass._System.___hPartialFunc6_3 (Tclass._System.___hPartialFunc6 |#$T0@@131| |#$T1@@115| |#$T2@@87| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@135|)) |#$T3@@65|)) :qid |unknown.0:0| :skolemid |1036| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@131| |#$T1@@115| |#$T2@@87| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@135|)) )))
(assert (forall ((arg0@@278 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_4 arg0@@278)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_4| :pattern ( (Tclass._System.___hPartialFunc6_4 arg0@@278)) )))
(assert (forall ((|#$T0@@132| T@U) (|#$T1@@116| T@U) (|#$T2@@88| T@U) (|#$T3@@66| T@U) (|#$T4@@41| T@U) (|#$T5@@13| T@U) (|#$R@@136| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@132|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$T3@@66|) TyType)) (= (type |#$T4@@41|) TyType)) (= (type |#$T5@@13|) TyType)) (= (type |#$R@@136|) TyType)) (= (Tclass._System.___hPartialFunc6_4 (Tclass._System.___hPartialFunc6 |#$T0@@132| |#$T1@@116| |#$T2@@88| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@136|)) |#$T4@@41|)) :qid |unknown.0:0| :skolemid |1037| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@132| |#$T1@@116| |#$T2@@88| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@136|)) )))
(assert (forall ((arg0@@279 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_5 arg0@@279)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_5| :pattern ( (Tclass._System.___hPartialFunc6_5 arg0@@279)) )))
(assert (forall ((|#$T0@@133| T@U) (|#$T1@@117| T@U) (|#$T2@@89| T@U) (|#$T3@@67| T@U) (|#$T4@@42| T@U) (|#$T5@@14| T@U) (|#$R@@137| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@133|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$T3@@67|) TyType)) (= (type |#$T4@@42|) TyType)) (= (type |#$T5@@14|) TyType)) (= (type |#$R@@137|) TyType)) (= (Tclass._System.___hPartialFunc6_5 (Tclass._System.___hPartialFunc6 |#$T0@@133| |#$T1@@117| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@137|)) |#$T5@@14|)) :qid |unknown.0:0| :skolemid |1038| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@133| |#$T1@@117| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@137|)) )))
(assert (forall ((arg0@@280 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_6 arg0@@280)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_6| :pattern ( (Tclass._System.___hPartialFunc6_6 arg0@@280)) )))
(assert (forall ((|#$T0@@134| T@U) (|#$T1@@118| T@U) (|#$T2@@90| T@U) (|#$T3@@68| T@U) (|#$T4@@43| T@U) (|#$T5@@15| T@U) (|#$R@@138| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@134|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$T2@@90|) TyType)) (= (type |#$T3@@68|) TyType)) (= (type |#$T4@@43|) TyType)) (= (type |#$T5@@15|) TyType)) (= (type |#$R@@138|) TyType)) (= (Tclass._System.___hPartialFunc6_6 (Tclass._System.___hPartialFunc6 |#$T0@@134| |#$T1@@118| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@138|)) |#$R@@138|)) :qid |unknown.0:0| :skolemid |1039| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@134| |#$T1@@118| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@138|)) )))
(assert (forall ((|#$T0@@135| T@U) (|#$T1@@119| T@U) (|#$T2@@91| T@U) (|#$T3@@69| T@U) (|#$T4@@44| T@U) (|#$T5@@16| T@U) (|#$R@@139| T@U) (bx@@95 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@135|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$T2@@91|) TyType)) (= (type |#$T3@@69|) TyType)) (= (type |#$T4@@44|) TyType)) (= (type |#$T5@@16|) TyType)) (= (type |#$R@@139|) TyType)) (= (type bx@@95) BoxType)) ($IsBox bx@@95 (Tclass._System.___hPartialFunc6 |#$T0@@135| |#$T1@@119| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@139|))) (and (= ($Box ($Unbox HandleTypeType bx@@95)) bx@@95) ($Is ($Unbox HandleTypeType bx@@95) (Tclass._System.___hPartialFunc6 |#$T0@@135| |#$T1@@119| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@139|)))) :qid |unknown.0:0| :skolemid |1040| :pattern ( ($IsBox bx@@95 (Tclass._System.___hPartialFunc6 |#$T0@@135| |#$T1@@119| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@139|))) )))
(assert (forall ((|#$T0@@136| T@U) (|#$T1@@120| T@U) (|#$T2@@92| T@U) (|#$T3@@70| T@U) (|#$T4@@45| T@U) (|#$T5@@17| T@U) (|#$R@@140| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@136|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$T2@@92|) TyType)) (= (type |#$T3@@70|) TyType)) (= (type |#$T4@@45|) TyType)) (= (type |#$T5@@17|) TyType)) (= (type |#$R@@140|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (and (=> ($Is |f#0@@23| (Tclass._System.___hPartialFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|)) (and ($Is |f#0@@23| (Tclass._System.___hFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|)) (forall ((|x0#0@@19| T@U) (|x1#0@@15| T@U) (|x2#0@@11| T@U) (|x3#0@@7| T@U) (|x4#0@@3| T@U) (|x5#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@19|) BoxType) (= (type |x1#0@@15|) BoxType)) (= (type |x2#0@@11|) BoxType)) (= (type |x3#0@@7|) BoxType)) (= (type |x4#0@@3|) BoxType)) (= (type |x5#0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@19| |#$T0@@136|) ($IsBox |x1#0@@15| |#$T1@@120|)) ($IsBox |x2#0@@11| |#$T2@@92|)) ($IsBox |x3#0@@7| |#$T3@@70|)) ($IsBox |x4#0@@3| |#$T4@@45|)) ($IsBox |x5#0| |#$T5@@17|))) (|Set#Equal| (Reads6 |#$T0@@136| |#$T1@@120| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140| $OneHeap |f#0@@23| |x0#0@@19| |x1#0@@15| |x2#0@@11| |x3#0@@7| |x4#0@@3| |x5#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1041| :no-pattern (type |x0#0@@19|) :no-pattern (type |x1#0@@15|) :no-pattern (type |x2#0@@11|) :no-pattern (type |x3#0@@7|) :no-pattern (type |x4#0@@3|) :no-pattern (type |x5#0|) :no-pattern (U_2_int |x0#0@@19|) :no-pattern (U_2_bool |x0#0@@19|) :no-pattern (U_2_int |x1#0@@15|) :no-pattern (U_2_bool |x1#0@@15|) :no-pattern (U_2_int |x2#0@@11|) :no-pattern (U_2_bool |x2#0@@11|) :no-pattern (U_2_int |x3#0@@7|) :no-pattern (U_2_bool |x3#0@@7|) :no-pattern (U_2_int |x4#0@@3|) :no-pattern (U_2_bool |x4#0@@3|) :no-pattern (U_2_int |x5#0|) :no-pattern (U_2_bool |x5#0|) )))) (=> (and ($Is |f#0@@23| (Tclass._System.___hFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|)) (forall ((|x0#0@@20| T@U) (|x1#0@@16| T@U) (|x2#0@@12| T@U) (|x3#0@@8| T@U) (|x4#0@@4| T@U) (|x5#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@20|) BoxType) (= (type |x1#0@@16|) BoxType)) (= (type |x2#0@@12|) BoxType)) (= (type |x3#0@@8|) BoxType)) (= (type |x4#0@@4|) BoxType)) (= (type |x5#0@@0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@20| |#$T0@@136|) ($IsBox |x1#0@@16| |#$T1@@120|)) ($IsBox |x2#0@@12| |#$T2@@92|)) ($IsBox |x3#0@@8| |#$T3@@70|)) ($IsBox |x4#0@@4| |#$T4@@45|)) ($IsBox |x5#0@@0| |#$T5@@17|))) (|Set#Equal| (Reads6 |#$T0@@136| |#$T1@@120| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140| $OneHeap |f#0@@23| |x0#0@@20| |x1#0@@16| |x2#0@@12| |x3#0@@8| |x4#0@@4| |x5#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1041| :no-pattern (type |x0#0@@20|) :no-pattern (type |x1#0@@16|) :no-pattern (type |x2#0@@12|) :no-pattern (type |x3#0@@8|) :no-pattern (type |x4#0@@4|) :no-pattern (type |x5#0@@0|) :no-pattern (U_2_int |x0#0@@20|) :no-pattern (U_2_bool |x0#0@@20|) :no-pattern (U_2_int |x1#0@@16|) :no-pattern (U_2_bool |x1#0@@16|) :no-pattern (U_2_int |x2#0@@12|) :no-pattern (U_2_bool |x2#0@@12|) :no-pattern (U_2_int |x3#0@@8|) :no-pattern (U_2_bool |x3#0@@8|) :no-pattern (U_2_int |x4#0@@4|) :no-pattern (U_2_bool |x4#0@@4|) :no-pattern (U_2_int |x5#0@@0|) :no-pattern (U_2_bool |x5#0@@0|) ))) ($Is |f#0@@23| (Tclass._System.___hPartialFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|))))) :qid |unknown.0:0| :skolemid |1042| :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|))) )))
(assert (forall ((|#$T0@@137| T@U) (|#$T1@@121| T@U) (|#$T2@@93| T@U) (|#$T3@@71| T@U) (|#$T4@@46| T@U) (|#$T5@@18| T@U) (|#$R@@141| T@U) (|f#0@@24| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@137|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$T2@@93|) TyType)) (= (type |#$T3@@71|) TyType)) (= (type |#$T4@@46|) TyType)) (= (type |#$T5@@18|) TyType)) (= (type |#$R@@141|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@23) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@23)) (=> ($IsAlloc |f#0@@24| (Tclass._System.___hFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@23) ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@23)))) :qid |unknown.0:0| :skolemid |1043| :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@23)) )))
(assert (forall ((arg0@@281 T@U) (arg1@@137 T@U) (arg2@@93 T@U) (arg3@@69 T@U) (arg4@@58 T@U) (arg5@@45 T@U) (arg6@@33 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6 arg0@@281 arg1@@137 arg2@@93 arg3@@69 arg4@@58 arg5@@45 arg6@@33)) TyType) :qid |funType:Tclass._System.___hTotalFunc6| :pattern ( (Tclass._System.___hTotalFunc6 arg0@@281 arg1@@137 arg2@@93 arg3@@69 arg4@@58 arg5@@45 arg6@@33)) )))
(assert (forall ((|#$T0@@138| T@U) (|#$T1@@122| T@U) (|#$T2@@94| T@U) (|#$T3@@72| T@U) (|#$T4@@47| T@U) (|#$T5@@19| T@U) (|#$R@@142| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@138|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$T2@@94|) TyType)) (= (type |#$T3@@72|) TyType)) (= (type |#$T4@@47|) TyType)) (= (type |#$T5@@19|) TyType)) (= (type |#$R@@142|) TyType)) (= (Tag (Tclass._System.___hTotalFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@142|)) Tagclass._System.___hTotalFunc6)) :qid |unknown.0:0| :skolemid |1044| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@142|)) )))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_0 arg0@@282)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_0| :pattern ( (Tclass._System.___hTotalFunc6_0 arg0@@282)) )))
(assert (forall ((|#$T0@@139| T@U) (|#$T1@@123| T@U) (|#$T2@@95| T@U) (|#$T3@@73| T@U) (|#$T4@@48| T@U) (|#$T5@@20| T@U) (|#$R@@143| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@139|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$T2@@95|) TyType)) (= (type |#$T3@@73|) TyType)) (= (type |#$T4@@48|) TyType)) (= (type |#$T5@@20|) TyType)) (= (type |#$R@@143|) TyType)) (= (Tclass._System.___hTotalFunc6_0 (Tclass._System.___hTotalFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@143|)) |#$T0@@139|)) :qid |unknown.0:0| :skolemid |1045| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@143|)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_1 arg0@@283)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_1| :pattern ( (Tclass._System.___hTotalFunc6_1 arg0@@283)) )))
(assert (forall ((|#$T0@@140| T@U) (|#$T1@@124| T@U) (|#$T2@@96| T@U) (|#$T3@@74| T@U) (|#$T4@@49| T@U) (|#$T5@@21| T@U) (|#$R@@144| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@140|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$T2@@96|) TyType)) (= (type |#$T3@@74|) TyType)) (= (type |#$T4@@49|) TyType)) (= (type |#$T5@@21|) TyType)) (= (type |#$R@@144|) TyType)) (= (Tclass._System.___hTotalFunc6_1 (Tclass._System.___hTotalFunc6 |#$T0@@140| |#$T1@@124| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@144|)) |#$T1@@124|)) :qid |unknown.0:0| :skolemid |1046| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@140| |#$T1@@124| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@144|)) )))
(assert (forall ((arg0@@284 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_2 arg0@@284)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_2| :pattern ( (Tclass._System.___hTotalFunc6_2 arg0@@284)) )))
(assert (forall ((|#$T0@@141| T@U) (|#$T1@@125| T@U) (|#$T2@@97| T@U) (|#$T3@@75| T@U) (|#$T4@@50| T@U) (|#$T5@@22| T@U) (|#$R@@145| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@141|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$T2@@97|) TyType)) (= (type |#$T3@@75|) TyType)) (= (type |#$T4@@50|) TyType)) (= (type |#$T5@@22|) TyType)) (= (type |#$R@@145|) TyType)) (= (Tclass._System.___hTotalFunc6_2 (Tclass._System.___hTotalFunc6 |#$T0@@141| |#$T1@@125| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@145|)) |#$T2@@97|)) :qid |unknown.0:0| :skolemid |1047| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@141| |#$T1@@125| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@145|)) )))
(assert (forall ((arg0@@285 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_3 arg0@@285)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_3| :pattern ( (Tclass._System.___hTotalFunc6_3 arg0@@285)) )))
(assert (forall ((|#$T0@@142| T@U) (|#$T1@@126| T@U) (|#$T2@@98| T@U) (|#$T3@@76| T@U) (|#$T4@@51| T@U) (|#$T5@@23| T@U) (|#$R@@146| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@142|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$T2@@98|) TyType)) (= (type |#$T3@@76|) TyType)) (= (type |#$T4@@51|) TyType)) (= (type |#$T5@@23|) TyType)) (= (type |#$R@@146|) TyType)) (= (Tclass._System.___hTotalFunc6_3 (Tclass._System.___hTotalFunc6 |#$T0@@142| |#$T1@@126| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@146|)) |#$T3@@76|)) :qid |unknown.0:0| :skolemid |1048| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@142| |#$T1@@126| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@146|)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_4 arg0@@286)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_4| :pattern ( (Tclass._System.___hTotalFunc6_4 arg0@@286)) )))
(assert (forall ((|#$T0@@143| T@U) (|#$T1@@127| T@U) (|#$T2@@99| T@U) (|#$T3@@77| T@U) (|#$T4@@52| T@U) (|#$T5@@24| T@U) (|#$R@@147| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@143|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$T2@@99|) TyType)) (= (type |#$T3@@77|) TyType)) (= (type |#$T4@@52|) TyType)) (= (type |#$T5@@24|) TyType)) (= (type |#$R@@147|) TyType)) (= (Tclass._System.___hTotalFunc6_4 (Tclass._System.___hTotalFunc6 |#$T0@@143| |#$T1@@127| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@147|)) |#$T4@@52|)) :qid |unknown.0:0| :skolemid |1049| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@143| |#$T1@@127| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@147|)) )))
(assert (forall ((arg0@@287 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_5 arg0@@287)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_5| :pattern ( (Tclass._System.___hTotalFunc6_5 arg0@@287)) )))
(assert (forall ((|#$T0@@144| T@U) (|#$T1@@128| T@U) (|#$T2@@100| T@U) (|#$T3@@78| T@U) (|#$T4@@53| T@U) (|#$T5@@25| T@U) (|#$R@@148| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@144|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$T2@@100|) TyType)) (= (type |#$T3@@78|) TyType)) (= (type |#$T4@@53|) TyType)) (= (type |#$T5@@25|) TyType)) (= (type |#$R@@148|) TyType)) (= (Tclass._System.___hTotalFunc6_5 (Tclass._System.___hTotalFunc6 |#$T0@@144| |#$T1@@128| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@148|)) |#$T5@@25|)) :qid |unknown.0:0| :skolemid |1050| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@144| |#$T1@@128| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@148|)) )))
(assert (forall ((arg0@@288 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_6 arg0@@288)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_6| :pattern ( (Tclass._System.___hTotalFunc6_6 arg0@@288)) )))
(assert (forall ((|#$T0@@145| T@U) (|#$T1@@129| T@U) (|#$T2@@101| T@U) (|#$T3@@79| T@U) (|#$T4@@54| T@U) (|#$T5@@26| T@U) (|#$R@@149| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@145|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$T2@@101|) TyType)) (= (type |#$T3@@79|) TyType)) (= (type |#$T4@@54|) TyType)) (= (type |#$T5@@26|) TyType)) (= (type |#$R@@149|) TyType)) (= (Tclass._System.___hTotalFunc6_6 (Tclass._System.___hTotalFunc6 |#$T0@@145| |#$T1@@129| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@149|)) |#$R@@149|)) :qid |unknown.0:0| :skolemid |1051| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@145| |#$T1@@129| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@149|)) )))
(assert (forall ((|#$T0@@146| T@U) (|#$T1@@130| T@U) (|#$T2@@102| T@U) (|#$T3@@80| T@U) (|#$T4@@55| T@U) (|#$T5@@27| T@U) (|#$R@@150| T@U) (bx@@96 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@146|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$T2@@102|) TyType)) (= (type |#$T3@@80|) TyType)) (= (type |#$T4@@55|) TyType)) (= (type |#$T5@@27|) TyType)) (= (type |#$R@@150|) TyType)) (= (type bx@@96) BoxType)) ($IsBox bx@@96 (Tclass._System.___hTotalFunc6 |#$T0@@146| |#$T1@@130| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@150|))) (and (= ($Box ($Unbox HandleTypeType bx@@96)) bx@@96) ($Is ($Unbox HandleTypeType bx@@96) (Tclass._System.___hTotalFunc6 |#$T0@@146| |#$T1@@130| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@150|)))) :qid |unknown.0:0| :skolemid |1052| :pattern ( ($IsBox bx@@96 (Tclass._System.___hTotalFunc6 |#$T0@@146| |#$T1@@130| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@150|))) )))
(assert (forall ((|#$T0@@147| T@U) (|#$T1@@131| T@U) (|#$T2@@103| T@U) (|#$T3@@81| T@U) (|#$T4@@56| T@U) (|#$T5@@28| T@U) (|#$R@@151| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@147|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$T2@@103|) TyType)) (= (type |#$T3@@81|) TyType)) (= (type |#$T4@@56|) TyType)) (= (type |#$T5@@28|) TyType)) (= (type |#$R@@151|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (and (=> ($Is |f#0@@25| (Tclass._System.___hTotalFunc6 |#$T0@@147| |#$T1@@131| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|)) (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc6 |#$T0@@147| |#$T1@@131| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|)) (forall ((|x0#0@@21| T@U) (|x1#0@@17| T@U) (|x2#0@@13| T@U) (|x3#0@@9| T@U) (|x4#0@@5| T@U) (|x5#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@21|) BoxType) (= (type |x1#0@@17|) BoxType)) (= (type |x2#0@@13|) BoxType)) (= (type |x3#0@@9|) BoxType)) (= (type |x4#0@@5|) BoxType)) (= (type |x5#0@@1|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@21| |#$T0@@147|) ($IsBox |x1#0@@17| |#$T1@@131|)) ($IsBox |x2#0@@13| |#$T2@@103|)) ($IsBox |x3#0@@9| |#$T3@@81|)) ($IsBox |x4#0@@5| |#$T4@@56|)) ($IsBox |x5#0@@1| |#$T5@@28|))) (Requires6 |#$T0@@147| |#$T1@@131| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151| $OneHeap |f#0@@25| |x0#0@@21| |x1#0@@17| |x2#0@@13| |x3#0@@9| |x4#0@@5| |x5#0@@1|)) :qid |unknown.0:0| :skolemid |1053| :no-pattern (type |x0#0@@21|) :no-pattern (type |x1#0@@17|) :no-pattern (type |x2#0@@13|) :no-pattern (type |x3#0@@9|) :no-pattern (type |x4#0@@5|) :no-pattern (type |x5#0@@1|) :no-pattern (U_2_int |x0#0@@21|) :no-pattern (U_2_bool |x0#0@@21|) :no-pattern (U_2_int |x1#0@@17|) :no-pattern (U_2_bool |x1#0@@17|) :no-pattern (U_2_int |x2#0@@13|) :no-pattern (U_2_bool |x2#0@@13|) :no-pattern (U_2_int |x3#0@@9|) :no-pattern (U_2_bool |x3#0@@9|) :no-pattern (U_2_int |x4#0@@5|) :no-pattern (U_2_bool |x4#0@@5|) :no-pattern (U_2_int |x5#0@@1|) :no-pattern (U_2_bool |x5#0@@1|) )))) (=> (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc6 |#$T0@@147| |#$T1@@131| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|)) (forall ((|x0#0@@22| T@U) (|x1#0@@18| T@U) (|x2#0@@14| T@U) (|x3#0@@10| T@U) (|x4#0@@6| T@U) (|x5#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@22|) BoxType) (= (type |x1#0@@18|) BoxType)) (= (type |x2#0@@14|) BoxType)) (= (type |x3#0@@10|) BoxType)) (= (type |x4#0@@6|) BoxType)) (= (type |x5#0@@2|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@22| |#$T0@@147|) ($IsBox |x1#0@@18| |#$T1@@131|)) ($IsBox |x2#0@@14| |#$T2@@103|)) ($IsBox |x3#0@@10| |#$T3@@81|)) ($IsBox |x4#0@@6| |#$T4@@56|)) ($IsBox |x5#0@@2| |#$T5@@28|))) (Requires6 |#$T0@@147| |#$T1@@131| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151| $OneHeap |f#0@@25| |x0#0@@22| |x1#0@@18| |x2#0@@14| |x3#0@@10| |x4#0@@6| |x5#0@@2|)) :qid |unknown.0:0| :skolemid |1053| :no-pattern (type |x0#0@@22|) :no-pattern (type |x1#0@@18|) :no-pattern (type |x2#0@@14|) :no-pattern (type |x3#0@@10|) :no-pattern (type |x4#0@@6|) :no-pattern (type |x5#0@@2|) :no-pattern (U_2_int |x0#0@@22|) :no-pattern (U_2_bool |x0#0@@22|) :no-pattern (U_2_int |x1#0@@18|) :no-pattern (U_2_bool |x1#0@@18|) :no-pattern (U_2_int |x2#0@@14|) :no-pattern (U_2_bool |x2#0@@14|) :no-pattern (U_2_int |x3#0@@10|) :no-pattern (U_2_bool |x3#0@@10|) :no-pattern (U_2_int |x4#0@@6|) :no-pattern (U_2_bool |x4#0@@6|) :no-pattern (U_2_int |x5#0@@2|) :no-pattern (U_2_bool |x5#0@@2|) ))) ($Is |f#0@@25| (Tclass._System.___hTotalFunc6 |#$T0@@147| |#$T1@@131| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|))))) :qid |unknown.0:0| :skolemid |1054| :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc6 |#$T0@@147| |#$T1@@131| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|))) )))
(assert (forall ((|#$T0@@148| T@U) (|#$T1@@132| T@U) (|#$T2@@104| T@U) (|#$T3@@82| T@U) (|#$T4@@57| T@U) (|#$T5@@29| T@U) (|#$R@@152| T@U) (|f#0@@26| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@148|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$T2@@104|) TyType)) (= (type |#$T3@@82|) TyType)) (= (type |#$T4@@57|) TyType)) (= (type |#$T5@@29|) TyType)) (= (type |#$R@@152|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc6 |#$T0@@148| |#$T1@@132| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@24) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc6 |#$T0@@148| |#$T1@@132| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@24)) (=> ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc6 |#$T0@@148| |#$T1@@132| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@24) ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc6 |#$T0@@148| |#$T1@@132| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@24)))) :qid |unknown.0:0| :skolemid |1055| :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc6 |#$T0@@148| |#$T1@@132| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@24)) )))
(assert (forall ((arg0@@289 T@U) (arg1@@138 T@U) (arg2@@94 T@U) (arg3@@70 T@U) (arg4@@59 T@U) (arg5@@46 T@U) (arg6@@34 T@U) (arg7@@19 T@U) ) (! (= (type (Tclass._System.___hFunc7 arg0@@289 arg1@@138 arg2@@94 arg3@@70 arg4@@59 arg5@@46 arg6@@34 arg7@@19)) TyType) :qid |funType:Tclass._System.___hFunc7| :pattern ( (Tclass._System.___hFunc7 arg0@@289 arg1@@138 arg2@@94 arg3@@70 arg4@@59 arg5@@46 arg6@@34 arg7@@19)) )))
(assert (forall ((|#$T0@@149| T@U) (|#$T1@@133| T@U) (|#$T2@@105| T@U) (|#$T3@@83| T@U) (|#$T4@@58| T@U) (|#$T5@@30| T@U) (|#$T6| T@U) (|#$R@@153| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@149|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$T2@@105|) TyType)) (= (type |#$T3@@83|) TyType)) (= (type |#$T4@@58|) TyType)) (= (type |#$T5@@30|) TyType)) (= (type |#$T6|) TyType)) (= (type |#$R@@153|) TyType)) (= (Tag (Tclass._System.___hFunc7 |#$T0@@149| |#$T1@@133| |#$T2@@105| |#$T3@@83| |#$T4@@58| |#$T5@@30| |#$T6| |#$R@@153|)) Tagclass._System.___hFunc7)) :qid |unknown.0:0| :skolemid |1056| :pattern ( (Tclass._System.___hFunc7 |#$T0@@149| |#$T1@@133| |#$T2@@105| |#$T3@@83| |#$T4@@58| |#$T5@@30| |#$T6| |#$R@@153|)) )))
(assert (forall ((arg0@@290 T@U) ) (! (= (type (Tclass._System.___hFunc7_0 arg0@@290)) TyType) :qid |funType:Tclass._System.___hFunc7_0| :pattern ( (Tclass._System.___hFunc7_0 arg0@@290)) )))
(assert (forall ((|#$T0@@150| T@U) (|#$T1@@134| T@U) (|#$T2@@106| T@U) (|#$T3@@84| T@U) (|#$T4@@59| T@U) (|#$T5@@31| T@U) (|#$T6@@0| T@U) (|#$R@@154| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@150|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$T2@@106|) TyType)) (= (type |#$T3@@84|) TyType)) (= (type |#$T4@@59|) TyType)) (= (type |#$T5@@31|) TyType)) (= (type |#$T6@@0|) TyType)) (= (type |#$R@@154|) TyType)) (= (Tclass._System.___hFunc7_0 (Tclass._System.___hFunc7 |#$T0@@150| |#$T1@@134| |#$T2@@106| |#$T3@@84| |#$T4@@59| |#$T5@@31| |#$T6@@0| |#$R@@154|)) |#$T0@@150|)) :qid |unknown.0:0| :skolemid |1057| :pattern ( (Tclass._System.___hFunc7 |#$T0@@150| |#$T1@@134| |#$T2@@106| |#$T3@@84| |#$T4@@59| |#$T5@@31| |#$T6@@0| |#$R@@154|)) )))
(assert (forall ((arg0@@291 T@U) ) (! (= (type (Tclass._System.___hFunc7_1 arg0@@291)) TyType) :qid |funType:Tclass._System.___hFunc7_1| :pattern ( (Tclass._System.___hFunc7_1 arg0@@291)) )))
(assert (forall ((|#$T0@@151| T@U) (|#$T1@@135| T@U) (|#$T2@@107| T@U) (|#$T3@@85| T@U) (|#$T4@@60| T@U) (|#$T5@@32| T@U) (|#$T6@@1| T@U) (|#$R@@155| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@151|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$T2@@107|) TyType)) (= (type |#$T3@@85|) TyType)) (= (type |#$T4@@60|) TyType)) (= (type |#$T5@@32|) TyType)) (= (type |#$T6@@1|) TyType)) (= (type |#$R@@155|) TyType)) (= (Tclass._System.___hFunc7_1 (Tclass._System.___hFunc7 |#$T0@@151| |#$T1@@135| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@32| |#$T6@@1| |#$R@@155|)) |#$T1@@135|)) :qid |unknown.0:0| :skolemid |1058| :pattern ( (Tclass._System.___hFunc7 |#$T0@@151| |#$T1@@135| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@32| |#$T6@@1| |#$R@@155|)) )))
(assert (forall ((arg0@@292 T@U) ) (! (= (type (Tclass._System.___hFunc7_2 arg0@@292)) TyType) :qid |funType:Tclass._System.___hFunc7_2| :pattern ( (Tclass._System.___hFunc7_2 arg0@@292)) )))
(assert (forall ((|#$T0@@152| T@U) (|#$T1@@136| T@U) (|#$T2@@108| T@U) (|#$T3@@86| T@U) (|#$T4@@61| T@U) (|#$T5@@33| T@U) (|#$T6@@2| T@U) (|#$R@@156| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@152|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$T2@@108|) TyType)) (= (type |#$T3@@86|) TyType)) (= (type |#$T4@@61|) TyType)) (= (type |#$T5@@33|) TyType)) (= (type |#$T6@@2|) TyType)) (= (type |#$R@@156|) TyType)) (= (Tclass._System.___hFunc7_2 (Tclass._System.___hFunc7 |#$T0@@152| |#$T1@@136| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@33| |#$T6@@2| |#$R@@156|)) |#$T2@@108|)) :qid |unknown.0:0| :skolemid |1059| :pattern ( (Tclass._System.___hFunc7 |#$T0@@152| |#$T1@@136| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@33| |#$T6@@2| |#$R@@156|)) )))
(assert (forall ((arg0@@293 T@U) ) (! (= (type (Tclass._System.___hFunc7_3 arg0@@293)) TyType) :qid |funType:Tclass._System.___hFunc7_3| :pattern ( (Tclass._System.___hFunc7_3 arg0@@293)) )))
(assert (forall ((|#$T0@@153| T@U) (|#$T1@@137| T@U) (|#$T2@@109| T@U) (|#$T3@@87| T@U) (|#$T4@@62| T@U) (|#$T5@@34| T@U) (|#$T6@@3| T@U) (|#$R@@157| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@153|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$T2@@109|) TyType)) (= (type |#$T3@@87|) TyType)) (= (type |#$T4@@62|) TyType)) (= (type |#$T5@@34|) TyType)) (= (type |#$T6@@3|) TyType)) (= (type |#$R@@157|) TyType)) (= (Tclass._System.___hFunc7_3 (Tclass._System.___hFunc7 |#$T0@@153| |#$T1@@137| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@34| |#$T6@@3| |#$R@@157|)) |#$T3@@87|)) :qid |unknown.0:0| :skolemid |1060| :pattern ( (Tclass._System.___hFunc7 |#$T0@@153| |#$T1@@137| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@34| |#$T6@@3| |#$R@@157|)) )))
(assert (forall ((arg0@@294 T@U) ) (! (= (type (Tclass._System.___hFunc7_4 arg0@@294)) TyType) :qid |funType:Tclass._System.___hFunc7_4| :pattern ( (Tclass._System.___hFunc7_4 arg0@@294)) )))
(assert (forall ((|#$T0@@154| T@U) (|#$T1@@138| T@U) (|#$T2@@110| T@U) (|#$T3@@88| T@U) (|#$T4@@63| T@U) (|#$T5@@35| T@U) (|#$T6@@4| T@U) (|#$R@@158| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@154|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$T2@@110|) TyType)) (= (type |#$T3@@88|) TyType)) (= (type |#$T4@@63|) TyType)) (= (type |#$T5@@35|) TyType)) (= (type |#$T6@@4|) TyType)) (= (type |#$R@@158|) TyType)) (= (Tclass._System.___hFunc7_4 (Tclass._System.___hFunc7 |#$T0@@154| |#$T1@@138| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@35| |#$T6@@4| |#$R@@158|)) |#$T4@@63|)) :qid |unknown.0:0| :skolemid |1061| :pattern ( (Tclass._System.___hFunc7 |#$T0@@154| |#$T1@@138| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@35| |#$T6@@4| |#$R@@158|)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (Tclass._System.___hFunc7_5 arg0@@295)) TyType) :qid |funType:Tclass._System.___hFunc7_5| :pattern ( (Tclass._System.___hFunc7_5 arg0@@295)) )))
(assert (forall ((|#$T0@@155| T@U) (|#$T1@@139| T@U) (|#$T2@@111| T@U) (|#$T3@@89| T@U) (|#$T4@@64| T@U) (|#$T5@@36| T@U) (|#$T6@@5| T@U) (|#$R@@159| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@155|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$T2@@111|) TyType)) (= (type |#$T3@@89|) TyType)) (= (type |#$T4@@64|) TyType)) (= (type |#$T5@@36|) TyType)) (= (type |#$T6@@5|) TyType)) (= (type |#$R@@159|) TyType)) (= (Tclass._System.___hFunc7_5 (Tclass._System.___hFunc7 |#$T0@@155| |#$T1@@139| |#$T2@@111| |#$T3@@89| |#$T4@@64| |#$T5@@36| |#$T6@@5| |#$R@@159|)) |#$T5@@36|)) :qid |unknown.0:0| :skolemid |1062| :pattern ( (Tclass._System.___hFunc7 |#$T0@@155| |#$T1@@139| |#$T2@@111| |#$T3@@89| |#$T4@@64| |#$T5@@36| |#$T6@@5| |#$R@@159|)) )))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (Tclass._System.___hFunc7_6 arg0@@296)) TyType) :qid |funType:Tclass._System.___hFunc7_6| :pattern ( (Tclass._System.___hFunc7_6 arg0@@296)) )))
(assert (forall ((|#$T0@@156| T@U) (|#$T1@@140| T@U) (|#$T2@@112| T@U) (|#$T3@@90| T@U) (|#$T4@@65| T@U) (|#$T5@@37| T@U) (|#$T6@@6| T@U) (|#$R@@160| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@156|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$T2@@112|) TyType)) (= (type |#$T3@@90|) TyType)) (= (type |#$T4@@65|) TyType)) (= (type |#$T5@@37|) TyType)) (= (type |#$T6@@6|) TyType)) (= (type |#$R@@160|) TyType)) (= (Tclass._System.___hFunc7_6 (Tclass._System.___hFunc7 |#$T0@@156| |#$T1@@140| |#$T2@@112| |#$T3@@90| |#$T4@@65| |#$T5@@37| |#$T6@@6| |#$R@@160|)) |#$T6@@6|)) :qid |unknown.0:0| :skolemid |1063| :pattern ( (Tclass._System.___hFunc7 |#$T0@@156| |#$T1@@140| |#$T2@@112| |#$T3@@90| |#$T4@@65| |#$T5@@37| |#$T6@@6| |#$R@@160|)) )))
(assert (forall ((arg0@@297 T@U) ) (! (= (type (Tclass._System.___hFunc7_7 arg0@@297)) TyType) :qid |funType:Tclass._System.___hFunc7_7| :pattern ( (Tclass._System.___hFunc7_7 arg0@@297)) )))
(assert (forall ((|#$T0@@157| T@U) (|#$T1@@141| T@U) (|#$T2@@113| T@U) (|#$T3@@91| T@U) (|#$T4@@66| T@U) (|#$T5@@38| T@U) (|#$T6@@7| T@U) (|#$R@@161| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@157|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$T2@@113|) TyType)) (= (type |#$T3@@91|) TyType)) (= (type |#$T4@@66|) TyType)) (= (type |#$T5@@38|) TyType)) (= (type |#$T6@@7|) TyType)) (= (type |#$R@@161|) TyType)) (= (Tclass._System.___hFunc7_7 (Tclass._System.___hFunc7 |#$T0@@157| |#$T1@@141| |#$T2@@113| |#$T3@@91| |#$T4@@66| |#$T5@@38| |#$T6@@7| |#$R@@161|)) |#$R@@161|)) :qid |unknown.0:0| :skolemid |1064| :pattern ( (Tclass._System.___hFunc7 |#$T0@@157| |#$T1@@141| |#$T2@@113| |#$T3@@91| |#$T4@@66| |#$T5@@38| |#$T6@@7| |#$R@@161|)) )))
(assert (forall ((|#$T0@@158| T@U) (|#$T1@@142| T@U) (|#$T2@@114| T@U) (|#$T3@@92| T@U) (|#$T4@@67| T@U) (|#$T5@@39| T@U) (|#$T6@@8| T@U) (|#$R@@162| T@U) (bx@@97 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@158|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$T2@@114|) TyType)) (= (type |#$T3@@92|) TyType)) (= (type |#$T4@@67|) TyType)) (= (type |#$T5@@39|) TyType)) (= (type |#$T6@@8|) TyType)) (= (type |#$R@@162|) TyType)) (= (type bx@@97) BoxType)) ($IsBox bx@@97 (Tclass._System.___hFunc7 |#$T0@@158| |#$T1@@142| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$T5@@39| |#$T6@@8| |#$R@@162|))) (and (= ($Box ($Unbox HandleTypeType bx@@97)) bx@@97) ($Is ($Unbox HandleTypeType bx@@97) (Tclass._System.___hFunc7 |#$T0@@158| |#$T1@@142| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$T5@@39| |#$T6@@8| |#$R@@162|)))) :qid |unknown.0:0| :skolemid |1065| :pattern ( ($IsBox bx@@97 (Tclass._System.___hFunc7 |#$T0@@158| |#$T1@@142| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$T5@@39| |#$T6@@8| |#$R@@162|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@298 T@T) (arg1@@139 T@T) (arg2@@95 T@T) (arg3@@71 T@T) (arg4@@60 T@T) (arg5@@47 T@T) (arg6@@35 T@T) (arg7@@20 T@T) (arg8@@8 T@T) ) (! (= (Ctor (MapType8Type arg0@@298 arg1@@139 arg2@@95 arg3@@71 arg4@@60 arg5@@47 arg6@@35 arg7@@20 arg8@@8)) 27) :qid |ctor:MapType8Type| )) (forall ((arg0@@299 T@T) (arg1@@140 T@T) (arg2@@96 T@T) (arg3@@72 T@T) (arg4@@61 T@T) (arg5@@48 T@T) (arg6@@36 T@T) (arg7@@21 T@T) (arg8@@9 T@T) ) (! (= (MapType8TypeInv0 (MapType8Type arg0@@299 arg1@@140 arg2@@96 arg3@@72 arg4@@61 arg5@@48 arg6@@36 arg7@@21 arg8@@9)) arg0@@299) :qid |typeInv:MapType8TypeInv0| :pattern ( (MapType8Type arg0@@299 arg1@@140 arg2@@96 arg3@@72 arg4@@61 arg5@@48 arg6@@36 arg7@@21 arg8@@9)) ))) (forall ((arg0@@300 T@T) (arg1@@141 T@T) (arg2@@97 T@T) (arg3@@73 T@T) (arg4@@62 T@T) (arg5@@49 T@T) (arg6@@37 T@T) (arg7@@22 T@T) (arg8@@10 T@T) ) (! (= (MapType8TypeInv1 (MapType8Type arg0@@300 arg1@@141 arg2@@97 arg3@@73 arg4@@62 arg5@@49 arg6@@37 arg7@@22 arg8@@10)) arg1@@141) :qid |typeInv:MapType8TypeInv1| :pattern ( (MapType8Type arg0@@300 arg1@@141 arg2@@97 arg3@@73 arg4@@62 arg5@@49 arg6@@37 arg7@@22 arg8@@10)) ))) (forall ((arg0@@301 T@T) (arg1@@142 T@T) (arg2@@98 T@T) (arg3@@74 T@T) (arg4@@63 T@T) (arg5@@50 T@T) (arg6@@38 T@T) (arg7@@23 T@T) (arg8@@11 T@T) ) (! (= (MapType8TypeInv2 (MapType8Type arg0@@301 arg1@@142 arg2@@98 arg3@@74 arg4@@63 arg5@@50 arg6@@38 arg7@@23 arg8@@11)) arg2@@98) :qid |typeInv:MapType8TypeInv2| :pattern ( (MapType8Type arg0@@301 arg1@@142 arg2@@98 arg3@@74 arg4@@63 arg5@@50 arg6@@38 arg7@@23 arg8@@11)) ))) (forall ((arg0@@302 T@T) (arg1@@143 T@T) (arg2@@99 T@T) (arg3@@75 T@T) (arg4@@64 T@T) (arg5@@51 T@T) (arg6@@39 T@T) (arg7@@24 T@T) (arg8@@12 T@T) ) (! (= (MapType8TypeInv3 (MapType8Type arg0@@302 arg1@@143 arg2@@99 arg3@@75 arg4@@64 arg5@@51 arg6@@39 arg7@@24 arg8@@12)) arg3@@75) :qid |typeInv:MapType8TypeInv3| :pattern ( (MapType8Type arg0@@302 arg1@@143 arg2@@99 arg3@@75 arg4@@64 arg5@@51 arg6@@39 arg7@@24 arg8@@12)) ))) (forall ((arg0@@303 T@T) (arg1@@144 T@T) (arg2@@100 T@T) (arg3@@76 T@T) (arg4@@65 T@T) (arg5@@52 T@T) (arg6@@40 T@T) (arg7@@25 T@T) (arg8@@13 T@T) ) (! (= (MapType8TypeInv4 (MapType8Type arg0@@303 arg1@@144 arg2@@100 arg3@@76 arg4@@65 arg5@@52 arg6@@40 arg7@@25 arg8@@13)) arg4@@65) :qid |typeInv:MapType8TypeInv4| :pattern ( (MapType8Type arg0@@303 arg1@@144 arg2@@100 arg3@@76 arg4@@65 arg5@@52 arg6@@40 arg7@@25 arg8@@13)) ))) (forall ((arg0@@304 T@T) (arg1@@145 T@T) (arg2@@101 T@T) (arg3@@77 T@T) (arg4@@66 T@T) (arg5@@53 T@T) (arg6@@41 T@T) (arg7@@26 T@T) (arg8@@14 T@T) ) (! (= (MapType8TypeInv5 (MapType8Type arg0@@304 arg1@@145 arg2@@101 arg3@@77 arg4@@66 arg5@@53 arg6@@41 arg7@@26 arg8@@14)) arg5@@53) :qid |typeInv:MapType8TypeInv5| :pattern ( (MapType8Type arg0@@304 arg1@@145 arg2@@101 arg3@@77 arg4@@66 arg5@@53 arg6@@41 arg7@@26 arg8@@14)) ))) (forall ((arg0@@305 T@T) (arg1@@146 T@T) (arg2@@102 T@T) (arg3@@78 T@T) (arg4@@67 T@T) (arg5@@54 T@T) (arg6@@42 T@T) (arg7@@27 T@T) (arg8@@15 T@T) ) (! (= (MapType8TypeInv6 (MapType8Type arg0@@305 arg1@@146 arg2@@102 arg3@@78 arg4@@67 arg5@@54 arg6@@42 arg7@@27 arg8@@15)) arg6@@42) :qid |typeInv:MapType8TypeInv6| :pattern ( (MapType8Type arg0@@305 arg1@@146 arg2@@102 arg3@@78 arg4@@67 arg5@@54 arg6@@42 arg7@@27 arg8@@15)) ))) (forall ((arg0@@306 T@T) (arg1@@147 T@T) (arg2@@103 T@T) (arg3@@79 T@T) (arg4@@68 T@T) (arg5@@55 T@T) (arg6@@43 T@T) (arg7@@28 T@T) (arg8@@16 T@T) ) (! (= (MapType8TypeInv7 (MapType8Type arg0@@306 arg1@@147 arg2@@103 arg3@@79 arg4@@68 arg5@@55 arg6@@43 arg7@@28 arg8@@16)) arg7@@28) :qid |typeInv:MapType8TypeInv7| :pattern ( (MapType8Type arg0@@306 arg1@@147 arg2@@103 arg3@@79 arg4@@68 arg5@@55 arg6@@43 arg7@@28 arg8@@16)) ))) (forall ((arg0@@307 T@T) (arg1@@148 T@T) (arg2@@104 T@T) (arg3@@80 T@T) (arg4@@69 T@T) (arg5@@56 T@T) (arg6@@44 T@T) (arg7@@29 T@T) (arg8@@17 T@T) ) (! (= (MapType8TypeInv8 (MapType8Type arg0@@307 arg1@@148 arg2@@104 arg3@@80 arg4@@69 arg5@@56 arg6@@44 arg7@@29 arg8@@17)) arg8@@17) :qid |typeInv:MapType8TypeInv8| :pattern ( (MapType8Type arg0@@307 arg1@@148 arg2@@104 arg3@@80 arg4@@69 arg5@@56 arg6@@44 arg7@@29 arg8@@17)) ))) (forall ((arg0@@308 T@U) (arg1@@149 T@U) (arg2@@105 T@U) (arg3@@81 T@U) (arg4@@70 T@U) (arg5@@57 T@U) (arg6@@45 T@U) (arg7@@30 T@U) (arg8@@18 T@U) ) (! (let ((aVar8 (MapType8TypeInv8 (type arg0@@308)))) (= (type (MapType8Select arg0@@308 arg1@@149 arg2@@105 arg3@@81 arg4@@70 arg5@@57 arg6@@45 arg7@@30 arg8@@18)) aVar8)) :qid |funType:MapType8Select| :pattern ( (MapType8Select arg0@@308 arg1@@149 arg2@@105 arg3@@81 arg4@@70 arg5@@57 arg6@@45 arg7@@30 arg8@@18)) ))) (forall ((arg0@@309 T@U) (arg1@@150 T@U) (arg2@@106 T@U) (arg3@@82 T@U) (arg4@@71 T@U) (arg5@@58 T@U) (arg6@@46 T@U) (arg7@@31 T@U) (arg8@@19 T@U) (arg9@@5 T@U) ) (! (let ((aVar8@@0 (type arg9@@5))) (let ((aVar7@@2 (type arg8@@19))) (let ((aVar6@@3 (type arg7@@31))) (let ((aVar5@@4 (type arg6@@46))) (let ((aVar4@@5 (type arg5@@58))) (let ((aVar3@@6 (type arg4@@71))) (let ((aVar2@@7 (type arg3@@82))) (let ((aVar1@@8 (type arg2@@106))) (let ((aVar0@@6 (type arg1@@150))) (= (type (MapType8Store arg0@@309 arg1@@150 arg2@@106 arg3@@82 arg4@@71 arg5@@58 arg6@@46 arg7@@31 arg8@@19 arg9@@5)) (MapType8Type aVar0@@6 aVar1@@8 aVar2@@7 aVar3@@6 aVar4@@5 aVar5@@4 aVar6@@3 aVar7@@2 aVar8@@0))))))))))) :qid |funType:MapType8Store| :pattern ( (MapType8Store arg0@@309 arg1@@150 arg2@@106 arg3@@82 arg4@@71 arg5@@58 arg6@@46 arg7@@31 arg8@@19 arg9@@5)) ))) (forall ((m@@66 T@U) (x0@@44 T@U) (x1@@38 T@U) (x2@@34 T@U) (x3@@29 T@U) (x4@@23 T@U) (x5@@16 T@U) (x6@@8 T@U) (x7 T@U) (val@@45 T@U) ) (! (let ((aVar8@@1 (MapType8TypeInv8 (type m@@66)))) (=> (= (type val@@45) aVar8@@1) (= (MapType8Select (MapType8Store m@@66 x0@@44 x1@@38 x2@@34 x3@@29 x4@@23 x5@@16 x6@@8 x7 val@@45) x0@@44 x1@@38 x2@@34 x3@@29 x4@@23 x5@@16 x6@@8 x7) val@@45))) :qid |mapAx0:MapType8Select| :weight 0 ))) (and (and (and (and (and (and (and (and (forall ((val@@46 T@U) (m@@67 T@U) (x0@@45 T@U) (x1@@39 T@U) (x2@@35 T@U) (x3@@30 T@U) (x4@@24 T@U) (x5@@17 T@U) (x6@@9 T@U) (x7@@0 T@U) (y0@@36 T@U) (y1@@32 T@U) (y2@@29 T@U) (y3@@25 T@U) (y4@@20 T@U) (y5@@14 T@U) (y6@@7 T@U) (y7 T@U) ) (!  (or (= x0@@45 y0@@36) (= (MapType8Select (MapType8Store m@@67 x0@@45 x1@@39 x2@@35 x3@@30 x4@@24 x5@@17 x6@@9 x7@@0 val@@46) y0@@36 y1@@32 y2@@29 y3@@25 y4@@20 y5@@14 y6@@7 y7) (MapType8Select m@@67 y0@@36 y1@@32 y2@@29 y3@@25 y4@@20 y5@@14 y6@@7 y7))) :qid |mapAx1:MapType8Select:0| :weight 0 )) (forall ((val@@47 T@U) (m@@68 T@U) (x0@@46 T@U) (x1@@40 T@U) (x2@@36 T@U) (x3@@31 T@U) (x4@@25 T@U) (x5@@18 T@U) (x6@@10 T@U) (x7@@1 T@U) (y0@@37 T@U) (y1@@33 T@U) (y2@@30 T@U) (y3@@26 T@U) (y4@@21 T@U) (y5@@15 T@U) (y6@@8 T@U) (y7@@0 T@U) ) (!  (or (= x1@@40 y1@@33) (= (MapType8Select (MapType8Store m@@68 x0@@46 x1@@40 x2@@36 x3@@31 x4@@25 x5@@18 x6@@10 x7@@1 val@@47) y0@@37 y1@@33 y2@@30 y3@@26 y4@@21 y5@@15 y6@@8 y7@@0) (MapType8Select m@@68 y0@@37 y1@@33 y2@@30 y3@@26 y4@@21 y5@@15 y6@@8 y7@@0))) :qid |mapAx1:MapType8Select:1| :weight 0 ))) (forall ((val@@48 T@U) (m@@69 T@U) (x0@@47 T@U) (x1@@41 T@U) (x2@@37 T@U) (x3@@32 T@U) (x4@@26 T@U) (x5@@19 T@U) (x6@@11 T@U) (x7@@2 T@U) (y0@@38 T@U) (y1@@34 T@U) (y2@@31 T@U) (y3@@27 T@U) (y4@@22 T@U) (y5@@16 T@U) (y6@@9 T@U) (y7@@1 T@U) ) (!  (or (= x2@@37 y2@@31) (= (MapType8Select (MapType8Store m@@69 x0@@47 x1@@41 x2@@37 x3@@32 x4@@26 x5@@19 x6@@11 x7@@2 val@@48) y0@@38 y1@@34 y2@@31 y3@@27 y4@@22 y5@@16 y6@@9 y7@@1) (MapType8Select m@@69 y0@@38 y1@@34 y2@@31 y3@@27 y4@@22 y5@@16 y6@@9 y7@@1))) :qid |mapAx1:MapType8Select:2| :weight 0 ))) (forall ((val@@49 T@U) (m@@70 T@U) (x0@@48 T@U) (x1@@42 T@U) (x2@@38 T@U) (x3@@33 T@U) (x4@@27 T@U) (x5@@20 T@U) (x6@@12 T@U) (x7@@3 T@U) (y0@@39 T@U) (y1@@35 T@U) (y2@@32 T@U) (y3@@28 T@U) (y4@@23 T@U) (y5@@17 T@U) (y6@@10 T@U) (y7@@2 T@U) ) (!  (or (= x3@@33 y3@@28) (= (MapType8Select (MapType8Store m@@70 x0@@48 x1@@42 x2@@38 x3@@33 x4@@27 x5@@20 x6@@12 x7@@3 val@@49) y0@@39 y1@@35 y2@@32 y3@@28 y4@@23 y5@@17 y6@@10 y7@@2) (MapType8Select m@@70 y0@@39 y1@@35 y2@@32 y3@@28 y4@@23 y5@@17 y6@@10 y7@@2))) :qid |mapAx1:MapType8Select:3| :weight 0 ))) (forall ((val@@50 T@U) (m@@71 T@U) (x0@@49 T@U) (x1@@43 T@U) (x2@@39 T@U) (x3@@34 T@U) (x4@@28 T@U) (x5@@21 T@U) (x6@@13 T@U) (x7@@4 T@U) (y0@@40 T@U) (y1@@36 T@U) (y2@@33 T@U) (y3@@29 T@U) (y4@@24 T@U) (y5@@18 T@U) (y6@@11 T@U) (y7@@3 T@U) ) (!  (or (= x4@@28 y4@@24) (= (MapType8Select (MapType8Store m@@71 x0@@49 x1@@43 x2@@39 x3@@34 x4@@28 x5@@21 x6@@13 x7@@4 val@@50) y0@@40 y1@@36 y2@@33 y3@@29 y4@@24 y5@@18 y6@@11 y7@@3) (MapType8Select m@@71 y0@@40 y1@@36 y2@@33 y3@@29 y4@@24 y5@@18 y6@@11 y7@@3))) :qid |mapAx1:MapType8Select:4| :weight 0 ))) (forall ((val@@51 T@U) (m@@72 T@U) (x0@@50 T@U) (x1@@44 T@U) (x2@@40 T@U) (x3@@35 T@U) (x4@@29 T@U) (x5@@22 T@U) (x6@@14 T@U) (x7@@5 T@U) (y0@@41 T@U) (y1@@37 T@U) (y2@@34 T@U) (y3@@30 T@U) (y4@@25 T@U) (y5@@19 T@U) (y6@@12 T@U) (y7@@4 T@U) ) (!  (or (= x5@@22 y5@@19) (= (MapType8Select (MapType8Store m@@72 x0@@50 x1@@44 x2@@40 x3@@35 x4@@29 x5@@22 x6@@14 x7@@5 val@@51) y0@@41 y1@@37 y2@@34 y3@@30 y4@@25 y5@@19 y6@@12 y7@@4) (MapType8Select m@@72 y0@@41 y1@@37 y2@@34 y3@@30 y4@@25 y5@@19 y6@@12 y7@@4))) :qid |mapAx1:MapType8Select:5| :weight 0 ))) (forall ((val@@52 T@U) (m@@73 T@U) (x0@@51 T@U) (x1@@45 T@U) (x2@@41 T@U) (x3@@36 T@U) (x4@@30 T@U) (x5@@23 T@U) (x6@@15 T@U) (x7@@6 T@U) (y0@@42 T@U) (y1@@38 T@U) (y2@@35 T@U) (y3@@31 T@U) (y4@@26 T@U) (y5@@20 T@U) (y6@@13 T@U) (y7@@5 T@U) ) (!  (or (= x6@@15 y6@@13) (= (MapType8Select (MapType8Store m@@73 x0@@51 x1@@45 x2@@41 x3@@36 x4@@30 x5@@23 x6@@15 x7@@6 val@@52) y0@@42 y1@@38 y2@@35 y3@@31 y4@@26 y5@@20 y6@@13 y7@@5) (MapType8Select m@@73 y0@@42 y1@@38 y2@@35 y3@@31 y4@@26 y5@@20 y6@@13 y7@@5))) :qid |mapAx1:MapType8Select:6| :weight 0 ))) (forall ((val@@53 T@U) (m@@74 T@U) (x0@@52 T@U) (x1@@46 T@U) (x2@@42 T@U) (x3@@37 T@U) (x4@@31 T@U) (x5@@24 T@U) (x6@@16 T@U) (x7@@7 T@U) (y0@@43 T@U) (y1@@39 T@U) (y2@@36 T@U) (y3@@32 T@U) (y4@@27 T@U) (y5@@21 T@U) (y6@@14 T@U) (y7@@6 T@U) ) (!  (or (= x7@@7 y7@@6) (= (MapType8Select (MapType8Store m@@74 x0@@52 x1@@46 x2@@42 x3@@37 x4@@31 x5@@24 x6@@16 x7@@7 val@@53) y0@@43 y1@@39 y2@@36 y3@@32 y4@@27 y5@@21 y6@@14 y7@@6) (MapType8Select m@@74 y0@@43 y1@@39 y2@@36 y3@@32 y4@@27 y5@@21 y6@@14 y7@@6))) :qid |mapAx1:MapType8Select:7| :weight 0 ))) (forall ((val@@54 T@U) (m@@75 T@U) (x0@@53 T@U) (x1@@47 T@U) (x2@@43 T@U) (x3@@38 T@U) (x4@@32 T@U) (x5@@25 T@U) (x6@@17 T@U) (x7@@8 T@U) (y0@@44 T@U) (y1@@40 T@U) (y2@@37 T@U) (y3@@33 T@U) (y4@@28 T@U) (y5@@22 T@U) (y6@@15 T@U) (y7@@7 T@U) ) (!  (or true (= (MapType8Select (MapType8Store m@@75 x0@@53 x1@@47 x2@@43 x3@@38 x4@@32 x5@@25 x6@@17 x7@@8 val@@54) y0@@44 y1@@40 y2@@37 y3@@33 y4@@28 y5@@22 y6@@15 y7@@7) (MapType8Select m@@75 y0@@44 y1@@40 y2@@37 y3@@33 y4@@28 y5@@22 y6@@15 y7@@7))) :qid |mapAx2:MapType8Select| :weight 0 )))) (forall ((arg0@@310 T@U) (arg1@@151 T@U) (arg2@@107 T@U) (arg3@@83 T@U) (arg4@@72 T@U) (arg5@@59 T@U) (arg6@@47 T@U) (arg7@@32 T@U) (arg8@@20 T@U) (arg9@@6 T@U) (arg10@@5 T@U) (arg11@@3 T@U) (arg12@@3 T@U) (arg13@@1 T@U) (arg14@@1 T@U) (arg15 T@U) (arg16 T@U) ) (! (= (type (Apply7 arg0@@310 arg1@@151 arg2@@107 arg3@@83 arg4@@72 arg5@@59 arg6@@47 arg7@@32 arg8@@20 arg9@@6 arg10@@5 arg11@@3 arg12@@3 arg13@@1 arg14@@1 arg15 arg16)) BoxType) :qid |funType:Apply7| :pattern ( (Apply7 arg0@@310 arg1@@151 arg2@@107 arg3@@83 arg4@@72 arg5@@59 arg6@@47 arg7@@32 arg8@@20 arg9@@6 arg10@@5 arg11@@3 arg12@@3 arg13@@1 arg14@@1 arg15 arg16)) ))) (forall ((arg0@@311 T@U) (arg1@@152 T@U) (arg2@@108 T@U) ) (! (= (type (Handle7 arg0@@311 arg1@@152 arg2@@108)) HandleTypeType) :qid |funType:Handle7| :pattern ( (Handle7 arg0@@311 arg1@@152 arg2@@108)) ))))
(assert (forall ((t0@@117 T@U) (t1@@93 T@U) (t2@@74 T@U) (t3@@59 T@U) (t4@@44 T@U) (t5@@29 T@U) (t6@@14 T@U) (t7 T@U) (heap@@36 T@U) (h@@69 T@U) (r@@41 T@U) (rd@@20 T@U) (bx0@@95 T@U) (bx1@@79 T@U) (bx2@@63 T@U) (bx3@@47 T@U) (bx4@@31 T@U) (bx5@@15 T@U) (bx6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@117) TyType) (= (type t1@@93) TyType)) (= (type t2@@74) TyType)) (= (type t3@@59) TyType)) (= (type t4@@44) TyType)) (= (type t5@@29) TyType)) (= (type t6@@14) TyType)) (= (type t7) TyType)) (= (type heap@@36) (MapType0Type refType MapType1Type))) (= (type h@@69) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@41) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@20) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@95) BoxType)) (= (type bx1@@79) BoxType)) (= (type bx2@@63) BoxType)) (= (type bx3@@47) BoxType)) (= (type bx4@@31) BoxType)) (= (type bx5@@15) BoxType)) (= (type bx6) BoxType)) (= (Apply7 t0@@117 t1@@93 t2@@74 t3@@59 t4@@44 t5@@29 t6@@14 t7 heap@@36 (Handle7 h@@69 r@@41 rd@@20) bx0@@95 bx1@@79 bx2@@63 bx3@@47 bx4@@31 bx5@@15 bx6) (MapType8Select h@@69 heap@@36 bx0@@95 bx1@@79 bx2@@63 bx3@@47 bx4@@31 bx5@@15 bx6))) :qid |unknown.0:0| :skolemid |1066| :pattern ( (Apply7 t0@@117 t1@@93 t2@@74 t3@@59 t4@@44 t5@@29 t6@@14 t7 heap@@36 (Handle7 h@@69 r@@41 rd@@20) bx0@@95 bx1@@79 bx2@@63 bx3@@47 bx4@@31 bx5@@15 bx6)) )))
(assert (forall ((t0@@118 T@U) (t1@@94 T@U) (t2@@75 T@U) (t3@@60 T@U) (t4@@45 T@U) (t5@@30 T@U) (t6@@15 T@U) (t7@@0 T@U) (heap@@37 T@U) (h@@70 T@U) (r@@42 T@U) (rd@@21 T@U) (bx0@@96 T@U) (bx1@@80 T@U) (bx2@@64 T@U) (bx3@@48 T@U) (bx4@@32 T@U) (bx5@@16 T@U) (bx6@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@118) TyType) (= (type t1@@94) TyType)) (= (type t2@@75) TyType)) (= (type t3@@60) TyType)) (= (type t4@@45) TyType)) (= (type t5@@30) TyType)) (= (type t6@@15) TyType)) (= (type t7@@0) TyType)) (= (type heap@@37) (MapType0Type refType MapType1Type))) (= (type h@@70) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@42) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@21) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@96) BoxType)) (= (type bx1@@80) BoxType)) (= (type bx2@@64) BoxType)) (= (type bx3@@48) BoxType)) (= (type bx4@@32) BoxType)) (= (type bx5@@16) BoxType)) (= (type bx6@@0) BoxType)) (U_2_bool (MapType8Select r@@42 heap@@37 bx0@@96 bx1@@80 bx2@@64 bx3@@48 bx4@@32 bx5@@16 bx6@@0))) (Requires7 t0@@118 t1@@94 t2@@75 t3@@60 t4@@45 t5@@30 t6@@15 t7@@0 heap@@37 (Handle7 h@@70 r@@42 rd@@21) bx0@@96 bx1@@80 bx2@@64 bx3@@48 bx4@@32 bx5@@16 bx6@@0)) :qid |unknown.0:0| :skolemid |1067| :pattern ( (Requires7 t0@@118 t1@@94 t2@@75 t3@@60 t4@@45 t5@@30 t6@@15 t7@@0 heap@@37 (Handle7 h@@70 r@@42 rd@@21) bx0@@96 bx1@@80 bx2@@64 bx3@@48 bx4@@32 bx5@@16 bx6@@0)) )))
(assert (forall ((arg0@@312 T@U) (arg1@@153 T@U) (arg2@@109 T@U) (arg3@@84 T@U) (arg4@@73 T@U) (arg5@@60 T@U) (arg6@@48 T@U) (arg7@@33 T@U) (arg8@@21 T@U) (arg9@@7 T@U) (arg10@@6 T@U) (arg11@@4 T@U) (arg12@@4 T@U) (arg13@@2 T@U) (arg14@@2 T@U) (arg15@@0 T@U) (arg16@@0 T@U) ) (! (= (type (Reads7 arg0@@312 arg1@@153 arg2@@109 arg3@@84 arg4@@73 arg5@@60 arg6@@48 arg7@@33 arg8@@21 arg9@@7 arg10@@6 arg11@@4 arg12@@4 arg13@@2 arg14@@2 arg15@@0 arg16@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads7| :pattern ( (Reads7 arg0@@312 arg1@@153 arg2@@109 arg3@@84 arg4@@73 arg5@@60 arg6@@48 arg7@@33 arg8@@21 arg9@@7 arg10@@6 arg11@@4 arg12@@4 arg13@@2 arg14@@2 arg15@@0 arg16@@0)) )))
(assert (forall ((t0@@119 T@U) (t1@@95 T@U) (t2@@76 T@U) (t3@@61 T@U) (t4@@46 T@U) (t5@@31 T@U) (t6@@16 T@U) (t7@@1 T@U) (heap@@38 T@U) (h@@71 T@U) (r@@43 T@U) (rd@@22 T@U) (bx0@@97 T@U) (bx1@@81 T@U) (bx2@@65 T@U) (bx3@@49 T@U) (bx4@@33 T@U) (bx5@@17 T@U) (bx6@@1 T@U) (bx@@98 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@119) TyType) (= (type t1@@95) TyType)) (= (type t2@@76) TyType)) (= (type t3@@61) TyType)) (= (type t4@@46) TyType)) (= (type t5@@31) TyType)) (= (type t6@@16) TyType)) (= (type t7@@1) TyType)) (= (type heap@@38) (MapType0Type refType MapType1Type))) (= (type h@@71) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@43) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@22) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@97) BoxType)) (= (type bx1@@81) BoxType)) (= (type bx2@@65) BoxType)) (= (type bx3@@49) BoxType)) (= (type bx4@@33) BoxType)) (= (type bx5@@17) BoxType)) (= (type bx6@@1) BoxType)) (= (type bx@@98) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads7 t0@@119 t1@@95 t2@@76 t3@@61 t4@@46 t5@@31 t6@@16 t7@@1 heap@@38 (Handle7 h@@71 r@@43 rd@@22) bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@98)) (U_2_bool (MapType0Select (MapType8Select rd@@22 heap@@38 bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@98))) (=> (U_2_bool (MapType0Select (MapType8Select rd@@22 heap@@38 bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@98)) (U_2_bool (MapType0Select (Reads7 t0@@119 t1@@95 t2@@76 t3@@61 t4@@46 t5@@31 t6@@16 t7@@1 heap@@38 (Handle7 h@@71 r@@43 rd@@22) bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@98))))) :qid |unknown.0:0| :skolemid |1068| :pattern ( (MapType0Select (Reads7 t0@@119 t1@@95 t2@@76 t3@@61 t4@@46 t5@@31 t6@@16 t7@@1 heap@@38 (Handle7 h@@71 r@@43 rd@@22) bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@98)) )))
(assert (forall ((t0@@120 T@U) (t1@@96 T@U) (t2@@77 T@U) (t3@@62 T@U) (t4@@47 T@U) (t5@@32 T@U) (t6@@17 T@U) (t7@@2 T@U) (h0@@42 T@U) (h1@@42 T@U) (f@@89 T@U) (bx0@@98 T@U) (bx1@@82 T@U) (bx2@@66 T@U) (bx3@@50 T@U) (bx4@@34 T@U) (bx5@@18 T@U) (bx6@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@120) TyType) (= (type t1@@96) TyType)) (= (type t2@@77) TyType)) (= (type t3@@62) TyType)) (= (type t4@@47) TyType)) (= (type t5@@32) TyType)) (= (type t6@@17) TyType)) (= (type t7@@2) TyType)) (= (type h0@@42) (MapType0Type refType MapType1Type))) (= (type h1@@42) (MapType0Type refType MapType1Type))) (= (type f@@89) HandleTypeType)) (= (type bx0@@98) BoxType)) (= (type bx1@@82) BoxType)) (= (type bx2@@66) BoxType)) (= (type bx3@@50) BoxType)) (= (type bx4@@34) BoxType)) (= (type bx5@@18) BoxType)) (= (type bx6@@2) BoxType)) (and (and (and ($HeapSucc h0@@42 h1@@42) (and ($IsGoodHeap h0@@42) ($IsGoodHeap h1@@42))) (and (and (and (and (and (and (and ($IsBox bx0@@98 t0@@120) ($IsBox bx1@@82 t1@@96)) ($IsBox bx2@@66 t2@@77)) ($IsBox bx3@@50 t3@@62)) ($IsBox bx4@@34 t4@@47)) ($IsBox bx5@@18 t5@@32)) ($IsBox bx6@@2 t6@@17)) ($Is f@@89 (Tclass._System.___hFunc7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2)))) (forall ((o@@96 T@U) (fld@@41 T@U) ) (! (let ((a@@126 (FieldTypeInv0 (type fld@@41)))) (=> (and (and (= (type o@@96) refType) (= (type fld@@41) (FieldType a@@126))) (and (not (= o@@96 null)) (U_2_bool (MapType0Select (Reads7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2 h0@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34 bx5@@18 bx6@@2) ($Box o@@96))))) (= (MapType1Select (MapType0Select h0@@42 o@@96) fld@@41) (MapType1Select (MapType0Select h1@@42 o@@96) fld@@41)))) :qid |unknown.0:0| :skolemid |1069| :no-pattern (type o@@96) :no-pattern (type fld@@41) :no-pattern (U_2_int o@@96) :no-pattern (U_2_bool o@@96) :no-pattern (U_2_int fld@@41) :no-pattern (U_2_bool fld@@41) )))) (= (Reads7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2 h0@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34 bx5@@18 bx6@@2) (Reads7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2 h1@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34 bx5@@18 bx6@@2))) :qid |unknown.0:0| :skolemid |1070| :pattern ( ($HeapSucc h0@@42 h1@@42) (Reads7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2 h1@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34 bx5@@18 bx6@@2)) )))
(assert (forall ((t0@@121 T@U) (t1@@97 T@U) (t2@@78 T@U) (t3@@63 T@U) (t4@@48 T@U) (t5@@33 T@U) (t6@@18 T@U) (t7@@3 T@U) (h0@@43 T@U) (h1@@43 T@U) (f@@90 T@U) (bx0@@99 T@U) (bx1@@83 T@U) (bx2@@67 T@U) (bx3@@51 T@U) (bx4@@35 T@U) (bx5@@19 T@U) (bx6@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@121) TyType) (= (type t1@@97) TyType)) (= (type t2@@78) TyType)) (= (type t3@@63) TyType)) (= (type t4@@48) TyType)) (= (type t5@@33) TyType)) (= (type t6@@18) TyType)) (= (type t7@@3) TyType)) (= (type h0@@43) (MapType0Type refType MapType1Type))) (= (type h1@@43) (MapType0Type refType MapType1Type))) (= (type f@@90) HandleTypeType)) (= (type bx0@@99) BoxType)) (= (type bx1@@83) BoxType)) (= (type bx2@@67) BoxType)) (= (type bx3@@51) BoxType)) (= (type bx4@@35) BoxType)) (= (type bx5@@19) BoxType)) (= (type bx6@@3) BoxType)) (and (and (and ($HeapSucc h0@@43 h1@@43) (and ($IsGoodHeap h0@@43) ($IsGoodHeap h1@@43))) (and (and (and (and (and (and (and ($IsBox bx0@@99 t0@@121) ($IsBox bx1@@83 t1@@97)) ($IsBox bx2@@67 t2@@78)) ($IsBox bx3@@51 t3@@63)) ($IsBox bx4@@35 t4@@48)) ($IsBox bx5@@19 t5@@33)) ($IsBox bx6@@3 t6@@18)) ($Is f@@90 (Tclass._System.___hFunc7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3)))) (forall ((o@@97 T@U) (fld@@42 T@U) ) (! (let ((a@@127 (FieldTypeInv0 (type fld@@42)))) (=> (and (and (= (type o@@97) refType) (= (type fld@@42) (FieldType a@@127))) (and (not (= o@@97 null)) (U_2_bool (MapType0Select (Reads7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3 h1@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35 bx5@@19 bx6@@3) ($Box o@@97))))) (= (MapType1Select (MapType0Select h0@@43 o@@97) fld@@42) (MapType1Select (MapType0Select h1@@43 o@@97) fld@@42)))) :qid |unknown.0:0| :skolemid |1071| :no-pattern (type o@@97) :no-pattern (type fld@@42) :no-pattern (U_2_int o@@97) :no-pattern (U_2_bool o@@97) :no-pattern (U_2_int fld@@42) :no-pattern (U_2_bool fld@@42) )))) (= (Reads7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3 h0@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35 bx5@@19 bx6@@3) (Reads7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3 h1@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35 bx5@@19 bx6@@3))) :qid |unknown.0:0| :skolemid |1072| :pattern ( ($HeapSucc h0@@43 h1@@43) (Reads7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3 h1@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35 bx5@@19 bx6@@3)) )))
(assert (forall ((t0@@122 T@U) (t1@@98 T@U) (t2@@79 T@U) (t3@@64 T@U) (t4@@49 T@U) (t5@@34 T@U) (t6@@19 T@U) (t7@@4 T@U) (h0@@44 T@U) (h1@@44 T@U) (f@@91 T@U) (bx0@@100 T@U) (bx1@@84 T@U) (bx2@@68 T@U) (bx3@@52 T@U) (bx4@@36 T@U) (bx5@@20 T@U) (bx6@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@122) TyType) (= (type t1@@98) TyType)) (= (type t2@@79) TyType)) (= (type t3@@64) TyType)) (= (type t4@@49) TyType)) (= (type t5@@34) TyType)) (= (type t6@@19) TyType)) (= (type t7@@4) TyType)) (= (type h0@@44) (MapType0Type refType MapType1Type))) (= (type h1@@44) (MapType0Type refType MapType1Type))) (= (type f@@91) HandleTypeType)) (= (type bx0@@100) BoxType)) (= (type bx1@@84) BoxType)) (= (type bx2@@68) BoxType)) (= (type bx3@@52) BoxType)) (= (type bx4@@36) BoxType)) (= (type bx5@@20) BoxType)) (= (type bx6@@4) BoxType)) (and (and (and ($HeapSucc h0@@44 h1@@44) (and ($IsGoodHeap h0@@44) ($IsGoodHeap h1@@44))) (and (and (and (and (and (and (and ($IsBox bx0@@100 t0@@122) ($IsBox bx1@@84 t1@@98)) ($IsBox bx2@@68 t2@@79)) ($IsBox bx3@@52 t3@@64)) ($IsBox bx4@@36 t4@@49)) ($IsBox bx5@@20 t5@@34)) ($IsBox bx6@@4 t6@@19)) ($Is f@@91 (Tclass._System.___hFunc7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4)))) (forall ((o@@98 T@U) (fld@@43 T@U) ) (! (let ((a@@128 (FieldTypeInv0 (type fld@@43)))) (=> (and (and (= (type o@@98) refType) (= (type fld@@43) (FieldType a@@128))) (and (not (= o@@98 null)) (U_2_bool (MapType0Select (Reads7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h0@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4) ($Box o@@98))))) (= (MapType1Select (MapType0Select h0@@44 o@@98) fld@@43) (MapType1Select (MapType0Select h1@@44 o@@98) fld@@43)))) :qid |unknown.0:0| :skolemid |1073| :no-pattern (type o@@98) :no-pattern (type fld@@43) :no-pattern (U_2_int o@@98) :no-pattern (U_2_bool o@@98) :no-pattern (U_2_int fld@@43) :no-pattern (U_2_bool fld@@43) )))) (and (=> (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h0@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4) (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h1@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4)) (=> (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h1@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4) (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h0@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4)))) :qid |unknown.0:0| :skolemid |1074| :pattern ( ($HeapSucc h0@@44 h1@@44) (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h1@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4)) )))
(assert (forall ((t0@@123 T@U) (t1@@99 T@U) (t2@@80 T@U) (t3@@65 T@U) (t4@@50 T@U) (t5@@35 T@U) (t6@@20 T@U) (t7@@5 T@U) (h0@@45 T@U) (h1@@45 T@U) (f@@92 T@U) (bx0@@101 T@U) (bx1@@85 T@U) (bx2@@69 T@U) (bx3@@53 T@U) (bx4@@37 T@U) (bx5@@21 T@U) (bx6@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@123) TyType) (= (type t1@@99) TyType)) (= (type t2@@80) TyType)) (= (type t3@@65) TyType)) (= (type t4@@50) TyType)) (= (type t5@@35) TyType)) (= (type t6@@20) TyType)) (= (type t7@@5) TyType)) (= (type h0@@45) (MapType0Type refType MapType1Type))) (= (type h1@@45) (MapType0Type refType MapType1Type))) (= (type f@@92) HandleTypeType)) (= (type bx0@@101) BoxType)) (= (type bx1@@85) BoxType)) (= (type bx2@@69) BoxType)) (= (type bx3@@53) BoxType)) (= (type bx4@@37) BoxType)) (= (type bx5@@21) BoxType)) (= (type bx6@@5) BoxType)) (and (and (and ($HeapSucc h0@@45 h1@@45) (and ($IsGoodHeap h0@@45) ($IsGoodHeap h1@@45))) (and (and (and (and (and (and (and ($IsBox bx0@@101 t0@@123) ($IsBox bx1@@85 t1@@99)) ($IsBox bx2@@69 t2@@80)) ($IsBox bx3@@53 t3@@65)) ($IsBox bx4@@37 t4@@50)) ($IsBox bx5@@21 t5@@35)) ($IsBox bx6@@5 t6@@20)) ($Is f@@92 (Tclass._System.___hFunc7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5)))) (forall ((o@@99 T@U) (fld@@44 T@U) ) (! (let ((a@@129 (FieldTypeInv0 (type fld@@44)))) (=> (and (and (= (type o@@99) refType) (= (type fld@@44) (FieldType a@@129))) (and (not (= o@@99 null)) (U_2_bool (MapType0Select (Reads7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5) ($Box o@@99))))) (= (MapType1Select (MapType0Select h0@@45 o@@99) fld@@44) (MapType1Select (MapType0Select h1@@45 o@@99) fld@@44)))) :qid |unknown.0:0| :skolemid |1075| :no-pattern (type o@@99) :no-pattern (type fld@@44) :no-pattern (U_2_int o@@99) :no-pattern (U_2_bool o@@99) :no-pattern (U_2_int fld@@44) :no-pattern (U_2_bool fld@@44) )))) (and (=> (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h0@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5) (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5)) (=> (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5) (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h0@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5)))) :qid |unknown.0:0| :skolemid |1076| :pattern ( ($HeapSucc h0@@45 h1@@45) (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5)) )))
(assert (forall ((t0@@124 T@U) (t1@@100 T@U) (t2@@81 T@U) (t3@@66 T@U) (t4@@51 T@U) (t5@@36 T@U) (t6@@21 T@U) (t7@@6 T@U) (h0@@46 T@U) (h1@@46 T@U) (f@@93 T@U) (bx0@@102 T@U) (bx1@@86 T@U) (bx2@@70 T@U) (bx3@@54 T@U) (bx4@@38 T@U) (bx5@@22 T@U) (bx6@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@124) TyType) (= (type t1@@100) TyType)) (= (type t2@@81) TyType)) (= (type t3@@66) TyType)) (= (type t4@@51) TyType)) (= (type t5@@36) TyType)) (= (type t6@@21) TyType)) (= (type t7@@6) TyType)) (= (type h0@@46) (MapType0Type refType MapType1Type))) (= (type h1@@46) (MapType0Type refType MapType1Type))) (= (type f@@93) HandleTypeType)) (= (type bx0@@102) BoxType)) (= (type bx1@@86) BoxType)) (= (type bx2@@70) BoxType)) (= (type bx3@@54) BoxType)) (= (type bx4@@38) BoxType)) (= (type bx5@@22) BoxType)) (= (type bx6@@6) BoxType)) (and (and (and ($HeapSucc h0@@46 h1@@46) (and ($IsGoodHeap h0@@46) ($IsGoodHeap h1@@46))) (and (and (and (and (and (and (and ($IsBox bx0@@102 t0@@124) ($IsBox bx1@@86 t1@@100)) ($IsBox bx2@@70 t2@@81)) ($IsBox bx3@@54 t3@@66)) ($IsBox bx4@@38 t4@@51)) ($IsBox bx5@@22 t5@@36)) ($IsBox bx6@@6 t6@@21)) ($Is f@@93 (Tclass._System.___hFunc7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6)))) (forall ((o@@100 T@U) (fld@@45 T@U) ) (! (let ((a@@130 (FieldTypeInv0 (type fld@@45)))) (=> (and (and (= (type o@@100) refType) (= (type fld@@45) (FieldType a@@130))) (and (not (= o@@100 null)) (U_2_bool (MapType0Select (Reads7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6 h0@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38 bx5@@22 bx6@@6) ($Box o@@100))))) (= (MapType1Select (MapType0Select h0@@46 o@@100) fld@@45) (MapType1Select (MapType0Select h1@@46 o@@100) fld@@45)))) :qid |unknown.0:0| :skolemid |1077| :no-pattern (type o@@100) :no-pattern (type fld@@45) :no-pattern (U_2_int o@@100) :no-pattern (U_2_bool o@@100) :no-pattern (U_2_int fld@@45) :no-pattern (U_2_bool fld@@45) )))) (= (Apply7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6 h0@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38 bx5@@22 bx6@@6) (Apply7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6 h1@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38 bx5@@22 bx6@@6))) :qid |unknown.0:0| :skolemid |1078| :pattern ( ($HeapSucc h0@@46 h1@@46) (Apply7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6 h1@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38 bx5@@22 bx6@@6)) )))
(assert (forall ((t0@@125 T@U) (t1@@101 T@U) (t2@@82 T@U) (t3@@67 T@U) (t4@@52 T@U) (t5@@37 T@U) (t6@@22 T@U) (t7@@7 T@U) (h0@@47 T@U) (h1@@47 T@U) (f@@94 T@U) (bx0@@103 T@U) (bx1@@87 T@U) (bx2@@71 T@U) (bx3@@55 T@U) (bx4@@39 T@U) (bx5@@23 T@U) (bx6@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@125) TyType) (= (type t1@@101) TyType)) (= (type t2@@82) TyType)) (= (type t3@@67) TyType)) (= (type t4@@52) TyType)) (= (type t5@@37) TyType)) (= (type t6@@22) TyType)) (= (type t7@@7) TyType)) (= (type h0@@47) (MapType0Type refType MapType1Type))) (= (type h1@@47) (MapType0Type refType MapType1Type))) (= (type f@@94) HandleTypeType)) (= (type bx0@@103) BoxType)) (= (type bx1@@87) BoxType)) (= (type bx2@@71) BoxType)) (= (type bx3@@55) BoxType)) (= (type bx4@@39) BoxType)) (= (type bx5@@23) BoxType)) (= (type bx6@@7) BoxType)) (and (and (and ($HeapSucc h0@@47 h1@@47) (and ($IsGoodHeap h0@@47) ($IsGoodHeap h1@@47))) (and (and (and (and (and (and (and ($IsBox bx0@@103 t0@@125) ($IsBox bx1@@87 t1@@101)) ($IsBox bx2@@71 t2@@82)) ($IsBox bx3@@55 t3@@67)) ($IsBox bx4@@39 t4@@52)) ($IsBox bx5@@23 t5@@37)) ($IsBox bx6@@7 t6@@22)) ($Is f@@94 (Tclass._System.___hFunc7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7)))) (forall ((o@@101 T@U) (fld@@46 T@U) ) (! (let ((a@@131 (FieldTypeInv0 (type fld@@46)))) (=> (and (and (= (type o@@101) refType) (= (type fld@@46) (FieldType a@@131))) (and (not (= o@@101 null)) (U_2_bool (MapType0Select (Reads7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7 h1@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39 bx5@@23 bx6@@7) ($Box o@@101))))) (= (MapType1Select (MapType0Select h0@@47 o@@101) fld@@46) (MapType1Select (MapType0Select h1@@47 o@@101) fld@@46)))) :qid |unknown.0:0| :skolemid |1079| :no-pattern (type o@@101) :no-pattern (type fld@@46) :no-pattern (U_2_int o@@101) :no-pattern (U_2_bool o@@101) :no-pattern (U_2_int fld@@46) :no-pattern (U_2_bool fld@@46) )))) (= (Apply7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7 h0@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39 bx5@@23 bx6@@7) (Apply7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7 h1@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39 bx5@@23 bx6@@7))) :qid |unknown.0:0| :skolemid |1080| :pattern ( ($HeapSucc h0@@47 h1@@47) (Apply7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7 h1@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39 bx5@@23 bx6@@7)) )))
(assert (forall ((t0@@126 T@U) (t1@@102 T@U) (t2@@83 T@U) (t3@@68 T@U) (t4@@53 T@U) (t5@@38 T@U) (t6@@23 T@U) (t7@@8 T@U) (heap@@39 T@U) (f@@95 T@U) (bx0@@104 T@U) (bx1@@88 T@U) (bx2@@72 T@U) (bx3@@56 T@U) (bx4@@40 T@U) (bx5@@24 T@U) (bx6@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@126) TyType) (= (type t1@@102) TyType)) (= (type t2@@83) TyType)) (= (type t3@@68) TyType)) (= (type t4@@53) TyType)) (= (type t5@@38) TyType)) (= (type t6@@23) TyType)) (= (type t7@@8) TyType)) (= (type heap@@39) (MapType0Type refType MapType1Type))) (= (type f@@95) HandleTypeType)) (= (type bx0@@104) BoxType)) (= (type bx1@@88) BoxType)) (= (type bx2@@72) BoxType)) (= (type bx3@@56) BoxType)) (= (type bx4@@40) BoxType)) (= (type bx5@@24) BoxType)) (= (type bx6@@8) BoxType)) (and ($IsGoodHeap heap@@39) (and (and (and (and (and (and (and ($IsBox bx0@@104 t0@@126) ($IsBox bx1@@88 t1@@102)) ($IsBox bx2@@72 t2@@83)) ($IsBox bx3@@56 t3@@68)) ($IsBox bx4@@40 t4@@53)) ($IsBox bx5@@24 t5@@38)) ($IsBox bx6@@8 t6@@23)) ($Is f@@95 (Tclass._System.___hFunc7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8))))) (and (=> (|Set#Equal| (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 $OneHeap f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 heap@@39 f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 heap@@39 f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 $OneHeap f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1081| :pattern ( (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 $OneHeap f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) ($IsGoodHeap heap@@39)) :pattern ( (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 heap@@39 f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8)) )))
(assert (forall ((t0@@127 T@U) (t1@@103 T@U) (t2@@84 T@U) (t3@@69 T@U) (t4@@54 T@U) (t5@@39 T@U) (t6@@24 T@U) (t7@@9 T@U) (heap@@40 T@U) (f@@96 T@U) (bx0@@105 T@U) (bx1@@89 T@U) (bx2@@73 T@U) (bx3@@57 T@U) (bx4@@41 T@U) (bx5@@25 T@U) (bx6@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@127) TyType) (= (type t1@@103) TyType)) (= (type t2@@84) TyType)) (= (type t3@@69) TyType)) (= (type t4@@54) TyType)) (= (type t5@@39) TyType)) (= (type t6@@24) TyType)) (= (type t7@@9) TyType)) (= (type heap@@40) (MapType0Type refType MapType1Type))) (= (type f@@96) HandleTypeType)) (= (type bx0@@105) BoxType)) (= (type bx1@@89) BoxType)) (= (type bx2@@73) BoxType)) (= (type bx3@@57) BoxType)) (= (type bx4@@41) BoxType)) (= (type bx5@@25) BoxType)) (= (type bx6@@9) BoxType)) (and (and ($IsGoodHeap heap@@40) (and (and (and (and (and (and (and ($IsBox bx0@@105 t0@@127) ($IsBox bx1@@89 t1@@103)) ($IsBox bx2@@73 t2@@84)) ($IsBox bx3@@57 t3@@69)) ($IsBox bx4@@41 t4@@54)) ($IsBox bx5@@25 t5@@39)) ($IsBox bx6@@9 t6@@24)) ($Is f@@96 (Tclass._System.___hFunc7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9)))) (|Set#Equal| (Reads7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9) (|Set#Empty| BoxType)))) (and (=> (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9) (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 heap@@40 f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9)) (=> (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 heap@@40 f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9) (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9)))) :qid |unknown.0:0| :skolemid |1082| :pattern ( (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9) ($IsGoodHeap heap@@40)) :pattern ( (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 heap@@40 f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9)) )))
(assert (forall ((f@@97 T@U) (t0@@128 T@U) (t1@@104 T@U) (t2@@85 T@U) (t3@@70 T@U) (t4@@55 T@U) (t5@@40 T@U) (t6@@25 T@U) (t7@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@97) HandleTypeType) (= (type t0@@128) TyType)) (= (type t1@@104) TyType)) (= (type t2@@85) TyType)) (= (type t3@@70) TyType)) (= (type t4@@55) TyType)) (= (type t5@@40) TyType)) (= (type t6@@25) TyType)) (= (type t7@@10) TyType)) (and (=> ($Is f@@97 (Tclass._System.___hFunc7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10)) (forall ((h@@72 T@U) (bx0@@106 T@U) (bx1@@90 T@U) (bx2@@74 T@U) (bx3@@58 T@U) (bx4@@42 T@U) (bx5@@26 T@U) (bx6@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type h@@72) (MapType0Type refType MapType1Type)) (= (type bx0@@106) BoxType)) (= (type bx1@@90) BoxType)) (= (type bx2@@74) BoxType)) (= (type bx3@@58) BoxType)) (= (type bx4@@42) BoxType)) (= (type bx5@@26) BoxType)) (= (type bx6@@10) BoxType)) (and (and ($IsGoodHeap h@@72) (and (and (and (and (and (and ($IsBox bx0@@106 t0@@128) ($IsBox bx1@@90 t1@@104)) ($IsBox bx2@@74 t2@@85)) ($IsBox bx3@@58 t3@@70)) ($IsBox bx4@@42 t4@@55)) ($IsBox bx5@@26 t5@@40)) ($IsBox bx6@@10 t6@@25))) (Requires7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@72 f@@97 bx0@@106 bx1@@90 bx2@@74 bx3@@58 bx4@@42 bx5@@26 bx6@@10))) ($IsBox (Apply7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@72 f@@97 bx0@@106 bx1@@90 bx2@@74 bx3@@58 bx4@@42 bx5@@26 bx6@@10) t7@@10)) :qid |DafnyPre.521:12| :skolemid |1083| :pattern ( (Apply7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@72 f@@97 bx0@@106 bx1@@90 bx2@@74 bx3@@58 bx4@@42 bx5@@26 bx6@@10)) ))) (=> (forall ((h@@73 T@U) (bx0@@107 T@U) (bx1@@91 T@U) (bx2@@75 T@U) (bx3@@59 T@U) (bx4@@43 T@U) (bx5@@27 T@U) (bx6@@11 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type h@@73) (MapType0Type refType MapType1Type)) (= (type bx0@@107) BoxType)) (= (type bx1@@91) BoxType)) (= (type bx2@@75) BoxType)) (= (type bx3@@59) BoxType)) (= (type bx4@@43) BoxType)) (= (type bx5@@27) BoxType)) (= (type bx6@@11) BoxType)) (and (and ($IsGoodHeap h@@73) (and (and (and (and (and (and ($IsBox bx0@@107 t0@@128) ($IsBox bx1@@91 t1@@104)) ($IsBox bx2@@75 t2@@85)) ($IsBox bx3@@59 t3@@70)) ($IsBox bx4@@43 t4@@55)) ($IsBox bx5@@27 t5@@40)) ($IsBox bx6@@11 t6@@25))) (Requires7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@73 f@@97 bx0@@107 bx1@@91 bx2@@75 bx3@@59 bx4@@43 bx5@@27 bx6@@11))) ($IsBox (Apply7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@73 f@@97 bx0@@107 bx1@@91 bx2@@75 bx3@@59 bx4@@43 bx5@@27 bx6@@11) t7@@10)) :qid |DafnyPre.521:12| :skolemid |1083| :pattern ( (Apply7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@73 f@@97 bx0@@107 bx1@@91 bx2@@75 bx3@@59 bx4@@43 bx5@@27 bx6@@11)) )) ($Is f@@97 (Tclass._System.___hFunc7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10))))) :qid |unknown.0:0| :skolemid |1084| :pattern ( ($Is f@@97 (Tclass._System.___hFunc7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10))) )))
(assert (forall ((f@@98 T@U) (t0@@129 T@U) (t1@@105 T@U) (t2@@86 T@U) (t3@@71 T@U) (t4@@56 T@U) (t5@@41 T@U) (t6@@26 T@U) (t7@@11 T@U) (u0@@6 T@U) (u1@@5 T@U) (u2@@4 T@U) (u3@@3 T@U) (u4@@2 T@U) (u5@@1 T@U) (u6@@0 T@U) (u7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@98) HandleTypeType) (= (type t0@@129) TyType)) (= (type t1@@105) TyType)) (= (type t2@@86) TyType)) (= (type t3@@71) TyType)) (= (type t4@@56) TyType)) (= (type t5@@41) TyType)) (= (type t6@@26) TyType)) (= (type t7@@11) TyType)) (= (type u0@@6) TyType)) (= (type u1@@5) TyType)) (= (type u2@@4) TyType)) (= (type u3@@3) TyType)) (= (type u4@@2) TyType)) (= (type u5@@1) TyType)) (= (type u6@@0) TyType)) (= (type u7) TyType)) (and (and (and (and (and (and (and (and ($Is f@@98 (Tclass._System.___hFunc7 t0@@129 t1@@105 t2@@86 t3@@71 t4@@56 t5@@41 t6@@26 t7@@11)) (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 u0@@6)) ($IsBox bx@@99 t0@@129)) :qid |unknown.0:0| :skolemid |1085| :pattern ( ($IsBox bx@@99 u0@@6)) :pattern ( ($IsBox bx@@99 t0@@129)) ))) (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 u1@@5)) ($IsBox bx@@100 t1@@105)) :qid |unknown.0:0| :skolemid |1086| :pattern ( ($IsBox bx@@100 u1@@5)) :pattern ( ($IsBox bx@@100 t1@@105)) ))) (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 u2@@4)) ($IsBox bx@@101 t2@@86)) :qid |unknown.0:0| :skolemid |1087| :pattern ( ($IsBox bx@@101 u2@@4)) :pattern ( ($IsBox bx@@101 t2@@86)) ))) (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 u3@@3)) ($IsBox bx@@102 t3@@71)) :qid |unknown.0:0| :skolemid |1088| :pattern ( ($IsBox bx@@102 u3@@3)) :pattern ( ($IsBox bx@@102 t3@@71)) ))) (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 u4@@2)) ($IsBox bx@@103 t4@@56)) :qid |unknown.0:0| :skolemid |1089| :pattern ( ($IsBox bx@@103 u4@@2)) :pattern ( ($IsBox bx@@103 t4@@56)) ))) (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 u5@@1)) ($IsBox bx@@104 t5@@41)) :qid |unknown.0:0| :skolemid |1090| :pattern ( ($IsBox bx@@104 u5@@1)) :pattern ( ($IsBox bx@@104 t5@@41)) ))) (forall ((bx@@105 T@U) ) (!  (=> (and (= (type bx@@105) BoxType) ($IsBox bx@@105 u6@@0)) ($IsBox bx@@105 t6@@26)) :qid |unknown.0:0| :skolemid |1091| :pattern ( ($IsBox bx@@105 u6@@0)) :pattern ( ($IsBox bx@@105 t6@@26)) ))) (forall ((bx@@106 T@U) ) (!  (=> (and (= (type bx@@106) BoxType) ($IsBox bx@@106 t7@@11)) ($IsBox bx@@106 u7)) :qid |unknown.0:0| :skolemid |1092| :pattern ( ($IsBox bx@@106 t7@@11)) :pattern ( ($IsBox bx@@106 u7)) )))) ($Is f@@98 (Tclass._System.___hFunc7 u0@@6 u1@@5 u2@@4 u3@@3 u4@@2 u5@@1 u6@@0 u7))) :qid |unknown.0:0| :skolemid |1093| :pattern ( ($Is f@@98 (Tclass._System.___hFunc7 t0@@129 t1@@105 t2@@86 t3@@71 t4@@56 t5@@41 t6@@26 t7@@11)) ($Is f@@98 (Tclass._System.___hFunc7 u0@@6 u1@@5 u2@@4 u3@@3 u4@@2 u5@@1 u6@@0 u7))) )))
(assert (forall ((f@@99 T@U) (t0@@130 T@U) (t1@@106 T@U) (t2@@87 T@U) (t3@@72 T@U) (t4@@57 T@U) (t5@@42 T@U) (t6@@27 T@U) (t7@@12 T@U) (h@@74 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type f@@99) HandleTypeType) (= (type t0@@130) TyType)) (= (type t1@@106) TyType)) (= (type t2@@87) TyType)) (= (type t3@@72) TyType)) (= (type t4@@57) TyType)) (= (type t5@@42) TyType)) (= (type t6@@27) TyType)) (= (type t7@@12) TyType)) (= (type h@@74) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@74)) (and (=> ($IsAlloc f@@99 (Tclass._System.___hFunc7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12) h@@74) (forall ((bx0@@108 T@U) (bx1@@92 T@U) (bx2@@76 T@U) (bx3@@60 T@U) (bx4@@44 T@U) (bx5@@28 T@U) (bx6@@12 T@U) ) (!  (=> (and (and (and (and (and (and (= (type bx0@@108) BoxType) (= (type bx1@@92) BoxType)) (= (type bx2@@76) BoxType)) (= (type bx3@@60) BoxType)) (= (type bx4@@44) BoxType)) (= (type bx5@@28) BoxType)) (= (type bx6@@12) BoxType)) (=> (and (and (and (and (and (and (and (and ($IsBox bx0@@108 t0@@130) ($IsAllocBox bx0@@108 t0@@130 h@@74)) (and ($IsBox bx1@@92 t1@@106) ($IsAllocBox bx1@@92 t1@@106 h@@74))) (and ($IsBox bx2@@76 t2@@87) ($IsAllocBox bx2@@76 t2@@87 h@@74))) (and ($IsBox bx3@@60 t3@@72) ($IsAllocBox bx3@@60 t3@@72 h@@74))) (and ($IsBox bx4@@44 t4@@57) ($IsAllocBox bx4@@44 t4@@57 h@@74))) (and ($IsBox bx5@@28 t5@@42) ($IsAllocBox bx5@@28 t5@@42 h@@74))) (and ($IsBox bx6@@12 t6@@27) ($IsAllocBox bx6@@12 t6@@27 h@@74))) (Requires7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12)) (forall ((r@@44 T@U) ) (!  (=> (= (type r@@44) refType) (=> (and (not (= r@@44 null)) (U_2_bool (MapType0Select (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12) ($Box r@@44)))) (U_2_bool (MapType1Select (MapType0Select h@@74 r@@44) alloc)))) :qid |unknown.0:0| :skolemid |1094| :pattern ( (MapType0Select (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12) ($Box r@@44))) )))) :qid |unknown.0:0| :skolemid |1095| :pattern ( (Apply7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12)) :pattern ( (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12)) ))) (=> (forall ((bx0@@109 T@U) (bx1@@93 T@U) (bx2@@77 T@U) (bx3@@61 T@U) (bx4@@45 T@U) (bx5@@29 T@U) (bx6@@13 T@U) ) (!  (=> (and (and (and (and (and (and (= (type bx0@@109) BoxType) (= (type bx1@@93) BoxType)) (= (type bx2@@77) BoxType)) (= (type bx3@@61) BoxType)) (= (type bx4@@45) BoxType)) (= (type bx5@@29) BoxType)) (= (type bx6@@13) BoxType)) (=> (and (and (and (and (and (and (and (and ($IsBox bx0@@109 t0@@130) ($IsAllocBox bx0@@109 t0@@130 h@@74)) (and ($IsBox bx1@@93 t1@@106) ($IsAllocBox bx1@@93 t1@@106 h@@74))) (and ($IsBox bx2@@77 t2@@87) ($IsAllocBox bx2@@77 t2@@87 h@@74))) (and ($IsBox bx3@@61 t3@@72) ($IsAllocBox bx3@@61 t3@@72 h@@74))) (and ($IsBox bx4@@45 t4@@57) ($IsAllocBox bx4@@45 t4@@57 h@@74))) (and ($IsBox bx5@@29 t5@@42) ($IsAllocBox bx5@@29 t5@@42 h@@74))) (and ($IsBox bx6@@13 t6@@27) ($IsAllocBox bx6@@13 t6@@27 h@@74))) (Requires7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13)) (forall ((r@@45 T@U) ) (!  (=> (= (type r@@45) refType) (=> (and (not (= r@@45 null)) (U_2_bool (MapType0Select (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13) ($Box r@@45)))) (U_2_bool (MapType1Select (MapType0Select h@@74 r@@45) alloc)))) :qid |unknown.0:0| :skolemid |1094| :pattern ( (MapType0Select (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13) ($Box r@@45))) )))) :qid |unknown.0:0| :skolemid |1095| :pattern ( (Apply7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13)) :pattern ( (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13)) )) ($IsAlloc f@@99 (Tclass._System.___hFunc7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12) h@@74)))) :qid |unknown.0:0| :skolemid |1096| :pattern ( ($IsAlloc f@@99 (Tclass._System.___hFunc7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12) h@@74)) )))
(assert (forall ((f@@100 T@U) (t0@@131 T@U) (t1@@107 T@U) (t2@@88 T@U) (t3@@73 T@U) (t4@@58 T@U) (t5@@43 T@U) (t6@@28 T@U) (t7@@13 T@U) (h@@75 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type f@@100) HandleTypeType) (= (type t0@@131) TyType)) (= (type t1@@107) TyType)) (= (type t2@@88) TyType)) (= (type t3@@73) TyType)) (= (type t4@@58) TyType)) (= (type t5@@43) TyType)) (= (type t6@@28) TyType)) (= (type t7@@13) TyType)) (= (type h@@75) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@75) ($IsAlloc f@@100 (Tclass._System.___hFunc7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13) h@@75))) (forall ((bx0@@110 T@U) (bx1@@94 T@U) (bx2@@78 T@U) (bx3@@62 T@U) (bx4@@46 T@U) (bx5@@30 T@U) (bx6@@14 T@U) ) (!  (=> (and (and (and (and (and (and (= (type bx0@@110) BoxType) (= (type bx1@@94) BoxType)) (= (type bx2@@78) BoxType)) (= (type bx3@@62) BoxType)) (= (type bx4@@46) BoxType)) (= (type bx5@@30) BoxType)) (= (type bx6@@14) BoxType)) (=> (and (and (and (and (and (and (and ($IsAllocBox bx0@@110 t0@@131 h@@75) ($IsAllocBox bx1@@94 t1@@107 h@@75)) ($IsAllocBox bx2@@78 t2@@88 h@@75)) ($IsAllocBox bx3@@62 t3@@73 h@@75)) ($IsAllocBox bx4@@46 t4@@58 h@@75)) ($IsAllocBox bx5@@30 t5@@43 h@@75)) ($IsAllocBox bx6@@14 t6@@28 h@@75)) (Requires7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13 h@@75 f@@100 bx0@@110 bx1@@94 bx2@@78 bx3@@62 bx4@@46 bx5@@30 bx6@@14)) ($IsAllocBox (Apply7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13 h@@75 f@@100 bx0@@110 bx1@@94 bx2@@78 bx3@@62 bx4@@46 bx5@@30 bx6@@14) t7@@13 h@@75))) :qid |unknown.0:0| :skolemid |1097| :pattern ( (Apply7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13 h@@75 f@@100 bx0@@110 bx1@@94 bx2@@78 bx3@@62 bx4@@46 bx5@@30 bx6@@14)) ))) :qid |unknown.0:0| :skolemid |1098| :pattern ( ($IsAlloc f@@100 (Tclass._System.___hFunc7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13) h@@75)) )))
(assert (forall ((arg0@@313 T@U) (arg1@@154 T@U) (arg2@@110 T@U) (arg3@@85 T@U) (arg4@@74 T@U) (arg5@@61 T@U) (arg6@@49 T@U) (arg7@@34 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7 arg0@@313 arg1@@154 arg2@@110 arg3@@85 arg4@@74 arg5@@61 arg6@@49 arg7@@34)) TyType) :qid |funType:Tclass._System.___hPartialFunc7| :pattern ( (Tclass._System.___hPartialFunc7 arg0@@313 arg1@@154 arg2@@110 arg3@@85 arg4@@74 arg5@@61 arg6@@49 arg7@@34)) )))
(assert (forall ((|#$T0@@159| T@U) (|#$T1@@143| T@U) (|#$T2@@115| T@U) (|#$T3@@93| T@U) (|#$T4@@68| T@U) (|#$T5@@40| T@U) (|#$T6@@9| T@U) (|#$R@@163| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@159|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$T2@@115|) TyType)) (= (type |#$T3@@93|) TyType)) (= (type |#$T4@@68|) TyType)) (= (type |#$T5@@40|) TyType)) (= (type |#$T6@@9|) TyType)) (= (type |#$R@@163|) TyType)) (= (Tag (Tclass._System.___hPartialFunc7 |#$T0@@159| |#$T1@@143| |#$T2@@115| |#$T3@@93| |#$T4@@68| |#$T5@@40| |#$T6@@9| |#$R@@163|)) Tagclass._System.___hPartialFunc7)) :qid |unknown.0:0| :skolemid |1099| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@159| |#$T1@@143| |#$T2@@115| |#$T3@@93| |#$T4@@68| |#$T5@@40| |#$T6@@9| |#$R@@163|)) )))
(assert (forall ((arg0@@314 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_0 arg0@@314)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_0| :pattern ( (Tclass._System.___hPartialFunc7_0 arg0@@314)) )))
(assert (forall ((|#$T0@@160| T@U) (|#$T1@@144| T@U) (|#$T2@@116| T@U) (|#$T3@@94| T@U) (|#$T4@@69| T@U) (|#$T5@@41| T@U) (|#$T6@@10| T@U) (|#$R@@164| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@160|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$T2@@116|) TyType)) (= (type |#$T3@@94|) TyType)) (= (type |#$T4@@69|) TyType)) (= (type |#$T5@@41|) TyType)) (= (type |#$T6@@10|) TyType)) (= (type |#$R@@164|) TyType)) (= (Tclass._System.___hPartialFunc7_0 (Tclass._System.___hPartialFunc7 |#$T0@@160| |#$T1@@144| |#$T2@@116| |#$T3@@94| |#$T4@@69| |#$T5@@41| |#$T6@@10| |#$R@@164|)) |#$T0@@160|)) :qid |unknown.0:0| :skolemid |1100| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@160| |#$T1@@144| |#$T2@@116| |#$T3@@94| |#$T4@@69| |#$T5@@41| |#$T6@@10| |#$R@@164|)) )))
(assert (forall ((arg0@@315 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_1 arg0@@315)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_1| :pattern ( (Tclass._System.___hPartialFunc7_1 arg0@@315)) )))
(assert (forall ((|#$T0@@161| T@U) (|#$T1@@145| T@U) (|#$T2@@117| T@U) (|#$T3@@95| T@U) (|#$T4@@70| T@U) (|#$T5@@42| T@U) (|#$T6@@11| T@U) (|#$R@@165| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@161|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$T2@@117|) TyType)) (= (type |#$T3@@95|) TyType)) (= (type |#$T4@@70|) TyType)) (= (type |#$T5@@42|) TyType)) (= (type |#$T6@@11|) TyType)) (= (type |#$R@@165|) TyType)) (= (Tclass._System.___hPartialFunc7_1 (Tclass._System.___hPartialFunc7 |#$T0@@161| |#$T1@@145| |#$T2@@117| |#$T3@@95| |#$T4@@70| |#$T5@@42| |#$T6@@11| |#$R@@165|)) |#$T1@@145|)) :qid |unknown.0:0| :skolemid |1101| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@161| |#$T1@@145| |#$T2@@117| |#$T3@@95| |#$T4@@70| |#$T5@@42| |#$T6@@11| |#$R@@165|)) )))
(assert (forall ((arg0@@316 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_2 arg0@@316)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_2| :pattern ( (Tclass._System.___hPartialFunc7_2 arg0@@316)) )))
(assert (forall ((|#$T0@@162| T@U) (|#$T1@@146| T@U) (|#$T2@@118| T@U) (|#$T3@@96| T@U) (|#$T4@@71| T@U) (|#$T5@@43| T@U) (|#$T6@@12| T@U) (|#$R@@166| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@162|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$T2@@118|) TyType)) (= (type |#$T3@@96|) TyType)) (= (type |#$T4@@71|) TyType)) (= (type |#$T5@@43|) TyType)) (= (type |#$T6@@12|) TyType)) (= (type |#$R@@166|) TyType)) (= (Tclass._System.___hPartialFunc7_2 (Tclass._System.___hPartialFunc7 |#$T0@@162| |#$T1@@146| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$T5@@43| |#$T6@@12| |#$R@@166|)) |#$T2@@118|)) :qid |unknown.0:0| :skolemid |1102| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@162| |#$T1@@146| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$T5@@43| |#$T6@@12| |#$R@@166|)) )))
(assert (forall ((arg0@@317 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_3 arg0@@317)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_3| :pattern ( (Tclass._System.___hPartialFunc7_3 arg0@@317)) )))
(assert (forall ((|#$T0@@163| T@U) (|#$T1@@147| T@U) (|#$T2@@119| T@U) (|#$T3@@97| T@U) (|#$T4@@72| T@U) (|#$T5@@44| T@U) (|#$T6@@13| T@U) (|#$R@@167| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@163|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$T2@@119|) TyType)) (= (type |#$T3@@97|) TyType)) (= (type |#$T4@@72|) TyType)) (= (type |#$T5@@44|) TyType)) (= (type |#$T6@@13|) TyType)) (= (type |#$R@@167|) TyType)) (= (Tclass._System.___hPartialFunc7_3 (Tclass._System.___hPartialFunc7 |#$T0@@163| |#$T1@@147| |#$T2@@119| |#$T3@@97| |#$T4@@72| |#$T5@@44| |#$T6@@13| |#$R@@167|)) |#$T3@@97|)) :qid |unknown.0:0| :skolemid |1103| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@163| |#$T1@@147| |#$T2@@119| |#$T3@@97| |#$T4@@72| |#$T5@@44| |#$T6@@13| |#$R@@167|)) )))
(assert (forall ((arg0@@318 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_4 arg0@@318)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_4| :pattern ( (Tclass._System.___hPartialFunc7_4 arg0@@318)) )))
(assert (forall ((|#$T0@@164| T@U) (|#$T1@@148| T@U) (|#$T2@@120| T@U) (|#$T3@@98| T@U) (|#$T4@@73| T@U) (|#$T5@@45| T@U) (|#$T6@@14| T@U) (|#$R@@168| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@164|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$T2@@120|) TyType)) (= (type |#$T3@@98|) TyType)) (= (type |#$T4@@73|) TyType)) (= (type |#$T5@@45|) TyType)) (= (type |#$T6@@14|) TyType)) (= (type |#$R@@168|) TyType)) (= (Tclass._System.___hPartialFunc7_4 (Tclass._System.___hPartialFunc7 |#$T0@@164| |#$T1@@148| |#$T2@@120| |#$T3@@98| |#$T4@@73| |#$T5@@45| |#$T6@@14| |#$R@@168|)) |#$T4@@73|)) :qid |unknown.0:0| :skolemid |1104| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@164| |#$T1@@148| |#$T2@@120| |#$T3@@98| |#$T4@@73| |#$T5@@45| |#$T6@@14| |#$R@@168|)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_5 arg0@@319)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_5| :pattern ( (Tclass._System.___hPartialFunc7_5 arg0@@319)) )))
(assert (forall ((|#$T0@@165| T@U) (|#$T1@@149| T@U) (|#$T2@@121| T@U) (|#$T3@@99| T@U) (|#$T4@@74| T@U) (|#$T5@@46| T@U) (|#$T6@@15| T@U) (|#$R@@169| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@165|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$T2@@121|) TyType)) (= (type |#$T3@@99|) TyType)) (= (type |#$T4@@74|) TyType)) (= (type |#$T5@@46|) TyType)) (= (type |#$T6@@15|) TyType)) (= (type |#$R@@169|) TyType)) (= (Tclass._System.___hPartialFunc7_5 (Tclass._System.___hPartialFunc7 |#$T0@@165| |#$T1@@149| |#$T2@@121| |#$T3@@99| |#$T4@@74| |#$T5@@46| |#$T6@@15| |#$R@@169|)) |#$T5@@46|)) :qid |unknown.0:0| :skolemid |1105| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@165| |#$T1@@149| |#$T2@@121| |#$T3@@99| |#$T4@@74| |#$T5@@46| |#$T6@@15| |#$R@@169|)) )))
(assert (forall ((arg0@@320 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_6 arg0@@320)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_6| :pattern ( (Tclass._System.___hPartialFunc7_6 arg0@@320)) )))
(assert (forall ((|#$T0@@166| T@U) (|#$T1@@150| T@U) (|#$T2@@122| T@U) (|#$T3@@100| T@U) (|#$T4@@75| T@U) (|#$T5@@47| T@U) (|#$T6@@16| T@U) (|#$R@@170| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@166|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$T2@@122|) TyType)) (= (type |#$T3@@100|) TyType)) (= (type |#$T4@@75|) TyType)) (= (type |#$T5@@47|) TyType)) (= (type |#$T6@@16|) TyType)) (= (type |#$R@@170|) TyType)) (= (Tclass._System.___hPartialFunc7_6 (Tclass._System.___hPartialFunc7 |#$T0@@166| |#$T1@@150| |#$T2@@122| |#$T3@@100| |#$T4@@75| |#$T5@@47| |#$T6@@16| |#$R@@170|)) |#$T6@@16|)) :qid |unknown.0:0| :skolemid |1106| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@166| |#$T1@@150| |#$T2@@122| |#$T3@@100| |#$T4@@75| |#$T5@@47| |#$T6@@16| |#$R@@170|)) )))
(assert (forall ((arg0@@321 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_7 arg0@@321)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_7| :pattern ( (Tclass._System.___hPartialFunc7_7 arg0@@321)) )))
(assert (forall ((|#$T0@@167| T@U) (|#$T1@@151| T@U) (|#$T2@@123| T@U) (|#$T3@@101| T@U) (|#$T4@@76| T@U) (|#$T5@@48| T@U) (|#$T6@@17| T@U) (|#$R@@171| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@167|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$T2@@123|) TyType)) (= (type |#$T3@@101|) TyType)) (= (type |#$T4@@76|) TyType)) (= (type |#$T5@@48|) TyType)) (= (type |#$T6@@17|) TyType)) (= (type |#$R@@171|) TyType)) (= (Tclass._System.___hPartialFunc7_7 (Tclass._System.___hPartialFunc7 |#$T0@@167| |#$T1@@151| |#$T2@@123| |#$T3@@101| |#$T4@@76| |#$T5@@48| |#$T6@@17| |#$R@@171|)) |#$R@@171|)) :qid |unknown.0:0| :skolemid |1107| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@167| |#$T1@@151| |#$T2@@123| |#$T3@@101| |#$T4@@76| |#$T5@@48| |#$T6@@17| |#$R@@171|)) )))
(assert (forall ((|#$T0@@168| T@U) (|#$T1@@152| T@U) (|#$T2@@124| T@U) (|#$T3@@102| T@U) (|#$T4@@77| T@U) (|#$T5@@49| T@U) (|#$T6@@18| T@U) (|#$R@@172| T@U) (bx@@107 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@168|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$T2@@124|) TyType)) (= (type |#$T3@@102|) TyType)) (= (type |#$T4@@77|) TyType)) (= (type |#$T5@@49|) TyType)) (= (type |#$T6@@18|) TyType)) (= (type |#$R@@172|) TyType)) (= (type bx@@107) BoxType)) ($IsBox bx@@107 (Tclass._System.___hPartialFunc7 |#$T0@@168| |#$T1@@152| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$T5@@49| |#$T6@@18| |#$R@@172|))) (and (= ($Box ($Unbox HandleTypeType bx@@107)) bx@@107) ($Is ($Unbox HandleTypeType bx@@107) (Tclass._System.___hPartialFunc7 |#$T0@@168| |#$T1@@152| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$T5@@49| |#$T6@@18| |#$R@@172|)))) :qid |unknown.0:0| :skolemid |1108| :pattern ( ($IsBox bx@@107 (Tclass._System.___hPartialFunc7 |#$T0@@168| |#$T1@@152| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$T5@@49| |#$T6@@18| |#$R@@172|))) )))
(assert (forall ((|#$T0@@169| T@U) (|#$T1@@153| T@U) (|#$T2@@125| T@U) (|#$T3@@103| T@U) (|#$T4@@78| T@U) (|#$T5@@50| T@U) (|#$T6@@19| T@U) (|#$R@@173| T@U) (|f#0@@27| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@169|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$T2@@125|) TyType)) (= (type |#$T3@@103|) TyType)) (= (type |#$T4@@78|) TyType)) (= (type |#$T5@@50|) TyType)) (= (type |#$T6@@19|) TyType)) (= (type |#$R@@173|) TyType)) (= (type |f#0@@27|) HandleTypeType)) (and (=> ($Is |f#0@@27| (Tclass._System.___hPartialFunc7 |#$T0@@169| |#$T1@@153| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|)) (and ($Is |f#0@@27| (Tclass._System.___hFunc7 |#$T0@@169| |#$T1@@153| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|)) (forall ((|x0#0@@23| T@U) (|x1#0@@19| T@U) (|x2#0@@15| T@U) (|x3#0@@11| T@U) (|x4#0@@7| T@U) (|x5#0@@3| T@U) (|x6#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@23|) BoxType) (= (type |x1#0@@19|) BoxType)) (= (type |x2#0@@15|) BoxType)) (= (type |x3#0@@11|) BoxType)) (= (type |x4#0@@7|) BoxType)) (= (type |x5#0@@3|) BoxType)) (= (type |x6#0|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@23| |#$T0@@169|) ($IsBox |x1#0@@19| |#$T1@@153|)) ($IsBox |x2#0@@15| |#$T2@@125|)) ($IsBox |x3#0@@11| |#$T3@@103|)) ($IsBox |x4#0@@7| |#$T4@@78|)) ($IsBox |x5#0@@3| |#$T5@@50|)) ($IsBox |x6#0| |#$T6@@19|))) (|Set#Equal| (Reads7 |#$T0@@169| |#$T1@@153| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173| $OneHeap |f#0@@27| |x0#0@@23| |x1#0@@19| |x2#0@@15| |x3#0@@11| |x4#0@@7| |x5#0@@3| |x6#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1109| :no-pattern (type |x0#0@@23|) :no-pattern (type |x1#0@@19|) :no-pattern (type |x2#0@@15|) :no-pattern (type |x3#0@@11|) :no-pattern (type |x4#0@@7|) :no-pattern (type |x5#0@@3|) :no-pattern (type |x6#0|) :no-pattern (U_2_int |x0#0@@23|) :no-pattern (U_2_bool |x0#0@@23|) :no-pattern (U_2_int |x1#0@@19|) :no-pattern (U_2_bool |x1#0@@19|) :no-pattern (U_2_int |x2#0@@15|) :no-pattern (U_2_bool |x2#0@@15|) :no-pattern (U_2_int |x3#0@@11|) :no-pattern (U_2_bool |x3#0@@11|) :no-pattern (U_2_int |x4#0@@7|) :no-pattern (U_2_bool |x4#0@@7|) :no-pattern (U_2_int |x5#0@@3|) :no-pattern (U_2_bool |x5#0@@3|) :no-pattern (U_2_int |x6#0|) :no-pattern (U_2_bool |x6#0|) )))) (=> (and ($Is |f#0@@27| (Tclass._System.___hFunc7 |#$T0@@169| |#$T1@@153| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|)) (forall ((|x0#0@@24| T@U) (|x1#0@@20| T@U) (|x2#0@@16| T@U) (|x3#0@@12| T@U) (|x4#0@@8| T@U) (|x5#0@@4| T@U) (|x6#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@24|) BoxType) (= (type |x1#0@@20|) BoxType)) (= (type |x2#0@@16|) BoxType)) (= (type |x3#0@@12|) BoxType)) (= (type |x4#0@@8|) BoxType)) (= (type |x5#0@@4|) BoxType)) (= (type |x6#0@@0|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@24| |#$T0@@169|) ($IsBox |x1#0@@20| |#$T1@@153|)) ($IsBox |x2#0@@16| |#$T2@@125|)) ($IsBox |x3#0@@12| |#$T3@@103|)) ($IsBox |x4#0@@8| |#$T4@@78|)) ($IsBox |x5#0@@4| |#$T5@@50|)) ($IsBox |x6#0@@0| |#$T6@@19|))) (|Set#Equal| (Reads7 |#$T0@@169| |#$T1@@153| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173| $OneHeap |f#0@@27| |x0#0@@24| |x1#0@@20| |x2#0@@16| |x3#0@@12| |x4#0@@8| |x5#0@@4| |x6#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1109| :no-pattern (type |x0#0@@24|) :no-pattern (type |x1#0@@20|) :no-pattern (type |x2#0@@16|) :no-pattern (type |x3#0@@12|) :no-pattern (type |x4#0@@8|) :no-pattern (type |x5#0@@4|) :no-pattern (type |x6#0@@0|) :no-pattern (U_2_int |x0#0@@24|) :no-pattern (U_2_bool |x0#0@@24|) :no-pattern (U_2_int |x1#0@@20|) :no-pattern (U_2_bool |x1#0@@20|) :no-pattern (U_2_int |x2#0@@16|) :no-pattern (U_2_bool |x2#0@@16|) :no-pattern (U_2_int |x3#0@@12|) :no-pattern (U_2_bool |x3#0@@12|) :no-pattern (U_2_int |x4#0@@8|) :no-pattern (U_2_bool |x4#0@@8|) :no-pattern (U_2_int |x5#0@@4|) :no-pattern (U_2_bool |x5#0@@4|) :no-pattern (U_2_int |x6#0@@0|) :no-pattern (U_2_bool |x6#0@@0|) ))) ($Is |f#0@@27| (Tclass._System.___hPartialFunc7 |#$T0@@169| |#$T1@@153| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|))))) :qid |unknown.0:0| :skolemid |1110| :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc7 |#$T0@@169| |#$T1@@153| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|))) )))
(assert (forall ((|#$T0@@170| T@U) (|#$T1@@154| T@U) (|#$T2@@126| T@U) (|#$T3@@104| T@U) (|#$T4@@79| T@U) (|#$T5@@51| T@U) (|#$T6@@20| T@U) (|#$R@@174| T@U) (|f#0@@28| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@170|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$T2@@126|) TyType)) (= (type |#$T3@@104|) TyType)) (= (type |#$T4@@79|) TyType)) (= (type |#$T5@@51|) TyType)) (= (type |#$T6@@20|) TyType)) (= (type |#$R@@174|) TyType)) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc7 |#$T0@@170| |#$T1@@154| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@25) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc7 |#$T0@@170| |#$T1@@154| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@25)) (=> ($IsAlloc |f#0@@28| (Tclass._System.___hFunc7 |#$T0@@170| |#$T1@@154| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@25) ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc7 |#$T0@@170| |#$T1@@154| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@25)))) :qid |unknown.0:0| :skolemid |1111| :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc7 |#$T0@@170| |#$T1@@154| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@25)) )))
(assert (forall ((arg0@@322 T@U) (arg1@@155 T@U) (arg2@@111 T@U) (arg3@@86 T@U) (arg4@@75 T@U) (arg5@@62 T@U) (arg6@@50 T@U) (arg7@@35 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7 arg0@@322 arg1@@155 arg2@@111 arg3@@86 arg4@@75 arg5@@62 arg6@@50 arg7@@35)) TyType) :qid |funType:Tclass._System.___hTotalFunc7| :pattern ( (Tclass._System.___hTotalFunc7 arg0@@322 arg1@@155 arg2@@111 arg3@@86 arg4@@75 arg5@@62 arg6@@50 arg7@@35)) )))
(assert (forall ((|#$T0@@171| T@U) (|#$T1@@155| T@U) (|#$T2@@127| T@U) (|#$T3@@105| T@U) (|#$T4@@80| T@U) (|#$T5@@52| T@U) (|#$T6@@21| T@U) (|#$R@@175| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@171|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$T2@@127|) TyType)) (= (type |#$T3@@105|) TyType)) (= (type |#$T4@@80|) TyType)) (= (type |#$T5@@52|) TyType)) (= (type |#$T6@@21|) TyType)) (= (type |#$R@@175|) TyType)) (= (Tag (Tclass._System.___hTotalFunc7 |#$T0@@171| |#$T1@@155| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$T5@@52| |#$T6@@21| |#$R@@175|)) Tagclass._System.___hTotalFunc7)) :qid |unknown.0:0| :skolemid |1112| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@171| |#$T1@@155| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$T5@@52| |#$T6@@21| |#$R@@175|)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_0 arg0@@323)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_0| :pattern ( (Tclass._System.___hTotalFunc7_0 arg0@@323)) )))
(assert (forall ((|#$T0@@172| T@U) (|#$T1@@156| T@U) (|#$T2@@128| T@U) (|#$T3@@106| T@U) (|#$T4@@81| T@U) (|#$T5@@53| T@U) (|#$T6@@22| T@U) (|#$R@@176| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@172|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$T2@@128|) TyType)) (= (type |#$T3@@106|) TyType)) (= (type |#$T4@@81|) TyType)) (= (type |#$T5@@53|) TyType)) (= (type |#$T6@@22|) TyType)) (= (type |#$R@@176|) TyType)) (= (Tclass._System.___hTotalFunc7_0 (Tclass._System.___hTotalFunc7 |#$T0@@172| |#$T1@@156| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$T5@@53| |#$T6@@22| |#$R@@176|)) |#$T0@@172|)) :qid |unknown.0:0| :skolemid |1113| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@172| |#$T1@@156| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$T5@@53| |#$T6@@22| |#$R@@176|)) )))
(assert (forall ((arg0@@324 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_1 arg0@@324)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_1| :pattern ( (Tclass._System.___hTotalFunc7_1 arg0@@324)) )))
(assert (forall ((|#$T0@@173| T@U) (|#$T1@@157| T@U) (|#$T2@@129| T@U) (|#$T3@@107| T@U) (|#$T4@@82| T@U) (|#$T5@@54| T@U) (|#$T6@@23| T@U) (|#$R@@177| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@173|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$T2@@129|) TyType)) (= (type |#$T3@@107|) TyType)) (= (type |#$T4@@82|) TyType)) (= (type |#$T5@@54|) TyType)) (= (type |#$T6@@23|) TyType)) (= (type |#$R@@177|) TyType)) (= (Tclass._System.___hTotalFunc7_1 (Tclass._System.___hTotalFunc7 |#$T0@@173| |#$T1@@157| |#$T2@@129| |#$T3@@107| |#$T4@@82| |#$T5@@54| |#$T6@@23| |#$R@@177|)) |#$T1@@157|)) :qid |unknown.0:0| :skolemid |1114| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@173| |#$T1@@157| |#$T2@@129| |#$T3@@107| |#$T4@@82| |#$T5@@54| |#$T6@@23| |#$R@@177|)) )))
(assert (forall ((arg0@@325 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_2 arg0@@325)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_2| :pattern ( (Tclass._System.___hTotalFunc7_2 arg0@@325)) )))
(assert (forall ((|#$T0@@174| T@U) (|#$T1@@158| T@U) (|#$T2@@130| T@U) (|#$T3@@108| T@U) (|#$T4@@83| T@U) (|#$T5@@55| T@U) (|#$T6@@24| T@U) (|#$R@@178| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@174|) TyType) (= (type |#$T1@@158|) TyType)) (= (type |#$T2@@130|) TyType)) (= (type |#$T3@@108|) TyType)) (= (type |#$T4@@83|) TyType)) (= (type |#$T5@@55|) TyType)) (= (type |#$T6@@24|) TyType)) (= (type |#$R@@178|) TyType)) (= (Tclass._System.___hTotalFunc7_2 (Tclass._System.___hTotalFunc7 |#$T0@@174| |#$T1@@158| |#$T2@@130| |#$T3@@108| |#$T4@@83| |#$T5@@55| |#$T6@@24| |#$R@@178|)) |#$T2@@130|)) :qid |unknown.0:0| :skolemid |1115| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@174| |#$T1@@158| |#$T2@@130| |#$T3@@108| |#$T4@@83| |#$T5@@55| |#$T6@@24| |#$R@@178|)) )))
(assert (forall ((arg0@@326 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_3 arg0@@326)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_3| :pattern ( (Tclass._System.___hTotalFunc7_3 arg0@@326)) )))
(assert (forall ((|#$T0@@175| T@U) (|#$T1@@159| T@U) (|#$T2@@131| T@U) (|#$T3@@109| T@U) (|#$T4@@84| T@U) (|#$T5@@56| T@U) (|#$T6@@25| T@U) (|#$R@@179| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@175|) TyType) (= (type |#$T1@@159|) TyType)) (= (type |#$T2@@131|) TyType)) (= (type |#$T3@@109|) TyType)) (= (type |#$T4@@84|) TyType)) (= (type |#$T5@@56|) TyType)) (= (type |#$T6@@25|) TyType)) (= (type |#$R@@179|) TyType)) (= (Tclass._System.___hTotalFunc7_3 (Tclass._System.___hTotalFunc7 |#$T0@@175| |#$T1@@159| |#$T2@@131| |#$T3@@109| |#$T4@@84| |#$T5@@56| |#$T6@@25| |#$R@@179|)) |#$T3@@109|)) :qid |unknown.0:0| :skolemid |1116| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@175| |#$T1@@159| |#$T2@@131| |#$T3@@109| |#$T4@@84| |#$T5@@56| |#$T6@@25| |#$R@@179|)) )))
(assert (forall ((arg0@@327 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_4 arg0@@327)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_4| :pattern ( (Tclass._System.___hTotalFunc7_4 arg0@@327)) )))
(assert (forall ((|#$T0@@176| T@U) (|#$T1@@160| T@U) (|#$T2@@132| T@U) (|#$T3@@110| T@U) (|#$T4@@85| T@U) (|#$T5@@57| T@U) (|#$T6@@26| T@U) (|#$R@@180| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@176|) TyType) (= (type |#$T1@@160|) TyType)) (= (type |#$T2@@132|) TyType)) (= (type |#$T3@@110|) TyType)) (= (type |#$T4@@85|) TyType)) (= (type |#$T5@@57|) TyType)) (= (type |#$T6@@26|) TyType)) (= (type |#$R@@180|) TyType)) (= (Tclass._System.___hTotalFunc7_4 (Tclass._System.___hTotalFunc7 |#$T0@@176| |#$T1@@160| |#$T2@@132| |#$T3@@110| |#$T4@@85| |#$T5@@57| |#$T6@@26| |#$R@@180|)) |#$T4@@85|)) :qid |unknown.0:0| :skolemid |1117| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@176| |#$T1@@160| |#$T2@@132| |#$T3@@110| |#$T4@@85| |#$T5@@57| |#$T6@@26| |#$R@@180|)) )))
(assert (forall ((arg0@@328 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_5 arg0@@328)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_5| :pattern ( (Tclass._System.___hTotalFunc7_5 arg0@@328)) )))
(assert (forall ((|#$T0@@177| T@U) (|#$T1@@161| T@U) (|#$T2@@133| T@U) (|#$T3@@111| T@U) (|#$T4@@86| T@U) (|#$T5@@58| T@U) (|#$T6@@27| T@U) (|#$R@@181| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@177|) TyType) (= (type |#$T1@@161|) TyType)) (= (type |#$T2@@133|) TyType)) (= (type |#$T3@@111|) TyType)) (= (type |#$T4@@86|) TyType)) (= (type |#$T5@@58|) TyType)) (= (type |#$T6@@27|) TyType)) (= (type |#$R@@181|) TyType)) (= (Tclass._System.___hTotalFunc7_5 (Tclass._System.___hTotalFunc7 |#$T0@@177| |#$T1@@161| |#$T2@@133| |#$T3@@111| |#$T4@@86| |#$T5@@58| |#$T6@@27| |#$R@@181|)) |#$T5@@58|)) :qid |unknown.0:0| :skolemid |1118| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@177| |#$T1@@161| |#$T2@@133| |#$T3@@111| |#$T4@@86| |#$T5@@58| |#$T6@@27| |#$R@@181|)) )))
(assert (forall ((arg0@@329 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_6 arg0@@329)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_6| :pattern ( (Tclass._System.___hTotalFunc7_6 arg0@@329)) )))
(assert (forall ((|#$T0@@178| T@U) (|#$T1@@162| T@U) (|#$T2@@134| T@U) (|#$T3@@112| T@U) (|#$T4@@87| T@U) (|#$T5@@59| T@U) (|#$T6@@28| T@U) (|#$R@@182| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@178|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |#$T2@@134|) TyType)) (= (type |#$T3@@112|) TyType)) (= (type |#$T4@@87|) TyType)) (= (type |#$T5@@59|) TyType)) (= (type |#$T6@@28|) TyType)) (= (type |#$R@@182|) TyType)) (= (Tclass._System.___hTotalFunc7_6 (Tclass._System.___hTotalFunc7 |#$T0@@178| |#$T1@@162| |#$T2@@134| |#$T3@@112| |#$T4@@87| |#$T5@@59| |#$T6@@28| |#$R@@182|)) |#$T6@@28|)) :qid |unknown.0:0| :skolemid |1119| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@178| |#$T1@@162| |#$T2@@134| |#$T3@@112| |#$T4@@87| |#$T5@@59| |#$T6@@28| |#$R@@182|)) )))
(assert (forall ((arg0@@330 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_7 arg0@@330)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_7| :pattern ( (Tclass._System.___hTotalFunc7_7 arg0@@330)) )))
(assert (forall ((|#$T0@@179| T@U) (|#$T1@@163| T@U) (|#$T2@@135| T@U) (|#$T3@@113| T@U) (|#$T4@@88| T@U) (|#$T5@@60| T@U) (|#$T6@@29| T@U) (|#$R@@183| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@179|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |#$T2@@135|) TyType)) (= (type |#$T3@@113|) TyType)) (= (type |#$T4@@88|) TyType)) (= (type |#$T5@@60|) TyType)) (= (type |#$T6@@29|) TyType)) (= (type |#$R@@183|) TyType)) (= (Tclass._System.___hTotalFunc7_7 (Tclass._System.___hTotalFunc7 |#$T0@@179| |#$T1@@163| |#$T2@@135| |#$T3@@113| |#$T4@@88| |#$T5@@60| |#$T6@@29| |#$R@@183|)) |#$R@@183|)) :qid |unknown.0:0| :skolemid |1120| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@179| |#$T1@@163| |#$T2@@135| |#$T3@@113| |#$T4@@88| |#$T5@@60| |#$T6@@29| |#$R@@183|)) )))
(assert (forall ((|#$T0@@180| T@U) (|#$T1@@164| T@U) (|#$T2@@136| T@U) (|#$T3@@114| T@U) (|#$T4@@89| T@U) (|#$T5@@61| T@U) (|#$T6@@30| T@U) (|#$R@@184| T@U) (bx@@108 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@180|) TyType) (= (type |#$T1@@164|) TyType)) (= (type |#$T2@@136|) TyType)) (= (type |#$T3@@114|) TyType)) (= (type |#$T4@@89|) TyType)) (= (type |#$T5@@61|) TyType)) (= (type |#$T6@@30|) TyType)) (= (type |#$R@@184|) TyType)) (= (type bx@@108) BoxType)) ($IsBox bx@@108 (Tclass._System.___hTotalFunc7 |#$T0@@180| |#$T1@@164| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$T5@@61| |#$T6@@30| |#$R@@184|))) (and (= ($Box ($Unbox HandleTypeType bx@@108)) bx@@108) ($Is ($Unbox HandleTypeType bx@@108) (Tclass._System.___hTotalFunc7 |#$T0@@180| |#$T1@@164| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$T5@@61| |#$T6@@30| |#$R@@184|)))) :qid |unknown.0:0| :skolemid |1121| :pattern ( ($IsBox bx@@108 (Tclass._System.___hTotalFunc7 |#$T0@@180| |#$T1@@164| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$T5@@61| |#$T6@@30| |#$R@@184|))) )))
(assert (forall ((|#$T0@@181| T@U) (|#$T1@@165| T@U) (|#$T2@@137| T@U) (|#$T3@@115| T@U) (|#$T4@@90| T@U) (|#$T5@@62| T@U) (|#$T6@@31| T@U) (|#$R@@185| T@U) (|f#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@181|) TyType) (= (type |#$T1@@165|) TyType)) (= (type |#$T2@@137|) TyType)) (= (type |#$T3@@115|) TyType)) (= (type |#$T4@@90|) TyType)) (= (type |#$T5@@62|) TyType)) (= (type |#$T6@@31|) TyType)) (= (type |#$R@@185|) TyType)) (= (type |f#0@@29|) HandleTypeType)) (and (=> ($Is |f#0@@29| (Tclass._System.___hTotalFunc7 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|)) (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc7 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|)) (forall ((|x0#0@@25| T@U) (|x1#0@@21| T@U) (|x2#0@@17| T@U) (|x3#0@@13| T@U) (|x4#0@@9| T@U) (|x5#0@@5| T@U) (|x6#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@25|) BoxType) (= (type |x1#0@@21|) BoxType)) (= (type |x2#0@@17|) BoxType)) (= (type |x3#0@@13|) BoxType)) (= (type |x4#0@@9|) BoxType)) (= (type |x5#0@@5|) BoxType)) (= (type |x6#0@@1|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@25| |#$T0@@181|) ($IsBox |x1#0@@21| |#$T1@@165|)) ($IsBox |x2#0@@17| |#$T2@@137|)) ($IsBox |x3#0@@13| |#$T3@@115|)) ($IsBox |x4#0@@9| |#$T4@@90|)) ($IsBox |x5#0@@5| |#$T5@@62|)) ($IsBox |x6#0@@1| |#$T6@@31|))) (Requires7 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185| $OneHeap |f#0@@29| |x0#0@@25| |x1#0@@21| |x2#0@@17| |x3#0@@13| |x4#0@@9| |x5#0@@5| |x6#0@@1|)) :qid |unknown.0:0| :skolemid |1122| :no-pattern (type |x0#0@@25|) :no-pattern (type |x1#0@@21|) :no-pattern (type |x2#0@@17|) :no-pattern (type |x3#0@@13|) :no-pattern (type |x4#0@@9|) :no-pattern (type |x5#0@@5|) :no-pattern (type |x6#0@@1|) :no-pattern (U_2_int |x0#0@@25|) :no-pattern (U_2_bool |x0#0@@25|) :no-pattern (U_2_int |x1#0@@21|) :no-pattern (U_2_bool |x1#0@@21|) :no-pattern (U_2_int |x2#0@@17|) :no-pattern (U_2_bool |x2#0@@17|) :no-pattern (U_2_int |x3#0@@13|) :no-pattern (U_2_bool |x3#0@@13|) :no-pattern (U_2_int |x4#0@@9|) :no-pattern (U_2_bool |x4#0@@9|) :no-pattern (U_2_int |x5#0@@5|) :no-pattern (U_2_bool |x5#0@@5|) :no-pattern (U_2_int |x6#0@@1|) :no-pattern (U_2_bool |x6#0@@1|) )))) (=> (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc7 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|)) (forall ((|x0#0@@26| T@U) (|x1#0@@22| T@U) (|x2#0@@18| T@U) (|x3#0@@14| T@U) (|x4#0@@10| T@U) (|x5#0@@6| T@U) (|x6#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@26|) BoxType) (= (type |x1#0@@22|) BoxType)) (= (type |x2#0@@18|) BoxType)) (= (type |x3#0@@14|) BoxType)) (= (type |x4#0@@10|) BoxType)) (= (type |x5#0@@6|) BoxType)) (= (type |x6#0@@2|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@26| |#$T0@@181|) ($IsBox |x1#0@@22| |#$T1@@165|)) ($IsBox |x2#0@@18| |#$T2@@137|)) ($IsBox |x3#0@@14| |#$T3@@115|)) ($IsBox |x4#0@@10| |#$T4@@90|)) ($IsBox |x5#0@@6| |#$T5@@62|)) ($IsBox |x6#0@@2| |#$T6@@31|))) (Requires7 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185| $OneHeap |f#0@@29| |x0#0@@26| |x1#0@@22| |x2#0@@18| |x3#0@@14| |x4#0@@10| |x5#0@@6| |x6#0@@2|)) :qid |unknown.0:0| :skolemid |1122| :no-pattern (type |x0#0@@26|) :no-pattern (type |x1#0@@22|) :no-pattern (type |x2#0@@18|) :no-pattern (type |x3#0@@14|) :no-pattern (type |x4#0@@10|) :no-pattern (type |x5#0@@6|) :no-pattern (type |x6#0@@2|) :no-pattern (U_2_int |x0#0@@26|) :no-pattern (U_2_bool |x0#0@@26|) :no-pattern (U_2_int |x1#0@@22|) :no-pattern (U_2_bool |x1#0@@22|) :no-pattern (U_2_int |x2#0@@18|) :no-pattern (U_2_bool |x2#0@@18|) :no-pattern (U_2_int |x3#0@@14|) :no-pattern (U_2_bool |x3#0@@14|) :no-pattern (U_2_int |x4#0@@10|) :no-pattern (U_2_bool |x4#0@@10|) :no-pattern (U_2_int |x5#0@@6|) :no-pattern (U_2_bool |x5#0@@6|) :no-pattern (U_2_int |x6#0@@2|) :no-pattern (U_2_bool |x6#0@@2|) ))) ($Is |f#0@@29| (Tclass._System.___hTotalFunc7 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|))))) :qid |unknown.0:0| :skolemid |1123| :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc7 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|))) )))
(assert (forall ((|#$T0@@182| T@U) (|#$T1@@166| T@U) (|#$T2@@138| T@U) (|#$T3@@116| T@U) (|#$T4@@91| T@U) (|#$T5@@63| T@U) (|#$T6@@32| T@U) (|#$R@@186| T@U) (|f#0@@30| T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@182|) TyType) (= (type |#$T1@@166|) TyType)) (= (type |#$T2@@138|) TyType)) (= (type |#$T3@@116|) TyType)) (= (type |#$T4@@91|) TyType)) (= (type |#$T5@@63|) TyType)) (= (type |#$T6@@32|) TyType)) (= (type |#$R@@186|) TyType)) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc7 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@26) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc7 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@26)) (=> ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc7 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@26) ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc7 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@26)))) :qid |unknown.0:0| :skolemid |1124| :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc7 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@26)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@6)))) :qid |unknown.0:0| :skolemid |1125| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |1126| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@109 T@U) ) (!  (=> (and (= (type bx@@109) BoxType) ($IsBox bx@@109 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@109)) bx@@109) ($Is ($Unbox DatatypeTypeType bx@@109) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |1127| :pattern ( ($IsBox bx@@109 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@27 T@U) ) (!  (=> (and (= (type $h@@27) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@27)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@27)) :qid |DafnyPre.521:12| :skolemid |1128| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@27)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |1129| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |1130| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@132 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@132 b@@63) true) (=> true (|_System.Tuple0#Equal| a@@132 b@@63)))) :qid |unknown.0:0| :skolemid |1131| :pattern ( (|_System.Tuple0#Equal| a@@132 b@@63)) )))
(assert (forall ((a@@133 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@133) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@133 b@@64) (= a@@133 b@@64)) (=> (= a@@133 b@@64) (|_System.Tuple0#Equal| a@@133 b@@64)))) :qid |unknown.0:0| :skolemid |1132| :pattern ( (|_System.Tuple0#Equal| a@@133 b@@64)) )))
(assert (= (type Tclass.PivotBetreeSpecWFNodes.__default) TyType))
(assert (= (Tag Tclass.PivotBetreeSpecWFNodes.__default) Tagclass.PivotBetreeSpecWFNodes.__default))
(assert (forall ((bx@@110 T@U) ) (!  (=> (and (= (type bx@@110) BoxType) ($IsBox bx@@110 Tclass.PivotBetreeSpecWFNodes.__default)) (and (= ($Box ($Unbox refType bx@@110)) bx@@110) ($Is ($Unbox refType bx@@110) Tclass.PivotBetreeSpecWFNodes.__default))) :qid |unknown.0:0| :skolemid |1133| :pattern ( ($IsBox bx@@110 Tclass.PivotBetreeSpecWFNodes.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.PivotBetreeSpecWFNodes.__default) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.PivotBetreeSpecWFNodes.__default))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.PivotBetreeSpecWFNodes.__default)) ($Is $o@@9 Tclass.PivotBetreeSpecWFNodes.__default)))) :qid |unknown.0:0| :skolemid |1134| :pattern ( ($Is $o@@9 Tclass.PivotBetreeSpecWFNodes.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@28 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@28) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.PivotBetreeSpecWFNodes.__default $h@@28) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@28 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@28 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.PivotBetreeSpecWFNodes.__default $h@@28)))) :qid |unknown.0:0| :skolemid |1135| :pattern ( ($IsAlloc $o@@10 Tclass.PivotBetreeSpecWFNodes.__default $h@@28)) )))
(assert (= (type Tclass.PivotBetreeSpec.NodeFlush) TyType))
(assert (= (Tag Tclass.PivotBetreeSpec.NodeFlush) Tagclass.PivotBetreeSpec.NodeFlush))
(assert (forall ((bx@@111 T@U) ) (!  (=> (and (= (type bx@@111) BoxType) ($IsBox bx@@111 Tclass.PivotBetreeSpec.NodeFlush)) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) Tclass.PivotBetreeSpec.NodeFlush))) :qid |unknown.0:0| :skolemid |1136| :pattern ( ($IsBox bx@@111 Tclass.PivotBetreeSpec.NodeFlush)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@112 T@U) ) (!  (=> (and (= (type bx@@112) BoxType) ($IsBox bx@@112 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@112)) bx@@112) ($Is ($Unbox intType bx@@112) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1139| :pattern ( ($IsBox bx@@112 Tclass.NativeTypes.byte)) )))
(assert (= (type Tclass.PivotBetreeGraph.Node) TyType))
(assert (= (Tag Tclass.PivotBetreeGraph.Node) Tagclass.PivotBetreeGraph.Node))
(assert (forall ((bx@@113 T@U) ) (!  (=> (and (= (type bx@@113) BoxType) ($IsBox bx@@113 Tclass.PivotBetreeGraph.Node)) (and (= ($Box ($Unbox DatatypeTypeType bx@@113)) bx@@113) ($Is ($Unbox DatatypeTypeType bx@@113) Tclass.PivotBetreeGraph.Node))) :qid |unknown.0:0| :skolemid |1150| :pattern ( ($IsBox bx@@113 Tclass.PivotBetreeGraph.Node)) )))
(assert (= (type Tclass.BucketsLib.Bucket) TyType))
(assert (= (Tag Tclass.BucketsLib.Bucket) Tagclass.BucketsLib.Bucket))
(assert (forall ((bx@@114 T@U) ) (!  (=> (and (= (type bx@@114) BoxType) ($IsBox bx@@114 Tclass.BucketsLib.Bucket)) (and (= ($Box ($Unbox DatatypeTypeType bx@@114)) bx@@114) ($Is ($Unbox DatatypeTypeType bx@@114) Tclass.BucketsLib.Bucket))) :qid |unknown.0:0| :skolemid |1300| :pattern ( ($IsBox bx@@114 Tclass.BucketsLib.Bucket)) )))
(assert (= (type Tclass.KeyType.Key) TyType))
(assert (= (Tag Tclass.KeyType.Key) Tagclass.KeyType.Key))
(assert (forall ((bx@@115 T@U) ) (!  (=> (and (= (type bx@@115) BoxType) ($IsBox bx@@115 Tclass.KeyType.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@115)) bx@@115) ($Is ($Unbox (SeqType BoxType) bx@@115) Tclass.KeyType.Key))) :qid |unknown.0:0| :skolemid |1301| :pattern ( ($IsBox bx@@115 Tclass.KeyType.Key)) )))
(assert (forall ((arg0@@331 T@U) ) (! (= (type (Tclass.Options.Option arg0@@331)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@331)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |1346| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@332 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@332)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@332)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1347| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@116 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@116) BoxType)) ($IsBox bx@@116 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@116)) bx@@116) ($Is ($Unbox DatatypeTypeType bx@@116) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1348| :pattern ( ($IsBox bx@@116 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (= (type Tclass.PivotBetreeSpec.NodeFusion) TyType))
(assert (= (Tag Tclass.PivotBetreeSpec.NodeFusion) Tagclass.PivotBetreeSpec.NodeFusion))
(assert (forall ((bx@@117 T@U) ) (!  (=> (and (= (type bx@@117) BoxType) ($IsBox bx@@117 Tclass.PivotBetreeSpec.NodeFusion)) (and (= ($Box ($Unbox DatatypeTypeType bx@@117)) bx@@117) ($Is ($Unbox DatatypeTypeType bx@@117) Tclass.PivotBetreeSpec.NodeFusion))) :qid |unknown.0:0| :skolemid |1429| :pattern ( ($IsBox bx@@117 Tclass.PivotBetreeSpec.NodeFusion)) )))
(assert (= (type Tclass.ReferenceType.Reference) TyType))
(assert (= (Tag Tclass.ReferenceType.Reference) Tagclass.ReferenceType.Reference))
(assert (= (type Tclass.PivotBetreeSpec.Repivot) TyType))
(assert (= (Tag Tclass.PivotBetreeSpec.Repivot) Tagclass.PivotBetreeSpec.Repivot))
(assert (forall ((bx@@118 T@U) ) (!  (=> (and (= (type bx@@118) BoxType) ($IsBox bx@@118 Tclass.PivotBetreeSpec.Repivot)) (and (= ($Box ($Unbox DatatypeTypeType bx@@118)) bx@@118) ($Is ($Unbox DatatypeTypeType bx@@118) Tclass.PivotBetreeSpec.Repivot))) :qid |unknown.0:0| :skolemid |1580| :pattern ( ($IsBox bx@@118 Tclass.PivotBetreeSpec.Repivot)) )))
(assert (= (type Tclass.PivotBetreeSpec.MessageInsertion) TyType))
(assert (= (Tag Tclass.PivotBetreeSpec.MessageInsertion) Tagclass.PivotBetreeSpec.MessageInsertion))
(assert (forall ((bx@@119 T@U) ) (!  (=> (and (= (type bx@@119) BoxType) ($IsBox bx@@119 Tclass.PivotBetreeSpec.MessageInsertion)) (and (= ($Box ($Unbox DatatypeTypeType bx@@119)) bx@@119) ($Is ($Unbox DatatypeTypeType bx@@119) Tclass.PivotBetreeSpec.MessageInsertion))) :qid |unknown.0:0| :skolemid |1590| :pattern ( ($IsBox bx@@119 Tclass.PivotBetreeSpec.MessageInsertion)) )))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (forall ((bx@@120 T@U) ) (!  (=> (and (= (type bx@@120) BoxType) ($IsBox bx@@120 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@120)) bx@@120) ($Is ($Unbox DatatypeTypeType bx@@120) Tclass.ValueMessage.Message))) :qid |unknown.0:0| :skolemid |1599| :pattern ( ($IsBox bx@@120 Tclass.ValueMessage.Message)) )))
(assert (= (type Tclass.PivotBetreeSpec.RootGrowth) TyType))
(assert (= (Tag Tclass.PivotBetreeSpec.RootGrowth) Tagclass.PivotBetreeSpec.RootGrowth))
(assert (forall ((bx@@121 T@U) ) (!  (=> (and (= (type bx@@121) BoxType) ($IsBox bx@@121 Tclass.PivotBetreeSpec.RootGrowth)) (and (= ($Box ($Unbox DatatypeTypeType bx@@121)) bx@@121) ($Is ($Unbox DatatypeTypeType bx@@121) Tclass.PivotBetreeSpec.RootGrowth))) :qid |unknown.0:0| :skolemid |1614| :pattern ( ($IsBox bx@@121 Tclass.PivotBetreeSpec.RootGrowth)) )))
(assert (= (type Tclass.PivotBetreeSpec.BetreeStep) TyType))
(assert (= (Tag Tclass.PivotBetreeSpec.BetreeStep) Tagclass.PivotBetreeSpec.BetreeStep))
(assert (forall ((bx@@122 T@U) ) (!  (=> (and (= (type bx@@122) BoxType) ($IsBox bx@@122 Tclass.PivotBetreeSpec.BetreeStep)) (and (= ($Box ($Unbox DatatypeTypeType bx@@122)) bx@@122) ($Is ($Unbox DatatypeTypeType bx@@122) Tclass.PivotBetreeSpec.BetreeStep))) :qid |unknown.0:0| :skolemid |1645| :pattern ( ($IsBox bx@@122 Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (= (type Tclass.PivotBetreeSpec.SuccQuery) TyType))
(assert (= (Tag Tclass.PivotBetreeSpec.SuccQuery) Tagclass.PivotBetreeSpec.SuccQuery))
(assert (forall ((bx@@123 T@U) ) (!  (=> (and (= (type bx@@123) BoxType) ($IsBox bx@@123 Tclass.PivotBetreeSpec.SuccQuery)) (and (= ($Box ($Unbox DatatypeTypeType bx@@123)) bx@@123) ($Is ($Unbox DatatypeTypeType bx@@123) Tclass.PivotBetreeSpec.SuccQuery))) :qid |unknown.0:0| :skolemid |1684| :pattern ( ($IsBox bx@@123 Tclass.PivotBetreeSpec.SuccQuery)) )))
(assert (= (type Tclass.PivotBetreeSpec.LookupQuery) TyType))
(assert (= (Tag Tclass.PivotBetreeSpec.LookupQuery) Tagclass.PivotBetreeSpec.LookupQuery))
(assert (forall ((bx@@124 T@U) ) (!  (=> (and (= (type bx@@124) BoxType) ($IsBox bx@@124 Tclass.PivotBetreeSpec.LookupQuery)) (and (= ($Box ($Unbox DatatypeTypeType bx@@124)) bx@@124) ($Is ($Unbox DatatypeTypeType bx@@124) Tclass.PivotBetreeSpec.LookupQuery))) :qid |unknown.0:0| :skolemid |1685| :pattern ( ($IsBox bx@@124 Tclass.PivotBetreeSpec.LookupQuery)) )))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (and (=> (Options.Option.None_q d@@10) (= (DatatypeCtorId d@@10) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@10) |##Options.Option.None|) (Options.Option.None_q d@@10)))) :qid |unknown.0:0| :skolemid |1686| :pattern ( (Options.Option.None_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (Options.Option.None_q d@@11)) (= d@@11 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1687| :pattern ( (Options.Option.None_q d@@11)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1688| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@29 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@29) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@29)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@29)) :qid |unknown.0:0| :skolemid |1689| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@29)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@333 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@333)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@333)) )))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |1690| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@12 T@U) ) (!  (=> (= (type d@@12) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@12) (= (DatatypeCtorId d@@12) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@12) |##Options.Option.Some|) (Options.Option.Some_q d@@12)))) :qid |unknown.0:0| :skolemid |1691| :pattern ( (Options.Option.Some_q d@@12)) )))
(assert (forall ((d@@13 T@U) ) (!  (=> (and (= (type d@@13) DatatypeTypeType) (Options.Option.Some_q d@@13)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@13 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsd.2:36| :skolemid |1692| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1693| :pattern ( (Options.Option.Some_q d@@13)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4)) (=> ($IsBox |a#7#0#0@@0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |1694| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@30)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@30) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@30)) (=> ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@30) ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@30)))) :qid |unknown.0:0| :skolemid |1695| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@30)) )))
(assert (forall ((arg0@@334 T@U) ) (! (= (type (Options.Option.value arg0@@334)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@334)) )))
(assert (forall ((d@@14 T@U) (Options.Option$V@@6 T@U) ($h@@31 T@U) ) (!  (=> (and (and (and (= (type d@@14) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@31) (and (Options.Option.Some_q d@@14) ($IsAlloc d@@14 (Tclass.Options.Option Options.Option$V@@6) $h@@31)))) ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@31)) :qid |unknown.0:0| :skolemid |1696| :pattern ( ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@31)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsd.2:36| :skolemid |1697| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsd.2:36| :skolemid |1698| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsd.2:36| :skolemid |1699| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) (|$IsA#Options.Option| d@@15)) (or (Options.Option.None_q d@@15) (Options.Option.Some_q d@@15))) :qid |unknown.0:0| :skolemid |1700| :pattern ( (|$IsA#Options.Option| d@@15)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@16 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@16) DatatypeTypeType)) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@16) (Options.Option.Some_q d@@16))) :qid |unknown.0:0| :skolemid |1701| :pattern ( (Options.Option.Some_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@134 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) (and (Options.Option.None_q a@@134) (Options.Option.None_q b@@65))) (and (=> (|Options.Option#Equal| a@@134 b@@65) true) (=> true (|Options.Option#Equal| a@@134 b@@65)))) :qid |unknown.0:0| :skolemid |1702| :pattern ( (|Options.Option#Equal| a@@134 b@@65) (Options.Option.None_q a@@134)) :pattern ( (|Options.Option#Equal| a@@134 b@@65) (Options.Option.None_q b@@65)) )))
(assert (forall ((a@@135 T@U) (b@@66 T@U) ) (!  (=> (and (and (= (type a@@135) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (Options.Option.Some_q a@@135) (Options.Option.Some_q b@@66))) (and (=> (|Options.Option#Equal| a@@135 b@@66) (= (Options.Option.value a@@135) (Options.Option.value b@@66))) (=> (= (Options.Option.value a@@135) (Options.Option.value b@@66)) (|Options.Option#Equal| a@@135 b@@66)))) :qid |unknown.0:0| :skolemid |1703| :pattern ( (|Options.Option#Equal| a@@135 b@@66) (Options.Option.Some_q a@@135)) :pattern ( (|Options.Option#Equal| a@@135 b@@66) (Options.Option.Some_q b@@66)) )))
(assert (forall ((a@@136 T@U) (b@@67 T@U) ) (!  (=> (and (= (type a@@136) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@136 b@@67) (= a@@136 b@@67)) (=> (= a@@136 b@@67) (|Options.Option#Equal| a@@136 b@@67)))) :qid |unknown.0:0| :skolemid |1704| :pattern ( (|Options.Option#Equal| a@@136 b@@67)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@125 T@U) ) (!  (=> (and (= (type bx@@125) BoxType) ($IsBox bx@@125 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@125)) bx@@125) ($Is ($Unbox refType bx@@125) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1705| :pattern ( ($IsBox bx@@125 Tclass.Options.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (and (=> ($Is $o@@11 Tclass.Options.__default) (or (= $o@@11 null) (= (dtype $o@@11) Tclass.Options.__default))) (=> (or (= $o@@11 null) (= (dtype $o@@11) Tclass.Options.__default)) ($Is $o@@11 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1706| :pattern ( ($Is $o@@11 Tclass.Options.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@32 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@32) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@12 Tclass.Options.__default $h@@32) (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@32 $o@@12) alloc)))) (=> (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@32 $o@@12) alloc))) ($IsAlloc $o@@12 Tclass.Options.__default $h@@32)))) :qid |unknown.0:0| :skolemid |1707| :pattern ( ($IsAlloc $o@@12 Tclass.Options.__default $h@@32)) )))
(assert (forall ((arg0@@335 T@U) (arg1@@156 T@U) (arg2@@112 T@U) (arg3@@87 T@U) (arg4@@76 T@U) ) (! (= (type (Options.__default.MapOption arg0@@335 arg1@@156 arg2@@112 arg3@@87 arg4@@76)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@335 arg1@@156 arg2@@112 arg3@@87 arg4@@76)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@31| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@31|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@31|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@31| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@13 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@13) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@13 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@31| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@13))))) (= (MapType1Select (MapType0Select $h0 $o@@13) $f) (MapType1Select (MapType0Select $h1 $o@@13) $f)))) :qid |unknown.0:0| :skolemid |1708| :no-pattern (type $o@@13) :no-pattern (type $f) :no-pattern (U_2_int $o@@13) :no-pattern (U_2_bool $o@@13) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@31|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@31|))) :qid |unknown.0:0| :skolemid |1709| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@31|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap T@U) (|opt#0@@0| T@U) (|f#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@32|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|) (and (and (and ($IsGoodHeap $Heap) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@32| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@32| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@32| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1710| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@0 T@U) (|opt#0@@1| T@U) (|f#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@33|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@0) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@33| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@33|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@33| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@33| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@33|)))) :qid |unknown.0:0| :skolemid |1711| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@33|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@1 T@U) (|opt#0@@2| T@U) (|f#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@34|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@34|) (and (and (and ($IsGoodHeap $Heap@@1) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@34| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@34| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@34|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#1| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@34| |v#1|)))))) :qid |unknown.0:0| :skolemid |1712| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@34|)) ))))
(assert (forall ((arg0@@336 T@U) (arg1@@157 T@U) (arg2@@113 T@U) (arg3@@88 T@U) (arg4@@77 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@336 arg1@@157 arg2@@113 arg3@@88 arg4@@77)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@336 arg1@@157 arg2@@113 arg3@@88 arg4@@77)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@35|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@35|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@35| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@14 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@14) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@14 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@35| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@14))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@14) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@14) $f@@0)))) :qid |unknown.0:0| :skolemid |1713| :no-pattern (type $o@@14) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@14) :no-pattern (U_2_bool $o@@14) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@35|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@35|))) :qid |unknown.0:0| :skolemid |1714| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@35|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@4| T@U) (|f#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@36|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@36| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1715| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@5| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@37|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@37| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@37|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@37| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@37| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@37|)))) :qid |unknown.0:0| :skolemid |1716| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@37|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@6| T@U) (|f#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@38|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@38|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@38| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@38| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@38|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#1@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@38| |v#1@@0|)))))) :qid |unknown.0:0| :skolemid |1717| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@38|)) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@126 T@U) ) (!  (=> (and (= (type bx@@126) BoxType) ($IsBox bx@@126 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@126)) bx@@126) ($Is ($Unbox intType bx@@126) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1718| :pattern ( ($IsBox bx@@126 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0| T@U) ) (!  (=> (= (type |i#0|) intType) (and (=> ($Is |i#0| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0|)) (< (U_2_int |i#0|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0|)) (< (U_2_int |i#0|) 128)) ($Is |i#0| Tclass.NativeTypes.sbyte)))) :qid |unknown.0:0| :skolemid |1719| :pattern ( ($Is |i#0| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@0| T@U) ($h@@33 T@U) ) (!  (=> (and (= (type |i#0@@0|) intType) (= (type $h@@33) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@33)) :qid |unknown.0:0| :skolemid |1720| :pattern ( ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@33)) )))
(assert (forall ((|i#0@@1| T@U) ) (!  (=> (= (type |i#0@@1|) intType) (and (=> ($Is |i#0@@1| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@1|)) (< (U_2_int |i#0@@1|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@1|)) (< (U_2_int |i#0@@1|) 256)) ($Is |i#0@@1| Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |1721| :pattern ( ($Is |i#0@@1| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@2| T@U) ($h@@34 T@U) ) (!  (=> (and (= (type |i#0@@2|) intType) (= (type $h@@34) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@34)) :qid |unknown.0:0| :skolemid |1722| :pattern ( ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@34)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@127 T@U) ) (!  (=> (and (= (type bx@@127) BoxType) ($IsBox bx@@127 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@127)) bx@@127) ($Is ($Unbox intType bx@@127) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1723| :pattern ( ($IsBox bx@@127 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@3| T@U) ) (!  (=> (= (type |i#0@@3|) intType) (and (=> ($Is |i#0@@3| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@3|)) (< (U_2_int |i#0@@3|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@3|)) (< (U_2_int |i#0@@3|) 32768)) ($Is |i#0@@3| Tclass.NativeTypes.int16)))) :qid |unknown.0:0| :skolemid |1724| :pattern ( ($Is |i#0@@3| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@4| T@U) ($h@@35 T@U) ) (!  (=> (and (= (type |i#0@@4|) intType) (= (type $h@@35) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@35)) :qid |unknown.0:0| :skolemid |1725| :pattern ( ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@35)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@128 T@U) ) (!  (=> (and (= (type bx@@128) BoxType) ($IsBox bx@@128 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@128)) bx@@128) ($Is ($Unbox intType bx@@128) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1726| :pattern ( ($IsBox bx@@128 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@5| T@U) ) (!  (=> (= (type |i#0@@5|) intType) (and (=> ($Is |i#0@@5| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@5|)) (< (U_2_int |i#0@@5|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@5|)) (< (U_2_int |i#0@@5|) 65536)) ($Is |i#0@@5| Tclass.NativeTypes.uint16)))) :qid |unknown.0:0| :skolemid |1727| :pattern ( ($Is |i#0@@5| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@6| T@U) ($h@@36 T@U) ) (!  (=> (and (= (type |i#0@@6|) intType) (= (type $h@@36) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@36)) :qid |unknown.0:0| :skolemid |1728| :pattern ( ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@36)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@129 T@U) ) (!  (=> (and (= (type bx@@129) BoxType) ($IsBox bx@@129 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@129)) bx@@129) ($Is ($Unbox intType bx@@129) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1729| :pattern ( ($IsBox bx@@129 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@7| T@U) ) (!  (=> (= (type |i#0@@7|) intType) (and (=> ($Is |i#0@@7| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@7|)) (< (U_2_int |i#0@@7|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@7|)) (< (U_2_int |i#0@@7|) 2147483648)) ($Is |i#0@@7| Tclass.NativeTypes.int32)))) :qid |unknown.0:0| :skolemid |1730| :pattern ( ($Is |i#0@@7| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@8| T@U) ($h@@37 T@U) ) (!  (=> (and (= (type |i#0@@8|) intType) (= (type $h@@37) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@37)) :qid |unknown.0:0| :skolemid |1731| :pattern ( ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@37)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@130 T@U) ) (!  (=> (and (= (type bx@@130) BoxType) ($IsBox bx@@130 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@130)) bx@@130) ($Is ($Unbox intType bx@@130) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1732| :pattern ( ($IsBox bx@@130 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@9| T@U) ) (!  (=> (= (type |i#0@@9|) intType) (and (=> ($Is |i#0@@9| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@9|)) (< (U_2_int |i#0@@9|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@9|)) (< (U_2_int |i#0@@9|) 4294967296)) ($Is |i#0@@9| Tclass.NativeTypes.uint32)))) :qid |unknown.0:0| :skolemid |1733| :pattern ( ($Is |i#0@@9| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@10| T@U) ($h@@38 T@U) ) (!  (=> (and (= (type |i#0@@10|) intType) (= (type $h@@38) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@38)) :qid |unknown.0:0| :skolemid |1734| :pattern ( ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@38)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@131 T@U) ) (!  (=> (and (= (type bx@@131) BoxType) ($IsBox bx@@131 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@131)) bx@@131) ($Is ($Unbox intType bx@@131) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1735| :pattern ( ($IsBox bx@@131 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@11| T@U) ) (!  (=> (= (type |i#0@@11|) intType) (and (=> ($Is |i#0@@11| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@11|)) (< (U_2_int |i#0@@11|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@11|)) (< (U_2_int |i#0@@11|) 9223372036854775808)) ($Is |i#0@@11| Tclass.NativeTypes.int64)))) :qid |unknown.0:0| :skolemid |1736| :pattern ( ($Is |i#0@@11| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@12| T@U) ($h@@39 T@U) ) (!  (=> (and (= (type |i#0@@12|) intType) (= (type $h@@39) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@39)) :qid |unknown.0:0| :skolemid |1737| :pattern ( ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@39)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@132 T@U) ) (!  (=> (and (= (type bx@@132) BoxType) ($IsBox bx@@132 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@132)) bx@@132) ($Is ($Unbox intType bx@@132) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1738| :pattern ( ($IsBox bx@@132 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (and (=> ($Is |i#0@@13| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 18446744073709551616)) ($Is |i#0@@13| Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |1739| :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@14| T@U) ($h@@40 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@40) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@40)) :qid |unknown.0:0| :skolemid |1740| :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@40)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@133 T@U) ) (!  (=> (and (= (type bx@@133) BoxType) ($IsBox bx@@133 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@133)) bx@@133) ($Is ($Unbox intType bx@@133) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1741| :pattern ( ($IsBox bx@@133 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (and (=> ($Is |i#0@@15| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 128)) ($Is |i#0@@15| Tclass.NativeTypes.nat8)))) :qid |unknown.0:0| :skolemid |1742| :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@16| T@U) ($h@@41 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@41) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@41)) :qid |unknown.0:0| :skolemid |1743| :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@41)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@134 T@U) ) (!  (=> (and (= (type bx@@134) BoxType) ($IsBox bx@@134 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@134)) bx@@134) ($Is ($Unbox intType bx@@134) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1744| :pattern ( ($IsBox bx@@134 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (and (=> ($Is |i#0@@17| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768)) ($Is |i#0@@17| Tclass.NativeTypes.nat16)))) :qid |unknown.0:0| :skolemid |1745| :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@18| T@U) ($h@@42 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@42) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@42)) :qid |unknown.0:0| :skolemid |1746| :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@42)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@135 T@U) ) (!  (=> (and (= (type bx@@135) BoxType) ($IsBox bx@@135 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@135)) bx@@135) ($Is ($Unbox intType bx@@135) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1747| :pattern ( ($IsBox bx@@135 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (and (=> ($Is |i#0@@19| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 2147483648)) ($Is |i#0@@19| Tclass.NativeTypes.nat32)))) :qid |unknown.0:0| :skolemid |1748| :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@20| T@U) ($h@@43 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@43) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@43)) :qid |unknown.0:0| :skolemid |1749| :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@43)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@136 T@U) ) (!  (=> (and (= (type bx@@136) BoxType) ($IsBox bx@@136 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@136)) bx@@136) ($Is ($Unbox intType bx@@136) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1750| :pattern ( ($IsBox bx@@136 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (and (=> ($Is |i#0@@21| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 9223372036854775808)) ($Is |i#0@@21| Tclass.NativeTypes.nat64)))) :qid |unknown.0:0| :skolemid |1751| :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@22| T@U) ($h@@44 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@44) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@44)) :qid |unknown.0:0| :skolemid |1752| :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@44)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@137 T@U) ) (!  (=> (and (= (type bx@@137) BoxType) ($IsBox bx@@137 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@137)) bx@@137) ($Is ($Unbox refType bx@@137) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1753| :pattern ( ($IsBox bx@@137 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (and (=> ($Is $o@@15 Tclass.NativeTypes.__default) (or (= $o@@15 null) (= (dtype $o@@15) Tclass.NativeTypes.__default))) (=> (or (= $o@@15 null) (= (dtype $o@@15) Tclass.NativeTypes.__default)) ($Is $o@@15 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1754| :pattern ( ($Is $o@@15 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@45 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@45) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@16 Tclass.NativeTypes.__default $h@@45) (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@45 $o@@16) alloc)))) (=> (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@45 $o@@16) alloc))) ($IsAlloc $o@@16 Tclass.NativeTypes.__default $h@@45)))) :qid |unknown.0:0| :skolemid |1755| :pattern ( ($IsAlloc $o@@16 Tclass.NativeTypes.__default $h@@45)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (forall ((bx@@138 T@U) ) (!  (=> (and (= (type bx@@138) BoxType) ($IsBox bx@@138 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@138)) bx@@138) ($Is ($Unbox (SeqType BoxType) bx@@138) Tclass.ValueType.Value))) :qid |unknown.0:0| :skolemid |1756| :pattern ( ($IsBox bx@@138 Tclass.ValueType.Value)) )))
(assert (forall ((|s#0| T@U) ) (!  (=> (= (type |s#0|) (SeqType BoxType)) (and (=> ($Is |s#0| Tclass.ValueType.Value) (and ($Is |s#0| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0|) (LitInt 1024)))) (=> (and ($Is |s#0| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0|) (LitInt 1024))) ($Is |s#0| Tclass.ValueType.Value)))) :qid |unknown.0:0| :skolemid |1757| :pattern ( ($Is |s#0| Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@0| T@U) ($h@@46 T@U) ) (!  (=> (and (= (type |s#0@@0|) (SeqType BoxType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |s#0@@0| Tclass.ValueType.Value $h@@46) ($IsAlloc |s#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@46)) (=> ($IsAlloc |s#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@46) ($IsAlloc |s#0@@0| Tclass.ValueType.Value $h@@46)))) :qid |unknown.0:0| :skolemid |1758| :pattern ( ($IsAlloc |s#0@@0| Tclass.ValueType.Value $h@@46)) )))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (forall ((bx@@139 T@U) ) (!  (=> (and (= (type bx@@139) BoxType) ($IsBox bx@@139 Tclass.ValueType.__default)) (and (= ($Box ($Unbox refType bx@@139)) bx@@139) ($Is ($Unbox refType bx@@139) Tclass.ValueType.__default))) :qid |unknown.0:0| :skolemid |1759| :pattern ( ($IsBox bx@@139 Tclass.ValueType.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (and (=> ($Is $o@@17 Tclass.ValueType.__default) (or (= $o@@17 null) (= (dtype $o@@17) Tclass.ValueType.__default))) (=> (or (= $o@@17 null) (= (dtype $o@@17) Tclass.ValueType.__default)) ($Is $o@@17 Tclass.ValueType.__default)))) :qid |unknown.0:0| :skolemid |1760| :pattern ( ($Is $o@@17 Tclass.ValueType.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@47 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@47) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@18 Tclass.ValueType.__default $h@@47) (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@47 $o@@18) alloc)))) (=> (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@47 $o@@18) alloc))) ($IsAlloc $o@@18 Tclass.ValueType.__default $h@@47)))) :qid |unknown.0:0| :skolemid |1761| :pattern ( ($IsAlloc $o@@18 Tclass.ValueType.__default $h@@47)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) ValueType.__default.MaxLen) (< ValueType.__default.MaxLen 18446744073709551616)))))
(assert  (=> |ValueType.__default.MaxLen#requires| true))
(assert  (=> true |ValueType.__default.MaxLen#requires|))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true |ValueType.__default.DefaultValue#requires|))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0| T@U) ) (!  (=> (and (= (type |v#0|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0|) ($Is |v#0| Tclass.ValueType.Value))) (<= (LitInt 0) (ValueType.__default.Len |v#0|))) :qid |KeyTypes.17:15| :skolemid |1762| :pattern ( (ValueType.__default.Len |v#0|)) ))))
(assert (forall ((|v#0@@0| T@U) ) (!  (=> (and (= (type |v#0@@0|) (SeqType BoxType)) ($Is |v#0@@0| Tclass.ValueType.Value)) (and (=> (|ValueType.__default.Len#requires| |v#0@@0|) true) (=> true (|ValueType.__default.Len#requires| |v#0@@0|)))) :qid |KeyTypes.17:15| :skolemid |1763| :pattern ( (|ValueType.__default.Len#requires| |v#0@@0|)) )))
(assert  (=> true (forall ((|v#0@@1| T@U) ) (!  (=> (and (= (type |v#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@1|) ($Is |v#0@@1| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@1|) (|Seq#Length| |v#0@@1|))) :qid |KeyTypes.17:15| :skolemid |1764| :pattern ( (ValueType.__default.Len |v#0@@1|)) ))))
(assert  (=> true (forall ((|v#0@@2| T@U) ) (!  (=> (and (= (type |v#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@2|)) ($Is |v#0@@2| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@2|)) (|Seq#Length| (Lit |v#0@@2|)))) :qid |KeyTypes.17:15| :weight 3 :skolemid |1765| :pattern ( (ValueType.__default.Len (Lit |v#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@1| T@U) ) (!  (=> (and (= (type |s#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@1|) ($Is |s#0@@1| (TSeq Tclass.NativeTypes.byte)))) true) :qid |KeyTypes.19:36| :skolemid |1766| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@1|)) ))))
(assert (forall ((|s#0@@2| T@U) ) (!  (=> (and (= (type |s#0@@2|) (SeqType BoxType)) ($Is |s#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@2|) true) (=> true (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@2|)))) :qid |KeyTypes.19:36| :skolemid |1767| :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@2|)) )))
(assert  (=> true (forall ((|s#0@@3| T@U) ) (!  (=> (and (= (type |s#0@@3|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@3|) ($Is |s#0@@3| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring |s#0@@3|) (<= (|Seq#Length| |s#0@@3|) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| |s#0@@3|) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring |s#0@@3|))))) :qid |KeyTypes.19:36| :skolemid |1768| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@3|)) ))))
(assert  (=> true (forall ((|s#0@@4| T@U) ) (!  (=> (and (= (type |s#0@@4|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@4|)) ($Is |s#0@@4| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring (Lit |s#0@@4|)) (<= (|Seq#Length| (Lit |s#0@@4|)) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| (Lit |s#0@@4|)) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring (Lit |s#0@@4|)))))) :qid |KeyTypes.19:36| :weight 3 :skolemid |1769| :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@4|))) ))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |KeyTypes.24:37| :skolemid |1770| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|)) ))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true) (=> true (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)))) :qid |KeyTypes.24:37| :skolemid |1771| :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)) )))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@23| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@23|) (< |i#0@@23| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@23|)))) :qid |KeyTypes.26:12| :skolemid |1772| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@23|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#0@@24| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@24|) (< |i#0@@24| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@24|)))) :qid |KeyTypes.26:12| :skolemid |1773| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@24|))) ))) (=> (forall ((|i#0@@25| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@25|) (< |i#0@@25| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@25|)))) :qid |KeyTypes.26:12| :skolemid |1773| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@25|))) )) (ValueType.__default.ValidMessageBytestrings |strs#0@@1|))))) :qid |KeyTypes.24:37| :skolemid |1774| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|)) ))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1|)))) :qid |KeyTypes.26:12| :skolemid |1775| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@0|)))) :qid |KeyTypes.26:12| :skolemid |1776| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@0|))) ))) (=> (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@1|)))) :qid |KeyTypes.26:12| :skolemid |1776| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@1|))) )) (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)))))) :qid |KeyTypes.24:37| :weight 3 :skolemid |1777| :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|))) ))))
(assert (forall ((|s#0@@5| T@U) ) (!  (=> (= (type |s#0@@5|) (SeqType BoxType)) (and (=> ($Is |s#0@@5| Tclass.KeyType.Key) (and ($Is |s#0@@5| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@5|) (LitInt 1024)))) (=> (and ($Is |s#0@@5| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@5|) (LitInt 1024))) ($Is |s#0@@5| Tclass.KeyType.Key)))) :qid |unknown.0:0| :skolemid |1778| :pattern ( ($Is |s#0@@5| Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@6| T@U) ($h@@48 T@U) ) (!  (=> (and (= (type |s#0@@6|) (SeqType BoxType)) (= (type $h@@48) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |s#0@@6| Tclass.KeyType.Key $h@@48) ($IsAlloc |s#0@@6| (TSeq Tclass.NativeTypes.byte) $h@@48)) (=> ($IsAlloc |s#0@@6| (TSeq Tclass.NativeTypes.byte) $h@@48) ($IsAlloc |s#0@@6| Tclass.KeyType.Key $h@@48)))) :qid |unknown.0:0| :skolemid |1779| :pattern ( ($IsAlloc |s#0@@6| Tclass.KeyType.Key $h@@48)) )))
(assert (= (type Tclass.KeyType.__default) TyType))
(assert (= (Tag Tclass.KeyType.__default) Tagclass.KeyType.__default))
(assert (forall ((bx@@140 T@U) ) (!  (=> (and (= (type bx@@140) BoxType) ($IsBox bx@@140 Tclass.KeyType.__default)) (and (= ($Box ($Unbox refType bx@@140)) bx@@140) ($Is ($Unbox refType bx@@140) Tclass.KeyType.__default))) :qid |unknown.0:0| :skolemid |1780| :pattern ( ($IsBox bx@@140 Tclass.KeyType.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (and (=> ($Is $o@@19 Tclass.KeyType.__default) (or (= $o@@19 null) (= (dtype $o@@19) Tclass.KeyType.__default))) (=> (or (= $o@@19 null) (= (dtype $o@@19) Tclass.KeyType.__default)) ($Is $o@@19 Tclass.KeyType.__default)))) :qid |unknown.0:0| :skolemid |1781| :pattern ( ($Is $o@@19 Tclass.KeyType.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@49 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@49) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@20 Tclass.KeyType.__default $h@@49) (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@49 $o@@20) alloc)))) (=> (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@49 $o@@20) alloc))) ($IsAlloc $o@@20 Tclass.KeyType.__default $h@@49)))) :qid |unknown.0:0| :skolemid |1782| :pattern ( ($IsAlloc $o@@20 Tclass.KeyType.__default $h@@49)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) KeyType.__default.MaxLen) (< KeyType.__default.MaxLen 18446744073709551616)))))
(assert  (=> |KeyType.__default.MaxLen#requires| true))
(assert  (=> true |KeyType.__default.MaxLen#requires|))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert (forall ((arg0@@337 T@U) ) (! (= (type (|#UI.RangeStart.SInclusive| arg0@@337)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SInclusive| :pattern ( (|#UI.RangeStart.SInclusive| arg0@@337)) )))
(assert (forall ((|a#0#0#0@@0| T@U) ) (!  (=> (= (type |a#0#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SInclusive| |a#0#0#0@@0|)) |##UI.RangeStart.SInclusive|)) :qid |UIsdfy.10:36| :skolemid |1783| :pattern ( (|#UI.RangeStart.SInclusive| |a#0#0#0@@0|)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (= (type d@@17) DatatypeTypeType) (and (=> (UI.RangeStart.SInclusive_q d@@17) (= (DatatypeCtorId d@@17) |##UI.RangeStart.SInclusive|)) (=> (= (DatatypeCtorId d@@17) |##UI.RangeStart.SInclusive|) (UI.RangeStart.SInclusive_q d@@17)))) :qid |unknown.0:0| :skolemid |1784| :pattern ( (UI.RangeStart.SInclusive_q d@@17)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (and (= (type d@@18) DatatypeTypeType) (UI.RangeStart.SInclusive_q d@@18)) (exists ((|a#1#0#0@@0| T@U) ) (!  (and (= (type |a#1#0#0@@0|) (SeqType BoxType)) (= d@@18 (|#UI.RangeStart.SInclusive| |a#1#0#0@@0|))) :qid |UIsdfy.10:36| :skolemid |1785| :no-pattern (type |a#1#0#0@@0|) :no-pattern (U_2_int |a#1#0#0@@0|) :no-pattern (U_2_bool |a#1#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1786| :pattern ( (UI.RangeStart.SInclusive_q d@@18)) )))
(assert (= (type Tclass.UI.RangeStart) TyType))
(assert (= (Tag Tclass.UI.RangeStart) Tagclass.UI.RangeStart))
(assert (forall ((bx@@141 T@U) ) (!  (=> (and (= (type bx@@141) BoxType) ($IsBox bx@@141 Tclass.UI.RangeStart)) (and (= ($Box ($Unbox DatatypeTypeType bx@@141)) bx@@141) ($Is ($Unbox DatatypeTypeType bx@@141) Tclass.UI.RangeStart))) :qid |unknown.0:0| :skolemid |1787| :pattern ( ($IsBox bx@@141 Tclass.UI.RangeStart)) )))
(assert (forall ((|a#2#0#0@@0| T@U) ) (!  (=> (= (type |a#2#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeStart.SInclusive| |a#2#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#2#0#0@@0| Tclass.KeyType.Key)) (=> ($Is |a#2#0#0@@0| Tclass.KeyType.Key) ($Is (|#UI.RangeStart.SInclusive| |a#2#0#0@@0|) Tclass.UI.RangeStart)))) :qid |UIsdfy.10:36| :skolemid |1788| :pattern ( ($Is (|#UI.RangeStart.SInclusive| |a#2#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#3#0#0@@0| T@U) ($h@@50 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@0|) (SeqType BoxType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@50)) (and (=> ($IsAlloc (|#UI.RangeStart.SInclusive| |a#3#0#0@@0|) Tclass.UI.RangeStart $h@@50) ($IsAlloc |a#3#0#0@@0| Tclass.KeyType.Key $h@@50)) (=> ($IsAlloc |a#3#0#0@@0| Tclass.KeyType.Key $h@@50) ($IsAlloc (|#UI.RangeStart.SInclusive| |a#3#0#0@@0|) Tclass.UI.RangeStart $h@@50)))) :qid |UIsdfy.10:36| :skolemid |1789| :pattern ( ($IsAlloc (|#UI.RangeStart.SInclusive| |a#3#0#0@@0|) Tclass.UI.RangeStart $h@@50)) )))
(assert (forall ((arg0@@338 T@U) ) (! (= (type (UI.RangeStart.key arg0@@338)) (SeqType BoxType)) :qid |funType:UI.RangeStart.key| :pattern ( (UI.RangeStart.key arg0@@338)) )))
(assert (forall ((d@@19 T@U) ($h@@51 T@U) ) (!  (=> (and (and (= (type d@@19) DatatypeTypeType) (= (type $h@@51) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@51) (and (UI.RangeStart.SInclusive_q d@@19) ($IsAlloc d@@19 Tclass.UI.RangeStart $h@@51)))) ($IsAlloc (UI.RangeStart.key d@@19) Tclass.KeyType.Key $h@@51)) :qid |unknown.0:0| :skolemid |1790| :pattern ( ($IsAlloc (UI.RangeStart.key d@@19) Tclass.KeyType.Key $h@@51)) )))
(assert (forall ((|a#4#0#0@@0| T@U) ) (!  (=> (= (type |a#4#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SInclusive| (Lit |a#4#0#0@@0|)) (Lit (|#UI.RangeStart.SInclusive| |a#4#0#0@@0|)))) :qid |UIsdfy.10:36| :skolemid |1791| :pattern ( (|#UI.RangeStart.SInclusive| (Lit |a#4#0#0@@0|))) )))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SInclusive| |a#5#0#0@@1|)) |a#5#0#0@@1|)) :qid |UIsdfy.10:36| :skolemid |1792| :pattern ( (|#UI.RangeStart.SInclusive| |a#5#0#0@@1|)) )))
(assert (forall ((arg0@@339 T@U) ) (! (= (type (|#UI.RangeStart.SExclusive| arg0@@339)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SExclusive| :pattern ( (|#UI.RangeStart.SExclusive| arg0@@339)) )))
(assert (forall ((|a#6#0#0@@1| T@U) ) (!  (=> (= (type |a#6#0#0@@1|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SExclusive| |a#6#0#0@@1|)) |##UI.RangeStart.SExclusive|)) :qid |UIsdfy.10:59| :skolemid |1793| :pattern ( (|#UI.RangeStart.SExclusive| |a#6#0#0@@1|)) )))
(assert (forall ((d@@20 T@U) ) (!  (=> (= (type d@@20) DatatypeTypeType) (and (=> (UI.RangeStart.SExclusive_q d@@20) (= (DatatypeCtorId d@@20) |##UI.RangeStart.SExclusive|)) (=> (= (DatatypeCtorId d@@20) |##UI.RangeStart.SExclusive|) (UI.RangeStart.SExclusive_q d@@20)))) :qid |unknown.0:0| :skolemid |1794| :pattern ( (UI.RangeStart.SExclusive_q d@@20)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) (UI.RangeStart.SExclusive_q d@@21)) (exists ((|a#7#0#0@@1| T@U) ) (!  (and (= (type |a#7#0#0@@1|) (SeqType BoxType)) (= d@@21 (|#UI.RangeStart.SExclusive| |a#7#0#0@@1|))) :qid |UIsdfy.10:59| :skolemid |1795| :no-pattern (type |a#7#0#0@@1|) :no-pattern (U_2_int |a#7#0#0@@1|) :no-pattern (U_2_bool |a#7#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |1796| :pattern ( (UI.RangeStart.SExclusive_q d@@21)) )))
(assert (forall ((|a#8#0#0@@1| T@U) ) (!  (=> (= (type |a#8#0#0@@1|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeStart.SExclusive| |a#8#0#0@@1|) Tclass.UI.RangeStart) ($Is |a#8#0#0@@1| Tclass.KeyType.Key)) (=> ($Is |a#8#0#0@@1| Tclass.KeyType.Key) ($Is (|#UI.RangeStart.SExclusive| |a#8#0#0@@1|) Tclass.UI.RangeStart)))) :qid |UIsdfy.10:59| :skolemid |1797| :pattern ( ($Is (|#UI.RangeStart.SExclusive| |a#8#0#0@@1|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ($h@@52 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@0|) (SeqType BoxType)) (= (type $h@@52) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@52)) (and (=> ($IsAlloc (|#UI.RangeStart.SExclusive| |a#9#0#0@@0|) Tclass.UI.RangeStart $h@@52) ($IsAlloc |a#9#0#0@@0| Tclass.KeyType.Key $h@@52)) (=> ($IsAlloc |a#9#0#0@@0| Tclass.KeyType.Key $h@@52) ($IsAlloc (|#UI.RangeStart.SExclusive| |a#9#0#0@@0|) Tclass.UI.RangeStart $h@@52)))) :qid |UIsdfy.10:59| :skolemid |1798| :pattern ( ($IsAlloc (|#UI.RangeStart.SExclusive| |a#9#0#0@@0|) Tclass.UI.RangeStart $h@@52)) )))
(assert (forall ((d@@22 T@U) ($h@@53 T@U) ) (!  (=> (and (and (= (type d@@22) DatatypeTypeType) (= (type $h@@53) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@53) (and (UI.RangeStart.SExclusive_q d@@22) ($IsAlloc d@@22 Tclass.UI.RangeStart $h@@53)))) ($IsAlloc (UI.RangeStart.key d@@22) Tclass.KeyType.Key $h@@53)) :qid |unknown.0:0| :skolemid |1799| :pattern ( ($IsAlloc (UI.RangeStart.key d@@22) Tclass.KeyType.Key $h@@53)) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SExclusive| (Lit |a#10#0#0@@0|)) (Lit (|#UI.RangeStart.SExclusive| |a#10#0#0@@0|)))) :qid |UIsdfy.10:59| :skolemid |1800| :pattern ( (|#UI.RangeStart.SExclusive| (Lit |a#10#0#0@@0|))) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SExclusive| |a#11#0#0@@0|)) |a#11#0#0@@0|)) :qid |UIsdfy.10:59| :skolemid |1801| :pattern ( (|#UI.RangeStart.SExclusive| |a#11#0#0@@0|)) )))
(assert (= (type |#UI.RangeStart.NegativeInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeStart.NegativeInf|) |##UI.RangeStart.NegativeInf|))
(assert (forall ((d@@23 T@U) ) (!  (=> (= (type d@@23) DatatypeTypeType) (and (=> (UI.RangeStart.NegativeInf_q d@@23) (= (DatatypeCtorId d@@23) |##UI.RangeStart.NegativeInf|)) (=> (= (DatatypeCtorId d@@23) |##UI.RangeStart.NegativeInf|) (UI.RangeStart.NegativeInf_q d@@23)))) :qid |unknown.0:0| :skolemid |1802| :pattern ( (UI.RangeStart.NegativeInf_q d@@23)) )))
(assert (forall ((d@@24 T@U) ) (!  (=> (and (= (type d@@24) DatatypeTypeType) (UI.RangeStart.NegativeInf_q d@@24)) (= d@@24 |#UI.RangeStart.NegativeInf|)) :qid |unknown.0:0| :skolemid |1803| :pattern ( (UI.RangeStart.NegativeInf_q d@@24)) )))
(assert ($Is |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart))
(assert (forall (($h@@54 T@U) ) (!  (=> (and (= (type $h@@54) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@54)) ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@54)) :qid |DafnyPre.521:12| :skolemid |1804| :pattern ( ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@54)) )))
(assert (= |#UI.RangeStart.NegativeInf| (Lit |#UI.RangeStart.NegativeInf|)))
(assert (forall ((d@@25 T@U) ) (!  (=> (and (= (type d@@25) DatatypeTypeType) (|$IsA#UI.RangeStart| d@@25)) (or (or (UI.RangeStart.SInclusive_q d@@25) (UI.RangeStart.SExclusive_q d@@25)) (UI.RangeStart.NegativeInf_q d@@25))) :qid |unknown.0:0| :skolemid |1805| :pattern ( (|$IsA#UI.RangeStart| d@@25)) )))
(assert (forall ((d@@26 T@U) ) (!  (=> (and (= (type d@@26) DatatypeTypeType) ($Is d@@26 Tclass.UI.RangeStart)) (or (or (UI.RangeStart.SInclusive_q d@@26) (UI.RangeStart.SExclusive_q d@@26)) (UI.RangeStart.NegativeInf_q d@@26))) :qid |unknown.0:0| :skolemid |1806| :pattern ( (UI.RangeStart.NegativeInf_q d@@26) ($Is d@@26 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SExclusive_q d@@26) ($Is d@@26 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SInclusive_q d@@26) ($Is d@@26 Tclass.UI.RangeStart)) )))
(assert (forall ((a@@137 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@137) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (UI.RangeStart.SInclusive_q a@@137) (UI.RangeStart.SInclusive_q b@@68))) (and (=> (|UI.RangeStart#Equal| a@@137 b@@68) (|Seq#Equal| (UI.RangeStart.key a@@137) (UI.RangeStart.key b@@68))) (=> (|Seq#Equal| (UI.RangeStart.key a@@137) (UI.RangeStart.key b@@68)) (|UI.RangeStart#Equal| a@@137 b@@68)))) :qid |unknown.0:0| :skolemid |1807| :pattern ( (|UI.RangeStart#Equal| a@@137 b@@68) (UI.RangeStart.SInclusive_q a@@137)) :pattern ( (|UI.RangeStart#Equal| a@@137 b@@68) (UI.RangeStart.SInclusive_q b@@68)) )))
(assert (forall ((a@@138 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@138) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (UI.RangeStart.SExclusive_q a@@138) (UI.RangeStart.SExclusive_q b@@69))) (and (=> (|UI.RangeStart#Equal| a@@138 b@@69) (|Seq#Equal| (UI.RangeStart.key a@@138) (UI.RangeStart.key b@@69))) (=> (|Seq#Equal| (UI.RangeStart.key a@@138) (UI.RangeStart.key b@@69)) (|UI.RangeStart#Equal| a@@138 b@@69)))) :qid |unknown.0:0| :skolemid |1808| :pattern ( (|UI.RangeStart#Equal| a@@138 b@@69) (UI.RangeStart.SExclusive_q a@@138)) :pattern ( (|UI.RangeStart#Equal| a@@138 b@@69) (UI.RangeStart.SExclusive_q b@@69)) )))
(assert (forall ((a@@139 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@139) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (UI.RangeStart.NegativeInf_q a@@139) (UI.RangeStart.NegativeInf_q b@@70))) (and (=> (|UI.RangeStart#Equal| a@@139 b@@70) true) (=> true (|UI.RangeStart#Equal| a@@139 b@@70)))) :qid |unknown.0:0| :skolemid |1809| :pattern ( (|UI.RangeStart#Equal| a@@139 b@@70) (UI.RangeStart.NegativeInf_q a@@139)) :pattern ( (|UI.RangeStart#Equal| a@@139 b@@70) (UI.RangeStart.NegativeInf_q b@@70)) )))
(assert (forall ((a@@140 T@U) (b@@71 T@U) ) (!  (=> (and (= (type a@@140) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (=> (|UI.RangeStart#Equal| a@@140 b@@71) (= a@@140 b@@71)) (=> (= a@@140 b@@71) (|UI.RangeStart#Equal| a@@140 b@@71)))) :qid |unknown.0:0| :skolemid |1810| :pattern ( (|UI.RangeStart#Equal| a@@140 b@@71)) )))
(assert (forall ((arg0@@340 T@U) ) (! (= (type (|#UI.RangeEnd.EInclusive| arg0@@340)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EInclusive| :pattern ( (|#UI.RangeEnd.EInclusive| arg0@@340)) )))
(assert (forall ((|a#17#0#0| T@U) ) (!  (=> (= (type |a#17#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EInclusive| |a#17#0#0|)) |##UI.RangeEnd.EInclusive|)) :qid |UIsdfy.11:34| :skolemid |1811| :pattern ( (|#UI.RangeEnd.EInclusive| |a#17#0#0|)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (= (type d@@27) DatatypeTypeType) (and (=> (UI.RangeEnd.EInclusive_q d@@27) (= (DatatypeCtorId d@@27) |##UI.RangeEnd.EInclusive|)) (=> (= (DatatypeCtorId d@@27) |##UI.RangeEnd.EInclusive|) (UI.RangeEnd.EInclusive_q d@@27)))) :qid |unknown.0:0| :skolemid |1812| :pattern ( (UI.RangeEnd.EInclusive_q d@@27)) )))
(assert (forall ((d@@28 T@U) ) (!  (=> (and (= (type d@@28) DatatypeTypeType) (UI.RangeEnd.EInclusive_q d@@28)) (exists ((|a#18#0#0| T@U) ) (!  (and (= (type |a#18#0#0|) (SeqType BoxType)) (= d@@28 (|#UI.RangeEnd.EInclusive| |a#18#0#0|))) :qid |UIsdfy.11:34| :skolemid |1813| :no-pattern (type |a#18#0#0|) :no-pattern (U_2_int |a#18#0#0|) :no-pattern (U_2_bool |a#18#0#0|) ))) :qid |unknown.0:0| :skolemid |1814| :pattern ( (UI.RangeEnd.EInclusive_q d@@28)) )))
(assert (= (type Tclass.UI.RangeEnd) TyType))
(assert (= (Tag Tclass.UI.RangeEnd) Tagclass.UI.RangeEnd))
(assert (forall ((bx@@142 T@U) ) (!  (=> (and (= (type bx@@142) BoxType) ($IsBox bx@@142 Tclass.UI.RangeEnd)) (and (= ($Box ($Unbox DatatypeTypeType bx@@142)) bx@@142) ($Is ($Unbox DatatypeTypeType bx@@142) Tclass.UI.RangeEnd))) :qid |unknown.0:0| :skolemid |1815| :pattern ( ($IsBox bx@@142 Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#19#0#0| T@U) ) (!  (=> (= (type |a#19#0#0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeEnd.EInclusive| |a#19#0#0|) Tclass.UI.RangeEnd) ($Is |a#19#0#0| Tclass.KeyType.Key)) (=> ($Is |a#19#0#0| Tclass.KeyType.Key) ($Is (|#UI.RangeEnd.EInclusive| |a#19#0#0|) Tclass.UI.RangeEnd)))) :qid |UIsdfy.11:34| :skolemid |1816| :pattern ( ($Is (|#UI.RangeEnd.EInclusive| |a#19#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#20#0#0| T@U) ($h@@55 T@U) ) (!  (=> (and (and (= (type |a#20#0#0|) (SeqType BoxType)) (= (type $h@@55) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@55)) (and (=> ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#20#0#0|) Tclass.UI.RangeEnd $h@@55) ($IsAlloc |a#20#0#0| Tclass.KeyType.Key $h@@55)) (=> ($IsAlloc |a#20#0#0| Tclass.KeyType.Key $h@@55) ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#20#0#0|) Tclass.UI.RangeEnd $h@@55)))) :qid |UIsdfy.11:34| :skolemid |1817| :pattern ( ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#20#0#0|) Tclass.UI.RangeEnd $h@@55)) )))
(assert (forall ((arg0@@341 T@U) ) (! (= (type (UI.RangeEnd.key arg0@@341)) (SeqType BoxType)) :qid |funType:UI.RangeEnd.key| :pattern ( (UI.RangeEnd.key arg0@@341)) )))
(assert (forall ((d@@29 T@U) ($h@@56 T@U) ) (!  (=> (and (and (= (type d@@29) DatatypeTypeType) (= (type $h@@56) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@56) (and (UI.RangeEnd.EInclusive_q d@@29) ($IsAlloc d@@29 Tclass.UI.RangeEnd $h@@56)))) ($IsAlloc (UI.RangeEnd.key d@@29) Tclass.KeyType.Key $h@@56)) :qid |unknown.0:0| :skolemid |1818| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@29) Tclass.KeyType.Key $h@@56)) )))
(assert (forall ((|a#21#0#0| T@U) ) (!  (=> (= (type |a#21#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EInclusive| (Lit |a#21#0#0|)) (Lit (|#UI.RangeEnd.EInclusive| |a#21#0#0|)))) :qid |UIsdfy.11:34| :skolemid |1819| :pattern ( (|#UI.RangeEnd.EInclusive| (Lit |a#21#0#0|))) )))
(assert (forall ((|a#22#0#0| T@U) ) (!  (=> (= (type |a#22#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EInclusive| |a#22#0#0|)) |a#22#0#0|)) :qid |UIsdfy.11:34| :skolemid |1820| :pattern ( (|#UI.RangeEnd.EInclusive| |a#22#0#0|)) )))
(assert (forall ((arg0@@342 T@U) ) (! (= (type (|#UI.RangeEnd.EExclusive| arg0@@342)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EExclusive| :pattern ( (|#UI.RangeEnd.EExclusive| arg0@@342)) )))
(assert (forall ((|a#23#0#0| T@U) ) (!  (=> (= (type |a#23#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EExclusive| |a#23#0#0|)) |##UI.RangeEnd.EExclusive|)) :qid |UIsdfy.11:57| :skolemid |1821| :pattern ( (|#UI.RangeEnd.EExclusive| |a#23#0#0|)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (= (type d@@30) DatatypeTypeType) (and (=> (UI.RangeEnd.EExclusive_q d@@30) (= (DatatypeCtorId d@@30) |##UI.RangeEnd.EExclusive|)) (=> (= (DatatypeCtorId d@@30) |##UI.RangeEnd.EExclusive|) (UI.RangeEnd.EExclusive_q d@@30)))) :qid |unknown.0:0| :skolemid |1822| :pattern ( (UI.RangeEnd.EExclusive_q d@@30)) )))
(assert (forall ((d@@31 T@U) ) (!  (=> (and (= (type d@@31) DatatypeTypeType) (UI.RangeEnd.EExclusive_q d@@31)) (exists ((|a#24#0#0| T@U) ) (!  (and (= (type |a#24#0#0|) (SeqType BoxType)) (= d@@31 (|#UI.RangeEnd.EExclusive| |a#24#0#0|))) :qid |UIsdfy.11:57| :skolemid |1823| :no-pattern (type |a#24#0#0|) :no-pattern (U_2_int |a#24#0#0|) :no-pattern (U_2_bool |a#24#0#0|) ))) :qid |unknown.0:0| :skolemid |1824| :pattern ( (UI.RangeEnd.EExclusive_q d@@31)) )))
(assert (forall ((|a#25#0#0| T@U) ) (!  (=> (= (type |a#25#0#0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeEnd.EExclusive| |a#25#0#0|) Tclass.UI.RangeEnd) ($Is |a#25#0#0| Tclass.KeyType.Key)) (=> ($Is |a#25#0#0| Tclass.KeyType.Key) ($Is (|#UI.RangeEnd.EExclusive| |a#25#0#0|) Tclass.UI.RangeEnd)))) :qid |UIsdfy.11:57| :skolemid |1825| :pattern ( ($Is (|#UI.RangeEnd.EExclusive| |a#25#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#26#0#0| T@U) ($h@@57 T@U) ) (!  (=> (and (and (= (type |a#26#0#0|) (SeqType BoxType)) (= (type $h@@57) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@57)) (and (=> ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#26#0#0|) Tclass.UI.RangeEnd $h@@57) ($IsAlloc |a#26#0#0| Tclass.KeyType.Key $h@@57)) (=> ($IsAlloc |a#26#0#0| Tclass.KeyType.Key $h@@57) ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#26#0#0|) Tclass.UI.RangeEnd $h@@57)))) :qid |UIsdfy.11:57| :skolemid |1826| :pattern ( ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#26#0#0|) Tclass.UI.RangeEnd $h@@57)) )))
(assert (forall ((d@@32 T@U) ($h@@58 T@U) ) (!  (=> (and (and (= (type d@@32) DatatypeTypeType) (= (type $h@@58) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@58) (and (UI.RangeEnd.EExclusive_q d@@32) ($IsAlloc d@@32 Tclass.UI.RangeEnd $h@@58)))) ($IsAlloc (UI.RangeEnd.key d@@32) Tclass.KeyType.Key $h@@58)) :qid |unknown.0:0| :skolemid |1827| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@32) Tclass.KeyType.Key $h@@58)) )))
(assert (forall ((|a#27#0#0| T@U) ) (!  (=> (= (type |a#27#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EExclusive| (Lit |a#27#0#0|)) (Lit (|#UI.RangeEnd.EExclusive| |a#27#0#0|)))) :qid |UIsdfy.11:57| :skolemid |1828| :pattern ( (|#UI.RangeEnd.EExclusive| (Lit |a#27#0#0|))) )))
(assert (forall ((|a#28#0#0| T@U) ) (!  (=> (= (type |a#28#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EExclusive| |a#28#0#0|)) |a#28#0#0|)) :qid |UIsdfy.11:57| :skolemid |1829| :pattern ( (|#UI.RangeEnd.EExclusive| |a#28#0#0|)) )))
(assert (= (type |#UI.RangeEnd.PositiveInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeEnd.PositiveInf|) |##UI.RangeEnd.PositiveInf|))
(assert (forall ((d@@33 T@U) ) (!  (=> (= (type d@@33) DatatypeTypeType) (and (=> (UI.RangeEnd.PositiveInf_q d@@33) (= (DatatypeCtorId d@@33) |##UI.RangeEnd.PositiveInf|)) (=> (= (DatatypeCtorId d@@33) |##UI.RangeEnd.PositiveInf|) (UI.RangeEnd.PositiveInf_q d@@33)))) :qid |unknown.0:0| :skolemid |1830| :pattern ( (UI.RangeEnd.PositiveInf_q d@@33)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (and (= (type d@@34) DatatypeTypeType) (UI.RangeEnd.PositiveInf_q d@@34)) (= d@@34 |#UI.RangeEnd.PositiveInf|)) :qid |unknown.0:0| :skolemid |1831| :pattern ( (UI.RangeEnd.PositiveInf_q d@@34)) )))
(assert ($Is |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd))
(assert (forall (($h@@59 T@U) ) (!  (=> (and (= (type $h@@59) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@59)) ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@59)) :qid |DafnyPre.521:12| :skolemid |1832| :pattern ( ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@59)) )))
(assert (= |#UI.RangeEnd.PositiveInf| (Lit |#UI.RangeEnd.PositiveInf|)))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) (|$IsA#UI.RangeEnd| d@@35)) (or (or (UI.RangeEnd.EInclusive_q d@@35) (UI.RangeEnd.EExclusive_q d@@35)) (UI.RangeEnd.PositiveInf_q d@@35))) :qid |unknown.0:0| :skolemid |1833| :pattern ( (|$IsA#UI.RangeEnd| d@@35)) )))
(assert (forall ((d@@36 T@U) ) (!  (=> (and (= (type d@@36) DatatypeTypeType) ($Is d@@36 Tclass.UI.RangeEnd)) (or (or (UI.RangeEnd.EInclusive_q d@@36) (UI.RangeEnd.EExclusive_q d@@36)) (UI.RangeEnd.PositiveInf_q d@@36))) :qid |unknown.0:0| :skolemid |1834| :pattern ( (UI.RangeEnd.PositiveInf_q d@@36) ($Is d@@36 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EExclusive_q d@@36) ($Is d@@36 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EInclusive_q d@@36) ($Is d@@36 Tclass.UI.RangeEnd)) )))
(assert (forall ((a@@141 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@141) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (UI.RangeEnd.EInclusive_q a@@141) (UI.RangeEnd.EInclusive_q b@@72))) (and (=> (|UI.RangeEnd#Equal| a@@141 b@@72) (|Seq#Equal| (UI.RangeEnd.key a@@141) (UI.RangeEnd.key b@@72))) (=> (|Seq#Equal| (UI.RangeEnd.key a@@141) (UI.RangeEnd.key b@@72)) (|UI.RangeEnd#Equal| a@@141 b@@72)))) :qid |unknown.0:0| :skolemid |1835| :pattern ( (|UI.RangeEnd#Equal| a@@141 b@@72) (UI.RangeEnd.EInclusive_q a@@141)) :pattern ( (|UI.RangeEnd#Equal| a@@141 b@@72) (UI.RangeEnd.EInclusive_q b@@72)) )))
(assert (forall ((a@@142 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@142) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (UI.RangeEnd.EExclusive_q a@@142) (UI.RangeEnd.EExclusive_q b@@73))) (and (=> (|UI.RangeEnd#Equal| a@@142 b@@73) (|Seq#Equal| (UI.RangeEnd.key a@@142) (UI.RangeEnd.key b@@73))) (=> (|Seq#Equal| (UI.RangeEnd.key a@@142) (UI.RangeEnd.key b@@73)) (|UI.RangeEnd#Equal| a@@142 b@@73)))) :qid |unknown.0:0| :skolemid |1836| :pattern ( (|UI.RangeEnd#Equal| a@@142 b@@73) (UI.RangeEnd.EExclusive_q a@@142)) :pattern ( (|UI.RangeEnd#Equal| a@@142 b@@73) (UI.RangeEnd.EExclusive_q b@@73)) )))
(assert (forall ((a@@143 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@143) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (UI.RangeEnd.PositiveInf_q a@@143) (UI.RangeEnd.PositiveInf_q b@@74))) (and (=> (|UI.RangeEnd#Equal| a@@143 b@@74) true) (=> true (|UI.RangeEnd#Equal| a@@143 b@@74)))) :qid |unknown.0:0| :skolemid |1837| :pattern ( (|UI.RangeEnd#Equal| a@@143 b@@74) (UI.RangeEnd.PositiveInf_q a@@143)) :pattern ( (|UI.RangeEnd#Equal| a@@143 b@@74) (UI.RangeEnd.PositiveInf_q b@@74)) )))
(assert (forall ((a@@144 T@U) (b@@75 T@U) ) (!  (=> (and (= (type a@@144) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (=> (|UI.RangeEnd#Equal| a@@144 b@@75) (= a@@144 b@@75)) (=> (= a@@144 b@@75) (|UI.RangeEnd#Equal| a@@144 b@@75)))) :qid |unknown.0:0| :skolemid |1838| :pattern ( (|UI.RangeEnd#Equal| a@@144 b@@75)) )))
(assert (forall ((arg0@@343 T@U) (arg1@@158 T@U) ) (! (= (type (|#UI.SuccResult.SuccResult| arg0@@343 arg1@@158)) DatatypeTypeType) :qid |funType:#UI.SuccResult.SuccResult| :pattern ( (|#UI.SuccResult.SuccResult| arg0@@343 arg1@@158)) )))
(assert (forall ((|a#34#0#0| T@U) (|a#34#1#0| T@U) ) (!  (=> (and (= (type |a#34#0#0|) (SeqType BoxType)) (= (type |a#34#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.SuccResult.SuccResult| |a#34#0#0| |a#34#1#0|)) |##UI.SuccResult.SuccResult|)) :qid |UIsdfy.13:36| :skolemid |1839| :pattern ( (|#UI.SuccResult.SuccResult| |a#34#0#0| |a#34#1#0|)) )))
(assert (forall ((d@@37 T@U) ) (!  (=> (= (type d@@37) DatatypeTypeType) (and (=> (UI.SuccResult.SuccResult_q d@@37) (= (DatatypeCtorId d@@37) |##UI.SuccResult.SuccResult|)) (=> (= (DatatypeCtorId d@@37) |##UI.SuccResult.SuccResult|) (UI.SuccResult.SuccResult_q d@@37)))) :qid |unknown.0:0| :skolemid |1840| :pattern ( (UI.SuccResult.SuccResult_q d@@37)) )))
(assert (forall ((d@@38 T@U) ) (!  (=> (and (= (type d@@38) DatatypeTypeType) (UI.SuccResult.SuccResult_q d@@38)) (exists ((|a#35#0#0| T@U) (|a#35#1#0| T@U) ) (!  (and (and (= (type |a#35#0#0|) (SeqType BoxType)) (= (type |a#35#1#0|) (SeqType BoxType))) (= d@@38 (|#UI.SuccResult.SuccResult| |a#35#0#0| |a#35#1#0|))) :qid |UIsdfy.13:36| :skolemid |1841| :no-pattern (type |a#35#0#0|) :no-pattern (type |a#35#1#0|) :no-pattern (U_2_int |a#35#0#0|) :no-pattern (U_2_bool |a#35#0#0|) :no-pattern (U_2_int |a#35#1#0|) :no-pattern (U_2_bool |a#35#1#0|) ))) :qid |unknown.0:0| :skolemid |1842| :pattern ( (UI.SuccResult.SuccResult_q d@@38)) )))
(assert (= (type Tclass.UI.SuccResult) TyType))
(assert (= (Tag Tclass.UI.SuccResult) Tagclass.UI.SuccResult))
(assert (forall ((bx@@143 T@U) ) (!  (=> (and (= (type bx@@143) BoxType) ($IsBox bx@@143 Tclass.UI.SuccResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@143)) bx@@143) ($Is ($Unbox DatatypeTypeType bx@@143) Tclass.UI.SuccResult))) :qid |unknown.0:0| :skolemid |1843| :pattern ( ($IsBox bx@@143 Tclass.UI.SuccResult)) )))
(assert (forall ((|a#36#0#0| T@U) (|a#36#1#0| T@U) ) (!  (=> (and (= (type |a#36#0#0|) (SeqType BoxType)) (= (type |a#36#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.SuccResult.SuccResult| |a#36#0#0| |a#36#1#0|) Tclass.UI.SuccResult) (and ($Is |a#36#0#0| Tclass.KeyType.Key) ($Is |a#36#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#36#0#0| Tclass.KeyType.Key) ($Is |a#36#1#0| Tclass.ValueType.Value)) ($Is (|#UI.SuccResult.SuccResult| |a#36#0#0| |a#36#1#0|) Tclass.UI.SuccResult)))) :qid |UIsdfy.13:36| :skolemid |1844| :pattern ( ($Is (|#UI.SuccResult.SuccResult| |a#36#0#0| |a#36#1#0|) Tclass.UI.SuccResult)) )))
(assert (forall ((|a#37#0#0| T@U) (|a#37#1#0| T@U) ($h@@60 T@U) ) (!  (=> (and (and (and (= (type |a#37#0#0|) (SeqType BoxType)) (= (type |a#37#1#0|) (SeqType BoxType))) (= (type $h@@60) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@60)) (and (=> ($IsAlloc (|#UI.SuccResult.SuccResult| |a#37#0#0| |a#37#1#0|) Tclass.UI.SuccResult $h@@60) (and ($IsAlloc |a#37#0#0| Tclass.KeyType.Key $h@@60) ($IsAlloc |a#37#1#0| Tclass.ValueType.Value $h@@60))) (=> (and ($IsAlloc |a#37#0#0| Tclass.KeyType.Key $h@@60) ($IsAlloc |a#37#1#0| Tclass.ValueType.Value $h@@60)) ($IsAlloc (|#UI.SuccResult.SuccResult| |a#37#0#0| |a#37#1#0|) Tclass.UI.SuccResult $h@@60)))) :qid |UIsdfy.13:36| :skolemid |1845| :pattern ( ($IsAlloc (|#UI.SuccResult.SuccResult| |a#37#0#0| |a#37#1#0|) Tclass.UI.SuccResult $h@@60)) )))
(assert (forall ((arg0@@344 T@U) ) (! (= (type (UI.SuccResult.key arg0@@344)) (SeqType BoxType)) :qid |funType:UI.SuccResult.key| :pattern ( (UI.SuccResult.key arg0@@344)) )))
(assert (forall ((d@@39 T@U) ($h@@61 T@U) ) (!  (=> (and (and (= (type d@@39) DatatypeTypeType) (= (type $h@@61) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@61) (and (UI.SuccResult.SuccResult_q d@@39) ($IsAlloc d@@39 Tclass.UI.SuccResult $h@@61)))) ($IsAlloc (UI.SuccResult.key d@@39) Tclass.KeyType.Key $h@@61)) :qid |unknown.0:0| :skolemid |1846| :pattern ( ($IsAlloc (UI.SuccResult.key d@@39) Tclass.KeyType.Key $h@@61)) )))
(assert (forall ((arg0@@345 T@U) ) (! (= (type (UI.SuccResult.value arg0@@345)) (SeqType BoxType)) :qid |funType:UI.SuccResult.value| :pattern ( (UI.SuccResult.value arg0@@345)) )))
(assert (forall ((d@@40 T@U) ($h@@62 T@U) ) (!  (=> (and (and (= (type d@@40) DatatypeTypeType) (= (type $h@@62) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@62) (and (UI.SuccResult.SuccResult_q d@@40) ($IsAlloc d@@40 Tclass.UI.SuccResult $h@@62)))) ($IsAlloc (UI.SuccResult.value d@@40) Tclass.ValueType.Value $h@@62)) :qid |unknown.0:0| :skolemid |1847| :pattern ( ($IsAlloc (UI.SuccResult.value d@@40) Tclass.ValueType.Value $h@@62)) )))
(assert (forall ((|a#38#0#0| T@U) (|a#38#1#0| T@U) ) (!  (=> (and (= (type |a#38#0#0|) (SeqType BoxType)) (= (type |a#38#1#0|) (SeqType BoxType))) (= (|#UI.SuccResult.SuccResult| (Lit |a#38#0#0|) (Lit |a#38#1#0|)) (Lit (|#UI.SuccResult.SuccResult| |a#38#0#0| |a#38#1#0|)))) :qid |UIsdfy.13:36| :skolemid |1848| :pattern ( (|#UI.SuccResult.SuccResult| (Lit |a#38#0#0|) (Lit |a#38#1#0|))) )))
(assert (forall ((|a#39#0#0| T@U) (|a#39#1#0| T@U) ) (!  (=> (and (= (type |a#39#0#0|) (SeqType BoxType)) (= (type |a#39#1#0|) (SeqType BoxType))) (= (UI.SuccResult.key (|#UI.SuccResult.SuccResult| |a#39#0#0| |a#39#1#0|)) |a#39#0#0|)) :qid |UIsdfy.13:36| :skolemid |1849| :pattern ( (|#UI.SuccResult.SuccResult| |a#39#0#0| |a#39#1#0|)) )))
(assert (forall ((|a#40#0#0| T@U) (|a#40#1#0| T@U) ) (!  (=> (and (= (type |a#40#0#0|) (SeqType BoxType)) (= (type |a#40#1#0|) (SeqType BoxType))) (= (UI.SuccResult.value (|#UI.SuccResult.SuccResult| |a#40#0#0| |a#40#1#0|)) |a#40#1#0|)) :qid |UIsdfy.13:36| :skolemid |1850| :pattern ( (|#UI.SuccResult.SuccResult| |a#40#0#0| |a#40#1#0|)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (and (= (type d@@41) DatatypeTypeType) (|$IsA#UI.SuccResult| d@@41)) (UI.SuccResult.SuccResult_q d@@41)) :qid |unknown.0:0| :skolemid |1851| :pattern ( (|$IsA#UI.SuccResult| d@@41)) )))
(assert (forall ((d@@42 T@U) ) (!  (=> (and (= (type d@@42) DatatypeTypeType) ($Is d@@42 Tclass.UI.SuccResult)) (UI.SuccResult.SuccResult_q d@@42)) :qid |unknown.0:0| :skolemid |1852| :pattern ( (UI.SuccResult.SuccResult_q d@@42) ($Is d@@42 Tclass.UI.SuccResult)) )))
(assert (forall ((a@@145 T@U) (b@@76 T@U) ) (!  (=> (and (and (= (type a@@145) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) true) (and (=> (|UI.SuccResult#Equal| a@@145 b@@76) (and (|Seq#Equal| (UI.SuccResult.key a@@145) (UI.SuccResult.key b@@76)) (|Seq#Equal| (UI.SuccResult.value a@@145) (UI.SuccResult.value b@@76)))) (=> (and (|Seq#Equal| (UI.SuccResult.key a@@145) (UI.SuccResult.key b@@76)) (|Seq#Equal| (UI.SuccResult.value a@@145) (UI.SuccResult.value b@@76))) (|UI.SuccResult#Equal| a@@145 b@@76)))) :qid |unknown.0:0| :skolemid |1853| :pattern ( (|UI.SuccResult#Equal| a@@145 b@@76)) )))
(assert (forall ((a@@146 T@U) (b@@77 T@U) ) (!  (=> (and (= (type a@@146) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (=> (|UI.SuccResult#Equal| a@@146 b@@77) (= a@@146 b@@77)) (=> (= a@@146 b@@77) (|UI.SuccResult#Equal| a@@146 b@@77)))) :qid |unknown.0:0| :skolemid |1854| :pattern ( (|UI.SuccResult#Equal| a@@146 b@@77)) )))
(assert (forall ((arg0@@346 T@U) (arg1@@159 T@U) ) (! (= (type (|#UI.SuccResultList.SuccResultList| arg0@@346 arg1@@159)) DatatypeTypeType) :qid |funType:#UI.SuccResultList.SuccResultList| :pattern ( (|#UI.SuccResultList.SuccResultList| arg0@@346 arg1@@159)) )))
(assert (forall ((|a#41#0#0| T@U) (|a#41#1#0| T@U) ) (!  (=> (and (= (type |a#41#0#0|) (SeqType BoxType)) (= (type |a#41#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.SuccResultList.SuccResultList| |a#41#0#0| |a#41#1#0|)) |##UI.SuccResultList.SuccResultList|)) :qid |UIsdfy.14:44| :skolemid |1855| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#41#0#0| |a#41#1#0|)) )))
(assert (forall ((d@@43 T@U) ) (!  (=> (= (type d@@43) DatatypeTypeType) (and (=> (UI.SuccResultList.SuccResultList_q d@@43) (= (DatatypeCtorId d@@43) |##UI.SuccResultList.SuccResultList|)) (=> (= (DatatypeCtorId d@@43) |##UI.SuccResultList.SuccResultList|) (UI.SuccResultList.SuccResultList_q d@@43)))) :qid |unknown.0:0| :skolemid |1856| :pattern ( (UI.SuccResultList.SuccResultList_q d@@43)) )))
(assert (forall ((d@@44 T@U) ) (!  (=> (and (= (type d@@44) DatatypeTypeType) (UI.SuccResultList.SuccResultList_q d@@44)) (exists ((|a#42#0#0| T@U) (|a#42#1#0| T@U) ) (!  (and (and (= (type |a#42#0#0|) (SeqType BoxType)) (= (type |a#42#1#0|) DatatypeTypeType)) (= d@@44 (|#UI.SuccResultList.SuccResultList| |a#42#0#0| |a#42#1#0|))) :qid |UIsdfy.14:44| :skolemid |1857| :no-pattern (type |a#42#0#0|) :no-pattern (type |a#42#1#0|) :no-pattern (U_2_int |a#42#0#0|) :no-pattern (U_2_bool |a#42#0#0|) :no-pattern (U_2_int |a#42#1#0|) :no-pattern (U_2_bool |a#42#1#0|) ))) :qid |unknown.0:0| :skolemid |1858| :pattern ( (UI.SuccResultList.SuccResultList_q d@@44)) )))
(assert (= (type Tclass.UI.SuccResultList) TyType))
(assert (= (Tag Tclass.UI.SuccResultList) Tagclass.UI.SuccResultList))
(assert (forall ((bx@@144 T@U) ) (!  (=> (and (= (type bx@@144) BoxType) ($IsBox bx@@144 Tclass.UI.SuccResultList)) (and (= ($Box ($Unbox DatatypeTypeType bx@@144)) bx@@144) ($Is ($Unbox DatatypeTypeType bx@@144) Tclass.UI.SuccResultList))) :qid |unknown.0:0| :skolemid |1859| :pattern ( ($IsBox bx@@144 Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#43#0#0| T@U) (|a#43#1#0| T@U) ) (!  (=> (and (= (type |a#43#0#0|) (SeqType BoxType)) (= (type |a#43#1#0|) DatatypeTypeType)) (and (=> ($Is (|#UI.SuccResultList.SuccResultList| |a#43#0#0| |a#43#1#0|) Tclass.UI.SuccResultList) (and ($Is |a#43#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#43#1#0| Tclass.UI.RangeEnd))) (=> (and ($Is |a#43#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#43#1#0| Tclass.UI.RangeEnd)) ($Is (|#UI.SuccResultList.SuccResultList| |a#43#0#0| |a#43#1#0|) Tclass.UI.SuccResultList)))) :qid |UIsdfy.14:44| :skolemid |1860| :pattern ( ($Is (|#UI.SuccResultList.SuccResultList| |a#43#0#0| |a#43#1#0|) Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#44#0#0| T@U) (|a#44#1#0| T@U) ($h@@63 T@U) ) (!  (=> (and (and (and (= (type |a#44#0#0|) (SeqType BoxType)) (= (type |a#44#1#0|) DatatypeTypeType)) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@63)) (and (=> ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#44#0#0| |a#44#1#0|) Tclass.UI.SuccResultList $h@@63) (and ($IsAlloc |a#44#0#0| (TSeq Tclass.UI.SuccResult) $h@@63) ($IsAlloc |a#44#1#0| Tclass.UI.RangeEnd $h@@63))) (=> (and ($IsAlloc |a#44#0#0| (TSeq Tclass.UI.SuccResult) $h@@63) ($IsAlloc |a#44#1#0| Tclass.UI.RangeEnd $h@@63)) ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#44#0#0| |a#44#1#0|) Tclass.UI.SuccResultList $h@@63)))) :qid |UIsdfy.14:44| :skolemid |1861| :pattern ( ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#44#0#0| |a#44#1#0|) Tclass.UI.SuccResultList $h@@63)) )))
(assert (forall ((arg0@@347 T@U) ) (! (= (type (UI.SuccResultList.results arg0@@347)) (SeqType BoxType)) :qid |funType:UI.SuccResultList.results| :pattern ( (UI.SuccResultList.results arg0@@347)) )))
(assert (forall ((d@@45 T@U) ($h@@64 T@U) ) (!  (=> (and (and (= (type d@@45) DatatypeTypeType) (= (type $h@@64) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@64) (and (UI.SuccResultList.SuccResultList_q d@@45) ($IsAlloc d@@45 Tclass.UI.SuccResultList $h@@64)))) ($IsAlloc (UI.SuccResultList.results d@@45) (TSeq Tclass.UI.SuccResult) $h@@64)) :qid |unknown.0:0| :skolemid |1862| :pattern ( ($IsAlloc (UI.SuccResultList.results d@@45) (TSeq Tclass.UI.SuccResult) $h@@64)) )))
(assert (forall ((arg0@@348 T@U) ) (! (= (type (UI.SuccResultList.end arg0@@348)) DatatypeTypeType) :qid |funType:UI.SuccResultList.end| :pattern ( (UI.SuccResultList.end arg0@@348)) )))
(assert (forall ((d@@46 T@U) ($h@@65 T@U) ) (!  (=> (and (and (= (type d@@46) DatatypeTypeType) (= (type $h@@65) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@65) (and (UI.SuccResultList.SuccResultList_q d@@46) ($IsAlloc d@@46 Tclass.UI.SuccResultList $h@@65)))) ($IsAlloc (UI.SuccResultList.end d@@46) Tclass.UI.RangeEnd $h@@65)) :qid |unknown.0:0| :skolemid |1863| :pattern ( ($IsAlloc (UI.SuccResultList.end d@@46) Tclass.UI.RangeEnd $h@@65)) )))
(assert (forall ((|a#45#0#0| T@U) (|a#45#1#0| T@U) ) (!  (=> (and (= (type |a#45#0#0|) (SeqType BoxType)) (= (type |a#45#1#0|) DatatypeTypeType)) (= (|#UI.SuccResultList.SuccResultList| (Lit |a#45#0#0|) (Lit |a#45#1#0|)) (Lit (|#UI.SuccResultList.SuccResultList| |a#45#0#0| |a#45#1#0|)))) :qid |UIsdfy.14:44| :skolemid |1864| :pattern ( (|#UI.SuccResultList.SuccResultList| (Lit |a#45#0#0|) (Lit |a#45#1#0|))) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) ) (!  (=> (and (= (type |a#46#0#0|) (SeqType BoxType)) (= (type |a#46#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.results (|#UI.SuccResultList.SuccResultList| |a#46#0#0| |a#46#1#0|)) |a#46#0#0|)) :qid |UIsdfy.14:44| :skolemid |1865| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#46#0#0| |a#46#1#0|)) )))
(assert (forall ((|a#47#0#0| T@U) (|a#47#1#0| T@U) (i@@31 Int) ) (!  (=> (and (and (= (type |a#47#0#0|) (SeqType BoxType)) (= (type |a#47#1#0|) DatatypeTypeType)) (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#47#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#47#0#0| i@@31))) (DtRank (|#UI.SuccResultList.SuccResultList| |a#47#0#0| |a#47#1#0|)))) :qid |UIsdfy.14:44| :skolemid |1866| :pattern ( (|Seq#Index| |a#47#0#0| i@@31) (|#UI.SuccResultList.SuccResultList| |a#47#0#0| |a#47#1#0|)) )))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (!  (=> (and (= (type |a#48#0#0|) (SeqType BoxType)) (= (type |a#48#1#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#48#0#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#48#0#0| |a#48#1#0|)))) :qid |UIsdfy.14:44| :skolemid |1867| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#48#0#0| |a#48#1#0|)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ) (!  (=> (and (= (type |a#49#0#0|) (SeqType BoxType)) (= (type |a#49#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.end (|#UI.SuccResultList.SuccResultList| |a#49#0#0| |a#49#1#0|)) |a#49#1#0|)) :qid |UIsdfy.14:44| :skolemid |1868| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#49#0#0| |a#49#1#0|)) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (!  (=> (and (= (type |a#50#0#0|) (SeqType BoxType)) (= (type |a#50#1#0|) DatatypeTypeType)) (< (DtRank |a#50#1#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#50#0#0| |a#50#1#0|)))) :qid |UIsdfy.14:44| :skolemid |1869| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#50#0#0| |a#50#1#0|)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (and (= (type d@@47) DatatypeTypeType) (|$IsA#UI.SuccResultList| d@@47)) (UI.SuccResultList.SuccResultList_q d@@47)) :qid |unknown.0:0| :skolemid |1870| :pattern ( (|$IsA#UI.SuccResultList| d@@47)) )))
(assert (forall ((d@@48 T@U) ) (!  (=> (and (= (type d@@48) DatatypeTypeType) ($Is d@@48 Tclass.UI.SuccResultList)) (UI.SuccResultList.SuccResultList_q d@@48)) :qid |unknown.0:0| :skolemid |1871| :pattern ( (UI.SuccResultList.SuccResultList_q d@@48) ($Is d@@48 Tclass.UI.SuccResultList)) )))
(assert (forall ((a@@147 T@U) (b@@78 T@U) ) (!  (=> (and (and (= (type a@@147) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) true) (and (=> (|UI.SuccResultList#Equal| a@@147 b@@78) (and (|Seq#Equal| (UI.SuccResultList.results a@@147) (UI.SuccResultList.results b@@78)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@147) (UI.SuccResultList.end b@@78)))) (=> (and (|Seq#Equal| (UI.SuccResultList.results a@@147) (UI.SuccResultList.results b@@78)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@147) (UI.SuccResultList.end b@@78))) (|UI.SuccResultList#Equal| a@@147 b@@78)))) :qid |unknown.0:0| :skolemid |1872| :pattern ( (|UI.SuccResultList#Equal| a@@147 b@@78)) )))
(assert (forall ((a@@148 T@U) (b@@79 T@U) ) (!  (=> (and (= (type a@@148) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (=> (|UI.SuccResultList#Equal| a@@148 b@@79) (= a@@148 b@@79)) (=> (= a@@148 b@@79) (|UI.SuccResultList#Equal| a@@148 b@@79)))) :qid |unknown.0:0| :skolemid |1873| :pattern ( (|UI.SuccResultList#Equal| a@@148 b@@79)) )))
(assert (= (type |#UI.Op.NoOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.NoOp|) |##UI.Op.NoOp|))
(assert (forall ((d@@49 T@U) ) (!  (=> (= (type d@@49) DatatypeTypeType) (and (=> (UI.Op.NoOp_q d@@49) (= (DatatypeCtorId d@@49) |##UI.Op.NoOp|)) (=> (= (DatatypeCtorId d@@49) |##UI.Op.NoOp|) (UI.Op.NoOp_q d@@49)))) :qid |unknown.0:0| :skolemid |1874| :pattern ( (UI.Op.NoOp_q d@@49)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (and (= (type d@@50) DatatypeTypeType) (UI.Op.NoOp_q d@@50)) (= d@@50 |#UI.Op.NoOp|)) :qid |unknown.0:0| :skolemid |1875| :pattern ( (UI.Op.NoOp_q d@@50)) )))
(assert (= (type Tclass.UI.Op) TyType))
(assert (= (Tag Tclass.UI.Op) Tagclass.UI.Op))
(assert (forall ((bx@@145 T@U) ) (!  (=> (and (= (type bx@@145) BoxType) ($IsBox bx@@145 Tclass.UI.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@145)) bx@@145) ($Is ($Unbox DatatypeTypeType bx@@145) Tclass.UI.Op))) :qid |unknown.0:0| :skolemid |1876| :pattern ( ($IsBox bx@@145 Tclass.UI.Op)) )))
(assert ($Is |#UI.Op.NoOp| Tclass.UI.Op))
(assert (forall (($h@@66 T@U) ) (!  (=> (and (= (type $h@@66) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@66)) ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@66)) :qid |DafnyPre.521:12| :skolemid |1877| :pattern ( ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@66)) )))
(assert (= |#UI.Op.NoOp| (Lit |#UI.Op.NoOp|)))
(assert (= (type |#UI.Op.SyncOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.SyncOp|) |##UI.Op.SyncOp|))
(assert (forall ((d@@51 T@U) ) (!  (=> (= (type d@@51) DatatypeTypeType) (and (=> (UI.Op.SyncOp_q d@@51) (= (DatatypeCtorId d@@51) |##UI.Op.SyncOp|)) (=> (= (DatatypeCtorId d@@51) |##UI.Op.SyncOp|) (UI.Op.SyncOp_q d@@51)))) :qid |unknown.0:0| :skolemid |1878| :pattern ( (UI.Op.SyncOp_q d@@51)) )))
(assert (forall ((d@@52 T@U) ) (!  (=> (and (= (type d@@52) DatatypeTypeType) (UI.Op.SyncOp_q d@@52)) (= d@@52 |#UI.Op.SyncOp|)) :qid |unknown.0:0| :skolemid |1879| :pattern ( (UI.Op.SyncOp_q d@@52)) )))
(assert ($Is |#UI.Op.SyncOp| Tclass.UI.Op))
(assert (forall (($h@@67 T@U) ) (!  (=> (and (= (type $h@@67) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@67)) ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@67)) :qid |DafnyPre.521:12| :skolemid |1880| :pattern ( ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@67)) )))
(assert (= |#UI.Op.SyncOp| (Lit |#UI.Op.SyncOp|)))
(assert (= (type |#UI.Op.CrashOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.CrashOp|) |##UI.Op.CrashOp|))
(assert (forall ((d@@53 T@U) ) (!  (=> (= (type d@@53) DatatypeTypeType) (and (=> (UI.Op.CrashOp_q d@@53) (= (DatatypeCtorId d@@53) |##UI.Op.CrashOp|)) (=> (= (DatatypeCtorId d@@53) |##UI.Op.CrashOp|) (UI.Op.CrashOp_q d@@53)))) :qid |unknown.0:0| :skolemid |1881| :pattern ( (UI.Op.CrashOp_q d@@53)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (and (= (type d@@54) DatatypeTypeType) (UI.Op.CrashOp_q d@@54)) (= d@@54 |#UI.Op.CrashOp|)) :qid |unknown.0:0| :skolemid |1882| :pattern ( (UI.Op.CrashOp_q d@@54)) )))
(assert ($Is |#UI.Op.CrashOp| Tclass.UI.Op))
(assert (forall (($h@@68 T@U) ) (!  (=> (and (= (type $h@@68) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@68)) ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@68)) :qid |DafnyPre.521:12| :skolemid |1883| :pattern ( ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@68)) )))
(assert (= |#UI.Op.CrashOp| (Lit |#UI.Op.CrashOp|)))
(assert (forall ((arg0@@349 Int) ) (! (= (type (|#UI.Op.PushSyncOp| arg0@@349)) DatatypeTypeType) :qid |funType:#UI.Op.PushSyncOp| :pattern ( (|#UI.Op.PushSyncOp| arg0@@349)) )))
(assert (forall ((|a#66#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PushSyncOp| |a#66#0#0|)) |##UI.Op.PushSyncOp|) :qid |UIsdfy.20:24| :skolemid |1884| :pattern ( (|#UI.Op.PushSyncOp| |a#66#0#0|)) )))
(assert (forall ((d@@55 T@U) ) (!  (=> (= (type d@@55) DatatypeTypeType) (and (=> (UI.Op.PushSyncOp_q d@@55) (= (DatatypeCtorId d@@55) |##UI.Op.PushSyncOp|)) (=> (= (DatatypeCtorId d@@55) |##UI.Op.PushSyncOp|) (UI.Op.PushSyncOp_q d@@55)))) :qid |unknown.0:0| :skolemid |1885| :pattern ( (UI.Op.PushSyncOp_q d@@55)) )))
(assert (forall ((d@@56 T@U) ) (!  (=> (and (= (type d@@56) DatatypeTypeType) (UI.Op.PushSyncOp_q d@@56)) (exists ((|a#67#0#0| Int) ) (! (= d@@56 (|#UI.Op.PushSyncOp| |a#67#0#0|)) :qid |UIsdfy.20:24| :skolemid |1886| ))) :qid |unknown.0:0| :skolemid |1887| :pattern ( (UI.Op.PushSyncOp_q d@@56)) )))
(assert (forall ((|a#68#0#0| Int) ) (!  (and (=> ($Is (|#UI.Op.PushSyncOp| |a#68#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#68#0#0|) TInt)) (=> ($Is (int_2_U |a#68#0#0|) TInt) ($Is (|#UI.Op.PushSyncOp| |a#68#0#0|) Tclass.UI.Op))) :qid |UIsdfy.20:24| :skolemid |1888| :pattern ( ($Is (|#UI.Op.PushSyncOp| |a#68#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#69#0#0| Int) ($h@@69 T@U) ) (!  (=> (and (= (type $h@@69) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@69)) (and (=> ($IsAlloc (|#UI.Op.PushSyncOp| |a#69#0#0|) Tclass.UI.Op $h@@69) ($IsAlloc (int_2_U |a#69#0#0|) TInt $h@@69)) (=> ($IsAlloc (int_2_U |a#69#0#0|) TInt $h@@69) ($IsAlloc (|#UI.Op.PushSyncOp| |a#69#0#0|) Tclass.UI.Op $h@@69)))) :qid |UIsdfy.20:24| :skolemid |1889| :pattern ( ($IsAlloc (|#UI.Op.PushSyncOp| |a#69#0#0|) Tclass.UI.Op $h@@69)) )))
(assert (forall ((d@@57 T@U) ($h@@70 T@U) ) (!  (=> (and (and (= (type d@@57) DatatypeTypeType) (= (type $h@@70) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@70) (and (UI.Op.PushSyncOp_q d@@57) ($IsAlloc d@@57 Tclass.UI.Op $h@@70)))) ($IsAlloc (int_2_U (UI.Op.id d@@57)) TInt $h@@70)) :qid |unknown.0:0| :skolemid |1890| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@57)) TInt $h@@70)) )))
(assert (forall ((|a#70#0#0| Int) ) (! (= (|#UI.Op.PushSyncOp| (LitInt |a#70#0#0|)) (Lit (|#UI.Op.PushSyncOp| |a#70#0#0|))) :qid |UIsdfy.20:24| :skolemid |1891| :pattern ( (|#UI.Op.PushSyncOp| (LitInt |a#70#0#0|))) )))
(assert (forall ((|a#71#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PushSyncOp| |a#71#0#0|)) |a#71#0#0|) :qid |UIsdfy.20:24| :skolemid |1892| :pattern ( (|#UI.Op.PushSyncOp| |a#71#0#0|)) )))
(assert (forall ((arg0@@350 Int) ) (! (= (type (|#UI.Op.PopSyncOp| arg0@@350)) DatatypeTypeType) :qid |funType:#UI.Op.PopSyncOp| :pattern ( (|#UI.Op.PopSyncOp| arg0@@350)) )))
(assert (forall ((|a#72#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PopSyncOp| |a#72#0#0|)) |##UI.Op.PopSyncOp|) :qid |UIsdfy.21:23| :skolemid |1893| :pattern ( (|#UI.Op.PopSyncOp| |a#72#0#0|)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (= (type d@@58) DatatypeTypeType) (and (=> (UI.Op.PopSyncOp_q d@@58) (= (DatatypeCtorId d@@58) |##UI.Op.PopSyncOp|)) (=> (= (DatatypeCtorId d@@58) |##UI.Op.PopSyncOp|) (UI.Op.PopSyncOp_q d@@58)))) :qid |unknown.0:0| :skolemid |1894| :pattern ( (UI.Op.PopSyncOp_q d@@58)) )))
(assert (forall ((d@@59 T@U) ) (!  (=> (and (= (type d@@59) DatatypeTypeType) (UI.Op.PopSyncOp_q d@@59)) (exists ((|a#73#0#0| Int) ) (! (= d@@59 (|#UI.Op.PopSyncOp| |a#73#0#0|)) :qid |UIsdfy.21:23| :skolemid |1895| ))) :qid |unknown.0:0| :skolemid |1896| :pattern ( (UI.Op.PopSyncOp_q d@@59)) )))
(assert (forall ((|a#74#0#0| Int) ) (!  (and (=> ($Is (|#UI.Op.PopSyncOp| |a#74#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#74#0#0|) TInt)) (=> ($Is (int_2_U |a#74#0#0|) TInt) ($Is (|#UI.Op.PopSyncOp| |a#74#0#0|) Tclass.UI.Op))) :qid |UIsdfy.21:23| :skolemid |1897| :pattern ( ($Is (|#UI.Op.PopSyncOp| |a#74#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#75#0#0| Int) ($h@@71 T@U) ) (!  (=> (and (= (type $h@@71) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@71)) (and (=> ($IsAlloc (|#UI.Op.PopSyncOp| |a#75#0#0|) Tclass.UI.Op $h@@71) ($IsAlloc (int_2_U |a#75#0#0|) TInt $h@@71)) (=> ($IsAlloc (int_2_U |a#75#0#0|) TInt $h@@71) ($IsAlloc (|#UI.Op.PopSyncOp| |a#75#0#0|) Tclass.UI.Op $h@@71)))) :qid |UIsdfy.21:23| :skolemid |1898| :pattern ( ($IsAlloc (|#UI.Op.PopSyncOp| |a#75#0#0|) Tclass.UI.Op $h@@71)) )))
(assert (forall ((d@@60 T@U) ($h@@72 T@U) ) (!  (=> (and (and (= (type d@@60) DatatypeTypeType) (= (type $h@@72) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@72) (and (UI.Op.PopSyncOp_q d@@60) ($IsAlloc d@@60 Tclass.UI.Op $h@@72)))) ($IsAlloc (int_2_U (UI.Op.id d@@60)) TInt $h@@72)) :qid |unknown.0:0| :skolemid |1899| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@60)) TInt $h@@72)) )))
(assert (forall ((|a#76#0#0| Int) ) (! (= (|#UI.Op.PopSyncOp| (LitInt |a#76#0#0|)) (Lit (|#UI.Op.PopSyncOp| |a#76#0#0|))) :qid |UIsdfy.21:23| :skolemid |1900| :pattern ( (|#UI.Op.PopSyncOp| (LitInt |a#76#0#0|))) )))
(assert (forall ((|a#77#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PopSyncOp| |a#77#0#0|)) |a#77#0#0|) :qid |UIsdfy.21:23| :skolemid |1901| :pattern ( (|#UI.Op.PopSyncOp| |a#77#0#0|)) )))
(assert (forall ((arg0@@351 T@U) (arg1@@160 T@U) ) (! (= (type (|#UI.Op.GetOp| arg0@@351 arg1@@160)) DatatypeTypeType) :qid |funType:#UI.Op.GetOp| :pattern ( (|#UI.Op.GetOp| arg0@@351 arg1@@160)) )))
(assert (forall ((|a#78#0#0| T@U) (|a#78#1#0| T@U) ) (!  (=> (and (= (type |a#78#0#0|) (SeqType BoxType)) (= (type |a#78#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.GetOp| |a#78#0#0| |a#78#1#0|)) |##UI.Op.GetOp|)) :qid |UIsdfy.24:13| :skolemid |1902| :pattern ( (|#UI.Op.GetOp| |a#78#0#0| |a#78#1#0|)) )))
(assert (forall ((d@@61 T@U) ) (!  (=> (= (type d@@61) DatatypeTypeType) (and (=> (UI.Op.GetOp_q d@@61) (= (DatatypeCtorId d@@61) |##UI.Op.GetOp|)) (=> (= (DatatypeCtorId d@@61) |##UI.Op.GetOp|) (UI.Op.GetOp_q d@@61)))) :qid |unknown.0:0| :skolemid |1903| :pattern ( (UI.Op.GetOp_q d@@61)) )))
(assert (forall ((d@@62 T@U) ) (!  (=> (and (= (type d@@62) DatatypeTypeType) (UI.Op.GetOp_q d@@62)) (exists ((|a#79#0#0| T@U) (|a#79#1#0| T@U) ) (!  (and (and (= (type |a#79#0#0|) (SeqType BoxType)) (= (type |a#79#1#0|) (SeqType BoxType))) (= d@@62 (|#UI.Op.GetOp| |a#79#0#0| |a#79#1#0|))) :qid |UIsdfy.24:13| :skolemid |1904| :no-pattern (type |a#79#0#0|) :no-pattern (type |a#79#1#0|) :no-pattern (U_2_int |a#79#0#0|) :no-pattern (U_2_bool |a#79#0#0|) :no-pattern (U_2_int |a#79#1#0|) :no-pattern (U_2_bool |a#79#1#0|) ))) :qid |unknown.0:0| :skolemid |1905| :pattern ( (UI.Op.GetOp_q d@@62)) )))
(assert (forall ((|a#80#0#0| T@U) (|a#80#1#0| T@U) ) (!  (=> (and (= (type |a#80#0#0|) (SeqType BoxType)) (= (type |a#80#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.Op.GetOp| |a#80#0#0| |a#80#1#0|) Tclass.UI.Op) (and ($Is |a#80#0#0| Tclass.KeyType.Key) ($Is |a#80#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#80#0#0| Tclass.KeyType.Key) ($Is |a#80#1#0| Tclass.ValueType.Value)) ($Is (|#UI.Op.GetOp| |a#80#0#0| |a#80#1#0|) Tclass.UI.Op)))) :qid |UIsdfy.24:13| :skolemid |1906| :pattern ( ($Is (|#UI.Op.GetOp| |a#80#0#0| |a#80#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#81#0#0| T@U) (|a#81#1#0| T@U) ($h@@73 T@U) ) (!  (=> (and (and (and (= (type |a#81#0#0|) (SeqType BoxType)) (= (type |a#81#1#0|) (SeqType BoxType))) (= (type $h@@73) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@73)) (and (=> ($IsAlloc (|#UI.Op.GetOp| |a#81#0#0| |a#81#1#0|) Tclass.UI.Op $h@@73) (and ($IsAlloc |a#81#0#0| Tclass.KeyType.Key $h@@73) ($IsAlloc |a#81#1#0| Tclass.ValueType.Value $h@@73))) (=> (and ($IsAlloc |a#81#0#0| Tclass.KeyType.Key $h@@73) ($IsAlloc |a#81#1#0| Tclass.ValueType.Value $h@@73)) ($IsAlloc (|#UI.Op.GetOp| |a#81#0#0| |a#81#1#0|) Tclass.UI.Op $h@@73)))) :qid |UIsdfy.24:13| :skolemid |1907| :pattern ( ($IsAlloc (|#UI.Op.GetOp| |a#81#0#0| |a#81#1#0|) Tclass.UI.Op $h@@73)) )))
(assert (forall ((arg0@@352 T@U) ) (! (= (type (UI.Op.key arg0@@352)) (SeqType BoxType)) :qid |funType:UI.Op.key| :pattern ( (UI.Op.key arg0@@352)) )))
(assert (forall ((d@@63 T@U) ($h@@74 T@U) ) (!  (=> (and (and (= (type d@@63) DatatypeTypeType) (= (type $h@@74) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@74) (and (UI.Op.GetOp_q d@@63) ($IsAlloc d@@63 Tclass.UI.Op $h@@74)))) ($IsAlloc (UI.Op.key d@@63) Tclass.KeyType.Key $h@@74)) :qid |unknown.0:0| :skolemid |1908| :pattern ( ($IsAlloc (UI.Op.key d@@63) Tclass.KeyType.Key $h@@74)) )))
(assert (forall ((arg0@@353 T@U) ) (! (= (type (UI.Op.value arg0@@353)) (SeqType BoxType)) :qid |funType:UI.Op.value| :pattern ( (UI.Op.value arg0@@353)) )))
(assert (forall ((d@@64 T@U) ($h@@75 T@U) ) (!  (=> (and (and (= (type d@@64) DatatypeTypeType) (= (type $h@@75) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@75) (and (UI.Op.GetOp_q d@@64) ($IsAlloc d@@64 Tclass.UI.Op $h@@75)))) ($IsAlloc (UI.Op.value d@@64) Tclass.ValueType.Value $h@@75)) :qid |unknown.0:0| :skolemid |1909| :pattern ( ($IsAlloc (UI.Op.value d@@64) Tclass.ValueType.Value $h@@75)) )))
(assert (forall ((|a#82#0#0| T@U) (|a#82#1#0| T@U) ) (!  (=> (and (= (type |a#82#0#0|) (SeqType BoxType)) (= (type |a#82#1#0|) (SeqType BoxType))) (= (|#UI.Op.GetOp| (Lit |a#82#0#0|) (Lit |a#82#1#0|)) (Lit (|#UI.Op.GetOp| |a#82#0#0| |a#82#1#0|)))) :qid |UIsdfy.24:13| :skolemid |1910| :pattern ( (|#UI.Op.GetOp| (Lit |a#82#0#0|) (Lit |a#82#1#0|))) )))
(assert (forall ((|a#83#0#0| T@U) (|a#83#1#0| T@U) ) (!  (=> (and (= (type |a#83#0#0|) (SeqType BoxType)) (= (type |a#83#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.GetOp| |a#83#0#0| |a#83#1#0|)) |a#83#0#0|)) :qid |UIsdfy.24:13| :skolemid |1911| :pattern ( (|#UI.Op.GetOp| |a#83#0#0| |a#83#1#0|)) )))
(assert (forall ((|a#84#0#0| T@U) (|a#84#1#0| T@U) ) (!  (=> (and (= (type |a#84#0#0|) (SeqType BoxType)) (= (type |a#84#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.GetOp| |a#84#0#0| |a#84#1#0|)) |a#84#1#0|)) :qid |UIsdfy.24:13| :skolemid |1912| :pattern ( (|#UI.Op.GetOp| |a#84#0#0| |a#84#1#0|)) )))
(assert (forall ((arg0@@354 T@U) (arg1@@161 T@U) ) (! (= (type (|#UI.Op.PutOp| arg0@@354 arg1@@161)) DatatypeTypeType) :qid |funType:#UI.Op.PutOp| :pattern ( (|#UI.Op.PutOp| arg0@@354 arg1@@161)) )))
(assert (forall ((|a#85#0#0| T@U) (|a#85#1#0| T@U) ) (!  (=> (and (= (type |a#85#0#0|) (SeqType BoxType)) (= (type |a#85#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.PutOp| |a#85#0#0| |a#85#1#0|)) |##UI.Op.PutOp|)) :qid |UIsdfy.25:13| :skolemid |1913| :pattern ( (|#UI.Op.PutOp| |a#85#0#0| |a#85#1#0|)) )))
(assert (forall ((d@@65 T@U) ) (!  (=> (= (type d@@65) DatatypeTypeType) (and (=> (UI.Op.PutOp_q d@@65) (= (DatatypeCtorId d@@65) |##UI.Op.PutOp|)) (=> (= (DatatypeCtorId d@@65) |##UI.Op.PutOp|) (UI.Op.PutOp_q d@@65)))) :qid |unknown.0:0| :skolemid |1914| :pattern ( (UI.Op.PutOp_q d@@65)) )))
(assert (forall ((d@@66 T@U) ) (!  (=> (and (= (type d@@66) DatatypeTypeType) (UI.Op.PutOp_q d@@66)) (exists ((|a#86#0#0| T@U) (|a#86#1#0| T@U) ) (!  (and (and (= (type |a#86#0#0|) (SeqType BoxType)) (= (type |a#86#1#0|) (SeqType BoxType))) (= d@@66 (|#UI.Op.PutOp| |a#86#0#0| |a#86#1#0|))) :qid |UIsdfy.25:13| :skolemid |1915| :no-pattern (type |a#86#0#0|) :no-pattern (type |a#86#1#0|) :no-pattern (U_2_int |a#86#0#0|) :no-pattern (U_2_bool |a#86#0#0|) :no-pattern (U_2_int |a#86#1#0|) :no-pattern (U_2_bool |a#86#1#0|) ))) :qid |unknown.0:0| :skolemid |1916| :pattern ( (UI.Op.PutOp_q d@@66)) )))
(assert (forall ((|a#87#0#0| T@U) (|a#87#1#0| T@U) ) (!  (=> (and (= (type |a#87#0#0|) (SeqType BoxType)) (= (type |a#87#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.Op.PutOp| |a#87#0#0| |a#87#1#0|) Tclass.UI.Op) (and ($Is |a#87#0#0| Tclass.KeyType.Key) ($Is |a#87#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#87#0#0| Tclass.KeyType.Key) ($Is |a#87#1#0| Tclass.ValueType.Value)) ($Is (|#UI.Op.PutOp| |a#87#0#0| |a#87#1#0|) Tclass.UI.Op)))) :qid |UIsdfy.25:13| :skolemid |1917| :pattern ( ($Is (|#UI.Op.PutOp| |a#87#0#0| |a#87#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#88#0#0| T@U) (|a#88#1#0| T@U) ($h@@76 T@U) ) (!  (=> (and (and (and (= (type |a#88#0#0|) (SeqType BoxType)) (= (type |a#88#1#0|) (SeqType BoxType))) (= (type $h@@76) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@76)) (and (=> ($IsAlloc (|#UI.Op.PutOp| |a#88#0#0| |a#88#1#0|) Tclass.UI.Op $h@@76) (and ($IsAlloc |a#88#0#0| Tclass.KeyType.Key $h@@76) ($IsAlloc |a#88#1#0| Tclass.ValueType.Value $h@@76))) (=> (and ($IsAlloc |a#88#0#0| Tclass.KeyType.Key $h@@76) ($IsAlloc |a#88#1#0| Tclass.ValueType.Value $h@@76)) ($IsAlloc (|#UI.Op.PutOp| |a#88#0#0| |a#88#1#0|) Tclass.UI.Op $h@@76)))) :qid |UIsdfy.25:13| :skolemid |1918| :pattern ( ($IsAlloc (|#UI.Op.PutOp| |a#88#0#0| |a#88#1#0|) Tclass.UI.Op $h@@76)) )))
(assert (forall ((d@@67 T@U) ($h@@77 T@U) ) (!  (=> (and (and (= (type d@@67) DatatypeTypeType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@77) (and (UI.Op.PutOp_q d@@67) ($IsAlloc d@@67 Tclass.UI.Op $h@@77)))) ($IsAlloc (UI.Op.key d@@67) Tclass.KeyType.Key $h@@77)) :qid |unknown.0:0| :skolemid |1919| :pattern ( ($IsAlloc (UI.Op.key d@@67) Tclass.KeyType.Key $h@@77)) )))
(assert (forall ((d@@68 T@U) ($h@@78 T@U) ) (!  (=> (and (and (= (type d@@68) DatatypeTypeType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@78) (and (UI.Op.PutOp_q d@@68) ($IsAlloc d@@68 Tclass.UI.Op $h@@78)))) ($IsAlloc (UI.Op.value d@@68) Tclass.ValueType.Value $h@@78)) :qid |unknown.0:0| :skolemid |1920| :pattern ( ($IsAlloc (UI.Op.value d@@68) Tclass.ValueType.Value $h@@78)) )))
(assert (forall ((|a#89#0#0| T@U) (|a#89#1#0| T@U) ) (!  (=> (and (= (type |a#89#0#0|) (SeqType BoxType)) (= (type |a#89#1#0|) (SeqType BoxType))) (= (|#UI.Op.PutOp| (Lit |a#89#0#0|) (Lit |a#89#1#0|)) (Lit (|#UI.Op.PutOp| |a#89#0#0| |a#89#1#0|)))) :qid |UIsdfy.25:13| :skolemid |1921| :pattern ( (|#UI.Op.PutOp| (Lit |a#89#0#0|) (Lit |a#89#1#0|))) )))
(assert (forall ((|a#90#0#0| T@U) (|a#90#1#0| T@U) ) (!  (=> (and (= (type |a#90#0#0|) (SeqType BoxType)) (= (type |a#90#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.PutOp| |a#90#0#0| |a#90#1#0|)) |a#90#0#0|)) :qid |UIsdfy.25:13| :skolemid |1922| :pattern ( (|#UI.Op.PutOp| |a#90#0#0| |a#90#1#0|)) )))
(assert (forall ((|a#91#0#0| T@U) (|a#91#1#0| T@U) ) (!  (=> (and (= (type |a#91#0#0|) (SeqType BoxType)) (= (type |a#91#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.PutOp| |a#91#0#0| |a#91#1#0|)) |a#91#1#0|)) :qid |UIsdfy.25:13| :skolemid |1923| :pattern ( (|#UI.Op.PutOp| |a#91#0#0| |a#91#1#0|)) )))
(assert (forall ((arg0@@355 T@U) (arg1@@162 T@U) (arg2@@114 T@U) ) (! (= (type (|#UI.Op.SuccOp| arg0@@355 arg1@@162 arg2@@114)) DatatypeTypeType) :qid |funType:#UI.Op.SuccOp| :pattern ( (|#UI.Op.SuccOp| arg0@@355 arg1@@162 arg2@@114)) )))
(assert (forall ((|a#92#0#0| T@U) (|a#92#1#0| T@U) (|a#92#2#0| T@U) ) (!  (=> (and (and (= (type |a#92#0#0|) DatatypeTypeType) (= (type |a#92#1#0|) (SeqType BoxType))) (= (type |a#92#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.Op.SuccOp| |a#92#0#0| |a#92#1#0| |a#92#2#0|)) |##UI.Op.SuccOp|)) :qid |UIsdfy.27:14| :skolemid |1924| :pattern ( (|#UI.Op.SuccOp| |a#92#0#0| |a#92#1#0| |a#92#2#0|)) )))
(assert (forall ((d@@69 T@U) ) (!  (=> (= (type d@@69) DatatypeTypeType) (and (=> (UI.Op.SuccOp_q d@@69) (= (DatatypeCtorId d@@69) |##UI.Op.SuccOp|)) (=> (= (DatatypeCtorId d@@69) |##UI.Op.SuccOp|) (UI.Op.SuccOp_q d@@69)))) :qid |unknown.0:0| :skolemid |1925| :pattern ( (UI.Op.SuccOp_q d@@69)) )))
(assert (forall ((d@@70 T@U) ) (!  (=> (and (= (type d@@70) DatatypeTypeType) (UI.Op.SuccOp_q d@@70)) (exists ((|a#93#0#0| T@U) (|a#93#1#0| T@U) (|a#93#2#0| T@U) ) (!  (and (and (and (= (type |a#93#0#0|) DatatypeTypeType) (= (type |a#93#1#0|) (SeqType BoxType))) (= (type |a#93#2#0|) DatatypeTypeType)) (= d@@70 (|#UI.Op.SuccOp| |a#93#0#0| |a#93#1#0| |a#93#2#0|))) :qid |UIsdfy.27:14| :skolemid |1926| :no-pattern (type |a#93#0#0|) :no-pattern (type |a#93#1#0|) :no-pattern (type |a#93#2#0|) :no-pattern (U_2_int |a#93#0#0|) :no-pattern (U_2_bool |a#93#0#0|) :no-pattern (U_2_int |a#93#1#0|) :no-pattern (U_2_bool |a#93#1#0|) :no-pattern (U_2_int |a#93#2#0|) :no-pattern (U_2_bool |a#93#2#0|) ))) :qid |unknown.0:0| :skolemid |1927| :pattern ( (UI.Op.SuccOp_q d@@70)) )))
(assert (forall ((|a#94#0#0| T@U) (|a#94#1#0| T@U) (|a#94#2#0| T@U) ) (!  (=> (and (and (= (type |a#94#0#0|) DatatypeTypeType) (= (type |a#94#1#0|) (SeqType BoxType))) (= (type |a#94#2#0|) DatatypeTypeType)) (and (=> ($Is (|#UI.Op.SuccOp| |a#94#0#0| |a#94#1#0| |a#94#2#0|) Tclass.UI.Op) (and (and ($Is |a#94#0#0| Tclass.UI.RangeStart) ($Is |a#94#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#94#2#0| Tclass.UI.RangeEnd))) (=> (and (and ($Is |a#94#0#0| Tclass.UI.RangeStart) ($Is |a#94#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#94#2#0| Tclass.UI.RangeEnd)) ($Is (|#UI.Op.SuccOp| |a#94#0#0| |a#94#1#0| |a#94#2#0|) Tclass.UI.Op)))) :qid |UIsdfy.27:14| :skolemid |1928| :pattern ( ($Is (|#UI.Op.SuccOp| |a#94#0#0| |a#94#1#0| |a#94#2#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#95#0#0| T@U) (|a#95#1#0| T@U) (|a#95#2#0| T@U) ($h@@79 T@U) ) (!  (=> (and (and (and (and (= (type |a#95#0#0|) DatatypeTypeType) (= (type |a#95#1#0|) (SeqType BoxType))) (= (type |a#95#2#0|) DatatypeTypeType)) (= (type $h@@79) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@79)) (and (=> ($IsAlloc (|#UI.Op.SuccOp| |a#95#0#0| |a#95#1#0| |a#95#2#0|) Tclass.UI.Op $h@@79) (and (and ($IsAlloc |a#95#0#0| Tclass.UI.RangeStart $h@@79) ($IsAlloc |a#95#1#0| (TSeq Tclass.UI.SuccResult) $h@@79)) ($IsAlloc |a#95#2#0| Tclass.UI.RangeEnd $h@@79))) (=> (and (and ($IsAlloc |a#95#0#0| Tclass.UI.RangeStart $h@@79) ($IsAlloc |a#95#1#0| (TSeq Tclass.UI.SuccResult) $h@@79)) ($IsAlloc |a#95#2#0| Tclass.UI.RangeEnd $h@@79)) ($IsAlloc (|#UI.Op.SuccOp| |a#95#0#0| |a#95#1#0| |a#95#2#0|) Tclass.UI.Op $h@@79)))) :qid |UIsdfy.27:14| :skolemid |1929| :pattern ( ($IsAlloc (|#UI.Op.SuccOp| |a#95#0#0| |a#95#1#0| |a#95#2#0|) Tclass.UI.Op $h@@79)) )))
(assert (forall ((arg0@@356 T@U) ) (! (= (type (UI.Op.start arg0@@356)) DatatypeTypeType) :qid |funType:UI.Op.start| :pattern ( (UI.Op.start arg0@@356)) )))
(assert (forall ((d@@71 T@U) ($h@@80 T@U) ) (!  (=> (and (and (= (type d@@71) DatatypeTypeType) (= (type $h@@80) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@80) (and (UI.Op.SuccOp_q d@@71) ($IsAlloc d@@71 Tclass.UI.Op $h@@80)))) ($IsAlloc (UI.Op.start d@@71) Tclass.UI.RangeStart $h@@80)) :qid |unknown.0:0| :skolemid |1930| :pattern ( ($IsAlloc (UI.Op.start d@@71) Tclass.UI.RangeStart $h@@80)) )))
(assert (forall ((arg0@@357 T@U) ) (! (= (type (UI.Op.results arg0@@357)) (SeqType BoxType)) :qid |funType:UI.Op.results| :pattern ( (UI.Op.results arg0@@357)) )))
(assert (forall ((d@@72 T@U) ($h@@81 T@U) ) (!  (=> (and (and (= (type d@@72) DatatypeTypeType) (= (type $h@@81) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@81) (and (UI.Op.SuccOp_q d@@72) ($IsAlloc d@@72 Tclass.UI.Op $h@@81)))) ($IsAlloc (UI.Op.results d@@72) (TSeq Tclass.UI.SuccResult) $h@@81)) :qid |unknown.0:0| :skolemid |1931| :pattern ( ($IsAlloc (UI.Op.results d@@72) (TSeq Tclass.UI.SuccResult) $h@@81)) )))
(assert (forall ((arg0@@358 T@U) ) (! (= (type (UI.Op.end arg0@@358)) DatatypeTypeType) :qid |funType:UI.Op.end| :pattern ( (UI.Op.end arg0@@358)) )))
(assert (forall ((d@@73 T@U) ($h@@82 T@U) ) (!  (=> (and (and (= (type d@@73) DatatypeTypeType) (= (type $h@@82) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@82) (and (UI.Op.SuccOp_q d@@73) ($IsAlloc d@@73 Tclass.UI.Op $h@@82)))) ($IsAlloc (UI.Op.end d@@73) Tclass.UI.RangeEnd $h@@82)) :qid |unknown.0:0| :skolemid |1932| :pattern ( ($IsAlloc (UI.Op.end d@@73) Tclass.UI.RangeEnd $h@@82)) )))
(assert (forall ((|a#96#0#0| T@U) (|a#96#1#0| T@U) (|a#96#2#0| T@U) ) (!  (=> (and (and (= (type |a#96#0#0|) DatatypeTypeType) (= (type |a#96#1#0|) (SeqType BoxType))) (= (type |a#96#2#0|) DatatypeTypeType)) (= (|#UI.Op.SuccOp| (Lit |a#96#0#0|) (Lit |a#96#1#0|) (Lit |a#96#2#0|)) (Lit (|#UI.Op.SuccOp| |a#96#0#0| |a#96#1#0| |a#96#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1933| :pattern ( (|#UI.Op.SuccOp| (Lit |a#96#0#0|) (Lit |a#96#1#0|) (Lit |a#96#2#0|))) )))
(assert (forall ((|a#97#0#0| T@U) (|a#97#1#0| T@U) (|a#97#2#0| T@U) ) (!  (=> (and (and (= (type |a#97#0#0|) DatatypeTypeType) (= (type |a#97#1#0|) (SeqType BoxType))) (= (type |a#97#2#0|) DatatypeTypeType)) (= (UI.Op.start (|#UI.Op.SuccOp| |a#97#0#0| |a#97#1#0| |a#97#2#0|)) |a#97#0#0|)) :qid |UIsdfy.27:14| :skolemid |1934| :pattern ( (|#UI.Op.SuccOp| |a#97#0#0| |a#97#1#0| |a#97#2#0|)) )))
(assert (forall ((|a#98#0#0| T@U) (|a#98#1#0| T@U) (|a#98#2#0| T@U) ) (!  (=> (and (and (= (type |a#98#0#0|) DatatypeTypeType) (= (type |a#98#1#0|) (SeqType BoxType))) (= (type |a#98#2#0|) DatatypeTypeType)) (< (DtRank |a#98#0#0|) (DtRank (|#UI.Op.SuccOp| |a#98#0#0| |a#98#1#0| |a#98#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1935| :pattern ( (|#UI.Op.SuccOp| |a#98#0#0| |a#98#1#0| |a#98#2#0|)) )))
(assert (forall ((|a#99#0#0| T@U) (|a#99#1#0| T@U) (|a#99#2#0| T@U) ) (!  (=> (and (and (= (type |a#99#0#0|) DatatypeTypeType) (= (type |a#99#1#0|) (SeqType BoxType))) (= (type |a#99#2#0|) DatatypeTypeType)) (= (UI.Op.results (|#UI.Op.SuccOp| |a#99#0#0| |a#99#1#0| |a#99#2#0|)) |a#99#1#0|)) :qid |UIsdfy.27:14| :skolemid |1936| :pattern ( (|#UI.Op.SuccOp| |a#99#0#0| |a#99#1#0| |a#99#2#0|)) )))
(assert (forall ((|a#100#0#0| T@U) (|a#100#1#0| T@U) (|a#100#2#0| T@U) (i@@32 Int) ) (!  (=> (and (and (and (= (type |a#100#0#0|) DatatypeTypeType) (= (type |a#100#1#0|) (SeqType BoxType))) (= (type |a#100#2#0|) DatatypeTypeType)) (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#100#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#100#1#0| i@@32))) (DtRank (|#UI.Op.SuccOp| |a#100#0#0| |a#100#1#0| |a#100#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1937| :pattern ( (|Seq#Index| |a#100#1#0| i@@32) (|#UI.Op.SuccOp| |a#100#0#0| |a#100#1#0| |a#100#2#0|)) )))
(assert (forall ((|a#101#0#0| T@U) (|a#101#1#0| T@U) (|a#101#2#0| T@U) ) (!  (=> (and (and (= (type |a#101#0#0|) DatatypeTypeType) (= (type |a#101#1#0|) (SeqType BoxType))) (= (type |a#101#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#101#1#0|) (DtRank (|#UI.Op.SuccOp| |a#101#0#0| |a#101#1#0| |a#101#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1938| :pattern ( (|#UI.Op.SuccOp| |a#101#0#0| |a#101#1#0| |a#101#2#0|)) )))
(assert (forall ((|a#102#0#0| T@U) (|a#102#1#0| T@U) (|a#102#2#0| T@U) ) (!  (=> (and (and (= (type |a#102#0#0|) DatatypeTypeType) (= (type |a#102#1#0|) (SeqType BoxType))) (= (type |a#102#2#0|) DatatypeTypeType)) (= (UI.Op.end (|#UI.Op.SuccOp| |a#102#0#0| |a#102#1#0| |a#102#2#0|)) |a#102#2#0|)) :qid |UIsdfy.27:14| :skolemid |1939| :pattern ( (|#UI.Op.SuccOp| |a#102#0#0| |a#102#1#0| |a#102#2#0|)) )))
(assert (forall ((|a#103#0#0| T@U) (|a#103#1#0| T@U) (|a#103#2#0| T@U) ) (!  (=> (and (and (= (type |a#103#0#0|) DatatypeTypeType) (= (type |a#103#1#0|) (SeqType BoxType))) (= (type |a#103#2#0|) DatatypeTypeType)) (< (DtRank |a#103#2#0|) (DtRank (|#UI.Op.SuccOp| |a#103#0#0| |a#103#1#0| |a#103#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1940| :pattern ( (|#UI.Op.SuccOp| |a#103#0#0| |a#103#1#0| |a#103#2#0|)) )))
(assert (forall ((d@@74 T@U) ) (!  (=> (and (= (type d@@74) DatatypeTypeType) (|$IsA#UI.Op| d@@74)) (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@74) (UI.Op.SyncOp_q d@@74)) (UI.Op.CrashOp_q d@@74)) (UI.Op.PushSyncOp_q d@@74)) (UI.Op.PopSyncOp_q d@@74)) (UI.Op.GetOp_q d@@74)) (UI.Op.PutOp_q d@@74)) (UI.Op.SuccOp_q d@@74))) :qid |unknown.0:0| :skolemid |1941| :pattern ( (|$IsA#UI.Op| d@@74)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (and (= (type d@@75) DatatypeTypeType) ($Is d@@75 Tclass.UI.Op)) (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@75) (UI.Op.SyncOp_q d@@75)) (UI.Op.CrashOp_q d@@75)) (UI.Op.PushSyncOp_q d@@75)) (UI.Op.PopSyncOp_q d@@75)) (UI.Op.GetOp_q d@@75)) (UI.Op.PutOp_q d@@75)) (UI.Op.SuccOp_q d@@75))) :qid |unknown.0:0| :skolemid |1942| :pattern ( (UI.Op.SuccOp_q d@@75) ($Is d@@75 Tclass.UI.Op)) :pattern ( (UI.Op.PutOp_q d@@75) ($Is d@@75 Tclass.UI.Op)) :pattern ( (UI.Op.GetOp_q d@@75) ($Is d@@75 Tclass.UI.Op)) :pattern ( (UI.Op.PopSyncOp_q d@@75) ($Is d@@75 Tclass.UI.Op)) :pattern ( (UI.Op.PushSyncOp_q d@@75) ($Is d@@75 Tclass.UI.Op)) :pattern ( (UI.Op.CrashOp_q d@@75) ($Is d@@75 Tclass.UI.Op)) :pattern ( (UI.Op.SyncOp_q d@@75) ($Is d@@75 Tclass.UI.Op)) :pattern ( (UI.Op.NoOp_q d@@75) ($Is d@@75 Tclass.UI.Op)) )))
(assert (forall ((a@@149 T@U) (b@@80 T@U) ) (!  (=> (and (and (= (type a@@149) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (and (UI.Op.NoOp_q a@@149) (UI.Op.NoOp_q b@@80))) (and (=> (|UI.Op#Equal| a@@149 b@@80) true) (=> true (|UI.Op#Equal| a@@149 b@@80)))) :qid |unknown.0:0| :skolemid |1943| :pattern ( (|UI.Op#Equal| a@@149 b@@80) (UI.Op.NoOp_q a@@149)) :pattern ( (|UI.Op#Equal| a@@149 b@@80) (UI.Op.NoOp_q b@@80)) )))
(assert (forall ((a@@150 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@150) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (and (UI.Op.SyncOp_q a@@150) (UI.Op.SyncOp_q b@@81))) (and (=> (|UI.Op#Equal| a@@150 b@@81) true) (=> true (|UI.Op#Equal| a@@150 b@@81)))) :qid |unknown.0:0| :skolemid |1944| :pattern ( (|UI.Op#Equal| a@@150 b@@81) (UI.Op.SyncOp_q a@@150)) :pattern ( (|UI.Op#Equal| a@@150 b@@81) (UI.Op.SyncOp_q b@@81)) )))
(assert (forall ((a@@151 T@U) (b@@82 T@U) ) (!  (=> (and (and (= (type a@@151) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (UI.Op.CrashOp_q a@@151) (UI.Op.CrashOp_q b@@82))) (and (=> (|UI.Op#Equal| a@@151 b@@82) true) (=> true (|UI.Op#Equal| a@@151 b@@82)))) :qid |unknown.0:0| :skolemid |1945| :pattern ( (|UI.Op#Equal| a@@151 b@@82) (UI.Op.CrashOp_q a@@151)) :pattern ( (|UI.Op#Equal| a@@151 b@@82) (UI.Op.CrashOp_q b@@82)) )))
(assert (forall ((a@@152 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@152) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) (and (UI.Op.PushSyncOp_q a@@152) (UI.Op.PushSyncOp_q b@@83))) (and (=> (|UI.Op#Equal| a@@152 b@@83) (= (UI.Op.id a@@152) (UI.Op.id b@@83))) (=> (= (UI.Op.id a@@152) (UI.Op.id b@@83)) (|UI.Op#Equal| a@@152 b@@83)))) :qid |unknown.0:0| :skolemid |1946| :pattern ( (|UI.Op#Equal| a@@152 b@@83) (UI.Op.PushSyncOp_q a@@152)) :pattern ( (|UI.Op#Equal| a@@152 b@@83) (UI.Op.PushSyncOp_q b@@83)) )))
(assert (forall ((a@@153 T@U) (b@@84 T@U) ) (!  (=> (and (and (= (type a@@153) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (and (UI.Op.PopSyncOp_q a@@153) (UI.Op.PopSyncOp_q b@@84))) (and (=> (|UI.Op#Equal| a@@153 b@@84) (= (UI.Op.id a@@153) (UI.Op.id b@@84))) (=> (= (UI.Op.id a@@153) (UI.Op.id b@@84)) (|UI.Op#Equal| a@@153 b@@84)))) :qid |unknown.0:0| :skolemid |1947| :pattern ( (|UI.Op#Equal| a@@153 b@@84) (UI.Op.PopSyncOp_q a@@153)) :pattern ( (|UI.Op#Equal| a@@153 b@@84) (UI.Op.PopSyncOp_q b@@84)) )))
(assert (forall ((a@@154 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@154) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (and (UI.Op.GetOp_q a@@154) (UI.Op.GetOp_q b@@85))) (and (=> (|UI.Op#Equal| a@@154 b@@85) (and (|Seq#Equal| (UI.Op.key a@@154) (UI.Op.key b@@85)) (|Seq#Equal| (UI.Op.value a@@154) (UI.Op.value b@@85)))) (=> (and (|Seq#Equal| (UI.Op.key a@@154) (UI.Op.key b@@85)) (|Seq#Equal| (UI.Op.value a@@154) (UI.Op.value b@@85))) (|UI.Op#Equal| a@@154 b@@85)))) :qid |unknown.0:0| :skolemid |1948| :pattern ( (|UI.Op#Equal| a@@154 b@@85) (UI.Op.GetOp_q a@@154)) :pattern ( (|UI.Op#Equal| a@@154 b@@85) (UI.Op.GetOp_q b@@85)) )))
(assert (forall ((a@@155 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@155) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (UI.Op.PutOp_q a@@155) (UI.Op.PutOp_q b@@86))) (and (=> (|UI.Op#Equal| a@@155 b@@86) (and (|Seq#Equal| (UI.Op.key a@@155) (UI.Op.key b@@86)) (|Seq#Equal| (UI.Op.value a@@155) (UI.Op.value b@@86)))) (=> (and (|Seq#Equal| (UI.Op.key a@@155) (UI.Op.key b@@86)) (|Seq#Equal| (UI.Op.value a@@155) (UI.Op.value b@@86))) (|UI.Op#Equal| a@@155 b@@86)))) :qid |unknown.0:0| :skolemid |1949| :pattern ( (|UI.Op#Equal| a@@155 b@@86) (UI.Op.PutOp_q a@@155)) :pattern ( (|UI.Op#Equal| a@@155 b@@86) (UI.Op.PutOp_q b@@86)) )))
(assert (forall ((a@@156 T@U) (b@@87 T@U) ) (!  (=> (and (and (= (type a@@156) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (UI.Op.SuccOp_q a@@156) (UI.Op.SuccOp_q b@@87))) (and (=> (|UI.Op#Equal| a@@156 b@@87) (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@156) (UI.Op.start b@@87)) (|Seq#Equal| (UI.Op.results a@@156) (UI.Op.results b@@87))) (|UI.RangeEnd#Equal| (UI.Op.end a@@156) (UI.Op.end b@@87)))) (=> (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@156) (UI.Op.start b@@87)) (|Seq#Equal| (UI.Op.results a@@156) (UI.Op.results b@@87))) (|UI.RangeEnd#Equal| (UI.Op.end a@@156) (UI.Op.end b@@87))) (|UI.Op#Equal| a@@156 b@@87)))) :qid |unknown.0:0| :skolemid |1950| :pattern ( (|UI.Op#Equal| a@@156 b@@87) (UI.Op.SuccOp_q a@@156)) :pattern ( (|UI.Op#Equal| a@@156 b@@87) (UI.Op.SuccOp_q b@@87)) )))
(assert (forall ((a@@157 T@U) (b@@88 T@U) ) (!  (=> (and (= (type a@@157) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) (and (=> (|UI.Op#Equal| a@@157 b@@88) (= a@@157 b@@88)) (=> (= a@@157 b@@88) (|UI.Op#Equal| a@@157 b@@88)))) :qid |unknown.0:0| :skolemid |1951| :pattern ( (|UI.Op#Equal| a@@157 b@@88)) )))
(assert (= (type Tclass.UI.__default) TyType))
(assert (= (Tag Tclass.UI.__default) Tagclass.UI.__default))
(assert (forall ((bx@@146 T@U) ) (!  (=> (and (= (type bx@@146) BoxType) ($IsBox bx@@146 Tclass.UI.__default)) (and (= ($Box ($Unbox refType bx@@146)) bx@@146) ($Is ($Unbox refType bx@@146) Tclass.UI.__default))) :qid |unknown.0:0| :skolemid |1952| :pattern ( ($IsBox bx@@146 Tclass.UI.__default)) )))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (and (=> ($Is $o@@21 Tclass.UI.__default) (or (= $o@@21 null) (= (dtype $o@@21) Tclass.UI.__default))) (=> (or (= $o@@21 null) (= (dtype $o@@21) Tclass.UI.__default)) ($Is $o@@21 Tclass.UI.__default)))) :qid |unknown.0:0| :skolemid |1953| :pattern ( ($Is $o@@21 Tclass.UI.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@83 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@83) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@22 Tclass.UI.__default $h@@83) (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@83 $o@@22) alloc)))) (=> (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@83 $o@@22) alloc))) ($IsAlloc $o@@22 Tclass.UI.__default $h@@83)))) :qid |unknown.0:0| :skolemid |1954| :pattern ( ($IsAlloc $o@@22 Tclass.UI.__default $h@@83)) )))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (forall ((bx@@147 T@U) ) (!  (=> (and (= (type bx@@147) BoxType) ($IsBox bx@@147 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@147)) bx@@147) ($Is ($Unbox refType bx@@147) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |1955| :pattern ( ($IsBox bx@@147 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@23 T@U) ) (!  (=> (= (type $o@@23) refType) (and (=> ($Is $o@@23 Tclass.SeqComparison.__default) (or (= $o@@23 null) (= (dtype $o@@23) Tclass.SeqComparison.__default))) (=> (or (= $o@@23 null) (= (dtype $o@@23) Tclass.SeqComparison.__default)) ($Is $o@@23 Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |1956| :pattern ( ($Is $o@@23 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@24 T@U) ($h@@84 T@U) ) (!  (=> (and (= (type $o@@24) refType) (= (type $h@@84) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@24 Tclass.SeqComparison.__default $h@@84) (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@84 $o@@24) alloc)))) (=> (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@84 $o@@24) alloc))) ($IsAlloc $o@@24 Tclass.SeqComparison.__default $h@@84)))) :qid |unknown.0:0| :skolemid |1957| :pattern ( ($IsAlloc $o@@24 Tclass.SeqComparison.__default $h@@84)) )))
(assert (forall (($ly T@U) (|a#0@@1| T@U) (|b#0@@1| T@U) ) (!  (=> (and (and (= (type $ly) LayerTypeType) (= (type |a#0@@1|) (SeqType BoxType))) (= (type |b#0@@1|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte ($LS $ly) |a#0@@1| |b#0@@1|) (SeqComparison.__default.lte $ly |a#0@@1| |b#0@@1|)) (=> (SeqComparison.__default.lte $ly |a#0@@1| |b#0@@1|) (SeqComparison.__default.lte ($LS $ly) |a#0@@1| |b#0@@1|)))) :qid |SeqCompa.9:23| :skolemid |1958| :pattern ( (SeqComparison.__default.lte ($LS $ly) |a#0@@1| |b#0@@1|)) )))
(assert  (and (forall ((arg0@@359 T@U) ) (! (= (type (AsFuelBottom arg0@@359)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@359)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|a#0@@2| T@U) (|b#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@0) LayerTypeType) (= (type |a#0@@2|) (SeqType BoxType))) (= (type |b#0@@2|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte $ly@@0 |a#0@@2| |b#0@@2|) (SeqComparison.__default.lte $LZ |a#0@@2| |b#0@@2|)) (=> (SeqComparison.__default.lte $LZ |a#0@@2| |b#0@@2|) (SeqComparison.__default.lte $ly@@0 |a#0@@2| |b#0@@2|)))) :qid |SeqCompa.9:23| :skolemid |1959| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@0) |a#0@@2| |b#0@@2|)) )))
(assert  (=> true (forall (($ly@@1 T@U) (|a#0@@3| T@U) (|b#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@1) LayerTypeType) (= (type |a#0@@3|) (SeqType BoxType))) (= (type |b#0@@3|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@3| |b#0@@3|) (and ($Is |a#0@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@3| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.9:23| :skolemid |1960| :pattern ( (SeqComparison.__default.lte $ly@@1 |a#0@@3| |b#0@@3|)) ))))
(assert (forall (($ly@@2 T@U) (|a#0@@4| T@U) (|b#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@2) LayerTypeType) (= (type |a#0@@4|) (SeqType BoxType))) (= (type |b#0@@4|) (SeqType BoxType))) (and ($Is |a#0@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@4| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lte#requires| $ly@@2 |a#0@@4| |b#0@@4|) true) (=> true (|SeqComparison.__default.lte#requires| $ly@@2 |a#0@@4| |b#0@@4|)))) :qid |SeqCompa.9:23| :skolemid |1961| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@2 |a#0@@4| |b#0@@4|)) )))
(assert  (=> true (forall (($ly@@3 T@U) (|a#0@@5| T@U) (|b#0@@5| T@U) ) (!  (=> (and (and (and (= (type $ly@@3) LayerTypeType) (= (type |a#0@@5|) (SeqType BoxType))) (= (type |b#0@@5|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@5| |b#0@@5|) (and ($Is |a#0@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@5| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@5|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@5|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@3) |a#0@@5| |b#0@@5|) (ite (= (|Seq#Length| |a#0@@5|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@5|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@3 (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| |a#0@@5|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@5|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@3 (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@3) |a#0@@5| |b#0@@5|))))) :qid |SeqCompa.9:23| :skolemid |1962| :pattern ( (SeqComparison.__default.lte ($LS $ly@@3) |a#0@@5| |b#0@@5|)) ))))
(assert  (=> true (forall (($ly@@4 T@U) (|a#0@@6| T@U) (|b#0@@6| T@U) ) (!  (=> (and (and (and (= (type $ly@@4) LayerTypeType) (= (type |a#0@@6|) (SeqType BoxType))) (= (type |b#0@@6|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@6|) |b#0@@6|) (and ($Is |a#0@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@6| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@6|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@4) (Lit |a#0@@6|) |b#0@@6|) (ite (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@6|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@4) (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@6|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@4) (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@4) (Lit |a#0@@6|) |b#0@@6|))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |1963| :pattern ( (SeqComparison.__default.lte ($LS $ly@@4) (Lit |a#0@@6|) |b#0@@6|)) ))))
(assert  (=> true (forall (($ly@@5 T@U) (|a#0@@7| T@U) (|b#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@5) LayerTypeType) (= (type |a#0@@7|) (SeqType BoxType))) (= (type |b#0@@7|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@7|) (Lit |b#0@@7|)) (and ($Is |a#0@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@7| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1)))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@5) (Lit |a#0@@7|) (Lit |b#0@@7|)) (ite (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@5) (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1))))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@5) (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1)))))))) (SeqComparison.__default.lte ($LS $ly@@5) (Lit |a#0@@7|) (Lit |b#0@@7|)))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |1964| :pattern ( (SeqComparison.__default.lte ($LS $ly@@5) (Lit |a#0@@7|) (Lit |b#0@@7|))) ))))
(assert  (=> true (forall ((|a#0@@8| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (= (type |a#0@@8|) (SeqType BoxType)) (= (type |b#0@@8|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@8| |b#0@@8|) (and ($Is |a#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@8| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.25:16| :skolemid |1965| :pattern ( (SeqComparison.__default.lt |a#0@@8| |b#0@@8|)) ))))
(assert (forall ((|a#0@@9| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (= (type |a#0@@9|) (SeqType BoxType)) (= (type |b#0@@9|) (SeqType BoxType))) (and ($Is |a#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@9| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@9|) true) (=> true (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@9|)))) :qid |SeqCompa.25:16| :skolemid |1966| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@9|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@10| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (= (type |a#0@@10|) (SeqType BoxType)) (= (type |b#0@@10|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@10| |b#0@@10|) (and ($Is |a#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@10| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@10| |b#0@@10|) (and (=> (SeqComparison.__default.lt |a#0@@10| |b#0@@10|) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@10| |b#0@@10|) (not (|Seq#Equal| |a#0@@10| |b#0@@10|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@10| |b#0@@10|) (not (|Seq#Equal| |a#0@@10| |b#0@@10|))) (SeqComparison.__default.lt |a#0@@10| |b#0@@10|))))) :qid |SeqCompa.25:16| :skolemid |1967| :pattern ( (SeqComparison.__default.lt |a#0@@10| |b#0@@10|)) ))))
(assert  (=> true (forall ((|a#0@@11| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (= (type |a#0@@11|) (SeqType BoxType)) (= (type |b#0@@11|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@11|) (Lit |b#0@@11|)) (and ($Is |a#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@11| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@11|) (Lit |b#0@@11|)) (and (=> (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@11|)) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@11|) (Lit |b#0@@11|)) (not (|Seq#Equal| |a#0@@11| |b#0@@11|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@11|) (Lit |b#0@@11|)) (not (|Seq#Equal| |a#0@@11| |b#0@@11|))) (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@11|)))))) :qid |SeqCompa.25:16| :weight 3 :skolemid |1968| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@11|))) ))))
(assert (= (type |#MapSpec.Constants.Constants|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MapSpec.Constants.Constants|) |##MapSpec.Constants.Constants|))
(assert (forall ((d@@76 T@U) ) (!  (=> (= (type d@@76) DatatypeTypeType) (and (=> (MapSpec.Constants.Constants_q d@@76) (= (DatatypeCtorId d@@76) |##MapSpec.Constants.Constants|)) (=> (= (DatatypeCtorId d@@76) |##MapSpec.Constants.Constants|) (MapSpec.Constants.Constants_q d@@76)))) :qid |unknown.0:0| :skolemid |1969| :pattern ( (MapSpec.Constants.Constants_q d@@76)) )))
(assert (forall ((d@@77 T@U) ) (!  (=> (and (= (type d@@77) DatatypeTypeType) (MapSpec.Constants.Constants_q d@@77)) (= d@@77 |#MapSpec.Constants.Constants|)) :qid |unknown.0:0| :skolemid |1970| :pattern ( (MapSpec.Constants.Constants_q d@@77)) )))
(assert (= (type Tclass.MapSpec.Constants) TyType))
(assert (= (Tag Tclass.MapSpec.Constants) Tagclass.MapSpec.Constants))
(assert (forall ((bx@@148 T@U) ) (!  (=> (and (= (type bx@@148) BoxType) ($IsBox bx@@148 Tclass.MapSpec.Constants)) (and (= ($Box ($Unbox DatatypeTypeType bx@@148)) bx@@148) ($Is ($Unbox DatatypeTypeType bx@@148) Tclass.MapSpec.Constants))) :qid |unknown.0:0| :skolemid |1971| :pattern ( ($IsBox bx@@148 Tclass.MapSpec.Constants)) )))
(assert ($Is |#MapSpec.Constants.Constants| Tclass.MapSpec.Constants))
(assert (forall (($h@@85 T@U) ) (!  (=> (and (= (type $h@@85) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@85)) ($IsAlloc |#MapSpec.Constants.Constants| Tclass.MapSpec.Constants $h@@85)) :qid |DafnyPre.521:12| :skolemid |1972| :pattern ( ($IsAlloc |#MapSpec.Constants.Constants| Tclass.MapSpec.Constants $h@@85)) )))
(assert (= |#MapSpec.Constants.Constants| (Lit |#MapSpec.Constants.Constants|)))
(assert (forall ((d@@78 T@U) ) (!  (=> (and (= (type d@@78) DatatypeTypeType) (|$IsA#MapSpec.Constants| d@@78)) (MapSpec.Constants.Constants_q d@@78)) :qid |unknown.0:0| :skolemid |1973| :pattern ( (|$IsA#MapSpec.Constants| d@@78)) )))
(assert (forall ((d@@79 T@U) ) (!  (=> (and (= (type d@@79) DatatypeTypeType) ($Is d@@79 Tclass.MapSpec.Constants)) (MapSpec.Constants.Constants_q d@@79)) :qid |unknown.0:0| :skolemid |1974| :pattern ( (MapSpec.Constants.Constants_q d@@79) ($Is d@@79 Tclass.MapSpec.Constants)) )))
(assert (forall ((a@@158 T@U) (b@@89 T@U) ) (!  (=> (and (and (= (type a@@158) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) true) (and (=> (|MapSpec.Constants#Equal| a@@158 b@@89) true) (=> true (|MapSpec.Constants#Equal| a@@158 b@@89)))) :qid |unknown.0:0| :skolemid |1975| :pattern ( (|MapSpec.Constants#Equal| a@@158 b@@89)) )))
(assert (forall ((a@@159 T@U) (b@@90 T@U) ) (!  (=> (and (= (type a@@159) DatatypeTypeType) (= (type b@@90) DatatypeTypeType)) (and (=> (|MapSpec.Constants#Equal| a@@159 b@@90) (= a@@159 b@@90)) (=> (= a@@159 b@@90) (|MapSpec.Constants#Equal| a@@159 b@@90)))) :qid |unknown.0:0| :skolemid |1976| :pattern ( (|MapSpec.Constants#Equal| a@@159 b@@90)) )))
(assert (forall ((arg0@@360 T@U) ) (! (= (type (|#MapSpec.Variables.Variables| arg0@@360)) DatatypeTypeType) :qid |funType:#MapSpec.Variables.Variables| :pattern ( (|#MapSpec.Variables.Variables| arg0@@360)) )))
(assert (forall ((|a#5#0#0@@2| T@U) ) (!  (=> (= (type |a#5#0#0@@2|) (IMapType BoxType BoxType)) (= (DatatypeCtorId (|#MapSpec.Variables.Variables| |a#5#0#0@@2|)) |##MapSpec.Variables.Variables|)) :qid |MapSpecs.21:40| :skolemid |1977| :pattern ( (|#MapSpec.Variables.Variables| |a#5#0#0@@2|)) )))
(assert (forall ((d@@80 T@U) ) (!  (=> (= (type d@@80) DatatypeTypeType) (and (=> (MapSpec.Variables.Variables_q d@@80) (= (DatatypeCtorId d@@80) |##MapSpec.Variables.Variables|)) (=> (= (DatatypeCtorId d@@80) |##MapSpec.Variables.Variables|) (MapSpec.Variables.Variables_q d@@80)))) :qid |unknown.0:0| :skolemid |1978| :pattern ( (MapSpec.Variables.Variables_q d@@80)) )))
(assert (forall ((d@@81 T@U) ) (!  (=> (and (= (type d@@81) DatatypeTypeType) (MapSpec.Variables.Variables_q d@@81)) (exists ((|a#6#0#0@@2| T@U) ) (!  (and (= (type |a#6#0#0@@2|) (IMapType BoxType BoxType)) (= d@@81 (|#MapSpec.Variables.Variables| |a#6#0#0@@2|))) :qid |MapSpecs.21:40| :skolemid |1979| :no-pattern (type |a#6#0#0@@2|) :no-pattern (U_2_int |a#6#0#0@@2|) :no-pattern (U_2_bool |a#6#0#0@@2|) ))) :qid |unknown.0:0| :skolemid |1980| :pattern ( (MapSpec.Variables.Variables_q d@@81)) )))
(assert (= (type Tclass.MapSpec.Variables) TyType))
(assert (= (Tag Tclass.MapSpec.Variables) Tagclass.MapSpec.Variables))
(assert (forall ((bx@@149 T@U) ) (!  (=> (and (= (type bx@@149) BoxType) ($IsBox bx@@149 Tclass.MapSpec.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@149)) bx@@149) ($Is ($Unbox DatatypeTypeType bx@@149) Tclass.MapSpec.Variables))) :qid |unknown.0:0| :skolemid |1981| :pattern ( ($IsBox bx@@149 Tclass.MapSpec.Variables)) )))
(assert (forall ((|a#7#0#0@@2| T@U) ) (!  (=> (= (type |a#7#0#0@@2|) (IMapType BoxType BoxType)) (and (=> ($Is (|#MapSpec.Variables.Variables| |a#7#0#0@@2|) Tclass.MapSpec.Variables) ($Is |a#7#0#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))) (=> ($Is |a#7#0#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)) ($Is (|#MapSpec.Variables.Variables| |a#7#0#0@@2|) Tclass.MapSpec.Variables)))) :qid |MapSpecs.21:40| :skolemid |1982| :pattern ( ($Is (|#MapSpec.Variables.Variables| |a#7#0#0@@2|) Tclass.MapSpec.Variables)) )))
(assert (forall ((|a#8#0#0@@2| T@U) ($h@@86 T@U) ) (!  (=> (and (and (= (type |a#8#0#0@@2|) (IMapType BoxType BoxType)) (= (type $h@@86) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@86)) (and (=> ($IsAlloc (|#MapSpec.Variables.Variables| |a#8#0#0@@2|) Tclass.MapSpec.Variables $h@@86) ($IsAlloc |a#8#0#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@86)) (=> ($IsAlloc |a#8#0#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@86) ($IsAlloc (|#MapSpec.Variables.Variables| |a#8#0#0@@2|) Tclass.MapSpec.Variables $h@@86)))) :qid |MapSpecs.21:40| :skolemid |1983| :pattern ( ($IsAlloc (|#MapSpec.Variables.Variables| |a#8#0#0@@2|) Tclass.MapSpec.Variables $h@@86)) )))
(assert (forall ((arg0@@361 T@U) ) (! (= (type (MapSpec.Variables.view arg0@@361)) (IMapType BoxType BoxType)) :qid |funType:MapSpec.Variables.view| :pattern ( (MapSpec.Variables.view arg0@@361)) )))
(assert (forall ((d@@82 T@U) ($h@@87 T@U) ) (!  (=> (and (and (= (type d@@82) DatatypeTypeType) (= (type $h@@87) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@87) (and (MapSpec.Variables.Variables_q d@@82) ($IsAlloc d@@82 Tclass.MapSpec.Variables $h@@87)))) ($IsAlloc (MapSpec.Variables.view d@@82) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@87)) :qid |unknown.0:0| :skolemid |1984| :pattern ( ($IsAlloc (MapSpec.Variables.view d@@82) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@87)) )))
(assert (forall ((|a#9#0#0@@1| T@U) ) (!  (=> (= (type |a#9#0#0@@1|) (IMapType BoxType BoxType)) (= (|#MapSpec.Variables.Variables| (Lit |a#9#0#0@@1|)) (Lit (|#MapSpec.Variables.Variables| |a#9#0#0@@1|)))) :qid |MapSpecs.21:40| :skolemid |1985| :pattern ( (|#MapSpec.Variables.Variables| (Lit |a#9#0#0@@1|))) )))
(assert (forall ((|a#10#0#0@@1| T@U) ) (!  (=> (= (type |a#10#0#0@@1|) (IMapType BoxType BoxType)) (= (MapSpec.Variables.view (|#MapSpec.Variables.Variables| |a#10#0#0@@1|)) |a#10#0#0@@1|)) :qid |MapSpecs.21:40| :skolemid |1986| :pattern ( (|#MapSpec.Variables.Variables| |a#10#0#0@@1|)) )))
(assert (forall ((|a#11#0#0@@1| T@U) (d@@83 T@U) ) (!  (=> (and (and (= (type |a#11#0#0@@1|) (IMapType BoxType BoxType)) (= (type d@@83) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#11#0#0@@1|) ($Box d@@83)))) (< (DtRank d@@83) (DtRank (|#MapSpec.Variables.Variables| |a#11#0#0@@1|)))) :qid |MapSpecs.21:40| :skolemid |1987| :pattern ( (MapType0Select (|IMap#Domain| |a#11#0#0@@1|) ($Box d@@83)) (|#MapSpec.Variables.Variables| |a#11#0#0@@1|)) )))
(assert (forall ((|a#12#0#0| T@U) (bx@@150 T@U) ) (!  (=> (and (and (= (type |a#12#0#0|) (IMapType BoxType BoxType)) (= (type bx@@150) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#12#0#0|) bx@@150))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#12#0#0|) bx@@150))) (DtRank (|#MapSpec.Variables.Variables| |a#12#0#0|)))) :qid |MapSpecs.21:40| :skolemid |1988| :pattern ( (MapType0Select (|IMap#Domain| |a#12#0#0|) bx@@150) (|#MapSpec.Variables.Variables| |a#12#0#0|)) )))
(assert (forall ((d@@84 T@U) ) (!  (=> (and (= (type d@@84) DatatypeTypeType) (|$IsA#MapSpec.Variables| d@@84)) (MapSpec.Variables.Variables_q d@@84)) :qid |unknown.0:0| :skolemid |1989| :pattern ( (|$IsA#MapSpec.Variables| d@@84)) )))
(assert (forall ((d@@85 T@U) ) (!  (=> (and (= (type d@@85) DatatypeTypeType) ($Is d@@85 Tclass.MapSpec.Variables)) (MapSpec.Variables.Variables_q d@@85)) :qid |unknown.0:0| :skolemid |1990| :pattern ( (MapSpec.Variables.Variables_q d@@85) ($Is d@@85 Tclass.MapSpec.Variables)) )))
(assert (forall ((a@@160 T@U) (b@@91 T@U) ) (!  (=> (and (and (= (type a@@160) DatatypeTypeType) (= (type b@@91) DatatypeTypeType)) true) (and (=> (|MapSpec.Variables#Equal| a@@160 b@@91) (|IMap#Equal| (MapSpec.Variables.view a@@160) (MapSpec.Variables.view b@@91))) (=> (|IMap#Equal| (MapSpec.Variables.view a@@160) (MapSpec.Variables.view b@@91)) (|MapSpec.Variables#Equal| a@@160 b@@91)))) :qid |unknown.0:0| :skolemid |1991| :pattern ( (|MapSpec.Variables#Equal| a@@160 b@@91)) )))
(assert (forall ((a@@161 T@U) (b@@92 T@U) ) (!  (=> (and (= (type a@@161) DatatypeTypeType) (= (type b@@92) DatatypeTypeType)) (and (=> (|MapSpec.Variables#Equal| a@@161 b@@92) (= a@@161 b@@92)) (=> (= a@@161 b@@92) (|MapSpec.Variables#Equal| a@@161 b@@92)))) :qid |unknown.0:0| :skolemid |1992| :pattern ( (|MapSpec.Variables#Equal| a@@161 b@@92)) )))
(assert (forall ((arg0@@362 T@U) (arg1@@163 T@U) ) (! (= (type (|#MapSpec.Step.QueryStep| arg0@@362 arg1@@163)) DatatypeTypeType) :qid |funType:#MapSpec.Step.QueryStep| :pattern ( (|#MapSpec.Step.QueryStep| arg0@@362 arg1@@163)) )))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (!  (=> (and (= (type |a#13#0#0|) (SeqType BoxType)) (= (type |a#13#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSpec.Step.QueryStep| |a#13#0#0| |a#13#1#0|)) |##MapSpec.Step.QueryStep|)) :qid |MapSpecs.119:19| :skolemid |1993| :pattern ( (|#MapSpec.Step.QueryStep| |a#13#0#0| |a#13#1#0|)) )))
(assert (forall ((d@@86 T@U) ) (!  (=> (= (type d@@86) DatatypeTypeType) (and (=> (MapSpec.Step.QueryStep_q d@@86) (= (DatatypeCtorId d@@86) |##MapSpec.Step.QueryStep|)) (=> (= (DatatypeCtorId d@@86) |##MapSpec.Step.QueryStep|) (MapSpec.Step.QueryStep_q d@@86)))) :qid |unknown.0:0| :skolemid |1994| :pattern ( (MapSpec.Step.QueryStep_q d@@86)) )))
(assert (forall ((d@@87 T@U) ) (!  (=> (and (= (type d@@87) DatatypeTypeType) (MapSpec.Step.QueryStep_q d@@87)) (exists ((|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (!  (and (and (= (type |a#14#0#0|) (SeqType BoxType)) (= (type |a#14#1#0|) (SeqType BoxType))) (= d@@87 (|#MapSpec.Step.QueryStep| |a#14#0#0| |a#14#1#0|))) :qid |MapSpecs.119:19| :skolemid |1995| :no-pattern (type |a#14#0#0|) :no-pattern (type |a#14#1#0|) :no-pattern (U_2_int |a#14#0#0|) :no-pattern (U_2_bool |a#14#0#0|) :no-pattern (U_2_int |a#14#1#0|) :no-pattern (U_2_bool |a#14#1#0|) ))) :qid |unknown.0:0| :skolemid |1996| :pattern ( (MapSpec.Step.QueryStep_q d@@87)) )))
(assert (= (type Tclass.MapSpec.Step) TyType))
(assert (= (Tag Tclass.MapSpec.Step) Tagclass.MapSpec.Step))
(assert (forall ((bx@@151 T@U) ) (!  (=> (and (= (type bx@@151) BoxType) ($IsBox bx@@151 Tclass.MapSpec.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@151)) bx@@151) ($Is ($Unbox DatatypeTypeType bx@@151) Tclass.MapSpec.Step))) :qid |unknown.0:0| :skolemid |1997| :pattern ( ($IsBox bx@@151 Tclass.MapSpec.Step)) )))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (!  (=> (and (= (type |a#15#0#0|) (SeqType BoxType)) (= (type |a#15#1#0|) (SeqType BoxType))) (and (=> ($Is (|#MapSpec.Step.QueryStep| |a#15#0#0| |a#15#1#0|) Tclass.MapSpec.Step) (and ($Is |a#15#0#0| Tclass.KeyType.Key) ($Is |a#15#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#15#0#0| Tclass.KeyType.Key) ($Is |a#15#1#0| Tclass.ValueType.Value)) ($Is (|#MapSpec.Step.QueryStep| |a#15#0#0| |a#15#1#0|) Tclass.MapSpec.Step)))) :qid |MapSpecs.119:19| :skolemid |1998| :pattern ( ($Is (|#MapSpec.Step.QueryStep| |a#15#0#0| |a#15#1#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) ($h@@88 T@U) ) (!  (=> (and (and (and (= (type |a#16#0#0|) (SeqType BoxType)) (= (type |a#16#1#0|) (SeqType BoxType))) (= (type $h@@88) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@88)) (and (=> ($IsAlloc (|#MapSpec.Step.QueryStep| |a#16#0#0| |a#16#1#0|) Tclass.MapSpec.Step $h@@88) (and ($IsAlloc |a#16#0#0| Tclass.KeyType.Key $h@@88) ($IsAlloc |a#16#1#0| Tclass.ValueType.Value $h@@88))) (=> (and ($IsAlloc |a#16#0#0| Tclass.KeyType.Key $h@@88) ($IsAlloc |a#16#1#0| Tclass.ValueType.Value $h@@88)) ($IsAlloc (|#MapSpec.Step.QueryStep| |a#16#0#0| |a#16#1#0|) Tclass.MapSpec.Step $h@@88)))) :qid |MapSpecs.119:19| :skolemid |1999| :pattern ( ($IsAlloc (|#MapSpec.Step.QueryStep| |a#16#0#0| |a#16#1#0|) Tclass.MapSpec.Step $h@@88)) )))
(assert (forall ((arg0@@363 T@U) ) (! (= (type (MapSpec.Step.key arg0@@363)) (SeqType BoxType)) :qid |funType:MapSpec.Step.key| :pattern ( (MapSpec.Step.key arg0@@363)) )))
(assert (forall ((d@@88 T@U) ($h@@89 T@U) ) (!  (=> (and (and (= (type d@@88) DatatypeTypeType) (= (type $h@@89) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@89) (and (MapSpec.Step.QueryStep_q d@@88) ($IsAlloc d@@88 Tclass.MapSpec.Step $h@@89)))) ($IsAlloc (MapSpec.Step.key d@@88) Tclass.KeyType.Key $h@@89)) :qid |unknown.0:0| :skolemid |2000| :pattern ( ($IsAlloc (MapSpec.Step.key d@@88) Tclass.KeyType.Key $h@@89)) )))
(assert (forall ((arg0@@364 T@U) ) (! (= (type (MapSpec.Step.result arg0@@364)) (SeqType BoxType)) :qid |funType:MapSpec.Step.result| :pattern ( (MapSpec.Step.result arg0@@364)) )))
(assert (forall ((d@@89 T@U) ($h@@90 T@U) ) (!  (=> (and (and (= (type d@@89) DatatypeTypeType) (= (type $h@@90) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@90) (and (MapSpec.Step.QueryStep_q d@@89) ($IsAlloc d@@89 Tclass.MapSpec.Step $h@@90)))) ($IsAlloc (MapSpec.Step.result d@@89) Tclass.ValueType.Value $h@@90)) :qid |unknown.0:0| :skolemid |2001| :pattern ( ($IsAlloc (MapSpec.Step.result d@@89) Tclass.ValueType.Value $h@@90)) )))
(assert (forall ((|a#17#0#0@@0| T@U) (|a#17#1#0| T@U) ) (!  (=> (and (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (type |a#17#1#0|) (SeqType BoxType))) (= (|#MapSpec.Step.QueryStep| (Lit |a#17#0#0@@0|) (Lit |a#17#1#0|)) (Lit (|#MapSpec.Step.QueryStep| |a#17#0#0@@0| |a#17#1#0|)))) :qid |MapSpecs.119:19| :skolemid |2002| :pattern ( (|#MapSpec.Step.QueryStep| (Lit |a#17#0#0@@0|) (Lit |a#17#1#0|))) )))
(assert (forall ((|a#18#0#0@@0| T@U) (|a#18#1#0| T@U) ) (!  (=> (and (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= (type |a#18#1#0|) (SeqType BoxType))) (= (MapSpec.Step.key (|#MapSpec.Step.QueryStep| |a#18#0#0@@0| |a#18#1#0|)) |a#18#0#0@@0|)) :qid |MapSpecs.119:19| :skolemid |2003| :pattern ( (|#MapSpec.Step.QueryStep| |a#18#0#0@@0| |a#18#1#0|)) )))
(assert (forall ((|a#19#0#0@@0| T@U) (|a#19#1#0| T@U) ) (!  (=> (and (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= (type |a#19#1#0|) (SeqType BoxType))) (= (MapSpec.Step.result (|#MapSpec.Step.QueryStep| |a#19#0#0@@0| |a#19#1#0|)) |a#19#1#0|)) :qid |MapSpecs.119:19| :skolemid |2004| :pattern ( (|#MapSpec.Step.QueryStep| |a#19#0#0@@0| |a#19#1#0|)) )))
(assert (forall ((arg0@@365 T@U) (arg1@@164 T@U) ) (! (= (type (|#MapSpec.Step.WriteStep| arg0@@365 arg1@@164)) DatatypeTypeType) :qid |funType:#MapSpec.Step.WriteStep| :pattern ( (|#MapSpec.Step.WriteStep| arg0@@365 arg1@@164)) )))
(assert (forall ((|a#20#0#0@@0| T@U) (|a#20#1#0| T@U) ) (!  (=> (and (= (type |a#20#0#0@@0|) (SeqType BoxType)) (= (type |a#20#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSpec.Step.WriteStep| |a#20#0#0@@0| |a#20#1#0|)) |##MapSpec.Step.WriteStep|)) :qid |MapSpecs.120:19| :skolemid |2005| :pattern ( (|#MapSpec.Step.WriteStep| |a#20#0#0@@0| |a#20#1#0|)) )))
(assert (forall ((d@@90 T@U) ) (!  (=> (= (type d@@90) DatatypeTypeType) (and (=> (MapSpec.Step.WriteStep_q d@@90) (= (DatatypeCtorId d@@90) |##MapSpec.Step.WriteStep|)) (=> (= (DatatypeCtorId d@@90) |##MapSpec.Step.WriteStep|) (MapSpec.Step.WriteStep_q d@@90)))) :qid |unknown.0:0| :skolemid |2006| :pattern ( (MapSpec.Step.WriteStep_q d@@90)) )))
(assert (forall ((d@@91 T@U) ) (!  (=> (and (= (type d@@91) DatatypeTypeType) (MapSpec.Step.WriteStep_q d@@91)) (exists ((|a#21#0#0@@0| T@U) (|a#21#1#0| T@U) ) (!  (and (and (= (type |a#21#0#0@@0|) (SeqType BoxType)) (= (type |a#21#1#0|) (SeqType BoxType))) (= d@@91 (|#MapSpec.Step.WriteStep| |a#21#0#0@@0| |a#21#1#0|))) :qid |MapSpecs.120:19| :skolemid |2007| :no-pattern (type |a#21#0#0@@0|) :no-pattern (type |a#21#1#0|) :no-pattern (U_2_int |a#21#0#0@@0|) :no-pattern (U_2_bool |a#21#0#0@@0|) :no-pattern (U_2_int |a#21#1#0|) :no-pattern (U_2_bool |a#21#1#0|) ))) :qid |unknown.0:0| :skolemid |2008| :pattern ( (MapSpec.Step.WriteStep_q d@@91)) )))
(assert (forall ((|a#22#0#0@@0| T@U) (|a#22#1#0| T@U) ) (!  (=> (and (= (type |a#22#0#0@@0|) (SeqType BoxType)) (= (type |a#22#1#0|) (SeqType BoxType))) (and (=> ($Is (|#MapSpec.Step.WriteStep| |a#22#0#0@@0| |a#22#1#0|) Tclass.MapSpec.Step) (and ($Is |a#22#0#0@@0| Tclass.KeyType.Key) ($Is |a#22#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#22#0#0@@0| Tclass.KeyType.Key) ($Is |a#22#1#0| Tclass.ValueType.Value)) ($Is (|#MapSpec.Step.WriteStep| |a#22#0#0@@0| |a#22#1#0|) Tclass.MapSpec.Step)))) :qid |MapSpecs.120:19| :skolemid |2009| :pattern ( ($Is (|#MapSpec.Step.WriteStep| |a#22#0#0@@0| |a#22#1#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#23#0#0@@0| T@U) (|a#23#1#0| T@U) ($h@@91 T@U) ) (!  (=> (and (and (and (= (type |a#23#0#0@@0|) (SeqType BoxType)) (= (type |a#23#1#0|) (SeqType BoxType))) (= (type $h@@91) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@91)) (and (=> ($IsAlloc (|#MapSpec.Step.WriteStep| |a#23#0#0@@0| |a#23#1#0|) Tclass.MapSpec.Step $h@@91) (and ($IsAlloc |a#23#0#0@@0| Tclass.KeyType.Key $h@@91) ($IsAlloc |a#23#1#0| Tclass.ValueType.Value $h@@91))) (=> (and ($IsAlloc |a#23#0#0@@0| Tclass.KeyType.Key $h@@91) ($IsAlloc |a#23#1#0| Tclass.ValueType.Value $h@@91)) ($IsAlloc (|#MapSpec.Step.WriteStep| |a#23#0#0@@0| |a#23#1#0|) Tclass.MapSpec.Step $h@@91)))) :qid |MapSpecs.120:19| :skolemid |2010| :pattern ( ($IsAlloc (|#MapSpec.Step.WriteStep| |a#23#0#0@@0| |a#23#1#0|) Tclass.MapSpec.Step $h@@91)) )))
(assert (forall ((d@@92 T@U) ($h@@92 T@U) ) (!  (=> (and (and (= (type d@@92) DatatypeTypeType) (= (type $h@@92) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@92) (and (MapSpec.Step.WriteStep_q d@@92) ($IsAlloc d@@92 Tclass.MapSpec.Step $h@@92)))) ($IsAlloc (MapSpec.Step.key d@@92) Tclass.KeyType.Key $h@@92)) :qid |unknown.0:0| :skolemid |2011| :pattern ( ($IsAlloc (MapSpec.Step.key d@@92) Tclass.KeyType.Key $h@@92)) )))
(assert (forall ((arg0@@366 T@U) ) (! (= (type (MapSpec.Step.new__value arg0@@366)) (SeqType BoxType)) :qid |funType:MapSpec.Step.new__value| :pattern ( (MapSpec.Step.new__value arg0@@366)) )))
(assert (forall ((d@@93 T@U) ($h@@93 T@U) ) (!  (=> (and (and (= (type d@@93) DatatypeTypeType) (= (type $h@@93) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@93) (and (MapSpec.Step.WriteStep_q d@@93) ($IsAlloc d@@93 Tclass.MapSpec.Step $h@@93)))) ($IsAlloc (MapSpec.Step.new__value d@@93) Tclass.ValueType.Value $h@@93)) :qid |unknown.0:0| :skolemid |2012| :pattern ( ($IsAlloc (MapSpec.Step.new__value d@@93) Tclass.ValueType.Value $h@@93)) )))
(assert (forall ((|a#24#0#0@@0| T@U) (|a#24#1#0| T@U) ) (!  (=> (and (= (type |a#24#0#0@@0|) (SeqType BoxType)) (= (type |a#24#1#0|) (SeqType BoxType))) (= (|#MapSpec.Step.WriteStep| (Lit |a#24#0#0@@0|) (Lit |a#24#1#0|)) (Lit (|#MapSpec.Step.WriteStep| |a#24#0#0@@0| |a#24#1#0|)))) :qid |MapSpecs.120:19| :skolemid |2013| :pattern ( (|#MapSpec.Step.WriteStep| (Lit |a#24#0#0@@0|) (Lit |a#24#1#0|))) )))
(assert (forall ((|a#25#0#0@@0| T@U) (|a#25#1#0| T@U) ) (!  (=> (and (= (type |a#25#0#0@@0|) (SeqType BoxType)) (= (type |a#25#1#0|) (SeqType BoxType))) (= (MapSpec.Step.key (|#MapSpec.Step.WriteStep| |a#25#0#0@@0| |a#25#1#0|)) |a#25#0#0@@0|)) :qid |MapSpecs.120:19| :skolemid |2014| :pattern ( (|#MapSpec.Step.WriteStep| |a#25#0#0@@0| |a#25#1#0|)) )))
(assert (forall ((|a#26#0#0@@0| T@U) (|a#26#1#0| T@U) ) (!  (=> (and (= (type |a#26#0#0@@0|) (SeqType BoxType)) (= (type |a#26#1#0|) (SeqType BoxType))) (= (MapSpec.Step.new__value (|#MapSpec.Step.WriteStep| |a#26#0#0@@0| |a#26#1#0|)) |a#26#1#0|)) :qid |MapSpecs.120:19| :skolemid |2015| :pattern ( (|#MapSpec.Step.WriteStep| |a#26#0#0@@0| |a#26#1#0|)) )))
(assert (forall ((arg0@@367 T@U) (arg1@@165 T@U) (arg2@@115 T@U) ) (! (= (type (|#MapSpec.Step.SuccStep| arg0@@367 arg1@@165 arg2@@115)) DatatypeTypeType) :qid |funType:#MapSpec.Step.SuccStep| :pattern ( (|#MapSpec.Step.SuccStep| arg0@@367 arg1@@165 arg2@@115)) )))
(assert (forall ((|a#27#0#0@@0| T@U) (|a#27#1#0| T@U) (|a#27#2#0| T@U) ) (!  (=> (and (and (= (type |a#27#0#0@@0|) DatatypeTypeType) (= (type |a#27#1#0|) (SeqType BoxType))) (= (type |a#27#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#MapSpec.Step.SuccStep| |a#27#0#0@@0| |a#27#1#0| |a#27#2#0|)) |##MapSpec.Step.SuccStep|)) :qid |MapSpecs.121:18| :skolemid |2016| :pattern ( (|#MapSpec.Step.SuccStep| |a#27#0#0@@0| |a#27#1#0| |a#27#2#0|)) )))
(assert (forall ((d@@94 T@U) ) (!  (=> (= (type d@@94) DatatypeTypeType) (and (=> (MapSpec.Step.SuccStep_q d@@94) (= (DatatypeCtorId d@@94) |##MapSpec.Step.SuccStep|)) (=> (= (DatatypeCtorId d@@94) |##MapSpec.Step.SuccStep|) (MapSpec.Step.SuccStep_q d@@94)))) :qid |unknown.0:0| :skolemid |2017| :pattern ( (MapSpec.Step.SuccStep_q d@@94)) )))
(assert (forall ((d@@95 T@U) ) (!  (=> (and (= (type d@@95) DatatypeTypeType) (MapSpec.Step.SuccStep_q d@@95)) (exists ((|a#28#0#0@@0| T@U) (|a#28#1#0| T@U) (|a#28#2#0| T@U) ) (!  (and (and (and (= (type |a#28#0#0@@0|) DatatypeTypeType) (= (type |a#28#1#0|) (SeqType BoxType))) (= (type |a#28#2#0|) DatatypeTypeType)) (= d@@95 (|#MapSpec.Step.SuccStep| |a#28#0#0@@0| |a#28#1#0| |a#28#2#0|))) :qid |MapSpecs.121:18| :skolemid |2018| :no-pattern (type |a#28#0#0@@0|) :no-pattern (type |a#28#1#0|) :no-pattern (type |a#28#2#0|) :no-pattern (U_2_int |a#28#0#0@@0|) :no-pattern (U_2_bool |a#28#0#0@@0|) :no-pattern (U_2_int |a#28#1#0|) :no-pattern (U_2_bool |a#28#1#0|) :no-pattern (U_2_int |a#28#2#0|) :no-pattern (U_2_bool |a#28#2#0|) ))) :qid |unknown.0:0| :skolemid |2019| :pattern ( (MapSpec.Step.SuccStep_q d@@95)) )))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) (|a#29#2#0| T@U) ) (!  (=> (and (and (= (type |a#29#0#0|) DatatypeTypeType) (= (type |a#29#1#0|) (SeqType BoxType))) (= (type |a#29#2#0|) DatatypeTypeType)) (and (=> ($Is (|#MapSpec.Step.SuccStep| |a#29#0#0| |a#29#1#0| |a#29#2#0|) Tclass.MapSpec.Step) (and (and ($Is |a#29#0#0| Tclass.UI.RangeStart) ($Is |a#29#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#29#2#0| Tclass.UI.RangeEnd))) (=> (and (and ($Is |a#29#0#0| Tclass.UI.RangeStart) ($Is |a#29#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#29#2#0| Tclass.UI.RangeEnd)) ($Is (|#MapSpec.Step.SuccStep| |a#29#0#0| |a#29#1#0| |a#29#2#0|) Tclass.MapSpec.Step)))) :qid |MapSpecs.121:18| :skolemid |2020| :pattern ( ($Is (|#MapSpec.Step.SuccStep| |a#29#0#0| |a#29#1#0| |a#29#2#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| T@U) (|a#30#2#0| T@U) ($h@@94 T@U) ) (!  (=> (and (and (and (and (= (type |a#30#0#0|) DatatypeTypeType) (= (type |a#30#1#0|) (SeqType BoxType))) (= (type |a#30#2#0|) DatatypeTypeType)) (= (type $h@@94) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@94)) (and (=> ($IsAlloc (|#MapSpec.Step.SuccStep| |a#30#0#0| |a#30#1#0| |a#30#2#0|) Tclass.MapSpec.Step $h@@94) (and (and ($IsAlloc |a#30#0#0| Tclass.UI.RangeStart $h@@94) ($IsAlloc |a#30#1#0| (TSeq Tclass.UI.SuccResult) $h@@94)) ($IsAlloc |a#30#2#0| Tclass.UI.RangeEnd $h@@94))) (=> (and (and ($IsAlloc |a#30#0#0| Tclass.UI.RangeStart $h@@94) ($IsAlloc |a#30#1#0| (TSeq Tclass.UI.SuccResult) $h@@94)) ($IsAlloc |a#30#2#0| Tclass.UI.RangeEnd $h@@94)) ($IsAlloc (|#MapSpec.Step.SuccStep| |a#30#0#0| |a#30#1#0| |a#30#2#0|) Tclass.MapSpec.Step $h@@94)))) :qid |MapSpecs.121:18| :skolemid |2021| :pattern ( ($IsAlloc (|#MapSpec.Step.SuccStep| |a#30#0#0| |a#30#1#0| |a#30#2#0|) Tclass.MapSpec.Step $h@@94)) )))
(assert (forall ((arg0@@368 T@U) ) (! (= (type (MapSpec.Step.start arg0@@368)) DatatypeTypeType) :qid |funType:MapSpec.Step.start| :pattern ( (MapSpec.Step.start arg0@@368)) )))
(assert (forall ((d@@96 T@U) ($h@@95 T@U) ) (!  (=> (and (and (= (type d@@96) DatatypeTypeType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@95) (and (MapSpec.Step.SuccStep_q d@@96) ($IsAlloc d@@96 Tclass.MapSpec.Step $h@@95)))) ($IsAlloc (MapSpec.Step.start d@@96) Tclass.UI.RangeStart $h@@95)) :qid |unknown.0:0| :skolemid |2022| :pattern ( ($IsAlloc (MapSpec.Step.start d@@96) Tclass.UI.RangeStart $h@@95)) )))
(assert (forall ((arg0@@369 T@U) ) (! (= (type (MapSpec.Step.results arg0@@369)) (SeqType BoxType)) :qid |funType:MapSpec.Step.results| :pattern ( (MapSpec.Step.results arg0@@369)) )))
(assert (forall ((d@@97 T@U) ($h@@96 T@U) ) (!  (=> (and (and (= (type d@@97) DatatypeTypeType) (= (type $h@@96) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@96) (and (MapSpec.Step.SuccStep_q d@@97) ($IsAlloc d@@97 Tclass.MapSpec.Step $h@@96)))) ($IsAlloc (MapSpec.Step.results d@@97) (TSeq Tclass.UI.SuccResult) $h@@96)) :qid |unknown.0:0| :skolemid |2023| :pattern ( ($IsAlloc (MapSpec.Step.results d@@97) (TSeq Tclass.UI.SuccResult) $h@@96)) )))
(assert (forall ((arg0@@370 T@U) ) (! (= (type (MapSpec.Step.end arg0@@370)) DatatypeTypeType) :qid |funType:MapSpec.Step.end| :pattern ( (MapSpec.Step.end arg0@@370)) )))
(assert (forall ((d@@98 T@U) ($h@@97 T@U) ) (!  (=> (and (and (= (type d@@98) DatatypeTypeType) (= (type $h@@97) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@97) (and (MapSpec.Step.SuccStep_q d@@98) ($IsAlloc d@@98 Tclass.MapSpec.Step $h@@97)))) ($IsAlloc (MapSpec.Step.end d@@98) Tclass.UI.RangeEnd $h@@97)) :qid |unknown.0:0| :skolemid |2024| :pattern ( ($IsAlloc (MapSpec.Step.end d@@98) Tclass.UI.RangeEnd $h@@97)) )))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| T@U) (|a#31#2#0| T@U) ) (!  (=> (and (and (= (type |a#31#0#0|) DatatypeTypeType) (= (type |a#31#1#0|) (SeqType BoxType))) (= (type |a#31#2#0|) DatatypeTypeType)) (= (|#MapSpec.Step.SuccStep| (Lit |a#31#0#0|) (Lit |a#31#1#0|) (Lit |a#31#2#0|)) (Lit (|#MapSpec.Step.SuccStep| |a#31#0#0| |a#31#1#0| |a#31#2#0|)))) :qid |MapSpecs.121:18| :skolemid |2025| :pattern ( (|#MapSpec.Step.SuccStep| (Lit |a#31#0#0|) (Lit |a#31#1#0|) (Lit |a#31#2#0|))) )))
(assert (forall ((|a#32#0#0| T@U) (|a#32#1#0| T@U) (|a#32#2#0| T@U) ) (!  (=> (and (and (= (type |a#32#0#0|) DatatypeTypeType) (= (type |a#32#1#0|) (SeqType BoxType))) (= (type |a#32#2#0|) DatatypeTypeType)) (= (MapSpec.Step.start (|#MapSpec.Step.SuccStep| |a#32#0#0| |a#32#1#0| |a#32#2#0|)) |a#32#0#0|)) :qid |MapSpecs.121:18| :skolemid |2026| :pattern ( (|#MapSpec.Step.SuccStep| |a#32#0#0| |a#32#1#0| |a#32#2#0|)) )))
(assert (forall ((|a#33#0#0| T@U) (|a#33#1#0| T@U) (|a#33#2#0| T@U) ) (!  (=> (and (and (= (type |a#33#0#0|) DatatypeTypeType) (= (type |a#33#1#0|) (SeqType BoxType))) (= (type |a#33#2#0|) DatatypeTypeType)) (< (DtRank |a#33#0#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#33#0#0| |a#33#1#0| |a#33#2#0|)))) :qid |MapSpecs.121:18| :skolemid |2027| :pattern ( (|#MapSpec.Step.SuccStep| |a#33#0#0| |a#33#1#0| |a#33#2#0|)) )))
(assert (forall ((|a#34#0#0@@0| T@U) (|a#34#1#0@@0| T@U) (|a#34#2#0| T@U) ) (!  (=> (and (and (= (type |a#34#0#0@@0|) DatatypeTypeType) (= (type |a#34#1#0@@0|) (SeqType BoxType))) (= (type |a#34#2#0|) DatatypeTypeType)) (= (MapSpec.Step.results (|#MapSpec.Step.SuccStep| |a#34#0#0@@0| |a#34#1#0@@0| |a#34#2#0|)) |a#34#1#0@@0|)) :qid |MapSpecs.121:18| :skolemid |2028| :pattern ( (|#MapSpec.Step.SuccStep| |a#34#0#0@@0| |a#34#1#0@@0| |a#34#2#0|)) )))
(assert (forall ((|a#35#0#0@@0| T@U) (|a#35#1#0@@0| T@U) (|a#35#2#0| T@U) (i@@33 Int) ) (!  (=> (and (and (and (= (type |a#35#0#0@@0|) DatatypeTypeType) (= (type |a#35#1#0@@0|) (SeqType BoxType))) (= (type |a#35#2#0|) DatatypeTypeType)) (and (<= 0 i@@33) (< i@@33 (|Seq#Length| |a#35#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#35#1#0@@0| i@@33))) (DtRank (|#MapSpec.Step.SuccStep| |a#35#0#0@@0| |a#35#1#0@@0| |a#35#2#0|)))) :qid |MapSpecs.121:18| :skolemid |2029| :pattern ( (|Seq#Index| |a#35#1#0@@0| i@@33) (|#MapSpec.Step.SuccStep| |a#35#0#0@@0| |a#35#1#0@@0| |a#35#2#0|)) )))
(assert (forall ((|a#36#0#0@@0| T@U) (|a#36#1#0@@0| T@U) (|a#36#2#0| T@U) ) (!  (=> (and (and (= (type |a#36#0#0@@0|) DatatypeTypeType) (= (type |a#36#1#0@@0|) (SeqType BoxType))) (= (type |a#36#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#36#1#0@@0|) (DtRank (|#MapSpec.Step.SuccStep| |a#36#0#0@@0| |a#36#1#0@@0| |a#36#2#0|)))) :qid |MapSpecs.121:18| :skolemid |2030| :pattern ( (|#MapSpec.Step.SuccStep| |a#36#0#0@@0| |a#36#1#0@@0| |a#36#2#0|)) )))
(assert (forall ((|a#37#0#0@@0| T@U) (|a#37#1#0@@0| T@U) (|a#37#2#0| T@U) ) (!  (=> (and (and (= (type |a#37#0#0@@0|) DatatypeTypeType) (= (type |a#37#1#0@@0|) (SeqType BoxType))) (= (type |a#37#2#0|) DatatypeTypeType)) (= (MapSpec.Step.end (|#MapSpec.Step.SuccStep| |a#37#0#0@@0| |a#37#1#0@@0| |a#37#2#0|)) |a#37#2#0|)) :qid |MapSpecs.121:18| :skolemid |2031| :pattern ( (|#MapSpec.Step.SuccStep| |a#37#0#0@@0| |a#37#1#0@@0| |a#37#2#0|)) )))
(assert (forall ((|a#38#0#0@@0| T@U) (|a#38#1#0@@0| T@U) (|a#38#2#0| T@U) ) (!  (=> (and (and (= (type |a#38#0#0@@0|) DatatypeTypeType) (= (type |a#38#1#0@@0|) (SeqType BoxType))) (= (type |a#38#2#0|) DatatypeTypeType)) (< (DtRank |a#38#2#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#38#0#0@@0| |a#38#1#0@@0| |a#38#2#0|)))) :qid |MapSpecs.121:18| :skolemid |2032| :pattern ( (|#MapSpec.Step.SuccStep| |a#38#0#0@@0| |a#38#1#0@@0| |a#38#2#0|)) )))
(assert (= (type |#MapSpec.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MapSpec.Step.StutterStep|) |##MapSpec.Step.StutterStep|))
(assert (forall ((d@@99 T@U) ) (!  (=> (= (type d@@99) DatatypeTypeType) (and (=> (MapSpec.Step.StutterStep_q d@@99) (= (DatatypeCtorId d@@99) |##MapSpec.Step.StutterStep|)) (=> (= (DatatypeCtorId d@@99) |##MapSpec.Step.StutterStep|) (MapSpec.Step.StutterStep_q d@@99)))) :qid |unknown.0:0| :skolemid |2033| :pattern ( (MapSpec.Step.StutterStep_q d@@99)) )))
(assert (forall ((d@@100 T@U) ) (!  (=> (and (= (type d@@100) DatatypeTypeType) (MapSpec.Step.StutterStep_q d@@100)) (= d@@100 |#MapSpec.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |2034| :pattern ( (MapSpec.Step.StutterStep_q d@@100)) )))
(assert ($Is |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step))
(assert (forall (($h@@98 T@U) ) (!  (=> (and (= (type $h@@98) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@98)) ($IsAlloc |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step $h@@98)) :qid |DafnyPre.521:12| :skolemid |2035| :pattern ( ($IsAlloc |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step $h@@98)) )))
(assert (= |#MapSpec.Step.StutterStep| (Lit |#MapSpec.Step.StutterStep|)))
(assert (forall ((d@@101 T@U) ) (!  (=> (and (= (type d@@101) DatatypeTypeType) (|$IsA#MapSpec.Step| d@@101)) (or (or (or (MapSpec.Step.QueryStep_q d@@101) (MapSpec.Step.WriteStep_q d@@101)) (MapSpec.Step.SuccStep_q d@@101)) (MapSpec.Step.StutterStep_q d@@101))) :qid |unknown.0:0| :skolemid |2036| :pattern ( (|$IsA#MapSpec.Step| d@@101)) )))
(assert (forall ((d@@102 T@U) ) (!  (=> (and (= (type d@@102) DatatypeTypeType) ($Is d@@102 Tclass.MapSpec.Step)) (or (or (or (MapSpec.Step.QueryStep_q d@@102) (MapSpec.Step.WriteStep_q d@@102)) (MapSpec.Step.SuccStep_q d@@102)) (MapSpec.Step.StutterStep_q d@@102))) :qid |unknown.0:0| :skolemid |2037| :pattern ( (MapSpec.Step.StutterStep_q d@@102) ($Is d@@102 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.SuccStep_q d@@102) ($Is d@@102 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.WriteStep_q d@@102) ($Is d@@102 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.QueryStep_q d@@102) ($Is d@@102 Tclass.MapSpec.Step)) )))
(assert (forall ((a@@162 T@U) (b@@93 T@U) ) (!  (=> (and (and (= (type a@@162) DatatypeTypeType) (= (type b@@93) DatatypeTypeType)) (and (MapSpec.Step.QueryStep_q a@@162) (MapSpec.Step.QueryStep_q b@@93))) (and (=> (|MapSpec.Step#Equal| a@@162 b@@93) (and (|Seq#Equal| (MapSpec.Step.key a@@162) (MapSpec.Step.key b@@93)) (|Seq#Equal| (MapSpec.Step.result a@@162) (MapSpec.Step.result b@@93)))) (=> (and (|Seq#Equal| (MapSpec.Step.key a@@162) (MapSpec.Step.key b@@93)) (|Seq#Equal| (MapSpec.Step.result a@@162) (MapSpec.Step.result b@@93))) (|MapSpec.Step#Equal| a@@162 b@@93)))) :qid |unknown.0:0| :skolemid |2038| :pattern ( (|MapSpec.Step#Equal| a@@162 b@@93) (MapSpec.Step.QueryStep_q a@@162)) :pattern ( (|MapSpec.Step#Equal| a@@162 b@@93) (MapSpec.Step.QueryStep_q b@@93)) )))
(assert (forall ((a@@163 T@U) (b@@94 T@U) ) (!  (=> (and (and (= (type a@@163) DatatypeTypeType) (= (type b@@94) DatatypeTypeType)) (and (MapSpec.Step.WriteStep_q a@@163) (MapSpec.Step.WriteStep_q b@@94))) (and (=> (|MapSpec.Step#Equal| a@@163 b@@94) (and (|Seq#Equal| (MapSpec.Step.key a@@163) (MapSpec.Step.key b@@94)) (|Seq#Equal| (MapSpec.Step.new__value a@@163) (MapSpec.Step.new__value b@@94)))) (=> (and (|Seq#Equal| (MapSpec.Step.key a@@163) (MapSpec.Step.key b@@94)) (|Seq#Equal| (MapSpec.Step.new__value a@@163) (MapSpec.Step.new__value b@@94))) (|MapSpec.Step#Equal| a@@163 b@@94)))) :qid |unknown.0:0| :skolemid |2039| :pattern ( (|MapSpec.Step#Equal| a@@163 b@@94) (MapSpec.Step.WriteStep_q a@@163)) :pattern ( (|MapSpec.Step#Equal| a@@163 b@@94) (MapSpec.Step.WriteStep_q b@@94)) )))
(assert (forall ((a@@164 T@U) (b@@95 T@U) ) (!  (=> (and (and (= (type a@@164) DatatypeTypeType) (= (type b@@95) DatatypeTypeType)) (and (MapSpec.Step.SuccStep_q a@@164) (MapSpec.Step.SuccStep_q b@@95))) (and (=> (|MapSpec.Step#Equal| a@@164 b@@95) (and (and (|UI.RangeStart#Equal| (MapSpec.Step.start a@@164) (MapSpec.Step.start b@@95)) (|Seq#Equal| (MapSpec.Step.results a@@164) (MapSpec.Step.results b@@95))) (|UI.RangeEnd#Equal| (MapSpec.Step.end a@@164) (MapSpec.Step.end b@@95)))) (=> (and (and (|UI.RangeStart#Equal| (MapSpec.Step.start a@@164) (MapSpec.Step.start b@@95)) (|Seq#Equal| (MapSpec.Step.results a@@164) (MapSpec.Step.results b@@95))) (|UI.RangeEnd#Equal| (MapSpec.Step.end a@@164) (MapSpec.Step.end b@@95))) (|MapSpec.Step#Equal| a@@164 b@@95)))) :qid |unknown.0:0| :skolemid |2040| :pattern ( (|MapSpec.Step#Equal| a@@164 b@@95) (MapSpec.Step.SuccStep_q a@@164)) :pattern ( (|MapSpec.Step#Equal| a@@164 b@@95) (MapSpec.Step.SuccStep_q b@@95)) )))
(assert (forall ((a@@165 T@U) (b@@96 T@U) ) (!  (=> (and (and (= (type a@@165) DatatypeTypeType) (= (type b@@96) DatatypeTypeType)) (and (MapSpec.Step.StutterStep_q a@@165) (MapSpec.Step.StutterStep_q b@@96))) (and (=> (|MapSpec.Step#Equal| a@@165 b@@96) true) (=> true (|MapSpec.Step#Equal| a@@165 b@@96)))) :qid |unknown.0:0| :skolemid |2041| :pattern ( (|MapSpec.Step#Equal| a@@165 b@@96) (MapSpec.Step.StutterStep_q a@@165)) :pattern ( (|MapSpec.Step#Equal| a@@165 b@@96) (MapSpec.Step.StutterStep_q b@@96)) )))
(assert (forall ((a@@166 T@U) (b@@97 T@U) ) (!  (=> (and (= (type a@@166) DatatypeTypeType) (= (type b@@97) DatatypeTypeType)) (and (=> (|MapSpec.Step#Equal| a@@166 b@@97) (= a@@166 b@@97)) (=> (= a@@166 b@@97) (|MapSpec.Step#Equal| a@@166 b@@97)))) :qid |unknown.0:0| :skolemid |2042| :pattern ( (|MapSpec.Step#Equal| a@@166 b@@97)) )))
(assert (= (type Tclass.MapSpec.__default) TyType))
(assert (= (Tag Tclass.MapSpec.__default) Tagclass.MapSpec.__default))
(assert (forall ((bx@@152 T@U) ) (!  (=> (and (= (type bx@@152) BoxType) ($IsBox bx@@152 Tclass.MapSpec.__default)) (and (= ($Box ($Unbox refType bx@@152)) bx@@152) ($Is ($Unbox refType bx@@152) Tclass.MapSpec.__default))) :qid |unknown.0:0| :skolemid |2043| :pattern ( ($IsBox bx@@152 Tclass.MapSpec.__default)) )))
(assert (forall (($o@@25 T@U) ) (!  (=> (= (type $o@@25) refType) (and (=> ($Is $o@@25 Tclass.MapSpec.__default) (or (= $o@@25 null) (= (dtype $o@@25) Tclass.MapSpec.__default))) (=> (or (= $o@@25 null) (= (dtype $o@@25) Tclass.MapSpec.__default)) ($Is $o@@25 Tclass.MapSpec.__default)))) :qid |unknown.0:0| :skolemid |2044| :pattern ( ($Is $o@@25 Tclass.MapSpec.__default)) )))
(assert (forall (($o@@26 T@U) ($h@@99 T@U) ) (!  (=> (and (= (type $o@@26) refType) (= (type $h@@99) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@26 Tclass.MapSpec.__default $h@@99) (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@99 $o@@26) alloc)))) (=> (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@99 $o@@26) alloc))) ($IsAlloc $o@@26 Tclass.MapSpec.__default $h@@99)))) :qid |unknown.0:0| :skolemid |2045| :pattern ( ($IsAlloc $o@@26 Tclass.MapSpec.__default $h@@99)) )))
(assert (= (type MapSpec.__default.EmptyValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is MapSpec.__default.EmptyValue Tclass.ValueType.Value))))
(assert  (=> |MapSpec.__default.EmptyValue#requires| true))
(assert  (=> true |MapSpec.__default.EmptyValue#requires|))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= MapSpec.__default.EmptyValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= MapSpec.__default.EmptyValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (forall ((|view#0| T@U) ) (!  (=> (and (= (type |view#0|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| |view#0|) ($Is |view#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) true) :qid |MapSpecs.23:26| :skolemid |2046| :pattern ( (MapSpec.__default.ViewComplete |view#0|)) ))))
(assert (forall ((|view#0@@0| T@U) ) (!  (=> (and (= (type |view#0@@0|) (IMapType BoxType BoxType)) ($Is |view#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))) (and (=> (|MapSpec.__default.ViewComplete#requires| |view#0@@0|) true) (=> true (|MapSpec.__default.ViewComplete#requires| |view#0@@0|)))) :qid |MapSpecs.23:26| :skolemid |2047| :pattern ( (|MapSpec.__default.ViewComplete#requires| |view#0@@0|)) )))
(assert  (=> true (forall ((|view#0@@1| T@U) ) (!  (=> (and (= (type |view#0@@1|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| |view#0@@1|) ($Is |view#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (and (=> (MapSpec.__default.ViewComplete |view#0@@1|) (forall ((|k#0| T@U) ) (!  (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0|)))) :qid |MapSpecs.25:12| :skolemid |2048| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0|))) ))) (=> (forall ((|k#0@@0| T@U) ) (!  (=> (and (= (type |k#0@@0|) (SeqType BoxType)) ($Is |k#0@@0| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0@@0|)))) :qid |MapSpecs.25:12| :skolemid |2048| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0@@0|))) )) (MapSpec.__default.ViewComplete |view#0@@1|)))) :qid |MapSpecs.23:26| :skolemid |2049| :pattern ( (MapSpec.__default.ViewComplete |view#0@@1|)) ))))
(assert  (=> true (forall ((|view#0@@2| T@U) ) (!  (=> (and (= (type |view#0@@2|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| (Lit |view#0@@2|)) ($Is |view#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (and (=> (MapSpec.__default.ViewComplete (Lit |view#0@@2|)) (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) (SeqType BoxType)) ($Is |k#1| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1|)))) :qid |MapSpecs.25:12| :skolemid |2050| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1|))) ))) (=> (forall ((|k#1@@0| T@U) ) (!  (=> (and (= (type |k#1@@0|) (SeqType BoxType)) ($Is |k#1@@0| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1@@0|)))) :qid |MapSpecs.25:12| :skolemid |2050| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1@@0|))) )) (MapSpec.__default.ViewComplete (Lit |view#0@@2|))))) :qid |MapSpecs.23:26| :weight 3 :skolemid |2051| :pattern ( (MapSpec.__default.ViewComplete (Lit |view#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@7| T@U) ) (!  (=> (and (= (type |s#0@@7|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| |s#0@@7|) ($Is |s#0@@7| Tclass.MapSpec.Variables))) true) :qid |MapSpecs.28:16| :skolemid |2052| :pattern ( (MapSpec.__default.WF |s#0@@7|)) ))))
(assert (forall ((|s#0@@8| T@U) ) (!  (=> (and (= (type |s#0@@8|) DatatypeTypeType) ($Is |s#0@@8| Tclass.MapSpec.Variables)) (and (=> (|MapSpec.__default.WF#requires| |s#0@@8|) true) (=> true (|MapSpec.__default.WF#requires| |s#0@@8|)))) :qid |MapSpecs.28:16| :skolemid |2053| :pattern ( (|MapSpec.__default.WF#requires| |s#0@@8|)) )))
(assert  (=> true (forall ((|s#0@@9| T@U) ) (!  (=> (and (= (type |s#0@@9|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| |s#0@@9|) ($Is |s#0@@9| Tclass.MapSpec.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpec.Variables.Variables_q |s#0@@9|) (|MapSpec.__default.ViewComplete#canCall| (MapSpec.Variables.view |s#0@@9|)))) (and (=> (MapSpec.__default.WF |s#0@@9|) (and true (MapSpec.__default.ViewComplete (MapSpec.Variables.view |s#0@@9|)))) (=> (and true (MapSpec.__default.ViewComplete (MapSpec.Variables.view |s#0@@9|))) (MapSpec.__default.WF |s#0@@9|))))) :qid |MapSpecs.28:16| :skolemid |2054| :pattern ( (MapSpec.__default.WF |s#0@@9|)) ))))
(assert  (=> true (forall ((|s#0@@10| T@U) ) (!  (=> (and (= (type |s#0@@10|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| (Lit |s#0@@10|)) ($Is |s#0@@10| Tclass.MapSpec.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpec.Variables.Variables_q (Lit |s#0@@10|)) (|MapSpec.__default.ViewComplete#canCall| (Lit (MapSpec.Variables.view (Lit |s#0@@10|)))))) (and (=> (MapSpec.__default.WF (Lit |s#0@@10|)) (U_2_bool (Lit (bool_2_U  (and true (MapSpec.__default.ViewComplete (Lit (MapSpec.Variables.view (Lit |s#0@@10|))))))))) (=> (U_2_bool (Lit (bool_2_U  (and true (MapSpec.__default.ViewComplete (Lit (MapSpec.Variables.view (Lit |s#0@@10|)))))))) (MapSpec.__default.WF (Lit |s#0@@10|)))))) :qid |MapSpecs.28:16| :weight 3 :skolemid |2055| :pattern ( (MapSpec.__default.WF (Lit |s#0@@10|))) ))))
(assert  (=> true (forall ((|k#0@@1| T@U) ) (!  (=> (and (= (type |k#0@@1|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| |k#0@@1|) ($Is |k#0@@1| Tclass.KeyType.Key))) true) :qid |MapSpecs.35:22| :skolemid |2056| :pattern ( (MapSpec.__default.InDomain |k#0@@1|)) ))))
(assert (forall ((|k#0@@2| T@U) ) (!  (=> (and (= (type |k#0@@2|) (SeqType BoxType)) ($Is |k#0@@2| Tclass.KeyType.Key)) (and (=> (|MapSpec.__default.InDomain#requires| |k#0@@2|) true) (=> true (|MapSpec.__default.InDomain#requires| |k#0@@2|)))) :qid |MapSpecs.35:22| :skolemid |2057| :pattern ( (|MapSpec.__default.InDomain#requires| |k#0@@2|)) )))
(assert  (=> true (forall ((|k#0@@3| T@U) ) (!  (=> (and (= (type |k#0@@3|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| |k#0@@3|) ($Is |k#0@@3| Tclass.KeyType.Key))) (and (=> (MapSpec.__default.InDomain |k#0@@3|) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (MapSpec.__default.InDomain |k#0@@3|)))) :qid |MapSpecs.35:22| :skolemid |2058| :pattern ( (MapSpec.__default.InDomain |k#0@@3|)) ))))
(assert  (=> true (forall ((|k#0@@4| T@U) ) (!  (=> (and (= (type |k#0@@4|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| (Lit |k#0@@4|)) ($Is |k#0@@4| Tclass.KeyType.Key))) (and (=> (MapSpec.__default.InDomain (Lit |k#0@@4|)) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (MapSpec.__default.InDomain (Lit |k#0@@4|))))) :qid |MapSpecs.35:22| :weight 3 :skolemid |2059| :pattern ( (MapSpec.__default.InDomain (Lit |k#0@@4|))) ))))
(assert (= (type MapSpec.__default.EmptyMap) (IMapType BoxType BoxType)))
(assert  (=> true (=> true (and (MapSpec.__default.ViewComplete MapSpec.__default.EmptyMap) ($Is MapSpec.__default.EmptyMap (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))))))
(assert  (=> |MapSpec.__default.EmptyMap#requires| true))
(assert  (=> true |MapSpec.__default.EmptyMap#requires|))
(assert  (and (forall ((arg0@@371 T@U) ) (! (= (type (|lambda#40| arg0@@371)) (MapType0Type BoxType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@371)) )) (forall ((arg0@@372 T@U) ) (! (= (type (|lambda#41| arg0@@372)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@372)) ))))
(assert  (=> true (=> true (and (forall ((|k#0@@5| T@U) ) (!  (=> (and (= (type |k#0@@5|) (SeqType BoxType)) ($Is |k#0@@5| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |k#0@@5|) (=> (MapSpec.__default.InDomain |k#0@@5|) |MapSpec.__default.EmptyValue#canCall|))) :qid |MapSpecs.43:10| :skolemid |2060| :pattern ( (MapSpec.__default.InDomain |k#0@@5|)) )) (= MapSpec.__default.EmptyMap (|IMap#Glue| (|lambda#40| Tclass.KeyType.Key) (|lambda#41| ($Box (Lit MapSpec.__default.EmptyValue))) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))))))
(assert  (=> true (=> true (and (forall ((|k#0@@6| T@U) ) (!  (=> (and (= (type |k#0@@6|) (SeqType BoxType)) ($Is |k#0@@6| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |k#0@@6|) (=> (MapSpec.__default.InDomain |k#0@@6|) |MapSpec.__default.EmptyValue#canCall|))) :qid |MapSpecs.43:10| :skolemid |2061| :pattern ( (MapSpec.__default.InDomain |k#0@@6|)) )) (= MapSpec.__default.EmptyMap (|IMap#Glue| (|lambda#40| Tclass.KeyType.Key) (|lambda#41| ($Box (Lit MapSpec.__default.EmptyValue))) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))))))
(assert  (=> true (forall ((|k#0@@7| T@U) (|s#0@@11| T@U) ) (!  (=> (and (and (and (= (type |k#0@@7|) DatatypeTypeType) (= (type |s#0@@11|) DatatypeTypeType)) (or (|MapSpec.__default.Init#canCall| |k#0@@7| |s#0@@11|) (and ($Is |k#0@@7| Tclass.MapSpec.Constants) ($Is |s#0@@11| Tclass.MapSpec.Variables)))) (MapSpec.__default.Init |k#0@@7| |s#0@@11|)) (MapSpec.__default.WF |s#0@@11|)) :qid |UIStateM.9:18| :skolemid |2062| :pattern ( (MapSpec.__default.Init |k#0@@7| |s#0@@11|)) ))))
(assert (forall ((|k#0@@8| T@U) (|s#0@@12| T@U) ) (!  (=> (and (and (= (type |k#0@@8|) DatatypeTypeType) (= (type |s#0@@12|) DatatypeTypeType)) (and ($Is |k#0@@8| Tclass.MapSpec.Constants) ($Is |s#0@@12| Tclass.MapSpec.Variables))) (and (=> (|MapSpec.__default.Init#requires| |k#0@@8| |s#0@@12|) true) (=> true (|MapSpec.__default.Init#requires| |k#0@@8| |s#0@@12|)))) :qid |UIStateM.9:18| :skolemid |2063| :pattern ( (|MapSpec.__default.Init#requires| |k#0@@8| |s#0@@12|)) )))
(assert  (=> true (forall ((|k#0@@9| T@U) (|s#0@@13| T@U) ) (!  (=> (and (and (= (type |k#0@@9|) DatatypeTypeType) (= (type |s#0@@13|) DatatypeTypeType)) (or (|MapSpec.__default.Init#canCall| |k#0@@9| |s#0@@13|) (and ($Is |k#0@@9| Tclass.MapSpec.Constants) ($Is |s#0@@13| Tclass.MapSpec.Variables)))) (and (and (|$IsA#MapSpec.Variables| |s#0@@13|) |MapSpec.__default.EmptyMap#canCall|) (and (=> (MapSpec.__default.Init |k#0@@9| |s#0@@13|) (|MapSpec.Variables#Equal| |s#0@@13| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap)))) (=> (|MapSpec.Variables#Equal| |s#0@@13| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap))) (MapSpec.__default.Init |k#0@@9| |s#0@@13|))))) :qid |UIStateM.9:18| :skolemid |2064| :pattern ( (MapSpec.__default.Init |k#0@@9| |s#0@@13|)) ))))
(assert  (=> true (forall ((|k#0@@10| T@U) (|s#0@@14| T@U) ) (!  (=> (and (and (= (type |k#0@@10|) DatatypeTypeType) (= (type |s#0@@14|) DatatypeTypeType)) (or (|MapSpec.__default.Init#canCall| (Lit |k#0@@10|) (Lit |s#0@@14|)) (and ($Is |k#0@@10| Tclass.MapSpec.Constants) ($Is |s#0@@14| Tclass.MapSpec.Variables)))) (and (and (|$IsA#MapSpec.Variables| (Lit |s#0@@14|)) |MapSpec.__default.EmptyMap#canCall|) (and (=> (MapSpec.__default.Init (Lit |k#0@@10|) (Lit |s#0@@14|)) (|MapSpec.Variables#Equal| |s#0@@14| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap)))) (=> (|MapSpec.Variables#Equal| |s#0@@14| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap))) (MapSpec.__default.Init (Lit |k#0@@10|) (Lit |s#0@@14|)))))) :qid |UIStateM.9:18| :weight 3 :skolemid |2065| :pattern ( (MapSpec.__default.Init (Lit |k#0@@10|) (Lit |s#0@@14|))) ))))
(assert  (=> true (forall ((|k#0@@11| T@U) (|s#0@@15| T@U) (|s'#0| T@U) (|uiop#0| T@U) (|key#0| T@U) (|result#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@11|) DatatypeTypeType) (= (type |s#0@@15|) DatatypeTypeType)) (= (type |s'#0|) DatatypeTypeType)) (= (type |uiop#0|) DatatypeTypeType)) (= (type |key#0|) (SeqType BoxType))) (= (type |result#0|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| |k#0@@11| |s#0@@15| |s'#0| |uiop#0| |key#0| |result#0|) (and (and (and (and (and ($Is |k#0@@11| Tclass.MapSpec.Constants) ($Is |s#0@@15| Tclass.MapSpec.Variables)) ($Is |s'#0| Tclass.MapSpec.Variables)) ($Is |uiop#0| Tclass.UI.Op)) ($Is |key#0| Tclass.KeyType.Key)) ($Is |result#0| Tclass.ValueType.Value)))) true) :qid |MapSpecs.53:19| :skolemid |2066| :pattern ( (MapSpec.__default.Query |k#0@@11| |s#0@@15| |s'#0| |uiop#0| |key#0| |result#0|)) ))))
(assert (forall ((|k#0@@12| T@U) (|s#0@@16| T@U) (|s'#0@@0| T@U) (|uiop#0@@0| T@U) (|key#0@@0| T@U) (|result#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@12|) DatatypeTypeType) (= (type |s#0@@16|) DatatypeTypeType)) (= (type |s'#0@@0|) DatatypeTypeType)) (= (type |uiop#0@@0|) DatatypeTypeType)) (= (type |key#0@@0|) (SeqType BoxType))) (= (type |result#0@@0|) (SeqType BoxType))) (and (and (and (and (and ($Is |k#0@@12| Tclass.MapSpec.Constants) ($Is |s#0@@16| Tclass.MapSpec.Variables)) ($Is |s'#0@@0| Tclass.MapSpec.Variables)) ($Is |uiop#0@@0| Tclass.UI.Op)) ($Is |key#0@@0| Tclass.KeyType.Key)) ($Is |result#0@@0| Tclass.ValueType.Value))) (and (=> (|MapSpec.__default.Query#requires| |k#0@@12| |s#0@@16| |s'#0@@0| |uiop#0@@0| |key#0@@0| |result#0@@0|) true) (=> true (|MapSpec.__default.Query#requires| |k#0@@12| |s#0@@16| |s'#0@@0| |uiop#0@@0| |key#0@@0| |result#0@@0|)))) :qid |MapSpecs.53:19| :skolemid |2067| :pattern ( (|MapSpec.__default.Query#requires| |k#0@@12| |s#0@@16| |s'#0@@0| |uiop#0@@0| |key#0@@0| |result#0@@0|)) )))
(assert  (=> true (forall ((|k#0@@13| T@U) (|s#0@@17| T@U) (|s'#0@@1| T@U) (|uiop#0@@1| T@U) (|key#0@@1| T@U) (|result#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@13|) DatatypeTypeType) (= (type |s#0@@17|) DatatypeTypeType)) (= (type |s'#0@@1|) DatatypeTypeType)) (= (type |uiop#0@@1|) DatatypeTypeType)) (= (type |key#0@@1|) (SeqType BoxType))) (= (type |result#0@@1|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| |k#0@@13| |s#0@@17| |s'#0@@1| |uiop#0@@1| |key#0@@1| |result#0@@1|) (and (and (and (and (and ($Is |k#0@@13| Tclass.MapSpec.Constants) ($Is |s#0@@17| Tclass.MapSpec.Variables)) ($Is |s'#0@@1| Tclass.MapSpec.Variables)) ($Is |uiop#0@@1| Tclass.UI.Op)) ($Is |key#0@@1| Tclass.KeyType.Key)) ($Is |result#0@@1| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| |uiop#0@@1|) (=> (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@1| |result#0@@1|)) (|MapSpec.__default.WF#canCall| |s#0@@17|))) (=> (and (|MapSpec.__default.WF#canCall| |s#0@@17|) (MapSpec.__default.WF |s#0@@17|)) (MapSpec.Variables.Variables_q |s#0@@17|))) (=> (and (MapSpec.Variables.Variables_q |s#0@@17|) (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@17|)) ($Box |key#0@@1|))))) (and (|$IsA#MapSpec.Variables| |s'#0@@1|) (|$IsA#MapSpec.Variables| |s#0@@17|)))) (and (=> (MapSpec.__default.Query |k#0@@13| |s#0@@17| |s'#0@@1| |uiop#0@@1| |key#0@@1| |result#0@@1|) (and (and (and (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@1| |result#0@@1|)) (MapSpec.__default.WF |s#0@@17|)) (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@17|)) ($Box |key#0@@1|))))) (|MapSpec.Variables#Equal| |s'#0@@1| |s#0@@17|))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@1| |result#0@@1|)) (MapSpec.__default.WF |s#0@@17|)) (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@17|)) ($Box |key#0@@1|))))) (|MapSpec.Variables#Equal| |s'#0@@1| |s#0@@17|)) (MapSpec.__default.Query |k#0@@13| |s#0@@17| |s'#0@@1| |uiop#0@@1| |key#0@@1| |result#0@@1|))))) :qid |MapSpecs.53:19| :skolemid |2068| :pattern ( (MapSpec.__default.Query |k#0@@13| |s#0@@17| |s'#0@@1| |uiop#0@@1| |key#0@@1| |result#0@@1|)) ))))
(assert  (=> true (forall ((|k#0@@14| T@U) (|s#0@@18| T@U) (|s'#0@@2| T@U) (|uiop#0@@2| T@U) (|key#0@@2| T@U) (|result#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@14|) DatatypeTypeType) (= (type |s#0@@18|) DatatypeTypeType)) (= (type |s'#0@@2|) DatatypeTypeType)) (= (type |uiop#0@@2|) DatatypeTypeType)) (= (type |key#0@@2|) (SeqType BoxType))) (= (type |result#0@@2|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| (Lit |k#0@@14|) (Lit |s#0@@18|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|) (Lit |key#0@@2|) |result#0@@2|) (and (and (and (and (and ($Is |k#0@@14| Tclass.MapSpec.Constants) ($Is |s#0@@18| Tclass.MapSpec.Variables)) ($Is |s'#0@@2| Tclass.MapSpec.Variables)) ($Is |uiop#0@@2| Tclass.UI.Op)) ($Is |key#0@@2| Tclass.KeyType.Key)) ($Is |result#0@@2| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@2|)) (=> (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@2|) |result#0@@2|)) (|MapSpec.__default.WF#canCall| (Lit |s#0@@18|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@18|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@18|)))))) (MapSpec.Variables.Variables_q (Lit |s#0@@18|)))) (=> (and (MapSpec.Variables.Variables_q (Lit |s#0@@18|)) (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@18|)))) ($Box (Lit |key#0@@2|)))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@2|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@18|))))) (and (=> (MapSpec.__default.Query (Lit |k#0@@14|) (Lit |s#0@@18|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|) (Lit |key#0@@2|) |result#0@@2|) (and (and (and (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@2|) |result#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@18|))) (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@18|)))) ($Box (Lit |key#0@@2|)))))) (|MapSpec.Variables#Equal| |s'#0@@2| |s#0@@18|))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@2|) |result#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@18|))) (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@18|)))) ($Box (Lit |key#0@@2|)))))) (|MapSpec.Variables#Equal| |s'#0@@2| |s#0@@18|)) (MapSpec.__default.Query (Lit |k#0@@14|) (Lit |s#0@@18|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|) (Lit |key#0@@2|) |result#0@@2|))))) :qid |MapSpecs.53:19| :weight 3 :skolemid |2069| :pattern ( (MapSpec.__default.Query (Lit |k#0@@14|) (Lit |s#0@@18|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|) (Lit |key#0@@2|) |result#0@@2|)) ))))
(assert  (=> true (forall ((|k#0@@15| T@U) (|s#0@@19| T@U) (|s'#0@@3| T@U) (|uiop#0@@3| T@U) (|key#0@@3| T@U) (|result#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@15|) DatatypeTypeType) (= (type |s#0@@19|) DatatypeTypeType)) (= (type |s'#0@@3|) DatatypeTypeType)) (= (type |uiop#0@@3|) DatatypeTypeType)) (= (type |key#0@@3|) (SeqType BoxType))) (= (type |result#0@@3|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| (Lit |k#0@@15|) (Lit |s#0@@19|) (Lit |s'#0@@3|) (Lit |uiop#0@@3|) (Lit |key#0@@3|) (Lit |result#0@@3|)) (and (and (and (and (and ($Is |k#0@@15| Tclass.MapSpec.Constants) ($Is |s#0@@19| Tclass.MapSpec.Variables)) ($Is |s'#0@@3| Tclass.MapSpec.Variables)) ($Is |uiop#0@@3| Tclass.UI.Op)) ($Is |key#0@@3| Tclass.KeyType.Key)) ($Is |result#0@@3| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@3|)) (=> (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@3|) (Lit |result#0@@3|))) (|MapSpec.__default.WF#canCall| (Lit |s#0@@19|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@19|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@19|)))))) (MapSpec.Variables.Variables_q (Lit |s#0@@19|)))) (=> (and (MapSpec.Variables.Variables_q (Lit |s#0@@19|)) (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@19|)))) ($Box (Lit |key#0@@3|)))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@3|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@19|))))) (and (=> (MapSpec.__default.Query (Lit |k#0@@15|) (Lit |s#0@@19|) (Lit |s'#0@@3|) (Lit |uiop#0@@3|) (Lit |key#0@@3|) (Lit |result#0@@3|)) (and (and (and (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@3|) (Lit |result#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@19|))) (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@19|)))) ($Box (Lit |key#0@@3|)))))) (|MapSpec.Variables#Equal| |s'#0@@3| |s#0@@19|))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@3|) (Lit |result#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@19|))) (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@19|)))) ($Box (Lit |key#0@@3|)))))) (|MapSpec.Variables#Equal| |s'#0@@3| |s#0@@19|)) (MapSpec.__default.Query (Lit |k#0@@15|) (Lit |s#0@@19|) (Lit |s'#0@@3|) (Lit |uiop#0@@3|) (Lit |key#0@@3|) (Lit |result#0@@3|)))))) :qid |MapSpecs.53:19| :weight 3 :skolemid |2070| :pattern ( (MapSpec.__default.Query (Lit |k#0@@15|) (Lit |s#0@@19|) (Lit |s'#0@@3|) (Lit |uiop#0@@3|) (Lit |key#0@@3|) (Lit |result#0@@3|))) ))))
(assert  (=> true (forall ((|start#0| T@U) (|key#0@@4| T@U) ) (!  (=> (and (and (= (type |start#0|) DatatypeTypeType) (= (type |key#0@@4|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| |start#0| |key#0@@4|) (and ($Is |start#0| Tclass.UI.RangeStart) ($Is |key#0@@4| Tclass.KeyType.Key)))) true) :qid |MapSpecs.61:24| :skolemid |2071| :pattern ( (MapSpec.__default.LowerBound |start#0| |key#0@@4|)) ))))
(assert (forall ((|start#0@@0| T@U) (|key#0@@5| T@U) ) (!  (=> (and (and (= (type |start#0@@0|) DatatypeTypeType) (= (type |key#0@@5|) (SeqType BoxType))) (and ($Is |start#0@@0| Tclass.UI.RangeStart) ($Is |key#0@@5| Tclass.KeyType.Key))) (and (=> (|MapSpec.__default.LowerBound#requires| |start#0@@0| |key#0@@5|) true) (=> true (|MapSpec.__default.LowerBound#requires| |start#0@@0| |key#0@@5|)))) :qid |MapSpecs.61:24| :skolemid |2072| :pattern ( (|MapSpec.__default.LowerBound#requires| |start#0@@0| |key#0@@5|)) )))
(assert  (=> true (forall ((|start#0@@1| T@U) (|key#0@@6| T@U) ) (!  (=> (and (and (= (type |start#0@@1|) DatatypeTypeType) (= (type |key#0@@6|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| |start#0@@1| |key#0@@6|) (and ($Is |start#0@@1| Tclass.UI.RangeStart) ($Is |key#0@@6| Tclass.KeyType.Key)))) (and (and (=> (UI.RangeStart.SInclusive_q |start#0@@1|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@1|) |key#0@@6|)) (=> (and (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@1|) |key#0@@6|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@1|) |key#0@@6|)) (=> (UI.RangeStart.SExclusive_q |start#0@@1|) (|SeqComparison.__default.lt#canCall| (UI.RangeStart.key |start#0@@1|) |key#0@@6|)))) (and (=> (MapSpec.__default.LowerBound |start#0@@1| |key#0@@6|) (and (=> (UI.RangeStart.SInclusive_q |start#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@1|) |key#0@@6|)) (=> (UI.RangeStart.SExclusive_q |start#0@@1|) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@1|) |key#0@@6|)))) (=> (and (=> (UI.RangeStart.SInclusive_q |start#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@1|) |key#0@@6|)) (=> (UI.RangeStart.SExclusive_q |start#0@@1|) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@1|) |key#0@@6|))) (MapSpec.__default.LowerBound |start#0@@1| |key#0@@6|))))) :qid |MapSpecs.61:24| :skolemid |2073| :pattern ( (MapSpec.__default.LowerBound |start#0@@1| |key#0@@6|)) ))))
(assert  (=> true (forall ((|start#0@@2| T@U) (|key#0@@7| T@U) ) (!  (=> (and (and (= (type |start#0@@2|) DatatypeTypeType) (= (type |key#0@@7|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@2|) (Lit |key#0@@7|)) (and ($Is |start#0@@2| Tclass.UI.RangeStart) ($Is |key#0@@7| Tclass.KeyType.Key)))) (and (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SInclusive_q (Lit |start#0@@2|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))) (=> (and (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SExclusive_q (Lit |start#0@@2|))))) (|SeqComparison.__default.lt#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))))) (and (=> (MapSpec.__default.LowerBound (Lit |start#0@@2|) (Lit |key#0@@7|)) (and (=> (UI.RangeStart.SInclusive_q (Lit |start#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))) (=> (UI.RangeStart.SExclusive_q (Lit |start#0@@2|)) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))))) (=> (and (=> (UI.RangeStart.SInclusive_q (Lit |start#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|))) (=> (UI.RangeStart.SExclusive_q (Lit |start#0@@2|)) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@2|))) (Lit |key#0@@7|)))) (MapSpec.__default.LowerBound (Lit |start#0@@2|) (Lit |key#0@@7|)))))) :qid |MapSpecs.61:24| :weight 3 :skolemid |2074| :pattern ( (MapSpec.__default.LowerBound (Lit |start#0@@2|) (Lit |key#0@@7|))) ))))
(assert  (=> true (forall ((|key#0@@8| T@U) (|end#0| T@U) ) (!  (=> (and (and (= (type |key#0@@8|) (SeqType BoxType)) (= (type |end#0|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| |key#0@@8| |end#0|) (and ($Is |key#0@@8| Tclass.KeyType.Key) ($Is |end#0| Tclass.UI.RangeEnd)))) true) :qid |MapSpecs.67:24| :skolemid |2075| :pattern ( (MapSpec.__default.UpperBound |key#0@@8| |end#0|)) ))))
(assert (forall ((|key#0@@9| T@U) (|end#0@@0| T@U) ) (!  (=> (and (and (= (type |key#0@@9|) (SeqType BoxType)) (= (type |end#0@@0|) DatatypeTypeType)) (and ($Is |key#0@@9| Tclass.KeyType.Key) ($Is |end#0@@0| Tclass.UI.RangeEnd))) (and (=> (|MapSpec.__default.UpperBound#requires| |key#0@@9| |end#0@@0|) true) (=> true (|MapSpec.__default.UpperBound#requires| |key#0@@9| |end#0@@0|)))) :qid |MapSpecs.67:24| :skolemid |2076| :pattern ( (|MapSpec.__default.UpperBound#requires| |key#0@@9| |end#0@@0|)) )))
(assert  (=> true (forall ((|key#0@@10| T@U) (|end#0@@1| T@U) ) (!  (=> (and (and (= (type |key#0@@10|) (SeqType BoxType)) (= (type |end#0@@1|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| |key#0@@10| |end#0@@1|) (and ($Is |key#0@@10| Tclass.KeyType.Key) ($Is |end#0@@1| Tclass.UI.RangeEnd)))) (and (and (=> (UI.RangeEnd.EInclusive_q |end#0@@1|) (|SeqComparison.__default.lte#canCall| |key#0@@10| (UI.RangeEnd.key |end#0@@1|))) (=> (and (|SeqComparison.__default.lte#canCall| |key#0@@10| (UI.RangeEnd.key |end#0@@1|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@10| (UI.RangeEnd.key |end#0@@1|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@1|) (|SeqComparison.__default.lt#canCall| |key#0@@10| (UI.RangeEnd.key |end#0@@1|))))) (and (=> (MapSpec.__default.UpperBound |key#0@@10| |end#0@@1|) (and (=> (UI.RangeEnd.EInclusive_q |end#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@10| (UI.RangeEnd.key |end#0@@1|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@1|) (SeqComparison.__default.lt |key#0@@10| (UI.RangeEnd.key |end#0@@1|))))) (=> (and (=> (UI.RangeEnd.EInclusive_q |end#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@10| (UI.RangeEnd.key |end#0@@1|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@1|) (SeqComparison.__default.lt |key#0@@10| (UI.RangeEnd.key |end#0@@1|)))) (MapSpec.__default.UpperBound |key#0@@10| |end#0@@1|))))) :qid |MapSpecs.67:24| :skolemid |2077| :pattern ( (MapSpec.__default.UpperBound |key#0@@10| |end#0@@1|)) ))))
(assert  (=> true (forall ((|key#0@@11| T@U) (|end#0@@2| T@U) ) (!  (=> (and (and (= (type |key#0@@11|) (SeqType BoxType)) (= (type |end#0@@2|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| (Lit |key#0@@11|) (Lit |end#0@@2|)) (and ($Is |key#0@@11| Tclass.KeyType.Key) ($Is |end#0@@2| Tclass.UI.RangeEnd)))) (and (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@2|))))) (|SeqComparison.__default.lte#canCall| (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (and (|SeqComparison.__default.lte#canCall| (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|)))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EExclusive_q (Lit |end#0@@2|))))) (|SeqComparison.__default.lt#canCall| (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))))) (and (=> (MapSpec.__default.UpperBound (Lit |key#0@@11|) (Lit |end#0@@2|)) (and (=> (UI.RangeEnd.EInclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (UI.RangeEnd.EExclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lt (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))))) (=> (and (=> (UI.RangeEnd.EInclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (UI.RangeEnd.EExclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lt (Lit |key#0@@11|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|)))))) (MapSpec.__default.UpperBound (Lit |key#0@@11|) (Lit |end#0@@2|)))))) :qid |MapSpecs.67:24| :weight 3 :skolemid |2078| :pattern ( (MapSpec.__default.UpperBound (Lit |key#0@@11|) (Lit |end#0@@2|))) ))))
(assert  (=> true (forall ((|start#0@@3| T@U) (|key#0@@12| T@U) (|end#0@@3| T@U) ) (!  (=> (and (and (and (= (type |start#0@@3|) DatatypeTypeType) (= (type |key#0@@12|) (SeqType BoxType))) (= (type |end#0@@3|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| |start#0@@3| |key#0@@12| |end#0@@3|) (and (and ($Is |start#0@@3| Tclass.UI.RangeStart) ($Is |key#0@@12| Tclass.KeyType.Key)) ($Is |end#0@@3| Tclass.UI.RangeEnd)))) true) :qid |MapSpecs.73:21| :skolemid |2079| :pattern ( (MapSpec.__default.InRange |start#0@@3| |key#0@@12| |end#0@@3|)) ))))
(assert (forall ((|start#0@@4| T@U) (|key#0@@13| T@U) (|end#0@@4| T@U) ) (!  (=> (and (and (and (= (type |start#0@@4|) DatatypeTypeType) (= (type |key#0@@13|) (SeqType BoxType))) (= (type |end#0@@4|) DatatypeTypeType)) (and (and ($Is |start#0@@4| Tclass.UI.RangeStart) ($Is |key#0@@13| Tclass.KeyType.Key)) ($Is |end#0@@4| Tclass.UI.RangeEnd))) (and (=> (|MapSpec.__default.InRange#requires| |start#0@@4| |key#0@@13| |end#0@@4|) true) (=> true (|MapSpec.__default.InRange#requires| |start#0@@4| |key#0@@13| |end#0@@4|)))) :qid |MapSpecs.73:21| :skolemid |2080| :pattern ( (|MapSpec.__default.InRange#requires| |start#0@@4| |key#0@@13| |end#0@@4|)) )))
(assert  (=> true (forall ((|start#0@@5| T@U) (|key#0@@14| T@U) (|end#0@@5| T@U) ) (!  (=> (and (and (and (= (type |start#0@@5|) DatatypeTypeType) (= (type |key#0@@14|) (SeqType BoxType))) (= (type |end#0@@5|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| |start#0@@5| |key#0@@14| |end#0@@5|) (and (and ($Is |start#0@@5| Tclass.UI.RangeStart) ($Is |key#0@@14| Tclass.KeyType.Key)) ($Is |end#0@@5| Tclass.UI.RangeEnd)))) (and (and (|MapSpec.__default.LowerBound#canCall| |start#0@@5| |key#0@@14|) (=> (MapSpec.__default.LowerBound |start#0@@5| |key#0@@14|) (|MapSpec.__default.UpperBound#canCall| |key#0@@14| |end#0@@5|))) (and (=> (MapSpec.__default.InRange |start#0@@5| |key#0@@14| |end#0@@5|) (and (MapSpec.__default.LowerBound |start#0@@5| |key#0@@14|) (MapSpec.__default.UpperBound |key#0@@14| |end#0@@5|))) (=> (and (MapSpec.__default.LowerBound |start#0@@5| |key#0@@14|) (MapSpec.__default.UpperBound |key#0@@14| |end#0@@5|)) (MapSpec.__default.InRange |start#0@@5| |key#0@@14| |end#0@@5|))))) :qid |MapSpecs.73:21| :skolemid |2081| :pattern ( (MapSpec.__default.InRange |start#0@@5| |key#0@@14| |end#0@@5|)) ))))
(assert  (=> true (forall ((|start#0@@6| T@U) (|key#0@@15| T@U) (|end#0@@6| T@U) ) (!  (=> (and (and (and (= (type |start#0@@6|) DatatypeTypeType) (= (type |key#0@@15|) (SeqType BoxType))) (= (type |end#0@@6|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| (Lit |start#0@@6|) (Lit |key#0@@15|) (Lit |end#0@@6|)) (and (and ($Is |start#0@@6| Tclass.UI.RangeStart) ($Is |key#0@@15| Tclass.KeyType.Key)) ($Is |end#0@@6| Tclass.UI.RangeEnd)))) (and (and (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@6|) (Lit |key#0@@15|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.LowerBound (Lit |start#0@@6|) (Lit |key#0@@15|))))) (|MapSpec.__default.UpperBound#canCall| (Lit |key#0@@15|) (Lit |end#0@@6|)))) (and (=> (MapSpec.__default.InRange (Lit |start#0@@6|) (Lit |key#0@@15|) (Lit |end#0@@6|)) (U_2_bool (Lit (bool_2_U  (and (MapSpec.__default.LowerBound (Lit |start#0@@6|) (Lit |key#0@@15|)) (MapSpec.__default.UpperBound (Lit |key#0@@15|) (Lit |end#0@@6|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (MapSpec.__default.LowerBound (Lit |start#0@@6|) (Lit |key#0@@15|)) (MapSpec.__default.UpperBound (Lit |key#0@@15|) (Lit |end#0@@6|)))))) (MapSpec.__default.InRange (Lit |start#0@@6|) (Lit |key#0@@15|) (Lit |end#0@@6|)))))) :qid |MapSpecs.73:21| :weight 3 :skolemid |2082| :pattern ( (MapSpec.__default.InRange (Lit |start#0@@6|) (Lit |key#0@@15|) (Lit |end#0@@6|))) ))))
(assert  (=> true (forall ((|start#0@@7| T@U) (|end#0@@7| T@U) ) (!  (=> (and (and (= (type |start#0@@7|) DatatypeTypeType) (= (type |end#0@@7|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@7| |end#0@@7|) (and ($Is |start#0@@7| Tclass.UI.RangeStart) ($Is |end#0@@7| Tclass.UI.RangeEnd)))) true) :qid |MapSpecs.79:27| :skolemid |2083| :pattern ( (MapSpec.__default.NonEmptyRange |start#0@@7| |end#0@@7|)) ))))
(assert (forall ((|start#0@@8| T@U) (|end#0@@8| T@U) ) (!  (=> (and (and (= (type |start#0@@8|) DatatypeTypeType) (= (type |end#0@@8|) DatatypeTypeType)) (and ($Is |start#0@@8| Tclass.UI.RangeStart) ($Is |end#0@@8| Tclass.UI.RangeEnd))) (and (=> (|MapSpec.__default.NonEmptyRange#requires| |start#0@@8| |end#0@@8|) true) (=> true (|MapSpec.__default.NonEmptyRange#requires| |start#0@@8| |end#0@@8|)))) :qid |MapSpecs.79:27| :skolemid |2084| :pattern ( (|MapSpec.__default.NonEmptyRange#requires| |start#0@@8| |end#0@@8|)) )))
(assert  (=> true (forall ((|start#0@@9| T@U) (|end#0@@9| T@U) ) (!  (=> (and (and (= (type |start#0@@9|) DatatypeTypeType) (= (type |end#0@@9|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@9| |end#0@@9|) (and ($Is |start#0@@9| Tclass.UI.RangeStart) ($Is |end#0@@9| Tclass.UI.RangeEnd)))) (and (and (=> (not (UI.RangeEnd.PositiveInf_q |end#0@@9|)) (=> (UI.RangeEnd.EInclusive_q |end#0@@9|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))) (=> (and (=> (UI.RangeEnd.EInclusive_q |end#0@@9|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|))) (not (and (and (UI.RangeStart.SInclusive_q |start#0@@9|) (UI.RangeEnd.EInclusive_q |end#0@@9|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|))))) (|SeqComparison.__default.lt#canCall| (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))) (and (=> (MapSpec.__default.NonEmptyRange |start#0@@9| |end#0@@9|) (or (or (or (UI.RangeStart.NegativeInf_q |start#0@@9|) (UI.RangeEnd.PositiveInf_q |end#0@@9|)) (and (and (UI.RangeStart.SInclusive_q |start#0@@9|) (UI.RangeEnd.EInclusive_q |end#0@@9|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))) (=> (or (or (or (UI.RangeStart.NegativeInf_q |start#0@@9|) (UI.RangeEnd.PositiveInf_q |end#0@@9|)) (and (and (UI.RangeStart.SInclusive_q |start#0@@9|) (UI.RangeEnd.EInclusive_q |end#0@@9|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|)))) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@9|) (UI.RangeEnd.key |end#0@@9|))) (MapSpec.__default.NonEmptyRange |start#0@@9| |end#0@@9|))))) :qid |MapSpecs.79:27| :skolemid |2085| :pattern ( (MapSpec.__default.NonEmptyRange |start#0@@9| |end#0@@9|)) ))))
(assert  (=> true (forall ((|start#0@@10| T@U) (|end#0@@10| T@U) ) (!  (=> (and (and (= (type |start#0@@10|) DatatypeTypeType) (= (type |end#0@@10|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@10|) (Lit |end#0@@10|)) (and ($Is |start#0@@10| Tclass.UI.RangeStart) ($Is |end#0@@10| Tclass.UI.RangeEnd)))) (and (and (=> (not (U_2_bool (Lit (bool_2_U (UI.RangeEnd.PositiveInf_q (Lit |end#0@@10|)))))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (=> (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|))))) (not (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@10|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|))))))) (|SeqComparison.__default.lt#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (and (=> (MapSpec.__default.NonEmptyRange (Lit |start#0@@10|) (Lit |end#0@@10|)) (or (or (or (UI.RangeStart.NegativeInf_q (Lit |start#0@@10|)) (UI.RangeEnd.PositiveInf_q (Lit |end#0@@10|))) (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@10|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (=> (or (or (or (UI.RangeStart.NegativeInf_q (Lit |start#0@@10|)) (UI.RangeEnd.PositiveInf_q (Lit |end#0@@10|))) (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@10|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@10|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|))))) (MapSpec.__default.NonEmptyRange (Lit |start#0@@10|) (Lit |end#0@@10|)))))) :qid |MapSpecs.79:27| :weight 3 :skolemid |2086| :pattern ( (MapSpec.__default.NonEmptyRange (Lit |start#0@@10|) (Lit |end#0@@10|))) ))))
(assert  (=> true (forall ((|k#0@@16| T@U) (|s#0@@20| T@U) (|s'#0@@4| T@U) (|uiop#0@@4| T@U) (|start#0@@11| T@U) (|results#0| T@U) (|end#0@@11| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@16|) DatatypeTypeType) (= (type |s#0@@20|) DatatypeTypeType)) (= (type |s'#0@@4|) DatatypeTypeType)) (= (type |uiop#0@@4|) DatatypeTypeType)) (= (type |start#0@@11|) DatatypeTypeType)) (= (type |results#0|) (SeqType BoxType))) (= (type |end#0@@11|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| |k#0@@16| |s#0@@20| |s'#0@@4| |uiop#0@@4| |start#0@@11| |results#0| |end#0@@11|) (and (and (and (and (and (and ($Is |k#0@@16| Tclass.MapSpec.Constants) ($Is |s#0@@20| Tclass.MapSpec.Variables)) ($Is |s'#0@@4| Tclass.MapSpec.Variables)) ($Is |uiop#0@@4| Tclass.UI.Op)) ($Is |start#0@@11| Tclass.UI.RangeStart)) ($Is |results#0| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@11| Tclass.UI.RangeEnd)))) true) :qid |MapSpecs.87:18| :skolemid |2087| :pattern ( (MapSpec.__default.Succ |k#0@@16| |s#0@@20| |s'#0@@4| |uiop#0@@4| |start#0@@11| |results#0| |end#0@@11|)) ))))
(assert (forall ((|k#0@@17| T@U) (|s#0@@21| T@U) (|s'#0@@5| T@U) (|uiop#0@@5| T@U) (|start#0@@12| T@U) (|results#0@@0| T@U) (|end#0@@12| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@17|) DatatypeTypeType) (= (type |s#0@@21|) DatatypeTypeType)) (= (type |s'#0@@5|) DatatypeTypeType)) (= (type |uiop#0@@5|) DatatypeTypeType)) (= (type |start#0@@12|) DatatypeTypeType)) (= (type |results#0@@0|) (SeqType BoxType))) (= (type |end#0@@12|) DatatypeTypeType)) (and (and (and (and (and (and ($Is |k#0@@17| Tclass.MapSpec.Constants) ($Is |s#0@@21| Tclass.MapSpec.Variables)) ($Is |s'#0@@5| Tclass.MapSpec.Variables)) ($Is |uiop#0@@5| Tclass.UI.Op)) ($Is |start#0@@12| Tclass.UI.RangeStart)) ($Is |results#0@@0| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@12| Tclass.UI.RangeEnd))) (and (=> (|MapSpec.__default.Succ#requires| |k#0@@17| |s#0@@21| |s'#0@@5| |uiop#0@@5| |start#0@@12| |results#0@@0| |end#0@@12|) true) (=> true (|MapSpec.__default.Succ#requires| |k#0@@17| |s#0@@21| |s'#0@@5| |uiop#0@@5| |start#0@@12| |results#0@@0| |end#0@@12|)))) :qid |MapSpecs.87:18| :skolemid |2088| :pattern ( (|MapSpec.__default.Succ#requires| |k#0@@17| |s#0@@21| |s'#0@@5| |uiop#0@@5| |start#0@@12| |results#0@@0| |end#0@@12|)) )))
(assert  (=> true (forall ((|k#0@@18| T@U) (|s#0@@22| T@U) (|s'#0@@6| T@U) (|uiop#0@@6| T@U) (|start#0@@13| T@U) (|results#0@@1| T@U) (|end#0@@13| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@18|) DatatypeTypeType) (= (type |s#0@@22|) DatatypeTypeType)) (= (type |s'#0@@6|) DatatypeTypeType)) (= (type |uiop#0@@6|) DatatypeTypeType)) (= (type |start#0@@13|) DatatypeTypeType)) (= (type |results#0@@1|) (SeqType BoxType))) (= (type |end#0@@13|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| |k#0@@18| |s#0@@22| |s'#0@@6| |uiop#0@@6| |start#0@@13| |results#0@@1| |end#0@@13|) (and (and (and (and (and (and ($Is |k#0@@18| Tclass.MapSpec.Constants) ($Is |s#0@@22| Tclass.MapSpec.Variables)) ($Is |s'#0@@6| Tclass.MapSpec.Variables)) ($Is |uiop#0@@6| Tclass.UI.Op)) ($Is |start#0@@13| Tclass.UI.RangeStart)) ($Is |results#0@@1| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@13| Tclass.UI.RangeEnd)))) (and (and (and (and (and (and (and (and (and (|$IsA#UI.Op| |uiop#0@@6|) (=> (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@13| |results#0@@1| |end#0@@13|)) (|MapSpec.__default.WF#canCall| |s#0@@22|))) (=> (and (|MapSpec.__default.WF#canCall| |s#0@@22|) (MapSpec.__default.WF |s#0@@22|)) (and (|$IsA#MapSpec.Variables| |s'#0@@6|) (|$IsA#MapSpec.Variables| |s#0@@22|)))) (=> (and (and (|$IsA#MapSpec.Variables| |s'#0@@6|) (|$IsA#MapSpec.Variables| |s#0@@22|)) (|MapSpec.Variables#Equal| |s'#0@@6| |s#0@@22|)) (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@13| |end#0@@13|))) (=> (and (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@13| |end#0@@13|) (MapSpec.__default.NonEmptyRange |start#0@@13| |end#0@@13|)) (forall ((|i#0@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@26|) (< |i#0@@26| (|Seq#Length| |results#0@@1|))) (and (and (MapSpec.Variables.Variables_q |s#0@@22|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@26|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@26|))))) :qid |MapSpecs.94:16| :skolemid |2089| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@26|))) )))) (=> (and (forall ((|i#0@@27| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| (|Seq#Length| |results#0@@1|))) (and (and (MapSpec.Variables.Variables_q |s#0@@22|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@27|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@27|))))) :qid |MapSpecs.94:16| :skolemid |2091| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@27|))) )) (forall ((|i#0@@28| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| (|Seq#Length| |results#0@@1|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@22|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@28|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@28|))))) :qid |MapSpecs.94:16| :skolemid |2092| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@28|))) ))) (forall ((|i#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@2|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecs.95:16| :skolemid |2090| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@2|))) )))) (=> (and (forall ((|i#1@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@3|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecs.95:16| :skolemid |2094| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@3|))) )) (forall ((|i#1@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| |results#0@@1|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@4|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |2095| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@4|))) ))) (forall ((|i#2| Int) ) (!  (=> (and (<= (LitInt 0) |i#2|) (< |i#2| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2|))) (|MapSpec.__default.InRange#canCall| |start#0@@13| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2|))) |end#0@@13|))) :qid |MapSpecs.96:16| :skolemid |2093| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2|))) )))) (=> (and (forall ((|i#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@0|))) (|MapSpec.__default.InRange#canCall| |start#0@@13| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@0|))) |end#0@@13|))) :qid |MapSpecs.96:16| :skolemid |2097| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@0|))) )) (forall ((|i#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |results#0@@1|))) (MapSpec.__default.InRange |start#0@@13| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@1|))) |end#0@@13|)) :qid |MapSpecs.96:16| :skolemid |2098| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@1|))) ))) (forall ((|i#3| Int) (|j#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3|) (< |i#3| |j#0|)) (< |j#0| (|Seq#Length| |results#0@@1|))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0|)))))) :qid |MapSpecs.97:16| :skolemid |2096| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3|))) )))) (=> (and (forall ((|i#3@@0| Int) (|j#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| |j#0@@0|)) (< |j#0@@0| (|Seq#Length| |results#0@@1|))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@0|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@0|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@0|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@0|)))))) :qid |MapSpecs.97:16| :skolemid |2101| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@0|))) )) (forall ((|i#3@@1| Int) (|j#0@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| |j#0@@1|)) (< |j#0@@1| (|Seq#Length| |results#0@@1|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@1|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@1|))))) :qid |MapSpecs.97:16| :skolemid |2102| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@1|))) ))) (forall ((|key#0@@16| T@U) ) (!  (=> (and (= (type |key#0@@16|) (SeqType BoxType)) ($Is |key#0@@16| Tclass.KeyType.Key)) (and (and (|MapSpec.__default.InRange#canCall| |start#0@@13| |key#0@@16| |end#0@@13|) (=> (MapSpec.__default.InRange |start#0@@13| |key#0@@16| |end#0@@13|) (and (MapSpec.Variables.Variables_q |s#0@@22|) |MapSpec.__default.EmptyValue#canCall|))) (=> (and (MapSpec.__default.InRange |start#0@@13| |key#0@@16| |end#0@@13|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@22|)) ($Box |key#0@@16|))) MapSpec.__default.EmptyValue))) (forall ((|i#4| Int) ) (!  (=> (< |i#4| (|Seq#Length| |results#0@@1|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4|)))) :qid |MapSpecs.99:16| :skolemid |2099| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4|))) ))))) :qid |MapSpecs.98:16| :skolemid |2100| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@22|)) ($Box |key#0@@16|)))) :pattern ( (MapSpec.__default.InRange |start#0@@13| |key#0@@16| |end#0@@13|)) )))) (and (=> (MapSpec.__default.Succ |k#0@@18| |s#0@@22| |s'#0@@6| |uiop#0@@6| |start#0@@13| |results#0@@1| |end#0@@13|) (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@13| |results#0@@1| |end#0@@13|)) (MapSpec.__default.WF |s#0@@22|)) (|MapSpec.Variables#Equal| |s'#0@@6| |s#0@@22|)) (MapSpec.__default.NonEmptyRange |start#0@@13| |end#0@@13|)) (forall ((|i#0@@29| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| (|Seq#Length| |results#0@@1|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@22|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@29|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@29|))))) :qid |MapSpecs.94:16| :skolemid |2103| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@29|))) ))) (forall ((|i#1@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| |results#0@@1|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@5|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |2104| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@5|))) ))) (forall ((|i#2@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |results#0@@1|))) (MapSpec.__default.InRange |start#0@@13| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@2|))) |end#0@@13|)) :qid |MapSpecs.96:16| :skolemid |2105| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@2|))) ))) (forall ((|i#3@@2| Int) (|j#0@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| |j#0@@2|)) (< |j#0@@2| (|Seq#Length| |results#0@@1|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@2|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@2|))))) :qid |MapSpecs.97:16| :skolemid |2106| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@2|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@2|))) ))) (forall ((|key#0@@17| T@U) ) (!  (=> (= (type |key#0@@17|) (SeqType BoxType)) (=> (and ($Is |key#0@@17| Tclass.KeyType.Key) (and (MapSpec.__default.InRange |start#0@@13| |key#0@@17| |end#0@@13|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@22|)) ($Box |key#0@@17|))) MapSpec.__default.EmptyValue)))) (exists ((|i#4@@0| Int) ) (!  (and (and (<= (LitInt 0) |i#4@@0|) (< |i#4@@0| (|Seq#Length| |results#0@@1|))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@0|))) |key#0@@17|)) :qid |MapSpecs.99:16| :skolemid |2107| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@0|))) )))) :qid |MapSpecs.98:16| :skolemid |2108| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@22|)) ($Box |key#0@@17|)))) :pattern ( (MapSpec.__default.InRange |start#0@@13| |key#0@@17| |end#0@@13|)) )))) (=> (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@13| |results#0@@1| |end#0@@13|)) (MapSpec.__default.WF |s#0@@22|)) (|MapSpec.Variables#Equal| |s'#0@@6| |s#0@@22|)) (MapSpec.__default.NonEmptyRange |start#0@@13| |end#0@@13|)) (forall ((|i#0@@30| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@30|) (< |i#0@@30| (|Seq#Length| |results#0@@1|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@22|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@30|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@30|))))) :qid |MapSpecs.94:16| :skolemid |2103| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@30|))) ))) (forall ((|i#1@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| (|Seq#Length| |results#0@@1|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@6|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |2104| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@6|))) ))) (forall ((|i#2@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |results#0@@1|))) (MapSpec.__default.InRange |start#0@@13| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@3|))) |end#0@@13|)) :qid |MapSpecs.96:16| :skolemid |2105| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@3|))) ))) (forall ((|i#3@@3| Int) (|j#0@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| |j#0@@3|)) (< |j#0@@3| (|Seq#Length| |results#0@@1|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@3|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@3|))))) :qid |MapSpecs.97:16| :skolemid |2106| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@3|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@3|))) ))) (forall ((|key#0@@18| T@U) ) (!  (=> (= (type |key#0@@18|) (SeqType BoxType)) (=> (and ($Is |key#0@@18| Tclass.KeyType.Key) (and (MapSpec.__default.InRange |start#0@@13| |key#0@@18| |end#0@@13|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@22|)) ($Box |key#0@@18|))) MapSpec.__default.EmptyValue)))) (exists ((|i#4@@1| Int) ) (!  (and (and (<= (LitInt 0) |i#4@@1|) (< |i#4@@1| (|Seq#Length| |results#0@@1|))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@1|))) |key#0@@18|)) :qid |MapSpecs.99:16| :skolemid |2107| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@1|))) )))) :qid |MapSpecs.98:16| :skolemid |2108| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@22|)) ($Box |key#0@@18|)))) :pattern ( (MapSpec.__default.InRange |start#0@@13| |key#0@@18| |end#0@@13|)) ))) (MapSpec.__default.Succ |k#0@@18| |s#0@@22| |s'#0@@6| |uiop#0@@6| |start#0@@13| |results#0@@1| |end#0@@13|))))) :qid |MapSpecs.87:18| :skolemid |2109| :pattern ( (MapSpec.__default.Succ |k#0@@18| |s#0@@22| |s'#0@@6| |uiop#0@@6| |start#0@@13| |results#0@@1| |end#0@@13|)) ))))
(assert  (=> true (forall ((|k#0@@19| T@U) (|s#0@@23| T@U) (|s'#0@@7| T@U) (|uiop#0@@7| T@U) (|start#0@@14| T@U) (|results#0@@2| T@U) (|end#0@@14| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@19|) DatatypeTypeType) (= (type |s#0@@23|) DatatypeTypeType)) (= (type |s'#0@@7|) DatatypeTypeType)) (= (type |uiop#0@@7|) DatatypeTypeType)) (= (type |start#0@@14|) DatatypeTypeType)) (= (type |results#0@@2|) (SeqType BoxType))) (= (type |end#0@@14|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| (Lit |k#0@@19|) (Lit |s#0@@23|) (Lit |s'#0@@7|) (Lit |uiop#0@@7|) (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|)) (and (and (and (and (and (and ($Is |k#0@@19| Tclass.MapSpec.Constants) ($Is |s#0@@23| Tclass.MapSpec.Variables)) ($Is |s'#0@@7| Tclass.MapSpec.Variables)) ($Is |uiop#0@@7| Tclass.UI.Op)) ($Is |start#0@@14| Tclass.UI.RangeStart)) ($Is |results#0@@2| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@14| Tclass.UI.RangeEnd)))) (and (and (and (and (and (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@7|)) (=> (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|))) (|MapSpec.__default.WF#canCall| (Lit |s#0@@23|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@23|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@23|)))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@7|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@23|))))) (=> (and (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@7|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@23|))) (|MapSpec.Variables#Equal| |s'#0@@7| |s#0@@23|)) (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@14|) (Lit |end#0@@14|)))) (=> (and (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@14|) (Lit |end#0@@14|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.NonEmptyRange (Lit |start#0@@14|) (Lit |end#0@@14|)))))) (forall ((|i#5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5|) (< |i#5| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (MapSpec.Variables.Variables_q (Lit |s#0@@23|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5|))))) :qid |MapSpecs.94:16| :skolemid |2110| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5|))) )))) (=> (and (forall ((|i#5@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@0|) (< |i#5@@0| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (MapSpec.Variables.Variables_q (Lit |s#0@@23|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@0|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@0|))))) :qid |MapSpecs.94:16| :skolemid |2112| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@0|))) )) (forall ((|i#5@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@1|) (< |i#5@@1| (|Seq#Length| (Lit |results#0@@2|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@23|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@1|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@1|))))) :qid |MapSpecs.94:16| :skolemid |2113| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@1|))) ))) (forall ((|i#6| Int) ) (!  (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecs.95:16| :skolemid |2111| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6|))) )))) (=> (and (forall ((|i#6@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@0|) (< |i#6@@0| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@0|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecs.95:16| :skolemid |2115| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@0|))) )) (forall ((|i#6@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@1|) (< |i#6@@1| (|Seq#Length| (Lit |results#0@@2|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@1|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |2116| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@1|))) ))) (forall ((|i#7| Int) ) (!  (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7|))) (|MapSpec.__default.InRange#canCall| (Lit |start#0@@14|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7|))) (Lit |end#0@@14|)))) :qid |MapSpecs.96:16| :skolemid |2114| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7|))) )))) (=> (and (forall ((|i#7@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@0|) (< |i#7@@0| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@0|))) (|MapSpec.__default.InRange#canCall| (Lit |start#0@@14|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@0|))) (Lit |end#0@@14|)))) :qid |MapSpecs.96:16| :skolemid |2118| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@0|))) )) (forall ((|i#7@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@1|) (< |i#7@@1| (|Seq#Length| (Lit |results#0@@2|)))) (MapSpec.__default.InRange (Lit |start#0@@14|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@1|))) (Lit |end#0@@14|))) :qid |MapSpecs.96:16| :skolemid |2119| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@1|))) ))) (forall ((|i#8| Int) (|j#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8|) (< |i#8| |j#1|)) (< |j#1| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1|)))))) :qid |MapSpecs.97:16| :skolemid |2117| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8|))) )))) (=> (and (forall ((|i#8@@0| Int) (|j#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@0|) (< |i#8@@0| |j#1@@0|)) (< |j#1@@0| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@0|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@0|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@0|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@0|)))))) :qid |MapSpecs.97:16| :skolemid |2122| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@0|))) )) (forall ((|i#8@@1| Int) (|j#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@1|) (< |i#8@@1| |j#1@@1|)) (< |j#1@@1| (|Seq#Length| (Lit |results#0@@2|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@1|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@1|))))) :qid |MapSpecs.97:16| :skolemid |2123| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@1|))) ))) (forall ((|key#1| T@U) ) (!  (=> (and (= (type |key#1|) (SeqType BoxType)) ($Is |key#1| Tclass.KeyType.Key)) (and (and (|MapSpec.__default.InRange#canCall| (Lit |start#0@@14|) |key#1| (Lit |end#0@@14|)) (=> (MapSpec.__default.InRange (Lit |start#0@@14|) |key#1| (Lit |end#0@@14|)) (and (MapSpec.Variables.Variables_q (Lit |s#0@@23|)) |MapSpec.__default.EmptyValue#canCall|))) (=> (and (MapSpec.__default.InRange (Lit |start#0@@14|) |key#1| (Lit |end#0@@14|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@23|)))) ($Box |key#1|))) MapSpec.__default.EmptyValue))) (forall ((|i#9| Int) ) (!  (=> (< |i#9| (|Seq#Length| (Lit |results#0@@2|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#9|)))) :qid |MapSpecs.99:16| :skolemid |2120| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#9|))) ))))) :qid |MapSpecs.98:16| :skolemid |2121| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@23|)) ($Box |key#1|)))) :pattern ( (MapSpec.__default.InRange |start#0@@14| |key#1| |end#0@@14|)) )))) (and (=> (MapSpec.__default.Succ (Lit |k#0@@19|) (Lit |s#0@@23|) (Lit |s'#0@@7|) (Lit |uiop#0@@7|) (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|)) (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|))) (MapSpec.__default.WF (Lit |s#0@@23|))) (|MapSpec.Variables#Equal| |s'#0@@7| |s#0@@23|)) (MapSpec.__default.NonEmptyRange (Lit |start#0@@14|) (Lit |end#0@@14|))) (forall ((|i#5@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@2|) (< |i#5@@2| (|Seq#Length| (Lit |results#0@@2|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@23|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@2|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@2|))))) :qid |MapSpecs.94:16| :skolemid |2124| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@2|))) ))) (forall ((|i#6@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@2|) (< |i#6@@2| (|Seq#Length| (Lit |results#0@@2|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@2|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |2125| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@2|))) ))) (forall ((|i#7@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@2|) (< |i#7@@2| (|Seq#Length| (Lit |results#0@@2|)))) (MapSpec.__default.InRange (Lit |start#0@@14|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@2|))) (Lit |end#0@@14|))) :qid |MapSpecs.96:16| :skolemid |2126| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@2|))) ))) (forall ((|i#8@@2| Int) (|j#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@2|) (< |i#8@@2| |j#1@@2|)) (< |j#1@@2| (|Seq#Length| (Lit |results#0@@2|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@2|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@2|))))) :qid |MapSpecs.97:16| :skolemid |2127| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@2|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@2|))) ))) (forall ((|key#1@@0| T@U) ) (!  (=> (= (type |key#1@@0|) (SeqType BoxType)) (=> (and ($Is |key#1@@0| Tclass.KeyType.Key) (and (MapSpec.__default.InRange (Lit |start#0@@14|) |key#1@@0| (Lit |end#0@@14|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@23|)))) ($Box |key#1@@0|))) MapSpec.__default.EmptyValue)))) (exists ((|i#9@@0| Int) ) (!  (and (and (<= (LitInt 0) |i#9@@0|) (< |i#9@@0| (|Seq#Length| (Lit |results#0@@2|)))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#9@@0|))) |key#1@@0|)) :qid |MapSpecs.99:16| :skolemid |2128| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#9@@0|))) )))) :qid |MapSpecs.98:16| :skolemid |2129| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@23|)) ($Box |key#1@@0|)))) :pattern ( (MapSpec.__default.InRange |start#0@@14| |key#1@@0| |end#0@@14|)) )))) (=> (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|))) (MapSpec.__default.WF (Lit |s#0@@23|))) (|MapSpec.Variables#Equal| |s'#0@@7| |s#0@@23|)) (MapSpec.__default.NonEmptyRange (Lit |start#0@@14|) (Lit |end#0@@14|))) (forall ((|i#5@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@3|) (< |i#5@@3| (|Seq#Length| (Lit |results#0@@2|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@23|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@3|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@3|))))) :qid |MapSpecs.94:16| :skolemid |2124| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@3|))) ))) (forall ((|i#6@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@3|) (< |i#6@@3| (|Seq#Length| (Lit |results#0@@2|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@3|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |2125| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@3|))) ))) (forall ((|i#7@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@3|) (< |i#7@@3| (|Seq#Length| (Lit |results#0@@2|)))) (MapSpec.__default.InRange (Lit |start#0@@14|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@3|))) (Lit |end#0@@14|))) :qid |MapSpecs.96:16| :skolemid |2126| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@3|))) ))) (forall ((|i#8@@3| Int) (|j#1@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@3|) (< |i#8@@3| |j#1@@3|)) (< |j#1@@3| (|Seq#Length| (Lit |results#0@@2|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@3|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@3|))))) :qid |MapSpecs.97:16| :skolemid |2127| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@3|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@3|))) ))) (forall ((|key#1@@1| T@U) ) (!  (=> (= (type |key#1@@1|) (SeqType BoxType)) (=> (and ($Is |key#1@@1| Tclass.KeyType.Key) (and (MapSpec.__default.InRange (Lit |start#0@@14|) |key#1@@1| (Lit |end#0@@14|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@23|)))) ($Box |key#1@@1|))) MapSpec.__default.EmptyValue)))) (exists ((|i#9@@1| Int) ) (!  (and (and (<= (LitInt 0) |i#9@@1|) (< |i#9@@1| (|Seq#Length| (Lit |results#0@@2|)))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#9@@1|))) |key#1@@1|)) :qid |MapSpecs.99:16| :skolemid |2128| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#9@@1|))) )))) :qid |MapSpecs.98:16| :skolemid |2129| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@23|)) ($Box |key#1@@1|)))) :pattern ( (MapSpec.__default.InRange |start#0@@14| |key#1@@1| |end#0@@14|)) ))) (MapSpec.__default.Succ (Lit |k#0@@19|) (Lit |s#0@@23|) (Lit |s'#0@@7|) (Lit |uiop#0@@7|) (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|)))))) :qid |MapSpecs.87:18| :weight 3 :skolemid |2130| :pattern ( (MapSpec.__default.Succ (Lit |k#0@@19|) (Lit |s#0@@23|) (Lit |s'#0@@7|) (Lit |uiop#0@@7|) (Lit |start#0@@14|) (Lit |results#0@@2|) (Lit |end#0@@14|))) ))))
(assert  (=> true (forall ((|k#0@@20| T@U) (|s#0@@24| T@U) (|s'#0@@8| T@U) (|uiop#0@@8| T@U) (|key#0@@19| T@U) (|new_value#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@20|) DatatypeTypeType) (= (type |s#0@@24|) DatatypeTypeType)) (= (type |s'#0@@8|) DatatypeTypeType)) (= (type |uiop#0@@8|) DatatypeTypeType)) (= (type |key#0@@19|) (SeqType BoxType))) (= (type |new_value#0|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| |k#0@@20| |s#0@@24| |s'#0@@8| |uiop#0@@8| |key#0@@19| |new_value#0|) (and (and (and (and (and ($Is |k#0@@20| Tclass.MapSpec.Constants) ($Is |s#0@@24| Tclass.MapSpec.Variables)) ($Is |s'#0@@8| Tclass.MapSpec.Variables)) ($Is |uiop#0@@8| Tclass.UI.Op)) ($Is |key#0@@19| Tclass.KeyType.Key)) ($Is |new_value#0| Tclass.ValueType.Value)))) (MapSpec.__default.Write |k#0@@20| |s#0@@24| |s'#0@@8| |uiop#0@@8| |key#0@@19| |new_value#0|)) (MapSpec.__default.WF |s'#0@@8|)) :qid |MapSpecs.102:19| :skolemid |2131| :pattern ( (MapSpec.__default.Write |k#0@@20| |s#0@@24| |s'#0@@8| |uiop#0@@8| |key#0@@19| |new_value#0|)) ))))
(assert (forall ((|k#0@@21| T@U) (|s#0@@25| T@U) (|s'#0@@9| T@U) (|uiop#0@@9| T@U) (|key#0@@20| T@U) (|new_value#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@21|) DatatypeTypeType) (= (type |s#0@@25|) DatatypeTypeType)) (= (type |s'#0@@9|) DatatypeTypeType)) (= (type |uiop#0@@9|) DatatypeTypeType)) (= (type |key#0@@20|) (SeqType BoxType))) (= (type |new_value#0@@0|) (SeqType BoxType))) (and (and (and (and (and ($Is |k#0@@21| Tclass.MapSpec.Constants) ($Is |s#0@@25| Tclass.MapSpec.Variables)) ($Is |s'#0@@9| Tclass.MapSpec.Variables)) ($Is |uiop#0@@9| Tclass.UI.Op)) ($Is |key#0@@20| Tclass.KeyType.Key)) ($Is |new_value#0@@0| Tclass.ValueType.Value))) (and (=> (|MapSpec.__default.Write#requires| |k#0@@21| |s#0@@25| |s'#0@@9| |uiop#0@@9| |key#0@@20| |new_value#0@@0|) true) (=> true (|MapSpec.__default.Write#requires| |k#0@@21| |s#0@@25| |s'#0@@9| |uiop#0@@9| |key#0@@20| |new_value#0@@0|)))) :qid |MapSpecs.102:19| :skolemid |2132| :pattern ( (|MapSpec.__default.Write#requires| |k#0@@21| |s#0@@25| |s'#0@@9| |uiop#0@@9| |key#0@@20| |new_value#0@@0|)) )))
(assert  (=> true (forall ((|k#0@@22| T@U) (|s#0@@26| T@U) (|s'#0@@10| T@U) (|uiop#0@@10| T@U) (|key#0@@21| T@U) (|new_value#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@22|) DatatypeTypeType) (= (type |s#0@@26|) DatatypeTypeType)) (= (type |s'#0@@10|) DatatypeTypeType)) (= (type |uiop#0@@10|) DatatypeTypeType)) (= (type |key#0@@21|) (SeqType BoxType))) (= (type |new_value#0@@1|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| |k#0@@22| |s#0@@26| |s'#0@@10| |uiop#0@@10| |key#0@@21| |new_value#0@@1|) (and (and (and (and (and ($Is |k#0@@22| Tclass.MapSpec.Constants) ($Is |s#0@@26| Tclass.MapSpec.Variables)) ($Is |s'#0@@10| Tclass.MapSpec.Variables)) ($Is |uiop#0@@10| Tclass.UI.Op)) ($Is |key#0@@21| Tclass.KeyType.Key)) ($Is |new_value#0@@1| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| |uiop#0@@10|) (=> (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@21| |new_value#0@@1|)) (|MapSpec.__default.WF#canCall| |s#0@@26|))) (=> (and (|MapSpec.__default.WF#canCall| |s#0@@26|) (MapSpec.__default.WF |s#0@@26|)) (|MapSpec.__default.WF#canCall| |s'#0@@10|))) (=> (and (|MapSpec.__default.WF#canCall| |s'#0@@10|) (MapSpec.__default.WF |s'#0@@10|)) (and (MapSpec.Variables.Variables_q |s'#0@@10|) (MapSpec.Variables.Variables_q |s#0@@26|)))) (and (=> (MapSpec.__default.Write |k#0@@22| |s#0@@26| |s'#0@@10| |uiop#0@@10| |key#0@@21| |new_value#0@@1|) (and (and (and (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@21| |new_value#0@@1|)) (MapSpec.__default.WF |s#0@@26|)) (MapSpec.__default.WF |s'#0@@10|)) (|IMap#Equal| (MapSpec.Variables.view |s'#0@@10|) (|IMap#Build| (MapSpec.Variables.view |s#0@@26|) ($Box |key#0@@21|) ($Box |new_value#0@@1|))))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@21| |new_value#0@@1|)) (MapSpec.__default.WF |s#0@@26|)) (MapSpec.__default.WF |s'#0@@10|)) (|IMap#Equal| (MapSpec.Variables.view |s'#0@@10|) (|IMap#Build| (MapSpec.Variables.view |s#0@@26|) ($Box |key#0@@21|) ($Box |new_value#0@@1|)))) (MapSpec.__default.Write |k#0@@22| |s#0@@26| |s'#0@@10| |uiop#0@@10| |key#0@@21| |new_value#0@@1|))))) :qid |MapSpecs.102:19| :skolemid |2133| :pattern ( (MapSpec.__default.Write |k#0@@22| |s#0@@26| |s'#0@@10| |uiop#0@@10| |key#0@@21| |new_value#0@@1|)) ))))
(assert  (=> true (forall ((|k#0@@23| T@U) (|s#0@@27| T@U) (|s'#0@@11| T@U) (|uiop#0@@11| T@U) (|key#0@@22| T@U) (|new_value#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@23|) DatatypeTypeType) (= (type |s#0@@27|) DatatypeTypeType)) (= (type |s'#0@@11|) DatatypeTypeType)) (= (type |uiop#0@@11|) DatatypeTypeType)) (= (type |key#0@@22|) (SeqType BoxType))) (= (type |new_value#0@@2|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| (Lit |k#0@@23|) (Lit |s#0@@27|) (Lit |s'#0@@11|) (Lit |uiop#0@@11|) (Lit |key#0@@22|) |new_value#0@@2|) (and (and (and (and (and ($Is |k#0@@23| Tclass.MapSpec.Constants) ($Is |s#0@@27| Tclass.MapSpec.Variables)) ($Is |s'#0@@11| Tclass.MapSpec.Variables)) ($Is |uiop#0@@11| Tclass.UI.Op)) ($Is |key#0@@22| Tclass.KeyType.Key)) ($Is |new_value#0@@2| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@11|)) (=> (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@22|) |new_value#0@@2|)) (|MapSpec.__default.WF#canCall| (Lit |s#0@@27|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@27|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@27|)))))) (|MapSpec.__default.WF#canCall| (Lit |s'#0@@11|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s'#0@@11|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s'#0@@11|)))))) (and (MapSpec.Variables.Variables_q (Lit |s'#0@@11|)) (MapSpec.Variables.Variables_q (Lit |s#0@@27|))))) (and (=> (MapSpec.__default.Write (Lit |k#0@@23|) (Lit |s#0@@27|) (Lit |s'#0@@11|) (Lit |uiop#0@@11|) (Lit |key#0@@22|) |new_value#0@@2|) (and (and (and (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@22|) |new_value#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@27|))) (MapSpec.__default.WF (Lit |s'#0@@11|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@11|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@27|))) ($Box (Lit |key#0@@22|)) ($Box |new_value#0@@2|))))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@22|) |new_value#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@27|))) (MapSpec.__default.WF (Lit |s'#0@@11|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@11|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@27|))) ($Box (Lit |key#0@@22|)) ($Box |new_value#0@@2|)))) (MapSpec.__default.Write (Lit |k#0@@23|) (Lit |s#0@@27|) (Lit |s'#0@@11|) (Lit |uiop#0@@11|) (Lit |key#0@@22|) |new_value#0@@2|))))) :qid |MapSpecs.102:19| :weight 3 :skolemid |2134| :pattern ( (MapSpec.__default.Write (Lit |k#0@@23|) (Lit |s#0@@27|) (Lit |s'#0@@11|) (Lit |uiop#0@@11|) (Lit |key#0@@22|) |new_value#0@@2|)) ))))
(assert  (=> true (forall ((|k#0@@24| T@U) (|s#0@@28| T@U) (|s'#0@@12| T@U) (|uiop#0@@12| T@U) (|key#0@@23| T@U) (|new_value#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@24|) DatatypeTypeType) (= (type |s#0@@28|) DatatypeTypeType)) (= (type |s'#0@@12|) DatatypeTypeType)) (= (type |uiop#0@@12|) DatatypeTypeType)) (= (type |key#0@@23|) (SeqType BoxType))) (= (type |new_value#0@@3|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| (Lit |k#0@@24|) (Lit |s#0@@28|) (Lit |s'#0@@12|) (Lit |uiop#0@@12|) (Lit |key#0@@23|) (Lit |new_value#0@@3|)) (and (and (and (and (and ($Is |k#0@@24| Tclass.MapSpec.Constants) ($Is |s#0@@28| Tclass.MapSpec.Variables)) ($Is |s'#0@@12| Tclass.MapSpec.Variables)) ($Is |uiop#0@@12| Tclass.UI.Op)) ($Is |key#0@@23| Tclass.KeyType.Key)) ($Is |new_value#0@@3| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@12|)) (=> (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@23|) (Lit |new_value#0@@3|))) (|MapSpec.__default.WF#canCall| (Lit |s#0@@28|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@28|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@28|)))))) (|MapSpec.__default.WF#canCall| (Lit |s'#0@@12|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s'#0@@12|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s'#0@@12|)))))) (and (MapSpec.Variables.Variables_q (Lit |s'#0@@12|)) (MapSpec.Variables.Variables_q (Lit |s#0@@28|))))) (and (=> (MapSpec.__default.Write (Lit |k#0@@24|) (Lit |s#0@@28|) (Lit |s'#0@@12|) (Lit |uiop#0@@12|) (Lit |key#0@@23|) (Lit |new_value#0@@3|)) (and (and (and (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@23|) (Lit |new_value#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@28|))) (MapSpec.__default.WF (Lit |s'#0@@12|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@12|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@28|))) ($Box (Lit |key#0@@23|)) ($Box (Lit |new_value#0@@3|)))))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@23|) (Lit |new_value#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@28|))) (MapSpec.__default.WF (Lit |s'#0@@12|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@12|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@28|))) ($Box (Lit |key#0@@23|)) ($Box (Lit |new_value#0@@3|))))) (MapSpec.__default.Write (Lit |k#0@@24|) (Lit |s#0@@28|) (Lit |s'#0@@12|) (Lit |uiop#0@@12|) (Lit |key#0@@23|) (Lit |new_value#0@@3|)))))) :qid |MapSpecs.102:19| :weight 3 :skolemid |2135| :pattern ( (MapSpec.__default.Write (Lit |k#0@@24|) (Lit |s#0@@28|) (Lit |s'#0@@12|) (Lit |uiop#0@@12|) (Lit |key#0@@23|) (Lit |new_value#0@@3|))) ))))
(assert  (=> true (forall ((|k#0@@25| T@U) (|s#0@@29| T@U) (|s'#0@@13| T@U) (|uiop#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@25|) DatatypeTypeType) (= (type |s#0@@29|) DatatypeTypeType)) (= (type |s'#0@@13|) DatatypeTypeType)) (= (type |uiop#0@@13|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| |k#0@@25| |s#0@@29| |s'#0@@13| |uiop#0@@13|) (and (and (and ($Is |k#0@@25| Tclass.MapSpec.Constants) ($Is |s#0@@29| Tclass.MapSpec.Variables)) ($Is |s'#0@@13| Tclass.MapSpec.Variables)) ($Is |uiop#0@@13| Tclass.UI.Op)))) true) :qid |MapSpecs.111:21| :skolemid |2136| :pattern ( (MapSpec.__default.Stutter |k#0@@25| |s#0@@29| |s'#0@@13| |uiop#0@@13|)) ))))
(assert (forall ((|k#0@@26| T@U) (|s#0@@30| T@U) (|s'#0@@14| T@U) (|uiop#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@26|) DatatypeTypeType) (= (type |s#0@@30|) DatatypeTypeType)) (= (type |s'#0@@14|) DatatypeTypeType)) (= (type |uiop#0@@14|) DatatypeTypeType)) (and (and (and ($Is |k#0@@26| Tclass.MapSpec.Constants) ($Is |s#0@@30| Tclass.MapSpec.Variables)) ($Is |s'#0@@14| Tclass.MapSpec.Variables)) ($Is |uiop#0@@14| Tclass.UI.Op))) (and (=> (|MapSpec.__default.Stutter#requires| |k#0@@26| |s#0@@30| |s'#0@@14| |uiop#0@@14|) true) (=> true (|MapSpec.__default.Stutter#requires| |k#0@@26| |s#0@@30| |s'#0@@14| |uiop#0@@14|)))) :qid |MapSpecs.111:21| :skolemid |2137| :pattern ( (|MapSpec.__default.Stutter#requires| |k#0@@26| |s#0@@30| |s'#0@@14| |uiop#0@@14|)) )))
(assert  (=> true (forall ((|k#0@@27| T@U) (|s#0@@31| T@U) (|s'#0@@15| T@U) (|uiop#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@27|) DatatypeTypeType) (= (type |s#0@@31|) DatatypeTypeType)) (= (type |s'#0@@15|) DatatypeTypeType)) (= (type |uiop#0@@15|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| |k#0@@27| |s#0@@31| |s'#0@@15| |uiop#0@@15|) (and (and (and ($Is |k#0@@27| Tclass.MapSpec.Constants) ($Is |s#0@@31| Tclass.MapSpec.Variables)) ($Is |s'#0@@15| Tclass.MapSpec.Variables)) ($Is |uiop#0@@15| Tclass.UI.Op)))) (and (=> (UI.Op.NoOp_q |uiop#0@@15|) (and (|$IsA#MapSpec.Variables| |s'#0@@15|) (|$IsA#MapSpec.Variables| |s#0@@31|))) (and (=> (MapSpec.__default.Stutter |k#0@@27| |s#0@@31| |s'#0@@15| |uiop#0@@15|) (and (UI.Op.NoOp_q |uiop#0@@15|) (|MapSpec.Variables#Equal| |s'#0@@15| |s#0@@31|))) (=> (and (UI.Op.NoOp_q |uiop#0@@15|) (|MapSpec.Variables#Equal| |s'#0@@15| |s#0@@31|)) (MapSpec.__default.Stutter |k#0@@27| |s#0@@31| |s'#0@@15| |uiop#0@@15|))))) :qid |MapSpecs.111:21| :skolemid |2138| :pattern ( (MapSpec.__default.Stutter |k#0@@27| |s#0@@31| |s'#0@@15| |uiop#0@@15|)) ))))
(assert  (=> true (forall ((|k#0@@28| T@U) (|s#0@@32| T@U) (|s'#0@@16| T@U) (|uiop#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@28|) DatatypeTypeType) (= (type |s#0@@32|) DatatypeTypeType)) (= (type |s'#0@@16|) DatatypeTypeType)) (= (type |uiop#0@@16|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| (Lit |k#0@@28|) (Lit |s#0@@32|) (Lit |s'#0@@16|) (Lit |uiop#0@@16|)) (and (and (and ($Is |k#0@@28| Tclass.MapSpec.Constants) ($Is |s#0@@32| Tclass.MapSpec.Variables)) ($Is |s'#0@@16| Tclass.MapSpec.Variables)) ($Is |uiop#0@@16| Tclass.UI.Op)))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@16|))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@16|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@32|)))) (and (=> (MapSpec.__default.Stutter (Lit |k#0@@28|) (Lit |s#0@@32|) (Lit |s'#0@@16|) (Lit |uiop#0@@16|)) (and (UI.Op.NoOp_q (Lit |uiop#0@@16|)) (|MapSpec.Variables#Equal| |s'#0@@16| |s#0@@32|))) (=> (and (UI.Op.NoOp_q (Lit |uiop#0@@16|)) (|MapSpec.Variables#Equal| |s'#0@@16| |s#0@@32|)) (MapSpec.__default.Stutter (Lit |k#0@@28|) (Lit |s#0@@32|) (Lit |s'#0@@16|) (Lit |uiop#0@@16|)))))) :qid |MapSpecs.111:21| :weight 3 :skolemid |2139| :pattern ( (MapSpec.__default.Stutter (Lit |k#0@@28|) (Lit |s#0@@32|) (Lit |s'#0@@16|) (Lit |uiop#0@@16|))) ))))
(assert  (=> true (forall ((|k#0@@29| T@U) (|s#0@@33| T@U) (|s'#0@@17| T@U) (|uiop#0@@17| T@U) (|step#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@29|) DatatypeTypeType) (= (type |s#0@@33|) DatatypeTypeType)) (= (type |s'#0@@17|) DatatypeTypeType)) (= (type |uiop#0@@17|) DatatypeTypeType)) (= (type |step#0|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| |k#0@@29| |s#0@@33| |s'#0@@17| |uiop#0@@17| |step#0|) (and (and (and (and ($Is |k#0@@29| Tclass.MapSpec.Constants) ($Is |s#0@@33| Tclass.MapSpec.Variables)) ($Is |s'#0@@17| Tclass.MapSpec.Variables)) ($Is |uiop#0@@17| Tclass.UI.Op)) ($Is |step#0| Tclass.MapSpec.Step)))) true) :qid |MapSpecs.124:22| :skolemid |2140| :pattern ( (MapSpec.__default.NextStep |k#0@@29| |s#0@@33| |s'#0@@17| |uiop#0@@17| |step#0|)) ))))
(assert (forall ((|k#0@@30| T@U) (|s#0@@34| T@U) (|s'#0@@18| T@U) (|uiop#0@@18| T@U) (|step#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@30|) DatatypeTypeType) (= (type |s#0@@34|) DatatypeTypeType)) (= (type |s'#0@@18|) DatatypeTypeType)) (= (type |uiop#0@@18|) DatatypeTypeType)) (= (type |step#0@@0|) DatatypeTypeType)) (and (and (and (and ($Is |k#0@@30| Tclass.MapSpec.Constants) ($Is |s#0@@34| Tclass.MapSpec.Variables)) ($Is |s'#0@@18| Tclass.MapSpec.Variables)) ($Is |uiop#0@@18| Tclass.UI.Op)) ($Is |step#0@@0| Tclass.MapSpec.Step))) (and (=> (|MapSpec.__default.NextStep#requires| |k#0@@30| |s#0@@34| |s'#0@@18| |uiop#0@@18| |step#0@@0|) true) (=> true (|MapSpec.__default.NextStep#requires| |k#0@@30| |s#0@@34| |s'#0@@18| |uiop#0@@18| |step#0@@0|)))) :qid |MapSpecs.124:22| :skolemid |2141| :pattern ( (|MapSpec.__default.NextStep#requires| |k#0@@30| |s#0@@34| |s'#0@@18| |uiop#0@@18| |step#0@@0|)) )))
(assert  (=> true (forall ((|k#0@@31| T@U) (|s#0@@35| T@U) (|s'#0@@19| T@U) (|uiop#0@@19| T@U) (|step#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@31|) DatatypeTypeType) (= (type |s#0@@35|) DatatypeTypeType)) (= (type |s'#0@@19|) DatatypeTypeType)) (= (type |uiop#0@@19|) DatatypeTypeType)) (= (type |step#0@@1|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |step#0@@1|) (and (and (and (and ($Is |k#0@@31| Tclass.MapSpec.Constants) ($Is |s#0@@35| Tclass.MapSpec.Variables)) ($Is |s'#0@@19| Tclass.MapSpec.Variables)) ($Is |uiop#0@@19| Tclass.UI.Op)) ($Is |step#0@@1| Tclass.MapSpec.Step)))) (and (and (=> (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#0@@4| (MapSpec.Step.result |step#0@@1|))) (let ((|key#0@@24| (MapSpec.Step.key |step#0@@1|))) (|MapSpec.__default.Query#canCall| |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |key#0@@24| |result#0@@4|)))) (=> (not (MapSpec.Step.QueryStep_q |step#0@@1|)) (and (=> (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#0@@4| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#1@@2| (MapSpec.Step.key |step#0@@1|))) (|MapSpec.__default.Write#canCall| |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |key#1@@2| |new_value#0@@4|)))) (=> (not (MapSpec.Step.WriteStep_q |step#0@@1|)) (and (=> (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#0@@15| (MapSpec.Step.end |step#0@@1|))) (let ((|results#0@@3| (MapSpec.Step.results |step#0@@1|))) (let ((|start#0@@15| (MapSpec.Step.start |step#0@@1|))) (|MapSpec.__default.Succ#canCall| |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |start#0@@15| |results#0@@3| |end#0@@15|))))) (=> (not (MapSpec.Step.SuccStep_q |step#0@@1|)) (|MapSpec.__default.Stutter#canCall| |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19|))))))) (and (=> (MapSpec.__default.NextStep |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |step#0@@1|) (ite (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#1| (MapSpec.Step.result |step#0@@1|))) (let ((|key#2| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Query |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |key#2| |result#1|))) (ite (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#1| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#3| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Write |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |key#3| |new_value#1|))) (ite (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#1| (MapSpec.Step.end |step#0@@1|))) (let ((|results#1| (MapSpec.Step.results |step#0@@1|))) (let ((|start#1| (MapSpec.Step.start |step#0@@1|))) (MapSpec.__default.Succ |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |start#1| |results#1| |end#1|)))) (MapSpec.__default.Stutter |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19|))))) (=> (ite (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#1@@0| (MapSpec.Step.result |step#0@@1|))) (let ((|key#2@@0| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Query |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |key#2@@0| |result#1@@0|))) (ite (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#1@@0| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#3@@0| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Write |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |key#3@@0| |new_value#1@@0|))) (ite (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#1@@0| (MapSpec.Step.end |step#0@@1|))) (let ((|results#1@@0| (MapSpec.Step.results |step#0@@1|))) (let ((|start#1@@0| (MapSpec.Step.start |step#0@@1|))) (MapSpec.__default.Succ |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |start#1@@0| |results#1@@0| |end#1@@0|)))) (MapSpec.__default.Stutter |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19|)))) (MapSpec.__default.NextStep |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |step#0@@1|))))) :qid |MapSpecs.124:22| :skolemid |2142| :pattern ( (MapSpec.__default.NextStep |k#0@@31| |s#0@@35| |s'#0@@19| |uiop#0@@19| |step#0@@1|)) ))))
(assert  (=> true (forall ((|k#0@@32| T@U) (|s#0@@36| T@U) (|s'#0@@20| T@U) (|uiop#0@@20| T@U) (|step#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@32|) DatatypeTypeType) (= (type |s#0@@36|) DatatypeTypeType)) (= (type |s'#0@@20|) DatatypeTypeType)) (= (type |uiop#0@@20|) DatatypeTypeType)) (= (type |step#0@@2|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)) (and (and (and (and ($Is |k#0@@32| Tclass.MapSpec.Constants) ($Is |s#0@@36| Tclass.MapSpec.Variables)) ($Is |s'#0@@20| Tclass.MapSpec.Variables)) ($Is |uiop#0@@20| Tclass.UI.Op)) ($Is |step#0@@2| Tclass.MapSpec.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.QueryStep_q (Lit |step#0@@2|))))) (let ((|result#2| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#4| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (|MapSpec.__default.Query#canCall| (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#4| |result#2|)))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.WriteStep_q (Lit |step#0@@2|))))) (let ((|new_value#2| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#5| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (|MapSpec.__default.Write#canCall| (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#5| |new_value#2|)))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.SuccStep_q (Lit |step#0@@2|))))) (let ((|end#2| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#2| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#2| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (|MapSpec.__default.Succ#canCall| (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |start#2| |results#2| |end#2|))))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)))))) (|MapSpec.__default.Stutter#canCall| (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|)))))))) (and (=> (MapSpec.__default.NextStep (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)) (ite (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|result#3| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#6| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Query (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#6| |result#3|)))))) (ite (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|new_value#3| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#7| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Write (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#7| |new_value#3|)))))) (ite (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|end#3| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#3| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#3| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Succ (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |start#3| |results#3| |end#3|))))))) (MapSpec.__default.Stutter (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|)))))) (=> (ite (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|result#3@@0| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#6@@0| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Query (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#6@@0| |result#3@@0|)))))) (ite (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|new_value#3@@0| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#7@@0| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Write (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |key#7@@0| |new_value#3@@0|)))))) (ite (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|end#3@@0| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#3@@0| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#3@@0| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Succ (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) |start#3@@0| |results#3@@0| |end#3@@0|))))))) (MapSpec.__default.Stutter (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|))))) (MapSpec.__default.NextStep (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)))))) :qid |MapSpecs.124:22| :weight 3 :skolemid |2143| :pattern ( (MapSpec.__default.NextStep (Lit |k#0@@32|) (Lit |s#0@@36|) (Lit |s'#0@@20|) (Lit |uiop#0@@20|) (Lit |step#0@@2|))) ))))
(assert  (=> true (forall ((|k#0@@33| T@U) (|s#0@@37| T@U) (|s'#0@@21| T@U) (|uiop#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@33|) DatatypeTypeType) (= (type |s#0@@37|) DatatypeTypeType)) (= (type |s'#0@@21|) DatatypeTypeType)) (= (type |uiop#0@@21|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| |k#0@@33| |s#0@@37| |s'#0@@21| |uiop#0@@21|) (and (and (and ($Is |k#0@@33| Tclass.MapSpec.Constants) ($Is |s#0@@37| Tclass.MapSpec.Variables)) ($Is |s'#0@@21| Tclass.MapSpec.Variables)) ($Is |uiop#0@@21| Tclass.UI.Op)))) true) :qid |UIStateM.10:18| :skolemid |2144| :pattern ( (MapSpec.__default.Next |k#0@@33| |s#0@@37| |s'#0@@21| |uiop#0@@21|)) ))))
(assert (forall ((|k#0@@34| T@U) (|s#0@@38| T@U) (|s'#0@@22| T@U) (|uiop#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@34|) DatatypeTypeType) (= (type |s#0@@38|) DatatypeTypeType)) (= (type |s'#0@@22|) DatatypeTypeType)) (= (type |uiop#0@@22|) DatatypeTypeType)) (and (and (and ($Is |k#0@@34| Tclass.MapSpec.Constants) ($Is |s#0@@38| Tclass.MapSpec.Variables)) ($Is |s'#0@@22| Tclass.MapSpec.Variables)) ($Is |uiop#0@@22| Tclass.UI.Op))) (and (=> (|MapSpec.__default.Next#requires| |k#0@@34| |s#0@@38| |s'#0@@22| |uiop#0@@22|) true) (=> true (|MapSpec.__default.Next#requires| |k#0@@34| |s#0@@38| |s'#0@@22| |uiop#0@@22|)))) :qid |UIStateM.10:18| :skolemid |2145| :pattern ( (|MapSpec.__default.Next#requires| |k#0@@34| |s#0@@38| |s'#0@@22| |uiop#0@@22|)) )))
(assert  (=> true (forall ((|k#0@@35| T@U) (|s#0@@39| T@U) (|s'#0@@23| T@U) (|uiop#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@35|) DatatypeTypeType) (= (type |s#0@@39|) DatatypeTypeType)) (= (type |s'#0@@23|) DatatypeTypeType)) (= (type |uiop#0@@23|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23|) (and (and (and ($Is |k#0@@35| Tclass.MapSpec.Constants) ($Is |s#0@@39| Tclass.MapSpec.Variables)) ($Is |s'#0@@23| Tclass.MapSpec.Variables)) ($Is |uiop#0@@23| Tclass.UI.Op)))) (and (forall ((|step#0@@3| T@U) ) (!  (=> (and (= (type |step#0@@3|) DatatypeTypeType) ($Is |step#0@@3| Tclass.MapSpec.Step)) (|MapSpec.__default.NextStep#canCall| |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23| |step#0@@3|)) :qid |MapSpecs.136:12| :skolemid |2146| :pattern ( (MapSpec.__default.NextStep |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23| |step#0@@3|)) )) (and (=> (MapSpec.__default.Next |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23|) (exists ((|step#0@@4| T@U) ) (!  (and (= (type |step#0@@4|) DatatypeTypeType) (and ($Is |step#0@@4| Tclass.MapSpec.Step) (MapSpec.__default.NextStep |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23| |step#0@@4|))) :qid |MapSpecs.136:12| :skolemid |2147| :pattern ( (MapSpec.__default.NextStep |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23| |step#0@@4|)) ))) (=> (exists ((|step#0@@5| T@U) ) (!  (and (= (type |step#0@@5|) DatatypeTypeType) (and ($Is |step#0@@5| Tclass.MapSpec.Step) (MapSpec.__default.NextStep |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23| |step#0@@5|))) :qid |MapSpecs.136:12| :skolemid |2147| :pattern ( (MapSpec.__default.NextStep |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23| |step#0@@5|)) )) (MapSpec.__default.Next |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23|))))) :qid |UIStateM.10:18| :skolemid |2148| :pattern ( (MapSpec.__default.Next |k#0@@35| |s#0@@39| |s'#0@@23| |uiop#0@@23|)) ))))
(assert  (=> true (forall ((|k#0@@36| T@U) (|s#0@@40| T@U) (|s'#0@@24| T@U) (|uiop#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@36|) DatatypeTypeType) (= (type |s#0@@40|) DatatypeTypeType)) (= (type |s'#0@@24|) DatatypeTypeType)) (= (type |uiop#0@@24|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| (Lit |k#0@@36|) (Lit |s#0@@40|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|)) (and (and (and ($Is |k#0@@36| Tclass.MapSpec.Constants) ($Is |s#0@@40| Tclass.MapSpec.Variables)) ($Is |s'#0@@24| Tclass.MapSpec.Variables)) ($Is |uiop#0@@24| Tclass.UI.Op)))) (and (forall ((|step#1| T@U) ) (!  (=> (and (= (type |step#1|) DatatypeTypeType) ($Is |step#1| Tclass.MapSpec.Step)) (|MapSpec.__default.NextStep#canCall| (Lit |k#0@@36|) (Lit |s#0@@40|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|) |step#1|)) :qid |MapSpecs.136:12| :skolemid |2149| :pattern ( (MapSpec.__default.NextStep |k#0@@36| |s#0@@40| |s'#0@@24| |uiop#0@@24| |step#1|)) )) (and (=> (MapSpec.__default.Next (Lit |k#0@@36|) (Lit |s#0@@40|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|)) (exists ((|step#1@@0| T@U) ) (!  (and (= (type |step#1@@0|) DatatypeTypeType) (and ($Is |step#1@@0| Tclass.MapSpec.Step) (MapSpec.__default.NextStep (Lit |k#0@@36|) (Lit |s#0@@40|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|) |step#1@@0|))) :qid |MapSpecs.136:12| :skolemid |2150| :pattern ( (MapSpec.__default.NextStep |k#0@@36| |s#0@@40| |s'#0@@24| |uiop#0@@24| |step#1@@0|)) ))) (=> (exists ((|step#1@@1| T@U) ) (!  (and (= (type |step#1@@1|) DatatypeTypeType) (and ($Is |step#1@@1| Tclass.MapSpec.Step) (MapSpec.__default.NextStep (Lit |k#0@@36|) (Lit |s#0@@40|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|) |step#1@@1|))) :qid |MapSpecs.136:12| :skolemid |2150| :pattern ( (MapSpec.__default.NextStep |k#0@@36| |s#0@@40| |s'#0@@24| |uiop#0@@24| |step#1@@1|)) )) (MapSpec.__default.Next (Lit |k#0@@36|) (Lit |s#0@@40|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|)))))) :qid |UIStateM.10:18| :weight 3 :skolemid |2151| :pattern ( (MapSpec.__default.Next (Lit |k#0@@36|) (Lit |s#0@@40|) (Lit |s'#0@@24|) (Lit |uiop#0@@24|))) ))))
(assert  (=> true (forall ((|k#0@@37| T@U) (|s#0@@41| T@U) ) (!  (=> (and (and (= (type |k#0@@37|) DatatypeTypeType) (= (type |s#0@@41|) DatatypeTypeType)) (or (|MapSpec.__default.Inv#canCall| |k#0@@37| |s#0@@41|) (and ($Is |k#0@@37| Tclass.MapSpec.Constants) ($Is |s#0@@41| Tclass.MapSpec.Variables)))) true) :qid |UIStateM.12:17| :skolemid |2152| :pattern ( (MapSpec.__default.Inv |k#0@@37| |s#0@@41|)) ))))
(assert (forall ((|k#0@@38| T@U) (|s#0@@42| T@U) ) (!  (=> (and (and (= (type |k#0@@38|) DatatypeTypeType) (= (type |s#0@@42|) DatatypeTypeType)) (and ($Is |k#0@@38| Tclass.MapSpec.Constants) ($Is |s#0@@42| Tclass.MapSpec.Variables))) (and (=> (|MapSpec.__default.Inv#requires| |k#0@@38| |s#0@@42|) true) (=> true (|MapSpec.__default.Inv#requires| |k#0@@38| |s#0@@42|)))) :qid |UIStateM.12:17| :skolemid |2153| :pattern ( (|MapSpec.__default.Inv#requires| |k#0@@38| |s#0@@42|)) )))
(assert  (=> true (forall ((|k#0@@39| T@U) (|s#0@@43| T@U) ) (!  (=> (and (and (= (type |k#0@@39|) DatatypeTypeType) (= (type |s#0@@43|) DatatypeTypeType)) (or (|MapSpec.__default.Inv#canCall| |k#0@@39| |s#0@@43|) (and ($Is |k#0@@39| Tclass.MapSpec.Constants) ($Is |s#0@@43| Tclass.MapSpec.Variables)))) (and (|MapSpec.__default.WF#canCall| |s#0@@43|) (and (=> (MapSpec.__default.Inv |k#0@@39| |s#0@@43|) (MapSpec.__default.WF |s#0@@43|)) (=> (MapSpec.__default.WF |s#0@@43|) (MapSpec.__default.Inv |k#0@@39| |s#0@@43|))))) :qid |UIStateM.12:17| :skolemid |2154| :pattern ( (MapSpec.__default.Inv |k#0@@39| |s#0@@43|)) ))))
(assert  (=> true (forall ((|k#0@@40| T@U) (|s#0@@44| T@U) ) (!  (=> (and (and (= (type |k#0@@40|) DatatypeTypeType) (= (type |s#0@@44|) DatatypeTypeType)) (or (|MapSpec.__default.Inv#canCall| (Lit |k#0@@40|) (Lit |s#0@@44|)) (and ($Is |k#0@@40| Tclass.MapSpec.Constants) ($Is |s#0@@44| Tclass.MapSpec.Variables)))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@44|)) (and (=> (MapSpec.__default.Inv (Lit |k#0@@40|) (Lit |s#0@@44|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@44|)))))) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@44|))))) (MapSpec.__default.Inv (Lit |k#0@@40|) (Lit |s#0@@44|)))))) :qid |UIStateM.12:17| :weight 3 :skolemid |2155| :pattern ( (MapSpec.__default.Inv (Lit |k#0@@40|) (Lit |s#0@@44|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (forall ((bx@@153 T@U) ) (!  (=> (and (= (type bx@@153) BoxType) ($IsBox bx@@153 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@153)) bx@@153) ($Is ($Unbox refType bx@@153) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |2156| :pattern ( ($IsBox bx@@153 Tclass.Sequences.__default)) )))
(assert (forall (($o@@27 T@U) ) (!  (=> (= (type $o@@27) refType) (and (=> ($Is $o@@27 Tclass.Sequences.__default) (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Sequences.__default))) (=> (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Sequences.__default)) ($Is $o@@27 Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |2157| :pattern ( ($Is $o@@27 Tclass.Sequences.__default)) )))
(assert (forall (($o@@28 T@U) ($h@@100 T@U) ) (!  (=> (and (= (type $o@@28) refType) (= (type $h@@100) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@28 Tclass.Sequences.__default $h@@100) (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@100 $o@@28) alloc)))) (=> (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@100 $o@@28) alloc))) ($IsAlloc $o@@28 Tclass.Sequences.__default $h@@100)))) :qid |unknown.0:0| :skolemid |2158| :pattern ( ($IsAlloc $o@@28 Tclass.Sequences.__default $h@@100)) )))
(assert (forall ((arg0@@373 T@U) (arg1@@166 T@U) ) (! (= (type (Sequences.__default.Last arg0@@373 arg1@@166)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@373 arg1@@166)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0|) (and ($Is |run#0| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |2159| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq Sequences._default.Last$E@@0))) (and (=> (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0)) (=> (> (|Seq#Length| |run#0@@0|) 0) (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)))) :qid |unknown.0:0| :skolemid |2160| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |2161| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2162| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@374 T@U) (arg1@@167 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@374 arg1@@167)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@374 arg1@@167)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |2163| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq Sequences._default.DropLast$E@@0))) (and (=> (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0)) (=> (> (|Seq#Length| |run#0@@4|) 0) (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)))) :qid |unknown.0:0| :skolemid |2164| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |2165| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2166| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (forall ((arg0@@375 T@U) (arg1@@168 T@U) ) (! (= (type (Sequences.__default.Set arg0@@375 arg1@@168)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@375 arg1@@168)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@7|) ($Is |run#0@@7| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |2167| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Set$T@@0))) (and (=> (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|) true) (=> true (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)))) :qid |unknown.0:0| :skolemid |2168| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@169 T@U) (arg2@@116 Int) ) (! (= (type (|lambda#44| arg0@@376 arg1@@169 arg2@@116)) (MapType0Type BoxType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@376 arg1@@169 arg2@@116)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@9|) ($Is |run#0@@9| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|) (|lambda#44| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@9|) 0))) :qid |unknown.0:0| :skolemid |2169| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@10|)) ($Is |run#0@@10| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|)) (|lambda#44| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@10|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2170| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@377 T@U) (arg1@@170 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@377 arg1@@170)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@377 arg1@@170)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |2171| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.ISet$T@@0))) (and (=> (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|) true) (=> true (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)))) :qid |unknown.0:0| :skolemid |2172| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|) (|lambda#44| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@13|) 0))) :qid |unknown.0:0| :skolemid |2173| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) (|lambda#44| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@14|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2174| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@6 T@U) (|a#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@6) LayerTypeType)) (= (type |a#0@@12|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@6) |a#0@@12|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@6 |a#0@@12|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@6 |a#0@@12|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@6) |a#0@@12|)))) :qid |unknown.0:0| :skolemid |2175| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@6) |a#0@@12|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@7 T@U) (|a#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@7) LayerTypeType)) (= (type |a#0@@13|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@7 |a#0@@13|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@13|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@13|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@7 |a#0@@13|)))) :qid |unknown.0:0| :skolemid |2176| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@7) |a#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@8 T@U) (|a#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@8) LayerTypeType)) (= (type |a#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@14|) ($Is |a#0@@14| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |2177| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@8 |a#0@@14|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@9 T@U) (|a#0@@15| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@9) LayerTypeType)) (= (type |a#0@@15|) (SeqType BoxType))) ($Is |a#0@@15| (TSeq Sequences._default.NoDupes$T@@2))) (and (=> (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@9 |a#0@@15|) true) (=> true (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@9 |a#0@@15|)))) :qid |unknown.0:0| :skolemid |2178| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@9 |a#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@10 T@U) (|a#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@10) LayerTypeType)) (= (type |a#0@@16|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@16|) ($Is |a#0@@16| (TSeq Sequences._default.NoDupes$T@@3)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@10) |a#0@@16|) (forall ((|i#0@@31| Int) (|j#0@@4| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@31|) (< |i#0@@31| (|Seq#Length| |a#0@@16|))) (and (<= (LitInt 0) |j#0@@4|) (< |j#0@@4| (|Seq#Length| |a#0@@16|)))) (not (= |i#0@@31| |j#0@@4|))) (not (= (|Seq#Index| |a#0@@16| |i#0@@31|) (|Seq#Index| |a#0@@16| |j#0@@4|))))) :qid |sequence.54:13| :skolemid |2179| :pattern ( (|Seq#Index| |a#0@@16| |j#0@@4|) (|Seq#Index| |a#0@@16| |i#0@@31|)) ))) (=> (forall ((|i#0@@32| Int) (|j#0@@5| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@32|) (< |i#0@@32| (|Seq#Length| |a#0@@16|))) (and (<= (LitInt 0) |j#0@@5|) (< |j#0@@5| (|Seq#Length| |a#0@@16|)))) (not (= |i#0@@32| |j#0@@5|))) (not (= (|Seq#Index| |a#0@@16| |i#0@@32|) (|Seq#Index| |a#0@@16| |j#0@@5|))))) :qid |sequence.54:13| :skolemid |2179| :pattern ( (|Seq#Index| |a#0@@16| |j#0@@5|) (|Seq#Index| |a#0@@16| |i#0@@32|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@10) |a#0@@16|)))) :qid |unknown.0:0| :skolemid |2180| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@10) |a#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@11 T@U) (|a#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@11) LayerTypeType)) (= (type |a#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@17|)) ($Is |a#0@@17| (TSeq Sequences._default.NoDupes$T@@4)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@11) (Lit |a#0@@17|)) (forall ((|i#1@@7| Int) (|j#1@@4| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| (|Seq#Length| (Lit |a#0@@17|)))) (and (<= (LitInt 0) |j#1@@4|) (< |j#1@@4| (|Seq#Length| (Lit |a#0@@17|))))) (not (= |i#1@@7| |j#1@@4|))) (not (= (|Seq#Index| (Lit |a#0@@17|) |i#1@@7|) (|Seq#Index| (Lit |a#0@@17|) |j#1@@4|))))) :qid |sequence.54:13| :skolemid |2181| :pattern ( (|Seq#Index| |a#0@@17| |j#1@@4|) (|Seq#Index| |a#0@@17| |i#1@@7|)) ))) (=> (forall ((|i#1@@8| Int) (|j#1@@5| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| (|Seq#Length| (Lit |a#0@@17|)))) (and (<= (LitInt 0) |j#1@@5|) (< |j#1@@5| (|Seq#Length| (Lit |a#0@@17|))))) (not (= |i#1@@8| |j#1@@5|))) (not (= (|Seq#Index| (Lit |a#0@@17|) |i#1@@8|) (|Seq#Index| (Lit |a#0@@17|) |j#1@@5|))))) :qid |sequence.54:13| :skolemid |2181| :pattern ( (|Seq#Index| |a#0@@17| |j#1@@5|) (|Seq#Index| |a#0@@17| |i#1@@8|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@11) (Lit |a#0@@17|))))) :qid |unknown.0:0| :weight 3 :skolemid |2182| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@11) (Lit |a#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@45| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@45|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@45| |e#0|) (and (and ($Is |s#0@@45| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@45| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@45| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@45| |e#0|) (|Seq#Length| |s#0@@45|))) (= (|Seq#Index| |s#0@@45| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@45| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |2183| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@45| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@5 T@U) (|s#0@@46| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |s#0@@46|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@5) ($Is |s#0@@46| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (and (=> (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@46| |e#0@@0|) (|Seq#Contains| |s#0@@46| |e#0@@0|)) (=> (|Seq#Contains| |s#0@@46| |e#0@@0|) (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@46| |e#0@@0|)))) :qid |unknown.0:0| :skolemid |2184| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@46| |e#0@@0|) ($IsGoodHeap $Heap@@5)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@45 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@45) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@45 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e) (|Seq#Length| s@@45))) (= (|Seq#Index| s@@45 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) e))) :qid |sequence.105:5| :skolemid |2185| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@6 T@U) (|s#0@@47| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |s#0@@47|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@47| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@6) ($Is |s#0@@47| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@47| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@47| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@47| |e#0@@1|) (let ((|i#0@@33| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@47| |e#0@@1|))) |i#0@@33|)))) :qid |unknown.0:0| :skolemid |2186| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@47| |e#0@@1|) ($IsGoodHeap $Heap@@6)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@7 T@U) (|s#0@@48| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |s#0@@48|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@48|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |s#0@@48| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@48| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@48|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@48|) |e#0@@2|) (let ((|i#1@@9| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@48|) |e#0@@2|))) |i#1@@9|)))) :qid |unknown.0:0| :weight 3 :skolemid |2187| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@48|) |e#0@@2|) ($IsGoodHeap $Heap@@7)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@8 T@U) (|s#0@@49| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@49|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@49|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@49| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@49| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@49|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@49|) (Lit |e#0@@3|)) (let ((|i#2@@4| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@49|) (Lit |e#0@@3|)))) |i#2@@4|)))) :qid |unknown.0:0| :weight 3 :skolemid |2188| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@49|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@8)) ))))
(assert (forall ((arg0@@378 T@U) (arg1@@171 Int) ) (! (= (type (Sequences.__default.Range arg0@@378 arg1@@171)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@378 arg1@@171)) )))
(assert (forall (($ly@@12 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@12) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@12) |n#0|) (Sequences.__default.Range $ly@@12 |n#0|))) :qid |sequence.109:22| :skolemid |2189| :pattern ( (Sequences.__default.Range ($LS $ly@@12) |n#0|)) )))
(assert (forall (($ly@@13 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@13) LayerTypeType) (= (Sequences.__default.Range $ly@@13 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |sequence.109:22| :skolemid |2190| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@13) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@14 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@14) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@14 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@34| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@14 |n#0@@1|) |i#0@@34|))) |i#0@@34|)) :qid |sequence.112:20| :skolemid |2191| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@14 |n#0@@1|) |i#0@@34|))) ))) ($Is (Sequences.__default.Range $ly@@14 |n#0@@1|) (TSeq TInt)))) :qid |sequence.109:22| :skolemid |2192| :pattern ( (Sequences.__default.Range $ly@@14 |n#0@@1|)) ))))
(assert (forall (($ly@@15 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@15) LayerTypeType) (and (=> (|Sequences.__default.Range#requires| $ly@@15 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|Sequences.__default.Range#requires| $ly@@15 |n#0@@2|)))) :qid |sequence.109:22| :skolemid |2193| :pattern ( (|Sequences.__default.Range#requires| $ly@@15 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@16 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@16) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@16) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@16 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |sequence.109:22| :skolemid |2194| :pattern ( (Sequences.__default.Range ($LS $ly@@16) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@17 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@17) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@17) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@17) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |sequence.109:22| :weight 3 :skolemid |2195| :pattern ( (Sequences.__default.Range ($LS $ly@@17) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@379 T@U) (arg1@@172 T@U) (arg2@@117 T@U) (arg3@@89 T@U) (arg4@@78 T@U) (arg5@@63 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@379 arg1@@172 arg2@@117 arg3@@89 arg4@@78 arg5@@63)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@379 arg1@@172 arg2@@117 arg3@@89 arg4@@78 arg5@@63)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@18 T@U) ($Heap@@9 T@U) (|f#0@@39| T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@18) LayerTypeType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@15|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@18) $Heap@@9 |f#0@@39| |run#0@@15|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@18 $Heap@@9 |f#0@@39| |run#0@@15|))) :qid |unknown.0:0| :skolemid |2196| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@18) $Heap@@9 |f#0@@39| |run#0@@15|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@19 T@U) ($Heap@@10 T@U) (|f#0@@40| T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@19) LayerTypeType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@16|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@19 $Heap@@10 |f#0@@40| |run#0@@16|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@10 |f#0@@40| |run#0@@16|))) :qid |unknown.0:0| :skolemid |2197| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@19) $Heap@@10 |f#0@@40| |run#0@@16|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@20 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@41| T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@20) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@17|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@41| |run#0@@17|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@17| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@29 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@29) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@29 null)) (exists ((|i#0@@35| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| (|Seq#Length| |run#0@@17|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@41| (|Seq#Index| |run#0@@17| |i#0@@35|)) ($Box |o#0|))))) (= ($Box $o@@29) ($Box |o#0|)))) :qid |sequence.121:15| :skolemid |2198| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@41| (|Seq#Index| |run#0@@17| |i#0@@35|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@29) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@29) $f@@1)))) :qid |unknown.0:0| :skolemid |2199| :no-pattern (type $o@@29) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@29) :no-pattern (U_2_bool $o@@29) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@20 $h0@@1 |f#0@@41| |run#0@@17|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@20 $h1@@1 |f#0@@41| |run#0@@17|))) :qid |unknown.0:0| :skolemid |2200| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@20 $h1@@1 |f#0@@41| |run#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@21 T@U) ($Heap@@11 T@U) (|f#0@@42| T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@21) LayerTypeType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@42| |run#0@@18|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@18| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| (|Seq#Length| |run#0@@18|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@42| (|Seq#Index| |run#0@@18| |i#1@@10|)))) :qid |sequence.118:21| :skolemid |2201| :pattern ( (|Seq#Index| |run#0@@18| |i#1@@10|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@11 |f#0@@42| |run#0@@18|)) (|Seq#Length| |run#0@@18|)) (forall ((|i#2@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |run#0@@18|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@11 |f#0@@42| |run#0@@18|) |i#2@@5|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@42| (|Seq#Index| |run#0@@18| |i#2@@5|))))) :qid |sequence.120:20| :skolemid |2202| :pattern ( (|Seq#Index| |run#0@@18| |i#2@@5|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@11 |f#0@@42| |run#0@@18|) |i#2@@5|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@11 |f#0@@42| |run#0@@18|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |2203| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@11 |f#0@@42| |run#0@@18|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@22 T@U) ($Heap@@12 T@U) (|f#0@@43| T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@22) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@12) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@19| (TSeq Sequences._default.Apply$E@@3)))) (and (=> (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@22 $Heap@@12 |f#0@@43| |run#0@@19|) (forall ((|i#3@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@43| (|Seq#Index| |run#0@@19| |i#3@@4|)))) :qid |sequence.118:21| :skolemid |2204| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@4|)) ))) (=> (forall ((|i#3@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@5|) (< |i#3@@5| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@43| (|Seq#Index| |run#0@@19| |i#3@@5|)))) :qid |sequence.118:21| :skolemid |2204| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@5|)) )) (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@22 $Heap@@12 |f#0@@43| |run#0@@19|)))) :qid |unknown.0:0| :skolemid |2205| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@22 $Heap@@12 |f#0@@43| |run#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@23 T@U) ($Heap@@13 T@U) (|f#0@@44| T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@23) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| |run#0@@20|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@20| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@6|) (< |i#3@@6| (|Seq#Length| |run#0@@20|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| (|Seq#Index| |run#0@@20| |i#3@@6|)))) :qid |sequence.118:21| :skolemid |2204| :pattern ( (|Seq#Index| |run#0@@20| |i#3@@6|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@20|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| (|Seq#Drop| |run#0@@20| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@23) $Heap@@13 |f#0@@44| |run#0@@20|) (ite (= (|Seq#Length| |run#0@@20|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| (|Seq#Index| |run#0@@20| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@23 $Heap@@13 |f#0@@44| (|Seq#Drop| |run#0@@20| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2206| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@23) $Heap@@13 |f#0@@44| |run#0@@20|)) ))))
(assert (forall ((arg0@@380 T@U) (arg1@@173 T@U) (arg2@@118 T@U) (arg3@@90 T@U) (arg4@@79 T@U) (arg5@@64 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@380 arg1@@173 arg2@@118 arg3@@90 arg4@@79 arg5@@64)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@380 arg1@@173 arg2@@118 arg3@@90 arg4@@79 arg5@@64)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@24 T@U) ($Heap@@14 T@U) (|f#0@@45| T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@24) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@45|) HandleTypeType)) (= (type |run#0@@21|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@24) $Heap@@14 |f#0@@45| |run#0@@21|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@24 $Heap@@14 |f#0@@45| |run#0@@21|))) :qid |unknown.0:0| :skolemid |2207| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@24) $Heap@@14 |f#0@@45| |run#0@@21|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@25 T@U) ($Heap@@15 T@U) (|f#0@@46| T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@25) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@46|) HandleTypeType)) (= (type |run#0@@22|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@25 $Heap@@15 |f#0@@46| |run#0@@22|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@15 |f#0@@46| |run#0@@22|))) :qid |unknown.0:0| :skolemid |2208| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@25) $Heap@@15 |f#0@@46| |run#0@@22|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@26 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@47| T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@26) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@47|) HandleTypeType)) (= (type |run#0@@23|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@47| |run#0@@23|) (and ($Is |f#0@@47| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@23| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@30 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@30) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@30 null)) (exists ((|i#0@@36| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@36|) (< |i#0@@36| (|Seq#Length| |run#0@@23|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@47| (|Seq#Index| |run#0@@23| |i#0@@36|)) ($Box |o#0@@0|))))) (= ($Box $o@@30) ($Box |o#0@@0|)))) :qid |sequence.132:15| :skolemid |2209| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@47| (|Seq#Index| |run#0@@23| |i#0@@36|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@30) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@30) $f@@2)))) :qid |unknown.0:0| :skolemid |2210| :no-pattern (type $o@@30) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@30) :no-pattern (U_2_bool $o@@30) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@26 $h0@@2 |f#0@@47| |run#0@@23|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@26 $h1@@2 |f#0@@47| |run#0@@23|))) :qid |unknown.0:0| :skolemid |2211| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@26 $h1@@2 |f#0@@47| |run#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@27 T@U) ($Heap@@16 T@U) (|f#0@@48| T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@27) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |run#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@48| |run#0@@24|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@48| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@24| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@11| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@11|) (< |i#1@@11| (|Seq#Length| |run#0@@24|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@48| (|Seq#Index| |run#0@@24| |i#1@@11|)))) :qid |sequence.129:21| :skolemid |2212| :pattern ( (|Seq#Index| |run#0@@24| |i#1@@11|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@16 |f#0@@48| |run#0@@24|)) (|Seq#Length| |run#0@@24|)) (forall ((|i#2@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@6|) (< |i#2@@6| (|Seq#Length| |run#0@@24|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@16 |f#0@@48| |run#0@@24|) |i#2@@6|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@48| (|Seq#Index| |run#0@@24| |i#2@@6|))))) :qid |sequence.131:20| :skolemid |2213| :pattern ( (|Seq#Index| |run#0@@24| |i#2@@6|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@16 |f#0@@48| |run#0@@24|) |i#2@@6|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@16 |f#0@@48| |run#0@@24|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |2214| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@16 |f#0@@48| |run#0@@24|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@28 T@U) ($Heap@@17 T@U) (|f#0@@49| T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@28) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |run#0@@25|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@49| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@25| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (and (=> (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@28 $Heap@@17 |f#0@@49| |run#0@@25|) (forall ((|i#3@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@7|) (< |i#3@@7| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@49| (|Seq#Index| |run#0@@25| |i#3@@7|)))) :qid |sequence.129:21| :skolemid |2215| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@7|)) ))) (=> (forall ((|i#3@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@8|) (< |i#3@@8| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@49| (|Seq#Index| |run#0@@25| |i#3@@8|)))) :qid |sequence.129:21| :skolemid |2215| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@8|)) )) (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@28 $Heap@@17 |f#0@@49| |run#0@@25|)))) :qid |unknown.0:0| :skolemid |2216| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@28 $Heap@@17 |f#0@@49| |run#0@@25|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@29 T@U) ($Heap@@18 T@U) (|f#0@@50| T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@29) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@50| |run#0@@26|) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@50| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@26| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@9|) (< |i#3@@9| (|Seq#Length| |run#0@@26|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@50| (|Seq#Index| |run#0@@26| |i#3@@9|)))) :qid |sequence.129:21| :skolemid |2215| :pattern ( (|Seq#Index| |run#0@@26| |i#3@@9|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@50| |run#0@@26|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@29) $Heap@@18 |f#0@@50| |run#0@@26|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@18 |f#0@@50| |run#0@@26|)))) :qid |unknown.0:0| :skolemid |2217| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@29) $Heap@@18 |f#0@@50| |run#0@@26|)) ))))
(assert (forall ((arg0@@381 T@U) (arg1@@174 T@U) (arg2@@119 T@U) (arg3@@91 T@U) (arg4@@80 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@381 arg1@@174 arg2@@119 arg3@@91 arg4@@80)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@381 arg1@@174 arg2@@119 arg3@@91 arg4@@80)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@30 T@U) ($Heap@@19 T@U) (|f#0@@51| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@30) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@30) $Heap@@19 |f#0@@51| |run#0@@27|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@30 $Heap@@19 |f#0@@51| |run#0@@27|))) :qid |unknown.0:0| :skolemid |2218| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@30) $Heap@@19 |f#0@@51| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@31 T@U) ($Heap@@20 T@U) (|f#0@@52| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@31) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@52|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@31 $Heap@@20 |f#0@@52| |run#0@@28|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@20 |f#0@@52| |run#0@@28|))) :qid |unknown.0:0| :skolemid |2219| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@31) $Heap@@20 |f#0@@52| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@32 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@53| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@32) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@53|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@53| |run#0@@29|) (and ($Is |f#0@@53| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@29| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@31 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@31) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@31 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@53| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@31) ($Box |_o0#0|)))) :qid |sequence.141:13| :skolemid |2220| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@31) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@31) $f@@3)))) :qid |unknown.0:0| :skolemid |2221| :no-pattern (type $o@@31) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@31) :no-pattern (U_2_bool $o@@31) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@32 $h0@@3 |f#0@@53| |run#0@@29|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@32 $h1@@3 |f#0@@53| |run#0@@29|))) :qid |unknown.0:0| :skolemid |2222| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@32 $h1@@3 |f#0@@53| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@33 T@U) ($Heap@@21 T@U) (|f#0@@54| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@33) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@54|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@21 |f#0@@54| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@54| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@30| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@37| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@37|) (< |i#0@@37| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@54| (|Seq#Index| |run#0@@30| |i#0@@37|)))) :qid |sequence.138:21| :skolemid |2223| :pattern ( (|Seq#Index| |run#0@@30| |i#0@@37|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@21 |f#0@@54| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#1@@12| Int) ) (!  (=> (<= (LitInt 0) |i#1@@12|) (=> (and (< |i#1@@12| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@21 |f#0@@54| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@54| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@21 |f#0@@54| |run#0@@30|) |i#1@@12|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@54| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@21 |f#0@@54| |run#0@@30|) |i#1@@12|)))))) :qid |sequence.140:20| :skolemid |2224| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@21 |f#0@@54| |run#0@@30|) |i#1@@12|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@21 |f#0@@54| |run#0@@30|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |2225| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@21 |f#0@@54| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@34 T@U) ($Heap@@22 T@U) (|f#0@@55| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@34) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@55| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@31| (TSeq Sequences._default.Filter$E@@3)))) (and (=> (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@34 $Heap@@22 |f#0@@55| |run#0@@31|) (forall ((|i#2@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@7|) (< |i#2@@7| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@55| (|Seq#Index| |run#0@@31| |i#2@@7|)))) :qid |sequence.138:21| :skolemid |2226| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@7|)) ))) (=> (forall ((|i#2@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@8|) (< |i#2@@8| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@55| (|Seq#Index| |run#0@@31| |i#2@@8|)))) :qid |sequence.138:21| :skolemid |2226| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@8|)) )) (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@34 $Heap@@22 |f#0@@55| |run#0@@31|)))) :qid |unknown.0:0| :skolemid |2227| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@34 $Heap@@22 |f#0@@55| |run#0@@31|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@35 T@U) ($Heap@@23 T@U) (|f#0@@56| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@35) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@56| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@56| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@32| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@56| (|Seq#Index| |run#0@@32| |i#2@@9|)))) :qid |sequence.138:21| :skolemid |2226| :pattern ( (|Seq#Index| |run#0@@32| |i#2@@9|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@56| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@35) $Heap@@23 |f#0@@56| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@56| (|Seq#Index| |run#0@@32| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@32| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@35 $Heap@@23 |f#0@@56| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2228| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@35) $Heap@@23 |f#0@@56| |run#0@@32|)) ))))
(assert (forall ((arg0@@382 T@U) (arg1@@175 T@U) (arg2@@120 T@U) (arg3@@92 T@U) (arg4@@81 T@U) (arg5@@65 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@382 arg1@@175 arg2@@120 arg3@@92 arg4@@81 arg5@@65)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@382 arg1@@175 arg2@@120 arg3@@92 arg4@@81 arg5@@65)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@36 T@U) (|f#0@@57| T@U) (|init#0| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@36) LayerTypeType)) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@36) |f#0@@57| |init#0| |run#0@@33|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@36 |f#0@@57| |init#0| |run#0@@33|))) :qid |unknown.0:0| :skolemid |2229| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@36) |f#0@@57| |init#0| |run#0@@33|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@37 T@U) (|f#0@@58| T@U) (|init#0@@0| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@37) LayerTypeType)) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@37 |f#0@@58| |init#0@@0| |run#0@@34|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@58| |init#0@@0| |run#0@@34|))) :qid |unknown.0:0| :skolemid |2230| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@37) |f#0@@58| |init#0@@0| |run#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@38 T@U) (|f#0@@59| T@U) (|init#0@@1| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@38) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@59| |init#0@@1| |run#0@@35|) (and (and ($Is |f#0@@59| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@35| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@38 |f#0@@59| |init#0@@1| |run#0@@35|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |2231| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@38 |f#0@@59| |init#0@@1| |run#0@@35|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@39 T@U) ($Heap@@24 T@U) (|f#0@@60| T@U) (|init#0@@2| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@39) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@36|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@60| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@36| (TSeq Sequences._default.FoldLeft$E@@2)))) (and (=> (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@39 |f#0@@60| |init#0@@2| |run#0@@36|) true) (=> true (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@39 |f#0@@60| |init#0@@2| |run#0@@36|)))) :qid |unknown.0:0| :skolemid |2232| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@39 |f#0@@60| |init#0@@2| |run#0@@36|) ($IsGoodHeap $Heap@@24)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@40 T@U) ($Heap@@25 T@U) (|f#0@@61| T@U) (|init#0@@3| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@40) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@61| |init#0@@3| |run#0@@37|) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@37| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@37|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@61| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@61| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@40) |f#0@@61| |init#0@@3| |run#0@@37|) (ite (= (|Seq#Length| |run#0@@37|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@40 |f#0@@61| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@61| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |2233| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@40) |f#0@@61| |init#0@@3| |run#0@@37|) ($IsGoodHeap $Heap@@25)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@41 T@U) ($Heap@@26 T@U) (|f#0@@62| T@U) (|init#0@@4| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@41) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@62| |init#0@@4| (Lit |run#0@@38|)) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@38| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@62| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@62| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@41) |f#0@@62| |init#0@@4| (Lit |run#0@@38|)) (ite (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@41) |f#0@@62| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@62| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2234| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@41) |f#0@@62| |init#0@@4| (Lit |run#0@@38|)) ($IsGoodHeap $Heap@@26)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@42 T@U) ($Heap@@27 T@U) (|f#0@@63| T@U) (|init#0@@5| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@42) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@63|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@39| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@63|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@63|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@42) (Lit |f#0@@63|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (ite (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@42) (Lit |f#0@@63|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@63|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2235| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@42) (Lit |f#0@@63|) (Lit |init#0@@5|) (Lit |run#0@@39|)) ($IsGoodHeap $Heap@@27)) ))))
(assert (forall ((arg0@@383 T@U) (arg1@@176 T@U) (arg2@@121 T@U) (arg3@@93 T@U) (arg4@@82 T@U) (arg5@@66 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@383 arg1@@176 arg2@@121 arg3@@93 arg4@@82 arg5@@66)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@383 arg1@@176 arg2@@121 arg3@@93 arg4@@82 arg5@@66)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@43 T@U) (|f#0@@64| T@U) (|init#0@@6| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@43) LayerTypeType)) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@43) |f#0@@64| |init#0@@6| |run#0@@40|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@43 |f#0@@64| |init#0@@6| |run#0@@40|))) :qid |unknown.0:0| :skolemid |2236| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@43) |f#0@@64| |init#0@@6| |run#0@@40|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@44 T@U) (|f#0@@65| T@U) (|init#0@@7| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@41|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@44 |f#0@@65| |init#0@@7| |run#0@@41|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@65| |init#0@@7| |run#0@@41|))) :qid |unknown.0:0| :skolemid |2237| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@44) |f#0@@65| |init#0@@7| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@45 T@U) (|f#0@@66| T@U) (|init#0@@8| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type |f#0@@66|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@66| |init#0@@8| |run#0@@42|) (and (and ($Is |f#0@@66| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@42| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@45 |f#0@@66| |init#0@@8| |run#0@@42|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |2238| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@45 |f#0@@66| |init#0@@8| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@46 T@U) ($Heap@@28 T@U) (|f#0@@67| T@U) (|init#0@@9| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@67|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@67| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@43| (TSeq Sequences._default.FoldRight$E@@2)))) (and (=> (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@46 |f#0@@67| |init#0@@9| |run#0@@43|) true) (=> true (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@46 |f#0@@67| |init#0@@9| |run#0@@43|)))) :qid |unknown.0:0| :skolemid |2239| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@46 |f#0@@67| |init#0@@9| |run#0@@43|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@47 T@U) ($Heap@@29 T@U) (|f#0@@68| T@U) (|init#0@@10| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@68|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@68| |init#0@@10| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@68| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@44| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@68| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@47) |f#0@@68| |init#0@@10| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@29 |f#0@@68| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@47 |f#0@@68| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1))) (|Seq#Index| |run#0@@44| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |2240| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@47) |f#0@@68| |init#0@@10| |run#0@@44|) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@48 T@U) ($Heap@@30 T@U) (|f#0@@69| T@U) (|init#0@@11| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@69|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@69| |init#0@@11| (Lit |run#0@@45|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@69| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@45| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@69| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@48) |f#0@@69| |init#0@@11| (Lit |run#0@@45|)) (ite (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@30 |f#0@@69| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@48) |f#0@@69| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@45|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2241| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@48) |f#0@@69| |init#0@@11| (Lit |run#0@@45|)) ($IsGoodHeap $Heap@@30)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@49 T@U) ($Heap@@31 T@U) (|f#0@@70| T@U) (|init#0@@12| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@70|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@70| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@46| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@49) (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (ite (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@31 (Lit |f#0@@70|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@49) (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@46|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2242| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@49) (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit |run#0@@46|)) ($IsGoodHeap $Heap@@31)) ))))
(assert (forall ((arg0@@384 T@U) (arg1@@177 T@U) (arg2@@122 T@U) (arg3@@94 T@U) (arg4@@83 T@U) (arg5@@67 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@384 arg1@@177 arg2@@122 arg3@@94 arg4@@83 arg5@@67)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@384 arg1@@177 arg2@@122 arg3@@94 arg4@@83 arg5@@67)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@50 T@U) (|f#0@@71| T@U) (|init#0@@13| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@50) LayerTypeType)) (= (type |f#0@@71|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@50) |f#0@@71| |init#0@@13| |run#0@@47|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@50 |f#0@@71| |init#0@@13| |run#0@@47|))) :qid |unknown.0:0| :skolemid |2243| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@50) |f#0@@71| |init#0@@13| |run#0@@47|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@51 T@U) (|f#0@@72| T@U) (|init#0@@14| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@51) LayerTypeType)) (= (type |f#0@@72|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@51 |f#0@@72| |init#0@@14| |run#0@@48|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@72| |init#0@@14| |run#0@@48|))) :qid |unknown.0:0| :skolemid |2244| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@51) |f#0@@72| |init#0@@14| |run#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@52 T@U) (|f#0@@73| T@U) (|init#0@@15| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@52) LayerTypeType)) (= (type |f#0@@73|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@73| |init#0@@15| |run#0@@49|) (and (and ($Is |f#0@@73| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@49| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@52 |f#0@@73| |init#0@@15| |run#0@@49|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |2245| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@52 |f#0@@73| |init#0@@15| |run#0@@49|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@53 T@U) ($Heap@@32 T@U) (|f#0@@74| T@U) (|init#0@@16| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@74|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@74| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@50| (TSeq Sequences._default.FoldFromRight$E@@2)))) (and (=> (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@53 |f#0@@74| |init#0@@16| |run#0@@50|) true) (=> true (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@53 |f#0@@74| |init#0@@16| |run#0@@50|)))) :qid |unknown.0:0| :skolemid |2246| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@53 |f#0@@74| |init#0@@16| |run#0@@50|) ($IsGoodHeap $Heap@@32)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@54 T@U) ($Heap@@33 T@U) (|f#0@@75| T@U) (|init#0@@17| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@54) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@75|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@75| |init#0@@17| |run#0@@51|) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@75| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@51| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@51|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@75| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@54) |f#0@@75| |init#0@@17| |run#0@@51|) (ite (= (|Seq#Length| |run#0@@51|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@33 |f#0@@75| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@54 |f#0@@75| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@51|)))))) :qid |unknown.0:0| :skolemid |2247| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@54) |f#0@@75| |init#0@@17| |run#0@@51|) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@55 T@U) ($Heap@@34 T@U) (|f#0@@76| T@U) (|init#0@@18| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@55) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@76|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@76| |init#0@@18| (Lit |run#0@@52|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@76| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@52| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@76| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@55) |f#0@@76| |init#0@@18| (Lit |run#0@@52|)) (ite (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@34 |f#0@@76| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@55) |f#0@@76| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2248| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@55) |f#0@@76| |init#0@@18| (Lit |run#0@@52|)) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@56 T@U) ($Heap@@35 T@U) (|f#0@@77| T@U) (|init#0@@19| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@56) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@77|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@77| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@53| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@56) (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (ite (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@35 (Lit |f#0@@77|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@56) (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2249| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@56) (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit |run#0@@53|)) ($IsGoodHeap $Heap@@35)) ))))
(assert (forall ((arg0@@385 T@U) (arg1@@178 T@U) (arg2@@123 T@U) (arg3@@95 Int) ) (! (= (type (Sequences.__default.remove arg0@@385 arg1@@178 arg2@@123 arg3@@95)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@385 arg1@@178 arg2@@123 arg3@@95)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@57 T@U) (|s#0@@50| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@57) LayerTypeType)) (= (type |s#0@@50|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@57) |s#0@@50| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@57 |s#0@@50| |pos#0|))) :qid |unknown.0:0| :skolemid |2250| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@57) |s#0@@50| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@58 T@U) (|s#0@@51| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@58) LayerTypeType)) (= (type |s#0@@51|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@58 |s#0@@51| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@51| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |2251| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@58) |s#0@@51| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@59 T@U) (|s#0@@52| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@59) LayerTypeType)) (= (type |s#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@52| |pos#0@@1|) (and ($Is |s#0@@52| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@52|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@52| |pos#0@@1|)) (- (|Seq#Length| |s#0@@52|) 1)) (forall ((|i#0@@38| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@52| |pos#0@@1|) |i#0@@38|) (|Seq#Index| |s#0@@52| |i#0@@38|))) :qid |sequence.168:18| :skolemid |2252| :pattern ( (|Seq#Index| |s#0@@52| |i#0@@38|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@52| |pos#0@@1|) |i#0@@38|)) ))) (forall ((|i#1@@13| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@13|) (< |i#1@@13| (- (|Seq#Length| |s#0@@52|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@52| |pos#0@@1|) |i#1@@13|) (|Seq#Index| |s#0@@52| (+ |i#1@@13| 1)))) :qid |sequence.169:18| :skolemid |2253| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@52| |pos#0@@1|) |i#1@@13|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@52| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |2254| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@52| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@60 T@U) (|s#0@@53| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@60) LayerTypeType)) (= (type |s#0@@53|) (SeqType BoxType))) ($Is |s#0@@53| (TSeq Sequences._default.remove$A@@2))) (and (=> (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@60 |s#0@@53| |pos#0@@2|) (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@53|)))) (=> (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@53|))) (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@60 |s#0@@53| |pos#0@@2|)))) :qid |unknown.0:0| :skolemid |2255| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@60 |s#0@@53| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@61 T@U) (|s#0@@54| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@61) LayerTypeType)) (= (type |s#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@54| |pos#0@@3|) (and ($Is |s#0@@54| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@54|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@61) |s#0@@54| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@54| |pos#0@@3|) (|Seq#Drop| |s#0@@54| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |2256| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@61) |s#0@@54| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@62 T@U) (|s#0@@55| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@62) LayerTypeType)) (= (type |s#0@@55|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@55|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@55| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@55|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@62) (Lit |s#0@@55|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@55|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@55|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2257| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@62) (Lit |s#0@@55|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@386 T@U) (arg1@@179 T@U) (arg2@@124 T@U) (arg3@@96 T@U) (arg4@@84 Int) ) (! (= (type (Sequences.__default.insert arg0@@386 arg1@@179 arg2@@124 arg3@@96 arg4@@84)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@386 arg1@@179 arg2@@124 arg3@@96 arg4@@84)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@63 T@U) (|s#0@@56| T@U) (|a#0@@18| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@63) LayerTypeType)) (= (type |s#0@@56|) (SeqType BoxType))) (= (type |a#0@@18|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@63) |s#0@@56| |a#0@@18| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@63 |s#0@@56| |a#0@@18| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |2258| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@63) |s#0@@56| |a#0@@18| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@64 T@U) (|s#0@@57| T@U) (|a#0@@19| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@64) LayerTypeType)) (= (type |s#0@@57|) (SeqType BoxType))) (= (type |a#0@@19|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@64 |s#0@@57| |a#0@@19| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@57| |a#0@@19| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |2259| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@64) |s#0@@57| |a#0@@19| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@65 T@U) (|s#0@@58| T@U) (|a#0@@20| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@65) LayerTypeType)) (= (type |s#0@@58|) (SeqType BoxType))) (= (type |a#0@@20|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@58| |a#0@@20| |pos#0@@7|) (and (and ($Is |s#0@@58| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@20| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@58|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@58| |a#0@@20| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@58|) 1)) (forall ((|i#0@@39| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@58| |a#0@@20| |pos#0@@7|) |i#0@@39|) (|Seq#Index| |s#0@@58| |i#0@@39|)))) :qid |sequence.177:18| :skolemid |2260| :pattern ( (|Seq#Index| |s#0@@58| |i#0@@39|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@58| |a#0@@20| |pos#0@@7|) |i#0@@39|)) ))) (forall ((|i#1@@14| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@14|) (< |i#1@@14| (|Seq#Length| |s#0@@58|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@58| |a#0@@20| |pos#0@@7|) (+ |i#1@@14| 1)) (|Seq#Index| |s#0@@58| |i#1@@14|)))) :qid |sequence.178:18| :skolemid |2261| :pattern ( (|Seq#Index| |s#0@@58| |i#1@@14|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@58| |a#0@@20| |pos#0@@7|) |pos#0@@7|) |a#0@@20|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@58| |a#0@@20| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |2262| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@58| |a#0@@20| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@66 T@U) (|s#0@@59| T@U) (|a#0@@21| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@66) LayerTypeType)) (= (type |s#0@@59|) (SeqType BoxType))) (= (type |a#0@@21|) BoxType)) (and ($Is |s#0@@59| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@21| Sequences._default.insert$A@@2))) (and (=> (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@66 |s#0@@59| |a#0@@21| |pos#0@@8|) (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@59|)))) (=> (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@59|))) (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@66 |s#0@@59| |a#0@@21| |pos#0@@8|)))) :qid |unknown.0:0| :skolemid |2263| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@66 |s#0@@59| |a#0@@21| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@67 T@U) (|s#0@@60| T@U) (|a#0@@22| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@67) LayerTypeType)) (= (type |s#0@@60|) (SeqType BoxType))) (= (type |a#0@@22|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@60| |a#0@@22| |pos#0@@9|) (and (and ($Is |s#0@@60| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@22| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@60|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@67) |s#0@@60| |a#0@@22| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@60| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@22|)) (|Seq#Drop| |s#0@@60| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |2264| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@67) |s#0@@60| |a#0@@22| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@68 T@U) (|s#0@@61| T@U) (|a#0@@23| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@68) LayerTypeType)) (= (type |s#0@@61|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@61|) |a#0@@23| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@61| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@23| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@61|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@68) (Lit |s#0@@61|) |a#0@@23| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@61|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@23|)) (|Seq#Drop| (Lit |s#0@@61|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |2265| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@68) (Lit |s#0@@61|) |a#0@@23| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@69 T@U) (|s#0@@62| T@U) (|a#0@@24| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@69) LayerTypeType)) (= (type |s#0@@62|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@62|) (Lit |a#0@@24|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@62| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@24| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@62|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@69) (Lit |s#0@@62|) (Lit |a#0@@24|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@62|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@24|))) (|Seq#Drop| (Lit |s#0@@62|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |2266| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@69) (Lit |s#0@@62|) (Lit |a#0@@24|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@387 T@U) (arg1@@180 T@U) (arg2@@125 T@U) (arg3@@97 T@U) (arg4@@85 T@U) (arg5@@68 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@387 arg1@@180 arg2@@125 arg3@@97 arg4@@85 arg5@@68)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@387 arg1@@180 arg2@@125 arg3@@97 arg4@@85 arg5@@68)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@70 T@U) (|s#0@@63| T@U) (|a#0@@25| T@U) (|b#0@@12| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@70) LayerTypeType)) (= (type |s#0@@63|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (= (type |b#0@@12|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@70) |s#0@@63| |a#0@@25| |b#0@@12| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@70 |s#0@@63| |a#0@@25| |b#0@@12| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |2267| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@70) |s#0@@63| |a#0@@25| |b#0@@12| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@71 T@U) (|s#0@@64| T@U) (|a#0@@26| T@U) (|b#0@@13| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@71) LayerTypeType)) (= (type |s#0@@64|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (= (type |b#0@@13|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@71 |s#0@@64| |a#0@@26| |b#0@@13| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@64| |a#0@@26| |b#0@@13| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |2268| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@71) |s#0@@64| |a#0@@26| |b#0@@13| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@72 T@U) (|s#0@@65| T@U) (|a#0@@27| T@U) (|b#0@@14| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@72) LayerTypeType)) (= (type |s#0@@65|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (= (type |b#0@@14|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@65| |a#0@@27| |b#0@@14| |pos#0@@14|) (and (and (and ($Is |s#0@@65| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@27| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@14| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@65|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@65| |a#0@@27| |b#0@@14| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@65|) 1)) (forall ((|i#0@@40| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@65| |a#0@@27| |b#0@@14| |pos#0@@14|) |i#0@@40|) (|Seq#Index| |s#0@@65| |i#0@@40|)))) :qid |sequence.202:18| :skolemid |2269| :pattern ( (|Seq#Index| |s#0@@65| |i#0@@40|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@65| |a#0@@27| |b#0@@14| |pos#0@@14|) |i#0@@40|)) ))) (forall ((|i#1@@15| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@15|) (< |i#1@@15| (|Seq#Length| |s#0@@65|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@65| |a#0@@27| |b#0@@14| |pos#0@@14|) (+ |i#1@@15| 1)) (|Seq#Index| |s#0@@65| |i#1@@15|)))) :qid |sequence.203:18| :skolemid |2270| :pattern ( (|Seq#Index| |s#0@@65| |i#1@@15|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@65| |a#0@@27| |b#0@@14| |pos#0@@14|) |pos#0@@14|) |a#0@@27|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@65| |a#0@@27| |b#0@@14| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@14|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@65| |a#0@@27| |b#0@@14| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |2271| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@65| |a#0@@27| |b#0@@14| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@73 T@U) (|s#0@@66| T@U) (|a#0@@28| T@U) (|b#0@@15| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@73) LayerTypeType)) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (= (type |b#0@@15|) BoxType)) (and (and ($Is |s#0@@66| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@28| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@15| Sequences._default.replace1with2$A@@2))) (and (=> (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@73 |s#0@@66| |a#0@@28| |b#0@@15| |pos#0@@15|) (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@66|)))) (=> (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@66|))) (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@73 |s#0@@66| |a#0@@28| |b#0@@15| |pos#0@@15|)))) :qid |unknown.0:0| :skolemid |2272| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@73 |s#0@@66| |a#0@@28| |b#0@@15| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@74 T@U) (|s#0@@67| T@U) (|a#0@@29| T@U) (|b#0@@16| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@74) LayerTypeType)) (= (type |s#0@@67|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (= (type |b#0@@16|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@67| |a#0@@29| |b#0@@16| |pos#0@@16|) (and (and (and ($Is |s#0@@67| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@29| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@16| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@67|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@74) |s#0@@67| |a#0@@29| |b#0@@16| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@67| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@29|) |b#0@@16|)) (|Seq#Drop| |s#0@@67| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |2273| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@74) |s#0@@67| |a#0@@29| |b#0@@16| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@75 T@U) (|s#0@@68| T@U) (|a#0@@30| T@U) (|b#0@@17| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@75) LayerTypeType)) (= (type |s#0@@68|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (= (type |b#0@@17|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@68|) |a#0@@30| |b#0@@17| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@68| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@30| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@17| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@68|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@75) (Lit |s#0@@68|) |a#0@@30| |b#0@@17| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@68|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@30|) |b#0@@17|)) (|Seq#Drop| (Lit |s#0@@68|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2274| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@75) (Lit |s#0@@68|) |a#0@@30| |b#0@@17| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@76 T@U) (|s#0@@69| T@U) (|a#0@@31| T@U) (|b#0@@18| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@76) LayerTypeType)) (= (type |s#0@@69|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (= (type |b#0@@18|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@69|) (Lit |a#0@@31|) (Lit |b#0@@18|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@69| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@31| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@18| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@69|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@76) (Lit |s#0@@69|) (Lit |a#0@@31|) (Lit |b#0@@18|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@69|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@31|)) (Lit |b#0@@18|))) (|Seq#Drop| (Lit |s#0@@69|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2275| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@76) (Lit |s#0@@69|) (Lit |a#0@@31|) (Lit |b#0@@18|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@388 T@U) (arg1@@181 T@U) (arg2@@126 T@U) (arg3@@98 T@U) (arg4@@86 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@388 arg1@@181 arg2@@126 arg3@@98 arg4@@86)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@388 arg1@@181 arg2@@126 arg3@@98 arg4@@86)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@77 T@U) (|s#0@@70| T@U) (|a#0@@32| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@77) LayerTypeType)) (= (type |s#0@@70|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@77) |s#0@@70| |a#0@@32| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@77 |s#0@@70| |a#0@@32| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |2276| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@77) |s#0@@70| |a#0@@32| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@78 T@U) (|s#0@@71| T@U) (|a#0@@33| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@78) LayerTypeType)) (= (type |s#0@@71|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@78 |s#0@@71| |a#0@@33| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@71| |a#0@@33| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |2277| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@78) |s#0@@71| |a#0@@33| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@79 T@U) (|s#0@@72| T@U) (|a#0@@34| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@79) LayerTypeType)) (= (type |s#0@@72|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@72| |a#0@@34| |pos#0@@21|) (and (and ($Is |s#0@@72| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@34| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@72|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@72| |a#0@@34| |pos#0@@21|)) (- (|Seq#Length| |s#0@@72|) 1)) (forall ((|i#0@@41| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@72| |a#0@@34| |pos#0@@21|) |i#0@@41|) (|Seq#Index| |s#0@@72| |i#0@@41|)))) :qid |sequence.221:18| :skolemid |2278| :pattern ( (|Seq#Index| |s#0@@72| |i#0@@41|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@72| |a#0@@34| |pos#0@@21|) |i#0@@41|)) ))) (forall ((|i#1@@16| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@16|) (< |i#1@@16| (- (|Seq#Length| |s#0@@72|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@72| |a#0@@34| |pos#0@@21|) |i#1@@16|) (|Seq#Index| |s#0@@72| (+ |i#1@@16| 1))))) :qid |sequence.222:18| :skolemid |2279| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@72| |a#0@@34| |pos#0@@21|) |i#1@@16|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@72| |a#0@@34| |pos#0@@21|) |pos#0@@21|) |a#0@@34|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@72| |a#0@@34| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |2280| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@72| |a#0@@34| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@80 T@U) (|s#0@@73| T@U) (|a#0@@35| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@80) LayerTypeType)) (= (type |s#0@@73|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (and ($Is |s#0@@73| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@35| Sequences._default.replace2with1$A@@2))) (and (=> (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@80 |s#0@@73| |a#0@@35| |pos#0@@22|) (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@73|) 1)))) (=> (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@73|) 1))) (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@80 |s#0@@73| |a#0@@35| |pos#0@@22|)))) :qid |unknown.0:0| :skolemid |2281| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@80 |s#0@@73| |a#0@@35| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@81 T@U) (|s#0@@74| T@U) (|a#0@@36| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@81) LayerTypeType)) (= (type |s#0@@74|) (SeqType BoxType))) (= (type |a#0@@36|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@74| |a#0@@36| |pos#0@@23|) (and (and ($Is |s#0@@74| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@36| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@74|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@81) |s#0@@74| |a#0@@36| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@74| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@36|)) (|Seq#Drop| |s#0@@74| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |2282| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@81) |s#0@@74| |a#0@@36| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@82 T@U) (|s#0@@75| T@U) (|a#0@@37| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@82) LayerTypeType)) (= (type |s#0@@75|) (SeqType BoxType))) (= (type |a#0@@37|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@75|) |a#0@@37| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@75| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@37| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@75|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@82) (Lit |s#0@@75|) |a#0@@37| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@75|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@37|)) (|Seq#Drop| (Lit |s#0@@75|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2283| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@82) (Lit |s#0@@75|) |a#0@@37| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@83 T@U) (|s#0@@76| T@U) (|a#0@@38| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |s#0@@76|) (SeqType BoxType))) (= (type |a#0@@38|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@76|) (Lit |a#0@@38|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@76| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@38| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@76|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@83) (Lit |s#0@@76|) (Lit |a#0@@38|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@76|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@38|))) (|Seq#Drop| (Lit |s#0@@76|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2284| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@83) (Lit |s#0@@76|) (Lit |a#0@@38|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@389 T@U) (arg1@@182 T@U) (arg2@@127 T@U) (arg3@@99 T@U) ) (! (= (type (Sequences.__default.concat arg0@@389 arg1@@182 arg2@@127 arg3@@99)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@389 arg1@@182 arg2@@127 arg3@@99)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@84 T@U) (|a#0@@39| T@U) (|b#0@@19| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |a#0@@39|) (SeqType BoxType))) (= (type |b#0@@19|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@84) |a#0@@39| |b#0@@19|) (Sequences.__default.concat Sequences._default.concat$A $ly@@84 |a#0@@39| |b#0@@19|))) :qid |unknown.0:0| :skolemid |2285| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@84) |a#0@@39| |b#0@@19|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@85 T@U) (|a#0@@40| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) (= (type |b#0@@20|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@85 |a#0@@40| |b#0@@20|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@40| |b#0@@20|))) :qid |unknown.0:0| :skolemid |2286| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@85) |a#0@@40| |b#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@86 T@U) (|a#0@@41| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@41| |b#0@@21|) (and ($Is |a#0@@41| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@21| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|)) (+ (|Seq#Length| |a#0@@41|) (|Seq#Length| |b#0@@21|))) (forall ((|i#0@@42| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@42|) (< |i#0@@42| (|Seq#Length| |a#0@@41|))) (= (|Seq#Index| |a#0@@41| |i#0@@42|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|) |i#0@@42|)))) :qid |sequence.230:18| :skolemid |2287| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|) |i#0@@42|)) :pattern ( (|Seq#Index| |a#0@@41| |i#0@@42|)) ))) (forall ((|i#1@@17| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@17|) (< |i#1@@17| (|Seq#Length| |b#0@@21|))) (= (|Seq#Index| |b#0@@21| |i#1@@17|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|) (+ (|Seq#Length| |a#0@@41|) |i#1@@17|))))) :qid |sequence.231:18| :skolemid |2288| :pattern ( (|Seq#Index| |b#0@@21| |i#1@@17|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |2289| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@87 T@U) (|a#0@@42| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (and ($Is |a#0@@42| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@22| (TSeq Sequences._default.concat$A@@2)))) (and (=> (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@87 |a#0@@42| |b#0@@22|) true) (=> true (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@87 |a#0@@42| |b#0@@22|)))) :qid |unknown.0:0| :skolemid |2290| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@87 |a#0@@42| |b#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@88 T@U) (|a#0@@43| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |a#0@@43|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@43| |b#0@@23|) (and ($Is |a#0@@43| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@23| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@88) |a#0@@43| |b#0@@23|) (|Seq#Append| |a#0@@43| |b#0@@23|))) :qid |unknown.0:0| :skolemid |2291| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@88) |a#0@@43| |b#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@89 T@U) (|a#0@@44| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@44|) (Lit |b#0@@24|)) (and ($Is |a#0@@44| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@24| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@89) (Lit |a#0@@44|) (Lit |b#0@@24|)) (|Seq#Append| |a#0@@44| |b#0@@24|))) :qid |unknown.0:0| :weight 3 :skolemid |2292| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@89) (Lit |a#0@@44|) (Lit |b#0@@24|))) ))))
(assert (forall ((arg0@@390 T@U) (arg1@@183 T@U) (arg2@@128 T@U) (arg3@@100 T@U) (arg4@@87 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@390 arg1@@183 arg2@@128 arg3@@100 arg4@@87)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@390 arg1@@183 arg2@@128 arg3@@100 arg4@@87)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@90 T@U) (|a#0@@45| T@U) (|b#0@@25| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@90) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (= (type |b#0@@25|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@90) |a#0@@45| |b#0@@25| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@90 |a#0@@45| |b#0@@25| |c#0@@3|))) :qid |unknown.0:0| :skolemid |2293| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@90) |a#0@@45| |b#0@@25| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@91 T@U) (|a#0@@46| T@U) (|b#0@@26| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (= (type |b#0@@26|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@91 |a#0@@46| |b#0@@26| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@46| |b#0@@26| |c#0@@4|))) :qid |unknown.0:0| :skolemid |2294| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@91) |a#0@@46| |b#0@@26| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@92 T@U) (|a#0@@47| T@U) (|b#0@@27| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@27|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@47| |b#0@@27| |c#0@@5|) (and (and ($Is |a#0@@47| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@27| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@47|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@43| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@43|) (< |i#0@@43| (|Seq#Length| |a#0@@47|))) (= (|Seq#Index| |a#0@@47| |i#0@@43|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) |i#0@@43|)))) :qid |sequence.238:18| :skolemid |2295| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) |i#0@@43|)) :pattern ( (|Seq#Index| |a#0@@47| |i#0@@43|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) (|Seq#Length| |a#0@@47|)) |b#0@@27|)) (forall ((|i#1@@18| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@18|) (< |i#1@@18| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@18|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@47|) 1) |i#1@@18|))))) :qid |sequence.240:18| :skolemid |2296| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@18|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |2297| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@93 T@U) (|a#0@@48| T@U) (|b#0@@28| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@28|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@48| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@28| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (and (=> (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@93 |a#0@@48| |b#0@@28| |c#0@@6|) true) (=> true (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@93 |a#0@@48| |b#0@@28| |c#0@@6|)))) :qid |unknown.0:0| :skolemid |2298| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@93 |a#0@@48| |b#0@@28| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@94 T@U) (|a#0@@49| T@U) (|b#0@@29| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@29|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@49| |b#0@@29| |c#0@@7|) (and (and ($Is |a#0@@49| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@29| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@94) |a#0@@49| |b#0@@29| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@49| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@29|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |2299| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@94) |a#0@@49| |b#0@@29| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@95 T@U) (|a#0@@50| T@U) (|b#0@@30| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@30|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@50|) |b#0@@30| (Lit |c#0@@8|)) (and (and ($Is |a#0@@50| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@30| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@95) (Lit |a#0@@50|) |b#0@@30| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@50| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@30|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |2300| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@95) (Lit |a#0@@50|) |b#0@@30| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@96 T@U) (|a#0@@51| T@U) (|b#0@@31| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@31|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@51|) (Lit |b#0@@31|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@51| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@31| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@96) (Lit |a#0@@51|) (Lit |b#0@@31|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@51| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@31|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |2301| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@96) (Lit |a#0@@51|) (Lit |b#0@@31|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@391 T@U) (arg1@@184 T@U) (arg2@@129 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@391 arg1@@184 arg2@@129)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@391 arg1@@184 arg2@@129)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@97 T@U) (|a#0@@52| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@97) |a#0@@52|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@97 |a#0@@52|))) :qid |unknown.0:0| :skolemid |2302| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@97) |a#0@@52|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@98 T@U) (|a#0@@53| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@98 |a#0@@53|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@53|))) :qid |unknown.0:0| :skolemid |2303| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@98) |a#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@99 T@U) (|a#0@@54| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@54|) ($Is |a#0@@54| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@99 |a#0@@54|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |2304| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@99 |a#0@@54|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@100 T@U) (|a#0@@55| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) ($Is |a#0@@55| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (and (=> (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@100 |a#0@@55|) true) (=> true (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@100 |a#0@@55|)))) :qid |unknown.0:0| :skolemid |2305| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@100 |a#0@@55|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@101 T@U) (|a#0@@56| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@56|) ($Is |a#0@@56| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@56|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@101) |a#0@@56|) (ite (= (|Seq#Length| |a#0@@56|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@101 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|))))))) :qid |unknown.0:0| :skolemid |2306| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@101) |a#0@@56|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@102 T@U) (|a#0@@57| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@57|)) ($Is |a#0@@57| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@57|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@102) (Lit |a#0@@57|)) (ite (= (|Seq#Length| (Lit |a#0@@57|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@102) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2307| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@102) (Lit |a#0@@57|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@103 T@U) (|a#0@@58| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@103) |a#0@@58| |b#0@@32|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@103 |a#0@@58| |b#0@@32|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@103 |a#0@@58| |b#0@@32|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@103) |a#0@@58| |b#0@@32|)))) :qid |unknown.0:0| :skolemid |2308| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@103) |a#0@@58| |b#0@@32|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@104 T@U) (|a#0@@59| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@104 |a#0@@59| |b#0@@33|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@59| |b#0@@33|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@59| |b#0@@33|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@104 |a#0@@59| |b#0@@33|)))) :qid |unknown.0:0| :skolemid |2309| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@104) |a#0@@59| |b#0@@33|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@105 T@U) (|a#0@@60| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@60| |b#0@@34|) (and ($Is |a#0@@60| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@34| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@105 |a#0@@60| |b#0@@34|)) (<= (|Seq#Length| |a#0@@60|) (|Seq#Length| |b#0@@34|))) :qid |unknown.0:0| :skolemid |2310| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@105 |a#0@@60| |b#0@@34|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@106 T@U) (|a#0@@61| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (and ($Is |a#0@@61| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@35| (TSeq Sequences._default.IsPrefix$A@@2)))) (and (=> (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@106 |a#0@@61| |b#0@@35|) true) (=> true (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@106 |a#0@@61| |b#0@@35|)))) :qid |unknown.0:0| :skolemid |2311| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@106 |a#0@@61| |b#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@107 T@U) (|a#0@@62| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@62| |b#0@@36|) (and ($Is |a#0@@62| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@36| (TSeq Sequences._default.IsPrefix$A@@3))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@107) |a#0@@62| |b#0@@36|) (and (<= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|)) (|Seq#Equal| |a#0@@62| (|Seq#Take| |b#0@@36| (|Seq#Length| |a#0@@62|))))) (=> (and (<= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|)) (|Seq#Equal| |a#0@@62| (|Seq#Take| |b#0@@36| (|Seq#Length| |a#0@@62|)))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@107) |a#0@@62| |b#0@@36|)))) :qid |unknown.0:0| :skolemid |2312| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@107) |a#0@@62| |b#0@@36|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@108 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@63|) (Lit |b#0@@37|)) (and ($Is |a#0@@63| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@37| (TSeq Sequences._default.IsPrefix$A@@4))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@108) (Lit |a#0@@63|) (Lit |b#0@@37|)) (and (<= (|Seq#Length| (Lit |a#0@@63|)) (|Seq#Length| (Lit |b#0@@37|))) (|Seq#Equal| |a#0@@63| (|Seq#Take| (Lit |b#0@@37|) (|Seq#Length| (Lit |a#0@@63|)))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@63|)) (|Seq#Length| (Lit |b#0@@37|))) (|Seq#Equal| |a#0@@63| (|Seq#Take| (Lit |b#0@@37|) (|Seq#Length| (Lit |a#0@@63|))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@108) (Lit |a#0@@63|) (Lit |b#0@@37|))))) :qid |unknown.0:0| :weight 3 :skolemid |2313| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@108) (Lit |a#0@@63|) (Lit |b#0@@37|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@109 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@109) |a#0@@64| |b#0@@38|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@109 |a#0@@64| |b#0@@38|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@109 |a#0@@64| |b#0@@38|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@109) |a#0@@64| |b#0@@38|)))) :qid |unknown.0:0| :skolemid |2314| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@109) |a#0@@64| |b#0@@38|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@110 T@U) (|a#0@@65| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@110 |a#0@@65| |b#0@@39|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@65| |b#0@@39|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@65| |b#0@@39|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@110 |a#0@@65| |b#0@@39|)))) :qid |unknown.0:0| :skolemid |2315| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@110) |a#0@@65| |b#0@@39|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@111 T@U) (|a#0@@66| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@66| |b#0@@40|) (and ($Is |a#0@@66| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@40| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |2316| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@111 |a#0@@66| |b#0@@40|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@112 T@U) (|a#0@@67| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (and ($Is |a#0@@67| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@41| (TSeq Sequences._default.IsSuffix$A@@2)))) (and (=> (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@112 |a#0@@67| |b#0@@41|) true) (=> true (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@112 |a#0@@67| |b#0@@41|)))) :qid |unknown.0:0| :skolemid |2317| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@112 |a#0@@67| |b#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@113 T@U) (|a#0@@68| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@68| |b#0@@42|) (and ($Is |a#0@@68| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@42| (TSeq Sequences._default.IsSuffix$A@@3))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@113) |a#0@@68| |b#0@@42|) (and (<= (|Seq#Length| |a#0@@68|) (|Seq#Length| |b#0@@42|)) (|Seq#Equal| |a#0@@68| (|Seq#Drop| |b#0@@42| (- (|Seq#Length| |b#0@@42|) (|Seq#Length| |a#0@@68|)))))) (=> (and (<= (|Seq#Length| |a#0@@68|) (|Seq#Length| |b#0@@42|)) (|Seq#Equal| |a#0@@68| (|Seq#Drop| |b#0@@42| (- (|Seq#Length| |b#0@@42|) (|Seq#Length| |a#0@@68|))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@113) |a#0@@68| |b#0@@42|)))) :qid |unknown.0:0| :skolemid |2318| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@113) |a#0@@68| |b#0@@42|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@114 T@U) (|a#0@@69| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@69|) (Lit |b#0@@43|)) (and ($Is |a#0@@69| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@43| (TSeq Sequences._default.IsSuffix$A@@4))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@114) (Lit |a#0@@69|) (Lit |b#0@@43|)) (and (<= (|Seq#Length| (Lit |a#0@@69|)) (|Seq#Length| (Lit |b#0@@43|))) (|Seq#Equal| |a#0@@69| (|Seq#Drop| (Lit |b#0@@43|) (- (|Seq#Length| (Lit |b#0@@43|)) (|Seq#Length| (Lit |a#0@@69|))))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@69|)) (|Seq#Length| (Lit |b#0@@43|))) (|Seq#Equal| |a#0@@69| (|Seq#Drop| (Lit |b#0@@43|) (- (|Seq#Length| (Lit |b#0@@43|)) (|Seq#Length| (Lit |a#0@@69|)))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@114) (Lit |a#0@@69|) (Lit |b#0@@43|))))) :qid |unknown.0:0| :weight 3 :skolemid |2319| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@114) (Lit |a#0@@69|) (Lit |b#0@@43|))) ))))
(assert (forall ((arg0@@392 T@U) (arg1@@185 T@U) (arg2@@130 T@U) (arg3@@101 T@U) (arg4@@88 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@392 arg1@@185 arg2@@130 arg3@@101 arg4@@88)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@392 arg1@@185 arg2@@130 arg3@@101 arg4@@88)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@115 T@U) (|run#0@@54| T@U) (|needle#0| T@U) (|i#0@@44| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |run#0@@54|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@115) |run#0@@54| |needle#0| |i#0@@44|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@115 |run#0@@54| |needle#0| |i#0@@44|))) :qid |unknown.0:0| :skolemid |2320| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@115) |run#0@@54| |needle#0| |i#0@@44|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@116 T@U) (|run#0@@55| T@U) (|needle#0@@0| T@U) (|i#0@@45| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |run#0@@55|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@116 |run#0@@55| |needle#0@@0| |i#0@@45|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@55| |needle#0@@0| |i#0@@45|))) :qid |unknown.0:0| :skolemid |2321| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@116) |run#0@@55| |needle#0@@0| |i#0@@45|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@117 T@U) (|run#0@@56| T@U) (|needle#0@@1| T@U) (|i#0@@46| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |run#0@@56|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@56| |needle#0@@1| |i#0@@46|) (and (and ($Is |run#0@@56| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@46|) (<= |i#0@@46| (|Seq#Length| |run#0@@56|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@46|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@46|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@46|)))) (|Seq#Length| |run#0@@56|))) (= (|Seq#Index| |run#0@@56| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@46|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@46|)) (forall ((|j#0@@6| Int) ) (!  (=> (and (<= |i#0@@46| |j#0@@6|) (< |j#0@@6| (|Seq#Length| |run#0@@56|))) (not (= (|Seq#Index| |run#0@@56| |j#0@@6|) |needle#0@@1|))) :qid |sequence.340:32| :skolemid |2322| :pattern ( (|Seq#Index| |run#0@@56| |j#0@@6|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@46|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2323| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@46|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@118 T@U) (|run#0@@57| T@U) (|needle#0@@2| T@U) (|i#0@@47| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |run#0@@57|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@57| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (and (=> (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@118 |run#0@@57| |needle#0@@2| |i#0@@47|) (and (<= (LitInt 0) |i#0@@47|) (<= |i#0@@47| (|Seq#Length| |run#0@@57|)))) (=> (and (<= (LitInt 0) |i#0@@47|) (<= |i#0@@47| (|Seq#Length| |run#0@@57|))) (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@118 |run#0@@57| |needle#0@@2| |i#0@@47|)))) :qid |unknown.0:0| :skolemid |2324| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@118 |run#0@@57| |needle#0@@2| |i#0@@47|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@119 T@U) (|run#0@@58| T@U) (|needle#0@@3| T@U) (|i#0@@48| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| |i#0@@48|) (and (and ($Is |run#0@@58| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@48|) (<= |i#0@@48| (|Seq#Length| |run#0@@58|)))))) (and (=> (not (= |i#0@@48| (|Seq#Length| |run#0@@58|))) (=> (not (= (|Seq#Index| |run#0@@58| |i#0@@48|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| (+ |i#0@@48| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@119) |run#0@@58| |needle#0@@3| |i#0@@48|) (ite (= |i#0@@48| (|Seq#Length| |run#0@@58|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@58| |i#0@@48|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@48|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@119 |run#0@@58| |needle#0@@3| (+ |i#0@@48| 1))))))) :qid |unknown.0:0| :skolemid |2325| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@119) |run#0@@58| |needle#0@@3| |i#0@@48|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@120 T@U) (|run#0@@59| T@U) (|needle#0@@4| T@U) (|i#0@@49| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@49|)) (and (and ($Is |run#0@@59| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@49|)) (<= (LitInt |i#0@@49|) (|Seq#Length| (Lit |run#0@@59|))))))) (and (=> (not (= (LitInt |i#0@@49|) (|Seq#Length| (Lit |run#0@@59|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@49|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@49| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@120) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@49|)) (ite (= (LitInt |i#0@@49|) (|Seq#Length| (Lit |run#0@@59|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@49|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@49|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@120) (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@49| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2326| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@120) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@49|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@121 T@U) (|run#0@@60| T@U) (|needle#0@@5| T@U) (|i#0@@50| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@50|)) (and (and ($Is |run#0@@60| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@50|)) (<= (LitInt |i#0@@50|) (|Seq#Length| (Lit |run#0@@60|))))))) (and (=> (not (= (LitInt |i#0@@50|) (|Seq#Length| (Lit |run#0@@60|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@50|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@50| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@121) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@50|)) (ite (= (LitInt |i#0@@50|) (|Seq#Length| (Lit |run#0@@60|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@50|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@50|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@121) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@50| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2327| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@121) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@50|))) ))))
(assert (forall ((arg0@@393 T@U) (arg1@@186 T@U) (arg2@@131 T@U) (arg3@@102 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@393 arg1@@186 arg2@@131 arg3@@102)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@393 arg1@@186 arg2@@131 arg3@@102)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@122 T@U) (|run#0@@61| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@122) |run#0@@61| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@122 |run#0@@61| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |2328| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@122) |run#0@@61| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@123 T@U) (|run#0@@62| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@123 |run#0@@62| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@62| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |2329| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@123) |run#0@@62| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@124 T@U) (|run#0@@63| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@63| |needle#0@@8|) (and ($Is |run#0@@63| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|)))) (|Seq#Length| |run#0@@63|))) (= (|Seq#Index| |run#0@@63| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|)) (forall ((|i#0@@51| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@51|) (< |i#0@@51| (|Seq#Length| |run#0@@63|))) (not (= (|Seq#Index| |run#0@@63| |i#0@@51|) |needle#0@@8|))) :qid |sequence.350:32| :skolemid |2330| :pattern ( (|Seq#Index| |run#0@@63| |i#0@@51|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2331| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@125 T@U) (|run#0@@64| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@64| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (and (=> (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@125 |run#0@@64| |needle#0@@9|) true) (=> true (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@125 |run#0@@64| |needle#0@@9|)))) :qid |unknown.0:0| :skolemid |2332| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@125 |run#0@@64| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@126 T@U) (|run#0@@65| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10|) (and ($Is |run#0@@65| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@126) |run#0@@65| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@65| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |2333| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@126) |run#0@@65| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@127 T@U) (|run#0@@66| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11|) (and ($Is |run#0@@66| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@127) (Lit |run#0@@66|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@66|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2334| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@127) (Lit |run#0@@66|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@128 T@U) (|run#0@@67| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|)) (and ($Is |run#0@@67| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@128) (Lit |run#0@@67|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2335| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@128) (Lit |run#0@@67|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@394 T@U) (arg1@@187 T@U) (arg2@@132 Int) (arg3@@103 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@394 arg1@@187 arg2@@132 arg3@@103)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@394 arg1@@187 arg2@@132 arg3@@103)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@129 T@U) (|length#0| Int) (|v#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |v#0@@3|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@129) |length#0| |v#0@@3|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@129 |length#0| |v#0@@3|))) :qid |unknown.0:0| :skolemid |2336| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@129) |length#0| |v#0@@3|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@130 T@U) (|length#0@@0| Int) (|v#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |v#0@@4|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@130 |length#0@@0| |v#0@@4|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@4|))) :qid |unknown.0:0| :skolemid |2337| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@130) |length#0@@0| |v#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@131 T@U) (|length#0@@1| Int) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@5|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@5| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@5|)) |length#0@@1|) (forall ((|i#0@@52| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@52|) (< |i#0@@52| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@5|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@5|) |i#0@@52|) |v#0@@5|)) :qid |sequence.357:18| :skolemid |2338| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@5|) |i#0@@52|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@5|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |2339| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@5|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@132 T@U) (|length#0@@2| Int) (|v#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |v#0@@6|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@6| Sequences._default.SeqOfLength$V@@2))) (and (=> (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@132 |length#0@@2| |v#0@@6|) true) (=> true (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@132 |length#0@@2| |v#0@@6|)))) :qid |unknown.0:0| :skolemid |2340| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@132 |length#0@@2| |v#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@133 T@U) (|length#0@@3| Int) (|v#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |v#0@@7|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@7|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@7| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@7|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@133) |length#0@@3| |v#0@@7|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@7|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@133 (- |length#0@@3| 1) |v#0@@7|)))))) :qid |unknown.0:0| :skolemid |2341| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@133) |length#0@@3| |v#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@134 T@U) (|length#0@@4| Int) (|v#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |v#0@@8|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@8|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@8| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@8|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@134) (LitInt |length#0@@4|) |v#0@@8|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@8|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@134) (LitInt (- |length#0@@4| 1)) |v#0@@8|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2342| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@134) (LitInt |length#0@@4|) |v#0@@8|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@135 T@U) (|length#0@@5| Int) (|v#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |v#0@@9|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@9|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@9| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@9|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@135) (LitInt |length#0@@5|) (Lit |v#0@@9|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@9|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@135) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@9|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2343| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@135) (LitInt |length#0@@5|) (Lit |v#0@@9|))) ))))
(assert (forall ((arg0@@395 T@U) (arg1@@188 T@U) (arg2@@133 T@U) (arg3@@104 Int) (arg4@@89 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@395 arg1@@188 arg2@@133 arg3@@104 arg4@@89)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@395 arg1@@188 arg2@@133 arg3@@104 arg4@@89)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@136 T@U) (|s#0@@77| T@U) (|i#0@@53| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |s#0@@77|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@136) |s#0@@77| |i#0@@53| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@136 |s#0@@77| |i#0@@53| |t#0|))) :qid |unknown.0:0| :skolemid |2344| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@136) |s#0@@77| |i#0@@53| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@137 T@U) (|s#0@@78| T@U) (|i#0@@54| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |s#0@@78|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@137 |s#0@@78| |i#0@@54| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@78| |i#0@@54| |t#0@@0|))) :qid |unknown.0:0| :skolemid |2345| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@137) |s#0@@78| |i#0@@54| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@138 T@U) (|s#0@@79| T@U) (|i#0@@55| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |s#0@@79|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@79| |i#0@@55| |t#0@@1|) (and (and (and ($Is |s#0@@79| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@55| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| (|Seq#Length| |s#0@@79|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@138 |s#0@@79| |i#0@@55| |t#0@@1|) (|Seq#Update| |s#0@@79| |i#0@@55| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@138 |s#0@@79| |i#0@@55| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |2346| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@138 |s#0@@79| |i#0@@55| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@139 T@U) (|s#0@@80| T@U) (|i#0@@56| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |s#0@@80|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@80| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (and (=> (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@139 |s#0@@80| |i#0@@56| |t#0@@2|) (and (< (+ |i#0@@56| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| (|Seq#Length| |s#0@@80|))))) (=> (and (< (+ |i#0@@56| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| (|Seq#Length| |s#0@@80|)))) (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@139 |s#0@@80| |i#0@@56| |t#0@@2|)))) :qid |unknown.0:0| :skolemid |2347| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@139 |s#0@@80| |i#0@@56| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@140 T@U) (|s#0@@81| T@U) (|i#0@@57| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |s#0@@81|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@81| |i#0@@57| |t#0@@3|) (and (and (and ($Is |s#0@@81| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@57| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| (|Seq#Length| |s#0@@81|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@140) |s#0@@81| |i#0@@57| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@81| |i#0@@57|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@81| (+ |i#0@@57| 1))))) :qid |unknown.0:0| :skolemid |2348| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@140) |s#0@@81| |i#0@@57| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@141 T@U) (|s#0@@82| T@U) (|i#0@@58| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |s#0@@82|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@82|) (LitInt |i#0@@58|) |t#0@@4|) (and (and (and ($Is |s#0@@82| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@58| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@58|)) (< |i#0@@58| (|Seq#Length| (Lit |s#0@@82|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@141) (Lit |s#0@@82|) (LitInt |i#0@@58|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@82|) (LitInt |i#0@@58|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@82|) (LitInt (+ |i#0@@58| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2349| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@141) (Lit |s#0@@82|) (LitInt |i#0@@58|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@142 T@U) (|s#0@@83| T@U) (|i#0@@59| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |s#0@@83|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@83|) (LitInt |i#0@@59|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@83| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@59| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@59|)) (< |i#0@@59| (|Seq#Length| (Lit |s#0@@83|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@142) (Lit |s#0@@83|) (LitInt |i#0@@59|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@83|) (LitInt |i#0@@59|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@83|) (LitInt (+ |i#0@@59| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2350| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@142) (Lit |s#0@@83|) (LitInt |i#0@@59|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@396 T@U) (arg1@@189 T@U) (arg2@@134 T@U) (arg3@@105 T@U) (arg4@@90 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@396 arg1@@189 arg2@@134 arg3@@105 arg4@@90)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@396 arg1@@189 arg2@@134 arg3@@105 arg4@@90)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@143 T@U) (|a#0@@70| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@143) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@143) |a#0@@70| |b#0@@44|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@143 |a#0@@70| |b#0@@44|))) :qid |unknown.0:0| :skolemid |2351| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@143) |a#0@@70| |b#0@@44|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@144 T@U) (|a#0@@71| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@144) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@144 |a#0@@71| |b#0@@45|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@71| |b#0@@45|))) :qid |unknown.0:0| :skolemid |2352| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@144) |a#0@@71| |b#0@@45|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@145 T@U) (|a#0@@72| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@145) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@72| |b#0@@46|) (and (and ($Is |a#0@@72| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@46| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@72|) (|Seq#Length| |b#0@@46|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|)) (|Seq#Length| |a#0@@72|)) (forall ((|i#0@@60| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|) |i#0@@60|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@72| |i#0@@60|) (|Seq#Index| |b#0@@46| |i#0@@60|))))) :qid |sequence.378:20| :skolemid |2353| :pattern ( (|Seq#Index| |b#0@@46| |i#0@@60|)) :pattern ( (|Seq#Index| |a#0@@72| |i#0@@60|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|) |i#0@@60|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |2354| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@146 T@U) (|a#0@@73| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@146) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (and ($Is |a#0@@73| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@47| (TSeq Sequences._default.Zip$B@@2)))) (and (=> (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@146 |a#0@@73| |b#0@@47|) (= (|Seq#Length| |a#0@@73|) (|Seq#Length| |b#0@@47|))) (=> (= (|Seq#Length| |a#0@@73|) (|Seq#Length| |b#0@@47|)) (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@146 |a#0@@73| |b#0@@47|)))) :qid |unknown.0:0| :skolemid |2355| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@146 |a#0@@73| |b#0@@47|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@147 T@U) (|a#0@@74| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@147) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@74| |b#0@@48|) (and (and ($Is |a#0@@74| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@48| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@74|) (|Seq#Length| |b#0@@48|))))) (and (=> (not (= (|Seq#Length| |a#0@@74|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@74|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@48|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@74|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@48|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@74|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@48|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@147) |a#0@@74| |b#0@@48|) (ite (= (|Seq#Length| |a#0@@74|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@147 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@74|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@48|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@74|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@48|))))))))) :qid |unknown.0:0| :skolemid |2356| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@147) |a#0@@74| |b#0@@48|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@148 T@U) (|a#0@@75| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@148) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@75|) (Lit |b#0@@49|)) (and (and ($Is |a#0@@75| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@49| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@75|)) (|Seq#Length| (Lit |b#0@@49|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@75|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@75|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@49|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@75|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@49|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@75|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@49|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@148) (Lit |a#0@@75|) (Lit |b#0@@49|)) (ite (= (|Seq#Length| (Lit |a#0@@75|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@148) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@75|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@49|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@75|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@49|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2357| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@148) (Lit |a#0@@75|) (Lit |b#0@@49|))) ))))
(assert (forall ((arg0@@397 T@U) (arg1@@190 T@U) (arg2@@135 T@U) (arg3@@106 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@397 arg1@@190 arg2@@135 arg3@@106)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@397 arg1@@190 arg2@@135 arg3@@106)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@149 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@149) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@149) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@149 |z#0|))) :qid |unknown.0:0| :skolemid |2358| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@149) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@150 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@150) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@150 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |2359| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@150) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@151 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@151) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@61| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@61|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@61|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@61|))))) :qid |sequence.386:20| :skolemid |2360| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@61|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@61|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@61|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |2361| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@152 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@152) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (and (=> (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@152 |z#0@@2|) true) (=> true (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@152 |z#0@@2|)))) :qid |unknown.0:0| :skolemid |2362| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@152 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@153 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@153) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@153) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@50| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@153 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@76| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@153 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@76| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@50| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |2363| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@153) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@154 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@154) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2364| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@398 T@U) (arg1@@191 T@U) (arg2@@136 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@398 arg1@@191 arg2@@136)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@398 arg1@@191 arg2@@136)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@155 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@155) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@155 |seqs#0|))) :qid |unknown.0:0| :skolemid |2365| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@155) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@156 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@156 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |2366| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@156) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@157 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@62| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|) |i#0@@62|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@62|)))))) :qid |sequence.408:20| :skolemid |2367| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@62|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|) |i#0@@62|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |2368| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@158 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (and (=> (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@158 |seqs#0@@2|) true) (=> true (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@158 |seqs#0@@2|)))) :qid |unknown.0:0| :skolemid |2369| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@158 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@159 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@159) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@159 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |2370| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@159) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@160 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@160) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@160) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2371| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@160) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@161 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@161) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@161) |shape#0|) (Sequences.__default.FlattenLength $ly@@161 |shape#0|))) :qid |sequence.419:22| :skolemid |2372| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@161) |shape#0|)) )))
(assert (forall (($ly@@162 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@162) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@162 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |sequence.419:22| :skolemid |2373| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@162) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@163 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@163) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@163 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@163 |shape#0@@1|)))) :qid |sequence.419:22| :skolemid |2374| :pattern ( (Sequences.__default.FlattenLength $ly@@163 |shape#0@@1|)) ))))
(assert (forall (($ly@@164 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@164) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (and (=> (|Sequences.__default.FlattenLength#requires| $ly@@164 |shape#0@@2|) true) (=> true (|Sequences.__default.FlattenLength#requires| $ly@@164 |shape#0@@2|)))) :qid |sequence.419:22| :skolemid |2375| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@164 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@165 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@165) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@165) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@165 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |sequence.419:22| :skolemid |2376| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@165) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@166 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@166) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@166) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@166) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |sequence.419:22| :weight 3 :skolemid |2377| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@166) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@399 T@U) (arg1@@192 T@U) (arg2@@137 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@399 arg1@@192 arg2@@137)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@399 arg1@@192 arg2@@137)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@167 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@167) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@167 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |2378| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@167) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@168 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@168 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |2379| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@168) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@169 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |2380| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@170 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (and (=> (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@170 |seqs#0@@8|) true) (=> true (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@170 |seqs#0@@8|)))) :qid |unknown.0:0| :skolemid |2381| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@170 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@171 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@171) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@171 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |2382| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@171) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@172 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@172) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@172) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2383| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@172) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@63| Int) (|j#0@@7| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@63| |j#0@@7|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@63|)) (<= (LitInt 0) |j#0@@7|)) (and (< |i#0@@63| (|Seq#Length| |shape#0@@5|)) (< |j#0@@7| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@63|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@63| |j#0@@7|))) :qid |sequence.488:25| :skolemid |2384| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@63| |j#0@@7|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@64| Int) (|j#0@@8| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@64|)) (<= (LitInt 0) |j#0@@8|)) (and (=> (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@64| |j#0@@8|) (and (< |i#0@@64| (|Seq#Length| |shape#0@@6|)) (< |j#0@@8| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@64|)))))) (=> (and (< |i#0@@64| (|Seq#Length| |shape#0@@6|)) (< |j#0@@8| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@64|))))) (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@64| |j#0@@8|))))) :qid |sequence.488:25| :skolemid |2385| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@64| |j#0@@8|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@65| Int) (|j#0@@9| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@65| |j#0@@9|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@65|)) (<= (LitInt 0) |j#0@@9|)) (and (< |i#0@@65| (|Seq#Length| |shape#0@@7|)) (< |j#0@@9| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@65|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@65|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@65| |j#0@@9|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@65|)) |j#0@@9|)))) :qid |sequence.488:25| :skolemid |2386| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@65| |j#0@@9|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@66| Int) (|j#0@@10| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@66|) (LitInt |j#0@@10|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@66|)) (<= (LitInt 0) |j#0@@10|)) (and (< |i#0@@66| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@10| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@66|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@66|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@66|) (LitInt |j#0@@10|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@66|)))) |j#0@@10|)))) :qid |sequence.488:25| :weight 3 :skolemid |2387| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@66|) (LitInt |j#0@@10|))) ))))
(assert (forall ((arg0@@400 T@U) (arg1@@193 T@U) (arg2@@138 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@400 arg1@@193 arg2@@138)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@400 arg1@@193 arg2@@138)) )))
(assert (forall (($ly@@173 T@U) (|shape#0@@9| T@U) (|i#0@@67| Int) ) (!  (=> (and (= (type $ly@@173) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@173) |shape#0@@9| |i#0@@67|) (Sequences.__default.UnflattenIndex $ly@@173 |shape#0@@9| |i#0@@67|))) :qid |sequence.495:12| :skolemid |2388| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@173) |shape#0@@9| |i#0@@67|)) )))
(assert (forall (($ly@@174 T@U) (|shape#0@@10| T@U) (|i#0@@68| Int) ) (!  (=> (and (= (type $ly@@174) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@174 |shape#0@@10| |i#0@@68|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@68|))) :qid |sequence.495:12| :skolemid |2389| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@174) |shape#0@@10| |i#0@@68|)) )))
(assert  (=> true (forall (($ly@@175 T@U) (|shape#0@@11| T@U) (|i#0@@69| Int) ) (!  (=> (and (and (= (type $ly@@175) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@69|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@69|)) (< |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@175 |shape#0@@11| |i#0@@69|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |sequence.495:12| :skolemid |2390| :pattern ( (Sequences.__default.UnflattenIndex $ly@@175 |shape#0@@11| |i#0@@69|)) ))))
(assert (forall (($ly@@176 T@U) (|shape#0@@12| T@U) (|i#0@@70| Int) ) (!  (=> (and (and (= (type $ly@@176) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@70|))) (and (=> (|Sequences.__default.UnflattenIndex#requires| $ly@@176 |shape#0@@12| |i#0@@70|) (< |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))) (=> (< |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)) (|Sequences.__default.UnflattenIndex#requires| $ly@@176 |shape#0@@12| |i#0@@70|)))) :qid |sequence.495:12| :skolemid |2391| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@176 |shape#0@@12| |i#0@@70|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@177 T@U) (|shape#0@@13| T@U) (|i#0@@71| Int) ) (!  (=> (and (and (= (type $ly@@177) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@71|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@71|)) (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@71|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@71|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@177) |shape#0@@13| |i#0@@71|) (ite (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@177 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@71|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |sequence.495:12| :skolemid |2392| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@177) |shape#0@@13| |i#0@@71|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@178 T@U) (|shape#0@@14| T@U) (|i#0@@72| Int) ) (!  (=> (and (and (= (type $ly@@178) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@72|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@72|)) (< |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@72|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@72|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@178) (Lit |shape#0@@14|) (LitInt |i#0@@72|)) (ite (< |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@178) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@72|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |sequence.495:12| :weight 3 :skolemid |2393| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@178) (Lit |shape#0@@14|) (LitInt |i#0@@72|))) ))))
(assert (forall ((arg0@@401 T@U) (arg1@@194 T@U) (arg2@@139 Int) (arg3@@107 T@U) ) (! (= (type (Sequences.__default.fill arg0@@401 arg1@@194 arg2@@139 arg3@@107)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@401 arg1@@194 arg2@@139 arg3@@107)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@179 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@179) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@179) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@179 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |2394| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@179) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@180 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@180) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@180 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |2395| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@180) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@181 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@181) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@73| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@73|) (< |i#0@@73| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|) |i#0@@73|) |t#0@@8|)) :qid |sequence.680:18| :skolemid |2396| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|) |i#0@@73|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |2397| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@182 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@182) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (and (=> (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@182 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0))) (=> (>= |n#0@@8| (LitInt 0)) (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@182 |n#0@@8| |t#0@@9|)))) :qid |unknown.0:0| :skolemid |2398| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@182 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@183 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@183) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@183) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@183 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |2399| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@183) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@184 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@184) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@184) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2400| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@184) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@185 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@185) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@185) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2401| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@185) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.ReferenceType.__default) TyType))
(assert (= (Tag Tclass.ReferenceType.__default) Tagclass.ReferenceType.__default))
(assert (forall ((bx@@154 T@U) ) (!  (=> (and (= (type bx@@154) BoxType) ($IsBox bx@@154 Tclass.ReferenceType.__default)) (and (= ($Box ($Unbox refType bx@@154)) bx@@154) ($Is ($Unbox refType bx@@154) Tclass.ReferenceType.__default))) :qid |unknown.0:0| :skolemid |2402| :pattern ( ($IsBox bx@@154 Tclass.ReferenceType.__default)) )))
(assert (forall (($o@@32 T@U) ) (!  (=> (= (type $o@@32) refType) (and (=> ($Is $o@@32 Tclass.ReferenceType.__default) (or (= $o@@32 null) (= (dtype $o@@32) Tclass.ReferenceType.__default))) (=> (or (= $o@@32 null) (= (dtype $o@@32) Tclass.ReferenceType.__default)) ($Is $o@@32 Tclass.ReferenceType.__default)))) :qid |unknown.0:0| :skolemid |2403| :pattern ( ($Is $o@@32 Tclass.ReferenceType.__default)) )))
(assert (forall (($o@@33 T@U) ($h@@101 T@U) ) (!  (=> (and (= (type $o@@33) refType) (= (type $h@@101) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@33 Tclass.ReferenceType.__default $h@@101) (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@101 $o@@33) alloc)))) (=> (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@101 $o@@33) alloc))) ($IsAlloc $o@@33 Tclass.ReferenceType.__default $h@@101)))) :qid |unknown.0:0| :skolemid |2404| :pattern ( ($IsAlloc $o@@33 Tclass.ReferenceType.__default $h@@101)) )))
(assert (= (type ReferenceType.__default.Root) BoxType))
(assert  (=> true (=> true ($IsBox ReferenceType.__default.Root Tclass.ReferenceType.Reference))))
(assert  (=> |ReferenceType.__default.Root#requires| true))
(assert  (=> true |ReferenceType.__default.Root#requires|))
(assert (forall ((arg0@@402 Int) ) (! (= (type (ReferenceType.__default.toRef arg0@@402)) BoxType) :qid |funType:ReferenceType.__default.toRef| :pattern ( (ReferenceType.__default.toRef arg0@@402)) )))
(assert  (=> true (forall ((|i#0@@74| Int) ) (!  (=> (or (|ReferenceType.__default.toRef#canCall| |i#0@@74|) (and (<= (LitInt 0) |i#0@@74|) (< |i#0@@74| 18446744073709551616))) ($IsBox (ReferenceType.__default.toRef |i#0@@74|) Tclass.ReferenceType.Reference)) :qid |Graphidf.23:25| :skolemid |2405| :pattern ( (ReferenceType.__default.toRef |i#0@@74|)) ))))
(assert (forall ((|i#0@@75| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@75|) (< |i#0@@75| 18446744073709551616)) (and (=> (|ReferenceType.__default.toRef#requires| |i#0@@75|) true) (=> true (|ReferenceType.__default.toRef#requires| |i#0@@75|)))) :qid |Graphidf.23:25| :skolemid |2406| :pattern ( (|ReferenceType.__default.toRef#requires| |i#0@@75|)) )))
(assert  (=> true (forall ((|i#0@@76| T@U) ) (!  (=> (and (= (type |i#0@@76|) BoxType) (or (|ReferenceType.__default.toUint64#canCall| |i#0@@76|) ($IsBox |i#0@@76| Tclass.ReferenceType.Reference))) (and (<= (LitInt 0) (ReferenceType.__default.toUint64 |i#0@@76|)) (< (ReferenceType.__default.toUint64 |i#0@@76|) 18446744073709551616))) :qid |Graphidf.24:28| :skolemid |2407| :pattern ( (ReferenceType.__default.toUint64 |i#0@@76|)) ))))
(assert (forall ((|i#0@@77| T@U) ) (!  (=> (and (= (type |i#0@@77|) BoxType) ($IsBox |i#0@@77| Tclass.ReferenceType.Reference)) (and (=> (|ReferenceType.__default.toUint64#requires| |i#0@@77|) true) (=> true (|ReferenceType.__default.toUint64#requires| |i#0@@77|)))) :qid |Graphidf.24:28| :skolemid |2408| :pattern ( (|ReferenceType.__default.toUint64#requires| |i#0@@77|)) )))
(assert (= (type |#ValueMessage.Delta.NoDelta|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#ValueMessage.Delta.NoDelta|) |##ValueMessage.Delta.NoDelta|))
(assert (forall ((d@@103 T@U) ) (!  (=> (= (type d@@103) DatatypeTypeType) (and (=> (ValueMessage.Delta.NoDelta_q d@@103) (= (DatatypeCtorId d@@103) |##ValueMessage.Delta.NoDelta|)) (=> (= (DatatypeCtorId d@@103) |##ValueMessage.Delta.NoDelta|) (ValueMessage.Delta.NoDelta_q d@@103)))) :qid |unknown.0:0| :skolemid |2409| :pattern ( (ValueMessage.Delta.NoDelta_q d@@103)) )))
(assert (forall ((d@@104 T@U) ) (!  (=> (and (= (type d@@104) DatatypeTypeType) (ValueMessage.Delta.NoDelta_q d@@104)) (= d@@104 |#ValueMessage.Delta.NoDelta|)) :qid |unknown.0:0| :skolemid |2410| :pattern ( (ValueMessage.Delta.NoDelta_q d@@104)) )))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert (forall ((bx@@155 T@U) ) (!  (=> (and (= (type bx@@155) BoxType) ($IsBox bx@@155 Tclass.ValueMessage.Delta)) (and (= ($Box ($Unbox DatatypeTypeType bx@@155)) bx@@155) ($Is ($Unbox DatatypeTypeType bx@@155) Tclass.ValueMessage.Delta))) :qid |unknown.0:0| :skolemid |2411| :pattern ( ($IsBox bx@@155 Tclass.ValueMessage.Delta)) )))
(assert ($Is |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta))
(assert (forall (($h@@102 T@U) ) (!  (=> (and (= (type $h@@102) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@102)) ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@102)) :qid |DafnyPre.521:12| :skolemid |2412| :pattern ( ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@102)) )))
(assert (= |#ValueMessage.Delta.NoDelta| (Lit |#ValueMessage.Delta.NoDelta|)))
(assert (forall ((d@@105 T@U) ) (!  (=> (and (= (type d@@105) DatatypeTypeType) (|$IsA#ValueMessage.Delta| d@@105)) (ValueMessage.Delta.NoDelta_q d@@105)) :qid |unknown.0:0| :skolemid |2413| :pattern ( (|$IsA#ValueMessage.Delta| d@@105)) )))
(assert (forall ((d@@106 T@U) ) (!  (=> (and (= (type d@@106) DatatypeTypeType) ($Is d@@106 Tclass.ValueMessage.Delta)) (ValueMessage.Delta.NoDelta_q d@@106)) :qid |unknown.0:0| :skolemid |2414| :pattern ( (ValueMessage.Delta.NoDelta_q d@@106) ($Is d@@106 Tclass.ValueMessage.Delta)) )))
(assert (forall ((a@@167 T@U) (b@@98 T@U) ) (!  (=> (and (and (= (type a@@167) DatatypeTypeType) (= (type b@@98) DatatypeTypeType)) true) (and (=> (|ValueMessage.Delta#Equal| a@@167 b@@98) true) (=> true (|ValueMessage.Delta#Equal| a@@167 b@@98)))) :qid |unknown.0:0| :skolemid |2415| :pattern ( (|ValueMessage.Delta#Equal| a@@167 b@@98)) )))
(assert (forall ((a@@168 T@U) (b@@99 T@U) ) (!  (=> (and (= (type a@@168) DatatypeTypeType) (= (type b@@99) DatatypeTypeType)) (and (=> (|ValueMessage.Delta#Equal| a@@168 b@@99) (= a@@168 b@@99)) (=> (= a@@168 b@@99) (|ValueMessage.Delta#Equal| a@@168 b@@99)))) :qid |unknown.0:0| :skolemid |2416| :pattern ( (|ValueMessage.Delta#Equal| a@@168 b@@99)) )))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (forall ((bx@@156 T@U) ) (!  (=> (and (= (type bx@@156) BoxType) ($IsBox bx@@156 Tclass.ValueMessage.__default)) (and (= ($Box ($Unbox refType bx@@156)) bx@@156) ($Is ($Unbox refType bx@@156) Tclass.ValueMessage.__default))) :qid |unknown.0:0| :skolemid |2417| :pattern ( ($IsBox bx@@156 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (and (=> ($Is $o@@34 Tclass.ValueMessage.__default) (or (= $o@@34 null) (= (dtype $o@@34) Tclass.ValueMessage.__default))) (=> (or (= $o@@34 null) (= (dtype $o@@34) Tclass.ValueMessage.__default)) ($Is $o@@34 Tclass.ValueMessage.__default)))) :qid |unknown.0:0| :skolemid |2418| :pattern ( ($Is $o@@34 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@35 T@U) ($h@@103 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@103) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@35 Tclass.ValueMessage.__default $h@@103) (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@103 $o@@35) alloc)))) (=> (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@103 $o@@35) alloc))) ($IsAlloc $o@@35 Tclass.ValueMessage.__default $h@@103)))) :qid |unknown.0:0| :skolemid |2419| :pattern ( ($IsAlloc $o@@35 Tclass.ValueMessage.__default $h@@103)) )))
(assert (= (type ValueMessage.__default.NopDelta) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert  (=> |ValueMessage.__default.NopDelta#requires| true))
(assert  (=> true |ValueMessage.__default.NopDelta#requires|))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueMessage.__default.DefaultValue#requires| true))
(assert  (=> true |ValueMessage.__default.DefaultValue#requires|))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert (forall ((arg0@@403 T@U) (arg1@@195 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@403 arg1@@195)) DatatypeTypeType) :qid |funType:ValueMessage.__default.CombineDeltas| :pattern ( (ValueMessage.__default.CombineDeltas arg0@@403 arg1@@195)) )))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) DatatypeTypeType) (= (type |olddelta#0|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($Is |newdelta#0| Tclass.ValueMessage.Delta) ($Is |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (|ValueMessage.Delta#Equal| |newdelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (|ValueMessage.Delta#Equal| |olddelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($Is (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta))) :qid |Messagei.25:32| :skolemid |2420| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|)) ))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) DatatypeTypeType) (= (type |olddelta#0@@0|) DatatypeTypeType)) (and ($Is |newdelta#0@@0| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@0| Tclass.ValueMessage.Delta))) (and (=> (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true) (=> true (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)))) :qid |Messagei.25:32| :skolemid |2421| :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)) )))
(assert  (=> true (forall ((|newdelta#0@@1| T@U) (|olddelta#0@@1| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@1|) DatatypeTypeType) (= (type |olddelta#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0@@1| |olddelta#0@@1|) (and ($Is |newdelta#0@@1| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@1| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|) (Lit |#ValueMessage.Delta.NoDelta|))) :qid |Messagei.25:32| :skolemid |2422| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|)) ))))
(assert  (=> true (forall ((|newdelta#0@@2| T@U) (|olddelta#0@@2| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@2|) DatatypeTypeType) (= (type |olddelta#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (and ($Is |newdelta#0@@2| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@2| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (Lit |#ValueMessage.Delta.NoDelta|))) :qid |Messagei.25:32| :weight 3 :skolemid |2423| :pattern ( (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|))) ))))
(assert (forall ((arg0@@404 T@U) (arg1@@196 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@404 arg1@@196)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.ApplyDelta| :pattern ( (ValueMessage.__default.ApplyDelta arg0@@404 arg1@@196)) )))
(assert  (=> true (forall ((|delta#0| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0|) DatatypeTypeType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0| |value#0|) (and ($Is |delta#0| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (|ValueMessage.Delta#Equal| |delta#0| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) Tclass.ValueType.Value))) :qid |Messagei.29:29| :skolemid |2424| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0| |value#0|)) ))))
(assert (forall ((|delta#0@@0| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@0|) DatatypeTypeType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($Is |delta#0@@0| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (and (=> (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|) true) (=> true (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)))) :qid |Messagei.29:29| :skolemid |2425| :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)) )))
(assert  (=> true (forall ((|delta#0@@1| T@U) (|value#0@@1| T@U) ) (!  (=> (and (and (= (type |delta#0@@1|) DatatypeTypeType) (= (type |value#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@1| |value#0@@1|) (and ($Is |delta#0@@1| Tclass.ValueMessage.Delta) ($Is |value#0@@1| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0@@1|) |value#0@@1|)) :qid |Messagei.29:29| :skolemid |2426| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0@@1|)) ))))
(assert  (=> true (forall ((|delta#0@@2| T@U) (|value#0@@2| T@U) ) (!  (=> (and (and (= (type |delta#0@@2|) DatatypeTypeType) (= (type |value#0@@2|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| (Lit |delta#0@@2|) (Lit |value#0@@2|)) (and ($Is |delta#0@@2| Tclass.ValueMessage.Delta) ($Is |value#0@@2| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta (Lit |delta#0@@2|) (Lit |value#0@@2|)) (Lit |value#0@@2|))) :qid |Messagei.29:29| :weight 3 :skolemid |2427| :pattern ( (ValueMessage.__default.ApplyDelta (Lit |delta#0@@2|) (Lit |value#0@@2|))) ))))
(assert (forall ((arg0@@405 T@U) ) (! (= (type (ValueMessage.__default.bytestring__to__Message arg0@@405)) DatatypeTypeType) :qid |funType:ValueMessage.__default.bytestring__to__Message| :pattern ( (ValueMessage.__default.bytestring__to__Message arg0@@405)) )))
(assert  (=> true (forall ((|s#0@@84| T@U) ) (!  (=> (and (= (type |s#0@@84|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@84|) (and ($Is |s#0@@84| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@84|) 4294967296)))) ($Is (ValueMessage.__default.bytestring__to__Message |s#0@@84|) Tclass.ValueMessage.Message)) :qid |Messagei.100:41| :skolemid |2428| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@84|)) ))))
(assert (forall ((|s#0@@85| T@U) ) (!  (=> (and (= (type |s#0@@85|) (SeqType BoxType)) ($Is |s#0@@85| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@85|) (< (|Seq#Length| |s#0@@85|) 4294967296)) (=> (< (|Seq#Length| |s#0@@85|) 4294967296) (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@85|)))) :qid |Messagei.100:41| :skolemid |2429| :pattern ( (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@85|)) )))
(assert (forall ((arg0@@406 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@406)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Define| :pattern ( (|#ValueMessage.Message.Define| arg0@@406)) )))
(assert  (=> true (forall ((|s#0@@86| T@U) ) (!  (=> (and (= (type |s#0@@86|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@86|) (and ($Is |s#0@@86| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@86|) 4294967296)))) (and (and |ValueType.__default.MaxLen#canCall| (=> (< (LitInt ValueType.__default.MaxLen) (|Seq#Length| |s#0@@86|)) |ValueType.__default.DefaultValue#canCall|)) (= (ValueMessage.__default.bytestring__to__Message |s#0@@86|) (ite (<= (|Seq#Length| |s#0@@86|) (LitInt ValueType.__default.MaxLen)) (|#ValueMessage.Message.Define| |s#0@@86|) (|#ValueMessage.Message.Define| (Lit ValueType.__default.DefaultValue)))))) :qid |Messagei.100:41| :skolemid |2430| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@86|)) ))))
(assert  (=> true (forall ((|s#0@@87| T@U) ) (!  (=> (and (= (type |s#0@@87|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| (Lit |s#0@@87|)) (and ($Is |s#0@@87| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| (Lit |s#0@@87|)) 4294967296)))) (and (and |ValueType.__default.MaxLen#canCall| (=> (< (LitInt ValueType.__default.MaxLen) (|Seq#Length| (Lit |s#0@@87|))) |ValueType.__default.DefaultValue#canCall|)) (= (ValueMessage.__default.bytestring__to__Message (Lit |s#0@@87|)) (ite (<= (|Seq#Length| (Lit |s#0@@87|)) (LitInt ValueType.__default.MaxLen)) (|#ValueMessage.Message.Define| (Lit |s#0@@87|)) (|#ValueMessage.Message.Define| (Lit ValueType.__default.DefaultValue)))))) :qid |Messagei.100:41| :weight 3 :skolemid |2431| :pattern ( (ValueMessage.__default.bytestring__to__Message (Lit |s#0@@87|))) ))))
(assert  (=> true (forall ((|msg#0| T@U) ) (!  (=> (and (= (type |msg#0|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0|) ($Is |msg#0| Tclass.ValueMessage.Message))) true) :qid |Messagei.113:30| :skolemid |2432| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0|)) ))))
(assert (forall ((|msg#0@@0| T@U) ) (!  (=> (and (= (type |msg#0@@0|) DatatypeTypeType) ($Is |msg#0@@0| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|) true) (=> true (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)))) :qid |Messagei.113:30| :skolemid |2433| :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)) )))
(assert  (=> true (forall ((|msg#0@@1| T@U) ) (!  (=> (and (= (type |msg#0@@1|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0@@1|) ($Is |msg#0@@1| Tclass.ValueMessage.Message))) (and (=> (ValueMessage.__default.EncodableMessage |msg#0@@1|) (and true (ValueMessage.Message.Define_q |msg#0@@1|))) (=> (and true (ValueMessage.Message.Define_q |msg#0@@1|)) (ValueMessage.__default.EncodableMessage |msg#0@@1|)))) :qid |Messagei.113:30| :skolemid |2434| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0@@1|)) ))))
(assert  (=> true (forall ((|msg#0@@2| T@U) ) (!  (=> (and (= (type |msg#0@@2|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| (Lit |msg#0@@2|)) ($Is |msg#0@@2| Tclass.ValueMessage.Message))) (and (=> (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|)) (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |msg#0@@2|))))))) (=> (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |msg#0@@2|)))))) (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|))))) :qid |Messagei.113:30| :weight 3 :skolemid |2435| :pattern ( (ValueMessage.__default.EncodableMessage (Lit |msg#0@@2|))) ))))
(assert  (=> true (forall ((|msgs#0| T@U) ) (!  (=> (and (= (type |msgs#0|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0|) ($Is |msgs#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |Messagei.118:33| :skolemid |2436| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0|)) ))))
(assert (forall ((|msgs#0@@0| T@U) ) (!  (=> (and (= (type |msgs#0@@0|) (SeqType BoxType)) ($Is |msgs#0@@0| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|) true) (=> true (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)))) :qid |Messagei.118:33| :skolemid |2437| :pattern ( (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)) )))
(assert  (=> true (forall ((|msgs#0@@1| T@U) ) (!  (=> (and (= (type |msgs#0@@1|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0@@1|) ($Is |msgs#0@@1| (TSeq Tclass.ValueMessage.Message)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#0@@78| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@78|) (< |i#0@@78| (|Seq#Length| |msgs#0@@1|))) (|ValueMessage.__default.EncodableMessage#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@78|)))) :qid |Messagei.120:16| :skolemid |2438| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@78|))) ))) (and (=> (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|) (and true (forall ((|i#0@@79| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@79|) (< |i#0@@79| (|Seq#Length| |msgs#0@@1|))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@79|)))) :qid |Messagei.120:16| :skolemid |2439| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@79|))) )))) (=> (and true (forall ((|i#0@@80| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| (|Seq#Length| |msgs#0@@1|))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@80|)))) :qid |Messagei.120:16| :skolemid |2439| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@80|))) ))) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|))))) :qid |Messagei.118:33| :skolemid |2440| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|)) ))))
(assert  (=> true (forall ((|msgs#0@@2| T@U) ) (!  (=> (and (= (type |msgs#0@@2|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| (Lit |msgs#0@@2|)) ($Is |msgs#0@@2| (TSeq Tclass.ValueMessage.Message)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#1@@19| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@19|) (< |i#1@@19| (|Seq#Length| (Lit |msgs#0@@2|)))) (|ValueMessage.__default.EncodableMessage#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#1@@19|)))) :qid |Messagei.120:16| :skolemid |2441| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#1@@19|))) ))) (and (=> (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|)) (and true (forall ((|i#1@@20| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@20|) (< |i#1@@20| (|Seq#Length| (Lit |msgs#0@@2|)))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#1@@20|)))) :qid |Messagei.120:16| :skolemid |2442| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#1@@20|))) )))) (=> (and true (forall ((|i#1@@21| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@21|) (< |i#1@@21| (|Seq#Length| (Lit |msgs#0@@2|)))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#1@@21|)))) :qid |Messagei.120:16| :skolemid |2442| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#1@@21|))) ))) (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|)))))) :qid |Messagei.118:33| :weight 3 :skolemid |2443| :pattern ( (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|))) ))))
(assert (forall ((arg0@@407 T@U) ) (! (= (type (ValueMessage.__default.Message__to__bytestring arg0@@407)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.Message__to__bytestring| :pattern ( (ValueMessage.__default.Message__to__bytestring arg0@@407)) )))
(assert  (=> true (forall ((|msg#0@@3| T@U) ) (!  (=> (and (= (type |msg#0@@3|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@3|) (and ($Is |msg#0@@3| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@3|)))) ($Is (ValueMessage.__default.Message__to__bytestring |msg#0@@3|) (TSeq Tclass.NativeTypes.byte))) :qid |Messagei.123:41| :skolemid |2444| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@3|)) ))))
(assert (forall ((|msg#0@@4| T@U) ) (!  (=> (and (= (type |msg#0@@4|) DatatypeTypeType) ($Is |msg#0@@4| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@4|) (ValueMessage.Message.Define_q |msg#0@@4|)) (=> (ValueMessage.Message.Define_q |msg#0@@4|) (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@4|)))) :qid |Messagei.123:41| :skolemid |2445| :pattern ( (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@4|)) )))
(assert (forall ((arg0@@408 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@408)) (SeqType BoxType)) :qid |funType:ValueMessage.Message.value| :pattern ( (ValueMessage.Message.value arg0@@408)) )))
(assert  (=> true (forall ((|msg#0@@5| T@U) ) (!  (=> (and (= (type |msg#0@@5|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@5|) (and ($Is |msg#0@@5| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@5|)))) (= (ValueMessage.__default.Message__to__bytestring |msg#0@@5|) (ValueMessage.Message.value |msg#0@@5|))) :qid |Messagei.123:41| :skolemid |2446| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@5|)) ))))
(assert  (=> true (forall ((|msg#0@@6| T@U) ) (!  (=> (and (= (type |msg#0@@6|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| (Lit |msg#0@@6|)) (and ($Is |msg#0@@6| Tclass.ValueMessage.Message) (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit |msg#0@@6|)))))))) (= (ValueMessage.__default.Message__to__bytestring (Lit |msg#0@@6|)) (Lit (ValueMessage.Message.value (Lit |msg#0@@6|))))) :qid |Messagei.123:41| :weight 3 :skolemid |2447| :pattern ( (ValueMessage.__default.Message__to__bytestring (Lit |msg#0@@6|))) ))))
(assert (forall ((arg0@@409 T@U) (arg1@@197 T@U) ) (! (= (type (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@409 arg1@@197)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.messageSeq__to__bytestringSeq| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@409 arg1@@197)) )))
(assert (forall (($ly@@186 T@U) (|msgs#0@@3| T@U) ) (!  (=> (and (= (type $ly@@186) LayerTypeType) (= (type |msgs#0@@3|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@186) |msgs#0@@3|) (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@186 |msgs#0@@3|))) :qid |Messagei.129:12| :skolemid |2448| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@186) |msgs#0@@3|)) )))
(assert (forall (($ly@@187 T@U) (|msgs#0@@4| T@U) ) (!  (=> (and (= (type $ly@@187) LayerTypeType) (= (type |msgs#0@@4|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@187 |msgs#0@@4|) (ValueMessage.__default.messageSeq__to__bytestringSeq $LZ |msgs#0@@4|))) :qid |Messagei.129:12| :skolemid |2449| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq (AsFuelBottom $ly@@187) |msgs#0@@4|)) )))
(assert  (=> true (forall (($ly@@188 T@U) (|msgs#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@188) LayerTypeType) (= (type |msgs#0@@5|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@5|) (and ($Is |msgs#0@@5| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@5|)))) (and (and (= (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@188 |msgs#0@@5|)) (|Seq#Length| |msgs#0@@5|)) (forall ((|i#0@@81| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@188 |msgs#0@@5|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@188 |msgs#0@@5|) |i#0@@81|)) (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@5| |i#0@@81|))))) :qid |Messagei.132:20| :skolemid |2450| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@5| |i#0@@81|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@188 |msgs#0@@5|) |i#0@@81|))) ))) ($Is (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@188 |msgs#0@@5|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |Messagei.129:12| :skolemid |2451| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@188 |msgs#0@@5|)) ))))
(assert (forall (($ly@@189 T@U) (|msgs#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@189) LayerTypeType) (= (type |msgs#0@@6|) (SeqType BoxType))) ($Is |msgs#0@@6| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@189 |msgs#0@@6|) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@6|)) (=> (ValueMessage.__default.EncodableMessageSeq |msgs#0@@6|) (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@189 |msgs#0@@6|)))) :qid |Messagei.129:12| :skolemid |2452| :pattern ( (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@189 |msgs#0@@6|)) )))
(assert  (=> true (forall (($ly@@190 T@U) (|msgs#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@190) LayerTypeType) (= (type |msgs#0@@7|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@7|) (and ($Is |msgs#0@@7| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@7|)))) (and (=> (not (= (|Seq#Length| |msgs#0@@7|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message |msgs#0@@7|) (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@7|))) (and (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message |msgs#0@@7|) (|ValueMessage.__default.Message__to__bytestring#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@7|)))))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@190) |msgs#0@@7|) (ite (= (|Seq#Length| |msgs#0@@7|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@190 (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@7|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@7|)))))))))) :qid |Messagei.129:12| :skolemid |2453| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@190) |msgs#0@@7|)) ))))
(assert  (=> true (forall (($ly@@191 T@U) (|msgs#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@191) LayerTypeType) (= (type |msgs#0@@8|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Lit |msgs#0@@8|)) (and ($Is |msgs#0@@8| (TSeq Tclass.ValueMessage.Message)) (U_2_bool (Lit (bool_2_U (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@8|)))))))) (and (=> (not (= (|Seq#Length| (Lit |msgs#0@@8|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@8|)) (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@8|))))) (and (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@8|)) (|ValueMessage.__default.Message__to__bytestring#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@8|)))))))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@191) (Lit |msgs#0@@8|)) (ite (= (|Seq#Length| (Lit |msgs#0@@8|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@191) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@8|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (ValueMessage.__default.Message__to__bytestring (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@8|))))))))))))) :qid |Messagei.129:12| :weight 3 :skolemid |2454| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@191) (Lit |msgs#0@@8|))) ))))
(assert (forall ((arg0@@410 T@U) (arg1@@198 T@U) ) (! (= (type (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@410 arg1@@198)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.bytestringSeq__to__MessageSeq| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@410 arg1@@198)) )))
(assert (forall (($ly@@192 T@U) (|strings#0| T@U) ) (!  (=> (and (= (type $ly@@192) LayerTypeType) (= (type |strings#0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@192) |strings#0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@192 |strings#0|))) :qid |Messagei.140:12| :skolemid |2455| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@192) |strings#0|)) )))
(assert (forall (($ly@@193 T@U) (|strings#0@@0| T@U) ) (!  (=> (and (= (type $ly@@193) LayerTypeType) (= (type |strings#0@@0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@193 |strings#0@@0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $LZ |strings#0@@0|))) :qid |Messagei.140:12| :skolemid |2456| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq (AsFuelBottom $ly@@193) |strings#0@@0|)) )))
(assert  (=> true (forall (($ly@@194 T@U) (|strings#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@194) LayerTypeType) (= (type |strings#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@1|) (and ($Is |strings#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#0@@82| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| (|Seq#Length| |strings#0@@1|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@82|))) 4294967296)) :qid |Messagei.141:21| :skolemid |2457| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@82|))) ))))) (and (and (= (|Seq#Length| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@194 |strings#0@@1|)) (|Seq#Length| |strings#0@@1|)) (forall ((|i#1@@22| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@22|) (< |i#1@@22| (|Seq#Length| |strings#0@@1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@194 |strings#0@@1|) |i#1@@22|)) (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@22|))))) :qid |Messagei.143:20| :skolemid |2458| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@22|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@194 |strings#0@@1|) |i#1@@22|))) ))) ($Is (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@194 |strings#0@@1|) (TSeq Tclass.ValueMessage.Message)))) :qid |Messagei.140:12| :skolemid |2459| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@194 |strings#0@@1|)) ))))
(assert (forall (($ly@@195 T@U) (|strings#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@195) LayerTypeType) (= (type |strings#0@@2|) (SeqType BoxType))) ($Is |strings#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@195 |strings#0@@2|) (forall ((|i#2@@10| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@10|) (< |i#2@@10| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@10|))) 4294967296)) :qid |Messagei.141:21| :skolemid |2460| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@10|))) ))) (=> (forall ((|i#2@@11| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@11|) (< |i#2@@11| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@11|))) 4294967296)) :qid |Messagei.141:21| :skolemid |2460| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@11|))) )) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@195 |strings#0@@2|)))) :qid |Messagei.140:12| :skolemid |2461| :pattern ( (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@195 |strings#0@@2|)) )))
(assert  (=> true (forall (($ly@@196 T@U) (|strings#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@196) LayerTypeType) (= (type |strings#0@@3|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@3|) (and ($Is |strings#0@@3| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#2@@12| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@12|) (< |i#2@@12| (|Seq#Length| |strings#0@@3|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@3| |i#2@@12|))) 4294967296)) :qid |Messagei.141:21| :skolemid |2460| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@3| |i#2@@12|))) ))))) (and (=> (not (= (|Seq#Length| |strings#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |strings#0@@3|) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |strings#0@@3|))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |strings#0@@3|) (|ValueMessage.__default.bytestring__to__Message#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)))))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@196) |strings#0@@3|) (ite (= (|Seq#Length| |strings#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@196 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)))))))))) :qid |Messagei.140:12| :skolemid |2462| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@196) |strings#0@@3|)) ))))
(assert  (=> true (forall (($ly@@197 T@U) (|strings#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@197) LayerTypeType) (= (type |strings#0@@4|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Lit |strings#0@@4|)) (and ($Is |strings#0@@4| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#3@@10| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@10|) (< |i#3@@10| (|Seq#Length| (Lit |strings#0@@4|)))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strings#0@@4|) |i#3@@10|))) 4294967296)) :qid |Messagei.141:21| :skolemid |2463| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@4| |i#3@@10|))) ))))) (and (=> (not (= (|Seq#Length| (Lit |strings#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|))))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)) (|ValueMessage.__default.bytestring__to__Message#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)))))))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@197) (Lit |strings#0@@4|)) (ite (= (|Seq#Length| (Lit |strings#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@197) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (ValueMessage.__default.bytestring__to__Message (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|))))))))))))) :qid |Messagei.140:12| :weight 3 :skolemid |2464| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@197) (Lit |strings#0@@4|))) ))))
(assert (forall ((arg0@@411 T@U) (arg1@@199 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@411 arg1@@199)) DatatypeTypeType) :qid |funType:ValueMessage.__default.Merge| :pattern ( (ValueMessage.__default.Merge arg0@@411 arg1@@199)) )))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message)) :qid |Messagei.32:24| :skolemid |2465| :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|)) ))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true) (=> true (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)))) :qid |Messagei.32:24| :skolemid |2466| :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)) )))
(assert  (and (forall ((arg0@@412 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@412)) DatatypeTypeType) :qid |funType:ValueMessage.Message.delta| :pattern ( (ValueMessage.Message.delta arg0@@412)) )) (forall ((arg0@@413 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@413)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Update| :pattern ( (|#ValueMessage.Message.Update| arg0@@413)) ))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#0@@3| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@3| |value#0@@3|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0@@3| |olddelta#0@@3|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| |newvalue#1|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|delta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#1| |value#1|)))) (let ((|olddelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|newdelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#1| |olddelta#1|))))))))) :qid |Messagei.32:24| :skolemid |2467| :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|)) ))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#2| |value#2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#2| |olddelta#2|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| |newvalue#3|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|delta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| (Lit (ValueMessage.__default.ApplyDelta |delta#3| |value#3|)))))) (let ((|olddelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|newdelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Update| (Lit (ValueMessage.__default.CombineDeltas |newdelta#3| |olddelta#3|))))))))))) :qid |Messagei.32:24| :weight 3 :skolemid |2468| :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|))) ))))
(assert (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true |ValueMessage.__default.IdentityMessage#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert (= (type ValueMessage.__default.DefineDefault) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefineDefault Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.DefineDefault#requires| true))
(assert  (=> true |ValueMessage.__default.DefineDefault#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert (forall ((|a#0#0#0@@1| T@U) ) (!  (=> (= (type |a#0#0#0@@1|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@1|)) |##ValueMessage.Message.Define|)) :qid |Messagei.22:13| :skolemid |2469| :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@1|)) )))
(assert (forall ((d@@107 T@U) ) (!  (=> (= (type d@@107) DatatypeTypeType) (and (=> (ValueMessage.Message.Define_q d@@107) (= (DatatypeCtorId d@@107) |##ValueMessage.Message.Define|)) (=> (= (DatatypeCtorId d@@107) |##ValueMessage.Message.Define|) (ValueMessage.Message.Define_q d@@107)))) :qid |unknown.0:0| :skolemid |2470| :pattern ( (ValueMessage.Message.Define_q d@@107)) )))
(assert (forall ((d@@108 T@U) ) (!  (=> (and (= (type d@@108) DatatypeTypeType) (ValueMessage.Message.Define_q d@@108)) (exists ((|a#1#0#0@@1| T@U) ) (!  (and (= (type |a#1#0#0@@1|) (SeqType BoxType)) (= d@@108 (|#ValueMessage.Message.Define| |a#1#0#0@@1|))) :qid |Messagei.22:13| :skolemid |2471| :no-pattern (type |a#1#0#0@@1|) :no-pattern (U_2_int |a#1#0#0@@1|) :no-pattern (U_2_bool |a#1#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |2472| :pattern ( (ValueMessage.Message.Define_q d@@108)) )))
(assert (forall ((|a#2#0#0@@1| T@U) ) (!  (=> (= (type |a#2#0#0@@1|) (SeqType BoxType)) (and (=> ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@1| Tclass.ValueType.Value)) (=> ($Is |a#2#0#0@@1| Tclass.ValueType.Value) ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message)))) :qid |Messagei.22:13| :skolemid |2473| :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#3#0#0@@1| T@U) ($h@@104 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@1|) (SeqType BoxType)) (= (type $h@@104) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@104)) (and (=> ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@104) ($IsAlloc |a#3#0#0@@1| Tclass.ValueType.Value $h@@104)) (=> ($IsAlloc |a#3#0#0@@1| Tclass.ValueType.Value $h@@104) ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@104)))) :qid |Messagei.22:13| :skolemid |2474| :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@104)) )))
(assert (forall ((d@@109 T@U) ($h@@105 T@U) ) (!  (=> (and (and (= (type d@@109) DatatypeTypeType) (= (type $h@@105) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@105) (and (ValueMessage.Message.Define_q d@@109) ($IsAlloc d@@109 Tclass.ValueMessage.Message $h@@105)))) ($IsAlloc (ValueMessage.Message.value d@@109) Tclass.ValueType.Value $h@@105)) :qid |unknown.0:0| :skolemid |2475| :pattern ( ($IsAlloc (ValueMessage.Message.value d@@109) Tclass.ValueType.Value $h@@105)) )))
(assert (forall ((|a#4#0#0@@1| T@U) ) (!  (=> (= (type |a#4#0#0@@1|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@1|)))) :qid |Messagei.22:13| :skolemid |2476| :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|))) )))
(assert (forall ((|a#5#0#0@@3| T@U) ) (!  (=> (= (type |a#5#0#0@@3|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@3|)) |a#5#0#0@@3|)) :qid |Messagei.22:13| :skolemid |2477| :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@3|)) )))
(assert (forall ((|a#6#0#0@@3| T@U) ) (!  (=> (= (type |a#6#0#0@@3|) DatatypeTypeType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@3|)) |##ValueMessage.Message.Update|)) :qid |Messagei.23:13| :skolemid |2478| :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@3|)) )))
(assert (forall ((d@@110 T@U) ) (!  (=> (= (type d@@110) DatatypeTypeType) (and (=> (ValueMessage.Message.Update_q d@@110) (= (DatatypeCtorId d@@110) |##ValueMessage.Message.Update|)) (=> (= (DatatypeCtorId d@@110) |##ValueMessage.Message.Update|) (ValueMessage.Message.Update_q d@@110)))) :qid |unknown.0:0| :skolemid |2479| :pattern ( (ValueMessage.Message.Update_q d@@110)) )))
(assert (forall ((d@@111 T@U) ) (!  (=> (and (= (type d@@111) DatatypeTypeType) (ValueMessage.Message.Update_q d@@111)) (exists ((|a#7#0#0@@3| T@U) ) (!  (and (= (type |a#7#0#0@@3|) DatatypeTypeType) (= d@@111 (|#ValueMessage.Message.Update| |a#7#0#0@@3|))) :qid |Messagei.23:13| :skolemid |2480| :no-pattern (type |a#7#0#0@@3|) :no-pattern (U_2_int |a#7#0#0@@3|) :no-pattern (U_2_bool |a#7#0#0@@3|) ))) :qid |unknown.0:0| :skolemid |2481| :pattern ( (ValueMessage.Message.Update_q d@@111)) )))
(assert (forall ((|a#8#0#0@@3| T@U) ) (!  (=> (= (type |a#8#0#0@@3|) DatatypeTypeType) (and (=> ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@3|) Tclass.ValueMessage.Message) ($Is |a#8#0#0@@3| Tclass.ValueMessage.Delta)) (=> ($Is |a#8#0#0@@3| Tclass.ValueMessage.Delta) ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@3|) Tclass.ValueMessage.Message)))) :qid |Messagei.23:13| :skolemid |2482| :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@3|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#9#0#0@@2| T@U) ($h@@106 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@2|) DatatypeTypeType) (= (type $h@@106) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@106)) (and (=> ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@2|) Tclass.ValueMessage.Message $h@@106) ($IsAlloc |a#9#0#0@@2| Tclass.ValueMessage.Delta $h@@106)) (=> ($IsAlloc |a#9#0#0@@2| Tclass.ValueMessage.Delta $h@@106) ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@2|) Tclass.ValueMessage.Message $h@@106)))) :qid |Messagei.23:13| :skolemid |2483| :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@2|) Tclass.ValueMessage.Message $h@@106)) )))
(assert (forall ((d@@112 T@U) ($h@@107 T@U) ) (!  (=> (and (and (= (type d@@112) DatatypeTypeType) (= (type $h@@107) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@107) (and (ValueMessage.Message.Update_q d@@112) ($IsAlloc d@@112 Tclass.ValueMessage.Message $h@@107)))) ($IsAlloc (ValueMessage.Message.delta d@@112) Tclass.ValueMessage.Delta $h@@107)) :qid |unknown.0:0| :skolemid |2484| :pattern ( ($IsAlloc (ValueMessage.Message.delta d@@112) Tclass.ValueMessage.Delta $h@@107)) )))
(assert (forall ((|a#10#0#0@@2| T@U) ) (!  (=> (= (type |a#10#0#0@@2|) DatatypeTypeType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@2|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@2|)))) :qid |Messagei.23:13| :skolemid |2485| :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@2|))) )))
(assert (forall ((|a#11#0#0@@2| T@U) ) (!  (=> (= (type |a#11#0#0@@2|) DatatypeTypeType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@2|)) |a#11#0#0@@2|)) :qid |Messagei.23:13| :skolemid |2486| :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@2|)) )))
(assert (forall ((|a#12#0#0@@0| T@U) ) (!  (=> (= (type |a#12#0#0@@0|) DatatypeTypeType) (< (DtRank |a#12#0#0@@0|) (DtRank (|#ValueMessage.Message.Update| |a#12#0#0@@0|)))) :qid |Messagei.23:13| :skolemid |2487| :pattern ( (|#ValueMessage.Message.Update| |a#12#0#0@@0|)) )))
(assert (forall ((d@@113 T@U) ) (!  (=> (and (= (type d@@113) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@113)) (or (ValueMessage.Message.Define_q d@@113) (ValueMessage.Message.Update_q d@@113))) :qid |unknown.0:0| :skolemid |2488| :pattern ( (|$IsA#ValueMessage.Message| d@@113)) )))
(assert (forall ((d@@114 T@U) ) (!  (=> (and (= (type d@@114) DatatypeTypeType) ($Is d@@114 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@114) (ValueMessage.Message.Update_q d@@114))) :qid |unknown.0:0| :skolemid |2489| :pattern ( (ValueMessage.Message.Update_q d@@114) ($Is d@@114 Tclass.ValueMessage.Message)) :pattern ( (ValueMessage.Message.Define_q d@@114) ($Is d@@114 Tclass.ValueMessage.Message)) )))
(assert (forall ((a@@169 T@U) (b@@100 T@U) ) (!  (=> (and (and (= (type a@@169) DatatypeTypeType) (= (type b@@100) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@169) (ValueMessage.Message.Define_q b@@100))) (and (=> (|ValueMessage.Message#Equal| a@@169 b@@100) (|Seq#Equal| (ValueMessage.Message.value a@@169) (ValueMessage.Message.value b@@100))) (=> (|Seq#Equal| (ValueMessage.Message.value a@@169) (ValueMessage.Message.value b@@100)) (|ValueMessage.Message#Equal| a@@169 b@@100)))) :qid |unknown.0:0| :skolemid |2490| :pattern ( (|ValueMessage.Message#Equal| a@@169 b@@100) (ValueMessage.Message.Define_q a@@169)) :pattern ( (|ValueMessage.Message#Equal| a@@169 b@@100) (ValueMessage.Message.Define_q b@@100)) )))
(assert (forall ((a@@170 T@U) (b@@101 T@U) ) (!  (=> (and (and (= (type a@@170) DatatypeTypeType) (= (type b@@101) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@170) (ValueMessage.Message.Update_q b@@101))) (and (=> (|ValueMessage.Message#Equal| a@@170 b@@101) (|ValueMessage.Delta#Equal| (ValueMessage.Message.delta a@@170) (ValueMessage.Message.delta b@@101))) (=> (|ValueMessage.Delta#Equal| (ValueMessage.Message.delta a@@170) (ValueMessage.Message.delta b@@101)) (|ValueMessage.Message#Equal| a@@170 b@@101)))) :qid |unknown.0:0| :skolemid |2491| :pattern ( (|ValueMessage.Message#Equal| a@@170 b@@101) (ValueMessage.Message.Update_q a@@170)) :pattern ( (|ValueMessage.Message#Equal| a@@170 b@@101) (ValueMessage.Message.Update_q b@@101)) )))
(assert (forall ((a@@171 T@U) (b@@102 T@U) ) (!  (=> (and (= (type a@@171) DatatypeTypeType) (= (type b@@102) DatatypeTypeType)) (and (=> (|ValueMessage.Message#Equal| a@@171 b@@102) (= a@@171 b@@102)) (=> (= a@@171 b@@102) (|ValueMessage.Message#Equal| a@@171 b@@102)))) :qid |unknown.0:0| :skolemid |2492| :pattern ( (|ValueMessage.Message#Equal| a@@171 b@@102)) )))
(assert (forall ((arg0@@414 T@U) (arg1@@200 T@U) ) (! (= (type (|#BetreeGraph.Node.Node| arg0@@414 arg1@@200)) DatatypeTypeType) :qid |funType:#BetreeGraph.Node.Node| :pattern ( (|#BetreeGraph.Node.Node| arg0@@414 arg1@@200)) )))
(assert (forall ((|a#13#0#0@@0| T@U) (|a#13#1#0@@0| T@U) ) (!  (=> (and (= (type |a#13#0#0@@0|) (IMapType BoxType BoxType)) (= (type |a#13#1#0@@0|) (IMapType BoxType BoxType))) (= (DatatypeCtorId (|#BetreeGraph.Node.Node| |a#13#0#0@@0| |a#13#1#0@@0|)) |##BetreeGraph.Node.Node|)) :qid |BetreeSp.27:24| :skolemid |2493| :pattern ( (|#BetreeGraph.Node.Node| |a#13#0#0@@0| |a#13#1#0@@0|)) )))
(assert (forall ((d@@115 T@U) ) (!  (=> (= (type d@@115) DatatypeTypeType) (and (=> (BetreeGraph.Node.Node_q d@@115) (= (DatatypeCtorId d@@115) |##BetreeGraph.Node.Node|)) (=> (= (DatatypeCtorId d@@115) |##BetreeGraph.Node.Node|) (BetreeGraph.Node.Node_q d@@115)))) :qid |unknown.0:0| :skolemid |2494| :pattern ( (BetreeGraph.Node.Node_q d@@115)) )))
(assert (forall ((d@@116 T@U) ) (!  (=> (and (= (type d@@116) DatatypeTypeType) (BetreeGraph.Node.Node_q d@@116)) (exists ((|a#14#0#0@@0| T@U) (|a#14#1#0@@0| T@U) ) (!  (and (and (= (type |a#14#0#0@@0|) (IMapType BoxType BoxType)) (= (type |a#14#1#0@@0|) (IMapType BoxType BoxType))) (= d@@116 (|#BetreeGraph.Node.Node| |a#14#0#0@@0| |a#14#1#0@@0|))) :qid |BetreeSp.27:24| :skolemid |2495| :no-pattern (type |a#14#0#0@@0|) :no-pattern (type |a#14#1#0@@0|) :no-pattern (U_2_int |a#14#0#0@@0|) :no-pattern (U_2_bool |a#14#0#0@@0|) :no-pattern (U_2_int |a#14#1#0@@0|) :no-pattern (U_2_bool |a#14#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2496| :pattern ( (BetreeGraph.Node.Node_q d@@116)) )))
(assert (= (type Tclass.BetreeGraph.Node) TyType))
(assert (= (Tag Tclass.BetreeGraph.Node) Tagclass.BetreeGraph.Node))
(assert (forall ((bx@@157 T@U) ) (!  (=> (and (= (type bx@@157) BoxType) ($IsBox bx@@157 Tclass.BetreeGraph.Node)) (and (= ($Box ($Unbox DatatypeTypeType bx@@157)) bx@@157) ($Is ($Unbox DatatypeTypeType bx@@157) Tclass.BetreeGraph.Node))) :qid |unknown.0:0| :skolemid |2497| :pattern ( ($IsBox bx@@157 Tclass.BetreeGraph.Node)) )))
(assert (forall ((|a#15#0#0@@0| T@U) (|a#15#1#0@@0| T@U) ) (!  (=> (and (= (type |a#15#0#0@@0|) (IMapType BoxType BoxType)) (= (type |a#15#1#0@@0|) (IMapType BoxType BoxType))) (and (=> ($Is (|#BetreeGraph.Node.Node| |a#15#0#0@@0| |a#15#1#0@@0|) Tclass.BetreeGraph.Node) (and ($Is |a#15#0#0@@0| (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference)) ($Is |a#15#1#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (=> (and ($Is |a#15#0#0@@0| (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference)) ($Is |a#15#1#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is (|#BetreeGraph.Node.Node| |a#15#0#0@@0| |a#15#1#0@@0|) Tclass.BetreeGraph.Node)))) :qid |BetreeSp.27:24| :skolemid |2498| :pattern ( ($Is (|#BetreeGraph.Node.Node| |a#15#0#0@@0| |a#15#1#0@@0|) Tclass.BetreeGraph.Node)) )))
(assert (forall ((|a#16#0#0@@0| T@U) (|a#16#1#0@@0| T@U) ($h@@108 T@U) ) (!  (=> (and (and (and (= (type |a#16#0#0@@0|) (IMapType BoxType BoxType)) (= (type |a#16#1#0@@0|) (IMapType BoxType BoxType))) (= (type $h@@108) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@108)) (and (=> ($IsAlloc (|#BetreeGraph.Node.Node| |a#16#0#0@@0| |a#16#1#0@@0|) Tclass.BetreeGraph.Node $h@@108) (and ($IsAlloc |a#16#0#0@@0| (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference) $h@@108) ($IsAlloc |a#16#1#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@108))) (=> (and ($IsAlloc |a#16#0#0@@0| (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference) $h@@108) ($IsAlloc |a#16#1#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@108)) ($IsAlloc (|#BetreeGraph.Node.Node| |a#16#0#0@@0| |a#16#1#0@@0|) Tclass.BetreeGraph.Node $h@@108)))) :qid |BetreeSp.27:24| :skolemid |2499| :pattern ( ($IsAlloc (|#BetreeGraph.Node.Node| |a#16#0#0@@0| |a#16#1#0@@0|) Tclass.BetreeGraph.Node $h@@108)) )))
(assert (forall ((arg0@@415 T@U) ) (! (= (type (BetreeGraph.Node.children arg0@@415)) (IMapType BoxType BoxType)) :qid |funType:BetreeGraph.Node.children| :pattern ( (BetreeGraph.Node.children arg0@@415)) )))
(assert (forall ((d@@117 T@U) ($h@@109 T@U) ) (!  (=> (and (and (= (type d@@117) DatatypeTypeType) (= (type $h@@109) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@109) (and (BetreeGraph.Node.Node_q d@@117) ($IsAlloc d@@117 Tclass.BetreeGraph.Node $h@@109)))) ($IsAlloc (BetreeGraph.Node.children d@@117) (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference) $h@@109)) :qid |unknown.0:0| :skolemid |2500| :pattern ( ($IsAlloc (BetreeGraph.Node.children d@@117) (TIMap Tclass.KeyType.Key Tclass.ReferenceType.Reference) $h@@109)) )))
(assert (forall ((arg0@@416 T@U) ) (! (= (type (BetreeGraph.Node.buffer arg0@@416)) (IMapType BoxType BoxType)) :qid |funType:BetreeGraph.Node.buffer| :pattern ( (BetreeGraph.Node.buffer arg0@@416)) )))
(assert (forall ((d@@118 T@U) ($h@@110 T@U) ) (!  (=> (and (and (= (type d@@118) DatatypeTypeType) (= (type $h@@110) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@110) (and (BetreeGraph.Node.Node_q d@@118) ($IsAlloc d@@118 Tclass.BetreeGraph.Node $h@@110)))) ($IsAlloc (BetreeGraph.Node.buffer d@@118) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@110)) :qid |unknown.0:0| :skolemid |2501| :pattern ( ($IsAlloc (BetreeGraph.Node.buffer d@@118) (TIMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@110)) )))
(assert (forall ((|a#17#0#0@@1| T@U) (|a#17#1#0@@0| T@U) ) (!  (=> (and (= (type |a#17#0#0@@1|) (IMapType BoxType BoxType)) (= (type |a#17#1#0@@0|) (IMapType BoxType BoxType))) (= (|#BetreeGraph.Node.Node| (Lit |a#17#0#0@@1|) (Lit |a#17#1#0@@0|)) (Lit (|#BetreeGraph.Node.Node| |a#17#0#0@@1| |a#17#1#0@@0|)))) :qid |BetreeSp.27:24| :skolemid |2502| :pattern ( (|#BetreeGraph.Node.Node| (Lit |a#17#0#0@@1|) (Lit |a#17#1#0@@0|))) )))
(assert (forall ((|a#18#0#0@@1| T@U) (|a#18#1#0@@0| T@U) ) (!  (=> (and (= (type |a#18#0#0@@1|) (IMapType BoxType BoxType)) (= (type |a#18#1#0@@0|) (IMapType BoxType BoxType))) (= (BetreeGraph.Node.children (|#BetreeGraph.Node.Node| |a#18#0#0@@1| |a#18#1#0@@0|)) |a#18#0#0@@1|)) :qid |BetreeSp.27:24| :skolemid |2503| :pattern ( (|#BetreeGraph.Node.Node| |a#18#0#0@@1| |a#18#1#0@@0|)) )))
(assert (forall ((|a#19#0#0@@1| T@U) (|a#19#1#0@@0| T@U) (d@@119 T@U) ) (!  (=> (and (and (and (= (type |a#19#0#0@@1|) (IMapType BoxType BoxType)) (= (type |a#19#1#0@@0|) (IMapType BoxType BoxType))) (= (type d@@119) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#19#0#0@@1|) ($Box d@@119)))) (< (DtRank d@@119) (DtRank (|#BetreeGraph.Node.Node| |a#19#0#0@@1| |a#19#1#0@@0|)))) :qid |BetreeSp.27:24| :skolemid |2504| :pattern ( (MapType0Select (|IMap#Domain| |a#19#0#0@@1|) ($Box d@@119)) (|#BetreeGraph.Node.Node| |a#19#0#0@@1| |a#19#1#0@@0|)) )))
(assert (forall ((|a#20#0#0@@1| T@U) (|a#20#1#0@@0| T@U) (bx@@158 T@U) ) (!  (=> (and (and (and (= (type |a#20#0#0@@1|) (IMapType BoxType BoxType)) (= (type |a#20#1#0@@0|) (IMapType BoxType BoxType))) (= (type bx@@158) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#20#0#0@@1|) bx@@158))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#20#0#0@@1|) bx@@158))) (DtRank (|#BetreeGraph.Node.Node| |a#20#0#0@@1| |a#20#1#0@@0|)))) :qid |BetreeSp.27:24| :skolemid |2505| :pattern ( (MapType0Select (|IMap#Domain| |a#20#0#0@@1|) bx@@158) (|#BetreeGraph.Node.Node| |a#20#0#0@@1| |a#20#1#0@@0|)) )))
(assert (forall ((|a#21#0#0@@1| T@U) (|a#21#1#0@@0| T@U) ) (!  (=> (and (= (type |a#21#0#0@@1|) (IMapType BoxType BoxType)) (= (type |a#21#1#0@@0|) (IMapType BoxType BoxType))) (= (BetreeGraph.Node.buffer (|#BetreeGraph.Node.Node| |a#21#0#0@@1| |a#21#1#0@@0|)) |a#21#1#0@@0|)) :qid |BetreeSp.27:24| :skolemid |2506| :pattern ( (|#BetreeGraph.Node.Node| |a#21#0#0@@1| |a#21#1#0@@0|)) )))
(assert (forall ((|a#22#0#0@@1| T@U) (|a#22#1#0@@0| T@U) (d@@120 T@U) ) (!  (=> (and (and (and (= (type |a#22#0#0@@1|) (IMapType BoxType BoxType)) (= (type |a#22#1#0@@0|) (IMapType BoxType BoxType))) (= (type d@@120) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#22#1#0@@0|) ($Box d@@120)))) (< (DtRank d@@120) (DtRank (|#BetreeGraph.Node.Node| |a#22#0#0@@1| |a#22#1#0@@0|)))) :qid |BetreeSp.27:24| :skolemid |2507| :pattern ( (MapType0Select (|IMap#Domain| |a#22#1#0@@0|) ($Box d@@120)) (|#BetreeGraph.Node.Node| |a#22#0#0@@1| |a#22#1#0@@0|)) )))
(assert (forall ((|a#23#0#0@@1| T@U) (|a#23#1#0@@0| T@U) (bx@@159 T@U) ) (!  (=> (and (and (and (= (type |a#23#0#0@@1|) (IMapType BoxType BoxType)) (= (type |a#23#1#0@@0|) (IMapType BoxType BoxType))) (= (type bx@@159) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#23#1#0@@0|) bx@@159))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#23#1#0@@0|) bx@@159))) (DtRank (|#BetreeGraph.Node.Node| |a#23#0#0@@1| |a#23#1#0@@0|)))) :qid |BetreeSp.27:24| :skolemid |2508| :pattern ( (MapType0Select (|IMap#Domain| |a#23#1#0@@0|) bx@@159) (|#BetreeGraph.Node.Node| |a#23#0#0@@1| |a#23#1#0@@0|)) )))
(assert (forall ((d@@121 T@U) ) (!  (=> (and (= (type d@@121) DatatypeTypeType) (|$IsA#BetreeGraph.Node| d@@121)) (BetreeGraph.Node.Node_q d@@121)) :qid |unknown.0:0| :skolemid |2509| :pattern ( (|$IsA#BetreeGraph.Node| d@@121)) )))
(assert (forall ((d@@122 T@U) ) (!  (=> (and (= (type d@@122) DatatypeTypeType) ($Is d@@122 Tclass.BetreeGraph.Node)) (BetreeGraph.Node.Node_q d@@122)) :qid |unknown.0:0| :skolemid |2510| :pattern ( (BetreeGraph.Node.Node_q d@@122) ($Is d@@122 Tclass.BetreeGraph.Node)) )))
(assert (forall ((a@@172 T@U) (b@@103 T@U) ) (!  (=> (and (and (= (type a@@172) DatatypeTypeType) (= (type b@@103) DatatypeTypeType)) true) (and (=> (|BetreeGraph.Node#Equal| a@@172 b@@103) (and (|IMap#Equal| (BetreeGraph.Node.children a@@172) (BetreeGraph.Node.children b@@103)) (|IMap#Equal| (BetreeGraph.Node.buffer a@@172) (BetreeGraph.Node.buffer b@@103)))) (=> (and (|IMap#Equal| (BetreeGraph.Node.children a@@172) (BetreeGraph.Node.children b@@103)) (|IMap#Equal| (BetreeGraph.Node.buffer a@@172) (BetreeGraph.Node.buffer b@@103))) (|BetreeGraph.Node#Equal| a@@172 b@@103)))) :qid |unknown.0:0| :skolemid |2511| :pattern ( (|BetreeGraph.Node#Equal| a@@172 b@@103)) )))
(assert (forall ((a@@173 T@U) (b@@104 T@U) ) (!  (=> (and (= (type a@@173) DatatypeTypeType) (= (type b@@104) DatatypeTypeType)) (and (=> (|BetreeGraph.Node#Equal| a@@173 b@@104) (= a@@173 b@@104)) (=> (= a@@173 b@@104) (|BetreeGraph.Node#Equal| a@@173 b@@104)))) :qid |unknown.0:0| :skolemid |2512| :pattern ( (|BetreeGraph.Node#Equal| a@@173 b@@104)) )))
(assert (= (type Tclass.BetreeGraph.__default) TyType))
(assert (= (Tag Tclass.BetreeGraph.__default) Tagclass.BetreeGraph.__default))
(assert (forall ((bx@@160 T@U) ) (!  (=> (and (= (type bx@@160) BoxType) ($IsBox bx@@160 Tclass.BetreeGraph.__default)) (and (= ($Box ($Unbox refType bx@@160)) bx@@160) ($Is ($Unbox refType bx@@160) Tclass.BetreeGraph.__default))) :qid |unknown.0:0| :skolemid |2513| :pattern ( ($IsBox bx@@160 Tclass.BetreeGraph.__default)) )))
(assert (forall (($o@@36 T@U) ) (!  (=> (= (type $o@@36) refType) (and (=> ($Is $o@@36 Tclass.BetreeGraph.__default) (or (= $o@@36 null) (= (dtype $o@@36) Tclass.BetreeGraph.__default))) (=> (or (= $o@@36 null) (= (dtype $o@@36) Tclass.BetreeGraph.__default)) ($Is $o@@36 Tclass.BetreeGraph.__default)))) :qid |unknown.0:0| :skolemid |2514| :pattern ( ($Is $o@@36 Tclass.BetreeGraph.__default)) )))
(assert (forall (($o@@37 T@U) ($h@@111 T@U) ) (!  (=> (and (= (type $o@@37) refType) (= (type $h@@111) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@37 Tclass.BetreeGraph.__default $h@@111) (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@111 $o@@37) alloc)))) (=> (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@111 $o@@37) alloc))) ($IsAlloc $o@@37 Tclass.BetreeGraph.__default $h@@111)))) :qid |unknown.0:0| :skolemid |2515| :pattern ( ($IsAlloc $o@@37 Tclass.BetreeGraph.__default $h@@111)) )))
(assert (forall ((arg0@@417 T@U) ) (! (= (type (BetreeGraph.__default.Successors arg0@@417)) (MapType0Type BoxType boolType)) :qid |funType:BetreeGraph.__default.Successors| :pattern ( (BetreeGraph.__default.Successors arg0@@417)) )))
(assert  (=> true (forall ((|node#0| T@U) ) (!  (=> (and (= (type |node#0|) DatatypeTypeType) (or (|BetreeGraph.__default.Successors#canCall| |node#0|) ($Is |node#0| Tclass.BetreeGraph.Node))) ($Is (BetreeGraph.__default.Successors |node#0|) (TISet Tclass.ReferenceType.Reference))) :qid |Graphidf.39:23| :skolemid |2516| :pattern ( (BetreeGraph.__default.Successors |node#0|)) ))))
(assert (forall ((|node#0@@0| T@U) ) (!  (=> (and (= (type |node#0@@0|) DatatypeTypeType) ($Is |node#0@@0| Tclass.BetreeGraph.Node)) (and (=> (|BetreeGraph.__default.Successors#requires| |node#0@@0|) true) (=> true (|BetreeGraph.__default.Successors#requires| |node#0@@0|)))) :qid |Graphidf.39:23| :skolemid |2517| :pattern ( (|BetreeGraph.__default.Successors#requires| |node#0@@0|)) )))
(assert (forall ((arg0@@418 T@U) (arg1@@201 T@U) (arg2@@140 T@U) (arg3@@108 T@U) (arg4@@91 T@U) ) (! (= (type (|lambda#48| arg0@@418 arg1@@201 arg2@@140 arg3@@108 arg4@@91)) (MapType0Type BoxType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@418 arg1@@201 arg2@@140 arg3@@108 arg4@@91)) )))
(assert  (=> true (forall ((|node#0@@1| T@U) ) (!  (=> (and (= (type |node#0@@1|) DatatypeTypeType) (or (|BetreeGraph.__default.Successors#canCall| |node#0@@1|) ($Is |node#0@@1| Tclass.BetreeGraph.Node))) (and (forall ((|k#0@@41| T@U) ) (!  (=> (and (= (type |k#0@@41|) (SeqType BoxType)) ($Is |k#0@@41| (TSeq Tclass.NativeTypes.byte))) (and (BetreeGraph.Node.Node_q |node#0@@1|) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@1|)) ($Box |k#0@@41|))) (BetreeGraph.Node.Node_q |node#0@@1|)))) :qid |BetreeSp.31:10| :skolemid |2518| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children |node#0@@1|)) ($Box |k#0@@41|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@1|)) ($Box |k#0@@41|))) )) (= (BetreeGraph.__default.Successors |node#0@@1|) (|lambda#48| (TSeq Tclass.NativeTypes.byte) (|IMap#Domain| (BetreeGraph.Node.children |node#0@@1|)) (|IMap#Elements| (BetreeGraph.Node.children |node#0@@1|)) (|IMap#Domain| (BetreeGraph.Node.children |node#0@@1|)) (|IMap#Elements| (BetreeGraph.Node.children |node#0@@1|)))))) :qid |Graphidf.39:23| :skolemid |2520| :pattern ( (BetreeGraph.__default.Successors |node#0@@1|)) ))))
(assert  (=> true (forall ((|node#0@@2| T@U) ) (!  (=> (and (= (type |node#0@@2|) DatatypeTypeType) (or (|BetreeGraph.__default.Successors#canCall| (Lit |node#0@@2|)) ($Is |node#0@@2| Tclass.BetreeGraph.Node))) (and (forall ((|k#1@@1| T@U) ) (!  (=> (and (= (type |k#1@@1|) (SeqType BoxType)) ($Is |k#1@@1| (TSeq Tclass.NativeTypes.byte))) (and (BetreeGraph.Node.Node_q (Lit |node#0@@2|)) (=> (U_2_bool (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children (Lit |node#0@@2|))) ($Box |k#1@@1|))) (BetreeGraph.Node.Node_q (Lit |node#0@@2|))))) :qid |BetreeSp.31:10| :skolemid |2521| :pattern ( (MapType0Select (|IMap#Elements| (BetreeGraph.Node.children |node#0@@2|)) ($Box |k#1@@1|))) :pattern ( (MapType0Select (|IMap#Domain| (BetreeGraph.Node.children |node#0@@2|)) ($Box |k#1@@1|))) )) (= (BetreeGraph.__default.Successors (Lit |node#0@@2|)) (|lambda#48| (TSeq Tclass.NativeTypes.byte) (|IMap#Domain| (BetreeGraph.Node.children (Lit |node#0@@2|))) (|IMap#Elements| (Lit (BetreeGraph.Node.children (Lit |node#0@@2|)))) (|IMap#Domain| (BetreeGraph.Node.children |node#0@@2|)) (|IMap#Elements| (BetreeGraph.Node.children |node#0@@2|)))))) :qid |Graphidf.39:23| :weight 3 :skolemid |2523| :pattern ( (BetreeGraph.__default.Successors (Lit |node#0@@2|))) ))))
(assert (= (type BetreeGraph.__default.Root) BoxType))
(assert  (=> true (=> true ($IsBox BetreeGraph.__default.Root Tclass.ReferenceType.Reference))))
(assert  (=> |BetreeGraph.__default.Root#requires| true))
(assert  (=> true |BetreeGraph.__default.Root#requires|))
(assert  (=> true (=> true (and |ReferenceType.__default.Root#canCall| (= BetreeGraph.__default.Root ReferenceType.__default.Root)))))
(assert  (=> true (=> true (and |ReferenceType.__default.Root#canCall| (= BetreeGraph.__default.Root ReferenceType.__default.Root)))))
(assert  (=> true (forall ((|g#0| T@U) ) (!  (=> (and (= (type |g#0|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsClosed#canCall| |g#0|) ($Is |g#0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) true) :qid |Graphidf.56:22| :skolemid |2524| :pattern ( (BetreeGraph.__default.IsClosed |g#0|)) ))))
(assert (forall ((|g#0@@0| T@U) ) (!  (=> (and (= (type |g#0@@0|) (IMapType BoxType BoxType)) ($Is |g#0@@0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (and (=> (|BetreeGraph.__default.IsClosed#requires| |g#0@@0|) true) (=> true (|BetreeGraph.__default.IsClosed#requires| |g#0@@0|)))) :qid |Graphidf.56:22| :skolemid |2525| :pattern ( (|BetreeGraph.__default.IsClosed#requires| |g#0@@0|)) )))
(assert  (=> true (forall ((|g#0@@1| T@U) ) (!  (=> (and (= (type |g#0@@1|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsClosed#canCall| |g#0@@1|) ($Is |g#0@@1| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|ref#0| T@U) ) (!  (=> (and (and (= (type |ref#0|) BoxType) ($IsBox |ref#0| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0|)))) :qid |Graphidf.57:12| :skolemid |2526| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0|)) )) (and (=> (BetreeGraph.__default.IsClosed |g#0@@1|) (forall ((|ref#0@@0| T@U) ) (!  (=> (and (and (= (type |ref#0@@0|) BoxType) ($IsBox |ref#0@@0| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0@@0|))) (|ISet#Subset| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0@@0|))) (|IMap#Domain| |g#0@@1|))) :qid |Graphidf.57:12| :skolemid |2527| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0@@0|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0@@0|)) ))) (=> (forall ((|ref#0@@1| T@U) ) (!  (=> (and (and (= (type |ref#0@@1|) BoxType) ($IsBox |ref#0@@1| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0@@1|))) (|ISet#Subset| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0@@1|))) (|IMap#Domain| |g#0@@1|))) :qid |Graphidf.57:12| :skolemid |2527| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@1|) |ref#0@@1|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@1|) |ref#0@@1|)) )) (BetreeGraph.__default.IsClosed |g#0@@1|))))) :qid |Graphidf.56:22| :skolemid |2528| :pattern ( (BetreeGraph.__default.IsClosed |g#0@@1|)) ))))
(assert  (=> true (forall ((|g#0@@2| T@U) ) (!  (=> (and (= (type |g#0@@2|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsClosed#canCall| (Lit |g#0@@2|)) ($Is |g#0@@2| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|ref#1| T@U) ) (!  (=> (and (and (= (type |ref#1|) BoxType) ($IsBox |ref#1| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@2|)) |ref#1|)))) :qid |Graphidf.57:12| :skolemid |2529| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@2|) |ref#1|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1|)) )) (and (=> (BetreeGraph.__default.IsClosed (Lit |g#0@@2|)) (forall ((|ref#1@@0| T@U) ) (!  (=> (and (and (= (type |ref#1@@0|) BoxType) ($IsBox |ref#1@@0| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1@@0|))) (|ISet#Subset| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@2|)) |ref#1@@0|))) (|IMap#Domain| (Lit |g#0@@2|)))) :qid |Graphidf.57:12| :skolemid |2530| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@2|) |ref#1@@0|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1@@0|)) ))) (=> (forall ((|ref#1@@1| T@U) ) (!  (=> (and (and (= (type |ref#1@@1|) BoxType) ($IsBox |ref#1@@1| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1@@1|))) (|ISet#Subset| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@2|)) |ref#1@@1|))) (|IMap#Domain| (Lit |g#0@@2|)))) :qid |Graphidf.57:12| :skolemid |2530| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@2|) |ref#1@@1|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@2|) |ref#1@@1|)) )) (BetreeGraph.__default.IsClosed (Lit |g#0@@2|)))))) :qid |Graphidf.56:22| :weight 3 :skolemid |2531| :pattern ( (BetreeGraph.__default.IsClosed (Lit |g#0@@2|))) ))))
(assert  (=> true (forall ((|g#0@@3| T@U) (|path#0| T@U) ) (!  (=> (and (and (= (type |g#0@@3|) (IMapType BoxType BoxType)) (= (type |path#0|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsPath#canCall| |g#0@@3| |path#0|) (and ($Is |g#0@@3| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |Graphidf.60:20| :skolemid |2532| :pattern ( (BetreeGraph.__default.IsPath |g#0@@3| |path#0|)) ))))
(assert (forall ((|g#0@@4| T@U) (|path#0@@0| T@U) ) (!  (=> (and (and (= (type |g#0@@4|) (IMapType BoxType BoxType)) (= (type |path#0@@0|) (SeqType BoxType))) (and ($Is |g#0@@4| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@0| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|BetreeGraph.__default.IsPath#requires| |g#0@@4| |path#0@@0|) true) (=> true (|BetreeGraph.__default.IsPath#requires| |g#0@@4| |path#0@@0|)))) :qid |Graphidf.60:20| :skolemid |2533| :pattern ( (|BetreeGraph.__default.IsPath#requires| |g#0@@4| |path#0@@0|)) )))
(assert  (=> true (forall ((|g#0@@5| T@U) (|path#0@@1| T@U) ) (!  (=> (and (and (= (type |g#0@@5|) (IMapType BoxType BoxType)) (= (type |path#0@@1|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsPath#canCall| |g#0@@5| |path#0@@1|) (and ($Is |g#0@@5| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@1| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (forall ((|i#0@@83| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| (- (|Seq#Length| |path#0@@1|) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#0@@83|))))) :qid |Graphidf.61:12| :skolemid |2535| :pattern ( (|Seq#Index| |path#0@@1| |i#0@@83|)) )) (forall ((|i#1@@23| Int) (|_t#0#0| Int) ) (!  (=> (= |_t#0#0| (+ |i#1@@23| 1)) (=> (< |i#1@@23| (- (|Seq#Length| |path#0@@1|) 1)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#1@@23|)))))) :qid |Graphidf.61:12| :skolemid |2534| :pattern ( (|Seq#Index| |path#0@@1| |i#1@@23|) (|Seq#Index| |path#0@@1| |_t#0#0|)) ))) (and (=> (BetreeGraph.__default.IsPath |g#0@@5| |path#0@@1|) (and (forall ((|i#0@@84| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| (- (|Seq#Length| |path#0@@1|) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#0@@84|))))) :qid |Graphidf.61:12| :skolemid |2536| :pattern ( (|Seq#Index| |path#0@@1| |i#0@@84|)) )) (forall ((|i#1@@24| Int) (|_t#0#0@@0| Int) ) (!  (=> (= |_t#0#0@@0| (+ |i#1@@24| 1)) (=> (and (<= (LitInt 0) |i#1@@24|) (< |i#1@@24| (- (|Seq#Length| |path#0@@1|) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#1@@24|)))) (|Seq#Index| |path#0@@1| |_t#0#0@@0|))))) :qid |Graphidf.61:12| :skolemid |2537| :pattern ( (|Seq#Index| |path#0@@1| |i#1@@24|) (|Seq#Index| |path#0@@1| |_t#0#0@@0|)) )))) (=> (and (forall ((|i#0@@85| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@85|) (< |i#0@@85| (- (|Seq#Length| |path#0@@1|) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#0@@85|))))) :qid |Graphidf.61:12| :skolemid |2536| :pattern ( (|Seq#Index| |path#0@@1| |i#0@@85|)) )) (forall ((|i#1@@25| Int) (|_t#0#0@@1| Int) ) (!  (=> (= |_t#0#0@@1| (+ |i#1@@25| 1)) (=> (and (<= (LitInt 0) |i#1@@25|) (< |i#1@@25| (- (|Seq#Length| |path#0@@1|) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@5|) (|Seq#Index| |path#0@@1| |i#1@@25|)))) (|Seq#Index| |path#0@@1| |_t#0#0@@1|))))) :qid |Graphidf.61:12| :skolemid |2537| :pattern ( (|Seq#Index| |path#0@@1| |i#1@@25|) (|Seq#Index| |path#0@@1| |_t#0#0@@1|)) ))) (BetreeGraph.__default.IsPath |g#0@@5| |path#0@@1|))))) :qid |Graphidf.60:20| :skolemid |2538| :pattern ( (BetreeGraph.__default.IsPath |g#0@@5| |path#0@@1|)) ))))
(assert  (=> true (forall ((|g#0@@6| T@U) (|path#0@@2| T@U) ) (!  (=> (and (and (= (type |g#0@@6|) (IMapType BoxType BoxType)) (= (type |path#0@@2|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsPath#canCall| |g#0@@6| (Lit |path#0@@2|)) (and ($Is |g#0@@6| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@2| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (forall ((|i#2@@13| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@13|) (< |i#2@@13| (- (|Seq#Length| (Lit |path#0@@2|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#2@@13|))))) :qid |Graphidf.61:12| :skolemid |2540| :pattern ( (|Seq#Index| |path#0@@2| |i#2@@13|)) )) (forall ((|i#3@@11| Int) (|_t#0#1| Int) ) (!  (=> (= |_t#0#1| (+ |i#3@@11| 1)) (=> (< |i#3@@11| (- (|Seq#Length| (Lit |path#0@@2|)) 1)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#3@@11|)))))) :qid |Graphidf.61:12| :skolemid |2539| :pattern ( (|Seq#Index| |path#0@@2| |i#3@@11|) (|Seq#Index| |path#0@@2| |_t#0#1|)) ))) (and (=> (BetreeGraph.__default.IsPath |g#0@@6| (Lit |path#0@@2|)) (and (forall ((|i#2@@14| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@14|) (< |i#2@@14| (- (|Seq#Length| (Lit |path#0@@2|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#2@@14|))))) :qid |Graphidf.61:12| :skolemid |2541| :pattern ( (|Seq#Index| |path#0@@2| |i#2@@14|)) )) (forall ((|i#3@@12| Int) (|_t#0#1@@0| Int) ) (!  (=> (= |_t#0#1@@0| (+ |i#3@@12| 1)) (=> (and (<= (LitInt 0) |i#3@@12|) (< |i#3@@12| (- (|Seq#Length| (Lit |path#0@@2|)) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#3@@12|)))) (|Seq#Index| (Lit |path#0@@2|) |_t#0#1@@0|))))) :qid |Graphidf.61:12| :skolemid |2542| :pattern ( (|Seq#Index| |path#0@@2| |i#3@@12|) (|Seq#Index| |path#0@@2| |_t#0#1@@0|)) )))) (=> (and (forall ((|i#2@@15| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@15|) (< |i#2@@15| (- (|Seq#Length| (Lit |path#0@@2|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#2@@15|))))) :qid |Graphidf.61:12| :skolemid |2541| :pattern ( (|Seq#Index| |path#0@@2| |i#2@@15|)) )) (forall ((|i#3@@13| Int) (|_t#0#1@@1| Int) ) (!  (=> (= |_t#0#1@@1| (+ |i#3@@13| 1)) (=> (and (<= (LitInt 0) |i#3@@13|) (< |i#3@@13| (- (|Seq#Length| (Lit |path#0@@2|)) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@6|) (|Seq#Index| (Lit |path#0@@2|) |i#3@@13|)))) (|Seq#Index| (Lit |path#0@@2|) |_t#0#1@@1|))))) :qid |Graphidf.61:12| :skolemid |2542| :pattern ( (|Seq#Index| |path#0@@2| |i#3@@13|) (|Seq#Index| |path#0@@2| |_t#0#1@@1|)) ))) (BetreeGraph.__default.IsPath |g#0@@6| (Lit |path#0@@2|)))))) :qid |Graphidf.60:20| :weight 3 :skolemid |2543| :pattern ( (BetreeGraph.__default.IsPath |g#0@@6| (Lit |path#0@@2|))) ))))
(assert  (=> true (forall ((|g#0@@7| T@U) (|path#0@@3| T@U) ) (!  (=> (and (and (= (type |g#0@@7|) (IMapType BoxType BoxType)) (= (type |path#0@@3|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@7|) (Lit |path#0@@3|)) (and ($Is |g#0@@7| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@3| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (forall ((|i#4@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@2|) (< |i#4@@2| (- (|Seq#Length| (Lit |path#0@@3|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@7|) (|Seq#Index| (Lit |path#0@@3|) |i#4@@2|))))) :qid |Graphidf.61:12| :skolemid |2545| :pattern ( (|Seq#Index| |path#0@@3| |i#4@@2|)) )) (forall ((|i#5@@4| Int) (|_t#0#2| Int) ) (!  (=> (= |_t#0#2| (+ |i#5@@4| 1)) (=> (< |i#5@@4| (- (|Seq#Length| (Lit |path#0@@3|)) 1)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@7|)) (|Seq#Index| (Lit |path#0@@3|) |i#5@@4|)))))) :qid |Graphidf.61:12| :skolemid |2544| :pattern ( (|Seq#Index| |path#0@@3| |i#5@@4|) (|Seq#Index| |path#0@@3| |_t#0#2|)) ))) (and (=> (BetreeGraph.__default.IsPath (Lit |g#0@@7|) (Lit |path#0@@3|)) (and (forall ((|i#4@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@3|) (< |i#4@@3| (- (|Seq#Length| (Lit |path#0@@3|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@7|) (|Seq#Index| (Lit |path#0@@3|) |i#4@@3|))))) :qid |Graphidf.61:12| :skolemid |2546| :pattern ( (|Seq#Index| |path#0@@3| |i#4@@3|)) )) (forall ((|i#5@@5| Int) (|_t#0#2@@0| Int) ) (!  (=> (= |_t#0#2@@0| (+ |i#5@@5| 1)) (=> (and (<= (LitInt 0) |i#5@@5|) (< |i#5@@5| (- (|Seq#Length| (Lit |path#0@@3|)) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@7|)) (|Seq#Index| (Lit |path#0@@3|) |i#5@@5|)))) (|Seq#Index| (Lit |path#0@@3|) |_t#0#2@@0|))))) :qid |Graphidf.61:12| :skolemid |2547| :pattern ( (|Seq#Index| |path#0@@3| |i#5@@5|) (|Seq#Index| |path#0@@3| |_t#0#2@@0|)) )))) (=> (and (forall ((|i#4@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@4|) (< |i#4@@4| (- (|Seq#Length| (Lit |path#0@@3|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@7|) (|Seq#Index| (Lit |path#0@@3|) |i#4@@4|))))) :qid |Graphidf.61:12| :skolemid |2546| :pattern ( (|Seq#Index| |path#0@@3| |i#4@@4|)) )) (forall ((|i#5@@6| Int) (|_t#0#2@@1| Int) ) (!  (=> (= |_t#0#2@@1| (+ |i#5@@6| 1)) (=> (and (<= (LitInt 0) |i#5@@6|) (< |i#5@@6| (- (|Seq#Length| (Lit |path#0@@3|)) 1))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@7|)) (|Seq#Index| (Lit |path#0@@3|) |i#5@@6|)))) (|Seq#Index| (Lit |path#0@@3|) |_t#0#2@@1|))))) :qid |Graphidf.61:12| :skolemid |2547| :pattern ( (|Seq#Index| |path#0@@3| |i#5@@6|) (|Seq#Index| |path#0@@3| |_t#0#2@@1|)) ))) (BetreeGraph.__default.IsPath (Lit |g#0@@7|) (Lit |path#0@@3|)))))) :qid |Graphidf.60:20| :weight 3 :skolemid |2548| :pattern ( (BetreeGraph.__default.IsPath (Lit |g#0@@7|) (Lit |path#0@@3|))) ))))
(assert  (=> true (forall ((|g#0@@8| T@U) (|path#0@@4| T@U) ) (!  (=> (and (and (= (type |g#0@@8|) (IMapType BoxType BoxType)) (= (type |path#0@@4|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsCycle#canCall| |g#0@@8| |path#0@@4|) (and ($Is |g#0@@8| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@4| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |Graphidf.64:21| :skolemid |2549| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@8| |path#0@@4|)) ))))
(assert (forall ((|g#0@@9| T@U) (|path#0@@5| T@U) ) (!  (=> (and (and (= (type |g#0@@9|) (IMapType BoxType BoxType)) (= (type |path#0@@5|) (SeqType BoxType))) (and ($Is |g#0@@9| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@5| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|BetreeGraph.__default.IsCycle#requires| |g#0@@9| |path#0@@5|) true) (=> true (|BetreeGraph.__default.IsCycle#requires| |g#0@@9| |path#0@@5|)))) :qid |Graphidf.64:21| :skolemid |2550| :pattern ( (|BetreeGraph.__default.IsCycle#requires| |g#0@@9| |path#0@@5|)) )))
(assert  (=> true (forall ((|g#0@@10| T@U) (|path#0@@6| T@U) ) (!  (=> (and (and (= (type |g#0@@10|) (IMapType BoxType BoxType)) (= (type |path#0@@6|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsCycle#canCall| |g#0@@10| |path#0@@6|) (and ($Is |g#0@@10| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@6| (TSeq Tclass.ReferenceType.Reference))))) (and (and (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@10| |path#0@@6|) (=> (< 0 (|Seq#Length| |path#0@@6|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@6|))) (=> (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@6|) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|)))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@6|) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|))))))) (and (=> (BetreeGraph.__default.IsCycle |g#0@@10| |path#0@@6|) (and (and (and (BetreeGraph.__default.IsPath |g#0@@10| |path#0@@6|) (< 0 (|Seq#Length| |path#0@@6|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|)))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|)))) (|Seq#Index| |path#0@@6| (LitInt 0)))))) (=> (and (and (and (BetreeGraph.__default.IsPath |g#0@@10| |path#0@@6|) (< 0 (|Seq#Length| |path#0@@6|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|)))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@10|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@6|)))) (|Seq#Index| |path#0@@6| (LitInt 0))))) (BetreeGraph.__default.IsCycle |g#0@@10| |path#0@@6|))))) :qid |Graphidf.64:21| :skolemid |2551| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@10| |path#0@@6|)) ))))
(assert  (=> true (forall ((|g#0@@11| T@U) (|path#0@@7| T@U) ) (!  (=> (and (and (= (type |g#0@@11|) (IMapType BoxType BoxType)) (= (type |path#0@@7|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsCycle#canCall| |g#0@@11| (Lit |path#0@@7|)) (and ($Is |g#0@@11| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@7| (TSeq Tclass.ReferenceType.Reference))))) (and (and (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@11| (Lit |path#0@@7|)) (=> (< 0 (|Seq#Length| (Lit |path#0@@7|))) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@7|)))) (=> (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@7|)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@11|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|))))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@7|)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@11|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|))))))))) (and (=> (BetreeGraph.__default.IsCycle |g#0@@11| (Lit |path#0@@7|)) (and (and (and (BetreeGraph.__default.IsPath |g#0@@11| (Lit |path#0@@7|)) (< 0 (|Seq#Length| (Lit |path#0@@7|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@11|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|))))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@11|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|)))))) (|Seq#Index| (Lit |path#0@@7|) (LitInt 0)))))) (=> (and (and (and (BetreeGraph.__default.IsPath |g#0@@11| (Lit |path#0@@7|)) (< 0 (|Seq#Length| (Lit |path#0@@7|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@11|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|))))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@11|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@7|)))))) (|Seq#Index| (Lit |path#0@@7|) (LitInt 0))))) (BetreeGraph.__default.IsCycle |g#0@@11| (Lit |path#0@@7|)))))) :qid |Graphidf.64:21| :weight 3 :skolemid |2552| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@11| (Lit |path#0@@7|))) ))))
(assert  (=> true (forall ((|g#0@@12| T@U) (|path#0@@8| T@U) ) (!  (=> (and (and (= (type |g#0@@12|) (IMapType BoxType BoxType)) (= (type |path#0@@8|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsCycle#canCall| (Lit |g#0@@12|) (Lit |path#0@@8|)) (and ($Is |g#0@@12| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@8| (TSeq Tclass.ReferenceType.Reference))))) (and (and (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@12|) (Lit |path#0@@8|)) (=> (< 0 (|Seq#Length| (Lit |path#0@@8|))) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@8|)))) (=> (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@8|)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@12|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|))))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@8|)) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@12|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|))))))))) (and (=> (BetreeGraph.__default.IsCycle (Lit |g#0@@12|) (Lit |path#0@@8|)) (and (and (and (BetreeGraph.__default.IsPath (Lit |g#0@@12|) (Lit |path#0@@8|)) (< 0 (|Seq#Length| (Lit |path#0@@8|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@12|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|))))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@12|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|)))))) (|Seq#Index| (Lit |path#0@@8|) (LitInt 0)))))) (=> (and (and (and (BetreeGraph.__default.IsPath (Lit |g#0@@12|) (Lit |path#0@@8|)) (< 0 (|Seq#Length| (Lit |path#0@@8|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@12|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|))))) (U_2_bool (MapType0Select (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@12|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@8|)))))) (|Seq#Index| (Lit |path#0@@8|) (LitInt 0))))) (BetreeGraph.__default.IsCycle (Lit |g#0@@12|) (Lit |path#0@@8|)))))) :qid |Graphidf.64:21| :weight 3 :skolemid |2553| :pattern ( (BetreeGraph.__default.IsCycle (Lit |g#0@@12|) (Lit |path#0@@8|))) ))))
(assert  (=> true (forall ((|g#0@@13| T@U) (|path#0@@9| T@U) ) (!  (=> (and (and (= (type |g#0@@13|) (IMapType BoxType BoxType)) (= (type |path#0@@9|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsSimple#canCall| |g#0@@13| |path#0@@9|) (and ($Is |g#0@@13| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@9| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |Graphidf.71:22| :skolemid |2554| :pattern ( (BetreeGraph.__default.IsSimple |g#0@@13| |path#0@@9|)) ))))
(assert (forall ((|g#0@@14| T@U) (|path#0@@10| T@U) ) (!  (=> (and (and (= (type |g#0@@14|) (IMapType BoxType BoxType)) (= (type |path#0@@10|) (SeqType BoxType))) (and ($Is |g#0@@14| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@10| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|BetreeGraph.__default.IsSimple#requires| |g#0@@14| |path#0@@10|) true) (=> true (|BetreeGraph.__default.IsSimple#requires| |g#0@@14| |path#0@@10|)))) :qid |Graphidf.71:22| :skolemid |2555| :pattern ( (|BetreeGraph.__default.IsSimple#requires| |g#0@@14| |path#0@@10|)) )))
(assert  (=> true (forall ((|g#0@@15| T@U) (|path#0@@11| T@U) ) (!  (=> (and (and (= (type |g#0@@15|) (IMapType BoxType BoxType)) (= (type |path#0@@11|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsSimple#canCall| |g#0@@15| |path#0@@11|) (and ($Is |g#0@@15| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@11| (TSeq Tclass.ReferenceType.Reference))))) (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@15| |path#0@@11|) (and (=> (BetreeGraph.__default.IsSimple |g#0@@15| |path#0@@11|) (and (BetreeGraph.__default.IsPath |g#0@@15| |path#0@@11|) (forall ((|i#0@@86| Int) (|j#0@@11| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@86|) (< |i#0@@86| (|Seq#Length| |path#0@@11|))) (and (<= (LitInt 0) |j#0@@11|) (< |j#0@@11| (|Seq#Length| |path#0@@11|)))) (not (= |i#0@@86| |j#0@@11|))) (not (= (|Seq#Index| |path#0@@11| |i#0@@86|) (|Seq#Index| |path#0@@11| |j#0@@11|))))) :qid |Graphidf.73:16| :skolemid |2556| :pattern ( (|Seq#Index| |path#0@@11| |j#0@@11|) (|Seq#Index| |path#0@@11| |i#0@@86|)) )))) (=> (and (BetreeGraph.__default.IsPath |g#0@@15| |path#0@@11|) (forall ((|i#0@@87| Int) (|j#0@@12| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| (|Seq#Length| |path#0@@11|))) (and (<= (LitInt 0) |j#0@@12|) (< |j#0@@12| (|Seq#Length| |path#0@@11|)))) (not (= |i#0@@87| |j#0@@12|))) (not (= (|Seq#Index| |path#0@@11| |i#0@@87|) (|Seq#Index| |path#0@@11| |j#0@@12|))))) :qid |Graphidf.73:16| :skolemid |2556| :pattern ( (|Seq#Index| |path#0@@11| |j#0@@12|) (|Seq#Index| |path#0@@11| |i#0@@87|)) ))) (BetreeGraph.__default.IsSimple |g#0@@15| |path#0@@11|))))) :qid |Graphidf.71:22| :skolemid |2557| :pattern ( (BetreeGraph.__default.IsSimple |g#0@@15| |path#0@@11|)) ))))
(assert  (=> true (forall ((|g#0@@16| T@U) (|path#0@@12| T@U) ) (!  (=> (and (and (= (type |g#0@@16|) (IMapType BoxType BoxType)) (= (type |path#0@@12|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsSimple#canCall| |g#0@@16| (Lit |path#0@@12|)) (and ($Is |g#0@@16| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@12| (TSeq Tclass.ReferenceType.Reference))))) (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@16| (Lit |path#0@@12|)) (and (=> (BetreeGraph.__default.IsSimple |g#0@@16| (Lit |path#0@@12|)) (and (BetreeGraph.__default.IsPath |g#0@@16| (Lit |path#0@@12|)) (forall ((|i#1@@26| Int) (|j#1@@6| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@26|) (< |i#1@@26| (|Seq#Length| (Lit |path#0@@12|)))) (and (<= (LitInt 0) |j#1@@6|) (< |j#1@@6| (|Seq#Length| (Lit |path#0@@12|))))) (not (= |i#1@@26| |j#1@@6|))) (not (= (|Seq#Index| (Lit |path#0@@12|) |i#1@@26|) (|Seq#Index| (Lit |path#0@@12|) |j#1@@6|))))) :qid |Graphidf.73:16| :skolemid |2558| :pattern ( (|Seq#Index| |path#0@@12| |j#1@@6|) (|Seq#Index| |path#0@@12| |i#1@@26|)) )))) (=> (and (BetreeGraph.__default.IsPath |g#0@@16| (Lit |path#0@@12|)) (forall ((|i#1@@27| Int) (|j#1@@7| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@27|) (< |i#1@@27| (|Seq#Length| (Lit |path#0@@12|)))) (and (<= (LitInt 0) |j#1@@7|) (< |j#1@@7| (|Seq#Length| (Lit |path#0@@12|))))) (not (= |i#1@@27| |j#1@@7|))) (not (= (|Seq#Index| (Lit |path#0@@12|) |i#1@@27|) (|Seq#Index| (Lit |path#0@@12|) |j#1@@7|))))) :qid |Graphidf.73:16| :skolemid |2558| :pattern ( (|Seq#Index| |path#0@@12| |j#1@@7|) (|Seq#Index| |path#0@@12| |i#1@@27|)) ))) (BetreeGraph.__default.IsSimple |g#0@@16| (Lit |path#0@@12|)))))) :qid |Graphidf.71:22| :weight 3 :skolemid |2559| :pattern ( (BetreeGraph.__default.IsSimple |g#0@@16| (Lit |path#0@@12|))) ))))
(assert  (=> true (forall ((|g#0@@17| T@U) (|path#0@@13| T@U) ) (!  (=> (and (and (= (type |g#0@@17|) (IMapType BoxType BoxType)) (= (type |path#0@@13|) (SeqType BoxType))) (or (|BetreeGraph.__default.IsSimple#canCall| (Lit |g#0@@17|) (Lit |path#0@@13|)) (and ($Is |g#0@@17| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@13| (TSeq Tclass.ReferenceType.Reference))))) (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@17|) (Lit |path#0@@13|)) (and (=> (BetreeGraph.__default.IsSimple (Lit |g#0@@17|) (Lit |path#0@@13|)) (and (BetreeGraph.__default.IsPath (Lit |g#0@@17|) (Lit |path#0@@13|)) (forall ((|i#2@@16| Int) (|j#2| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#2@@16|) (< |i#2@@16| (|Seq#Length| (Lit |path#0@@13|)))) (and (<= (LitInt 0) |j#2|) (< |j#2| (|Seq#Length| (Lit |path#0@@13|))))) (not (= |i#2@@16| |j#2|))) (not (= (|Seq#Index| (Lit |path#0@@13|) |i#2@@16|) (|Seq#Index| (Lit |path#0@@13|) |j#2|))))) :qid |Graphidf.73:16| :skolemid |2560| :pattern ( (|Seq#Index| |path#0@@13| |j#2|) (|Seq#Index| |path#0@@13| |i#2@@16|)) )))) (=> (and (BetreeGraph.__default.IsPath (Lit |g#0@@17|) (Lit |path#0@@13|)) (forall ((|i#2@@17| Int) (|j#2@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#2@@17|) (< |i#2@@17| (|Seq#Length| (Lit |path#0@@13|)))) (and (<= (LitInt 0) |j#2@@0|) (< |j#2@@0| (|Seq#Length| (Lit |path#0@@13|))))) (not (= |i#2@@17| |j#2@@0|))) (not (= (|Seq#Index| (Lit |path#0@@13|) |i#2@@17|) (|Seq#Index| (Lit |path#0@@13|) |j#2@@0|))))) :qid |Graphidf.73:16| :skolemid |2560| :pattern ( (|Seq#Index| |path#0@@13| |j#2@@0|) (|Seq#Index| |path#0@@13| |i#2@@17|)) ))) (BetreeGraph.__default.IsSimple (Lit |g#0@@17|) (Lit |path#0@@13|)))))) :qid |Graphidf.71:22| :weight 3 :skolemid |2561| :pattern ( (BetreeGraph.__default.IsSimple (Lit |g#0@@17|) (Lit |path#0@@13|))) ))))
(assert  (=> true (forall ((|g#0@@18| T@U) ) (!  (=> (and (= (type |g#0@@18|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsAcyclic#canCall| |g#0@@18|) ($Is |g#0@@18| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) true) :qid |Graphidf.76:23| :skolemid |2562| :pattern ( (BetreeGraph.__default.IsAcyclic |g#0@@18|)) ))))
(assert (forall ((|g#0@@19| T@U) ) (!  (=> (and (= (type |g#0@@19|) (IMapType BoxType BoxType)) ($Is |g#0@@19| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (and (=> (|BetreeGraph.__default.IsAcyclic#requires| |g#0@@19|) true) (=> true (|BetreeGraph.__default.IsAcyclic#requires| |g#0@@19|)))) :qid |Graphidf.76:23| :skolemid |2563| :pattern ( (|BetreeGraph.__default.IsAcyclic#requires| |g#0@@19|)) )))
(assert  (=> true (forall ((|g#0@@20| T@U) ) (!  (=> (and (= (type |g#0@@20|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsAcyclic#canCall| |g#0@@20|) ($Is |g#0@@20| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|path#0@@14| T@U) ) (!  (=> (and (= (type |path#0@@14|) (SeqType BoxType)) ($Is |path#0@@14| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@20| |path#0@@14|) (=> (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@14|) (|BetreeGraph.__default.IsCycle#canCall| |g#0@@20| |path#0@@14|)))) :qid |Graphidf.77:12| :skolemid |2564| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@20| |path#0@@14|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@14|)) )) (and (=> (BetreeGraph.__default.IsAcyclic |g#0@@20|) (forall ((|path#0@@15| T@U) ) (!  (=> (and (and (= (type |path#0@@15|) (SeqType BoxType)) ($Is |path#0@@15| (TSeq Tclass.ReferenceType.Reference))) (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@15|)) (not (BetreeGraph.__default.IsCycle |g#0@@20| |path#0@@15|))) :qid |Graphidf.77:12| :skolemid |2565| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@20| |path#0@@15|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@15|)) ))) (=> (forall ((|path#0@@16| T@U) ) (!  (=> (and (and (= (type |path#0@@16|) (SeqType BoxType)) ($Is |path#0@@16| (TSeq Tclass.ReferenceType.Reference))) (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@16|)) (not (BetreeGraph.__default.IsCycle |g#0@@20| |path#0@@16|))) :qid |Graphidf.77:12| :skolemid |2565| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@20| |path#0@@16|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@20| |path#0@@16|)) )) (BetreeGraph.__default.IsAcyclic |g#0@@20|))))) :qid |Graphidf.76:23| :skolemid |2566| :pattern ( (BetreeGraph.__default.IsAcyclic |g#0@@20|)) ))))
(assert  (=> true (forall ((|g#0@@21| T@U) ) (!  (=> (and (= (type |g#0@@21|) (IMapType BoxType BoxType)) (or (|BetreeGraph.__default.IsAcyclic#canCall| (Lit |g#0@@21|)) ($Is |g#0@@21| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (forall ((|path#1| T@U) ) (!  (=> (and (= (type |path#1|) (SeqType BoxType)) ($Is |path#1| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@21|) |path#1|) (=> (BetreeGraph.__default.IsPath (Lit |g#0@@21|) |path#1|) (|BetreeGraph.__default.IsCycle#canCall| (Lit |g#0@@21|) |path#1|)))) :qid |Graphidf.77:12| :skolemid |2567| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@21| |path#1|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@21| |path#1|)) )) (and (=> (BetreeGraph.__default.IsAcyclic (Lit |g#0@@21|)) (forall ((|path#1@@0| T@U) ) (!  (=> (and (and (= (type |path#1@@0|) (SeqType BoxType)) ($Is |path#1@@0| (TSeq Tclass.ReferenceType.Reference))) (BetreeGraph.__default.IsPath (Lit |g#0@@21|) |path#1@@0|)) (not (BetreeGraph.__default.IsCycle (Lit |g#0@@21|) |path#1@@0|))) :qid |Graphidf.77:12| :skolemid |2568| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@21| |path#1@@0|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@21| |path#1@@0|)) ))) (=> (forall ((|path#1@@1| T@U) ) (!  (=> (and (and (= (type |path#1@@1|) (SeqType BoxType)) ($Is |path#1@@1| (TSeq Tclass.ReferenceType.Reference))) (BetreeGraph.__default.IsPath (Lit |g#0@@21|) |path#1@@1|)) (not (BetreeGraph.__default.IsCycle (Lit |g#0@@21|) |path#1@@1|))) :qid |Graphidf.77:12| :skolemid |2568| :pattern ( (BetreeGraph.__default.IsCycle |g#0@@21| |path#1@@1|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@21| |path#1@@1|)) )) (BetreeGraph.__default.IsAcyclic (Lit |g#0@@21|)))))) :qid |Graphidf.76:23| :weight 3 :skolemid |2569| :pattern ( (BetreeGraph.__default.IsAcyclic (Lit |g#0@@21|))) ))))
(assert  (=> true (forall ((|g#0@@22| T@U) (|path#0@@17| T@U) (|start#0@@16| T@U) (|end#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@22|) (IMapType BoxType BoxType)) (= (type |path#0@@17|) (SeqType BoxType))) (= (type |start#0@@16|) BoxType)) (= (type |end#0@@16|) BoxType)) (or (|BetreeGraph.__default.IsPathFromTo#canCall| |g#0@@22| |path#0@@17| |start#0@@16| |end#0@@16|) (and (and (and ($Is |g#0@@22| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@17| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@16| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@16| Tclass.ReferenceType.Reference)))) true) :qid |Graphidf.92:26| :skolemid |2570| :pattern ( (BetreeGraph.__default.IsPathFromTo |g#0@@22| |path#0@@17| |start#0@@16| |end#0@@16|)) ))))
(assert (forall ((|g#0@@23| T@U) (|path#0@@18| T@U) (|start#0@@17| T@U) (|end#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@23|) (IMapType BoxType BoxType)) (= (type |path#0@@18|) (SeqType BoxType))) (= (type |start#0@@17|) BoxType)) (= (type |end#0@@17|) BoxType)) (and (and (and ($Is |g#0@@23| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@18| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@17| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@17| Tclass.ReferenceType.Reference))) (and (=> (|BetreeGraph.__default.IsPathFromTo#requires| |g#0@@23| |path#0@@18| |start#0@@17| |end#0@@17|) true) (=> true (|BetreeGraph.__default.IsPathFromTo#requires| |g#0@@23| |path#0@@18| |start#0@@17| |end#0@@17|)))) :qid |Graphidf.92:26| :skolemid |2571| :pattern ( (|BetreeGraph.__default.IsPathFromTo#requires| |g#0@@23| |path#0@@18| |start#0@@17| |end#0@@17|)) )))
(assert  (=> true (forall ((|g#0@@24| T@U) (|path#0@@19| T@U) (|start#0@@18| T@U) (|end#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@24|) (IMapType BoxType BoxType)) (= (type |path#0@@19|) (SeqType BoxType))) (= (type |start#0@@18|) BoxType)) (= (type |end#0@@18|) BoxType)) (or (|BetreeGraph.__default.IsPathFromTo#canCall| |g#0@@24| |path#0@@19| |start#0@@18| |end#0@@18|) (and (and (and ($Is |g#0@@24| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@19| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@18| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@18| Tclass.ReferenceType.Reference)))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@24| |path#0@@19|) (=> (= (|Seq#Index| |path#0@@19| (LitInt 0)) |start#0@@18|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@19|))) (and (=> (BetreeGraph.__default.IsPathFromTo |g#0@@24| |path#0@@19| |start#0@@18| |end#0@@18|) (and (and (and (BetreeGraph.__default.IsPath |g#0@@24| |path#0@@19|) (< 1 (|Seq#Length| |path#0@@19|))) (= (|Seq#Index| |path#0@@19| (LitInt 0)) |start#0@@18|)) (= (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@19|) |end#0@@18|))) (=> (and (and (and (BetreeGraph.__default.IsPath |g#0@@24| |path#0@@19|) (< 1 (|Seq#Length| |path#0@@19|))) (= (|Seq#Index| |path#0@@19| (LitInt 0)) |start#0@@18|)) (= (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@19|) |end#0@@18|)) (BetreeGraph.__default.IsPathFromTo |g#0@@24| |path#0@@19| |start#0@@18| |end#0@@18|))))) :qid |Graphidf.92:26| :skolemid |2572| :pattern ( (BetreeGraph.__default.IsPathFromTo |g#0@@24| |path#0@@19| |start#0@@18| |end#0@@18|)) ))))
(assert  (=> true (forall ((|g#0@@25| T@U) (|path#0@@20| T@U) (|start#0@@19| T@U) (|end#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@25|) (IMapType BoxType BoxType)) (= (type |path#0@@20|) (SeqType BoxType))) (= (type |start#0@@19|) BoxType)) (= (type |end#0@@19|) BoxType)) (or (|BetreeGraph.__default.IsPathFromTo#canCall| |g#0@@25| (Lit |path#0@@20|) |start#0@@19| |end#0@@19|) (and (and (and ($Is |g#0@@25| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@20| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@19| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@19| Tclass.ReferenceType.Reference)))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@25| (Lit |path#0@@20|)) (=> (= (|Seq#Index| (Lit |path#0@@20|) (LitInt 0)) |start#0@@19|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@20|)))) (and (=> (BetreeGraph.__default.IsPathFromTo |g#0@@25| (Lit |path#0@@20|) |start#0@@19| |end#0@@19|) (and (and (and (BetreeGraph.__default.IsPath |g#0@@25| (Lit |path#0@@20|)) (< 1 (|Seq#Length| (Lit |path#0@@20|)))) (= (|Seq#Index| (Lit |path#0@@20|) (LitInt 0)) |start#0@@19|)) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@20|))) |end#0@@19|))) (=> (and (and (and (BetreeGraph.__default.IsPath |g#0@@25| (Lit |path#0@@20|)) (< 1 (|Seq#Length| (Lit |path#0@@20|)))) (= (|Seq#Index| (Lit |path#0@@20|) (LitInt 0)) |start#0@@19|)) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@20|))) |end#0@@19|)) (BetreeGraph.__default.IsPathFromTo |g#0@@25| (Lit |path#0@@20|) |start#0@@19| |end#0@@19|))))) :qid |Graphidf.92:26| :weight 3 :skolemid |2573| :pattern ( (BetreeGraph.__default.IsPathFromTo |g#0@@25| (Lit |path#0@@20|) |start#0@@19| |end#0@@19|)) ))))
(assert  (=> true (forall ((|g#0@@26| T@U) (|path#0@@21| T@U) (|start#0@@20| T@U) (|end#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@26|) (IMapType BoxType BoxType)) (= (type |path#0@@21|) (SeqType BoxType))) (= (type |start#0@@20|) BoxType)) (= (type |end#0@@20|) BoxType)) (or (|BetreeGraph.__default.IsPathFromTo#canCall| (Lit |g#0@@26|) (Lit |path#0@@21|) (Lit |start#0@@20|) (Lit |end#0@@20|)) (and (and (and ($Is |g#0@@26| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |path#0@@21| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@20| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@20| Tclass.ReferenceType.Reference)))) (and (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@26|) (Lit |path#0@@21|)) (=> (= (|Seq#Index| (Lit |path#0@@21|) (LitInt 0)) (Lit |start#0@@20|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@21|)))) (and (=> (BetreeGraph.__default.IsPathFromTo (Lit |g#0@@26|) (Lit |path#0@@21|) (Lit |start#0@@20|) (Lit |end#0@@20|)) (and (and (and (BetreeGraph.__default.IsPath (Lit |g#0@@26|) (Lit |path#0@@21|)) (< 1 (|Seq#Length| (Lit |path#0@@21|)))) (= (|Seq#Index| (Lit |path#0@@21|) (LitInt 0)) (Lit |start#0@@20|))) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@21|))) (Lit |end#0@@20|)))) (=> (and (and (and (BetreeGraph.__default.IsPath (Lit |g#0@@26|) (Lit |path#0@@21|)) (< 1 (|Seq#Length| (Lit |path#0@@21|)))) (= (|Seq#Index| (Lit |path#0@@21|) (LitInt 0)) (Lit |start#0@@20|))) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@21|))) (Lit |end#0@@20|))) (BetreeGraph.__default.IsPathFromTo (Lit |g#0@@26|) (Lit |path#0@@21|) (Lit |start#0@@20|) (Lit |end#0@@20|)))))) :qid |Graphidf.92:26| :weight 3 :skolemid |2574| :pattern ( (BetreeGraph.__default.IsPathFromTo (Lit |g#0@@26|) (Lit |path#0@@21|) (Lit |start#0@@20|) (Lit |end#0@@20|))) ))))
(assert (forall ((arg0@@419 T@U) (arg1@@202 T@U) ) (! (= (type (BetreeGraph.__default.ReachableReferences arg0@@419 arg1@@202)) (MapType0Type BoxType boolType)) :qid |funType:BetreeGraph.__default.ReachableReferences| :pattern ( (BetreeGraph.__default.ReachableReferences arg0@@419 arg1@@202)) )))
(assert  (=> true (forall ((|g#0@@27| T@U) (|p#0| T@U) ) (!  (=> (and (and (= (type |g#0@@27|) (IMapType BoxType BoxType)) (= (type |p#0|) BoxType)) (or (|BetreeGraph.__default.ReachableReferences#canCall| |g#0@@27| |p#0|) (and ($Is |g#0@@27| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |p#0| Tclass.ReferenceType.Reference)))) ($Is (BetreeGraph.__default.ReachableReferences |g#0@@27| |p#0|) (TISet Tclass.ReferenceType.Reference))) :qid |Graphidf.97:32| :skolemid |2575| :pattern ( (BetreeGraph.__default.ReachableReferences |g#0@@27| |p#0|)) ))))
(assert (forall ((|g#0@@28| T@U) (|p#0@@0| T@U) ) (!  (=> (and (and (= (type |g#0@@28|) (IMapType BoxType BoxType)) (= (type |p#0@@0|) BoxType)) (and ($Is |g#0@@28| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |p#0@@0| Tclass.ReferenceType.Reference))) (and (=> (|BetreeGraph.__default.ReachableReferences#requires| |g#0@@28| |p#0@@0|) true) (=> true (|BetreeGraph.__default.ReachableReferences#requires| |g#0@@28| |p#0@@0|)))) :qid |Graphidf.97:32| :skolemid |2576| :pattern ( (|BetreeGraph.__default.ReachableReferences#requires| |g#0@@28| |p#0@@0|)) )))
(assert (forall ((arg0@@420 T@U) (arg1@@203 T@U) (arg2@@141 Int) (arg3@@109 Int) (arg4@@92 T@U) (arg5@@69 T@U) (arg6@@51 T@U) (arg7@@36 Int) (arg8@@22 T@U) ) (! (= (type (|lambda#50| arg0@@420 arg1@@203 arg2@@141 arg3@@109 arg4@@92 arg5@@69 arg6@@51 arg7@@36 arg8@@22)) (MapType0Type BoxType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@420 arg1@@203 arg2@@141 arg3@@109 arg4@@92 arg5@@69 arg6@@51 arg7@@36 arg8@@22)) )))
(assert  (=> true (forall ((|g#0@@29| T@U) (|p#0@@1| T@U) ) (!  (=> (and (and (= (type |g#0@@29|) (IMapType BoxType BoxType)) (= (type |p#0@@1|) BoxType)) (or (|BetreeGraph.__default.ReachableReferences#canCall| |g#0@@29| |p#0@@1|) (and ($Is |g#0@@29| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |p#0@@1| Tclass.ReferenceType.Reference)))) (and (forall ((|path#0@@22| T@U) ) (!  (=> (and (= (type |path#0@@22|) (SeqType BoxType)) ($Is |path#0@@22| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| |g#0@@29| |path#0@@22|) (=> (and (and (BetreeGraph.__default.IsPath |g#0@@29| |path#0@@22|) (< 1 (|Seq#Length| |path#0@@22|))) (= (|Seq#Index| |path#0@@22| (LitInt 0)) |p#0@@1|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@22|)))) :qid |Graphidf.99:10| :skolemid |2577| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@22|)) :pattern ( (|Seq#Index| |path#0@@22| 0)) :pattern ( (|Seq#Length| |path#0@@22|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@29| |path#0@@22|)) )) (= (BetreeGraph.__default.ReachableReferences |g#0@@29| |p#0@@1|) (|lambda#50| (TSeq Tclass.ReferenceType.Reference) |g#0@@29| 1 (LitInt 0) |p#0@@1| Tclass.ReferenceType.Reference |g#0@@29| 0 Tclass.ReferenceType.Reference)))) :qid |Graphidf.97:32| :skolemid |2579| :pattern ( (BetreeGraph.__default.ReachableReferences |g#0@@29| |p#0@@1|)) ))))
(assert  (=> true (forall ((|g#0@@30| T@U) (|p#0@@2| T@U) ) (!  (=> (and (and (= (type |g#0@@30|) (IMapType BoxType BoxType)) (= (type |p#0@@2|) BoxType)) (or (|BetreeGraph.__default.ReachableReferences#canCall| (Lit |g#0@@30|) (Lit |p#0@@2|)) (and ($Is |g#0@@30| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($IsBox |p#0@@2| Tclass.ReferenceType.Reference)))) (and (forall ((|path#1@@2| T@U) ) (!  (=> (and (= (type |path#1@@2|) (SeqType BoxType)) ($Is |path#1@@2| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g#0@@30|) |path#1@@2|) (=> (and (and (BetreeGraph.__default.IsPath (Lit |g#0@@30|) |path#1@@2|) (< 1 (|Seq#Length| |path#1@@2|))) (= (|Seq#Index| |path#1@@2| (LitInt 0)) (Lit |p#0@@2|))) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#1@@2|)))) :qid |Graphidf.99:10| :skolemid |2580| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#1@@2|)) :pattern ( (|Seq#Index| |path#1@@2| 0)) :pattern ( (|Seq#Length| |path#1@@2|)) :pattern ( (BetreeGraph.__default.IsPath |g#0@@30| |path#1@@2|)) )) (= (BetreeGraph.__default.ReachableReferences (Lit |g#0@@30|) (Lit |p#0@@2|)) (|lambda#50| (TSeq Tclass.ReferenceType.Reference) (Lit |g#0@@30|) 1 (LitInt 0) (Lit |p#0@@2|) Tclass.ReferenceType.Reference |g#0@@30| 0 Tclass.ReferenceType.Reference)))) :qid |Graphidf.97:32| :weight 3 :skolemid |2582| :pattern ( (BetreeGraph.__default.ReachableReferences (Lit |g#0@@30|) (Lit |p#0@@2|))) ))))
(assert  (=> true (forall ((|g#0@@31| T@U) (|g'#0| T@U) (|p#0@@3| T@U) (|path#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@31|) (IMapType BoxType BoxType)) (= (type |g'#0|) (IMapType BoxType BoxType))) (= (type |p#0@@3|) BoxType)) (= (type |path#0@@23|) (SeqType BoxType))) (or (|BetreeGraph.__default.NewPath#canCall| |g#0@@31| |g'#0| |p#0@@3| |path#0@@23|) (and (and (and ($Is |g#0@@31| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@3| Tclass.ReferenceType.Reference)) ($Is |path#0@@23| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |Graphidf.106:21| :skolemid |2583| :pattern ( (BetreeGraph.__default.NewPath |g#0@@31| |g'#0| |p#0@@3| |path#0@@23|)) ))))
(assert (forall ((|g#0@@32| T@U) (|g'#0@@0| T@U) (|p#0@@4| T@U) (|path#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@32|) (IMapType BoxType BoxType)) (= (type |g'#0@@0|) (IMapType BoxType BoxType))) (= (type |p#0@@4|) BoxType)) (= (type |path#0@@24|) (SeqType BoxType))) (and (and (and ($Is |g#0@@32| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@0| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@4| Tclass.ReferenceType.Reference)) ($Is |path#0@@24| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|BetreeGraph.__default.NewPath#requires| |g#0@@32| |g'#0@@0| |p#0@@4| |path#0@@24|) true) (=> true (|BetreeGraph.__default.NewPath#requires| |g#0@@32| |g'#0@@0| |p#0@@4| |path#0@@24|)))) :qid |Graphidf.106:21| :skolemid |2584| :pattern ( (|BetreeGraph.__default.NewPath#requires| |g#0@@32| |g'#0@@0| |p#0@@4| |path#0@@24|)) )))
(assert  (=> true (forall ((|g#0@@33| T@U) (|g'#0@@1| T@U) (|p#0@@5| T@U) (|path#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@33|) (IMapType BoxType BoxType)) (= (type |g'#0@@1|) (IMapType BoxType BoxType))) (= (type |p#0@@5|) BoxType)) (= (type |path#0@@25|) (SeqType BoxType))) (or (|BetreeGraph.__default.NewPath#canCall| |g#0@@33| |g'#0@@1| |p#0@@5| |path#0@@25|) (and (and (and ($Is |g#0@@33| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@1| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@5| Tclass.ReferenceType.Reference)) ($Is |path#0@@25| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g'#0@@1| |path#0@@25|) (=> (forall ((|i#0@@88| Int) ) (!  (=> true (=> (and (< 0 |i#0@@88|) (< |i#0@@88| (- (|Seq#Length| |path#0@@25|) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@1|) (|Seq#Index| |path#0@@25| |i#0@@88|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@33|) (|Seq#Index| |path#0@@25| |i#0@@88|))))))) :qid |Graphidf.110:16| :skolemid |2585| :pattern ( (|Seq#Index| |path#0@@25| |i#0@@88|)) )) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@25|))) (and (=> (BetreeGraph.__default.NewPath |g#0@@33| |g'#0@@1| |p#0@@5| |path#0@@25|) (and (and (and (and (BetreeGraph.__default.IsPath |g'#0@@1| |path#0@@25|) (< 1 (|Seq#Length| |path#0@@25|))) (= (|Seq#Index| |path#0@@25| (LitInt 0)) |p#0@@5|)) (forall ((|i#0@@89| Int) ) (!  (=> true (=> (and (< 0 |i#0@@89|) (< |i#0@@89| (- (|Seq#Length| |path#0@@25|) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@1|) (|Seq#Index| |path#0@@25| |i#0@@89|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@33|) (|Seq#Index| |path#0@@25| |i#0@@89|))))))) :qid |Graphidf.110:16| :skolemid |2586| :pattern ( (|Seq#Index| |path#0@@25| |i#0@@89|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@33|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@25|))))) (=> (and (and (and (and (BetreeGraph.__default.IsPath |g'#0@@1| |path#0@@25|) (< 1 (|Seq#Length| |path#0@@25|))) (= (|Seq#Index| |path#0@@25| (LitInt 0)) |p#0@@5|)) (forall ((|i#0@@90| Int) ) (!  (=> true (=> (and (< 0 |i#0@@90|) (< |i#0@@90| (- (|Seq#Length| |path#0@@25|) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@1|) (|Seq#Index| |path#0@@25| |i#0@@90|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@33|) (|Seq#Index| |path#0@@25| |i#0@@90|))))))) :qid |Graphidf.110:16| :skolemid |2586| :pattern ( (|Seq#Index| |path#0@@25| |i#0@@90|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@33|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@25|)))) (BetreeGraph.__default.NewPath |g#0@@33| |g'#0@@1| |p#0@@5| |path#0@@25|))))) :qid |Graphidf.106:21| :skolemid |2587| :pattern ( (BetreeGraph.__default.NewPath |g#0@@33| |g'#0@@1| |p#0@@5| |path#0@@25|)) ))))
(assert  (=> true (forall ((|g#0@@34| T@U) (|g'#0@@2| T@U) (|p#0@@6| T@U) (|path#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@34|) (IMapType BoxType BoxType)) (= (type |g'#0@@2|) (IMapType BoxType BoxType))) (= (type |p#0@@6|) BoxType)) (= (type |path#0@@26|) (SeqType BoxType))) (or (|BetreeGraph.__default.NewPath#canCall| |g#0@@34| |g'#0@@2| |p#0@@6| (Lit |path#0@@26|)) (and (and (and ($Is |g#0@@34| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@2| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@6| Tclass.ReferenceType.Reference)) ($Is |path#0@@26| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|BetreeGraph.__default.IsPath#canCall| |g'#0@@2| (Lit |path#0@@26|)) (=> (forall ((|i#1@@28| Int) ) (!  (=> true (=> (and (< 0 |i#1@@28|) (< |i#1@@28| (- (|Seq#Length| (Lit |path#0@@26|)) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@2|) (|Seq#Index| (Lit |path#0@@26|) |i#1@@28|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@34|) (|Seq#Index| (Lit |path#0@@26|) |i#1@@28|))))))) :qid |Graphidf.110:16| :skolemid |2588| :pattern ( (|Seq#Index| |path#0@@26| |i#1@@28|)) )) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@26|)))) (and (=> (BetreeGraph.__default.NewPath |g#0@@34| |g'#0@@2| |p#0@@6| (Lit |path#0@@26|)) (and (and (and (and (BetreeGraph.__default.IsPath |g'#0@@2| (Lit |path#0@@26|)) (< 1 (|Seq#Length| (Lit |path#0@@26|)))) (= (|Seq#Index| (Lit |path#0@@26|) (LitInt 0)) |p#0@@6|)) (forall ((|i#1@@29| Int) ) (!  (=> true (=> (and (< 0 |i#1@@29|) (< |i#1@@29| (- (|Seq#Length| (Lit |path#0@@26|)) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@2|) (|Seq#Index| (Lit |path#0@@26|) |i#1@@29|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@34|) (|Seq#Index| (Lit |path#0@@26|) |i#1@@29|))))))) :qid |Graphidf.110:16| :skolemid |2589| :pattern ( (|Seq#Index| |path#0@@26| |i#1@@29|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@34|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@26|)))))) (=> (and (and (and (and (BetreeGraph.__default.IsPath |g'#0@@2| (Lit |path#0@@26|)) (< 1 (|Seq#Length| (Lit |path#0@@26|)))) (= (|Seq#Index| (Lit |path#0@@26|) (LitInt 0)) |p#0@@6|)) (forall ((|i#1@@30| Int) ) (!  (=> true (=> (and (< 0 |i#1@@30|) (< |i#1@@30| (- (|Seq#Length| (Lit |path#0@@26|)) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@2|) (|Seq#Index| (Lit |path#0@@26|) |i#1@@30|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@34|) (|Seq#Index| (Lit |path#0@@26|) |i#1@@30|))))))) :qid |Graphidf.110:16| :skolemid |2589| :pattern ( (|Seq#Index| |path#0@@26| |i#1@@30|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@34|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@26|))))) (BetreeGraph.__default.NewPath |g#0@@34| |g'#0@@2| |p#0@@6| (Lit |path#0@@26|)))))) :qid |Graphidf.106:21| :weight 3 :skolemid |2590| :pattern ( (BetreeGraph.__default.NewPath |g#0@@34| |g'#0@@2| |p#0@@6| (Lit |path#0@@26|))) ))))
(assert  (=> true (forall ((|g#0@@35| T@U) (|g'#0@@3| T@U) (|p#0@@7| T@U) (|path#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@35|) (IMapType BoxType BoxType)) (= (type |g'#0@@3|) (IMapType BoxType BoxType))) (= (type |p#0@@7|) BoxType)) (= (type |path#0@@27|) (SeqType BoxType))) (or (|BetreeGraph.__default.NewPath#canCall| (Lit |g#0@@35|) (Lit |g'#0@@3|) (Lit |p#0@@7|) (Lit |path#0@@27|)) (and (and (and ($Is |g#0@@35| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@3| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@7| Tclass.ReferenceType.Reference)) ($Is |path#0@@27| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g'#0@@3|) (Lit |path#0@@27|)) (=> (forall ((|i#2@@18| Int) ) (!  (=> true (=> (and (< 0 |i#2@@18|) (< |i#2@@18| (- (|Seq#Length| (Lit |path#0@@27|)) 1))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@3|))) (|Seq#Index| (Lit |path#0@@27|) |i#2@@18|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@35|))) (|Seq#Index| (Lit |path#0@@27|) |i#2@@18|))))))) :qid |Graphidf.110:16| :skolemid |2591| :pattern ( (|Seq#Index| |path#0@@27| |i#2@@18|)) )) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@27|)))) (and (=> (BetreeGraph.__default.NewPath (Lit |g#0@@35|) (Lit |g'#0@@3|) (Lit |p#0@@7|) (Lit |path#0@@27|)) (and (and (and (and (BetreeGraph.__default.IsPath (Lit |g'#0@@3|) (Lit |path#0@@27|)) (< 1 (|Seq#Length| (Lit |path#0@@27|)))) (= (|Seq#Index| (Lit |path#0@@27|) (LitInt 0)) (Lit |p#0@@7|))) (forall ((|i#2@@19| Int) ) (!  (=> true (=> (and (< 0 |i#2@@19|) (< |i#2@@19| (- (|Seq#Length| (Lit |path#0@@27|)) 1))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@3|))) (|Seq#Index| (Lit |path#0@@27|) |i#2@@19|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@35|))) (|Seq#Index| (Lit |path#0@@27|) |i#2@@19|))))))) :qid |Graphidf.110:16| :skolemid |2592| :pattern ( (|Seq#Index| |path#0@@27| |i#2@@19|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@35|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@27|)))))) (=> (and (and (and (and (BetreeGraph.__default.IsPath (Lit |g'#0@@3|) (Lit |path#0@@27|)) (< 1 (|Seq#Length| (Lit |path#0@@27|)))) (= (|Seq#Index| (Lit |path#0@@27|) (LitInt 0)) (Lit |p#0@@7|))) (forall ((|i#2@@20| Int) ) (!  (=> true (=> (and (< 0 |i#2@@20|) (< |i#2@@20| (- (|Seq#Length| (Lit |path#0@@27|)) 1))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@3|))) (|Seq#Index| (Lit |path#0@@27|) |i#2@@20|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@35|))) (|Seq#Index| (Lit |path#0@@27|) |i#2@@20|))))))) :qid |Graphidf.110:16| :skolemid |2592| :pattern ( (|Seq#Index| |path#0@@27| |i#2@@20|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@35|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@27|))))) (BetreeGraph.__default.NewPath (Lit |g#0@@35|) (Lit |g'#0@@3|) (Lit |p#0@@7|) (Lit |path#0@@27|)))))) :qid |Graphidf.106:21| :weight 3 :skolemid |2593| :pattern ( (BetreeGraph.__default.NewPath (Lit |g#0@@35|) (Lit |g'#0@@3|) (Lit |p#0@@7|) (Lit |path#0@@27|))) ))))
(assert (forall ((arg0@@421 T@U) (arg1@@204 T@U) (arg2@@142 T@U) ) (! (= (type (BetreeGraph.__default.NewlyReachableReferences arg0@@421 arg1@@204 arg2@@142)) (MapType0Type BoxType boolType)) :qid |funType:BetreeGraph.__default.NewlyReachableReferences| :pattern ( (BetreeGraph.__default.NewlyReachableReferences arg0@@421 arg1@@204 arg2@@142)) )))
(assert  (=> true (forall ((|g#0@@36| T@U) (|g'#0@@4| T@U) (|p#0@@8| T@U) ) (!  (=> (and (and (and (= (type |g#0@@36|) (IMapType BoxType BoxType)) (= (type |g'#0@@4|) (IMapType BoxType BoxType))) (= (type |p#0@@8|) BoxType)) (or (|BetreeGraph.__default.NewlyReachableReferences#canCall| |g#0@@36| |g'#0@@4| |p#0@@8|) (and (and ($Is |g#0@@36| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@4| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@8| Tclass.ReferenceType.Reference)))) ($Is (BetreeGraph.__default.NewlyReachableReferences |g#0@@36| |g'#0@@4| |p#0@@8|) (TISet Tclass.ReferenceType.Reference))) :qid |Graphidf.114:37| :skolemid |2594| :pattern ( (BetreeGraph.__default.NewlyReachableReferences |g#0@@36| |g'#0@@4| |p#0@@8|)) ))))
(assert (forall ((|g#0@@37| T@U) (|g'#0@@5| T@U) (|p#0@@9| T@U) ) (!  (=> (and (and (and (= (type |g#0@@37|) (IMapType BoxType BoxType)) (= (type |g'#0@@5|) (IMapType BoxType BoxType))) (= (type |p#0@@9|) BoxType)) (and (and ($Is |g#0@@37| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@5| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@9| Tclass.ReferenceType.Reference))) (and (=> (|BetreeGraph.__default.NewlyReachableReferences#requires| |g#0@@37| |g'#0@@5| |p#0@@9|) true) (=> true (|BetreeGraph.__default.NewlyReachableReferences#requires| |g#0@@37| |g'#0@@5| |p#0@@9|)))) :qid |Graphidf.114:37| :skolemid |2595| :pattern ( (|BetreeGraph.__default.NewlyReachableReferences#requires| |g#0@@37| |g'#0@@5| |p#0@@9|)) )))
(assert (forall ((arg0@@422 T@U) (arg1@@205 T@U) (arg2@@143 T@U) (arg3@@110 T@U) (arg4@@93 T@U) (arg5@@70 T@U) (arg6@@52 T@U) (arg7@@37 T@U) (arg8@@23 T@U) ) (! (= (type (|lambda#52| arg0@@422 arg1@@205 arg2@@143 arg3@@110 arg4@@93 arg5@@70 arg6@@52 arg7@@37 arg8@@23)) (MapType0Type BoxType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@422 arg1@@205 arg2@@143 arg3@@110 arg4@@93 arg5@@70 arg6@@52 arg7@@37 arg8@@23)) )))
(assert  (=> true (forall ((|g#0@@38| T@U) (|g'#0@@6| T@U) (|p#0@@10| T@U) ) (!  (=> (and (and (and (= (type |g#0@@38|) (IMapType BoxType BoxType)) (= (type |g'#0@@6|) (IMapType BoxType BoxType))) (= (type |p#0@@10|) BoxType)) (or (|BetreeGraph.__default.NewlyReachableReferences#canCall| |g#0@@38| |g'#0@@6| |p#0@@10|) (and (and ($Is |g#0@@38| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@6| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@10| Tclass.ReferenceType.Reference)))) (and (forall ((|path#0@@28| T@U) ) (!  (=> (and (= (type |path#0@@28|) (SeqType BoxType)) ($Is |path#0@@28| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.NewPath#canCall| |g#0@@38| |g'#0@@6| |p#0@@10| |path#0@@28|) (=> (BetreeGraph.__default.NewPath |g#0@@38| |g'#0@@6| |p#0@@10| |path#0@@28|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@28|)))) :qid |Graphidf.116:10| :skolemid |2596| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@28|)) :pattern ( (BetreeGraph.__default.NewPath |g#0@@38| |g'#0@@6| |p#0@@10| |path#0@@28|)) )) (= (BetreeGraph.__default.NewlyReachableReferences |g#0@@38| |g'#0@@6| |p#0@@10|) (|lambda#52| (TSeq Tclass.ReferenceType.Reference) |g#0@@38| |g'#0@@6| |p#0@@10| Tclass.ReferenceType.Reference |g#0@@38| |g'#0@@6| |p#0@@10| Tclass.ReferenceType.Reference)))) :qid |Graphidf.114:37| :skolemid |2598| :pattern ( (BetreeGraph.__default.NewlyReachableReferences |g#0@@38| |g'#0@@6| |p#0@@10|)) ))))
(assert  (=> true (forall ((|g#0@@39| T@U) (|g'#0@@7| T@U) (|p#0@@11| T@U) ) (!  (=> (and (and (and (= (type |g#0@@39|) (IMapType BoxType BoxType)) (= (type |g'#0@@7|) (IMapType BoxType BoxType))) (= (type |p#0@@11|) BoxType)) (or (|BetreeGraph.__default.NewlyReachableReferences#canCall| (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|)) (and (and ($Is |g#0@@39| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@7| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@11| Tclass.ReferenceType.Reference)))) (and (forall ((|path#1@@3| T@U) ) (!  (=> (and (= (type |path#1@@3|) (SeqType BoxType)) ($Is |path#1@@3| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.NewPath#canCall| (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|) |path#1@@3|) (=> (BetreeGraph.__default.NewPath (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|) |path#1@@3|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#1@@3|)))) :qid |Graphidf.116:10| :skolemid |2599| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#1@@3|)) :pattern ( (BetreeGraph.__default.NewPath |g#0@@39| |g'#0@@7| |p#0@@11| |path#1@@3|)) )) (= (BetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|)) (|lambda#52| (TSeq Tclass.ReferenceType.Reference) (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|) Tclass.ReferenceType.Reference |g#0@@39| |g'#0@@7| |p#0@@11| Tclass.ReferenceType.Reference)))) :qid |Graphidf.114:37| :weight 3 :skolemid |2601| :pattern ( (BetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@39|) (Lit |g'#0@@7|) (Lit |p#0@@11|))) ))))
(assert  (=> true (forall ((|g#0@@40| T@U) (|g'#0@@8| T@U) (|p#0@@12| T@U) ) (!  (=> (and (and (and (= (type |g#0@@40|) (IMapType BoxType BoxType)) (= (type |g'#0@@8|) (IMapType BoxType BoxType))) (= (type |p#0@@12|) BoxType)) (or (|BetreeGraph.__default.EditIsLocal#canCall| |g#0@@40| |g'#0@@8| |p#0@@12|) (and (and ($Is |g#0@@40| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@8| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@12| Tclass.ReferenceType.Reference)))) true) :qid |Graphidf.119:25| :skolemid |2602| :pattern ( (BetreeGraph.__default.EditIsLocal |g#0@@40| |g'#0@@8| |p#0@@12|)) ))))
(assert (forall ((|g#0@@41| T@U) (|g'#0@@9| T@U) (|p#0@@13| T@U) ) (!  (=> (and (and (and (= (type |g#0@@41|) (IMapType BoxType BoxType)) (= (type |g'#0@@9|) (IMapType BoxType BoxType))) (= (type |p#0@@13|) BoxType)) (and (and ($Is |g#0@@41| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@9| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@13| Tclass.ReferenceType.Reference))) (and (=> (|BetreeGraph.__default.EditIsLocal#requires| |g#0@@41| |g'#0@@9| |p#0@@13|) true) (=> true (|BetreeGraph.__default.EditIsLocal#requires| |g#0@@41| |g'#0@@9| |p#0@@13|)))) :qid |Graphidf.119:25| :skolemid |2603| :pattern ( (|BetreeGraph.__default.EditIsLocal#requires| |g#0@@41| |g'#0@@9| |p#0@@13|)) )))
(assert  (=> true (forall ((|g#0@@42| T@U) (|g'#0@@10| T@U) (|p#0@@14| T@U) ) (!  (=> (and (and (and (= (type |g#0@@42|) (IMapType BoxType BoxType)) (= (type |g'#0@@10|) (IMapType BoxType BoxType))) (= (type |p#0@@14|) BoxType)) (or (|BetreeGraph.__default.EditIsLocal#canCall| |g#0@@42| |g'#0@@10| |p#0@@14|) (and (and ($Is |g#0@@42| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@10| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@14| Tclass.ReferenceType.Reference)))) (and (and (forall ((|ref#0@@2| T@U) ) (!  (=> (and (= (type |ref#0@@2|) BoxType) ($IsBox |ref#0@@2| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@42|) |ref#0@@2|)) (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@10|) |ref#0@@2|))) (not (= |ref#0@@2| |p#0@@14|))) (and (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@2|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@2|)))))) :qid |Graphidf.121:16| :skolemid |2604| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@2|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@2|))) )) (=> (forall ((|ref#0@@3| T@U) ) (!  (=> (and (= (type |ref#0@@3|) BoxType) ($IsBox |ref#0@@3| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@42|) |ref#0@@3|)) (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@10|) |ref#0@@3|))) (not (= |ref#0@@3| |p#0@@14|))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@3|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@3|)))))) :qid |Graphidf.121:16| :skolemid |2605| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@3|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@3|))) )) (and (|BetreeGraph.__default.NewlyReachableReferences#canCall| |g#0@@42| |g'#0@@10| |p#0@@14|) (|BetreeGraph.__default.ReachableReferences#canCall| |g#0@@42| |p#0@@14|)))) (and (=> (BetreeGraph.__default.EditIsLocal |g#0@@42| |g'#0@@10| |p#0@@14|) (and (forall ((|ref#0@@4| T@U) ) (!  (=> (and (= (type |ref#0@@4|) BoxType) ($IsBox |ref#0@@4| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@42|) |ref#0@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@10|) |ref#0@@4|))) (not (= |ref#0@@4| |p#0@@14|))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@4|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@4|)))))) :qid |Graphidf.121:16| :skolemid |2606| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@4|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@4|))) )) (|ISet#Subset| (BetreeGraph.__default.NewlyReachableReferences |g#0@@42| |g'#0@@10| |p#0@@14|) (BetreeGraph.__default.ReachableReferences |g#0@@42| |p#0@@14|)))) (=> (and (forall ((|ref#0@@5| T@U) ) (!  (=> (and (= (type |ref#0@@5|) BoxType) ($IsBox |ref#0@@5| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@42|) |ref#0@@5|)) (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@10|) |ref#0@@5|))) (not (= |ref#0@@5| |p#0@@14|))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@5|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@5|)))))) :qid |Graphidf.121:16| :skolemid |2606| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@10|) |ref#0@@5|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@42|) |ref#0@@5|))) )) (|ISet#Subset| (BetreeGraph.__default.NewlyReachableReferences |g#0@@42| |g'#0@@10| |p#0@@14|) (BetreeGraph.__default.ReachableReferences |g#0@@42| |p#0@@14|))) (BetreeGraph.__default.EditIsLocal |g#0@@42| |g'#0@@10| |p#0@@14|))))) :qid |Graphidf.119:25| :skolemid |2607| :pattern ( (BetreeGraph.__default.EditIsLocal |g#0@@42| |g'#0@@10| |p#0@@14|)) ))))
(assert  (=> true (forall ((|g#0@@43| T@U) (|g'#0@@11| T@U) (|p#0@@15| T@U) ) (!  (=> (and (and (and (= (type |g#0@@43|) (IMapType BoxType BoxType)) (= (type |g'#0@@11|) (IMapType BoxType BoxType))) (= (type |p#0@@15|) BoxType)) (or (|BetreeGraph.__default.EditIsLocal#canCall| (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|)) (and (and ($Is |g#0@@43| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@11| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@15| Tclass.ReferenceType.Reference)))) (and (and (forall ((|ref#1@@2| T@U) ) (!  (=> (and (= (type |ref#1@@2|) BoxType) ($IsBox |ref#1@@2| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@43|))) |ref#1@@2|)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@11|))) |ref#1@@2|))) (not (= |ref#1@@2| (Lit |p#0@@15|)))) (and (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@43|)) |ref#1@@2|))) (|BetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@11|)) |ref#1@@2|)))))) :qid |Graphidf.121:16| :skolemid |2608| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@11|) |ref#1@@2|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@43|) |ref#1@@2|))) )) (=> (forall ((|ref#1@@3| T@U) ) (!  (=> (and (= (type |ref#1@@3|) BoxType) ($IsBox |ref#1@@3| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@43|))) |ref#1@@3|)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@11|))) |ref#1@@3|))) (not (= |ref#1@@3| (Lit |p#0@@15|)))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@43|)) |ref#1@@3|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@11|)) |ref#1@@3|)))))) :qid |Graphidf.121:16| :skolemid |2609| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@11|) |ref#1@@3|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@43|) |ref#1@@3|))) )) (and (|BetreeGraph.__default.NewlyReachableReferences#canCall| (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|)) (|BetreeGraph.__default.ReachableReferences#canCall| (Lit |g#0@@43|) (Lit |p#0@@15|))))) (and (=> (BetreeGraph.__default.EditIsLocal (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|)) (and (forall ((|ref#1@@4| T@U) ) (!  (=> (and (= (type |ref#1@@4|) BoxType) ($IsBox |ref#1@@4| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@43|))) |ref#1@@4|)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@11|))) |ref#1@@4|))) (not (= |ref#1@@4| (Lit |p#0@@15|)))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@43|)) |ref#1@@4|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@11|)) |ref#1@@4|)))))) :qid |Graphidf.121:16| :skolemid |2610| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@11|) |ref#1@@4|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@43|) |ref#1@@4|))) )) (|ISet#Subset| (BetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|)) (BetreeGraph.__default.ReachableReferences (Lit |g#0@@43|) (Lit |p#0@@15|))))) (=> (and (forall ((|ref#1@@5| T@U) ) (!  (=> (and (= (type |ref#1@@5|) BoxType) ($IsBox |ref#1@@5| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@43|))) |ref#1@@5|)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@11|))) |ref#1@@5|))) (not (= |ref#1@@5| (Lit |p#0@@15|)))) (|ISet#Equal| (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@43|)) |ref#1@@5|))) (BetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@11|)) |ref#1@@5|)))))) :qid |Graphidf.121:16| :skolemid |2610| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@11|) |ref#1@@5|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@43|) |ref#1@@5|))) )) (|ISet#Subset| (BetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|)) (BetreeGraph.__default.ReachableReferences (Lit |g#0@@43|) (Lit |p#0@@15|)))) (BetreeGraph.__default.EditIsLocal (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|)))))) :qid |Graphidf.119:25| :weight 3 :skolemid |2611| :pattern ( (BetreeGraph.__default.EditIsLocal (Lit |g#0@@43|) (Lit |g'#0@@11|) (Lit |p#0@@15|))) ))))
(assert  (=> true (forall ((|g#0@@44| T@U) (|g'#0@@12| T@U) ) (!  (=> (and (and (= (type |g#0@@44|) (IMapType BoxType BoxType)) (= (type |g'#0@@12|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.NewNodesAreCycleFree#canCall| |g#0@@44| |g'#0@@12|) (and ($Is |g#0@@44| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@12| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))))) true) :qid |Graphidf.125:34| :skolemid |2612| :pattern ( (BetreeGraph.__default.NewNodesAreCycleFree |g#0@@44| |g'#0@@12|)) ))))
(assert (forall ((|g#0@@45| T@U) (|g'#0@@13| T@U) ) (!  (=> (and (and (= (type |g#0@@45|) (IMapType BoxType BoxType)) (= (type |g'#0@@13|) (IMapType BoxType BoxType))) (and ($Is |g#0@@45| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@13| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (=> (|BetreeGraph.__default.NewNodesAreCycleFree#requires| |g#0@@45| |g'#0@@13|) true) (=> true (|BetreeGraph.__default.NewNodesAreCycleFree#requires| |g#0@@45| |g'#0@@13|)))) :qid |Graphidf.125:34| :skolemid |2613| :pattern ( (|BetreeGraph.__default.NewNodesAreCycleFree#requires| |g#0@@45| |g'#0@@13|)) )))
(assert  (=> true (forall ((|g#0@@46| T@U) (|g'#0@@14| T@U) ) (!  (=> (and (and (= (type |g#0@@46|) (IMapType BoxType BoxType)) (= (type |g'#0@@14|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.NewNodesAreCycleFree#canCall| |g#0@@46| |g'#0@@14|) (and ($Is |g#0@@46| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@14| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))))) (and (forall ((|path#0@@29| T@U) ) (!  (=> (and (= (type |path#0@@29|) (SeqType BoxType)) ($Is |path#0@@29| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| |g'#0@@14| |path#0@@29|) (=> (forall ((|i#0@@91| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@91|) (< |i#0@@91| (|Seq#Length| |path#0@@29|))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@14|) (|Seq#Index| |path#0@@29| |i#0@@91|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@46|) (|Seq#Index| |path#0@@29| |i#0@@91|))))))) :qid |Graphidf.129:18| :skolemid |2614| :pattern ( (|Seq#Index| |path#0@@29| |i#0@@91|)) )) (|BetreeGraph.__default.IsCycle#canCall| |g'#0@@14| |path#0@@29|)))) :qid |Graphidf.127:12| :skolemid |2615| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@14| |path#0@@29|)) :pattern ( (|Seq#Length| |path#0@@29|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@14| |path#0@@29|)) )) (and (=> (BetreeGraph.__default.NewNodesAreCycleFree |g#0@@46| |g'#0@@14|) (forall ((|path#0@@30| T@U) ) (!  (=> (and (and (= (type |path#0@@30|) (SeqType BoxType)) ($Is |path#0@@30| (TSeq Tclass.ReferenceType.Reference))) (and (BetreeGraph.__default.IsPath |g'#0@@14| |path#0@@30|) (forall ((|i#0@@92| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@92|) (< |i#0@@92| (|Seq#Length| |path#0@@30|))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@14|) (|Seq#Index| |path#0@@30| |i#0@@92|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@46|) (|Seq#Index| |path#0@@30| |i#0@@92|))))))) :qid |Graphidf.129:18| :skolemid |2616| :pattern ( (|Seq#Index| |path#0@@30| |i#0@@92|)) )))) (not (BetreeGraph.__default.IsCycle |g'#0@@14| |path#0@@30|))) :qid |Graphidf.127:12| :skolemid |2617| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@14| |path#0@@30|)) :pattern ( (|Seq#Length| |path#0@@30|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@14| |path#0@@30|)) ))) (=> (forall ((|path#0@@31| T@U) ) (!  (=> (and (and (= (type |path#0@@31|) (SeqType BoxType)) ($Is |path#0@@31| (TSeq Tclass.ReferenceType.Reference))) (and (BetreeGraph.__default.IsPath |g'#0@@14| |path#0@@31|) (forall ((|i#0@@93| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@93|) (< |i#0@@93| (|Seq#Length| |path#0@@31|))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@14|) (|Seq#Index| |path#0@@31| |i#0@@93|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@46|) (|Seq#Index| |path#0@@31| |i#0@@93|))))))) :qid |Graphidf.129:18| :skolemid |2616| :pattern ( (|Seq#Index| |path#0@@31| |i#0@@93|)) )))) (not (BetreeGraph.__default.IsCycle |g'#0@@14| |path#0@@31|))) :qid |Graphidf.127:12| :skolemid |2617| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@14| |path#0@@31|)) :pattern ( (|Seq#Length| |path#0@@31|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@14| |path#0@@31|)) )) (BetreeGraph.__default.NewNodesAreCycleFree |g#0@@46| |g'#0@@14|))))) :qid |Graphidf.125:34| :skolemid |2618| :pattern ( (BetreeGraph.__default.NewNodesAreCycleFree |g#0@@46| |g'#0@@14|)) ))))
(assert  (=> true (forall ((|g#0@@47| T@U) (|g'#0@@15| T@U) ) (!  (=> (and (and (= (type |g#0@@47|) (IMapType BoxType BoxType)) (= (type |g'#0@@15|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.NewNodesAreCycleFree#canCall| (Lit |g#0@@47|) (Lit |g'#0@@15|)) (and ($Is |g#0@@47| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@15| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))))) (and (forall ((|path#1@@4| T@U) ) (!  (=> (and (= (type |path#1@@4|) (SeqType BoxType)) ($Is |path#1@@4| (TSeq Tclass.ReferenceType.Reference))) (and (|BetreeGraph.__default.IsPath#canCall| (Lit |g'#0@@15|) |path#1@@4|) (=> (forall ((|i#1@@31| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@31|) (< |i#1@@31| (|Seq#Length| |path#1@@4|))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@15|))) (|Seq#Index| |path#1@@4| |i#1@@31|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@47|))) (|Seq#Index| |path#1@@4| |i#1@@31|))))))) :qid |Graphidf.129:18| :skolemid |2619| :pattern ( (|Seq#Index| |path#1@@4| |i#1@@31|)) )) (|BetreeGraph.__default.IsCycle#canCall| (Lit |g'#0@@15|) |path#1@@4|)))) :qid |Graphidf.127:12| :skolemid |2620| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@15| |path#1@@4|)) :pattern ( (|Seq#Length| |path#1@@4|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@15| |path#1@@4|)) )) (and (=> (BetreeGraph.__default.NewNodesAreCycleFree (Lit |g#0@@47|) (Lit |g'#0@@15|)) (forall ((|path#1@@5| T@U) ) (!  (=> (and (and (= (type |path#1@@5|) (SeqType BoxType)) ($Is |path#1@@5| (TSeq Tclass.ReferenceType.Reference))) (and (BetreeGraph.__default.IsPath (Lit |g'#0@@15|) |path#1@@5|) (forall ((|i#1@@32| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@32|) (< |i#1@@32| (|Seq#Length| |path#1@@5|))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@15|))) (|Seq#Index| |path#1@@5| |i#1@@32|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@47|))) (|Seq#Index| |path#1@@5| |i#1@@32|))))))) :qid |Graphidf.129:18| :skolemid |2621| :pattern ( (|Seq#Index| |path#1@@5| |i#1@@32|)) )))) (not (BetreeGraph.__default.IsCycle (Lit |g'#0@@15|) |path#1@@5|))) :qid |Graphidf.127:12| :skolemid |2622| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@15| |path#1@@5|)) :pattern ( (|Seq#Length| |path#1@@5|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@15| |path#1@@5|)) ))) (=> (forall ((|path#1@@6| T@U) ) (!  (=> (and (and (= (type |path#1@@6|) (SeqType BoxType)) ($Is |path#1@@6| (TSeq Tclass.ReferenceType.Reference))) (and (BetreeGraph.__default.IsPath (Lit |g'#0@@15|) |path#1@@6|) (forall ((|i#1@@33| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@33|) (< |i#1@@33| (|Seq#Length| |path#1@@6|))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@15|))) (|Seq#Index| |path#1@@6| |i#1@@33|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@47|))) (|Seq#Index| |path#1@@6| |i#1@@33|))))))) :qid |Graphidf.129:18| :skolemid |2621| :pattern ( (|Seq#Index| |path#1@@6| |i#1@@33|)) )))) (not (BetreeGraph.__default.IsCycle (Lit |g'#0@@15|) |path#1@@6|))) :qid |Graphidf.127:12| :skolemid |2622| :pattern ( (BetreeGraph.__default.IsCycle |g'#0@@15| |path#1@@6|)) :pattern ( (|Seq#Length| |path#1@@6|)) :pattern ( (BetreeGraph.__default.IsPath |g'#0@@15| |path#1@@6|)) )) (BetreeGraph.__default.NewNodesAreCycleFree (Lit |g#0@@47|) (Lit |g'#0@@15|)))))) :qid |Graphidf.125:34| :weight 3 :skolemid |2623| :pattern ( (BetreeGraph.__default.NewNodesAreCycleFree (Lit |g#0@@47|) (Lit |g'#0@@15|))) ))))
(assert (forall (($ly@@198 T@U) (|path#0@@32| T@U) (|g#0@@48| T@U) ) (!  (=> (and (and (= (type $ly@@198) LayerTypeType) (= (type |path#0@@32|) (SeqType BoxType))) (= (type |g#0@@48|) (IMapType BoxType BoxType))) (= (BetreeGraph.__default.FirstInGraph ($LS $ly@@198) |path#0@@32| |g#0@@48|) (BetreeGraph.__default.FirstInGraph $ly@@198 |path#0@@32| |g#0@@48|))) :qid |Graphidf.133:12| :skolemid |2624| :pattern ( (BetreeGraph.__default.FirstInGraph ($LS $ly@@198) |path#0@@32| |g#0@@48|)) )))
(assert (forall (($ly@@199 T@U) (|path#0@@33| T@U) (|g#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@199) LayerTypeType) (= (type |path#0@@33|) (SeqType BoxType))) (= (type |g#0@@49|) (IMapType BoxType BoxType))) (= (BetreeGraph.__default.FirstInGraph $ly@@199 |path#0@@33| |g#0@@49|) (BetreeGraph.__default.FirstInGraph $LZ |path#0@@33| |g#0@@49|))) :qid |Graphidf.133:12| :skolemid |2625| :pattern ( (BetreeGraph.__default.FirstInGraph (AsFuelBottom $ly@@199) |path#0@@33| |g#0@@49|)) )))
(assert  (=> true (forall (($ly@@200 T@U) (|path#0@@34| T@U) (|g#0@@50| T@U) ) (!  (=> (and (and (and (= (type $ly@@200) LayerTypeType) (= (type |path#0@@34|) (SeqType BoxType))) (= (type |g#0@@50|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.FirstInGraph#canCall| |path#0@@34| |g#0@@50|) (and (and ($Is |path#0@@34| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@50| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (exists ((|i#0@@94| Int) ) (!  (and (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| (|Seq#Length| |path#0@@34|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@50|) (|Seq#Index| |path#0@@34| |i#0@@94|)))) :qid |Graphidf.134:21| :skolemid |2626| :pattern ( (|Seq#Index| |path#0@@34| |i#0@@94|)) ))))) (and (and (and (<= (LitInt 0) (BetreeGraph.__default.FirstInGraph $ly@@200 |path#0@@34| |g#0@@50|)) (< (BetreeGraph.__default.FirstInGraph $ly@@200 |path#0@@34| |g#0@@50|) (|Seq#Length| |path#0@@34|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@50|) (|Seq#Index| |path#0@@34| (BetreeGraph.__default.FirstInGraph $ly@@200 |path#0@@34| |g#0@@50|))))) (forall ((|i#1@@34| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@34|) (< |i#1@@34| (BetreeGraph.__default.FirstInGraph $ly@@200 |path#0@@34| |g#0@@50|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@50|) (|Seq#Index| |path#0@@34| |i#1@@34|)))))) :qid |Graphidf.137:20| :skolemid |2627| :pattern ( (|Seq#Index| |path#0@@34| |i#1@@34|)) )))) :qid |Graphidf.133:12| :skolemid |2628| :pattern ( (BetreeGraph.__default.FirstInGraph $ly@@200 |path#0@@34| |g#0@@50|)) ))))
(assert (forall (($ly@@201 T@U) (|path#0@@35| T@U) (|g#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@201) LayerTypeType) (= (type |path#0@@35|) (SeqType BoxType))) (= (type |g#0@@51|) (IMapType BoxType BoxType))) (and ($Is |path#0@@35| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@51| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)))) (and (=> (|BetreeGraph.__default.FirstInGraph#requires| $ly@@201 |path#0@@35| |g#0@@51|) (exists ((|i#2@@21| Int) ) (!  (and (and (<= (LitInt 0) |i#2@@21|) (< |i#2@@21| (|Seq#Length| |path#0@@35|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@51|) (|Seq#Index| |path#0@@35| |i#2@@21|)))) :qid |Graphidf.134:21| :skolemid |2629| :pattern ( (|Seq#Index| |path#0@@35| |i#2@@21|)) ))) (=> (exists ((|i#2@@22| Int) ) (!  (and (and (<= (LitInt 0) |i#2@@22|) (< |i#2@@22| (|Seq#Length| |path#0@@35|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@51|) (|Seq#Index| |path#0@@35| |i#2@@22|)))) :qid |Graphidf.134:21| :skolemid |2629| :pattern ( (|Seq#Index| |path#0@@35| |i#2@@22|)) )) (|BetreeGraph.__default.FirstInGraph#requires| $ly@@201 |path#0@@35| |g#0@@51|)))) :qid |Graphidf.133:12| :skolemid |2630| :pattern ( (|BetreeGraph.__default.FirstInGraph#requires| $ly@@201 |path#0@@35| |g#0@@51|)) )))
(assert  (=> true (forall (($ly@@202 T@U) (|path#0@@36| T@U) (|g#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@202) LayerTypeType) (= (type |path#0@@36|) (SeqType BoxType))) (= (type |g#0@@52|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.FirstInGraph#canCall| |path#0@@36| |g#0@@52|) (and (and ($Is |path#0@@36| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@52| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (exists ((|i#2@@23| Int) ) (!  (and (and (<= (LitInt 0) |i#2@@23|) (< |i#2@@23| (|Seq#Length| |path#0@@36|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@52|) (|Seq#Index| |path#0@@36| |i#2@@23|)))) :qid |Graphidf.134:21| :skolemid |2629| :pattern ( (|Seq#Index| |path#0@@36| |i#2@@23|)) ))))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@52|) (|Seq#Index| |path#0@@36| (LitInt 0))))) (|BetreeGraph.__default.FirstInGraph#canCall| (|Seq#Drop| |path#0@@36| (LitInt 1)) |g#0@@52|)) (= (BetreeGraph.__default.FirstInGraph ($LS $ly@@202) |path#0@@36| |g#0@@52|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@52|) (|Seq#Index| |path#0@@36| (LitInt 0)))) 0 (+ 1 (BetreeGraph.__default.FirstInGraph $ly@@202 (|Seq#Drop| |path#0@@36| (LitInt 1)) |g#0@@52|)))))) :qid |Graphidf.133:12| :skolemid |2631| :pattern ( (BetreeGraph.__default.FirstInGraph ($LS $ly@@202) |path#0@@36| |g#0@@52|)) ))))
(assert  (=> true (forall (($ly@@203 T@U) (|path#0@@37| T@U) (|g#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@203) LayerTypeType) (= (type |path#0@@37|) (SeqType BoxType))) (= (type |g#0@@53|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.FirstInGraph#canCall| (Lit |path#0@@37|) |g#0@@53|) (and (and ($Is |path#0@@37| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@53| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (exists ((|i#3@@14| Int) ) (!  (and (and (<= (LitInt 0) |i#3@@14|) (< |i#3@@14| (|Seq#Length| (Lit |path#0@@37|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@53|) (|Seq#Index| (Lit |path#0@@37|) |i#3@@14|)))) :qid |Graphidf.134:21| :skolemid |2632| :pattern ( (|Seq#Index| |path#0@@37| |i#3@@14|)) ))))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@53|) (|Seq#Index| (Lit |path#0@@37|) (LitInt 0))))) (|BetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@37|) (LitInt 1))) |g#0@@53|)) (= (BetreeGraph.__default.FirstInGraph ($LS $ly@@203) (Lit |path#0@@37|) |g#0@@53|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@53|) (|Seq#Index| (Lit |path#0@@37|) (LitInt 0)))) 0 (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $ly@@203) (Lit (|Seq#Drop| (Lit |path#0@@37|) (LitInt 1))) |g#0@@53|)))))) :qid |Graphidf.133:12| :weight 3 :skolemid |2633| :pattern ( (BetreeGraph.__default.FirstInGraph ($LS $ly@@203) (Lit |path#0@@37|) |g#0@@53|)) ))))
(assert  (=> true (forall (($ly@@204 T@U) (|path#0@@38| T@U) (|g#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@204) LayerTypeType) (= (type |path#0@@38|) (SeqType BoxType))) (= (type |g#0@@54|) (IMapType BoxType BoxType))) (or (|BetreeGraph.__default.FirstInGraph#canCall| (Lit |path#0@@38|) (Lit |g#0@@54|)) (and (and ($Is |path#0@@38| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@54| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) (exists ((|i#4@@5| Int) ) (!  (and (and (<= (LitInt 0) |i#4@@5|) (< |i#4@@5| (|Seq#Length| (Lit |path#0@@38|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@54|) (|Seq#Index| (Lit |path#0@@38|) |i#4@@5|)))) :qid |Graphidf.134:21| :skolemid |2634| :pattern ( (|Seq#Index| |path#0@@38| |i#4@@5|)) ))))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@54|) (|Seq#Index| (Lit |path#0@@38|) (LitInt 0))))) (|BetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@38|) (LitInt 1))) (Lit |g#0@@54|))) (= (BetreeGraph.__default.FirstInGraph ($LS $ly@@204) (Lit |path#0@@38|) (Lit |g#0@@54|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@54|) (|Seq#Index| (Lit |path#0@@38|) (LitInt 0)))) 0 (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $ly@@204) (Lit (|Seq#Drop| (Lit |path#0@@38|) (LitInt 1))) (Lit |g#0@@54|))))))) :qid |Graphidf.133:12| :weight 3 :skolemid |2635| :pattern ( (BetreeGraph.__default.FirstInGraph ($LS $ly@@204) (Lit |path#0@@38|) (Lit |g#0@@54|))) ))))
(assert (forall ((arg0@@423 T@U) (arg1@@206 T@U) (arg2@@144 T@U) (arg3@@111 T@U) (arg4@@94 T@U) ) (! (= (type (BetreeGraph.__default.UndoLocalEdit arg0@@423 arg1@@206 arg2@@144 arg3@@111 arg4@@94)) (SeqType BoxType)) :qid |funType:BetreeGraph.__default.UndoLocalEdit| :pattern ( (BetreeGraph.__default.UndoLocalEdit arg0@@423 arg1@@206 arg2@@144 arg3@@111 arg4@@94)) )))
(assert (forall (($ly@@205 T@U) (|g#0@@55| T@U) (|g'#0@@16| T@U) (|p#0@@16| T@U) (|path#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@205) LayerTypeType) (= (type |g#0@@55|) (IMapType BoxType BoxType))) (= (type |g'#0@@16|) (IMapType BoxType BoxType))) (= (type |p#0@@16|) BoxType)) (= (type |path#0@@39|) (SeqType BoxType))) (= (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@205) |g#0@@55| |g'#0@@16| |p#0@@16| |path#0@@39|) (BetreeGraph.__default.UndoLocalEdit $ly@@205 |g#0@@55| |g'#0@@16| |p#0@@16| |path#0@@39|))) :qid |Graphidf.143:12| :skolemid |2636| :pattern ( (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@205) |g#0@@55| |g'#0@@16| |p#0@@16| |path#0@@39|)) )))
(assert (forall (($ly@@206 T@U) (|g#0@@56| T@U) (|g'#0@@17| T@U) (|p#0@@17| T@U) (|path#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@206) LayerTypeType) (= (type |g#0@@56|) (IMapType BoxType BoxType))) (= (type |g'#0@@17|) (IMapType BoxType BoxType))) (= (type |p#0@@17|) BoxType)) (= (type |path#0@@40|) (SeqType BoxType))) (= (BetreeGraph.__default.UndoLocalEdit $ly@@206 |g#0@@56| |g'#0@@17| |p#0@@17| |path#0@@40|) (BetreeGraph.__default.UndoLocalEdit $LZ |g#0@@56| |g'#0@@17| |p#0@@17| |path#0@@40|))) :qid |Graphidf.143:12| :skolemid |2637| :pattern ( (BetreeGraph.__default.UndoLocalEdit (AsFuelBottom $ly@@206) |g#0@@56| |g'#0@@17| |p#0@@17| |path#0@@40|)) )))
(assert  (=> true (forall (($ly@@207 T@U) (|g#0@@57| T@U) (|g'#0@@18| T@U) (|p#0@@18| T@U) (|path#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@207) LayerTypeType) (= (type |g#0@@57|) (IMapType BoxType BoxType))) (= (type |g'#0@@18|) (IMapType BoxType BoxType))) (= (type |p#0@@18|) BoxType)) (= (type |path#0@@41|) (SeqType BoxType))) (or (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@57| |g'#0@@18| |p#0@@18| |path#0@@41|) (and (and (and (and ($Is |g#0@@57| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node)) ($Is |g'#0@@18| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@18| Tclass.ReferenceType.Reference)) ($Is |path#0@@41| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (BetreeGraph.__default.IsClosed |g#0@@57|) (< 1 (|Seq#Length| |path#0@@41|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@57|) (|Seq#Index| |path#0@@41| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@57|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@41|)))) (BetreeGraph.__default.EditIsLocal |g#0@@57| |g'#0@@18| |p#0@@18|)) (BetreeGraph.__default.IsPath |g'#0@@18| |path#0@@41|))))) (and (BetreeGraph.__default.IsPathFromTo |g#0@@57| (BetreeGraph.__default.UndoLocalEdit $ly@@207 |g#0@@57| |g'#0@@18| |p#0@@18| |path#0@@41|) (|Seq#Index| |path#0@@41| (LitInt 0)) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@41|)) ($Is (BetreeGraph.__default.UndoLocalEdit $ly@@207 |g#0@@57| |g'#0@@18| |p#0@@18| |path#0@@41|) (TSeq Tclass.ReferenceType.Reference)))) :qid |Graphidf.143:12| :skolemid |2638| :pattern ( (BetreeGraph.__default.UndoLocalEdit $ly@@207 |g#0@@57| |g'#0@@18| |p#0@@18| |path#0@@41|)) ))))
(assert (forall (($ly@@208 T@U) ($Heap@@36 T@U) (|g#0@@58| T@U) (|g'#0@@19| T@U) (|p#0@@19| T@U) (|path#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@208) LayerTypeType) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |g#0@@58|) (IMapType BoxType BoxType))) (= (type |g'#0@@19|) (IMapType BoxType BoxType))) (= (type |p#0@@19|) BoxType)) (= (type |path#0@@42|) (SeqType BoxType))) (and (and (and (and ($IsGoodHeap $Heap@@36) ($Is |g#0@@58| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |g'#0@@19| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@19| Tclass.ReferenceType.Reference)) ($Is |path#0@@42| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|BetreeGraph.__default.UndoLocalEdit#requires| $ly@@208 |g#0@@58| |g'#0@@19| |p#0@@19| |path#0@@42|) (and (and (and (and (and (BetreeGraph.__default.IsClosed |g#0@@58|) (< 1 (|Seq#Length| |path#0@@42|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@58|) (|Seq#Index| |path#0@@42| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@58|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@42|)))) (BetreeGraph.__default.EditIsLocal |g#0@@58| |g'#0@@19| |p#0@@19|)) (BetreeGraph.__default.IsPath |g'#0@@19| |path#0@@42|))) (=> (and (and (and (and (and (BetreeGraph.__default.IsClosed |g#0@@58|) (< 1 (|Seq#Length| |path#0@@42|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@58|) (|Seq#Index| |path#0@@42| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@58|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@42|)))) (BetreeGraph.__default.EditIsLocal |g#0@@58| |g'#0@@19| |p#0@@19|)) (BetreeGraph.__default.IsPath |g'#0@@19| |path#0@@42|)) (|BetreeGraph.__default.UndoLocalEdit#requires| $ly@@208 |g#0@@58| |g'#0@@19| |p#0@@19| |path#0@@42|)))) :qid |Graphidf.143:12| :skolemid |2639| :pattern ( (|BetreeGraph.__default.UndoLocalEdit#requires| $ly@@208 |g#0@@58| |g'#0@@19| |p#0@@19| |path#0@@42|) ($IsGoodHeap $Heap@@36)) )))
(assert (forall ((arg0@@424 T@U) (arg1@@207 T@U) (arg2@@145 T@U) ) (! (= (type (|$let#4_replacement| arg0@@424 arg1@@207 arg2@@145)) (SeqType BoxType)) :qid |funType:$let#4_replacement| :pattern ( (|$let#4_replacement| arg0@@424 arg1@@207 arg2@@145)) )))
(assert (forall ((g T@U) (path T@U) (wit T@U) ) (!  (=> (and (and (and (= (type g) (IMapType BoxType BoxType)) (= (type path) (SeqType BoxType))) (= (type wit) (SeqType BoxType))) (|$let#4$canCall| g path wit)) (and ($Is (|$let#4_replacement| g path wit) (TSeq Tclass.ReferenceType.Reference)) (BetreeGraph.__default.IsPathFromTo g (|$let#4_replacement| g path wit) (|Seq#Index| path (LitInt 0)) (Sequences.__default.Last Tclass.ReferenceType.Reference wit)))) :qid |Graphidf.156:7| :skolemid |2640| :pattern ( (|$let#4_replacement| g path wit)) )))
(assert  (=> true (forall (($ly@@209 T@U) ($Heap@@37 T@U) (|g#0@@59| T@U) (|g'#0@@20| T@U) (|p#0@@20| T@U) (|path#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@209) LayerTypeType) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |g#0@@59|) (IMapType BoxType BoxType))) (= (type |g'#0@@20|) (IMapType BoxType BoxType))) (= (type |p#0@@20|) BoxType)) (= (type |path#0@@43|) (SeqType BoxType))) (or (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@59| |g'#0@@20| |p#0@@20| |path#0@@43|) (and (and (and (and (and ($IsGoodHeap $Heap@@37) ($Is |g#0@@59| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |g'#0@@20| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@20| Tclass.ReferenceType.Reference)) ($Is |path#0@@43| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (BetreeGraph.__default.IsClosed |g#0@@59|) (< 1 (|Seq#Length| |path#0@@43|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@59|) (|Seq#Index| |path#0@@43| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@59|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@43|)))) (BetreeGraph.__default.EditIsLocal |g#0@@59| |g'#0@@20| |p#0@@20|)) (BetreeGraph.__default.IsPath |g'#0@@20| |path#0@@43|))))) (and (and (=> (= (|Seq#Index| |path#0@@43| (LitInt 0)) |p#0@@20|) (and (|BetreeGraph.__default.FirstInGraph#canCall| (|Seq#Drop| |path#0@@43| (LitInt 1)) |g#0@@59|) (let ((|len#0| (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (|Seq#Drop| |path#0@@43| (LitInt 1)) |g#0@@59|)))) (let ((|wit#1| (|Seq#Take| |path#0@@43| (+ |len#0| 1)))) (and (|$let#4$canCall| |g#0@@59| |path#0@@43| |wit#1|) (=> (< |len#0| (- (|Seq#Length| |path#0@@43|) 1)) (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (|$let#4_replacement| |g#0@@59| |path#0@@43| |wit#1|)) (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@59| |g'#0@@20| |p#0@@20| (|Seq#Drop| |path#0@@43| |len#0|))))))))) (=> (not (= (|Seq#Index| |path#0@@43| (LitInt 0)) |p#0@@20|)) (=> (not (= (|Seq#Length| |path#0@@43|) (LitInt 2))) (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@59| |g'#0@@20| |p#0@@20| (|Seq#Drop| |path#0@@43| (LitInt 1)))))) (= (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@209) |g#0@@59| |g'#0@@20| |p#0@@20| |path#0@@43|) (ite (= (|Seq#Index| |path#0@@43| (LitInt 0)) |p#0@@20|) (let ((|len#0@@0| (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (|Seq#Drop| |path#0@@43| (LitInt 1)) |g#0@@59|)))) (let ((|wit#1@@0| (|Seq#Take| |path#0@@43| (+ |len#0@@0| 1)))) (let ((|replacement#0| (|$let#4_replacement| |g#0@@59| |path#0@@43| |wit#1@@0|))) (ite (< |len#0@@0| (- (|Seq#Length| |path#0@@43|) 1)) (|Seq#Append| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |replacement#0|) (BetreeGraph.__default.UndoLocalEdit $ly@@209 |g#0@@59| |g'#0@@20| |p#0@@20| (|Seq#Drop| |path#0@@43| |len#0@@0|))) |replacement#0|)))) (ite (= (|Seq#Length| |path#0@@43|) (LitInt 2)) |path#0@@43| (|Seq#Append| (|Seq#Take| |path#0@@43| (LitInt 1)) (BetreeGraph.__default.UndoLocalEdit $ly@@209 |g#0@@59| |g'#0@@20| |p#0@@20| (|Seq#Drop| |path#0@@43| (LitInt 1))))))))) :qid |Graphidf.143:12| :skolemid |2641| :pattern ( (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@209) |g#0@@59| |g'#0@@20| |p#0@@20| |path#0@@43|) ($IsGoodHeap $Heap@@37)) ))))
(assert  (=> true (forall (($ly@@210 T@U) ($Heap@@38 T@U) (|g#0@@60| T@U) (|g'#0@@21| T@U) (|p#0@@21| T@U) (|path#0@@44| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@210) LayerTypeType) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |g#0@@60|) (IMapType BoxType BoxType))) (= (type |g'#0@@21|) (IMapType BoxType BoxType))) (= (type |p#0@@21|) BoxType)) (= (type |path#0@@44|) (SeqType BoxType))) (or (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@60| |g'#0@@21| |p#0@@21| (Lit |path#0@@44|)) (and (and (and (and (and ($IsGoodHeap $Heap@@38) ($Is |g#0@@60| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |g'#0@@21| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@21| Tclass.ReferenceType.Reference)) ($Is |path#0@@44| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (BetreeGraph.__default.IsClosed |g#0@@60|) (< 1 (|Seq#Length| (Lit |path#0@@44|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@60|) (|Seq#Index| (Lit |path#0@@44|) (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@60|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@44|)))))) (BetreeGraph.__default.EditIsLocal |g#0@@60| |g'#0@@21| |p#0@@21|)) (BetreeGraph.__default.IsPath |g'#0@@21| (Lit |path#0@@44|)))))) (and (and (=> (= (|Seq#Index| (Lit |path#0@@44|) (LitInt 0)) |p#0@@21|) (and (|BetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@44|) (LitInt 1))) |g#0@@60|) (let ((|len#1| (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@44|) (LitInt 1))) |g#0@@60|)))) (let ((|wit#2| (|Seq#Take| (Lit |path#0@@44|) (+ |len#1| 1)))) (and (|$let#4$canCall| |g#0@@60| (Lit |path#0@@44|) |wit#2|) (=> (< |len#1| (- (|Seq#Length| (Lit |path#0@@44|)) 1)) (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (|$let#4_replacement| |g#0@@60| (Lit |path#0@@44|) |wit#2|)) (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@60| |g'#0@@21| |p#0@@21| (|Seq#Drop| (Lit |path#0@@44|) |len#1|))))))))) (=> (not (= (|Seq#Index| (Lit |path#0@@44|) (LitInt 0)) |p#0@@21|)) (=> (not (= (|Seq#Length| (Lit |path#0@@44|)) (LitInt 2))) (|BetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@60| |g'#0@@21| |p#0@@21| (Lit (|Seq#Drop| (Lit |path#0@@44|) (LitInt 1))))))) (= (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@210) |g#0@@60| |g'#0@@21| |p#0@@21| (Lit |path#0@@44|)) (ite (= (|Seq#Index| (Lit |path#0@@44|) (LitInt 0)) |p#0@@21|) (let ((|len#1@@0| (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@44|) (LitInt 1))) |g#0@@60|)))) (let ((|wit#2@@0| (|Seq#Take| (Lit |path#0@@44|) (+ |len#1@@0| 1)))) (let ((|replacement#1| (|$let#4_replacement| |g#0@@60| (Lit |path#0@@44|) |wit#2@@0|))) (ite (< |len#1@@0| (- (|Seq#Length| (Lit |path#0@@44|)) 1)) (|Seq#Append| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |replacement#1|) (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@210) |g#0@@60| |g'#0@@21| |p#0@@21| (|Seq#Drop| (Lit |path#0@@44|) |len#1@@0|))) |replacement#1|)))) (ite (= (|Seq#Length| (Lit |path#0@@44|)) (LitInt 2)) |path#0@@44| (|Seq#Append| (|Seq#Take| (Lit |path#0@@44|) (LitInt 1)) (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@210) |g#0@@60| |g'#0@@21| |p#0@@21| (Lit (|Seq#Drop| (Lit |path#0@@44|) (LitInt 1)))))))))) :qid |Graphidf.143:12| :weight 3 :skolemid |2642| :pattern ( (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@210) |g#0@@60| |g'#0@@21| |p#0@@21| (Lit |path#0@@44|)) ($IsGoodHeap $Heap@@38)) ))))
(assert  (=> true (forall (($ly@@211 T@U) ($Heap@@39 T@U) (|g#0@@61| T@U) (|g'#0@@22| T@U) (|p#0@@22| T@U) (|path#0@@45| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@211) LayerTypeType) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |g#0@@61|) (IMapType BoxType BoxType))) (= (type |g'#0@@22|) (IMapType BoxType BoxType))) (= (type |p#0@@22|) BoxType)) (= (type |path#0@@45|) (SeqType BoxType))) (or (|BetreeGraph.__default.UndoLocalEdit#canCall| (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit |path#0@@45|)) (and (and (and (and (and ($IsGoodHeap $Heap@@39) ($Is |g#0@@61| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($Is |g'#0@@22| (TIMap Tclass.ReferenceType.Reference Tclass.BetreeGraph.Node))) ($IsBox |p#0@@22| Tclass.ReferenceType.Reference)) ($Is |path#0@@45| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.IsClosed (Lit |g#0@@61|))))) (< 1 (|Seq#Length| (Lit |path#0@@45|)))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@61|))) (|Seq#Index| (Lit |path#0@@45|) (LitInt 0))))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@61|))) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@45|)))))) (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.EditIsLocal (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|)))))) (U_2_bool (Lit (bool_2_U (BetreeGraph.__default.IsPath (Lit |g'#0@@22|) (Lit |path#0@@45|))))))))) (and (and (=> (= (|Seq#Index| (Lit |path#0@@45|) (LitInt 0)) (Lit |p#0@@22|)) (and (|BetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@45|) (LitInt 1))) (Lit |g#0@@61|)) (let ((|len#2| (LitInt (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@45|) (LitInt 1))) (Lit |g#0@@61|)))))) (let ((|wit#3| (|Seq#Take| (Lit |path#0@@45|) (+ |len#2| 1)))) (and (|$let#4$canCall| (Lit |g#0@@61|) (Lit |path#0@@45|) |wit#3|) (=> (< |len#2| (- (|Seq#Length| (Lit |path#0@@45|)) 1)) (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (|$let#4_replacement| (Lit |g#0@@61|) (Lit |path#0@@45|) |wit#3|)) (|BetreeGraph.__default.UndoLocalEdit#canCall| (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (|Seq#Drop| (Lit |path#0@@45|) |len#2|))))))))) (=> (not (= (|Seq#Index| (Lit |path#0@@45|) (LitInt 0)) (Lit |p#0@@22|))) (=> (not (= (|Seq#Length| (Lit |path#0@@45|)) (LitInt 2))) (|BetreeGraph.__default.UndoLocalEdit#canCall| (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit (|Seq#Drop| (Lit |path#0@@45|) (LitInt 1))))))) (= (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@211) (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit |path#0@@45|)) (ite (= (|Seq#Index| (Lit |path#0@@45|) (LitInt 0)) (Lit |p#0@@22|)) (let ((|len#2@@0| (LitInt (+ 1 (BetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@45|) (LitInt 1))) (Lit |g#0@@61|)))))) (let ((|wit#3@@0| (Lit (|Seq#Take| (Lit |path#0@@45|) (LitInt (+ |len#2@@0| 1)))))) (let ((|replacement#2| (|$let#4_replacement| (Lit |g#0@@61|) (Lit |path#0@@45|) |wit#3@@0|))) (ite (< |len#2@@0| (- (|Seq#Length| (Lit |path#0@@45|)) 1)) (|Seq#Append| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |replacement#2|) (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@211) (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit (|Seq#Drop| (Lit |path#0@@45|) |len#2@@0|)))) |replacement#2|)))) (ite (= (|Seq#Length| (Lit |path#0@@45|)) (LitInt 2)) |path#0@@45| (|Seq#Append| (|Seq#Take| (Lit |path#0@@45|) (LitInt 1)) (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@211) (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit (|Seq#Drop| (Lit |path#0@@45|) (LitInt 1)))))))))) :qid |Graphidf.143:12| :weight 3 :skolemid |2643| :pattern ( (BetreeGraph.__default.UndoLocalEdit ($LS $ly@@211) (Lit |g#0@@61|) (Lit |g'#0@@22|) (Lit |p#0@@22|) (Lit |path#0@@45|)) ($IsGoodHeap $Heap@@39)) ))))
(assert (forall ((arg0@@425 T@U) (arg1@@208 T@U) ) (! (= (type (|#BetreeGraph.Op.AllocOp| arg0@@425 arg1@@208)) DatatypeTypeType) :qid |funType:#BetreeGraph.Op.AllocOp| :pattern ( (|#BetreeGraph.Op.AllocOp| arg0@@425 arg1@@208)) )))
(assert (forall ((|a#0#0#0@@2| T@U) (|a#0#1#0@@0| T@U) ) (!  (=> (and (= (type |a#0#0#0@@2|) BoxType) (= (type |a#0#1#0@@0|) DatatypeTypeType)) (= (DatatypeCtorId (|#BetreeGraph.Op.AllocOp| |a#0#0#0@@2| |a#0#1#0@@0|)) |##BetreeGraph.Op.AllocOp|)) :qid |Graphidf.46:15| :skolemid |2644| :pattern ( (|#BetreeGraph.Op.AllocOp| |a#0#0#0@@2| |a#0#1#0@@0|)) )))
(assert (forall ((d@@123 T@U) ) (!  (=> (= (type d@@123) DatatypeTypeType) (and (=> (BetreeGraph.Op.AllocOp_q d@@123) (= (DatatypeCtorId d@@123) |##BetreeGraph.Op.AllocOp|)) (=> (= (DatatypeCtorId d@@123) |##BetreeGraph.Op.AllocOp|) (BetreeGraph.Op.AllocOp_q d@@123)))) :qid |unknown.0:0| :skolemid |2645| :pattern ( (BetreeGraph.Op.AllocOp_q d@@123)) )))
(assert (forall ((d@@124 T@U) ) (!  (=> (and (= (type d@@124) DatatypeTypeType) (BetreeGraph.Op.AllocOp_q d@@124)) (exists ((|a#1#0#0@@2| T@U) (|a#1#1#0@@0| T@U) ) (!  (and (and (= (type |a#1#0#0@@2|) BoxType) (= (type |a#1#1#0@@0|) DatatypeTypeType)) (= d@@124 (|#BetreeGraph.Op.AllocOp| |a#1#0#0@@2| |a#1#1#0@@0|))) :qid |Graphidf.46:15| :skolemid |2646| :no-pattern (type |a#1#0#0@@2|) :no-pattern (type |a#1#1#0@@0|) :no-pattern (U_2_int |a#1#0#0@@2|) :no-pattern (U_2_bool |a#1#0#0@@2|) :no-pattern (U_2_int |a#1#1#0@@0|) :no-pattern (U_2_bool |a#1#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2647| :pattern ( (BetreeGraph.Op.AllocOp_q d@@124)) )))
(assert (= (type Tclass.BetreeGraph.Op) TyType))
(assert (= (Tag Tclass.BetreeGraph.Op) Tagclass.BetreeGraph.Op))
(assert (forall ((bx@@161 T@U) ) (!  (=> (and (= (type bx@@161) BoxType) ($IsBox bx@@161 Tclass.BetreeGraph.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@161)) bx@@161) ($Is ($Unbox DatatypeTypeType bx@@161) Tclass.BetreeGraph.Op))) :qid |unknown.0:0| :skolemid |2648| :pattern ( ($IsBox bx@@161 Tclass.BetreeGraph.Op)) )))
(assert (forall ((|a#2#0#0@@2| T@U) (|a#2#1#0@@0| T@U) ) (!  (=> (and (= (type |a#2#0#0@@2|) BoxType) (= (type |a#2#1#0@@0|) DatatypeTypeType)) (and (=> ($Is (|#BetreeGraph.Op.AllocOp| |a#2#0#0@@2| |a#2#1#0@@0|) Tclass.BetreeGraph.Op) (and ($IsBox |a#2#0#0@@2| Tclass.ReferenceType.Reference) ($Is |a#2#1#0@@0| Tclass.BetreeGraph.Node))) (=> (and ($IsBox |a#2#0#0@@2| Tclass.ReferenceType.Reference) ($Is |a#2#1#0@@0| Tclass.BetreeGraph.Node)) ($Is (|#BetreeGraph.Op.AllocOp| |a#2#0#0@@2| |a#2#1#0@@0|) Tclass.BetreeGraph.Op)))) :qid |Graphidf.46:15| :skolemid |2649| :pattern ( ($Is (|#BetreeGraph.Op.AllocOp| |a#2#0#0@@2| |a#2#1#0@@0|) Tclass.BetreeGraph.Op)) )))
(assert (forall ((|a#3#0#0@@2| T@U) (|a#3#1#0@@0| T@U) ($h@@112 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@2|) BoxType) (= (type |a#3#1#0@@0|) DatatypeTypeType)) (= (type $h@@112) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@112)) (and (=> ($IsAlloc (|#BetreeGraph.Op.AllocOp| |a#3#0#0@@2| |a#3#1#0@@0|) Tclass.BetreeGraph.Op $h@@112) (and ($IsAllocBox |a#3#0#0@@2| Tclass.ReferenceType.Reference $h@@112) ($IsAlloc |a#3#1#0@@0| Tclass.BetreeGraph.Node $h@@112))) (=> (and ($IsAllocBox |a#3#0#0@@2| Tclass.ReferenceType.Reference $h@@112) ($IsAlloc |a#3#1#0@@0| Tclass.BetreeGraph.Node $h@@112)) ($IsAlloc (|#BetreeGraph.Op.AllocOp| |a#3#0#0@@2| |a#3#1#0@@0|) Tclass.BetreeGraph.Op $h@@112)))) :qid |Graphidf.46:15| :skolemid |2650| :pattern ( ($IsAlloc (|#BetreeGraph.Op.AllocOp| |a#3#0#0@@2| |a#3#1#0@@0|) Tclass.BetreeGraph.Op $h@@112)) )))
(assert (forall ((arg0@@426 T@U) ) (! (= (type (BetreeGraph.Op.ref arg0@@426)) BoxType) :qid |funType:BetreeGraph.Op.ref| :pattern ( (BetreeGraph.Op.ref arg0@@426)) )))
(assert (forall ((d@@125 T@U) ($h@@113 T@U) ) (!  (=> (and (and (= (type d@@125) DatatypeTypeType) (= (type $h@@113) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@113) (and (BetreeGraph.Op.AllocOp_q d@@125) ($IsAlloc d@@125 Tclass.BetreeGraph.Op $h@@113)))) ($IsAllocBox (BetreeGraph.Op.ref d@@125) Tclass.ReferenceType.Reference $h@@113)) :qid |unknown.0:0| :skolemid |2651| :pattern ( ($IsAllocBox (BetreeGraph.Op.ref d@@125) Tclass.ReferenceType.Reference $h@@113)) )))
(assert (forall ((arg0@@427 T@U) ) (! (= (type (BetreeGraph.Op.node arg0@@427)) DatatypeTypeType) :qid |funType:BetreeGraph.Op.node| :pattern ( (BetreeGraph.Op.node arg0@@427)) )))
(assert (forall ((d@@126 T@U) ($h@@114 T@U) ) (!  (=> (and (and (= (type d@@126) DatatypeTypeType) (= (type $h@@114) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@114) (and (BetreeGraph.Op.AllocOp_q d@@126) ($IsAlloc d@@126 Tclass.BetreeGraph.Op $h@@114)))) ($IsAlloc (BetreeGraph.Op.node d@@126) Tclass.BetreeGraph.Node $h@@114)) :qid |unknown.0:0| :skolemid |2652| :pattern ( ($IsAlloc (BetreeGraph.Op.node d@@126) Tclass.BetreeGraph.Node $h@@114)) )))
(assert (forall ((|a#4#0#0@@2| T@U) (|a#4#1#0@@0| T@U) ) (!  (=> (and (= (type |a#4#0#0@@2|) BoxType) (= (type |a#4#1#0@@0|) DatatypeTypeType)) (= (|#BetreeGraph.Op.AllocOp| (Lit |a#4#0#0@@2|) (Lit |a#4#1#0@@0|)) (Lit (|#BetreeGraph.Op.AllocOp| |a#4#0#0@@2| |a#4#1#0@@0|)))) :qid |Graphidf.46:15| :skolemid |2653| :pattern ( (|#BetreeGraph.Op.AllocOp| (Lit |a#4#0#0@@2|) (Lit |a#4#1#0@@0|))) )))
(assert (forall ((|a#5#0#0@@4| T@U) (|a#5#1#0@@0| T@U) ) (!  (=> (and (= (type |a#5#0#0@@4|) BoxType) (= (type |a#5#1#0@@0|) DatatypeTypeType)) (= (BetreeGraph.Op.ref (|#BetreeGraph.Op.AllocOp| |a#5#0#0@@4| |a#5#1#0@@0|)) |a#5#0#0@@4|)) :qid |Graphidf.46:15| :skolemid |2654| :pattern ( (|#BetreeGraph.Op.AllocOp| |a#5#0#0@@4| |a#5#1#0@@0|)) )))
(assert (forall ((|a#6#0#0@@4| T@U) (|a#6#1#0@@0| T@U) ) (!  (=> (and (= (type |a#6#0#0@@4|) BoxType) (= (type |a#6#1#0@@0|) DatatypeTypeType)) (= (BetreeGraph.Op.node (|#BetreeGraph.Op.AllocOp| |a#6#0#0@@4| |a#6#1#0@@0|)) |a#6#1#0@@0|)) :qid |Graphidf.46:15| :skolemid |2655| :pattern ( (|#BetreeGraph.Op.AllocOp| |a#6#0#0@@4| |a#6#1#0@@0|)) )))
(assert (forall ((|a#7#0#0@@4| T@U) (|a#7#1#0@@0| T@U) ) (!  (=> (and (= (type |a#7#0#0@@4|) BoxType) (= (type |a#7#1#0@@0|) DatatypeTypeType)) (< (DtRank |a#7#1#0@@0|) (DtRank (|#BetreeGraph.Op.AllocOp| |a#7#0#0@@4| |a#7#1#0@@0|)))) :qid |Graphidf.46:15| :skolemid |2656| :pattern ( (|#BetreeGraph.Op.AllocOp| |a#7#0#0@@4| |a#7#1#0@@0|)) )))
(assert (forall ((arg0@@428 T@U) (arg1@@209 T@U) ) (! (= (type (|#BetreeGraph.Op.WriteOp| arg0@@428 arg1@@209)) DatatypeTypeType) :qid |funType:#BetreeGraph.Op.WriteOp| :pattern ( (|#BetreeGraph.Op.WriteOp| arg0@@428 arg1@@209)) )))
(assert (forall ((|a#8#0#0@@4| T@U) (|a#8#1#0@@0| T@U) ) (!  (=> (and (= (type |a#8#0#0@@4|) BoxType) (= (type |a#8#1#0@@0|) DatatypeTypeType)) (= (DatatypeCtorId (|#BetreeGraph.Op.WriteOp| |a#8#0#0@@4| |a#8#1#0@@0|)) |##BetreeGraph.Op.WriteOp|)) :qid |Graphidf.47:15| :skolemid |2657| :pattern ( (|#BetreeGraph.Op.WriteOp| |a#8#0#0@@4| |a#8#1#0@@0|)) )))
(assert (forall ((d@@127 T@U) ) (!  (=> (= (type d@@127) DatatypeTypeType) (and (=> (BetreeGraph.Op.WriteOp_q d@@127) (= (DatatypeCtorId d@@127) |##BetreeGraph.Op.WriteOp|)) (=> (= (DatatypeCtorId d@@127) |##BetreeGraph.Op.WriteOp|) (BetreeGraph.Op.WriteOp_q d@@127)))) :qid |unknown.0:0| :skolemid |2658| :pattern ( (BetreeGraph.Op.WriteOp_q d@@127)) )))
(assert (forall ((d@@128 T@U) ) (!  (=> (and (= (type d@@128) DatatypeTypeType) (BetreeGraph.Op.WriteOp_q d@@128)) (exists ((|a#9#0#0@@3| T@U) (|a#9#1#0| T@U) ) (!  (and (and (= (type |a#9#0#0@@3|) BoxType) (= (type |a#9#1#0|) DatatypeTypeType)) (= d@@128 (|#BetreeGraph.Op.WriteOp| |a#9#0#0@@3| |a#9#1#0|))) :qid |Graphidf.47:15| :skolemid |2659| :no-pattern (type |a#9#0#0@@3|) :no-pattern (type |a#9#1#0|) :no-pattern (U_2_int |a#9#0#0@@3|) :no-pattern (U_2_bool |a#9#0#0@@3|) :no-pattern (U_2_int |a#9#1#0|) :no-pattern (U_2_bool |a#9#1#0|) ))) :qid |unknown.0:0| :skolemid |2660| :pattern ( (BetreeGraph.Op.WriteOp_q d@@128)) )))
(assert (forall ((|a#10#0#0@@3| T@U) (|a#10#1#0| T@U) ) (!  (=> (and (= (type |a#10#0#0@@3|) BoxType) (= (type |a#10#1#0|) DatatypeTypeType)) (and (=> ($Is (|#BetreeGraph.Op.WriteOp| |a#10#0#0@@3| |a#10#1#0|) Tclass.BetreeGraph.Op) (and ($IsBox |a#10#0#0@@3| Tclass.ReferenceType.Reference) ($Is |a#10#1#0| Tclass.BetreeGraph.Node))) (=> (and ($IsBox |a#10#0#0@@3| Tclass.ReferenceType.Reference) ($Is |a#10#1#0| Tclass.BetreeGraph.Node)) ($Is (|#BetreeGraph.Op.WriteOp| |a#10#0#0@@3| |a#10#1#0|) Tclass.BetreeGraph.Op)))) :qid |Graphidf.47:15| :skolemid |2661| :pattern ( ($Is (|#BetreeGraph.Op.WriteOp| |a#10#0#0@@3| |a#10#1#0|) Tclass.BetreeGraph.Op)) )))
(assert (forall ((|a#11#0#0@@3| T@U) (|a#11#1#0| T@U) ($h@@115 T@U) ) (!  (=> (and (and (and (= (type |a#11#0#0@@3|) BoxType) (= (type |a#11#1#0|) DatatypeTypeType)) (= (type $h@@115) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@115)) (and (=> ($IsAlloc (|#BetreeGraph.Op.WriteOp| |a#11#0#0@@3| |a#11#1#0|) Tclass.BetreeGraph.Op $h@@115) (and ($IsAllocBox |a#11#0#0@@3| Tclass.ReferenceType.Reference $h@@115) ($IsAlloc |a#11#1#0| Tclass.BetreeGraph.Node $h@@115))) (=> (and ($IsAllocBox |a#11#0#0@@3| Tclass.ReferenceType.Reference $h@@115) ($IsAlloc |a#11#1#0| Tclass.BetreeGraph.Node $h@@115)) ($IsAlloc (|#BetreeGraph.Op.WriteOp| |a#11#0#0@@3| |a#11#1#0|) Tclass.BetreeGraph.Op $h@@115)))) :qid |Graphidf.47:15| :skolemid |2662| :pattern ( ($IsAlloc (|#BetreeGraph.Op.WriteOp| |a#11#0#0@@3| |a#11#1#0|) Tclass.BetreeGraph.Op $h@@115)) )))
(assert (forall ((d@@129 T@U) ($h@@116 T@U) ) (!  (=> (and (and (= (type d@@129) DatatypeTypeType) (= (type $h@@116) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@116) (and (BetreeGraph.Op.WriteOp_q d@@129) ($IsAlloc d@@129 Tclass.BetreeGraph.Op $h@@116)))) ($IsAllocBox (BetreeGraph.Op.ref d@@129) Tclass.ReferenceType.Reference $h@@116)) :qid |unknown.0:0| :skolemid |2663| :pattern ( ($IsAllocBox (BetreeGraph.Op.ref d@@129) Tclass.ReferenceType.Reference $h@@116)) )))
(assert (forall ((d@@130 T@U) ($h@@117 T@U) ) (!  (=> (and (and (= (type d@@130) DatatypeTypeType) (= (type $h@@117) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@117) (and (BetreeGraph.Op.WriteOp_q d@@130) ($IsAlloc d@@130 Tclass.BetreeGraph.Op $h@@117)))) ($IsAlloc (BetreeGraph.Op.node d@@130) Tclass.BetreeGraph.Node $h@@117)) :qid |unknown.0:0| :skolemid |2664| :pattern ( ($IsAlloc (BetreeGraph.Op.node d@@130) Tclass.BetreeGraph.Node $h@@117)) )))
(assert (forall ((|a#12#0#0@@1| T@U) (|a#12#1#0| T@U) ) (!  (=> (and (= (type |a#12#0#0@@1|) BoxType) (= (type |a#12#1#0|) DatatypeTypeType)) (= (|#BetreeGraph.Op.WriteOp| (Lit |a#12#0#0@@1|) (Lit |a#12#1#0|)) (Lit (|#BetreeGraph.Op.WriteOp| |a#12#0#0@@1| |a#12#1#0|)))) :qid |Graphidf.47:15| :skolemid |2665| :pattern ( (|#BetreeGraph.Op.WriteOp| (Lit |a#12#0#0@@1|) (Lit |a#12#1#0|))) )))
(assert (forall ((|a#13#0#0@@1| T@U) (|a#13#1#0@@1| T@U) ) (!  (=> (and (= (type |a#13#0#0@@1|) BoxType) (= (type |a#13#1#0@@1|) DatatypeTypeType)) (= (BetreeGraph.Op.ref (|#BetreeGraph.Op.WriteOp| |a#13#0#0@@1| |a#13#1#0@@1|)) |a#13#0#0@@1|)) :qid |Graphidf.47:15| :skolemid |2666| :pattern ( (|#BetreeGraph.Op.WriteOp| |a#13#0#0@@1| |a#13#1#0@@1|)) )))
(assert (forall ((|a#14#0#0@@1| T@U) (|a#14#1#0@@1| T@U) ) (!  (=> (and (= (type |a#14#0#0@@1|) BoxType) (= (type |a#14#1#0@@1|) DatatypeTypeType)) (= (BetreeGraph.Op.node (|#BetreeGraph.Op.WriteOp| |a#14#0#0@@1| |a#14#1#0@@1|)) |a#14#1#0@@1|)) :qid |Graphidf.47:15| :skolemid |2667| :pattern ( (|#BetreeGraph.Op.WriteOp| |a#14#0#0@@1| |a#14#1#0@@1|)) )))
(assert (forall ((|a#15#0#0@@1| T@U) (|a#15#1#0@@1| T@U) ) (!  (=> (and (= (type |a#15#0#0@@1|) BoxType) (= (type |a#15#1#0@@1|) DatatypeTypeType)) (< (DtRank |a#15#1#0@@1|) (DtRank (|#BetreeGraph.Op.WriteOp| |a#15#0#0@@1| |a#15#1#0@@1|)))) :qid |Graphidf.47:15| :skolemid |2668| :pattern ( (|#BetreeGraph.Op.WriteOp| |a#15#0#0@@1| |a#15#1#0@@1|)) )))
(assert (forall ((d@@131 T@U) ) (!  (=> (and (= (type d@@131) DatatypeTypeType) (|$IsA#BetreeGraph.Op| d@@131)) (or (BetreeGraph.Op.AllocOp_q d@@131) (BetreeGraph.Op.WriteOp_q d@@131))) :qid |unknown.0:0| :skolemid |2669| :pattern ( (|$IsA#BetreeGraph.Op| d@@131)) )))
(assert (forall ((d@@132 T@U) ) (!  (=> (and (= (type d@@132) DatatypeTypeType) ($Is d@@132 Tclass.BetreeGraph.Op)) (or (BetreeGraph.Op.AllocOp_q d@@132) (BetreeGraph.Op.WriteOp_q d@@132))) :qid |unknown.0:0| :skolemid |2670| :pattern ( (BetreeGraph.Op.WriteOp_q d@@132) ($Is d@@132 Tclass.BetreeGraph.Op)) :pattern ( (BetreeGraph.Op.AllocOp_q d@@132) ($Is d@@132 Tclass.BetreeGraph.Op)) )))
(assert (forall ((a@@174 T@U) (b@@105 T@U) ) (!  (=> (and (and (= (type a@@174) DatatypeTypeType) (= (type b@@105) DatatypeTypeType)) (and (BetreeGraph.Op.AllocOp_q a@@174) (BetreeGraph.Op.AllocOp_q b@@105))) (and (=> (|BetreeGraph.Op#Equal| a@@174 b@@105) (and (= (BetreeGraph.Op.ref a@@174) (BetreeGraph.Op.ref b@@105)) (|BetreeGraph.Node#Equal| (BetreeGraph.Op.node a@@174) (BetreeGraph.Op.node b@@105)))) (=> (and (= (BetreeGraph.Op.ref a@@174) (BetreeGraph.Op.ref b@@105)) (|BetreeGraph.Node#Equal| (BetreeGraph.Op.node a@@174) (BetreeGraph.Op.node b@@105))) (|BetreeGraph.Op#Equal| a@@174 b@@105)))) :qid |unknown.0:0| :skolemid |2671| :pattern ( (|BetreeGraph.Op#Equal| a@@174 b@@105) (BetreeGraph.Op.AllocOp_q a@@174)) :pattern ( (|BetreeGraph.Op#Equal| a@@174 b@@105) (BetreeGraph.Op.AllocOp_q b@@105)) )))
(assert (forall ((a@@175 T@U) (b@@106 T@U) ) (!  (=> (and (and (= (type a@@175) DatatypeTypeType) (= (type b@@106) DatatypeTypeType)) (and (BetreeGraph.Op.WriteOp_q a@@175) (BetreeGraph.Op.WriteOp_q b@@106))) (and (=> (|BetreeGraph.Op#Equal| a@@175 b@@106) (and (= (BetreeGraph.Op.ref a@@175) (BetreeGraph.Op.ref b@@106)) (|BetreeGraph.Node#Equal| (BetreeGraph.Op.node a@@175) (BetreeGraph.Op.node b@@106)))) (=> (and (= (BetreeGraph.Op.ref a@@175) (BetreeGraph.Op.ref b@@106)) (|BetreeGraph.Node#Equal| (BetreeGraph.Op.node a@@175) (BetreeGraph.Op.node b@@106))) (|BetreeGraph.Op#Equal| a@@175 b@@106)))) :qid |unknown.0:0| :skolemid |2672| :pattern ( (|BetreeGraph.Op#Equal| a@@175 b@@106) (BetreeGraph.Op.WriteOp_q a@@175)) :pattern ( (|BetreeGraph.Op#Equal| a@@175 b@@106) (BetreeGraph.Op.WriteOp_q b@@106)) )))
(assert (forall ((a@@176 T@U) (b@@107 T@U) ) (!  (=> (and (= (type a@@176) DatatypeTypeType) (= (type b@@107) DatatypeTypeType)) (and (=> (|BetreeGraph.Op#Equal| a@@176 b@@107) (= a@@176 b@@107)) (=> (= a@@176 b@@107) (|BetreeGraph.Op#Equal| a@@176 b@@107)))) :qid |unknown.0:0| :skolemid |2673| :pattern ( (|BetreeGraph.Op#Equal| a@@176 b@@107)) )))
(assert (forall ((arg0@@429 T@U) (arg1@@210 T@U) ) (! (= (type (|#BetreeGraph.ReadOp.ReadOp| arg0@@429 arg1@@210)) DatatypeTypeType) :qid |funType:#BetreeGraph.ReadOp.ReadOp| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| arg0@@429 arg1@@210)) )))
(assert (forall ((|a#16#0#0@@1| T@U) (|a#16#1#0@@1| T@U) ) (!  (=> (and (= (type |a#16#0#0@@1|) BoxType) (= (type |a#16#1#0@@1|) DatatypeTypeType)) (= (DatatypeCtorId (|#BetreeGraph.ReadOp.ReadOp| |a#16#0#0@@1| |a#16#1#0@@1|)) |##BetreeGraph.ReadOp.ReadOp|)) :qid |Graphidf.50:14| :skolemid |2674| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| |a#16#0#0@@1| |a#16#1#0@@1|)) )))
(assert (forall ((d@@133 T@U) ) (!  (=> (= (type d@@133) DatatypeTypeType) (and (=> (BetreeGraph.ReadOp.ReadOp_q d@@133) (= (DatatypeCtorId d@@133) |##BetreeGraph.ReadOp.ReadOp|)) (=> (= (DatatypeCtorId d@@133) |##BetreeGraph.ReadOp.ReadOp|) (BetreeGraph.ReadOp.ReadOp_q d@@133)))) :qid |unknown.0:0| :skolemid |2675| :pattern ( (BetreeGraph.ReadOp.ReadOp_q d@@133)) )))
(assert (forall ((d@@134 T@U) ) (!  (=> (and (= (type d@@134) DatatypeTypeType) (BetreeGraph.ReadOp.ReadOp_q d@@134)) (exists ((|a#17#0#0@@2| T@U) (|a#17#1#0@@1| T@U) ) (!  (and (and (= (type |a#17#0#0@@2|) BoxType) (= (type |a#17#1#0@@1|) DatatypeTypeType)) (= d@@134 (|#BetreeGraph.ReadOp.ReadOp| |a#17#0#0@@2| |a#17#1#0@@1|))) :qid |Graphidf.50:14| :skolemid |2676| :no-pattern (type |a#17#0#0@@2|) :no-pattern (type |a#17#1#0@@1|) :no-pattern (U_2_int |a#17#0#0@@2|) :no-pattern (U_2_bool |a#17#0#0@@2|) :no-pattern (U_2_int |a#17#1#0@@1|) :no-pattern (U_2_bool |a#17#1#0@@1|) ))) :qid |unknown.0:0| :skolemid |2677| :pattern ( (BetreeGraph.ReadOp.ReadOp_q d@@134)) )))
(assert (= (type Tclass.BetreeGraph.ReadOp) TyType))
(assert (= (Tag Tclass.BetreeGraph.ReadOp) Tagclass.BetreeGraph.ReadOp))
(assert (forall ((bx@@162 T@U) ) (!  (=> (and (= (type bx@@162) BoxType) ($IsBox bx@@162 Tclass.BetreeGraph.ReadOp)) (and (= ($Box ($Unbox DatatypeTypeType bx@@162)) bx@@162) ($Is ($Unbox DatatypeTypeType bx@@162) Tclass.BetreeGraph.ReadOp))) :qid |unknown.0:0| :skolemid |2678| :pattern ( ($IsBox bx@@162 Tclass.BetreeGraph.ReadOp)) )))
(assert (forall ((|a#18#0#0@@2| T@U) (|a#18#1#0@@1| T@U) ) (!  (=> (and (= (type |a#18#0#0@@2|) BoxType) (= (type |a#18#1#0@@1|) DatatypeTypeType)) (and (=> ($Is (|#BetreeGraph.ReadOp.ReadOp| |a#18#0#0@@2| |a#18#1#0@@1|) Tclass.BetreeGraph.ReadOp) (and ($IsBox |a#18#0#0@@2| Tclass.ReferenceType.Reference) ($Is |a#18#1#0@@1| Tclass.BetreeGraph.Node))) (=> (and ($IsBox |a#18#0#0@@2| Tclass.ReferenceType.Reference) ($Is |a#18#1#0@@1| Tclass.BetreeGraph.Node)) ($Is (|#BetreeGraph.ReadOp.ReadOp| |a#18#0#0@@2| |a#18#1#0@@1|) Tclass.BetreeGraph.ReadOp)))) :qid |Graphidf.50:14| :skolemid |2679| :pattern ( ($Is (|#BetreeGraph.ReadOp.ReadOp| |a#18#0#0@@2| |a#18#1#0@@1|) Tclass.BetreeGraph.ReadOp)) )))
(assert (forall ((|a#19#0#0@@2| T@U) (|a#19#1#0@@1| T@U) ($h@@118 T@U) ) (!  (=> (and (and (and (= (type |a#19#0#0@@2|) BoxType) (= (type |a#19#1#0@@1|) DatatypeTypeType)) (= (type $h@@118) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@118)) (and (=> ($IsAlloc (|#BetreeGraph.ReadOp.ReadOp| |a#19#0#0@@2| |a#19#1#0@@1|) Tclass.BetreeGraph.ReadOp $h@@118) (and ($IsAllocBox |a#19#0#0@@2| Tclass.ReferenceType.Reference $h@@118) ($IsAlloc |a#19#1#0@@1| Tclass.BetreeGraph.Node $h@@118))) (=> (and ($IsAllocBox |a#19#0#0@@2| Tclass.ReferenceType.Reference $h@@118) ($IsAlloc |a#19#1#0@@1| Tclass.BetreeGraph.Node $h@@118)) ($IsAlloc (|#BetreeGraph.ReadOp.ReadOp| |a#19#0#0@@2| |a#19#1#0@@1|) Tclass.BetreeGraph.ReadOp $h@@118)))) :qid |Graphidf.50:14| :skolemid |2680| :pattern ( ($IsAlloc (|#BetreeGraph.ReadOp.ReadOp| |a#19#0#0@@2| |a#19#1#0@@1|) Tclass.BetreeGraph.ReadOp $h@@118)) )))
(assert (forall ((arg0@@430 T@U) ) (! (= (type (BetreeGraph.ReadOp.ref arg0@@430)) BoxType) :qid |funType:BetreeGraph.ReadOp.ref| :pattern ( (BetreeGraph.ReadOp.ref arg0@@430)) )))
(assert (forall ((d@@135 T@U) ($h@@119 T@U) ) (!  (=> (and (and (= (type d@@135) DatatypeTypeType) (= (type $h@@119) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@119) (and (BetreeGraph.ReadOp.ReadOp_q d@@135) ($IsAlloc d@@135 Tclass.BetreeGraph.ReadOp $h@@119)))) ($IsAllocBox (BetreeGraph.ReadOp.ref d@@135) Tclass.ReferenceType.Reference $h@@119)) :qid |unknown.0:0| :skolemid |2681| :pattern ( ($IsAllocBox (BetreeGraph.ReadOp.ref d@@135) Tclass.ReferenceType.Reference $h@@119)) )))
(assert (forall ((arg0@@431 T@U) ) (! (= (type (BetreeGraph.ReadOp.node arg0@@431)) DatatypeTypeType) :qid |funType:BetreeGraph.ReadOp.node| :pattern ( (BetreeGraph.ReadOp.node arg0@@431)) )))
(assert (forall ((d@@136 T@U) ($h@@120 T@U) ) (!  (=> (and (and (= (type d@@136) DatatypeTypeType) (= (type $h@@120) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@120) (and (BetreeGraph.ReadOp.ReadOp_q d@@136) ($IsAlloc d@@136 Tclass.BetreeGraph.ReadOp $h@@120)))) ($IsAlloc (BetreeGraph.ReadOp.node d@@136) Tclass.BetreeGraph.Node $h@@120)) :qid |unknown.0:0| :skolemid |2682| :pattern ( ($IsAlloc (BetreeGraph.ReadOp.node d@@136) Tclass.BetreeGraph.Node $h@@120)) )))
(assert (forall ((|a#20#0#0@@2| T@U) (|a#20#1#0@@1| T@U) ) (!  (=> (and (= (type |a#20#0#0@@2|) BoxType) (= (type |a#20#1#0@@1|) DatatypeTypeType)) (= (|#BetreeGraph.ReadOp.ReadOp| (Lit |a#20#0#0@@2|) (Lit |a#20#1#0@@1|)) (Lit (|#BetreeGraph.ReadOp.ReadOp| |a#20#0#0@@2| |a#20#1#0@@1|)))) :qid |Graphidf.50:14| :skolemid |2683| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| (Lit |a#20#0#0@@2|) (Lit |a#20#1#0@@1|))) )))
(assert (forall ((|a#21#0#0@@2| T@U) (|a#21#1#0@@1| T@U) ) (!  (=> (and (= (type |a#21#0#0@@2|) BoxType) (= (type |a#21#1#0@@1|) DatatypeTypeType)) (= (BetreeGraph.ReadOp.ref (|#BetreeGraph.ReadOp.ReadOp| |a#21#0#0@@2| |a#21#1#0@@1|)) |a#21#0#0@@2|)) :qid |Graphidf.50:14| :skolemid |2684| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| |a#21#0#0@@2| |a#21#1#0@@1|)) )))
(assert (forall ((|a#22#0#0@@2| T@U) (|a#22#1#0@@1| T@U) ) (!  (=> (and (= (type |a#22#0#0@@2|) BoxType) (= (type |a#22#1#0@@1|) DatatypeTypeType)) (= (BetreeGraph.ReadOp.node (|#BetreeGraph.ReadOp.ReadOp| |a#22#0#0@@2| |a#22#1#0@@1|)) |a#22#1#0@@1|)) :qid |Graphidf.50:14| :skolemid |2685| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| |a#22#0#0@@2| |a#22#1#0@@1|)) )))
(assert (forall ((|a#23#0#0@@2| T@U) (|a#23#1#0@@1| T@U) ) (!  (=> (and (= (type |a#23#0#0@@2|) BoxType) (= (type |a#23#1#0@@1|) DatatypeTypeType)) (< (DtRank |a#23#1#0@@1|) (DtRank (|#BetreeGraph.ReadOp.ReadOp| |a#23#0#0@@2| |a#23#1#0@@1|)))) :qid |Graphidf.50:14| :skolemid |2686| :pattern ( (|#BetreeGraph.ReadOp.ReadOp| |a#23#0#0@@2| |a#23#1#0@@1|)) )))
(assert (forall ((d@@137 T@U) ) (!  (=> (and (= (type d@@137) DatatypeTypeType) (|$IsA#BetreeGraph.ReadOp| d@@137)) (BetreeGraph.ReadOp.ReadOp_q d@@137)) :qid |unknown.0:0| :skolemid |2687| :pattern ( (|$IsA#BetreeGraph.ReadOp| d@@137)) )))
(assert (forall ((d@@138 T@U) ) (!  (=> (and (= (type d@@138) DatatypeTypeType) ($Is d@@138 Tclass.BetreeGraph.ReadOp)) (BetreeGraph.ReadOp.ReadOp_q d@@138)) :qid |unknown.0:0| :skolemid |2688| :pattern ( (BetreeGraph.ReadOp.ReadOp_q d@@138) ($Is d@@138 Tclass.BetreeGraph.ReadOp)) )))
(assert (forall ((a@@177 T@U) (b@@108 T@U) ) (!  (=> (and (and (= (type a@@177) DatatypeTypeType) (= (type b@@108) DatatypeTypeType)) true) (and (=> (|BetreeGraph.ReadOp#Equal| a@@177 b@@108) (and (= (BetreeGraph.ReadOp.ref a@@177) (BetreeGraph.ReadOp.ref b@@108)) (|BetreeGraph.Node#Equal| (BetreeGraph.ReadOp.node a@@177) (BetreeGraph.ReadOp.node b@@108)))) (=> (and (= (BetreeGraph.ReadOp.ref a@@177) (BetreeGraph.ReadOp.ref b@@108)) (|BetreeGraph.Node#Equal| (BetreeGraph.ReadOp.node a@@177) (BetreeGraph.ReadOp.node b@@108))) (|BetreeGraph.ReadOp#Equal| a@@177 b@@108)))) :qid |unknown.0:0| :skolemid |2689| :pattern ( (|BetreeGraph.ReadOp#Equal| a@@177 b@@108)) )))
(assert (forall ((a@@178 T@U) (b@@109 T@U) ) (!  (=> (and (= (type a@@178) DatatypeTypeType) (= (type b@@109) DatatypeTypeType)) (and (=> (|BetreeGraph.ReadOp#Equal| a@@178 b@@109) (= a@@178 b@@109)) (=> (= a@@178 b@@109) (|BetreeGraph.ReadOp#Equal| a@@178 b@@109)))) :qid |unknown.0:0| :skolemid |2690| :pattern ( (|BetreeGraph.ReadOp#Equal| a@@178 b@@109)) )))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (forall ((bx@@163 T@U) ) (!  (=> (and (= (type bx@@163) BoxType) ($IsBox bx@@163 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@163)) bx@@163) ($Is ($Unbox refType bx@@163) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |2691| :pattern ( ($IsBox bx@@163 Tclass.Maps.__default)) )))
(assert (forall (($o@@38 T@U) ) (!  (=> (= (type $o@@38) refType) (and (=> ($Is $o@@38 Tclass.Maps.__default) (or (= $o@@38 null) (= (dtype $o@@38) Tclass.Maps.__default))) (=> (or (= $o@@38 null) (= (dtype $o@@38) Tclass.Maps.__default)) ($Is $o@@38 Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |2692| :pattern ( ($Is $o@@38 Tclass.Maps.__default)) )))
(assert (forall (($o@@39 T@U) ($h@@121 T@U) ) (!  (=> (and (= (type $o@@39) refType) (= (type $h@@121) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@39 Tclass.Maps.__default $h@@121) (or (= $o@@39 null) (U_2_bool (MapType1Select (MapType0Select $h@@121 $o@@39) alloc)))) (=> (or (= $o@@39 null) (U_2_bool (MapType1Select (MapType0Select $h@@121 $o@@39) alloc))) ($IsAlloc $o@@39 Tclass.Maps.__default $h@@121)))) :qid |unknown.0:0| :skolemid |2693| :pattern ( ($IsAlloc $o@@39 Tclass.Maps.__default $h@@121)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0| T@U) (|k#0@@42| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0|) (IMapType BoxType BoxType))) (= (type |k#0@@42|) BoxType)) (= (type |v#0@@10|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0@@42| |v#0@@10|) (and (and ($Is |m#0| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0@@42| Maps._default.IMapsTo$K)) ($IsBox |v#0@@10| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2694| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0@@42| |v#0@@10|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@0| T@U) (|k#0@@43| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@0|) (IMapType BoxType BoxType))) (= (type |k#0@@43|) BoxType)) (= (type |v#0@@11|) BoxType)) (and (and ($Is |m#0@@0| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@43| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@11| Maps._default.IMapsTo$V@@0))) (and (=> (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@43| |v#0@@11|) true) (=> true (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@43| |v#0@@11|)))) :qid |unknown.0:0| :skolemid |2695| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@43| |v#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@1| T@U) (|k#0@@44| T@U) (|v#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@1|) (IMapType BoxType BoxType))) (= (type |k#0@@44|) BoxType)) (= (type |v#0@@12|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@44| |v#0@@12|) (and (and ($Is |m#0@@1| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@44| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@12| Maps._default.IMapsTo$V@@1)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@44| |v#0@@12|) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@44|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@44|) |v#0@@12|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@44|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@44|) |v#0@@12|)) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@44| |v#0@@12|)))) :qid |unknown.0:0| :skolemid |2696| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@44| |v#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@2| T@U) (|k#0@@45| T@U) (|v#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@2|) (IMapType BoxType BoxType))) (= (type |k#0@@45|) BoxType)) (= (type |v#0@@13|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@45|) (Lit |v#0@@13|)) (and (and ($Is |m#0@@2| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@45| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@13| Maps._default.IMapsTo$V@@2)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@45|) (Lit |v#0@@13|)) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@45|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@45|)) (Lit |v#0@@13|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@45|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@45|)) (Lit |v#0@@13|))) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@45|) (Lit |v#0@@13|))))) :qid |unknown.0:0| :weight 3 :skolemid |2697| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@45|) (Lit |v#0@@13|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@3| T@U) (|k#0@@46| T@U) (|v#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@46|) BoxType)) (= (type |v#0@@14|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@46| |v#0@@14|) (and (and ($Is |m#0@@3| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@46| Maps._default.MapsTo$K)) ($IsBox |v#0@@14| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2698| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@46| |v#0@@14|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@4| T@U) (|k#0@@47| T@U) (|v#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@47|) BoxType)) (= (type |v#0@@15|) BoxType)) (and (and ($Is |m#0@@4| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@47| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@15| Maps._default.MapsTo$V@@0))) (and (=> (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@47| |v#0@@15|) true) (=> true (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@47| |v#0@@15|)))) :qid |unknown.0:0| :skolemid |2699| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@47| |v#0@@15|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@5| T@U) (|k#0@@48| T@U) (|v#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@48|) BoxType)) (= (type |v#0@@16|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@48| |v#0@@16|) (and (and ($Is |m#0@@5| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@48| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@16| Maps._default.MapsTo$V@@1)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@48| |v#0@@16|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@48|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@48|) |v#0@@16|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@48|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@48|) |v#0@@16|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@48| |v#0@@16|)))) :qid |unknown.0:0| :skolemid |2700| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@48| |v#0@@16|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@6| T@U) (|k#0@@49| T@U) (|v#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@6|) (MapType BoxType BoxType))) (= (type |k#0@@49|) BoxType)) (= (type |v#0@@17|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@49| |v#0@@17|) (and (and ($Is |m#0@@6| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@49| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@17| Maps._default.MapsTo$V@@2)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@49| |v#0@@17|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@49|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@49|) |v#0@@17|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@49|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@49|) |v#0@@17|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@49| |v#0@@17|)))) :qid |unknown.0:0| :weight 3 :skolemid |2701| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@49| |v#0@@17|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@7| T@U) (|k#0@@50| T@U) (|v#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@7|) (MapType BoxType BoxType))) (= (type |k#0@@50|) BoxType)) (= (type |v#0@@18|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@50|) (Lit |v#0@@18|)) (and (and ($Is |m#0@@7| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@50| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@18| Maps._default.MapsTo$V@@3)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@50|) (Lit |v#0@@18|)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@50|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@50|)) (Lit |v#0@@18|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@50|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@50|)) (Lit |v#0@@18|))) (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@50|) (Lit |v#0@@18|))))) :qid |unknown.0:0| :weight 3 :skolemid |2702| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@50|) (Lit |v#0@@18|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@8| T@U) (|m'#0| T@U) (|k#0@@51| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@8|) (MapType BoxType BoxType))) (= (type |m'#0|) (MapType BoxType BoxType))) (= (type |k#0@@51|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@51|) (and (and ($Is |m#0@@8| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@51| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2703| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@51|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@9| T@U) (|m'#0@@0| T@U) (|k#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@9|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@52|) BoxType)) (and (and ($Is |m#0@@9| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@52| Maps._default.MapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@52|) true) (=> true (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@52|)))) :qid |unknown.0:0| :skolemid |2704| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@52|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@10| T@U) (|m'#0@@1| T@U) (|k#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@53|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@53|) (and (and ($Is |m#0@@10| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@53| Maps._default.MapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@53|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@53|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@53|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@53|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@53|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@53|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@53|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@53|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@53|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@53|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@53|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@53|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@53|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@53|)))) :qid |unknown.0:0| :skolemid |2705| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@53|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@11| T@U) (|m'#0@@2| T@U) (|k#0@@54| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@54|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@54|) (and (and ($Is |m#0@@11| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@54| Maps._default.MapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@54|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@54|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@54|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@54|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@54|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@54|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@54|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@54|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@54|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@54|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@54|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@54|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@54|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@54|)))) :qid |unknown.0:0| :weight 3 :skolemid |2706| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@54|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@12| T@U) (|m'#0@@3| T@U) (|k#0@@55| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@55|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@55|)) (and (and ($Is |m#0@@12| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@55| Maps._default.MapsAgreeOnKey$K@@3)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@55|)) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@55|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@55|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@55|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@55|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@55|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@55|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@55|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@55|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@55|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@55|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@55|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@55|))))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@55|))))) :qid |unknown.0:0| :weight 3 :skolemid |2707| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@55|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@13| T@U) (|m'#0@@4| T@U) (|k#0@@56| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@13|) (IMapType BoxType BoxType))) (= (type |m'#0@@4|) (IMapType BoxType BoxType))) (= (type |k#0@@56|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@56|) (and (and ($Is |m#0@@13| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@4| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@56| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2708| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@56|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@14| T@U) (|m'#0@@5| T@U) (|k#0@@57| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@14|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@57|) BoxType)) (and (and ($Is |m#0@@14| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@57| Maps._default.IMapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@57|) true) (=> true (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@57|)))) :qid |unknown.0:0| :skolemid |2709| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@57|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@15| T@U) (|m'#0@@6| T@U) (|k#0@@58| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@15|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@58|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@58|) (and (and ($Is |m#0@@15| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@58| Maps._default.IMapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@58|) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@58|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@58|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@58|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@58|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@58|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@58|))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@58|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@58|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@58|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@58|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@58|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@58|)))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@58|)))) :qid |unknown.0:0| :skolemid |2710| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@58|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@16| T@U) (|m'#0@@7| T@U) (|k#0@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@16|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@59|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@59|)) (and (and ($Is |m#0@@16| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@59| Maps._default.IMapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@59|)) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@59|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@59|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@59|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@59|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@59|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@59|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@59|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@59|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@59|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@59|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@59|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@59|))))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@59|))))) :qid |unknown.0:0| :weight 3 :skolemid |2711| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@59|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |2712| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (and (=> (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true) (=> true (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)))) :qid |unknown.0:0| :skolemid |2713| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@25| T@U) ) (!  (=> (and (and (= (type |key#0@@25|) BoxType) ($IsBox |key#0@@25| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@25|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@25|)) :qid |Mapssdfy.28:16| :skolemid |2714| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@25|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@25|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@26| T@U) ) (!  (=> (and (and (= (type |key#0@@26|) BoxType) ($IsBox |key#0@@26| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@26|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@26|)) :qid |Mapssdfy.28:16| :skolemid |2715| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@26|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@26|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@27| T@U) ) (!  (=> (and (and (= (type |key#0@@27|) BoxType) ($IsBox |key#0@@27| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@27|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@27|)) :qid |Mapssdfy.28:16| :skolemid |2715| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@27|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@27|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|))))) :qid |unknown.0:0| :skolemid |2716| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@3| T@U) ) (!  (=> (and (and (= (type |key#1@@3|) BoxType) ($IsBox |key#1@@3| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@3|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@3|)) :qid |Mapssdfy.28:16| :skolemid |2717| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@3|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@4| T@U) ) (!  (=> (and (and (= (type |key#1@@4|) BoxType) ($IsBox |key#1@@4| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@4|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@4|)) :qid |Mapssdfy.28:16| :skolemid |2718| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@4|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@4|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@5| T@U) ) (!  (=> (and (and (= (type |key#1@@5|) BoxType) ($IsBox |key#1@@5| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@5|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@5|)) :qid |Mapssdfy.28:16| :skolemid |2718| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@5|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@5|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2719| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |2720| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (and (=> (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true) (=> true (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)))) :qid |unknown.0:0| :skolemid |2721| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@28| T@U) ) (!  (=> (and (and (= (type |key#0@@28|) BoxType) ($IsBox |key#0@@28| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@28|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@28|)) :qid |Mapssdfy.33:16| :skolemid |2722| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@28|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@28|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@29| T@U) ) (!  (=> (and (and (= (type |key#0@@29|) BoxType) ($IsBox |key#0@@29| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@29|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@29|)) :qid |Mapssdfy.33:16| :skolemid |2723| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@29|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@29|)) )))) (=> (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@30| T@U) ) (!  (=> (and (and (= (type |key#0@@30|) BoxType) ($IsBox |key#0@@30| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@30|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@30|)) :qid |Mapssdfy.33:16| :skolemid |2723| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@30|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@30|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|))))) :qid |unknown.0:0| :skolemid |2724| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@6| T@U) ) (!  (=> (and (and (= (type |key#1@@6|) BoxType) ($IsBox |key#1@@6| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@6|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@6|)) :qid |Mapssdfy.33:16| :skolemid |2725| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@6|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@6|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@7| T@U) ) (!  (=> (and (and (= (type |key#1@@7|) BoxType) ($IsBox |key#1@@7| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@7|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@7|)) :qid |Mapssdfy.33:16| :skolemid |2726| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@7|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@7|)) )))) (=> (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@8| T@U) ) (!  (=> (and (and (= (type |key#1@@8|) BoxType) ($IsBox |key#1@@8| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@8|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@8|)) :qid |Mapssdfy.33:16| :skolemid |2726| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@8|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@8|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2727| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@432 T@U) (arg1@@211 T@U) (arg2@@146 T@U) (arg3@@112 T@U) (arg4@@95 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@432 arg1@@211 arg2@@146 arg3@@112 arg4@@95)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@432 arg1@@211 arg2@@146 arg3@@112 arg4@@95)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@212 T@U) (|m#0@@17| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@212) LayerTypeType)) (= (type |m#0@@17|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@212) |m#0@@17| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@212 |m#0@@17| |ks#0|))) :qid |unknown.0:0| :skolemid |2728| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@212) |m#0@@17| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@213 T@U) (|m#0@@18| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@213) LayerTypeType)) (= (type |m#0@@18|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@213 |m#0@@18| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@18| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |2729| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@213) |m#0@@18| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@214 T@U) (|m#0@@19| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@214) LayerTypeType)) (= (type |m#0@@19|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@19| |ks#0@@1|) (and ($Is |m#0@@19| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@60| T@U) ) (!  (=> (and (and (= (type |k#0@@60|) BoxType) ($IsBox |k#0@@60| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@60|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@60|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) |k#0@@60|))) :qid |Mapssdfy.37:20| :skolemid |2730| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) |k#0@@60|)) :pattern ( (MapType0Select |ks#0@@1| |k#0@@60|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@60|)) )) (forall ((|k#1@@2| T@U) ) (!  (=> (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) |k#1@@2|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#1@@2|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) |k#1@@2|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1@@2|)))))) :qid |Mapssdfy.38:20| :skolemid |2731| :pattern ( (MapType0Select |ks#0@@1| |k#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) |k#1@@2|)) ))) (forall ((|j#0@@13| T@U) ) (!  (=> (and (and (= (type |j#0@@13|) BoxType) ($IsBox |j#0@@13| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) |j#0@@13|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) |j#0@@13|) (MapType0Select (|Map#Elements| |m#0@@19|) |j#0@@13|))) :qid |Mapssdfy.39:20| :skolemid |2732| :pattern ( (MapType0Select (|Map#Elements| |m#0@@19|) |j#0@@13|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) |j#0@@13|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) |j#0@@13|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@19|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) (|Map#Card| |m#0@@19|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2733| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@214 |m#0@@19| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@215 T@U) (|m#0@@20| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@215) LayerTypeType)) (= (type |m#0@@20|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@20| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (and (=> (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@215 |m#0@@20| |ks#0@@2|) true) (=> true (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@215 |m#0@@20| |ks#0@@2|)))) :qid |unknown.0:0| :skolemid |2734| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@215 |m#0@@20| |ks#0@@2|)) )))
(assert  (and (forall ((arg0@@433 T@U) (arg1@@212 T@U) (arg2@@147 T@U) ) (! (= (type (|lambda#54| arg0@@433 arg1@@212 arg2@@147)) (MapType0Type BoxType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@433 arg1@@212 arg2@@147)) )) (forall ((arg0@@434 T@U) ) (! (= (type (|lambda#55| arg0@@434)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@434)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@216 T@U) (|m#0@@21| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@216) LayerTypeType)) (= (type |m#0@@21|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@21| |ks#0@@3|) (and ($Is |m#0@@21| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@216) |m#0@@21| |ks#0@@3|) (let ((|m'#0@@8| (|Map#Glue| (|lambda#54| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@21|) |ks#0@@3|) (|lambda#55| (|Map#Elements| |m#0@@21|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#0@@8|))) :qid |unknown.0:0| :skolemid |2735| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@216) |m#0@@21| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@217 T@U) (|m#0@@22| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@217) LayerTypeType)) (= (type |m#0@@22|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@22|) (Lit |ks#0@@4|)) (and ($Is |m#0@@22| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@217) (Lit |m#0@@22|) (Lit |ks#0@@4|)) (let ((|m'#1| (|Map#Glue| (|lambda#54| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@22|) (Lit |ks#0@@4|)) (|lambda#55| (|Map#Elements| (Lit |m#0@@22|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |2736| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@217) (Lit |m#0@@22|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@435 T@U) (arg1@@213 T@U) (arg2@@148 T@U) (arg3@@113 T@U) (arg4@@96 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@435 arg1@@213 arg2@@148 arg3@@113 arg4@@96)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@435 arg1@@213 arg2@@148 arg3@@113 arg4@@96)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@218 T@U) (|m#0@@23| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@218) LayerTypeType)) (= (type |m#0@@23|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@218) |m#0@@23| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@218 |m#0@@23| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |2737| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@218) |m#0@@23| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@219 T@U) (|m#0@@24| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@219) LayerTypeType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@219 |m#0@@24| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@24| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |2738| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@219) |m#0@@24| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@220 T@U) (|m#0@@25| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@220) LayerTypeType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@25| |ks#0@@7|) (and ($Is |m#0@@25| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@220 |m#0@@25| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@25|) |ks#0@@7|)) (forall ((|j#0@@14| T@U) ) (!  (=> (and (and (= (type |j#0@@14|) BoxType) ($IsBox |j#0@@14| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@220 |m#0@@25| |ks#0@@7|)) |j#0@@14|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@220 |m#0@@25| |ks#0@@7|)) |j#0@@14|) (MapType0Select (|Map#Elements| |m#0@@25|) |j#0@@14|))) :qid |Mapssdfy.50:20| :skolemid |2739| :pattern ( (MapType0Select (|Map#Elements| |m#0@@25|) |j#0@@14|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@220 |m#0@@25| |ks#0@@7|)) |j#0@@14|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@220 |m#0@@25| |ks#0@@7|)) |j#0@@14|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@220 |m#0@@25| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@25|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@220 |m#0@@25| |ks#0@@7|)) (|Map#Card| |m#0@@25|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@220 |m#0@@25| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |2740| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@220 |m#0@@25| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@221 T@U) (|m#0@@26| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@221) LayerTypeType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@26| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (and (=> (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@221 |m#0@@26| |ks#0@@8|) true) (=> true (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@221 |m#0@@26| |ks#0@@8|)))) :qid |unknown.0:0| :skolemid |2741| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@221 |m#0@@26| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@222 T@U) (|m#0@@27| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@222) LayerTypeType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and ($Is |m#0@@27| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@222) |m#0@@27| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@27| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |2742| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@222) |m#0@@27| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@223 T@U) (|m#0@@28| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@223) LayerTypeType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and ($Is |m#0@@28| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@223) (Lit |m#0@@28|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@28|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2743| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@223) (Lit |m#0@@28|) (Lit |ks#0@@10|))) ))))
(assert (forall ((arg0@@436 T@U) (arg1@@214 T@U) (arg2@@149 T@U) (arg3@@114 T@U) (arg4@@97 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@436 arg1@@214 arg2@@149 arg3@@114 arg4@@97)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@436 arg1@@214 arg2@@149 arg3@@114 arg4@@97)) )))
(assert (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) ($ly@@224 T@U) (|m#0@@29| T@U) (|k#0@@61| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type $ly@@224) LayerTypeType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |k#0@@61|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@224) |m#0@@29| |k#0@@61|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V $ly@@224 |m#0@@29| |k#0@@61|))) :qid |unknown.0:0| :skolemid |2744| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@224) |m#0@@29| |k#0@@61|)) )))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) ($ly@@225 T@U) (|m#0@@30| T@U) (|k#0@@62| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type $ly@@225) LayerTypeType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |k#0@@62|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $ly@@225 |m#0@@30| |k#0@@62|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $LZ |m#0@@30| |k#0@@62|))) :qid |unknown.0:0| :skolemid |2745| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 (AsFuelBottom $ly@@225) |m#0@@30| |k#0@@62|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) ($ly@@226 T@U) (|m#0@@31| T@U) (|k#0@@63| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type $ly@@226) LayerTypeType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |k#0@@63|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@31| |k#0@@63|) (and ($Is |m#0@@31| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@63| Maps._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@15| T@U) ) (!  (=> (and (and (= (type |j#0@@15|) BoxType) ($IsBox |j#0@@15| Maps._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#0@@15|)) (not (= |j#0@@15| |k#0@@63|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) |j#0@@15|))) :qid |Mapssdfy.59:20| :skolemid |2746| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) |j#0@@15|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#0@@15|)) )) (forall ((|j#1@@8| T@U) ) (!  (=> (and (= (type |j#1@@8|) BoxType) ($IsBox |j#1@@8| Maps._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) |j#1@@8|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#1@@8|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) |j#1@@8|)) (not (= |j#1@@8| |k#0@@63|))))) :qid |Mapssdfy.60:20| :skolemid |2747| :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#1@@8|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) |j#1@@8|)) ))) (forall ((|j#2@@1| T@U) ) (!  (=> (and (and (= (type |j#2@@1|) BoxType) ($IsBox |j#2@@1| Maps._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) |j#2@@1|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) |j#2@@1|) (MapType0Select (|Map#Elements| |m#0@@31|) |j#2@@1|))) :qid |Mapssdfy.61:20| :skolemid |2748| :pattern ( (MapType0Select (|Map#Elements| |m#0@@31|) |j#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) |j#2@@1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) |j#2@@1|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|))) (|Set#Card| (|Map#Domain| |m#0@@31|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@63|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) (- (|Map#Card| |m#0@@31|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@63|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) (|Map#Card| |m#0@@31|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|) (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2749| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@226 |m#0@@31| |k#0@@63|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) ($ly@@227 T@U) (|m#0@@32| T@U) (|k#0@@64| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type $ly@@227) LayerTypeType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |k#0@@64|) BoxType)) (and ($Is |m#0@@32| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@64| Maps._default.MapRemove1$K@@2))) (and (=> (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@227 |m#0@@32| |k#0@@64|) true) (=> true (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@227 |m#0@@32| |k#0@@64|)))) :qid |unknown.0:0| :skolemid |2750| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@227 |m#0@@32| |k#0@@64|)) )))
(assert (forall ((arg0@@437 T@U) (arg1@@215 T@U) (arg2@@150 T@U) ) (! (= (type (|lambda#58| arg0@@437 arg1@@215 arg2@@150)) (MapType0Type BoxType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@437 arg1@@215 arg2@@150)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) ($ly@@228 T@U) (|m#0@@33| T@U) (|k#0@@65| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type $ly@@228) LayerTypeType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |k#0@@65|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 |m#0@@33| |k#0@@65|) (and ($Is |m#0@@33| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@65| Maps._default.MapRemove1$K@@3)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@228) |m#0@@33| |k#0@@65|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#58| Maps._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@33|) |k#0@@65|) (|lambda#55| (|Map#Elements| |m#0@@33|)) (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)))) |m'#0@@9|))) :qid |unknown.0:0| :skolemid |2751| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@228) |m#0@@33| |k#0@@65|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@4 T@U) (Maps._default.MapRemove1$V@@4 T@U) ($ly@@229 T@U) (|m#0@@34| T@U) (|k#0@@66| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@4) TyType) (= (type Maps._default.MapRemove1$V@@4) TyType)) (= (type $ly@@229) LayerTypeType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |k#0@@66|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 (Lit |m#0@@34|) |k#0@@66|) (and ($Is |m#0@@34| (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)) ($IsBox |k#0@@66| Maps._default.MapRemove1$K@@4)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@229) (Lit |m#0@@34|) |k#0@@66|) (let ((|m'#1@@0| (|Map#Glue| (|lambda#58| Maps._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@34|) |k#0@@66|) (|lambda#55| (|Map#Elements| (Lit |m#0@@34|))) (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)))) |m'#1@@0|))) :qid |unknown.0:0| :weight 3 :skolemid |2752| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@229) (Lit |m#0@@34|) |k#0@@66|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@5 T@U) (Maps._default.MapRemove1$V@@5 T@U) ($ly@@230 T@U) (|m#0@@35| T@U) (|k#0@@67| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@5) TyType) (= (type Maps._default.MapRemove1$V@@5) TyType)) (= (type $ly@@230) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |k#0@@67|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 (Lit |m#0@@35|) (Lit |k#0@@67|)) (and ($Is |m#0@@35| (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)) ($IsBox |k#0@@67| Maps._default.MapRemove1$K@@5)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@230) (Lit |m#0@@35|) (Lit |k#0@@67|)) (let ((|m'#2| (|Map#Glue| (|lambda#58| Maps._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@35|) |k#0@@67|) (|lambda#55| (|Map#Elements| (Lit |m#0@@35|))) (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |2753| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@230) (Lit |m#0@@35|) (Lit |k#0@@67|))) ))))
(assert (forall ((arg0@@438 T@U) (arg1@@216 T@U) (arg2@@151 T@U) (arg3@@115 T@U) (arg4@@98 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@438 arg1@@216 arg2@@151 arg3@@115 arg4@@98)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@438 arg1@@216 arg2@@151 arg3@@115 arg4@@98)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@231 T@U) (|m#0@@36| T@U) (|k#0@@68| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@231) LayerTypeType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |k#0@@68|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@231) |m#0@@36| |k#0@@68|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@231 |m#0@@36| |k#0@@68|))) :qid |unknown.0:0| :skolemid |2754| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@231) |m#0@@36| |k#0@@68|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@232 T@U) (|m#0@@37| T@U) (|k#0@@69| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@232) LayerTypeType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |k#0@@69|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@232 |m#0@@37| |k#0@@69|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@37| |k#0@@69|))) :qid |unknown.0:0| :skolemid |2755| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@232) |m#0@@37| |k#0@@69|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@233 T@U) (|m#0@@38| T@U) (|k#0@@70| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@233) LayerTypeType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |k#0@@70|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@38| |k#0@@70|) (and ($Is |m#0@@38| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@70| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@233 |m#0@@38| |k#0@@70|)) (|Set#Difference| (|Map#Domain| |m#0@@38|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@70|))) (forall ((|j#0@@16| T@U) ) (!  (=> (and (and (= (type |j#0@@16|) BoxType) ($IsBox |j#0@@16| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@233 |m#0@@38| |k#0@@70|)) |j#0@@16|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@233 |m#0@@38| |k#0@@70|)) |j#0@@16|) (MapType0Select (|Map#Elements| |m#0@@38|) |j#0@@16|))) :qid |Mapssdfy.76:20| :skolemid |2756| :pattern ( (MapType0Select (|Map#Elements| |m#0@@38|) |j#0@@16|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@233 |m#0@@38| |k#0@@70|)) |j#0@@16|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@233 |m#0@@38| |k#0@@70|)) |j#0@@16|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@233 |m#0@@38| |k#0@@70|))) (|Set#Card| (|Map#Domain| |m#0@@38|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@233 |m#0@@38| |k#0@@70|)) (|Map#Card| |m#0@@38|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@233 |m#0@@38| |k#0@@70|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |2757| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@233 |m#0@@38| |k#0@@70|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@234 T@U) (|m#0@@39| T@U) (|k#0@@71| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |k#0@@71|) BoxType)) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@71| Maps._default.MapRemove1Strong$K@@2))) (and (=> (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@234 |m#0@@39| |k#0@@71|) true) (=> true (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@234 |m#0@@39| |k#0@@71|)))) :qid |unknown.0:0| :skolemid |2758| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@234 |m#0@@39| |k#0@@71|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove1) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove10) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@235 T@U) (|m#0@@40| T@U) (|k#0@@72| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@235) LayerTypeType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |k#0@@72|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@72|) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@72| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@72|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove10)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove10) MoreFuel_Maps._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@235) |m#0@@40| |k#0@@72|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 StartFuel_Maps._default.MapRemove1 |m#0@@40| |k#0@@72|))))) :qid |unknown.0:0| :skolemid |2759| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@235) |m#0@@40| |k#0@@72|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@236 T@U) (|m#0@@41| T@U) (|k#0@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |k#0@@73|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@73|) (and ($Is |m#0@@41| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@73| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@73|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove11)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove11) MoreFuel_Maps._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@236) (Lit |m#0@@41|) |k#0@@73|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@41|) |k#0@@73|))))) :qid |unknown.0:0| :weight 3 :skolemid |2760| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@236) (Lit |m#0@@41|) |k#0@@73|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@237 T@U) (|m#0@@42| T@U) (|k#0@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |k#0@@74|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@74|)) (and ($Is |m#0@@42| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@74| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@74|)) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove12)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove12) MoreFuel_Maps._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@237) (Lit |m#0@@42|) (Lit |k#0@@74|)) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@42|) (Lit |k#0@@74|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2761| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@237) (Lit |m#0@@42|) (Lit |k#0@@74|))) ))))
(assert (forall ((arg0@@439 T@U) (arg1@@217 T@U) (arg2@@152 T@U) (arg3@@116 T@U) (arg4@@99 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@439 arg1@@217 arg2@@152 arg3@@116 arg4@@99)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@439 arg1@@217 arg2@@152 arg3@@116 arg4@@99)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@238 T@U) (|m#0@@43| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |m#0@@43|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@238) |m#0@@43| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@238 |m#0@@43| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |2762| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@238) |m#0@@43| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@239 T@U) (|m#0@@44| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |m#0@@44|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@239 |m#0@@44| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@44| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |2763| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@239) |m#0@@44| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@240 T@U) (|m#0@@45| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@240) LayerTypeType)) (= (type |m#0@@45|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@45| |ks#0@@13|) (and ($Is |m#0@@45| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@240 |m#0@@45| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@45|) |ks#0@@13|)) (forall ((|j#0@@17| T@U) ) (!  (=> (and (and (= (type |j#0@@17|) BoxType) ($IsBox |j#0@@17| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@240 |m#0@@45| |ks#0@@13|)) |j#0@@17|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@240 |m#0@@45| |ks#0@@13|)) |j#0@@17|) (MapType0Select (|IMap#Elements| |m#0@@45|) |j#0@@17|))) :qid |Mapssdfy.86:20| :skolemid |2764| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@45|) |j#0@@17|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@240 |m#0@@45| |ks#0@@13|)) |j#0@@17|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@240 |m#0@@45| |ks#0@@13|)) |j#0@@17|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@240 |m#0@@45| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2765| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@240 |m#0@@45| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@241 T@U) (|m#0@@46| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@241) LayerTypeType)) (= (type |m#0@@46|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@46| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (and (=> (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@241 |m#0@@46| |ks#0@@14|) true) (=> true (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@241 |m#0@@46| |ks#0@@14|)))) :qid |unknown.0:0| :skolemid |2766| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@241 |m#0@@46| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@242 T@U) (|m#0@@47| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@242) LayerTypeType)) (= (type |m#0@@47|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@47| |ks#0@@15|) (and ($Is |m#0@@47| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@242) |m#0@@47| |ks#0@@15|) (|IMap#Glue| (|lambda#54| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@47|) |ks#0@@15|) (|lambda#55| (|IMap#Elements| |m#0@@47|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |2767| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@242) |m#0@@47| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@243 T@U) (|m#0@@48| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@243) LayerTypeType)) (= (type |m#0@@48|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@48|) (Lit |ks#0@@16|)) (and ($Is |m#0@@48| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@243) (Lit |m#0@@48|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#54| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@48|) (Lit |ks#0@@16|)) (|lambda#55| (|IMap#Elements| (Lit |m#0@@48|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2768| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@243) (Lit |m#0@@48|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@440 T@U) (arg1@@218 T@U) (arg2@@153 T@U) (arg3@@117 T@U) (arg4@@100 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@440 arg1@@218 arg2@@153 arg3@@117 arg4@@100)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@440 arg1@@218 arg2@@153 arg3@@117 arg4@@100)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@244 T@U) (|m#0@@49| T@U) (|k#0@@75| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@244) LayerTypeType)) (= (type |m#0@@49|) (IMapType BoxType BoxType))) (= (type |k#0@@75|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@244) |m#0@@49| |k#0@@75|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@244 |m#0@@49| |k#0@@75|))) :qid |unknown.0:0| :skolemid |2769| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@244) |m#0@@49| |k#0@@75|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@245 T@U) (|m#0@@50| T@U) (|k#0@@76| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@245) LayerTypeType)) (= (type |m#0@@50|) (IMapType BoxType BoxType))) (= (type |k#0@@76|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@245 |m#0@@50| |k#0@@76|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@50| |k#0@@76|))) :qid |unknown.0:0| :skolemid |2770| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@245) |m#0@@50| |k#0@@76|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@246 T@U) (|m#0@@51| T@U) (|k#0@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@246) LayerTypeType)) (= (type |m#0@@51|) (IMapType BoxType BoxType))) (= (type |k#0@@77|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@51| |k#0@@77|) (and ($Is |m#0@@51| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@77| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@246 |m#0@@51| |k#0@@77|)) (|ISet#Difference| (|IMap#Domain| |m#0@@51|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@77|))) (forall ((|j#0@@18| T@U) ) (!  (=> (and (and (= (type |j#0@@18|) BoxType) ($IsBox |j#0@@18| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@246 |m#0@@51| |k#0@@77|)) |j#0@@18|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@246 |m#0@@51| |k#0@@77|)) |j#0@@18|) (MapType0Select (|IMap#Elements| |m#0@@51|) |j#0@@18|))) :qid |Mapssdfy.93:20| :skolemid |2771| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@51|) |j#0@@18|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@246 |m#0@@51| |k#0@@77|)) |j#0@@18|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@246 |m#0@@51| |k#0@@77|)) |j#0@@18|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@246 |m#0@@51| |k#0@@77|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2772| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@246 |m#0@@51| |k#0@@77|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@247 T@U) (|m#0@@52| T@U) (|k#0@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@247) LayerTypeType)) (= (type |m#0@@52|) (IMapType BoxType BoxType))) (= (type |k#0@@78|) BoxType)) (and ($Is |m#0@@52| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@78| Maps._default.IMapRemove1$K@@2))) (and (=> (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@247 |m#0@@52| |k#0@@78|) true) (=> true (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@247 |m#0@@52| |k#0@@78|)))) :qid |unknown.0:0| :skolemid |2773| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@247 |m#0@@52| |k#0@@78|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@248 T@U) (|m#0@@53| T@U) (|k#0@@79| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@248) LayerTypeType)) (= (type |m#0@@53|) (IMapType BoxType BoxType))) (= (type |k#0@@79|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@53| |k#0@@79|) (and ($Is |m#0@@53| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@79| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@248) |m#0@@53| |k#0@@79|) (|IMap#Glue| (|lambda#58| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@53|) |k#0@@79|) (|lambda#55| (|IMap#Elements| |m#0@@53|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |2774| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@248) |m#0@@53| |k#0@@79|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@249 T@U) (|m#0@@54| T@U) (|k#0@@80| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@249) LayerTypeType)) (= (type |m#0@@54|) (IMapType BoxType BoxType))) (= (type |k#0@@80|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@54|) (Lit |k#0@@80|)) (and ($Is |m#0@@54| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@80| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@249) (Lit |m#0@@54|) (Lit |k#0@@80|)) (|IMap#Glue| (|lambda#58| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@54|) |k#0@@80|) (|lambda#55| (|IMap#Elements| (Lit |m#0@@54|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2775| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@249) (Lit |m#0@@54|) (Lit |k#0@@80|))) ))))
(assert (forall ((arg0@@441 T@U) (arg1@@219 T@U) (arg2@@154 T@U) (arg3@@118 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@441 arg1@@219 arg2@@154 arg3@@118)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@441 arg1@@219 arg2@@154 arg3@@118)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@55| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@55|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (and ($Is |m#0@@55| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |2776| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@56| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@56|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@56| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (and (=> (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|) true) (=> true (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)))) :qid |unknown.0:0| :skolemid |2777| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)) )))
(assert (forall ((arg0@@442 T@U) (arg1@@220 T@U) (arg2@@155 T@U) ) (! (= (type (|lambda#72| arg0@@442 arg1@@220 arg2@@155)) (MapType0Type BoxType boolType)) :qid |funType:lambda#72| :pattern ( (|lambda#72| arg0@@442 arg1@@220 arg2@@155)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@57| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@57|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (and ($Is |m#0@@57| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (|Map#Glue| (|lambda#72| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@57|)) (|lambda#55| (|Map#Elements| |m#0@@57|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2778| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@58| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@58|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (and ($Is |m#0@@58| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#72| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@58|)) (|lambda#55| (|Map#Elements| (Lit |m#0@@58|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2779| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@443 T@U) (arg1@@221 T@U) (arg2@@156 T@U) (arg3@@119 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@443 arg1@@221 arg2@@156 arg3@@119)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@443 arg1@@221 arg2@@156 arg3@@119)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@59| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@59|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (and ($Is |m#0@@59| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |2780| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@60| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@60| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (and (=> (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|) true) (=> true (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)))) :qid |unknown.0:0| :skolemid |2781| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@61| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (and ($Is |m#0@@61| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (|Map#Glue| (|lambda#72| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@61|) |ks#0@@23|) (|lambda#55| (|Map#Elements| |m#0@@61|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2782| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@62| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (and ($Is |m#0@@62| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (|Map#Glue| (|lambda#72| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@62|) |ks#0@@24|) (|lambda#55| (|Map#Elements| (Lit |m#0@@62|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2783| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@63| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@63|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (and ($Is |m#0@@63| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#72| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@63|) (Lit |ks#0@@25|)) (|lambda#55| (|Map#Elements| (Lit |m#0@@63|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |2784| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@444 T@U) (arg1@@222 T@U) (arg2@@157 T@U) (arg3@@120 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@444 arg1@@222 arg2@@157 arg3@@120)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@444 arg1@@222 arg2@@157 arg3@@120)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@64| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@64|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (and ($Is |m#0@@64| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |2785| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@65| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@65|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@65| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (and (=> (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|) true) (=> true (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)))) :qid |unknown.0:0| :skolemid |2786| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@66| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@66|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (and ($Is |m#0@@66| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (|IMap#Glue| (|lambda#72| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@66|)) (|lambda#55| (|IMap#Elements| |m#0@@66|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2787| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@67| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@67|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (and ($Is |m#0@@67| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#72| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@67|)) (|lambda#55| (|IMap#Elements| (Lit |m#0@@67|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2788| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@445 T@U) (arg1@@223 T@U) (arg2@@158 T@U) (arg3@@121 T@U) (arg4@@101 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@445 arg1@@223 arg2@@158 arg3@@121 arg4@@101)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@445 arg1@@223 arg2@@158 arg3@@121 arg4@@101)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@250 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@250) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@250) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@250 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |2789| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@250) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@251 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@251) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@251 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |2790| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@251) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@252 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@252) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@252 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@81| T@U) ) (!  (=> (and (and (= (type |k#0@@81|) BoxType) ($IsBox |k#0@@81| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@81|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@81|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@252 |mapa#0@@1| |mapb#0@@1|)) |k#0@@81|))) :qid |Mapssdfy.114:18| :skolemid |2791| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@252 |mapa#0@@1| |mapb#0@@1|)) |k#0@@81|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@81|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@81|)) ))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@3|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@3|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@252 |mapa#0@@1| |mapb#0@@1|)) |k#1@@3|))) :qid |Mapssdfy.115:18| :skolemid |2792| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@252 |mapa#0@@1| |mapb#0@@1|)) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@3|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@252 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2793| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@252 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@253 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@253) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@253 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)) (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@253 |mapa#0@@2| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |2794| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@253 |mapa#0@@2| |mapb#0@@2|)) )))
(assert  (and (forall ((arg0@@446 T@U) (arg1@@224 T@U) (arg2@@159 T@U) ) (! (= (type (|lambda#86| arg0@@446 arg1@@224 arg2@@159)) (MapType0Type BoxType boolType)) :qid |funType:lambda#86| :pattern ( (|lambda#86| arg0@@446 arg1@@224 arg2@@159)) )) (forall ((arg0@@447 T@U) (arg1@@225 T@U) (arg2@@160 T@U) ) (! (= (type (|lambda#87| arg0@@447 arg1@@225 arg2@@160)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#87| :pattern ( (|lambda#87| arg0@@447 arg1@@225 arg2@@160)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@254 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@254) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@254) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#86| Maps._default.MapDisjointUnion$U@@3 (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|)) (|lambda#87| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |2795| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@254) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@255 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@255) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@255) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#86| Maps._default.MapDisjointUnion$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@4|))) (Lit (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#87| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2796| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@255) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@448 T@U) (arg1@@226 T@U) (arg2@@161 T@U) (arg3@@122 T@U) (arg4@@102 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@448 arg1@@226 arg2@@161 arg3@@122 arg4@@102)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@448 arg1@@226 arg2@@161 arg3@@122 arg4@@102)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@256 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@256) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@256) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@256 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |2797| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@256) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@257 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@257) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@257 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |2798| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@257) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@258 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@258) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@258 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@82| T@U) ) (!  (=> (and (and (= (type |k#0@@82|) BoxType) ($IsBox |k#0@@82| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@82|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@258 |mapa#0@@7| |mapb#0@@7|)) |k#0@@82|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@82|))) :qid |Mapssdfy.124:20| :skolemid |2799| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@82|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@258 |mapa#0@@7| |mapb#0@@7|)) |k#0@@82|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@82|)) ))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#1@@4|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#1@@4|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@258 |mapa#0@@7| |mapb#0@@7|)) |k#1@@4|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@4|))) :qid |Mapssdfy.125:20| :skolemid |2800| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@4|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@258 |mapa#0@@7| |mapb#0@@7|)) |k#1@@4|)) ))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@258 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))) :qid |Mapssdfy.126:20| :skolemid |2801| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@258 |mapa#0@@7| |mapb#0@@7|)) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@258 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2802| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@258 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@259 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@259) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@259 |mapa#0@@8| |mapb#0@@8|) true) (=> true (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@259 |mapa#0@@8| |mapb#0@@8|)))) :qid |unknown.0:0| :skolemid |2803| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@259 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@260 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@260) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@260) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#86| Maps._default.MapUnionPreferA$U@@3 (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|)) (|lambda#87| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2804| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@260) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@261 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@261) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@261) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#86| Maps._default.MapUnionPreferA$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@10|))) (Lit (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#87| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2805| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@261) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@449 T@U) (arg1@@227 T@U) (arg2@@162 T@U) (arg3@@123 T@U) (arg4@@103 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@449 arg1@@227 arg2@@162 arg3@@123 arg4@@103)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@449 arg1@@227 arg2@@162 arg3@@123 arg4@@103)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@262 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@262) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@262) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@262 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |2806| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@262) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@263 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@263) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@263 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |2807| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@263) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@264 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@264) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@264 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@83| T@U) ) (!  (=> (and (and (= (type |k#0@@83|) BoxType) ($IsBox |k#0@@83| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@83|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@264 |mapa#0@@13| |mapb#0@@13|)) |k#0@@83|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@83|))) :qid |Mapssdfy.133:20| :skolemid |2808| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@83|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@264 |mapa#0@@13| |mapb#0@@13|)) |k#0@@83|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@83|)) ))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#1@@5|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#1@@5|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@264 |mapa#0@@13| |mapb#0@@13|)) |k#1@@5|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@5|))) :qid |Mapssdfy.134:20| :skolemid |2809| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@5|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@264 |mapa#0@@13| |mapb#0@@13|)) |k#1@@5|)) ))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@264 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))) :qid |Mapssdfy.135:20| :skolemid |2810| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@264 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@264 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2811| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@264 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@265 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@265) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@265 |mapa#0@@14| |mapb#0@@14|) true) (=> true (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@265 |mapa#0@@14| |mapb#0@@14|)))) :qid |unknown.0:0| :skolemid |2812| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@265 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@266 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@266) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@266) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#86| Maps._default.MapUnionPreferB$U@@3 (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|)) (|lambda#87| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2813| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@266) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@267 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@267) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@267) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#86| Maps._default.MapUnionPreferB$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@16|))) (Lit (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#87| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2814| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@267) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@450 T@U) (arg1@@228 T@U) (arg2@@163 T@U) (arg3@@124 T@U) (arg4@@104 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@450 arg1@@228 arg2@@163 arg3@@124 arg4@@104)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@450 arg1@@228 arg2@@163 arg3@@124 arg4@@104)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@268 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@268) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@268) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@268 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |2815| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@268) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@269 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@269) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@269 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |2816| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@269) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@270 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@270) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@84| T@U) ) (!  (=> (and (and (= (type |k#0@@84|) BoxType) ($IsBox |k#0@@84| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#0@@84|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#0@@84|))))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@84|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|)) |k#0@@84|))) :qid |Mapssdfy.144:18| :skolemid |2817| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|)) |k#0@@84|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@84|)) ))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#1@@6|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#1@@6|))))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@6|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|)) |k#1@@6|))) :qid |Mapssdfy.145:18| :skolemid |2818| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|)) |k#1@@6|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@6|)) ))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#2@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#2@@1|)))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)))) :qid |Mapssdfy.146:18| :skolemid |2819| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2820| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@270 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@271 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@271) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (and (=> (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@271 |mapa#0@@20| |mapb#0@@20|) true) (=> true (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@271 |mapa#0@@20| |mapb#0@@20|)))) :qid |unknown.0:0| :skolemid |2821| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@271 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@272 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@272) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@272) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |2822| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@272) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@273 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@273) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@273) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |2823| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@273) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@451 T@U) (arg1@@229 T@U) (arg2@@164 T@U) (arg3@@125 T@U) (arg4@@105 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@451 arg1@@229 arg2@@164 arg3@@125 arg4@@105)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@451 arg1@@229 arg2@@164 arg3@@125 arg4@@105)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@274 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@274) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@274) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@274 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |2824| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@274) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@275 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@275) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@275 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |2825| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@275) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@276 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@276) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@276 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@85| T@U) ) (!  (=> (and (and (= (type |k#0@@85|) BoxType) ($IsBox |k#0@@85| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@85|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@276 |mapa#0@@25| |mapb#0@@25|)) |k#0@@85|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@85|))) :qid |Mapssdfy.153:20| :skolemid |2826| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@85|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@276 |mapa#0@@25| |mapb#0@@25|)) |k#0@@85|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@85|)) ))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#1@@7|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#1@@7|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@276 |mapa#0@@25| |mapb#0@@25|)) |k#1@@7|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@7|))) :qid |Mapssdfy.154:20| :skolemid |2827| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@7|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@276 |mapa#0@@25| |mapb#0@@25|)) |k#1@@7|)) ))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@276 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))) :qid |Mapssdfy.155:20| :skolemid |2828| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@276 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@276 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2829| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@276 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@277 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@277 |mapa#0@@26| |mapb#0@@26|) true) (=> true (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@277 |mapa#0@@26| |mapb#0@@26|)))) :qid |unknown.0:0| :skolemid |2830| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@277 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@278 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@278) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@278) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#86| Maps._default.IMapUnionPreferA$U@@3 (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|)) (|lambda#87| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2831| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@278) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@279 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@279) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@279) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#86| Maps._default.IMapUnionPreferA$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@28|))) (Lit (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#87| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2832| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@279) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@452 T@U) (arg1@@230 T@U) (arg2@@165 T@U) (arg3@@126 T@U) (arg4@@106 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@452 arg1@@230 arg2@@165 arg3@@126 arg4@@106)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@452 arg1@@230 arg2@@165 arg3@@126 arg4@@106)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@280 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@280) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@280) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@280 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |2833| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@280) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@281 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@281) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@281 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |2834| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@281) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@282 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@282) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@282 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@86| T@U) ) (!  (=> (and (and (= (type |k#0@@86|) BoxType) ($IsBox |k#0@@86| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@86|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@282 |mapa#0@@31| |mapb#0@@31|)) |k#0@@86|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@86|))) :qid |Mapssdfy.162:20| :skolemid |2835| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@86|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@282 |mapa#0@@31| |mapb#0@@31|)) |k#0@@86|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@86|)) ))) (forall ((|k#1@@8| T@U) ) (!  (=> (and (and (= (type |k#1@@8|) BoxType) ($IsBox |k#1@@8| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#1@@8|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#1@@8|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@282 |mapa#0@@31| |mapb#0@@31|)) |k#1@@8|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@8|))) :qid |Mapssdfy.163:20| :skolemid |2836| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@8|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@282 |mapa#0@@31| |mapb#0@@31|)) |k#1@@8|)) ))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@282 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))) :qid |Mapssdfy.164:20| :skolemid |2837| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@282 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@282 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2838| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@282 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@283 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@283) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@283 |mapa#0@@32| |mapb#0@@32|) true) (=> true (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@283 |mapa#0@@32| |mapb#0@@32|)))) :qid |unknown.0:0| :skolemid |2839| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@283 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@284 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@284) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@284) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#86| Maps._default.IMapUnionPreferB$U@@3 (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|)) (|lambda#87| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2840| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@284) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@285 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@285) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@285) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#86| Maps._default.IMapUnionPreferB$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@34|))) (Lit (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#87| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2841| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@285) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@453 T@U) (arg1@@231 T@U) (arg2@@166 T@U) (arg3@@127 T@U) (arg4@@107 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@453 arg1@@231 arg2@@166 arg3@@127 arg4@@107)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@453 arg1@@231 arg2@@166 arg3@@127 arg4@@107)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@286 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@286) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@286) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@286 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |2842| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@286) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@287 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@287) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@287 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |2843| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@287) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@288 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@288) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@87| T@U) ) (!  (=> (and (and (= (type |k#0@@87|) BoxType) ($IsBox |k#0@@87| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#0@@87|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#0@@87|))))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@87|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|)) |k#0@@87|))) :qid |Mapssdfy.173:18| :skolemid |2844| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|)) |k#0@@87|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@87|)) ))) (forall ((|k#1@@9| T@U) ) (!  (=> (and (and (= (type |k#1@@9|) BoxType) ($IsBox |k#1@@9| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#1@@9|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#1@@9|))))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@9|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|)) |k#1@@9|))) :qid |Mapssdfy.174:18| :skolemid |2845| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|)) |k#1@@9|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@9|)) ))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#2@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#2@@4|)))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)))) :qid |Mapssdfy.175:18| :skolemid |2846| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2847| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@288 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@289 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@289) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (and (=> (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@289 |mapa#0@@38| |mapb#0@@38|) true) (=> true (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@289 |mapa#0@@38| |mapb#0@@38|)))) :qid |unknown.0:0| :skolemid |2848| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@289 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@290 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@290) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@290) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |2849| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@290) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@291 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@291) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@291) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |2850| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@291) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@454 T@U) (arg1@@232 T@U) (arg2@@167 T@U) (arg3@@128 T@U) (arg4@@108 T@U) (arg5@@71 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@454 arg1@@232 arg2@@167 arg3@@128 arg4@@108 arg5@@71)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@454 arg1@@232 arg2@@167 arg3@@128 arg4@@108 arg5@@71)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@292 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@292) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@292) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@292 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |2851| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@292) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@293 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@293) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@293 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |2852| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@293) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@294 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@294) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@88| T@U) ) (!  (=> (and (and (= (type |k#0@@88|) BoxType) ($IsBox |k#0@@88| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@88|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@88|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@88|))) :qid |Mapssdfy.185:18| :skolemid |2853| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@88|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@88|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@88|)) ))) (forall ((|k#1@@10| T@U) ) (!  (=> (and (and (= (type |k#1@@10|) BoxType) ($IsBox |k#1@@10| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@10|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@10|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@10|))) :qid |Mapssdfy.186:18| :skolemid |2854| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@10|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@10|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@10|)) ))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))) :qid |Mapssdfy.187:18| :skolemid |2855| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |2856| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@294 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@295 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@295) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@295 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|)))) (=> (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))) (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@295 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)))) :qid |unknown.0:0| :skolemid |2857| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@295 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert  (and (forall ((arg0@@455 T@U) (arg1@@233 T@U) (arg2@@168 T@U) (arg3@@129 T@U) ) (! (= (type (|lambda#106| arg0@@455 arg1@@233 arg2@@168 arg3@@129)) (MapType0Type BoxType boolType)) :qid |funType:lambda#106| :pattern ( (|lambda#106| arg0@@455 arg1@@233 arg2@@168 arg3@@129)) )) (forall ((arg0@@456 T@U) (arg1@@234 T@U) (arg2@@169 T@U) (arg3@@130 T@U) (arg4@@109 T@U) ) (! (= (type (|lambda#107| arg0@@456 arg1@@234 arg2@@169 arg3@@130 arg4@@109)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#107| :pattern ( (|lambda#107| arg0@@456 arg1@@234 arg2@@169 arg3@@130 arg4@@109)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@296 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@296) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@296) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#106| Maps._default.MapDisjointUnion3$U@@3 (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Domain| |mapc#0@@3|)) (|lambda#107| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |2858| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@296) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@297 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@297) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@297) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#106| Maps._default.MapDisjointUnion3$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@46|))) (Lit (|Map#Domain| (Lit |mapb#0@@46|))) (Lit (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#107| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2859| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@297) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@457 T@U) (arg1@@235 T@U) (arg2@@170 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@457 arg1@@235 arg2@@170)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@457 arg1@@235 arg2@@170)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@68| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@68|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) ($Is |m#0@@68| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |2860| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@69| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@69|) (MapType BoxType BoxType))) ($Is |m#0@@69| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (and (=> (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|) true) (=> true (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)))) :qid |unknown.0:0| :skolemid |2861| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)) )))
(assert (forall ((arg0@@458 T@U) (arg1@@236 T@U) ) (! (= (type (|lambda#110| arg0@@458 arg1@@236)) (MapType0Type BoxType boolType)) :qid |funType:lambda#110| :pattern ( (|lambda#110| arg0@@458 arg1@@236)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@70| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@70|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) ($Is |m#0@@70| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) (|IMap#Glue| (|lambda#110| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@70|)) (|lambda#55| (|Map#Elements| |m#0@@70|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |2862| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@71| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@71|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) ($Is |m#0@@71| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) (|IMap#Glue| (|lambda#110| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@71|)) (|lambda#55| (|Map#Elements| (Lit |m#0@@71|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2863| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|))) ))))
(assert (forall ((arg0@@459 T@U) (arg1@@237 T@U) (arg2@@171 T@U) (arg3@@131 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@459 arg1@@237 arg2@@171 arg3@@131)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@459 arg1@@237 arg2@@171 arg3@@131)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@72| T@U) (|key#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@72|) (MapType BoxType BoxType))) (= (type |key#0@@31|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@31|) (and ($Is |m#0@@72| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@31| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@31|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |2864| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@31|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@73| T@U) (|key#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (= (type |key#0@@32|) BoxType)) (and ($Is |m#0@@73| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@32| Maps._default.MapLookupOption$K@@0))) (and (=> (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@32|) true) (=> true (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@32|)))) :qid |unknown.0:0| :skolemid |2865| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@74| T@U) (|key#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) (= (type |key#0@@33|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@33|) (and ($Is |m#0@@74| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@33| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@33|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@74|) |key#0@@33|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@74|) |key#0@@33|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2866| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@75| T@U) (|key#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (= (type |key#0@@34|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@34|) (and ($Is |m#0@@75| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@34| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@34|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@75|) |key#0@@34|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@75|)) |key#0@@34|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2867| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@34|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@76| T@U) (|key#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (= (type |key#0@@35|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@35|)) (and ($Is |m#0@@76| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@35| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@35|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@76|) |key#0@@35|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@76|)) (Lit |key#0@@35|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2868| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@35|))) ))))
(assert (forall ((arg0@@460 T@U) (arg1@@238 T@U) (arg2@@172 T@U) (arg3@@132 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@460 arg1@@238 arg2@@172 arg3@@132)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@460 arg1@@238 arg2@@172 arg3@@132)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@77| T@U) (|key#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@77|) (IMapType BoxType BoxType))) (= (type |key#0@@36|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@36|) (and ($Is |m#0@@77| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@36| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@36|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |2869| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@36|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@78| T@U) (|key#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@78|) (IMapType BoxType BoxType))) (= (type |key#0@@37|) BoxType)) (and ($Is |m#0@@78| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@37| Maps._default.ImapLookupOption$K@@0))) (and (=> (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@37|) true) (=> true (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@37|)))) :qid |unknown.0:0| :skolemid |2870| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@37|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@79| T@U) (|key#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@79|) (IMapType BoxType BoxType))) (= (type |key#0@@38|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@38|) (and ($Is |m#0@@79| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@38| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@38|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@79|) |key#0@@38|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@79|) |key#0@@38|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2871| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@38|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@80| T@U) (|key#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@80|) (IMapType BoxType BoxType))) (= (type |key#0@@39|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@39|)) (and ($Is |m#0@@80| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@39| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@39|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@80|) |key#0@@39|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@80|)) (Lit |key#0@@39|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2872| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@39|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (forall ((bx@@164 T@U) ) (!  (=> (and (= (type bx@@164) BoxType) ($IsBox bx@@164 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@164)) bx@@164) ($Is ($Unbox refType bx@@164) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |2873| :pattern ( ($IsBox bx@@164 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@40 T@U) ) (!  (=> (= (type $o@@40) refType) (and (=> ($Is $o@@40 Tclass.NativeArrays.__default) (or (= $o@@40 null) (= (dtype $o@@40) Tclass.NativeArrays.__default))) (=> (or (= $o@@40 null) (= (dtype $o@@40) Tclass.NativeArrays.__default)) ($Is $o@@40 Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |2874| :pattern ( ($Is $o@@40 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@41 T@U) ($h@@122 T@U) ) (!  (=> (and (= (type $o@@41) refType) (= (type $h@@122) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@41 Tclass.NativeArrays.__default $h@@122) (or (= $o@@41 null) (U_2_bool (MapType1Select (MapType0Select $h@@122 $o@@41) alloc)))) (=> (or (= $o@@41 null) (U_2_bool (MapType1Select (MapType0Select $h@@122 $o@@41) alloc))) ($IsAlloc $o@@41 Tclass.NativeArrays.__default $h@@122)))) :qid |unknown.0:0| :skolemid |2875| :pattern ( ($IsAlloc $o@@41 Tclass.NativeArrays.__default $h@@122)) )))
(assert (= (type Tclass.Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Byte__Order.__default) Tagclass.Byte__Order.__default))
(assert (forall ((bx@@165 T@U) ) (!  (=> (and (= (type bx@@165) BoxType) ($IsBox bx@@165 Tclass.Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@165)) bx@@165) ($Is ($Unbox refType bx@@165) Tclass.Byte__Order.__default))) :qid |unknown.0:0| :skolemid |2876| :pattern ( ($IsBox bx@@165 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@42 T@U) ) (!  (=> (= (type $o@@42) refType) (and (=> ($Is $o@@42 Tclass.Byte__Order.__default) (or (= $o@@42 null) (= (dtype $o@@42) Tclass.Byte__Order.__default))) (=> (or (= $o@@42 null) (= (dtype $o@@42) Tclass.Byte__Order.__default)) ($Is $o@@42 Tclass.Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |2877| :pattern ( ($Is $o@@42 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@43 T@U) ($h@@123 T@U) ) (!  (=> (and (= (type $o@@43) refType) (= (type $h@@123) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@43 Tclass.Byte__Order.__default $h@@123) (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@123 $o@@43) alloc)))) (=> (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@123 $o@@43) alloc))) ($IsAlloc $o@@43 Tclass.Byte__Order.__default $h@@123)))) :qid |unknown.0:0| :skolemid |2878| :pattern ( ($IsAlloc $o@@43 Tclass.Byte__Order.__default $h@@123)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Byte__Order.__default.SomeElement) (< Byte__Order.__default.SomeElement 256)))))
(assert  (=> |Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true |Byte__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert (forall (($ly@@298 T@U) (|a#0@@77| Int) (|b#0@@51| Int) ) (!  (=> (= (type $ly@@298) LayerTypeType) (and (=> (Byte__Order.__default.lte ($LS $ly@@298) |a#0@@77| |b#0@@51|) (Byte__Order.__default.lte $ly@@298 |a#0@@77| |b#0@@51|)) (=> (Byte__Order.__default.lte $ly@@298 |a#0@@77| |b#0@@51|) (Byte__Order.__default.lte ($LS $ly@@298) |a#0@@77| |b#0@@51|)))) :qid |totalord.926:30| :skolemid |2879| :pattern ( (Byte__Order.__default.lte ($LS $ly@@298) |a#0@@77| |b#0@@51|)) )))
(assert (forall (($ly@@299 T@U) (|a#0@@78| Int) (|b#0@@52| Int) ) (!  (=> (= (type $ly@@299) LayerTypeType) (and (=> (Byte__Order.__default.lte $ly@@299 |a#0@@78| |b#0@@52|) (Byte__Order.__default.lte $LZ |a#0@@78| |b#0@@52|)) (=> (Byte__Order.__default.lte $LZ |a#0@@78| |b#0@@52|) (Byte__Order.__default.lte $ly@@299 |a#0@@78| |b#0@@52|)))) :qid |totalord.926:30| :skolemid |2880| :pattern ( (Byte__Order.__default.lte (AsFuelBottom $ly@@299) |a#0@@78| |b#0@@52|)) )))
(assert (= (type StartFuel_Byte_Order._default.ltedef) LayerTypeType))
(assert  (=> true (forall (($ly@@300 T@U) (|a#0@@79| Int) (|b#0@@53| Int) ) (!  (=> (and (= (type $ly@@300) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@79| |b#0@@53|) (and (and (<= (LitInt 0) |a#0@@79|) (< |a#0@@79| 256)) (and (<= (LitInt 0) |b#0@@53|) (< |b#0@@53| 256))))) (and (and (and (and (and (and (and (=> (Byte__Order.__default.lte $ly@@300 |a#0@@79| |b#0@@53|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@79| |b#0@@53|)) (=> (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@79| |b#0@@53|) (Byte__Order.__default.lte $ly@@300 |a#0@@79| |b#0@@53|))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@79| |b#0@@53|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@53| |a#0@@79|))) (forall ((|a#1@@0| Int) (|b#1@@0| Int) (|c#0@@10| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#1@@0|) (< |a#1@@0| 256)) (and (<= (LitInt 0) |b#1@@0|) (< |b#1@@0| 256))) (and (<= (LitInt 0) |c#0@@10|) (< |c#0@@10| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@0|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|))) :qid |totalord.20:18| :skolemid |2881| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@0|)) ))) (and (=> (Byte__Order.__default.lte $ly@@300 |a#0@@79| |b#0@@53|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@79| |b#0@@53|)) (=> (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@79| |b#0@@53|) (Byte__Order.__default.lte $ly@@300 |a#0@@79| |b#0@@53|)))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@79| |b#0@@53|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@53| |a#0@@79|))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@79| |b#0@@53|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@53| |a#0@@79|)) (= |a#0@@79| |b#0@@53|))) (forall ((|a#2| Int) (|b#2| Int) (|c#1| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#2|) (< |a#2| 256)) (and (<= (LitInt 0) |b#2|) (< |b#2| 256))) (and (<= (LitInt 0) |c#1|) (< |c#1| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|))) :qid |totalord.188:18| :skolemid |2882| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|)) )))) :qid |totalord.926:30| :skolemid |2883| :pattern ( (Byte__Order.__default.lte $ly@@300 |a#0@@79| |b#0@@53|)) ))))
(assert (forall (($ly@@301 T@U) (|a#0@@80| Int) (|b#0@@54| Int) ) (!  (=> (= (type $ly@@301) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@80|) (< |a#0@@80| 256)) (and (<= (LitInt 0) |b#0@@54|) (< |b#0@@54| 256))) (and (=> (|Byte__Order.__default.lte#requires| $ly@@301 |a#0@@80| |b#0@@54|) true) (=> true (|Byte__Order.__default.lte#requires| $ly@@301 |a#0@@80| |b#0@@54|))))) :qid |totalord.926:30| :skolemid |2884| :pattern ( (|Byte__Order.__default.lte#requires| $ly@@301 |a#0@@80| |b#0@@54|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.ltedef0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.ltedef) LayerTypeType)))
(assert  (=> true (forall (($ly@@302 T@U) (|a#0@@81| Int) (|b#0@@55| Int) ) (!  (=> (and (= (type $ly@@302) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@81| |b#0@@55|) (and (and (<= (LitInt 0) |a#0@@81|) (< |a#0@@81| 256)) (and (<= (LitInt 0) |b#0@@55|) (< |b#0@@55| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef0)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef0) MoreFuel_Byte_Order._default.ltedef0)) (and (=> (Byte__Order.__default.lte ($LS $ly@@302) |a#0@@81| |b#0@@55|) (<= |a#0@@81| |b#0@@55|)) (=> (<= |a#0@@81| |b#0@@55|) (Byte__Order.__default.lte ($LS $ly@@302) |a#0@@81| |b#0@@55|))))) :qid |totalord.926:30| :skolemid |2885| :pattern ( (Byte__Order.__default.lte ($LS $ly@@302) |a#0@@81| |b#0@@55|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.ltedef1) LayerTypeType))
(assert  (=> true (forall (($ly@@303 T@U) (|a#0@@82| Int) (|b#0@@56| Int) ) (!  (=> (and (= (type $ly@@303) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@82|) (LitInt |b#0@@56|)) (and (and (<= (LitInt 0) |a#0@@82|) (< |a#0@@82| 256)) (and (<= (LitInt 0) |b#0@@56|) (< |b#0@@56| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef1)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef1) MoreFuel_Byte_Order._default.ltedef1)) (and (=> (Byte__Order.__default.lte ($LS $ly@@303) (LitInt |a#0@@82|) (LitInt |b#0@@56|)) (<= (LitInt |a#0@@82|) (LitInt |b#0@@56|))) (=> (<= (LitInt |a#0@@82|) (LitInt |b#0@@56|)) (Byte__Order.__default.lte ($LS $ly@@303) (LitInt |a#0@@82|) (LitInt |b#0@@56|)))))) :qid |totalord.926:30| :weight 3 :skolemid |2886| :pattern ( (Byte__Order.__default.lte ($LS $ly@@303) (LitInt |a#0@@82|) (LitInt |b#0@@56|))) ))))
(assert (forall (($ly@@304 T@U) (|a#0@@83| Int) (|b#0@@57| Int) ) (!  (=> (= (type $ly@@304) LayerTypeType) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@304) |a#0@@83| |b#0@@57|) (Byte__Order.__default.ltedef $ly@@304 |a#0@@83| |b#0@@57|)) (=> (Byte__Order.__default.ltedef $ly@@304 |a#0@@83| |b#0@@57|) (Byte__Order.__default.ltedef ($LS $ly@@304) |a#0@@83| |b#0@@57|)))) :qid |totalord.931:30| :skolemid |2887| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@304) |a#0@@83| |b#0@@57|)) )))
(assert (forall (($ly@@305 T@U) (|a#0@@84| Int) (|b#0@@58| Int) ) (!  (=> (= (type $ly@@305) LayerTypeType) (and (=> (Byte__Order.__default.ltedef $ly@@305 |a#0@@84| |b#0@@58|) (Byte__Order.__default.ltedef $LZ |a#0@@84| |b#0@@58|)) (=> (Byte__Order.__default.ltedef $LZ |a#0@@84| |b#0@@58|) (Byte__Order.__default.ltedef $ly@@305 |a#0@@84| |b#0@@58|)))) :qid |totalord.931:30| :skolemid |2888| :pattern ( (Byte__Order.__default.ltedef (AsFuelBottom $ly@@305) |a#0@@84| |b#0@@58|)) )))
(assert  (=> true (forall (($ly@@306 T@U) (|a#0@@85| Int) (|b#0@@59| Int) ) (!  (=> (and (= (type $ly@@306) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@85| |b#0@@59|) (and (and (<= (LitInt 0) |a#0@@85|) (< |a#0@@85| 256)) (and (<= (LitInt 0) |b#0@@59|) (< |b#0@@59| 256))))) true) :qid |totalord.931:30| :skolemid |2889| :pattern ( (Byte__Order.__default.ltedef $ly@@306 |a#0@@85| |b#0@@59|)) ))))
(assert (forall (($ly@@307 T@U) (|a#0@@86| Int) (|b#0@@60| Int) ) (!  (=> (= (type $ly@@307) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@86|) (< |a#0@@86| 256)) (and (<= (LitInt 0) |b#0@@60|) (< |b#0@@60| 256))) (and (=> (|Byte__Order.__default.ltedef#requires| $ly@@307 |a#0@@86| |b#0@@60|) true) (=> true (|Byte__Order.__default.ltedef#requires| $ly@@307 |a#0@@86| |b#0@@60|))))) :qid |totalord.931:30| :skolemid |2890| :pattern ( (|Byte__Order.__default.ltedef#requires| $ly@@307 |a#0@@86| |b#0@@60|)) )))
(assert  (=> true (forall (($ly@@308 T@U) (|a#0@@87| Int) (|b#0@@61| Int) ) (!  (=> (and (= (type $ly@@308) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@87| |b#0@@61|) (and (and (<= (LitInt 0) |a#0@@87|) (< |a#0@@87| 256)) (and (<= (LitInt 0) |b#0@@61|) (< |b#0@@61| 256))))) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@308) |a#0@@87| |b#0@@61|) (<= |a#0@@87| |b#0@@61|)) (=> (<= |a#0@@87| |b#0@@61|) (Byte__Order.__default.ltedef ($LS $ly@@308) |a#0@@87| |b#0@@61|)))) :qid |totalord.931:30| :skolemid |2891| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@308) |a#0@@87| |b#0@@61|)) ))))
(assert  (=> true (forall (($ly@@309 T@U) (|a#0@@88| Int) (|b#0@@62| Int) ) (!  (=> (and (= (type $ly@@309) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| (LitInt |a#0@@88|) (LitInt |b#0@@62|)) (and (and (<= (LitInt 0) |a#0@@88|) (< |a#0@@88| 256)) (and (<= (LitInt 0) |b#0@@62|) (< |b#0@@62| 256))))) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@309) (LitInt |a#0@@88|) (LitInt |b#0@@62|)) (<= (LitInt |a#0@@88|) (LitInt |b#0@@62|))) (=> (<= (LitInt |a#0@@88|) (LitInt |b#0@@62|)) (Byte__Order.__default.ltedef ($LS $ly@@309) (LitInt |a#0@@88|) (LitInt |b#0@@62|))))) :qid |totalord.931:30| :weight 3 :skolemid |2892| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@309) (LitInt |a#0@@88|) (LitInt |b#0@@62|))) ))))
(assert (forall (($ly@@310 T@U) (|run#0@@68| T@U) (|needle#0@@13| Int) ) (!  (=> (and (= (type $ly@@310) LayerTypeType) (= (type |run#0@@68|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte ($LS $ly@@310) |run#0@@68| |needle#0@@13|) (Byte__Order.__default.LargestLte $ly@@310 |run#0@@68| |needle#0@@13|))) :qid |totalord.253:12| :skolemid |2893| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@310) |run#0@@68| |needle#0@@13|)) )))
(assert (forall (($ly@@311 T@U) (|run#0@@69| T@U) (|needle#0@@14| Int) ) (!  (=> (and (= (type $ly@@311) LayerTypeType) (= (type |run#0@@69|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte $ly@@311 |run#0@@69| |needle#0@@14|) (Byte__Order.__default.LargestLte $LZ |run#0@@69| |needle#0@@14|))) :qid |totalord.253:12| :skolemid |2894| :pattern ( (Byte__Order.__default.LargestLte (AsFuelBottom $ly@@311) |run#0@@69| |needle#0@@14|)) )))
(assert  (and (= (type StartFuel_Byte_Order._default.IsSorted) LayerTypeType) (= (type StartFuel_Byte_Order._default.lte) LayerTypeType)))
(assert  (=> true (forall (($ly@@312 T@U) (|run#0@@70| T@U) (|needle#0@@15| Int) ) (!  (=> (and (and (= (type $ly@@312) LayerTypeType) (= (type |run#0@@70|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@70| |needle#0@@15|) (and (and ($Is |run#0@@70| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@15|) (< |needle#0@@15| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@70|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLte $ly@@312 |run#0@@70| |needle#0@@15|)) (< (Byte__Order.__default.LargestLte $ly@@312 |run#0@@70| |needle#0@@15|) (|Seq#Length| |run#0@@70|))) (forall ((|i#0@@95| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@95|) (<= |i#0@@95| (Byte__Order.__default.LargestLte $ly@@312 |run#0@@70| |needle#0@@15|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| |i#0@@95|))) |needle#0@@15|))) :qid |totalord.256:20| :skolemid |2895| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@70| |i#0@@95|))) ))) (forall ((|i#1@@35| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLte $ly@@312 |run#0@@70| |needle#0@@15|) |i#1@@35|) (< |i#1@@35| (|Seq#Length| |run#0@@70|))) (Byte__Order.__default.lt |needle#0@@15| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| |i#1@@35|)))))) :qid |totalord.257:20| :skolemid |2896| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@70| |i#1@@35|))) ))) (=> (|Seq#Contains| |run#0@@70| ($Box (int_2_U |needle#0@@15|))) (and (<= (LitInt 0) (Byte__Order.__default.LargestLte $ly@@312 |run#0@@70| |needle#0@@15|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| (Byte__Order.__default.LargestLte $ly@@312 |run#0@@70| |needle#0@@15|)))) |needle#0@@15|))))) :qid |totalord.253:12| :skolemid |2897| :pattern ( (Byte__Order.__default.LargestLte $ly@@312 |run#0@@70| |needle#0@@15|)) ))))
(assert (forall (($ly@@313 T@U) (|run#0@@71| T@U) (|needle#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@313) LayerTypeType) (= (type |run#0@@71|) (SeqType BoxType))) (and ($Is |run#0@@71| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@16|) (< |needle#0@@16| 256)))) (and (=> (|Byte__Order.__default.LargestLte#requires| $ly@@313 |run#0@@71| |needle#0@@16|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@71|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@71|) (|Byte__Order.__default.LargestLte#requires| $ly@@313 |run#0@@71| |needle#0@@16|)))) :qid |totalord.253:12| :skolemid |2898| :pattern ( (|Byte__Order.__default.LargestLte#requires| $ly@@313 |run#0@@71| |needle#0@@16|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@314 T@U) (|run#0@@72| T@U) (|needle#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@314) LayerTypeType) (= (type |run#0@@72|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@72| |needle#0@@17|) (and (and ($Is |run#0@@72| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@17|) (< |needle#0@@17| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@72|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@72|) (LitInt 0))) (|Byte__Order.__default.lt#canCall| |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@72|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@72| (LitInt 1)) |needle#0@@17|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted0) MoreFuel_Byte_Order._default.IsSorted0)) (= (Byte__Order.__default.LargestLte ($LS $ly@@314) |run#0@@72| |needle#0@@17|) (ite  (or (= (|Seq#Length| |run#0@@72|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte $ly@@314 (|Seq#Drop| |run#0@@72| (LitInt 1)) |needle#0@@17|))))))) :qid |totalord.253:12| :skolemid |2899| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@314) |run#0@@72| |needle#0@@17|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@315 T@U) (|run#0@@73| T@U) (|needle#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@315) LayerTypeType) (= (type |run#0@@73|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@73|) (LitInt |needle#0@@18|)) (and (and ($Is |run#0@@73| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@18|) (< |needle#0@@18| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@73|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0))) (|Byte__Order.__default.lt#canCall| (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@73|) (LitInt 1))) (LitInt |needle#0@@18|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted1) MoreFuel_Byte_Order._default.IsSorted1)) (= (Byte__Order.__default.LargestLte ($LS $ly@@315) (Lit |run#0@@73|) (LitInt |needle#0@@18|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte ($LS $ly@@315) (Lit (|Seq#Drop| (Lit |run#0@@73|) (LitInt 1))) (LitInt |needle#0@@18|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |2900| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@315) (Lit |run#0@@73|) (LitInt |needle#0@@18|))) ))))
(assert (forall (($ly@@316 T@U) (|run#0@@74| T@U) (|needle#0@@19| Int) ) (!  (=> (and (= (type $ly@@316) LayerTypeType) (= (type |run#0@@74|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt ($LS $ly@@316) |run#0@@74| |needle#0@@19|) (Byte__Order.__default.LargestLt $ly@@316 |run#0@@74| |needle#0@@19|))) :qid |totalord.356:12| :skolemid |2901| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@316) |run#0@@74| |needle#0@@19|)) )))
(assert (forall (($ly@@317 T@U) (|run#0@@75| T@U) (|needle#0@@20| Int) ) (!  (=> (and (= (type $ly@@317) LayerTypeType) (= (type |run#0@@75|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt $ly@@317 |run#0@@75| |needle#0@@20|) (Byte__Order.__default.LargestLt $LZ |run#0@@75| |needle#0@@20|))) :qid |totalord.356:12| :skolemid |2902| :pattern ( (Byte__Order.__default.LargestLt (AsFuelBottom $ly@@317) |run#0@@75| |needle#0@@20|)) )))
(assert  (=> true (forall (($ly@@318 T@U) (|run#0@@76| T@U) (|needle#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@318) LayerTypeType) (= (type |run#0@@76|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@76| |needle#0@@21|) (and (and ($Is |run#0@@76| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@21|) (< |needle#0@@21| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@76|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLt $ly@@318 |run#0@@76| |needle#0@@21|)) (< (Byte__Order.__default.LargestLt $ly@@318 |run#0@@76| |needle#0@@21|) (|Seq#Length| |run#0@@76|))) (forall ((|i#0@@96| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@96|) (<= |i#0@@96| (Byte__Order.__default.LargestLt $ly@@318 |run#0@@76| |needle#0@@21|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| |i#0@@96|))) |needle#0@@21|))) :qid |totalord.359:20| :skolemid |2903| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@76| |i#0@@96|))) ))) (forall ((|i#1@@36| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLt $ly@@318 |run#0@@76| |needle#0@@21|) |i#1@@36|) (< |i#1@@36| (|Seq#Length| |run#0@@76|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@21| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| |i#1@@36|)))))) :qid |totalord.360:20| :skolemid |2904| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@76| |i#1@@36|))) ))) (=> (|Seq#Contains| |run#0@@76| ($Box (int_2_U |needle#0@@21|))) (and (< (+ (Byte__Order.__default.LargestLt $ly@@318 |run#0@@76| |needle#0@@21|) 1) (|Seq#Length| |run#0@@76|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| (+ (Byte__Order.__default.LargestLt $ly@@318 |run#0@@76| |needle#0@@21|) 1)))) |needle#0@@21|))))) :qid |totalord.356:12| :skolemid |2905| :pattern ( (Byte__Order.__default.LargestLt $ly@@318 |run#0@@76| |needle#0@@21|)) ))))
(assert (forall (($ly@@319 T@U) (|run#0@@77| T@U) (|needle#0@@22| Int) ) (!  (=> (and (and (= (type $ly@@319) LayerTypeType) (= (type |run#0@@77|) (SeqType BoxType))) (and ($Is |run#0@@77| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@22|) (< |needle#0@@22| 256)))) (and (=> (|Byte__Order.__default.LargestLt#requires| $ly@@319 |run#0@@77| |needle#0@@22|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@77|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@77|) (|Byte__Order.__default.LargestLt#requires| $ly@@319 |run#0@@77| |needle#0@@22|)))) :qid |totalord.356:12| :skolemid |2906| :pattern ( (|Byte__Order.__default.LargestLt#requires| $ly@@319 |run#0@@77| |needle#0@@22|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@320 T@U) (|run#0@@78| T@U) (|needle#0@@23| Int) ) (!  (=> (and (and (= (type $ly@@320) LayerTypeType) (= (type |run#0@@78|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@78| |needle#0@@23|) (and (and ($Is |run#0@@78| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@23|) (< |needle#0@@23| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@78|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@78|) (LitInt 0))) (|Byte__Order.__default.lte#canCall| |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@78|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@78| (LitInt 1)) |needle#0@@23|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted2) MoreFuel_Byte_Order._default.IsSorted2)) (= (Byte__Order.__default.LargestLt ($LS $ly@@320) |run#0@@78| |needle#0@@23|) (ite  (or (= (|Seq#Length| |run#0@@78|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt $ly@@320 (|Seq#Drop| |run#0@@78| (LitInt 1)) |needle#0@@23|))))))) :qid |totalord.356:12| :skolemid |2907| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@320) |run#0@@78| |needle#0@@23|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@321 T@U) (|run#0@@79| T@U) (|needle#0@@24| Int) ) (!  (=> (and (and (= (type $ly@@321) LayerTypeType) (= (type |run#0@@79|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@79|) (LitInt |needle#0@@24|)) (and (and ($Is |run#0@@79| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@24|) (< |needle#0@@24| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@79|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0))) (|Byte__Order.__default.lte#canCall| (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1))) (LitInt |needle#0@@24|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted3) MoreFuel_Byte_Order._default.IsSorted3)) (= (Byte__Order.__default.LargestLt ($LS $ly@@321) (Lit |run#0@@79|) (LitInt |needle#0@@24|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt ($LS $ly@@321) (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1))) (LitInt |needle#0@@24|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |2908| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@321) (Lit |run#0@@79|) (LitInt |needle#0@@24|))) ))))
(assert (forall (($ly@@322 T@U) (|run#0@@80| T@U) (|needle#0@@25| Int) ) (!  (=> (and (= (type $ly@@322) LayerTypeType) (= (type |run#0@@80|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@322) |run#0@@80| |needle#0@@25|) (Byte__Order.__default.IndexOfFirstGte $ly@@322 |run#0@@80| |needle#0@@25|))) :qid |totalord.388:12| :skolemid |2909| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@322) |run#0@@80| |needle#0@@25|)) )))
(assert (forall (($ly@@323 T@U) (|run#0@@81| T@U) (|needle#0@@26| Int) ) (!  (=> (and (= (type $ly@@323) LayerTypeType) (= (type |run#0@@81|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte $ly@@323 |run#0@@81| |needle#0@@26|) (Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@81| |needle#0@@26|))) :qid |totalord.388:12| :skolemid |2910| :pattern ( (Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@323) |run#0@@81| |needle#0@@26|)) )))
(assert  (=> true (forall (($ly@@324 T@U) (|run#0@@82| T@U) (|needle#0@@27| Int) ) (!  (=> (and (and (= (type $ly@@324) LayerTypeType) (= (type |run#0@@82|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@82| |needle#0@@27|) (and (and ($Is |run#0@@82| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@27|) (< |needle#0@@27| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@82|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@324 |run#0@@82| |needle#0@@27|) (|Seq#Length| |run#0@@82|)) (forall ((|i#0@@97| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@97|) (< |i#0@@97| (Byte__Order.__default.IndexOfFirstGte $ly@@324 |run#0@@82| |needle#0@@27|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@97|))) |needle#0@@27|)) :qid |totalord.391:20| :skolemid |2911| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@97|))) ))) (forall ((|i#1@@37| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@324 |run#0@@82| |needle#0@@27|) |i#1@@37|) (< |i#1@@37| (|Seq#Length| |run#0@@82|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@27| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@37|))))) :qid |totalord.392:20| :skolemid |2912| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@37|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGte $ly@@324 |run#0@@82| |needle#0@@27|)))) :qid |totalord.388:12| :skolemid |2913| :pattern ( (Byte__Order.__default.IndexOfFirstGte $ly@@324 |run#0@@82| |needle#0@@27|)) ))))
(assert (forall (($ly@@325 T@U) (|run#0@@83| T@U) (|needle#0@@28| Int) ) (!  (=> (and (and (= (type $ly@@325) LayerTypeType) (= (type |run#0@@83|) (SeqType BoxType))) (and ($Is |run#0@@83| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@28|) (< |needle#0@@28| 256)))) (and (=> (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@325 |run#0@@83| |needle#0@@28|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|) (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@325 |run#0@@83| |needle#0@@28|)))) :qid |totalord.388:12| :skolemid |2914| :pattern ( (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@325 |run#0@@83| |needle#0@@28|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@326 T@U) (|run#0@@84| T@U) (|needle#0@@29| Int) ) (!  (=> (and (and (= (type $ly@@326) LayerTypeType) (= (type |run#0@@84|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@84| |needle#0@@29|) (and (and ($Is |run#0@@84| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@29|) (< |needle#0@@29| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@84|)))) (and (=> (not (= (|Seq#Length| |run#0@@84|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@84|) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|)) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@84|) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@84|) |needle#0@@29|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted4) MoreFuel_Byte_Order._default.IsSorted4)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@326) |run#0@@84| |needle#0@@29|) (ite (= (|Seq#Length| |run#0@@84|) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|) (|Seq#Length| |run#0@@84|) (Byte__Order.__default.IndexOfFirstGte $ly@@326 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@84|) |needle#0@@29|))))))) :qid |totalord.388:12| :skolemid |2915| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@326) |run#0@@84| |needle#0@@29|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@327 T@U) (|run#0@@85| T@U) (|needle#0@@30| Int) ) (!  (=> (and (and (= (type $ly@@327) LayerTypeType) (= (type |run#0@@85|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@85|) (LitInt |needle#0@@30|)) (and (and ($Is |run#0@@85| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@30|) (< |needle#0@@30| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@85|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@85|)) (|Byte__Order.__default.lt#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|))) (=> (not (U_2_bool (Lit (bool_2_U (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@85|)) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@85|))) (LitInt |needle#0@@30|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted5) MoreFuel_Byte_Order._default.IsSorted5)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@327) (Lit |run#0@@85|) (LitInt |needle#0@@30|)) (ite (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|)) (|Seq#Length| (Lit |run#0@@85|)) (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@327) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@85|))) (LitInt |needle#0@@30|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |2916| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@327) (Lit |run#0@@85|) (LitInt |needle#0@@30|))) ))))
(assert (forall (($ly@@328 T@U) (|s#0@@88| T@U) (|key#0@@40| Int) (|lo#0| Int) (|hi#0| Int) ) (!  (=> (and (= (type $ly@@328) LayerTypeType) (= (type |s#0@@88|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@328) |s#0@@88| |key#0@@40| |lo#0| |hi#0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@328 |s#0@@88| |key#0@@40| |lo#0| |hi#0|))) :qid |totalord.421:12| :skolemid |2917| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@328) |s#0@@88| |key#0@@40| |lo#0| |hi#0|)) )))
(assert (forall (($ly@@329 T@U) (|s#0@@89| T@U) (|key#0@@41| Int) (|lo#0@@0| Int) (|hi#0@@0| Int) ) (!  (=> (and (= (type $ly@@329) LayerTypeType) (= (type |s#0@@89|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@329 |s#0@@89| |key#0@@41| |lo#0@@0| |hi#0@@0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@89| |key#0@@41| |lo#0@@0| |hi#0@@0|))) :qid |totalord.421:12| :skolemid |2918| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@329) |s#0@@89| |key#0@@41| |lo#0@@0| |hi#0@@0|)) )))
(assert  (=> true (forall (($ly@@330 T@U) (|s#0@@90| T@U) (|key#0@@42| Int) (|lo#0@@1| Int) (|hi#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@330) LayerTypeType) (= (type |s#0@@90|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@90| |key#0@@42| |lo#0@@1| |hi#0@@1|) (and (and ($Is |s#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@42|) (< |key#0@@42| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@1|) (< |lo#0@@1| |hi#0@@1|)) (<= |hi#0@@1| (+ (|Seq#Length| |s#0@@90|) 1))) (=> (> |lo#0@@1| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@90| (- |lo#0@@1| 1)))) |key#0@@42|))) (=> (<= |hi#0@@1| (|Seq#Length| |s#0@@90|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@42| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@90| (- |hi#0@@1| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@330 |s#0@@90| |key#0@@42| |lo#0@@1| |hi#0@@1|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@330 |s#0@@90| |key#0@@42| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@90|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@330 |s#0@@90| |key#0@@42| |lo#0@@1| |hi#0@@1|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@90| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@330 |s#0@@90| |key#0@@42| |lo#0@@1| |hi#0@@1|) 1)))) |key#0@@42|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@330 |s#0@@90| |key#0@@42| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@90|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@42| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@90| (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@330 |s#0@@90| |key#0@@42| |lo#0@@1| |hi#0@@1|)))))))) :qid |totalord.421:12| :skolemid |2919| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@330 |s#0@@90| |key#0@@42| |lo#0@@1| |hi#0@@1|)) ))))
(assert (forall (($ly@@331 T@U) (|s#0@@91| T@U) (|key#0@@43| Int) (|lo#0@@2| Int) (|hi#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@331) LayerTypeType) (= (type |s#0@@91|) (SeqType BoxType))) (and ($Is |s#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@43|) (< |key#0@@43| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@331 |s#0@@91| |key#0@@43| |lo#0@@2| |hi#0@@2|) (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@91|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@91| (- |lo#0@@2| 1)))) |key#0@@43|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@91|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@43| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@91| (- |hi#0@@2| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@91|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@91| (- |lo#0@@2| 1)))) |key#0@@43|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@91|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@43| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@91| (- |hi#0@@2| 1))))))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@331 |s#0@@91| |key#0@@43| |lo#0@@2| |hi#0@@2|)))) :qid |totalord.421:12| :skolemid |2920| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@331 |s#0@@91| |key#0@@43| |lo#0@@2| |hi#0@@2|)) )))
(assert  (=> true (forall (($ly@@332 T@U) (|s#0@@92| T@U) (|key#0@@44| Int) (|lo#0@@3| Int) (|hi#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@332) LayerTypeType) (= (type |s#0@@92|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@92| |key#0@@44| |lo#0@@3| |hi#0@@3|) (and (and ($Is |s#0@@92| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@44|) (< |key#0@@44| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@3|) (< |lo#0@@3| |hi#0@@3|)) (<= |hi#0@@3| (+ (|Seq#Length| |s#0@@92|) 1))) (=> (> |lo#0@@3| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@92| (- |lo#0@@3| 1)))) |key#0@@44|))) (=> (<= |hi#0@@3| (|Seq#Length| |s#0@@92|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@44| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@92| (- |hi#0@@3| 1)))))))))) (and (=> (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@92| (- |mid#0| 1)))) |key#0@@44|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@92| (- |mid#0| 1)))) |key#0@@44|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@92| |key#0@@44| |mid#0| |hi#0@@3|))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@92| (- |mid#0| 1)))) |key#0@@44|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@92| |key#0@@44| |lo#0@@3| |mid#0|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@332) |s#0@@92| |key#0@@44| |lo#0@@3| |hi#0@@3|) (ite (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0@@0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@92| (- |mid#0@@0| 1)))) |key#0@@44|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@332 |s#0@@92| |key#0@@44| |mid#0@@0| |hi#0@@3|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@332 |s#0@@92| |key#0@@44| |lo#0@@3| |mid#0@@0|))) |lo#0@@3|)))) :qid |totalord.421:12| :skolemid |2921| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@332) |s#0@@92| |key#0@@44| |lo#0@@3| |hi#0@@3|)) ))))
(assert  (=> true (forall (($ly@@333 T@U) (|s#0@@93| T@U) (|key#0@@45| Int) (|lo#0@@4| Int) (|hi#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@333) LayerTypeType) (= (type |s#0@@93|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@93| |key#0@@45| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (and (and ($Is |s#0@@93| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@45|) (< |key#0@@45| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@4|)) (< |lo#0@@4| |hi#0@@4|)) (<= (LitInt |hi#0@@4|) (+ (|Seq#Length| |s#0@@93|) 1))) (=> (> |lo#0@@4| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@93| (LitInt (- |lo#0@@4| 1))))) |key#0@@45|))) (=> (<= (LitInt |hi#0@@4|) (|Seq#Length| |s#0@@93|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@45| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@93| (LitInt (- |hi#0@@4| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@4| 1) |hi#0@@4|)))) (let ((|mid#1| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@93| (- |mid#1| 1)))) |key#0@@45|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@93| (- |mid#1| 1)))) |key#0@@45|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@93| |key#0@@45| |mid#1| (LitInt |hi#0@@4|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@93| (- |mid#1| 1)))) |key#0@@45|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@93| |key#0@@45| (LitInt |lo#0@@4|) |mid#1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@333) |s#0@@93| |key#0@@45| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (ite (< (+ |lo#0@@4| 1) |hi#0@@4|) (let ((|mid#1@@0| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@93| (LitInt (- |mid#1@@0| 1))))) |key#0@@45|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@333) |s#0@@93| |key#0@@45| |mid#1@@0| (LitInt |hi#0@@4|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@333) |s#0@@93| |key#0@@45| (LitInt |lo#0@@4|) |mid#1@@0|))) |lo#0@@4|)))) :qid |totalord.421:12| :weight 3 :skolemid |2922| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@333) |s#0@@93| |key#0@@45| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|))) ))))
(assert  (=> true (forall (($ly@@334 T@U) (|s#0@@94| T@U) (|key#0@@46| Int) (|lo#0@@5| Int) (|hi#0@@5| Int) ) (!  (=> (and (and (= (type $ly@@334) LayerTypeType) (= (type |s#0@@94|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@94|) (LitInt |key#0@@46|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (and (and ($Is |s#0@@94| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@46|) (< |key#0@@46| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@5|)) (< |lo#0@@5| |hi#0@@5|)) (<= (LitInt |hi#0@@5|) (+ (|Seq#Length| (Lit |s#0@@94|)) 1))) (=> (> |lo#0@@5| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@94|) (LitInt (- |lo#0@@5| 1))))) (LitInt |key#0@@46|)))) (=> (<= (LitInt |hi#0@@5|) (|Seq#Length| (Lit |s#0@@94|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |key#0@@46|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@94|) (LitInt (- |hi#0@@5| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@5| 1) |hi#0@@5|)))) (let ((|mid#2| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@94|) (- |mid#2| 1)))) (LitInt |key#0@@46|)) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@94|) (- |mid#2| 1)))) (LitInt |key#0@@46|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@94|) (LitInt |key#0@@46|) |mid#2| (LitInt |hi#0@@5|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@94|) (- |mid#2| 1)))) (LitInt |key#0@@46|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@94|) (LitInt |key#0@@46|) (LitInt |lo#0@@5|) |mid#2|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@334) (Lit |s#0@@94|) (LitInt |key#0@@46|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (ite (< (+ |lo#0@@5| 1) |hi#0@@5|) (let ((|mid#2@@0| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@94|) (LitInt (- |mid#2@@0| 1))))) (LitInt |key#0@@46|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@334) (Lit |s#0@@94|) (LitInt |key#0@@46|) |mid#2@@0| (LitInt |hi#0@@5|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@334) (Lit |s#0@@94|) (LitInt |key#0@@46|) (LitInt |lo#0@@5|) |mid#2@@0|))) |lo#0@@5|)))) :qid |totalord.421:12| :weight 3 :skolemid |2923| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@334) (Lit |s#0@@94|) (LitInt |key#0@@46|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|))) ))))
(assert (forall (($ly@@335 T@U) (|s#0@@95| T@U) (|key#0@@47| Int) ) (!  (=> (and (= (type $ly@@335) LayerTypeType) (= (type |s#0@@95|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@335) |s#0@@95| |key#0@@47|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@335 |s#0@@95| |key#0@@47|))) :qid |totalord.441:22| :skolemid |2924| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@335) |s#0@@95| |key#0@@47|)) )))
(assert (forall (($ly@@336 T@U) (|s#0@@96| T@U) (|key#0@@48| Int) ) (!  (=> (and (= (type $ly@@336) LayerTypeType) (= (type |s#0@@96|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@336 |s#0@@96| |key#0@@48|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@96| |key#0@@48|))) :qid |totalord.441:22| :skolemid |2925| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@336) |s#0@@96| |key#0@@48|)) )))
(assert  (=> true (forall (($ly@@337 T@U) (|s#0@@97| T@U) (|key#0@@49| Int) ) (!  (=> (and (and (= (type $ly@@337) LayerTypeType) (= (type |s#0@@97|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@97| |key#0@@49|) (and ($Is |s#0@@97| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@49|) (< |key#0@@49| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@337 |s#0@@97| |key#0@@49|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@337 |s#0@@97| |key#0@@49|) (|Seq#Length| |s#0@@97|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@337 |s#0@@97| |key#0@@49|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@97| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@337 |s#0@@97| |key#0@@49|) 1)))) |key#0@@49|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@337 |s#0@@97| |key#0@@49|) (|Seq#Length| |s#0@@97|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@49| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@97| (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@337 |s#0@@97| |key#0@@49|)))))))) :qid |totalord.441:22| :skolemid |2926| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@337 |s#0@@97| |key#0@@49|)) ))))
(assert (forall (($ly@@338 T@U) (|s#0@@98| T@U) (|key#0@@50| Int) ) (!  (=> (and (and (= (type $ly@@338) LayerTypeType) (= (type |s#0@@98|) (SeqType BoxType))) (and ($Is |s#0@@98| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@50|) (< |key#0@@50| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@338 |s#0@@98| |key#0@@50|) true) (=> true (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@338 |s#0@@98| |key#0@@50|)))) :qid |totalord.441:22| :skolemid |2927| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@338 |s#0@@98| |key#0@@50|)) )))
(assert  (=> true (forall (($ly@@339 T@U) (|s#0@@99| T@U) (|key#0@@51| Int) ) (!  (=> (and (and (= (type $ly@@339) LayerTypeType) (= (type |s#0@@99|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@99| |key#0@@51|) (and ($Is |s#0@@99| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@51|) (< |key#0@@51| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@99| |key#0@@51| (LitInt 0) (+ (|Seq#Length| |s#0@@99|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@339) |s#0@@99| |key#0@@51|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@99| |key#0@@51| (LitInt 0) (+ (|Seq#Length| |s#0@@99|) 1))))) :qid |totalord.441:22| :skolemid |2928| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@339) |s#0@@99| |key#0@@51|)) ))))
(assert  (=> true (forall (($ly@@340 T@U) (|s#0@@100| T@U) (|key#0@@52| Int) ) (!  (=> (and (and (= (type $ly@@340) LayerTypeType) (= (type |s#0@@100|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@100|) (LitInt |key#0@@52|)) (and ($Is |s#0@@100| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@52|) (< |key#0@@52| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@100|) (LitInt |key#0@@52|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@100|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@340) (Lit |s#0@@100|) (LitInt |key#0@@52|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@100|) (LitInt |key#0@@52|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@100|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |2929| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@340) (Lit |s#0@@100|) (LitInt |key#0@@52|))) ))))
(assert (forall (($ly@@341 T@U) (|run#0@@86| T@U) (|needle#0@@31| Int) ) (!  (=> (and (= (type $ly@@341) LayerTypeType) (= (type |run#0@@86|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@341) |run#0@@86| |needle#0@@31|) (Byte__Order.__default.IndexOfFirstGt $ly@@341 |run#0@@86| |needle#0@@31|))) :qid |totalord.449:12| :skolemid |2930| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@341) |run#0@@86| |needle#0@@31|)) )))
(assert (forall (($ly@@342 T@U) (|run#0@@87| T@U) (|needle#0@@32| Int) ) (!  (=> (and (= (type $ly@@342) LayerTypeType) (= (type |run#0@@87|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt $ly@@342 |run#0@@87| |needle#0@@32|) (Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@87| |needle#0@@32|))) :qid |totalord.449:12| :skolemid |2931| :pattern ( (Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@342) |run#0@@87| |needle#0@@32|)) )))
(assert  (=> true (forall (($ly@@343 T@U) (|run#0@@88| T@U) (|needle#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@343) LayerTypeType) (= (type |run#0@@88|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@88| |needle#0@@33|) (and (and ($Is |run#0@@88| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@33|) (< |needle#0@@33| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@88|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@343 |run#0@@88| |needle#0@@33|) (|Seq#Length| |run#0@@88|)) (forall ((|i#0@@98| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@98|) (< |i#0@@98| (Byte__Order.__default.IndexOfFirstGt $ly@@343 |run#0@@88| |needle#0@@33|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@98|))) |needle#0@@33|)) :qid |totalord.452:20| :skolemid |2932| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@98|))) ))) (forall ((|i#1@@38| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@343 |run#0@@88| |needle#0@@33|) |i#1@@38|) (< |i#1@@38| (|Seq#Length| |run#0@@88|))) (Byte__Order.__default.lt |needle#0@@33| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@38|))))) :qid |totalord.453:20| :skolemid |2933| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@38|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGt $ly@@343 |run#0@@88| |needle#0@@33|)))) :qid |totalord.449:12| :skolemid |2934| :pattern ( (Byte__Order.__default.IndexOfFirstGt $ly@@343 |run#0@@88| |needle#0@@33|)) ))))
(assert (forall (($ly@@344 T@U) (|run#0@@89| T@U) (|needle#0@@34| Int) ) (!  (=> (and (and (= (type $ly@@344) LayerTypeType) (= (type |run#0@@89|) (SeqType BoxType))) (and ($Is |run#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@34|) (< |needle#0@@34| 256)))) (and (=> (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@344 |run#0@@89| |needle#0@@34|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|) (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@344 |run#0@@89| |needle#0@@34|)))) :qid |totalord.449:12| :skolemid |2935| :pattern ( (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@344 |run#0@@89| |needle#0@@34|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@345 T@U) (|run#0@@90| T@U) (|needle#0@@35| Int) ) (!  (=> (and (and (= (type $ly@@345) LayerTypeType) (= (type |run#0@@90|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@90| |needle#0@@35|) (and (and ($Is |run#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@35|) (< |needle#0@@35| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@90|)))) (and (=> (not (= (|Seq#Length| |run#0@@90|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@90|) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|)) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@90|) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@90|) |needle#0@@35|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted6) MoreFuel_Byte_Order._default.IsSorted6)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@345) |run#0@@90| |needle#0@@35|) (ite (= (|Seq#Length| |run#0@@90|) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|) (|Seq#Length| |run#0@@90|) (Byte__Order.__default.IndexOfFirstGt $ly@@345 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@90|) |needle#0@@35|))))))) :qid |totalord.449:12| :skolemid |2936| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@345) |run#0@@90| |needle#0@@35|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@346 T@U) (|run#0@@91| T@U) (|needle#0@@36| Int) ) (!  (=> (and (and (= (type $ly@@346) LayerTypeType) (= (type |run#0@@91|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@91|) (LitInt |needle#0@@36|)) (and (and ($Is |run#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@36|) (< |needle#0@@36| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@91|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@91|)) (|Byte__Order.__default.lte#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@91|)) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@91|))) (LitInt |needle#0@@36|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted7) MoreFuel_Byte_Order._default.IsSorted7)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@346) (Lit |run#0@@91|) (LitInt |needle#0@@36|)) (ite (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|)) (|Seq#Length| (Lit |run#0@@91|)) (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@346) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@91|))) (LitInt |needle#0@@36|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |2937| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@346) (Lit |run#0@@91|) (LitInt |needle#0@@36|))) ))))
(assert (forall (($ly@@347 T@U) (|s#0@@101| T@U) (|key#0@@53| Int) (|lo#0@@6| Int) (|hi#0@@6| Int) ) (!  (=> (and (= (type $ly@@347) LayerTypeType) (= (type |s#0@@101|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@347) |s#0@@101| |key#0@@53| |lo#0@@6| |hi#0@@6|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@347 |s#0@@101| |key#0@@53| |lo#0@@6| |hi#0@@6|))) :qid |totalord.482:12| :skolemid |2938| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@347) |s#0@@101| |key#0@@53| |lo#0@@6| |hi#0@@6|)) )))
(assert (forall (($ly@@348 T@U) (|s#0@@102| T@U) (|key#0@@54| Int) (|lo#0@@7| Int) (|hi#0@@7| Int) ) (!  (=> (and (= (type $ly@@348) LayerTypeType) (= (type |s#0@@102|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@348 |s#0@@102| |key#0@@54| |lo#0@@7| |hi#0@@7|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@102| |key#0@@54| |lo#0@@7| |hi#0@@7|))) :qid |totalord.482:12| :skolemid |2939| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@348) |s#0@@102| |key#0@@54| |lo#0@@7| |hi#0@@7|)) )))
(assert  (=> true (forall (($ly@@349 T@U) (|s#0@@103| T@U) (|key#0@@55| Int) (|lo#0@@8| Int) (|hi#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@349) LayerTypeType) (= (type |s#0@@103|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@103| |key#0@@55| |lo#0@@8| |hi#0@@8|) (and (and ($Is |s#0@@103| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@55|) (< |key#0@@55| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@8|) (< |lo#0@@8| |hi#0@@8|)) (<= |hi#0@@8| (+ (|Seq#Length| |s#0@@103|) 1))) (=> (> |lo#0@@8| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@103| (- |lo#0@@8| 1)))) |key#0@@55|))) (=> (<= |hi#0@@8| (|Seq#Length| |s#0@@103|)) (Byte__Order.__default.lt |key#0@@55| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@103| (- |hi#0@@8| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@349 |s#0@@103| |key#0@@55| |lo#0@@8| |hi#0@@8|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@349 |s#0@@103| |key#0@@55| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@103|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@349 |s#0@@103| |key#0@@55| |lo#0@@8| |hi#0@@8|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@103| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@349 |s#0@@103| |key#0@@55| |lo#0@@8| |hi#0@@8|) 1)))) |key#0@@55|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@349 |s#0@@103| |key#0@@55| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@103|)) (Byte__Order.__default.lt |key#0@@55| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@103| (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@349 |s#0@@103| |key#0@@55| |lo#0@@8| |hi#0@@8|)))))))) :qid |totalord.482:12| :skolemid |2940| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@349 |s#0@@103| |key#0@@55| |lo#0@@8| |hi#0@@8|)) ))))
(assert (forall (($ly@@350 T@U) (|s#0@@104| T@U) (|key#0@@56| Int) (|lo#0@@9| Int) (|hi#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@350) LayerTypeType) (= (type |s#0@@104|) (SeqType BoxType))) (and ($Is |s#0@@104| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@56|) (< |key#0@@56| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@350 |s#0@@104| |key#0@@56| |lo#0@@9| |hi#0@@9|) (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@104|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@104| (- |lo#0@@9| 1)))) |key#0@@56|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@104|)) (Byte__Order.__default.lt |key#0@@56| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@104| (- |hi#0@@9| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@104|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@104| (- |lo#0@@9| 1)))) |key#0@@56|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@104|)) (Byte__Order.__default.lt |key#0@@56| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@104| (- |hi#0@@9| 1))))))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@350 |s#0@@104| |key#0@@56| |lo#0@@9| |hi#0@@9|)))) :qid |totalord.482:12| :skolemid |2941| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@350 |s#0@@104| |key#0@@56| |lo#0@@9| |hi#0@@9|)) )))
(assert  (=> true (forall (($ly@@351 T@U) (|s#0@@105| T@U) (|key#0@@57| Int) (|lo#0@@10| Int) (|hi#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@351) LayerTypeType) (= (type |s#0@@105|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@105| |key#0@@57| |lo#0@@10| |hi#0@@10|) (and (and ($Is |s#0@@105| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@57|) (< |key#0@@57| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@10|) (< |lo#0@@10| |hi#0@@10|)) (<= |hi#0@@10| (+ (|Seq#Length| |s#0@@105|) 1))) (=> (> |lo#0@@10| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@105| (- |lo#0@@10| 1)))) |key#0@@57|))) (=> (<= |hi#0@@10| (|Seq#Length| |s#0@@105|)) (Byte__Order.__default.lt |key#0@@57| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@105| (- |hi#0@@10| 1)))))))))) (and (=> (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@1| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@105| (- |mid#0@@1| 1)))) |key#0@@57|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@105| (- |mid#0@@1| 1)))) |key#0@@57|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@105| |key#0@@57| |mid#0@@1| |hi#0@@10|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@105| (- |mid#0@@1| 1)))) |key#0@@57|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@105| |key#0@@57| |lo#0@@10| |mid#0@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@351) |s#0@@105| |key#0@@57| |lo#0@@10| |hi#0@@10|) (ite (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@2| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@105| (- |mid#0@@2| 1)))) |key#0@@57|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@351 |s#0@@105| |key#0@@57| |mid#0@@2| |hi#0@@10|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@351 |s#0@@105| |key#0@@57| |lo#0@@10| |mid#0@@2|))) |lo#0@@10|)))) :qid |totalord.482:12| :skolemid |2942| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@351) |s#0@@105| |key#0@@57| |lo#0@@10| |hi#0@@10|)) ))))
(assert  (=> true (forall (($ly@@352 T@U) (|s#0@@106| T@U) (|key#0@@58| Int) (|lo#0@@11| Int) (|hi#0@@11| Int) ) (!  (=> (and (and (= (type $ly@@352) LayerTypeType) (= (type |s#0@@106|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@106| |key#0@@58| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (and (and ($Is |s#0@@106| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@58|) (< |key#0@@58| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@11|)) (< |lo#0@@11| |hi#0@@11|)) (<= (LitInt |hi#0@@11|) (+ (|Seq#Length| |s#0@@106|) 1))) (=> (> |lo#0@@11| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@106| (LitInt (- |lo#0@@11| 1))))) |key#0@@58|))) (=> (<= (LitInt |hi#0@@11|) (|Seq#Length| |s#0@@106|)) (Byte__Order.__default.lt |key#0@@58| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@106| (LitInt (- |hi#0@@11| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@11| 1) |hi#0@@11|)))) (let ((|mid#1@@1| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@106| (- |mid#1@@1| 1)))) |key#0@@58|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@106| (- |mid#1@@1| 1)))) |key#0@@58|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@106| |key#0@@58| |mid#1@@1| (LitInt |hi#0@@11|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@106| (- |mid#1@@1| 1)))) |key#0@@58|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@106| |key#0@@58| (LitInt |lo#0@@11|) |mid#1@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@352) |s#0@@106| |key#0@@58| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (ite (< (+ |lo#0@@11| 1) |hi#0@@11|) (let ((|mid#1@@2| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@106| (LitInt (- |mid#1@@2| 1))))) |key#0@@58|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@352) |s#0@@106| |key#0@@58| |mid#1@@2| (LitInt |hi#0@@11|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@352) |s#0@@106| |key#0@@58| (LitInt |lo#0@@11|) |mid#1@@2|))) |lo#0@@11|)))) :qid |totalord.482:12| :weight 3 :skolemid |2943| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@352) |s#0@@106| |key#0@@58| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|))) ))))
(assert  (=> true (forall (($ly@@353 T@U) (|s#0@@107| T@U) (|key#0@@59| Int) (|lo#0@@12| Int) (|hi#0@@12| Int) ) (!  (=> (and (and (= (type $ly@@353) LayerTypeType) (= (type |s#0@@107|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@107|) (LitInt |key#0@@59|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (and (and ($Is |s#0@@107| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@59|) (< |key#0@@59| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@12|)) (< |lo#0@@12| |hi#0@@12|)) (<= (LitInt |hi#0@@12|) (+ (|Seq#Length| (Lit |s#0@@107|)) 1))) (=> (> |lo#0@@12| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@107|) (LitInt (- |lo#0@@12| 1))))) (LitInt |key#0@@59|)))) (=> (<= (LitInt |hi#0@@12|) (|Seq#Length| (Lit |s#0@@107|))) (Byte__Order.__default.lt (LitInt |key#0@@59|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@107|) (LitInt (- |hi#0@@12| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@12| 1) |hi#0@@12|)))) (let ((|mid#2@@1| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@107|) (- |mid#2@@1| 1)))) (LitInt |key#0@@59|)) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@107|) (- |mid#2@@1| 1)))) (LitInt |key#0@@59|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@107|) (LitInt |key#0@@59|) |mid#2@@1| (LitInt |hi#0@@12|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@107|) (- |mid#2@@1| 1)))) (LitInt |key#0@@59|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@107|) (LitInt |key#0@@59|) (LitInt |lo#0@@12|) |mid#2@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@353) (Lit |s#0@@107|) (LitInt |key#0@@59|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (ite (< (+ |lo#0@@12| 1) |hi#0@@12|) (let ((|mid#2@@2| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@107|) (LitInt (- |mid#2@@2| 1))))) (LitInt |key#0@@59|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@353) (Lit |s#0@@107|) (LitInt |key#0@@59|) |mid#2@@2| (LitInt |hi#0@@12|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@353) (Lit |s#0@@107|) (LitInt |key#0@@59|) (LitInt |lo#0@@12|) |mid#2@@2|))) |lo#0@@12|)))) :qid |totalord.482:12| :weight 3 :skolemid |2944| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@353) (Lit |s#0@@107|) (LitInt |key#0@@59|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|))) ))))
(assert (forall (($ly@@354 T@U) (|s#0@@108| T@U) (|key#0@@60| Int) ) (!  (=> (and (= (type $ly@@354) LayerTypeType) (= (type |s#0@@108|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@354) |s#0@@108| |key#0@@60|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@354 |s#0@@108| |key#0@@60|))) :qid |totalord.502:22| :skolemid |2945| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@354) |s#0@@108| |key#0@@60|)) )))
(assert (forall (($ly@@355 T@U) (|s#0@@109| T@U) (|key#0@@61| Int) ) (!  (=> (and (= (type $ly@@355) LayerTypeType) (= (type |s#0@@109|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@355 |s#0@@109| |key#0@@61|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@109| |key#0@@61|))) :qid |totalord.502:22| :skolemid |2946| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@355) |s#0@@109| |key#0@@61|)) )))
(assert  (=> true (forall (($ly@@356 T@U) (|s#0@@110| T@U) (|key#0@@62| Int) ) (!  (=> (and (and (= (type $ly@@356) LayerTypeType) (= (type |s#0@@110|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@110| |key#0@@62|) (and ($Is |s#0@@110| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@62|) (< |key#0@@62| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@356 |s#0@@110| |key#0@@62|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@356 |s#0@@110| |key#0@@62|) (|Seq#Length| |s#0@@110|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@356 |s#0@@110| |key#0@@62|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@110| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@356 |s#0@@110| |key#0@@62|) 1)))) |key#0@@62|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@356 |s#0@@110| |key#0@@62|) (|Seq#Length| |s#0@@110|)) (Byte__Order.__default.lt |key#0@@62| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@110| (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@356 |s#0@@110| |key#0@@62|)))))))) :qid |totalord.502:22| :skolemid |2947| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@356 |s#0@@110| |key#0@@62|)) ))))
(assert (forall (($ly@@357 T@U) (|s#0@@111| T@U) (|key#0@@63| Int) ) (!  (=> (and (and (= (type $ly@@357) LayerTypeType) (= (type |s#0@@111|) (SeqType BoxType))) (and ($Is |s#0@@111| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@63|) (< |key#0@@63| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@357 |s#0@@111| |key#0@@63|) true) (=> true (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@357 |s#0@@111| |key#0@@63|)))) :qid |totalord.502:22| :skolemid |2948| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@357 |s#0@@111| |key#0@@63|)) )))
(assert  (=> true (forall (($ly@@358 T@U) (|s#0@@112| T@U) (|key#0@@64| Int) ) (!  (=> (and (and (= (type $ly@@358) LayerTypeType) (= (type |s#0@@112|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@112| |key#0@@64|) (and ($Is |s#0@@112| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@64|) (< |key#0@@64| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@112| |key#0@@64| (LitInt 0) (+ (|Seq#Length| |s#0@@112|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@358) |s#0@@112| |key#0@@64|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@112| |key#0@@64| (LitInt 0) (+ (|Seq#Length| |s#0@@112|) 1))))) :qid |totalord.502:22| :skolemid |2949| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@358) |s#0@@112| |key#0@@64|)) ))))
(assert  (=> true (forall (($ly@@359 T@U) (|s#0@@113| T@U) (|key#0@@65| Int) ) (!  (=> (and (and (= (type $ly@@359) LayerTypeType) (= (type |s#0@@113|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@113|) (LitInt |key#0@@65|)) (and ($Is |s#0@@113| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@65|) (< |key#0@@65| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@113|) (LitInt |key#0@@65|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@113|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@359) (Lit |s#0@@113|) (LitInt |key#0@@65|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@113|) (LitInt |key#0@@65|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@113|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |2950| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@359) (Lit |s#0@@113|) (LitInt |key#0@@65|))) ))))
(assert  (=> true (forall ((|a#0@@89| T@U) (|b#0@@63| T@U) ) (!  (=> (and (and (= (type |a#0@@89|) (MapType0Type BoxType boolType)) (= (type |b#0@@63|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@89| |b#0@@63|) (and ($Is |a#0@@89| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@63| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalord.675:23| :skolemid |2951| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@89| |b#0@@63|)) ))))
(assert (forall ((|a#0@@90| T@U) (|b#0@@64| T@U) ) (!  (=> (and (and (= (type |a#0@@90|) (MapType0Type BoxType boolType)) (= (type |b#0@@64|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@90| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@64| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.SetAllLte#requires| |a#0@@90| |b#0@@64|) true) (=> true (|Byte__Order.__default.SetAllLte#requires| |a#0@@90| |b#0@@64|)))) :qid |totalord.675:23| :skolemid |2952| :pattern ( (|Byte__Order.__default.SetAllLte#requires| |a#0@@90| |b#0@@64|)) )))
(assert  (=> true (forall ((|a#0@@91| T@U) (|b#0@@65| T@U) ) (!  (=> (and (and (= (type |a#0@@91|) (MapType0Type BoxType boolType)) (= (type |b#0@@65|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@91| |b#0@@65|) (and ($Is |a#0@@91| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@65| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@1| Int) (|y#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@1|) (< |x#0@@1| 256)) (and (<= (LitInt 0) |y#0|) (< |y#0| 256))) (=> (U_2_bool (MapType0Select |b#0@@65| ($Box (int_2_U |y#0|)))) (|Byte__Order.__default.lte#canCall| |x#0@@1| |y#0|))) :qid |totalord.676:12| :skolemid |2953| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@1| |y#0|)) :pattern ( (MapType0Select |b#0@@65| ($Box (int_2_U |y#0|))) (MapType0Select |a#0@@91| ($Box (int_2_U |x#0@@1|)))) )) (and (=> (Byte__Order.__default.SetAllLte |a#0@@91| |b#0@@65|) (forall ((|x#0@@2| Int) (|y#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@2|) (< |x#0@@2| 256)) (and (<= (LitInt 0) |y#0@@0|) (< |y#0@@0| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@91| ($Box (int_2_U |x#0@@2|)))) (U_2_bool (MapType0Select |b#0@@65| ($Box (int_2_U |y#0@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@2| |y#0@@0|))) :qid |totalord.676:12| :skolemid |2954| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@2| |y#0@@0|)) :pattern ( (MapType0Select |b#0@@65| ($Box (int_2_U |y#0@@0|))) (MapType0Select |a#0@@91| ($Box (int_2_U |x#0@@2|)))) ))) (=> (forall ((|x#0@@3| Int) (|y#0@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@3|) (< |x#0@@3| 256)) (and (<= (LitInt 0) |y#0@@1|) (< |y#0@@1| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@91| ($Box (int_2_U |x#0@@3|)))) (U_2_bool (MapType0Select |b#0@@65| ($Box (int_2_U |y#0@@1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@1|))) :qid |totalord.676:12| :skolemid |2954| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@1|)) :pattern ( (MapType0Select |b#0@@65| ($Box (int_2_U |y#0@@1|))) (MapType0Select |a#0@@91| ($Box (int_2_U |x#0@@3|)))) )) (Byte__Order.__default.SetAllLte |a#0@@91| |b#0@@65|))))) :qid |totalord.675:23| :skolemid |2955| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@91| |b#0@@65|)) ))))
(assert  (=> true (forall ((|a#0@@92| T@U) (|b#0@@66| T@U) ) (!  (=> (and (and (= (type |a#0@@92|) (MapType0Type BoxType boolType)) (= (type |b#0@@66|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@92|) (Lit |b#0@@66|)) (and ($Is |a#0@@92| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@66| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1| Int) (|y#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1|) (< |x#1| 256)) (and (<= (LitInt 0) |y#1|) (< |y#1| 256))) (=> (U_2_bool (MapType0Select (Lit |b#0@@66|) ($Box (int_2_U |y#1|)))) (|Byte__Order.__default.lte#canCall| |x#1| |y#1|))) :qid |totalord.676:12| :skolemid |2956| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1| |y#1|)) :pattern ( (MapType0Select |b#0@@66| ($Box (int_2_U |y#1|))) (MapType0Select |a#0@@92| ($Box (int_2_U |x#1|)))) )) (and (=> (Byte__Order.__default.SetAllLte (Lit |a#0@@92|) (Lit |b#0@@66|)) (forall ((|x#1@@0| Int) (|y#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@0|) (< |x#1@@0| 256)) (and (<= (LitInt 0) |y#1@@0|) (< |y#1@@0| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@92|) ($Box (int_2_U |x#1@@0|)))) (U_2_bool (MapType0Select (Lit |b#0@@66|) ($Box (int_2_U |y#1@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|))) :qid |totalord.676:12| :skolemid |2957| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|)) :pattern ( (MapType0Select |b#0@@66| ($Box (int_2_U |y#1@@0|))) (MapType0Select |a#0@@92| ($Box (int_2_U |x#1@@0|)))) ))) (=> (forall ((|x#1@@1| Int) (|y#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@1|) (< |x#1@@1| 256)) (and (<= (LitInt 0) |y#1@@1|) (< |y#1@@1| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@92|) ($Box (int_2_U |x#1@@1|)))) (U_2_bool (MapType0Select (Lit |b#0@@66|) ($Box (int_2_U |y#1@@1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@1| |y#1@@1|))) :qid |totalord.676:12| :skolemid |2957| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@1| |y#1@@1|)) :pattern ( (MapType0Select |b#0@@66| ($Box (int_2_U |y#1@@1|))) (MapType0Select |a#0@@92| ($Box (int_2_U |x#1@@1|)))) )) (Byte__Order.__default.SetAllLte (Lit |a#0@@92|) (Lit |b#0@@66|)))))) :qid |totalord.675:23| :weight 3 :skolemid |2958| :pattern ( (Byte__Order.__default.SetAllLte (Lit |a#0@@92|) (Lit |b#0@@66|))) ))))
(assert  (=> true (forall ((|a#0@@93| T@U) (|b#0@@67| T@U) ) (!  (=> (and (and (= (type |a#0@@93|) (MapType0Type BoxType boolType)) (= (type |b#0@@67|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@93| |b#0@@67|) (and ($Is |a#0@@93| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@67| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalord.679:22| :skolemid |2959| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@93| |b#0@@67|)) ))))
(assert (forall ((|a#0@@94| T@U) (|b#0@@68| T@U) ) (!  (=> (and (and (= (type |a#0@@94|) (MapType0Type BoxType boolType)) (= (type |b#0@@68|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@94| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@68| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.SetAllLt#requires| |a#0@@94| |b#0@@68|) true) (=> true (|Byte__Order.__default.SetAllLt#requires| |a#0@@94| |b#0@@68|)))) :qid |totalord.679:22| :skolemid |2960| :pattern ( (|Byte__Order.__default.SetAllLt#requires| |a#0@@94| |b#0@@68|)) )))
(assert  (=> true (forall ((|a#0@@95| T@U) (|b#0@@69| T@U) ) (!  (=> (and (and (= (type |a#0@@95|) (MapType0Type BoxType boolType)) (= (type |b#0@@69|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@95| |b#0@@69|) (and ($Is |a#0@@95| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@69| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@4| Int) (|y#0@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@4|) (< |x#0@@4| 256)) (and (<= (LitInt 0) |y#0@@2|) (< |y#0@@2| 256))) (=> (U_2_bool (MapType0Select |b#0@@69| ($Box (int_2_U |y#0@@2|)))) (|Byte__Order.__default.lt#canCall| |x#0@@4| |y#0@@2|))) :qid |totalord.680:12| :skolemid |2961| :pattern ( (Byte__Order.__default.lt |x#0@@4| |y#0@@2|)) :pattern ( (MapType0Select |b#0@@69| ($Box (int_2_U |y#0@@2|))) (MapType0Select |a#0@@95| ($Box (int_2_U |x#0@@4|)))) )) (and (=> (Byte__Order.__default.SetAllLt |a#0@@95| |b#0@@69|) (forall ((|x#0@@5| Int) (|y#0@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@5|) (< |x#0@@5| 256)) (and (<= (LitInt 0) |y#0@@3|) (< |y#0@@3| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@95| ($Box (int_2_U |x#0@@5|)))) (U_2_bool (MapType0Select |b#0@@69| ($Box (int_2_U |y#0@@3|))))) (Byte__Order.__default.lt |x#0@@5| |y#0@@3|))) :qid |totalord.680:12| :skolemid |2962| :pattern ( (Byte__Order.__default.lt |x#0@@5| |y#0@@3|)) :pattern ( (MapType0Select |b#0@@69| ($Box (int_2_U |y#0@@3|))) (MapType0Select |a#0@@95| ($Box (int_2_U |x#0@@5|)))) ))) (=> (forall ((|x#0@@6| Int) (|y#0@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@6|) (< |x#0@@6| 256)) (and (<= (LitInt 0) |y#0@@4|) (< |y#0@@4| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@95| ($Box (int_2_U |x#0@@6|)))) (U_2_bool (MapType0Select |b#0@@69| ($Box (int_2_U |y#0@@4|))))) (Byte__Order.__default.lt |x#0@@6| |y#0@@4|))) :qid |totalord.680:12| :skolemid |2962| :pattern ( (Byte__Order.__default.lt |x#0@@6| |y#0@@4|)) :pattern ( (MapType0Select |b#0@@69| ($Box (int_2_U |y#0@@4|))) (MapType0Select |a#0@@95| ($Box (int_2_U |x#0@@6|)))) )) (Byte__Order.__default.SetAllLt |a#0@@95| |b#0@@69|))))) :qid |totalord.679:22| :skolemid |2963| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@95| |b#0@@69|)) ))))
(assert  (=> true (forall ((|a#0@@96| T@U) (|b#0@@70| T@U) ) (!  (=> (and (and (= (type |a#0@@96|) (MapType0Type BoxType boolType)) (= (type |b#0@@70|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@96|) (Lit |b#0@@70|)) (and ($Is |a#0@@96| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@70| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1@@2| Int) (|y#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@2|) (< |x#1@@2| 256)) (and (<= (LitInt 0) |y#1@@2|) (< |y#1@@2| 256))) (=> (U_2_bool (MapType0Select (Lit |b#0@@70|) ($Box (int_2_U |y#1@@2|)))) (|Byte__Order.__default.lt#canCall| |x#1@@2| |y#1@@2|))) :qid |totalord.680:12| :skolemid |2964| :pattern ( (Byte__Order.__default.lt |x#1@@2| |y#1@@2|)) :pattern ( (MapType0Select |b#0@@70| ($Box (int_2_U |y#1@@2|))) (MapType0Select |a#0@@96| ($Box (int_2_U |x#1@@2|)))) )) (and (=> (Byte__Order.__default.SetAllLt (Lit |a#0@@96|) (Lit |b#0@@70|)) (forall ((|x#1@@3| Int) (|y#1@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@3|) (< |x#1@@3| 256)) (and (<= (LitInt 0) |y#1@@3|) (< |y#1@@3| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@96|) ($Box (int_2_U |x#1@@3|)))) (U_2_bool (MapType0Select (Lit |b#0@@70|) ($Box (int_2_U |y#1@@3|))))) (Byte__Order.__default.lt |x#1@@3| |y#1@@3|))) :qid |totalord.680:12| :skolemid |2965| :pattern ( (Byte__Order.__default.lt |x#1@@3| |y#1@@3|)) :pattern ( (MapType0Select |b#0@@70| ($Box (int_2_U |y#1@@3|))) (MapType0Select |a#0@@96| ($Box (int_2_U |x#1@@3|)))) ))) (=> (forall ((|x#1@@4| Int) (|y#1@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@4|) (< |x#1@@4| 256)) (and (<= (LitInt 0) |y#1@@4|) (< |y#1@@4| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@96|) ($Box (int_2_U |x#1@@4|)))) (U_2_bool (MapType0Select (Lit |b#0@@70|) ($Box (int_2_U |y#1@@4|))))) (Byte__Order.__default.lt |x#1@@4| |y#1@@4|))) :qid |totalord.680:12| :skolemid |2965| :pattern ( (Byte__Order.__default.lt |x#1@@4| |y#1@@4|)) :pattern ( (MapType0Select |b#0@@70| ($Box (int_2_U |y#1@@4|))) (MapType0Select |a#0@@96| ($Box (int_2_U |x#1@@4|)))) )) (Byte__Order.__default.SetAllLt (Lit |a#0@@96|) (Lit |b#0@@70|)))))) :qid |totalord.679:22| :weight 3 :skolemid |2966| :pattern ( (Byte__Order.__default.SetAllLt (Lit |a#0@@96|) (Lit |b#0@@70|))) ))))
(assert (forall (($ly@@360 T@U) (|a#0@@97| Int) ) (!  (=> (= (type $ly@@360) LayerTypeType) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@360) |a#0@@97|) (Byte__Order.__default.NotMinimum $ly@@360 |a#0@@97|)) (=> (Byte__Order.__default.NotMinimum $ly@@360 |a#0@@97|) (Byte__Order.__default.NotMinimum ($LS $ly@@360) |a#0@@97|)))) :qid |totalord.696:23| :skolemid |2967| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@360) |a#0@@97|)) )))
(assert (forall (($ly@@361 T@U) (|a#0@@98| Int) ) (!  (=> (= (type $ly@@361) LayerTypeType) (and (=> (Byte__Order.__default.NotMinimum $ly@@361 |a#0@@98|) (Byte__Order.__default.NotMinimum $LZ |a#0@@98|)) (=> (Byte__Order.__default.NotMinimum $LZ |a#0@@98|) (Byte__Order.__default.NotMinimum $ly@@361 |a#0@@98|)))) :qid |totalord.696:23| :skolemid |2968| :pattern ( (Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@361) |a#0@@98|)) )))
(assert  (=> true (forall (($ly@@362 T@U) (|a#0@@99| Int) ) (!  (=> (and (= (type $ly@@362) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@99|) (and (<= (LitInt 0) |a#0@@99|) (< |a#0@@99| 256)))) true) :qid |totalord.696:23| :skolemid |2969| :pattern ( (Byte__Order.__default.NotMinimum $ly@@362 |a#0@@99|)) ))))
(assert (forall (($ly@@363 T@U) (|a#0@@100| Int) ) (!  (=> (= (type $ly@@363) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@100|) (< |a#0@@100| 256)) (and (=> (|Byte__Order.__default.NotMinimum#requires| $ly@@363 |a#0@@100|) true) (=> true (|Byte__Order.__default.NotMinimum#requires| $ly@@363 |a#0@@100|))))) :qid |totalord.696:23| :skolemid |2970| :pattern ( (|Byte__Order.__default.NotMinimum#requires| $ly@@363 |a#0@@100|)) )))
(assert  (=> true (forall (($ly@@364 T@U) (|a#0@@101| Int) ) (!  (=> (and (= (type $ly@@364) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@101|) (and (<= (LitInt 0) |a#0@@101|) (< |a#0@@101| 256)))) (and (forall ((|b#0@@71| Int) ) (!  (=> (and (<= (LitInt 0) |b#0@@71|) (< |b#0@@71| 256)) (|Byte__Order.__default.lt#canCall| |b#0@@71| |a#0@@101|)) :qid |totalord.697:12| :skolemid |2971| :pattern ( (Byte__Order.__default.lt |b#0@@71| |a#0@@101|)) )) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@364) |a#0@@101|) (exists ((|b#0@@72| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@72|) (< |b#0@@72| 256)) (Byte__Order.__default.lt |b#0@@72| |a#0@@101|)) :qid |totalord.697:12| :skolemid |2972| :pattern ( (Byte__Order.__default.lt |b#0@@72| |a#0@@101|)) ))) (=> (exists ((|b#0@@73| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@73|) (< |b#0@@73| 256)) (Byte__Order.__default.lt |b#0@@73| |a#0@@101|)) :qid |totalord.697:12| :skolemid |2972| :pattern ( (Byte__Order.__default.lt |b#0@@73| |a#0@@101|)) )) (Byte__Order.__default.NotMinimum ($LS $ly@@364) |a#0@@101|))))) :qid |totalord.696:23| :skolemid |2973| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@364) |a#0@@101|)) ))))
(assert  (=> true (forall (($ly@@365 T@U) (|a#0@@102| Int) ) (!  (=> (and (= (type $ly@@365) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| (LitInt |a#0@@102|)) (and (<= (LitInt 0) |a#0@@102|) (< |a#0@@102| 256)))) (and (forall ((|b#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |b#1@@1|) (< |b#1@@1| 256)) (|Byte__Order.__default.lt#canCall| |b#1@@1| (LitInt |a#0@@102|))) :qid |totalord.697:12| :skolemid |2974| :pattern ( (Byte__Order.__default.lt |b#1@@1| |a#0@@102|)) )) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@365) (LitInt |a#0@@102|)) (exists ((|b#1@@2| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@2|) (< |b#1@@2| 256)) (Byte__Order.__default.lt |b#1@@2| (LitInt |a#0@@102|))) :qid |totalord.697:12| :skolemid |2975| :pattern ( (Byte__Order.__default.lt |b#1@@2| |a#0@@102|)) ))) (=> (exists ((|b#1@@3| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@3|) (< |b#1@@3| 256)) (Byte__Order.__default.lt |b#1@@3| (LitInt |a#0@@102|))) :qid |totalord.697:12| :skolemid |2975| :pattern ( (Byte__Order.__default.lt |b#1@@3| |a#0@@102|)) )) (Byte__Order.__default.NotMinimum ($LS $ly@@365) (LitInt |a#0@@102|)))))) :qid |totalord.696:23| :weight 3 :skolemid |2976| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@365) (LitInt |a#0@@102|))) ))))
(assert (forall ((arg0@@461 T@U) (arg1@@239 T@U) (arg2@@173 Int) (arg3@@133 T@U) ) (! (= (type (Byte__Order.__default.MapPivotedUnion arg0@@461 arg1@@239 arg2@@173 arg3@@133)) (MapType BoxType BoxType)) :qid |funType:Byte__Order.__default.MapPivotedUnion| :pattern ( (Byte__Order.__default.MapPivotedUnion arg0@@461 arg1@@239 arg2@@173 arg3@@133)) )))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0| T@U) (|pivot#0| Int) (|right#0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0|) (MapType BoxType BoxType))) (= (type |right#0|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (and (and ($Is |left#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value)) (and (<= (LitInt 0) |pivot#0|) (< |pivot#0| 256))) ($Is |right#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |2977| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|)) ))))
(assert (forall ((Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@0| T@U) (|pivot#0@@0| Int) (|right#0@@0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@0|) (MapType BoxType BoxType))) (= (type |right#0@@0|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)) (and (<= (LitInt 0) |pivot#0@@0|) (< |pivot#0@@0| 256))) ($Is |right#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|) true) (=> true (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)))) :qid |unknown.0:0| :skolemid |2978| :pattern ( (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)) )))
(assert  (and (forall ((arg0@@462 T@U) (arg1@@240 Int) ) (! (= (type (|lambda#114| arg0@@462 arg1@@240)) (MapType0Type BoxType boolType)) :qid |funType:lambda#114| :pattern ( (|lambda#114| arg0@@462 arg1@@240)) )) (forall ((arg0@@463 T@U) (arg1@@241 T@U) (arg2@@174 Int) ) (! (= (type (|lambda#115| arg0@@463 arg1@@241 arg2@@174)) (MapType0Type BoxType boolType)) :qid |funType:lambda#115| :pattern ( (|lambda#115| arg0@@463 arg1@@241 arg2@@174)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@1| T@U) (|pivot#0@@1| Int) (|right#0@@1| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@1|) (MapType BoxType BoxType))) (= (type |right#0@@1|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (and (and ($Is |left#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1)) (and (<= (LitInt 0) |pivot#0@@1|) (< |pivot#0@@1| 256))) ($Is |right#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@89| Int) ) (!  (=> (and (<= (LitInt 0) |k#0@@89|) (< |k#0@@89| 256)) (|Byte__Order.__default.lt#canCall| |k#0@@89| |pivot#0@@1|)) :qid |totalord.716:57| :skolemid |2979| :pattern ( (Byte__Order.__default.lt |k#0@@89| |pivot#0@@1|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#114| Tclass.NativeTypes.byte |pivot#0@@1|))) (let ((|restricted_left#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#114| Tclass.NativeTypes.byte |pivot#0@@1|)))) (and (and (forall ((|k#1@@11| Int) ) (!  (=> (and (<= (LitInt 0) |k#1@@11|) (< |k#1@@11| 256)) (|Byte__Order.__default.lte#canCall| |pivot#0@@1| |k#1@@11|)) :qid |totalord.717:59| :skolemid |2980| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@1| |k#1@@11|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#115| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|))) (let ((|restricted_right#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#115| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0| |restricted_right#0|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (let ((|restricted_left#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#114| Tclass.NativeTypes.byte |pivot#0@@1|)))) (let ((|restricted_right#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#115| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@0| |restricted_right#0@@0|)))))) :qid |unknown.0:0| :skolemid |2981| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@2| T@U) (|pivot#0@@2| Int) (|right#0@@2| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@2|) (MapType BoxType BoxType))) (= (type |right#0@@2|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (and (and ($Is |left#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2)) (and (<= (LitInt 0) |pivot#0@@2|) (< |pivot#0@@2| 256))) ($Is |right#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@6| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@6|) (< |k#2@@6| 256)) (|Byte__Order.__default.lt#canCall| |k#2@@6| (LitInt |pivot#0@@2|))) :qid |totalord.716:57| :skolemid |2982| :pattern ( (Byte__Order.__default.lt |k#2@@6| |pivot#0@@2|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#114| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|)))) (let ((|restricted_left#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#114| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (and (and (forall ((|k#3| Int) ) (!  (=> (and (<= (LitInt 0) |k#3|) (< |k#3| 256)) (|Byte__Order.__default.lte#canCall| (LitInt |pivot#0@@2|) |k#3|)) :qid |totalord.717:59| :skolemid |2983| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@2| |k#3|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#115| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|)))) (let ((|restricted_right#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#115| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1| |restricted_right#1|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (let ((|restricted_left#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#114| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (let ((|restricted_right#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#115| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@0| |restricted_right#1@@0|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2984| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|))) ))))
(assert (forall ((arg0@@464 T@U) (arg1@@242 Int) ) (! (= (type (Byte__Order.__default.SetSuccessor arg0@@464 arg1@@242)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SetSuccessor| :pattern ( (Byte__Order.__default.SetSuccessor arg0@@464 arg1@@242)) )))
(assert  (=> true (forall ((|m#0@@81| T@U) (|key#0@@66| Int) ) (!  (=> (and (= (type |m#0@@81|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@81| |key#0@@66|) (and ($Is |m#0@@81| (TSet Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@66|) (< |key#0@@66| 256))))) ($Is (Byte__Order.__default.SetSuccessor |m#0@@81| |key#0@@66|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalord.721:25| :skolemid |2985| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@81| |key#0@@66|)) ))))
(assert (forall (($Heap@@40 T@U) (|m#0@@82| T@U) (|key#0@@67| Int) ) (!  (=> (and (= (type $Heap@@40) (MapType0Type refType MapType1Type)) (= (type |m#0@@82|) (MapType0Type BoxType boolType))) (=> (and (and ($IsGoodHeap $Heap@@40) ($Is |m#0@@82| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@67|) (< |key#0@@67| 256))) (and (=> (|Byte__Order.__default.SetSuccessor#requires| |m#0@@82| |key#0@@67|) true) (=> true (|Byte__Order.__default.SetSuccessor#requires| |m#0@@82| |key#0@@67|))))) :qid |totalord.721:12| :skolemid |2986| :pattern ( (|Byte__Order.__default.SetSuccessor#requires| |m#0@@82| |key#0@@67|) ($IsGoodHeap $Heap@@40)) )))
(assert (forall ((m@@76 T@U) (key Int) ) (!  (=> (and (= (type m@@76) (MapType0Type BoxType boolType)) (|$let#8$canCall| m@@76 key)) (and (and (<= (LitInt 0) (|$let#8_next| m@@76 key)) (< (|$let#8_next| m@@76 key) 256)) (and (and (U_2_bool (MapType0Select m@@76 ($Box (int_2_U (|$let#8_next| m@@76 key))))) (Byte__Order.__default.lt key (|$let#8_next| m@@76 key))) (forall ((|other#1| Int) ) (!  (=> (and (<= (LitInt 0) |other#1|) (< |other#1| 256)) (=> (and (and (U_2_bool (MapType0Select m@@76 ($Box (int_2_U |other#1|)))) (not (= |other#1| (|$let#8_next| m@@76 key)))) (Byte__Order.__default.lt key |other#1|)) (Byte__Order.__default.lt (|$let#8_next| m@@76 key) |other#1|))) :qid |totalord.726:18| :skolemid |2991| :pattern ( (Byte__Order.__default.lt (|$let#8_next| m@@76 key) |other#1|)) :pattern ( (Byte__Order.__default.lt key |other#1|)) :pattern ( (MapType0Select m@@76 ($Box (int_2_U |other#1|)))) ))))) :qid |totalord.723:8| :skolemid |2992| :pattern ( (|$let#8_next| m@@76 key)) )))
(assert  (=> true (forall (($Heap@@41 T@U) (|m#0@@83| T@U) (|key#0@@68| Int) ) (!  (=> (and (and (= (type $Heap@@41) (MapType0Type refType MapType1Type)) (= (type |m#0@@83|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@83| |key#0@@68|) (and (and ($IsGoodHeap $Heap@@41) ($Is |m#0@@83| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@68|) (< |key#0@@68| 256))))) (and (and (forall ((|next#0| Int) ) (!  (=> (and (<= (LitInt 0) |next#0|) (< |next#0| 256)) (and (=> (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |next#0|)))) (|Byte__Order.__default.lt#canCall| |key#0@@68| |next#0|)) (=> (and (|Byte__Order.__default.lt#canCall| |key#0@@68| |next#0|) (Byte__Order.__default.lt |key#0@@68| |next#0|)) (forall ((|other#0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0|) (< |other#0| 256)) (and (=> (not (= |other#0| |next#0|)) (|Byte__Order.__default.lt#canCall| |key#0@@68| |other#0|)) (=> (and (|Byte__Order.__default.lt#canCall| |key#0@@68| |other#0|) (Byte__Order.__default.lt |key#0@@68| |other#0|)) (|Byte__Order.__default.lt#canCall| |next#0| |other#0|)))) :qid |totalord.726:18| :skolemid |2987| :pattern ( (Byte__Order.__default.lt |next#0| |other#0|)) :pattern ( (Byte__Order.__default.lt |key#0@@68| |other#0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |other#0|)))) ))))) :qid |totalord.723:8| :skolemid |2988| :pattern ( (Byte__Order.__default.lt |key#0@@68| |next#0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |next#0|)))) )) (=> (exists ((|next#0@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@0|) (< |next#0@@0| 256)) (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |next#0@@0|)))) (Byte__Order.__default.lt |key#0@@68| |next#0@@0|)) (forall ((|other#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@0|) (< |other#0@@0| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |other#0@@0|)))) (not (= |other#0@@0| |next#0@@0|))) (Byte__Order.__default.lt |key#0@@68| |other#0@@0|)) (Byte__Order.__default.lt |next#0@@0| |other#0@@0|))) :qid |totalord.726:18| :skolemid |2989| :pattern ( (Byte__Order.__default.lt |next#0@@0| |other#0@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@68| |other#0@@0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |other#0@@0|)))) )))) :qid |totalord.723:8| :skolemid |2990| :pattern ( (Byte__Order.__default.lt |key#0@@68| |next#0@@0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |next#0@@0|)))) )) (|$let#8$canCall| |m#0@@83| |key#0@@68|))) (= (Byte__Order.__default.SetSuccessor |m#0@@83| |key#0@@68|) (ite (exists ((|next#0@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@1|) (< |next#0@@1| 256)) (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |next#0@@1|)))) (Byte__Order.__default.lt |key#0@@68| |next#0@@1|)) (forall ((|other#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@1|) (< |other#0@@1| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |other#0@@1|)))) (not (= |other#0@@1| |next#0@@1|))) (Byte__Order.__default.lt |key#0@@68| |other#0@@1|)) (Byte__Order.__default.lt |next#0@@1| |other#0@@1|))) :qid |totalord.726:18| :skolemid |2993| :pattern ( (Byte__Order.__default.lt |next#0@@1| |other#0@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@68| |other#0@@1|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |other#0@@1|)))) )))) :qid |totalord.723:8| :skolemid |2994| :pattern ( (Byte__Order.__default.lt |key#0@@68| |next#0@@1|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |next#0@@1|)))) )) (let ((|next#1| (|$let#8_next| |m#0@@83| |key#0@@68|))) (|#Options.Option.Some| ($Box (int_2_U |next#1|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |2995| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@83| |key#0@@68|) ($IsGoodHeap $Heap@@41)) ))))
(assert  (=> true (forall (($Heap@@42 T@U) (|m#0@@84| T@U) (|key#0@@69| Int) ) (!  (=> (and (and (= (type $Heap@@42) (MapType0Type refType MapType1Type)) (= (type |m#0@@84|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@84|) (LitInt |key#0@@69|)) (and (and ($IsGoodHeap $Heap@@42) ($Is |m#0@@84| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@69|) (< |key#0@@69| 256))))) (and (and (forall ((|next#2| Int) ) (!  (=> (and (<= (LitInt 0) |next#2|) (< |next#2| 256)) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |next#2|)))) (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@69|) |next#2|)) (=> (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@69|) |next#2|) (Byte__Order.__default.lt (LitInt |key#0@@69|) |next#2|)) (forall ((|other#2| Int) ) (!  (=> (and (<= (LitInt 0) |other#2|) (< |other#2| 256)) (and (=> (not (= |other#2| |next#2|)) (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@69|) |other#2|)) (=> (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@69|) |other#2|) (Byte__Order.__default.lt (LitInt |key#0@@69|) |other#2|)) (|Byte__Order.__default.lt#canCall| |next#2| |other#2|)))) :qid |totalord.726:18| :skolemid |2996| :pattern ( (Byte__Order.__default.lt |next#2| |other#2|)) :pattern ( (Byte__Order.__default.lt |key#0@@69| |other#2|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |other#2|)))) ))))) :qid |totalord.723:8| :skolemid |2997| :pattern ( (Byte__Order.__default.lt |key#0@@69| |next#2|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |next#2|)))) )) (=> (exists ((|next#2@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@0|) (< |next#2@@0| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |next#2@@0|)))) (Byte__Order.__default.lt (LitInt |key#0@@69|) |next#2@@0|)) (forall ((|other#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@0|) (< |other#2@@0| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |other#2@@0|)))) (not (= |other#2@@0| |next#2@@0|))) (Byte__Order.__default.lt (LitInt |key#0@@69|) |other#2@@0|)) (Byte__Order.__default.lt |next#2@@0| |other#2@@0|))) :qid |totalord.726:18| :skolemid |2998| :pattern ( (Byte__Order.__default.lt |next#2@@0| |other#2@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@69| |other#2@@0|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |other#2@@0|)))) )))) :qid |totalord.723:8| :skolemid |2999| :pattern ( (Byte__Order.__default.lt |key#0@@69| |next#2@@0|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |next#2@@0|)))) )) (|$let#8$canCall| (Lit |m#0@@84|) (LitInt |key#0@@69|)))) (= (Byte__Order.__default.SetSuccessor (Lit |m#0@@84|) (LitInt |key#0@@69|)) (ite (exists ((|next#2@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@1|) (< |next#2@@1| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |next#2@@1|)))) (Byte__Order.__default.lt (LitInt |key#0@@69|) |next#2@@1|)) (forall ((|other#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@1|) (< |other#2@@1| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |other#2@@1|)))) (not (= |other#2@@1| |next#2@@1|))) (Byte__Order.__default.lt (LitInt |key#0@@69|) |other#2@@1|)) (Byte__Order.__default.lt |next#2@@1| |other#2@@1|))) :qid |totalord.726:18| :skolemid |3000| :pattern ( (Byte__Order.__default.lt |next#2@@1| |other#2@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@69| |other#2@@1|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |other#2@@1|)))) )))) :qid |totalord.723:8| :skolemid |3001| :pattern ( (Byte__Order.__default.lt |key#0@@69| |next#2@@1|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |next#2@@1|)))) )) (let ((|next#3| (|$let#8_next| (Lit |m#0@@84|) (LitInt |key#0@@69|)))) (|#Options.Option.Some| ($Box (int_2_U |next#3|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |3002| :pattern ( (Byte__Order.__default.SetSuccessor (Lit |m#0@@84|) (LitInt |key#0@@69|)) ($IsGoodHeap $Heap@@42)) ))))
(assert (forall ((arg0@@465 T@U) (arg1@@243 T@U) (arg2@@175 Int) ) (! (= (type (Byte__Order.__default.MapSuccessor arg0@@465 arg1@@243 arg2@@175)) DatatypeTypeType) :qid |funType:Byte__Order.__default.MapSuccessor| :pattern ( (Byte__Order.__default.MapSuccessor arg0@@465 arg1@@243 arg2@@175)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V T@U) (|m#0@@85| T@U) (|key#0@@70| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@85|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V |m#0@@85| |key#0@@70|) (and ($Is |m#0@@85| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V)) (and (<= (LitInt 0) |key#0@@70|) (< |key#0@@70| 256))))) ($Is (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@85| |key#0@@70|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |3003| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@85| |key#0@@70|)) ))))
(assert (forall ((Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@86| T@U) (|key#0@@71| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@86|) (MapType BoxType BoxType))) (and ($Is |m#0@@86| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@0)) (and (<= (LitInt 0) |key#0@@71|) (< |key#0@@71| 256)))) (and (=> (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@86| |key#0@@71|) true) (=> true (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@86| |key#0@@71|)))) :qid |unknown.0:0| :skolemid |3004| :pattern ( (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@86| |key#0@@71|)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@87| T@U) (|key#0@@72| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@87|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@1 |m#0@@87| |key#0@@72|) (and ($Is |m#0@@87| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@1)) (and (<= (LitInt 0) |key#0@@72|) (< |key#0@@72| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@87|) |key#0@@72|) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@87| |key#0@@72|) (Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@87|) |key#0@@72|)))) :qid |unknown.0:0| :skolemid |3005| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@87| |key#0@@72|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@88| T@U) (|key#0@@73| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@88|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@88|) (LitInt |key#0@@73|)) (and ($Is |m#0@@88| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@2)) (and (<= (LitInt 0) |key#0@@73|) (< |key#0@@73| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@88|))) (LitInt |key#0@@73|)) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@88|) (LitInt |key#0@@73|)) (Lit (Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@88|))) (LitInt |key#0@@73|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3006| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@88|) (LitInt |key#0@@73|))) ))))
(assert (forall ((arg0@@466 T@U) (arg1@@244 Int) ) (! (= (type (Byte__Order.__default.SeqSuccessor arg0@@466 arg1@@244)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SeqSuccessor| :pattern ( (Byte__Order.__default.SeqSuccessor arg0@@466 arg1@@244)) )))
(assert  (=> true (forall ((|m#0@@89| T@U) (|key#0@@74| Int) ) (!  (=> (and (= (type |m#0@@89|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@89| |key#0@@74|) (and ($Is |m#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@74|) (< |key#0@@74| 256))))) ($Is (Byte__Order.__default.SeqSuccessor |m#0@@89| |key#0@@74|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalord.737:25| :skolemid |3007| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@89| |key#0@@74|)) ))))
(assert (forall ((|m#0@@90| T@U) (|key#0@@75| Int) ) (!  (=> (= (type |m#0@@90|) (SeqType BoxType)) (=> (and ($Is |m#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@75|) (< |key#0@@75| 256))) (and (=> (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@90| |key#0@@75|) true) (=> true (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@90| |key#0@@75|))))) :qid |totalord.737:25| :skolemid |3008| :pattern ( (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@90| |key#0@@75|)) )))
(assert (forall ((arg0@@467 T@U) (arg1@@245 T@U) ) (! (= (type (|lambda#126| arg0@@467 arg1@@245)) (MapType0Type BoxType boolType)) :qid |funType:lambda#126| :pattern ( (|lambda#126| arg0@@467 arg1@@245)) )))
(assert  (=> true (forall ((|m#0@@91| T@U) (|key#0@@76| Int) ) (!  (=> (and (= (type |m#0@@91|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@91| |key#0@@76|) (and ($Is |m#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@76|) (< |key#0@@76| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#126| Tclass.NativeTypes.byte |m#0@@91|) |key#0@@76|) (= (Byte__Order.__default.SeqSuccessor |m#0@@91| |key#0@@76|) (Byte__Order.__default.SetSuccessor (|lambda#126| Tclass.NativeTypes.byte |m#0@@91|) |key#0@@76|)))) :qid |totalord.737:25| :skolemid |3009| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@91| |key#0@@76|)) ))))
(assert  (=> true (forall ((|m#0@@92| T@U) (|key#0@@77| Int) ) (!  (=> (and (= (type |m#0@@92|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@92|) (LitInt |key#0@@77|)) (and ($Is |m#0@@92| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@77|) (< |key#0@@77| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#126| Tclass.NativeTypes.byte |m#0@@92|) (LitInt |key#0@@77|)) (= (Byte__Order.__default.SeqSuccessor (Lit |m#0@@92|) (LitInt |key#0@@77|)) (Byte__Order.__default.SetSuccessor (|lambda#126| Tclass.NativeTypes.byte |m#0@@92|) (LitInt |key#0@@77|))))) :qid |totalord.737:25| :weight 3 :skolemid |3010| :pattern ( (Byte__Order.__default.SeqSuccessor (Lit |m#0@@92|) (LitInt |key#0@@77|))) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@366 T@U) (|s#0@@114| T@U) (|m#0@@93| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@366) LayerTypeType)) (= (type |s#0@@114|) (SeqType BoxType))) (= (type |m#0@@93|) (MapType BoxType BoxType))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@366) |s#0@@114| |m#0@@93|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@366 |s#0@@114| |m#0@@93|)) (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@366 |s#0@@114| |m#0@@93|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@366) |s#0@@114| |m#0@@93|)))) :qid |unknown.0:0| :skolemid |3011| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@366) |s#0@@114| |m#0@@93|)) )))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@367 T@U) (|s#0@@115| T@U) (|m#0@@94| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@367) LayerTypeType)) (= (type |s#0@@115|) (SeqType BoxType))) (= (type |m#0@@94|) (MapType BoxType BoxType))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@367 |s#0@@115| |m#0@@94|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@115| |m#0@@94|)) (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@115| |m#0@@94|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@367 |s#0@@115| |m#0@@94|)))) :qid |unknown.0:0| :skolemid |3012| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@367) |s#0@@115| |m#0@@94|)) )))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@368 T@U) (|s#0@@116| T@U) (|m#0@@95| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@368) LayerTypeType)) (= (type |s#0@@116|) (SeqType BoxType))) (= (type |m#0@@95|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@116| |m#0@@95|) (and ($Is |s#0@@116| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@95| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |3013| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@1 $ly@@368 |s#0@@116| |m#0@@95|)) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@369 T@U) (|s#0@@117| T@U) (|m#0@@96| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@369) LayerTypeType)) (= (type |s#0@@117|) (SeqType BoxType))) (= (type |m#0@@96|) (MapType BoxType BoxType))) (and ($Is |s#0@@117| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@96| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@369 |s#0@@117| |m#0@@96|) true) (=> true (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@369 |s#0@@117| |m#0@@96|)))) :qid |unknown.0:0| :skolemid |3014| :pattern ( (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@369 |s#0@@117| |m#0@@96|)) )))
(assert  (and (= (type StartFuel_Sequences._default.Unzip) LayerTypeType) (= (type StartFuel_Byte_Order._default.IsStrictlySorted) LayerTypeType)))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@370 T@U) (|s#0@@118| T@U) (|m#0@@97| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@370) LayerTypeType)) (= (type |s#0@@118|) (SeqType BoxType))) (= (type |m#0@@97|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@118| |m#0@@97|) (and ($Is |s#0@@118| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@97| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@118|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@118|))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@118|))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@118|)))) (forall ((|i#0@@99| Int) ) (!  (and (=> (< |i#0@@99| (|Seq#Length| |s#0@@118|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@99|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@99|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@99|)))))) (=> (< |i#0@@99| (|Seq#Length| |s#0@@118|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@99|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@99|))))))) :qid |totalord.761:16| :skolemid |3015| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@99|))) )))) (=> (and (forall ((|i#0@@100| Int) ) (!  (and (=> (< |i#0@@100| (|Seq#Length| |s#0@@118|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@100|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@100|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@100|)))))) (=> (< |i#0@@100| (|Seq#Length| |s#0@@118|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@100|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@100|))))))) :qid |totalord.761:16| :skolemid |3018| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@100|))) )) (forall ((|i#0@@101| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@101|) (< |i#0@@101| (|Seq#Length| |s#0@@118|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@101|)))))) (=> (and (<= (LitInt 0) |i#0@@101|) (< |i#0@@101| (|Seq#Length| |s#0@@118|))) (= (MapType0Select (|Map#Elements| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@101|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@101|))))))) :qid |totalord.761:16| :skolemid |3019| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@101|))) ))) (forall ((|key#0@@78| T@U) ) (!  (=> (= (type |key#0@@78|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@78|)) (< (U_2_int |key#0@@78|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#0@@78|))) (forall ((|i#1@@39| Int) ) (!  (and (=> (< |i#1@@39| (|Seq#Length| |s#0@@118|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@39|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@39|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@39|))))) (U_2_int |key#0@@78|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@39|))))) :qid |totalord.762:44| :skolemid |3016| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@39|))) ))))) :qid |totalord.762:16| :skolemid |3017| :pattern ( (MapType0Select (|Map#Elements| |m#0@@97|) ($Box |key#0@@78|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#0@@78|))) )))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@370) |s#0@@118| |m#0@@97|) (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@118|)))) (forall ((|i#0@@102| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@102|) (< |i#0@@102| (|Seq#Length| |s#0@@118|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@102|)))))) (=> (and (<= (LitInt 0) |i#0@@102|) (< |i#0@@102| (|Seq#Length| |s#0@@118|))) (= (MapType0Select (|Map#Elements| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@102|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@102|))))))) :qid |totalord.761:16| :skolemid |3020| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@102|))) ))) (forall ((|key#0@@79| T@U) ) (!  (=> (= (type |key#0@@79|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@79|)) (< (U_2_int |key#0@@79|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#0@@79|))) (exists ((|i#1@@40| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@40|) (< |i#1@@40| (|Seq#Length| |s#0@@118|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@40|))))) (U_2_int |key#0@@79|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@40|))) (MapType0Select (|Map#Elements| |m#0@@97|) ($Box |key#0@@79|)))) :qid |totalord.762:44| :skolemid |3021| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@40|))) ))))) :qid |totalord.762:16| :skolemid |3022| :pattern ( (MapType0Select (|Map#Elements| |m#0@@97|) ($Box |key#0@@79|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#0@@79|))) )))) (=> (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@118|)))) (forall ((|i#0@@103| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@103|) (< |i#0@@103| (|Seq#Length| |s#0@@118|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@103|)))))) (=> (and (<= (LitInt 0) |i#0@@103|) (< |i#0@@103| (|Seq#Length| |s#0@@118|))) (= (MapType0Select (|Map#Elements| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@103|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@103|))))))) :qid |totalord.761:16| :skolemid |3020| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#0@@103|))) ))) (forall ((|key#0@@80| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@80|) (< |key#0@@80| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) ($Box (int_2_U |key#0@@80|)))) (exists ((|i#1@@41| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@41|) (< |i#1@@41| (|Seq#Length| |s#0@@118|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@41|))))) |key#0@@80|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@41|))) (MapType0Select (|Map#Elements| |m#0@@97|) ($Box (int_2_U |key#0@@80|))))) :qid |totalord.762:44| :skolemid |3021| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@118| |i#1@@41|))) )))) :qid |totalord.762:16| :skolemid |3022| :pattern ( (MapType0Select (|Map#Elements| |m#0@@97|) ($Box (int_2_U |key#0@@80|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@97|) ($Box (int_2_U |key#0@@80|)))) ))) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@370) |s#0@@118| |m#0@@97|))))) :qid |unknown.0:0| :skolemid |3023| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@370) |s#0@@118| |m#0@@97|)) ))))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@371 T@U) (|s#0@@119| T@U) (|m#0@@98| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@371) LayerTypeType)) (= (type |s#0@@119|) (SeqType BoxType))) (= (type |m#0@@98|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@119|) (Lit |m#0@@98|)) (and ($Is |s#0@@119| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@98| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@119|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@119|)))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@119|)))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@119|))))) (forall ((|i#2@@24| Int) ) (!  (and (=> (< |i#2@@24| (|Seq#Length| (Lit |s#0@@119|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@24|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@24|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@24|)))))) (=> (< |i#2@@24| (|Seq#Length| (Lit |s#0@@119|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@24|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@24|))))))) :qid |totalord.761:16| :skolemid |3024| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@119| |i#2@@24|))) )))) (=> (and (forall ((|i#2@@25| Int) ) (!  (and (=> (< |i#2@@25| (|Seq#Length| (Lit |s#0@@119|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@25|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@25|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@25|)))))) (=> (< |i#2@@25| (|Seq#Length| (Lit |s#0@@119|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@25|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@25|))))))) :qid |totalord.761:16| :skolemid |3027| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@119| |i#2@@25|))) )) (forall ((|i#2@@26| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@26|) (< |i#2@@26| (|Seq#Length| (Lit |s#0@@119|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@26|)))))) (=> (and (<= (LitInt 0) |i#2@@26|) (< |i#2@@26| (|Seq#Length| (Lit |s#0@@119|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@26|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@26|))))))) :qid |totalord.761:16| :skolemid |3028| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@119| |i#2@@26|))) ))) (forall ((|key#1@@9| T@U) ) (!  (=> (= (type |key#1@@9|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@9|)) (< (U_2_int |key#1@@9|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#1@@9|))) (forall ((|i#3@@15| Int) ) (!  (and (=> (< |i#3@@15| (|Seq#Length| (Lit |s#0@@119|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#3@@15|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#3@@15|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#3@@15|))))) (U_2_int |key#1@@9|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#3@@15|))))) :qid |totalord.762:44| :skolemid |3025| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@119| |i#3@@15|))) ))))) :qid |totalord.762:16| :skolemid |3026| :pattern ( (MapType0Select (|Map#Elements| |m#0@@98|) ($Box |key#1@@9|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#1@@9|))) )))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@371) (Lit |s#0@@119|) (Lit |m#0@@98|)) (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@119|))))) (forall ((|i#2@@27| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@27|) (< |i#2@@27| (|Seq#Length| (Lit |s#0@@119|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@27|)))))) (=> (and (<= (LitInt 0) |i#2@@27|) (< |i#2@@27| (|Seq#Length| (Lit |s#0@@119|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@27|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@27|))))))) :qid |totalord.761:16| :skolemid |3029| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@119| |i#2@@27|))) ))) (forall ((|key#1@@10| T@U) ) (!  (=> (= (type |key#1@@10|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@10|)) (< (U_2_int |key#1@@10|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#1@@10|))) (exists ((|i#3@@16| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@16|) (< |i#3@@16| (|Seq#Length| (Lit |s#0@@119|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#3@@16|))))) (U_2_int |key#1@@10|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#3@@16|))) (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) ($Box |key#1@@10|)))) :qid |totalord.762:44| :skolemid |3030| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@119| |i#3@@16|))) ))))) :qid |totalord.762:16| :skolemid |3031| :pattern ( (MapType0Select (|Map#Elements| |m#0@@98|) ($Box |key#1@@10|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#1@@10|))) )))) (=> (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@119|))))) (forall ((|i#2@@28| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@28|) (< |i#2@@28| (|Seq#Length| (Lit |s#0@@119|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@28|)))))) (=> (and (<= (LitInt 0) |i#2@@28|) (< |i#2@@28| (|Seq#Length| (Lit |s#0@@119|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@28|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#2@@28|))))))) :qid |totalord.761:16| :skolemid |3029| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@119| |i#2@@28|))) ))) (forall ((|key#1@@11| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@11|) (< |key#1@@11| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) ($Box (int_2_U |key#1@@11|)))) (exists ((|i#3@@17| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@17|) (< |i#3@@17| (|Seq#Length| (Lit |s#0@@119|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#3@@17|))))) |key#1@@11|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@119|) |i#3@@17|))) (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) ($Box (int_2_U |key#1@@11|))))) :qid |totalord.762:44| :skolemid |3030| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@119| |i#3@@17|))) )))) :qid |totalord.762:16| :skolemid |3031| :pattern ( (MapType0Select (|Map#Elements| |m#0@@98|) ($Box (int_2_U |key#1@@11|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@98|) ($Box (int_2_U |key#1@@11|)))) ))) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@371) (Lit |s#0@@119|) (Lit |m#0@@98|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3032| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@371) (Lit |s#0@@119|) (Lit |m#0@@98|))) ))))
(assert (forall (($ly@@372 T@U) (|s#0@@120| T@U) ) (!  (=> (and (= (type $ly@@372) LayerTypeType) (= (type |s#0@@120|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum ($LS $ly@@372) |s#0@@120|) (Byte__Order.__default.minimum $ly@@372 |s#0@@120|))) :qid |totalord.765:22| :skolemid |3033| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@372) |s#0@@120|)) )))
(assert (forall (($ly@@373 T@U) (|s#0@@121| T@U) ) (!  (=> (and (= (type $ly@@373) LayerTypeType) (= (type |s#0@@121|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum $ly@@373 |s#0@@121|) (Byte__Order.__default.minimum $LZ |s#0@@121|))) :qid |totalord.765:22| :skolemid |3034| :pattern ( (Byte__Order.__default.minimum (AsFuelBottom $ly@@373) |s#0@@121|)) )))
(assert  (=> true (forall (($ly@@374 T@U) (|s#0@@122| T@U) ) (!  (=> (and (and (= (type $ly@@374) LayerTypeType) (= (type |s#0@@122|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@122|) (and ($Is |s#0@@122| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@122|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@122| ($Box (int_2_U (Byte__Order.__default.minimum $ly@@374 |s#0@@122|))))) (forall ((|y#0@@5| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@5|) (< |y#0@@5| 256)) (U_2_bool (MapType0Select |s#0@@122| ($Box (int_2_U |y#0@@5|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@374 |s#0@@122|) |y#0@@5|)) :qid |totalord.768:18| :skolemid |3035| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@374 |s#0@@122|) |y#0@@5|)) :pattern ( (MapType0Select |s#0@@122| ($Box (int_2_U |y#0@@5|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.minimum $ly@@374 |s#0@@122|)) (< (Byte__Order.__default.minimum $ly@@374 |s#0@@122|) 256)))) :qid |totalord.765:22| :skolemid |3036| :pattern ( (Byte__Order.__default.minimum $ly@@374 |s#0@@122|)) ))))
(assert (forall (($ly@@375 T@U) ($Heap@@43 T@U) (|s#0@@123| T@U) ) (!  (=> (and (and (and (= (type $ly@@375) LayerTypeType) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |s#0@@123|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@43) ($Is |s#0@@123| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.minimum#requires| $ly@@375 |s#0@@123|) (>= (|Set#Card| |s#0@@123|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@123|) (LitInt 1)) (|Byte__Order.__default.minimum#requires| $ly@@375 |s#0@@123|)))) :qid |totalord.765:22| :skolemid |3037| :pattern ( (|Byte__Order.__default.minimum#requires| $ly@@375 |s#0@@123|) ($IsGoodHeap $Heap@@43)) )))
(assert (forall ((s@@46 T@U) ) (!  (=> (and (= (type s@@46) (MapType0Type BoxType boolType)) (|$let#11$canCall| s@@46)) (and (and (<= (LitInt 0) (|$let#11_a| s@@46)) (< (|$let#11_a| s@@46) 256)) (U_2_bool (MapType0Select s@@46 ($Box (int_2_U (|$let#11_a| s@@46))))))) :qid |totalord.772:5| :skolemid |3038| :pattern ( (|$let#11_a| s@@46)) )))
(assert  (=> true (forall (($ly@@376 T@U) ($Heap@@44 T@U) (|s#0@@124| T@U) ) (!  (=> (and (and (and (= (type $ly@@376) LayerTypeType) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |s#0@@124|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@124|) (and (and ($IsGoodHeap $Heap@@44) ($Is |s#0@@124| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@124|) (LitInt 1))))) (and (and (|$let#11$canCall| |s#0@@124|) (let ((|s'#0@@25| (|Set#Difference| |s#0@@124| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#11_a| |s#0@@124|))))))) (=> (not (|Set#Equal| |s'#0@@25| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#0@@25|) (let ((|m'#0@@10| (Byte__Order.__default.minimum $ly@@376 |s'#0@@25|))) (|Byte__Order.__default.lt#canCall| (|$let#11_a| |s#0@@124|) |m'#0@@10|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@376) |s#0@@124|) (let ((|a#0@@103| (|$let#11_a| |s#0@@124|))) (let ((|s'#1| (|Set#Difference| |s#0@@124| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@103|)))))) (ite (|Set#Equal| |s'#1| (|Set#Empty| BoxType)) |a#0@@103| (let ((|m'#1@@1| (Byte__Order.__default.minimum $ly@@376 |s'#1|))) (ite (Byte__Order.__default.lt |a#0@@103| |m'#1@@1|) |a#0@@103| |m'#1@@1|)))))))) :qid |totalord.765:22| :skolemid |3039| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@376) |s#0@@124|) ($IsGoodHeap $Heap@@44)) ))))
(assert  (=> true (forall (($ly@@377 T@U) ($Heap@@45 T@U) (|s#0@@125| T@U) ) (!  (=> (and (and (and (= (type $ly@@377) LayerTypeType) (= (type $Heap@@45) (MapType0Type refType MapType1Type))) (= (type |s#0@@125|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@125|)) (and (and ($IsGoodHeap $Heap@@45) ($Is |s#0@@125| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@125|)) (LitInt 1))))) (and (and (|$let#11$canCall| (Lit |s#0@@125|)) (let ((|s'#2| (|Set#Difference| |s#0@@125| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#11_a| (Lit |s#0@@125|)))))))) (=> (not (|Set#Equal| |s'#2| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#2|) (let ((|m'#2@@0| (Byte__Order.__default.minimum ($LS $ly@@377) |s'#2|))) (|Byte__Order.__default.lt#canCall| (|$let#11_a| (Lit |s#0@@125|)) |m'#2@@0|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@377) (Lit |s#0@@125|)) (let ((|a#1@@1| (|$let#11_a| (Lit |s#0@@125|)))) (let ((|s'#3| (|Set#Difference| |s#0@@125| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@1|)))))) (ite (|Set#Equal| |s'#3| (|Set#Empty| BoxType)) |a#1@@1| (let ((|m'#3| (Byte__Order.__default.minimum ($LS $ly@@377) |s'#3|))) (ite (Byte__Order.__default.lt |a#1@@1| |m'#3|) |a#1@@1| |m'#3|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |3040| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@377) (Lit |s#0@@125|)) ($IsGoodHeap $Heap@@45)) ))))
(assert (forall ((arg0@@468 T@U) (arg1@@246 T@U) ) (! (= (type (Byte__Order.__default.minimumOpt arg0@@468 arg1@@246)) DatatypeTypeType) :qid |funType:Byte__Order.__default.minimumOpt| :pattern ( (Byte__Order.__default.minimumOpt arg0@@468 arg1@@246)) )))
(assert (forall (($ly@@378 T@U) (|s#0@@126| T@U) ) (!  (=> (and (= (type $ly@@378) LayerTypeType) (= (type |s#0@@126|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@378) |s#0@@126|) (Byte__Order.__default.minimumOpt $ly@@378 |s#0@@126|))) :qid |totalord.788:22| :skolemid |3041| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@378) |s#0@@126|)) )))
(assert (forall (($ly@@379 T@U) (|s#0@@127| T@U) ) (!  (=> (and (= (type $ly@@379) LayerTypeType) (= (type |s#0@@127|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt $ly@@379 |s#0@@127|) (Byte__Order.__default.minimumOpt $LZ |s#0@@127|))) :qid |totalord.788:22| :skolemid |3042| :pattern ( (Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@379) |s#0@@127|)) )))
(assert  (=> true (forall (($ly@@380 T@U) (|s#0@@128| T@U) ) (!  (=> (and (and (= (type $ly@@380) LayerTypeType) (= (type |s#0@@128|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@128|) ($Is |s#0@@128| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@380 |s#0@@128|)) (U_2_bool (MapType0Select |s#0@@128| (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@380 |s#0@@128|))))) (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@380 |s#0@@128|)) (forall ((|y#0@@6| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@6|) (< |y#0@@6| 256)) (U_2_bool (MapType0Select |s#0@@128| ($Box (int_2_U |y#0@@6|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@380 |s#0@@128|)))) |y#0@@6|)) :qid |totalord.790:30| :skolemid |3043| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@380 |s#0@@128|)))) |y#0@@6|)) :pattern ( (MapType0Select |s#0@@128| ($Box (int_2_U |y#0@@6|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.minimumOpt $ly@@380 |s#0@@128|)) (|Set#Equal| |s#0@@128| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.minimumOpt $ly@@380 |s#0@@128|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalord.788:22| :skolemid |3044| :pattern ( (Byte__Order.__default.minimumOpt $ly@@380 |s#0@@128|)) ))))
(assert (forall (($ly@@381 T@U) (|s#0@@129| T@U) ) (!  (=> (and (and (= (type $ly@@381) LayerTypeType) (= (type |s#0@@129|) (MapType0Type BoxType boolType))) ($Is |s#0@@129| (TSet Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.minimumOpt#requires| $ly@@381 |s#0@@129|) true) (=> true (|Byte__Order.__default.minimumOpt#requires| $ly@@381 |s#0@@129|)))) :qid |totalord.788:22| :skolemid |3045| :pattern ( (|Byte__Order.__default.minimumOpt#requires| $ly@@381 |s#0@@129|)) )))
(assert (= (type StartFuel_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@382 T@U) (|s#0@@130| T@U) ) (!  (=> (and (and (= (type $ly@@382) LayerTypeType) (= (type |s#0@@130|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@130|) ($Is |s#0@@130| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@130| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| |s#0@@130|)) (= (Byte__Order.__default.minimumOpt ($LS $ly@@382) |s#0@@130|) (ite (|Set#Equal| |s#0@@130| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum |s#0@@130|)))))))) :qid |totalord.788:22| :skolemid |3046| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@382) |s#0@@130|)) ))))
(assert  (=> true (forall (($ly@@383 T@U) (|s#0@@131| T@U) ) (!  (=> (and (and (= (type $ly@@383) LayerTypeType) (= (type |s#0@@131|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@131|)) ($Is |s#0@@131| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@131| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@131|))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@383) (Lit |s#0@@131|)) (ite (|Set#Equal| |s#0@@131| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum (Lit |s#0@@131|))))))))) :qid |totalord.788:22| :weight 3 :skolemid |3047| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@383) (Lit |s#0@@131|))) ))))
(assert (forall (($ly@@384 T@U) (|s#0@@132| T@U) ) (!  (=> (and (= (type $ly@@384) LayerTypeType) (= (type |s#0@@132|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum ($LS $ly@@384) |s#0@@132|) (Byte__Order.__default.maximum $ly@@384 |s#0@@132|))) :qid |totalord.796:22| :skolemid |3048| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@384) |s#0@@132|)) )))
(assert (forall (($ly@@385 T@U) (|s#0@@133| T@U) ) (!  (=> (and (= (type $ly@@385) LayerTypeType) (= (type |s#0@@133|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum $ly@@385 |s#0@@133|) (Byte__Order.__default.maximum $LZ |s#0@@133|))) :qid |totalord.796:22| :skolemid |3049| :pattern ( (Byte__Order.__default.maximum (AsFuelBottom $ly@@385) |s#0@@133|)) )))
(assert  (=> true (forall (($ly@@386 T@U) (|s#0@@134| T@U) ) (!  (=> (and (and (= (type $ly@@386) LayerTypeType) (= (type |s#0@@134|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@134|) (and ($Is |s#0@@134| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@134|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@134| ($Box (int_2_U (Byte__Order.__default.maximum $ly@@386 |s#0@@134|))))) (forall ((|y#0@@7| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@7|) (< |y#0@@7| 256)) (U_2_bool (MapType0Select |s#0@@134| ($Box (int_2_U |y#0@@7|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@7| (Byte__Order.__default.maximum $ly@@386 |s#0@@134|))) :qid |totalord.799:18| :skolemid |3050| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@7| (Byte__Order.__default.maximum $ly@@386 |s#0@@134|))) :pattern ( (MapType0Select |s#0@@134| ($Box (int_2_U |y#0@@7|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.maximum $ly@@386 |s#0@@134|)) (< (Byte__Order.__default.maximum $ly@@386 |s#0@@134|) 256)))) :qid |totalord.796:22| :skolemid |3051| :pattern ( (Byte__Order.__default.maximum $ly@@386 |s#0@@134|)) ))))
(assert (forall (($ly@@387 T@U) ($Heap@@46 T@U) (|s#0@@135| T@U) ) (!  (=> (and (and (and (= (type $ly@@387) LayerTypeType) (= (type $Heap@@46) (MapType0Type refType MapType1Type))) (= (type |s#0@@135|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@46) ($Is |s#0@@135| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.maximum#requires| $ly@@387 |s#0@@135|) (>= (|Set#Card| |s#0@@135|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@135|) (LitInt 1)) (|Byte__Order.__default.maximum#requires| $ly@@387 |s#0@@135|)))) :qid |totalord.796:22| :skolemid |3052| :pattern ( (|Byte__Order.__default.maximum#requires| $ly@@387 |s#0@@135|) ($IsGoodHeap $Heap@@46)) )))
(assert (forall ((s@@47 T@U) ) (!  (=> (and (= (type s@@47) (MapType0Type BoxType boolType)) (|$let#14$canCall| s@@47)) (and (and (<= (LitInt 0) (|$let#14_a| s@@47)) (< (|$let#14_a| s@@47) 256)) (U_2_bool (MapType0Select s@@47 ($Box (int_2_U (|$let#14_a| s@@47))))))) :qid |totalord.801:5| :skolemid |3053| :pattern ( (|$let#14_a| s@@47)) )))
(assert  (=> true (forall (($ly@@388 T@U) ($Heap@@47 T@U) (|s#0@@136| T@U) ) (!  (=> (and (and (and (= (type $ly@@388) LayerTypeType) (= (type $Heap@@47) (MapType0Type refType MapType1Type))) (= (type |s#0@@136|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@136|) (and (and ($IsGoodHeap $Heap@@47) ($Is |s#0@@136| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@136|) (LitInt 1))))) (and (and (|$let#14$canCall| |s#0@@136|) (let ((|s'#0@@26| (|Set#Difference| |s#0@@136| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#14_a| |s#0@@136|))))))) (=> (not (|Set#Equal| |s'#0@@26| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#0@@26|) (let ((|m'#0@@11| (Byte__Order.__default.maximum $ly@@388 |s'#0@@26|))) (|Byte__Order.__default.lt#canCall| |m'#0@@11| (|$let#14_a| |s#0@@136|))))))) (= (Byte__Order.__default.maximum ($LS $ly@@388) |s#0@@136|) (let ((|a#0@@104| (|$let#14_a| |s#0@@136|))) (let ((|s'#1@@0| (|Set#Difference| |s#0@@136| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@104|)))))) (ite (|Set#Equal| |s'#1@@0| (|Set#Empty| BoxType)) |a#0@@104| (let ((|m'#1@@2| (Byte__Order.__default.maximum $ly@@388 |s'#1@@0|))) (ite (Byte__Order.__default.lt |m'#1@@2| |a#0@@104|) |a#0@@104| |m'#1@@2|)))))))) :qid |totalord.796:22| :skolemid |3054| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@388) |s#0@@136|) ($IsGoodHeap $Heap@@47)) ))))
(assert  (=> true (forall (($ly@@389 T@U) ($Heap@@48 T@U) (|s#0@@137| T@U) ) (!  (=> (and (and (and (= (type $ly@@389) LayerTypeType) (= (type $Heap@@48) (MapType0Type refType MapType1Type))) (= (type |s#0@@137|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@137|)) (and (and ($IsGoodHeap $Heap@@48) ($Is |s#0@@137| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@137|)) (LitInt 1))))) (and (and (|$let#14$canCall| (Lit |s#0@@137|)) (let ((|s'#2@@0| (|Set#Difference| |s#0@@137| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#14_a| (Lit |s#0@@137|)))))))) (=> (not (|Set#Equal| |s'#2@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#2@@0|) (let ((|m'#2@@1| (Byte__Order.__default.maximum ($LS $ly@@389) |s'#2@@0|))) (|Byte__Order.__default.lt#canCall| |m'#2@@1| (|$let#14_a| (Lit |s#0@@137|)))))))) (= (Byte__Order.__default.maximum ($LS $ly@@389) (Lit |s#0@@137|)) (let ((|a#1@@2| (|$let#14_a| (Lit |s#0@@137|)))) (let ((|s'#3@@0| (|Set#Difference| |s#0@@137| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@2|)))))) (ite (|Set#Equal| |s'#3@@0| (|Set#Empty| BoxType)) |a#1@@2| (let ((|m'#3@@0| (Byte__Order.__default.maximum ($LS $ly@@389) |s'#3@@0|))) (ite (Byte__Order.__default.lt |m'#3@@0| |a#1@@2|) |a#1@@2| |m'#3@@0|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |3055| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@389) (Lit |s#0@@137|)) ($IsGoodHeap $Heap@@48)) ))))
(assert (forall ((arg0@@469 T@U) (arg1@@247 T@U) ) (! (= (type (Byte__Order.__default.maximumOpt arg0@@469 arg1@@247)) DatatypeTypeType) :qid |funType:Byte__Order.__default.maximumOpt| :pattern ( (Byte__Order.__default.maximumOpt arg0@@469 arg1@@247)) )))
(assert (forall (($ly@@390 T@U) (|s#0@@138| T@U) ) (!  (=> (and (= (type $ly@@390) LayerTypeType) (= (type |s#0@@138|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@390) |s#0@@138|) (Byte__Order.__default.maximumOpt $ly@@390 |s#0@@138|))) :qid |totalord.817:22| :skolemid |3056| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@390) |s#0@@138|)) )))
(assert (forall (($ly@@391 T@U) (|s#0@@139| T@U) ) (!  (=> (and (= (type $ly@@391) LayerTypeType) (= (type |s#0@@139|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt $ly@@391 |s#0@@139|) (Byte__Order.__default.maximumOpt $LZ |s#0@@139|))) :qid |totalord.817:22| :skolemid |3057| :pattern ( (Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@391) |s#0@@139|)) )))
(assert  (=> true (forall (($ly@@392 T@U) (|s#0@@140| T@U) ) (!  (=> (and (and (= (type $ly@@392) LayerTypeType) (= (type |s#0@@140|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@140|) ($Is |s#0@@140| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@392 |s#0@@140|)) (U_2_bool (MapType0Select |s#0@@140| (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@392 |s#0@@140|))))) (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@392 |s#0@@140|)) (forall ((|y#0@@8| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@8|) (< |y#0@@8| 256)) (U_2_bool (MapType0Select |s#0@@140| ($Box (int_2_U |y#0@@8|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@8| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@392 |s#0@@140|)))))) :qid |totalord.819:30| :skolemid |3058| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@8| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@392 |s#0@@140|)))))) :pattern ( (MapType0Select |s#0@@140| ($Box (int_2_U |y#0@@8|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.maximumOpt $ly@@392 |s#0@@140|)) (|Set#Equal| |s#0@@140| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.maximumOpt $ly@@392 |s#0@@140|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalord.817:22| :skolemid |3059| :pattern ( (Byte__Order.__default.maximumOpt $ly@@392 |s#0@@140|)) ))))
(assert (forall (($ly@@393 T@U) (|s#0@@141| T@U) ) (!  (=> (and (and (= (type $ly@@393) LayerTypeType) (= (type |s#0@@141|) (MapType0Type BoxType boolType))) ($Is |s#0@@141| (TSet Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.maximumOpt#requires| $ly@@393 |s#0@@141|) true) (=> true (|Byte__Order.__default.maximumOpt#requires| $ly@@393 |s#0@@141|)))) :qid |totalord.817:22| :skolemid |3060| :pattern ( (|Byte__Order.__default.maximumOpt#requires| $ly@@393 |s#0@@141|)) )))
(assert (= (type StartFuel_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@394 T@U) (|s#0@@142| T@U) ) (!  (=> (and (and (= (type $ly@@394) LayerTypeType) (= (type |s#0@@142|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@142|) ($Is |s#0@@142| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@142| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| |s#0@@142|)) (= (Byte__Order.__default.maximumOpt ($LS $ly@@394) |s#0@@142|) (ite (|Set#Equal| |s#0@@142| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum |s#0@@142|)))))))) :qid |totalord.817:22| :skolemid |3061| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@394) |s#0@@142|)) ))))
(assert  (=> true (forall (($ly@@395 T@U) (|s#0@@143| T@U) ) (!  (=> (and (and (= (type $ly@@395) LayerTypeType) (= (type |s#0@@143|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@143|)) ($Is |s#0@@143| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@143| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@143|))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@395) (Lit |s#0@@143|)) (ite (|Set#Equal| |s#0@@143| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum (Lit |s#0@@143|))))))))) :qid |totalord.817:22| :weight 3 :skolemid |3062| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@395) (Lit |s#0@@143|))) ))))
(assert  (=> true (forall ((|a#0@@105| Int) (|b#0@@74| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@105| |b#0@@74|) (and (and (<= (LitInt 0) |a#0@@105|) (< |a#0@@105| 256)) (and (<= (LitInt 0) |b#0@@74|) (< |b#0@@74| 256)))) true) :qid |totalord.12:15| :skolemid |3063| :pattern ( (Byte__Order.__default.lt |a#0@@105| |b#0@@74|)) ))))
(assert (forall ((|a#0@@106| Int) (|b#0@@75| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@106|) (< |a#0@@106| 256)) (and (<= (LitInt 0) |b#0@@75|) (< |b#0@@75| 256))) (and (=> (|Byte__Order.__default.lt#requires| |a#0@@106| |b#0@@75|) true) (=> true (|Byte__Order.__default.lt#requires| |a#0@@106| |b#0@@75|)))) :qid |totalord.12:15| :skolemid |3064| :pattern ( (|Byte__Order.__default.lt#requires| |a#0@@106| |b#0@@75|)) )))
(assert  (=> true (forall ((|a#0@@107| Int) (|b#0@@76| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@107| |b#0@@76|) (and (and (<= (LitInt 0) |a#0@@107|) (< |a#0@@107| 256)) (and (<= (LitInt 0) |b#0@@76|) (< |b#0@@76| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@107| |b#0@@76|) (and (=> (Byte__Order.__default.lt |a#0@@107| |b#0@@76|) (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@107| |b#0@@76|) (not (= |a#0@@107| |b#0@@76|)))) (=> (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@107| |b#0@@76|) (not (= |a#0@@107| |b#0@@76|))) (Byte__Order.__default.lt |a#0@@107| |b#0@@76|))))) :qid |totalord.12:15| :skolemid |3065| :pattern ( (Byte__Order.__default.lt |a#0@@107| |b#0@@76|)) ))))
(assert  (=> true (forall ((|a#0@@108| Int) (|b#0@@77| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| (LitInt |a#0@@108|) (LitInt |b#0@@77|)) (and (and (<= (LitInt 0) |a#0@@108|) (< |a#0@@108| 256)) (and (<= (LitInt 0) |b#0@@77|) (< |b#0@@77| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@108|) (LitInt |b#0@@77|)) (and (=> (Byte__Order.__default.lt (LitInt |a#0@@108|) (LitInt |b#0@@77|)) (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@108|) (LitInt |b#0@@77|)) (not (= |a#0@@108| |b#0@@77|)))) (=> (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@108|) (LitInt |b#0@@77|)) (not (= |a#0@@108| |b#0@@77|))) (Byte__Order.__default.lt (LitInt |a#0@@108|) (LitInt |b#0@@77|)))))) :qid |totalord.12:15| :weight 3 :skolemid |3066| :pattern ( (Byte__Order.__default.lt (LitInt |a#0@@108|) (LitInt |b#0@@77|))) ))))
(assert  (=> true (forall ((|a#0@@109| Int) (|b#0@@78| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@109| |b#0@@78|) (and (and (<= (LitInt 0) |a#0@@109|) (< |a#0@@109| 256)) (and (<= (LitInt 0) |b#0@@78|) (< |b#0@@78| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Min |a#0@@109| |b#0@@78|)) (< (Byte__Order.__default.Min |a#0@@109| |b#0@@78|) 256))) :qid |totalord.24:16| :skolemid |3067| :pattern ( (Byte__Order.__default.Min |a#0@@109| |b#0@@78|)) ))))
(assert (forall ((|a#0@@110| Int) (|b#0@@79| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@110|) (< |a#0@@110| 256)) (and (<= (LitInt 0) |b#0@@79|) (< |b#0@@79| 256))) (and (=> (|Byte__Order.__default.Min#requires| |a#0@@110| |b#0@@79|) true) (=> true (|Byte__Order.__default.Min#requires| |a#0@@110| |b#0@@79|)))) :qid |totalord.24:16| :skolemid |3068| :pattern ( (|Byte__Order.__default.Min#requires| |a#0@@110| |b#0@@79|)) )))
(assert  (=> true (forall ((|a#0@@111| Int) (|b#0@@80| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@111| |b#0@@80|) (and (and (<= (LitInt 0) |a#0@@111|) (< |a#0@@111| 256)) (and (<= (LitInt 0) |b#0@@80|) (< |b#0@@80| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@111| |b#0@@80|) (= (Byte__Order.__default.Min |a#0@@111| |b#0@@80|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@111| |b#0@@80|) |a#0@@111| |b#0@@80|)))) :qid |totalord.24:16| :skolemid |3069| :pattern ( (Byte__Order.__default.Min |a#0@@111| |b#0@@80|)) ))))
(assert  (=> true (forall ((|a#0@@112| Int) (|b#0@@81| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| (LitInt |a#0@@112|) (LitInt |b#0@@81|)) (and (and (<= (LitInt 0) |a#0@@112|) (< |a#0@@112| 256)) (and (<= (LitInt 0) |b#0@@81|) (< |b#0@@81| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@112|) (LitInt |b#0@@81|)) (= (Byte__Order.__default.Min (LitInt |a#0@@112|) (LitInt |b#0@@81|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@112|) (LitInt |b#0@@81|)) |a#0@@112| |b#0@@81|)))) :qid |totalord.24:16| :weight 3 :skolemid |3070| :pattern ( (Byte__Order.__default.Min (LitInt |a#0@@112|) (LitInt |b#0@@81|))) ))))
(assert  (=> true (forall ((|a#0@@113| Int) (|b#0@@82| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@113| |b#0@@82|) (and (and (<= (LitInt 0) |a#0@@113|) (< |a#0@@113| 256)) (and (<= (LitInt 0) |b#0@@82|) (< |b#0@@82| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Max |a#0@@113| |b#0@@82|)) (< (Byte__Order.__default.Max |a#0@@113| |b#0@@82|) 256))) :qid |totalord.29:16| :skolemid |3071| :pattern ( (Byte__Order.__default.Max |a#0@@113| |b#0@@82|)) ))))
(assert (forall ((|a#0@@114| Int) (|b#0@@83| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@114|) (< |a#0@@114| 256)) (and (<= (LitInt 0) |b#0@@83|) (< |b#0@@83| 256))) (and (=> (|Byte__Order.__default.Max#requires| |a#0@@114| |b#0@@83|) true) (=> true (|Byte__Order.__default.Max#requires| |a#0@@114| |b#0@@83|)))) :qid |totalord.29:16| :skolemid |3072| :pattern ( (|Byte__Order.__default.Max#requires| |a#0@@114| |b#0@@83|)) )))
(assert  (=> true (forall ((|a#0@@115| Int) (|b#0@@84| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@115| |b#0@@84|) (and (and (<= (LitInt 0) |a#0@@115|) (< |a#0@@115| 256)) (and (<= (LitInt 0) |b#0@@84|) (< |b#0@@84| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@115| |b#0@@84|) (= (Byte__Order.__default.Max |a#0@@115| |b#0@@84|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@115| |b#0@@84|) |b#0@@84| |a#0@@115|)))) :qid |totalord.29:16| :skolemid |3073| :pattern ( (Byte__Order.__default.Max |a#0@@115| |b#0@@84|)) ))))
(assert  (=> true (forall ((|a#0@@116| Int) (|b#0@@85| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| (LitInt |a#0@@116|) (LitInt |b#0@@85|)) (and (and (<= (LitInt 0) |a#0@@116|) (< |a#0@@116| 256)) (and (<= (LitInt 0) |b#0@@85|) (< |b#0@@85| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@116|) (LitInt |b#0@@85|)) (= (Byte__Order.__default.Max (LitInt |a#0@@116|) (LitInt |b#0@@85|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@116|) (LitInt |b#0@@85|)) |b#0@@85| |a#0@@116|)))) :qid |totalord.29:16| :weight 3 :skolemid |3074| :pattern ( (Byte__Order.__default.Max (LitInt |a#0@@116|) (LitInt |b#0@@85|))) ))))
(assert (forall (($ly@@396 T@U) (|run#0@@92| T@U) ) (!  (=> (and (= (type $ly@@396) LayerTypeType) (= (type |run#0@@92|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@396) |run#0@@92|) (Byte__Order.__default.IsSorted $ly@@396 |run#0@@92|)) (=> (Byte__Order.__default.IsSorted $ly@@396 |run#0@@92|) (Byte__Order.__default.IsSorted ($LS $ly@@396) |run#0@@92|)))) :qid |totalord.41:23| :skolemid |3075| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@396) |run#0@@92|)) )))
(assert (forall (($ly@@397 T@U) (|run#0@@93| T@U) ) (!  (=> (and (= (type $ly@@397) LayerTypeType) (= (type |run#0@@93|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsSorted $ly@@397 |run#0@@93|) (Byte__Order.__default.IsSorted $LZ |run#0@@93|)) (=> (Byte__Order.__default.IsSorted $LZ |run#0@@93|) (Byte__Order.__default.IsSorted $ly@@397 |run#0@@93|)))) :qid |totalord.41:23| :skolemid |3076| :pattern ( (Byte__Order.__default.IsSorted (AsFuelBottom $ly@@397) |run#0@@93|)) )))
(assert  (=> true (forall (($ly@@398 T@U) (|run#0@@94| T@U) ) (!  (=> (and (and (= (type $ly@@398) LayerTypeType) (= (type |run#0@@94|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@94|) ($Is |run#0@@94| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| |run#0@@94|) (LitInt 0)) (Byte__Order.__default.IsSorted $ly@@398 |run#0@@94|)) (=> (= (|Seq#Length| |run#0@@94|) (LitInt 1)) (Byte__Order.__default.IsSorted $ly@@398 |run#0@@94|)))) :qid |totalord.41:23| :skolemid |3077| :pattern ( (Byte__Order.__default.IsSorted $ly@@398 |run#0@@94|)) ))))
(assert (forall (($ly@@399 T@U) (|run#0@@95| T@U) ) (!  (=> (and (and (= (type $ly@@399) LayerTypeType) (= (type |run#0@@95|) (SeqType BoxType))) ($Is |run#0@@95| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsSorted#requires| $ly@@399 |run#0@@95|) true) (=> true (|Byte__Order.__default.IsSorted#requires| $ly@@399 |run#0@@95|)))) :qid |totalord.41:23| :skolemid |3078| :pattern ( (|Byte__Order.__default.IsSorted#requires| $ly@@399 |run#0@@95|)) )))
(assert  (=> true (forall (($ly@@400 T@U) (|run#0@@96| T@U) ) (!  (=> (and (and (= (type $ly@@400) LayerTypeType) (= (type |run#0@@96|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@96|) ($Is |run#0@@96| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@104| Int) (|j#0@@19| Int) ) (!  (=> (< |j#0@@19| (|Seq#Length| |run#0@@96|)) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@104|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@19|))))) :qid |totalord.45:12| :skolemid |3079| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@19|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@104|))) )) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@400) |run#0@@96|) (forall ((|i#0@@105| Int) (|j#0@@20| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@105|) (<= |i#0@@105| |j#0@@20|)) (< |j#0@@20| (|Seq#Length| |run#0@@96|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@105|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@20|)))))) :qid |totalord.45:12| :skolemid |3080| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@20|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@105|))) ))) (=> (forall ((|i#0@@106| Int) (|j#0@@21| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@106|) (<= |i#0@@106| |j#0@@21|)) (< |j#0@@21| (|Seq#Length| |run#0@@96|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@106|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@21|)))))) :qid |totalord.45:12| :skolemid |3080| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@21|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@106|))) )) (Byte__Order.__default.IsSorted ($LS $ly@@400) |run#0@@96|))))) :qid |totalord.41:23| :skolemid |3081| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@400) |run#0@@96|)) ))))
(assert  (=> true (forall (($ly@@401 T@U) (|run#0@@97| T@U) ) (!  (=> (and (and (= (type $ly@@401) LayerTypeType) (= (type |run#0@@97|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@97|)) ($Is |run#0@@97| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@42| Int) (|j#1@@9| Int) ) (!  (=> (< |j#1@@9| (|Seq#Length| (Lit |run#0@@97|))) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#1@@42|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#1@@9|))))) :qid |totalord.45:12| :skolemid |3082| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#1@@9|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#1@@42|))) )) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@401) (Lit |run#0@@97|)) (forall ((|i#1@@43| Int) (|j#1@@10| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@43|) (<= |i#1@@43| |j#1@@10|)) (< |j#1@@10| (|Seq#Length| (Lit |run#0@@97|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#1@@43|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#1@@10|)))))) :qid |totalord.45:12| :skolemid |3083| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#1@@10|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#1@@43|))) ))) (=> (forall ((|i#1@@44| Int) (|j#1@@11| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@44|) (<= |i#1@@44| |j#1@@11|)) (< |j#1@@11| (|Seq#Length| (Lit |run#0@@97|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#1@@44|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#1@@11|)))))) :qid |totalord.45:12| :skolemid |3083| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#1@@11|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#1@@44|))) )) (Byte__Order.__default.IsSorted ($LS $ly@@401) (Lit |run#0@@97|)))))) :qid |totalord.41:23| :weight 3 :skolemid |3084| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@401) (Lit |run#0@@97|))) ))))
(assert  (=> true (forall ((|run#0@@98| T@U) ) (!  (=> (and (= (type |run#0@@98|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@98|) ($Is |run#0@@98| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalord.48:38| :skolemid |3085| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@98|)) ))))
(assert (forall ((|run#0@@99| T@U) ) (!  (=> (and (= (type |run#0@@99|) (SeqType BoxType)) ($Is |run#0@@99| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|) true) (=> true (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|)))) :qid |totalord.48:38| :skolemid |3086| :pattern ( (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|)) )))
(assert  (=> true (forall ((|run#0@@100| T@U) ) (!  (=> (and (= (type |run#0@@100|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@100|) ($Is |run#0@@100| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@107| Int) (|j#0@@22| Int) ) (!  (=> (< |j#0@@22| (|Seq#Length| |run#0@@100|)) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@107|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@22|))))) :qid |totalord.50:12| :skolemid |3087| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@22|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@107|))) )) (and (=> (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|) (forall ((|i#0@@108| Int) (|j#0@@23| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@108|) (< |i#0@@108| |j#0@@23|)) (< |j#0@@23| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@108|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@23|)))))) :qid |totalord.50:12| :skolemid |3088| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@23|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@108|))) ))) (=> (forall ((|i#0@@109| Int) (|j#0@@24| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@109|) (< |i#0@@109| |j#0@@24|)) (< |j#0@@24| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@109|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@24|)))))) :qid |totalord.50:12| :skolemid |3088| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@24|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@109|))) )) (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|))))) :qid |totalord.48:38| :skolemid |3089| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|)) ))))
(assert  (=> true (forall ((|run#0@@101| T@U) ) (!  (=> (and (= (type |run#0@@101|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@101|)) ($Is |run#0@@101| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@45| Int) (|j#1@@12| Int) ) (!  (=> (< |j#1@@12| (|Seq#Length| (Lit |run#0@@101|))) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#1@@45|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#1@@12|))))) :qid |totalord.50:12| :skolemid |3090| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#1@@12|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#1@@45|))) )) (and (=> (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|)) (forall ((|i#1@@46| Int) (|j#1@@13| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@46|) (< |i#1@@46| |j#1@@13|)) (< |j#1@@13| (|Seq#Length| (Lit |run#0@@101|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#1@@46|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#1@@13|)))))) :qid |totalord.50:12| :skolemid |3091| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#1@@13|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#1@@46|))) ))) (=> (forall ((|i#1@@47| Int) (|j#1@@14| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@47|) (< |i#1@@47| |j#1@@14|)) (< |j#1@@14| (|Seq#Length| (Lit |run#0@@101|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#1@@47|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#1@@14|)))))) :qid |totalord.50:12| :skolemid |3091| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#1@@14|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#1@@47|))) )) (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|)))))) :qid |totalord.48:38| :weight 3 :skolemid |3092| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|))) ))))
(assert (forall (($ly@@402 T@U) (|run#0@@102| T@U) ) (!  (=> (and (= (type $ly@@402) LayerTypeType) (= (type |run#0@@102|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@402) |run#0@@102|) (Byte__Order.__default.IsStrictlySorted $ly@@402 |run#0@@102|)) (=> (Byte__Order.__default.IsStrictlySorted $ly@@402 |run#0@@102|) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@402) |run#0@@102|)))) :qid |totalord.64:23| :skolemid |3093| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@402) |run#0@@102|)) )))
(assert (forall (($ly@@403 T@U) (|run#0@@103| T@U) ) (!  (=> (and (= (type $ly@@403) LayerTypeType) (= (type |run#0@@103|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsStrictlySorted $ly@@403 |run#0@@103|) (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@103|)) (=> (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@103|) (Byte__Order.__default.IsStrictlySorted $ly@@403 |run#0@@103|)))) :qid |totalord.64:23| :skolemid |3094| :pattern ( (Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@403) |run#0@@103|)) )))
(assert  (=> true (forall (($ly@@404 T@U) (|run#0@@104| T@U) ) (!  (=> (and (and (= (type $ly@@404) LayerTypeType) (= (type |run#0@@104|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@104|) ($Is |run#0@@104| (TSeq Tclass.NativeTypes.byte)))) (and (and (=> (= (|Seq#Length| |run#0@@104|) (LitInt 0)) (Byte__Order.__default.IsStrictlySorted $ly@@404 |run#0@@104|)) (=> (= (|Seq#Length| |run#0@@104|) (LitInt 1)) (Byte__Order.__default.IsStrictlySorted $ly@@404 |run#0@@104|))) (=> (Byte__Order.__default.IsStrictlySorted $ly@@404 |run#0@@104|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@104|)))) :qid |totalord.64:23| :skolemid |3095| :pattern ( (Byte__Order.__default.IsStrictlySorted $ly@@404 |run#0@@104|)) ))))
(assert (forall (($ly@@405 T@U) (|run#0@@105| T@U) ) (!  (=> (and (and (= (type $ly@@405) LayerTypeType) (= (type |run#0@@105|) (SeqType BoxType))) ($Is |run#0@@105| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@405 |run#0@@105|) true) (=> true (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@405 |run#0@@105|)))) :qid |totalord.64:23| :skolemid |3096| :pattern ( (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@405 |run#0@@105|)) )))
(assert  (=> true (forall (($ly@@406 T@U) (|run#0@@106| T@U) ) (!  (=> (and (and (= (type $ly@@406) LayerTypeType) (= (type |run#0@@106|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@106|) ($Is |run#0@@106| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@106|) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@406) |run#0@@106|) (let ((|b#0@@86| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@106|))) (ite |b#0@@86| |b#0@@86| |b#0@@86|))) (=> (let ((|b#0@@87| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@106|))) (ite |b#0@@87| |b#0@@87| |b#0@@87|)) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@406) |run#0@@106|))))) :qid |totalord.64:23| :skolemid |3097| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@406) |run#0@@106|)) ))))
(assert  (=> true (forall (($ly@@407 T@U) (|run#0@@107| T@U) ) (!  (=> (and (and (= (type $ly@@407) LayerTypeType) (= (type |run#0@@107|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@107|)) ($Is |run#0@@107| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@107|)) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@407) (Lit |run#0@@107|)) (let ((|b#1@@4| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@107|))))))) (ite |b#1@@4| |b#1@@4| |b#1@@4|))) (=> (let ((|b#1@@5| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@107|))))))) (ite |b#1@@5| |b#1@@5| |b#1@@5|)) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@407) (Lit |run#0@@107|)))))) :qid |totalord.64:23| :weight 3 :skolemid |3098| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@407) (Lit |run#0@@107|))) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order.__default) Tagclass.Lexicographic__Byte__Order.__default))
(assert (forall ((bx@@166 T@U) ) (!  (=> (and (= (type bx@@166) BoxType) ($IsBox bx@@166 Tclass.Lexicographic__Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@166)) bx@@166) ($Is ($Unbox refType bx@@166) Tclass.Lexicographic__Byte__Order.__default))) :qid |unknown.0:0| :skolemid |3099| :pattern ( ($IsBox bx@@166 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@44 T@U) ) (!  (=> (= (type $o@@44) refType) (and (=> ($Is $o@@44 Tclass.Lexicographic__Byte__Order.__default) (or (= $o@@44 null) (= (dtype $o@@44) Tclass.Lexicographic__Byte__Order.__default))) (=> (or (= $o@@44 null) (= (dtype $o@@44) Tclass.Lexicographic__Byte__Order.__default)) ($Is $o@@44 Tclass.Lexicographic__Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |3100| :pattern ( ($Is $o@@44 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@45 T@U) ($h@@124 T@U) ) (!  (=> (and (= (type $o@@45) refType) (= (type $h@@124) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@45 Tclass.Lexicographic__Byte__Order.__default $h@@124) (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@124 $o@@45) alloc)))) (=> (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@124 $o@@45) alloc))) ($IsAlloc $o@@45 Tclass.Lexicographic__Byte__Order.__default $h@@124)))) :qid |unknown.0:0| :skolemid |3101| :pattern ( ($IsAlloc $o@@45 Tclass.Lexicographic__Byte__Order.__default $h@@124)) )))
(assert (= (type Lexicographic__Byte__Order.__default.SomeElement) (SeqType BoxType)))
(assert  (=> true (=> true ($Is Lexicographic__Byte__Order.__default.SomeElement (TSeq Tclass.NativeTypes.byte)))))
(assert  (=> |Lexicographic__Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true |Lexicographic__Byte__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|a#0@@117| T@U) (|b#0@@88| T@U) ) (!  (=> (and (and (= (type |a#0@@117|) (SeqType BoxType)) (= (type |b#0@@88|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@117| |b#0@@88|) (and ($Is |a#0@@117| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@88| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (and (and (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@117| |b#0@@88|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@117| |b#0@@88|)) (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@117| |b#0@@88|) (Lexicographic__Byte__Order.__default.lte |a#0@@117| |b#0@@88|))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@117| |b#0@@88|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@88| |a#0@@117|))) (forall ((|a#1@@3| T@U) (|b#1@@6| T@U) (|c#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |a#1@@3|) (SeqType BoxType)) (= (type |b#1@@6|) (SeqType BoxType))) (= (type |c#0@@11|) (SeqType BoxType))) (and (and ($Is |a#1@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#1@@6| (TSeq Tclass.NativeTypes.byte))) ($Is |c#0@@11| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@6|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@6| |c#0@@11|))) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|)) :qid |totalord.20:18| :skolemid |3102| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@6| |c#0@@11|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#1@@6| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@6|)) ))) (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@117| |b#0@@88|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@117| |b#0@@88|)) (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@117| |b#0@@88|) (Lexicographic__Byte__Order.__default.lte |a#0@@117| |b#0@@88|)))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@117| |b#0@@88|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@88| |a#0@@117|))) (=> (and (Lexicographic__Byte__Order.__default.ltedef |a#0@@117| |b#0@@88|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@88| |a#0@@117|)) (|Seq#Equal| |a#0@@117| |b#0@@88|))) (forall ((|a#2@@0| T@U) (|b#2@@0| T@U) (|c#1@@0| T@U) ) (!  (=> (and (and (and (and (= (type |a#2@@0|) (SeqType BoxType)) (= (type |b#2@@0|) (SeqType BoxType))) (= (type |c#1@@0|) (SeqType BoxType))) (and (and ($Is |a#2@@0| (TSeq Tclass.NativeTypes.byte)) ($Is |b#2@@0| (TSeq Tclass.NativeTypes.byte))) ($Is |c#1@@0| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|))) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|)) :qid |totalord.188:18| :skolemid |3103| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|)) )))) :qid |totalord.17:16| :skolemid |3104| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@117| |b#0@@88|)) ))))
(assert (forall ((|a#0@@118| T@U) (|b#0@@89| T@U) ) (!  (=> (and (and (= (type |a#0@@118|) (SeqType BoxType)) (= (type |b#0@@89|) (SeqType BoxType))) (and ($Is |a#0@@118| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@89| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@118| |b#0@@89|) true) (=> true (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@118| |b#0@@89|)))) :qid |totalord.17:16| :skolemid |3105| :pattern ( (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@118| |b#0@@89|)) )))
(assert  (=> true (forall ((|a#0@@119| T@U) (|b#0@@90| T@U) ) (!  (=> (and (and (= (type |a#0@@119|) (SeqType BoxType)) (= (type |b#0@@90|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@119| |b#0@@90|) (and ($Is |a#0@@119| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@90| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@119| |b#0@@90|) (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@119| |b#0@@90|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@119| |b#0@@90|)) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@119| |b#0@@90|) (Lexicographic__Byte__Order.__default.lte |a#0@@119| |b#0@@90|))))) :qid |totalord.17:16| :skolemid |3106| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@119| |b#0@@90|)) ))))
(assert  (=> true (forall ((|a#0@@120| T@U) (|b#0@@91| T@U) ) (!  (=> (and (and (= (type |a#0@@120|) (SeqType BoxType)) (= (type |b#0@@91|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@120|) (Lit |b#0@@91|)) (and ($Is |a#0@@120| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@91| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@120|) (Lit |b#0@@91|)) (and (=> (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@120|) (Lit |b#0@@91|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@120|) (Lit |b#0@@91|))) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@120|) (Lit |b#0@@91|)) (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@120|) (Lit |b#0@@91|)))))) :qid |totalord.17:16| :weight 3 :skolemid |3107| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@120|) (Lit |b#0@@91|))) ))))
(assert  (=> true (forall ((|a#0@@121| T@U) (|b#0@@92| T@U) ) (!  (=> (and (and (= (type |a#0@@121|) (SeqType BoxType)) (= (type |b#0@@92|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@121| |b#0@@92|) (and ($Is |a#0@@121| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@92| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.22:19| :skolemid |3108| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@121| |b#0@@92|)) ))))
(assert (forall ((|a#0@@122| T@U) (|b#0@@93| T@U) ) (!  (=> (and (and (= (type |a#0@@122|) (SeqType BoxType)) (= (type |b#0@@93|) (SeqType BoxType))) (and ($Is |a#0@@122| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@93| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@122| |b#0@@93|) true) (=> true (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@122| |b#0@@93|)))) :qid |totalord.22:19| :skolemid |3109| :pattern ( (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@122| |b#0@@93|)) )))
(assert  (=> true (forall ((|a#0@@123| T@U) (|b#0@@94| T@U) ) (!  (=> (and (and (= (type |a#0@@123|) (SeqType BoxType)) (= (type |b#0@@94|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@123| |b#0@@94|) (and ($Is |a#0@@123| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@94| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@123| |b#0@@94|) (and (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@123| |b#0@@94|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@123| |b#0@@94|)) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@123| |b#0@@94|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@123| |b#0@@94|))))) :qid |totalord.22:19| :skolemid |3110| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@123| |b#0@@94|)) ))))
(assert  (=> true (forall ((|a#0@@124| T@U) (|b#0@@95| T@U) ) (!  (=> (and (and (= (type |a#0@@124|) (SeqType BoxType)) (= (type |b#0@@95|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| (Lit |a#0@@124|) (Lit |b#0@@95|)) (and ($Is |a#0@@124| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@95| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@124|) (Lit |b#0@@95|)) (and (=> (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@124|) (Lit |b#0@@95|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@124|) (Lit |b#0@@95|))) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@124|) (Lit |b#0@@95|)) (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@124|) (Lit |b#0@@95|)))))) :qid |totalord.22:19| :weight 3 :skolemid |3111| :pattern ( (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@124|) (Lit |b#0@@95|))) ))))
(assert (forall (($ly@@408 T@U) (|run#0@@108| T@U) (|needle#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@408) LayerTypeType) (= (type |run#0@@108|) (SeqType BoxType))) (= (type |needle#0@@37|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@408) |run#0@@108| |needle#0@@37|) (Lexicographic__Byte__Order.__default.LargestLte $ly@@408 |run#0@@108| |needle#0@@37|))) :qid |totalord.253:12| :skolemid |3112| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@408) |run#0@@108| |needle#0@@37|)) )))
(assert (forall (($ly@@409 T@U) (|run#0@@109| T@U) (|needle#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@409) LayerTypeType) (= (type |run#0@@109|) (SeqType BoxType))) (= (type |needle#0@@38|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte $ly@@409 |run#0@@109| |needle#0@@38|) (Lexicographic__Byte__Order.__default.LargestLte $LZ |run#0@@109| |needle#0@@38|))) :qid |totalord.253:12| :skolemid |3113| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte (AsFuelBottom $ly@@409) |run#0@@109| |needle#0@@38|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@410 T@U) (|run#0@@110| T@U) (|needle#0@@39| T@U) ) (!  (=> (and (and (and (= (type $ly@@410) LayerTypeType) (= (type |run#0@@110|) (SeqType BoxType))) (= (type |needle#0@@39|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@110| |needle#0@@39|) (and (and ($Is |run#0@@110| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@39| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@110|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLte $ly@@410 |run#0@@110| |needle#0@@39|)) (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@410 |run#0@@110| |needle#0@@39|) (|Seq#Length| |run#0@@110|))) (forall ((|i#0@@110| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@110|) (<= |i#0@@110| (Lexicographic__Byte__Order.__default.LargestLte $ly@@410 |run#0@@110| |needle#0@@39|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#0@@110|)) |needle#0@@39|))) :qid |totalord.256:20| :skolemid |3114| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#0@@110|))) ))) (forall ((|i#1@@48| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@410 |run#0@@110| |needle#0@@39|) |i#1@@48|) (< |i#1@@48| (|Seq#Length| |run#0@@110|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@39| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#1@@48|))))) :qid |totalord.257:20| :skolemid |3115| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#1@@48|))) ))) (=> (|Seq#Contains| |run#0@@110| ($Box |needle#0@@39|)) (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.LargestLte $ly@@410 |run#0@@110| |needle#0@@39|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| (Lexicographic__Byte__Order.__default.LargestLte $ly@@410 |run#0@@110| |needle#0@@39|))) |needle#0@@39|))))) :qid |totalord.253:12| :skolemid |3116| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte $ly@@410 |run#0@@110| |needle#0@@39|)) ))))
(assert (forall (($ly@@411 T@U) (|run#0@@111| T@U) (|needle#0@@40| T@U) ) (!  (=> (and (and (and (= (type $ly@@411) LayerTypeType) (= (type |run#0@@111|) (SeqType BoxType))) (= (type |needle#0@@40|) (SeqType BoxType))) (and ($Is |run#0@@111| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@40| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@411 |run#0@@111| |needle#0@@40|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@111|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@111|) (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@411 |run#0@@111| |needle#0@@40|)))) :qid |totalord.253:12| :skolemid |3117| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@411 |run#0@@111| |needle#0@@40|)) )))
(assert  (and (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@412 T@U) (|run#0@@112| T@U) (|needle#0@@41| T@U) ) (!  (=> (and (and (and (= (type $ly@@412) LayerTypeType) (= (type |run#0@@112|) (SeqType BoxType))) (= (type |needle#0@@41|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@112| |needle#0@@41|) (and (and ($Is |run#0@@112| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@41| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@112|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@112|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@112|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@112| (LitInt 1)) |needle#0@@41|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@412) |run#0@@112| |needle#0@@41|) (ite  (or (= (|Seq#Length| |run#0@@112|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte $ly@@412 (|Seq#Drop| |run#0@@112| (LitInt 1)) |needle#0@@41|))))))) :qid |totalord.253:12| :skolemid |3118| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@412) |run#0@@112| |needle#0@@41|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@413 T@U) (|run#0@@113| T@U) (|needle#0@@42| T@U) ) (!  (=> (and (and (and (= (type $ly@@413) LayerTypeType) (= (type |run#0@@113|) (SeqType BoxType))) (= (type |needle#0@@42|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@113|) (Lit |needle#0@@42|)) (and (and ($Is |run#0@@113| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@42| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@113|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@113|) (LitInt 1))) (Lit |needle#0@@42|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@413) (Lit |run#0@@113|) (Lit |needle#0@@42|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@413) (Lit (|Seq#Drop| (Lit |run#0@@113|) (LitInt 1))) (Lit |needle#0@@42|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |3119| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@413) (Lit |run#0@@113|) (Lit |needle#0@@42|))) ))))
(assert (forall (($ly@@414 T@U) (|run#0@@114| T@U) (|needle#0@@43| T@U) ) (!  (=> (and (and (= (type $ly@@414) LayerTypeType) (= (type |run#0@@114|) (SeqType BoxType))) (= (type |needle#0@@43|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@414) |run#0@@114| |needle#0@@43|) (Lexicographic__Byte__Order.__default.LargestLt $ly@@414 |run#0@@114| |needle#0@@43|))) :qid |totalord.356:12| :skolemid |3120| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@414) |run#0@@114| |needle#0@@43|)) )))
(assert (forall (($ly@@415 T@U) (|run#0@@115| T@U) (|needle#0@@44| T@U) ) (!  (=> (and (and (= (type $ly@@415) LayerTypeType) (= (type |run#0@@115|) (SeqType BoxType))) (= (type |needle#0@@44|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt $ly@@415 |run#0@@115| |needle#0@@44|) (Lexicographic__Byte__Order.__default.LargestLt $LZ |run#0@@115| |needle#0@@44|))) :qid |totalord.356:12| :skolemid |3121| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt (AsFuelBottom $ly@@415) |run#0@@115| |needle#0@@44|)) )))
(assert  (=> true (forall (($ly@@416 T@U) (|run#0@@116| T@U) (|needle#0@@45| T@U) ) (!  (=> (and (and (and (= (type $ly@@416) LayerTypeType) (= (type |run#0@@116|) (SeqType BoxType))) (= (type |needle#0@@45|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@116| |needle#0@@45|) (and (and ($Is |run#0@@116| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@45| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@116|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLt $ly@@416 |run#0@@116| |needle#0@@45|)) (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@416 |run#0@@116| |needle#0@@45|) (|Seq#Length| |run#0@@116|))) (forall ((|i#0@@111| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@111|) (<= |i#0@@111| (Lexicographic__Byte__Order.__default.LargestLt $ly@@416 |run#0@@116| |needle#0@@45|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#0@@111|)) |needle#0@@45|))) :qid |totalord.359:20| :skolemid |3122| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#0@@111|))) ))) (forall ((|i#1@@49| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@416 |run#0@@116| |needle#0@@45|) |i#1@@49|) (< |i#1@@49| (|Seq#Length| |run#0@@116|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@45| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#1@@49|))))) :qid |totalord.360:20| :skolemid |3123| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#1@@49|))) ))) (=> (|Seq#Contains| |run#0@@116| ($Box |needle#0@@45|)) (and (< (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@416 |run#0@@116| |needle#0@@45|) 1) (|Seq#Length| |run#0@@116|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@416 |run#0@@116| |needle#0@@45|) 1))) |needle#0@@45|))))) :qid |totalord.356:12| :skolemid |3124| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt $ly@@416 |run#0@@116| |needle#0@@45|)) ))))
(assert (forall (($ly@@417 T@U) (|run#0@@117| T@U) (|needle#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@417) LayerTypeType) (= (type |run#0@@117|) (SeqType BoxType))) (= (type |needle#0@@46|) (SeqType BoxType))) (and ($Is |run#0@@117| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@46| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@417 |run#0@@117| |needle#0@@46|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@117|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@117|) (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@417 |run#0@@117| |needle#0@@46|)))) :qid |totalord.356:12| :skolemid |3125| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@417 |run#0@@117| |needle#0@@46|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@418 T@U) (|run#0@@118| T@U) (|needle#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@418) LayerTypeType) (= (type |run#0@@118|) (SeqType BoxType))) (= (type |needle#0@@47|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@118| |needle#0@@47|) (and (and ($Is |run#0@@118| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@47| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@118|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@118|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@118|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@118| (LitInt 1)) |needle#0@@47|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@418) |run#0@@118| |needle#0@@47|) (ite  (or (= (|Seq#Length| |run#0@@118|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt $ly@@418 (|Seq#Drop| |run#0@@118| (LitInt 1)) |needle#0@@47|))))))) :qid |totalord.356:12| :skolemid |3126| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@418) |run#0@@118| |needle#0@@47|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@419 T@U) (|run#0@@119| T@U) (|needle#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@419) LayerTypeType) (= (type |run#0@@119|) (SeqType BoxType))) (= (type |needle#0@@48|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@119|) (Lit |needle#0@@48|)) (and (and ($Is |run#0@@119| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@48| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@119|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@119|) (LitInt 1))) (Lit |needle#0@@48|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@419) (Lit |run#0@@119|) (Lit |needle#0@@48|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@419) (Lit (|Seq#Drop| (Lit |run#0@@119|) (LitInt 1))) (Lit |needle#0@@48|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |3127| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@419) (Lit |run#0@@119|) (Lit |needle#0@@48|))) ))))
(assert (forall (($ly@@420 T@U) (|run#0@@120| T@U) (|needle#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@420) LayerTypeType) (= (type |run#0@@120|) (SeqType BoxType))) (= (type |needle#0@@49|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@420) |run#0@@120| |needle#0@@49|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@420 |run#0@@120| |needle#0@@49|))) :qid |totalord.388:12| :skolemid |3128| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@420) |run#0@@120| |needle#0@@49|)) )))
(assert (forall (($ly@@421 T@U) (|run#0@@121| T@U) (|needle#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@421) LayerTypeType) (= (type |run#0@@121|) (SeqType BoxType))) (= (type |needle#0@@50|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@421 |run#0@@121| |needle#0@@50|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@121| |needle#0@@50|))) :qid |totalord.388:12| :skolemid |3129| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@421) |run#0@@121| |needle#0@@50|)) )))
(assert  (=> true (forall (($ly@@422 T@U) (|run#0@@122| T@U) (|needle#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@422) LayerTypeType) (= (type |run#0@@122|) (SeqType BoxType))) (= (type |needle#0@@51|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@122| |needle#0@@51|) (and (and ($Is |run#0@@122| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@51| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@122|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@422 |run#0@@122| |needle#0@@51|) (|Seq#Length| |run#0@@122|)) (forall ((|i#0@@112| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@112|) (< |i#0@@112| (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@422 |run#0@@122| |needle#0@@51|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@112|)) |needle#0@@51|)) :qid |totalord.391:20| :skolemid |3130| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@112|))) ))) (forall ((|i#1@@50| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@422 |run#0@@122| |needle#0@@51|) |i#1@@50|) (< |i#1@@50| (|Seq#Length| |run#0@@122|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@51| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@50|)))) :qid |totalord.392:20| :skolemid |3131| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@50|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@422 |run#0@@122| |needle#0@@51|)))) :qid |totalord.388:12| :skolemid |3132| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@422 |run#0@@122| |needle#0@@51|)) ))))
(assert (forall (($ly@@423 T@U) (|run#0@@123| T@U) (|needle#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@423) LayerTypeType) (= (type |run#0@@123|) (SeqType BoxType))) (= (type |needle#0@@52|) (SeqType BoxType))) (and ($Is |run#0@@123| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@52| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@423 |run#0@@123| |needle#0@@52|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@423 |run#0@@123| |needle#0@@52|)))) :qid |totalord.388:12| :skolemid |3133| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@423 |run#0@@123| |needle#0@@52|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@424 T@U) (|run#0@@124| T@U) (|needle#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@424) LayerTypeType) (= (type |run#0@@124|) (SeqType BoxType))) (= (type |needle#0@@53|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@124| |needle#0@@53|) (and (and ($Is |run#0@@124| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@53| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@124|)))) (and (=> (not (= (|Seq#Length| |run#0@@124|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@124|) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|)) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@124|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@124|) |needle#0@@53|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@424) |run#0@@124| |needle#0@@53|) (ite (= (|Seq#Length| |run#0@@124|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|) (|Seq#Length| |run#0@@124|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@424 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@124|) |needle#0@@53|))))))) :qid |totalord.388:12| :skolemid |3134| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@424) |run#0@@124| |needle#0@@53|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@425 T@U) (|run#0@@125| T@U) (|needle#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@425) LayerTypeType) (= (type |run#0@@125|) (SeqType BoxType))) (= (type |needle#0@@54|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@125|) (Lit |needle#0@@54|)) (and (and ($Is |run#0@@125| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@54| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@125|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|))) (Lit |needle#0@@54|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@425) (Lit |run#0@@125|) (Lit |needle#0@@54|)) (ite (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|)) (|Seq#Length| (Lit |run#0@@125|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@425) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|))) (Lit |needle#0@@54|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |3135| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@425) (Lit |run#0@@125|) (Lit |needle#0@@54|))) ))))
(assert (forall (($ly@@426 T@U) (|s#0@@144| T@U) (|key#0@@81| T@U) (|lo#0@@13| Int) (|hi#0@@13| Int) ) (!  (=> (and (and (= (type $ly@@426) LayerTypeType) (= (type |s#0@@144|) (SeqType BoxType))) (= (type |key#0@@81|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@426) |s#0@@144| |key#0@@81| |lo#0@@13| |hi#0@@13|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@426 |s#0@@144| |key#0@@81| |lo#0@@13| |hi#0@@13|))) :qid |totalord.421:12| :skolemid |3136| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@426) |s#0@@144| |key#0@@81| |lo#0@@13| |hi#0@@13|)) )))
(assert (forall (($ly@@427 T@U) (|s#0@@145| T@U) (|key#0@@82| T@U) (|lo#0@@14| Int) (|hi#0@@14| Int) ) (!  (=> (and (and (= (type $ly@@427) LayerTypeType) (= (type |s#0@@145|) (SeqType BoxType))) (= (type |key#0@@82|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@427 |s#0@@145| |key#0@@82| |lo#0@@14| |hi#0@@14|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@145| |key#0@@82| |lo#0@@14| |hi#0@@14|))) :qid |totalord.421:12| :skolemid |3137| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@427) |s#0@@145| |key#0@@82| |lo#0@@14| |hi#0@@14|)) )))
(assert  (=> true (forall (($ly@@428 T@U) (|s#0@@146| T@U) (|key#0@@83| T@U) (|lo#0@@15| Int) (|hi#0@@15| Int) ) (!  (=> (and (and (and (= (type $ly@@428) LayerTypeType) (= (type |s#0@@146|) (SeqType BoxType))) (= (type |key#0@@83|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@146| |key#0@@83| |lo#0@@15| |hi#0@@15|) (and (and ($Is |s#0@@146| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@83| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@15|) (< |lo#0@@15| |hi#0@@15|)) (<= |hi#0@@15| (+ (|Seq#Length| |s#0@@146|) 1))) (=> (> |lo#0@@15| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@146| (- |lo#0@@15| 1))) |key#0@@83|))) (=> (<= |hi#0@@15| (|Seq#Length| |s#0@@146|)) (Lexicographic__Byte__Order.__default.lte |key#0@@83| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@146| (- |hi#0@@15| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@428 |s#0@@146| |key#0@@83| |lo#0@@15| |hi#0@@15|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@428 |s#0@@146| |key#0@@83| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@146|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@428 |s#0@@146| |key#0@@83| |lo#0@@15| |hi#0@@15|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@146| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@428 |s#0@@146| |key#0@@83| |lo#0@@15| |hi#0@@15|) 1))) |key#0@@83|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@428 |s#0@@146| |key#0@@83| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@146|)) (Lexicographic__Byte__Order.__default.lte |key#0@@83| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@146| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@428 |s#0@@146| |key#0@@83| |lo#0@@15| |hi#0@@15|))))))) :qid |totalord.421:12| :skolemid |3138| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@428 |s#0@@146| |key#0@@83| |lo#0@@15| |hi#0@@15|)) ))))
(assert (forall (($ly@@429 T@U) (|s#0@@147| T@U) (|key#0@@84| T@U) (|lo#0@@16| Int) (|hi#0@@16| Int) ) (!  (=> (and (and (and (= (type $ly@@429) LayerTypeType) (= (type |s#0@@147|) (SeqType BoxType))) (= (type |key#0@@84|) (SeqType BoxType))) (and ($Is |s#0@@147| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@84| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@429 |s#0@@147| |key#0@@84| |lo#0@@16| |hi#0@@16|) (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@147|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@147| (- |lo#0@@16| 1))) |key#0@@84|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@147|)) (Lexicographic__Byte__Order.__default.lte |key#0@@84| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@147| (- |hi#0@@16| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@147|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@147| (- |lo#0@@16| 1))) |key#0@@84|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@147|)) (Lexicographic__Byte__Order.__default.lte |key#0@@84| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@147| (- |hi#0@@16| 1)))))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@429 |s#0@@147| |key#0@@84| |lo#0@@16| |hi#0@@16|)))) :qid |totalord.421:12| :skolemid |3139| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@429 |s#0@@147| |key#0@@84| |lo#0@@16| |hi#0@@16|)) )))
(assert  (=> true (forall (($ly@@430 T@U) (|s#0@@148| T@U) (|key#0@@85| T@U) (|lo#0@@17| Int) (|hi#0@@17| Int) ) (!  (=> (and (and (and (= (type $ly@@430) LayerTypeType) (= (type |s#0@@148|) (SeqType BoxType))) (= (type |key#0@@85|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@148| |key#0@@85| |lo#0@@17| |hi#0@@17|) (and (and ($Is |s#0@@148| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@85| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@17|) (< |lo#0@@17| |hi#0@@17|)) (<= |hi#0@@17| (+ (|Seq#Length| |s#0@@148|) 1))) (=> (> |lo#0@@17| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (- |lo#0@@17| 1))) |key#0@@85|))) (=> (<= |hi#0@@17| (|Seq#Length| |s#0@@148|)) (Lexicographic__Byte__Order.__default.lte |key#0@@85| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (- |hi#0@@17| 1))))))))) (and (=> (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@3| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (- |mid#0@@3| 1))) |key#0@@85|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (- |mid#0@@3| 1))) |key#0@@85|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@148| |key#0@@85| |mid#0@@3| |hi#0@@17|))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (- |mid#0@@3| 1))) |key#0@@85|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@148| |key#0@@85| |lo#0@@17| |mid#0@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@430) |s#0@@148| |key#0@@85| |lo#0@@17| |hi#0@@17|) (ite (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@4| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (- |mid#0@@4| 1))) |key#0@@85|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@430 |s#0@@148| |key#0@@85| |mid#0@@4| |hi#0@@17|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@430 |s#0@@148| |key#0@@85| |lo#0@@17| |mid#0@@4|))) |lo#0@@17|)))) :qid |totalord.421:12| :skolemid |3140| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@430) |s#0@@148| |key#0@@85| |lo#0@@17| |hi#0@@17|)) ))))
(assert  (=> true (forall (($ly@@431 T@U) (|s#0@@149| T@U) (|key#0@@86| T@U) (|lo#0@@18| Int) (|hi#0@@18| Int) ) (!  (=> (and (and (and (= (type $ly@@431) LayerTypeType) (= (type |s#0@@149|) (SeqType BoxType))) (= (type |key#0@@86|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@149| |key#0@@86| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (and (and ($Is |s#0@@149| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@86| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@18|)) (< |lo#0@@18| |hi#0@@18|)) (<= (LitInt |hi#0@@18|) (+ (|Seq#Length| |s#0@@149|) 1))) (=> (> |lo#0@@18| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@149| (LitInt (- |lo#0@@18| 1)))) |key#0@@86|))) (=> (<= (LitInt |hi#0@@18|) (|Seq#Length| |s#0@@149|)) (Lexicographic__Byte__Order.__default.lte |key#0@@86| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@149| (LitInt (- |hi#0@@18| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@18| 1) |hi#0@@18|)))) (let ((|mid#1@@3| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@149| (- |mid#1@@3| 1))) |key#0@@86|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@149| (- |mid#1@@3| 1))) |key#0@@86|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@149| |key#0@@86| |mid#1@@3| (LitInt |hi#0@@18|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@149| (- |mid#1@@3| 1))) |key#0@@86|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@149| |key#0@@86| (LitInt |lo#0@@18|) |mid#1@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@431) |s#0@@149| |key#0@@86| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (ite (< (+ |lo#0@@18| 1) |hi#0@@18|) (let ((|mid#1@@4| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@149| (LitInt (- |mid#1@@4| 1)))) |key#0@@86|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@431) |s#0@@149| |key#0@@86| |mid#1@@4| (LitInt |hi#0@@18|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@431) |s#0@@149| |key#0@@86| (LitInt |lo#0@@18|) |mid#1@@4|))) |lo#0@@18|)))) :qid |totalord.421:12| :weight 3 :skolemid |3141| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@431) |s#0@@149| |key#0@@86| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|))) ))))
(assert  (=> true (forall (($ly@@432 T@U) (|s#0@@150| T@U) (|key#0@@87| T@U) (|lo#0@@19| Int) (|hi#0@@19| Int) ) (!  (=> (and (and (and (= (type $ly@@432) LayerTypeType) (= (type |s#0@@150|) (SeqType BoxType))) (= (type |key#0@@87|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@150|) (Lit |key#0@@87|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (and (and ($Is |s#0@@150| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@87| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@19|)) (< |lo#0@@19| |hi#0@@19|)) (<= (LitInt |hi#0@@19|) (+ (|Seq#Length| (Lit |s#0@@150|)) 1))) (=> (> |lo#0@@19| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@150|) (LitInt (- |lo#0@@19| 1)))) (Lit |key#0@@87|)))) (=> (<= (LitInt |hi#0@@19|) (|Seq#Length| (Lit |s#0@@150|))) (Lexicographic__Byte__Order.__default.lte (Lit |key#0@@87|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@150|) (LitInt (- |hi#0@@19| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@19| 1) |hi#0@@19|)))) (let ((|mid#2@@3| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@150|) (- |mid#2@@3| 1))) (Lit |key#0@@87|)) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@150|) (- |mid#2@@3| 1))) (Lit |key#0@@87|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@150|) (Lit |key#0@@87|) |mid#2@@3| (LitInt |hi#0@@19|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@150|) (- |mid#2@@3| 1))) (Lit |key#0@@87|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@150|) (Lit |key#0@@87|) (LitInt |lo#0@@19|) |mid#2@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@432) (Lit |s#0@@150|) (Lit |key#0@@87|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (ite (< (+ |lo#0@@19| 1) |hi#0@@19|) (let ((|mid#2@@4| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@150|) (LitInt (- |mid#2@@4| 1)))) (Lit |key#0@@87|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@432) (Lit |s#0@@150|) (Lit |key#0@@87|) |mid#2@@4| (LitInt |hi#0@@19|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@432) (Lit |s#0@@150|) (Lit |key#0@@87|) (LitInt |lo#0@@19|) |mid#2@@4|))) |lo#0@@19|)))) :qid |totalord.421:12| :weight 3 :skolemid |3142| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@432) (Lit |s#0@@150|) (Lit |key#0@@87|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|))) ))))
(assert (forall (($ly@@433 T@U) (|s#0@@151| T@U) (|key#0@@88| T@U) ) (!  (=> (and (and (= (type $ly@@433) LayerTypeType) (= (type |s#0@@151|) (SeqType BoxType))) (= (type |key#0@@88|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@433) |s#0@@151| |key#0@@88|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@433 |s#0@@151| |key#0@@88|))) :qid |totalord.441:22| :skolemid |3143| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@433) |s#0@@151| |key#0@@88|)) )))
(assert (forall (($ly@@434 T@U) (|s#0@@152| T@U) (|key#0@@89| T@U) ) (!  (=> (and (and (= (type $ly@@434) LayerTypeType) (= (type |s#0@@152|) (SeqType BoxType))) (= (type |key#0@@89|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@434 |s#0@@152| |key#0@@89|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@152| |key#0@@89|))) :qid |totalord.441:22| :skolemid |3144| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@434) |s#0@@152| |key#0@@89|)) )))
(assert  (=> true (forall (($ly@@435 T@U) (|s#0@@153| T@U) (|key#0@@90| T@U) ) (!  (=> (and (and (and (= (type $ly@@435) LayerTypeType) (= (type |s#0@@153|) (SeqType BoxType))) (= (type |key#0@@90|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@153| |key#0@@90|) (and ($Is |s#0@@153| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@90| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@435 |s#0@@153| |key#0@@90|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@435 |s#0@@153| |key#0@@90|) (|Seq#Length| |s#0@@153|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@435 |s#0@@153| |key#0@@90|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@153| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@435 |s#0@@153| |key#0@@90|) 1))) |key#0@@90|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@435 |s#0@@153| |key#0@@90|) (|Seq#Length| |s#0@@153|)) (Lexicographic__Byte__Order.__default.lte |key#0@@90| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@153| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@435 |s#0@@153| |key#0@@90|))))))) :qid |totalord.441:22| :skolemid |3145| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@435 |s#0@@153| |key#0@@90|)) ))))
(assert (forall (($ly@@436 T@U) (|s#0@@154| T@U) (|key#0@@91| T@U) ) (!  (=> (and (and (and (= (type $ly@@436) LayerTypeType) (= (type |s#0@@154|) (SeqType BoxType))) (= (type |key#0@@91|) (SeqType BoxType))) (and ($Is |s#0@@154| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@91| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@436 |s#0@@154| |key#0@@91|) true) (=> true (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@436 |s#0@@154| |key#0@@91|)))) :qid |totalord.441:22| :skolemid |3146| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@436 |s#0@@154| |key#0@@91|)) )))
(assert  (=> true (forall (($ly@@437 T@U) (|s#0@@155| T@U) (|key#0@@92| T@U) ) (!  (=> (and (and (and (= (type $ly@@437) LayerTypeType) (= (type |s#0@@155|) (SeqType BoxType))) (= (type |key#0@@92|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@155| |key#0@@92|) (and ($Is |s#0@@155| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@92| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@155| |key#0@@92| (LitInt 0) (+ (|Seq#Length| |s#0@@155|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@437) |s#0@@155| |key#0@@92|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@155| |key#0@@92| (LitInt 0) (+ (|Seq#Length| |s#0@@155|) 1))))) :qid |totalord.441:22| :skolemid |3147| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@437) |s#0@@155| |key#0@@92|)) ))))
(assert  (=> true (forall (($ly@@438 T@U) (|s#0@@156| T@U) (|key#0@@93| T@U) ) (!  (=> (and (and (and (= (type $ly@@438) LayerTypeType) (= (type |s#0@@156|) (SeqType BoxType))) (= (type |key#0@@93|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@156|) (Lit |key#0@@93|)) (and ($Is |s#0@@156| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@93| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@156|) (Lit |key#0@@93|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@156|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@438) (Lit |s#0@@156|) (Lit |key#0@@93|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@156|) (Lit |key#0@@93|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@156|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |3148| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@438) (Lit |s#0@@156|) (Lit |key#0@@93|))) ))))
(assert (forall (($ly@@439 T@U) (|run#0@@126| T@U) (|needle#0@@55| T@U) ) (!  (=> (and (and (= (type $ly@@439) LayerTypeType) (= (type |run#0@@126|) (SeqType BoxType))) (= (type |needle#0@@55|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@439) |run#0@@126| |needle#0@@55|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@439 |run#0@@126| |needle#0@@55|))) :qid |totalord.449:12| :skolemid |3149| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@439) |run#0@@126| |needle#0@@55|)) )))
(assert (forall (($ly@@440 T@U) (|run#0@@127| T@U) (|needle#0@@56| T@U) ) (!  (=> (and (and (= (type $ly@@440) LayerTypeType) (= (type |run#0@@127|) (SeqType BoxType))) (= (type |needle#0@@56|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@440 |run#0@@127| |needle#0@@56|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@127| |needle#0@@56|))) :qid |totalord.449:12| :skolemid |3150| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@440) |run#0@@127| |needle#0@@56|)) )))
(assert  (=> true (forall (($ly@@441 T@U) (|run#0@@128| T@U) (|needle#0@@57| T@U) ) (!  (=> (and (and (and (= (type $ly@@441) LayerTypeType) (= (type |run#0@@128|) (SeqType BoxType))) (= (type |needle#0@@57|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@128| |needle#0@@57|) (and (and ($Is |run#0@@128| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@57| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@128|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@441 |run#0@@128| |needle#0@@57|) (|Seq#Length| |run#0@@128|)) (forall ((|i#0@@113| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@113|) (< |i#0@@113| (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@441 |run#0@@128| |needle#0@@57|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@113|)) |needle#0@@57|)) :qid |totalord.452:20| :skolemid |3151| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@113|))) ))) (forall ((|i#1@@51| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@441 |run#0@@128| |needle#0@@57|) |i#1@@51|) (< |i#1@@51| (|Seq#Length| |run#0@@128|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@57| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@51|)))) :qid |totalord.453:20| :skolemid |3152| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@51|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@441 |run#0@@128| |needle#0@@57|)))) :qid |totalord.449:12| :skolemid |3153| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@441 |run#0@@128| |needle#0@@57|)) ))))
(assert (forall (($ly@@442 T@U) (|run#0@@129| T@U) (|needle#0@@58| T@U) ) (!  (=> (and (and (and (= (type $ly@@442) LayerTypeType) (= (type |run#0@@129|) (SeqType BoxType))) (= (type |needle#0@@58|) (SeqType BoxType))) (and ($Is |run#0@@129| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@58| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@442 |run#0@@129| |needle#0@@58|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@442 |run#0@@129| |needle#0@@58|)))) :qid |totalord.449:12| :skolemid |3154| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@442 |run#0@@129| |needle#0@@58|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@443 T@U) (|run#0@@130| T@U) (|needle#0@@59| T@U) ) (!  (=> (and (and (and (= (type $ly@@443) LayerTypeType) (= (type |run#0@@130|) (SeqType BoxType))) (= (type |needle#0@@59|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@130| |needle#0@@59|) (and (and ($Is |run#0@@130| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@59| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@130|)))) (and (=> (not (= (|Seq#Length| |run#0@@130|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@130|) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|)) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@130|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@130|) |needle#0@@59|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@443) |run#0@@130| |needle#0@@59|) (ite (= (|Seq#Length| |run#0@@130|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|) (|Seq#Length| |run#0@@130|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@443 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@130|) |needle#0@@59|))))))) :qid |totalord.449:12| :skolemid |3155| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@443) |run#0@@130| |needle#0@@59|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@444 T@U) (|run#0@@131| T@U) (|needle#0@@60| T@U) ) (!  (=> (and (and (and (= (type $ly@@444) LayerTypeType) (= (type |run#0@@131|) (SeqType BoxType))) (= (type |needle#0@@60|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@131|) (Lit |needle#0@@60|)) (and (and ($Is |run#0@@131| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@60| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@131|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|))) (Lit |needle#0@@60|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@444) (Lit |run#0@@131|) (Lit |needle#0@@60|)) (ite (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|)) (|Seq#Length| (Lit |run#0@@131|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@444) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|))) (Lit |needle#0@@60|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |3156| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@444) (Lit |run#0@@131|) (Lit |needle#0@@60|))) ))))
(assert (forall (($ly@@445 T@U) (|s#0@@157| T@U) (|key#0@@94| T@U) (|lo#0@@20| Int) (|hi#0@@20| Int) ) (!  (=> (and (and (= (type $ly@@445) LayerTypeType) (= (type |s#0@@157|) (SeqType BoxType))) (= (type |key#0@@94|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@445) |s#0@@157| |key#0@@94| |lo#0@@20| |hi#0@@20|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@445 |s#0@@157| |key#0@@94| |lo#0@@20| |hi#0@@20|))) :qid |totalord.482:12| :skolemid |3157| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@445) |s#0@@157| |key#0@@94| |lo#0@@20| |hi#0@@20|)) )))
(assert (forall (($ly@@446 T@U) (|s#0@@158| T@U) (|key#0@@95| T@U) (|lo#0@@21| Int) (|hi#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@446) LayerTypeType) (= (type |s#0@@158|) (SeqType BoxType))) (= (type |key#0@@95|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@446 |s#0@@158| |key#0@@95| |lo#0@@21| |hi#0@@21|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@158| |key#0@@95| |lo#0@@21| |hi#0@@21|))) :qid |totalord.482:12| :skolemid |3158| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@446) |s#0@@158| |key#0@@95| |lo#0@@21| |hi#0@@21|)) )))
(assert  (=> true (forall (($ly@@447 T@U) (|s#0@@159| T@U) (|key#0@@96| T@U) (|lo#0@@22| Int) (|hi#0@@22| Int) ) (!  (=> (and (and (and (= (type $ly@@447) LayerTypeType) (= (type |s#0@@159|) (SeqType BoxType))) (= (type |key#0@@96|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@159| |key#0@@96| |lo#0@@22| |hi#0@@22|) (and (and ($Is |s#0@@159| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@96| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@22|) (< |lo#0@@22| |hi#0@@22|)) (<= |hi#0@@22| (+ (|Seq#Length| |s#0@@159|) 1))) (=> (> |lo#0@@22| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@159| (- |lo#0@@22| 1))) |key#0@@96|))) (=> (<= |hi#0@@22| (|Seq#Length| |s#0@@159|)) (Lexicographic__Byte__Order.__default.lt |key#0@@96| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@159| (- |hi#0@@22| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@447 |s#0@@159| |key#0@@96| |lo#0@@22| |hi#0@@22|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@447 |s#0@@159| |key#0@@96| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@159|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@447 |s#0@@159| |key#0@@96| |lo#0@@22| |hi#0@@22|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@159| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@447 |s#0@@159| |key#0@@96| |lo#0@@22| |hi#0@@22|) 1))) |key#0@@96|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@447 |s#0@@159| |key#0@@96| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@159|)) (Lexicographic__Byte__Order.__default.lt |key#0@@96| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@159| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@447 |s#0@@159| |key#0@@96| |lo#0@@22| |hi#0@@22|))))))) :qid |totalord.482:12| :skolemid |3159| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@447 |s#0@@159| |key#0@@96| |lo#0@@22| |hi#0@@22|)) ))))
(assert (forall (($ly@@448 T@U) (|s#0@@160| T@U) (|key#0@@97| T@U) (|lo#0@@23| Int) (|hi#0@@23| Int) ) (!  (=> (and (and (and (= (type $ly@@448) LayerTypeType) (= (type |s#0@@160|) (SeqType BoxType))) (= (type |key#0@@97|) (SeqType BoxType))) (and ($Is |s#0@@160| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@97| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@448 |s#0@@160| |key#0@@97| |lo#0@@23| |hi#0@@23|) (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@160|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@160| (- |lo#0@@23| 1))) |key#0@@97|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@160|)) (Lexicographic__Byte__Order.__default.lt |key#0@@97| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@160| (- |hi#0@@23| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@160|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@160| (- |lo#0@@23| 1))) |key#0@@97|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@160|)) (Lexicographic__Byte__Order.__default.lt |key#0@@97| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@160| (- |hi#0@@23| 1)))))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@448 |s#0@@160| |key#0@@97| |lo#0@@23| |hi#0@@23|)))) :qid |totalord.482:12| :skolemid |3160| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@448 |s#0@@160| |key#0@@97| |lo#0@@23| |hi#0@@23|)) )))
(assert  (=> true (forall (($ly@@449 T@U) (|s#0@@161| T@U) (|key#0@@98| T@U) (|lo#0@@24| Int) (|hi#0@@24| Int) ) (!  (=> (and (and (and (= (type $ly@@449) LayerTypeType) (= (type |s#0@@161|) (SeqType BoxType))) (= (type |key#0@@98|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@161| |key#0@@98| |lo#0@@24| |hi#0@@24|) (and (and ($Is |s#0@@161| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@98| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@24|) (< |lo#0@@24| |hi#0@@24|)) (<= |hi#0@@24| (+ (|Seq#Length| |s#0@@161|) 1))) (=> (> |lo#0@@24| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@161| (- |lo#0@@24| 1))) |key#0@@98|))) (=> (<= |hi#0@@24| (|Seq#Length| |s#0@@161|)) (Lexicographic__Byte__Order.__default.lt |key#0@@98| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@161| (- |hi#0@@24| 1))))))))) (and (=> (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@5| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@161| (- |mid#0@@5| 1))) |key#0@@98|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@161| (- |mid#0@@5| 1))) |key#0@@98|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@161| |key#0@@98| |mid#0@@5| |hi#0@@24|))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@161| (- |mid#0@@5| 1))) |key#0@@98|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@161| |key#0@@98| |lo#0@@24| |mid#0@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@449) |s#0@@161| |key#0@@98| |lo#0@@24| |hi#0@@24|) (ite (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@6| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@161| (- |mid#0@@6| 1))) |key#0@@98|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@449 |s#0@@161| |key#0@@98| |mid#0@@6| |hi#0@@24|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@449 |s#0@@161| |key#0@@98| |lo#0@@24| |mid#0@@6|))) |lo#0@@24|)))) :qid |totalord.482:12| :skolemid |3161| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@449) |s#0@@161| |key#0@@98| |lo#0@@24| |hi#0@@24|)) ))))
(assert  (=> true (forall (($ly@@450 T@U) (|s#0@@162| T@U) (|key#0@@99| T@U) (|lo#0@@25| Int) (|hi#0@@25| Int) ) (!  (=> (and (and (and (= (type $ly@@450) LayerTypeType) (= (type |s#0@@162|) (SeqType BoxType))) (= (type |key#0@@99|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@162| |key#0@@99| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (and (and ($Is |s#0@@162| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@99| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@25|)) (< |lo#0@@25| |hi#0@@25|)) (<= (LitInt |hi#0@@25|) (+ (|Seq#Length| |s#0@@162|) 1))) (=> (> |lo#0@@25| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@162| (LitInt (- |lo#0@@25| 1)))) |key#0@@99|))) (=> (<= (LitInt |hi#0@@25|) (|Seq#Length| |s#0@@162|)) (Lexicographic__Byte__Order.__default.lt |key#0@@99| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@162| (LitInt (- |hi#0@@25| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@25| 1) |hi#0@@25|)))) (let ((|mid#1@@5| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@162| (- |mid#1@@5| 1))) |key#0@@99|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@162| (- |mid#1@@5| 1))) |key#0@@99|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@162| |key#0@@99| |mid#1@@5| (LitInt |hi#0@@25|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@162| (- |mid#1@@5| 1))) |key#0@@99|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@162| |key#0@@99| (LitInt |lo#0@@25|) |mid#1@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@450) |s#0@@162| |key#0@@99| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (ite (< (+ |lo#0@@25| 1) |hi#0@@25|) (let ((|mid#1@@6| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@162| (LitInt (- |mid#1@@6| 1)))) |key#0@@99|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@450) |s#0@@162| |key#0@@99| |mid#1@@6| (LitInt |hi#0@@25|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@450) |s#0@@162| |key#0@@99| (LitInt |lo#0@@25|) |mid#1@@6|))) |lo#0@@25|)))) :qid |totalord.482:12| :weight 3 :skolemid |3162| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@450) |s#0@@162| |key#0@@99| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|))) ))))
(assert  (=> true (forall (($ly@@451 T@U) (|s#0@@163| T@U) (|key#0@@100| T@U) (|lo#0@@26| Int) (|hi#0@@26| Int) ) (!  (=> (and (and (and (= (type $ly@@451) LayerTypeType) (= (type |s#0@@163|) (SeqType BoxType))) (= (type |key#0@@100|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@163|) (Lit |key#0@@100|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (and (and ($Is |s#0@@163| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@100| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@26|)) (< |lo#0@@26| |hi#0@@26|)) (<= (LitInt |hi#0@@26|) (+ (|Seq#Length| (Lit |s#0@@163|)) 1))) (=> (> |lo#0@@26| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@163|) (LitInt (- |lo#0@@26| 1)))) (Lit |key#0@@100|)))) (=> (<= (LitInt |hi#0@@26|) (|Seq#Length| (Lit |s#0@@163|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@100|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@163|) (LitInt (- |hi#0@@26| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@26| 1) |hi#0@@26|)))) (let ((|mid#2@@5| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@163|) (- |mid#2@@5| 1))) (Lit |key#0@@100|)) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@163|) (- |mid#2@@5| 1))) (Lit |key#0@@100|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@163|) (Lit |key#0@@100|) |mid#2@@5| (LitInt |hi#0@@26|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@163|) (- |mid#2@@5| 1))) (Lit |key#0@@100|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@163|) (Lit |key#0@@100|) (LitInt |lo#0@@26|) |mid#2@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@451) (Lit |s#0@@163|) (Lit |key#0@@100|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (ite (< (+ |lo#0@@26| 1) |hi#0@@26|) (let ((|mid#2@@6| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@163|) (LitInt (- |mid#2@@6| 1)))) (Lit |key#0@@100|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@451) (Lit |s#0@@163|) (Lit |key#0@@100|) |mid#2@@6| (LitInt |hi#0@@26|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@451) (Lit |s#0@@163|) (Lit |key#0@@100|) (LitInt |lo#0@@26|) |mid#2@@6|))) |lo#0@@26|)))) :qid |totalord.482:12| :weight 3 :skolemid |3163| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@451) (Lit |s#0@@163|) (Lit |key#0@@100|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|))) ))))
(assert (forall (($ly@@452 T@U) (|s#0@@164| T@U) (|key#0@@101| T@U) ) (!  (=> (and (and (= (type $ly@@452) LayerTypeType) (= (type |s#0@@164|) (SeqType BoxType))) (= (type |key#0@@101|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@452) |s#0@@164| |key#0@@101|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@452 |s#0@@164| |key#0@@101|))) :qid |totalord.502:22| :skolemid |3164| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@452) |s#0@@164| |key#0@@101|)) )))
(assert (forall (($ly@@453 T@U) (|s#0@@165| T@U) (|key#0@@102| T@U) ) (!  (=> (and (and (= (type $ly@@453) LayerTypeType) (= (type |s#0@@165|) (SeqType BoxType))) (= (type |key#0@@102|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@453 |s#0@@165| |key#0@@102|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@165| |key#0@@102|))) :qid |totalord.502:22| :skolemid |3165| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@453) |s#0@@165| |key#0@@102|)) )))
(assert  (=> true (forall (($ly@@454 T@U) (|s#0@@166| T@U) (|key#0@@103| T@U) ) (!  (=> (and (and (and (= (type $ly@@454) LayerTypeType) (= (type |s#0@@166|) (SeqType BoxType))) (= (type |key#0@@103|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@166| |key#0@@103|) (and ($Is |s#0@@166| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@103| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@454 |s#0@@166| |key#0@@103|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@454 |s#0@@166| |key#0@@103|) (|Seq#Length| |s#0@@166|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@454 |s#0@@166| |key#0@@103|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@166| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@454 |s#0@@166| |key#0@@103|) 1))) |key#0@@103|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@454 |s#0@@166| |key#0@@103|) (|Seq#Length| |s#0@@166|)) (Lexicographic__Byte__Order.__default.lt |key#0@@103| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@166| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@454 |s#0@@166| |key#0@@103|))))))) :qid |totalord.502:22| :skolemid |3166| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@454 |s#0@@166| |key#0@@103|)) ))))
(assert (forall (($ly@@455 T@U) (|s#0@@167| T@U) (|key#0@@104| T@U) ) (!  (=> (and (and (and (= (type $ly@@455) LayerTypeType) (= (type |s#0@@167|) (SeqType BoxType))) (= (type |key#0@@104|) (SeqType BoxType))) (and ($Is |s#0@@167| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@104| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@455 |s#0@@167| |key#0@@104|) true) (=> true (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@455 |s#0@@167| |key#0@@104|)))) :qid |totalord.502:22| :skolemid |3167| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@455 |s#0@@167| |key#0@@104|)) )))
(assert  (=> true (forall (($ly@@456 T@U) (|s#0@@168| T@U) (|key#0@@105| T@U) ) (!  (=> (and (and (and (= (type $ly@@456) LayerTypeType) (= (type |s#0@@168|) (SeqType BoxType))) (= (type |key#0@@105|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@168| |key#0@@105|) (and ($Is |s#0@@168| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@105| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@168| |key#0@@105| (LitInt 0) (+ (|Seq#Length| |s#0@@168|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@456) |s#0@@168| |key#0@@105|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@168| |key#0@@105| (LitInt 0) (+ (|Seq#Length| |s#0@@168|) 1))))) :qid |totalord.502:22| :skolemid |3168| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@456) |s#0@@168| |key#0@@105|)) ))))
(assert  (=> true (forall (($ly@@457 T@U) (|s#0@@169| T@U) (|key#0@@106| T@U) ) (!  (=> (and (and (and (= (type $ly@@457) LayerTypeType) (= (type |s#0@@169|) (SeqType BoxType))) (= (type |key#0@@106|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@169|) (Lit |key#0@@106|)) (and ($Is |s#0@@169| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@106| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@169|) (Lit |key#0@@106|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@169|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@457) (Lit |s#0@@169|) (Lit |key#0@@106|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@169|) (Lit |key#0@@106|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@169|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |3169| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@457) (Lit |s#0@@169|) (Lit |key#0@@106|))) ))))
(assert  (=> true (forall ((|a#0@@125| T@U) (|b#0@@96| T@U) ) (!  (=> (and (and (= (type |a#0@@125|) (MapType0Type BoxType boolType)) (= (type |b#0@@96|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@125| |b#0@@96|) (and ($Is |a#0@@125| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@96| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalord.675:23| :skolemid |3170| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@125| |b#0@@96|)) ))))
(assert (forall ((|a#0@@126| T@U) (|b#0@@97| T@U) ) (!  (=> (and (and (= (type |a#0@@126|) (MapType0Type BoxType boolType)) (= (type |b#0@@97|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@126| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@97| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@126| |b#0@@97|) true) (=> true (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@126| |b#0@@97|)))) :qid |totalord.675:23| :skolemid |3171| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@126| |b#0@@97|)) )))
(assert  (=> true (forall ((|a#0@@127| T@U) (|b#0@@98| T@U) ) (!  (=> (and (and (= (type |a#0@@127|) (MapType0Type BoxType boolType)) (= (type |b#0@@98|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@127| |b#0@@98|) (and ($Is |a#0@@127| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@98| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@7| T@U) (|y#0@@9| T@U) ) (!  (=> (and (and (and (= (type |x#0@@7|) (SeqType BoxType)) (= (type |y#0@@9|) (SeqType BoxType))) (and ($Is |x#0@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@9| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |b#0@@98| ($Box |y#0@@9|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#0@@7| |y#0@@9|)) :qid |totalord.676:12| :skolemid |3172| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@7| |y#0@@9|)) :pattern ( (MapType0Select |b#0@@98| ($Box |y#0@@9|)) (MapType0Select |a#0@@127| ($Box |x#0@@7|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@127| |b#0@@98|) (forall ((|x#0@@8| T@U) (|y#0@@10| T@U) ) (!  (=> (and (and (and (= (type |x#0@@8|) (SeqType BoxType)) (= (type |y#0@@10|) (SeqType BoxType))) (and ($Is |x#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@127| ($Box |x#0@@8|))) (U_2_bool (MapType0Select |b#0@@98| ($Box |y#0@@10|))))) (Lexicographic__Byte__Order.__default.lte |x#0@@8| |y#0@@10|)) :qid |totalord.676:12| :skolemid |3173| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@8| |y#0@@10|)) :pattern ( (MapType0Select |b#0@@98| ($Box |y#0@@10|)) (MapType0Select |a#0@@127| ($Box |x#0@@8|))) ))) (=> (forall ((|x#0@@9| T@U) (|y#0@@11| T@U) ) (!  (=> (and (and (and (= (type |x#0@@9|) (SeqType BoxType)) (= (type |y#0@@11|) (SeqType BoxType))) (and ($Is |x#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@11| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@127| ($Box |x#0@@9|))) (U_2_bool (MapType0Select |b#0@@98| ($Box |y#0@@11|))))) (Lexicographic__Byte__Order.__default.lte |x#0@@9| |y#0@@11|)) :qid |totalord.676:12| :skolemid |3173| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@9| |y#0@@11|)) :pattern ( (MapType0Select |b#0@@98| ($Box |y#0@@11|)) (MapType0Select |a#0@@127| ($Box |x#0@@9|))) )) (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@127| |b#0@@98|))))) :qid |totalord.675:23| :skolemid |3174| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@127| |b#0@@98|)) ))))
(assert  (=> true (forall ((|a#0@@128| T@U) (|b#0@@99| T@U) ) (!  (=> (and (and (= (type |a#0@@128|) (MapType0Type BoxType boolType)) (= (type |b#0@@99|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@128|) (Lit |b#0@@99|)) (and ($Is |a#0@@128| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@99| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@5| T@U) (|y#1@@5| T@U) ) (!  (=> (and (and (and (= (type |x#1@@5|) (SeqType BoxType)) (= (type |y#1@@5|) (SeqType BoxType))) (and ($Is |x#1@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@5| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |b#0@@99|) ($Box |y#1@@5|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#1@@5| |y#1@@5|)) :qid |totalord.676:12| :skolemid |3175| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@5| |y#1@@5|)) :pattern ( (MapType0Select |b#0@@99| ($Box |y#1@@5|)) (MapType0Select |a#0@@128| ($Box |x#1@@5|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@128|) (Lit |b#0@@99|)) (forall ((|x#1@@6| T@U) (|y#1@@6| T@U) ) (!  (=> (and (and (and (= (type |x#1@@6|) (SeqType BoxType)) (= (type |y#1@@6|) (SeqType BoxType))) (and ($Is |x#1@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@6| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@128|) ($Box |x#1@@6|))) (U_2_bool (MapType0Select (Lit |b#0@@99|) ($Box |y#1@@6|))))) (Lexicographic__Byte__Order.__default.lte |x#1@@6| |y#1@@6|)) :qid |totalord.676:12| :skolemid |3176| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@6| |y#1@@6|)) :pattern ( (MapType0Select |b#0@@99| ($Box |y#1@@6|)) (MapType0Select |a#0@@128| ($Box |x#1@@6|))) ))) (=> (forall ((|x#1@@7| T@U) (|y#1@@7| T@U) ) (!  (=> (and (and (and (= (type |x#1@@7|) (SeqType BoxType)) (= (type |y#1@@7|) (SeqType BoxType))) (and ($Is |x#1@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@7| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@128|) ($Box |x#1@@7|))) (U_2_bool (MapType0Select (Lit |b#0@@99|) ($Box |y#1@@7|))))) (Lexicographic__Byte__Order.__default.lte |x#1@@7| |y#1@@7|)) :qid |totalord.676:12| :skolemid |3176| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@7| |y#1@@7|)) :pattern ( (MapType0Select |b#0@@99| ($Box |y#1@@7|)) (MapType0Select |a#0@@128| ($Box |x#1@@7|))) )) (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@128|) (Lit |b#0@@99|)))))) :qid |totalord.675:23| :weight 3 :skolemid |3177| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@128|) (Lit |b#0@@99|))) ))))
(assert  (=> true (forall ((|a#0@@129| T@U) (|b#0@@100| T@U) ) (!  (=> (and (and (= (type |a#0@@129|) (MapType0Type BoxType boolType)) (= (type |b#0@@100|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@129| |b#0@@100|) (and ($Is |a#0@@129| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@100| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalord.679:22| :skolemid |3178| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@129| |b#0@@100|)) ))))
(assert (forall ((|a#0@@130| T@U) (|b#0@@101| T@U) ) (!  (=> (and (and (= (type |a#0@@130|) (MapType0Type BoxType boolType)) (= (type |b#0@@101|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@130| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@101| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@130| |b#0@@101|) true) (=> true (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@130| |b#0@@101|)))) :qid |totalord.679:22| :skolemid |3179| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@130| |b#0@@101|)) )))
(assert  (=> true (forall ((|a#0@@131| T@U) (|b#0@@102| T@U) ) (!  (=> (and (and (= (type |a#0@@131|) (MapType0Type BoxType boolType)) (= (type |b#0@@102|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@131| |b#0@@102|) (and ($Is |a#0@@131| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@102| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@10| T@U) (|y#0@@12| T@U) ) (!  (=> (and (and (and (= (type |x#0@@10|) (SeqType BoxType)) (= (type |y#0@@12|) (SeqType BoxType))) (and ($Is |x#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@12| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |b#0@@102| ($Box |y#0@@12|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#0@@10| |y#0@@12|)) :qid |totalord.680:12| :skolemid |3180| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@10| |y#0@@12|)) :pattern ( (MapType0Select |b#0@@102| ($Box |y#0@@12|)) (MapType0Select |a#0@@131| ($Box |x#0@@10|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@131| |b#0@@102|) (forall ((|x#0@@11| T@U) (|y#0@@13| T@U) ) (!  (=> (and (and (and (= (type |x#0@@11|) (SeqType BoxType)) (= (type |y#0@@13|) (SeqType BoxType))) (and ($Is |x#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@13| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@131| ($Box |x#0@@11|))) (U_2_bool (MapType0Select |b#0@@102| ($Box |y#0@@13|))))) (Lexicographic__Byte__Order.__default.lt |x#0@@11| |y#0@@13|)) :qid |totalord.680:12| :skolemid |3181| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@11| |y#0@@13|)) :pattern ( (MapType0Select |b#0@@102| ($Box |y#0@@13|)) (MapType0Select |a#0@@131| ($Box |x#0@@11|))) ))) (=> (forall ((|x#0@@12| T@U) (|y#0@@14| T@U) ) (!  (=> (and (and (and (= (type |x#0@@12|) (SeqType BoxType)) (= (type |y#0@@14|) (SeqType BoxType))) (and ($Is |x#0@@12| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@14| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@131| ($Box |x#0@@12|))) (U_2_bool (MapType0Select |b#0@@102| ($Box |y#0@@14|))))) (Lexicographic__Byte__Order.__default.lt |x#0@@12| |y#0@@14|)) :qid |totalord.680:12| :skolemid |3181| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@12| |y#0@@14|)) :pattern ( (MapType0Select |b#0@@102| ($Box |y#0@@14|)) (MapType0Select |a#0@@131| ($Box |x#0@@12|))) )) (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@131| |b#0@@102|))))) :qid |totalord.679:22| :skolemid |3182| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@131| |b#0@@102|)) ))))
(assert  (=> true (forall ((|a#0@@132| T@U) (|b#0@@103| T@U) ) (!  (=> (and (and (= (type |a#0@@132|) (MapType0Type BoxType boolType)) (= (type |b#0@@103|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@132|) (Lit |b#0@@103|)) (and ($Is |a#0@@132| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@103| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@8| T@U) (|y#1@@8| T@U) ) (!  (=> (and (and (and (= (type |x#1@@8|) (SeqType BoxType)) (= (type |y#1@@8|) (SeqType BoxType))) (and ($Is |x#1@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@8| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |b#0@@103|) ($Box |y#1@@8|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#1@@8| |y#1@@8|)) :qid |totalord.680:12| :skolemid |3183| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@8| |y#1@@8|)) :pattern ( (MapType0Select |b#0@@103| ($Box |y#1@@8|)) (MapType0Select |a#0@@132| ($Box |x#1@@8|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@132|) (Lit |b#0@@103|)) (forall ((|x#1@@9| T@U) (|y#1@@9| T@U) ) (!  (=> (and (and (and (= (type |x#1@@9|) (SeqType BoxType)) (= (type |y#1@@9|) (SeqType BoxType))) (and ($Is |x#1@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@9| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@132|) ($Box |x#1@@9|))) (U_2_bool (MapType0Select (Lit |b#0@@103|) ($Box |y#1@@9|))))) (Lexicographic__Byte__Order.__default.lt |x#1@@9| |y#1@@9|)) :qid |totalord.680:12| :skolemid |3184| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@9| |y#1@@9|)) :pattern ( (MapType0Select |b#0@@103| ($Box |y#1@@9|)) (MapType0Select |a#0@@132| ($Box |x#1@@9|))) ))) (=> (forall ((|x#1@@10| T@U) (|y#1@@10| T@U) ) (!  (=> (and (and (and (= (type |x#1@@10|) (SeqType BoxType)) (= (type |y#1@@10|) (SeqType BoxType))) (and ($Is |x#1@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@132|) ($Box |x#1@@10|))) (U_2_bool (MapType0Select (Lit |b#0@@103|) ($Box |y#1@@10|))))) (Lexicographic__Byte__Order.__default.lt |x#1@@10| |y#1@@10|)) :qid |totalord.680:12| :skolemid |3184| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@10| |y#1@@10|)) :pattern ( (MapType0Select |b#0@@103| ($Box |y#1@@10|)) (MapType0Select |a#0@@132| ($Box |x#1@@10|))) )) (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@132|) (Lit |b#0@@103|)))))) :qid |totalord.679:22| :weight 3 :skolemid |3185| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@132|) (Lit |b#0@@103|))) ))))
(assert (forall (($ly@@458 T@U) (|a#0@@133| T@U) ) (!  (=> (and (= (type $ly@@458) LayerTypeType) (= (type |a#0@@133|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@458) |a#0@@133|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@458 |a#0@@133|)) (=> (Lexicographic__Byte__Order.__default.NotMinimum $ly@@458 |a#0@@133|) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@458) |a#0@@133|)))) :qid |totalord.696:23| :skolemid |3186| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@458) |a#0@@133|)) )))
(assert (forall (($ly@@459 T@U) (|a#0@@134| T@U) ) (!  (=> (and (= (type $ly@@459) LayerTypeType) (= (type |a#0@@134|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum $ly@@459 |a#0@@134|) (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@134|)) (=> (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@134|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@459 |a#0@@134|)))) :qid |totalord.696:23| :skolemid |3187| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@459) |a#0@@134|)) )))
(assert  (=> true (forall (($ly@@460 T@U) (|a#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@460) LayerTypeType) (= (type |a#0@@135|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@135|) ($Is |a#0@@135| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalord.696:23| :skolemid |3188| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum $ly@@460 |a#0@@135|)) ))))
(assert (forall (($ly@@461 T@U) (|a#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@461) LayerTypeType) (= (type |a#0@@136|) (SeqType BoxType))) ($Is |a#0@@136| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@461 |a#0@@136|) true) (=> true (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@461 |a#0@@136|)))) :qid |totalord.696:23| :skolemid |3189| :pattern ( (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@461 |a#0@@136|)) )))
(assert  (=> true (forall (($ly@@462 T@U) (|a#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@462) LayerTypeType) (= (type |a#0@@137|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@137|) ($Is |a#0@@137| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#0@@104| T@U) ) (!  (=> (and (= (type |b#0@@104|) (SeqType BoxType)) ($Is |b#0@@104| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#0@@104| |a#0@@137|)) :qid |totalord.697:12| :skolemid |3190| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@104| |a#0@@137|)) )) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@462) |a#0@@137|) (exists ((|b#0@@105| T@U) ) (!  (and (= (type |b#0@@105|) (SeqType BoxType)) (and ($Is |b#0@@105| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#0@@105| |a#0@@137|))) :qid |totalord.697:12| :skolemid |3191| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@105| |a#0@@137|)) ))) (=> (exists ((|b#0@@106| T@U) ) (!  (and (= (type |b#0@@106|) (SeqType BoxType)) (and ($Is |b#0@@106| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#0@@106| |a#0@@137|))) :qid |totalord.697:12| :skolemid |3191| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@106| |a#0@@137|)) )) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@462) |a#0@@137|))))) :qid |totalord.696:23| :skolemid |3192| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@462) |a#0@@137|)) ))))
(assert  (=> true (forall (($ly@@463 T@U) (|a#0@@138| T@U) ) (!  (=> (and (and (= (type $ly@@463) LayerTypeType) (= (type |a#0@@138|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| (Lit |a#0@@138|)) ($Is |a#0@@138| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#1@@7| T@U) ) (!  (=> (and (= (type |b#1@@7|) (SeqType BoxType)) ($Is |b#1@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#1@@7| (Lit |a#0@@138|))) :qid |totalord.697:12| :skolemid |3193| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@7| |a#0@@138|)) )) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@463) (Lit |a#0@@138|)) (exists ((|b#1@@8| T@U) ) (!  (and (= (type |b#1@@8|) (SeqType BoxType)) (and ($Is |b#1@@8| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#1@@8| (Lit |a#0@@138|)))) :qid |totalord.697:12| :skolemid |3194| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@8| |a#0@@138|)) ))) (=> (exists ((|b#1@@9| T@U) ) (!  (and (= (type |b#1@@9|) (SeqType BoxType)) (and ($Is |b#1@@9| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#1@@9| (Lit |a#0@@138|)))) :qid |totalord.697:12| :skolemid |3194| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@9| |a#0@@138|)) )) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@463) (Lit |a#0@@138|)))))) :qid |totalord.696:23| :weight 3 :skolemid |3195| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@463) (Lit |a#0@@138|))) ))))
(assert (forall ((arg0@@470 T@U) (arg1@@248 T@U) (arg2@@176 T@U) (arg3@@134 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@470 arg1@@248 arg2@@176 arg3@@134)) (MapType BoxType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.MapPivotedUnion| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@470 arg1@@248 arg2@@176 arg3@@134)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0@@3| T@U) (|pivot#0@@3| T@U) (|right#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@3|) (MapType BoxType BoxType))) (= (type |pivot#0@@3|) (SeqType BoxType))) (= (type |right#0@@3|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (and (and ($Is |left#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value)) ($Is |pivot#0@@3| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |3196| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@4| T@U) (|pivot#0@@4| T@U) (|right#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@4|) (MapType BoxType BoxType))) (= (type |pivot#0@@4|) (SeqType BoxType))) (= (type |right#0@@4|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)) ($Is |pivot#0@@4| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|) true) (=> true (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|)))) :qid |unknown.0:0| :skolemid |3197| :pattern ( (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|)) )))
(assert  (and (forall ((arg0@@471 T@U) (arg1@@249 T@U) ) (! (= (type (|lambda#130| arg0@@471 arg1@@249)) (MapType0Type BoxType boolType)) :qid |funType:lambda#130| :pattern ( (|lambda#130| arg0@@471 arg1@@249)) )) (forall ((arg0@@472 T@U) (arg1@@250 T@U) ) (! (= (type (|lambda#131| arg0@@472 arg1@@250)) (MapType0Type BoxType boolType)) :qid |funType:lambda#131| :pattern ( (|lambda#131| arg0@@472 arg1@@250)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@5| T@U) (|pivot#0@@5| T@U) (|right#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@5|) (MapType BoxType BoxType))) (= (type |pivot#0@@5|) (SeqType BoxType))) (= (type |right#0@@5|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (and (and ($Is |left#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1)) ($Is |pivot#0@@5| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@90| T@U) ) (!  (=> (and (= (type |k#0@@90|) (SeqType BoxType)) ($Is |k#0@@90| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#0@@90| |pivot#0@@5|)) :qid |totalord.716:57| :skolemid |3198| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@90| |pivot#0@@5|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#130| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_left#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#130| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (and (and (forall ((|k#1@@12| T@U) ) (!  (=> (and (= (type |k#1@@12|) (SeqType BoxType)) ($Is |k#1@@12| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@5| |k#1@@12|)) :qid |totalord.717:59| :skolemid |3199| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@5| |k#1@@12|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#131| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_right#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#131| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0@@1| |restricted_right#0@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (let ((|restricted_left#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#130| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (let ((|restricted_right#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#131| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@2| |restricted_right#0@@2|)))))) :qid |unknown.0:0| :skolemid |3200| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@6| T@U) (|pivot#0@@6| T@U) (|right#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@6|) (MapType BoxType BoxType))) (= (type |pivot#0@@6|) (SeqType BoxType))) (= (type |right#0@@6|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (and (and ($Is |left#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2)) ($Is |pivot#0@@6| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@7| T@U) ) (!  (=> (and (= (type |k#2@@7|) (SeqType BoxType)) ($Is |k#2@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#2@@7| (Lit |pivot#0@@6|))) :qid |totalord.716:57| :skolemid |3201| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#2@@7| |pivot#0@@6|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#130| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_left#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#130| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (and (and (forall ((|k#3@@0| T@U) ) (!  (=> (and (= (type |k#3@@0|) (SeqType BoxType)) ($Is |k#3@@0| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@6|) |k#3@@0|)) :qid |totalord.717:59| :skolemid |3202| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@6| |k#3@@0|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#131| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_right#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#131| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1@@1| |restricted_right#1@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (let ((|restricted_left#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#130| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (let ((|restricted_right#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#131| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@2| |restricted_right#1@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3203| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|))) ))))
(assert (forall ((arg0@@473 T@U) (arg1@@251 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@473 arg1@@251)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SetSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@473 arg1@@251)) )))
(assert  (=> true (forall ((|m#0@@99| T@U) (|key#0@@107| T@U) ) (!  (=> (and (and (= (type |m#0@@99|) (MapType0Type BoxType boolType)) (= (type |key#0@@107|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@99| |key#0@@107|) (and ($Is |m#0@@99| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@107| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@99| |key#0@@107|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.721:25| :skolemid |3204| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@99| |key#0@@107|)) ))))
(assert (forall (($Heap@@49 T@U) (|m#0@@100| T@U) (|key#0@@108| T@U) ) (!  (=> (and (and (and (= (type $Heap@@49) (MapType0Type refType MapType1Type)) (= (type |m#0@@100|) (MapType0Type BoxType boolType))) (= (type |key#0@@108|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@49) ($Is |m#0@@100| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@108| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@100| |key#0@@108|) true) (=> true (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@100| |key#0@@108|)))) :qid |totalord.721:12| :skolemid |3205| :pattern ( (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@100| |key#0@@108|) ($IsGoodHeap $Heap@@49)) )))
(assert (forall ((arg0@@474 T@U) (arg1@@252 T@U) ) (! (= (type (|$let#17_next| arg0@@474 arg1@@252)) (SeqType BoxType)) :qid |funType:$let#17_next| :pattern ( (|$let#17_next| arg0@@474 arg1@@252)) )))
(assert (forall ((m@@77 T@U) (key@@0 T@U) ) (!  (=> (and (and (= (type m@@77) (MapType0Type BoxType boolType)) (= (type key@@0) (SeqType BoxType))) (|$let#17$canCall| m@@77 key@@0)) (and ($Is (|$let#17_next| m@@77 key@@0) (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select m@@77 ($Box (|$let#17_next| m@@77 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 (|$let#17_next| m@@77 key@@0))) (forall ((|other#1@@0| T@U) ) (!  (=> (and (= (type |other#1@@0|) (SeqType BoxType)) ($Is |other#1@@0| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select m@@77 ($Box |other#1@@0|))) (not (|Seq#Equal| |other#1@@0| (|$let#17_next| m@@77 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) (Lexicographic__Byte__Order.__default.lt (|$let#17_next| m@@77 key@@0) |other#1@@0|))) :qid |totalord.726:18| :skolemid |3210| :pattern ( (Lexicographic__Byte__Order.__default.lt (|$let#17_next| m@@77 key@@0) |other#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) :pattern ( (MapType0Select m@@77 ($Box |other#1@@0|))) ))))) :qid |totalord.723:8| :skolemid |3211| :pattern ( (|$let#17_next| m@@77 key@@0)) )))
(assert  (=> true (forall (($Heap@@50 T@U) (|m#0@@101| T@U) (|key#0@@109| T@U) ) (!  (=> (and (and (and (= (type $Heap@@50) (MapType0Type refType MapType1Type)) (= (type |m#0@@101|) (MapType0Type BoxType boolType))) (= (type |key#0@@109|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@101| |key#0@@109|) (and (and ($IsGoodHeap $Heap@@50) ($Is |m#0@@101| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@109| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#0@@2| T@U) ) (!  (=> (and (= (type |next#0@@2|) (SeqType BoxType)) ($Is |next#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (U_2_bool (MapType0Select |m#0@@101| ($Box |next#0@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@109| |next#0@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@109| |next#0@@2|) (Lexicographic__Byte__Order.__default.lt |key#0@@109| |next#0@@2|)) (forall ((|other#0@@2| T@U) ) (!  (=> (and (= (type |other#0@@2|) (SeqType BoxType)) ($Is |other#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (not (|Seq#Equal| |other#0@@2| |next#0@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@109| |other#0@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@109| |other#0@@2|) (Lexicographic__Byte__Order.__default.lt |key#0@@109| |other#0@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#0@@2| |other#0@@2|)))) :qid |totalord.726:18| :skolemid |3206| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@2| |other#0@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@109| |other#0@@2|)) :pattern ( (MapType0Select |m#0@@101| ($Box |other#0@@2|))) ))))) :qid |totalord.723:8| :skolemid |3207| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@109| |next#0@@2|)) :pattern ( (MapType0Select |m#0@@101| ($Box |next#0@@2|))) )) (=> (exists ((|next#0@@3| T@U) ) (!  (and (= (type |next#0@@3|) (SeqType BoxType)) (and ($Is |next#0@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@109| |next#0@@3|)) (forall ((|other#0@@3| T@U) ) (!  (=> (and (= (type |other#0@@3|) (SeqType BoxType)) ($Is |other#0@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |other#0@@3|))) (not (|Seq#Equal| |other#0@@3| |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@109| |other#0@@3|)) (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|))) :qid |totalord.726:18| :skolemid |3208| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@109| |other#0@@3|)) :pattern ( (MapType0Select |m#0@@101| ($Box |other#0@@3|))) ))))) :qid |totalord.723:8| :skolemid |3209| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@109| |next#0@@3|)) :pattern ( (MapType0Select |m#0@@101| ($Box |next#0@@3|))) )) (|$let#17$canCall| |m#0@@101| |key#0@@109|))) (= (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@101| |key#0@@109|) (ite (exists ((|next#0@@4| T@U) ) (!  (and (= (type |next#0@@4|) (SeqType BoxType)) (and ($Is |next#0@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@109| |next#0@@4|)) (forall ((|other#0@@4| T@U) ) (!  (=> (and (= (type |other#0@@4|) (SeqType BoxType)) ($Is |other#0@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |other#0@@4|))) (not (|Seq#Equal| |other#0@@4| |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@109| |other#0@@4|)) (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|))) :qid |totalord.726:18| :skolemid |3212| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@109| |other#0@@4|)) :pattern ( (MapType0Select |m#0@@101| ($Box |other#0@@4|))) ))))) :qid |totalord.723:8| :skolemid |3213| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@109| |next#0@@4|)) :pattern ( (MapType0Select |m#0@@101| ($Box |next#0@@4|))) )) (let ((|next#1@@0| (|$let#17_next| |m#0@@101| |key#0@@109|))) (|#Options.Option.Some| ($Box |next#1@@0|))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |3214| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@101| |key#0@@109|) ($IsGoodHeap $Heap@@50)) ))))
(assert  (=> true (forall (($Heap@@51 T@U) (|m#0@@102| T@U) (|key#0@@110| T@U) ) (!  (=> (and (and (and (= (type $Heap@@51) (MapType0Type refType MapType1Type)) (= (type |m#0@@102|) (MapType0Type BoxType boolType))) (= (type |key#0@@110|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@102|) (Lit |key#0@@110|)) (and (and ($IsGoodHeap $Heap@@51) ($Is |m#0@@102| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@110| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#2@@2| T@U) ) (!  (=> (and (= (type |next#2@@2|) (SeqType BoxType)) ($Is |next#2@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |next#2@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@110|) |next#2@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@110|) |next#2@@2|) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@110|) |next#2@@2|)) (forall ((|other#2@@2| T@U) ) (!  (=> (and (= (type |other#2@@2|) (SeqType BoxType)) ($Is |other#2@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (not (|Seq#Equal| |other#2@@2| |next#2@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@110|) |other#2@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@110|) |other#2@@2|) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@110|) |other#2@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#2@@2| |other#2@@2|)))) :qid |totalord.726:18| :skolemid |3215| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@2| |other#2@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@110| |other#2@@2|)) :pattern ( (MapType0Select |m#0@@102| ($Box |other#2@@2|))) ))))) :qid |totalord.723:8| :skolemid |3216| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@110| |next#2@@2|)) :pattern ( (MapType0Select |m#0@@102| ($Box |next#2@@2|))) )) (=> (exists ((|next#2@@3| T@U) ) (!  (and (= (type |next#2@@3|) (SeqType BoxType)) (and ($Is |next#2@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@110|) |next#2@@3|)) (forall ((|other#2@@3| T@U) ) (!  (=> (and (= (type |other#2@@3|) (SeqType BoxType)) ($Is |other#2@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |other#2@@3|))) (not (|Seq#Equal| |other#2@@3| |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@110|) |other#2@@3|)) (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|))) :qid |totalord.726:18| :skolemid |3217| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@110| |other#2@@3|)) :pattern ( (MapType0Select |m#0@@102| ($Box |other#2@@3|))) ))))) :qid |totalord.723:8| :skolemid |3218| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@110| |next#2@@3|)) :pattern ( (MapType0Select |m#0@@102| ($Box |next#2@@3|))) )) (|$let#17$canCall| (Lit |m#0@@102|) (Lit |key#0@@110|)))) (= (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@102|) (Lit |key#0@@110|)) (ite (exists ((|next#2@@4| T@U) ) (!  (and (= (type |next#2@@4|) (SeqType BoxType)) (and ($Is |next#2@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@110|) |next#2@@4|)) (forall ((|other#2@@4| T@U) ) (!  (=> (and (= (type |other#2@@4|) (SeqType BoxType)) ($Is |other#2@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |other#2@@4|))) (not (|Seq#Equal| |other#2@@4| |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@110|) |other#2@@4|)) (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|))) :qid |totalord.726:18| :skolemid |3219| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@110| |other#2@@4|)) :pattern ( (MapType0Select |m#0@@102| ($Box |other#2@@4|))) ))))) :qid |totalord.723:8| :skolemid |3220| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@110| |next#2@@4|)) :pattern ( (MapType0Select |m#0@@102| ($Box |next#2@@4|))) )) (let ((|next#3@@0| (|$let#17_next| (Lit |m#0@@102|) (Lit |key#0@@110|)))) (|#Options.Option.Some| ($Box |next#3@@0|))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |3221| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@102|) (Lit |key#0@@110|)) ($IsGoodHeap $Heap@@51)) ))))
(assert (forall ((arg0@@475 T@U) (arg1@@253 T@U) (arg2@@177 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@475 arg1@@253 arg2@@177)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.MapSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@475 arg1@@253 arg2@@177)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V T@U) (|m#0@@103| T@U) (|key#0@@111| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@103|) (MapType BoxType BoxType))) (= (type |key#0@@111|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@103| |key#0@@111|) (and ($Is |m#0@@103| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V)) ($Is |key#0@@111| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@103| |key#0@@111|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |3222| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@103| |key#0@@111|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@104| T@U) (|key#0@@112| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@104|) (MapType BoxType BoxType))) (= (type |key#0@@112|) (SeqType BoxType))) (and ($Is |m#0@@104| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@0)) ($Is |key#0@@112| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@104| |key#0@@112|) true) (=> true (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@104| |key#0@@112|)))) :qid |unknown.0:0| :skolemid |3223| :pattern ( (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@104| |key#0@@112|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@105| T@U) (|key#0@@113| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@105|) (MapType BoxType BoxType))) (= (type |key#0@@113|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@105| |key#0@@113|) (and ($Is |m#0@@105| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@1)) ($Is |key#0@@113| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@105|) |key#0@@113|) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@105| |key#0@@113|) (Lexicographic__Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@105|) |key#0@@113|)))) :qid |unknown.0:0| :skolemid |3224| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@105| |key#0@@113|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@106| T@U) (|key#0@@114| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@106|) (MapType BoxType BoxType))) (= (type |key#0@@114|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@106|) (Lit |key#0@@114|)) (and ($Is |m#0@@106| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@2)) ($Is |key#0@@114| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@106|))) (Lit |key#0@@114|)) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@106|) (Lit |key#0@@114|)) (Lit (Lexicographic__Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@106|))) (Lit |key#0@@114|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3225| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@106|) (Lit |key#0@@114|))) ))))
(assert (forall ((arg0@@476 T@U) (arg1@@254 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@476 arg1@@254)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SeqSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@476 arg1@@254)) )))
(assert  (=> true (forall ((|m#0@@107| T@U) (|key#0@@115| T@U) ) (!  (=> (and (and (= (type |m#0@@107|) (SeqType BoxType)) (= (type |key#0@@115|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@107| |key#0@@115|) (and ($Is |m#0@@107| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@115| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@107| |key#0@@115|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.737:25| :skolemid |3226| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@107| |key#0@@115|)) ))))
(assert (forall ((|m#0@@108| T@U) (|key#0@@116| T@U) ) (!  (=> (and (and (= (type |m#0@@108|) (SeqType BoxType)) (= (type |key#0@@116|) (SeqType BoxType))) (and ($Is |m#0@@108| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@116| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@108| |key#0@@116|) true) (=> true (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@108| |key#0@@116|)))) :qid |totalord.737:25| :skolemid |3227| :pattern ( (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@108| |key#0@@116|)) )))
(assert  (=> true (forall ((|m#0@@109| T@U) (|key#0@@117| T@U) ) (!  (=> (and (and (= (type |m#0@@109|) (SeqType BoxType)) (= (type |key#0@@117|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@109| |key#0@@117|) (and ($Is |m#0@@109| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@117| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#126| (TSeq Tclass.NativeTypes.byte) |m#0@@109|) |key#0@@117|) (= (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@109| |key#0@@117|) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#126| (TSeq Tclass.NativeTypes.byte) |m#0@@109|) |key#0@@117|)))) :qid |totalord.737:25| :skolemid |3228| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@109| |key#0@@117|)) ))))
(assert  (=> true (forall ((|m#0@@110| T@U) (|key#0@@118| T@U) ) (!  (=> (and (and (= (type |m#0@@110|) (SeqType BoxType)) (= (type |key#0@@118|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@110|) (Lit |key#0@@118|)) (and ($Is |m#0@@110| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@118| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#126| (TSeq Tclass.NativeTypes.byte) |m#0@@110|) (Lit |key#0@@118|)) (= (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@110|) (Lit |key#0@@118|)) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#126| (TSeq Tclass.NativeTypes.byte) |m#0@@110|) (Lit |key#0@@118|))))) :qid |totalord.737:25| :weight 3 :skolemid |3229| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@110|) (Lit |key#0@@118|))) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@464 T@U) (|s#0@@170| T@U) (|m#0@@111| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@464) LayerTypeType)) (= (type |s#0@@170|) (SeqType BoxType))) (= (type |m#0@@111|) (MapType BoxType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@464) |s#0@@170| |m#0@@111|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@464 |s#0@@170| |m#0@@111|)) (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@464 |s#0@@170| |m#0@@111|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@464) |s#0@@170| |m#0@@111|)))) :qid |unknown.0:0| :skolemid |3230| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@464) |s#0@@170| |m#0@@111|)) )))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@465 T@U) (|s#0@@171| T@U) (|m#0@@112| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@465) LayerTypeType)) (= (type |s#0@@171|) (SeqType BoxType))) (= (type |m#0@@112|) (MapType BoxType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@465 |s#0@@171| |m#0@@112|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@171| |m#0@@112|)) (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@171| |m#0@@112|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@465 |s#0@@171| |m#0@@112|)))) :qid |unknown.0:0| :skolemid |3231| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@465) |s#0@@171| |m#0@@112|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@466 T@U) (|s#0@@172| T@U) (|m#0@@113| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@466) LayerTypeType)) (= (type |s#0@@172|) (SeqType BoxType))) (= (type |m#0@@113|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@172| |m#0@@113|) (and ($Is |s#0@@172| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@113| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |3232| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 $ly@@466 |s#0@@172| |m#0@@113|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@467 T@U) (|s#0@@173| T@U) (|m#0@@114| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@467) LayerTypeType)) (= (type |s#0@@173|) (SeqType BoxType))) (= (type |m#0@@114|) (MapType BoxType BoxType))) (and ($Is |s#0@@173| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@114| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@467 |s#0@@173| |m#0@@114|) true) (=> true (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@467 |s#0@@173| |m#0@@114|)))) :qid |unknown.0:0| :skolemid |3233| :pattern ( (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@467 |s#0@@173| |m#0@@114|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@468 T@U) (|s#0@@174| T@U) (|m#0@@115| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@468) LayerTypeType)) (= (type |s#0@@174|) (SeqType BoxType))) (= (type |m#0@@115|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@174| |m#0@@115|) (and ($Is |s#0@@174| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@115| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@174|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@174|))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@174|))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@174|)))) (forall ((|i#0@@114| Int) ) (!  (and (=> (< |i#0@@114| (|Seq#Length| |s#0@@174|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@114|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@114|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@114|)))))) (=> (< |i#0@@114| (|Seq#Length| |s#0@@174|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@114|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@114|))))))) :qid |totalord.761:16| :skolemid |3234| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@114|))) )))) (=> (and (forall ((|i#0@@115| Int) ) (!  (and (=> (< |i#0@@115| (|Seq#Length| |s#0@@174|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@115|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@115|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@115|)))))) (=> (< |i#0@@115| (|Seq#Length| |s#0@@174|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@115|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@115|))))))) :qid |totalord.761:16| :skolemid |3237| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@115|))) )) (forall ((|i#0@@116| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@116|) (< |i#0@@116| (|Seq#Length| |s#0@@174|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@116|)))))) (=> (and (<= (LitInt 0) |i#0@@116|) (< |i#0@@116| (|Seq#Length| |s#0@@174|))) (= (MapType0Select (|Map#Elements| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@116|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@116|))))))) :qid |totalord.761:16| :skolemid |3238| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@116|))) ))) (forall ((|key#0@@119| T@U) ) (!  (=> (and (and (= (type |key#0@@119|) (SeqType BoxType)) ($Is |key#0@@119| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@119|)))) (forall ((|i#1@@52| Int) ) (!  (and (=> (< |i#1@@52| (|Seq#Length| |s#0@@174|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@52|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@52|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@52|)))) |key#0@@119|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@52|))))) :qid |totalord.762:44| :skolemid |3235| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@52|))) ))) :qid |totalord.762:16| :skolemid |3236| :pattern ( (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@119|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@119|))) )))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@468) |s#0@@174| |m#0@@115|) (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@174|)))) (forall ((|i#0@@117| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@117|) (< |i#0@@117| (|Seq#Length| |s#0@@174|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@117|)))))) (=> (and (<= (LitInt 0) |i#0@@117|) (< |i#0@@117| (|Seq#Length| |s#0@@174|))) (= (MapType0Select (|Map#Elements| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@117|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@117|))))))) :qid |totalord.761:16| :skolemid |3239| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@117|))) ))) (forall ((|key#0@@120| T@U) ) (!  (=> (and (and (= (type |key#0@@120|) (SeqType BoxType)) ($Is |key#0@@120| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@120|)))) (exists ((|i#1@@53| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@53|) (< |i#1@@53| (|Seq#Length| |s#0@@174|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@53|)))) |key#0@@120|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@53|))) (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@120|)))) :qid |totalord.762:44| :skolemid |3240| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@53|))) ))) :qid |totalord.762:16| :skolemid |3241| :pattern ( (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@120|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@120|))) )))) (=> (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@174|)))) (forall ((|i#0@@118| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@118|) (< |i#0@@118| (|Seq#Length| |s#0@@174|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@118|)))))) (=> (and (<= (LitInt 0) |i#0@@118|) (< |i#0@@118| (|Seq#Length| |s#0@@174|))) (= (MapType0Select (|Map#Elements| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@118|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@118|))))))) :qid |totalord.761:16| :skolemid |3239| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#0@@118|))) ))) (forall ((|key#0@@121| T@U) ) (!  (=> (and (and (= (type |key#0@@121|) (SeqType BoxType)) ($Is |key#0@@121| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@121|)))) (exists ((|i#1@@54| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@54|) (< |i#1@@54| (|Seq#Length| |s#0@@174|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@54|)))) |key#0@@121|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@54|))) (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@121|)))) :qid |totalord.762:44| :skolemid |3240| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@174| |i#1@@54|))) ))) :qid |totalord.762:16| :skolemid |3241| :pattern ( (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@121|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@121|))) ))) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@468) |s#0@@174| |m#0@@115|))))) :qid |unknown.0:0| :skolemid |3242| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@468) |s#0@@174| |m#0@@115|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@469 T@U) (|s#0@@175| T@U) (|m#0@@116| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@469) LayerTypeType)) (= (type |s#0@@175|) (SeqType BoxType))) (= (type |m#0@@116|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@175|) (Lit |m#0@@116|)) (and ($Is |s#0@@175| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@116| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@175|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@175|)))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@175|)))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@175|))))) (forall ((|i#2@@29| Int) ) (!  (and (=> (< |i#2@@29| (|Seq#Length| (Lit |s#0@@175|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@29|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@29|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@29|)))))) (=> (< |i#2@@29| (|Seq#Length| (Lit |s#0@@175|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@29|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@29|))))))) :qid |totalord.761:16| :skolemid |3243| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@175| |i#2@@29|))) )))) (=> (and (forall ((|i#2@@30| Int) ) (!  (and (=> (< |i#2@@30| (|Seq#Length| (Lit |s#0@@175|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@30|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@30|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@30|)))))) (=> (< |i#2@@30| (|Seq#Length| (Lit |s#0@@175|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@30|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@30|))))))) :qid |totalord.761:16| :skolemid |3246| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@175| |i#2@@30|))) )) (forall ((|i#2@@31| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@31|) (< |i#2@@31| (|Seq#Length| (Lit |s#0@@175|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@31|)))))) (=> (and (<= (LitInt 0) |i#2@@31|) (< |i#2@@31| (|Seq#Length| (Lit |s#0@@175|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@31|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@31|))))))) :qid |totalord.761:16| :skolemid |3247| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@175| |i#2@@31|))) ))) (forall ((|key#1@@12| T@U) ) (!  (=> (and (and (= (type |key#1@@12|) (SeqType BoxType)) ($Is |key#1@@12| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@12|)))) (forall ((|i#3@@18| Int) ) (!  (and (=> (< |i#3@@18| (|Seq#Length| (Lit |s#0@@175|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#3@@18|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#3@@18|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#3@@18|)))) |key#1@@12|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#3@@18|))))) :qid |totalord.762:44| :skolemid |3244| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@175| |i#3@@18|))) ))) :qid |totalord.762:16| :skolemid |3245| :pattern ( (MapType0Select (|Map#Elements| |m#0@@116|) ($Box |key#1@@12|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@12|))) )))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@469) (Lit |s#0@@175|) (Lit |m#0@@116|)) (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@175|))))) (forall ((|i#2@@32| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@32|) (< |i#2@@32| (|Seq#Length| (Lit |s#0@@175|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@32|)))))) (=> (and (<= (LitInt 0) |i#2@@32|) (< |i#2@@32| (|Seq#Length| (Lit |s#0@@175|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@32|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@32|))))))) :qid |totalord.761:16| :skolemid |3248| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@175| |i#2@@32|))) ))) (forall ((|key#1@@13| T@U) ) (!  (=> (and (and (= (type |key#1@@13|) (SeqType BoxType)) ($Is |key#1@@13| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@13|)))) (exists ((|i#3@@19| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@19|) (< |i#3@@19| (|Seq#Length| (Lit |s#0@@175|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#3@@19|)))) |key#1@@13|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#3@@19|))) (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) ($Box |key#1@@13|)))) :qid |totalord.762:44| :skolemid |3249| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@175| |i#3@@19|))) ))) :qid |totalord.762:16| :skolemid |3250| :pattern ( (MapType0Select (|Map#Elements| |m#0@@116|) ($Box |key#1@@13|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@13|))) )))) (=> (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@175|))))) (forall ((|i#2@@33| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@33|) (< |i#2@@33| (|Seq#Length| (Lit |s#0@@175|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@33|)))))) (=> (and (<= (LitInt 0) |i#2@@33|) (< |i#2@@33| (|Seq#Length| (Lit |s#0@@175|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@33|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#2@@33|))))))) :qid |totalord.761:16| :skolemid |3248| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@175| |i#2@@33|))) ))) (forall ((|key#1@@14| T@U) ) (!  (=> (and (and (= (type |key#1@@14|) (SeqType BoxType)) ($Is |key#1@@14| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@14|)))) (exists ((|i#3@@20| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@20|) (< |i#3@@20| (|Seq#Length| (Lit |s#0@@175|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#3@@20|)))) |key#1@@14|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@175|) |i#3@@20|))) (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) ($Box |key#1@@14|)))) :qid |totalord.762:44| :skolemid |3249| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@175| |i#3@@20|))) ))) :qid |totalord.762:16| :skolemid |3250| :pattern ( (MapType0Select (|Map#Elements| |m#0@@116|) ($Box |key#1@@14|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@14|))) ))) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@469) (Lit |s#0@@175|) (Lit |m#0@@116|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3251| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@469) (Lit |s#0@@175|) (Lit |m#0@@116|))) ))))
(assert (forall ((arg0@@477 T@U) (arg1@@255 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimum arg0@@477 arg1@@255)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.minimum| :pattern ( (Lexicographic__Byte__Order.__default.minimum arg0@@477 arg1@@255)) )))
(assert (forall (($ly@@470 T@U) (|s#0@@176| T@U) ) (!  (=> (and (= (type $ly@@470) LayerTypeType) (= (type |s#0@@176|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@470) |s#0@@176|) (Lexicographic__Byte__Order.__default.minimum $ly@@470 |s#0@@176|))) :qid |totalord.765:22| :skolemid |3252| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@470) |s#0@@176|)) )))
(assert (forall (($ly@@471 T@U) (|s#0@@177| T@U) ) (!  (=> (and (= (type $ly@@471) LayerTypeType) (= (type |s#0@@177|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum $ly@@471 |s#0@@177|) (Lexicographic__Byte__Order.__default.minimum $LZ |s#0@@177|))) :qid |totalord.765:22| :skolemid |3253| :pattern ( (Lexicographic__Byte__Order.__default.minimum (AsFuelBottom $ly@@471) |s#0@@177|)) )))
(assert  (=> true (forall (($ly@@472 T@U) (|s#0@@178| T@U) ) (!  (=> (and (and (= (type $ly@@472) LayerTypeType) (= (type |s#0@@178|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@178|) (and ($Is |s#0@@178| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@178|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@178| ($Box (Lexicographic__Byte__Order.__default.minimum $ly@@472 |s#0@@178|)))) (forall ((|y#0@@15| T@U) ) (!  (=> (= (type |y#0@@15|) (SeqType BoxType)) (=> (and ($Is |y#0@@15| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@178| ($Box |y#0@@15|)))) (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@472 |s#0@@178|) |y#0@@15|))) :qid |totalord.768:18| :skolemid |3254| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@472 |s#0@@178|) |y#0@@15|)) :pattern ( (MapType0Select |s#0@@178| ($Box |y#0@@15|))) ))) ($Is (Lexicographic__Byte__Order.__default.minimum $ly@@472 |s#0@@178|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.765:22| :skolemid |3255| :pattern ( (Lexicographic__Byte__Order.__default.minimum $ly@@472 |s#0@@178|)) ))))
(assert (forall (($ly@@473 T@U) ($Heap@@52 T@U) (|s#0@@179| T@U) ) (!  (=> (and (and (and (= (type $ly@@473) LayerTypeType) (= (type $Heap@@52) (MapType0Type refType MapType1Type))) (= (type |s#0@@179|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@52) ($Is |s#0@@179| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@473 |s#0@@179|) (>= (|Set#Card| |s#0@@179|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@179|) (LitInt 1)) (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@473 |s#0@@179|)))) :qid |totalord.765:22| :skolemid |3256| :pattern ( (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@473 |s#0@@179|) ($IsGoodHeap $Heap@@52)) )))
(assert (forall ((arg0@@478 T@U) ) (! (= (type (|$let#20_a| arg0@@478)) (SeqType BoxType)) :qid |funType:$let#20_a| :pattern ( (|$let#20_a| arg0@@478)) )))
(assert (forall ((s@@48 T@U) ) (!  (=> (and (= (type s@@48) (MapType0Type BoxType boolType)) (|$let#20$canCall| s@@48)) (and ($Is (|$let#20_a| s@@48) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@48 ($Box (|$let#20_a| s@@48)))))) :qid |totalord.772:5| :skolemid |3257| :pattern ( (|$let#20_a| s@@48)) )))
(assert  (=> true (forall (($ly@@474 T@U) ($Heap@@53 T@U) (|s#0@@180| T@U) ) (!  (=> (and (and (and (= (type $ly@@474) LayerTypeType) (= (type $Heap@@53) (MapType0Type refType MapType1Type))) (= (type |s#0@@180|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@180|) (and (and ($IsGoodHeap $Heap@@53) ($Is |s#0@@180| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@180|) (LitInt 1))))) (and (and (|$let#20$canCall| |s#0@@180|) (let ((|s'#0@@27| (|Set#Difference| |s#0@@180| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#20_a| |s#0@@180|)))))) (=> (not (|Set#Equal| |s'#0@@27| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#0@@27|) (let ((|m'#0@@12| (Lexicographic__Byte__Order.__default.minimum $ly@@474 |s'#0@@27|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#20_a| |s#0@@180|) |m'#0@@12|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@474) |s#0@@180|) (let ((|a#0@@139| (|$let#20_a| |s#0@@180|))) (let ((|s'#1@@1| (|Set#Difference| |s#0@@180| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@139|))))) (ite (|Set#Equal| |s'#1@@1| (|Set#Empty| BoxType)) |a#0@@139| (let ((|m'#1@@3| (Lexicographic__Byte__Order.__default.minimum $ly@@474 |s'#1@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#0@@139| |m'#1@@3|) |a#0@@139| |m'#1@@3|)))))))) :qid |totalord.765:22| :skolemid |3258| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@474) |s#0@@180|) ($IsGoodHeap $Heap@@53)) ))))
(assert  (=> true (forall (($ly@@475 T@U) ($Heap@@54 T@U) (|s#0@@181| T@U) ) (!  (=> (and (and (and (= (type $ly@@475) LayerTypeType) (= (type $Heap@@54) (MapType0Type refType MapType1Type))) (= (type |s#0@@181|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@181|)) (and (and ($IsGoodHeap $Heap@@54) ($Is |s#0@@181| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@181|)) (LitInt 1))))) (and (and (|$let#20$canCall| (Lit |s#0@@181|)) (let ((|s'#2@@1| (|Set#Difference| |s#0@@181| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#20_a| (Lit |s#0@@181|))))))) (=> (not (|Set#Equal| |s'#2@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#2@@1|) (let ((|m'#2@@2| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@475) |s'#2@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#20_a| (Lit |s#0@@181|)) |m'#2@@2|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@475) (Lit |s#0@@181|)) (let ((|a#1@@4| (|$let#20_a| (Lit |s#0@@181|)))) (let ((|s'#3@@1| (|Set#Difference| |s#0@@181| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@4|))))) (ite (|Set#Equal| |s'#3@@1| (|Set#Empty| BoxType)) |a#1@@4| (let ((|m'#3@@1| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@475) |s'#3@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#1@@4| |m'#3@@1|) |a#1@@4| |m'#3@@1|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |3259| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@475) (Lit |s#0@@181|)) ($IsGoodHeap $Heap@@54)) ))))
(assert (forall ((arg0@@479 T@U) (arg1@@256 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimumOpt arg0@@479 arg1@@256)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.minimumOpt| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt arg0@@479 arg1@@256)) )))
(assert (forall (($ly@@476 T@U) (|s#0@@182| T@U) ) (!  (=> (and (= (type $ly@@476) LayerTypeType) (= (type |s#0@@182|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@476) |s#0@@182|) (Lexicographic__Byte__Order.__default.minimumOpt $ly@@476 |s#0@@182|))) :qid |totalord.788:22| :skolemid |3260| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@476) |s#0@@182|)) )))
(assert (forall (($ly@@477 T@U) (|s#0@@183| T@U) ) (!  (=> (and (= (type $ly@@477) LayerTypeType) (= (type |s#0@@183|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt $ly@@477 |s#0@@183|) (Lexicographic__Byte__Order.__default.minimumOpt $LZ |s#0@@183|))) :qid |totalord.788:22| :skolemid |3261| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@477) |s#0@@183|)) )))
(assert  (=> true (forall (($ly@@478 T@U) (|s#0@@184| T@U) ) (!  (=> (and (and (= (type $ly@@478) LayerTypeType) (= (type |s#0@@184|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@184|) ($Is |s#0@@184| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@478 |s#0@@184|)) (U_2_bool (MapType0Select |s#0@@184| (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@478 |s#0@@184|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@478 |s#0@@184|)) (forall ((|y#0@@16| T@U) ) (!  (=> (= (type |y#0@@16|) (SeqType BoxType)) (=> (and ($Is |y#0@@16| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@184| ($Box |y#0@@16|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@478 |s#0@@184|))) |y#0@@16|))) :qid |totalord.790:30| :skolemid |3262| :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@478 |s#0@@184|))) |y#0@@16|)) :pattern ( (MapType0Select |s#0@@184| ($Box |y#0@@16|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@478 |s#0@@184|)) (|Set#Equal| |s#0@@184| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.minimumOpt $ly@@478 |s#0@@184|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalord.788:22| :skolemid |3263| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt $ly@@478 |s#0@@184|)) ))))
(assert (forall (($ly@@479 T@U) (|s#0@@185| T@U) ) (!  (=> (and (and (= (type $ly@@479) LayerTypeType) (= (type |s#0@@185|) (MapType0Type BoxType boolType))) ($Is |s#0@@185| (TSet (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@479 |s#0@@185|) true) (=> true (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@479 |s#0@@185|)))) :qid |totalord.788:22| :skolemid |3264| :pattern ( (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@479 |s#0@@185|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@480 T@U) (|s#0@@186| T@U) ) (!  (=> (and (and (= (type $ly@@480) LayerTypeType) (= (type |s#0@@186|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@186|) ($Is |s#0@@186| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@186| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@186|)) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@480) |s#0@@186|) (ite (|Set#Equal| |s#0@@186| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum |s#0@@186|))))))) :qid |totalord.788:22| :skolemid |3265| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@480) |s#0@@186|)) ))))
(assert  (=> true (forall (($ly@@481 T@U) (|s#0@@187| T@U) ) (!  (=> (and (and (= (type $ly@@481) LayerTypeType) (= (type |s#0@@187|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@187|)) ($Is |s#0@@187| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@187| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@187|))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@481) (Lit |s#0@@187|)) (ite (|Set#Equal| |s#0@@187| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum (Lit |s#0@@187|)))))))) :qid |totalord.788:22| :weight 3 :skolemid |3266| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@481) (Lit |s#0@@187|))) ))))
(assert (forall ((arg0@@480 T@U) (arg1@@257 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximum arg0@@480 arg1@@257)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.maximum| :pattern ( (Lexicographic__Byte__Order.__default.maximum arg0@@480 arg1@@257)) )))
(assert (forall (($ly@@482 T@U) (|s#0@@188| T@U) ) (!  (=> (and (= (type $ly@@482) LayerTypeType) (= (type |s#0@@188|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@482) |s#0@@188|) (Lexicographic__Byte__Order.__default.maximum $ly@@482 |s#0@@188|))) :qid |totalord.796:22| :skolemid |3267| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@482) |s#0@@188|)) )))
(assert (forall (($ly@@483 T@U) (|s#0@@189| T@U) ) (!  (=> (and (= (type $ly@@483) LayerTypeType) (= (type |s#0@@189|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum $ly@@483 |s#0@@189|) (Lexicographic__Byte__Order.__default.maximum $LZ |s#0@@189|))) :qid |totalord.796:22| :skolemid |3268| :pattern ( (Lexicographic__Byte__Order.__default.maximum (AsFuelBottom $ly@@483) |s#0@@189|)) )))
(assert  (=> true (forall (($ly@@484 T@U) (|s#0@@190| T@U) ) (!  (=> (and (and (= (type $ly@@484) LayerTypeType) (= (type |s#0@@190|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@190|) (and ($Is |s#0@@190| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@190|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@190| ($Box (Lexicographic__Byte__Order.__default.maximum $ly@@484 |s#0@@190|)))) (forall ((|y#0@@17| T@U) ) (!  (=> (= (type |y#0@@17|) (SeqType BoxType)) (=> (and ($Is |y#0@@17| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@190| ($Box |y#0@@17|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@17| (Lexicographic__Byte__Order.__default.maximum $ly@@484 |s#0@@190|)))) :qid |totalord.799:18| :skolemid |3269| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@17| (Lexicographic__Byte__Order.__default.maximum $ly@@484 |s#0@@190|))) :pattern ( (MapType0Select |s#0@@190| ($Box |y#0@@17|))) ))) ($Is (Lexicographic__Byte__Order.__default.maximum $ly@@484 |s#0@@190|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.796:22| :skolemid |3270| :pattern ( (Lexicographic__Byte__Order.__default.maximum $ly@@484 |s#0@@190|)) ))))
(assert (forall (($ly@@485 T@U) ($Heap@@55 T@U) (|s#0@@191| T@U) ) (!  (=> (and (and (and (= (type $ly@@485) LayerTypeType) (= (type $Heap@@55) (MapType0Type refType MapType1Type))) (= (type |s#0@@191|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@55) ($Is |s#0@@191| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@485 |s#0@@191|) (>= (|Set#Card| |s#0@@191|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@191|) (LitInt 1)) (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@485 |s#0@@191|)))) :qid |totalord.796:22| :skolemid |3271| :pattern ( (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@485 |s#0@@191|) ($IsGoodHeap $Heap@@55)) )))
(assert (forall ((arg0@@481 T@U) ) (! (= (type (|$let#23_a| arg0@@481)) (SeqType BoxType)) :qid |funType:$let#23_a| :pattern ( (|$let#23_a| arg0@@481)) )))
(assert (forall ((s@@49 T@U) ) (!  (=> (and (= (type s@@49) (MapType0Type BoxType boolType)) (|$let#23$canCall| s@@49)) (and ($Is (|$let#23_a| s@@49) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@49 ($Box (|$let#23_a| s@@49)))))) :qid |totalord.801:5| :skolemid |3272| :pattern ( (|$let#23_a| s@@49)) )))
(assert  (=> true (forall (($ly@@486 T@U) ($Heap@@56 T@U) (|s#0@@192| T@U) ) (!  (=> (and (and (and (= (type $ly@@486) LayerTypeType) (= (type $Heap@@56) (MapType0Type refType MapType1Type))) (= (type |s#0@@192|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@192|) (and (and ($IsGoodHeap $Heap@@56) ($Is |s#0@@192| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@192|) (LitInt 1))))) (and (and (|$let#23$canCall| |s#0@@192|) (let ((|s'#0@@28| (|Set#Difference| |s#0@@192| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#23_a| |s#0@@192|)))))) (=> (not (|Set#Equal| |s'#0@@28| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#0@@28|) (let ((|m'#0@@13| (Lexicographic__Byte__Order.__default.maximum $ly@@486 |s'#0@@28|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#0@@13| (|$let#23_a| |s#0@@192|))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@486) |s#0@@192|) (let ((|a#0@@140| (|$let#23_a| |s#0@@192|))) (let ((|s'#1@@2| (|Set#Difference| |s#0@@192| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@140|))))) (ite (|Set#Equal| |s'#1@@2| (|Set#Empty| BoxType)) |a#0@@140| (let ((|m'#1@@4| (Lexicographic__Byte__Order.__default.maximum $ly@@486 |s'#1@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#1@@4| |a#0@@140|) |a#0@@140| |m'#1@@4|)))))))) :qid |totalord.796:22| :skolemid |3273| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@486) |s#0@@192|) ($IsGoodHeap $Heap@@56)) ))))
(assert  (=> true (forall (($ly@@487 T@U) ($Heap@@57 T@U) (|s#0@@193| T@U) ) (!  (=> (and (and (and (= (type $ly@@487) LayerTypeType) (= (type $Heap@@57) (MapType0Type refType MapType1Type))) (= (type |s#0@@193|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@193|)) (and (and ($IsGoodHeap $Heap@@57) ($Is |s#0@@193| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@193|)) (LitInt 1))))) (and (and (|$let#23$canCall| (Lit |s#0@@193|)) (let ((|s'#2@@2| (|Set#Difference| |s#0@@193| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#23_a| (Lit |s#0@@193|))))))) (=> (not (|Set#Equal| |s'#2@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#2@@2|) (let ((|m'#2@@3| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@487) |s'#2@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#2@@3| (|$let#23_a| (Lit |s#0@@193|)))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@487) (Lit |s#0@@193|)) (let ((|a#1@@5| (|$let#23_a| (Lit |s#0@@193|)))) (let ((|s'#3@@2| (|Set#Difference| |s#0@@193| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@5|))))) (ite (|Set#Equal| |s'#3@@2| (|Set#Empty| BoxType)) |a#1@@5| (let ((|m'#3@@2| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@487) |s'#3@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#3@@2| |a#1@@5|) |a#1@@5| |m'#3@@2|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |3274| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@487) (Lit |s#0@@193|)) ($IsGoodHeap $Heap@@57)) ))))
(assert (forall ((arg0@@482 T@U) (arg1@@258 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximumOpt arg0@@482 arg1@@258)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.maximumOpt| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt arg0@@482 arg1@@258)) )))
(assert (forall (($ly@@488 T@U) (|s#0@@194| T@U) ) (!  (=> (and (= (type $ly@@488) LayerTypeType) (= (type |s#0@@194|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@488) |s#0@@194|) (Lexicographic__Byte__Order.__default.maximumOpt $ly@@488 |s#0@@194|))) :qid |totalord.817:22| :skolemid |3275| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@488) |s#0@@194|)) )))
(assert (forall (($ly@@489 T@U) (|s#0@@195| T@U) ) (!  (=> (and (= (type $ly@@489) LayerTypeType) (= (type |s#0@@195|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt $ly@@489 |s#0@@195|) (Lexicographic__Byte__Order.__default.maximumOpt $LZ |s#0@@195|))) :qid |totalord.817:22| :skolemid |3276| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@489) |s#0@@195|)) )))
(assert  (=> true (forall (($ly@@490 T@U) (|s#0@@196| T@U) ) (!  (=> (and (and (= (type $ly@@490) LayerTypeType) (= (type |s#0@@196|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@196|) ($Is |s#0@@196| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@490 |s#0@@196|)) (U_2_bool (MapType0Select |s#0@@196| (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@490 |s#0@@196|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@490 |s#0@@196|)) (forall ((|y#0@@18| T@U) ) (!  (=> (= (type |y#0@@18|) (SeqType BoxType)) (=> (and ($Is |y#0@@18| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@196| ($Box |y#0@@18|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@18| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@490 |s#0@@196|)))))) :qid |totalord.819:30| :skolemid |3277| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@18| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@490 |s#0@@196|))))) :pattern ( (MapType0Select |s#0@@196| ($Box |y#0@@18|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@490 |s#0@@196|)) (|Set#Equal| |s#0@@196| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.maximumOpt $ly@@490 |s#0@@196|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalord.817:22| :skolemid |3278| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt $ly@@490 |s#0@@196|)) ))))
(assert (forall (($ly@@491 T@U) (|s#0@@197| T@U) ) (!  (=> (and (and (= (type $ly@@491) LayerTypeType) (= (type |s#0@@197|) (MapType0Type BoxType boolType))) ($Is |s#0@@197| (TSet (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@491 |s#0@@197|) true) (=> true (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@491 |s#0@@197|)))) :qid |totalord.817:22| :skolemid |3279| :pattern ( (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@491 |s#0@@197|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@492 T@U) (|s#0@@198| T@U) ) (!  (=> (and (and (= (type $ly@@492) LayerTypeType) (= (type |s#0@@198|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@198|) ($Is |s#0@@198| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@198| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@198|)) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@492) |s#0@@198|) (ite (|Set#Equal| |s#0@@198| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum |s#0@@198|))))))) :qid |totalord.817:22| :skolemid |3280| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@492) |s#0@@198|)) ))))
(assert  (=> true (forall (($ly@@493 T@U) (|s#0@@199| T@U) ) (!  (=> (and (and (= (type $ly@@493) LayerTypeType) (= (type |s#0@@199|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@199|)) ($Is |s#0@@199| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@199| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@199|))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@493) (Lit |s#0@@199|)) (ite (|Set#Equal| |s#0@@199| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit |s#0@@199|)))))))) :qid |totalord.817:22| :weight 3 :skolemid |3281| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@493) (Lit |s#0@@199|))) ))))
(assert  (=> true (forall ((|a#0@@141| T@U) (|b#0@@107| T@U) ) (!  (=> (and (and (= (type |a#0@@141|) (SeqType BoxType)) (= (type |b#0@@107|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@141| |b#0@@107|) (and ($Is |a#0@@141| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@107| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.12:15| :skolemid |3282| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@141| |b#0@@107|)) ))))
(assert (forall ((|a#0@@142| T@U) (|b#0@@108| T@U) ) (!  (=> (and (and (= (type |a#0@@142|) (SeqType BoxType)) (= (type |b#0@@108|) (SeqType BoxType))) (and ($Is |a#0@@142| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@108| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@142| |b#0@@108|) true) (=> true (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@142| |b#0@@108|)))) :qid |totalord.12:15| :skolemid |3283| :pattern ( (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@142| |b#0@@108|)) )))
(assert  (=> true (forall ((|a#0@@143| T@U) (|b#0@@109| T@U) ) (!  (=> (and (and (= (type |a#0@@143|) (SeqType BoxType)) (= (type |b#0@@109|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@143| |b#0@@109|) (and ($Is |a#0@@143| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@109| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@143| |b#0@@109|) (and (=> (Lexicographic__Byte__Order.__default.lt |a#0@@143| |b#0@@109|) (and (Lexicographic__Byte__Order.__default.lte |a#0@@143| |b#0@@109|) (not (|Seq#Equal| |a#0@@143| |b#0@@109|)))) (=> (and (Lexicographic__Byte__Order.__default.lte |a#0@@143| |b#0@@109|) (not (|Seq#Equal| |a#0@@143| |b#0@@109|))) (Lexicographic__Byte__Order.__default.lt |a#0@@143| |b#0@@109|))))) :qid |totalord.12:15| :skolemid |3284| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@143| |b#0@@109|)) ))))
(assert  (=> true (forall ((|a#0@@144| T@U) (|b#0@@110| T@U) ) (!  (=> (and (and (= (type |a#0@@144|) (SeqType BoxType)) (= (type |b#0@@110|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |a#0@@144|) (Lit |b#0@@110|)) (and ($Is |a#0@@144| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@110| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@144|) (Lit |b#0@@110|)) (and (=> (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@144|) (Lit |b#0@@110|)) (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@144|) (Lit |b#0@@110|)) (not (|Seq#Equal| |a#0@@144| |b#0@@110|)))) (=> (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@144|) (Lit |b#0@@110|)) (not (|Seq#Equal| |a#0@@144| |b#0@@110|))) (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@144|) (Lit |b#0@@110|)))))) :qid |totalord.12:15| :weight 3 :skolemid |3285| :pattern ( (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@144|) (Lit |b#0@@110|))) ))))
(assert (forall ((arg0@@483 T@U) (arg1@@259 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Min arg0@@483 arg1@@259)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Min| :pattern ( (Lexicographic__Byte__Order.__default.Min arg0@@483 arg1@@259)) )))
(assert  (=> true (forall ((|a#0@@145| T@U) (|b#0@@111| T@U) ) (!  (=> (and (and (= (type |a#0@@145|) (SeqType BoxType)) (= (type |b#0@@111|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@145| |b#0@@111|) (and ($Is |a#0@@145| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@111| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Min |a#0@@145| |b#0@@111|) (TSeq Tclass.NativeTypes.byte))) :qid |totalord.24:16| :skolemid |3286| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@145| |b#0@@111|)) ))))
(assert (forall ((|a#0@@146| T@U) (|b#0@@112| T@U) ) (!  (=> (and (and (= (type |a#0@@146|) (SeqType BoxType)) (= (type |b#0@@112|) (SeqType BoxType))) (and ($Is |a#0@@146| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@112| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@146| |b#0@@112|) true) (=> true (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@146| |b#0@@112|)))) :qid |totalord.24:16| :skolemid |3287| :pattern ( (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@146| |b#0@@112|)) )))
(assert  (=> true (forall ((|a#0@@147| T@U) (|b#0@@113| T@U) ) (!  (=> (and (and (= (type |a#0@@147|) (SeqType BoxType)) (= (type |b#0@@113|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@147| |b#0@@113|) (and ($Is |a#0@@147| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@113| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@147| |b#0@@113|) (= (Lexicographic__Byte__Order.__default.Min |a#0@@147| |b#0@@113|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@147| |b#0@@113|) |a#0@@147| |b#0@@113|)))) :qid |totalord.24:16| :skolemid |3288| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@147| |b#0@@113|)) ))))
(assert  (=> true (forall ((|a#0@@148| T@U) (|b#0@@114| T@U) ) (!  (=> (and (and (= (type |a#0@@148|) (SeqType BoxType)) (= (type |b#0@@114|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| (Lit |a#0@@148|) (Lit |b#0@@114|)) (and ($Is |a#0@@148| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@114| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@148|) (Lit |b#0@@114|)) (= (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@148|) (Lit |b#0@@114|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@148|) (Lit |b#0@@114|)) |a#0@@148| |b#0@@114|)))) :qid |totalord.24:16| :weight 3 :skolemid |3289| :pattern ( (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@148|) (Lit |b#0@@114|))) ))))
(assert (forall ((arg0@@484 T@U) (arg1@@260 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Max arg0@@484 arg1@@260)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Max| :pattern ( (Lexicographic__Byte__Order.__default.Max arg0@@484 arg1@@260)) )))
(assert  (=> true (forall ((|a#0@@149| T@U) (|b#0@@115| T@U) ) (!  (=> (and (and (= (type |a#0@@149|) (SeqType BoxType)) (= (type |b#0@@115|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@149| |b#0@@115|) (and ($Is |a#0@@149| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@115| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Max |a#0@@149| |b#0@@115|) (TSeq Tclass.NativeTypes.byte))) :qid |totalord.29:16| :skolemid |3290| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@149| |b#0@@115|)) ))))
(assert (forall ((|a#0@@150| T@U) (|b#0@@116| T@U) ) (!  (=> (and (and (= (type |a#0@@150|) (SeqType BoxType)) (= (type |b#0@@116|) (SeqType BoxType))) (and ($Is |a#0@@150| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@116| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@150| |b#0@@116|) true) (=> true (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@150| |b#0@@116|)))) :qid |totalord.29:16| :skolemid |3291| :pattern ( (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@150| |b#0@@116|)) )))
(assert  (=> true (forall ((|a#0@@151| T@U) (|b#0@@117| T@U) ) (!  (=> (and (and (= (type |a#0@@151|) (SeqType BoxType)) (= (type |b#0@@117|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@151| |b#0@@117|) (and ($Is |a#0@@151| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@117| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@151| |b#0@@117|) (= (Lexicographic__Byte__Order.__default.Max |a#0@@151| |b#0@@117|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@151| |b#0@@117|) |b#0@@117| |a#0@@151|)))) :qid |totalord.29:16| :skolemid |3292| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@151| |b#0@@117|)) ))))
(assert  (=> true (forall ((|a#0@@152| T@U) (|b#0@@118| T@U) ) (!  (=> (and (and (= (type |a#0@@152|) (SeqType BoxType)) (= (type |b#0@@118|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| (Lit |a#0@@152|) (Lit |b#0@@118|)) (and ($Is |a#0@@152| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@118| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@152|) (Lit |b#0@@118|)) (= (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@152|) (Lit |b#0@@118|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@152|) (Lit |b#0@@118|)) |b#0@@118| |a#0@@152|)))) :qid |totalord.29:16| :weight 3 :skolemid |3293| :pattern ( (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@152|) (Lit |b#0@@118|))) ))))
(assert (forall (($ly@@494 T@U) (|run#0@@132| T@U) ) (!  (=> (and (= (type $ly@@494) LayerTypeType) (= (type |run#0@@132|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@494) |run#0@@132|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@494 |run#0@@132|)) (=> (Lexicographic__Byte__Order.__default.IsSorted $ly@@494 |run#0@@132|) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@494) |run#0@@132|)))) :qid |totalord.41:23| :skolemid |3294| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@494) |run#0@@132|)) )))
(assert (forall (($ly@@495 T@U) (|run#0@@133| T@U) ) (!  (=> (and (= (type $ly@@495) LayerTypeType) (= (type |run#0@@133|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsSorted $ly@@495 |run#0@@133|) (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@133|)) (=> (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@133|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@495 |run#0@@133|)))) :qid |totalord.41:23| :skolemid |3295| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted (AsFuelBottom $ly@@495) |run#0@@133|)) )))
(assert  (=> true (forall (($ly@@496 T@U) (|run#0@@134| T@U) ) (!  (=> (and (and (= (type $ly@@496) LayerTypeType) (= (type |run#0@@134|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@134|) ($Is |run#0@@134| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (= (|Seq#Length| |run#0@@134|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@496 |run#0@@134|)) (=> (= (|Seq#Length| |run#0@@134|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@496 |run#0@@134|)))) :qid |totalord.41:23| :skolemid |3296| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted $ly@@496 |run#0@@134|)) ))))
(assert (forall (($ly@@497 T@U) (|run#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@497) LayerTypeType) (= (type |run#0@@135|) (SeqType BoxType))) ($Is |run#0@@135| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@497 |run#0@@135|) true) (=> true (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@497 |run#0@@135|)))) :qid |totalord.41:23| :skolemid |3297| :pattern ( (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@497 |run#0@@135|)) )))
(assert  (=> true (forall (($ly@@498 T@U) (|run#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@498) LayerTypeType) (= (type |run#0@@136|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@136|) ($Is |run#0@@136| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@119| Int) (|j#0@@25| Int) ) (!  (=> (< |j#0@@25| (|Seq#Length| |run#0@@136|)) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@119|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@25|)))) :qid |totalord.45:12| :skolemid |3298| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@25|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@119|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@498) |run#0@@136|) (forall ((|i#0@@120| Int) (|j#0@@26| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@120|) (<= |i#0@@120| |j#0@@26|)) (< |j#0@@26| (|Seq#Length| |run#0@@136|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@120|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@26|))))) :qid |totalord.45:12| :skolemid |3299| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@26|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@120|))) ))) (=> (forall ((|i#0@@121| Int) (|j#0@@27| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@121|) (<= |i#0@@121| |j#0@@27|)) (< |j#0@@27| (|Seq#Length| |run#0@@136|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@121|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@27|))))) :qid |totalord.45:12| :skolemid |3299| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@27|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@121|))) )) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@498) |run#0@@136|))))) :qid |totalord.41:23| :skolemid |3300| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@498) |run#0@@136|)) ))))
(assert  (=> true (forall (($ly@@499 T@U) (|run#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@499) LayerTypeType) (= (type |run#0@@137|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@137|)) ($Is |run#0@@137| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@55| Int) (|j#1@@15| Int) ) (!  (=> (< |j#1@@15| (|Seq#Length| (Lit |run#0@@137|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#1@@55|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#1@@15|)))) :qid |totalord.45:12| :skolemid |3301| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#1@@15|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#1@@55|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@499) (Lit |run#0@@137|)) (forall ((|i#1@@56| Int) (|j#1@@16| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@56|) (<= |i#1@@56| |j#1@@16|)) (< |j#1@@16| (|Seq#Length| (Lit |run#0@@137|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#1@@56|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#1@@16|))))) :qid |totalord.45:12| :skolemid |3302| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#1@@16|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#1@@56|))) ))) (=> (forall ((|i#1@@57| Int) (|j#1@@17| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@57|) (<= |i#1@@57| |j#1@@17|)) (< |j#1@@17| (|Seq#Length| (Lit |run#0@@137|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#1@@57|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#1@@17|))))) :qid |totalord.45:12| :skolemid |3302| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#1@@17|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#1@@57|))) )) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@499) (Lit |run#0@@137|)))))) :qid |totalord.41:23| :weight 3 :skolemid |3303| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@499) (Lit |run#0@@137|))) ))))
(assert  (=> true (forall ((|run#0@@138| T@U) ) (!  (=> (and (= (type |run#0@@138|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@138|) ($Is |run#0@@138| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.48:38| :skolemid |3304| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@138|)) ))))
(assert (forall ((|run#0@@139| T@U) ) (!  (=> (and (= (type |run#0@@139|) (SeqType BoxType)) ($Is |run#0@@139| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|) true) (=> true (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|)))) :qid |totalord.48:38| :skolemid |3305| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|)) )))
(assert  (=> true (forall ((|run#0@@140| T@U) ) (!  (=> (and (= (type |run#0@@140|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@140|) ($Is |run#0@@140| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@122| Int) (|j#0@@28| Int) ) (!  (=> (< |j#0@@28| (|Seq#Length| |run#0@@140|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@122|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@28|)))) :qid |totalord.50:12| :skolemid |3306| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@28|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@122|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|) (forall ((|i#0@@123| Int) (|j#0@@29| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@123|) (< |i#0@@123| |j#0@@29|)) (< |j#0@@29| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@123|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@29|))))) :qid |totalord.50:12| :skolemid |3307| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@29|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@123|))) ))) (=> (forall ((|i#0@@124| Int) (|j#0@@30| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@124|) (< |i#0@@124| |j#0@@30|)) (< |j#0@@30| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@124|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@30|))))) :qid |totalord.50:12| :skolemid |3307| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@30|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@124|))) )) (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|))))) :qid |totalord.48:38| :skolemid |3308| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|)) ))))
(assert  (=> true (forall ((|run#0@@141| T@U) ) (!  (=> (and (= (type |run#0@@141|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@141|)) ($Is |run#0@@141| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@58| Int) (|j#1@@18| Int) ) (!  (=> (< |j#1@@18| (|Seq#Length| (Lit |run#0@@141|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#1@@58|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#1@@18|)))) :qid |totalord.50:12| :skolemid |3309| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#1@@18|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#1@@58|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|)) (forall ((|i#1@@59| Int) (|j#1@@19| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@59|) (< |i#1@@59| |j#1@@19|)) (< |j#1@@19| (|Seq#Length| (Lit |run#0@@141|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#1@@59|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#1@@19|))))) :qid |totalord.50:12| :skolemid |3310| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#1@@19|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#1@@59|))) ))) (=> (forall ((|i#1@@60| Int) (|j#1@@20| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@60|) (< |i#1@@60| |j#1@@20|)) (< |j#1@@20| (|Seq#Length| (Lit |run#0@@141|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#1@@60|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#1@@20|))))) :qid |totalord.50:12| :skolemid |3310| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#1@@20|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#1@@60|))) )) (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|)))))) :qid |totalord.48:38| :weight 3 :skolemid |3311| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|))) ))))
(assert (forall (($ly@@500 T@U) (|run#0@@142| T@U) ) (!  (=> (and (= (type $ly@@500) LayerTypeType) (= (type |run#0@@142|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@500) |run#0@@142|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@500 |run#0@@142|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@500 |run#0@@142|) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@500) |run#0@@142|)))) :qid |totalord.64:23| :skolemid |3312| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@500) |run#0@@142|)) )))
(assert (forall (($ly@@501 T@U) (|run#0@@143| T@U) ) (!  (=> (and (= (type $ly@@501) LayerTypeType) (= (type |run#0@@143|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@501 |run#0@@143|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@143|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@143|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@501 |run#0@@143|)))) :qid |totalord.64:23| :skolemid |3313| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@501) |run#0@@143|)) )))
(assert  (=> true (forall (($ly@@502 T@U) (|run#0@@144| T@U) ) (!  (=> (and (and (= (type $ly@@502) LayerTypeType) (= (type |run#0@@144|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@144|) ($Is |run#0@@144| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (= (|Seq#Length| |run#0@@144|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@502 |run#0@@144|)) (=> (= (|Seq#Length| |run#0@@144|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@502 |run#0@@144|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@502 |run#0@@144|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@144|)))) :qid |totalord.64:23| :skolemid |3314| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@502 |run#0@@144|)) ))))
(assert (forall (($ly@@503 T@U) (|run#0@@145| T@U) ) (!  (=> (and (and (= (type $ly@@503) LayerTypeType) (= (type |run#0@@145|) (SeqType BoxType))) ($Is |run#0@@145| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@503 |run#0@@145|) true) (=> true (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@503 |run#0@@145|)))) :qid |totalord.64:23| :skolemid |3315| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@503 |run#0@@145|)) )))
(assert  (=> true (forall (($ly@@504 T@U) (|run#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@504) LayerTypeType) (= (type |run#0@@146|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@146|) ($Is |run#0@@146| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@146|) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@504) |run#0@@146|) (let ((|b#0@@119| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@146|))) (ite |b#0@@119| |b#0@@119| |b#0@@119|))) (=> (let ((|b#0@@120| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@146|))) (ite |b#0@@120| |b#0@@120| |b#0@@120|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@504) |run#0@@146|))))) :qid |totalord.64:23| :skolemid |3316| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@504) |run#0@@146|)) ))))
(assert  (=> true (forall (($ly@@505 T@U) (|run#0@@147| T@U) ) (!  (=> (and (and (= (type $ly@@505) LayerTypeType) (= (type |run#0@@147|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@147|)) ($Is |run#0@@147| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@147|)) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@505) (Lit |run#0@@147|)) (let ((|b#1@@10| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@147|))))))) (ite |b#1@@10| |b#1@@10| |b#1@@10|))) (=> (let ((|b#1@@11| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@147|))))))) (ite |b#1@@11| |b#1@@11| |b#1@@11|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@505) (Lit |run#0@@147|)))))) :qid |totalord.64:23| :weight 3 :skolemid |3317| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@505) (Lit |run#0@@147|))) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order__Impl.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order__Impl.__default) Tagclass.Lexicographic__Byte__Order__Impl.__default))
(assert (forall ((bx@@167 T@U) ) (!  (=> (and (= (type bx@@167) BoxType) ($IsBox bx@@167 Tclass.Lexicographic__Byte__Order__Impl.__default)) (and (= ($Box ($Unbox refType bx@@167)) bx@@167) ($Is ($Unbox refType bx@@167) Tclass.Lexicographic__Byte__Order__Impl.__default))) :qid |unknown.0:0| :skolemid |3318| :pattern ( ($IsBox bx@@167 Tclass.Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@46 T@U) ) (!  (=> (= (type $o@@46) refType) (and (=> ($Is $o@@46 Tclass.Lexicographic__Byte__Order__Impl.__default) (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Lexicographic__Byte__Order__Impl.__default))) (=> (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Lexicographic__Byte__Order__Impl.__default)) ($Is $o@@46 Tclass.Lexicographic__Byte__Order__Impl.__default)))) :qid |unknown.0:0| :skolemid |3319| :pattern ( ($Is $o@@46 Tclass.Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@47 T@U) ($h@@125 T@U) ) (!  (=> (and (= (type $o@@47) refType) (= (type $h@@125) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@47 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@125) (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@125 $o@@47) alloc)))) (=> (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@125 $o@@47) alloc))) ($IsAlloc $o@@47 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@125)))) :qid |unknown.0:0| :skolemid |3320| :pattern ( ($IsAlloc $o@@47 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@125)) )))
(assert (= (type Tclass.PivotsLib.__default) TyType))
(assert (= (Tag Tclass.PivotsLib.__default) Tagclass.PivotsLib.__default))
(assert (forall ((bx@@168 T@U) ) (!  (=> (and (= (type bx@@168) BoxType) ($IsBox bx@@168 Tclass.PivotsLib.__default)) (and (= ($Box ($Unbox refType bx@@168)) bx@@168) ($Is ($Unbox refType bx@@168) Tclass.PivotsLib.__default))) :qid |unknown.0:0| :skolemid |3321| :pattern ( ($IsBox bx@@168 Tclass.PivotsLib.__default)) )))
(assert (forall (($o@@48 T@U) ) (!  (=> (= (type $o@@48) refType) (and (=> ($Is $o@@48 Tclass.PivotsLib.__default) (or (= $o@@48 null) (= (dtype $o@@48) Tclass.PivotsLib.__default))) (=> (or (= $o@@48 null) (= (dtype $o@@48) Tclass.PivotsLib.__default)) ($Is $o@@48 Tclass.PivotsLib.__default)))) :qid |unknown.0:0| :skolemid |3322| :pattern ( ($Is $o@@48 Tclass.PivotsLib.__default)) )))
(assert (forall (($o@@49 T@U) ($h@@126 T@U) ) (!  (=> (and (= (type $o@@49) refType) (= (type $h@@126) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@49 Tclass.PivotsLib.__default $h@@126) (or (= $o@@49 null) (U_2_bool (MapType1Select (MapType0Select $h@@126 $o@@49) alloc)))) (=> (or (= $o@@49 null) (U_2_bool (MapType1Select (MapType0Select $h@@126 $o@@49) alloc))) ($IsAlloc $o@@49 Tclass.PivotsLib.__default $h@@126)))) :qid |unknown.0:0| :skolemid |3323| :pattern ( ($IsAlloc $o@@49 Tclass.PivotsLib.__default $h@@126)) )))
(assert  (=> true (forall ((|pt#0| T@U) ) (!  (=> (and (= (type |pt#0|) (SeqType BoxType)) (or (|PivotsLib.__default.WFPivots#canCall| |pt#0|) ($Is |pt#0| (TSeq Tclass.KeyType.Key)))) true) :qid |PivotsLi.27:22| :skolemid |3324| :pattern ( (PivotsLib.__default.WFPivots |pt#0|)) ))))
(assert (forall ((|pt#0@@0| T@U) ) (!  (=> (and (= (type |pt#0@@0|) (SeqType BoxType)) ($Is |pt#0@@0| (TSeq Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.WFPivots#requires| |pt#0@@0|) true) (=> true (|PivotsLib.__default.WFPivots#requires| |pt#0@@0|)))) :qid |PivotsLi.27:22| :skolemid |3325| :pattern ( (|PivotsLib.__default.WFPivots#requires| |pt#0@@0|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType))
(assert  (=> true (forall ((|pt#0@@1| T@U) ) (!  (=> (and (= (type |pt#0@@1|) (SeqType BoxType)) (or (|PivotsLib.__default.WFPivots#canCall| |pt#0@@1|) ($Is |pt#0@@1| (TSeq Tclass.KeyType.Key)))) (and (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |pt#0@@1|) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |pt#0@@1|) (=> (> (|Seq#Length| |pt#0@@1|) 0) (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@1| (LitInt 0))))))) (and (=> (PivotsLib.__default.WFPivots |pt#0@@1|) (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |pt#0@@1|) (=> (> (|Seq#Length| |pt#0@@1|) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@1| (LitInt 0))))))) (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |pt#0@@1|) (=> (> (|Seq#Length| |pt#0@@1|) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@1| (LitInt 0)))))) (PivotsLib.__default.WFPivots |pt#0@@1|))))) :qid |PivotsLi.27:22| :skolemid |3326| :pattern ( (PivotsLib.__default.WFPivots |pt#0@@1|)) ))))
(assert  (=> true (forall ((|pt#0@@2| T@U) ) (!  (=> (and (= (type |pt#0@@2|) (SeqType BoxType)) (or (|PivotsLib.__default.WFPivots#canCall| (Lit |pt#0@@2|)) ($Is |pt#0@@2| (TSeq Tclass.KeyType.Key)))) (and (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |pt#0@@2|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit |pt#0@@2|)) (=> (> (|Seq#Length| (Lit |pt#0@@2|)) 0) (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@2|) (LitInt 0))))))) (and (=> (PivotsLib.__default.WFPivots (Lit |pt#0@@2|)) (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit |pt#0@@2|)) (=> (> (|Seq#Length| (Lit |pt#0@@2|)) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@2|) (LitInt 0))))))) (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit |pt#0@@2|)) (=> (> (|Seq#Length| (Lit |pt#0@@2|)) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@2|) (LitInt 0)))))) (PivotsLib.__default.WFPivots (Lit |pt#0@@2|)))))) :qid |PivotsLi.27:22| :weight 3 :skolemid |3327| :pattern ( (PivotsLib.__default.WFPivots (Lit |pt#0@@2|))) ))))
(assert  (=> true (forall ((|pt#0@@3| T@U) ) (!  (=> (and (= (type |pt#0@@3|) (SeqType BoxType)) (or (|PivotsLib.__default.NumBuckets#canCall| |pt#0@@3|) ($Is |pt#0@@3| (TSeq Tclass.KeyType.Key)))) true) :qid |PivotsLi.33:23| :skolemid |3328| :pattern ( (PivotsLib.__default.NumBuckets |pt#0@@3|)) ))))
(assert (forall ((|pt#0@@4| T@U) ) (!  (=> (and (= (type |pt#0@@4|) (SeqType BoxType)) ($Is |pt#0@@4| (TSeq Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.NumBuckets#requires| |pt#0@@4|) true) (=> true (|PivotsLib.__default.NumBuckets#requires| |pt#0@@4|)))) :qid |PivotsLi.33:23| :skolemid |3329| :pattern ( (|PivotsLib.__default.NumBuckets#requires| |pt#0@@4|)) )))
(assert  (=> true (forall ((|pt#0@@5| T@U) ) (!  (=> (and (= (type |pt#0@@5|) (SeqType BoxType)) (or (|PivotsLib.__default.NumBuckets#canCall| |pt#0@@5|) ($Is |pt#0@@5| (TSeq Tclass.KeyType.Key)))) (= (PivotsLib.__default.NumBuckets |pt#0@@5|) (+ (|Seq#Length| |pt#0@@5|) 1))) :qid |PivotsLi.33:23| :skolemid |3330| :pattern ( (PivotsLib.__default.NumBuckets |pt#0@@5|)) ))))
(assert  (=> true (forall ((|pt#0@@6| T@U) ) (!  (=> (and (= (type |pt#0@@6|) (SeqType BoxType)) (or (|PivotsLib.__default.NumBuckets#canCall| (Lit |pt#0@@6|)) ($Is |pt#0@@6| (TSeq Tclass.KeyType.Key)))) (= (PivotsLib.__default.NumBuckets (Lit |pt#0@@6|)) (+ (|Seq#Length| (Lit |pt#0@@6|)) 1))) :qid |PivotsLi.33:23| :weight 3 :skolemid |3331| :pattern ( (PivotsLib.__default.NumBuckets (Lit |pt#0@@6|))) ))))
(assert  (=> true (forall ((|pt#0@@7| T@U) (|key#0@@122| T@U) ) (!  (=> (and (and (= (type |pt#0@@7|) (SeqType BoxType)) (= (type |key#0@@122|) (SeqType BoxType))) (or (|PivotsLib.__default.Route#canCall| |pt#0@@7| |key#0@@122|) (and (and ($Is |pt#0@@7| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@122| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pt#0@@7|)))) (and (<= (LitInt 0) (PivotsLib.__default.Route |pt#0@@7| |key#0@@122|)) (< (PivotsLib.__default.Route |pt#0@@7| |key#0@@122|) (PivotsLib.__default.NumBuckets |pt#0@@7|)))) :qid |PivotsLi.38:18| :skolemid |3332| :pattern ( (PivotsLib.__default.Route |pt#0@@7| |key#0@@122|)) ))))
(assert (forall ((|pt#0@@8| T@U) (|key#0@@123| T@U) ) (!  (=> (and (and (= (type |pt#0@@8|) (SeqType BoxType)) (= (type |key#0@@123|) (SeqType BoxType))) (and ($Is |pt#0@@8| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@123| Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.Route#requires| |pt#0@@8| |key#0@@123|) (PivotsLib.__default.WFPivots |pt#0@@8|)) (=> (PivotsLib.__default.WFPivots |pt#0@@8|) (|PivotsLib.__default.Route#requires| |pt#0@@8| |key#0@@123|)))) :qid |PivotsLi.38:18| :skolemid |3333| :pattern ( (|PivotsLib.__default.Route#requires| |pt#0@@8| |key#0@@123|)) )))
(assert  (=> true (forall ((|pt#0@@9| T@U) (|key#0@@124| T@U) ) (!  (=> (and (and (= (type |pt#0@@9|) (SeqType BoxType)) (= (type |key#0@@124|) (SeqType BoxType))) (or (|PivotsLib.__default.Route#canCall| |pt#0@@9| |key#0@@124|) (and (and ($Is |pt#0@@9| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@124| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pt#0@@9|)))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |pt#0@@9| |key#0@@124|) (= (PivotsLib.__default.Route |pt#0@@9| |key#0@@124|) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) |pt#0@@9| |key#0@@124|) 1)))) :qid |PivotsLi.38:18| :skolemid |3334| :pattern ( (PivotsLib.__default.Route |pt#0@@9| |key#0@@124|)) ))))
(assert  (=> true (forall ((|pt#0@@10| T@U) (|key#0@@125| T@U) ) (!  (=> (and (and (= (type |pt#0@@10|) (SeqType BoxType)) (= (type |key#0@@125|) (SeqType BoxType))) (or (|PivotsLib.__default.Route#canCall| (Lit |pt#0@@10|) (Lit |key#0@@125|)) (and (and ($Is |pt#0@@10| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@125| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pt#0@@10|)))))))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |pt#0@@10|) (Lit |key#0@@125|)) (= (PivotsLib.__default.Route (Lit |pt#0@@10|) (Lit |key#0@@125|)) (LitInt (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit |pt#0@@10|) (Lit |key#0@@125|)) 1))))) :qid |PivotsLi.38:18| :weight 3 :skolemid |3335| :pattern ( (PivotsLib.__default.Route (Lit |pt#0@@10|) (Lit |key#0@@125|))) ))))
(assert  (=> true (forall ((|pt#0@@11| T@U) (|idx#0| Int) (|key#0@@126| T@U) ) (!  (=> (and (and (= (type |pt#0@@11|) (SeqType BoxType)) (= (type |key#0@@126|) (SeqType BoxType))) (or (|PivotsLib.__default.PivotInsertable#canCall| |pt#0@@11| |idx#0| |key#0@@126|) (and (and ($Is |pt#0@@11| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@126| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pt#0@@11|)))) true) :qid |PivotsLi.109:29| :skolemid |3336| :pattern ( (PivotsLib.__default.PivotInsertable |pt#0@@11| |idx#0| |key#0@@126|)) ))))
(assert (forall ((|pt#0@@12| T@U) (|idx#0@@0| Int) (|key#0@@127| T@U) ) (!  (=> (and (and (= (type |pt#0@@12|) (SeqType BoxType)) (= (type |key#0@@127|) (SeqType BoxType))) (and ($Is |pt#0@@12| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@127| Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.PivotInsertable#requires| |pt#0@@12| |idx#0@@0| |key#0@@127|) (PivotsLib.__default.WFPivots |pt#0@@12|)) (=> (PivotsLib.__default.WFPivots |pt#0@@12|) (|PivotsLib.__default.PivotInsertable#requires| |pt#0@@12| |idx#0@@0| |key#0@@127|)))) :qid |PivotsLi.109:29| :skolemid |3337| :pattern ( (|PivotsLib.__default.PivotInsertable#requires| |pt#0@@12| |idx#0@@0| |key#0@@127|)) )))
(assert  (=> true (forall ((|pt#0@@13| T@U) (|idx#0@@1| Int) (|key#0@@128| T@U) ) (!  (=> (and (and (= (type |pt#0@@13|) (SeqType BoxType)) (= (type |key#0@@128|) (SeqType BoxType))) (or (|PivotsLib.__default.PivotInsertable#canCall| |pt#0@@13| |idx#0@@1| |key#0@@128|) (and (and ($Is |pt#0@@13| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@128| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pt#0@@13|)))) (and (and (=> (<= |idx#0@@1| (|Seq#Length| |pt#0@@13|)) (|PivotsLib.__default.Route#canCall| |pt#0@@13| |key#0@@128|)) (=> (=> (> |idx#0@@1| 0) (not (|Seq#Equal| |key#0@@128| ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@13| (- |idx#0@@1| 1)))))) (=> (= |idx#0@@1| (LitInt 0)) (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |key#0@@128|)))) (and (=> (PivotsLib.__default.PivotInsertable |pt#0@@13| |idx#0@@1| |key#0@@128|) (and (and (and (and (<= (LitInt 0) |idx#0@@1|) (<= |idx#0@@1| (|Seq#Length| |pt#0@@13|))) (= (PivotsLib.__default.Route |pt#0@@13| |key#0@@128|) |idx#0@@1|)) (=> (> |idx#0@@1| 0) (not (|Seq#Equal| |key#0@@128| ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@13| (- |idx#0@@1| 1))))))) (=> (= |idx#0@@1| (LitInt 0)) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum |key#0@@128|)))) (=> (and (and (and (and (<= (LitInt 0) |idx#0@@1|) (<= |idx#0@@1| (|Seq#Length| |pt#0@@13|))) (= (PivotsLib.__default.Route |pt#0@@13| |key#0@@128|) |idx#0@@1|)) (=> (> |idx#0@@1| 0) (not (|Seq#Equal| |key#0@@128| ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@13| (- |idx#0@@1| 1))))))) (=> (= |idx#0@@1| (LitInt 0)) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum |key#0@@128|))) (PivotsLib.__default.PivotInsertable |pt#0@@13| |idx#0@@1| |key#0@@128|))))) :qid |PivotsLi.109:29| :skolemid |3338| :pattern ( (PivotsLib.__default.PivotInsertable |pt#0@@13| |idx#0@@1| |key#0@@128|)) ))))
(assert  (=> true (forall ((|pt#0@@14| T@U) (|idx#0@@2| Int) (|key#0@@129| T@U) ) (!  (=> (and (and (= (type |pt#0@@14|) (SeqType BoxType)) (= (type |key#0@@129|) (SeqType BoxType))) (or (|PivotsLib.__default.PivotInsertable#canCall| (Lit |pt#0@@14|) (LitInt |idx#0@@2|) (Lit |key#0@@129|)) (and (and ($Is |pt#0@@14| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@129| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pt#0@@14|)))))))) (and (and (=> (<= (LitInt |idx#0@@2|) (|Seq#Length| (Lit |pt#0@@14|))) (|PivotsLib.__default.Route#canCall| (Lit |pt#0@@14|) (Lit |key#0@@129|))) (=> (=> (> |idx#0@@2| 0) (not (|Seq#Equal| |key#0@@129| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@14|) (LitInt (- |idx#0@@2| 1))))))) (=> (= (LitInt |idx#0@@2|) (LitInt 0)) (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| (Lit |key#0@@129|))))) (and (=> (PivotsLib.__default.PivotInsertable (Lit |pt#0@@14|) (LitInt |idx#0@@2|) (Lit |key#0@@129|)) (and (and (and (and (<= (LitInt 0) (LitInt |idx#0@@2|)) (<= (LitInt |idx#0@@2|) (|Seq#Length| (Lit |pt#0@@14|)))) (= (LitInt (PivotsLib.__default.Route (Lit |pt#0@@14|) (Lit |key#0@@129|))) (LitInt |idx#0@@2|))) (=> (> |idx#0@@2| 0) (not (|Seq#Equal| |key#0@@129| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@14|) (LitInt (- |idx#0@@2| 1)))))))) (=> (= (LitInt |idx#0@@2|) (LitInt 0)) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum (Lit |key#0@@129|))))) (=> (and (and (and (and (<= (LitInt 0) (LitInt |idx#0@@2|)) (<= (LitInt |idx#0@@2|) (|Seq#Length| (Lit |pt#0@@14|)))) (= (LitInt (PivotsLib.__default.Route (Lit |pt#0@@14|) (Lit |key#0@@129|))) (LitInt |idx#0@@2|))) (=> (> |idx#0@@2| 0) (not (|Seq#Equal| |key#0@@129| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@14|) (LitInt (- |idx#0@@2| 1)))))))) (=> (= (LitInt |idx#0@@2|) (LitInt 0)) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum (Lit |key#0@@129|)))) (PivotsLib.__default.PivotInsertable (Lit |pt#0@@14|) (LitInt |idx#0@@2|) (Lit |key#0@@129|)))))) :qid |PivotsLi.109:29| :weight 3 :skolemid |3339| :pattern ( (PivotsLib.__default.PivotInsertable (Lit |pt#0@@14|) (LitInt |idx#0@@2|) (Lit |key#0@@129|))) ))))
(assert (forall (($ly@@506 T@U) (|pivots#0| T@U) (|pivot#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@506) LayerTypeType) (= (type |pivots#0|) (SeqType BoxType))) (= (type |pivot#0@@7|) (SeqType BoxType))) (= (PivotsLib.__default.CutoffForLeft ($LS $ly@@506) |pivots#0| |pivot#0@@7|) (PivotsLib.__default.CutoffForLeft $ly@@506 |pivots#0| |pivot#0@@7|))) :qid |PivotsLi.227:22| :skolemid |3340| :pattern ( (PivotsLib.__default.CutoffForLeft ($LS $ly@@506) |pivots#0| |pivot#0@@7|)) )))
(assert (forall (($ly@@507 T@U) (|pivots#0@@0| T@U) (|pivot#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@507) LayerTypeType) (= (type |pivots#0@@0|) (SeqType BoxType))) (= (type |pivot#0@@8|) (SeqType BoxType))) (= (PivotsLib.__default.CutoffForLeft $ly@@507 |pivots#0@@0| |pivot#0@@8|) (PivotsLib.__default.CutoffForLeft $LZ |pivots#0@@0| |pivot#0@@8|))) :qid |PivotsLi.227:22| :skolemid |3341| :pattern ( (PivotsLib.__default.CutoffForLeft (AsFuelBottom $ly@@507) |pivots#0@@0| |pivot#0@@8|)) )))
(assert  (=> true (forall (($ly@@508 T@U) (|pivots#0@@1| T@U) (|pivot#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@508) LayerTypeType) (= (type |pivots#0@@1|) (SeqType BoxType))) (= (type |pivot#0@@9|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForLeft#canCall| |pivots#0@@1| |pivot#0@@9|) (and (and ($Is |pivots#0@@1| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@9| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@1|)))) (and (and (and (<= (LitInt 0) (PivotsLib.__default.CutoffForLeft $ly@@508 |pivots#0@@1| |pivot#0@@9|)) (<= (PivotsLib.__default.CutoffForLeft $ly@@508 |pivots#0@@1| |pivot#0@@9|) (|Seq#Length| |pivots#0@@1|))) (forall ((|i#0@@125| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@125|) (< |i#0@@125| (PivotsLib.__default.CutoffForLeft $ly@@508 |pivots#0@@1| |pivot#0@@9|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@1| |i#0@@125|)) |pivot#0@@9|)) :qid |PivotsLi.230:18| :skolemid |3342| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@1| |i#0@@125|))) ))) (forall ((|i#1@@61| Int) ) (!  (=> (and (<= (PivotsLib.__default.CutoffForLeft $ly@@508 |pivots#0@@1| |pivot#0@@9|) |i#1@@61|) (< |i#1@@61| (|Seq#Length| |pivots#0@@1|))) (Lexicographic__Byte__Order.__default.lte |pivot#0@@9| ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@1| |i#1@@61|)))) :qid |PivotsLi.231:18| :skolemid |3343| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@1| |i#1@@61|))) )))) :qid |PivotsLi.227:22| :skolemid |3344| :pattern ( (PivotsLib.__default.CutoffForLeft $ly@@508 |pivots#0@@1| |pivot#0@@9|)) ))))
(assert (forall (($ly@@509 T@U) (|pivots#0@@2| T@U) (|pivot#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@509) LayerTypeType) (= (type |pivots#0@@2|) (SeqType BoxType))) (= (type |pivot#0@@10|) (SeqType BoxType))) (and ($Is |pivots#0@@2| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@10| Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.CutoffForLeft#requires| $ly@@509 |pivots#0@@2| |pivot#0@@10|) (PivotsLib.__default.WFPivots |pivots#0@@2|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@2|) (|PivotsLib.__default.CutoffForLeft#requires| $ly@@509 |pivots#0@@2| |pivot#0@@10|)))) :qid |PivotsLi.227:22| :skolemid |3345| :pattern ( (|PivotsLib.__default.CutoffForLeft#requires| $ly@@509 |pivots#0@@2| |pivot#0@@10|)) )))
(assert  (=> true (forall (($ly@@510 T@U) (|pivots#0@@3| T@U) (|pivot#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@510) LayerTypeType) (= (type |pivots#0@@3|) (SeqType BoxType))) (= (type |pivot#0@@11|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForLeft#canCall| |pivots#0@@3| |pivot#0@@11|) (and (and ($Is |pivots#0@@3| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@11| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@3|)))) (and (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |pivots#0@@3| |pivot#0@@11|) (= (PivotsLib.__default.CutoffForLeft ($LS $ly@@510) |pivots#0@@3| |pivot#0@@11|) (+ (Lexicographic__Byte__Order.__default.LargestLt ($LS $LZ) |pivots#0@@3| |pivot#0@@11|) 1)))) :qid |PivotsLi.227:22| :skolemid |3346| :pattern ( (PivotsLib.__default.CutoffForLeft ($LS $ly@@510) |pivots#0@@3| |pivot#0@@11|)) ))))
(assert  (=> true (forall (($ly@@511 T@U) (|pivots#0@@4| T@U) (|pivot#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@511) LayerTypeType) (= (type |pivots#0@@4|) (SeqType BoxType))) (= (type |pivot#0@@12|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForLeft#canCall| (Lit |pivots#0@@4|) (Lit |pivot#0@@12|)) (and (and ($Is |pivots#0@@4| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@12| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@4|)))))))) (and (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |pivots#0@@4|) (Lit |pivot#0@@12|)) (= (PivotsLib.__default.CutoffForLeft ($LS $ly@@511) (Lit |pivots#0@@4|) (Lit |pivot#0@@12|)) (LitInt (+ (Lexicographic__Byte__Order.__default.LargestLt ($LS $LZ) (Lit |pivots#0@@4|) (Lit |pivot#0@@12|)) 1))))) :qid |PivotsLi.227:22| :weight 3 :skolemid |3347| :pattern ( (PivotsLib.__default.CutoffForLeft ($LS $ly@@511) (Lit |pivots#0@@4|) (Lit |pivot#0@@12|))) ))))
(assert (forall (($ly@@512 T@U) (|pivots#0@@5| T@U) (|pivot#0@@13| T@U) ) (!  (=> (and (and (= (type $ly@@512) LayerTypeType) (= (type |pivots#0@@5|) (SeqType BoxType))) (= (type |pivot#0@@13|) (SeqType BoxType))) (= (PivotsLib.__default.CutoffForRight ($LS $ly@@512) |pivots#0@@5| |pivot#0@@13|) (PivotsLib.__default.CutoffForRight $ly@@512 |pivots#0@@5| |pivot#0@@13|))) :qid |PivotsLi.246:22| :skolemid |3348| :pattern ( (PivotsLib.__default.CutoffForRight ($LS $ly@@512) |pivots#0@@5| |pivot#0@@13|)) )))
(assert (forall (($ly@@513 T@U) (|pivots#0@@6| T@U) (|pivot#0@@14| T@U) ) (!  (=> (and (and (= (type $ly@@513) LayerTypeType) (= (type |pivots#0@@6|) (SeqType BoxType))) (= (type |pivot#0@@14|) (SeqType BoxType))) (= (PivotsLib.__default.CutoffForRight $ly@@513 |pivots#0@@6| |pivot#0@@14|) (PivotsLib.__default.CutoffForRight $LZ |pivots#0@@6| |pivot#0@@14|))) :qid |PivotsLi.246:22| :skolemid |3349| :pattern ( (PivotsLib.__default.CutoffForRight (AsFuelBottom $ly@@513) |pivots#0@@6| |pivot#0@@14|)) )))
(assert  (=> true (forall (($ly@@514 T@U) (|pivots#0@@7| T@U) (|pivot#0@@15| T@U) ) (!  (=> (and (and (and (= (type $ly@@514) LayerTypeType) (= (type |pivots#0@@7|) (SeqType BoxType))) (= (type |pivot#0@@15|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForRight#canCall| |pivots#0@@7| |pivot#0@@15|) (and (and ($Is |pivots#0@@7| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@15| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@7|)))) (and (and (and (<= (LitInt 0) (PivotsLib.__default.CutoffForRight $ly@@514 |pivots#0@@7| |pivot#0@@15|)) (<= (PivotsLib.__default.CutoffForRight $ly@@514 |pivots#0@@7| |pivot#0@@15|) (|Seq#Length| |pivots#0@@7|))) (forall ((|i#0@@126| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@126|) (< |i#0@@126| (PivotsLib.__default.CutoffForRight $ly@@514 |pivots#0@@7| |pivot#0@@15|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@7| |i#0@@126|)) |pivot#0@@15|)) :qid |PivotsLi.249:18| :skolemid |3350| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@7| |i#0@@126|))) ))) (forall ((|i#1@@62| Int) ) (!  (=> (and (<= (PivotsLib.__default.CutoffForRight $ly@@514 |pivots#0@@7| |pivot#0@@15|) |i#1@@62|) (< |i#1@@62| (|Seq#Length| |pivots#0@@7|))) (Lexicographic__Byte__Order.__default.lt |pivot#0@@15| ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@7| |i#1@@62|)))) :qid |PivotsLi.250:18| :skolemid |3351| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@7| |i#1@@62|))) )))) :qid |PivotsLi.246:22| :skolemid |3352| :pattern ( (PivotsLib.__default.CutoffForRight $ly@@514 |pivots#0@@7| |pivot#0@@15|)) ))))
(assert (forall (($ly@@515 T@U) (|pivots#0@@8| T@U) (|pivot#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@515) LayerTypeType) (= (type |pivots#0@@8|) (SeqType BoxType))) (= (type |pivot#0@@16|) (SeqType BoxType))) (and ($Is |pivots#0@@8| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@16| Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.CutoffForRight#requires| $ly@@515 |pivots#0@@8| |pivot#0@@16|) (PivotsLib.__default.WFPivots |pivots#0@@8|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@8|) (|PivotsLib.__default.CutoffForRight#requires| $ly@@515 |pivots#0@@8| |pivot#0@@16|)))) :qid |PivotsLi.246:22| :skolemid |3353| :pattern ( (|PivotsLib.__default.CutoffForRight#requires| $ly@@515 |pivots#0@@8| |pivot#0@@16|)) )))
(assert  (=> true (forall (($ly@@516 T@U) (|pivots#0@@9| T@U) (|pivot#0@@17| T@U) ) (!  (=> (and (and (and (= (type $ly@@516) LayerTypeType) (= (type |pivots#0@@9|) (SeqType BoxType))) (= (type |pivot#0@@17|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForRight#canCall| |pivots#0@@9| |pivot#0@@17|) (and (and ($Is |pivots#0@@9| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@17| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@9|)))) (and (|PivotsLib.__default.Route#canCall| |pivots#0@@9| |pivot#0@@17|) (= (PivotsLib.__default.CutoffForRight ($LS $ly@@516) |pivots#0@@9| |pivot#0@@17|) (PivotsLib.__default.Route |pivots#0@@9| |pivot#0@@17|)))) :qid |PivotsLi.246:22| :skolemid |3354| :pattern ( (PivotsLib.__default.CutoffForRight ($LS $ly@@516) |pivots#0@@9| |pivot#0@@17|)) ))))
(assert  (=> true (forall (($ly@@517 T@U) (|pivots#0@@10| T@U) (|pivot#0@@18| T@U) ) (!  (=> (and (and (and (= (type $ly@@517) LayerTypeType) (= (type |pivots#0@@10|) (SeqType BoxType))) (= (type |pivot#0@@18|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForRight#canCall| (Lit |pivots#0@@10|) (Lit |pivot#0@@18|)) (and (and ($Is |pivots#0@@10| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@18| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@10|)))))))) (and (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@10|) (Lit |pivot#0@@18|)) (= (PivotsLib.__default.CutoffForRight ($LS $ly@@517) (Lit |pivots#0@@10|) (Lit |pivot#0@@18|)) (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@10|) (Lit |pivot#0@@18|)))))) :qid |PivotsLi.246:22| :weight 3 :skolemid |3355| :pattern ( (PivotsLib.__default.CutoffForRight ($LS $ly@@517) (Lit |pivots#0@@10|) (Lit |pivot#0@@18|))) ))))
(assert (forall ((arg0@@485 T@U) (arg1@@261 Int) ) (! (= (type (PivotsLib.__default.PivotTableBucketKeySet arg0@@485 arg1@@261)) (MapType0Type BoxType boolType)) :qid |funType:PivotsLib.__default.PivotTableBucketKeySet| :pattern ( (PivotsLib.__default.PivotTableBucketKeySet arg0@@485 arg1@@261)) )))
(assert  (=> true (forall ((|pivots#0@@11| T@U) (|i#0@@127| Int) ) (!  (=> (and (= (type |pivots#0@@11|) (SeqType BoxType)) (or (|PivotsLib.__default.PivotTableBucketKeySet#canCall| |pivots#0@@11| |i#0@@127|) (and ($Is |pivots#0@@11| (TSeq Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@11|)))) ($Is (PivotsLib.__default.PivotTableBucketKeySet |pivots#0@@11| |i#0@@127|) (TISet Tclass.KeyType.Key))) :qid |PivotsLi.275:35| :skolemid |3356| :pattern ( (PivotsLib.__default.PivotTableBucketKeySet |pivots#0@@11| |i#0@@127|)) ))))
(assert (forall ((|pivots#0@@12| T@U) (|i#0@@128| Int) ) (!  (=> (and (= (type |pivots#0@@12|) (SeqType BoxType)) ($Is |pivots#0@@12| (TSeq Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.PivotTableBucketKeySet#requires| |pivots#0@@12| |i#0@@128|) (PivotsLib.__default.WFPivots |pivots#0@@12|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@12|) (|PivotsLib.__default.PivotTableBucketKeySet#requires| |pivots#0@@12| |i#0@@128|)))) :qid |PivotsLi.275:35| :skolemid |3357| :pattern ( (|PivotsLib.__default.PivotTableBucketKeySet#requires| |pivots#0@@12| |i#0@@128|)) )))
(assert (forall ((arg0@@486 T@U) (arg1@@262 T@U) (arg2@@178 Int) ) (! (= (type (|lambda#146| arg0@@486 arg1@@262 arg2@@178)) (MapType0Type BoxType boolType)) :qid |funType:lambda#146| :pattern ( (|lambda#146| arg0@@486 arg1@@262 arg2@@178)) )))
(assert  (=> true (forall ((|pivots#0@@13| T@U) (|i#0@@129| Int) ) (!  (=> (and (= (type |pivots#0@@13|) (SeqType BoxType)) (or (|PivotsLib.__default.PivotTableBucketKeySet#canCall| |pivots#0@@13| |i#0@@129|) (and ($Is |pivots#0@@13| (TSeq Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@13|)))) (and (forall ((|key#0@@130| T@U) ) (!  (=> (and (= (type |key#0@@130|) (SeqType BoxType)) ($Is |key#0@@130| Tclass.KeyType.Key)) (|PivotsLib.__default.Route#canCall| |pivots#0@@13| |key#0@@130|)) :qid |PivotsLi.278:10| :skolemid |3358| :pattern ( (PivotsLib.__default.Route |pivots#0@@13| |key#0@@130|)) )) (= (PivotsLib.__default.PivotTableBucketKeySet |pivots#0@@13| |i#0@@129|) (|lambda#146| Tclass.KeyType.Key |pivots#0@@13| |i#0@@129|)))) :qid |PivotsLi.275:35| :skolemid |3359| :pattern ( (PivotsLib.__default.PivotTableBucketKeySet |pivots#0@@13| |i#0@@129|)) ))))
(assert  (=> true (forall ((|pivots#0@@14| T@U) (|i#0@@130| Int) ) (!  (=> (and (= (type |pivots#0@@14|) (SeqType BoxType)) (or (|PivotsLib.__default.PivotTableBucketKeySet#canCall| (Lit |pivots#0@@14|) (LitInt |i#0@@130|)) (and ($Is |pivots#0@@14| (TSeq Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@14|)))))))) (and (forall ((|key#1@@15| T@U) ) (!  (=> (and (= (type |key#1@@15|) (SeqType BoxType)) ($Is |key#1@@15| Tclass.KeyType.Key)) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@14|) |key#1@@15|)) :qid |PivotsLi.278:10| :skolemid |3360| :pattern ( (PivotsLib.__default.Route |pivots#0@@14| |key#1@@15|)) )) (= (PivotsLib.__default.PivotTableBucketKeySet (Lit |pivots#0@@14|) (LitInt |i#0@@130|)) (|lambda#146| Tclass.KeyType.Key (Lit |pivots#0@@14|) (LitInt |i#0@@130|))))) :qid |PivotsLi.275:35| :weight 3 :skolemid |3361| :pattern ( (PivotsLib.__default.PivotTableBucketKeySet (Lit |pivots#0@@14|) (LitInt |i#0@@130|))) ))))
(assert (= (type Tclass.Multisets.__default) TyType))
(assert (= (Tag Tclass.Multisets.__default) Tagclass.Multisets.__default))
(assert (forall ((bx@@169 T@U) ) (!  (=> (and (= (type bx@@169) BoxType) ($IsBox bx@@169 Tclass.Multisets.__default)) (and (= ($Box ($Unbox refType bx@@169)) bx@@169) ($Is ($Unbox refType bx@@169) Tclass.Multisets.__default))) :qid |unknown.0:0| :skolemid |3362| :pattern ( ($IsBox bx@@169 Tclass.Multisets.__default)) )))
(assert (forall (($o@@50 T@U) ) (!  (=> (= (type $o@@50) refType) (and (=> ($Is $o@@50 Tclass.Multisets.__default) (or (= $o@@50 null) (= (dtype $o@@50) Tclass.Multisets.__default))) (=> (or (= $o@@50 null) (= (dtype $o@@50) Tclass.Multisets.__default)) ($Is $o@@50 Tclass.Multisets.__default)))) :qid |unknown.0:0| :skolemid |3363| :pattern ( ($Is $o@@50 Tclass.Multisets.__default)) )))
(assert (forall (($o@@51 T@U) ($h@@127 T@U) ) (!  (=> (and (= (type $o@@51) refType) (= (type $h@@127) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@51 Tclass.Multisets.__default $h@@127) (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@127 $o@@51) alloc)))) (=> (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@127 $o@@51) alloc))) ($IsAlloc $o@@51 Tclass.Multisets.__default $h@@127)))) :qid |unknown.0:0| :skolemid |3364| :pattern ( ($IsAlloc $o@@51 Tclass.Multisets.__default $h@@127)) )))
(assert (forall ((arg0@@487 T@U) (arg1@@263 T@U) (arg2@@179 T@U) ) (! (= (type (Multisets.__default.Choose arg0@@487 arg1@@263 arg2@@179)) BoxType) :qid |funType:Multisets.__default.Choose| :pattern ( (Multisets.__default.Choose arg0@@487 arg1@@263 arg2@@179)) )))
(assert (forall ((Multisets._default.Choose$A T@U) ($ly@@518 T@U) (|s#0@@200| T@U) ) (!  (=> (and (and (= (type Multisets._default.Choose$A) TyType) (= (type $ly@@518) LayerTypeType)) (= (type |s#0@@200|) (MapType0Type BoxType intType))) (= (Multisets.__default.Choose Multisets._default.Choose$A ($LS $ly@@518) |s#0@@200|) (Multisets.__default.Choose Multisets._default.Choose$A $ly@@518 |s#0@@200|))) :qid |unknown.0:0| :skolemid |3365| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A ($LS $ly@@518) |s#0@@200|)) )))
(assert (forall ((Multisets._default.Choose$A@@0 T@U) ($ly@@519 T@U) (|s#0@@201| T@U) ) (!  (=> (and (and (= (type Multisets._default.Choose$A@@0) TyType) (= (type $ly@@519) LayerTypeType)) (= (type |s#0@@201|) (MapType0Type BoxType intType))) (= (Multisets.__default.Choose Multisets._default.Choose$A@@0 $ly@@519 |s#0@@201|) (Multisets.__default.Choose Multisets._default.Choose$A@@0 $LZ |s#0@@201|))) :qid |unknown.0:0| :skolemid |3366| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@0 (AsFuelBottom $ly@@519) |s#0@@201|)) )))
(assert  (=> true (forall ((Multisets._default.Choose$A@@1 T@U) ($ly@@520 T@U) (|s#0@@202| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.Choose$A@@1) TyType) (= (type $ly@@520) LayerTypeType)) (= (type |s#0@@202|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Choose#canCall| Multisets._default.Choose$A@@1 |s#0@@202|) (and ($Is |s#0@@202| (TMultiSet Multisets._default.Choose$A@@1)) (< 0 (|MultiSet#Card| |s#0@@202|))))) (and (> (U_2_int (MapType0Select |s#0@@202| (Multisets.__default.Choose Multisets._default.Choose$A@@1 $ly@@520 |s#0@@202|))) 0) ($IsBox (Multisets.__default.Choose Multisets._default.Choose$A@@1 $ly@@520 |s#0@@202|) Multisets._default.Choose$A@@1))) :qid |unknown.0:0| :skolemid |3367| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@1 $ly@@520 |s#0@@202|)) ))))
(assert (forall ((Multisets._default.Choose$A@@2 T@U) ($ly@@521 T@U) ($Heap@@58 T@U) (|s#0@@203| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.Choose$A@@2) TyType) (= (type $ly@@521) LayerTypeType)) (= (type $Heap@@58) (MapType0Type refType MapType1Type))) (= (type |s#0@@203|) (MapType0Type BoxType intType))) (and ($IsGoodHeap $Heap@@58) ($Is |s#0@@203| (TMultiSet Multisets._default.Choose$A@@2)))) (and (=> (|Multisets.__default.Choose#requires| Multisets._default.Choose$A@@2 $ly@@521 |s#0@@203|) (< 0 (|MultiSet#Card| |s#0@@203|))) (=> (< 0 (|MultiSet#Card| |s#0@@203|)) (|Multisets.__default.Choose#requires| Multisets._default.Choose$A@@2 $ly@@521 |s#0@@203|)))) :qid |unknown.0:0| :skolemid |3368| :pattern ( (|Multisets.__default.Choose#requires| Multisets._default.Choose$A@@2 $ly@@521 |s#0@@203|) ($IsGoodHeap $Heap@@58)) )))
(assert (forall ((arg0@@488 T@U) (arg1@@264 T@U) ) (! (= (type (|$let#26_a| arg0@@488 arg1@@264)) BoxType) :qid |funType:$let#26_a| :pattern ( (|$let#26_a| arg0@@488 arg1@@264)) )))
(assert (forall ((Multisets._default.Choose$A@@3 T@U) (s@@50 T@U) ) (!  (=> (and (and (= (type Multisets._default.Choose$A@@3) TyType) (= (type s@@50) (MapType0Type BoxType intType))) (|$let#26$canCall| Multisets._default.Choose$A@@3 s@@50)) (> (U_2_int (MapType0Select s@@50 (|$let#26_a| Multisets._default.Choose$A@@3 s@@50))) 0)) :qid |Multiset.16:5| :skolemid |3369| :pattern ( (|$let#26_a| Multisets._default.Choose$A@@3 s@@50)) )))
(assert  (=> true (forall ((Multisets._default.Choose$A@@4 T@U) ($ly@@522 T@U) ($Heap@@59 T@U) (|s#0@@204| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.Choose$A@@4) TyType) (= (type $ly@@522) LayerTypeType)) (= (type $Heap@@59) (MapType0Type refType MapType1Type))) (= (type |s#0@@204|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Choose#canCall| Multisets._default.Choose$A@@4 |s#0@@204|) (and (and ($IsGoodHeap $Heap@@59) ($Is |s#0@@204| (TMultiSet Multisets._default.Choose$A@@4))) (< 0 (|MultiSet#Card| |s#0@@204|))))) (and (|$let#26$canCall| Multisets._default.Choose$A@@4 |s#0@@204|) (= (Multisets.__default.Choose Multisets._default.Choose$A@@4 ($LS $ly@@522) |s#0@@204|) (let ((|a#0@@153| (|$let#26_a| Multisets._default.Choose$A@@4 |s#0@@204|))) |a#0@@153|)))) :qid |unknown.0:0| :skolemid |3370| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@4 ($LS $ly@@522) |s#0@@204|) ($IsGoodHeap $Heap@@59)) ))))
(assert  (=> true (forall ((Multisets._default.Choose$A@@5 T@U) ($ly@@523 T@U) ($Heap@@60 T@U) (|s#0@@205| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.Choose$A@@5) TyType) (= (type $ly@@523) LayerTypeType)) (= (type $Heap@@60) (MapType0Type refType MapType1Type))) (= (type |s#0@@205|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Choose#canCall| Multisets._default.Choose$A@@5 (Lit |s#0@@205|)) (and (and ($IsGoodHeap $Heap@@60) ($Is |s#0@@205| (TMultiSet Multisets._default.Choose$A@@5))) (< 0 (|MultiSet#Card| (Lit |s#0@@205|)))))) (and (|$let#26$canCall| Multisets._default.Choose$A@@5 (Lit |s#0@@205|)) (= (Multisets.__default.Choose Multisets._default.Choose$A@@5 ($LS $ly@@523) (Lit |s#0@@205|)) (let ((|a#1@@6| (|$let#26_a| Multisets._default.Choose$A@@5 (Lit |s#0@@205|)))) |a#1@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |3371| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@5 ($LS $ly@@523) (Lit |s#0@@205|)) ($IsGoodHeap $Heap@@60)) ))))
(assert (forall ((arg0@@489 T@U) (arg1@@265 T@U) (arg2@@180 T@U) (arg3@@135 T@U) (arg4@@110 T@U) (arg5@@72 T@U) ) (! (= (type (Multisets.__default.Apply arg0@@489 arg1@@265 arg2@@180 arg3@@135 arg4@@110 arg5@@72)) (MapType0Type BoxType intType)) :qid |funType:Multisets.__default.Apply| :pattern ( (Multisets.__default.Apply arg0@@489 arg1@@265 arg2@@180 arg3@@135 arg4@@110 arg5@@72)) )))
(assert (forall ((Multisets._default.Apply$A T@U) (Multisets._default.Apply$B T@U) ($ly@@524 T@U) ($Heap@@61 T@U) (|fn#0| T@U) (|s#0@@206| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Apply$A) TyType) (= (type Multisets._default.Apply$B) TyType)) (= (type $ly@@524) LayerTypeType)) (= (type $Heap@@61) (MapType0Type refType MapType1Type))) (= (type |fn#0|) HandleTypeType)) (= (type |s#0@@206|) (MapType0Type BoxType intType))) (= (Multisets.__default.Apply Multisets._default.Apply$A Multisets._default.Apply$B ($LS $ly@@524) $Heap@@61 |fn#0| |s#0@@206|) (Multisets.__default.Apply Multisets._default.Apply$A Multisets._default.Apply$B $ly@@524 $Heap@@61 |fn#0| |s#0@@206|))) :qid |unknown.0:0| :skolemid |3372| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A Multisets._default.Apply$B ($LS $ly@@524) $Heap@@61 |fn#0| |s#0@@206|)) )))
(assert (forall ((Multisets._default.Apply$A@@0 T@U) (Multisets._default.Apply$B@@0 T@U) ($ly@@525 T@U) ($Heap@@62 T@U) (|fn#0@@0| T@U) (|s#0@@207| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Apply$A@@0) TyType) (= (type Multisets._default.Apply$B@@0) TyType)) (= (type $ly@@525) LayerTypeType)) (= (type $Heap@@62) (MapType0Type refType MapType1Type))) (= (type |fn#0@@0|) HandleTypeType)) (= (type |s#0@@207|) (MapType0Type BoxType intType))) (= (Multisets.__default.Apply Multisets._default.Apply$A@@0 Multisets._default.Apply$B@@0 $ly@@525 $Heap@@62 |fn#0@@0| |s#0@@207|) (Multisets.__default.Apply Multisets._default.Apply$A@@0 Multisets._default.Apply$B@@0 $LZ $Heap@@62 |fn#0@@0| |s#0@@207|))) :qid |unknown.0:0| :skolemid |3373| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A@@0 Multisets._default.Apply$B@@0 (AsFuelBottom $ly@@525) $Heap@@62 |fn#0@@0| |s#0@@207|)) )))
(assert (forall ((Multisets._default.Apply$A@@1 T@U) (Multisets._default.Apply$B@@1 T@U) ($ly@@526 T@U) ($h0@@4 T@U) ($h1@@4 T@U) (|fn#0@@1| T@U) (|s#0@@208| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@1) TyType) (= (type Multisets._default.Apply$B@@1) TyType)) (= (type $ly@@526) LayerTypeType)) (= (type $h0@@4) (MapType0Type refType MapType1Type))) (= (type $h1@@4) (MapType0Type refType MapType1Type))) (= (type |fn#0@@1|) HandleTypeType)) (= (type |s#0@@208|) (MapType0Type BoxType intType))) (and (and (and ($IsGoodHeap $h0@@4) ($IsGoodHeap $h1@@4)) (or (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $h0@@4 |fn#0@@1| |s#0@@208|) (and ($Is |fn#0@@1| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1)) ($Is |s#0@@208| (TMultiSet Multisets._default.Apply$A@@1))))) (and ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4)))) (forall (($o@@52 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (= (type $o@@52) refType) (= (type $f@@4) (FieldType alpha@@11))) (and (not (= $o@@52 null)) (exists ((|x#0@@13| T@U) (|o#0@@1| T@U) ) (!  (and (and (= (type |x#0@@13|) BoxType) (= (type |o#0@@1|) refType)) (and (and (and ($IsBox |x#0@@13| Multisets._default.Apply$A@@1) ($Is |o#0@@1| Tclass._System.object?)) (and (> (U_2_int (MapType0Select |s#0@@208| |x#0@@13|)) 0) (U_2_bool (MapType0Select (Reads1 Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $h0@@4 |fn#0@@1| |x#0@@13|) ($Box |o#0@@1|))))) (= ($Box $o@@52) ($Box |o#0@@1|)))) :qid |Multiset.23:15| :skolemid |3374| :pattern ( (MapType0Select (Reads1 Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $h0@@4 |fn#0@@1| |x#0@@13|) ($Box |o#0@@1|))) )))) (= (MapType1Select (MapType0Select $h0@@4 $o@@52) $f@@4) (MapType1Select (MapType0Select $h1@@4 $o@@52) $f@@4)))) :qid |unknown.0:0| :skolemid |3375| :no-pattern (type $o@@52) :no-pattern (type $f@@4) :no-pattern (U_2_int $o@@52) :no-pattern (U_2_bool $o@@52) :no-pattern (U_2_int $f@@4) :no-pattern (U_2_bool $f@@4) ))) (= (Multisets.__default.Apply Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $ly@@526 $h0@@4 |fn#0@@1| |s#0@@208|) (Multisets.__default.Apply Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $ly@@526 $h1@@4 |fn#0@@1| |s#0@@208|))) :qid |unknown.0:0| :skolemid |3376| :pattern ( ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4) (Multisets.__default.Apply Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $ly@@526 $h1@@4 |fn#0@@1| |s#0@@208|)) )))
(assert  (=> true (forall ((Multisets._default.Apply$A@@2 T@U) (Multisets._default.Apply$B@@2 T@U) ($ly@@527 T@U) ($Heap@@63 T@U) (|fn#0@@2| T@U) (|s#0@@209| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@2) TyType) (= (type Multisets._default.Apply$B@@2) TyType)) (= (type $ly@@527) LayerTypeType)) (= (type $Heap@@63) (MapType0Type refType MapType1Type))) (= (type |fn#0@@2|) HandleTypeType)) (= (type |s#0@@209|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $Heap@@63 |fn#0@@2| |s#0@@209|) (and (and (and ($IsGoodHeap $Heap@@63) ($Is |fn#0@@2| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2))) ($Is |s#0@@209| (TMultiSet Multisets._default.Apply$A@@2))) (forall ((|x#1@@11| T@U) ) (!  (=> (= (type |x#1@@11|) BoxType) (=> (and ($IsBox |x#1@@11| Multisets._default.Apply$A@@2) (> (U_2_int (MapType0Select |s#0@@209| |x#1@@11|)) 0)) (Requires1 Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $Heap@@63 |fn#0@@2| |x#1@@11|))) :qid |Multiset.21:21| :skolemid |3377| :pattern ( (Requires1 Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $Heap@@63 |fn#0@@2| |x#1@@11|)) :pattern ( (MapType0Select |s#0@@209| |x#1@@11|)) ))))) (and (= (|MultiSet#Card| (Multisets.__default.Apply Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $ly@@527 $Heap@@63 |fn#0@@2| |s#0@@209|)) (|MultiSet#Card| |s#0@@209|)) ($Is (Multisets.__default.Apply Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $ly@@527 $Heap@@63 |fn#0@@2| |s#0@@209|) (TMultiSet Multisets._default.Apply$B@@2)))) :qid |unknown.0:0| :skolemid |3378| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $ly@@527 $Heap@@63 |fn#0@@2| |s#0@@209|)) ))))
(assert (forall ((Multisets._default.Apply$A@@3 T@U) (Multisets._default.Apply$B@@3 T@U) ($ly@@528 T@U) ($Heap@@64 T@U) (|fn#0@@3| T@U) (|s#0@@210| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@3) TyType) (= (type Multisets._default.Apply$B@@3) TyType)) (= (type $ly@@528) LayerTypeType)) (= (type $Heap@@64) (MapType0Type refType MapType1Type))) (= (type |fn#0@@3|) HandleTypeType)) (= (type |s#0@@210|) (MapType0Type BoxType intType))) (and (and ($IsGoodHeap $Heap@@64) ($Is |fn#0@@3| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3))) ($Is |s#0@@210| (TMultiSet Multisets._default.Apply$A@@3)))) (and (=> (|Multisets.__default.Apply#requires| Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $ly@@528 $Heap@@64 |fn#0@@3| |s#0@@210|) (forall ((|x#2| T@U) ) (!  (=> (= (type |x#2|) BoxType) (=> (and ($IsBox |x#2| Multisets._default.Apply$A@@3) (> (U_2_int (MapType0Select |s#0@@210| |x#2|)) 0)) (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@64 |fn#0@@3| |x#2|))) :qid |Multiset.21:21| :skolemid |3379| :pattern ( (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@64 |fn#0@@3| |x#2|)) :pattern ( (MapType0Select |s#0@@210| |x#2|)) ))) (=> (forall ((|x#2@@0| T@U) ) (!  (=> (= (type |x#2@@0|) BoxType) (=> (and ($IsBox |x#2@@0| Multisets._default.Apply$A@@3) (> (U_2_int (MapType0Select |s#0@@210| |x#2@@0|)) 0)) (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@64 |fn#0@@3| |x#2@@0|))) :qid |Multiset.21:21| :skolemid |3379| :pattern ( (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@64 |fn#0@@3| |x#2@@0|)) :pattern ( (MapType0Select |s#0@@210| |x#2@@0|)) )) (|Multisets.__default.Apply#requires| Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $ly@@528 $Heap@@64 |fn#0@@3| |s#0@@210|)))) :qid |unknown.0:0| :skolemid |3380| :pattern ( (|Multisets.__default.Apply#requires| Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $ly@@528 $Heap@@64 |fn#0@@3| |s#0@@210|)) )))
(assert (= (type StartFuel_Multisets._default.Choose) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.Apply$A@@4 T@U) (Multisets._default.Apply$B@@4 T@U) ($ly@@529 T@U) ($Heap@@65 T@U) (|fn#0@@4| T@U) (|s#0@@211| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@4) TyType) (= (type Multisets._default.Apply$B@@4) TyType)) (= (type $ly@@529) LayerTypeType)) (= (type $Heap@@65) (MapType0Type refType MapType1Type))) (= (type |fn#0@@4|) HandleTypeType)) (= (type |s#0@@211|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@65 |fn#0@@4| |s#0@@211|) (and (and (and ($IsGoodHeap $Heap@@65) ($Is |fn#0@@4| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4))) ($Is |s#0@@211| (TMultiSet Multisets._default.Apply$A@@4))) (forall ((|x#2@@1| T@U) ) (!  (=> (= (type |x#2@@1|) BoxType) (=> (and ($IsBox |x#2@@1| Multisets._default.Apply$A@@4) (> (U_2_int (MapType0Select |s#0@@211| |x#2@@1|)) 0)) (Requires1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@65 |fn#0@@4| |x#2@@1|))) :qid |Multiset.21:21| :skolemid |3379| :pattern ( (Requires1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@65 |fn#0@@4| |x#2@@1|)) :pattern ( (MapType0Select |s#0@@211| |x#2@@1|)) ))))) (and (=> (not (= (|MultiSet#Card| |s#0@@211|) (LitInt 0))) (and (|Multisets.__default.Choose#canCall| Multisets._default.Apply$A@@4 |s#0@@211|) (let ((|x#3| (Multisets.__default.Choose Multisets._default.Apply$A@@4 StartFuel_Multisets._default.Choose |s#0@@211|))) (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@65 |fn#0@@4| (|MultiSet#Difference| |s#0@@211| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |x#3|)))))) (= (Multisets.__default.Apply Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 ($LS $ly@@529) $Heap@@65 |fn#0@@4| |s#0@@211|) (ite (= (|MultiSet#Card| |s#0@@211|) (LitInt 0)) (|MultiSet#Empty| BoxType) (let ((|x#3@@0| (Multisets.__default.Choose Multisets._default.Apply$A@@4 StartFuel_Multisets._default.Choose |s#0@@211|))) (|MultiSet#Union| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) (Apply1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@65 |fn#0@@4| |x#3@@0|)) (Multisets.__default.Apply Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $ly@@529 $Heap@@65 |fn#0@@4| (|MultiSet#Difference| |s#0@@211| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |x#3@@0|))))))))) :qid |unknown.0:0| :skolemid |3381| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 ($LS $ly@@529) $Heap@@65 |fn#0@@4| |s#0@@211|)) ))))
(assert (forall ((Multisets._default.Foldable$A T@U) ($h0@@5 T@U) ($h1@@5 T@U) (|zero#0| T@U) (|add#0| T@U) (|inv#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Foldable$A) TyType) (= (type $h0@@5) (MapType0Type refType MapType1Type))) (= (type $h1@@5) (MapType0Type refType MapType1Type))) (= (type |zero#0|) BoxType)) (= (type |add#0|) HandleTypeType)) (= (type |inv#0|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@5) ($IsGoodHeap $h1@@5)) (or (|Multisets.__default.Foldable#canCall| Multisets._default.Foldable$A $h0@@5 |zero#0| |add#0| |inv#0|) (and (and ($IsBox |zero#0| Multisets._default.Foldable$A) ($Is |add#0| (Tclass._System.___hFunc2 Multisets._default.Foldable$A Multisets._default.Foldable$A Multisets._default.Foldable$A))) ($Is |inv#0| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A TBool))))) (and ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5)))) (forall (($o@@53 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (= (type $o@@53) refType) (= (type $f@@5) (FieldType alpha@@12))) (and (not (= $o@@53 null)) (exists ((|x#0@@14| T@U) (|y#0@@19| T@U) (|o#0@@2| T@U) ) (!  (and (and (and (= (type |x#0@@14|) BoxType) (= (type |y#0@@19|) BoxType)) (= (type |o#0@@2|) refType)) (and (and (and (and ($IsBox |x#0@@14| Multisets._default.Foldable$A) ($IsBox |y#0@@19| Multisets._default.Foldable$A)) ($Is |o#0@@2| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A TBool $h0@@5 |inv#0| |x#0@@14|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A TBool $h0@@5 |inv#0| |y#0@@19|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.Foldable$A Multisets._default.Foldable$A Multisets._default.Foldable$A $h0@@5 |add#0| |x#0@@14| |y#0@@19|) ($Box |o#0@@2|))))) (= ($Box $o@@53) ($Box |o#0@@2|)))) :qid |Multiset.143:15| :skolemid |3382| :pattern ( (MapType0Select (Reads2 Multisets._default.Foldable$A Multisets._default.Foldable$A Multisets._default.Foldable$A $h0@@5 |add#0| |x#0@@14| |y#0@@19|) ($Box |o#0@@2|))) )))) (= (MapType1Select (MapType0Select $h0@@5 $o@@53) $f@@5) (MapType1Select (MapType0Select $h1@@5 $o@@53) $f@@5)))) :qid |unknown.0:0| :skolemid |3383| :no-pattern (type $o@@53) :no-pattern (type $f@@5) :no-pattern (U_2_int $o@@53) :no-pattern (U_2_bool $o@@53) :no-pattern (U_2_int $f@@5) :no-pattern (U_2_bool $f@@5) ))) (and (=> (Multisets.__default.Foldable Multisets._default.Foldable$A $h0@@5 |zero#0| |add#0| |inv#0|) (Multisets.__default.Foldable Multisets._default.Foldable$A $h1@@5 |zero#0| |add#0| |inv#0|)) (=> (Multisets.__default.Foldable Multisets._default.Foldable$A $h1@@5 |zero#0| |add#0| |inv#0|) (Multisets.__default.Foldable Multisets._default.Foldable$A $h0@@5 |zero#0| |add#0| |inv#0|)))) :qid |unknown.0:0| :skolemid |3384| :pattern ( ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5) (Multisets.__default.Foldable Multisets._default.Foldable$A $h1@@5 |zero#0| |add#0| |inv#0|)) )))
(assert  (=> true (forall ((Multisets._default.Foldable$A@@0 T@U) ($Heap@@66 T@U) (|zero#0@@0| T@U) (|add#0@@0| T@U) (|inv#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Foldable$A@@0) TyType) (= (type $Heap@@66) (MapType0Type refType MapType1Type))) (= (type |zero#0@@0|) BoxType)) (= (type |add#0@@0|) HandleTypeType)) (= (type |inv#0@@0|) HandleTypeType)) (or (|Multisets.__default.Foldable#canCall| Multisets._default.Foldable$A@@0 $Heap@@66 |zero#0@@0| |add#0@@0| |inv#0@@0|) (and (and (and ($IsGoodHeap $Heap@@66) ($IsBox |zero#0@@0| Multisets._default.Foldable$A@@0)) ($Is |add#0@@0| (Tclass._System.___hFunc2 Multisets._default.Foldable$A@@0 Multisets._default.Foldable$A@@0 Multisets._default.Foldable$A@@0))) ($Is |inv#0@@0| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A@@0 TBool))))) true) :qid |unknown.0:0| :skolemid |3385| :pattern ( (Multisets.__default.Foldable Multisets._default.Foldable$A@@0 $Heap@@66 |zero#0@@0| |add#0@@0| |inv#0@@0|)) ))))
(assert (forall ((Multisets._default.Foldable$A@@1 T@U) ($Heap@@67 T@U) (|zero#0@@1| T@U) (|add#0@@1| T@U) (|inv#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Foldable$A@@1) TyType) (= (type $Heap@@67) (MapType0Type refType MapType1Type))) (= (type |zero#0@@1|) BoxType)) (= (type |add#0@@1|) HandleTypeType)) (= (type |inv#0@@1|) HandleTypeType)) (and (and (and ($IsGoodHeap $Heap@@67) ($IsBox |zero#0@@1| Multisets._default.Foldable$A@@1)) ($Is |add#0@@1| (Tclass._System.___hFunc2 Multisets._default.Foldable$A@@1 Multisets._default.Foldable$A@@1 Multisets._default.Foldable$A@@1))) ($Is |inv#0@@1| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A@@1 TBool)))) (and (=> (|Multisets.__default.Foldable#requires| Multisets._default.Foldable$A@@1 $Heap@@67 |zero#0@@1| |add#0@@1| |inv#0@@1|) true) (=> true (|Multisets.__default.Foldable#requires| Multisets._default.Foldable$A@@1 $Heap@@67 |zero#0@@1| |add#0@@1| |inv#0@@1|)))) :qid |unknown.0:0| :skolemid |3386| :pattern ( (|Multisets.__default.Foldable#requires| Multisets._default.Foldable$A@@1 $Heap@@67 |zero#0@@1| |add#0@@1| |inv#0@@1|)) )))
(assert  (=> true (forall ((Multisets._default.Foldable$A@@2 T@U) ($Heap@@68 T@U) (|zero#0@@2| T@U) (|add#0@@2| T@U) (|inv#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Foldable$A@@2) TyType) (= (type $Heap@@68) (MapType0Type refType MapType1Type))) (= (type |zero#0@@2|) BoxType)) (= (type |add#0@@2|) HandleTypeType)) (= (type |inv#0@@2|) HandleTypeType)) (or (|Multisets.__default.Foldable#canCall| Multisets._default.Foldable$A@@2 $Heap@@68 |zero#0@@2| |add#0@@2| |inv#0@@2|) (and (and (and ($IsGoodHeap $Heap@@68) ($IsBox |zero#0@@2| Multisets._default.Foldable$A@@2)) ($Is |add#0@@2| (Tclass._System.___hFunc2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2))) ($Is |inv#0@@2| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A@@2 TBool))))) (and (=> (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |zero#0@@2|))) (forall ((|x#1@@12| T@U) (|y#1@@11| T@U) ) (!  (=> (and (and (and (= (type |x#1@@12|) BoxType) (= (type |y#1@@11|) BoxType)) (and ($IsBox |x#1@@12| Multisets._default.Foldable$A@@2) ($IsBox |y#1@@11| Multisets._default.Foldable$A@@2))) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |x#1@@12|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |y#1@@11|))))) true) :qid |Multiset.146:15| :skolemid |3387| :pattern ( (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@68 |add#0@@2| |x#1@@12| |y#1@@11|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |y#1@@11|)) ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |x#1@@12|))) ))) (and (=> (Multisets.__default.Foldable Multisets._default.Foldable$A@@2 $Heap@@68 |zero#0@@2| |add#0@@2| |inv#0@@2|) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |zero#0@@2|))) (and (forall ((|x#1@@13| T@U) (|y#1@@12| T@U) ) (!  (=> (and (= (type |x#1@@13|) BoxType) (= (type |y#1@@12|) BoxType)) (=> (and (and ($IsBox |x#1@@13| Multisets._default.Foldable$A@@2) ($IsBox |y#1@@12| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |x#1@@13|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |y#1@@12|))))) (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@68 |add#0@@2| |x#1@@13| |y#1@@12|))) :qid |Multiset.146:15| :skolemid |3389| :pattern ( (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@68 |add#0@@2| |x#1@@13| |y#1@@12|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |y#1@@12|)) ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |x#1@@13|))) )) (forall ((|x#2@@2| T@U) (|y#2| T@U) ) (!  (=> (and (= (type |x#2@@2|) BoxType) (= (type |y#2|) BoxType)) (=> (and (and ($IsBox |x#2@@2| Multisets._default.Foldable$A@@2) ($IsBox |y#2| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |x#2@@2|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |y#2|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@68 |add#0@@2| |x#2@@2| |y#2|)))))) :qid |Multiset.146:15| :skolemid |3390| :pattern ( (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@68 |add#0@@2| |x#2@@2| |y#2|)) ))))) (=> (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |zero#0@@2|))) (and (forall ((|x#1@@14| T@U) (|y#1@@13| T@U) ) (!  (=> (and (= (type |x#1@@14|) BoxType) (= (type |y#1@@13|) BoxType)) (=> (and (and ($IsBox |x#1@@14| Multisets._default.Foldable$A@@2) ($IsBox |y#1@@13| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |x#1@@14|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |y#1@@13|))))) (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@68 |add#0@@2| |x#1@@14| |y#1@@13|))) :qid |Multiset.146:15| :skolemid |3389| :pattern ( (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@68 |add#0@@2| |x#1@@14| |y#1@@13|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |y#1@@13|)) ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |x#1@@14|))) )) (forall ((|x#2@@3| T@U) (|y#2@@0| T@U) ) (!  (=> (and (= (type |x#2@@3|) BoxType) (= (type |y#2@@0|) BoxType)) (=> (and (and ($IsBox |x#2@@3| Multisets._default.Foldable$A@@2) ($IsBox |y#2@@0| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |x#2@@3|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| |y#2@@0|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@68 |inv#0@@2| (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@68 |add#0@@2| |x#2@@3| |y#2@@0|)))))) :qid |Multiset.146:15| :skolemid |3390| :pattern ( (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@68 |add#0@@2| |x#2@@3| |y#2@@0|)) )))) (Multisets.__default.Foldable Multisets._default.Foldable$A@@2 $Heap@@68 |zero#0@@2| |add#0@@2| |inv#0@@2|))))) :qid |unknown.0:0| :skolemid |3391| :pattern ( (Multisets.__default.Foldable Multisets._default.Foldable$A@@2 $Heap@@68 |zero#0@@2| |add#0@@2| |inv#0@@2|)) ))))
(assert (forall ((arg0@@490 T@U) (arg1@@266 T@U) (arg2@@181 T@U) (arg3@@136 T@U) (arg4@@111 T@U) (arg5@@73 T@U) (arg6@@53 T@U) ) (! (= (type (Multisets.__default.Fold arg0@@490 arg1@@266 arg2@@181 arg3@@136 arg4@@111 arg5@@73 arg6@@53)) BoxType) :qid |funType:Multisets.__default.Fold| :pattern ( (Multisets.__default.Fold arg0@@490 arg1@@266 arg2@@181 arg3@@136 arg4@@111 arg5@@73 arg6@@53)) )))
(assert (forall ((Multisets._default.Fold$A T@U) ($ly@@530 T@U) ($Heap@@69 T@U) (|zero#0@@3| T@U) (|add#0@@3| T@U) (|inv#0@@3| T@U) (|s#0@@212| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Fold$A) TyType) (= (type $ly@@530) LayerTypeType)) (= (type $Heap@@69) (MapType0Type refType MapType1Type))) (= (type |zero#0@@3|) BoxType)) (= (type |add#0@@3|) HandleTypeType)) (= (type |inv#0@@3|) HandleTypeType)) (= (type |s#0@@212|) (MapType0Type BoxType intType))) (= (Multisets.__default.Fold Multisets._default.Fold$A ($LS $ly@@530) $Heap@@69 |zero#0@@3| |add#0@@3| |inv#0@@3| |s#0@@212|) (Multisets.__default.Fold Multisets._default.Fold$A $ly@@530 $Heap@@69 |zero#0@@3| |add#0@@3| |inv#0@@3| |s#0@@212|))) :qid |unknown.0:0| :skolemid |3392| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A ($LS $ly@@530) $Heap@@69 |zero#0@@3| |add#0@@3| |inv#0@@3| |s#0@@212|)) )))
(assert (forall ((Multisets._default.Fold$A@@0 T@U) ($ly@@531 T@U) ($Heap@@70 T@U) (|zero#0@@4| T@U) (|add#0@@4| T@U) (|inv#0@@4| T@U) (|s#0@@213| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@0) TyType) (= (type $ly@@531) LayerTypeType)) (= (type $Heap@@70) (MapType0Type refType MapType1Type))) (= (type |zero#0@@4|) BoxType)) (= (type |add#0@@4|) HandleTypeType)) (= (type |inv#0@@4|) HandleTypeType)) (= (type |s#0@@213|) (MapType0Type BoxType intType))) (= (Multisets.__default.Fold Multisets._default.Fold$A@@0 $ly@@531 $Heap@@70 |zero#0@@4| |add#0@@4| |inv#0@@4| |s#0@@213|) (Multisets.__default.Fold Multisets._default.Fold$A@@0 $LZ $Heap@@70 |zero#0@@4| |add#0@@4| |inv#0@@4| |s#0@@213|))) :qid |unknown.0:0| :skolemid |3393| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A@@0 (AsFuelBottom $ly@@531) $Heap@@70 |zero#0@@4| |add#0@@4| |inv#0@@4| |s#0@@213|)) )))
(assert (forall ((Multisets._default.Fold$A@@1 T@U) ($ly@@532 T@U) ($h0@@6 T@U) ($h1@@6 T@U) (|zero#0@@5| T@U) (|add#0@@5| T@U) (|inv#0@@5| T@U) (|s#0@@214| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@1) TyType) (= (type $ly@@532) LayerTypeType)) (= (type $h0@@6) (MapType0Type refType MapType1Type))) (= (type $h1@@6) (MapType0Type refType MapType1Type))) (= (type |zero#0@@5|) BoxType)) (= (type |add#0@@5|) HandleTypeType)) (= (type |inv#0@@5|) HandleTypeType)) (= (type |s#0@@214|) (MapType0Type BoxType intType))) (and (and (and ($IsGoodHeap $h0@@6) ($IsGoodHeap $h1@@6)) (or (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@1 $h0@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@214|) (and (and (and ($IsBox |zero#0@@5| Multisets._default.Fold$A@@1) ($Is |add#0@@5| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1))) ($Is |inv#0@@5| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@1 TBool))) ($Is |s#0@@214| (TMultiSet Multisets._default.Fold$A@@1))))) (and ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6)))) (forall (($o@@54 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (= (type $o@@54) refType) (= (type $f@@6) (FieldType alpha@@13))) (and (not (= $o@@54 null)) (exists ((|x#0@@15| T@U) (|y#0@@20| T@U) (|o#0@@3| T@U) ) (!  (and (and (and (= (type |x#0@@15|) BoxType) (= (type |y#0@@20|) BoxType)) (= (type |o#0@@3|) refType)) (and (and (and (and ($IsBox |x#0@@15| Multisets._default.Fold$A@@1) ($IsBox |y#0@@20| Multisets._default.Fold$A@@1)) ($Is |o#0@@3| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@1 TBool $h0@@6 |inv#0@@5| |x#0@@15|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@1 TBool $h0@@6 |inv#0@@5| |y#0@@20|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 $h0@@6 |add#0@@5| |x#0@@15| |y#0@@20|) ($Box |o#0@@3|))))) (= ($Box $o@@54) ($Box |o#0@@3|)))) :qid |Multiset.154:15| :skolemid |3394| :pattern ( (MapType0Select (Reads2 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 $h0@@6 |add#0@@5| |x#0@@15| |y#0@@20|) ($Box |o#0@@3|))) )))) (= (MapType1Select (MapType0Select $h0@@6 $o@@54) $f@@6) (MapType1Select (MapType0Select $h1@@6 $o@@54) $f@@6)))) :qid |unknown.0:0| :skolemid |3395| :no-pattern (type $o@@54) :no-pattern (type $f@@6) :no-pattern (U_2_int $o@@54) :no-pattern (U_2_bool $o@@54) :no-pattern (U_2_int $f@@6) :no-pattern (U_2_bool $f@@6) ))) (= (Multisets.__default.Fold Multisets._default.Fold$A@@1 $ly@@532 $h0@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@214|) (Multisets.__default.Fold Multisets._default.Fold$A@@1 $ly@@532 $h1@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@214|))) :qid |unknown.0:0| :skolemid |3396| :pattern ( ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6) (Multisets.__default.Fold Multisets._default.Fold$A@@1 $ly@@532 $h1@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@214|)) )))
(assert  (=> true (forall ((Multisets._default.Fold$A@@2 T@U) ($ly@@533 T@U) ($Heap@@71 T@U) (|zero#0@@6| T@U) (|add#0@@6| T@U) (|inv#0@@6| T@U) (|s#0@@215| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@2) TyType) (= (type $ly@@533) LayerTypeType)) (= (type $Heap@@71) (MapType0Type refType MapType1Type))) (= (type |zero#0@@6|) BoxType)) (= (type |add#0@@6|) HandleTypeType)) (= (type |inv#0@@6|) HandleTypeType)) (= (type |s#0@@215|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@2 $Heap@@71 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@215|) (and (and (and (and (and ($IsGoodHeap $Heap@@71) ($IsBox |zero#0@@6| Multisets._default.Fold$A@@2)) ($Is |add#0@@6| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@2 Multisets._default.Fold$A@@2 Multisets._default.Fold$A@@2))) ($Is |inv#0@@6| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@2 TBool))) ($Is |s#0@@215| (TMultiSet Multisets._default.Fold$A@@2))) (and (Multisets.__default.Foldable Multisets._default.Fold$A@@2 $Heap@@71 |zero#0@@6| |add#0@@6| |inv#0@@6|) (forall ((|x#1@@15| T@U) ) (!  (=> (= (type |x#1@@15|) BoxType) (=> (and ($IsBox |x#1@@15| Multisets._default.Fold$A@@2) (> (U_2_int (MapType0Select |s#0@@215| |x#1@@15|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@2 TBool $Heap@@71 |inv#0@@6| |x#1@@15|))))) :qid |Multiset.151:21| :skolemid |3397| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@2 TBool $Heap@@71 |inv#0@@6| |x#1@@15|))) :pattern ( (MapType0Select |s#0@@215| |x#1@@15|)) )))))) (and (and (=> (= (|MultiSet#Card| |s#0@@215|) (LitInt 0)) (= (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@533 $Heap@@71 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@215|) |zero#0@@6|)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@2 TBool $Heap@@71 |inv#0@@6| (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@533 $Heap@@71 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@215|))))) ($IsBox (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@533 $Heap@@71 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@215|) Multisets._default.Fold$A@@2))) :qid |unknown.0:0| :skolemid |3398| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@533 $Heap@@71 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@215|)) ))))
(assert (forall ((Multisets._default.Fold$A@@3 T@U) ($ly@@534 T@U) ($Heap@@72 T@U) (|zero#0@@7| T@U) (|add#0@@7| T@U) (|inv#0@@7| T@U) (|s#0@@216| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@3) TyType) (= (type $ly@@534) LayerTypeType)) (= (type $Heap@@72) (MapType0Type refType MapType1Type))) (= (type |zero#0@@7|) BoxType)) (= (type |add#0@@7|) HandleTypeType)) (= (type |inv#0@@7|) HandleTypeType)) (= (type |s#0@@216|) (MapType0Type BoxType intType))) (and (and (and (and ($IsGoodHeap $Heap@@72) ($IsBox |zero#0@@7| Multisets._default.Fold$A@@3)) ($Is |add#0@@7| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@3 Multisets._default.Fold$A@@3 Multisets._default.Fold$A@@3))) ($Is |inv#0@@7| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@3 TBool))) ($Is |s#0@@216| (TMultiSet Multisets._default.Fold$A@@3)))) (and (=> (|Multisets.__default.Fold#requires| Multisets._default.Fold$A@@3 $ly@@534 $Heap@@72 |zero#0@@7| |add#0@@7| |inv#0@@7| |s#0@@216|) (and (Multisets.__default.Foldable Multisets._default.Fold$A@@3 $Heap@@72 |zero#0@@7| |add#0@@7| |inv#0@@7|) (forall ((|x#2@@4| T@U) ) (!  (=> (= (type |x#2@@4|) BoxType) (=> (and ($IsBox |x#2@@4| Multisets._default.Fold$A@@3) (> (U_2_int (MapType0Select |s#0@@216| |x#2@@4|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@72 |inv#0@@7| |x#2@@4|))))) :qid |Multiset.151:21| :skolemid |3399| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@72 |inv#0@@7| |x#2@@4|))) :pattern ( (MapType0Select |s#0@@216| |x#2@@4|)) )))) (=> (and (Multisets.__default.Foldable Multisets._default.Fold$A@@3 $Heap@@72 |zero#0@@7| |add#0@@7| |inv#0@@7|) (forall ((|x#2@@5| T@U) ) (!  (=> (= (type |x#2@@5|) BoxType) (=> (and ($IsBox |x#2@@5| Multisets._default.Fold$A@@3) (> (U_2_int (MapType0Select |s#0@@216| |x#2@@5|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@72 |inv#0@@7| |x#2@@5|))))) :qid |Multiset.151:21| :skolemid |3399| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@72 |inv#0@@7| |x#2@@5|))) :pattern ( (MapType0Select |s#0@@216| |x#2@@5|)) ))) (|Multisets.__default.Fold#requires| Multisets._default.Fold$A@@3 $ly@@534 $Heap@@72 |zero#0@@7| |add#0@@7| |inv#0@@7| |s#0@@216|)))) :qid |unknown.0:0| :skolemid |3400| :pattern ( (|Multisets.__default.Fold#requires| Multisets._default.Fold$A@@3 $ly@@534 $Heap@@72 |zero#0@@7| |add#0@@7| |inv#0@@7| |s#0@@216|)) )))
(assert  (=> true (forall ((Multisets._default.Fold$A@@4 T@U) ($ly@@535 T@U) ($Heap@@73 T@U) (|zero#0@@8| T@U) (|add#0@@8| T@U) (|inv#0@@8| T@U) (|s#0@@217| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@4) TyType) (= (type $ly@@535) LayerTypeType)) (= (type $Heap@@73) (MapType0Type refType MapType1Type))) (= (type |zero#0@@8|) BoxType)) (= (type |add#0@@8|) HandleTypeType)) (= (type |inv#0@@8|) HandleTypeType)) (= (type |s#0@@217|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@4 $Heap@@73 |zero#0@@8| |add#0@@8| |inv#0@@8| |s#0@@217|) (and (and (and (and (and ($IsGoodHeap $Heap@@73) ($IsBox |zero#0@@8| Multisets._default.Fold$A@@4)) ($Is |add#0@@8| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4))) ($Is |inv#0@@8| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@4 TBool))) ($Is |s#0@@217| (TMultiSet Multisets._default.Fold$A@@4))) (and (Multisets.__default.Foldable Multisets._default.Fold$A@@4 $Heap@@73 |zero#0@@8| |add#0@@8| |inv#0@@8|) (forall ((|x#2@@6| T@U) ) (!  (=> (= (type |x#2@@6|) BoxType) (=> (and ($IsBox |x#2@@6| Multisets._default.Fold$A@@4) (> (U_2_int (MapType0Select |s#0@@217| |x#2@@6|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@4 TBool $Heap@@73 |inv#0@@8| |x#2@@6|))))) :qid |Multiset.151:21| :skolemid |3399| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@4 TBool $Heap@@73 |inv#0@@8| |x#2@@6|))) :pattern ( (MapType0Select |s#0@@217| |x#2@@6|)) )))))) (and (=> (not (= (|MultiSet#Card| |s#0@@217|) (LitInt 0))) (and (|Multisets.__default.Choose#canCall| Multisets._default.Fold$A@@4 |s#0@@217|) (let ((|a#0@@154| (Multisets.__default.Choose Multisets._default.Fold$A@@4 StartFuel_Multisets._default.Choose |s#0@@217|))) (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@4 $Heap@@73 |zero#0@@8| |add#0@@8| |inv#0@@8| (|MultiSet#Difference| |s#0@@217| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |a#0@@154|)))))) (= (Multisets.__default.Fold Multisets._default.Fold$A@@4 ($LS $ly@@535) $Heap@@73 |zero#0@@8| |add#0@@8| |inv#0@@8| |s#0@@217|) (ite (= (|MultiSet#Card| |s#0@@217|) (LitInt 0)) |zero#0@@8| (let ((|a#0@@155| (Multisets.__default.Choose Multisets._default.Fold$A@@4 StartFuel_Multisets._default.Choose |s#0@@217|))) (Apply2 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4 $Heap@@73 |add#0@@8| |a#0@@155| (Multisets.__default.Fold Multisets._default.Fold$A@@4 $ly@@535 $Heap@@73 |zero#0@@8| |add#0@@8| |inv#0@@8| (|MultiSet#Difference| |s#0@@217| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |a#0@@155|))))))))) :qid |unknown.0:0| :skolemid |3401| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A@@4 ($LS $ly@@535) $Heap@@73 |zero#0@@8| |add#0@@8| |inv#0@@8| |s#0@@217|)) ))))
(assert (forall ((arg0@@491 T@U) (arg1@@267 T@U) (arg2@@182 T@U) (arg3@@137 T@U) ) (! (= (type (Multisets.__default.FoldSimple arg0@@491 arg1@@267 arg2@@182 arg3@@137)) BoxType) :qid |funType:Multisets.__default.FoldSimple| :pattern ( (Multisets.__default.FoldSimple arg0@@491 arg1@@267 arg2@@182 arg3@@137)) )))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A T@U) (|zero#0@@9| T@U) (|add#0@@9| T@U) (|s#0@@218| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.FoldSimple$A) TyType) (= (type |zero#0@@9|) BoxType)) (= (type |add#0@@9|) HandleTypeType)) (= (type |s#0@@218|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@218|) (and (and ($IsBox |zero#0@@9| Multisets._default.FoldSimple$A) ($Is |add#0@@9| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A Multisets._default.FoldSimple$A Multisets._default.FoldSimple$A))) ($Is |s#0@@218| (TMultiSet Multisets._default.FoldSimple$A))))) (and (=> (= (|MultiSet#Card| |s#0@@218|) (LitInt 0)) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@218|) |zero#0@@9|)) ($IsBox (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@218|) Multisets._default.FoldSimple$A))) :qid |unknown.0:0| :skolemid |3402| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@218|)) ))))
(assert (forall ((Multisets._default.FoldSimple$A@@0 T@U) ($Heap@@74 T@U) (|zero#0@@10| T@U) (|add#0@@10| T@U) (|s#0@@219| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@0) TyType) (= (type $Heap@@74) (MapType0Type refType MapType1Type))) (= (type |zero#0@@10|) BoxType)) (= (type |add#0@@10|) HandleTypeType)) (= (type |s#0@@219|) (MapType0Type BoxType intType))) (and (and (and ($IsGoodHeap $Heap@@74) ($IsBox |zero#0@@10| Multisets._default.FoldSimple$A@@0)) ($Is |add#0@@10| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@0 Multisets._default.FoldSimple$A@@0 Multisets._default.FoldSimple$A@@0))) ($Is |s#0@@219| (TMultiSet Multisets._default.FoldSimple$A@@0)))) (and (=> (|Multisets.__default.FoldSimple#requires| Multisets._default.FoldSimple$A@@0 |zero#0@@10| |add#0@@10| |s#0@@219|) true) (=> true (|Multisets.__default.FoldSimple#requires| Multisets._default.FoldSimple$A@@0 |zero#0@@10| |add#0@@10| |s#0@@219|)))) :qid |unknown.0:0| :skolemid |3403| :pattern ( (|Multisets.__default.FoldSimple#requires| Multisets._default.FoldSimple$A@@0 |zero#0@@10| |add#0@@10| |s#0@@219|) ($IsGoodHeap $Heap@@74)) )))
(assert  (and (and (and (and (and (forall ((arg0@@492 T@U) ) (! (= (type (|lambda#152| arg0@@492)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#152| :pattern ( (|lambda#152| arg0@@492)) )) (forall ((arg0@@493 T@U) ) (! (= (type (|lambda#148| arg0@@493)) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#148| :pattern ( (|lambda#148| arg0@@493)) ))) (forall ((arg0@@494 T@U) ) (! (= (type (|lambda#149| arg0@@494)) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#149| :pattern ( (|lambda#149| arg0@@494)) ))) (forall ((arg0@@495 T@U) ) (! (= (type (|lambda#151| arg0@@495)) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#151| :pattern ( (|lambda#151| arg0@@495)) ))) (forall ((arg0@@496 Bool) ) (! (= (type (|lambda#150| arg0@@496)) (MapType0Type refType boolType)) :qid |funType:lambda#150| :pattern ( (|lambda#150| arg0@@496)) ))) (= (type StartFuel_Multisets._default.Fold) LayerTypeType)))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A@@1 T@U) ($Heap@@75 T@U) (|zero#0@@11| T@U) (|add#0@@11| T@U) (|s#0@@220| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@1) TyType) (= (type $Heap@@75) (MapType0Type refType MapType1Type))) (= (type |zero#0@@11|) BoxType)) (= (type |add#0@@11|) HandleTypeType)) (= (type |s#0@@220|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A@@1 |zero#0@@11| |add#0@@11| |s#0@@220|) (and (and (and ($IsGoodHeap $Heap@@75) ($IsBox |zero#0@@11| Multisets._default.FoldSimple$A@@1)) ($Is |add#0@@11| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@1 Multisets._default.FoldSimple$A@@1 Multisets._default.FoldSimple$A@@1))) ($Is |s#0@@220| (TMultiSet Multisets._default.FoldSimple$A@@1))))) (and (|Multisets.__default.Fold#canCall| Multisets._default.FoldSimple$A@@1 $Heap@@75 |zero#0@@11| |add#0@@11| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.FoldSimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) |s#0@@220|) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@1 |zero#0@@11| |add#0@@11| |s#0@@220|) (Multisets.__default.Fold Multisets._default.FoldSimple$A@@1 StartFuel_Multisets._default.Fold $Heap@@75 |zero#0@@11| |add#0@@11| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.FoldSimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) |s#0@@220|)))) :qid |unknown.0:0| :skolemid |3404| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@1 |zero#0@@11| |add#0@@11| |s#0@@220|) ($IsGoodHeap $Heap@@75)) ))))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A@@2 T@U) ($Heap@@76 T@U) (|zero#0@@12| T@U) (|add#0@@12| T@U) (|s#0@@221| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@2) TyType) (= (type $Heap@@76) (MapType0Type refType MapType1Type))) (= (type |zero#0@@12|) BoxType)) (= (type |add#0@@12|) HandleTypeType)) (= (type |s#0@@221|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A@@2 |zero#0@@12| |add#0@@12| (Lit |s#0@@221|)) (and (and (and ($IsGoodHeap $Heap@@76) ($IsBox |zero#0@@12| Multisets._default.FoldSimple$A@@2)) ($Is |add#0@@12| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@2 Multisets._default.FoldSimple$A@@2 Multisets._default.FoldSimple$A@@2))) ($Is |s#0@@221| (TMultiSet Multisets._default.FoldSimple$A@@2))))) (and (|Multisets.__default.Fold#canCall| Multisets._default.FoldSimple$A@@2 $Heap@@76 |zero#0@@12| |add#0@@12| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.FoldSimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) (Lit |s#0@@221|)) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@2 |zero#0@@12| |add#0@@12| (Lit |s#0@@221|)) (Multisets.__default.Fold Multisets._default.FoldSimple$A@@2 StartFuel_Multisets._default.Fold $Heap@@76 |zero#0@@12| |add#0@@12| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.FoldSimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) (Lit |s#0@@221|))))) :qid |unknown.0:0| :weight 3 :skolemid |3405| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@2 |zero#0@@12| |add#0@@12| (Lit |s#0@@221|)) ($IsGoodHeap $Heap@@76)) ))))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A@@3 T@U) ($Heap@@77 T@U) (|zero#0@@13| T@U) (|add#0@@13| T@U) (|s#0@@222| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@3) TyType) (= (type $Heap@@77) (MapType0Type refType MapType1Type))) (= (type |zero#0@@13|) BoxType)) (= (type |add#0@@13|) HandleTypeType)) (= (type |s#0@@222|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A@@3 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit |s#0@@222|)) (and (and (and ($IsGoodHeap $Heap@@77) ($IsBox |zero#0@@13| Multisets._default.FoldSimple$A@@3)) ($Is |add#0@@13| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@3 Multisets._default.FoldSimple$A@@3 Multisets._default.FoldSimple$A@@3))) ($Is |s#0@@222| (TMultiSet Multisets._default.FoldSimple$A@@3))))) (and (|Multisets.__default.Fold#canCall| Multisets._default.FoldSimple$A@@3 $Heap@@77 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.FoldSimple$A@@3) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) (Lit |s#0@@222|)) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@3 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit |s#0@@222|)) (Multisets.__default.Fold Multisets._default.FoldSimple$A@@3 StartFuel_Multisets._default.Fold $Heap@@77 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.FoldSimple$A@@3) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) (Lit |s#0@@222|))))) :qid |unknown.0:0| :weight 3 :skolemid |3406| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@3 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit |s#0@@222|)) ($IsGoodHeap $Heap@@77)) ))))
(assert (forall ((Multisets._default.IsIdentity$A T@U) ($ly@@536 T@U) ($Heap@@78 T@U) (|add#0@@14| T@U) (|inv#0@@9| T@U) (|zero#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsIdentity$A) TyType) (= (type $ly@@536) LayerTypeType)) (= (type $Heap@@78) (MapType0Type refType MapType1Type))) (= (type |add#0@@14|) HandleTypeType)) (= (type |inv#0@@9|) HandleTypeType)) (= (type |zero#0@@14|) BoxType)) (and (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A ($LS $ly@@536) $Heap@@78 |add#0@@14| |inv#0@@9| |zero#0@@14|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A $ly@@536 $Heap@@78 |add#0@@14| |inv#0@@9| |zero#0@@14|)) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A $ly@@536 $Heap@@78 |add#0@@14| |inv#0@@9| |zero#0@@14|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A ($LS $ly@@536) $Heap@@78 |add#0@@14| |inv#0@@9| |zero#0@@14|)))) :qid |unknown.0:0| :skolemid |3407| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A ($LS $ly@@536) $Heap@@78 |add#0@@14| |inv#0@@9| |zero#0@@14|)) )))
(assert (forall ((Multisets._default.IsIdentity$A@@0 T@U) ($ly@@537 T@U) ($Heap@@79 T@U) (|add#0@@15| T@U) (|inv#0@@10| T@U) (|zero#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@0) TyType) (= (type $ly@@537) LayerTypeType)) (= (type $Heap@@79) (MapType0Type refType MapType1Type))) (= (type |add#0@@15|) HandleTypeType)) (= (type |inv#0@@10|) HandleTypeType)) (= (type |zero#0@@15|) BoxType)) (and (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $ly@@537 $Heap@@79 |add#0@@15| |inv#0@@10| |zero#0@@15|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $LZ $Heap@@79 |add#0@@15| |inv#0@@10| |zero#0@@15|)) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $LZ $Heap@@79 |add#0@@15| |inv#0@@10| |zero#0@@15|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $ly@@537 $Heap@@79 |add#0@@15| |inv#0@@10| |zero#0@@15|)))) :qid |unknown.0:0| :skolemid |3408| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 (AsFuelBottom $ly@@537) $Heap@@79 |add#0@@15| |inv#0@@10| |zero#0@@15|)) )))
(assert (forall ((Multisets._default.IsIdentity$A@@1 T@U) ($ly@@538 T@U) ($h0@@7 T@U) ($h1@@7 T@U) (|add#0@@16| T@U) (|inv#0@@11| T@U) (|zero#0@@16| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@1) TyType) (= (type $ly@@538) LayerTypeType)) (= (type $h0@@7) (MapType0Type refType MapType1Type))) (= (type $h1@@7) (MapType0Type refType MapType1Type))) (= (type |add#0@@16|) HandleTypeType)) (= (type |inv#0@@11|) HandleTypeType)) (= (type |zero#0@@16|) BoxType)) (and (and (and ($IsGoodHeap $h0@@7) ($IsGoodHeap $h1@@7)) (or (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentity$A@@1 $h0@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|) (and (and ($Is |add#0@@16| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1)) ($Is |inv#0@@11| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@1 TBool))) ($IsBox |zero#0@@16| Multisets._default.IsIdentity$A@@1)))) (and ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7)))) (forall (($o@@55 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (= (type $o@@55) refType) (= (type $f@@7) (FieldType alpha@@14))) (and (not (= $o@@55 null)) (exists ((|x#0@@16| T@U) (|y#0@@21| T@U) (|o#0@@4| T@U) ) (!  (and (and (and (= (type |x#0@@16|) BoxType) (= (type |y#0@@21|) BoxType)) (= (type |o#0@@4|) refType)) (and (and (and (and ($IsBox |x#0@@16| Multisets._default.IsIdentity$A@@1) ($IsBox |y#0@@21| Multisets._default.IsIdentity$A@@1)) ($Is |o#0@@4| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@1 TBool $h0@@7 |inv#0@@11| |x#0@@16|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@1 TBool $h0@@7 |inv#0@@11| |y#0@@21|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 $h0@@7 |add#0@@16| |x#0@@16| |y#0@@21|) ($Box |o#0@@4|))))) (= ($Box $o@@55) ($Box |o#0@@4|)))) :qid |Multiset.184:15| :skolemid |3409| :pattern ( (MapType0Select (Reads2 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 $h0@@7 |add#0@@16| |x#0@@16| |y#0@@21|) ($Box |o#0@@4|))) )))) (= (MapType1Select (MapType0Select $h0@@7 $o@@55) $f@@7) (MapType1Select (MapType0Select $h1@@7 $o@@55) $f@@7)))) :qid |unknown.0:0| :skolemid |3410| :no-pattern (type $o@@55) :no-pattern (type $f@@7) :no-pattern (U_2_int $o@@55) :no-pattern (U_2_bool $o@@55) :no-pattern (U_2_int $f@@7) :no-pattern (U_2_bool $f@@7) ))) (and (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@538 $h0@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@538 $h1@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|)) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@538 $h1@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@538 $h0@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|)))) :qid |unknown.0:0| :skolemid |3411| :pattern ( ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@538 $h1@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|)) )))
(assert  (=> true (forall ((Multisets._default.IsIdentity$A@@2 T@U) ($ly@@539 T@U) ($Heap@@80 T@U) (|add#0@@17| T@U) (|inv#0@@12| T@U) (|zero#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@2) TyType) (= (type $ly@@539) LayerTypeType)) (= (type $Heap@@80) (MapType0Type refType MapType1Type))) (= (type |add#0@@17|) HandleTypeType)) (= (type |inv#0@@12|) HandleTypeType)) (= (type |zero#0@@17|) BoxType)) (or (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentity$A@@2 $Heap@@80 |add#0@@17| |inv#0@@12| |zero#0@@17|) (and (and (and ($IsGoodHeap $Heap@@80) ($Is |add#0@@17| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@2 Multisets._default.IsIdentity$A@@2 Multisets._default.IsIdentity$A@@2))) ($Is |inv#0@@12| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@2 TBool))) ($IsBox |zero#0@@17| Multisets._default.IsIdentity$A@@2)))) true) :qid |unknown.0:0| :skolemid |3412| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@2 $ly@@539 $Heap@@80 |add#0@@17| |inv#0@@12| |zero#0@@17|)) ))))
(assert (forall ((Multisets._default.IsIdentity$A@@3 T@U) ($ly@@540 T@U) ($Heap@@81 T@U) (|add#0@@18| T@U) (|inv#0@@13| T@U) (|zero#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@3) TyType) (= (type $ly@@540) LayerTypeType)) (= (type $Heap@@81) (MapType0Type refType MapType1Type))) (= (type |add#0@@18|) HandleTypeType)) (= (type |inv#0@@13|) HandleTypeType)) (= (type |zero#0@@18|) BoxType)) (and (and (and ($IsGoodHeap $Heap@@81) ($Is |add#0@@18| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@3 Multisets._default.IsIdentity$A@@3 Multisets._default.IsIdentity$A@@3))) ($Is |inv#0@@13| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@3 TBool))) ($IsBox |zero#0@@18| Multisets._default.IsIdentity$A@@3))) (and (=> (|Multisets.__default.IsIdentity#requires| Multisets._default.IsIdentity$A@@3 $ly@@540 $Heap@@81 |add#0@@18| |inv#0@@13| |zero#0@@18|) true) (=> true (|Multisets.__default.IsIdentity#requires| Multisets._default.IsIdentity$A@@3 $ly@@540 $Heap@@81 |add#0@@18| |inv#0@@13| |zero#0@@18|)))) :qid |unknown.0:0| :skolemid |3413| :pattern ( (|Multisets.__default.IsIdentity#requires| Multisets._default.IsIdentity$A@@3 $ly@@540 $Heap@@81 |add#0@@18| |inv#0@@13| |zero#0@@18|)) )))
(assert  (=> true (forall ((Multisets._default.IsIdentity$A@@4 T@U) ($ly@@541 T@U) ($Heap@@82 T@U) (|add#0@@19| T@U) (|inv#0@@14| T@U) (|zero#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@4) TyType) (= (type $ly@@541) LayerTypeType)) (= (type $Heap@@82) (MapType0Type refType MapType1Type))) (= (type |add#0@@19|) HandleTypeType)) (= (type |inv#0@@14|) HandleTypeType)) (= (type |zero#0@@19|) BoxType)) (or (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |inv#0@@14| |zero#0@@19|) (and (and (and ($IsGoodHeap $Heap@@82) ($Is |add#0@@19| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4))) ($Is |inv#0@@14| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@4 TBool))) ($IsBox |zero#0@@19| Multisets._default.IsIdentity$A@@4)))) (and (|Multisets.__default.Foldable#canCall| Multisets._default.IsIdentity$A@@4 $Heap@@82 |zero#0@@19| |add#0@@19| |inv#0@@14|) (and (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@4 ($LS $ly@@541) $Heap@@82 |add#0@@19| |inv#0@@14| |zero#0@@19|) (and (Multisets.__default.Foldable Multisets._default.IsIdentity$A@@4 $Heap@@82 |zero#0@@19| |add#0@@19| |inv#0@@14|) (forall ((|a#0@@156| T@U) ) (!  (=> (= (type |a#0@@156|) BoxType) (=> (and ($IsBox |a#0@@156| Multisets._default.IsIdentity$A@@4) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@82 |inv#0@@14| |a#0@@156|)))) (and (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |zero#0@@19| |a#0@@156|) (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |a#0@@156| |zero#0@@19|)) (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |a#0@@156| |zero#0@@19|) |a#0@@156|)))) :qid |Multiset.187:15| :skolemid |3414| :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |a#0@@156| |zero#0@@19|)) :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |zero#0@@19| |a#0@@156|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@82 |inv#0@@14| |a#0@@156|))) )))) (=> (and (Multisets.__default.Foldable Multisets._default.IsIdentity$A@@4 $Heap@@82 |zero#0@@19| |add#0@@19| |inv#0@@14|) (forall ((|a#0@@157| T@U) ) (!  (=> (= (type |a#0@@157|) BoxType) (=> (and ($IsBox |a#0@@157| Multisets._default.IsIdentity$A@@4) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@82 |inv#0@@14| |a#0@@157|)))) (and (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |zero#0@@19| |a#0@@157|) (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |a#0@@157| |zero#0@@19|)) (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |a#0@@157| |zero#0@@19|) |a#0@@157|)))) :qid |Multiset.187:15| :skolemid |3414| :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |a#0@@157| |zero#0@@19|)) :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@82 |add#0@@19| |zero#0@@19| |a#0@@157|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@82 |inv#0@@14| |a#0@@157|))) ))) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@4 ($LS $ly@@541) $Heap@@82 |add#0@@19| |inv#0@@14| |zero#0@@19|))))) :qid |unknown.0:0| :skolemid |3415| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@4 ($LS $ly@@541) $Heap@@82 |add#0@@19| |inv#0@@14| |zero#0@@19|)) ))))
(assert (forall ((Multisets._default.IsCommutative$A T@U) ($ly@@542 T@U) ($Heap@@83 T@U) (|add#0@@20| T@U) (|inv#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsCommutative$A) TyType) (= (type $ly@@542) LayerTypeType)) (= (type $Heap@@83) (MapType0Type refType MapType1Type))) (= (type |add#0@@20|) HandleTypeType)) (= (type |inv#0@@15|) HandleTypeType)) (and (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A ($LS $ly@@542) $Heap@@83 |add#0@@20| |inv#0@@15|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A $ly@@542 $Heap@@83 |add#0@@20| |inv#0@@15|)) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A $ly@@542 $Heap@@83 |add#0@@20| |inv#0@@15|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A ($LS $ly@@542) $Heap@@83 |add#0@@20| |inv#0@@15|)))) :qid |unknown.0:0| :skolemid |3416| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A ($LS $ly@@542) $Heap@@83 |add#0@@20| |inv#0@@15|)) )))
(assert (forall ((Multisets._default.IsCommutative$A@@0 T@U) ($ly@@543 T@U) ($Heap@@84 T@U) (|add#0@@21| T@U) (|inv#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsCommutative$A@@0) TyType) (= (type $ly@@543) LayerTypeType)) (= (type $Heap@@84) (MapType0Type refType MapType1Type))) (= (type |add#0@@21|) HandleTypeType)) (= (type |inv#0@@16|) HandleTypeType)) (and (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $ly@@543 $Heap@@84 |add#0@@21| |inv#0@@16|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $LZ $Heap@@84 |add#0@@21| |inv#0@@16|)) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $LZ $Heap@@84 |add#0@@21| |inv#0@@16|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $ly@@543 $Heap@@84 |add#0@@21| |inv#0@@16|)))) :qid |unknown.0:0| :skolemid |3417| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 (AsFuelBottom $ly@@543) $Heap@@84 |add#0@@21| |inv#0@@16|)) )))
(assert (forall ((Multisets._default.IsCommutative$A@@1 T@U) ($ly@@544 T@U) ($h0@@8 T@U) ($h1@@8 T@U) (|add#0@@22| T@U) (|inv#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@1) TyType) (= (type $ly@@544) LayerTypeType)) (= (type $h0@@8) (MapType0Type refType MapType1Type))) (= (type $h1@@8) (MapType0Type refType MapType1Type))) (= (type |add#0@@22|) HandleTypeType)) (= (type |inv#0@@17|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@8) ($IsGoodHeap $h1@@8)) (or (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutative$A@@1 $h0@@8 |add#0@@22| |inv#0@@17|) (and ($Is |add#0@@22| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1)) ($Is |inv#0@@17| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@1 TBool))))) (and ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8)))) (forall (($o@@56 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (= (type $o@@56) refType) (= (type $f@@8) (FieldType alpha@@15))) (and (not (= $o@@56 null)) (exists ((|x#0@@17| T@U) (|y#0@@22| T@U) (|o#0@@5| T@U) ) (!  (and (and (and (= (type |x#0@@17|) BoxType) (= (type |y#0@@22|) BoxType)) (= (type |o#0@@5|) refType)) (and (and (and (and ($IsBox |x#0@@17| Multisets._default.IsCommutative$A@@1) ($IsBox |y#0@@22| Multisets._default.IsCommutative$A@@1)) ($Is |o#0@@5| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@1 TBool $h0@@8 |inv#0@@17| |x#0@@17|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@1 TBool $h0@@8 |inv#0@@17| |y#0@@22|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 $h0@@8 |add#0@@22| |x#0@@17| |y#0@@22|) ($Box |o#0@@5|))))) (= ($Box $o@@56) ($Box |o#0@@5|)))) :qid |Multiset.192:15| :skolemid |3418| :pattern ( (MapType0Select (Reads2 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 $h0@@8 |add#0@@22| |x#0@@17| |y#0@@22|) ($Box |o#0@@5|))) )))) (= (MapType1Select (MapType0Select $h0@@8 $o@@56) $f@@8) (MapType1Select (MapType0Select $h1@@8 $o@@56) $f@@8)))) :qid |unknown.0:0| :skolemid |3419| :no-pattern (type $o@@56) :no-pattern (type $f@@8) :no-pattern (U_2_int $o@@56) :no-pattern (U_2_bool $o@@56) :no-pattern (U_2_int $f@@8) :no-pattern (U_2_bool $f@@8) ))) (and (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@544 $h0@@8 |add#0@@22| |inv#0@@17|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@544 $h1@@8 |add#0@@22| |inv#0@@17|)) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@544 $h1@@8 |add#0@@22| |inv#0@@17|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@544 $h0@@8 |add#0@@22| |inv#0@@17|)))) :qid |unknown.0:0| :skolemid |3420| :pattern ( ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@544 $h1@@8 |add#0@@22| |inv#0@@17|)) )))
(assert  (=> true (forall ((Multisets._default.IsCommutative$A@@2 T@U) ($ly@@545 T@U) ($Heap@@85 T@U) (|add#0@@23| T@U) (|inv#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@2) TyType) (= (type $ly@@545) LayerTypeType)) (= (type $Heap@@85) (MapType0Type refType MapType1Type))) (= (type |add#0@@23|) HandleTypeType)) (= (type |inv#0@@18|) HandleTypeType)) (or (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutative$A@@2 $Heap@@85 |add#0@@23| |inv#0@@18|) (and (and (and ($IsGoodHeap $Heap@@85) ($Is |add#0@@23| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2))) ($Is |inv#0@@18| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@2 TBool))) (forall ((|x#1@@16| T@U) (|y#1@@14| T@U) ) (!  (=> (and (= (type |x#1@@16|) BoxType) (= (type |y#1@@14|) BoxType)) (=> (and (and ($IsBox |x#1@@16| Multisets._default.IsCommutative$A@@2) ($IsBox |y#1@@14| Multisets._default.IsCommutative$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@85 |inv#0@@18| |x#1@@16|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@85 |inv#0@@18| |y#1@@14|))))) (Requires2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 $Heap@@85 |add#0@@23| |x#1@@16| |y#1@@14|))) :qid |Multiset.191:21| :skolemid |3421| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 $Heap@@85 |add#0@@23| |x#1@@16| |y#1@@14|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@85 |inv#0@@18| |y#1@@14|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@85 |inv#0@@18| |x#1@@16|))) ))))) true) :qid |unknown.0:0| :skolemid |3422| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@2 $ly@@545 $Heap@@85 |add#0@@23| |inv#0@@18|)) ))))
(assert (forall ((Multisets._default.IsCommutative$A@@3 T@U) ($ly@@546 T@U) ($Heap@@86 T@U) (|add#0@@24| T@U) (|inv#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@3) TyType) (= (type $ly@@546) LayerTypeType)) (= (type $Heap@@86) (MapType0Type refType MapType1Type))) (= (type |add#0@@24|) HandleTypeType)) (= (type |inv#0@@19|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@86) ($Is |add#0@@24| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3))) ($Is |inv#0@@19| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@3 TBool)))) (and (=> (|Multisets.__default.IsCommutative#requires| Multisets._default.IsCommutative$A@@3 $ly@@546 $Heap@@86 |add#0@@24| |inv#0@@19|) (forall ((|x#2@@7| T@U) (|y#2@@1| T@U) ) (!  (=> (and (= (type |x#2@@7|) BoxType) (= (type |y#2@@1|) BoxType)) (=> (and (and ($IsBox |x#2@@7| Multisets._default.IsCommutative$A@@3) ($IsBox |y#2@@1| Multisets._default.IsCommutative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@86 |inv#0@@19| |x#2@@7|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@86 |inv#0@@19| |y#2@@1|))))) (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@86 |add#0@@24| |x#2@@7| |y#2@@1|))) :qid |Multiset.191:21| :skolemid |3423| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@86 |add#0@@24| |x#2@@7| |y#2@@1|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@86 |inv#0@@19| |y#2@@1|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@86 |inv#0@@19| |x#2@@7|))) ))) (=> (forall ((|x#2@@8| T@U) (|y#2@@2| T@U) ) (!  (=> (and (= (type |x#2@@8|) BoxType) (= (type |y#2@@2|) BoxType)) (=> (and (and ($IsBox |x#2@@8| Multisets._default.IsCommutative$A@@3) ($IsBox |y#2@@2| Multisets._default.IsCommutative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@86 |inv#0@@19| |x#2@@8|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@86 |inv#0@@19| |y#2@@2|))))) (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@86 |add#0@@24| |x#2@@8| |y#2@@2|))) :qid |Multiset.191:21| :skolemid |3423| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@86 |add#0@@24| |x#2@@8| |y#2@@2|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@86 |inv#0@@19| |y#2@@2|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@86 |inv#0@@19| |x#2@@8|))) )) (|Multisets.__default.IsCommutative#requires| Multisets._default.IsCommutative$A@@3 $ly@@546 $Heap@@86 |add#0@@24| |inv#0@@19|)))) :qid |unknown.0:0| :skolemid |3424| :pattern ( (|Multisets.__default.IsCommutative#requires| Multisets._default.IsCommutative$A@@3 $ly@@546 $Heap@@86 |add#0@@24| |inv#0@@19|)) )))
(assert  (=> true (forall ((Multisets._default.IsCommutative$A@@4 T@U) ($ly@@547 T@U) ($Heap@@87 T@U) (|add#0@@25| T@U) (|inv#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@4) TyType) (= (type $ly@@547) LayerTypeType)) (= (type $Heap@@87) (MapType0Type refType MapType1Type))) (= (type |add#0@@25|) HandleTypeType)) (= (type |inv#0@@20|) HandleTypeType)) (or (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |inv#0@@20|) (and (and (and ($IsGoodHeap $Heap@@87) ($Is |add#0@@25| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4))) ($Is |inv#0@@20| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@4 TBool))) (forall ((|x#2@@9| T@U) (|y#2@@3| T@U) ) (!  (=> (and (= (type |x#2@@9|) BoxType) (= (type |y#2@@3|) BoxType)) (=> (and (and ($IsBox |x#2@@9| Multisets._default.IsCommutative$A@@4) ($IsBox |y#2@@3| Multisets._default.IsCommutative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |x#2@@9|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |y#2@@3|))))) (Requires2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |x#2@@9| |y#2@@3|))) :qid |Multiset.191:21| :skolemid |3423| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |x#2@@9| |y#2@@3|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |y#2@@3|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |x#2@@9|))) ))))) (and (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@4 ($LS $ly@@547) $Heap@@87 |add#0@@25| |inv#0@@20|) (forall ((|a#0@@158| T@U) (|b#0@@121| T@U) ) (!  (=> (and (= (type |a#0@@158|) BoxType) (= (type |b#0@@121|) BoxType)) (=> (and (and ($IsBox |a#0@@158| Multisets._default.IsCommutative$A@@4) ($IsBox |b#0@@121| Multisets._default.IsCommutative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |a#0@@158|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |b#0@@121|))))) (= (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |a#0@@158| |b#0@@121|) (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |b#0@@121| |a#0@@158|)))) :qid |Multiset.194:12| :skolemid |3425| :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |b#0@@121| |a#0@@158|)) :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |a#0@@158| |b#0@@121|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |b#0@@121|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |a#0@@158|))) ))) (=> (forall ((|a#0@@159| T@U) (|b#0@@122| T@U) ) (!  (=> (and (= (type |a#0@@159|) BoxType) (= (type |b#0@@122|) BoxType)) (=> (and (and ($IsBox |a#0@@159| Multisets._default.IsCommutative$A@@4) ($IsBox |b#0@@122| Multisets._default.IsCommutative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |a#0@@159|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |b#0@@122|))))) (= (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |a#0@@159| |b#0@@122|) (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |b#0@@122| |a#0@@159|)))) :qid |Multiset.194:12| :skolemid |3425| :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |b#0@@122| |a#0@@159|)) :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@87 |add#0@@25| |a#0@@159| |b#0@@122|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |b#0@@122|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@87 |inv#0@@20| |a#0@@159|))) )) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@4 ($LS $ly@@547) $Heap@@87 |add#0@@25| |inv#0@@20|)))) :qid |unknown.0:0| :skolemid |3426| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@4 ($LS $ly@@547) $Heap@@87 |add#0@@25| |inv#0@@20|)) ))))
(assert (forall ((Multisets._default.IsAssociative$A T@U) ($ly@@548 T@U) ($Heap@@88 T@U) (|add#0@@26| T@U) (|inv#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsAssociative$A) TyType) (= (type $ly@@548) LayerTypeType)) (= (type $Heap@@88) (MapType0Type refType MapType1Type))) (= (type |add#0@@26|) HandleTypeType)) (= (type |inv#0@@21|) HandleTypeType)) (and (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A ($LS $ly@@548) $Heap@@88 |add#0@@26| |inv#0@@21|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A $ly@@548 $Heap@@88 |add#0@@26| |inv#0@@21|)) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A $ly@@548 $Heap@@88 |add#0@@26| |inv#0@@21|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A ($LS $ly@@548) $Heap@@88 |add#0@@26| |inv#0@@21|)))) :qid |unknown.0:0| :skolemid |3427| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A ($LS $ly@@548) $Heap@@88 |add#0@@26| |inv#0@@21|)) )))
(assert (forall ((Multisets._default.IsAssociative$A@@0 T@U) ($ly@@549 T@U) ($Heap@@89 T@U) (|add#0@@27| T@U) (|inv#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsAssociative$A@@0) TyType) (= (type $ly@@549) LayerTypeType)) (= (type $Heap@@89) (MapType0Type refType MapType1Type))) (= (type |add#0@@27|) HandleTypeType)) (= (type |inv#0@@22|) HandleTypeType)) (and (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $ly@@549 $Heap@@89 |add#0@@27| |inv#0@@22|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $LZ $Heap@@89 |add#0@@27| |inv#0@@22|)) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $LZ $Heap@@89 |add#0@@27| |inv#0@@22|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $ly@@549 $Heap@@89 |add#0@@27| |inv#0@@22|)))) :qid |unknown.0:0| :skolemid |3428| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 (AsFuelBottom $ly@@549) $Heap@@89 |add#0@@27| |inv#0@@22|)) )))
(assert (forall ((Multisets._default.IsAssociative$A@@1 T@U) ($ly@@550 T@U) ($h0@@9 T@U) ($h1@@9 T@U) (|add#0@@28| T@U) (|inv#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@1) TyType) (= (type $ly@@550) LayerTypeType)) (= (type $h0@@9) (MapType0Type refType MapType1Type))) (= (type $h1@@9) (MapType0Type refType MapType1Type))) (= (type |add#0@@28|) HandleTypeType)) (= (type |inv#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@9) ($IsGoodHeap $h1@@9)) (or (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociative$A@@1 $h0@@9 |add#0@@28| |inv#0@@23|) (and ($Is |add#0@@28| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1)) ($Is |inv#0@@23| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@1 TBool))))) (and ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9)))) (forall (($o@@57 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (= (type $o@@57) refType) (= (type $f@@9) (FieldType alpha@@16))) (and (not (= $o@@57 null)) (exists ((|x#0@@18| T@U) (|y#0@@23| T@U) (|o#0@@6| T@U) ) (!  (and (and (and (= (type |x#0@@18|) BoxType) (= (type |y#0@@23|) BoxType)) (= (type |o#0@@6|) refType)) (and (and (and (and ($IsBox |x#0@@18| Multisets._default.IsAssociative$A@@1) ($IsBox |y#0@@23| Multisets._default.IsAssociative$A@@1)) ($Is |o#0@@6| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@1 TBool $h0@@9 |inv#0@@23| |x#0@@18|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@1 TBool $h0@@9 |inv#0@@23| |y#0@@23|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 $h0@@9 |add#0@@28| |x#0@@18| |y#0@@23|) ($Box |o#0@@6|))))) (= ($Box $o@@57) ($Box |o#0@@6|)))) :qid |Multiset.199:15| :skolemid |3429| :pattern ( (MapType0Select (Reads2 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 $h0@@9 |add#0@@28| |x#0@@18| |y#0@@23|) ($Box |o#0@@6|))) )))) (= (MapType1Select (MapType0Select $h0@@9 $o@@57) $f@@9) (MapType1Select (MapType0Select $h1@@9 $o@@57) $f@@9)))) :qid |unknown.0:0| :skolemid |3430| :no-pattern (type $o@@57) :no-pattern (type $f@@9) :no-pattern (U_2_int $o@@57) :no-pattern (U_2_bool $o@@57) :no-pattern (U_2_int $f@@9) :no-pattern (U_2_bool $f@@9) ))) (and (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@550 $h0@@9 |add#0@@28| |inv#0@@23|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@550 $h1@@9 |add#0@@28| |inv#0@@23|)) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@550 $h1@@9 |add#0@@28| |inv#0@@23|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@550 $h0@@9 |add#0@@28| |inv#0@@23|)))) :qid |unknown.0:0| :skolemid |3431| :pattern ( ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@550 $h1@@9 |add#0@@28| |inv#0@@23|)) )))
(assert  (=> true (forall ((Multisets._default.IsAssociative$A@@2 T@U) ($ly@@551 T@U) ($Heap@@90 T@U) (|add#0@@29| T@U) (|inv#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@2) TyType) (= (type $ly@@551) LayerTypeType)) (= (type $Heap@@90) (MapType0Type refType MapType1Type))) (= (type |add#0@@29|) HandleTypeType)) (= (type |inv#0@@24|) HandleTypeType)) (or (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociative$A@@2 $Heap@@90 |add#0@@29| |inv#0@@24|) (and (and (and ($IsGoodHeap $Heap@@90) ($Is |add#0@@29| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2))) ($Is |inv#0@@24| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@2 TBool))) (and (forall ((|x#1@@17| T@U) (|y#1@@15| T@U) ) (!  (=> (and (= (type |x#1@@17|) BoxType) (= (type |y#1@@15|) BoxType)) (=> (and (and ($IsBox |x#1@@17| Multisets._default.IsAssociative$A@@2) ($IsBox |y#1@@15| Multisets._default.IsAssociative$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@90 |inv#0@@24| |x#1@@17|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@90 |inv#0@@24| |y#1@@15|))))) (Requires2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@90 |add#0@@29| |x#1@@17| |y#1@@15|))) :qid |Multiset.198:21| :skolemid |3432| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@90 |add#0@@29| |x#1@@17| |y#1@@15|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@90 |inv#0@@24| |y#1@@15|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@90 |inv#0@@24| |x#1@@17|))) )) (forall ((|x#2@@10| T@U) (|y#2@@4| T@U) ) (!  (=> (and (= (type |x#2@@10|) BoxType) (= (type |y#2@@4|) BoxType)) (=> (and (and ($IsBox |x#2@@10| Multisets._default.IsAssociative$A@@2) ($IsBox |y#2@@4| Multisets._default.IsAssociative$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@90 |inv#0@@24| |x#2@@10|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@90 |inv#0@@24| |y#2@@4|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@90 |inv#0@@24| (Apply2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@90 |add#0@@29| |x#2@@10| |y#2@@4|)))))) :qid |Multiset.198:21| :skolemid |3433| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@90 |add#0@@29| |x#2@@10| |y#2@@4|)) )))))) true) :qid |unknown.0:0| :skolemid |3434| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@2 $ly@@551 $Heap@@90 |add#0@@29| |inv#0@@24|)) ))))
(assert (forall ((Multisets._default.IsAssociative$A@@3 T@U) ($ly@@552 T@U) ($Heap@@91 T@U) (|add#0@@30| T@U) (|inv#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@3) TyType) (= (type $ly@@552) LayerTypeType)) (= (type $Heap@@91) (MapType0Type refType MapType1Type))) (= (type |add#0@@30|) HandleTypeType)) (= (type |inv#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@91) ($Is |add#0@@30| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3))) ($Is |inv#0@@25| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@3 TBool)))) (and (=> (|Multisets.__default.IsAssociative#requires| Multisets._default.IsAssociative$A@@3 $ly@@552 $Heap@@91 |add#0@@30| |inv#0@@25|) (and (forall ((|x#3@@1| T@U) (|y#3| T@U) ) (!  (=> (and (= (type |x#3@@1|) BoxType) (= (type |y#3|) BoxType)) (=> (and (and ($IsBox |x#3@@1| Multisets._default.IsAssociative$A@@3) ($IsBox |y#3| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |x#3@@1|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |y#3|))))) (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@91 |add#0@@30| |x#3@@1| |y#3|))) :qid |Multiset.198:21| :skolemid |3435| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@91 |add#0@@30| |x#3@@1| |y#3|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |y#3|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |x#3@@1|))) )) (forall ((|x#4| T@U) (|y#4| T@U) ) (!  (=> (and (= (type |x#4|) BoxType) (= (type |y#4|) BoxType)) (=> (and (and ($IsBox |x#4| Multisets._default.IsAssociative$A@@3) ($IsBox |y#4| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |x#4|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |y#4|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@91 |add#0@@30| |x#4| |y#4|)))))) :qid |Multiset.198:21| :skolemid |3436| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@91 |add#0@@30| |x#4| |y#4|)) )))) (=> (and (forall ((|x#3@@2| T@U) (|y#3@@0| T@U) ) (!  (=> (and (= (type |x#3@@2|) BoxType) (= (type |y#3@@0|) BoxType)) (=> (and (and ($IsBox |x#3@@2| Multisets._default.IsAssociative$A@@3) ($IsBox |y#3@@0| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |x#3@@2|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |y#3@@0|))))) (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@91 |add#0@@30| |x#3@@2| |y#3@@0|))) :qid |Multiset.198:21| :skolemid |3435| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@91 |add#0@@30| |x#3@@2| |y#3@@0|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |y#3@@0|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |x#3@@2|))) )) (forall ((|x#4@@0| T@U) (|y#4@@0| T@U) ) (!  (=> (and (= (type |x#4@@0|) BoxType) (= (type |y#4@@0|) BoxType)) (=> (and (and ($IsBox |x#4@@0| Multisets._default.IsAssociative$A@@3) ($IsBox |y#4@@0| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |x#4@@0|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| |y#4@@0|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@91 |inv#0@@25| (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@91 |add#0@@30| |x#4@@0| |y#4@@0|)))))) :qid |Multiset.198:21| :skolemid |3436| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@91 |add#0@@30| |x#4@@0| |y#4@@0|)) ))) (|Multisets.__default.IsAssociative#requires| Multisets._default.IsAssociative$A@@3 $ly@@552 $Heap@@91 |add#0@@30| |inv#0@@25|)))) :qid |unknown.0:0| :skolemid |3437| :pattern ( (|Multisets.__default.IsAssociative#requires| Multisets._default.IsAssociative$A@@3 $ly@@552 $Heap@@91 |add#0@@30| |inv#0@@25|)) )))
(assert  (=> true (forall ((Multisets._default.IsAssociative$A@@4 T@U) ($ly@@553 T@U) ($Heap@@92 T@U) (|add#0@@31| T@U) (|inv#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@4) TyType) (= (type $ly@@553) LayerTypeType)) (= (type $Heap@@92) (MapType0Type refType MapType1Type))) (= (type |add#0@@31|) HandleTypeType)) (= (type |inv#0@@26|) HandleTypeType)) (or (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |inv#0@@26|) (and (and (and ($IsGoodHeap $Heap@@92) ($Is |add#0@@31| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4))) ($Is |inv#0@@26| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@4 TBool))) (and (forall ((|x#3@@3| T@U) (|y#3@@1| T@U) ) (!  (=> (and (= (type |x#3@@3|) BoxType) (= (type |y#3@@1|) BoxType)) (=> (and (and ($IsBox |x#3@@3| Multisets._default.IsAssociative$A@@4) ($IsBox |y#3@@1| Multisets._default.IsAssociative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |x#3@@3|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |y#3@@1|))))) (Requires2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |x#3@@3| |y#3@@1|))) :qid |Multiset.198:21| :skolemid |3435| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |x#3@@3| |y#3@@1|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |y#3@@1|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |x#3@@3|))) )) (forall ((|x#4@@1| T@U) (|y#4@@1| T@U) ) (!  (=> (and (= (type |x#4@@1|) BoxType) (= (type |y#4@@1|) BoxType)) (=> (and (and ($IsBox |x#4@@1| Multisets._default.IsAssociative$A@@4) ($IsBox |y#4@@1| Multisets._default.IsAssociative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |x#4@@1|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |y#4@@1|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |x#4@@1| |y#4@@1|)))))) :qid |Multiset.198:21| :skolemid |3436| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |x#4@@1| |y#4@@1|)) )))))) (and (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@4 ($LS $ly@@553) $Heap@@92 |add#0@@31| |inv#0@@26|) (forall ((|a#0@@160| T@U) (|b#0@@123| T@U) (|c#0@@12| T@U) ) (!  (=> (and (and (= (type |a#0@@160|) BoxType) (= (type |b#0@@123|) BoxType)) (= (type |c#0@@12|) BoxType)) (=> (and (and (and ($IsBox |a#0@@160| Multisets._default.IsAssociative$A@@4) ($IsBox |b#0@@123| Multisets._default.IsAssociative$A@@4)) ($IsBox |c#0@@12| Multisets._default.IsAssociative$A@@4)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |a#0@@160|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |b#0@@123|)))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |c#0@@12|))))) (= (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |a#0@@160| |b#0@@123|) |c#0@@12|) (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |a#0@@160| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |b#0@@123| |c#0@@12|))))) :qid |Multiset.201:12| :skolemid |3438| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |a#0@@160| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |b#0@@123| |c#0@@12|))) :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |a#0@@160| |b#0@@123|) |c#0@@12|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |c#0@@12|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |b#0@@123|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |a#0@@160|))) ))) (=> (forall ((|a#0@@161| T@U) (|b#0@@124| T@U) (|c#0@@13| T@U) ) (!  (=> (and (and (= (type |a#0@@161|) BoxType) (= (type |b#0@@124|) BoxType)) (= (type |c#0@@13|) BoxType)) (=> (and (and (and ($IsBox |a#0@@161| Multisets._default.IsAssociative$A@@4) ($IsBox |b#0@@124| Multisets._default.IsAssociative$A@@4)) ($IsBox |c#0@@13| Multisets._default.IsAssociative$A@@4)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |a#0@@161|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |b#0@@124|)))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |c#0@@13|))))) (= (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |a#0@@161| |b#0@@124|) |c#0@@13|) (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |a#0@@161| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |b#0@@124| |c#0@@13|))))) :qid |Multiset.201:12| :skolemid |3438| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |a#0@@161| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |b#0@@124| |c#0@@13|))) :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@92 |add#0@@31| |a#0@@161| |b#0@@124|) |c#0@@13|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |c#0@@13|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |b#0@@124|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@92 |inv#0@@26| |a#0@@161|))) )) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@4 ($LS $ly@@553) $Heap@@92 |add#0@@31| |inv#0@@26|)))) :qid |unknown.0:0| :skolemid |3439| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@4 ($LS $ly@@553) $Heap@@92 |add#0@@31| |inv#0@@26|)) ))))
(assert  (=> true (forall ((Multisets._default.IsIdentitySimple$A T@U) (|add#0@@32| T@U) (|zero#0@@20| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsIdentitySimple$A) TyType) (= (type |add#0@@32|) HandleTypeType)) (= (type |zero#0@@20|) BoxType)) (or (|Multisets.__default.IsIdentitySimple#canCall| Multisets._default.IsIdentitySimple$A |add#0@@32| |zero#0@@20|) (and ($Is |add#0@@32| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A Multisets._default.IsIdentitySimple$A Multisets._default.IsIdentitySimple$A)) ($IsBox |zero#0@@20| Multisets._default.IsIdentitySimple$A)))) true) :qid |unknown.0:0| :skolemid |3440| :pattern ( (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A |add#0@@32| |zero#0@@20|)) ))))
(assert (forall ((Multisets._default.IsIdentitySimple$A@@0 T@U) ($Heap@@93 T@U) (|add#0@@33| T@U) (|zero#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsIdentitySimple$A@@0) TyType) (= (type $Heap@@93) (MapType0Type refType MapType1Type))) (= (type |add#0@@33|) HandleTypeType)) (= (type |zero#0@@21|) BoxType)) (and (and ($IsGoodHeap $Heap@@93) ($Is |add#0@@33| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A@@0 Multisets._default.IsIdentitySimple$A@@0 Multisets._default.IsIdentitySimple$A@@0))) ($IsBox |zero#0@@21| Multisets._default.IsIdentitySimple$A@@0))) (and (=> (|Multisets.__default.IsIdentitySimple#requires| Multisets._default.IsIdentitySimple$A@@0 |add#0@@33| |zero#0@@21|) true) (=> true (|Multisets.__default.IsIdentitySimple#requires| Multisets._default.IsIdentitySimple$A@@0 |add#0@@33| |zero#0@@21|)))) :qid |unknown.0:0| :skolemid |3441| :pattern ( (|Multisets.__default.IsIdentitySimple#requires| Multisets._default.IsIdentitySimple$A@@0 |add#0@@33| |zero#0@@21|) ($IsGoodHeap $Heap@@93)) )))
(assert (= (type StartFuel_Multisets._default.IsIdentity) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.IsIdentitySimple$A@@1 T@U) ($Heap@@94 T@U) (|add#0@@34| T@U) (|zero#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsIdentitySimple$A@@1) TyType) (= (type $Heap@@94) (MapType0Type refType MapType1Type))) (= (type |add#0@@34|) HandleTypeType)) (= (type |zero#0@@22|) BoxType)) (or (|Multisets.__default.IsIdentitySimple#canCall| Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|) (and (and ($IsGoodHeap $Heap@@94) ($Is |add#0@@34| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A@@1 Multisets._default.IsIdentitySimple$A@@1 Multisets._default.IsIdentitySimple$A@@1))) ($IsBox |zero#0@@22| Multisets._default.IsIdentitySimple$A@@1)))) (and (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentitySimple$A@@1 $Heap@@94 |add#0@@34| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsIdentitySimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) |zero#0@@22|) (and (=> (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|) (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@1 StartFuel_Multisets._default.IsIdentity $Heap@@94 |add#0@@34| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsIdentitySimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) |zero#0@@22|)) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@1 StartFuel_Multisets._default.IsIdentity $Heap@@94 |add#0@@34| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsIdentitySimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) |zero#0@@22|) (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|))))) :qid |unknown.0:0| :skolemid |3442| :pattern ( (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|) ($IsGoodHeap $Heap@@94)) ))))
(assert  (=> true (forall ((Multisets._default.IsIdentitySimple$A@@2 T@U) ($Heap@@95 T@U) (|add#0@@35| T@U) (|zero#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsIdentitySimple$A@@2) TyType) (= (type $Heap@@95) (MapType0Type refType MapType1Type))) (= (type |add#0@@35|) HandleTypeType)) (= (type |zero#0@@23|) BoxType)) (or (|Multisets.__default.IsIdentitySimple#canCall| Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)) (and (and ($IsGoodHeap $Heap@@95) ($Is |add#0@@35| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A@@2 Multisets._default.IsIdentitySimple$A@@2 Multisets._default.IsIdentitySimple$A@@2))) ($IsBox |zero#0@@23| Multisets._default.IsIdentitySimple$A@@2)))) (and (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentitySimple$A@@2 $Heap@@95 (Lit |add#0@@35|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsIdentitySimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) (Lit |zero#0@@23|)) (and (=> (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)) (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@2 StartFuel_Multisets._default.IsIdentity $Heap@@95 (Lit |add#0@@35|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsIdentitySimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) (Lit |zero#0@@23|))) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@2 StartFuel_Multisets._default.IsIdentity $Heap@@95 (Lit |add#0@@35|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsIdentitySimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))) (Lit |zero#0@@23|)) (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3443| :pattern ( (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)) ($IsGoodHeap $Heap@@95)) ))))
(assert  (=> true (forall ((Multisets._default.IsCommutativeSimple$A T@U) (|add#0@@36| T@U) ) (!  (=> (and (and (= (type Multisets._default.IsCommutativeSimple$A) TyType) (= (type |add#0@@36|) HandleTypeType)) (or (|Multisets.__default.IsCommutativeSimple#canCall| Multisets._default.IsCommutativeSimple$A |add#0@@36|) ($Is |add#0@@36| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A Multisets._default.IsCommutativeSimple$A Multisets._default.IsCommutativeSimple$A)))) true) :qid |unknown.0:0| :skolemid |3444| :pattern ( (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A |add#0@@36|)) ))))
(assert (forall ((Multisets._default.IsCommutativeSimple$A@@0 T@U) ($Heap@@96 T@U) (|add#0@@37| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsCommutativeSimple$A@@0) TyType) (= (type $Heap@@96) (MapType0Type refType MapType1Type))) (= (type |add#0@@37|) HandleTypeType)) (and ($IsGoodHeap $Heap@@96) ($Is |add#0@@37| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A@@0 Multisets._default.IsCommutativeSimple$A@@0 Multisets._default.IsCommutativeSimple$A@@0)))) (and (=> (|Multisets.__default.IsCommutativeSimple#requires| Multisets._default.IsCommutativeSimple$A@@0 |add#0@@37|) true) (=> true (|Multisets.__default.IsCommutativeSimple#requires| Multisets._default.IsCommutativeSimple$A@@0 |add#0@@37|)))) :qid |unknown.0:0| :skolemid |3445| :pattern ( (|Multisets.__default.IsCommutativeSimple#requires| Multisets._default.IsCommutativeSimple$A@@0 |add#0@@37|) ($IsGoodHeap $Heap@@96)) )))
(assert (= (type StartFuel_Multisets._default.IsCommutative) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.IsCommutativeSimple$A@@1 T@U) ($Heap@@97 T@U) (|add#0@@38| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsCommutativeSimple$A@@1) TyType) (= (type $Heap@@97) (MapType0Type refType MapType1Type))) (= (type |add#0@@38|) HandleTypeType)) (or (|Multisets.__default.IsCommutativeSimple#canCall| Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|) (and ($IsGoodHeap $Heap@@97) ($Is |add#0@@38| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A@@1 Multisets._default.IsCommutativeSimple$A@@1 Multisets._default.IsCommutativeSimple$A@@1))))) (and (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutativeSimple$A@@1 $Heap@@97 |add#0@@38| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsCommutativeSimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ)))) (and (=> (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|) (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@1 StartFuel_Multisets._default.IsCommutative $Heap@@97 |add#0@@38| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsCommutativeSimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))))) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@1 StartFuel_Multisets._default.IsCommutative $Heap@@97 |add#0@@38| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsCommutativeSimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ)))) (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|))))) :qid |unknown.0:0| :skolemid |3446| :pattern ( (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|) ($IsGoodHeap $Heap@@97)) ))))
(assert  (=> true (forall ((Multisets._default.IsCommutativeSimple$A@@2 T@U) ($Heap@@98 T@U) (|add#0@@39| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsCommutativeSimple$A@@2) TyType) (= (type $Heap@@98) (MapType0Type refType MapType1Type))) (= (type |add#0@@39|) HandleTypeType)) (or (|Multisets.__default.IsCommutativeSimple#canCall| Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)) (and ($IsGoodHeap $Heap@@98) ($Is |add#0@@39| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A@@2 Multisets._default.IsCommutativeSimple$A@@2 Multisets._default.IsCommutativeSimple$A@@2))))) (and (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutativeSimple$A@@2 $Heap@@98 (Lit |add#0@@39|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsCommutativeSimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ)))) (and (=> (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)) (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@2 StartFuel_Multisets._default.IsCommutative $Heap@@98 (Lit |add#0@@39|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsCommutativeSimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))))) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@2 StartFuel_Multisets._default.IsCommutative $Heap@@98 (Lit |add#0@@39|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsCommutativeSimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ)))) (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3447| :pattern ( (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)) ($IsGoodHeap $Heap@@98)) ))))
(assert  (=> true (forall ((Multisets._default.IsAssociativeSimple$A T@U) (|add#0@@40| T@U) ) (!  (=> (and (and (= (type Multisets._default.IsAssociativeSimple$A) TyType) (= (type |add#0@@40|) HandleTypeType)) (or (|Multisets.__default.IsAssociativeSimple#canCall| Multisets._default.IsAssociativeSimple$A |add#0@@40|) ($Is |add#0@@40| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A Multisets._default.IsAssociativeSimple$A Multisets._default.IsAssociativeSimple$A)))) true) :qid |unknown.0:0| :skolemid |3448| :pattern ( (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A |add#0@@40|)) ))))
(assert (forall ((Multisets._default.IsAssociativeSimple$A@@0 T@U) ($Heap@@99 T@U) (|add#0@@41| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsAssociativeSimple$A@@0) TyType) (= (type $Heap@@99) (MapType0Type refType MapType1Type))) (= (type |add#0@@41|) HandleTypeType)) (and ($IsGoodHeap $Heap@@99) ($Is |add#0@@41| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A@@0 Multisets._default.IsAssociativeSimple$A@@0 Multisets._default.IsAssociativeSimple$A@@0)))) (and (=> (|Multisets.__default.IsAssociativeSimple#requires| Multisets._default.IsAssociativeSimple$A@@0 |add#0@@41|) true) (=> true (|Multisets.__default.IsAssociativeSimple#requires| Multisets._default.IsAssociativeSimple$A@@0 |add#0@@41|)))) :qid |unknown.0:0| :skolemid |3449| :pattern ( (|Multisets.__default.IsAssociativeSimple#requires| Multisets._default.IsAssociativeSimple$A@@0 |add#0@@41|) ($IsGoodHeap $Heap@@99)) )))
(assert (= (type StartFuel_Multisets._default.IsAssociative) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.IsAssociativeSimple$A@@1 T@U) ($Heap@@100 T@U) (|add#0@@42| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsAssociativeSimple$A@@1) TyType) (= (type $Heap@@100) (MapType0Type refType MapType1Type))) (= (type |add#0@@42|) HandleTypeType)) (or (|Multisets.__default.IsAssociativeSimple#canCall| Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|) (and ($IsGoodHeap $Heap@@100) ($Is |add#0@@42| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A@@1 Multisets._default.IsAssociativeSimple$A@@1 Multisets._default.IsAssociativeSimple$A@@1))))) (and (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociativeSimple$A@@1 $Heap@@100 |add#0@@42| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsAssociativeSimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ)))) (and (=> (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|) (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@1 StartFuel_Multisets._default.IsAssociative $Heap@@100 |add#0@@42| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsAssociativeSimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))))) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@1 StartFuel_Multisets._default.IsAssociative $Heap@@100 |add#0@@42| (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsAssociativeSimple$A@@1) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ)))) (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|))))) :qid |unknown.0:0| :skolemid |3450| :pattern ( (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|) ($IsGoodHeap $Heap@@100)) ))))
(assert  (=> true (forall ((Multisets._default.IsAssociativeSimple$A@@2 T@U) ($Heap@@101 T@U) (|add#0@@43| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsAssociativeSimple$A@@2) TyType) (= (type $Heap@@101) (MapType0Type refType MapType1Type))) (= (type |add#0@@43|) HandleTypeType)) (or (|Multisets.__default.IsAssociativeSimple#canCall| Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)) (and ($IsGoodHeap $Heap@@101) ($Is |add#0@@43| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A@@2 Multisets._default.IsAssociativeSimple$A@@2 Multisets._default.IsAssociativeSimple$A@@2))))) (and (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociativeSimple$A@@2 $Heap@@101 (Lit |add#0@@43|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsAssociativeSimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ)))) (and (=> (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)) (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@2 StartFuel_Multisets._default.IsAssociative $Heap@@101 (Lit |add#0@@43|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsAssociativeSimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))))) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@2 StartFuel_Multisets._default.IsAssociative $Heap@@101 (Lit |add#0@@43|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#148| ($Box (Lit (bool_2_U true)))) (|lambda#149| Multisets._default.IsAssociativeSimple$A@@2) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ)))) (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3451| :pattern ( (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)) ($IsGoodHeap $Heap@@101)) ))))
(assert  (=> true (forall ((|x#0@@19| Int) (|y#0@@24| Int) ) (!  (=> (or (|Multisets.__default.AddNat#canCall| |x#0@@19| |y#0@@24|) (and (<= (LitInt 0) |x#0@@19|) (<= (LitInt 0) |y#0@@24|))) (<= (LitInt 0) (Multisets.__default.AddNat |x#0@@19| |y#0@@24|))) :qid |Multiset.360:19| :skolemid |3452| :pattern ( (Multisets.__default.AddNat |x#0@@19| |y#0@@24|)) ))))
(assert (forall ((|x#0@@20| Int) (|y#0@@25| Int) ) (!  (=> (and (<= (LitInt 0) |x#0@@20|) (<= (LitInt 0) |y#0@@25|)) (and (=> (|Multisets.__default.AddNat#requires| |x#0@@20| |y#0@@25|) true) (=> true (|Multisets.__default.AddNat#requires| |x#0@@20| |y#0@@25|)))) :qid |Multiset.360:19| :skolemid |3453| :pattern ( (|Multisets.__default.AddNat#requires| |x#0@@20| |y#0@@25|)) )))
(assert  (=> true (forall ((|x#0@@21| Int) (|y#0@@26| Int) ) (!  (=> (or (|Multisets.__default.AddNat#canCall| |x#0@@21| |y#0@@26|) (and (<= (LitInt 0) |x#0@@21|) (<= (LitInt 0) |y#0@@26|))) (= (Multisets.__default.AddNat |x#0@@21| |y#0@@26|) (+ |x#0@@21| |y#0@@26|))) :qid |Multiset.360:19| :skolemid |3454| :pattern ( (Multisets.__default.AddNat |x#0@@21| |y#0@@26|)) ))))
(assert  (=> true (forall ((|x#0@@22| Int) (|y#0@@27| Int) ) (!  (=> (or (|Multisets.__default.AddNat#canCall| (LitInt |x#0@@22|) (LitInt |y#0@@27|)) (and (<= (LitInt 0) |x#0@@22|) (<= (LitInt 0) |y#0@@27|))) (= (Multisets.__default.AddNat (LitInt |x#0@@22|) (LitInt |y#0@@27|)) (LitInt (+ |x#0@@22| |y#0@@27|)))) :qid |Multiset.360:19| :weight 3 :skolemid |3455| :pattern ( (Multisets.__default.AddNat (LitInt |x#0@@22|) (LitInt |y#0@@27|))) ))))
(assert (forall ((arg0@@497 T@U) (arg1@@268 T@U) (arg2@@183 T@U) ) (! (= (type (Multisets.__default.ValueMultisetFn arg0@@497 arg1@@268 arg2@@183)) HandleTypeType) :qid |funType:Multisets.__default.ValueMultisetFn| :pattern ( (Multisets.__default.ValueMultisetFn arg0@@497 arg1@@268 arg2@@183)) )))
(assert  (=> true (forall ((Multisets._default.ValueMultisetFn$A T@U) (Multisets._default.ValueMultisetFn$B T@U) (|m#0@@117| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A) TyType) (= (type Multisets._default.ValueMultisetFn$B) TyType)) (= (type |m#0@@117|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B |m#0@@117|) ($Is |m#0@@117| (TMap Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B)))) ($Is (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B |m#0@@117|) (Tclass._System.___hFunc1 Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B))) :qid |unknown.0:0| :skolemid |3456| :pattern ( (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B |m#0@@117|)) ))))
(assert (forall ((Multisets._default.ValueMultisetFn$A@@0 T@U) (Multisets._default.ValueMultisetFn$B@@0 T@U) (|m#0@@118| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A@@0) TyType) (= (type Multisets._default.ValueMultisetFn$B@@0) TyType)) (= (type |m#0@@118|) (MapType BoxType BoxType))) ($Is |m#0@@118| (TMap Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0))) (and (=> (|Multisets.__default.ValueMultisetFn#requires| Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0 |m#0@@118|) true) (=> true (|Multisets.__default.ValueMultisetFn#requires| Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0 |m#0@@118|)))) :qid |unknown.0:0| :skolemid |3457| :pattern ( (|Multisets.__default.ValueMultisetFn#requires| Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0 |m#0@@118|)) )))
(assert  (and (forall ((arg0@@498 T@U) ) (! (= (type (|lambda#238| arg0@@498)) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#238| :pattern ( (|lambda#238| arg0@@498)) )) (forall ((arg0@@499 T@U) (arg1@@269 T@U) ) (! (= (type (|lambda#239| arg0@@499 arg1@@269)) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#239| :pattern ( (|lambda#239| arg0@@499 arg1@@269)) ))))
(assert  (=> true (forall ((Multisets._default.ValueMultisetFn$A@@1 T@U) (Multisets._default.ValueMultisetFn$B@@1 T@U) (|m#0@@119| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A@@1) TyType) (= (type Multisets._default.ValueMultisetFn$B@@1) TyType)) (= (type |m#0@@119|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1 |m#0@@119|) ($Is |m#0@@119| (TMap Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1)))) (= (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1 |m#0@@119|) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#238| (|Map#Elements| |m#0@@119|)) (|lambda#239| Multisets._default.ValueMultisetFn$A@@1 (|Map#Domain| |m#0@@119|)) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))))) :qid |unknown.0:0| :skolemid |3458| :pattern ( (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1 |m#0@@119|)) ))))
(assert  (=> true (forall ((Multisets._default.ValueMultisetFn$A@@2 T@U) (Multisets._default.ValueMultisetFn$B@@2 T@U) (|m#0@@120| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A@@2) TyType) (= (type Multisets._default.ValueMultisetFn$B@@2) TyType)) (= (type |m#0@@120|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2 (Lit |m#0@@120|)) ($Is |m#0@@120| (TMap Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2)))) (= (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2 (Lit |m#0@@120|)) (Lit (AtLayer (|lambda#152| (Handle1 (|lambda#238| (|Map#Elements| (Lit |m#0@@120|))) (|lambda#239| Multisets._default.ValueMultisetFn$A@@2 (|Map#Domain| |m#0@@120|)) (|lambda#151| (SetRef_to_SetBox (|lambda#150| false))))) ($LS $LZ))))) :qid |unknown.0:0| :weight 3 :skolemid |3459| :pattern ( (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2 (Lit |m#0@@120|))) ))))
(assert (forall ((arg0@@500 T@U) (arg1@@270 T@U) (arg2@@184 T@U) ) (! (= (type (Multisets.__default.ValueMultiset arg0@@500 arg1@@270 arg2@@184)) (MapType0Type BoxType intType)) :qid |funType:Multisets.__default.ValueMultiset| :pattern ( (Multisets.__default.ValueMultiset arg0@@500 arg1@@270 arg2@@184)) )))
(assert  (=> true (forall ((Multisets._default.ValueMultiset$A T@U) (Multisets._default.ValueMultiset$B T@U) (|m#0@@121| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultiset$A) TyType) (= (type Multisets._default.ValueMultiset$B) TyType)) (= (type |m#0@@121|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultiset#canCall| Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B |m#0@@121|) ($Is |m#0@@121| (TMap Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B)))) ($Is (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B |m#0@@121|) (TMultiSet Multisets._default.ValueMultiset$B))) :qid |unknown.0:0| :skolemid |3460| :pattern ( (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B |m#0@@121|)) ))))
(assert (forall ((Multisets._default.ValueMultiset$A@@0 T@U) (Multisets._default.ValueMultiset$B@@0 T@U) ($Heap@@102 T@U) (|m#0@@122| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.ValueMultiset$A@@0) TyType) (= (type Multisets._default.ValueMultiset$B@@0) TyType)) (= (type $Heap@@102) (MapType0Type refType MapType1Type))) (= (type |m#0@@122|) (MapType BoxType BoxType))) (and ($IsGoodHeap $Heap@@102) ($Is |m#0@@122| (TMap Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0)))) (and (=> (|Multisets.__default.ValueMultiset#requires| Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0 |m#0@@122|) true) (=> true (|Multisets.__default.ValueMultiset#requires| Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0 |m#0@@122|)))) :qid |unknown.0:0| :skolemid |3461| :pattern ( (|Multisets.__default.ValueMultiset#requires| Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0 |m#0@@122|) ($IsGoodHeap $Heap@@102)) )))
(assert (= (type StartFuel_Multisets._default.Apply) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.ValueMultiset$A@@1 T@U) (Multisets._default.ValueMultiset$B@@1 T@U) ($Heap@@103 T@U) (|m#0@@123| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.ValueMultiset$A@@1) TyType) (= (type Multisets._default.ValueMultiset$B@@1) TyType)) (= (type $Heap@@103) (MapType0Type refType MapType1Type))) (= (type |m#0@@123|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultiset#canCall| Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@123|) (and ($IsGoodHeap $Heap@@103) ($Is |m#0@@123| (TMap Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1))))) (and (and (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@123|) (|Multisets.__default.Apply#canCall| Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 $Heap@@103 (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@123|) (|MultiSet#FromSet| (|Map#Domain| |m#0@@123|)))) (= (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@123|) (Multisets.__default.Apply Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 StartFuel_Multisets._default.Apply $Heap@@103 (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@123|) (|MultiSet#FromSet| (|Map#Domain| |m#0@@123|)))))) :qid |unknown.0:0| :skolemid |3462| :pattern ( (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@123|) ($IsGoodHeap $Heap@@103)) ))))
(assert  (=> true (forall ((Multisets._default.ValueMultiset$A@@2 T@U) (Multisets._default.ValueMultiset$B@@2 T@U) ($Heap@@104 T@U) (|m#0@@124| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.ValueMultiset$A@@2) TyType) (= (type Multisets._default.ValueMultiset$B@@2) TyType)) (= (type $Heap@@104) (MapType0Type refType MapType1Type))) (= (type |m#0@@124|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultiset#canCall| Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@124|)) (and ($IsGoodHeap $Heap@@104) ($Is |m#0@@124| (TMap Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2))))) (and (and (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@124|)) (|Multisets.__default.Apply#canCall| Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 $Heap@@104 (Lit (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@124|))) (|MultiSet#FromSet| (Lit (|Map#Domain| (Lit |m#0@@124|)))))) (= (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@124|)) (Multisets.__default.Apply Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 StartFuel_Multisets._default.Apply $Heap@@104 (Lit (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@124|))) (|MultiSet#FromSet| (Lit (|Map#Domain| (Lit |m#0@@124|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3463| :pattern ( (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@124|)) ($IsGoodHeap $Heap@@104)) ))))
(assert (forall ((arg0@@501 T@U) (arg1@@271 T@U) (arg2@@185 T@U) ) (! (= (type (|#BucketsLib.Bucket.BucketMapWithSeq| arg0@@501 arg1@@271 arg2@@185)) DatatypeTypeType) :qid |funType:#BucketsLib.Bucket.BucketMapWithSeq| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| arg0@@501 arg1@@271 arg2@@185)) )))
(assert (forall ((|a#0#0#0@@3| T@U) (|a#0#1#0@@1| T@U) (|a#0#2#0| T@U) ) (!  (=> (and (and (= (type |a#0#0#0@@3|) (MapType BoxType BoxType)) (= (type |a#0#1#0@@1|) (SeqType BoxType))) (= (type |a#0#2#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#BucketsLib.Bucket.BucketMapWithSeq| |a#0#0#0@@3| |a#0#1#0@@1| |a#0#2#0|)) |##BucketsLib.Bucket.BucketMapWithSeq|)) :qid |BucketsL.30:38| :skolemid |3464| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#0#0#0@@3| |a#0#1#0@@1| |a#0#2#0|)) )))
(assert (forall ((d@@139 T@U) ) (!  (=> (= (type d@@139) DatatypeTypeType) (and (=> (BucketsLib.Bucket.BucketMapWithSeq_q d@@139) (= (DatatypeCtorId d@@139) |##BucketsLib.Bucket.BucketMapWithSeq|)) (=> (= (DatatypeCtorId d@@139) |##BucketsLib.Bucket.BucketMapWithSeq|) (BucketsLib.Bucket.BucketMapWithSeq_q d@@139)))) :qid |unknown.0:0| :skolemid |3465| :pattern ( (BucketsLib.Bucket.BucketMapWithSeq_q d@@139)) )))
(assert (forall ((d@@140 T@U) ) (!  (=> (and (= (type d@@140) DatatypeTypeType) (BucketsLib.Bucket.BucketMapWithSeq_q d@@140)) (exists ((|a#1#0#0@@3| T@U) (|a#1#1#0@@1| T@U) (|a#1#2#0| T@U) ) (!  (and (and (and (= (type |a#1#0#0@@3|) (MapType BoxType BoxType)) (= (type |a#1#1#0@@1|) (SeqType BoxType))) (= (type |a#1#2#0|) (SeqType BoxType))) (= d@@140 (|#BucketsLib.Bucket.BucketMapWithSeq| |a#1#0#0@@3| |a#1#1#0@@1| |a#1#2#0|))) :qid |BucketsL.30:38| :skolemid |3466| :no-pattern (type |a#1#0#0@@3|) :no-pattern (type |a#1#1#0@@1|) :no-pattern (type |a#1#2#0|) :no-pattern (U_2_int |a#1#0#0@@3|) :no-pattern (U_2_bool |a#1#0#0@@3|) :no-pattern (U_2_int |a#1#1#0@@1|) :no-pattern (U_2_bool |a#1#1#0@@1|) :no-pattern (U_2_int |a#1#2#0|) :no-pattern (U_2_bool |a#1#2#0|) ))) :qid |unknown.0:0| :skolemid |3467| :pattern ( (BucketsLib.Bucket.BucketMapWithSeq_q d@@140)) )))
(assert (forall ((|a#2#0#0@@3| T@U) (|a#2#1#0@@1| T@U) (|a#2#2#0| T@U) ) (!  (=> (and (and (= (type |a#2#0#0@@3|) (MapType BoxType BoxType)) (= (type |a#2#1#0@@1|) (SeqType BoxType))) (= (type |a#2#2#0|) (SeqType BoxType))) (and (=> ($Is (|#BucketsLib.Bucket.BucketMapWithSeq| |a#2#0#0@@3| |a#2#1#0@@1| |a#2#2#0|) Tclass.BucketsLib.Bucket) (and (and ($Is |a#2#0#0@@3| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |a#2#1#0@@1| (TSeq Tclass.KeyType.Key))) ($Is |a#2#2#0| (TSeq Tclass.ValueMessage.Message)))) (=> (and (and ($Is |a#2#0#0@@3| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |a#2#1#0@@1| (TSeq Tclass.KeyType.Key))) ($Is |a#2#2#0| (TSeq Tclass.ValueMessage.Message))) ($Is (|#BucketsLib.Bucket.BucketMapWithSeq| |a#2#0#0@@3| |a#2#1#0@@1| |a#2#2#0|) Tclass.BucketsLib.Bucket)))) :qid |BucketsL.30:38| :skolemid |3468| :pattern ( ($Is (|#BucketsLib.Bucket.BucketMapWithSeq| |a#2#0#0@@3| |a#2#1#0@@1| |a#2#2#0|) Tclass.BucketsLib.Bucket)) )))
(assert (forall ((|a#3#0#0@@3| T@U) (|a#3#1#0@@1| T@U) (|a#3#2#0| T@U) ($h@@128 T@U) ) (!  (=> (and (and (and (and (= (type |a#3#0#0@@3|) (MapType BoxType BoxType)) (= (type |a#3#1#0@@1|) (SeqType BoxType))) (= (type |a#3#2#0|) (SeqType BoxType))) (= (type $h@@128) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@128)) (and (=> ($IsAlloc (|#BucketsLib.Bucket.BucketMapWithSeq| |a#3#0#0@@3| |a#3#1#0@@1| |a#3#2#0|) Tclass.BucketsLib.Bucket $h@@128) (and (and ($IsAlloc |a#3#0#0@@3| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@128) ($IsAlloc |a#3#1#0@@1| (TSeq Tclass.KeyType.Key) $h@@128)) ($IsAlloc |a#3#2#0| (TSeq Tclass.ValueMessage.Message) $h@@128))) (=> (and (and ($IsAlloc |a#3#0#0@@3| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@128) ($IsAlloc |a#3#1#0@@1| (TSeq Tclass.KeyType.Key) $h@@128)) ($IsAlloc |a#3#2#0| (TSeq Tclass.ValueMessage.Message) $h@@128)) ($IsAlloc (|#BucketsLib.Bucket.BucketMapWithSeq| |a#3#0#0@@3| |a#3#1#0@@1| |a#3#2#0|) Tclass.BucketsLib.Bucket $h@@128)))) :qid |BucketsL.30:38| :skolemid |3469| :pattern ( ($IsAlloc (|#BucketsLib.Bucket.BucketMapWithSeq| |a#3#0#0@@3| |a#3#1#0@@1| |a#3#2#0|) Tclass.BucketsLib.Bucket $h@@128)) )))
(assert (forall ((arg0@@502 T@U) ) (! (= (type (BucketsLib.Bucket.b arg0@@502)) (MapType BoxType BoxType)) :qid |funType:BucketsLib.Bucket.b| :pattern ( (BucketsLib.Bucket.b arg0@@502)) )))
(assert (forall ((d@@141 T@U) ($h@@129 T@U) ) (!  (=> (and (and (= (type d@@141) DatatypeTypeType) (= (type $h@@129) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@129) (and (BucketsLib.Bucket.BucketMapWithSeq_q d@@141) ($IsAlloc d@@141 Tclass.BucketsLib.Bucket $h@@129)))) ($IsAlloc (BucketsLib.Bucket.b d@@141) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@129)) :qid |unknown.0:0| :skolemid |3470| :pattern ( ($IsAlloc (BucketsLib.Bucket.b d@@141) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@129)) )))
(assert (forall ((arg0@@503 T@U) ) (! (= (type (BucketsLib.Bucket.keys arg0@@503)) (SeqType BoxType)) :qid |funType:BucketsLib.Bucket.keys| :pattern ( (BucketsLib.Bucket.keys arg0@@503)) )))
(assert (forall ((d@@142 T@U) ($h@@130 T@U) ) (!  (=> (and (and (= (type d@@142) DatatypeTypeType) (= (type $h@@130) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@130) (and (BucketsLib.Bucket.BucketMapWithSeq_q d@@142) ($IsAlloc d@@142 Tclass.BucketsLib.Bucket $h@@130)))) ($IsAlloc (BucketsLib.Bucket.keys d@@142) (TSeq Tclass.KeyType.Key) $h@@130)) :qid |unknown.0:0| :skolemid |3471| :pattern ( ($IsAlloc (BucketsLib.Bucket.keys d@@142) (TSeq Tclass.KeyType.Key) $h@@130)) )))
(assert (forall ((arg0@@504 T@U) ) (! (= (type (BucketsLib.Bucket.msgs arg0@@504)) (SeqType BoxType)) :qid |funType:BucketsLib.Bucket.msgs| :pattern ( (BucketsLib.Bucket.msgs arg0@@504)) )))
(assert (forall ((d@@143 T@U) ($h@@131 T@U) ) (!  (=> (and (and (= (type d@@143) DatatypeTypeType) (= (type $h@@131) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@131) (and (BucketsLib.Bucket.BucketMapWithSeq_q d@@143) ($IsAlloc d@@143 Tclass.BucketsLib.Bucket $h@@131)))) ($IsAlloc (BucketsLib.Bucket.msgs d@@143) (TSeq Tclass.ValueMessage.Message) $h@@131)) :qid |unknown.0:0| :skolemid |3472| :pattern ( ($IsAlloc (BucketsLib.Bucket.msgs d@@143) (TSeq Tclass.ValueMessage.Message) $h@@131)) )))
(assert (forall ((|a#4#0#0@@3| T@U) (|a#4#1#0@@1| T@U) (|a#4#2#0| T@U) ) (!  (=> (and (and (= (type |a#4#0#0@@3|) (MapType BoxType BoxType)) (= (type |a#4#1#0@@1|) (SeqType BoxType))) (= (type |a#4#2#0|) (SeqType BoxType))) (= (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit |a#4#0#0@@3|) (Lit |a#4#1#0@@1|) (Lit |a#4#2#0|)) (Lit (|#BucketsLib.Bucket.BucketMapWithSeq| |a#4#0#0@@3| |a#4#1#0@@1| |a#4#2#0|)))) :qid |BucketsL.30:38| :skolemid |3473| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit |a#4#0#0@@3|) (Lit |a#4#1#0@@1|) (Lit |a#4#2#0|))) )))
(assert (forall ((|a#5#0#0@@5| T@U) (|a#5#1#0@@1| T@U) (|a#5#2#0| T@U) ) (!  (=> (and (and (= (type |a#5#0#0@@5|) (MapType BoxType BoxType)) (= (type |a#5#1#0@@1|) (SeqType BoxType))) (= (type |a#5#2#0|) (SeqType BoxType))) (= (BucketsLib.Bucket.b (|#BucketsLib.Bucket.BucketMapWithSeq| |a#5#0#0@@5| |a#5#1#0@@1| |a#5#2#0|)) |a#5#0#0@@5|)) :qid |BucketsL.30:38| :skolemid |3474| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#5#0#0@@5| |a#5#1#0@@1| |a#5#2#0|)) )))
(assert (forall ((|a#6#0#0@@5| T@U) (|a#6#1#0@@1| T@U) (|a#6#2#0| T@U) (d@@144 T@U) ) (!  (=> (and (and (and (and (= (type |a#6#0#0@@5|) (MapType BoxType BoxType)) (= (type |a#6#1#0@@1|) (SeqType BoxType))) (= (type |a#6#2#0|) (SeqType BoxType))) (= (type d@@144) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#6#0#0@@5|) ($Box d@@144)))) (< (DtRank d@@144) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#6#0#0@@5| |a#6#1#0@@1| |a#6#2#0|)))) :qid |BucketsL.30:38| :skolemid |3475| :pattern ( (MapType0Select (|Map#Domain| |a#6#0#0@@5|) ($Box d@@144)) (|#BucketsLib.Bucket.BucketMapWithSeq| |a#6#0#0@@5| |a#6#1#0@@1| |a#6#2#0|)) )))
(assert (forall ((|a#7#0#0@@5| T@U) (|a#7#1#0@@1| T@U) (|a#7#2#0| T@U) (bx@@170 T@U) ) (!  (=> (and (and (and (and (= (type |a#7#0#0@@5|) (MapType BoxType BoxType)) (= (type |a#7#1#0@@1|) (SeqType BoxType))) (= (type |a#7#2#0|) (SeqType BoxType))) (= (type bx@@170) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#7#0#0@@5|) bx@@170))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#7#0#0@@5|) bx@@170))) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#7#0#0@@5| |a#7#1#0@@1| |a#7#2#0|)))) :qid |BucketsL.30:38| :skolemid |3476| :pattern ( (MapType0Select (|Map#Domain| |a#7#0#0@@5|) bx@@170) (|#BucketsLib.Bucket.BucketMapWithSeq| |a#7#0#0@@5| |a#7#1#0@@1| |a#7#2#0|)) )))
(assert (forall ((|a#8#0#0@@5| T@U) (|a#8#1#0@@1| T@U) (|a#8#2#0| T@U) ) (!  (=> (and (and (= (type |a#8#0#0@@5|) (MapType BoxType BoxType)) (= (type |a#8#1#0@@1|) (SeqType BoxType))) (= (type |a#8#2#0|) (SeqType BoxType))) (= (BucketsLib.Bucket.keys (|#BucketsLib.Bucket.BucketMapWithSeq| |a#8#0#0@@5| |a#8#1#0@@1| |a#8#2#0|)) |a#8#1#0@@1|)) :qid |BucketsL.30:38| :skolemid |3477| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#8#0#0@@5| |a#8#1#0@@1| |a#8#2#0|)) )))
(assert (forall ((|a#9#0#0@@4| T@U) (|a#9#1#0@@0| T@U) (|a#9#2#0| T@U) (i@@34 Int) ) (!  (=> (and (and (and (= (type |a#9#0#0@@4|) (MapType BoxType BoxType)) (= (type |a#9#1#0@@0|) (SeqType BoxType))) (= (type |a#9#2#0|) (SeqType BoxType))) (and (<= 0 i@@34) (< i@@34 (|Seq#Length| |a#9#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#9#1#0@@0| i@@34))) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#9#0#0@@4| |a#9#1#0@@0| |a#9#2#0|)))) :qid |BucketsL.30:38| :skolemid |3478| :pattern ( (|Seq#Index| |a#9#1#0@@0| i@@34) (|#BucketsLib.Bucket.BucketMapWithSeq| |a#9#0#0@@4| |a#9#1#0@@0| |a#9#2#0|)) )))
(assert (forall ((|a#10#0#0@@4| T@U) (|a#10#1#0@@0| T@U) (|a#10#2#0| T@U) ) (!  (=> (and (and (= (type |a#10#0#0@@4|) (MapType BoxType BoxType)) (= (type |a#10#1#0@@0|) (SeqType BoxType))) (= (type |a#10#2#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#10#1#0@@0|) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#10#0#0@@4| |a#10#1#0@@0| |a#10#2#0|)))) :qid |BucketsL.30:38| :skolemid |3479| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#10#0#0@@4| |a#10#1#0@@0| |a#10#2#0|)) )))
(assert (forall ((|a#11#0#0@@4| T@U) (|a#11#1#0@@0| T@U) (|a#11#2#0| T@U) ) (!  (=> (and (and (= (type |a#11#0#0@@4|) (MapType BoxType BoxType)) (= (type |a#11#1#0@@0|) (SeqType BoxType))) (= (type |a#11#2#0|) (SeqType BoxType))) (= (BucketsLib.Bucket.msgs (|#BucketsLib.Bucket.BucketMapWithSeq| |a#11#0#0@@4| |a#11#1#0@@0| |a#11#2#0|)) |a#11#2#0|)) :qid |BucketsL.30:38| :skolemid |3480| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#11#0#0@@4| |a#11#1#0@@0| |a#11#2#0|)) )))
(assert (forall ((|a#12#0#0@@2| T@U) (|a#12#1#0@@0| T@U) (|a#12#2#0| T@U) (i@@35 Int) ) (!  (=> (and (and (and (= (type |a#12#0#0@@2|) (MapType BoxType BoxType)) (= (type |a#12#1#0@@0|) (SeqType BoxType))) (= (type |a#12#2#0|) (SeqType BoxType))) (and (<= 0 i@@35) (< i@@35 (|Seq#Length| |a#12#2#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#12#2#0| i@@35))) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#12#0#0@@2| |a#12#1#0@@0| |a#12#2#0|)))) :qid |BucketsL.30:38| :skolemid |3481| :pattern ( (|Seq#Index| |a#12#2#0| i@@35) (|#BucketsLib.Bucket.BucketMapWithSeq| |a#12#0#0@@2| |a#12#1#0@@0| |a#12#2#0|)) )))
(assert (forall ((|a#13#0#0@@2| T@U) (|a#13#1#0@@2| T@U) (|a#13#2#0| T@U) ) (!  (=> (and (and (= (type |a#13#0#0@@2|) (MapType BoxType BoxType)) (= (type |a#13#1#0@@2|) (SeqType BoxType))) (= (type |a#13#2#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#13#2#0|) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#13#0#0@@2| |a#13#1#0@@2| |a#13#2#0|)))) :qid |BucketsL.30:38| :skolemid |3482| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#13#0#0@@2| |a#13#1#0@@2| |a#13#2#0|)) )))
(assert (forall ((d@@145 T@U) ) (!  (=> (and (= (type d@@145) DatatypeTypeType) (|$IsA#BucketsLib.Bucket| d@@145)) (BucketsLib.Bucket.BucketMapWithSeq_q d@@145)) :qid |unknown.0:0| :skolemid |3483| :pattern ( (|$IsA#BucketsLib.Bucket| d@@145)) )))
(assert (forall ((d@@146 T@U) ) (!  (=> (and (= (type d@@146) DatatypeTypeType) ($Is d@@146 Tclass.BucketsLib.Bucket)) (BucketsLib.Bucket.BucketMapWithSeq_q d@@146)) :qid |unknown.0:0| :skolemid |3484| :pattern ( (BucketsLib.Bucket.BucketMapWithSeq_q d@@146) ($Is d@@146 Tclass.BucketsLib.Bucket)) )))
(assert (forall ((a@@179 T@U) (b@@110 T@U) ) (!  (=> (and (and (= (type a@@179) DatatypeTypeType) (= (type b@@110) DatatypeTypeType)) true) (and (=> (|BucketsLib.Bucket#Equal| a@@179 b@@110) (and (and (|Map#Equal| (BucketsLib.Bucket.b a@@179) (BucketsLib.Bucket.b b@@110)) (|Seq#Equal| (BucketsLib.Bucket.keys a@@179) (BucketsLib.Bucket.keys b@@110))) (|Seq#Equal| (BucketsLib.Bucket.msgs a@@179) (BucketsLib.Bucket.msgs b@@110)))) (=> (and (and (|Map#Equal| (BucketsLib.Bucket.b a@@179) (BucketsLib.Bucket.b b@@110)) (|Seq#Equal| (BucketsLib.Bucket.keys a@@179) (BucketsLib.Bucket.keys b@@110))) (|Seq#Equal| (BucketsLib.Bucket.msgs a@@179) (BucketsLib.Bucket.msgs b@@110))) (|BucketsLib.Bucket#Equal| a@@179 b@@110)))) :qid |unknown.0:0| :skolemid |3485| :pattern ( (|BucketsLib.Bucket#Equal| a@@179 b@@110)) )))
(assert (forall ((a@@180 T@U) (b@@111 T@U) ) (!  (=> (and (= (type a@@180) DatatypeTypeType) (= (type b@@111) DatatypeTypeType)) (and (=> (|BucketsLib.Bucket#Equal| a@@180 b@@111) (= a@@180 b@@111)) (=> (= a@@180 b@@111) (|BucketsLib.Bucket#Equal| a@@180 b@@111)))) :qid |unknown.0:0| :skolemid |3486| :pattern ( (|BucketsLib.Bucket#Equal| a@@180 b@@111)) )))
(assert (= (type Tclass.BucketsLib.__default) TyType))
(assert (= (Tag Tclass.BucketsLib.__default) Tagclass.BucketsLib.__default))
(assert (forall ((bx@@171 T@U) ) (!  (=> (and (= (type bx@@171) BoxType) ($IsBox bx@@171 Tclass.BucketsLib.__default)) (and (= ($Box ($Unbox refType bx@@171)) bx@@171) ($Is ($Unbox refType bx@@171) Tclass.BucketsLib.__default))) :qid |unknown.0:0| :skolemid |3487| :pattern ( ($IsBox bx@@171 Tclass.BucketsLib.__default)) )))
(assert (forall (($o@@58 T@U) ) (!  (=> (= (type $o@@58) refType) (and (=> ($Is $o@@58 Tclass.BucketsLib.__default) (or (= $o@@58 null) (= (dtype $o@@58) Tclass.BucketsLib.__default))) (=> (or (= $o@@58 null) (= (dtype $o@@58) Tclass.BucketsLib.__default)) ($Is $o@@58 Tclass.BucketsLib.__default)))) :qid |unknown.0:0| :skolemid |3488| :pattern ( ($Is $o@@58 Tclass.BucketsLib.__default)) )))
(assert (forall (($o@@59 T@U) ($h@@132 T@U) ) (!  (=> (and (= (type $o@@59) refType) (= (type $h@@132) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@59 Tclass.BucketsLib.__default $h@@132) (or (= $o@@59 null) (U_2_bool (MapType1Select (MapType0Select $h@@132 $o@@59) alloc)))) (=> (or (= $o@@59 null) (U_2_bool (MapType1Select (MapType0Select $h@@132 $o@@59) alloc))) ($IsAlloc $o@@59 Tclass.BucketsLib.__default $h@@132)))) :qid |unknown.0:0| :skolemid |3489| :pattern ( ($IsAlloc $o@@59 Tclass.BucketsLib.__default $h@@132)) )))
(assert (forall ((arg0@@505 T@U) ) (! (= (type (BucketsLib.__default.maximumKey arg0@@505)) DatatypeTypeType) :qid |funType:BucketsLib.__default.maximumKey| :pattern ( (BucketsLib.__default.maximumKey arg0@@505)) )))
(assert  (=> true (forall ((|b#0@@125| T@U) ) (!  (=> (and (= (type |b#0@@125|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.maximumKey#canCall| |b#0@@125|) ($Is |b#0@@125| (TSet Tclass.KeyType.Key)))) ($Is (BucketsLib.__default.maximumKey |b#0@@125|) (Tclass.Options.Option Tclass.KeyType.Key))) :qid |BucketsL.33:23| :skolemid |3490| :pattern ( (BucketsLib.__default.maximumKey |b#0@@125|)) ))))
(assert (forall ((|b#0@@126| T@U) ) (!  (=> (and (= (type |b#0@@126|) (MapType0Type BoxType boolType)) ($Is |b#0@@126| (TSet Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.maximumKey#requires| |b#0@@126|) true) (=> true (|BucketsLib.__default.maximumKey#requires| |b#0@@126|)))) :qid |BucketsL.33:23| :skolemid |3491| :pattern ( (|BucketsLib.__default.maximumKey#requires| |b#0@@126|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType))
(assert  (=> true (forall ((|b#0@@127| T@U) ) (!  (=> (and (= (type |b#0@@127|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.maximumKey#canCall| |b#0@@127|) ($Is |b#0@@127| (TSet Tclass.KeyType.Key)))) (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |b#0@@127|) (= (BucketsLib.__default.maximumKey |b#0@@127|) (let ((|m#0@@125| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt |b#0@@127|))) (ite (Options.Option.Some_q |m#0@@125|) (let ((|k#0@@91| ($Unbox (SeqType BoxType) (Options.Option.value |m#0@@125|)))) (|#Options.Option.Some| ($Box |k#0@@91|))) |#Options.Option.None|))))) :qid |BucketsL.33:23| :skolemid |3492| :pattern ( (BucketsLib.__default.maximumKey |b#0@@127|)) ))))
(assert  (=> true (forall ((|b#0@@128| T@U) ) (!  (=> (and (= (type |b#0@@128|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.maximumKey#canCall| (Lit |b#0@@128|)) ($Is |b#0@@128| (TSet Tclass.KeyType.Key)))) (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit |b#0@@128|)) (= (BucketsLib.__default.maximumKey (Lit |b#0@@128|)) (let ((|m#1| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (Lit |b#0@@128|)))) (ite (Options.Option.Some_q |m#1|) (let ((|k#1@@13| ($Unbox (SeqType BoxType) (Options.Option.value |m#1|)))) (|#Options.Option.Some| ($Box |k#1@@13|))) |#Options.Option.None|))))) :qid |BucketsL.33:23| :weight 3 :skolemid |3493| :pattern ( (BucketsLib.__default.maximumKey (Lit |b#0@@128|))) ))))
(assert (forall ((arg0@@506 T@U) ) (! (= (type (BucketsLib.__default.minimumKey arg0@@506)) DatatypeTypeType) :qid |funType:BucketsLib.__default.minimumKey| :pattern ( (BucketsLib.__default.minimumKey arg0@@506)) )))
(assert  (=> true (forall ((|b#0@@129| T@U) ) (!  (=> (and (= (type |b#0@@129|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.minimumKey#canCall| |b#0@@129|) ($Is |b#0@@129| (TSet Tclass.KeyType.Key)))) ($Is (BucketsLib.__default.minimumKey |b#0@@129|) (Tclass.Options.Option Tclass.KeyType.Key))) :qid |BucketsL.44:23| :skolemid |3494| :pattern ( (BucketsLib.__default.minimumKey |b#0@@129|)) ))))
(assert (forall ((|b#0@@130| T@U) ) (!  (=> (and (= (type |b#0@@130|) (MapType0Type BoxType boolType)) ($Is |b#0@@130| (TSet Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.minimumKey#requires| |b#0@@130|) true) (=> true (|BucketsLib.__default.minimumKey#requires| |b#0@@130|)))) :qid |BucketsL.44:23| :skolemid |3495| :pattern ( (|BucketsLib.__default.minimumKey#requires| |b#0@@130|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType))
(assert  (=> true (forall ((|b#0@@131| T@U) ) (!  (=> (and (= (type |b#0@@131|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.minimumKey#canCall| |b#0@@131|) ($Is |b#0@@131| (TSet Tclass.KeyType.Key)))) (and (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |b#0@@131|) (= (BucketsLib.__default.minimumKey |b#0@@131|) (let ((|m#0@@126| (Lexicographic__Byte__Order.__default.minimumOpt StartFuel_Lexicographic_Byte_Order._default.minimumOpt |b#0@@131|))) (ite (Options.Option.Some_q |m#0@@126|) (let ((|k#0@@92| ($Unbox (SeqType BoxType) (Options.Option.value |m#0@@126|)))) (|#Options.Option.Some| ($Box |k#0@@92|))) |#Options.Option.None|))))) :qid |BucketsL.44:23| :skolemid |3496| :pattern ( (BucketsLib.__default.minimumKey |b#0@@131|)) ))))
(assert  (=> true (forall ((|b#0@@132| T@U) ) (!  (=> (and (= (type |b#0@@132|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.minimumKey#canCall| (Lit |b#0@@132|)) ($Is |b#0@@132| (TSet Tclass.KeyType.Key)))) (and (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| (Lit |b#0@@132|)) (= (BucketsLib.__default.minimumKey (Lit |b#0@@132|)) (let ((|m#1@@0| (Lexicographic__Byte__Order.__default.minimumOpt StartFuel_Lexicographic_Byte_Order._default.minimumOpt (Lit |b#0@@132|)))) (ite (Options.Option.Some_q |m#1@@0|) (let ((|k#1@@14| ($Unbox (SeqType BoxType) (Options.Option.value |m#1@@0|)))) (|#Options.Option.Some| ($Box |k#1@@14|))) |#Options.Option.None|))))) :qid |BucketsL.44:23| :weight 3 :skolemid |3497| :pattern ( (BucketsLib.__default.minimumKey (Lit |b#0@@132|))) ))))
(assert (forall ((arg0@@507 T@U) (arg1@@272 T@U) (arg2@@186 T@U) ) (! (= (type (BucketsLib.__default.BucketMapOfSeq arg0@@507 arg1@@272 arg2@@186)) (MapType BoxType BoxType)) :qid |funType:BucketsLib.__default.BucketMapOfSeq| :pattern ( (BucketsLib.__default.BucketMapOfSeq arg0@@507 arg1@@272 arg2@@186)) )))
(assert (forall (($ly@@554 T@U) (|keys#0| T@U) (|msgs#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@554) LayerTypeType) (= (type |keys#0|) (SeqType BoxType))) (= (type |msgs#0@@9|) (SeqType BoxType))) (= (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@554) |keys#0| |msgs#0@@9|) (BucketsLib.__default.BucketMapOfSeq $ly@@554 |keys#0| |msgs#0@@9|))) :qid |BucketsL.55:22| :skolemid |3498| :pattern ( (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@554) |keys#0| |msgs#0@@9|)) )))
(assert (forall (($ly@@555 T@U) (|keys#0@@0| T@U) (|msgs#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@555) LayerTypeType) (= (type |keys#0@@0|) (SeqType BoxType))) (= (type |msgs#0@@10|) (SeqType BoxType))) (= (BucketsLib.__default.BucketMapOfSeq $ly@@555 |keys#0@@0| |msgs#0@@10|) (BucketsLib.__default.BucketMapOfSeq $LZ |keys#0@@0| |msgs#0@@10|))) :qid |BucketsL.55:22| :skolemid |3499| :pattern ( (BucketsLib.__default.BucketMapOfSeq (AsFuelBottom $ly@@555) |keys#0@@0| |msgs#0@@10|)) )))
(assert  (=> true (forall (($ly@@556 T@U) (|keys#0@@1| T@U) (|msgs#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@556) LayerTypeType) (= (type |keys#0@@1|) (SeqType BoxType))) (= (type |msgs#0@@11|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketMapOfSeq#canCall| |keys#0@@1| |msgs#0@@11|) (and (and ($Is |keys#0@@1| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@11| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| |keys#0@@1|) (|Seq#Length| |msgs#0@@11|))))) (and (and (|Set#Equal| (|Map#Domain| (BucketsLib.__default.BucketMapOfSeq $ly@@556 |keys#0@@1| |msgs#0@@11|)) (Sequences.__default.Set Tclass.KeyType.Key |keys#0@@1|)) (|Set#Subset| (|Map#Values| (BucketsLib.__default.BucketMapOfSeq $ly@@556 |keys#0@@1| |msgs#0@@11|)) (Sequences.__default.Set Tclass.ValueMessage.Message |msgs#0@@11|))) ($Is (BucketsLib.__default.BucketMapOfSeq $ly@@556 |keys#0@@1| |msgs#0@@11|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) :qid |BucketsL.55:22| :skolemid |3500| :pattern ( (BucketsLib.__default.BucketMapOfSeq $ly@@556 |keys#0@@1| |msgs#0@@11|)) ))))
(assert (forall (($ly@@557 T@U) (|keys#0@@2| T@U) (|msgs#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@557) LayerTypeType) (= (type |keys#0@@2|) (SeqType BoxType))) (= (type |msgs#0@@12|) (SeqType BoxType))) (and ($Is |keys#0@@2| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@12| (TSeq Tclass.ValueMessage.Message)))) (and (=> (|BucketsLib.__default.BucketMapOfSeq#requires| $ly@@557 |keys#0@@2| |msgs#0@@12|) (= (|Seq#Length| |keys#0@@2|) (|Seq#Length| |msgs#0@@12|))) (=> (= (|Seq#Length| |keys#0@@2|) (|Seq#Length| |msgs#0@@12|)) (|BucketsLib.__default.BucketMapOfSeq#requires| $ly@@557 |keys#0@@2| |msgs#0@@12|)))) :qid |BucketsL.55:22| :skolemid |3501| :pattern ( (|BucketsLib.__default.BucketMapOfSeq#requires| $ly@@557 |keys#0@@2| |msgs#0@@12|)) )))
(assert  (=> true (forall (($ly@@558 T@U) (|keys#0@@3| T@U) (|msgs#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@558) LayerTypeType) (= (type |keys#0@@3|) (SeqType BoxType))) (= (type |msgs#0@@13|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketMapOfSeq#canCall| |keys#0@@3| |msgs#0@@13|) (and (and ($Is |keys#0@@3| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@13| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| |keys#0@@3|) (|Seq#Length| |msgs#0@@13|))))) (and (=> (not (= (|Seq#Length| |keys#0@@3|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key |keys#0@@3|) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message |msgs#0@@13|)) (|BucketsLib.__default.BucketMapOfSeq#canCall| (Sequences.__default.DropLast Tclass.KeyType.Key |keys#0@@3|) (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@13|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key |keys#0@@3|) (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message |msgs#0@@13|)))) (= (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@558) |keys#0@@3| |msgs#0@@13|) (ite (= (|Seq#Length| |keys#0@@3|) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|r'#0| (BucketsLib.__default.BucketMapOfSeq $ly@@558 (Sequences.__default.DropLast Tclass.KeyType.Key |keys#0@@3|) (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@13|)))) (let ((|r#0| (|Map#Build| |r'#0| (Sequences.__default.Last Tclass.KeyType.Key |keys#0@@3|) (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@13|)))) |r#0|)))))) :qid |BucketsL.55:22| :skolemid |3502| :pattern ( (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@558) |keys#0@@3| |msgs#0@@13|)) ))))
(assert  (=> true (forall (($ly@@559 T@U) (|keys#0@@4| T@U) (|msgs#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@559) LayerTypeType) (= (type |keys#0@@4|) (SeqType BoxType))) (= (type |msgs#0@@14|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketMapOfSeq#canCall| (Lit |keys#0@@4|) (Lit |msgs#0@@14|)) (and (and ($Is |keys#0@@4| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@14| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| (Lit |keys#0@@4|)) (|Seq#Length| (Lit |msgs#0@@14|)))))) (and (=> (not (= (|Seq#Length| (Lit |keys#0@@4|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (Lit |keys#0@@4|)) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@14|))) (|BucketsLib.__default.BucketMapOfSeq#canCall| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |keys#0@@4|))) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@14|))))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |keys#0@@4|)) (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@14|))))) (= (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@559) (Lit |keys#0@@4|) (Lit |msgs#0@@14|)) (ite (= (|Seq#Length| (Lit |keys#0@@4|)) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|r'#1| (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@559) (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |keys#0@@4|))) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@14|)))))) (let ((|r#1| (|Map#Build| |r'#1| ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |keys#0@@4|))))) ($Box (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@14|)))))))) |r#1|)))))) :qid |BucketsL.55:22| :weight 3 :skolemid |3503| :pattern ( (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@559) (Lit |keys#0@@4|) (Lit |msgs#0@@14|))) ))))
(assert (forall ((arg0@@508 T@U) (arg1@@273 T@U) ) (! (= (type (BucketsLib.__default.BucketOfSeq arg0@@508 arg1@@273)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketOfSeq| :pattern ( (BucketsLib.__default.BucketOfSeq arg0@@508 arg1@@273)) )))
(assert  (=> true (forall ((|keys#0@@5| T@U) (|msgs#0@@15| T@U) ) (!  (=> (and (and (= (type |keys#0@@5|) (SeqType BoxType)) (= (type |msgs#0@@15|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketOfSeq#canCall| |keys#0@@5| |msgs#0@@15|) (and (and ($Is |keys#0@@5| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@15| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| |keys#0@@5|) (|Seq#Length| |msgs#0@@15|))))) ($Is (BucketsLib.__default.BucketOfSeq |keys#0@@5| |msgs#0@@15|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.86:24| :skolemid |3504| :pattern ( (BucketsLib.__default.BucketOfSeq |keys#0@@5| |msgs#0@@15|)) ))))
(assert (forall ((|keys#0@@6| T@U) (|msgs#0@@16| T@U) ) (!  (=> (and (and (= (type |keys#0@@6|) (SeqType BoxType)) (= (type |msgs#0@@16|) (SeqType BoxType))) (and ($Is |keys#0@@6| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@16| (TSeq Tclass.ValueMessage.Message)))) (and (=> (|BucketsLib.__default.BucketOfSeq#requires| |keys#0@@6| |msgs#0@@16|) (= (|Seq#Length| |keys#0@@6|) (|Seq#Length| |msgs#0@@16|))) (=> (= (|Seq#Length| |keys#0@@6|) (|Seq#Length| |msgs#0@@16|)) (|BucketsLib.__default.BucketOfSeq#requires| |keys#0@@6| |msgs#0@@16|)))) :qid |BucketsL.86:24| :skolemid |3505| :pattern ( (|BucketsLib.__default.BucketOfSeq#requires| |keys#0@@6| |msgs#0@@16|)) )))
(assert (= (type StartFuel_BucketsLib._default.BucketMapOfSeq) LayerTypeType))
(assert  (=> true (forall ((|keys#0@@7| T@U) (|msgs#0@@17| T@U) ) (!  (=> (and (and (= (type |keys#0@@7|) (SeqType BoxType)) (= (type |msgs#0@@17|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketOfSeq#canCall| |keys#0@@7| |msgs#0@@17|) (and (and ($Is |keys#0@@7| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@17| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| |keys#0@@7|) (|Seq#Length| |msgs#0@@17|))))) (and (|BucketsLib.__default.BucketMapOfSeq#canCall| |keys#0@@7| |msgs#0@@17|) (= (BucketsLib.__default.BucketOfSeq |keys#0@@7| |msgs#0@@17|) (|#BucketsLib.Bucket.BucketMapWithSeq| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq |keys#0@@7| |msgs#0@@17|) |keys#0@@7| |msgs#0@@17|)))) :qid |BucketsL.86:24| :skolemid |3506| :pattern ( (BucketsLib.__default.BucketOfSeq |keys#0@@7| |msgs#0@@17|)) ))))
(assert  (=> true (forall ((|keys#0@@8| T@U) (|msgs#0@@18| T@U) ) (!  (=> (and (and (= (type |keys#0@@8|) (SeqType BoxType)) (= (type |msgs#0@@18|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketOfSeq#canCall| (Lit |keys#0@@8|) (Lit |msgs#0@@18|)) (and (and ($Is |keys#0@@8| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@18| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| (Lit |keys#0@@8|)) (|Seq#Length| (Lit |msgs#0@@18|)))))) (and (|BucketsLib.__default.BucketMapOfSeq#canCall| (Lit |keys#0@@8|) (Lit |msgs#0@@18|)) (= (BucketsLib.__default.BucketOfSeq (Lit |keys#0@@8|) (Lit |msgs#0@@18|)) (|#BucketsLib.Bucket.BucketMapWithSeq| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (Lit |keys#0@@8|) (Lit |msgs#0@@18|)) (Lit |keys#0@@8|) (Lit |msgs#0@@18|))))) :qid |BucketsL.86:24| :weight 3 :skolemid |3507| :pattern ( (BucketsLib.__default.BucketOfSeq (Lit |keys#0@@8|) (Lit |msgs#0@@18|))) ))))
(assert  (=> true (forall ((|bucket#0| T@U) ) (!  (=> (and (= (type |bucket#0|) (MapType BoxType BoxType)) (or (|BucketsLib.__default.WFBucketMap#canCall| |bucket#0|) ($Is |bucket#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) true) :qid |BucketsL.135:25| :skolemid |3508| :pattern ( (BucketsLib.__default.WFBucketMap |bucket#0|)) ))))
(assert (forall ((|bucket#0@@0| T@U) ) (!  (=> (and (= (type |bucket#0@@0|) (MapType BoxType BoxType)) ($Is |bucket#0@@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.WFBucketMap#requires| |bucket#0@@0|) true) (=> true (|BucketsLib.__default.WFBucketMap#requires| |bucket#0@@0|)))) :qid |BucketsL.135:25| :skolemid |3509| :pattern ( (|BucketsLib.__default.WFBucketMap#requires| |bucket#0@@0|)) )))
(assert  (=> true (forall ((|bucket#0@@1| T@U) ) (!  (=> (and (= (type |bucket#0@@1|) (MapType BoxType BoxType)) (or (|BucketsLib.__default.WFBucketMap#canCall| |bucket#0@@1|) ($Is |bucket#0@@1| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (forall ((|key#0@@131| T@U) ) (!  (=> (and (and (= (type |key#0@@131|) (SeqType BoxType)) ($Is |key#0@@131| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@131|)))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@131|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsL.137:12| :skolemid |3510| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@131|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@131|))) )) (and (=> (BucketsLib.__default.WFBucketMap |bucket#0@@1|) (forall ((|key#0@@132| T@U) ) (!  (=> (= (type |key#0@@132|) (SeqType BoxType)) (=> (and ($Is |key#0@@132| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@132|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@132|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.137:12| :skolemid |3511| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@132|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@132|))) ))) (=> (forall ((|key#0@@133| T@U) ) (!  (=> (= (type |key#0@@133|) (SeqType BoxType)) (=> (and ($Is |key#0@@133| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@133|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@133|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.137:12| :skolemid |3511| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@133|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@133|))) )) (BucketsLib.__default.WFBucketMap |bucket#0@@1|))))) :qid |BucketsL.135:25| :skolemid |3512| :pattern ( (BucketsLib.__default.WFBucketMap |bucket#0@@1|)) ))))
(assert  (=> true (forall ((|bucket#0@@2| T@U) ) (!  (=> (and (= (type |bucket#0@@2|) (MapType BoxType BoxType)) (or (|BucketsLib.__default.WFBucketMap#canCall| (Lit |bucket#0@@2|)) ($Is |bucket#0@@2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (forall ((|key#1@@16| T@U) ) (!  (=> (and (and (= (type |key#1@@16|) (SeqType BoxType)) ($Is |key#1@@16| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@16|)))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bucket#0@@2|)) ($Box |key#1@@16|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsL.137:12| :skolemid |3513| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@2|) ($Box |key#1@@16|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@16|))) )) (and (=> (BucketsLib.__default.WFBucketMap (Lit |bucket#0@@2|)) (forall ((|key#1@@17| T@U) ) (!  (=> (= (type |key#1@@17|) (SeqType BoxType)) (=> (and ($Is |key#1@@17| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@17|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bucket#0@@2|)) ($Box |key#1@@17|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.137:12| :skolemid |3514| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@2|) ($Box |key#1@@17|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@17|))) ))) (=> (forall ((|key#1@@18| T@U) ) (!  (=> (= (type |key#1@@18|) (SeqType BoxType)) (=> (and ($Is |key#1@@18| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@18|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bucket#0@@2|)) ($Box |key#1@@18|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.137:12| :skolemid |3514| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@2|) ($Box |key#1@@18|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@18|))) )) (BucketsLib.__default.WFBucketMap (Lit |bucket#0@@2|)))))) :qid |BucketsL.135:25| :weight 3 :skolemid |3515| :pattern ( (BucketsLib.__default.WFBucketMap (Lit |bucket#0@@2|))) ))))
(assert  (=> true (forall ((|messages#0| T@U) ) (!  (=> (and (= (type |messages#0|) (SeqType BoxType)) (or (|BucketsLib.__default.WFMessageSeq#canCall| |messages#0|) ($Is |messages#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |BucketsL.140:26| :skolemid |3516| :pattern ( (BucketsLib.__default.WFMessageSeq |messages#0|)) ))))
(assert (forall ((|messages#0@@0| T@U) ) (!  (=> (and (= (type |messages#0@@0|) (SeqType BoxType)) ($Is |messages#0@@0| (TSeq Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.WFMessageSeq#requires| |messages#0@@0|) true) (=> true (|BucketsLib.__default.WFMessageSeq#requires| |messages#0@@0|)))) :qid |BucketsL.140:26| :skolemid |3517| :pattern ( (|BucketsLib.__default.WFMessageSeq#requires| |messages#0@@0|)) )))
(assert  (=> true (forall ((|messages#0@@1| T@U) ) (!  (=> (and (= (type |messages#0@@1|) (SeqType BoxType)) (or (|BucketsLib.__default.WFMessageSeq#canCall| |messages#0@@1|) ($Is |messages#0@@1| (TSeq Tclass.ValueMessage.Message)))) (and (forall ((|i#0@@131| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@131|) (< |i#0@@131| (|Seq#Length| |messages#0@@1|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@131|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsL.142:12| :skolemid |3518| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@131|))) )) (and (=> (BucketsLib.__default.WFMessageSeq |messages#0@@1|) (forall ((|i#0@@132| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@132|) (< |i#0@@132| (|Seq#Length| |messages#0@@1|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@132|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsL.142:12| :skolemid |3519| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@132|))) ))) (=> (forall ((|i#0@@133| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@133|) (< |i#0@@133| (|Seq#Length| |messages#0@@1|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@133|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsL.142:12| :skolemid |3519| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@133|))) )) (BucketsLib.__default.WFMessageSeq |messages#0@@1|))))) :qid |BucketsL.140:26| :skolemid |3520| :pattern ( (BucketsLib.__default.WFMessageSeq |messages#0@@1|)) ))))
(assert  (=> true (forall ((|messages#0@@2| T@U) ) (!  (=> (and (= (type |messages#0@@2|) (SeqType BoxType)) (or (|BucketsLib.__default.WFMessageSeq#canCall| (Lit |messages#0@@2|)) ($Is |messages#0@@2| (TSeq Tclass.ValueMessage.Message)))) (and (forall ((|i#1@@63| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@63|) (< |i#1@@63| (|Seq#Length| (Lit |messages#0@@2|)))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |messages#0@@2|) |i#1@@63|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsL.142:12| :skolemid |3521| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@2| |i#1@@63|))) )) (and (=> (BucketsLib.__default.WFMessageSeq (Lit |messages#0@@2|)) (forall ((|i#1@@64| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@64|) (< |i#1@@64| (|Seq#Length| (Lit |messages#0@@2|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |messages#0@@2|) |i#1@@64|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsL.142:12| :skolemid |3522| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@2| |i#1@@64|))) ))) (=> (forall ((|i#1@@65| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@65|) (< |i#1@@65| (|Seq#Length| (Lit |messages#0@@2|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |messages#0@@2|) |i#1@@65|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsL.142:12| :skolemid |3522| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@2| |i#1@@65|))) )) (BucketsLib.__default.WFMessageSeq (Lit |messages#0@@2|)))))) :qid |BucketsL.140:26| :weight 3 :skolemid |3523| :pattern ( (BucketsLib.__default.WFMessageSeq (Lit |messages#0@@2|))) ))))
(assert  (=> true (forall ((|bucket#0@@3| T@U) ) (!  (=> (and (= (type |bucket#0@@3|) DatatypeTypeType) (or (|BucketsLib.__default.PreWFBucket#canCall| |bucket#0@@3|) ($Is |bucket#0@@3| Tclass.BucketsLib.Bucket))) true) :qid |BucketsL.146:25| :skolemid |3524| :pattern ( (BucketsLib.__default.PreWFBucket |bucket#0@@3|)) ))))
(assert (forall ((|bucket#0@@4| T@U) ) (!  (=> (and (= (type |bucket#0@@4|) DatatypeTypeType) ($Is |bucket#0@@4| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.PreWFBucket#requires| |bucket#0@@4|) true) (=> true (|BucketsLib.__default.PreWFBucket#requires| |bucket#0@@4|)))) :qid |BucketsL.146:25| :skolemid |3525| :pattern ( (|BucketsLib.__default.PreWFBucket#requires| |bucket#0@@4|)) )))
(assert  (=> true (forall ((|bucket#0@@5| T@U) ) (!  (=> (and (= (type |bucket#0@@5|) DatatypeTypeType) (or (|BucketsLib.__default.PreWFBucket#canCall| |bucket#0@@5|) ($Is |bucket#0@@5| Tclass.BucketsLib.Bucket))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|)) (=> (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@5|)) (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@5|))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|)) (|BucketsLib.__default.BucketMapOfSeq#canCall| (BucketsLib.Bucket.keys |bucket#0@@5|) (BucketsLib.Bucket.msgs |bucket#0@@5|))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|)))) (and (=> (BucketsLib.__default.PreWFBucket |bucket#0@@5|) (and (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@5|)) (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@5|))) (|Map#Equal| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (BucketsLib.Bucket.keys |bucket#0@@5|) (BucketsLib.Bucket.msgs |bucket#0@@5|)) (BucketsLib.Bucket.b |bucket#0@@5|)))) (=> (and (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@5|)) (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@5|))) (|Map#Equal| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (BucketsLib.Bucket.keys |bucket#0@@5|) (BucketsLib.Bucket.msgs |bucket#0@@5|)) (BucketsLib.Bucket.b |bucket#0@@5|))) (BucketsLib.__default.PreWFBucket |bucket#0@@5|))))) :qid |BucketsL.146:25| :skolemid |3526| :pattern ( (BucketsLib.__default.PreWFBucket |bucket#0@@5|)) ))))
(assert  (=> true (forall ((|bucket#0@@6| T@U) ) (!  (=> (and (= (type |bucket#0@@6|) DatatypeTypeType) (or (|BucketsLib.__default.PreWFBucket#canCall| (Lit |bucket#0@@6|)) ($Is |bucket#0@@6| Tclass.BucketsLib.Bucket))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|))) (=> (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|)))) (|Seq#Length| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|))))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|))) (|BucketsLib.__default.BucketMapOfSeq#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|))) (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|))))) (and (=> (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@6|)) (and (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|)))) (|Seq#Length| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|))))) (|Map#Equal| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|))) (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|)))) (BucketsLib.Bucket.b (Lit |bucket#0@@6|))))) (=> (and (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|)))) (|Seq#Length| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|))))) (|Map#Equal| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|))) (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|)))) (BucketsLib.Bucket.b (Lit |bucket#0@@6|)))) (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@6|)))))) :qid |BucketsL.146:25| :weight 3 :skolemid |3527| :pattern ( (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@6|))) ))))
(assert  (=> true (forall ((|bucket#0@@7| T@U) ) (!  (=> (and (= (type |bucket#0@@7|) DatatypeTypeType) (or (|BucketsLib.__default.WFBucket#canCall| |bucket#0@@7|) ($Is |bucket#0@@7| Tclass.BucketsLib.Bucket))) true) :qid |BucketsL.152:22| :skolemid |3528| :pattern ( (BucketsLib.__default.WFBucket |bucket#0@@7|)) ))))
(assert (forall ((|bucket#0@@8| T@U) ) (!  (=> (and (= (type |bucket#0@@8|) DatatypeTypeType) ($Is |bucket#0@@8| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.WFBucket#requires| |bucket#0@@8|) true) (=> true (|BucketsLib.__default.WFBucket#requires| |bucket#0@@8|)))) :qid |BucketsL.152:22| :skolemid |3529| :pattern ( (|BucketsLib.__default.WFBucket#requires| |bucket#0@@8|)) )))
(assert  (=> true (forall ((|bucket#0@@9| T@U) ) (!  (=> (and (= (type |bucket#0@@9|) DatatypeTypeType) (or (|BucketsLib.__default.WFBucket#canCall| |bucket#0@@9|) ($Is |bucket#0@@9| Tclass.BucketsLib.Bucket))) (and (and (and (|BucketsLib.__default.PreWFBucket#canCall| |bucket#0@@9|) (=> (BucketsLib.__default.PreWFBucket |bucket#0@@9|) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@9|) (|BucketsLib.__default.WFBucketMap#canCall| (BucketsLib.Bucket.b |bucket#0@@9|))))) (=> (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@9|) (|BucketsLib.__default.WFBucketMap#canCall| (BucketsLib.Bucket.b |bucket#0@@9|))) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@9|))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@9|) (|BucketsLib.__default.WFMessageSeq#canCall| (BucketsLib.Bucket.msgs |bucket#0@@9|))))) (and (=> (BucketsLib.__default.WFBucket |bucket#0@@9|) (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@9|) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@9|))) (BucketsLib.__default.WFMessageSeq (BucketsLib.Bucket.msgs |bucket#0@@9|)))) (=> (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@9|) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@9|))) (BucketsLib.__default.WFMessageSeq (BucketsLib.Bucket.msgs |bucket#0@@9|))) (BucketsLib.__default.WFBucket |bucket#0@@9|))))) :qid |BucketsL.152:22| :skolemid |3530| :pattern ( (BucketsLib.__default.WFBucket |bucket#0@@9|)) ))))
(assert  (=> true (forall ((|bucket#0@@10| T@U) ) (!  (=> (and (= (type |bucket#0@@10|) DatatypeTypeType) (or (|BucketsLib.__default.WFBucket#canCall| (Lit |bucket#0@@10|)) ($Is |bucket#0@@10| Tclass.BucketsLib.Bucket))) (and (and (and (|BucketsLib.__default.PreWFBucket#canCall| (Lit |bucket#0@@10|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@10|))))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@10|)) (|BucketsLib.__default.WFBucketMap#canCall| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|))))))) (=> (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@10|)) (|BucketsLib.__default.WFBucketMap#canCall| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketMap (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|)))))))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@10|)) (|BucketsLib.__default.WFMessageSeq#canCall| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@10|))))))) (and (=> (BucketsLib.__default.WFBucket (Lit |bucket#0@@10|)) (U_2_bool (Lit (bool_2_U  (and (and (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@10|)) (BucketsLib.__default.WFBucketMap (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|))))) (BucketsLib.__default.WFMessageSeq (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@10|))))))))) (=> (U_2_bool (Lit (bool_2_U  (and (and (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@10|)) (BucketsLib.__default.WFBucketMap (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|))))) (BucketsLib.__default.WFMessageSeq (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@10|)))))))) (BucketsLib.__default.WFBucket (Lit |bucket#0@@10|)))))) :qid |BucketsL.152:22| :weight 3 :skolemid |3531| :pattern ( (BucketsLib.__default.WFBucket (Lit |bucket#0@@10|))) ))))
(assert  (=> true (forall ((|bucket#0@@11| T@U) ) (!  (=> (and (= (type |bucket#0@@11|) DatatypeTypeType) (or (|BucketsLib.__default.BucketWellMarshalled#canCall| |bucket#0@@11|) ($Is |bucket#0@@11| Tclass.BucketsLib.Bucket))) true) :qid |BucketsL.159:34| :skolemid |3532| :pattern ( (BucketsLib.__default.BucketWellMarshalled |bucket#0@@11|)) ))))
(assert (forall ((|bucket#0@@12| T@U) ) (!  (=> (and (= (type |bucket#0@@12|) DatatypeTypeType) ($Is |bucket#0@@12| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.BucketWellMarshalled#requires| |bucket#0@@12|) true) (=> true (|BucketsLib.__default.BucketWellMarshalled#requires| |bucket#0@@12|)))) :qid |BucketsL.159:34| :skolemid |3533| :pattern ( (|BucketsLib.__default.BucketWellMarshalled#requires| |bucket#0@@12|)) )))
(assert  (=> true (forall ((|bucket#0@@13| T@U) ) (!  (=> (and (= (type |bucket#0@@13|) DatatypeTypeType) (or (|BucketsLib.__default.BucketWellMarshalled#canCall| |bucket#0@@13|) ($Is |bucket#0@@13| Tclass.BucketsLib.Bucket))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@13|) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketsLib.Bucket.keys |bucket#0@@13|))) (and (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@13|) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketsLib.Bucket.keys |bucket#0@@13|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketsLib.Bucket.keys |bucket#0@@13|)) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@13|))))) :qid |BucketsL.159:34| :skolemid |3534| :pattern ( (BucketsLib.__default.BucketWellMarshalled |bucket#0@@13|)) ))))
(assert  (=> true (forall ((|bucket#0@@14| T@U) ) (!  (=> (and (= (type |bucket#0@@14|) DatatypeTypeType) (or (|BucketsLib.__default.BucketWellMarshalled#canCall| (Lit |bucket#0@@14|)) ($Is |bucket#0@@14| Tclass.BucketsLib.Bucket))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@14|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@14|))))) (and (=> (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@14|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@14|))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@14|)))) (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@14|)))))) :qid |BucketsL.159:34| :weight 3 :skolemid |3535| :pattern ( (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@14|))) ))))
(assert  (=> true (forall ((|blist#0| T@U) ) (!  (=> (and (= (type |blist#0|) (SeqType BoxType)) (or (|BucketsLib.__default.BucketListWellMarshalled#canCall| |blist#0|) ($Is |blist#0| (TSeq Tclass.BucketsLib.Bucket)))) true) :qid |BucketsL.181:38| :skolemid |3536| :pattern ( (BucketsLib.__default.BucketListWellMarshalled |blist#0|)) ))))
(assert (forall ((|blist#0@@0| T@U) ) (!  (=> (and (= (type |blist#0@@0|) (SeqType BoxType)) ($Is |blist#0@@0| (TSeq Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.BucketListWellMarshalled#requires| |blist#0@@0|) true) (=> true (|BucketsLib.__default.BucketListWellMarshalled#requires| |blist#0@@0|)))) :qid |BucketsL.181:38| :skolemid |3537| :pattern ( (|BucketsLib.__default.BucketListWellMarshalled#requires| |blist#0@@0|)) )))
(assert  (=> true (forall ((|blist#0@@1| T@U) ) (!  (=> (and (= (type |blist#0@@1|) (SeqType BoxType)) (or (|BucketsLib.__default.BucketListWellMarshalled#canCall| |blist#0@@1|) ($Is |blist#0@@1| (TSeq Tclass.BucketsLib.Bucket)))) (and (forall ((|i#0@@134| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@134|) (< |i#0@@134| (|Seq#Length| |blist#0@@1|))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@134|)))) :qid |BucketsL.183:12| :skolemid |3538| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@134|))) )) (and (=> (BucketsLib.__default.BucketListWellMarshalled |blist#0@@1|) (forall ((|i#0@@135| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@135|) (< |i#0@@135| (|Seq#Length| |blist#0@@1|))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@135|)))) :qid |BucketsL.183:12| :skolemid |3539| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@135|))) ))) (=> (forall ((|i#0@@136| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@136|) (< |i#0@@136| (|Seq#Length| |blist#0@@1|))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@136|)))) :qid |BucketsL.183:12| :skolemid |3539| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@136|))) )) (BucketsLib.__default.BucketListWellMarshalled |blist#0@@1|))))) :qid |BucketsL.181:38| :skolemid |3540| :pattern ( (BucketsLib.__default.BucketListWellMarshalled |blist#0@@1|)) ))))
(assert  (=> true (forall ((|blist#0@@2| T@U) ) (!  (=> (and (= (type |blist#0@@2|) (SeqType BoxType)) (or (|BucketsLib.__default.BucketListWellMarshalled#canCall| (Lit |blist#0@@2|)) ($Is |blist#0@@2| (TSeq Tclass.BucketsLib.Bucket)))) (and (forall ((|i#1@@66| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@66|) (< |i#1@@66| (|Seq#Length| (Lit |blist#0@@2|)))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@2|) |i#1@@66|)))) :qid |BucketsL.183:12| :skolemid |3541| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@2| |i#1@@66|))) )) (and (=> (BucketsLib.__default.BucketListWellMarshalled (Lit |blist#0@@2|)) (forall ((|i#1@@67| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@67|) (< |i#1@@67| (|Seq#Length| (Lit |blist#0@@2|)))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@2|) |i#1@@67|)))) :qid |BucketsL.183:12| :skolemid |3542| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@2| |i#1@@67|))) ))) (=> (forall ((|i#1@@68| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@68|) (< |i#1@@68| (|Seq#Length| (Lit |blist#0@@2|)))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@2|) |i#1@@68|)))) :qid |BucketsL.183:12| :skolemid |3542| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@2| |i#1@@68|))) )) (BucketsLib.__default.BucketListWellMarshalled (Lit |blist#0@@2|)))))) :qid |BucketsL.181:38| :weight 3 :skolemid |3543| :pattern ( (BucketsLib.__default.BucketListWellMarshalled (Lit |blist#0@@2|))) ))))
(assert (forall ((arg0@@509 T@U) (arg1@@274 T@U) ) (! (= (type (BucketsLib.__default.BInternal arg0@@509 arg1@@274)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BInternal| :pattern ( (BucketsLib.__default.BInternal arg0@@509 arg1@@274)) )))
(assert (forall (($ly@@560 T@U) (|m#0@@127| T@U) ) (!  (=> (and (= (type $ly@@560) LayerTypeType) (= (type |m#0@@127|) (MapType BoxType BoxType))) (= (BucketsLib.__default.BInternal ($LS $ly@@560) |m#0@@127|) (BucketsLib.__default.BInternal $ly@@560 |m#0@@127|))) :qid |BucketsL.186:12| :skolemid |3544| :pattern ( (BucketsLib.__default.BInternal ($LS $ly@@560) |m#0@@127|)) )))
(assert (forall (($ly@@561 T@U) (|m#0@@128| T@U) ) (!  (=> (and (= (type $ly@@561) LayerTypeType) (= (type |m#0@@128|) (MapType BoxType BoxType))) (= (BucketsLib.__default.BInternal $ly@@561 |m#0@@128|) (BucketsLib.__default.BInternal $LZ |m#0@@128|))) :qid |BucketsL.186:12| :skolemid |3545| :pattern ( (BucketsLib.__default.BInternal (AsFuelBottom $ly@@561) |m#0@@128|)) )))
(assert  (=> true (forall (($ly@@562 T@U) (|m#0@@129| T@U) ) (!  (=> (and (and (= (type $ly@@562) LayerTypeType) (= (type |m#0@@129|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.BInternal#canCall| |m#0@@129|) ($Is |m#0@@129| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (and (|Map#Equal| (BucketsLib.Bucket.b (BucketsLib.__default.BInternal $ly@@562 |m#0@@129|)) |m#0@@129|) (= (|Seq#Length| (BucketsLib.Bucket.keys (BucketsLib.__default.BInternal $ly@@562 |m#0@@129|))) (|Seq#Length| (BucketsLib.Bucket.msgs (BucketsLib.__default.BInternal $ly@@562 |m#0@@129|))))) ($Is (BucketsLib.__default.BInternal $ly@@562 |m#0@@129|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.186:12| :skolemid |3546| :pattern ( (BucketsLib.__default.BInternal $ly@@562 |m#0@@129|)) ))))
(assert (forall (($ly@@563 T@U) (|m#0@@130| T@U) ) (!  (=> (and (and (= (type $ly@@563) LayerTypeType) (= (type |m#0@@130|) (MapType BoxType BoxType))) ($Is |m#0@@130| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.BInternal#requires| $ly@@563 |m#0@@130|) true) (=> true (|BucketsLib.__default.BInternal#requires| $ly@@563 |m#0@@130|)))) :qid |BucketsL.186:12| :skolemid |3547| :pattern ( (|BucketsLib.__default.BInternal#requires| $ly@@563 |m#0@@130|)) )))
(assert  (=> true (forall (($ly@@564 T@U) (|m#0@@131| T@U) ) (!  (=> (and (and (= (type $ly@@564) LayerTypeType) (= (type |m#0@@131|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.BInternal#canCall| |m#0@@131|) ($Is |m#0@@131| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (=> (not (= (|Set#Card| (|Map#Domain| |m#0@@131|)) (LitInt 0))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| (|Map#Domain| |m#0@@131|)) (let ((|maxkey#0| (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (|Map#Domain| |m#0@@131|)))) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message |m#0@@131| ($Box |maxkey#0|)) (let ((|subm#0| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 |m#0@@131| ($Box |maxkey#0|)))) (and (|BucketsLib.__default.BInternal#canCall| |subm#0|) (let ((|subbucket#0| (BucketsLib.__default.BInternal $ly@@564 |subm#0|))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |subbucket#0|) (BucketsLib.Bucket.BucketMapWithSeq_q |subbucket#0|))))))))) (= (BucketsLib.__default.BInternal ($LS $ly@@564) |m#0@@131|) (ite (= (|Set#Card| (|Map#Domain| |m#0@@131|)) (LitInt 0)) (|#BucketsLib.Bucket.BucketMapWithSeq| |m#0@@131| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType))) (let ((|maxkey#0@@0| (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (|Map#Domain| |m#0@@131|)))) (let ((|maxmsg#0| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |m#0@@131|) ($Box |maxkey#0@@0|))))) (let ((|subm#0@@0| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 |m#0@@131| ($Box |maxkey#0@@0|)))) (let ((|subbucket#0@@0| (BucketsLib.__default.BInternal $ly@@564 |subm#0@@0|))) (|#BucketsLib.Bucket.BucketMapWithSeq| |m#0@@131| (|Seq#Append| (BucketsLib.Bucket.keys |subbucket#0@@0|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |maxkey#0@@0|))) (|Seq#Append| (BucketsLib.Bucket.msgs |subbucket#0@@0|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |maxmsg#0|)))))))))))) :qid |BucketsL.186:12| :skolemid |3548| :pattern ( (BucketsLib.__default.BInternal ($LS $ly@@564) |m#0@@131|)) ))))
(assert  (=> true (forall (($ly@@565 T@U) (|m#0@@132| T@U) ) (!  (=> (and (and (= (type $ly@@565) LayerTypeType) (= (type |m#0@@132|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.BInternal#canCall| (Lit |m#0@@132|)) ($Is |m#0@@132| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (=> (not (= (|Set#Card| (Lit (|Map#Domain| (Lit |m#0@@132|)))) (LitInt 0))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit (|Map#Domain| (Lit |m#0@@132|)))) (let ((|maxkey#1| (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit (|Map#Domain| (Lit |m#0@@132|)))))) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (Lit |m#0@@132|) ($Box |maxkey#1|)) (let ((|subm#1| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit |m#0@@132|) ($Box |maxkey#1|)))) (and (|BucketsLib.__default.BInternal#canCall| |subm#1|) (let ((|subbucket#1| (BucketsLib.__default.BInternal ($LS $ly@@565) |subm#1|))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |subbucket#1|) (BucketsLib.Bucket.BucketMapWithSeq_q |subbucket#1|))))))))) (= (BucketsLib.__default.BInternal ($LS $ly@@565) (Lit |m#0@@132|)) (ite (= (|Set#Card| (Lit (|Map#Domain| (Lit |m#0@@132|)))) (LitInt 0)) (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit |m#0@@132|) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType))) (let ((|maxkey#1@@0| (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit (|Map#Domain| (Lit |m#0@@132|)))))) (let ((|maxmsg#1| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |m#0@@132|)) ($Box |maxkey#1@@0|))))) (let ((|subm#1@@0| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit |m#0@@132|) ($Box |maxkey#1@@0|)))) (let ((|subbucket#1@@0| (BucketsLib.__default.BInternal ($LS $ly@@565) |subm#1@@0|))) (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit |m#0@@132|) (|Seq#Append| (BucketsLib.Bucket.keys |subbucket#1@@0|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |maxkey#1@@0|))) (|Seq#Append| (BucketsLib.Bucket.msgs |subbucket#1@@0|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |maxmsg#1|)))))))))))) :qid |BucketsL.186:12| :weight 3 :skolemid |3549| :pattern ( (BucketsLib.__default.BInternal ($LS $ly@@565) (Lit |m#0@@132|))) ))))
(assert (forall ((arg0@@510 T@U) (arg1@@275 T@U) ) (! (= (type (BucketsLib.__default.B arg0@@510 arg1@@275)) DatatypeTypeType) :qid |funType:BucketsLib.__default.B| :pattern ( (BucketsLib.__default.B arg0@@510 arg1@@275)) )))
(assert (forall (($ly@@566 T@U) (|m#0@@133| T@U) ) (!  (=> (and (= (type $ly@@566) LayerTypeType) (= (type |m#0@@133|) (MapType BoxType BoxType))) (= (BucketsLib.__default.B ($LS $ly@@566) |m#0@@133|) (BucketsLib.__default.B $ly@@566 |m#0@@133|))) :qid |BucketsL.228:22| :skolemid |3550| :pattern ( (BucketsLib.__default.B ($LS $ly@@566) |m#0@@133|)) )))
(assert (forall (($ly@@567 T@U) (|m#0@@134| T@U) ) (!  (=> (and (= (type $ly@@567) LayerTypeType) (= (type |m#0@@134|) (MapType BoxType BoxType))) (= (BucketsLib.__default.B $ly@@567 |m#0@@134|) (BucketsLib.__default.B $LZ |m#0@@134|))) :qid |BucketsL.228:22| :skolemid |3551| :pattern ( (BucketsLib.__default.B (AsFuelBottom $ly@@567) |m#0@@134|)) )))
(assert  (=> true (forall (($ly@@568 T@U) (|m#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@568) LayerTypeType) (= (type |m#0@@135|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.B#canCall| |m#0@@135|) ($Is |m#0@@135| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (and (and (and (and (|Map#Equal| (BucketsLib.Bucket.b (BucketsLib.__default.B $ly@@568 |m#0@@135|)) |m#0@@135|) (BucketsLib.__default.PreWFBucket (BucketsLib.__default.B $ly@@568 |m#0@@135|))) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.B $ly@@568 |m#0@@135|))) (= (|Seq#Length| (BucketsLib.Bucket.keys (BucketsLib.__default.B $ly@@568 |m#0@@135|))) (|Seq#Length| (BucketsLib.Bucket.msgs (BucketsLib.__default.B $ly@@568 |m#0@@135|))))) (=> (BucketsLib.__default.WFBucketMap |m#0@@135|) (BucketsLib.__default.WFBucket (BucketsLib.__default.B $ly@@568 |m#0@@135|)))) ($Is (BucketsLib.__default.B $ly@@568 |m#0@@135|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.228:22| :skolemid |3552| :pattern ( (BucketsLib.__default.B $ly@@568 |m#0@@135|)) ))))
(assert (forall (($ly@@569 T@U) (|m#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@569) LayerTypeType) (= (type |m#0@@136|) (MapType BoxType BoxType))) ($Is |m#0@@136| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.B#requires| $ly@@569 |m#0@@136|) true) (=> true (|BucketsLib.__default.B#requires| $ly@@569 |m#0@@136|)))) :qid |BucketsL.228:22| :skolemid |3553| :pattern ( (|BucketsLib.__default.B#requires| $ly@@569 |m#0@@136|)) )))
(assert  (=> true (forall (($ly@@570 T@U) (|m#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@570) LayerTypeType) (= (type |m#0@@137|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.B#canCall| |m#0@@137|) ($Is |m#0@@137| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (and (and (|BucketsLib.__default.WFBucketMap#canCall| |m#0@@137|) (=> (BucketsLib.__default.WFBucketMap |m#0@@137|) (|BucketsLib.__default.BInternal#canCall| |m#0@@137|))) (=> (not (BucketsLib.__default.WFBucketMap |m#0@@137|)) (|BucketsLib.__default.BInternal#canCall| |m#0@@137|))) (= (BucketsLib.__default.B ($LS $ly@@570) |m#0@@137|) (ite (BucketsLib.__default.WFBucketMap |m#0@@137|) (BucketsLib.__default.BInternal ($LS $LZ) |m#0@@137|) (BucketsLib.__default.BInternal ($LS $LZ) |m#0@@137|))))) :qid |BucketsL.228:22| :skolemid |3554| :pattern ( (BucketsLib.__default.B ($LS $ly@@570) |m#0@@137|)) ))))
(assert  (=> true (forall (($ly@@571 T@U) (|m#0@@138| T@U) ) (!  (=> (and (and (= (type $ly@@571) LayerTypeType) (= (type |m#0@@138|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.B#canCall| (Lit |m#0@@138|)) ($Is |m#0@@138| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (and (and (|BucketsLib.__default.WFBucketMap#canCall| (Lit |m#0@@138|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketMap (Lit |m#0@@138|))))) (|BucketsLib.__default.BInternal#canCall| (Lit |m#0@@138|)))) (=> (not (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketMap (Lit |m#0@@138|)))))) (|BucketsLib.__default.BInternal#canCall| (Lit |m#0@@138|)))) (= (BucketsLib.__default.B ($LS $ly@@571) (Lit |m#0@@138|)) (ite (BucketsLib.__default.WFBucketMap (Lit |m#0@@138|)) (BucketsLib.__default.BInternal ($LS $LZ) (Lit |m#0@@138|)) (BucketsLib.__default.BInternal ($LS $LZ) (Lit |m#0@@138|)))))) :qid |BucketsL.228:22| :weight 3 :skolemid |3555| :pattern ( (BucketsLib.__default.B ($LS $ly@@571) (Lit |m#0@@138|))) ))))
(assert  (and (= (type BucketsLib.__default.EmptyBucket) DatatypeTypeType) (= (type StartFuel_BucketsLib._default.B) LayerTypeType)))
(assert  (=> true (=> true (and (and (and (|BucketsLib.Bucket#Equal| BucketsLib.__default.EmptyBucket (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType)))) (BucketsLib.__default.WFBucket BucketsLib.__default.EmptyBucket)) (BucketsLib.__default.BucketWellMarshalled BucketsLib.__default.EmptyBucket)) ($Is BucketsLib.__default.EmptyBucket Tclass.BucketsLib.Bucket)))))
(assert  (=> |BucketsLib.__default.EmptyBucket#requires| true))
(assert  (=> true |BucketsLib.__default.EmptyBucket#requires|))
(assert  (=> true (=> true (= BucketsLib.__default.EmptyBucket (let ((|b#0@@133| (Lit (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)))))) |b#0@@133|)))))
(assert  (=> true (=> true (= BucketsLib.__default.EmptyBucket (let ((|b#1@@12| (Lit (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)))))) |b#1@@12|)))))
(assert (forall ((arg0@@511 T@U) (arg1@@276 T@U) ) (! (= (type (BucketsLib.__default.SingletonBucket arg0@@511 arg1@@276)) DatatypeTypeType) :qid |funType:BucketsLib.__default.SingletonBucket| :pattern ( (BucketsLib.__default.SingletonBucket arg0@@511 arg1@@276)) )))
(assert  (=> true (forall ((|key#0@@134| T@U) (|msg#0@@7| T@U) ) (!  (=> (and (and (= (type |key#0@@134|) (SeqType BoxType)) (= (type |msg#0@@7|) DatatypeTypeType)) (or (|BucketsLib.__default.SingletonBucket#canCall| |key#0@@134| |msg#0@@7|) (and ($Is |key#0@@134| Tclass.KeyType.Key) ($Is |msg#0@@7| Tclass.ValueMessage.Message)))) (and (and (and (BucketsLib.__default.PreWFBucket (BucketsLib.__default.SingletonBucket |key#0@@134| |msg#0@@7|)) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SingletonBucket |key#0@@134| |msg#0@@7|))) (=> (not (|ValueMessage.Message#Equal| |msg#0@@7| ValueMessage.__default.IdentityMessage)) (BucketsLib.__default.WFBucket (BucketsLib.__default.SingletonBucket |key#0@@134| |msg#0@@7|)))) ($Is (BucketsLib.__default.SingletonBucket |key#0@@134| |msg#0@@7|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.255:28| :skolemid |3556| :pattern ( (BucketsLib.__default.SingletonBucket |key#0@@134| |msg#0@@7|)) ))))
(assert (forall ((|key#0@@135| T@U) (|msg#0@@8| T@U) ) (!  (=> (and (and (= (type |key#0@@135|) (SeqType BoxType)) (= (type |msg#0@@8|) DatatypeTypeType)) (and ($Is |key#0@@135| Tclass.KeyType.Key) ($Is |msg#0@@8| Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.SingletonBucket#requires| |key#0@@135| |msg#0@@8|) true) (=> true (|BucketsLib.__default.SingletonBucket#requires| |key#0@@135| |msg#0@@8|)))) :qid |BucketsL.255:28| :skolemid |3557| :pattern ( (|BucketsLib.__default.SingletonBucket#requires| |key#0@@135| |msg#0@@8|)) )))
(assert  (=> true (forall ((|key#0@@136| T@U) (|msg#0@@9| T@U) ) (!  (=> (and (and (= (type |key#0@@136|) (SeqType BoxType)) (= (type |msg#0@@9|) DatatypeTypeType)) (or (|BucketsLib.__default.SingletonBucket#canCall| |key#0@@136| |msg#0@@9|) (and ($Is |key#0@@136| Tclass.KeyType.Key) ($Is |msg#0@@9| Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SingletonBucket |key#0@@136| |msg#0@@9|) (|#BucketsLib.Bucket.BucketMapWithSeq| (|Map#Build| (|Map#Empty| BoxType BoxType) ($Box |key#0@@136|) ($Box |msg#0@@9|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@@136|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@@9|))))) :qid |BucketsL.255:28| :skolemid |3558| :pattern ( (BucketsLib.__default.SingletonBucket |key#0@@136| |msg#0@@9|)) ))))
(assert  (=> true (forall ((|key#0@@137| T@U) (|msg#0@@10| T@U) ) (!  (=> (and (and (= (type |key#0@@137|) (SeqType BoxType)) (= (type |msg#0@@10|) DatatypeTypeType)) (or (|BucketsLib.__default.SingletonBucket#canCall| (Lit |key#0@@137|) (Lit |msg#0@@10|)) (and ($Is |key#0@@137| Tclass.KeyType.Key) ($Is |msg#0@@10| Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SingletonBucket (Lit |key#0@@137|) (Lit |msg#0@@10|)) (Lit (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit (|Map#Build| (|Map#Empty| BoxType BoxType) ($Box (Lit |key#0@@137|)) ($Box (Lit |msg#0@@10|)))) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |key#0@@137|)))) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |msg#0@@10|)))))))) :qid |BucketsL.255:28| :weight 3 :skolemid |3559| :pattern ( (BucketsLib.__default.SingletonBucket (Lit |key#0@@137|) (Lit |msg#0@@10|))) ))))
(assert (forall ((arg0@@512 T@U) ) (! (= (type (BucketsLib.__default.BucketDropLast arg0@@512)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketDropLast| :pattern ( (BucketsLib.__default.BucketDropLast arg0@@512)) )))
(assert  (=> true (forall ((|bucket#0@@15| T@U) ) (!  (=> (and (= (type |bucket#0@@15|) DatatypeTypeType) (or (|BucketsLib.__default.BucketDropLast#canCall| |bucket#0@@15|) (and ($Is |bucket#0@@15| Tclass.BucketsLib.Bucket) (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@15|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@15|)) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@15|))))))) ($Is (BucketsLib.__default.BucketDropLast |bucket#0@@15|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.266:27| :skolemid |3560| :pattern ( (BucketsLib.__default.BucketDropLast |bucket#0@@15|)) ))))
(assert (forall ((|bucket#0@@16| T@U) ) (!  (=> (and (= (type |bucket#0@@16|) DatatypeTypeType) ($Is |bucket#0@@16| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.BucketDropLast#requires| |bucket#0@@16|) (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@16|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@16|)) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@16|))))) (=> (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@16|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@16|)) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@16|)))) (|BucketsLib.__default.BucketDropLast#requires| |bucket#0@@16|)))) :qid |BucketsL.266:27| :skolemid |3561| :pattern ( (|BucketsLib.__default.BucketDropLast#requires| |bucket#0@@16|)) )))
(assert  (=> true (forall ((|bucket#0@@17| T@U) ) (!  (=> (and (= (type |bucket#0@@17|) DatatypeTypeType) (or (|BucketsLib.__default.BucketDropLast#canCall| |bucket#0@@17|) (and ($Is |bucket#0@@17| Tclass.BucketsLib.Bucket) (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@17|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@17|)) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@17|))))))) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@17|) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@17|) (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|)))) (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BucketsLib.Bucket.b |bucket#0@@17|) (Sequences.__default.Last Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|)))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@17|) (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@17|) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (BucketsLib.Bucket.msgs |bucket#0@@17|))))) (= (BucketsLib.__default.BucketDropLast |bucket#0@@17|) (let ((|submap#0| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (BucketsLib.Bucket.b |bucket#0@@17|) (Sequences.__default.Last Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|))))) (|#BucketsLib.Bucket.BucketMapWithSeq| |submap#0| (Sequences.__default.DropLast Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|)) (Sequences.__default.DropLast Tclass.ValueMessage.Message (BucketsLib.Bucket.msgs |bucket#0@@17|))))))) :qid |BucketsL.266:27| :skolemid |3562| :pattern ( (BucketsLib.__default.BucketDropLast |bucket#0@@17|)) ))))
(assert  (=> true (forall ((|bucket#0@@18| T@U) ) (!  (=> (and (= (type |bucket#0@@18|) DatatypeTypeType) (or (|BucketsLib.__default.BucketDropLast#canCall| (Lit |bucket#0@@18|)) (and ($Is |bucket#0@@18| Tclass.BucketsLib.Bucket) (and (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@18|))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@18|)))))) (< 0 (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|))))))))) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@18|)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@18|)) (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|)))))) (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@18|))) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|))))))))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@18|)) (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|))))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@18|)) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@18|))))))) (= (BucketsLib.__default.BucketDropLast (Lit |bucket#0@@18|)) (let ((|submap#1| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@18|))) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|)))))))))) (|#BucketsLib.Bucket.BucketMapWithSeq| |submap#1| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|))))) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@18|)))))))))) :qid |BucketsL.266:27| :weight 3 :skolemid |3563| :pattern ( (BucketsLib.__default.BucketDropLast (Lit |bucket#0@@18|))) ))))
(assert  (=> true (forall ((|bucket#0@@19| T@U) (|pivots#0@@15| T@U) (|i#0@@137| Int) ) (!  (=> (and (and (= (type |bucket#0@@19|) DatatypeTypeType) (= (type |pivots#0@@15|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketAt#canCall| |bucket#0@@19| |pivots#0@@15| |i#0@@137|) (and (and ($Is |bucket#0@@19| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@15| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@15|)))) true) :qid |BucketsL.425:24| :skolemid |3564| :pattern ( (BucketsLib.__default.WFBucketAt |bucket#0@@19| |pivots#0@@15| |i#0@@137|)) ))))
(assert (forall ((|bucket#0@@20| T@U) (|pivots#0@@16| T@U) (|i#0@@138| Int) ) (!  (=> (and (and (= (type |bucket#0@@20|) DatatypeTypeType) (= (type |pivots#0@@16|) (SeqType BoxType))) (and ($Is |bucket#0@@20| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@16| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.WFBucketAt#requires| |bucket#0@@20| |pivots#0@@16| |i#0@@138|) (PivotsLib.__default.WFPivots |pivots#0@@16|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@16|) (|BucketsLib.__default.WFBucketAt#requires| |bucket#0@@20| |pivots#0@@16| |i#0@@138|)))) :qid |BucketsL.425:24| :skolemid |3565| :pattern ( (|BucketsLib.__default.WFBucketAt#requires| |bucket#0@@20| |pivots#0@@16| |i#0@@138|)) )))
(assert  (=> true (forall ((|bucket#0@@21| T@U) (|pivots#0@@17| T@U) (|i#0@@139| Int) ) (!  (=> (and (and (= (type |bucket#0@@21|) DatatypeTypeType) (= (type |pivots#0@@17|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketAt#canCall| |bucket#0@@21| |pivots#0@@17| |i#0@@139|) (and (and ($Is |bucket#0@@21| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@17| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@17|)))) (and (and (and (|BucketsLib.__default.WFBucket#canCall| |bucket#0@@21|) (=> (BucketsLib.__default.WFBucket |bucket#0@@21|) (forall ((|key#0@@138| T@U) ) (!  (=> (and (= (type |key#0@@138|) (SeqType BoxType)) ($Is |key#0@@138| (TSeq Tclass.NativeTypes.byte))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@138|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@138|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) |ValueMessage.__default.IdentityMessage#canCall|))))) :qid |BucketsL.429:16| :skolemid |3566| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@138|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@138|))) )))) (=> (and (forall ((|key#0@@139| T@U) ) (!  (=> (and (= (type |key#0@@139|) (SeqType BoxType)) ($Is |key#0@@139| (TSeq Tclass.NativeTypes.byte))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@139|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@139|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) |ValueMessage.__default.IdentityMessage#canCall|))))) :qid |BucketsL.429:16| :skolemid |3568| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@139|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@139|))) )) (forall ((|key#0@@140| T@U) ) (!  (=> (= (type |key#0@@140|) (SeqType BoxType)) (=> (and ($Is |key#0@@140| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@140|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@140|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |3569| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@140|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@140|))) ))) (forall ((|key#1@@19| T@U) ) (!  (=> (and (= (type |key#1@@19|) (SeqType BoxType)) ($Is |key#1@@19| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@19|))) (|PivotsLib.__default.Route#canCall| |pivots#0@@17| |key#1@@19|)))) :qid |BucketsL.430:16| :skolemid |3567| :pattern ( (PivotsLib.__default.Route |pivots#0@@17| |key#1@@19|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@19|))) )))) (and (=> (BucketsLib.__default.WFBucketAt |bucket#0@@21| |pivots#0@@17| |i#0@@139|) (and (and (BucketsLib.__default.WFBucket |bucket#0@@21|) (forall ((|key#0@@141| T@U) ) (!  (=> (= (type |key#0@@141|) (SeqType BoxType)) (=> (and ($Is |key#0@@141| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@141|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@141|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |3570| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@141|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@141|))) ))) (forall ((|key#1@@20| T@U) ) (!  (=> (= (type |key#1@@20|) (SeqType BoxType)) (=> (and ($Is |key#1@@20| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@20|)))) (= (PivotsLib.__default.Route |pivots#0@@17| |key#1@@20|) |i#0@@139|))) :qid |BucketsL.430:16| :skolemid |3571| :pattern ( (PivotsLib.__default.Route |pivots#0@@17| |key#1@@20|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@20|))) )))) (=> (and (and (BucketsLib.__default.WFBucket |bucket#0@@21|) (forall ((|key#0@@142| T@U) ) (!  (=> (= (type |key#0@@142|) (SeqType BoxType)) (=> (and ($Is |key#0@@142| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@142|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@142|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |3570| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@142|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@142|))) ))) (forall ((|key#1@@21| T@U) ) (!  (=> (= (type |key#1@@21|) (SeqType BoxType)) (=> (and ($Is |key#1@@21| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@21|)))) (= (PivotsLib.__default.Route |pivots#0@@17| |key#1@@21|) |i#0@@139|))) :qid |BucketsL.430:16| :skolemid |3571| :pattern ( (PivotsLib.__default.Route |pivots#0@@17| |key#1@@21|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@21|))) ))) (BucketsLib.__default.WFBucketAt |bucket#0@@21| |pivots#0@@17| |i#0@@139|))))) :qid |BucketsL.425:24| :skolemid |3572| :pattern ( (BucketsLib.__default.WFBucketAt |bucket#0@@21| |pivots#0@@17| |i#0@@139|)) ))))
(assert  (=> true (forall ((|bucket#0@@22| T@U) (|pivots#0@@18| T@U) (|i#0@@140| Int) ) (!  (=> (and (and (= (type |bucket#0@@22|) DatatypeTypeType) (= (type |pivots#0@@18|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketAt#canCall| (Lit |bucket#0@@22|) (Lit |pivots#0@@18|) (LitInt |i#0@@140|)) (and (and ($Is |bucket#0@@22| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@18| (TSeq Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@18|)))))))) (and (and (and (|BucketsLib.__default.WFBucket#canCall| (Lit |bucket#0@@22|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |bucket#0@@22|))))) (forall ((|key#2@@1| T@U) ) (!  (=> (and (= (type |key#2@@1|) (SeqType BoxType)) ($Is |key#2@@1| (TSeq Tclass.NativeTypes.byte))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2@@1|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2@@1|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) |ValueMessage.__default.IdentityMessage#canCall|))))) :qid |BucketsL.429:16| :skolemid |3573| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@1|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@1|))) )))) (=> (and (forall ((|key#2@@2| T@U) ) (!  (=> (and (= (type |key#2@@2|) (SeqType BoxType)) ($Is |key#2@@2| (TSeq Tclass.NativeTypes.byte))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2@@2|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2@@2|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) |ValueMessage.__default.IdentityMessage#canCall|))))) :qid |BucketsL.429:16| :skolemid |3575| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@2|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@2|))) )) (forall ((|key#2@@3| T@U) ) (!  (=> (= (type |key#2@@3|) (SeqType BoxType)) (=> (and ($Is |key#2@@3| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2@@3|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2@@3|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |3576| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@3|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@3|))) ))) (forall ((|key#3@@1| T@U) ) (!  (=> (and (= (type |key#3@@1|) (SeqType BoxType)) ($Is |key#3@@1| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#3@@1|))) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@18|) |key#3@@1|)))) :qid |BucketsL.430:16| :skolemid |3574| :pattern ( (PivotsLib.__default.Route |pivots#0@@18| |key#3@@1|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#3@@1|))) )))) (and (=> (BucketsLib.__default.WFBucketAt (Lit |bucket#0@@22|) (Lit |pivots#0@@18|) (LitInt |i#0@@140|)) (and (and (BucketsLib.__default.WFBucket (Lit |bucket#0@@22|)) (forall ((|key#2@@4| T@U) ) (!  (=> (= (type |key#2@@4|) (SeqType BoxType)) (=> (and ($Is |key#2@@4| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2@@4|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2@@4|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |3577| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@4|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@4|))) ))) (forall ((|key#3@@2| T@U) ) (!  (=> (= (type |key#3@@2|) (SeqType BoxType)) (=> (and ($Is |key#3@@2| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#3@@2|)))) (= (PivotsLib.__default.Route (Lit |pivots#0@@18|) |key#3@@2|) (LitInt |i#0@@140|)))) :qid |BucketsL.430:16| :skolemid |3578| :pattern ( (PivotsLib.__default.Route |pivots#0@@18| |key#3@@2|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#3@@2|))) )))) (=> (and (and (BucketsLib.__default.WFBucket (Lit |bucket#0@@22|)) (forall ((|key#2@@5| T@U) ) (!  (=> (= (type |key#2@@5|) (SeqType BoxType)) (=> (and ($Is |key#2@@5| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2@@5|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2@@5|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |3577| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@5|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@5|))) ))) (forall ((|key#3@@3| T@U) ) (!  (=> (= (type |key#3@@3|) (SeqType BoxType)) (=> (and ($Is |key#3@@3| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#3@@3|)))) (= (PivotsLib.__default.Route (Lit |pivots#0@@18|) |key#3@@3|) (LitInt |i#0@@140|)))) :qid |BucketsL.430:16| :skolemid |3578| :pattern ( (PivotsLib.__default.Route |pivots#0@@18| |key#3@@3|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#3@@3|))) ))) (BucketsLib.__default.WFBucketAt (Lit |bucket#0@@22|) (Lit |pivots#0@@18|) (LitInt |i#0@@140|)))))) :qid |BucketsL.425:24| :weight 3 :skolemid |3579| :pattern ( (BucketsLib.__default.WFBucketAt (Lit |bucket#0@@22|) (Lit |pivots#0@@18|) (LitInt |i#0@@140|))) ))))
(assert  (=> true (forall ((|blist#0@@3| T@U) (|pivots#0@@19| T@U) ) (!  (=> (and (and (= (type |blist#0@@3|) (SeqType BoxType)) (= (type |pivots#0@@19|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketList#canCall| |blist#0@@3| |pivots#0@@19|) (and ($Is |blist#0@@3| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@19| (TSeq Tclass.KeyType.Key))))) true) :qid |BucketsL.467:26| :skolemid |3580| :pattern ( (BucketsLib.__default.WFBucketList |blist#0@@3| |pivots#0@@19|)) ))))
(assert (forall ((|blist#0@@4| T@U) (|pivots#0@@20| T@U) ) (!  (=> (and (and (= (type |blist#0@@4|) (SeqType BoxType)) (= (type |pivots#0@@20|) (SeqType BoxType))) (and ($Is |blist#0@@4| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@20| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.WFBucketList#requires| |blist#0@@4| |pivots#0@@20|) true) (=> true (|BucketsLib.__default.WFBucketList#requires| |blist#0@@4| |pivots#0@@20|)))) :qid |BucketsL.467:26| :skolemid |3581| :pattern ( (|BucketsLib.__default.WFBucketList#requires| |blist#0@@4| |pivots#0@@20|)) )))
(assert  (=> true (forall ((|blist#0@@5| T@U) (|pivots#0@@21| T@U) ) (!  (=> (and (and (= (type |blist#0@@5|) (SeqType BoxType)) (= (type |pivots#0@@21|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketList#canCall| |blist#0@@5| |pivots#0@@21|) (and ($Is |blist#0@@5| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@21| (TSeq Tclass.KeyType.Key))))) (and (and (|PivotsLib.__default.WFPivots#canCall| |pivots#0@@21|) (=> (= (|Seq#Length| |blist#0@@5|) (+ (|Seq#Length| |pivots#0@@21|) 1)) (forall ((|i#0@@141| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@141|) (< |i#0@@141| (|Seq#Length| |blist#0@@5|))) (|BucketsLib.__default.WFBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@141|)))) :qid |BucketsL.471:16| :skolemid |3582| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@141|))) )))) (and (=> (BucketsLib.__default.WFBucketList |blist#0@@5| |pivots#0@@21|) (and (and (PivotsLib.__default.WFPivots |pivots#0@@21|) (= (|Seq#Length| |blist#0@@5|) (+ (|Seq#Length| |pivots#0@@21|) 1))) (forall ((|i#0@@142| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@142|) (< |i#0@@142| (|Seq#Length| |blist#0@@5|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@142|)))) :qid |BucketsL.471:16| :skolemid |3583| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@142|))) )))) (=> (and (and (PivotsLib.__default.WFPivots |pivots#0@@21|) (= (|Seq#Length| |blist#0@@5|) (+ (|Seq#Length| |pivots#0@@21|) 1))) (forall ((|i#0@@143| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@143|) (< |i#0@@143| (|Seq#Length| |blist#0@@5|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@143|)))) :qid |BucketsL.471:16| :skolemid |3583| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@143|))) ))) (BucketsLib.__default.WFBucketList |blist#0@@5| |pivots#0@@21|))))) :qid |BucketsL.467:26| :skolemid |3584| :pattern ( (BucketsLib.__default.WFBucketList |blist#0@@5| |pivots#0@@21|)) ))))
(assert  (=> true (forall ((|blist#0@@6| T@U) (|pivots#0@@22| T@U) ) (!  (=> (and (and (= (type |blist#0@@6|) (SeqType BoxType)) (= (type |pivots#0@@22|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketList#canCall| (Lit |blist#0@@6|) (Lit |pivots#0@@22|)) (and ($Is |blist#0@@6| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@22| (TSeq Tclass.KeyType.Key))))) (and (and (|PivotsLib.__default.WFPivots#canCall| (Lit |pivots#0@@22|)) (=> (= (|Seq#Length| (Lit |blist#0@@6|)) (+ (|Seq#Length| (Lit |pivots#0@@22|)) 1)) (forall ((|i#1@@69| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@69|) (< |i#1@@69| (|Seq#Length| (Lit |blist#0@@6|)))) (|BucketsLib.__default.WFBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@6|) |i#1@@69|)))) :qid |BucketsL.471:16| :skolemid |3585| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@6| |i#1@@69|))) )))) (and (=> (BucketsLib.__default.WFBucketList (Lit |blist#0@@6|) (Lit |pivots#0@@22|)) (and (and (PivotsLib.__default.WFPivots (Lit |pivots#0@@22|)) (= (|Seq#Length| (Lit |blist#0@@6|)) (+ (|Seq#Length| (Lit |pivots#0@@22|)) 1))) (forall ((|i#1@@70| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@70|) (< |i#1@@70| (|Seq#Length| (Lit |blist#0@@6|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@6|) |i#1@@70|)))) :qid |BucketsL.471:16| :skolemid |3586| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@6| |i#1@@70|))) )))) (=> (and (and (PivotsLib.__default.WFPivots (Lit |pivots#0@@22|)) (= (|Seq#Length| (Lit |blist#0@@6|)) (+ (|Seq#Length| (Lit |pivots#0@@22|)) 1))) (forall ((|i#1@@71| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@71|) (< |i#1@@71| (|Seq#Length| (Lit |blist#0@@6|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@6|) |i#1@@71|)))) :qid |BucketsL.471:16| :skolemid |3586| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@6| |i#1@@71|))) ))) (BucketsLib.__default.WFBucketList (Lit |blist#0@@6|) (Lit |pivots#0@@22|)))))) :qid |BucketsL.467:26| :weight 3 :skolemid |3587| :pattern ( (BucketsLib.__default.WFBucketList (Lit |blist#0@@6|) (Lit |pivots#0@@22|))) ))))
(assert  (=> true (forall ((|blist#0@@7| T@U) (|pivots#0@@23| T@U) ) (!  (=> (and (and (= (type |blist#0@@7|) (SeqType BoxType)) (= (type |pivots#0@@23|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketListProper#canCall| |blist#0@@7| |pivots#0@@23|) (and ($Is |blist#0@@7| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@23| (TSeq Tclass.KeyType.Key))))) true) :qid |BucketsL.474:32| :skolemid |3588| :pattern ( (BucketsLib.__default.WFBucketListProper |blist#0@@7| |pivots#0@@23|)) ))))
(assert (forall ((|blist#0@@8| T@U) (|pivots#0@@24| T@U) ) (!  (=> (and (and (= (type |blist#0@@8|) (SeqType BoxType)) (= (type |pivots#0@@24|) (SeqType BoxType))) (and ($Is |blist#0@@8| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@24| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.WFBucketListProper#requires| |blist#0@@8| |pivots#0@@24|) true) (=> true (|BucketsLib.__default.WFBucketListProper#requires| |blist#0@@8| |pivots#0@@24|)))) :qid |BucketsL.474:32| :skolemid |3589| :pattern ( (|BucketsLib.__default.WFBucketListProper#requires| |blist#0@@8| |pivots#0@@24|)) )))
(assert  (=> true (forall ((|blist#0@@9| T@U) (|pivots#0@@25| T@U) ) (!  (=> (and (and (= (type |blist#0@@9|) (SeqType BoxType)) (= (type |pivots#0@@25|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketListProper#canCall| |blist#0@@9| |pivots#0@@25|) (and ($Is |blist#0@@9| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@25| (TSeq Tclass.KeyType.Key))))) (and (and (|BucketsLib.__default.WFBucketList#canCall| |blist#0@@9| |pivots#0@@25|) (=> (BucketsLib.__default.WFBucketList |blist#0@@9| |pivots#0@@25|) (forall ((|i#0@@144| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@144|) (< |i#0@@144| (|Seq#Length| |blist#0@@9|))) (|BucketsLib.__default.WFBucketAt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@144|)) |pivots#0@@25| |i#0@@144|)) :qid |BucketsL.477:16| :skolemid |3590| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@144|))) )))) (and (=> (BucketsLib.__default.WFBucketListProper |blist#0@@9| |pivots#0@@25|) (and (BucketsLib.__default.WFBucketList |blist#0@@9| |pivots#0@@25|) (forall ((|i#0@@145| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@145|) (< |i#0@@145| (|Seq#Length| |blist#0@@9|))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@145|)) |pivots#0@@25| |i#0@@145|)) :qid |BucketsL.477:16| :skolemid |3591| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@145|))) )))) (=> (and (BucketsLib.__default.WFBucketList |blist#0@@9| |pivots#0@@25|) (forall ((|i#0@@146| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@146|) (< |i#0@@146| (|Seq#Length| |blist#0@@9|))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@146|)) |pivots#0@@25| |i#0@@146|)) :qid |BucketsL.477:16| :skolemid |3591| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@146|))) ))) (BucketsLib.__default.WFBucketListProper |blist#0@@9| |pivots#0@@25|))))) :qid |BucketsL.474:32| :skolemid |3592| :pattern ( (BucketsLib.__default.WFBucketListProper |blist#0@@9| |pivots#0@@25|)) ))))
(assert  (=> true (forall ((|blist#0@@10| T@U) (|pivots#0@@26| T@U) ) (!  (=> (and (and (= (type |blist#0@@10|) (SeqType BoxType)) (= (type |pivots#0@@26|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketListProper#canCall| (Lit |blist#0@@10|) (Lit |pivots#0@@26|)) (and ($Is |blist#0@@10| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@26| (TSeq Tclass.KeyType.Key))))) (and (and (|BucketsLib.__default.WFBucketList#canCall| (Lit |blist#0@@10|) (Lit |pivots#0@@26|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@10|) (Lit |pivots#0@@26|))))) (forall ((|i#1@@72| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@72|) (< |i#1@@72| (|Seq#Length| (Lit |blist#0@@10|)))) (|BucketsLib.__default.WFBucketAt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@10|) |i#1@@72|)) (Lit |pivots#0@@26|) |i#1@@72|)) :qid |BucketsL.477:16| :skolemid |3593| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@10| |i#1@@72|))) )))) (and (=> (BucketsLib.__default.WFBucketListProper (Lit |blist#0@@10|) (Lit |pivots#0@@26|)) (and (BucketsLib.__default.WFBucketList (Lit |blist#0@@10|) (Lit |pivots#0@@26|)) (forall ((|i#1@@73| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@73|) (< |i#1@@73| (|Seq#Length| (Lit |blist#0@@10|)))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@10|) |i#1@@73|)) (Lit |pivots#0@@26|) |i#1@@73|)) :qid |BucketsL.477:16| :skolemid |3594| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@10| |i#1@@73|))) )))) (=> (and (BucketsLib.__default.WFBucketList (Lit |blist#0@@10|) (Lit |pivots#0@@26|)) (forall ((|i#1@@74| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@74|) (< |i#1@@74| (|Seq#Length| (Lit |blist#0@@10|)))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@10|) |i#1@@74|)) (Lit |pivots#0@@26|) |i#1@@74|)) :qid |BucketsL.477:16| :skolemid |3594| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@10| |i#1@@74|))) ))) (BucketsLib.__default.WFBucketListProper (Lit |blist#0@@10|) (Lit |pivots#0@@26|)))))) :qid |BucketsL.474:32| :weight 3 :skolemid |3595| :pattern ( (BucketsLib.__default.WFBucketListProper (Lit |blist#0@@10|) (Lit |pivots#0@@26|))) ))))
(assert (forall ((arg0@@513 T@U) (arg1@@277 T@U) ) (! (= (type (BucketsLib.__default.BucketGet arg0@@513 arg1@@277)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketGet| :pattern ( (BucketsLib.__default.BucketGet arg0@@513 arg1@@277)) )))
(assert  (=> true (forall ((|bucket#0@@23| T@U) (|key#0@@143| T@U) ) (!  (=> (and (and (= (type |bucket#0@@23|) DatatypeTypeType) (= (type |key#0@@143|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketGet#canCall| |bucket#0@@23| |key#0@@143|) (and ($Is |bucket#0@@23| Tclass.BucketsLib.Bucket) ($Is |key#0@@143| Tclass.KeyType.Key)))) ($Is (BucketsLib.__default.BucketGet |bucket#0@@23| |key#0@@143|) Tclass.ValueMessage.Message)) :qid |BucketsL.480:22| :skolemid |3596| :pattern ( (BucketsLib.__default.BucketGet |bucket#0@@23| |key#0@@143|)) ))))
(assert (forall ((|bucket#0@@24| T@U) (|key#0@@144| T@U) ) (!  (=> (and (and (= (type |bucket#0@@24|) DatatypeTypeType) (= (type |key#0@@144|) (SeqType BoxType))) (and ($Is |bucket#0@@24| Tclass.BucketsLib.Bucket) ($Is |key#0@@144| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.BucketGet#requires| |bucket#0@@24| |key#0@@144|) true) (=> true (|BucketsLib.__default.BucketGet#requires| |bucket#0@@24| |key#0@@144|)))) :qid |BucketsL.480:22| :skolemid |3597| :pattern ( (|BucketsLib.__default.BucketGet#requires| |bucket#0@@24| |key#0@@144|)) )))
(assert  (=> true (forall ((|bucket#0@@25| T@U) (|key#0@@145| T@U) ) (!  (=> (and (and (= (type |bucket#0@@25|) DatatypeTypeType) (= (type |key#0@@145|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketGet#canCall| |bucket#0@@25| |key#0@@145|) (and ($Is |bucket#0@@25| Tclass.BucketsLib.Bucket) ($Is |key#0@@145| Tclass.KeyType.Key)))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@25|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@25|)) ($Box |key#0@@145|))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@25|))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@25|)) ($Box |key#0@@145|)))) |ValueMessage.__default.IdentityMessage#canCall|)) (= (BucketsLib.__default.BucketGet |bucket#0@@25| |key#0@@145|) (ite (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@25|)) ($Box |key#0@@145|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@25|)) ($Box |key#0@@145|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.480:22| :skolemid |3598| :pattern ( (BucketsLib.__default.BucketGet |bucket#0@@25| |key#0@@145|)) ))))
(assert  (=> true (forall ((|bucket#0@@26| T@U) (|key#0@@146| T@U) ) (!  (=> (and (and (= (type |bucket#0@@26|) DatatypeTypeType) (= (type |key#0@@146|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketGet#canCall| (Lit |bucket#0@@26|) (Lit |key#0@@146|)) (and ($Is |bucket#0@@26| Tclass.BucketsLib.Bucket) ($Is |key#0@@146| Tclass.KeyType.Key)))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@26|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@26|))) ($Box |key#0@@146|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@26|)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@26|))) ($Box |key#0@@146|)))) |ValueMessage.__default.IdentityMessage#canCall|)) (= (BucketsLib.__default.BucketGet (Lit |bucket#0@@26|) (Lit |key#0@@146|)) (ite (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@26|))) ($Box |key#0@@146|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@26|)))) ($Box (Lit |key#0@@146|)))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.480:22| :weight 3 :skolemid |3599| :pattern ( (BucketsLib.__default.BucketGet (Lit |bucket#0@@26|) (Lit |key#0@@146|))) ))))
(assert (forall ((arg0@@514 T@U) (arg1@@278 T@U) (arg2@@187 T@U) ) (! (= (type (BucketsLib.__default.BucketListGet arg0@@514 arg1@@278 arg2@@187)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketListGet| :pattern ( (BucketsLib.__default.BucketListGet arg0@@514 arg1@@278 arg2@@187)) )))
(assert  (=> true (forall ((|blist#0@@11| T@U) (|pivots#0@@27| T@U) (|key#0@@147| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@11|) (SeqType BoxType)) (= (type |pivots#0@@27|) (SeqType BoxType))) (= (type |key#0@@147|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListGet#canCall| |blist#0@@11| |pivots#0@@27| |key#0@@147|) (and (and (and ($Is |blist#0@@11| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@27| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@147| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucketList |blist#0@@11| |pivots#0@@27|)))) ($Is (BucketsLib.__default.BucketListGet |blist#0@@11| |pivots#0@@27| |key#0@@147|) Tclass.ValueMessage.Message)) :qid |BucketsL.485:26| :skolemid |3600| :pattern ( (BucketsLib.__default.BucketListGet |blist#0@@11| |pivots#0@@27| |key#0@@147|)) ))))
(assert (forall ((|blist#0@@12| T@U) (|pivots#0@@28| T@U) (|key#0@@148| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@12|) (SeqType BoxType)) (= (type |pivots#0@@28|) (SeqType BoxType))) (= (type |key#0@@148|) (SeqType BoxType))) (and (and ($Is |blist#0@@12| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@28| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@148| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.BucketListGet#requires| |blist#0@@12| |pivots#0@@28| |key#0@@148|) (BucketsLib.__default.WFBucketList |blist#0@@12| |pivots#0@@28|)) (=> (BucketsLib.__default.WFBucketList |blist#0@@12| |pivots#0@@28|) (|BucketsLib.__default.BucketListGet#requires| |blist#0@@12| |pivots#0@@28| |key#0@@148|)))) :qid |BucketsL.485:26| :skolemid |3601| :pattern ( (|BucketsLib.__default.BucketListGet#requires| |blist#0@@12| |pivots#0@@28| |key#0@@148|)) )))
(assert  (=> true (forall ((|blist#0@@13| T@U) (|pivots#0@@29| T@U) (|key#0@@149| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@13|) (SeqType BoxType)) (= (type |pivots#0@@29|) (SeqType BoxType))) (= (type |key#0@@149|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListGet#canCall| |blist#0@@13| |pivots#0@@29| |key#0@@149|) (and (and (and ($Is |blist#0@@13| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@29| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@149| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucketList |blist#0@@13| |pivots#0@@29|)))) (and (and (|PivotsLib.__default.Route#canCall| |pivots#0@@29| |key#0@@149|) (|BucketsLib.__default.BucketGet#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| (PivotsLib.__default.Route |pivots#0@@29| |key#0@@149|))) |key#0@@149|)) (= (BucketsLib.__default.BucketListGet |blist#0@@13| |pivots#0@@29| |key#0@@149|) (BucketsLib.__default.BucketGet ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| (PivotsLib.__default.Route |pivots#0@@29| |key#0@@149|))) |key#0@@149|)))) :qid |BucketsL.485:26| :skolemid |3602| :pattern ( (BucketsLib.__default.BucketListGet |blist#0@@13| |pivots#0@@29| |key#0@@149|)) ))))
(assert  (=> true (forall ((|blist#0@@14| T@U) (|pivots#0@@30| T@U) (|key#0@@150| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@14|) (SeqType BoxType)) (= (type |pivots#0@@30|) (SeqType BoxType))) (= (type |key#0@@150|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListGet#canCall| (Lit |blist#0@@14|) (Lit |pivots#0@@30|) (Lit |key#0@@150|)) (and (and (and ($Is |blist#0@@14| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@30| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@150| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@14|) (Lit |pivots#0@@30|)))))))) (and (and (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@30|) (Lit |key#0@@150|)) (|BucketsLib.__default.BucketGet#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@14|) (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@30|) (Lit |key#0@@150|))))) (Lit |key#0@@150|))) (= (BucketsLib.__default.BucketListGet (Lit |blist#0@@14|) (Lit |pivots#0@@30|) (Lit |key#0@@150|)) (BucketsLib.__default.BucketGet ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@14|) (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@30|) (Lit |key#0@@150|))))) (Lit |key#0@@150|))))) :qid |BucketsL.485:26| :weight 3 :skolemid |3603| :pattern ( (BucketsLib.__default.BucketListGet (Lit |blist#0@@14|) (Lit |pivots#0@@30|) (Lit |key#0@@150|))) ))))
(assert (forall ((arg0@@515 T@U) (arg1@@279 T@U) (arg2@@188 T@U) ) (! (= (type (BucketsLib.__default.BucketInsert arg0@@515 arg1@@279 arg2@@188)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketInsert| :pattern ( (BucketsLib.__default.BucketInsert arg0@@515 arg1@@279 arg2@@188)) )))
(assert  (=> true (forall ((|bucket#0@@27| T@U) (|key#0@@151| T@U) (|msg#0@@11| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@27|) DatatypeTypeType) (= (type |key#0@@151|) (SeqType BoxType))) (= (type |msg#0@@11|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketInsert#canCall| |bucket#0@@27| |key#0@@151| |msg#0@@11|) (and (and ($Is |bucket#0@@27| Tclass.BucketsLib.Bucket) ($Is |key#0@@151| Tclass.KeyType.Key)) ($Is |msg#0@@11| Tclass.ValueMessage.Message)))) ($Is (BucketsLib.__default.BucketInsert |bucket#0@@27| |key#0@@151| |msg#0@@11|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.491:25| :skolemid |3604| :pattern ( (BucketsLib.__default.BucketInsert |bucket#0@@27| |key#0@@151| |msg#0@@11|)) ))))
(assert (forall ((|bucket#0@@28| T@U) (|key#0@@152| T@U) (|msg#0@@12| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@28|) DatatypeTypeType) (= (type |key#0@@152|) (SeqType BoxType))) (= (type |msg#0@@12|) DatatypeTypeType)) (and (and ($Is |bucket#0@@28| Tclass.BucketsLib.Bucket) ($Is |key#0@@152| Tclass.KeyType.Key)) ($Is |msg#0@@12| Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.BucketInsert#requires| |bucket#0@@28| |key#0@@152| |msg#0@@12|) true) (=> true (|BucketsLib.__default.BucketInsert#requires| |bucket#0@@28| |key#0@@152| |msg#0@@12|)))) :qid |BucketsL.491:25| :skolemid |3605| :pattern ( (|BucketsLib.__default.BucketInsert#requires| |bucket#0@@28| |key#0@@152| |msg#0@@12|)) )))
(assert  (=> true (forall ((|bucket#0@@29| T@U) (|key#0@@153| T@U) (|msg#0@@13| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@29|) DatatypeTypeType) (= (type |key#0@@153|) (SeqType BoxType))) (= (type |msg#0@@13|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketInsert#canCall| |bucket#0@@29| |key#0@@153| |msg#0@@13|) (and (and ($Is |bucket#0@@29| Tclass.BucketsLib.Bucket) ($Is |key#0@@153| Tclass.KeyType.Key)) ($Is |msg#0@@13| Tclass.ValueMessage.Message)))) (and (and (and (|BucketsLib.__default.BucketGet#canCall| |bucket#0@@29| |key#0@@153|) (|ValueMessage.__default.Merge#canCall| |msg#0@@13| (BucketsLib.__default.BucketGet |bucket#0@@29| |key#0@@153|))) (let ((|mergedMsg#0| (ValueMessage.__default.Merge |msg#0@@13| (BucketsLib.__default.BucketGet |bucket#0@@29| |key#0@@153|)))) (and (and (and (and (|$IsA#ValueMessage.Message| |mergedMsg#0|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|) (=> (|ValueMessage.Message#Equal| |mergedMsg#0| ValueMessage.__default.IdentityMessage) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@29|) (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@153|))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@153|)))))) (=> (not (|ValueMessage.Message#Equal| |mergedMsg#0| ValueMessage.__default.IdentityMessage)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@29|) (|BucketsLib.__default.B#canCall| (|Map#Build| (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@153|) ($Box |mergedMsg#0|)))))))) (= (BucketsLib.__default.BucketInsert |bucket#0@@29| |key#0@@153| |msg#0@@13|) (let ((|mergedMsg#0@@0| (ValueMessage.__default.Merge |msg#0@@13| (BucketsLib.__default.BucketGet |bucket#0@@29| |key#0@@153|)))) (ite (|ValueMessage.Message#Equal| |mergedMsg#0@@0| ValueMessage.__default.IdentityMessage) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@153|))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Build| (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@153|) ($Box |mergedMsg#0@@0|)))))))) :qid |BucketsL.491:25| :skolemid |3606| :pattern ( (BucketsLib.__default.BucketInsert |bucket#0@@29| |key#0@@153| |msg#0@@13|)) ))))
(assert  (=> true (forall ((|bucket#0@@30| T@U) (|key#0@@154| T@U) (|msg#0@@14| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@30|) DatatypeTypeType) (= (type |key#0@@154|) (SeqType BoxType))) (= (type |msg#0@@14|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketInsert#canCall| (Lit |bucket#0@@30|) (Lit |key#0@@154|) (Lit |msg#0@@14|)) (and (and ($Is |bucket#0@@30| Tclass.BucketsLib.Bucket) ($Is |key#0@@154| Tclass.KeyType.Key)) ($Is |msg#0@@14| Tclass.ValueMessage.Message)))) (and (and (and (|BucketsLib.__default.BucketGet#canCall| (Lit |bucket#0@@30|) (Lit |key#0@@154|)) (|ValueMessage.__default.Merge#canCall| (Lit |msg#0@@14|) (Lit (BucketsLib.__default.BucketGet (Lit |bucket#0@@30|) (Lit |key#0@@154|))))) (let ((|mergedMsg#1| (Lit (ValueMessage.__default.Merge (Lit |msg#0@@14|) (Lit (BucketsLib.__default.BucketGet (Lit |bucket#0@@30|) (Lit |key#0@@154|))))))) (and (and (and (and (|$IsA#ValueMessage.Message| |mergedMsg#1|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|) (=> (|ValueMessage.Message#Equal| |mergedMsg#1| ValueMessage.__default.IdentityMessage) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@30|)) (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@154|)))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@154|))))))) (=> (not (|ValueMessage.Message#Equal| |mergedMsg#1| ValueMessage.__default.IdentityMessage)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@30|)) (|BucketsLib.__default.B#canCall| (|Map#Build| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@154|)) ($Box |mergedMsg#1|)))))))) (= (BucketsLib.__default.BucketInsert (Lit |bucket#0@@30|) (Lit |key#0@@154|) (Lit |msg#0@@14|)) (let ((|mergedMsg#1@@0| (Lit (ValueMessage.__default.Merge (Lit |msg#0@@14|) (Lit (BucketsLib.__default.BucketGet (Lit |bucket#0@@30|) (Lit |key#0@@154|))))))) (ite (|ValueMessage.Message#Equal| |mergedMsg#1@@0| ValueMessage.__default.IdentityMessage) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@154|)))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Build| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@154|)) ($Box |mergedMsg#1@@0|)))))))) :qid |BucketsL.491:25| :weight 3 :skolemid |3607| :pattern ( (BucketsLib.__default.BucketInsert (Lit |bucket#0@@30|) (Lit |key#0@@154|) (Lit |msg#0@@14|))) ))))
(assert (forall ((arg0@@516 T@U) (arg1@@280 T@U) (arg2@@189 T@U) (arg3@@138 T@U) ) (! (= (type (BucketsLib.__default.BucketListInsert arg0@@516 arg1@@280 arg2@@189 arg3@@138)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.BucketListInsert| :pattern ( (BucketsLib.__default.BucketListInsert arg0@@516 arg1@@280 arg2@@189 arg3@@138)) )))
(assert  (=> true (forall ((|blist#0@@15| T@U) (|pivots#0@@31| T@U) (|key#0@@155| T@U) (|msg#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@15|) (SeqType BoxType)) (= (type |pivots#0@@31|) (SeqType BoxType))) (= (type |key#0@@155|) (SeqType BoxType))) (= (type |msg#0@@15|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketListInsert#canCall| |blist#0@@15| |pivots#0@@31| |key#0@@155| |msg#0@@15|) (and (and (and (and ($Is |blist#0@@15| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@31| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@155| Tclass.KeyType.Key)) ($Is |msg#0@@15| Tclass.ValueMessage.Message)) (BucketsLib.__default.WFBucketList |blist#0@@15| |pivots#0@@31|)))) ($Is (BucketsLib.__default.BucketListInsert |blist#0@@15| |pivots#0@@31| |key#0@@155| |msg#0@@15|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsL.500:29| :skolemid |3608| :pattern ( (BucketsLib.__default.BucketListInsert |blist#0@@15| |pivots#0@@31| |key#0@@155| |msg#0@@15|)) ))))
(assert (forall ((|blist#0@@16| T@U) (|pivots#0@@32| T@U) (|key#0@@156| T@U) (|msg#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@16|) (SeqType BoxType)) (= (type |pivots#0@@32|) (SeqType BoxType))) (= (type |key#0@@156|) (SeqType BoxType))) (= (type |msg#0@@16|) DatatypeTypeType)) (and (and (and ($Is |blist#0@@16| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@32| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@156| Tclass.KeyType.Key)) ($Is |msg#0@@16| Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.BucketListInsert#requires| |blist#0@@16| |pivots#0@@32| |key#0@@156| |msg#0@@16|) (BucketsLib.__default.WFBucketList |blist#0@@16| |pivots#0@@32|)) (=> (BucketsLib.__default.WFBucketList |blist#0@@16| |pivots#0@@32|) (|BucketsLib.__default.BucketListInsert#requires| |blist#0@@16| |pivots#0@@32| |key#0@@156| |msg#0@@16|)))) :qid |BucketsL.500:29| :skolemid |3609| :pattern ( (|BucketsLib.__default.BucketListInsert#requires| |blist#0@@16| |pivots#0@@32| |key#0@@156| |msg#0@@16|)) )))
(assert  (=> true (forall ((|blist#0@@17| T@U) (|pivots#0@@33| T@U) (|key#0@@157| T@U) (|msg#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@17|) (SeqType BoxType)) (= (type |pivots#0@@33|) (SeqType BoxType))) (= (type |key#0@@157|) (SeqType BoxType))) (= (type |msg#0@@17|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketListInsert#canCall| |blist#0@@17| |pivots#0@@33| |key#0@@157| |msg#0@@17|) (and (and (and (and ($Is |blist#0@@17| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@33| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@157| Tclass.KeyType.Key)) ($Is |msg#0@@17| Tclass.ValueMessage.Message)) (BucketsLib.__default.WFBucketList |blist#0@@17| |pivots#0@@33|)))) (and (and (|PivotsLib.__default.Route#canCall| |pivots#0@@33| |key#0@@157|) (let ((|i#0@@147| (PivotsLib.__default.Route |pivots#0@@33| |key#0@@157|))) (|BucketsLib.__default.BucketInsert#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@17| |i#0@@147|)) |key#0@@157| |msg#0@@17|))) (= (BucketsLib.__default.BucketListInsert |blist#0@@17| |pivots#0@@33| |key#0@@157| |msg#0@@17|) (let ((|i#0@@148| (PivotsLib.__default.Route |pivots#0@@33| |key#0@@157|))) (|Seq#Update| |blist#0@@17| |i#0@@148| ($Box (BucketsLib.__default.BucketInsert ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@17| |i#0@@148|)) |key#0@@157| |msg#0@@17|))))))) :qid |BucketsL.500:29| :skolemid |3610| :pattern ( (BucketsLib.__default.BucketListInsert |blist#0@@17| |pivots#0@@33| |key#0@@157| |msg#0@@17|)) ))))
(assert  (=> true (forall ((|blist#0@@18| T@U) (|pivots#0@@34| T@U) (|key#0@@158| T@U) (|msg#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@18|) (SeqType BoxType)) (= (type |pivots#0@@34|) (SeqType BoxType))) (= (type |key#0@@158|) (SeqType BoxType))) (= (type |msg#0@@18|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketListInsert#canCall| (Lit |blist#0@@18|) (Lit |pivots#0@@34|) (Lit |key#0@@158|) (Lit |msg#0@@18|)) (and (and (and (and ($Is |blist#0@@18| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@34| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@158| Tclass.KeyType.Key)) ($Is |msg#0@@18| Tclass.ValueMessage.Message)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@18|) (Lit |pivots#0@@34|)))))))) (and (and (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@34|) (Lit |key#0@@158|)) (let ((|i#1@@75| (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@34|) (Lit |key#0@@158|))))) (|BucketsLib.__default.BucketInsert#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@18|) |i#1@@75|)) (Lit |key#0@@158|) (Lit |msg#0@@18|)))) (= (BucketsLib.__default.BucketListInsert (Lit |blist#0@@18|) (Lit |pivots#0@@34|) (Lit |key#0@@158|) (Lit |msg#0@@18|)) (let ((|i#1@@76| (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@34|) (Lit |key#0@@158|))))) (|Seq#Update| (Lit |blist#0@@18|) |i#1@@76| ($Box (BucketsLib.__default.BucketInsert ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@18|) |i#1@@76|)) (Lit |key#0@@158|) (Lit |msg#0@@18|)))))))) :qid |BucketsL.500:29| :weight 3 :skolemid |3611| :pattern ( (BucketsLib.__default.BucketListInsert (Lit |blist#0@@18|) (Lit |pivots#0@@34|) (Lit |key#0@@158|) (Lit |msg#0@@18|))) ))))
(assert (forall ((arg0@@517 T@U) (arg1@@281 T@U) (arg2@@190 T@U) (arg3@@139 Int) ) (! (= (type (BucketsLib.__default.BucketListItemFlush arg0@@517 arg1@@281 arg2@@190 arg3@@139)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketListItemFlush| :pattern ( (BucketsLib.__default.BucketListItemFlush arg0@@517 arg1@@281 arg2@@190 arg3@@139)) )))
(assert  (=> true (forall ((|parent#0| T@U) (|child#0| T@U) (|pivots#0@@35| T@U) (|i#0@@149| Int) ) (!  (=> (and (and (and (= (type |parent#0|) DatatypeTypeType) (= (type |child#0|) DatatypeTypeType)) (= (type |pivots#0@@35|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListItemFlush#canCall| |parent#0| |child#0| |pivots#0@@35| |i#0@@149|) (and (and (and ($Is |parent#0| Tclass.BucketsLib.Bucket) ($Is |child#0| Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@35| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@35|)))) ($Is (BucketsLib.__default.BucketListItemFlush |parent#0| |child#0| |pivots#0@@35| |i#0@@149|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.509:32| :skolemid |3612| :pattern ( (BucketsLib.__default.BucketListItemFlush |parent#0| |child#0| |pivots#0@@35| |i#0@@149|)) ))))
(assert (forall ((|parent#0@@0| T@U) (|child#0@@0| T@U) (|pivots#0@@36| T@U) (|i#0@@150| Int) ) (!  (=> (and (and (and (= (type |parent#0@@0|) DatatypeTypeType) (= (type |child#0@@0|) DatatypeTypeType)) (= (type |pivots#0@@36|) (SeqType BoxType))) (and (and ($Is |parent#0@@0| Tclass.BucketsLib.Bucket) ($Is |child#0@@0| Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@36| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketListItemFlush#requires| |parent#0@@0| |child#0@@0| |pivots#0@@36| |i#0@@150|) (PivotsLib.__default.WFPivots |pivots#0@@36|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@36|) (|BucketsLib.__default.BucketListItemFlush#requires| |parent#0@@0| |child#0@@0| |pivots#0@@36| |i#0@@150|)))) :qid |BucketsL.509:32| :skolemid |3613| :pattern ( (|BucketsLib.__default.BucketListItemFlush#requires| |parent#0@@0| |child#0@@0| |pivots#0@@36| |i#0@@150|)) )))
(assert  (and (forall ((arg0@@518 T@U) (arg1@@282 T@U) (arg2@@191 T@U) (arg3@@140 T@U) (arg4@@112 Int) (arg5@@74 T@U) (arg6@@54 T@U) (arg7@@38 T@U) ) (! (= (type (|lambda#248| arg0@@518 arg1@@282 arg2@@191 arg3@@140 arg4@@112 arg5@@74 arg6@@54 arg7@@38)) (MapType0Type BoxType boolType)) :qid |funType:lambda#248| :pattern ( (|lambda#248| arg0@@518 arg1@@282 arg2@@191 arg3@@140 arg4@@112 arg5@@74 arg6@@54 arg7@@38)) )) (forall ((arg0@@519 T@U) (arg1@@283 T@U) ) (! (= (type (|lambda#249| arg0@@519 arg1@@283)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#249| :pattern ( (|lambda#249| arg0@@519 arg1@@283)) ))))
(assert  (=> true (forall ((|parent#0@@1| T@U) (|child#0@@1| T@U) (|pivots#0@@37| T@U) (|i#0@@151| Int) ) (!  (=> (and (and (and (= (type |parent#0@@1|) DatatypeTypeType) (= (type |child#0@@1|) DatatypeTypeType)) (= (type |pivots#0@@37|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListItemFlush#canCall| |parent#0@@1| |child#0@@1| |pivots#0@@37| |i#0@@151|) (and (and (and ($Is |parent#0@@1| Tclass.BucketsLib.Bucket) ($Is |child#0@@1| Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@37| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@37|)))) (and (and (forall ((|key#0@@159| T@U) ) (!  (=> (and (= (type |key#0@@159|) (SeqType BoxType)) ($Is |key#0@@159| Tclass.KeyType.Key)) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |child#0@@1|) (BucketsLib.Bucket.BucketMapWithSeq_q |parent#0@@1|)) (=> (or (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |child#0@@1|)) ($Box |key#0@@159|))) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |parent#0@@1|)) ($Box |key#0@@159|)))) (|PivotsLib.__default.Route#canCall| |pivots#0@@37| |key#0@@159|))) (=> (and (|PivotsLib.__default.Route#canCall| |pivots#0@@37| |key#0@@159|) (= (PivotsLib.__default.Route |pivots#0@@37| |key#0@@159|) |i#0@@151|)) (and (and (|$IsA#ValueMessage.Message| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@159|) (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@159|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (and (and (|BucketsLib.__default.BucketGet#canCall| |parent#0@@1| |key#0@@159|) (|BucketsLib.__default.BucketGet#canCall| |child#0@@1| |key#0@@159|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@159|) (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@159|))) |ValueMessage.__default.IdentityMessage#canCall|)))) (=> (and (and (or (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |child#0@@1|)) ($Box |key#0@@159|))) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |parent#0@@1|)) ($Box |key#0@@159|)))) (= (PivotsLib.__default.Route |pivots#0@@37| |key#0@@159|) |i#0@@151|)) (not (|ValueMessage.Message#Equal| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@159|) (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@159|)) ValueMessage.__default.IdentityMessage))) (and (and (|BucketsLib.__default.BucketGet#canCall| |parent#0@@1| |key#0@@159|) (|BucketsLib.__default.BucketGet#canCall| |child#0@@1| |key#0@@159|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@159|) (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@159|)))))) :qid |BucketsL.512:11| :skolemid |3614| :pattern ( (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@159|)) :pattern ( (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@159|)) :pattern ( (PivotsLib.__default.Route |pivots#0@@37| |key#0@@159|)) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#248| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |child#0@@1|)) (|Map#Domain| (BucketsLib.Bucket.b |parent#0@@1|)) |pivots#0@@37| |i#0@@151| |parent#0@@1| |child#0@@1| ValueMessage.__default.IdentityMessage) (|lambda#249| |parent#0@@1| |child#0@@1|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketListItemFlush |parent#0@@1| |child#0@@1| |pivots#0@@37| |i#0@@151|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#248| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |child#0@@1|)) (|Map#Domain| (BucketsLib.Bucket.b |parent#0@@1|)) |pivots#0@@37| |i#0@@151| |parent#0@@1| |child#0@@1| ValueMessage.__default.IdentityMessage) (|lambda#249| |parent#0@@1| |child#0@@1|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.509:32| :skolemid |3615| :pattern ( (BucketsLib.__default.BucketListItemFlush |parent#0@@1| |child#0@@1| |pivots#0@@37| |i#0@@151|)) ))))
(assert  (=> true (forall ((|parent#0@@2| T@U) (|child#0@@2| T@U) (|pivots#0@@38| T@U) (|i#0@@152| Int) ) (!  (=> (and (and (and (= (type |parent#0@@2|) DatatypeTypeType) (= (type |child#0@@2|) DatatypeTypeType)) (= (type |pivots#0@@38|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListItemFlush#canCall| (Lit |parent#0@@2|) (Lit |child#0@@2|) (Lit |pivots#0@@38|) (LitInt |i#0@@152|)) (and (and (and ($Is |parent#0@@2| Tclass.BucketsLib.Bucket) ($Is |child#0@@2| Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@38| (TSeq Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@38|)))))))) (and (and (forall ((|key#0@@160| T@U) ) (!  (=> (and (= (type |key#0@@160|) (SeqType BoxType)) ($Is |key#0@@160| Tclass.KeyType.Key)) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |child#0@@2|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |parent#0@@2|))) (=> (or (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |child#0@@2|))))) ($Box |key#0@@160|))) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |parent#0@@2|))))) ($Box |key#0@@160|)))) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@38|) |key#0@@160|))) (=> (and (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@38|) |key#0@@160|) (= (PivotsLib.__default.Route (Lit |pivots#0@@38|) |key#0@@160|) (LitInt |i#0@@152|))) (and (and (|$IsA#ValueMessage.Message| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet (Lit |parent#0@@2|) |key#0@@160|) (BucketsLib.__default.BucketGet (Lit |child#0@@2|) |key#0@@160|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (and (and (|BucketsLib.__default.BucketGet#canCall| (Lit |parent#0@@2|) |key#0@@160|) (|BucketsLib.__default.BucketGet#canCall| (Lit |child#0@@2|) |key#0@@160|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet (Lit |parent#0@@2|) |key#0@@160|) (BucketsLib.__default.BucketGet (Lit |child#0@@2|) |key#0@@160|))) |ValueMessage.__default.IdentityMessage#canCall|)))) (=> (and (and (or (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |child#0@@2|))))) ($Box |key#0@@160|))) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |parent#0@@2|))))) ($Box |key#0@@160|)))) (= (PivotsLib.__default.Route (Lit |pivots#0@@38|) |key#0@@160|) (LitInt |i#0@@152|))) (not (|ValueMessage.Message#Equal| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet (Lit |parent#0@@2|) |key#0@@160|) (BucketsLib.__default.BucketGet (Lit |child#0@@2|) |key#0@@160|)) ValueMessage.__default.IdentityMessage))) (and (and (|BucketsLib.__default.BucketGet#canCall| (Lit |parent#0@@2|) |key#0@@160|) (|BucketsLib.__default.BucketGet#canCall| (Lit |child#0@@2|) |key#0@@160|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet (Lit |parent#0@@2|) |key#0@@160|) (BucketsLib.__default.BucketGet (Lit |child#0@@2|) |key#0@@160|)))))) :qid |BucketsL.512:11| :skolemid |3616| :pattern ( (BucketsLib.__default.BucketGet |child#0@@2| |key#0@@160|)) :pattern ( (BucketsLib.__default.BucketGet |parent#0@@2| |key#0@@160|)) :pattern ( (PivotsLib.__default.Route |pivots#0@@38| |key#0@@160|)) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#248| Tclass.KeyType.Key (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |child#0@@2|))))) (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |parent#0@@2|))))) (Lit |pivots#0@@38|) (LitInt |i#0@@152|) (Lit |parent#0@@2|) (Lit |child#0@@2|) ValueMessage.__default.IdentityMessage) (|lambda#249| (Lit |parent#0@@2|) (Lit |child#0@@2|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketListItemFlush (Lit |parent#0@@2|) (Lit |child#0@@2|) (Lit |pivots#0@@38|) (LitInt |i#0@@152|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#248| Tclass.KeyType.Key (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |child#0@@2|))))) (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |parent#0@@2|))))) (Lit |pivots#0@@38|) (LitInt |i#0@@152|) (Lit |parent#0@@2|) (Lit |child#0@@2|) ValueMessage.__default.IdentityMessage) (|lambda#249| (Lit |parent#0@@2|) (Lit |child#0@@2|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.509:32| :weight 3 :skolemid |3617| :pattern ( (BucketsLib.__default.BucketListItemFlush (Lit |parent#0@@2|) (Lit |child#0@@2|) (Lit |pivots#0@@38|) (LitInt |i#0@@152|))) ))))
(assert (forall ((arg0@@520 T@U) (arg1@@284 T@U) (arg2@@192 T@U) (arg3@@141 T@U) (arg4@@113 Int) ) (! (= (type (BucketsLib.__default.BucketListFlushPartial arg0@@520 arg1@@284 arg2@@192 arg3@@141 arg4@@113)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.BucketListFlushPartial| :pattern ( (BucketsLib.__default.BucketListFlushPartial arg0@@520 arg1@@284 arg2@@192 arg3@@141 arg4@@113)) )))
(assert (forall (($ly@@572 T@U) (|parent#0@@3| T@U) (|children#0| T@U) (|pivots#0@@39| T@U) (|i#0@@153| Int) ) (!  (=> (and (and (and (= (type $ly@@572) LayerTypeType) (= (type |parent#0@@3|) DatatypeTypeType)) (= (type |children#0|) (SeqType BoxType))) (= (type |pivots#0@@39|) (SeqType BoxType))) (= (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@572) |parent#0@@3| |children#0| |pivots#0@@39| |i#0@@153|) (BucketsLib.__default.BucketListFlushPartial $ly@@572 |parent#0@@3| |children#0| |pivots#0@@39| |i#0@@153|))) :qid |BucketsL.552:12| :skolemid |3618| :pattern ( (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@572) |parent#0@@3| |children#0| |pivots#0@@39| |i#0@@153|)) )))
(assert (forall (($ly@@573 T@U) (|parent#0@@4| T@U) (|children#0@@0| T@U) (|pivots#0@@40| T@U) (|i#0@@154| Int) ) (!  (=> (and (and (and (= (type $ly@@573) LayerTypeType) (= (type |parent#0@@4|) DatatypeTypeType)) (= (type |children#0@@0|) (SeqType BoxType))) (= (type |pivots#0@@40|) (SeqType BoxType))) (= (BucketsLib.__default.BucketListFlushPartial $ly@@573 |parent#0@@4| |children#0@@0| |pivots#0@@40| |i#0@@154|) (BucketsLib.__default.BucketListFlushPartial $LZ |parent#0@@4| |children#0@@0| |pivots#0@@40| |i#0@@154|))) :qid |BucketsL.552:12| :skolemid |3619| :pattern ( (BucketsLib.__default.BucketListFlushPartial (AsFuelBottom $ly@@573) |parent#0@@4| |children#0@@0| |pivots#0@@40| |i#0@@154|)) )))
(assert  (=> true (forall (($ly@@574 T@U) (|parent#0@@5| T@U) (|children#0@@1| T@U) (|pivots#0@@41| T@U) (|i#0@@155| Int) ) (!  (=> (and (and (and (and (= (type $ly@@574) LayerTypeType) (= (type |parent#0@@5|) DatatypeTypeType)) (= (type |children#0@@1|) (SeqType BoxType))) (= (type |pivots#0@@41|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlushPartial#canCall| |parent#0@@5| |children#0@@1| |pivots#0@@41| |i#0@@155|) (and (and (and ($Is |parent#0@@5| Tclass.BucketsLib.Bucket) ($Is |children#0@@1| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@41| (TSeq Tclass.KeyType.Key))) (and (PivotsLib.__default.WFPivots |pivots#0@@41|) (and (<= (LitInt 0) |i#0@@155|) (<= |i#0@@155| (|Seq#Length| |children#0@@1|))))))) (and (and (= (|Seq#Length| (BucketsLib.__default.BucketListFlushPartial $ly@@574 |parent#0@@5| |children#0@@1| |pivots#0@@41| |i#0@@155|)) |i#0@@155|) (forall ((|h#0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |h#0|) (< |h#0| |i#0@@155|)) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.BucketListFlushPartial $ly@@574 |parent#0@@5| |children#0@@1| |pivots#0@@41| |i#0@@155|) |h#0|)) (BucketsLib.__default.BucketListItemFlush |parent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@1| |h#0|)) |pivots#0@@41| |h#0|)))) :qid |BucketsL.556:18| :skolemid |3620| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@1| |h#0|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.BucketListFlushPartial $ly@@574 |parent#0@@5| |children#0@@1| |pivots#0@@41| |i#0@@155|) |h#0|))) ))) ($Is (BucketsLib.__default.BucketListFlushPartial $ly@@574 |parent#0@@5| |children#0@@1| |pivots#0@@41| |i#0@@155|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.552:12| :skolemid |3621| :pattern ( (BucketsLib.__default.BucketListFlushPartial $ly@@574 |parent#0@@5| |children#0@@1| |pivots#0@@41| |i#0@@155|)) ))))
(assert (forall (($ly@@575 T@U) (|parent#0@@6| T@U) (|children#0@@2| T@U) (|pivots#0@@42| T@U) (|i#0@@156| Int) ) (!  (=> (and (and (and (and (= (type $ly@@575) LayerTypeType) (= (type |parent#0@@6|) DatatypeTypeType)) (= (type |children#0@@2|) (SeqType BoxType))) (= (type |pivots#0@@42|) (SeqType BoxType))) (and (and ($Is |parent#0@@6| Tclass.BucketsLib.Bucket) ($Is |children#0@@2| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@42| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketListFlushPartial#requires| $ly@@575 |parent#0@@6| |children#0@@2| |pivots#0@@42| |i#0@@156|) (and (PivotsLib.__default.WFPivots |pivots#0@@42|) (and (<= (LitInt 0) |i#0@@156|) (<= |i#0@@156| (|Seq#Length| |children#0@@2|))))) (=> (and (PivotsLib.__default.WFPivots |pivots#0@@42|) (and (<= (LitInt 0) |i#0@@156|) (<= |i#0@@156| (|Seq#Length| |children#0@@2|)))) (|BucketsLib.__default.BucketListFlushPartial#requires| $ly@@575 |parent#0@@6| |children#0@@2| |pivots#0@@42| |i#0@@156|)))) :qid |BucketsL.552:12| :skolemid |3622| :pattern ( (|BucketsLib.__default.BucketListFlushPartial#requires| $ly@@575 |parent#0@@6| |children#0@@2| |pivots#0@@42| |i#0@@156|)) )))
(assert  (=> true (forall (($ly@@576 T@U) (|parent#0@@7| T@U) (|children#0@@3| T@U) (|pivots#0@@43| T@U) (|i#0@@157| Int) ) (!  (=> (and (and (and (and (= (type $ly@@576) LayerTypeType) (= (type |parent#0@@7|) DatatypeTypeType)) (= (type |children#0@@3|) (SeqType BoxType))) (= (type |pivots#0@@43|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlushPartial#canCall| |parent#0@@7| |children#0@@3| |pivots#0@@43| |i#0@@157|) (and (and (and ($Is |parent#0@@7| Tclass.BucketsLib.Bucket) ($Is |children#0@@3| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@43| (TSeq Tclass.KeyType.Key))) (and (PivotsLib.__default.WFPivots |pivots#0@@43|) (and (<= (LitInt 0) |i#0@@157|) (<= |i#0@@157| (|Seq#Length| |children#0@@3|))))))) (and (=> (not (= |i#0@@157| (LitInt 0))) (and (|BucketsLib.__default.BucketListFlushPartial#canCall| |parent#0@@7| |children#0@@3| |pivots#0@@43| (- |i#0@@157| 1)) (|BucketsLib.__default.BucketListItemFlush#canCall| |parent#0@@7| ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@3| (- |i#0@@157| 1))) |pivots#0@@43| (- |i#0@@157| 1)))) (= (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@576) |parent#0@@7| |children#0@@3| |pivots#0@@43| |i#0@@157|) (ite (= |i#0@@157| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.BucketListFlushPartial $ly@@576 |parent#0@@7| |children#0@@3| |pivots#0@@43| (- |i#0@@157| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.BucketListItemFlush |parent#0@@7| ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@3| (- |i#0@@157| 1))) |pivots#0@@43| (- |i#0@@157| 1))))))))) :qid |BucketsL.552:12| :skolemid |3623| :pattern ( (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@576) |parent#0@@7| |children#0@@3| |pivots#0@@43| |i#0@@157|)) ))))
(assert  (=> true (forall (($ly@@577 T@U) (|parent#0@@8| T@U) (|children#0@@4| T@U) (|pivots#0@@44| T@U) (|i#0@@158| Int) ) (!  (=> (and (and (and (and (= (type $ly@@577) LayerTypeType) (= (type |parent#0@@8|) DatatypeTypeType)) (= (type |children#0@@4|) (SeqType BoxType))) (= (type |pivots#0@@44|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlushPartial#canCall| (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@44|) (LitInt |i#0@@158|)) (and (and (and ($Is |parent#0@@8| Tclass.BucketsLib.Bucket) ($Is |children#0@@4| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@44| (TSeq Tclass.KeyType.Key))) (and (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@44|))))) (and (<= (LitInt 0) (LitInt |i#0@@158|)) (<= (LitInt |i#0@@158|) (|Seq#Length| (Lit |children#0@@4|)))))))) (and (=> (not (= (LitInt |i#0@@158|) (LitInt 0))) (and (|BucketsLib.__default.BucketListFlushPartial#canCall| (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@44|) (LitInt (- |i#0@@158| 1))) (|BucketsLib.__default.BucketListItemFlush#canCall| (Lit |parent#0@@8|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |children#0@@4|) (LitInt (- |i#0@@158| 1)))) (Lit |pivots#0@@44|) (LitInt (- |i#0@@158| 1))))) (= (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@577) (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@44|) (LitInt |i#0@@158|)) (ite (= (LitInt |i#0@@158|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@577) (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@44|) (LitInt (- |i#0@@158| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.BucketListItemFlush (Lit |parent#0@@8|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |children#0@@4|) (LitInt (- |i#0@@158| 1)))) (Lit |pivots#0@@44|) (LitInt (- |i#0@@158| 1)))))))))) :qid |BucketsL.552:12| :weight 3 :skolemid |3624| :pattern ( (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@577) (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@44|) (LitInt |i#0@@158|))) ))))
(assert (forall ((arg0@@521 T@U) (arg1@@285 T@U) (arg2@@193 T@U) ) (! (= (type (BucketsLib.__default.BucketListFlush arg0@@521 arg1@@285 arg2@@193)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.BucketListFlush| :pattern ( (BucketsLib.__default.BucketListFlush arg0@@521 arg1@@285 arg2@@193)) )))
(assert  (=> true (forall ((|parent#0@@9| T@U) (|children#0@@5| T@U) (|pivots#0@@45| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@9|) DatatypeTypeType) (= (type |children#0@@5|) (SeqType BoxType))) (= (type |pivots#0@@45|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlush#canCall| |parent#0@@9| |children#0@@5| |pivots#0@@45|) (and (and (and ($Is |parent#0@@9| Tclass.BucketsLib.Bucket) ($Is |children#0@@5| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@45| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@45|)))) (and (and (and (= (|Seq#Length| (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@45|)) (|Seq#Length| |children#0@@5|)) (BucketsLib.__default.BucketListWellMarshalled (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@45|))) (forall ((|h#0@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |h#0@@0|) (< |h#0@@0| (|Seq#Length| (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@45|)))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@45|) |h#0@@0|)) (BucketsLib.__default.BucketListItemFlush |parent#0@@9| ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@5| |h#0@@0|)) |pivots#0@@45| |h#0@@0|)))) :qid |BucketsL.585:18| :skolemid |3625| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@5| |h#0@@0|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@45|) |h#0@@0|))) ))) ($Is (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@45|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.581:28| :skolemid |3626| :pattern ( (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@45|)) ))))
(assert (forall ((|parent#0@@10| T@U) (|children#0@@6| T@U) (|pivots#0@@46| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@10|) DatatypeTypeType) (= (type |children#0@@6|) (SeqType BoxType))) (= (type |pivots#0@@46|) (SeqType BoxType))) (and (and ($Is |parent#0@@10| Tclass.BucketsLib.Bucket) ($Is |children#0@@6| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@46| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketListFlush#requires| |parent#0@@10| |children#0@@6| |pivots#0@@46|) (PivotsLib.__default.WFPivots |pivots#0@@46|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@46|) (|BucketsLib.__default.BucketListFlush#requires| |parent#0@@10| |children#0@@6| |pivots#0@@46|)))) :qid |BucketsL.581:28| :skolemid |3627| :pattern ( (|BucketsLib.__default.BucketListFlush#requires| |parent#0@@10| |children#0@@6| |pivots#0@@46|)) )))
(assert  (=> true (forall ((|parent#0@@11| T@U) (|children#0@@7| T@U) (|pivots#0@@47| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@11|) DatatypeTypeType) (= (type |children#0@@7|) (SeqType BoxType))) (= (type |pivots#0@@47|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlush#canCall| |parent#0@@11| |children#0@@7| |pivots#0@@47|) (and (and (and ($Is |parent#0@@11| Tclass.BucketsLib.Bucket) ($Is |children#0@@7| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@47| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@47|)))) (and (|BucketsLib.__default.BucketListFlushPartial#canCall| |parent#0@@11| |children#0@@7| |pivots#0@@47| (|Seq#Length| |children#0@@7|)) (= (BucketsLib.__default.BucketListFlush |parent#0@@11| |children#0@@7| |pivots#0@@47|) (BucketsLib.__default.BucketListFlushPartial ($LS $LZ) |parent#0@@11| |children#0@@7| |pivots#0@@47| (|Seq#Length| |children#0@@7|))))) :qid |BucketsL.581:28| :skolemid |3628| :pattern ( (BucketsLib.__default.BucketListFlush |parent#0@@11| |children#0@@7| |pivots#0@@47|)) ))))
(assert  (=> true (forall ((|parent#0@@12| T@U) (|children#0@@8| T@U) (|pivots#0@@48| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@12|) DatatypeTypeType) (= (type |children#0@@8|) (SeqType BoxType))) (= (type |pivots#0@@48|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlush#canCall| (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@48|)) (and (and (and ($Is |parent#0@@12| Tclass.BucketsLib.Bucket) ($Is |children#0@@8| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@48| (TSeq Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@48|)))))))) (and (|BucketsLib.__default.BucketListFlushPartial#canCall| (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@48|) (|Seq#Length| (Lit |children#0@@8|))) (= (BucketsLib.__default.BucketListFlush (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@48|)) (BucketsLib.__default.BucketListFlushPartial ($LS $LZ) (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@48|) (|Seq#Length| (Lit |children#0@@8|)))))) :qid |BucketsL.581:28| :weight 3 :skolemid |3629| :pattern ( (BucketsLib.__default.BucketListFlush (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@48|))) ))))
(assert (forall ((arg0@@522 T@U) (arg1@@286 T@U) ) (! (= (type (BucketsLib.__default.JoinBucketList arg0@@522 arg1@@286)) DatatypeTypeType) :qid |funType:BucketsLib.__default.JoinBucketList| :pattern ( (BucketsLib.__default.JoinBucketList arg0@@522 arg1@@286)) )))
(assert (forall (($ly@@578 T@U) (|buckets#0| T@U) ) (!  (=> (and (= (type $ly@@578) LayerTypeType) (= (type |buckets#0|) (SeqType BoxType))) (= (BucketsLib.__default.JoinBucketList ($LS $ly@@578) |buckets#0|) (BucketsLib.__default.JoinBucketList $ly@@578 |buckets#0|))) :qid |BucketsL.590:12| :skolemid |3630| :pattern ( (BucketsLib.__default.JoinBucketList ($LS $ly@@578) |buckets#0|)) )))
(assert (forall (($ly@@579 T@U) (|buckets#0@@0| T@U) ) (!  (=> (and (= (type $ly@@579) LayerTypeType) (= (type |buckets#0@@0|) (SeqType BoxType))) (= (BucketsLib.__default.JoinBucketList $ly@@579 |buckets#0@@0|) (BucketsLib.__default.JoinBucketList $LZ |buckets#0@@0|))) :qid |BucketsL.590:12| :skolemid |3631| :pattern ( (BucketsLib.__default.JoinBucketList (AsFuelBottom $ly@@579) |buckets#0@@0|)) )))
(assert  (=> true (forall (($ly@@580 T@U) (|buckets#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@580) LayerTypeType) (= (type |buckets#0@@1|) (SeqType BoxType))) (or (|BucketsLib.__default.JoinBucketList#canCall| |buckets#0@@1|) ($Is |buckets#0@@1| (TSeq Tclass.BucketsLib.Bucket)))) (and (and (and (BucketsLib.__default.PreWFBucket (BucketsLib.__default.JoinBucketList $ly@@580 |buckets#0@@1|)) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.JoinBucketList $ly@@580 |buckets#0@@1|))) (=> (forall ((|i#0@@159| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@159|) (< |i#0@@159| (|Seq#Length| |buckets#0@@1|))) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@1| |i#0@@159|))))) :qid |BucketsL.593:21| :skolemid |3632| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@1| |i#0@@159|))) )) (BucketsLib.__default.WFBucket (BucketsLib.__default.JoinBucketList $ly@@580 |buckets#0@@1|)))) ($Is (BucketsLib.__default.JoinBucketList $ly@@580 |buckets#0@@1|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.590:12| :skolemid |3633| :pattern ( (BucketsLib.__default.JoinBucketList $ly@@580 |buckets#0@@1|)) ))))
(assert (forall (($ly@@581 T@U) (|buckets#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@581) LayerTypeType) (= (type |buckets#0@@2|) (SeqType BoxType))) ($Is |buckets#0@@2| (TSeq Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.JoinBucketList#requires| $ly@@581 |buckets#0@@2|) true) (=> true (|BucketsLib.__default.JoinBucketList#requires| $ly@@581 |buckets#0@@2|)))) :qid |BucketsL.590:12| :skolemid |3634| :pattern ( (|BucketsLib.__default.JoinBucketList#requires| $ly@@581 |buckets#0@@2|)) )))
(assert (= (type StartFuel_Maps._default.MapUnion) LayerTypeType))
(assert  (=> true (forall (($ly@@582 T@U) (|buckets#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@582) LayerTypeType) (= (type |buckets#0@@3|) (SeqType BoxType))) (or (|BucketsLib.__default.JoinBucketList#canCall| |buckets#0@@3|) ($Is |buckets#0@@3| (TSeq Tclass.BucketsLib.Bucket)))) (and (and (=> (= (|Seq#Length| |buckets#0@@3|) (LitInt 0)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (=> (not (= (|Seq#Length| |buckets#0@@3|) (LitInt 0))) (and (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket |buckets#0@@3|) (|BucketsLib.__default.JoinBucketList#canCall| (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|))) (BucketsLib.Bucket.BucketMapWithSeq_q (BucketsLib.__default.JoinBucketList $ly@@582 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|)))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket |buckets#0@@3|) (BucketsLib.Bucket.BucketMapWithSeq_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@3|))))) (|Maps.__default.MapUnion#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BucketsLib.Bucket.b (BucketsLib.__default.JoinBucketList $ly@@582 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|))) (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@3|))))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapUnion Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnion (BucketsLib.Bucket.b (BucketsLib.__default.JoinBucketList $ly@@582 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|))) (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@3|)))))))) (= (BucketsLib.__default.JoinBucketList ($LS $ly@@582) |buckets#0@@3|) (ite (= (|Seq#Length| |buckets#0@@3|) (LitInt 0)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapUnion Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnion (BucketsLib.Bucket.b (BucketsLib.__default.JoinBucketList $ly@@582 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|))) (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@3|))))))))) :qid |BucketsL.590:12| :skolemid |3635| :pattern ( (BucketsLib.__default.JoinBucketList ($LS $ly@@582) |buckets#0@@3|)) ))))
(assert  (=> true (forall (($ly@@583 T@U) (|buckets#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@583) LayerTypeType) (= (type |buckets#0@@4|) (SeqType BoxType))) (or (|BucketsLib.__default.JoinBucketList#canCall| (Lit |buckets#0@@4|)) ($Is |buckets#0@@4| (TSeq Tclass.BucketsLib.Bucket)))) (and (and (=> (= (|Seq#Length| (Lit |buckets#0@@4|)) (LitInt 0)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (=> (not (= (|Seq#Length| (Lit |buckets#0@@4|)) (LitInt 0))) (and (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|)) (|BucketsLib.__default.JoinBucketList#canCall| (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit (BucketsLib.__default.JoinBucketList ($LS $ly@@583) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (|Maps.__default.MapUnion#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.b (Lit (BucketsLib.__default.JoinBucketList ($LS $ly@@583) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (Lit (BucketsLib.Bucket.b (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|)))))))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapUnion Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnion (Lit (BucketsLib.Bucket.b (Lit (BucketsLib.__default.JoinBucketList ($LS $ly@@583) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (Lit (BucketsLib.Bucket.b (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))))))) (= (BucketsLib.__default.JoinBucketList ($LS $ly@@583) (Lit |buckets#0@@4|)) (ite (= (|Seq#Length| (Lit |buckets#0@@4|)) (LitInt 0)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapUnion Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnion (Lit (BucketsLib.Bucket.b (Lit (BucketsLib.__default.JoinBucketList ($LS $ly@@583) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (Lit (BucketsLib.Bucket.b (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|)))))))))))) :qid |BucketsL.590:12| :weight 3 :skolemid |3636| :pattern ( (BucketsLib.__default.JoinBucketList ($LS $ly@@583) (Lit |buckets#0@@4|))) ))))
(assert (forall ((arg0@@523 T@U) (arg1@@287 T@U) (arg2@@194 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketOnPivots arg0@@523 arg1@@287 arg2@@194)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketOnPivots| :pattern ( (BucketsLib.__default.SplitBucketOnPivots arg0@@523 arg1@@287 arg2@@194)) )))
(assert (forall (($ly@@584 T@U) (|bucket#0@@31| T@U) (|pivots#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@584) LayerTypeType) (= (type |bucket#0@@31|) DatatypeTypeType)) (= (type |pivots#0@@49|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@584) |bucket#0@@31| |pivots#0@@49|) (BucketsLib.__default.SplitBucketOnPivots $ly@@584 |bucket#0@@31| |pivots#0@@49|))) :qid |BucketsL.598:12| :skolemid |3637| :pattern ( (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@584) |bucket#0@@31| |pivots#0@@49|)) )))
(assert (forall (($ly@@585 T@U) (|bucket#0@@32| T@U) (|pivots#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@585) LayerTypeType) (= (type |bucket#0@@32|) DatatypeTypeType)) (= (type |pivots#0@@50|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketOnPivots $ly@@585 |bucket#0@@32| |pivots#0@@50|) (BucketsLib.__default.SplitBucketOnPivots $LZ |bucket#0@@32| |pivots#0@@50|))) :qid |BucketsL.598:12| :skolemid |3638| :pattern ( (BucketsLib.__default.SplitBucketOnPivots (AsFuelBottom $ly@@585) |bucket#0@@32| |pivots#0@@50|)) )))
(assert  (=> true (forall (($ly@@586 T@U) (|bucket#0@@33| T@U) (|pivots#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@586) LayerTypeType) (= (type |bucket#0@@33|) DatatypeTypeType)) (= (type |pivots#0@@51|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketOnPivots#canCall| |bucket#0@@33| |pivots#0@@51|) (and ($Is |bucket#0@@33| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@51| (TSeq Tclass.KeyType.Key))))) (and (and (and (and (and (and (and (= (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|)) (+ (|Seq#Length| |pivots#0@@51|) 1)) (forall ((|i#0@@160| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@160|) (< |i#0@@160| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|)))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#0@@160|)))) :qid |BucketsL.600:20| :skolemid |3639| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#0@@160|))) ))) (BucketsLib.__default.BucketListWellMarshalled (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|))) (forall ((|i#1@@77| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@77|) (< |i#1@@77| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|)))) (|Set#Subset| (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#1@@77|)))) (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@33|)))) :qid |BucketsL.602:20| :skolemid |3640| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#1@@77|))) ))) (forall ((|i#2@@34| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@34|) (< |i#2@@34| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|)))) (|Set#Subset| (|Map#Values| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#2@@34|)))) (|Map#Values| (BucketsLib.Bucket.b |bucket#0@@33|)))) :qid |BucketsL.603:20| :skolemid |3641| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#2@@34|))) ))) (forall ((|i#3@@21| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@21|) (< |i#3@@21| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|)))) (= (|Seq#Length| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#3@@21|)))) (|Seq#Length| (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#3@@21|)))))) :qid |BucketsL.604:20| :skolemid |3642| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#3@@21|))) ))) (=> (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@33|)) (forall ((|i#4@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#4@@6|) (< |i#4@@6| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#4@@6|)))) :qid |BucketsL.605:46| :skolemid |3643| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) |i#4@@6|))) )))) ($Is (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.598:12| :skolemid |3644| :pattern ( (BucketsLib.__default.SplitBucketOnPivots $ly@@586 |bucket#0@@33| |pivots#0@@51|)) ))))
(assert (forall (($ly@@587 T@U) (|bucket#0@@34| T@U) (|pivots#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@587) LayerTypeType) (= (type |bucket#0@@34|) DatatypeTypeType)) (= (type |pivots#0@@52|) (SeqType BoxType))) (and ($Is |bucket#0@@34| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@52| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.SplitBucketOnPivots#requires| $ly@@587 |bucket#0@@34| |pivots#0@@52|) true) (=> true (|BucketsLib.__default.SplitBucketOnPivots#requires| $ly@@587 |bucket#0@@34| |pivots#0@@52|)))) :qid |BucketsL.598:12| :skolemid |3645| :pattern ( (|BucketsLib.__default.SplitBucketOnPivots#requires| $ly@@587 |bucket#0@@34| |pivots#0@@52|)) )))
(assert  (and (forall ((arg0@@524 T@U) (arg1@@288 T@U) (arg2@@195 T@U) ) (! (= (type (|lambda#256| arg0@@524 arg1@@288 arg2@@195)) (MapType0Type BoxType boolType)) :qid |funType:lambda#256| :pattern ( (|lambda#256| arg0@@524 arg1@@288 arg2@@195)) )) (forall ((arg0@@525 T@U) (arg1@@289 T@U) (arg2@@196 T@U) ) (! (= (type (|lambda#258| arg0@@525 arg1@@289 arg2@@196)) (MapType0Type BoxType boolType)) :qid |funType:lambda#258| :pattern ( (|lambda#258| arg0@@525 arg1@@289 arg2@@196)) ))))
(assert  (=> true (forall (($ly@@588 T@U) (|bucket#0@@35| T@U) (|pivots#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@588) LayerTypeType) (= (type |bucket#0@@35|) DatatypeTypeType)) (= (type |pivots#0@@53|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketOnPivots#canCall| |bucket#0@@35| |pivots#0@@53|) (and ($Is |bucket#0@@35| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@53| (TSeq Tclass.KeyType.Key))))) (and (and (=> (= (|Seq#Length| |pivots#0@@53|) (LitInt 0)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|) (|BucketsLib.__default.B#canCall| (BucketsLib.Bucket.b |bucket#0@@35|)))) (=> (not (= (|Seq#Length| |pivots#0@@53|) (LitInt 0))) (and (and (forall ((|key#0@@161| T@U) ) (!  (=> (and (= (type |key#0@@161|) (SeqType BoxType)) ($Is |key#0@@161| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#0@@161|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key |pivots#0@@53|) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@161| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|)))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#0@@161|))) (Lexicographic__Byte__Order.__default.lt |key#0@@161| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|)))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|)))) :qid |BucketsL.611:22| :skolemid |3646| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#0@@161|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@161| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#0@@161|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (let ((|l#0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (forall ((|key#1@@22| T@U) ) (!  (=> (and (= (type |key#1@@22|) (SeqType BoxType)) ($Is |key#1@@22| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#1@@22|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key |pivots#0@@53|) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|)) |key#1@@22|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#1@@22|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|)) |key#1@@22|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|)))) :qid |BucketsL.612:22| :skolemid |3647| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#1@@22|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|)) |key#1@@22|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#1@@22|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key |pivots#0@@53|) (|BucketsLib.__default.SplitBucketOnPivots#canCall| |l#0| (Sequences.__default.DropLast Tclass.KeyType.Key |pivots#0@@53|)))))))) (= (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@588) |bucket#0@@35| |pivots#0@@53|) (ite (= (|Seq#Length| |pivots#0@@53|) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (BucketsLib.Bucket.b |bucket#0@@35|)))) (let ((|l#0@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (let ((|r#0@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@53|))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (|Seq#Append| (BucketsLib.__default.SplitBucketOnPivots $ly@@588 |l#0@@0| (Sequences.__default.DropLast Tclass.KeyType.Key |pivots#0@@53|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |r#0@@0|))))))))) :qid |BucketsL.598:12| :skolemid |3648| :pattern ( (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@588) |bucket#0@@35| |pivots#0@@53|)) ))))
(assert  (=> true (forall (($ly@@589 T@U) (|bucket#0@@36| T@U) (|pivots#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@589) LayerTypeType) (= (type |bucket#0@@36|) DatatypeTypeType)) (= (type |pivots#0@@54|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketOnPivots#canCall| |bucket#0@@36| (Lit |pivots#0@@54|)) (and ($Is |bucket#0@@36| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@54| (TSeq Tclass.KeyType.Key))))) (and (and (=> (= (|Seq#Length| (Lit |pivots#0@@54|)) (LitInt 0)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|) (|BucketsLib.__default.B#canCall| (BucketsLib.Bucket.b |bucket#0@@36|)))) (=> (not (= (|Seq#Length| (Lit |pivots#0@@54|)) (LitInt 0))) (and (and (forall ((|key#0@@162| T@U) ) (!  (=> (and (= (type |key#0@@162|) (SeqType BoxType)) ($Is |key#0@@162| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#0@@162|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |pivots#0@@54|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@162| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@54|)))))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#0@@162|))) (Lexicographic__Byte__Order.__default.lt |key#0@@162| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@54|)))))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|)))) :qid |BucketsL.611:22| :skolemid |3649| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#0@@162|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@162| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@54|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#0@@162|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@54|))))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (let ((|l#1| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@54|))))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (forall ((|key#1@@23| T@U) ) (!  (=> (and (= (type |key#1@@23|) (SeqType BoxType)) ($Is |key#1@@23| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#1@@23|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |pivots#0@@54|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@54|)))) |key#1@@23|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#1@@23|))) (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@54|)))) |key#1@@23|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|)))) :qid |BucketsL.612:22| :skolemid |3650| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#1@@23|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@54|)) |key#1@@23|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#1@@23|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@54|))))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (Lit |pivots#0@@54|)) (|BucketsLib.__default.SplitBucketOnPivots#canCall| |l#1| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |pivots#0@@54|)))))))))) (= (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@589) |bucket#0@@36| (Lit |pivots#0@@54|)) (ite (= (|Seq#Length| (Lit |pivots#0@@54|)) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (BucketsLib.Bucket.b |bucket#0@@36|)))) (let ((|l#1@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@54|))))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (let ((|r#1@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@54|))))) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (|Seq#Append| (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@589) |l#1@@0| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |pivots#0@@54|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |r#1@@0|))))))))) :qid |BucketsL.598:12| :weight 3 :skolemid |3651| :pattern ( (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@589) |bucket#0@@36| (Lit |pivots#0@@54|))) ))))
(assert  (=> true (forall (($ly@@590 T@U) (|bucket#0@@37| T@U) (|pivots#0@@55| T@U) ) (!  (=> (and (and (and (= (type $ly@@590) LayerTypeType) (= (type |bucket#0@@37|) DatatypeTypeType)) (= (type |pivots#0@@55|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketOnPivots#canCall| (Lit |bucket#0@@37|) (Lit |pivots#0@@55|)) (and ($Is |bucket#0@@37| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@55| (TSeq Tclass.KeyType.Key))))) (and (and (=> (= (|Seq#Length| (Lit |pivots#0@@55|)) (LitInt 0)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|)) (|BucketsLib.__default.B#canCall| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|)))))) (=> (not (= (|Seq#Length| (Lit |pivots#0@@55|)) (LitInt 0))) (and (and (forall ((|key#0@@163| T@U) ) (!  (=> (and (= (type |key#0@@163|) (SeqType BoxType)) ($Is |key#0@@163| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) ($Box |key#0@@163|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |pivots#0@@55|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@163| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@55|)))))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) ($Box |key#0@@163|))) (Lexicographic__Byte__Order.__default.lt |key#0@@163| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@55|)))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|))))) :qid |BucketsL.611:22| :skolemid |3652| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@37|)) ($Box |key#0@@163|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@163| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@55|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@37|)) ($Box |key#0@@163|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@55|))))) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (let ((|l#2| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@55|))))) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (forall ((|key#1@@24| T@U) ) (!  (=> (and (= (type |key#1@@24|) (SeqType BoxType)) ($Is |key#1@@24| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) ($Box |key#1@@24|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |pivots#0@@55|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@55|)))) |key#1@@24|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) ($Box |key#1@@24|))) (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@55|)))) |key#1@@24|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|))))) :qid |BucketsL.612:22| :skolemid |3653| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@37|)) ($Box |key#1@@24|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@55|)) |key#1@@24|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@37|)) ($Box |key#1@@24|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@55|))))) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (Lit |pivots#0@@55|)) (|BucketsLib.__default.SplitBucketOnPivots#canCall| |l#2| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |pivots#0@@55|)))))))))) (= (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@590) (Lit |bucket#0@@37|) (Lit |pivots#0@@55|)) (ite (= (|Seq#Length| (Lit |pivots#0@@55|)) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|)))))) (let ((|l#2@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@55|))))) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (let ((|r#2| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@55|))))) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (|Seq#Append| (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@590) |l#2@@0| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |pivots#0@@55|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |r#2|))))))))) :qid |BucketsL.598:12| :weight 3 :skolemid |3654| :pattern ( (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@590) (Lit |bucket#0@@37|) (Lit |pivots#0@@55|))) ))))
(assert (forall ((arg0@@526 T@U) (arg1@@290 T@U) (arg2@@197 Int) ) (! (= (type (BucketsLib.__default.ClampToSlot arg0@@526 arg1@@290 arg2@@197)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ClampToSlot| :pattern ( (BucketsLib.__default.ClampToSlot arg0@@526 arg1@@290 arg2@@197)) )))
(assert  (=> true (forall ((|bucket#0@@38| T@U) (|pivots#0@@56| T@U) (|i#0@@161| Int) ) (!  (=> (and (and (= (type |bucket#0@@38|) DatatypeTypeType) (= (type |pivots#0@@56|) (SeqType BoxType))) (or (|BucketsLib.__default.ClampToSlot#canCall| |bucket#0@@38| |pivots#0@@56| |i#0@@161|) (and (and ($Is |bucket#0@@38| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@56| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@56|)))) ($Is (BucketsLib.__default.ClampToSlot |bucket#0@@38| |pivots#0@@56| |i#0@@161|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.618:24| :skolemid |3655| :pattern ( (BucketsLib.__default.ClampToSlot |bucket#0@@38| |pivots#0@@56| |i#0@@161|)) ))))
(assert (forall ((|bucket#0@@39| T@U) (|pivots#0@@57| T@U) (|i#0@@162| Int) ) (!  (=> (and (and (= (type |bucket#0@@39|) DatatypeTypeType) (= (type |pivots#0@@57|) (SeqType BoxType))) (and ($Is |bucket#0@@39| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@57| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.ClampToSlot#requires| |bucket#0@@39| |pivots#0@@57| |i#0@@162|) (PivotsLib.__default.WFPivots |pivots#0@@57|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@57|) (|BucketsLib.__default.ClampToSlot#requires| |bucket#0@@39| |pivots#0@@57| |i#0@@162|)))) :qid |BucketsL.618:24| :skolemid |3656| :pattern ( (|BucketsLib.__default.ClampToSlot#requires| |bucket#0@@39| |pivots#0@@57| |i#0@@162|)) )))
(assert (forall ((arg0@@527 T@U) (arg1@@291 T@U) (arg2@@198 T@U) (arg3@@142 Int) ) (! (= (type (|lambda#286| arg0@@527 arg1@@291 arg2@@198 arg3@@142)) (MapType0Type BoxType boolType)) :qid |funType:lambda#286| :pattern ( (|lambda#286| arg0@@527 arg1@@291 arg2@@198 arg3@@142)) )))
(assert  (=> true (forall ((|bucket#0@@40| T@U) (|pivots#0@@58| T@U) (|i#0@@163| Int) ) (!  (=> (and (and (= (type |bucket#0@@40|) DatatypeTypeType) (= (type |pivots#0@@58|) (SeqType BoxType))) (or (|BucketsLib.__default.ClampToSlot#canCall| |bucket#0@@40| |pivots#0@@58| |i#0@@163|) (and (and ($Is |bucket#0@@40| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@58| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@58|)))) (and (and (forall ((|key#0@@164| T@U) ) (!  (=> (and (= (type |key#0@@164|) (SeqType BoxType)) ($Is |key#0@@164| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@40|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) ($Box |key#0@@164|))) (|PivotsLib.__default.Route#canCall| |pivots#0@@58| |key#0@@164|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) ($Box |key#0@@164|))) (= (PivotsLib.__default.Route |pivots#0@@58| |key#0@@164|) |i#0@@163|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@40|)))) :qid |BucketsL.621:11| :skolemid |3657| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@40|)) ($Box |key#0@@164|)))) :pattern ( (PivotsLib.__default.Route |pivots#0@@58| |key#0@@164|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) ($Box |key#0@@164|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#286| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) |pivots#0@@58| |i#0@@163|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@40|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampToSlot |bucket#0@@40| |pivots#0@@58| |i#0@@163|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#286| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) |pivots#0@@58| |i#0@@163|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@40|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.618:24| :skolemid |3658| :pattern ( (BucketsLib.__default.ClampToSlot |bucket#0@@40| |pivots#0@@58| |i#0@@163|)) ))))
(assert  (=> true (forall ((|bucket#0@@41| T@U) (|pivots#0@@59| T@U) (|i#0@@164| Int) ) (!  (=> (and (and (= (type |bucket#0@@41|) DatatypeTypeType) (= (type |pivots#0@@59|) (SeqType BoxType))) (or (|BucketsLib.__default.ClampToSlot#canCall| (Lit |bucket#0@@41|) (Lit |pivots#0@@59|) (LitInt |i#0@@164|)) (and (and ($Is |bucket#0@@41| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@59| (TSeq Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@59|)))))))) (and (and (forall ((|key#0@@165| T@U) ) (!  (=> (and (= (type |key#0@@165|) (SeqType BoxType)) ($Is |key#0@@165| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@41|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@41|))) ($Box |key#0@@165|))) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@59|) |key#0@@165|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@41|))) ($Box |key#0@@165|))) (= (PivotsLib.__default.Route (Lit |pivots#0@@59|) |key#0@@165|) (LitInt |i#0@@164|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@41|))))) :qid |BucketsL.621:11| :skolemid |3659| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@41|)) ($Box |key#0@@165|)))) :pattern ( (PivotsLib.__default.Route |pivots#0@@59| |key#0@@165|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@41|)) ($Box |key#0@@165|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#286| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@41|))) (Lit |pivots#0@@59|) (LitInt |i#0@@164|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@41|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampToSlot (Lit |bucket#0@@41|) (Lit |pivots#0@@59|) (LitInt |i#0@@164|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#286| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@41|))) (Lit |pivots#0@@59|) (LitInt |i#0@@164|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@41|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.618:24| :weight 3 :skolemid |3660| :pattern ( (BucketsLib.__default.ClampToSlot (Lit |bucket#0@@41|) (Lit |pivots#0@@59|) (LitInt |i#0@@164|))) ))))
(assert (forall ((arg0@@528 T@U) (arg1@@292 T@U) (arg2@@199 T@U) ) (! (= (type (BucketsLib.__default.BucketIntersect arg0@@528 arg1@@292 arg2@@199)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketIntersect| :pattern ( (BucketsLib.__default.BucketIntersect arg0@@528 arg1@@292 arg2@@199)) )))
(assert (forall (($ly@@591 T@U) (|bucket#0@@42| T@U) (|keys#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@591) LayerTypeType) (= (type |bucket#0@@42|) DatatypeTypeType)) (= (type |keys#0@@9|) (MapType0Type BoxType boolType))) (= (BucketsLib.__default.BucketIntersect ($LS $ly@@591) |bucket#0@@42| |keys#0@@9|) (BucketsLib.__default.BucketIntersect $ly@@591 |bucket#0@@42| |keys#0@@9|))) :qid |BucketsL.624:22| :skolemid |3661| :pattern ( (BucketsLib.__default.BucketIntersect ($LS $ly@@591) |bucket#0@@42| |keys#0@@9|)) )))
(assert (forall (($ly@@592 T@U) (|bucket#0@@43| T@U) (|keys#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@592) LayerTypeType) (= (type |bucket#0@@43|) DatatypeTypeType)) (= (type |keys#0@@10|) (MapType0Type BoxType boolType))) (= (BucketsLib.__default.BucketIntersect $ly@@592 |bucket#0@@43| |keys#0@@10|) (BucketsLib.__default.BucketIntersect $LZ |bucket#0@@43| |keys#0@@10|))) :qid |BucketsL.624:22| :skolemid |3662| :pattern ( (BucketsLib.__default.BucketIntersect (AsFuelBottom $ly@@592) |bucket#0@@43| |keys#0@@10|)) )))
(assert  (=> true (forall (($ly@@593 T@U) (|bucket#0@@44| T@U) (|keys#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@593) LayerTypeType) (= (type |bucket#0@@44|) DatatypeTypeType)) (= (type |keys#0@@11|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketIntersect#canCall| |bucket#0@@44| |keys#0@@11|) (and ($Is |bucket#0@@44| Tclass.BucketsLib.Bucket) ($Is |keys#0@@11| (TSet Tclass.KeyType.Key))))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.BucketIntersect $ly@@593 |bucket#0@@44| |keys#0@@11|)) ($Is (BucketsLib.__default.BucketIntersect $ly@@593 |bucket#0@@44| |keys#0@@11|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.624:22| :skolemid |3663| :pattern ( (BucketsLib.__default.BucketIntersect $ly@@593 |bucket#0@@44| |keys#0@@11|)) ))))
(assert (forall (($ly@@594 T@U) (|bucket#0@@45| T@U) (|keys#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@594) LayerTypeType) (= (type |bucket#0@@45|) DatatypeTypeType)) (= (type |keys#0@@12|) (MapType0Type BoxType boolType))) (and ($Is |bucket#0@@45| Tclass.BucketsLib.Bucket) ($Is |keys#0@@12| (TSet Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketIntersect#requires| $ly@@594 |bucket#0@@45| |keys#0@@12|) true) (=> true (|BucketsLib.__default.BucketIntersect#requires| $ly@@594 |bucket#0@@45| |keys#0@@12|)))) :qid |BucketsL.624:22| :skolemid |3664| :pattern ( (|BucketsLib.__default.BucketIntersect#requires| $ly@@594 |bucket#0@@45| |keys#0@@12|)) )))
(assert (forall ((arg0@@529 T@U) (arg1@@293 T@U) (arg2@@200 T@U) ) (! (= (type (|lambda#294| arg0@@529 arg1@@293 arg2@@200)) (MapType0Type BoxType boolType)) :qid |funType:lambda#294| :pattern ( (|lambda#294| arg0@@529 arg1@@293 arg2@@200)) )))
(assert  (=> true (forall (($ly@@595 T@U) (|bucket#0@@46| T@U) (|keys#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@595) LayerTypeType) (= (type |bucket#0@@46|) DatatypeTypeType)) (= (type |keys#0@@13|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketIntersect#canCall| |bucket#0@@46| |keys#0@@13|) (and ($Is |bucket#0@@46| Tclass.BucketsLib.Bucket) ($Is |keys#0@@13| (TSet Tclass.KeyType.Key))))) (and (and (forall ((|key#0@@166| T@U) ) (!  (=> (and (= (type |key#0@@166|) (SeqType BoxType)) ($Is |key#0@@166| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@46|) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@46|)) ($Box |key#0@@166|))) (U_2_bool (MapType0Select |keys#0@@13| ($Box |key#0@@166|)))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@46|)))) :qid |BucketsL.627:11| :skolemid |3665| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@46|)) ($Box |key#0@@166|)))) :pattern ( (MapType0Select |keys#0@@13| ($Box |key#0@@166|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@46|)) ($Box |key#0@@166|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@46|)) |keys#0@@13|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@46|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketIntersect ($LS $ly@@595) |bucket#0@@46| |keys#0@@13|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@46|)) |keys#0@@13|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@46|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.624:22| :skolemid |3666| :pattern ( (BucketsLib.__default.BucketIntersect ($LS $ly@@595) |bucket#0@@46| |keys#0@@13|)) ))))
(assert  (=> true (forall (($ly@@596 T@U) (|bucket#0@@47| T@U) (|keys#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@596) LayerTypeType) (= (type |bucket#0@@47|) DatatypeTypeType)) (= (type |keys#0@@14|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketIntersect#canCall| (Lit |bucket#0@@47|) (Lit |keys#0@@14|)) (and ($Is |bucket#0@@47| Tclass.BucketsLib.Bucket) ($Is |keys#0@@14| (TSet Tclass.KeyType.Key))))) (and (and (forall ((|key#0@@167| T@U) ) (!  (=> (and (= (type |key#0@@167|) (SeqType BoxType)) ($Is |key#0@@167| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@47|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@47|))) ($Box |key#0@@167|))) (U_2_bool (MapType0Select (Lit |keys#0@@14|) ($Box |key#0@@167|)))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@47|))))) :qid |BucketsL.627:11| :skolemid |3667| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@47|)) ($Box |key#0@@167|)))) :pattern ( (MapType0Select |keys#0@@14| ($Box |key#0@@167|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@47|)) ($Box |key#0@@167|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@47|))) (Lit |keys#0@@14|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@47|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketIntersect ($LS $ly@@596) (Lit |bucket#0@@47|) (Lit |keys#0@@14|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@47|))) (Lit |keys#0@@14|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@47|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.624:22| :weight 3 :skolemid |3668| :pattern ( (BucketsLib.__default.BucketIntersect ($LS $ly@@596) (Lit |bucket#0@@47|) (Lit |keys#0@@14|))) ))))
(assert (forall ((arg0@@530 T@U) (arg1@@294 T@U) (arg2@@201 T@U) ) (! (= (type (BucketsLib.__default.BucketComplement arg0@@530 arg1@@294 arg2@@201)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketComplement| :pattern ( (BucketsLib.__default.BucketComplement arg0@@530 arg1@@294 arg2@@201)) )))
(assert (forall (($ly@@597 T@U) (|bucket#0@@48| T@U) (|keys#0@@15| T@U) ) (!  (=> (and (and (= (type $ly@@597) LayerTypeType) (= (type |bucket#0@@48|) DatatypeTypeType)) (= (type |keys#0@@15|) (MapType0Type BoxType boolType))) (= (BucketsLib.__default.BucketComplement ($LS $ly@@597) |bucket#0@@48| |keys#0@@15|) (BucketsLib.__default.BucketComplement $ly@@597 |bucket#0@@48| |keys#0@@15|))) :qid |BucketsL.630:22| :skolemid |3669| :pattern ( (BucketsLib.__default.BucketComplement ($LS $ly@@597) |bucket#0@@48| |keys#0@@15|)) )))
(assert (forall (($ly@@598 T@U) (|bucket#0@@49| T@U) (|keys#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@598) LayerTypeType) (= (type |bucket#0@@49|) DatatypeTypeType)) (= (type |keys#0@@16|) (MapType0Type BoxType boolType))) (= (BucketsLib.__default.BucketComplement $ly@@598 |bucket#0@@49| |keys#0@@16|) (BucketsLib.__default.BucketComplement $LZ |bucket#0@@49| |keys#0@@16|))) :qid |BucketsL.630:22| :skolemid |3670| :pattern ( (BucketsLib.__default.BucketComplement (AsFuelBottom $ly@@598) |bucket#0@@49| |keys#0@@16|)) )))
(assert  (=> true (forall (($ly@@599 T@U) (|bucket#0@@50| T@U) (|keys#0@@17| T@U) ) (!  (=> (and (and (and (= (type $ly@@599) LayerTypeType) (= (type |bucket#0@@50|) DatatypeTypeType)) (= (type |keys#0@@17|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketComplement#canCall| |bucket#0@@50| |keys#0@@17|) (and ($Is |bucket#0@@50| Tclass.BucketsLib.Bucket) ($Is |keys#0@@17| (TSet Tclass.KeyType.Key))))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.BucketComplement $ly@@599 |bucket#0@@50| |keys#0@@17|)) ($Is (BucketsLib.__default.BucketComplement $ly@@599 |bucket#0@@50| |keys#0@@17|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.630:22| :skolemid |3671| :pattern ( (BucketsLib.__default.BucketComplement $ly@@599 |bucket#0@@50| |keys#0@@17|)) ))))
(assert (forall (($ly@@600 T@U) (|bucket#0@@51| T@U) (|keys#0@@18| T@U) ) (!  (=> (and (and (and (= (type $ly@@600) LayerTypeType) (= (type |bucket#0@@51|) DatatypeTypeType)) (= (type |keys#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |bucket#0@@51| Tclass.BucketsLib.Bucket) ($Is |keys#0@@18| (TSet Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketComplement#requires| $ly@@600 |bucket#0@@51| |keys#0@@18|) true) (=> true (|BucketsLib.__default.BucketComplement#requires| $ly@@600 |bucket#0@@51| |keys#0@@18|)))) :qid |BucketsL.630:22| :skolemid |3672| :pattern ( (|BucketsLib.__default.BucketComplement#requires| $ly@@600 |bucket#0@@51| |keys#0@@18|)) )))
(assert (forall ((arg0@@531 T@U) (arg1@@295 T@U) (arg2@@202 T@U) ) (! (= (type (|lambda#302| arg0@@531 arg1@@295 arg2@@202)) (MapType0Type BoxType boolType)) :qid |funType:lambda#302| :pattern ( (|lambda#302| arg0@@531 arg1@@295 arg2@@202)) )))
(assert  (=> true (forall (($ly@@601 T@U) (|bucket#0@@52| T@U) (|keys#0@@19| T@U) ) (!  (=> (and (and (and (= (type $ly@@601) LayerTypeType) (= (type |bucket#0@@52|) DatatypeTypeType)) (= (type |keys#0@@19|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketComplement#canCall| |bucket#0@@52| |keys#0@@19|) (and ($Is |bucket#0@@52| Tclass.BucketsLib.Bucket) ($Is |keys#0@@19| (TSet Tclass.KeyType.Key))))) (and (and (forall ((|key#0@@168| T@U) ) (!  (=> (and (= (type |key#0@@168|) (SeqType BoxType)) ($Is |key#0@@168| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@52|) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@52|)) ($Box |key#0@@168|))) (not (U_2_bool (MapType0Select |keys#0@@19| ($Box |key#0@@168|))))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@52|)))) :qid |BucketsL.633:11| :skolemid |3673| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@52|)) ($Box |key#0@@168|)))) :pattern ( (MapType0Select |keys#0@@19| ($Box |key#0@@168|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@52|)) ($Box |key#0@@168|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#302| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@52|)) |keys#0@@19|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@52|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketComplement ($LS $ly@@601) |bucket#0@@52| |keys#0@@19|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#302| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@52|)) |keys#0@@19|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@52|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.630:22| :skolemid |3674| :pattern ( (BucketsLib.__default.BucketComplement ($LS $ly@@601) |bucket#0@@52| |keys#0@@19|)) ))))
(assert  (=> true (forall (($ly@@602 T@U) (|bucket#0@@53| T@U) (|keys#0@@20| T@U) ) (!  (=> (and (and (and (= (type $ly@@602) LayerTypeType) (= (type |bucket#0@@53|) DatatypeTypeType)) (= (type |keys#0@@20|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketComplement#canCall| (Lit |bucket#0@@53|) (Lit |keys#0@@20|)) (and ($Is |bucket#0@@53| Tclass.BucketsLib.Bucket) ($Is |keys#0@@20| (TSet Tclass.KeyType.Key))))) (and (and (forall ((|key#0@@169| T@U) ) (!  (=> (and (= (type |key#0@@169|) (SeqType BoxType)) ($Is |key#0@@169| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@53|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@53|))) ($Box |key#0@@169|))) (not (U_2_bool (MapType0Select (Lit |keys#0@@20|) ($Box |key#0@@169|))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@53|))))) :qid |BucketsL.633:11| :skolemid |3675| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@53|)) ($Box |key#0@@169|)))) :pattern ( (MapType0Select |keys#0@@20| ($Box |key#0@@169|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@53|)) ($Box |key#0@@169|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#302| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@53|))) (Lit |keys#0@@20|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@53|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketComplement ($LS $ly@@602) (Lit |bucket#0@@53|) (Lit |keys#0@@20|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#302| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@53|))) (Lit |keys#0@@20|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@53|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.630:22| :weight 3 :skolemid |3676| :pattern ( (BucketsLib.__default.BucketComplement ($LS $ly@@602) (Lit |bucket#0@@53|) (Lit |keys#0@@20|))) ))))
(assert  (=> true (forall ((|a#0@@162| T@U) (|b#0@@134| T@U) (|key#0@@170| T@U) ) (!  (=> (and (and (and (= (type |a#0@@162|) DatatypeTypeType) (= (type |b#0@@134|) DatatypeTypeType)) (= (type |key#0@@170|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketsEquivalentForKey#canCall| |a#0@@162| |b#0@@134| |key#0@@170|) (and (and ($Is |a#0@@162| Tclass.BucketsLib.Bucket) ($Is |b#0@@134| Tclass.BucketsLib.Bucket)) ($Is |key#0@@170| Tclass.KeyType.Key)))) true) :qid |BucketsL.654:37| :skolemid |3697| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@162| |b#0@@134| |key#0@@170|)) ))))
(assert (forall ((|a#0@@163| T@U) (|b#0@@135| T@U) (|key#0@@171| T@U) ) (!  (=> (and (and (and (= (type |a#0@@163|) DatatypeTypeType) (= (type |b#0@@135|) DatatypeTypeType)) (= (type |key#0@@171|) (SeqType BoxType))) (and (and ($Is |a#0@@163| Tclass.BucketsLib.Bucket) ($Is |b#0@@135| Tclass.BucketsLib.Bucket)) ($Is |key#0@@171| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.BucketsEquivalentForKey#requires| |a#0@@163| |b#0@@135| |key#0@@171|) true) (=> true (|BucketsLib.__default.BucketsEquivalentForKey#requires| |a#0@@163| |b#0@@135| |key#0@@171|)))) :qid |BucketsL.654:37| :skolemid |3698| :pattern ( (|BucketsLib.__default.BucketsEquivalentForKey#requires| |a#0@@163| |b#0@@135| |key#0@@171|)) )))
(assert  (=> true (forall ((|a#0@@164| T@U) (|b#0@@136| T@U) (|key#0@@172| T@U) ) (!  (=> (and (and (and (= (type |a#0@@164|) DatatypeTypeType) (= (type |b#0@@136|) DatatypeTypeType)) (= (type |key#0@@172|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketsEquivalentForKey#canCall| |a#0@@164| |b#0@@136| |key#0@@172|) (and (and ($Is |a#0@@164| Tclass.BucketsLib.Bucket) ($Is |b#0@@136| Tclass.BucketsLib.Bucket)) ($Is |key#0@@172| Tclass.KeyType.Key)))) (and (and (and (|$IsA#ValueMessage.Message| (BucketsLib.__default.BucketGet |a#0@@164| |key#0@@172|)) (|$IsA#ValueMessage.Message| (BucketsLib.__default.BucketGet |b#0@@136| |key#0@@172|))) (and (|BucketsLib.__default.BucketGet#canCall| |a#0@@164| |key#0@@172|) (|BucketsLib.__default.BucketGet#canCall| |b#0@@136| |key#0@@172|))) (and (=> (BucketsLib.__default.BucketsEquivalentForKey |a#0@@164| |b#0@@136| |key#0@@172|) (|ValueMessage.Message#Equal| (BucketsLib.__default.BucketGet |a#0@@164| |key#0@@172|) (BucketsLib.__default.BucketGet |b#0@@136| |key#0@@172|))) (=> (|ValueMessage.Message#Equal| (BucketsLib.__default.BucketGet |a#0@@164| |key#0@@172|) (BucketsLib.__default.BucketGet |b#0@@136| |key#0@@172|)) (BucketsLib.__default.BucketsEquivalentForKey |a#0@@164| |b#0@@136| |key#0@@172|))))) :qid |BucketsL.654:37| :skolemid |3699| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@164| |b#0@@136| |key#0@@172|)) ))))
(assert  (=> true (forall ((|a#0@@165| T@U) (|b#0@@137| T@U) (|key#0@@173| T@U) ) (!  (=> (and (and (and (= (type |a#0@@165|) DatatypeTypeType) (= (type |b#0@@137|) DatatypeTypeType)) (= (type |key#0@@173|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketsEquivalentForKey#canCall| (Lit |a#0@@165|) (Lit |b#0@@137|) (Lit |key#0@@173|)) (and (and ($Is |a#0@@165| Tclass.BucketsLib.Bucket) ($Is |b#0@@137| Tclass.BucketsLib.Bucket)) ($Is |key#0@@173| Tclass.KeyType.Key)))) (and (and (and (|$IsA#ValueMessage.Message| (Lit (BucketsLib.__default.BucketGet (Lit |a#0@@165|) (Lit |key#0@@173|)))) (|$IsA#ValueMessage.Message| (Lit (BucketsLib.__default.BucketGet (Lit |b#0@@137|) (Lit |key#0@@173|))))) (and (|BucketsLib.__default.BucketGet#canCall| (Lit |a#0@@165|) (Lit |key#0@@173|)) (|BucketsLib.__default.BucketGet#canCall| (Lit |b#0@@137|) (Lit |key#0@@173|)))) (and (=> (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@165|) (Lit |b#0@@137|) (Lit |key#0@@173|)) (|ValueMessage.Message#Equal| (BucketsLib.__default.BucketGet (Lit |a#0@@165|) (Lit |key#0@@173|)) (BucketsLib.__default.BucketGet (Lit |b#0@@137|) (Lit |key#0@@173|)))) (=> (|ValueMessage.Message#Equal| (BucketsLib.__default.BucketGet (Lit |a#0@@165|) (Lit |key#0@@173|)) (BucketsLib.__default.BucketGet (Lit |b#0@@137|) (Lit |key#0@@173|))) (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@165|) (Lit |b#0@@137|) (Lit |key#0@@173|)))))) :qid |BucketsL.654:37| :weight 3 :skolemid |3700| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@165|) (Lit |b#0@@137|) (Lit |key#0@@173|))) ))))
(assert  (=> true (forall ((|a#0@@166| T@U) (|b#0@@138| T@U) ) (!  (=> (and (and (= (type |a#0@@166|) DatatypeTypeType) (= (type |b#0@@138|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketsEquivalent#canCall| |a#0@@166| |b#0@@138|) (and ($Is |a#0@@166| Tclass.BucketsLib.Bucket) ($Is |b#0@@138| Tclass.BucketsLib.Bucket)))) true) :qid |BucketsL.659:31| :skolemid |3701| :pattern ( (BucketsLib.__default.BucketsEquivalent |a#0@@166| |b#0@@138|)) ))))
(assert (forall ((|a#0@@167| T@U) (|b#0@@139| T@U) ) (!  (=> (and (and (= (type |a#0@@167|) DatatypeTypeType) (= (type |b#0@@139|) DatatypeTypeType)) (and ($Is |a#0@@167| Tclass.BucketsLib.Bucket) ($Is |b#0@@139| Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.BucketsEquivalent#requires| |a#0@@167| |b#0@@139|) true) (=> true (|BucketsLib.__default.BucketsEquivalent#requires| |a#0@@167| |b#0@@139|)))) :qid |BucketsL.659:31| :skolemid |3702| :pattern ( (|BucketsLib.__default.BucketsEquivalent#requires| |a#0@@167| |b#0@@139|)) )))
(assert  (=> true (forall ((|a#0@@168| T@U) (|b#0@@140| T@U) ) (!  (=> (and (and (= (type |a#0@@168|) DatatypeTypeType) (= (type |b#0@@140|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketsEquivalent#canCall| |a#0@@168| |b#0@@140|) (and ($Is |a#0@@168| Tclass.BucketsLib.Bucket) ($Is |b#0@@140| Tclass.BucketsLib.Bucket)))) (and (forall ((|key#0@@174| T@U) ) (!  (=> (and (= (type |key#0@@174|) (SeqType BoxType)) ($Is |key#0@@174| Tclass.KeyType.Key)) (|BucketsLib.__default.BucketsEquivalentForKey#canCall| |a#0@@168| |b#0@@140| |key#0@@174|)) :qid |BucketsL.661:12| :skolemid |3703| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@168| |b#0@@140| |key#0@@174|)) )) (and (=> (BucketsLib.__default.BucketsEquivalent |a#0@@168| |b#0@@140|) (forall ((|key#0@@175| T@U) ) (!  (=> (and (= (type |key#0@@175|) (SeqType BoxType)) ($Is |key#0@@175| Tclass.KeyType.Key)) (BucketsLib.__default.BucketsEquivalentForKey |a#0@@168| |b#0@@140| |key#0@@175|)) :qid |BucketsL.661:12| :skolemid |3704| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@168| |b#0@@140| |key#0@@175|)) ))) (=> (forall ((|key#0@@176| T@U) ) (!  (=> (and (= (type |key#0@@176|) (SeqType BoxType)) ($Is |key#0@@176| Tclass.KeyType.Key)) (BucketsLib.__default.BucketsEquivalentForKey |a#0@@168| |b#0@@140| |key#0@@176|)) :qid |BucketsL.661:12| :skolemid |3704| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@168| |b#0@@140| |key#0@@176|)) )) (BucketsLib.__default.BucketsEquivalent |a#0@@168| |b#0@@140|))))) :qid |BucketsL.659:31| :skolemid |3705| :pattern ( (BucketsLib.__default.BucketsEquivalent |a#0@@168| |b#0@@140|)) ))))
(assert  (=> true (forall ((|a#0@@169| T@U) (|b#0@@141| T@U) ) (!  (=> (and (and (= (type |a#0@@169|) DatatypeTypeType) (= (type |b#0@@141|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketsEquivalent#canCall| (Lit |a#0@@169|) (Lit |b#0@@141|)) (and ($Is |a#0@@169| Tclass.BucketsLib.Bucket) ($Is |b#0@@141| Tclass.BucketsLib.Bucket)))) (and (forall ((|key#1@@25| T@U) ) (!  (=> (and (= (type |key#1@@25|) (SeqType BoxType)) ($Is |key#1@@25| Tclass.KeyType.Key)) (|BucketsLib.__default.BucketsEquivalentForKey#canCall| (Lit |a#0@@169|) (Lit |b#0@@141|) |key#1@@25|)) :qid |BucketsL.661:12| :skolemid |3706| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@169| |b#0@@141| |key#1@@25|)) )) (and (=> (BucketsLib.__default.BucketsEquivalent (Lit |a#0@@169|) (Lit |b#0@@141|)) (forall ((|key#1@@26| T@U) ) (!  (=> (and (= (type |key#1@@26|) (SeqType BoxType)) ($Is |key#1@@26| Tclass.KeyType.Key)) (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@169|) (Lit |b#0@@141|) |key#1@@26|)) :qid |BucketsL.661:12| :skolemid |3707| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@169| |b#0@@141| |key#1@@26|)) ))) (=> (forall ((|key#1@@27| T@U) ) (!  (=> (and (= (type |key#1@@27|) (SeqType BoxType)) ($Is |key#1@@27| Tclass.KeyType.Key)) (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@169|) (Lit |b#0@@141|) |key#1@@27|)) :qid |BucketsL.661:12| :skolemid |3707| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@169| |b#0@@141| |key#1@@27|)) )) (BucketsLib.__default.BucketsEquivalent (Lit |a#0@@169|) (Lit |b#0@@141|)))))) :qid |BucketsL.659:31| :weight 3 :skolemid |3708| :pattern ( (BucketsLib.__default.BucketsEquivalent (Lit |a#0@@169|) (Lit |b#0@@141|))) ))))
(assert (forall ((arg0@@532 T@U) (arg1@@296 T@U) (arg2@@203 T@U) ) (! (= (type (BucketsLib.__default.Compose arg0@@532 arg1@@296 arg2@@203)) DatatypeTypeType) :qid |funType:BucketsLib.__default.Compose| :pattern ( (BucketsLib.__default.Compose arg0@@532 arg1@@296 arg2@@203)) )))
(assert (forall (($ly@@603 T@U) (|top#0| T@U) (|bot#0| T@U) ) (!  (=> (and (and (= (type $ly@@603) LayerTypeType) (= (type |top#0|) DatatypeTypeType)) (= (type |bot#0|) DatatypeTypeType)) (= (BucketsLib.__default.Compose ($LS $ly@@603) |top#0| |bot#0|) (BucketsLib.__default.Compose $ly@@603 |top#0| |bot#0|))) :qid |BucketsL.666:22| :skolemid |3709| :pattern ( (BucketsLib.__default.Compose ($LS $ly@@603) |top#0| |bot#0|)) )))
(assert (forall (($ly@@604 T@U) (|top#0@@0| T@U) (|bot#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@604) LayerTypeType) (= (type |top#0@@0|) DatatypeTypeType)) (= (type |bot#0@@0|) DatatypeTypeType)) (= (BucketsLib.__default.Compose $ly@@604 |top#0@@0| |bot#0@@0|) (BucketsLib.__default.Compose $LZ |top#0@@0| |bot#0@@0|))) :qid |BucketsL.666:22| :skolemid |3710| :pattern ( (BucketsLib.__default.Compose (AsFuelBottom $ly@@604) |top#0@@0| |bot#0@@0|)) )))
(assert  (=> true (forall (($ly@@605 T@U) (|top#0@@1| T@U) (|bot#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@605) LayerTypeType) (= (type |top#0@@1|) DatatypeTypeType)) (= (type |bot#0@@1|) DatatypeTypeType)) (or (|BucketsLib.__default.Compose#canCall| |top#0@@1| |bot#0@@1|) (and ($Is |top#0@@1| Tclass.BucketsLib.Bucket) ($Is |bot#0@@1| Tclass.BucketsLib.Bucket)))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.Compose $ly@@605 |top#0@@1| |bot#0@@1|)) ($Is (BucketsLib.__default.Compose $ly@@605 |top#0@@1| |bot#0@@1|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.666:22| :skolemid |3711| :pattern ( (BucketsLib.__default.Compose $ly@@605 |top#0@@1| |bot#0@@1|)) ))))
(assert (forall (($ly@@606 T@U) (|top#0@@2| T@U) (|bot#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@606) LayerTypeType) (= (type |top#0@@2|) DatatypeTypeType)) (= (type |bot#0@@2|) DatatypeTypeType)) (and ($Is |top#0@@2| Tclass.BucketsLib.Bucket) ($Is |bot#0@@2| Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.Compose#requires| $ly@@606 |top#0@@2| |bot#0@@2|) true) (=> true (|BucketsLib.__default.Compose#requires| $ly@@606 |top#0@@2| |bot#0@@2|)))) :qid |BucketsL.666:22| :skolemid |3712| :pattern ( (|BucketsLib.__default.Compose#requires| $ly@@606 |top#0@@2| |bot#0@@2|)) )))
(assert (forall ((arg0@@533 T@U) (arg1@@297 T@U) (arg2@@204 T@U) ) (! (= (type (|lambda#310| arg0@@533 arg1@@297 arg2@@204)) (MapType0Type BoxType boolType)) :qid |funType:lambda#310| :pattern ( (|lambda#310| arg0@@533 arg1@@297 arg2@@204)) )))
(assert  (=> true (forall (($ly@@607 T@U) (|top#0@@3| T@U) (|bot#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@607) LayerTypeType) (= (type |top#0@@3|) DatatypeTypeType)) (= (type |bot#0@@3|) DatatypeTypeType)) (or (|BucketsLib.__default.Compose#canCall| |top#0@@3| |bot#0@@3|) (and ($Is |top#0@@3| Tclass.BucketsLib.Bucket) ($Is |bot#0@@3| Tclass.BucketsLib.Bucket)))) (and (and (forall ((|key#0@@177| T@U) ) (!  (=> (and (= (type |key#0@@177|) (SeqType BoxType)) ($Is |key#0@@177| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |top#0@@3|) (BucketsLib.Bucket.BucketMapWithSeq_q |bot#0@@3|)) (=> (or (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |top#0@@3|)) ($Box |key#0@@177|))) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bot#0@@3|)) ($Box |key#0@@177|)))) (and (and (|BucketsLib.__default.BucketGet#canCall| |top#0@@3| |key#0@@177|) (|BucketsLib.__default.BucketGet#canCall| |bot#0@@3| |key#0@@177|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet |top#0@@3| |key#0@@177|) (BucketsLib.__default.BucketGet |bot#0@@3| |key#0@@177|)))))) :qid |BucketsL.669:11| :skolemid |3713| :pattern ( (BucketsLib.__default.BucketGet |bot#0@@3| |key#0@@177|)) :pattern ( (BucketsLib.__default.BucketGet |top#0@@3| |key#0@@177|)) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#310| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |top#0@@3|)) (|Map#Domain| (BucketsLib.Bucket.b |bot#0@@3|))) (|lambda#249| |top#0@@3| |bot#0@@3|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.Compose ($LS $ly@@607) |top#0@@3| |bot#0@@3|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#310| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |top#0@@3|)) (|Map#Domain| (BucketsLib.Bucket.b |bot#0@@3|))) (|lambda#249| |top#0@@3| |bot#0@@3|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.666:22| :skolemid |3714| :pattern ( (BucketsLib.__default.Compose ($LS $ly@@607) |top#0@@3| |bot#0@@3|)) ))))
(assert  (=> true (forall (($ly@@608 T@U) (|top#0@@4| T@U) (|bot#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@608) LayerTypeType) (= (type |top#0@@4|) DatatypeTypeType)) (= (type |bot#0@@4|) DatatypeTypeType)) (or (|BucketsLib.__default.Compose#canCall| (Lit |top#0@@4|) (Lit |bot#0@@4|)) (and ($Is |top#0@@4| Tclass.BucketsLib.Bucket) ($Is |bot#0@@4| Tclass.BucketsLib.Bucket)))) (and (and (forall ((|key#0@@178| T@U) ) (!  (=> (and (= (type |key#0@@178|) (SeqType BoxType)) ($Is |key#0@@178| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |top#0@@4|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bot#0@@4|))) (=> (or (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |top#0@@4|))))) ($Box |key#0@@178|))) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |bot#0@@4|))))) ($Box |key#0@@178|)))) (and (and (|BucketsLib.__default.BucketGet#canCall| (Lit |top#0@@4|) |key#0@@178|) (|BucketsLib.__default.BucketGet#canCall| (Lit |bot#0@@4|) |key#0@@178|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet (Lit |top#0@@4|) |key#0@@178|) (BucketsLib.__default.BucketGet (Lit |bot#0@@4|) |key#0@@178|)))))) :qid |BucketsL.669:11| :skolemid |3715| :pattern ( (BucketsLib.__default.BucketGet |bot#0@@4| |key#0@@178|)) :pattern ( (BucketsLib.__default.BucketGet |top#0@@4| |key#0@@178|)) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#310| Tclass.KeyType.Key (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |top#0@@4|))))) (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |bot#0@@4|)))))) (|lambda#249| (Lit |top#0@@4|) (Lit |bot#0@@4|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.Compose ($LS $ly@@608) (Lit |top#0@@4|) (Lit |bot#0@@4|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#310| Tclass.KeyType.Key (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |top#0@@4|))))) (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |bot#0@@4|)))))) (|lambda#249| (Lit |top#0@@4|) (Lit |bot#0@@4|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.666:22| :weight 3 :skolemid |3716| :pattern ( (BucketsLib.__default.Compose ($LS $ly@@608) (Lit |top#0@@4|) (Lit |bot#0@@4|))) ))))
(assert (forall ((arg0@@534 T@U) (arg1@@298 T@U) ) (! (= (type (BucketsLib.__default.ComposeSeq arg0@@534 arg1@@298)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ComposeSeq| :pattern ( (BucketsLib.__default.ComposeSeq arg0@@534 arg1@@298)) )))
(assert (forall (($ly@@609 T@U) (|buckets#0@@5| T@U) ) (!  (=> (and (= (type $ly@@609) LayerTypeType) (= (type |buckets#0@@5|) (SeqType BoxType))) (= (BucketsLib.__default.ComposeSeq ($LS $ly@@609) |buckets#0@@5|) (BucketsLib.__default.ComposeSeq $ly@@609 |buckets#0@@5|))) :qid |BucketsL.675:22| :skolemid |3717| :pattern ( (BucketsLib.__default.ComposeSeq ($LS $ly@@609) |buckets#0@@5|)) )))
(assert (forall (($ly@@610 T@U) (|buckets#0@@6| T@U) ) (!  (=> (and (= (type $ly@@610) LayerTypeType) (= (type |buckets#0@@6|) (SeqType BoxType))) (= (BucketsLib.__default.ComposeSeq $ly@@610 |buckets#0@@6|) (BucketsLib.__default.ComposeSeq $LZ |buckets#0@@6|))) :qid |BucketsL.675:22| :skolemid |3718| :pattern ( (BucketsLib.__default.ComposeSeq (AsFuelBottom $ly@@610) |buckets#0@@6|)) )))
(assert  (=> true (forall (($ly@@611 T@U) (|buckets#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@611) LayerTypeType) (= (type |buckets#0@@7|) (SeqType BoxType))) (or (|BucketsLib.__default.ComposeSeq#canCall| |buckets#0@@7|) ($Is |buckets#0@@7| (TSeq Tclass.BucketsLib.Bucket)))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.ComposeSeq $ly@@611 |buckets#0@@7|)) ($Is (BucketsLib.__default.ComposeSeq $ly@@611 |buckets#0@@7|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.675:22| :skolemid |3719| :pattern ( (BucketsLib.__default.ComposeSeq $ly@@611 |buckets#0@@7|)) ))))
(assert (forall (($ly@@612 T@U) (|buckets#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@612) LayerTypeType) (= (type |buckets#0@@8|) (SeqType BoxType))) ($Is |buckets#0@@8| (TSeq Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.ComposeSeq#requires| $ly@@612 |buckets#0@@8|) true) (=> true (|BucketsLib.__default.ComposeSeq#requires| $ly@@612 |buckets#0@@8|)))) :qid |BucketsL.675:22| :skolemid |3720| :pattern ( (|BucketsLib.__default.ComposeSeq#requires| $ly@@612 |buckets#0@@8|)) )))
(assert (= (type StartFuel_BucketsLib._default.Compose) LayerTypeType))
(assert  (=> true (forall (($ly@@613 T@U) (|buckets#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@613) LayerTypeType) (= (type |buckets#0@@9|) (SeqType BoxType))) (or (|BucketsLib.__default.ComposeSeq#canCall| |buckets#0@@9|) ($Is |buckets#0@@9| (TSeq Tclass.BucketsLib.Bucket)))) (and (and (=> (= (|Seq#Length| |buckets#0@@9|) (LitInt 0)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (=> (not (= (|Seq#Length| |buckets#0@@9|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket |buckets#0@@9|) (|BucketsLib.__default.ComposeSeq#canCall| (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@9|))) (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket |buckets#0@@9|)) (|BucketsLib.__default.Compose#canCall| (BucketsLib.__default.ComposeSeq $ly@@613 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@9|)) ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@9|)))))) (= (BucketsLib.__default.ComposeSeq ($LS $ly@@613) |buckets#0@@9|) (ite (= (|Seq#Length| |buckets#0@@9|) (LitInt 0)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (BucketsLib.__default.ComposeSeq $ly@@613 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@9|)) ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@9|))))))) :qid |BucketsL.675:22| :skolemid |3721| :pattern ( (BucketsLib.__default.ComposeSeq ($LS $ly@@613) |buckets#0@@9|)) ))))
(assert  (=> true (forall (($ly@@614 T@U) (|buckets#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@614) LayerTypeType) (= (type |buckets#0@@10|) (SeqType BoxType))) (or (|BucketsLib.__default.ComposeSeq#canCall| (Lit |buckets#0@@10|)) ($Is |buckets#0@@10| (TSeq Tclass.BucketsLib.Bucket)))) (and (and (=> (= (|Seq#Length| (Lit |buckets#0@@10|)) (LitInt 0)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (=> (not (= (|Seq#Length| (Lit |buckets#0@@10|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)) (|BucketsLib.__default.ComposeSeq#canCall| (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|))))) (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|))) (|BucketsLib.__default.Compose#canCall| (BucketsLib.__default.ComposeSeq ($LS $ly@@614) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)))) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)))))))) (= (BucketsLib.__default.ComposeSeq ($LS $ly@@614) (Lit |buckets#0@@10|)) (ite (= (|Seq#Length| (Lit |buckets#0@@10|)) (LitInt 0)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (BucketsLib.__default.ComposeSeq ($LS $ly@@614) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)))) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|))))))))) :qid |BucketsL.675:22| :weight 3 :skolemid |3722| :pattern ( (BucketsLib.__default.ComposeSeq ($LS $ly@@614) (Lit |buckets#0@@10|))) ))))
(assert  (=> true (forall ((|oldparent#0| T@U) (|oldchild#0| T@U) (|newparent#0| T@U) (|newchild#0| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0|) DatatypeTypeType) (= (type |oldchild#0|) DatatypeTypeType)) (= (type |newparent#0|) DatatypeTypeType)) (= (type |newchild#0|) DatatypeTypeType)) (or (|BucketsLib.__default.FlushEquivalentParentChild#canCall| |oldparent#0| |oldchild#0| |newparent#0| |newchild#0|) (and (and (and ($Is |oldparent#0| Tclass.BucketsLib.Bucket) ($Is |oldchild#0| Tclass.BucketsLib.Bucket)) ($Is |newparent#0| Tclass.BucketsLib.Bucket)) ($Is |newchild#0| Tclass.BucketsLib.Bucket)))) true) :qid |BucketsL.742:40| :skolemid |3723| :pattern ( (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0| |oldchild#0| |newparent#0| |newchild#0|)) ))))
(assert (forall ((|oldparent#0@@0| T@U) (|oldchild#0@@0| T@U) (|newparent#0@@0| T@U) (|newchild#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@0|) DatatypeTypeType) (= (type |oldchild#0@@0|) DatatypeTypeType)) (= (type |newparent#0@@0|) DatatypeTypeType)) (= (type |newchild#0@@0|) DatatypeTypeType)) (and (and (and ($Is |oldparent#0@@0| Tclass.BucketsLib.Bucket) ($Is |oldchild#0@@0| Tclass.BucketsLib.Bucket)) ($Is |newparent#0@@0| Tclass.BucketsLib.Bucket)) ($Is |newchild#0@@0| Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.FlushEquivalentParentChild#requires| |oldparent#0@@0| |oldchild#0@@0| |newparent#0@@0| |newchild#0@@0|) true) (=> true (|BucketsLib.__default.FlushEquivalentParentChild#requires| |oldparent#0@@0| |oldchild#0@@0| |newparent#0@@0| |newchild#0@@0|)))) :qid |BucketsL.742:40| :skolemid |3724| :pattern ( (|BucketsLib.__default.FlushEquivalentParentChild#requires| |oldparent#0@@0| |oldchild#0@@0| |newparent#0@@0| |newchild#0@@0|)) )))
(assert  (=> true (forall ((|oldparent#0@@1| T@U) (|oldchild#0@@1| T@U) (|newparent#0@@1| T@U) (|newchild#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@1|) DatatypeTypeType) (= (type |oldchild#0@@1|) DatatypeTypeType)) (= (type |newparent#0@@1|) DatatypeTypeType)) (= (type |newchild#0@@1|) DatatypeTypeType)) (or (|BucketsLib.__default.FlushEquivalentParentChild#canCall| |oldparent#0@@1| |oldchild#0@@1| |newparent#0@@1| |newchild#0@@1|) (and (and (and ($Is |oldparent#0@@1| Tclass.BucketsLib.Bucket) ($Is |oldchild#0@@1| Tclass.BucketsLib.Bucket)) ($Is |newparent#0@@1| Tclass.BucketsLib.Bucket)) ($Is |newchild#0@@1| Tclass.BucketsLib.Bucket)))) (and (and (and (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |oldparent#0@@1| |oldchild#0@@1|)) (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |newparent#0@@1| |newchild#0@@1|))) (and (|BucketsLib.__default.Compose#canCall| |oldparent#0@@1| |oldchild#0@@1|) (|BucketsLib.__default.Compose#canCall| |newparent#0@@1| |newchild#0@@1|))) (and (=> (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@1| |oldchild#0@@1| |newparent#0@@1| |newchild#0@@1|) (|BucketsLib.Bucket#Equal| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |oldparent#0@@1| |oldchild#0@@1|) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |newparent#0@@1| |newchild#0@@1|))) (=> (|BucketsLib.Bucket#Equal| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |oldparent#0@@1| |oldchild#0@@1|) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |newparent#0@@1| |newchild#0@@1|)) (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@1| |oldchild#0@@1| |newparent#0@@1| |newchild#0@@1|))))) :qid |BucketsL.742:40| :skolemid |3725| :pattern ( (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@1| |oldchild#0@@1| |newparent#0@@1| |newchild#0@@1|)) ))))
(assert  (=> true (forall ((|oldparent#0@@2| T@U) (|oldchild#0@@2| T@U) (|newparent#0@@2| T@U) (|newchild#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@2|) DatatypeTypeType) (= (type |oldchild#0@@2|) DatatypeTypeType)) (= (type |newparent#0@@2|) DatatypeTypeType)) (= (type |newchild#0@@2|) DatatypeTypeType)) (or (|BucketsLib.__default.FlushEquivalentParentChild#canCall| (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|) (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)) (and (and (and ($Is |oldparent#0@@2| Tclass.BucketsLib.Bucket) ($Is |oldchild#0@@2| Tclass.BucketsLib.Bucket)) ($Is |newparent#0@@2| Tclass.BucketsLib.Bucket)) ($Is |newchild#0@@2| Tclass.BucketsLib.Bucket)))) (and (and (and (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|))) (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)))) (and (|BucketsLib.__default.Compose#canCall| (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|)) (|BucketsLib.__default.Compose#canCall| (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)))) (and (=> (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|) (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)) (|BucketsLib.Bucket#Equal| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|)) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)))) (=> (|BucketsLib.Bucket#Equal| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|)) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |newparent#0@@2|) (Lit |newchild#0@@2|))) (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|) (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)))))) :qid |BucketsL.742:40| :weight 3 :skolemid |3726| :pattern ( (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|) (Lit |newparent#0@@2|) (Lit |newchild#0@@2|))) ))))
(assert  (=> true (forall ((|oldparent#0@@3| T@U) (|oldchildren#0| T@U) (|newparent#0@@3| T@U) (|newchildren#0| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@3|) DatatypeTypeType) (= (type |oldchildren#0|) (SeqType BoxType))) (= (type |newparent#0@@3|) DatatypeTypeType)) (= (type |newchildren#0|) (SeqType BoxType))) (or (|BucketsLib.__default.FlushEquivalent#canCall| |oldparent#0@@3| |oldchildren#0| |newparent#0@@3| |newchildren#0|) (and (and (and ($Is |oldparent#0@@3| Tclass.BucketsLib.Bucket) ($Is |oldchildren#0| (TSeq Tclass.BucketsLib.Bucket))) ($Is |newparent#0@@3| Tclass.BucketsLib.Bucket)) ($Is |newchildren#0| (TSeq Tclass.BucketsLib.Bucket))))) true) :qid |BucketsL.747:29| :skolemid |3727| :pattern ( (BucketsLib.__default.FlushEquivalent |oldparent#0@@3| |oldchildren#0| |newparent#0@@3| |newchildren#0|)) ))))
(assert (forall ((|oldparent#0@@4| T@U) (|oldchildren#0@@0| T@U) (|newparent#0@@4| T@U) (|newchildren#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@4|) DatatypeTypeType) (= (type |oldchildren#0@@0|) (SeqType BoxType))) (= (type |newparent#0@@4|) DatatypeTypeType)) (= (type |newchildren#0@@0|) (SeqType BoxType))) (and (and (and ($Is |oldparent#0@@4| Tclass.BucketsLib.Bucket) ($Is |oldchildren#0@@0| (TSeq Tclass.BucketsLib.Bucket))) ($Is |newparent#0@@4| Tclass.BucketsLib.Bucket)) ($Is |newchildren#0@@0| (TSeq Tclass.BucketsLib.Bucket)))) (and (=> (|BucketsLib.__default.FlushEquivalent#requires| |oldparent#0@@4| |oldchildren#0@@0| |newparent#0@@4| |newchildren#0@@0|) true) (=> true (|BucketsLib.__default.FlushEquivalent#requires| |oldparent#0@@4| |oldchildren#0@@0| |newparent#0@@4| |newchildren#0@@0|)))) :qid |BucketsL.747:29| :skolemid |3728| :pattern ( (|BucketsLib.__default.FlushEquivalent#requires| |oldparent#0@@4| |oldchildren#0@@0| |newparent#0@@4| |newchildren#0@@0|)) )))
(assert  (=> true (forall ((|oldparent#0@@5| T@U) (|oldchildren#0@@1| T@U) (|newparent#0@@5| T@U) (|newchildren#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@5|) DatatypeTypeType) (= (type |oldchildren#0@@1|) (SeqType BoxType))) (= (type |newparent#0@@5|) DatatypeTypeType)) (= (type |newchildren#0@@1|) (SeqType BoxType))) (or (|BucketsLib.__default.FlushEquivalent#canCall| |oldparent#0@@5| |oldchildren#0@@1| |newparent#0@@5| |newchildren#0@@1|) (and (and (and ($Is |oldparent#0@@5| Tclass.BucketsLib.Bucket) ($Is |oldchildren#0@@1| (TSeq Tclass.BucketsLib.Bucket))) ($Is |newparent#0@@5| Tclass.BucketsLib.Bucket)) ($Is |newchildren#0@@1| (TSeq Tclass.BucketsLib.Bucket))))) (and (=> (= (|Seq#Length| |oldchildren#0@@1|) (|Seq#Length| |newchildren#0@@1|)) (forall ((|i#0@@165| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@165|) (< |i#0@@165| (|Seq#Length| |oldchildren#0@@1|))) (|BucketsLib.__default.FlushEquivalentParentChild#canCall| |oldparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@165|)) |newparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@165|)))) :qid |BucketsL.750:16| :skolemid |3729| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@165|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@165|))) ))) (and (=> (BucketsLib.__default.FlushEquivalent |oldparent#0@@5| |oldchildren#0@@1| |newparent#0@@5| |newchildren#0@@1|) (and (= (|Seq#Length| |oldchildren#0@@1|) (|Seq#Length| |newchildren#0@@1|)) (forall ((|i#0@@166| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@166|) (< |i#0@@166| (|Seq#Length| |oldchildren#0@@1|))) (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@166|)) |newparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@166|)))) :qid |BucketsL.750:16| :skolemid |3730| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@166|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@166|))) )))) (=> (and (= (|Seq#Length| |oldchildren#0@@1|) (|Seq#Length| |newchildren#0@@1|)) (forall ((|i#0@@167| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@167|) (< |i#0@@167| (|Seq#Length| |oldchildren#0@@1|))) (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@167|)) |newparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@167|)))) :qid |BucketsL.750:16| :skolemid |3730| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@167|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@167|))) ))) (BucketsLib.__default.FlushEquivalent |oldparent#0@@5| |oldchildren#0@@1| |newparent#0@@5| |newchildren#0@@1|))))) :qid |BucketsL.747:29| :skolemid |3731| :pattern ( (BucketsLib.__default.FlushEquivalent |oldparent#0@@5| |oldchildren#0@@1| |newparent#0@@5| |newchildren#0@@1|)) ))))
(assert  (=> true (forall ((|oldparent#0@@6| T@U) (|oldchildren#0@@2| T@U) (|newparent#0@@6| T@U) (|newchildren#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@6|) DatatypeTypeType) (= (type |oldchildren#0@@2|) (SeqType BoxType))) (= (type |newparent#0@@6|) DatatypeTypeType)) (= (type |newchildren#0@@2|) (SeqType BoxType))) (or (|BucketsLib.__default.FlushEquivalent#canCall| (Lit |oldparent#0@@6|) (Lit |oldchildren#0@@2|) (Lit |newparent#0@@6|) (Lit |newchildren#0@@2|)) (and (and (and ($Is |oldparent#0@@6| Tclass.BucketsLib.Bucket) ($Is |oldchildren#0@@2| (TSeq Tclass.BucketsLib.Bucket))) ($Is |newparent#0@@6| Tclass.BucketsLib.Bucket)) ($Is |newchildren#0@@2| (TSeq Tclass.BucketsLib.Bucket))))) (and (=> (= (|Seq#Length| (Lit |oldchildren#0@@2|)) (|Seq#Length| (Lit |newchildren#0@@2|))) (forall ((|i#1@@78| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@78|) (< |i#1@@78| (|Seq#Length| (Lit |oldchildren#0@@2|)))) (|BucketsLib.__default.FlushEquivalentParentChild#canCall| (Lit |oldparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |oldchildren#0@@2|) |i#1@@78|)) (Lit |newparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |newchildren#0@@2|) |i#1@@78|)))) :qid |BucketsL.750:16| :skolemid |3732| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@2| |i#1@@78|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@2| |i#1@@78|))) ))) (and (=> (BucketsLib.__default.FlushEquivalent (Lit |oldparent#0@@6|) (Lit |oldchildren#0@@2|) (Lit |newparent#0@@6|) (Lit |newchildren#0@@2|)) (and (= (|Seq#Length| (Lit |oldchildren#0@@2|)) (|Seq#Length| (Lit |newchildren#0@@2|))) (forall ((|i#1@@79| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@79|) (< |i#1@@79| (|Seq#Length| (Lit |oldchildren#0@@2|)))) (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |oldchildren#0@@2|) |i#1@@79|)) (Lit |newparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |newchildren#0@@2|) |i#1@@79|)))) :qid |BucketsL.750:16| :skolemid |3733| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@2| |i#1@@79|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@2| |i#1@@79|))) )))) (=> (and (= (|Seq#Length| (Lit |oldchildren#0@@2|)) (|Seq#Length| (Lit |newchildren#0@@2|))) (forall ((|i#1@@80| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@80|) (< |i#1@@80| (|Seq#Length| (Lit |oldchildren#0@@2|)))) (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |oldchildren#0@@2|) |i#1@@80|)) (Lit |newparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |newchildren#0@@2|) |i#1@@80|)))) :qid |BucketsL.750:16| :skolemid |3733| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@2| |i#1@@80|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@2| |i#1@@80|))) ))) (BucketsLib.__default.FlushEquivalent (Lit |oldparent#0@@6|) (Lit |oldchildren#0@@2|) (Lit |newparent#0@@6|) (Lit |newchildren#0@@2|)))))) :qid |BucketsL.747:29| :weight 3 :skolemid |3734| :pattern ( (BucketsLib.__default.FlushEquivalent (Lit |oldparent#0@@6|) (Lit |oldchildren#0@@2|) (Lit |newparent#0@@6|) (Lit |newchildren#0@@2|))) ))))
(assert (forall ((arg0@@535 T@U) (arg1@@299 T@U) (arg2@@205 T@U) ) (! (= (type (BucketsLib.__default.InterpretBucketStack arg0@@535 arg1@@299 arg2@@205)) DatatypeTypeType) :qid |funType:BucketsLib.__default.InterpretBucketStack| :pattern ( (BucketsLib.__default.InterpretBucketStack arg0@@535 arg1@@299 arg2@@205)) )))
(assert (forall (($ly@@615 T@U) (|buckets#0@@11| T@U) (|key#0@@179| T@U) ) (!  (=> (and (and (= (type $ly@@615) LayerTypeType) (= (type |buckets#0@@11|) (SeqType BoxType))) (= (type |key#0@@179|) (SeqType BoxType))) (= (BucketsLib.__default.InterpretBucketStack ($LS $ly@@615) |buckets#0@@11| |key#0@@179|) (BucketsLib.__default.InterpretBucketStack $ly@@615 |buckets#0@@11| |key#0@@179|))) :qid |BucketsL.753:12| :skolemid |3735| :pattern ( (BucketsLib.__default.InterpretBucketStack ($LS $ly@@615) |buckets#0@@11| |key#0@@179|)) )))
(assert (forall (($ly@@616 T@U) (|buckets#0@@12| T@U) (|key#0@@180| T@U) ) (!  (=> (and (and (= (type $ly@@616) LayerTypeType) (= (type |buckets#0@@12|) (SeqType BoxType))) (= (type |key#0@@180|) (SeqType BoxType))) (= (BucketsLib.__default.InterpretBucketStack $ly@@616 |buckets#0@@12| |key#0@@180|) (BucketsLib.__default.InterpretBucketStack $LZ |buckets#0@@12| |key#0@@180|))) :qid |BucketsL.753:12| :skolemid |3736| :pattern ( (BucketsLib.__default.InterpretBucketStack (AsFuelBottom $ly@@616) |buckets#0@@12| |key#0@@180|)) )))
(assert  (=> true (forall (($ly@@617 T@U) (|buckets#0@@13| T@U) (|key#0@@181| T@U) ) (!  (=> (and (and (and (= (type $ly@@617) LayerTypeType) (= (type |buckets#0@@13|) (SeqType BoxType))) (= (type |key#0@@181|) (SeqType BoxType))) (or (|BucketsLib.__default.InterpretBucketStack#canCall| |buckets#0@@13| |key#0@@181|) (and ($Is |buckets#0@@13| (TSeq Tclass.BucketsLib.Bucket)) ($Is |key#0@@181| Tclass.KeyType.Key)))) ($Is (BucketsLib.__default.InterpretBucketStack $ly@@617 |buckets#0@@13| |key#0@@181|) Tclass.ValueMessage.Message)) :qid |BucketsL.753:12| :skolemid |3737| :pattern ( (BucketsLib.__default.InterpretBucketStack $ly@@617 |buckets#0@@13| |key#0@@181|)) ))))
(assert (forall (($ly@@618 T@U) (|buckets#0@@14| T@U) (|key#0@@182| T@U) ) (!  (=> (and (and (and (= (type $ly@@618) LayerTypeType) (= (type |buckets#0@@14|) (SeqType BoxType))) (= (type |key#0@@182|) (SeqType BoxType))) (and ($Is |buckets#0@@14| (TSeq Tclass.BucketsLib.Bucket)) ($Is |key#0@@182| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.InterpretBucketStack#requires| $ly@@618 |buckets#0@@14| |key#0@@182|) true) (=> true (|BucketsLib.__default.InterpretBucketStack#requires| $ly@@618 |buckets#0@@14| |key#0@@182|)))) :qid |BucketsL.753:12| :skolemid |3738| :pattern ( (|BucketsLib.__default.InterpretBucketStack#requires| $ly@@618 |buckets#0@@14| |key#0@@182|)) )))
(assert  (=> true (forall (($ly@@619 T@U) (|buckets#0@@15| T@U) (|key#0@@183| T@U) ) (!  (=> (and (and (and (= (type $ly@@619) LayerTypeType) (= (type |buckets#0@@15|) (SeqType BoxType))) (= (type |key#0@@183|) (SeqType BoxType))) (or (|BucketsLib.__default.InterpretBucketStack#canCall| |buckets#0@@15| |key#0@@183|) (and ($Is |buckets#0@@15| (TSeq Tclass.BucketsLib.Bucket)) ($Is |key#0@@183| Tclass.KeyType.Key)))) (and (and (=> (= (|Seq#Length| |buckets#0@@15|) (LitInt 0)) |ValueMessage.__default.NopDelta#canCall|) (=> (not (= (|Seq#Length| |buckets#0@@15|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket |buckets#0@@15|) (|BucketsLib.__default.InterpretBucketStack#canCall| (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@15|) |key#0@@183|)) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket |buckets#0@@15|) (|BucketsLib.__default.BucketGet#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@15|)) |key#0@@183|))) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.InterpretBucketStack $ly@@619 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@15|) |key#0@@183|) (BucketsLib.__default.BucketGet ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@15|)) |key#0@@183|))))) (= (BucketsLib.__default.InterpretBucketStack ($LS $ly@@619) |buckets#0@@15| |key#0@@183|) (ite (= (|Seq#Length| |buckets#0@@15|) (LitInt 0)) (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta)) (ValueMessage.__default.Merge (BucketsLib.__default.InterpretBucketStack $ly@@619 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@15|) |key#0@@183|) (BucketsLib.__default.BucketGet ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@15|)) |key#0@@183|)))))) :qid |BucketsL.753:12| :skolemid |3739| :pattern ( (BucketsLib.__default.InterpretBucketStack ($LS $ly@@619) |buckets#0@@15| |key#0@@183|)) ))))
(assert  (=> true (forall (($ly@@620 T@U) (|buckets#0@@16| T@U) (|key#0@@184| T@U) ) (!  (=> (and (and (and (= (type $ly@@620) LayerTypeType) (= (type |buckets#0@@16|) (SeqType BoxType))) (= (type |key#0@@184|) (SeqType BoxType))) (or (|BucketsLib.__default.InterpretBucketStack#canCall| (Lit |buckets#0@@16|) (Lit |key#0@@184|)) (and ($Is |buckets#0@@16| (TSeq Tclass.BucketsLib.Bucket)) ($Is |key#0@@184| Tclass.KeyType.Key)))) (and (and (=> (= (|Seq#Length| (Lit |buckets#0@@16|)) (LitInt 0)) |ValueMessage.__default.NopDelta#canCall|) (=> (not (= (|Seq#Length| (Lit |buckets#0@@16|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)) (|BucketsLib.__default.InterpretBucketStack#canCall| (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|))) (Lit |key#0@@184|))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)) (|BucketsLib.__default.BucketGet#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)))) (Lit |key#0@@184|)))) (|ValueMessage.__default.Merge#canCall| (Lit (BucketsLib.__default.InterpretBucketStack ($LS $ly@@620) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|))) (Lit |key#0@@184|))) (Lit (BucketsLib.__default.BucketGet (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)))) (Lit |key#0@@184|))))))) (= (BucketsLib.__default.InterpretBucketStack ($LS $ly@@620) (Lit |buckets#0@@16|) (Lit |key#0@@184|)) (ite (= (|Seq#Length| (Lit |buckets#0@@16|)) (LitInt 0)) (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta)) (ValueMessage.__default.Merge (Lit (BucketsLib.__default.InterpretBucketStack ($LS $ly@@620) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|))) (Lit |key#0@@184|))) (Lit (BucketsLib.__default.BucketGet (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)))) (Lit |key#0@@184|)))))))) :qid |BucketsL.753:12| :weight 3 :skolemid |3740| :pattern ( (BucketsLib.__default.InterpretBucketStack ($LS $ly@@620) (Lit |buckets#0@@16|) (Lit |key#0@@184|))) ))))
(assert (forall ((arg0@@536 T@U) (arg1@@300 T@U) (arg2@@206 T@U) (arg3@@143 T@U) ) (! (= (type (BucketsLib.__default.ClampRange arg0@@536 arg1@@300 arg2@@206 arg3@@143)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ClampRange| :pattern ( (BucketsLib.__default.ClampRange arg0@@536 arg1@@300 arg2@@206 arg3@@143)) )))
(assert (forall (($ly@@621 T@U) (|bucket#0@@54| T@U) (|start#0@@21| T@U) (|end#0@@21| T@U) ) (!  (=> (and (and (and (= (type $ly@@621) LayerTypeType) (= (type |bucket#0@@54|) DatatypeTypeType)) (= (type |start#0@@21|) DatatypeTypeType)) (= (type |end#0@@21|) DatatypeTypeType)) (= (BucketsLib.__default.ClampRange ($LS $ly@@621) |bucket#0@@54| |start#0@@21| |end#0@@21|) (BucketsLib.__default.ClampRange $ly@@621 |bucket#0@@54| |start#0@@21| |end#0@@21|))) :qid |BucketsL.774:22| :skolemid |3741| :pattern ( (BucketsLib.__default.ClampRange ($LS $ly@@621) |bucket#0@@54| |start#0@@21| |end#0@@21|)) )))
(assert (forall (($ly@@622 T@U) (|bucket#0@@55| T@U) (|start#0@@22| T@U) (|end#0@@22| T@U) ) (!  (=> (and (and (and (= (type $ly@@622) LayerTypeType) (= (type |bucket#0@@55|) DatatypeTypeType)) (= (type |start#0@@22|) DatatypeTypeType)) (= (type |end#0@@22|) DatatypeTypeType)) (= (BucketsLib.__default.ClampRange $ly@@622 |bucket#0@@55| |start#0@@22| |end#0@@22|) (BucketsLib.__default.ClampRange $LZ |bucket#0@@55| |start#0@@22| |end#0@@22|))) :qid |BucketsL.774:22| :skolemid |3742| :pattern ( (BucketsLib.__default.ClampRange (AsFuelBottom $ly@@622) |bucket#0@@55| |start#0@@22| |end#0@@22|)) )))
(assert  (=> true (forall (($ly@@623 T@U) (|bucket#0@@56| T@U) (|start#0@@23| T@U) (|end#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@623) LayerTypeType) (= (type |bucket#0@@56|) DatatypeTypeType)) (= (type |start#0@@23|) DatatypeTypeType)) (= (type |end#0@@23|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampRange#canCall| |bucket#0@@56| |start#0@@23| |end#0@@23|) (and (and ($Is |bucket#0@@56| Tclass.BucketsLib.Bucket) ($Is |start#0@@23| Tclass.UI.RangeStart)) ($Is |end#0@@23| Tclass.UI.RangeEnd)))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.ClampRange $ly@@623 |bucket#0@@56| |start#0@@23| |end#0@@23|)) ($Is (BucketsLib.__default.ClampRange $ly@@623 |bucket#0@@56| |start#0@@23| |end#0@@23|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.774:22| :skolemid |3743| :pattern ( (BucketsLib.__default.ClampRange $ly@@623 |bucket#0@@56| |start#0@@23| |end#0@@23|)) ))))
(assert (forall (($ly@@624 T@U) (|bucket#0@@57| T@U) (|start#0@@24| T@U) (|end#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@624) LayerTypeType) (= (type |bucket#0@@57|) DatatypeTypeType)) (= (type |start#0@@24|) DatatypeTypeType)) (= (type |end#0@@24|) DatatypeTypeType)) (and (and ($Is |bucket#0@@57| Tclass.BucketsLib.Bucket) ($Is |start#0@@24| Tclass.UI.RangeStart)) ($Is |end#0@@24| Tclass.UI.RangeEnd))) (and (=> (|BucketsLib.__default.ClampRange#requires| $ly@@624 |bucket#0@@57| |start#0@@24| |end#0@@24|) true) (=> true (|BucketsLib.__default.ClampRange#requires| $ly@@624 |bucket#0@@57| |start#0@@24| |end#0@@24|)))) :qid |BucketsL.774:22| :skolemid |3744| :pattern ( (|BucketsLib.__default.ClampRange#requires| $ly@@624 |bucket#0@@57| |start#0@@24| |end#0@@24|)) )))
(assert (forall ((arg0@@537 T@U) (arg1@@301 T@U) (arg2@@207 T@U) (arg3@@144 T@U) ) (! (= (type (|lambda#318| arg0@@537 arg1@@301 arg2@@207 arg3@@144)) (MapType0Type BoxType boolType)) :qid |funType:lambda#318| :pattern ( (|lambda#318| arg0@@537 arg1@@301 arg2@@207 arg3@@144)) )))
(assert  (=> true (forall (($ly@@625 T@U) (|bucket#0@@58| T@U) (|start#0@@25| T@U) (|end#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@625) LayerTypeType) (= (type |bucket#0@@58|) DatatypeTypeType)) (= (type |start#0@@25|) DatatypeTypeType)) (= (type |end#0@@25|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampRange#canCall| |bucket#0@@58| |start#0@@25| |end#0@@25|) (and (and ($Is |bucket#0@@58| Tclass.BucketsLib.Bucket) ($Is |start#0@@25| Tclass.UI.RangeStart)) ($Is |end#0@@25| Tclass.UI.RangeEnd)))) (and (and (forall ((|key#0@@185| T@U) ) (!  (=> (and (= (type |key#0@@185|) (SeqType BoxType)) ($Is |key#0@@185| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@58|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) ($Box |key#0@@185|))) (|MapSpec.__default.InRange#canCall| |start#0@@25| |key#0@@185| |end#0@@25|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) ($Box |key#0@@185|))) (MapSpec.__default.InRange |start#0@@25| |key#0@@185| |end#0@@25|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@58|)))) :qid |BucketsL.777:11| :skolemid |3745| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@58|)) ($Box |key#0@@185|)))) :pattern ( (MapSpec.__default.InRange |start#0@@25| |key#0@@185| |end#0@@25|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) ($Box |key#0@@185|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#318| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) |start#0@@25| |end#0@@25|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@58|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampRange ($LS $ly@@625) |bucket#0@@58| |start#0@@25| |end#0@@25|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#318| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) |start#0@@25| |end#0@@25|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@58|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.774:22| :skolemid |3746| :pattern ( (BucketsLib.__default.ClampRange ($LS $ly@@625) |bucket#0@@58| |start#0@@25| |end#0@@25|)) ))))
(assert  (=> true (forall (($ly@@626 T@U) (|bucket#0@@59| T@U) (|start#0@@26| T@U) (|end#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@626) LayerTypeType) (= (type |bucket#0@@59|) DatatypeTypeType)) (= (type |start#0@@26|) DatatypeTypeType)) (= (type |end#0@@26|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampRange#canCall| (Lit |bucket#0@@59|) (Lit |start#0@@26|) (Lit |end#0@@26|)) (and (and ($Is |bucket#0@@59| Tclass.BucketsLib.Bucket) ($Is |start#0@@26| Tclass.UI.RangeStart)) ($Is |end#0@@26| Tclass.UI.RangeEnd)))) (and (and (forall ((|key#0@@186| T@U) ) (!  (=> (and (= (type |key#0@@186|) (SeqType BoxType)) ($Is |key#0@@186| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@59|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@59|))) ($Box |key#0@@186|))) (|MapSpec.__default.InRange#canCall| (Lit |start#0@@26|) |key#0@@186| (Lit |end#0@@26|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@59|))) ($Box |key#0@@186|))) (MapSpec.__default.InRange (Lit |start#0@@26|) |key#0@@186| (Lit |end#0@@26|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@59|))))) :qid |BucketsL.777:11| :skolemid |3747| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@59|)) ($Box |key#0@@186|)))) :pattern ( (MapSpec.__default.InRange |start#0@@26| |key#0@@186| |end#0@@26|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@59|)) ($Box |key#0@@186|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#318| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@59|))) (Lit |start#0@@26|) (Lit |end#0@@26|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@59|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampRange ($LS $ly@@626) (Lit |bucket#0@@59|) (Lit |start#0@@26|) (Lit |end#0@@26|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#318| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@59|))) (Lit |start#0@@26|) (Lit |end#0@@26|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@59|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.774:22| :weight 3 :skolemid |3748| :pattern ( (BucketsLib.__default.ClampRange ($LS $ly@@626) (Lit |bucket#0@@59|) (Lit |start#0@@26|) (Lit |end#0@@26|))) ))))
(assert (forall ((arg0@@538 T@U) (arg1@@302 T@U) (arg2@@208 T@U) ) (! (= (type (BucketsLib.__default.ClampStart arg0@@538 arg1@@302 arg2@@208)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ClampStart| :pattern ( (BucketsLib.__default.ClampStart arg0@@538 arg1@@302 arg2@@208)) )))
(assert (forall (($ly@@627 T@U) (|bucket#0@@60| T@U) (|start#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@627) LayerTypeType) (= (type |bucket#0@@60|) DatatypeTypeType)) (= (type |start#0@@27|) DatatypeTypeType)) (= (BucketsLib.__default.ClampStart ($LS $ly@@627) |bucket#0@@60| |start#0@@27|) (BucketsLib.__default.ClampStart $ly@@627 |bucket#0@@60| |start#0@@27|))) :qid |BucketsL.780:22| :skolemid |3749| :pattern ( (BucketsLib.__default.ClampStart ($LS $ly@@627) |bucket#0@@60| |start#0@@27|)) )))
(assert (forall (($ly@@628 T@U) (|bucket#0@@61| T@U) (|start#0@@28| T@U) ) (!  (=> (and (and (= (type $ly@@628) LayerTypeType) (= (type |bucket#0@@61|) DatatypeTypeType)) (= (type |start#0@@28|) DatatypeTypeType)) (= (BucketsLib.__default.ClampStart $ly@@628 |bucket#0@@61| |start#0@@28|) (BucketsLib.__default.ClampStart $LZ |bucket#0@@61| |start#0@@28|))) :qid |BucketsL.780:22| :skolemid |3750| :pattern ( (BucketsLib.__default.ClampStart (AsFuelBottom $ly@@628) |bucket#0@@61| |start#0@@28|)) )))
(assert  (=> true (forall (($ly@@629 T@U) (|bucket#0@@62| T@U) (|start#0@@29| T@U) ) (!  (=> (and (and (and (= (type $ly@@629) LayerTypeType) (= (type |bucket#0@@62|) DatatypeTypeType)) (= (type |start#0@@29|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampStart#canCall| |bucket#0@@62| |start#0@@29|) (and ($Is |bucket#0@@62| Tclass.BucketsLib.Bucket) ($Is |start#0@@29| Tclass.UI.RangeStart)))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.ClampStart $ly@@629 |bucket#0@@62| |start#0@@29|)) ($Is (BucketsLib.__default.ClampStart $ly@@629 |bucket#0@@62| |start#0@@29|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.780:22| :skolemid |3751| :pattern ( (BucketsLib.__default.ClampStart $ly@@629 |bucket#0@@62| |start#0@@29|)) ))))
(assert (forall (($ly@@630 T@U) (|bucket#0@@63| T@U) (|start#0@@30| T@U) ) (!  (=> (and (and (and (= (type $ly@@630) LayerTypeType) (= (type |bucket#0@@63|) DatatypeTypeType)) (= (type |start#0@@30|) DatatypeTypeType)) (and ($Is |bucket#0@@63| Tclass.BucketsLib.Bucket) ($Is |start#0@@30| Tclass.UI.RangeStart))) (and (=> (|BucketsLib.__default.ClampStart#requires| $ly@@630 |bucket#0@@63| |start#0@@30|) true) (=> true (|BucketsLib.__default.ClampStart#requires| $ly@@630 |bucket#0@@63| |start#0@@30|)))) :qid |BucketsL.780:22| :skolemid |3752| :pattern ( (|BucketsLib.__default.ClampStart#requires| $ly@@630 |bucket#0@@63| |start#0@@30|)) )))
(assert (forall ((arg0@@539 T@U) (arg1@@303 T@U) (arg2@@209 T@U) ) (! (= (type (|lambda#326| arg0@@539 arg1@@303 arg2@@209)) (MapType0Type BoxType boolType)) :qid |funType:lambda#326| :pattern ( (|lambda#326| arg0@@539 arg1@@303 arg2@@209)) )))
(assert  (=> true (forall (($ly@@631 T@U) (|bucket#0@@64| T@U) (|start#0@@31| T@U) ) (!  (=> (and (and (and (= (type $ly@@631) LayerTypeType) (= (type |bucket#0@@64|) DatatypeTypeType)) (= (type |start#0@@31|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampStart#canCall| |bucket#0@@64| |start#0@@31|) (and ($Is |bucket#0@@64| Tclass.BucketsLib.Bucket) ($Is |start#0@@31| Tclass.UI.RangeStart)))) (and (and (forall ((|key#0@@187| T@U) ) (!  (=> (and (= (type |key#0@@187|) (SeqType BoxType)) ($Is |key#0@@187| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@64|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) ($Box |key#0@@187|))) (|MapSpec.__default.LowerBound#canCall| |start#0@@31| |key#0@@187|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) ($Box |key#0@@187|))) (MapSpec.__default.LowerBound |start#0@@31| |key#0@@187|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@64|)))) :qid |BucketsL.783:11| :skolemid |3753| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@64|)) ($Box |key#0@@187|)))) :pattern ( (MapSpec.__default.LowerBound |start#0@@31| |key#0@@187|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) ($Box |key#0@@187|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#326| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) |start#0@@31|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@64|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampStart ($LS $ly@@631) |bucket#0@@64| |start#0@@31|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#326| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) |start#0@@31|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@64|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.780:22| :skolemid |3754| :pattern ( (BucketsLib.__default.ClampStart ($LS $ly@@631) |bucket#0@@64| |start#0@@31|)) ))))
(assert  (=> true (forall (($ly@@632 T@U) (|bucket#0@@65| T@U) (|start#0@@32| T@U) ) (!  (=> (and (and (and (= (type $ly@@632) LayerTypeType) (= (type |bucket#0@@65|) DatatypeTypeType)) (= (type |start#0@@32|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampStart#canCall| (Lit |bucket#0@@65|) (Lit |start#0@@32|)) (and ($Is |bucket#0@@65| Tclass.BucketsLib.Bucket) ($Is |start#0@@32| Tclass.UI.RangeStart)))) (and (and (forall ((|key#0@@188| T@U) ) (!  (=> (and (= (type |key#0@@188|) (SeqType BoxType)) ($Is |key#0@@188| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@65|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@65|))) ($Box |key#0@@188|))) (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@32|) |key#0@@188|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@65|))) ($Box |key#0@@188|))) (MapSpec.__default.LowerBound (Lit |start#0@@32|) |key#0@@188|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@65|))))) :qid |BucketsL.783:11| :skolemid |3755| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@65|)) ($Box |key#0@@188|)))) :pattern ( (MapSpec.__default.LowerBound |start#0@@32| |key#0@@188|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@65|)) ($Box |key#0@@188|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#326| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@65|))) (Lit |start#0@@32|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@65|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampStart ($LS $ly@@632) (Lit |bucket#0@@65|) (Lit |start#0@@32|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#326| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@65|))) (Lit |start#0@@32|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@65|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.780:22| :weight 3 :skolemid |3756| :pattern ( (BucketsLib.__default.ClampStart ($LS $ly@@632) (Lit |bucket#0@@65|) (Lit |start#0@@32|))) ))))
(assert (forall ((arg0@@540 T@U) (arg1@@304 T@U) (arg2@@210 T@U) ) (! (= (type (BucketsLib.__default.ClampEnd arg0@@540 arg1@@304 arg2@@210)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ClampEnd| :pattern ( (BucketsLib.__default.ClampEnd arg0@@540 arg1@@304 arg2@@210)) )))
(assert (forall (($ly@@633 T@U) (|bucket#0@@66| T@U) (|end#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@633) LayerTypeType) (= (type |bucket#0@@66|) DatatypeTypeType)) (= (type |end#0@@27|) DatatypeTypeType)) (= (BucketsLib.__default.ClampEnd ($LS $ly@@633) |bucket#0@@66| |end#0@@27|) (BucketsLib.__default.ClampEnd $ly@@633 |bucket#0@@66| |end#0@@27|))) :qid |BucketsL.786:22| :skolemid |3757| :pattern ( (BucketsLib.__default.ClampEnd ($LS $ly@@633) |bucket#0@@66| |end#0@@27|)) )))
(assert (forall (($ly@@634 T@U) (|bucket#0@@67| T@U) (|end#0@@28| T@U) ) (!  (=> (and (and (= (type $ly@@634) LayerTypeType) (= (type |bucket#0@@67|) DatatypeTypeType)) (= (type |end#0@@28|) DatatypeTypeType)) (= (BucketsLib.__default.ClampEnd $ly@@634 |bucket#0@@67| |end#0@@28|) (BucketsLib.__default.ClampEnd $LZ |bucket#0@@67| |end#0@@28|))) :qid |BucketsL.786:22| :skolemid |3758| :pattern ( (BucketsLib.__default.ClampEnd (AsFuelBottom $ly@@634) |bucket#0@@67| |end#0@@28|)) )))
(assert  (=> true (forall (($ly@@635 T@U) (|bucket#0@@68| T@U) (|end#0@@29| T@U) ) (!  (=> (and (and (and (= (type $ly@@635) LayerTypeType) (= (type |bucket#0@@68|) DatatypeTypeType)) (= (type |end#0@@29|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampEnd#canCall| |bucket#0@@68| |end#0@@29|) (and ($Is |bucket#0@@68| Tclass.BucketsLib.Bucket) ($Is |end#0@@29| Tclass.UI.RangeEnd)))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.ClampEnd $ly@@635 |bucket#0@@68| |end#0@@29|)) ($Is (BucketsLib.__default.ClampEnd $ly@@635 |bucket#0@@68| |end#0@@29|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.786:22| :skolemid |3759| :pattern ( (BucketsLib.__default.ClampEnd $ly@@635 |bucket#0@@68| |end#0@@29|)) ))))
(assert (forall (($ly@@636 T@U) (|bucket#0@@69| T@U) (|end#0@@30| T@U) ) (!  (=> (and (and (and (= (type $ly@@636) LayerTypeType) (= (type |bucket#0@@69|) DatatypeTypeType)) (= (type |end#0@@30|) DatatypeTypeType)) (and ($Is |bucket#0@@69| Tclass.BucketsLib.Bucket) ($Is |end#0@@30| Tclass.UI.RangeEnd))) (and (=> (|BucketsLib.__default.ClampEnd#requires| $ly@@636 |bucket#0@@69| |end#0@@30|) true) (=> true (|BucketsLib.__default.ClampEnd#requires| $ly@@636 |bucket#0@@69| |end#0@@30|)))) :qid |BucketsL.786:22| :skolemid |3760| :pattern ( (|BucketsLib.__default.ClampEnd#requires| $ly@@636 |bucket#0@@69| |end#0@@30|)) )))
(assert (forall ((arg0@@541 T@U) (arg1@@305 T@U) (arg2@@211 T@U) ) (! (= (type (|lambda#334| arg0@@541 arg1@@305 arg2@@211)) (MapType0Type BoxType boolType)) :qid |funType:lambda#334| :pattern ( (|lambda#334| arg0@@541 arg1@@305 arg2@@211)) )))
(assert  (=> true (forall (($ly@@637 T@U) (|bucket#0@@70| T@U) (|end#0@@31| T@U) ) (!  (=> (and (and (and (= (type $ly@@637) LayerTypeType) (= (type |bucket#0@@70|) DatatypeTypeType)) (= (type |end#0@@31|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampEnd#canCall| |bucket#0@@70| |end#0@@31|) (and ($Is |bucket#0@@70| Tclass.BucketsLib.Bucket) ($Is |end#0@@31| Tclass.UI.RangeEnd)))) (and (and (forall ((|key#0@@189| T@U) ) (!  (=> (and (= (type |key#0@@189|) (SeqType BoxType)) ($Is |key#0@@189| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@70|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) ($Box |key#0@@189|))) (|MapSpec.__default.UpperBound#canCall| |key#0@@189| |end#0@@31|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) ($Box |key#0@@189|))) (MapSpec.__default.UpperBound |key#0@@189| |end#0@@31|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@70|)))) :qid |BucketsL.789:11| :skolemid |3761| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@70|)) ($Box |key#0@@189|)))) :pattern ( (MapSpec.__default.UpperBound |key#0@@189| |end#0@@31|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) ($Box |key#0@@189|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#334| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) |end#0@@31|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@70|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampEnd ($LS $ly@@637) |bucket#0@@70| |end#0@@31|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#334| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) |end#0@@31|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@70|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.786:22| :skolemid |3762| :pattern ( (BucketsLib.__default.ClampEnd ($LS $ly@@637) |bucket#0@@70| |end#0@@31|)) ))))
(assert  (=> true (forall (($ly@@638 T@U) (|bucket#0@@71| T@U) (|end#0@@32| T@U) ) (!  (=> (and (and (and (= (type $ly@@638) LayerTypeType) (= (type |bucket#0@@71|) DatatypeTypeType)) (= (type |end#0@@32|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampEnd#canCall| (Lit |bucket#0@@71|) (Lit |end#0@@32|)) (and ($Is |bucket#0@@71| Tclass.BucketsLib.Bucket) ($Is |end#0@@32| Tclass.UI.RangeEnd)))) (and (and (forall ((|key#0@@190| T@U) ) (!  (=> (and (= (type |key#0@@190|) (SeqType BoxType)) ($Is |key#0@@190| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@71|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@71|))) ($Box |key#0@@190|))) (|MapSpec.__default.UpperBound#canCall| |key#0@@190| (Lit |end#0@@32|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@71|))) ($Box |key#0@@190|))) (MapSpec.__default.UpperBound |key#0@@190| (Lit |end#0@@32|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@71|))))) :qid |BucketsL.789:11| :skolemid |3763| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@71|)) ($Box |key#0@@190|)))) :pattern ( (MapSpec.__default.UpperBound |key#0@@190| |end#0@@32|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@71|)) ($Box |key#0@@190|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#334| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@71|))) (Lit |end#0@@32|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@71|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampEnd ($LS $ly@@638) (Lit |bucket#0@@71|) (Lit |end#0@@32|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#334| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@71|))) (Lit |end#0@@32|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@71|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.786:22| :weight 3 :skolemid |3764| :pattern ( (BucketsLib.__default.ClampEnd ($LS $ly@@638) (Lit |bucket#0@@71|) (Lit |end#0@@32|))) ))))
(assert (forall ((arg0@@542 T@U) (arg1@@306 T@U) ) (! (= (type (BucketsLib.__default.KeyValueMapOfBucket arg0@@542 arg1@@306)) (MapType BoxType BoxType)) :qid |funType:BucketsLib.__default.KeyValueMapOfBucket| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket arg0@@542 arg1@@306)) )))
(assert (forall (($ly@@639 T@U) (|bucket#0@@72| T@U) ) (!  (=> (and (= (type $ly@@639) LayerTypeType) (= (type |bucket#0@@72|) DatatypeTypeType)) (= (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@639) |bucket#0@@72|) (BucketsLib.__default.KeyValueMapOfBucket $ly@@639 |bucket#0@@72|))) :qid |BucketsL.794:22| :skolemid |3765| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@639) |bucket#0@@72|)) )))
(assert (forall (($ly@@640 T@U) (|bucket#0@@73| T@U) ) (!  (=> (and (= (type $ly@@640) LayerTypeType) (= (type |bucket#0@@73|) DatatypeTypeType)) (= (BucketsLib.__default.KeyValueMapOfBucket $ly@@640 |bucket#0@@73|) (BucketsLib.__default.KeyValueMapOfBucket $LZ |bucket#0@@73|))) :qid |BucketsL.794:22| :skolemid |3766| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket (AsFuelBottom $ly@@640) |bucket#0@@73|)) )))
(assert  (=> true (forall (($ly@@641 T@U) (|bucket#0@@74| T@U) ) (!  (=> (and (and (= (type $ly@@641) LayerTypeType) (= (type |bucket#0@@74|) DatatypeTypeType)) (or (|BucketsLib.__default.KeyValueMapOfBucket#canCall| |bucket#0@@74|) ($Is |bucket#0@@74| Tclass.BucketsLib.Bucket))) ($Is (BucketsLib.__default.KeyValueMapOfBucket $ly@@641 |bucket#0@@74|) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))) :qid |BucketsL.794:22| :skolemid |3767| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket $ly@@641 |bucket#0@@74|)) ))))
(assert (forall (($ly@@642 T@U) (|bucket#0@@75| T@U) ) (!  (=> (and (and (= (type $ly@@642) LayerTypeType) (= (type |bucket#0@@75|) DatatypeTypeType)) ($Is |bucket#0@@75| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.KeyValueMapOfBucket#requires| $ly@@642 |bucket#0@@75|) true) (=> true (|BucketsLib.__default.KeyValueMapOfBucket#requires| $ly@@642 |bucket#0@@75|)))) :qid |BucketsL.794:22| :skolemid |3768| :pattern ( (|BucketsLib.__default.KeyValueMapOfBucket#requires| $ly@@642 |bucket#0@@75|)) )))
(assert  (and (forall ((arg0@@543 T@U) (arg1@@307 T@U) (arg2@@212 T@U) (arg3@@145 T@U) (arg4@@114 T@U) ) (! (= (type (|lambda#342| arg0@@543 arg1@@307 arg2@@212 arg3@@145 arg4@@114)) (MapType0Type BoxType boolType)) :qid |funType:lambda#342| :pattern ( (|lambda#342| arg0@@543 arg1@@307 arg2@@212 arg3@@145 arg4@@114)) )) (forall ((arg0@@544 T@U) (arg1@@308 T@U) ) (! (= (type (|lambda#343| arg0@@544 arg1@@308)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#343| :pattern ( (|lambda#343| arg0@@544 arg1@@308)) ))))
(assert  (=> true (forall (($ly@@643 T@U) (|bucket#0@@76| T@U) ) (!  (=> (and (and (= (type $ly@@643) LayerTypeType) (= (type |bucket#0@@76|) DatatypeTypeType)) (or (|BucketsLib.__default.KeyValueMapOfBucket#canCall| |bucket#0@@76|) ($Is |bucket#0@@76| Tclass.BucketsLib.Bucket))) (and (forall ((|key#0@@191| T@U) ) (!  (=> (and (= (type |key#0@@191|) (SeqType BoxType)) ($Is |key#0@@191| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@76|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@191|))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@76|) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@191|))) (Lit ValueMessage.__default.DefineDefault))) |ValueMessage.__default.DefaultValue#canCall|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@191|))) (not (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@191|))) (Lit ValueMessage.__default.DefineDefault))) ValueMessage.__default.DefaultValue))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@76|) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@191|))) (Lit ValueMessage.__default.DefineDefault)))))) :qid |BucketsL.796:9| :skolemid |3769| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@191|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@191|))) )) (= (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@643) |bucket#0@@76|) (|Map#Glue| (|lambda#342| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@76|)) (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) (Lit ValueMessage.__default.DefineDefault) ValueMessage.__default.DefaultValue) (|lambda#343| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) (Lit ValueMessage.__default.DefineDefault)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))))) :qid |BucketsL.794:22| :skolemid |3770| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@643) |bucket#0@@76|)) ))))
(assert  (=> true (forall (($ly@@644 T@U) (|bucket#0@@77| T@U) ) (!  (=> (and (and (= (type $ly@@644) LayerTypeType) (= (type |bucket#0@@77|) DatatypeTypeType)) (or (|BucketsLib.__default.KeyValueMapOfBucket#canCall| (Lit |bucket#0@@77|)) ($Is |bucket#0@@77| Tclass.BucketsLib.Bucket))) (and (forall ((|key#0@@192| T@U) ) (!  (=> (and (= (type |key#0@@192|) (SeqType BoxType)) ($Is |key#0@@192| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@77|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@77|))) ($Box |key#0@@192|))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@77|)) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) ($Box |key#0@@192|))) (Lit ValueMessage.__default.DefineDefault))) |ValueMessage.__default.DefaultValue#canCall|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@77|))) ($Box |key#0@@192|))) (not (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) ($Box |key#0@@192|))) (Lit ValueMessage.__default.DefineDefault))) ValueMessage.__default.DefaultValue))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@77|)) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) ($Box |key#0@@192|))) (Lit ValueMessage.__default.DefineDefault)))))) :qid |BucketsL.796:9| :skolemid |3771| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@77|)) ($Box |key#0@@192|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@77|)) ($Box |key#0@@192|))) )) (= (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@644) (Lit |bucket#0@@77|)) (|Map#Glue| (|lambda#342| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@77|))) (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) (Lit ValueMessage.__default.DefineDefault) ValueMessage.__default.DefaultValue) (|lambda#343| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) (Lit ValueMessage.__default.DefineDefault)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))))) :qid |BucketsL.794:22| :weight 3 :skolemid |3772| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@644) (Lit |bucket#0@@77|))) ))))
(assert (forall ((arg0@@545 T@U) (arg1@@309 T@U) ) (! (= (type (BucketsLib.__default.SortedSeqOfKeyValueMap arg0@@545 arg1@@309)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SortedSeqOfKeyValueMap| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap arg0@@545 arg1@@309)) )))
(assert (forall (($ly@@645 T@U) (|m#0@@139| T@U) ) (!  (=> (and (= (type $ly@@645) LayerTypeType) (= (type |m#0@@139|) (MapType BoxType BoxType))) (= (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@645) |m#0@@139|) (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@645 |m#0@@139|))) :qid |BucketsL.800:22| :skolemid |3773| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@645) |m#0@@139|)) )))
(assert (forall (($ly@@646 T@U) (|m#0@@140| T@U) ) (!  (=> (and (= (type $ly@@646) LayerTypeType) (= (type |m#0@@140|) (MapType BoxType BoxType))) (= (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@646 |m#0@@140|) (BucketsLib.__default.SortedSeqOfKeyValueMap $LZ |m#0@@140|))) :qid |BucketsL.800:22| :skolemid |3774| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap (AsFuelBottom $ly@@646) |m#0@@140|)) )))
(assert  (=> true (forall (($ly@@647 T@U) (|m#0@@141| T@U) ) (!  (=> (and (and (= (type $ly@@647) LayerTypeType) (= (type |m#0@@141|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@141|) ($Is |m#0@@141| (TMap Tclass.KeyType.Key Tclass.ValueType.Value)))) ($Is (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@647 |m#0@@141|) (TSeq Tclass.UI.SuccResult))) :qid |BucketsL.800:22| :skolemid |3775| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@647 |m#0@@141|)) ))))
(assert (forall (($ly@@648 T@U) (|m#0@@142| T@U) ) (!  (=> (and (and (= (type $ly@@648) LayerTypeType) (= (type |m#0@@142|) (MapType BoxType BoxType))) ($Is |m#0@@142| (TMap Tclass.KeyType.Key Tclass.ValueType.Value))) (and (=> (|BucketsLib.__default.SortedSeqOfKeyValueMap#requires| $ly@@648 |m#0@@142|) true) (=> true (|BucketsLib.__default.SortedSeqOfKeyValueMap#requires| $ly@@648 |m#0@@142|)))) :qid |BucketsL.800:22| :skolemid |3776| :pattern ( (|BucketsLib.__default.SortedSeqOfKeyValueMap#requires| $ly@@648 |m#0@@142|)) )))
(assert  (=> true (forall (($ly@@649 T@U) (|m#0@@143| T@U) ) (!  (=> (and (and (= (type $ly@@649) LayerTypeType) (= (type |m#0@@143|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@143|) ($Is |m#0@@143| (TMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (and (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (|Map#Domain| |m#0@@143|)) (let ((|max#0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (|Map#Domain| |m#0@@143|)))) (=> (not (Options.Option.None_q |max#0|)) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@143| (Options.Option.value |max#0|)) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@143| (Options.Option.value |max#0|))))))) (= (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@649) |m#0@@143|) (let ((|max#0@@0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (|Map#Domain| |m#0@@143|)))) (ite (Options.Option.None_q |max#0@@0|) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@649 (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@143| (Options.Option.value |max#0@@0|))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#UI.SuccResult.SuccResult| ($Unbox (SeqType BoxType) (Options.Option.value |max#0@@0|)) ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |m#0@@143|) (Options.Option.value |max#0@@0|)))))))))))) :qid |BucketsL.800:22| :skolemid |3777| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@649) |m#0@@143|)) ))))
(assert  (=> true (forall (($ly@@650 T@U) (|m#0@@144| T@U) ) (!  (=> (and (and (= (type $ly@@650) LayerTypeType) (= (type |m#0@@144|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Lit |m#0@@144|)) ($Is |m#0@@144| (TMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (and (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit (|Map#Domain| (Lit |m#0@@144|)))) (let ((|max#1| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (Lit (|Map#Domain| (Lit |m#0@@144|)))))) (=> (not (Options.Option.None_q |max#1|)) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value (Lit |m#0@@144|) (Options.Option.value |max#1|)) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 (Lit |m#0@@144|) (Options.Option.value |max#1|))))))) (= (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@650) (Lit |m#0@@144|)) (let ((|max#1@@0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (Lit (|Map#Domain| (Lit |m#0@@144|)))))) (ite (Options.Option.None_q |max#1@@0|) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@650) (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 (Lit |m#0@@144|) (Options.Option.value |max#1@@0|))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#UI.SuccResult.SuccResult| ($Unbox (SeqType BoxType) (Options.Option.value |max#1@@0|)) ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit |m#0@@144|)) (Options.Option.value |max#1@@0|)))))))))))) :qid |BucketsL.800:22| :weight 3 :skolemid |3778| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@650) (Lit |m#0@@144|))) ))))
(assert (forall ((arg0@@546 T@U) (arg1@@310 T@U) (arg2@@213 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketLeft arg0@@546 arg1@@310 arg2@@213)) DatatypeTypeType) :qid |funType:BucketsLib.__default.SplitBucketLeft| :pattern ( (BucketsLib.__default.SplitBucketLeft arg0@@546 arg1@@310 arg2@@213)) )))
(assert (forall (($ly@@651 T@U) (|bucket#0@@78| T@U) (|pivot#0@@19| T@U) ) (!  (=> (and (and (= (type $ly@@651) LayerTypeType) (= (type |bucket#0@@78|) DatatypeTypeType)) (= (type |pivot#0@@19|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketLeft ($LS $ly@@651) |bucket#0@@78| |pivot#0@@19|) (BucketsLib.__default.SplitBucketLeft $ly@@651 |bucket#0@@78| |pivot#0@@19|))) :qid |BucketsL.865:22| :skolemid |3779| :pattern ( (BucketsLib.__default.SplitBucketLeft ($LS $ly@@651) |bucket#0@@78| |pivot#0@@19|)) )))
(assert (forall (($ly@@652 T@U) (|bucket#0@@79| T@U) (|pivot#0@@20| T@U) ) (!  (=> (and (and (= (type $ly@@652) LayerTypeType) (= (type |bucket#0@@79|) DatatypeTypeType)) (= (type |pivot#0@@20|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketLeft $ly@@652 |bucket#0@@79| |pivot#0@@20|) (BucketsLib.__default.SplitBucketLeft $LZ |bucket#0@@79| |pivot#0@@20|))) :qid |BucketsL.865:22| :skolemid |3780| :pattern ( (BucketsLib.__default.SplitBucketLeft (AsFuelBottom $ly@@652) |bucket#0@@79| |pivot#0@@20|)) )))
(assert  (=> true (forall (($ly@@653 T@U) (|bucket#0@@80| T@U) (|pivot#0@@21| T@U) ) (!  (=> (and (and (and (= (type $ly@@653) LayerTypeType) (= (type |bucket#0@@80|) DatatypeTypeType)) (= (type |pivot#0@@21|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketLeft#canCall| |bucket#0@@80| |pivot#0@@21|) (and ($Is |bucket#0@@80| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@21| Tclass.KeyType.Key)))) (and (and (and (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SplitBucketLeft $ly@@653 |bucket#0@@80| |pivot#0@@21|)) (= (|Seq#Length| (BucketsLib.Bucket.keys (BucketsLib.__default.SplitBucketLeft $ly@@653 |bucket#0@@80| |pivot#0@@21|))) (|Seq#Length| (BucketsLib.Bucket.msgs (BucketsLib.__default.SplitBucketLeft $ly@@653 |bucket#0@@80| |pivot#0@@21|))))) (=> (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@80|)) (BucketsLib.__default.WFBucket (BucketsLib.__default.SplitBucketLeft $ly@@653 |bucket#0@@80| |pivot#0@@21|)))) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SplitBucketLeft $ly@@653 |bucket#0@@80| |pivot#0@@21|))) ($Is (BucketsLib.__default.SplitBucketLeft $ly@@653 |bucket#0@@80| |pivot#0@@21|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.865:22| :skolemid |3781| :pattern ( (BucketsLib.__default.SplitBucketLeft $ly@@653 |bucket#0@@80| |pivot#0@@21|)) ))))
(assert (forall (($ly@@654 T@U) (|bucket#0@@81| T@U) (|pivot#0@@22| T@U) ) (!  (=> (and (and (and (= (type $ly@@654) LayerTypeType) (= (type |bucket#0@@81|) DatatypeTypeType)) (= (type |pivot#0@@22|) (SeqType BoxType))) (and ($Is |bucket#0@@81| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@22| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketLeft#requires| $ly@@654 |bucket#0@@81| |pivot#0@@22|) true) (=> true (|BucketsLib.__default.SplitBucketLeft#requires| $ly@@654 |bucket#0@@81| |pivot#0@@22|)))) :qid |BucketsL.865:22| :skolemid |3782| :pattern ( (|BucketsLib.__default.SplitBucketLeft#requires| $ly@@654 |bucket#0@@81| |pivot#0@@22|)) )))
(assert  (=> true (forall (($ly@@655 T@U) (|bucket#0@@82| T@U) (|pivot#0@@23| T@U) ) (!  (=> (and (and (and (= (type $ly@@655) LayerTypeType) (= (type |bucket#0@@82|) DatatypeTypeType)) (= (type |pivot#0@@23|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketLeft#canCall| |bucket#0@@82| |pivot#0@@23|) (and ($Is |bucket#0@@82| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@23| Tclass.KeyType.Key)))) (and (and (forall ((|key#0@@193| T@U) ) (!  (=> (and (= (type |key#0@@193|) (SeqType BoxType)) ($Is |key#0@@193| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@82|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) ($Box |key#0@@193|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@193| |pivot#0@@23|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) ($Box |key#0@@193|))) (Lexicographic__Byte__Order.__default.lt |key#0@@193| |pivot#0@@23|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@82|)))) :qid |BucketsL.871:11| :skolemid |3783| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@82|)) ($Box |key#0@@193|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@193| |pivot#0@@23|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) ($Box |key#0@@193|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) |pivot#0@@23|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@82|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SplitBucketLeft ($LS $ly@@655) |bucket#0@@82| |pivot#0@@23|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) |pivot#0@@23|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@82|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.865:22| :skolemid |3784| :pattern ( (BucketsLib.__default.SplitBucketLeft ($LS $ly@@655) |bucket#0@@82| |pivot#0@@23|)) ))))
(assert  (=> true (forall (($ly@@656 T@U) (|bucket#0@@83| T@U) (|pivot#0@@24| T@U) ) (!  (=> (and (and (and (= (type $ly@@656) LayerTypeType) (= (type |bucket#0@@83|) DatatypeTypeType)) (= (type |pivot#0@@24|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketLeft#canCall| (Lit |bucket#0@@83|) (Lit |pivot#0@@24|)) (and ($Is |bucket#0@@83| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@24| Tclass.KeyType.Key)))) (and (and (forall ((|key#0@@194| T@U) ) (!  (=> (and (= (type |key#0@@194|) (SeqType BoxType)) ($Is |key#0@@194| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@83|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@83|))) ($Box |key#0@@194|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@194| (Lit |pivot#0@@24|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@83|))) ($Box |key#0@@194|))) (Lexicographic__Byte__Order.__default.lt |key#0@@194| (Lit |pivot#0@@24|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@83|))))) :qid |BucketsL.871:11| :skolemid |3785| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@83|)) ($Box |key#0@@194|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@194| |pivot#0@@24|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@83|)) ($Box |key#0@@194|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@83|))) (Lit |pivot#0@@24|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@83|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SplitBucketLeft ($LS $ly@@656) (Lit |bucket#0@@83|) (Lit |pivot#0@@24|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@83|))) (Lit |pivot#0@@24|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@83|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.865:22| :weight 3 :skolemid |3786| :pattern ( (BucketsLib.__default.SplitBucketLeft ($LS $ly@@656) (Lit |bucket#0@@83|) (Lit |pivot#0@@24|))) ))))
(assert (forall ((arg0@@547 T@U) (arg1@@311 T@U) (arg2@@214 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketRight arg0@@547 arg1@@311 arg2@@214)) DatatypeTypeType) :qid |funType:BucketsLib.__default.SplitBucketRight| :pattern ( (BucketsLib.__default.SplitBucketRight arg0@@547 arg1@@311 arg2@@214)) )))
(assert (forall (($ly@@657 T@U) (|bucket#0@@84| T@U) (|pivot#0@@25| T@U) ) (!  (=> (and (and (= (type $ly@@657) LayerTypeType) (= (type |bucket#0@@84|) DatatypeTypeType)) (= (type |pivot#0@@25|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketRight ($LS $ly@@657) |bucket#0@@84| |pivot#0@@25|) (BucketsLib.__default.SplitBucketRight $ly@@657 |bucket#0@@84| |pivot#0@@25|))) :qid |BucketsL.874:22| :skolemid |3787| :pattern ( (BucketsLib.__default.SplitBucketRight ($LS $ly@@657) |bucket#0@@84| |pivot#0@@25|)) )))
(assert (forall (($ly@@658 T@U) (|bucket#0@@85| T@U) (|pivot#0@@26| T@U) ) (!  (=> (and (and (= (type $ly@@658) LayerTypeType) (= (type |bucket#0@@85|) DatatypeTypeType)) (= (type |pivot#0@@26|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketRight $ly@@658 |bucket#0@@85| |pivot#0@@26|) (BucketsLib.__default.SplitBucketRight $LZ |bucket#0@@85| |pivot#0@@26|))) :qid |BucketsL.874:22| :skolemid |3788| :pattern ( (BucketsLib.__default.SplitBucketRight (AsFuelBottom $ly@@658) |bucket#0@@85| |pivot#0@@26|)) )))
(assert  (=> true (forall (($ly@@659 T@U) (|bucket#0@@86| T@U) (|pivot#0@@27| T@U) ) (!  (=> (and (and (and (= (type $ly@@659) LayerTypeType) (= (type |bucket#0@@86|) DatatypeTypeType)) (= (type |pivot#0@@27|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketRight#canCall| |bucket#0@@86| |pivot#0@@27|) (and ($Is |bucket#0@@86| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@27| Tclass.KeyType.Key)))) (and (and (and (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SplitBucketRight $ly@@659 |bucket#0@@86| |pivot#0@@27|)) (= (|Seq#Length| (BucketsLib.Bucket.keys (BucketsLib.__default.SplitBucketRight $ly@@659 |bucket#0@@86| |pivot#0@@27|))) (|Seq#Length| (BucketsLib.Bucket.msgs (BucketsLib.__default.SplitBucketRight $ly@@659 |bucket#0@@86| |pivot#0@@27|))))) (=> (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@86|)) (BucketsLib.__default.WFBucket (BucketsLib.__default.SplitBucketRight $ly@@659 |bucket#0@@86| |pivot#0@@27|)))) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SplitBucketRight $ly@@659 |bucket#0@@86| |pivot#0@@27|))) ($Is (BucketsLib.__default.SplitBucketRight $ly@@659 |bucket#0@@86| |pivot#0@@27|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.874:22| :skolemid |3789| :pattern ( (BucketsLib.__default.SplitBucketRight $ly@@659 |bucket#0@@86| |pivot#0@@27|)) ))))
(assert (forall (($ly@@660 T@U) (|bucket#0@@87| T@U) (|pivot#0@@28| T@U) ) (!  (=> (and (and (and (= (type $ly@@660) LayerTypeType) (= (type |bucket#0@@87|) DatatypeTypeType)) (= (type |pivot#0@@28|) (SeqType BoxType))) (and ($Is |bucket#0@@87| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@28| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketRight#requires| $ly@@660 |bucket#0@@87| |pivot#0@@28|) true) (=> true (|BucketsLib.__default.SplitBucketRight#requires| $ly@@660 |bucket#0@@87| |pivot#0@@28|)))) :qid |BucketsL.874:22| :skolemid |3790| :pattern ( (|BucketsLib.__default.SplitBucketRight#requires| $ly@@660 |bucket#0@@87| |pivot#0@@28|)) )))
(assert  (=> true (forall (($ly@@661 T@U) (|bucket#0@@88| T@U) (|pivot#0@@29| T@U) ) (!  (=> (and (and (and (= (type $ly@@661) LayerTypeType) (= (type |bucket#0@@88|) DatatypeTypeType)) (= (type |pivot#0@@29|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketRight#canCall| |bucket#0@@88| |pivot#0@@29|) (and ($Is |bucket#0@@88| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@29| Tclass.KeyType.Key)))) (and (and (forall ((|key#0@@195| T@U) ) (!  (=> (and (= (type |key#0@@195|) (SeqType BoxType)) ($Is |key#0@@195| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@88|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) ($Box |key#0@@195|))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@29| |key#0@@195|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) ($Box |key#0@@195|))) (Lexicographic__Byte__Order.__default.lte |pivot#0@@29| |key#0@@195|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@88|)))) :qid |BucketsL.880:11| :skolemid |3791| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@88|)) ($Box |key#0@@195|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@29| |key#0@@195|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) ($Box |key#0@@195|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) |pivot#0@@29|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@88|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SplitBucketRight ($LS $ly@@661) |bucket#0@@88| |pivot#0@@29|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) |pivot#0@@29|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@88|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.874:22| :skolemid |3792| :pattern ( (BucketsLib.__default.SplitBucketRight ($LS $ly@@661) |bucket#0@@88| |pivot#0@@29|)) ))))
(assert  (=> true (forall (($ly@@662 T@U) (|bucket#0@@89| T@U) (|pivot#0@@30| T@U) ) (!  (=> (and (and (and (= (type $ly@@662) LayerTypeType) (= (type |bucket#0@@89|) DatatypeTypeType)) (= (type |pivot#0@@30|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketRight#canCall| (Lit |bucket#0@@89|) (Lit |pivot#0@@30|)) (and ($Is |bucket#0@@89| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@30| Tclass.KeyType.Key)))) (and (and (forall ((|key#0@@196| T@U) ) (!  (=> (and (= (type |key#0@@196|) (SeqType BoxType)) ($Is |key#0@@196| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@89|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@89|))) ($Box |key#0@@196|))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@30|) |key#0@@196|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@89|))) ($Box |key#0@@196|))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@30|) |key#0@@196|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@89|))))) :qid |BucketsL.880:11| :skolemid |3793| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@89|)) ($Box |key#0@@196|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@30| |key#0@@196|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@89|)) ($Box |key#0@@196|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@89|))) (Lit |pivot#0@@30|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@89|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SplitBucketRight ($LS $ly@@662) (Lit |bucket#0@@89|) (Lit |pivot#0@@30|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#258| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@89|))) (Lit |pivot#0@@30|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@89|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.874:22| :weight 3 :skolemid |3794| :pattern ( (BucketsLib.__default.SplitBucketRight ($LS $ly@@662) (Lit |bucket#0@@89|) (Lit |pivot#0@@30|))) ))))
(assert  (and (forall ((arg0@@548 T@U) (arg1@@312 T@U) (arg2@@215 Int) (arg3@@146 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketListLeft arg0@@548 arg1@@312 arg2@@215 arg3@@146)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketListLeft| :pattern ( (BucketsLib.__default.SplitBucketListLeft arg0@@548 arg1@@312 arg2@@215 arg3@@146)) )) (= (type StartFuel_PivotsLib._default.CutoffForLeft) LayerTypeType)))
(assert  (=> true (forall ((|blist#0@@19| T@U) (|pivots#0@@60| T@U) (|cLeft#0| Int) (|key#0@@197| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@19|) (SeqType BoxType)) (= (type |pivots#0@@60|) (SeqType BoxType))) (= (type |key#0@@197|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListLeft#canCall| |blist#0@@19| |pivots#0@@60| |cLeft#0| |key#0@@197|) (and (and (and ($Is |blist#0@@19| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@60| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@197| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@19| |pivots#0@@60|) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft |pivots#0@@60| |key#0@@197|) |cLeft#0|))))) ($Is (BucketsLib.__default.SplitBucketListLeft |blist#0@@19| |pivots#0@@60| |cLeft#0| |key#0@@197|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsL.883:32| :skolemid |3795| :pattern ( (BucketsLib.__default.SplitBucketListLeft |blist#0@@19| |pivots#0@@60| |cLeft#0| |key#0@@197|)) ))))
(assert (forall ((|blist#0@@20| T@U) (|pivots#0@@61| T@U) (|cLeft#0@@0| Int) (|key#0@@198| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@20|) (SeqType BoxType)) (= (type |pivots#0@@61|) (SeqType BoxType))) (= (type |key#0@@198|) (SeqType BoxType))) (and (and ($Is |blist#0@@20| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@61| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@198| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketListLeft#requires| |blist#0@@20| |pivots#0@@61| |cLeft#0@@0| |key#0@@198|) (and (BucketsLib.__default.WFBucketList |blist#0@@20| |pivots#0@@61|) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft |pivots#0@@61| |key#0@@198|) |cLeft#0@@0|))) (=> (and (BucketsLib.__default.WFBucketList |blist#0@@20| |pivots#0@@61|) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft |pivots#0@@61| |key#0@@198|) |cLeft#0@@0|)) (|BucketsLib.__default.SplitBucketListLeft#requires| |blist#0@@20| |pivots#0@@61| |cLeft#0@@0| |key#0@@198|)))) :qid |BucketsL.883:32| :skolemid |3796| :pattern ( (|BucketsLib.__default.SplitBucketListLeft#requires| |blist#0@@20| |pivots#0@@61| |cLeft#0@@0| |key#0@@198|)) )))
(assert (= (type StartFuel_BucketsLib._default.SplitBucketLeft) LayerTypeType))
(assert  (=> true (forall ((|blist#0@@21| T@U) (|pivots#0@@62| T@U) (|cLeft#0@@1| Int) (|key#0@@199| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@21|) (SeqType BoxType)) (= (type |pivots#0@@62|) (SeqType BoxType))) (= (type |key#0@@199|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListLeft#canCall| |blist#0@@21| |pivots#0@@62| |cLeft#0@@1| |key#0@@199|) (and (and (and ($Is |blist#0@@21| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@62| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@199| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@21| |pivots#0@@62|) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft |pivots#0@@62| |key#0@@199|) |cLeft#0@@1|))))) (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@21| |cLeft#0@@1|)) |key#0@@199|) (= (BucketsLib.__default.SplitBucketListLeft |blist#0@@21| |pivots#0@@62| |cLeft#0@@1| |key#0@@199|) (|Seq#Append| (|Seq#Take| |blist#0@@21| |cLeft#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@21| |cLeft#0@@1|)) |key#0@@199|))))))) :qid |BucketsL.883:32| :skolemid |3797| :pattern ( (BucketsLib.__default.SplitBucketListLeft |blist#0@@21| |pivots#0@@62| |cLeft#0@@1| |key#0@@199|)) ))))
(assert  (=> true (forall ((|blist#0@@22| T@U) (|pivots#0@@63| T@U) (|cLeft#0@@2| Int) (|key#0@@200| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@22|) (SeqType BoxType)) (= (type |pivots#0@@63|) (SeqType BoxType))) (= (type |key#0@@200|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListLeft#canCall| (Lit |blist#0@@22|) (Lit |pivots#0@@63|) (LitInt |cLeft#0@@2|) (Lit |key#0@@200|)) (and (and (and ($Is |blist#0@@22| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@63| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@200| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@22|) (Lit |pivots#0@@63|))))) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft (Lit |pivots#0@@63|) (Lit |key#0@@200|)) (LitInt |cLeft#0@@2|)))))) (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@22|) (LitInt |cLeft#0@@2|))) (Lit |key#0@@200|)) (= (BucketsLib.__default.SplitBucketListLeft (Lit |blist#0@@22|) (Lit |pivots#0@@63|) (LitInt |cLeft#0@@2|) (Lit |key#0@@200|)) (|Seq#Append| (|Seq#Take| (Lit |blist#0@@22|) (LitInt |cLeft#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@22|) (LitInt |cLeft#0@@2|))) (Lit |key#0@@200|)))))))) :qid |BucketsL.883:32| :weight 3 :skolemid |3798| :pattern ( (BucketsLib.__default.SplitBucketListLeft (Lit |blist#0@@22|) (Lit |pivots#0@@63|) (LitInt |cLeft#0@@2|) (Lit |key#0@@200|))) ))))
(assert  (and (forall ((arg0@@549 T@U) (arg1@@313 T@U) (arg2@@216 Int) (arg3@@147 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketListRight arg0@@549 arg1@@313 arg2@@216 arg3@@147)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketListRight| :pattern ( (BucketsLib.__default.SplitBucketListRight arg0@@549 arg1@@313 arg2@@216 arg3@@147)) )) (= (type StartFuel_PivotsLib._default.CutoffForRight) LayerTypeType)))
(assert  (=> true (forall ((|blist#0@@23| T@U) (|pivots#0@@64| T@U) (|cRight#0| Int) (|key#0@@201| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@23|) (SeqType BoxType)) (= (type |pivots#0@@64|) (SeqType BoxType))) (= (type |key#0@@201|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListRight#canCall| |blist#0@@23| |pivots#0@@64| |cRight#0| |key#0@@201|) (and (and (and ($Is |blist#0@@23| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@64| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@201| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@23| |pivots#0@@64|) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight |pivots#0@@64| |key#0@@201|) |cRight#0|))))) ($Is (BucketsLib.__default.SplitBucketListRight |blist#0@@23| |pivots#0@@64| |cRight#0| |key#0@@201|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsL.890:33| :skolemid |3799| :pattern ( (BucketsLib.__default.SplitBucketListRight |blist#0@@23| |pivots#0@@64| |cRight#0| |key#0@@201|)) ))))
(assert (forall ((|blist#0@@24| T@U) (|pivots#0@@65| T@U) (|cRight#0@@0| Int) (|key#0@@202| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@24|) (SeqType BoxType)) (= (type |pivots#0@@65|) (SeqType BoxType))) (= (type |key#0@@202|) (SeqType BoxType))) (and (and ($Is |blist#0@@24| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@65| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@202| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketListRight#requires| |blist#0@@24| |pivots#0@@65| |cRight#0@@0| |key#0@@202|) (and (BucketsLib.__default.WFBucketList |blist#0@@24| |pivots#0@@65|) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight |pivots#0@@65| |key#0@@202|) |cRight#0@@0|))) (=> (and (BucketsLib.__default.WFBucketList |blist#0@@24| |pivots#0@@65|) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight |pivots#0@@65| |key#0@@202|) |cRight#0@@0|)) (|BucketsLib.__default.SplitBucketListRight#requires| |blist#0@@24| |pivots#0@@65| |cRight#0@@0| |key#0@@202|)))) :qid |BucketsL.890:33| :skolemid |3800| :pattern ( (|BucketsLib.__default.SplitBucketListRight#requires| |blist#0@@24| |pivots#0@@65| |cRight#0@@0| |key#0@@202|)) )))
(assert (= (type StartFuel_BucketsLib._default.SplitBucketRight) LayerTypeType))
(assert  (=> true (forall ((|blist#0@@25| T@U) (|pivots#0@@66| T@U) (|cRight#0@@1| Int) (|key#0@@203| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@25|) (SeqType BoxType)) (= (type |pivots#0@@66|) (SeqType BoxType))) (= (type |key#0@@203|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListRight#canCall| |blist#0@@25| |pivots#0@@66| |cRight#0@@1| |key#0@@203|) (and (and (and ($Is |blist#0@@25| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@66| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@203| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@25| |pivots#0@@66|) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight |pivots#0@@66| |key#0@@203|) |cRight#0@@1|))))) (and (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@25| |cRight#0@@1|)) |key#0@@203|) (= (BucketsLib.__default.SplitBucketListRight |blist#0@@25| |pivots#0@@66| |cRight#0@@1| |key#0@@203|) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@25| |cRight#0@@1|)) |key#0@@203|))) (|Seq#Drop| |blist#0@@25| (+ |cRight#0@@1| 1)))))) :qid |BucketsL.890:33| :skolemid |3801| :pattern ( (BucketsLib.__default.SplitBucketListRight |blist#0@@25| |pivots#0@@66| |cRight#0@@1| |key#0@@203|)) ))))
(assert  (=> true (forall ((|blist#0@@26| T@U) (|pivots#0@@67| T@U) (|cRight#0@@2| Int) (|key#0@@204| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@26|) (SeqType BoxType)) (= (type |pivots#0@@67|) (SeqType BoxType))) (= (type |key#0@@204|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListRight#canCall| (Lit |blist#0@@26|) (Lit |pivots#0@@67|) (LitInt |cRight#0@@2|) (Lit |key#0@@204|)) (and (and (and ($Is |blist#0@@26| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@67| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@204| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@26|) (Lit |pivots#0@@67|))))) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight (Lit |pivots#0@@67|) (Lit |key#0@@204|)) (LitInt |cRight#0@@2|)))))) (and (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@26|) (LitInt |cRight#0@@2|))) (Lit |key#0@@204|)) (= (BucketsLib.__default.SplitBucketListRight (Lit |blist#0@@26|) (Lit |pivots#0@@67|) (LitInt |cRight#0@@2|) (Lit |key#0@@204|)) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@26|) (LitInt |cRight#0@@2|))) (Lit |key#0@@204|)))) (|Seq#Drop| (Lit |blist#0@@26|) (LitInt (+ |cRight#0@@2| 1))))))) :qid |BucketsL.890:33| :weight 3 :skolemid |3802| :pattern ( (BucketsLib.__default.SplitBucketListRight (Lit |blist#0@@26|) (Lit |pivots#0@@67|) (LitInt |cRight#0@@2|) (Lit |key#0@@204|))) ))))
(assert (forall ((arg0@@550 T@U) (arg1@@314 T@U) (arg2@@217 Int) (arg3@@148 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketInList arg0@@550 arg1@@314 arg2@@217 arg3@@148)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketInList| :pattern ( (BucketsLib.__default.SplitBucketInList arg0@@550 arg1@@314 arg2@@217 arg3@@148)) )))
(assert (forall (($ly@@663 T@U) (|blist#0@@27| T@U) (|slot#0| Int) (|pivot#0@@31| T@U) ) (!  (=> (and (and (= (type $ly@@663) LayerTypeType) (= (type |blist#0@@27|) (SeqType BoxType))) (= (type |pivot#0@@31|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketInList ($LS $ly@@663) |blist#0@@27| |slot#0| |pivot#0@@31|) (BucketsLib.__default.SplitBucketInList $ly@@663 |blist#0@@27| |slot#0| |pivot#0@@31|))) :qid |BucketsL.897:22| :skolemid |3803| :pattern ( (BucketsLib.__default.SplitBucketInList ($LS $ly@@663) |blist#0@@27| |slot#0| |pivot#0@@31|)) )))
(assert (forall (($ly@@664 T@U) (|blist#0@@28| T@U) (|slot#0@@0| Int) (|pivot#0@@32| T@U) ) (!  (=> (and (and (= (type $ly@@664) LayerTypeType) (= (type |blist#0@@28|) (SeqType BoxType))) (= (type |pivot#0@@32|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketInList $ly@@664 |blist#0@@28| |slot#0@@0| |pivot#0@@32|) (BucketsLib.__default.SplitBucketInList $LZ |blist#0@@28| |slot#0@@0| |pivot#0@@32|))) :qid |BucketsL.897:22| :skolemid |3804| :pattern ( (BucketsLib.__default.SplitBucketInList (AsFuelBottom $ly@@664) |blist#0@@28| |slot#0@@0| |pivot#0@@32|)) )))
(assert  (=> true (forall (($ly@@665 T@U) (|blist#0@@29| T@U) (|slot#0@@1| Int) (|pivot#0@@33| T@U) ) (!  (=> (and (and (and (= (type $ly@@665) LayerTypeType) (= (type |blist#0@@29|) (SeqType BoxType))) (= (type |pivot#0@@33|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketInList#canCall| |blist#0@@29| |slot#0@@1| |pivot#0@@33|) (and (and ($Is |blist#0@@29| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@33| Tclass.KeyType.Key)) (and (<= (LitInt 0) |slot#0@@1|) (< |slot#0@@1| (|Seq#Length| |blist#0@@29|)))))) ($Is (BucketsLib.__default.SplitBucketInList $ly@@665 |blist#0@@29| |slot#0@@1| |pivot#0@@33|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsL.897:22| :skolemid |3805| :pattern ( (BucketsLib.__default.SplitBucketInList $ly@@665 |blist#0@@29| |slot#0@@1| |pivot#0@@33|)) ))))
(assert (forall (($ly@@666 T@U) (|blist#0@@30| T@U) (|slot#0@@2| Int) (|pivot#0@@34| T@U) ) (!  (=> (and (and (and (= (type $ly@@666) LayerTypeType) (= (type |blist#0@@30|) (SeqType BoxType))) (= (type |pivot#0@@34|) (SeqType BoxType))) (and ($Is |blist#0@@30| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@34| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketInList#requires| $ly@@666 |blist#0@@30| |slot#0@@2| |pivot#0@@34|) (and (<= (LitInt 0) |slot#0@@2|) (< |slot#0@@2| (|Seq#Length| |blist#0@@30|)))) (=> (and (<= (LitInt 0) |slot#0@@2|) (< |slot#0@@2| (|Seq#Length| |blist#0@@30|))) (|BucketsLib.__default.SplitBucketInList#requires| $ly@@666 |blist#0@@30| |slot#0@@2| |pivot#0@@34|)))) :qid |BucketsL.897:22| :skolemid |3806| :pattern ( (|BucketsLib.__default.SplitBucketInList#requires| $ly@@666 |blist#0@@30| |slot#0@@2| |pivot#0@@34|)) )))
(assert (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType))
(assert  (=> true (forall (($ly@@667 T@U) (|blist#0@@31| T@U) (|slot#0@@3| Int) (|pivot#0@@35| T@U) ) (!  (=> (and (and (and (= (type $ly@@667) LayerTypeType) (= (type |blist#0@@31|) (SeqType BoxType))) (= (type |pivot#0@@35|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketInList#canCall| |blist#0@@31| |slot#0@@3| |pivot#0@@35|) (and (and ($Is |blist#0@@31| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@35| Tclass.KeyType.Key)) (and (<= (LitInt 0) |slot#0@@3|) (< |slot#0@@3| (|Seq#Length| |blist#0@@31|)))))) (and (and (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@35|) (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@35|)) (|Sequences.__default.replace1with2#canCall| Tclass.BucketsLib.Bucket |blist#0@@31| ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@35|)) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@35|)) |slot#0@@3|)) (= (BucketsLib.__default.SplitBucketInList ($LS $ly@@667) |blist#0@@31| |slot#0@@3| |pivot#0@@35|) (Sequences.__default.replace1with2 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace1with2 |blist#0@@31| ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@35|)) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@35|)) |slot#0@@3|)))) :qid |BucketsL.897:22| :skolemid |3807| :pattern ( (BucketsLib.__default.SplitBucketInList ($LS $ly@@667) |blist#0@@31| |slot#0@@3| |pivot#0@@35|)) ))))
(assert  (=> true (forall (($ly@@668 T@U) (|blist#0@@32| T@U) (|slot#0@@4| Int) (|pivot#0@@36| T@U) ) (!  (=> (and (and (and (= (type $ly@@668) LayerTypeType) (= (type |blist#0@@32|) (SeqType BoxType))) (= (type |pivot#0@@36|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketInList#canCall| (Lit |blist#0@@32|) (LitInt |slot#0@@4|) (Lit |pivot#0@@36|)) (and (and ($Is |blist#0@@32| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@36| Tclass.KeyType.Key)) (and (<= (LitInt 0) (LitInt |slot#0@@4|)) (< |slot#0@@4| (|Seq#Length| (Lit |blist#0@@32|))))))) (and (and (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@36|)) (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@36|))) (|Sequences.__default.replace1with2#canCall| Tclass.BucketsLib.Bucket (Lit |blist#0@@32|) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@36|))) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@36|))) (LitInt |slot#0@@4|))) (= (BucketsLib.__default.SplitBucketInList ($LS $ly@@668) (Lit |blist#0@@32|) (LitInt |slot#0@@4|) (Lit |pivot#0@@36|)) (Sequences.__default.replace1with2 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace1with2 (Lit |blist#0@@32|) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@36|))) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@36|))) (LitInt |slot#0@@4|))))) :qid |BucketsL.897:22| :weight 3 :skolemid |3808| :pattern ( (BucketsLib.__default.SplitBucketInList ($LS $ly@@668) (Lit |blist#0@@32|) (LitInt |slot#0@@4|) (Lit |pivot#0@@36|))) ))))
(assert (forall ((arg0@@551 T@U) (arg1@@315 T@U) (arg2@@218 T@U) ) (! (= (type (BucketsLib.__default.MergeBuckets arg0@@551 arg1@@315 arg2@@218)) DatatypeTypeType) :qid |funType:BucketsLib.__default.MergeBuckets| :pattern ( (BucketsLib.__default.MergeBuckets arg0@@551 arg1@@315 arg2@@218)) )))
(assert (forall (($ly@@669 T@U) (|left#0@@7| T@U) (|right#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@669) LayerTypeType) (= (type |left#0@@7|) DatatypeTypeType)) (= (type |right#0@@7|) DatatypeTypeType)) (= (BucketsLib.__default.MergeBuckets ($LS $ly@@669) |left#0@@7| |right#0@@7|) (BucketsLib.__default.MergeBuckets $ly@@669 |left#0@@7| |right#0@@7|))) :qid |BucketsL.906:22| :skolemid |3809| :pattern ( (BucketsLib.__default.MergeBuckets ($LS $ly@@669) |left#0@@7| |right#0@@7|)) )))
(assert (forall (($ly@@670 T@U) (|left#0@@8| T@U) (|right#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@670) LayerTypeType) (= (type |left#0@@8|) DatatypeTypeType)) (= (type |right#0@@8|) DatatypeTypeType)) (= (BucketsLib.__default.MergeBuckets $ly@@670 |left#0@@8| |right#0@@8|) (BucketsLib.__default.MergeBuckets $LZ |left#0@@8| |right#0@@8|))) :qid |BucketsL.906:22| :skolemid |3810| :pattern ( (BucketsLib.__default.MergeBuckets (AsFuelBottom $ly@@670) |left#0@@8| |right#0@@8|)) )))
(assert  (=> true (forall (($ly@@671 T@U) (|left#0@@9| T@U) (|right#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@671) LayerTypeType) (= (type |left#0@@9|) DatatypeTypeType)) (= (type |right#0@@9|) DatatypeTypeType)) (or (|BucketsLib.__default.MergeBuckets#canCall| |left#0@@9| |right#0@@9|) (and ($Is |left#0@@9| Tclass.BucketsLib.Bucket) ($Is |right#0@@9| Tclass.BucketsLib.Bucket)))) (and (and (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.MergeBuckets $ly@@671 |left#0@@9| |right#0@@9|)) (BucketsLib.__default.PreWFBucket (BucketsLib.__default.MergeBuckets $ly@@671 |left#0@@9| |right#0@@9|))) (=> (and (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |left#0@@9|)) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |right#0@@9|))) (BucketsLib.__default.WFBucket (BucketsLib.__default.MergeBuckets $ly@@671 |left#0@@9| |right#0@@9|)))) ($Is (BucketsLib.__default.MergeBuckets $ly@@671 |left#0@@9| |right#0@@9|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.906:22| :skolemid |3811| :pattern ( (BucketsLib.__default.MergeBuckets $ly@@671 |left#0@@9| |right#0@@9|)) ))))
(assert (forall (($ly@@672 T@U) (|left#0@@10| T@U) (|right#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@672) LayerTypeType) (= (type |left#0@@10|) DatatypeTypeType)) (= (type |right#0@@10|) DatatypeTypeType)) (and ($Is |left#0@@10| Tclass.BucketsLib.Bucket) ($Is |right#0@@10| Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.MergeBuckets#requires| $ly@@672 |left#0@@10| |right#0@@10|) true) (=> true (|BucketsLib.__default.MergeBuckets#requires| $ly@@672 |left#0@@10| |right#0@@10|)))) :qid |BucketsL.906:22| :skolemid |3812| :pattern ( (|BucketsLib.__default.MergeBuckets#requires| $ly@@672 |left#0@@10| |right#0@@10|)) )))
(assert  (=> true (forall (($ly@@673 T@U) (|left#0@@11| T@U) (|right#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@673) LayerTypeType) (= (type |left#0@@11|) DatatypeTypeType)) (= (type |right#0@@11|) DatatypeTypeType)) (or (|BucketsLib.__default.MergeBuckets#canCall| |left#0@@11| |right#0@@11|) (and ($Is |left#0@@11| Tclass.BucketsLib.Bucket) ($Is |right#0@@11| Tclass.BucketsLib.Bucket)))) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |left#0@@11|) (BucketsLib.Bucket.BucketMapWithSeq_q |right#0@@11|)) (|Maps.__default.MapUnionPreferA#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BucketsLib.Bucket.b |left#0@@11|) (BucketsLib.Bucket.b |right#0@@11|))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapUnionPreferA Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnionPreferA (BucketsLib.Bucket.b |left#0@@11|) (BucketsLib.Bucket.b |right#0@@11|)))) (= (BucketsLib.__default.MergeBuckets ($LS $ly@@673) |left#0@@11| |right#0@@11|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapUnionPreferA Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnionPreferA (BucketsLib.Bucket.b |left#0@@11|) (BucketsLib.Bucket.b |right#0@@11|)))))) :qid |BucketsL.906:22| :skolemid |3813| :pattern ( (BucketsLib.__default.MergeBuckets ($LS $ly@@673) |left#0@@11| |right#0@@11|)) ))))
(assert  (=> true (forall (($ly@@674 T@U) (|left#0@@12| T@U) (|right#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@674) LayerTypeType) (= (type |left#0@@12|) DatatypeTypeType)) (= (type |right#0@@12|) DatatypeTypeType)) (or (|BucketsLib.__default.MergeBuckets#canCall| (Lit |left#0@@12|) (Lit |right#0@@12|)) (and ($Is |left#0@@12| Tclass.BucketsLib.Bucket) ($Is |right#0@@12| Tclass.BucketsLib.Bucket)))) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |left#0@@12|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |right#0@@12|))) (|Maps.__default.MapUnionPreferA#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.b (Lit |left#0@@12|))) (Lit (BucketsLib.Bucket.b (Lit |right#0@@12|))))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapUnionPreferA Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnionPreferA (Lit (BucketsLib.Bucket.b (Lit |left#0@@12|))) (Lit (BucketsLib.Bucket.b (Lit |right#0@@12|)))))) (= (BucketsLib.__default.MergeBuckets ($LS $ly@@674) (Lit |left#0@@12|) (Lit |right#0@@12|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapUnionPreferA Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnionPreferA (Lit (BucketsLib.Bucket.b (Lit |left#0@@12|))) (Lit (BucketsLib.Bucket.b (Lit |right#0@@12|)))))))) :qid |BucketsL.906:22| :weight 3 :skolemid |3814| :pattern ( (BucketsLib.__default.MergeBuckets ($LS $ly@@674) (Lit |left#0@@12|) (Lit |right#0@@12|))) ))))
(assert (forall ((arg0@@552 T@U) (arg1@@316 T@U) (arg2@@219 Int) ) (! (= (type (BucketsLib.__default.MergeBucketsInList arg0@@552 arg1@@316 arg2@@219)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.MergeBucketsInList| :pattern ( (BucketsLib.__default.MergeBucketsInList arg0@@552 arg1@@316 arg2@@219)) )))
(assert (forall (($ly@@675 T@U) (|blist#0@@33| T@U) (|slot#0@@5| Int) ) (!  (=> (and (= (type $ly@@675) LayerTypeType) (= (type |blist#0@@33|) (SeqType BoxType))) (= (BucketsLib.__default.MergeBucketsInList ($LS $ly@@675) |blist#0@@33| |slot#0@@5|) (BucketsLib.__default.MergeBucketsInList $ly@@675 |blist#0@@33| |slot#0@@5|))) :qid |BucketsL.914:22| :skolemid |3815| :pattern ( (BucketsLib.__default.MergeBucketsInList ($LS $ly@@675) |blist#0@@33| |slot#0@@5|)) )))
(assert (forall (($ly@@676 T@U) (|blist#0@@34| T@U) (|slot#0@@6| Int) ) (!  (=> (and (= (type $ly@@676) LayerTypeType) (= (type |blist#0@@34|) (SeqType BoxType))) (= (BucketsLib.__default.MergeBucketsInList $ly@@676 |blist#0@@34| |slot#0@@6|) (BucketsLib.__default.MergeBucketsInList $LZ |blist#0@@34| |slot#0@@6|))) :qid |BucketsL.914:22| :skolemid |3816| :pattern ( (BucketsLib.__default.MergeBucketsInList (AsFuelBottom $ly@@676) |blist#0@@34| |slot#0@@6|)) )))
(assert  (=> true (forall (($ly@@677 T@U) (|blist#0@@35| T@U) (|slot#0@@7| Int) ) (!  (=> (and (and (= (type $ly@@677) LayerTypeType) (= (type |blist#0@@35|) (SeqType BoxType))) (or (|BucketsLib.__default.MergeBucketsInList#canCall| |blist#0@@35| |slot#0@@7|) (and ($Is |blist#0@@35| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) |slot#0@@7|) (< |slot#0@@7| (- (|Seq#Length| |blist#0@@35|) 1)))))) (and (and (= (|Seq#Length| (BucketsLib.__default.MergeBucketsInList $ly@@677 |blist#0@@35| |slot#0@@7|)) (- (|Seq#Length| |blist#0@@35|) 1)) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.MergeBucketsInList $ly@@677 |blist#0@@35| |slot#0@@7|) |slot#0@@7|)))) ($Is (BucketsLib.__default.MergeBucketsInList $ly@@677 |blist#0@@35| |slot#0@@7|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.914:22| :skolemid |3817| :pattern ( (BucketsLib.__default.MergeBucketsInList $ly@@677 |blist#0@@35| |slot#0@@7|)) ))))
(assert (forall (($ly@@678 T@U) (|blist#0@@36| T@U) (|slot#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@678) LayerTypeType) (= (type |blist#0@@36|) (SeqType BoxType))) ($Is |blist#0@@36| (TSeq Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.MergeBucketsInList#requires| $ly@@678 |blist#0@@36| |slot#0@@8|) (and (<= (LitInt 0) |slot#0@@8|) (< |slot#0@@8| (- (|Seq#Length| |blist#0@@36|) 1)))) (=> (and (<= (LitInt 0) |slot#0@@8|) (< |slot#0@@8| (- (|Seq#Length| |blist#0@@36|) 1))) (|BucketsLib.__default.MergeBucketsInList#requires| $ly@@678 |blist#0@@36| |slot#0@@8|)))) :qid |BucketsL.914:22| :skolemid |3818| :pattern ( (|BucketsLib.__default.MergeBucketsInList#requires| $ly@@678 |blist#0@@36| |slot#0@@8|)) )))
(assert  (and (= (type StartFuel_BucketsLib._default.MergeBuckets) LayerTypeType) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)))
(assert  (=> true (forall (($ly@@679 T@U) (|blist#0@@37| T@U) (|slot#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@679) LayerTypeType) (= (type |blist#0@@37|) (SeqType BoxType))) (or (|BucketsLib.__default.MergeBucketsInList#canCall| |blist#0@@37| |slot#0@@9|) (and ($Is |blist#0@@37| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) |slot#0@@9|) (< |slot#0@@9| (- (|Seq#Length| |blist#0@@37|) 1)))))) (and (and (|BucketsLib.__default.MergeBuckets#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| |slot#0@@9|)) ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| (+ |slot#0@@9| 1)))) (|Sequences.__default.replace2with1#canCall| Tclass.BucketsLib.Bucket |blist#0@@37| ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| |slot#0@@9|)) ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| (+ |slot#0@@9| 1))))) |slot#0@@9|)) (= (BucketsLib.__default.MergeBucketsInList ($LS $ly@@679) |blist#0@@37| |slot#0@@9|) (Sequences.__default.replace2with1 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace2with1 |blist#0@@37| ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| |slot#0@@9|)) ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| (+ |slot#0@@9| 1))))) |slot#0@@9|)))) :qid |BucketsL.914:22| :skolemid |3819| :pattern ( (BucketsLib.__default.MergeBucketsInList ($LS $ly@@679) |blist#0@@37| |slot#0@@9|)) ))))
(assert  (=> true (forall (($ly@@680 T@U) (|blist#0@@38| T@U) (|slot#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@680) LayerTypeType) (= (type |blist#0@@38|) (SeqType BoxType))) (or (|BucketsLib.__default.MergeBucketsInList#canCall| (Lit |blist#0@@38|) (LitInt |slot#0@@10|)) (and ($Is |blist#0@@38| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) (LitInt |slot#0@@10|)) (< |slot#0@@10| (- (|Seq#Length| (Lit |blist#0@@38|)) 1)))))) (and (and (|BucketsLib.__default.MergeBuckets#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt |slot#0@@10|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt (+ |slot#0@@10| 1))))) (|Sequences.__default.replace2with1#canCall| Tclass.BucketsLib.Bucket (Lit |blist#0@@38|) ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt |slot#0@@10|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt (+ |slot#0@@10| 1)))))) (LitInt |slot#0@@10|))) (= (BucketsLib.__default.MergeBucketsInList ($LS $ly@@680) (Lit |blist#0@@38|) (LitInt |slot#0@@10|)) (Sequences.__default.replace2with1 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace2with1 (Lit |blist#0@@38|) ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt |slot#0@@10|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt (+ |slot#0@@10| 1)))))) (LitInt |slot#0@@10|))))) :qid |BucketsL.914:22| :weight 3 :skolemid |3820| :pattern ( (BucketsLib.__default.MergeBucketsInList ($LS $ly@@680) (Lit |blist#0@@38|) (LitInt |slot#0@@10|))) ))))
(assert (forall ((arg0@@553 T@U) (arg1@@317 Int) ) (! (= (type (BucketsLib.__default.emptyList arg0@@553 arg1@@317)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.emptyList| :pattern ( (BucketsLib.__default.emptyList arg0@@553 arg1@@317)) )))
(assert (forall (($ly@@681 T@U) (|n#0@@12| Int) ) (!  (=> (= (type $ly@@681) LayerTypeType) (= (BucketsLib.__default.emptyList ($LS $ly@@681) |n#0@@12|) (BucketsLib.__default.emptyList $ly@@681 |n#0@@12|))) :qid |BucketsL.1463:12| :skolemid |3897| :pattern ( (BucketsLib.__default.emptyList ($LS $ly@@681) |n#0@@12|)) )))
(assert (forall (($ly@@682 T@U) (|n#0@@13| Int) ) (!  (=> (= (type $ly@@682) LayerTypeType) (= (BucketsLib.__default.emptyList $ly@@682 |n#0@@13|) (BucketsLib.__default.emptyList $LZ |n#0@@13|))) :qid |BucketsL.1463:12| :skolemid |3898| :pattern ( (BucketsLib.__default.emptyList (AsFuelBottom $ly@@682) |n#0@@13|)) )))
(assert  (=> true (forall (($ly@@683 T@U) (|n#0@@14| Int) ) (!  (=> (and (= (type $ly@@683) LayerTypeType) (or (|BucketsLib.__default.emptyList#canCall| |n#0@@14|) (>= |n#0@@14| (LitInt 0)))) (and (and (= (|Seq#Length| (BucketsLib.__default.emptyList $ly@@683 |n#0@@14|)) |n#0@@14|) (forall ((|i#0@@168| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@168|) (< |i#0@@168| (|Seq#Length| (BucketsLib.__default.emptyList $ly@@683 |n#0@@14|)))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.emptyList $ly@@683 |n#0@@14|) |i#0@@168|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))))) :qid |BucketsL.1466:18| :skolemid |3899| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.emptyList $ly@@683 |n#0@@14|) |i#0@@168|))) ))) ($Is (BucketsLib.__default.emptyList $ly@@683 |n#0@@14|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.1463:12| :skolemid |3900| :pattern ( (BucketsLib.__default.emptyList $ly@@683 |n#0@@14|)) ))))
(assert (forall (($ly@@684 T@U) (|n#0@@15| Int) ) (!  (=> (= (type $ly@@684) LayerTypeType) (and (=> (|BucketsLib.__default.emptyList#requires| $ly@@684 |n#0@@15|) (>= |n#0@@15| (LitInt 0))) (=> (>= |n#0@@15| (LitInt 0)) (|BucketsLib.__default.emptyList#requires| $ly@@684 |n#0@@15|)))) :qid |BucketsL.1463:12| :skolemid |3901| :pattern ( (|BucketsLib.__default.emptyList#requires| $ly@@684 |n#0@@15|)) )))
(assert  (=> true (forall (($ly@@685 T@U) (|n#0@@16| Int) ) (!  (=> (and (= (type $ly@@685) LayerTypeType) (or (|BucketsLib.__default.emptyList#canCall| |n#0@@16|) (>= |n#0@@16| (LitInt 0)))) (and (=> (not (= |n#0@@16| (LitInt 0))) (and (|BucketsLib.__default.emptyList#canCall| (- |n#0@@16| 1)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType))))) (= (BucketsLib.__default.emptyList ($LS $ly@@685) |n#0@@16|) (ite (= |n#0@@16| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.emptyList $ly@@685 (- |n#0@@16| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType)))))))))) :qid |BucketsL.1463:12| :skolemid |3902| :pattern ( (BucketsLib.__default.emptyList ($LS $ly@@685) |n#0@@16|)) ))))
(assert  (=> true (forall (($ly@@686 T@U) (|n#0@@17| Int) ) (!  (=> (and (= (type $ly@@686) LayerTypeType) (or (|BucketsLib.__default.emptyList#canCall| (LitInt |n#0@@17|)) (>= (LitInt |n#0@@17|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@17|) (LitInt 0))) (and (|BucketsLib.__default.emptyList#canCall| (LitInt (- |n#0@@17| 1))) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType))))) (= (BucketsLib.__default.emptyList ($LS $ly@@686) (LitInt |n#0@@17|)) (ite (= (LitInt |n#0@@17|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.emptyList ($LS $ly@@686) (LitInt (- |n#0@@17| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType)))))))))) :qid |BucketsL.1463:12| :weight 3 :skolemid |3903| :pattern ( (BucketsLib.__default.emptyList ($LS $ly@@686) (LitInt |n#0@@17|))) ))))
(assert (forall ((arg0@@554 T@U) (arg1@@318 T@U) (arg2@@220 T@U) ) (! (= (type (BucketsLib.__default.binarySearch arg0@@554 arg1@@318 arg2@@220)) DatatypeTypeType) :qid |funType:BucketsLib.__default.binarySearch| :pattern ( (BucketsLib.__default.binarySearch arg0@@554 arg1@@318 arg2@@220)) )))
(assert (forall (($ly@@687 T@U) (|keys#0@@21| T@U) (|key#0@@205| T@U) ) (!  (=> (and (and (= (type $ly@@687) LayerTypeType) (= (type |keys#0@@21|) (SeqType BoxType))) (= (type |key#0@@205|) (SeqType BoxType))) (= (BucketsLib.__default.binarySearch ($LS $ly@@687) |keys#0@@21| |key#0@@205|) (BucketsLib.__default.binarySearch $ly@@687 |keys#0@@21| |key#0@@205|))) :qid |BucketsL.1590:12| :skolemid |3914| :pattern ( (BucketsLib.__default.binarySearch ($LS $ly@@687) |keys#0@@21| |key#0@@205|)) )))
(assert (forall (($ly@@688 T@U) (|keys#0@@22| T@U) (|key#0@@206| T@U) ) (!  (=> (and (and (= (type $ly@@688) LayerTypeType) (= (type |keys#0@@22|) (SeqType BoxType))) (= (type |key#0@@206|) (SeqType BoxType))) (= (BucketsLib.__default.binarySearch $ly@@688 |keys#0@@22| |key#0@@206|) (BucketsLib.__default.binarySearch $LZ |keys#0@@22| |key#0@@206|))) :qid |BucketsL.1590:12| :skolemid |3915| :pattern ( (BucketsLib.__default.binarySearch (AsFuelBottom $ly@@688) |keys#0@@22| |key#0@@206|)) )))
(assert  (=> true (forall (($ly@@689 T@U) (|keys#0@@23| T@U) (|key#0@@207| T@U) ) (!  (=> (and (and (and (= (type $ly@@689) LayerTypeType) (= (type |keys#0@@23|) (SeqType BoxType))) (= (type |key#0@@207|) (SeqType BoxType))) (or (|BucketsLib.__default.binarySearch#canCall| |keys#0@@23| |key#0@@207|) (and ($Is |keys#0@@23| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@207| Tclass.KeyType.Key)))) (and (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |keys#0@@23|) (=> (Options.Option.None_q (BucketsLib.__default.binarySearch $ly@@689 |keys#0@@23| |key#0@@207|)) (not (|Seq#Contains| |keys#0@@23| ($Box |key#0@@207|))))) (=> (Options.Option.Some_q (BucketsLib.__default.binarySearch $ly@@689 |keys#0@@23| |key#0@@207|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (BucketsLib.__default.binarySearch $ly@@689 |keys#0@@23| |key#0@@207|))))) (< (U_2_int ($Unbox intType (Options.Option.value (BucketsLib.__default.binarySearch $ly@@689 |keys#0@@23| |key#0@@207|)))) (|Seq#Length| |keys#0@@23|))) (|Seq#Equal| |key#0@@207| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@23| (U_2_int ($Unbox intType (Options.Option.value (BucketsLib.__default.binarySearch $ly@@689 |keys#0@@23| |key#0@@207|)))))))))) ($Is (BucketsLib.__default.binarySearch $ly@@689 |keys#0@@23| |key#0@@207|) (Tclass.Options.Option Tclass._System.nat)))) :qid |BucketsL.1590:12| :skolemid |3916| :pattern ( (BucketsLib.__default.binarySearch $ly@@689 |keys#0@@23| |key#0@@207|)) ))))
(assert (forall (($ly@@690 T@U) (|keys#0@@24| T@U) (|key#0@@208| T@U) ) (!  (=> (and (and (and (= (type $ly@@690) LayerTypeType) (= (type |keys#0@@24|) (SeqType BoxType))) (= (type |key#0@@208|) (SeqType BoxType))) (and ($Is |keys#0@@24| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@208| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.binarySearch#requires| $ly@@690 |keys#0@@24| |key#0@@208|) true) (=> true (|BucketsLib.__default.binarySearch#requires| $ly@@690 |keys#0@@24| |key#0@@208|)))) :qid |BucketsL.1590:12| :skolemid |3917| :pattern ( (|BucketsLib.__default.binarySearch#requires| $ly@@690 |keys#0@@24| |key#0@@208|)) )))
(assert  (=> true (forall (($ly@@691 T@U) (|keys#0@@25| T@U) (|key#0@@209| T@U) ) (!  (=> (and (and (and (= (type $ly@@691) LayerTypeType) (= (type |keys#0@@25|) (SeqType BoxType))) (= (type |key#0@@209|) (SeqType BoxType))) (or (|BucketsLib.__default.binarySearch#canCall| |keys#0@@25| |key#0@@209|) (and ($Is |keys#0@@25| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@209| Tclass.KeyType.Key)))) (and (=> (not (= (|Seq#Length| |keys#0@@25|) (LitInt 0))) (let ((|mid#0@@7| (Div (|Seq#Length| |keys#0@@25|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@209| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0@@7|))) (=> (Lexicographic__Byte__Order.__default.lt |key#0@@209| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0@@7|))) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Take| |keys#0@@25| |mid#0@@7|) |key#0@@209|))) (=> (not (Lexicographic__Byte__Order.__default.lt |key#0@@209| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0@@7|)))) (=> (not (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0@@7|)) |key#0@@209|)) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Drop| |keys#0@@25| (+ |mid#0@@7| 1)) |key#0@@209|)))))) (= (BucketsLib.__default.binarySearch ($LS $ly@@691) |keys#0@@25| |key#0@@209|) (ite (= (|Seq#Length| |keys#0@@25|) (LitInt 0)) |#Options.Option.None| (let ((|mid#0@@8| (Div (|Seq#Length| |keys#0@@25|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt |key#0@@209| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0@@8|))) (BucketsLib.__default.binarySearch $ly@@691 (|Seq#Take| |keys#0@@25| |mid#0@@8|) |key#0@@209|) (ite (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0@@8|)) |key#0@@209|) (|#Options.Option.Some| ($Box (int_2_U |mid#0@@8|))) (let ((|sub#0@@7| (BucketsLib.__default.binarySearch $ly@@691 (|Seq#Drop| |keys#0@@25| (+ |mid#0@@8| 1)) |key#0@@209|))) (ite (Options.Option.Some_q |sub#0@@7|) (|#Options.Option.Some| ($Box (int_2_U (+ (+ |mid#0@@8| 1) (U_2_int ($Unbox intType (Options.Option.value |sub#0@@7|))))))) |#Options.Option.None|))))))))) :qid |BucketsL.1590:12| :skolemid |3918| :pattern ( (BucketsLib.__default.binarySearch ($LS $ly@@691) |keys#0@@25| |key#0@@209|)) ))))
(assert  (=> true (forall (($ly@@692 T@U) (|keys#0@@26| T@U) (|key#0@@210| T@U) ) (!  (=> (and (and (and (= (type $ly@@692) LayerTypeType) (= (type |keys#0@@26|) (SeqType BoxType))) (= (type |key#0@@210|) (SeqType BoxType))) (or (|BucketsLib.__default.binarySearch#canCall| (Lit |keys#0@@26|) (Lit |key#0@@210|)) (and ($Is |keys#0@@26| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@210| Tclass.KeyType.Key)))) (and (=> (not (= (|Seq#Length| (Lit |keys#0@@26|)) (LitInt 0))) (let ((|mid#1@@7| (Div (|Seq#Length| (Lit |keys#0@@26|)) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@210|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1@@7|))) (=> (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@210|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1@@7|))) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Take| (Lit |keys#0@@26|) |mid#1@@7|) (Lit |key#0@@210|)))) (=> (not (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@210|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1@@7|)))) (=> (not (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1@@7|)) |key#0@@210|)) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Drop| (Lit |keys#0@@26|) (+ |mid#1@@7| 1)) (Lit |key#0@@210|))))))) (= (BucketsLib.__default.binarySearch ($LS $ly@@692) (Lit |keys#0@@26|) (Lit |key#0@@210|)) (ite (= (|Seq#Length| (Lit |keys#0@@26|)) (LitInt 0)) |#Options.Option.None| (let ((|mid#1@@8| (Div (|Seq#Length| (Lit |keys#0@@26|)) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@210|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1@@8|))) (BucketsLib.__default.binarySearch ($LS $ly@@692) (|Seq#Take| (Lit |keys#0@@26|) |mid#1@@8|) (Lit |key#0@@210|)) (ite (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1@@8|)) |key#0@@210|) (|#Options.Option.Some| ($Box (int_2_U |mid#1@@8|))) (let ((|sub#1| (BucketsLib.__default.binarySearch ($LS $ly@@692) (|Seq#Drop| (Lit |keys#0@@26|) (+ |mid#1@@8| 1)) (Lit |key#0@@210|)))) (ite (Options.Option.Some_q |sub#1|) (|#Options.Option.Some| ($Box (int_2_U (+ (+ |mid#1@@8| 1) (U_2_int ($Unbox intType (Options.Option.value |sub#1|))))))) |#Options.Option.None|))))))))) :qid |BucketsL.1590:12| :weight 3 :skolemid |3919| :pattern ( (BucketsLib.__default.binarySearch ($LS $ly@@692) (Lit |keys#0@@26|) (Lit |key#0@@210|))) ))))
(assert (forall ((arg0@@555 T@U) (arg1@@319 T@U) ) (! (= (type (BucketsLib.__default.bucketBinarySearchLookup arg0@@555 arg1@@319)) DatatypeTypeType) :qid |funType:BucketsLib.__default.bucketBinarySearchLookup| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup arg0@@555 arg1@@319)) )))
(assert  (=> true (forall ((|bucket#0@@90| T@U) (|key#0@@211| T@U) ) (!  (=> (and (and (= (type |bucket#0@@90|) DatatypeTypeType) (= (type |key#0@@211|) (SeqType BoxType))) (or (|BucketsLib.__default.bucketBinarySearchLookup#canCall| |bucket#0@@90| |key#0@@211|) (and (and ($Is |bucket#0@@90| Tclass.BucketsLib.Bucket) ($Is |key#0@@211| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucket |bucket#0@@90|)))) (and (and (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@90|) (=> (Options.Option.None_q (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@211|)) (not (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@90|)) ($Box |key#0@@211|)))))) (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@90|) (=> (Options.Option.Some_q (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@211|)) (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@90|)) ($Box |key#0@@211|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@90|)) ($Box |key#0@@211|))) ($Unbox DatatypeTypeType (Options.Option.value (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@211|)))))))) ($Is (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@211|) (Tclass.Options.Option Tclass.ValueMessage.Message)))) :qid |BucketsL.1614:37| :skolemid |3920| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@211|)) ))))
(assert (forall ((|bucket#0@@91| T@U) (|key#0@@212| T@U) ) (!  (=> (and (and (= (type |bucket#0@@91|) DatatypeTypeType) (= (type |key#0@@212|) (SeqType BoxType))) (and ($Is |bucket#0@@91| Tclass.BucketsLib.Bucket) ($Is |key#0@@212| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.bucketBinarySearchLookup#requires| |bucket#0@@91| |key#0@@212|) (BucketsLib.__default.WFBucket |bucket#0@@91|)) (=> (BucketsLib.__default.WFBucket |bucket#0@@91|) (|BucketsLib.__default.bucketBinarySearchLookup#requires| |bucket#0@@91| |key#0@@212|)))) :qid |BucketsL.1614:37| :skolemid |3921| :pattern ( (|BucketsLib.__default.bucketBinarySearchLookup#requires| |bucket#0@@91| |key#0@@212|)) )))
(assert  (=> true (forall ((|bucket#0@@92| T@U) (|key#0@@213| T@U) ) (!  (=> (and (and (= (type |bucket#0@@92|) DatatypeTypeType) (= (type |key#0@@213|) (SeqType BoxType))) (or (|BucketsLib.__default.bucketBinarySearchLookup#canCall| |bucket#0@@92| |key#0@@213|) (and (and ($Is |bucket#0@@92| Tclass.BucketsLib.Bucket) ($Is |key#0@@213| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucket |bucket#0@@92|)))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@92|) (|BucketsLib.__default.binarySearch#canCall| (BucketsLib.Bucket.keys |bucket#0@@92|) |key#0@@213|)) (let ((|i#0@@169| (BucketsLib.__default.binarySearch ($LS $LZ) (BucketsLib.Bucket.keys |bucket#0@@92|) |key#0@@213|))) (=> (Options.Option.Some_q |i#0@@169|) (and (and (|BucketsLib.__default.BucketWellMarshalled#canCall| |bucket#0@@92|) (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@92|) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@92|))) (=> (not (BucketsLib.__default.BucketWellMarshalled |bucket#0@@92|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@92|)))))) (= (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@92| |key#0@@213|) (let ((|i#0@@170| (BucketsLib.__default.binarySearch ($LS $LZ) (BucketsLib.Bucket.keys |bucket#0@@92|) |key#0@@213|))) (ite (Options.Option.Some_q |i#0@@170|) (ite (BucketsLib.__default.BucketWellMarshalled |bucket#0@@92|) (|#Options.Option.Some| (|Seq#Index| (BucketsLib.Bucket.msgs |bucket#0@@92|) (U_2_int ($Unbox intType (Options.Option.value |i#0@@170|))))) (|#Options.Option.Some| (|Seq#Index| (BucketsLib.Bucket.msgs |bucket#0@@92|) (U_2_int ($Unbox intType (Options.Option.value |i#0@@170|)))))) |#Options.Option.None|))))) :qid |BucketsL.1614:37| :skolemid |3922| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@92| |key#0@@213|)) ))))
(assert  (=> true (forall ((|bucket#0@@93| T@U) (|key#0@@214| T@U) ) (!  (=> (and (and (= (type |bucket#0@@93|) DatatypeTypeType) (= (type |key#0@@214|) (SeqType BoxType))) (or (|BucketsLib.__default.bucketBinarySearchLookup#canCall| (Lit |bucket#0@@93|) (Lit |key#0@@214|)) (and (and ($Is |bucket#0@@93| Tclass.BucketsLib.Bucket) ($Is |key#0@@214| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |bucket#0@@93|)))))))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@93|)) (|BucketsLib.__default.binarySearch#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@93|))) (Lit |key#0@@214|))) (let ((|i#1@@81| (Lit (BucketsLib.__default.binarySearch ($LS $LZ) (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@93|))) (Lit |key#0@@214|))))) (=> (Options.Option.Some_q |i#1@@81|) (and (and (|BucketsLib.__default.BucketWellMarshalled#canCall| (Lit |bucket#0@@93|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@93|))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@93|)))) (=> (not (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@93|)))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@93|))))))) (= (BucketsLib.__default.bucketBinarySearchLookup (Lit |bucket#0@@93|) (Lit |key#0@@214|)) (let ((|i#1@@82| (Lit (BucketsLib.__default.binarySearch ($LS $LZ) (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@93|))) (Lit |key#0@@214|))))) (ite (Options.Option.Some_q |i#1@@82|) (ite (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@93|)) (|#Options.Option.Some| (|Seq#Index| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@93|))) (LitInt (U_2_int ($Unbox intType (Options.Option.value |i#1@@82|)))))) (|#Options.Option.Some| (|Seq#Index| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@93|))) (LitInt (U_2_int ($Unbox intType (Options.Option.value |i#1@@82|))))))) |#Options.Option.None|))))) :qid |BucketsL.1614:37| :weight 3 :skolemid |3923| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup (Lit |bucket#0@@93|) (Lit |key#0@@214|))) ))))
(assert (forall ((arg0@@556 T@U) ) (! (= (type (BucketsLib.__default.getMiddleKey arg0@@556)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.getMiddleKey| :pattern ( (BucketsLib.__default.getMiddleKey arg0@@556)) )))
(assert  (=> true (forall ((|bucket#0@@94| T@U) ) (!  (=> (and (= (type |bucket#0@@94|) DatatypeTypeType) (or (|BucketsLib.__default.getMiddleKey#canCall| |bucket#0@@94|) (and ($Is |bucket#0@@94| Tclass.BucketsLib.Bucket) (BucketsLib.__default.WFBucket |bucket#0@@94|)))) ($Is (BucketsLib.__default.getMiddleKey |bucket#0@@94|) Tclass.KeyType.Key)) :qid |BucketsL.1633:25| :skolemid |3924| :pattern ( (BucketsLib.__default.getMiddleKey |bucket#0@@94|)) ))))
(assert (forall ((|bucket#0@@95| T@U) ) (!  (=> (and (= (type |bucket#0@@95|) DatatypeTypeType) ($Is |bucket#0@@95| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.getMiddleKey#requires| |bucket#0@@95|) (BucketsLib.__default.WFBucket |bucket#0@@95|)) (=> (BucketsLib.__default.WFBucket |bucket#0@@95|) (|BucketsLib.__default.getMiddleKey#requires| |bucket#0@@95|)))) :qid |BucketsL.1633:25| :skolemid |3925| :pattern ( (|BucketsLib.__default.getMiddleKey#requires| |bucket#0@@95|)) )))
(assert  (=> true (forall ((|bucket#0@@96| T@U) ) (!  (=> (and (= (type |bucket#0@@96|) DatatypeTypeType) (or (|BucketsLib.__default.getMiddleKey#canCall| |bucket#0@@96|) (and ($Is |bucket#0@@96| Tclass.BucketsLib.Bucket) (BucketsLib.__default.WFBucket |bucket#0@@96|)))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@96|) (=> (not (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@96|)) (LitInt 0))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@96|) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@96|)))) (= (BucketsLib.__default.getMiddleKey |bucket#0@@96|) (ite (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@96|)) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) (let ((|key#0@@215| ($Unbox (SeqType BoxType) (|Seq#Index| (BucketsLib.Bucket.keys |bucket#0@@96|) (Div (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@96|)) (LitInt 2)))))) (ite (= (|Seq#Length| |key#0@@215|) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) |key#0@@215|)))))) :qid |BucketsL.1633:25| :skolemid |3926| :pattern ( (BucketsLib.__default.getMiddleKey |bucket#0@@96|)) ))))
(assert  (=> true (forall ((|bucket#0@@97| T@U) ) (!  (=> (and (= (type |bucket#0@@97|) DatatypeTypeType) (or (|BucketsLib.__default.getMiddleKey#canCall| (Lit |bucket#0@@97|)) (and ($Is |bucket#0@@97| Tclass.BucketsLib.Bucket) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |bucket#0@@97|)))))))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@97|)) (=> (not (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@97|)))) (LitInt 0))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@97|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@97|))))) (= (BucketsLib.__default.getMiddleKey (Lit |bucket#0@@97|)) (ite (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@97|)))) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) (let ((|key#1@@28| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@97|))) (Div (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@97|)))) (LitInt 2)))))) (ite (= (|Seq#Length| |key#1@@28|) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) |key#1@@28|)))))) :qid |BucketsL.1633:25| :weight 3 :skolemid |3927| :pattern ( (BucketsLib.__default.getMiddleKey (Lit |bucket#0@@97|))) ))))
(assert (forall ((arg0@@557 T@U) (arg1@@320 T@U) (arg2@@221 T@U) ) (! (= (type (|#PivotBetreeGraph.Node.Node| arg0@@557 arg1@@320 arg2@@221)) DatatypeTypeType) :qid |funType:#PivotBetreeGraph.Node.Node| :pattern ( (|#PivotBetreeGraph.Node.Node| arg0@@557 arg1@@320 arg2@@221)) )))
(assert (forall ((|a#0#0#0@@4| T@U) (|a#0#1#0@@2| T@U) (|a#0#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#0#0#0@@4|) (SeqType BoxType)) (= (type |a#0#1#0@@2|) DatatypeTypeType)) (= (type |a#0#2#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#PivotBetreeGraph.Node.Node| |a#0#0#0@@4| |a#0#1#0@@2| |a#0#2#0@@0|)) |##PivotBetreeGraph.Node.Node|)) :qid |PivotBet.36:7| :skolemid |3928| :pattern ( (|#PivotBetreeGraph.Node.Node| |a#0#0#0@@4| |a#0#1#0@@2| |a#0#2#0@@0|)) )))
(assert (forall ((d@@147 T@U) ) (!  (=> (= (type d@@147) DatatypeTypeType) (and (=> (PivotBetreeGraph.Node.Node_q d@@147) (= (DatatypeCtorId d@@147) |##PivotBetreeGraph.Node.Node|)) (=> (= (DatatypeCtorId d@@147) |##PivotBetreeGraph.Node.Node|) (PivotBetreeGraph.Node.Node_q d@@147)))) :qid |unknown.0:0| :skolemid |3929| :pattern ( (PivotBetreeGraph.Node.Node_q d@@147)) )))
(assert (forall ((d@@148 T@U) ) (!  (=> (and (= (type d@@148) DatatypeTypeType) (PivotBetreeGraph.Node.Node_q d@@148)) (exists ((|a#1#0#0@@4| T@U) (|a#1#1#0@@2| T@U) (|a#1#2#0@@0| T@U) ) (!  (and (and (and (= (type |a#1#0#0@@4|) (SeqType BoxType)) (= (type |a#1#1#0@@2|) DatatypeTypeType)) (= (type |a#1#2#0@@0|) (SeqType BoxType))) (= d@@148 (|#PivotBetreeGraph.Node.Node| |a#1#0#0@@4| |a#1#1#0@@2| |a#1#2#0@@0|))) :qid |PivotBet.36:7| :skolemid |3930| :no-pattern (type |a#1#0#0@@4|) :no-pattern (type |a#1#1#0@@2|) :no-pattern (type |a#1#2#0@@0|) :no-pattern (U_2_int |a#1#0#0@@4|) :no-pattern (U_2_bool |a#1#0#0@@4|) :no-pattern (U_2_int |a#1#1#0@@2|) :no-pattern (U_2_bool |a#1#1#0@@2|) :no-pattern (U_2_int |a#1#2#0@@0|) :no-pattern (U_2_bool |a#1#2#0@@0|) ))) :qid |unknown.0:0| :skolemid |3931| :pattern ( (PivotBetreeGraph.Node.Node_q d@@148)) )))
(assert (forall ((|a#2#0#0@@4| T@U) (|a#2#1#0@@2| T@U) (|a#2#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#2#0#0@@4|) (SeqType BoxType)) (= (type |a#2#1#0@@2|) DatatypeTypeType)) (= (type |a#2#2#0@@0|) (SeqType BoxType))) (and (=> ($Is (|#PivotBetreeGraph.Node.Node| |a#2#0#0@@4| |a#2#1#0@@2| |a#2#2#0@@0|) Tclass.PivotBetreeGraph.Node) (and (and ($Is |a#2#0#0@@4| (TSeq Tclass.KeyType.Key)) ($Is |a#2#1#0@@2| (Tclass.Options.Option (TSeq Tclass.ReferenceType.Reference)))) ($Is |a#2#2#0@@0| (TSeq Tclass.BucketsLib.Bucket)))) (=> (and (and ($Is |a#2#0#0@@4| (TSeq Tclass.KeyType.Key)) ($Is |a#2#1#0@@2| (Tclass.Options.Option (TSeq Tclass.ReferenceType.Reference)))) ($Is |a#2#2#0@@0| (TSeq Tclass.BucketsLib.Bucket))) ($Is (|#PivotBetreeGraph.Node.Node| |a#2#0#0@@4| |a#2#1#0@@2| |a#2#2#0@@0|) Tclass.PivotBetreeGraph.Node)))) :qid |PivotBet.36:7| :skolemid |3932| :pattern ( ($Is (|#PivotBetreeGraph.Node.Node| |a#2#0#0@@4| |a#2#1#0@@2| |a#2#2#0@@0|) Tclass.PivotBetreeGraph.Node)) )))
(assert (forall ((|a#3#0#0@@4| T@U) (|a#3#1#0@@2| T@U) (|a#3#2#0@@0| T@U) ($h@@133 T@U) ) (!  (=> (and (and (and (and (= (type |a#3#0#0@@4|) (SeqType BoxType)) (= (type |a#3#1#0@@2|) DatatypeTypeType)) (= (type |a#3#2#0@@0|) (SeqType BoxType))) (= (type $h@@133) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@133)) (and (=> ($IsAlloc (|#PivotBetreeGraph.Node.Node| |a#3#0#0@@4| |a#3#1#0@@2| |a#3#2#0@@0|) Tclass.PivotBetreeGraph.Node $h@@133) (and (and ($IsAlloc |a#3#0#0@@4| (TSeq Tclass.KeyType.Key) $h@@133) ($IsAlloc |a#3#1#0@@2| (Tclass.Options.Option (TSeq Tclass.ReferenceType.Reference)) $h@@133)) ($IsAlloc |a#3#2#0@@0| (TSeq Tclass.BucketsLib.Bucket) $h@@133))) (=> (and (and ($IsAlloc |a#3#0#0@@4| (TSeq Tclass.KeyType.Key) $h@@133) ($IsAlloc |a#3#1#0@@2| (Tclass.Options.Option (TSeq Tclass.ReferenceType.Reference)) $h@@133)) ($IsAlloc |a#3#2#0@@0| (TSeq Tclass.BucketsLib.Bucket) $h@@133)) ($IsAlloc (|#PivotBetreeGraph.Node.Node| |a#3#0#0@@4| |a#3#1#0@@2| |a#3#2#0@@0|) Tclass.PivotBetreeGraph.Node $h@@133)))) :qid |PivotBet.36:7| :skolemid |3933| :pattern ( ($IsAlloc (|#PivotBetreeGraph.Node.Node| |a#3#0#0@@4| |a#3#1#0@@2| |a#3#2#0@@0|) Tclass.PivotBetreeGraph.Node $h@@133)) )))
(assert (forall ((arg0@@558 T@U) ) (! (= (type (PivotBetreeGraph.Node.pivotTable arg0@@558)) (SeqType BoxType)) :qid |funType:PivotBetreeGraph.Node.pivotTable| :pattern ( (PivotBetreeGraph.Node.pivotTable arg0@@558)) )))
(assert (forall ((d@@149 T@U) ($h@@134 T@U) ) (!  (=> (and (and (= (type d@@149) DatatypeTypeType) (= (type $h@@134) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@134) (and (PivotBetreeGraph.Node.Node_q d@@149) ($IsAlloc d@@149 Tclass.PivotBetreeGraph.Node $h@@134)))) ($IsAlloc (PivotBetreeGraph.Node.pivotTable d@@149) (TSeq Tclass.KeyType.Key) $h@@134)) :qid |unknown.0:0| :skolemid |3934| :pattern ( ($IsAlloc (PivotBetreeGraph.Node.pivotTable d@@149) (TSeq Tclass.KeyType.Key) $h@@134)) )))
(assert (forall ((arg0@@559 T@U) ) (! (= (type (PivotBetreeGraph.Node.children arg0@@559)) DatatypeTypeType) :qid |funType:PivotBetreeGraph.Node.children| :pattern ( (PivotBetreeGraph.Node.children arg0@@559)) )))
(assert (forall ((d@@150 T@U) ($h@@135 T@U) ) (!  (=> (and (and (= (type d@@150) DatatypeTypeType) (= (type $h@@135) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@135) (and (PivotBetreeGraph.Node.Node_q d@@150) ($IsAlloc d@@150 Tclass.PivotBetreeGraph.Node $h@@135)))) ($IsAlloc (PivotBetreeGraph.Node.children d@@150) (Tclass.Options.Option (TSeq Tclass.ReferenceType.Reference)) $h@@135)) :qid |unknown.0:0| :skolemid |3935| :pattern ( ($IsAlloc (PivotBetreeGraph.Node.children d@@150) (Tclass.Options.Option (TSeq Tclass.ReferenceType.Reference)) $h@@135)) )))
(assert (forall ((arg0@@560 T@U) ) (! (= (type (PivotBetreeGraph.Node.buckets arg0@@560)) (SeqType BoxType)) :qid |funType:PivotBetreeGraph.Node.buckets| :pattern ( (PivotBetreeGraph.Node.buckets arg0@@560)) )))
(assert (forall ((d@@151 T@U) ($h@@136 T@U) ) (!  (=> (and (and (= (type d@@151) DatatypeTypeType) (= (type $h@@136) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@136) (and (PivotBetreeGraph.Node.Node_q d@@151) ($IsAlloc d@@151 Tclass.PivotBetreeGraph.Node $h@@136)))) ($IsAlloc (PivotBetreeGraph.Node.buckets d@@151) (TSeq Tclass.BucketsLib.Bucket) $h@@136)) :qid |unknown.0:0| :skolemid |3936| :pattern ( ($IsAlloc (PivotBetreeGraph.Node.buckets d@@151) (TSeq Tclass.BucketsLib.Bucket) $h@@136)) )))
(assert (forall ((|a#4#0#0@@4| T@U) (|a#4#1#0@@2| T@U) (|a#4#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#4#0#0@@4|) (SeqType BoxType)) (= (type |a#4#1#0@@2|) DatatypeTypeType)) (= (type |a#4#2#0@@0|) (SeqType BoxType))) (= (|#PivotBetreeGraph.Node.Node| (Lit |a#4#0#0@@4|) (Lit |a#4#1#0@@2|) (Lit |a#4#2#0@@0|)) (Lit (|#PivotBetreeGraph.Node.Node| |a#4#0#0@@4| |a#4#1#0@@2| |a#4#2#0@@0|)))) :qid |PivotBet.36:7| :skolemid |3937| :pattern ( (|#PivotBetreeGraph.Node.Node| (Lit |a#4#0#0@@4|) (Lit |a#4#1#0@@2|) (Lit |a#4#2#0@@0|))) )))
(assert (forall ((|a#5#0#0@@6| T@U) (|a#5#1#0@@2| T@U) (|a#5#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#5#0#0@@6|) (SeqType BoxType)) (= (type |a#5#1#0@@2|) DatatypeTypeType)) (= (type |a#5#2#0@@0|) (SeqType BoxType))) (= (PivotBetreeGraph.Node.pivotTable (|#PivotBetreeGraph.Node.Node| |a#5#0#0@@6| |a#5#1#0@@2| |a#5#2#0@@0|)) |a#5#0#0@@6|)) :qid |PivotBet.36:7| :skolemid |3938| :pattern ( (|#PivotBetreeGraph.Node.Node| |a#5#0#0@@6| |a#5#1#0@@2| |a#5#2#0@@0|)) )))
(assert (forall ((|a#6#0#0@@6| T@U) (|a#6#1#0@@2| T@U) (|a#6#2#0@@0| T@U) (i@@36 Int) ) (!  (=> (and (and (and (= (type |a#6#0#0@@6|) (SeqType BoxType)) (= (type |a#6#1#0@@2|) DatatypeTypeType)) (= (type |a#6#2#0@@0|) (SeqType BoxType))) (and (<= 0 i@@36) (< i@@36 (|Seq#Length| |a#6#0#0@@6|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#6#0#0@@6| i@@36))) (DtRank (|#PivotBetreeGraph.Node.Node| |a#6#0#0@@6| |a#6#1#0@@2| |a#6#2#0@@0|)))) :qid |PivotBet.36:7| :skolemid |3939| :pattern ( (|Seq#Index| |a#6#0#0@@6| i@@36) (|#PivotBetreeGraph.Node.Node| |a#6#0#0@@6| |a#6#1#0@@2| |a#6#2#0@@0|)) )))
(assert (forall ((|a#7#0#0@@6| T@U) (|a#7#1#0@@2| T@U) (|a#7#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#7#0#0@@6|) (SeqType BoxType)) (= (type |a#7#1#0@@2|) DatatypeTypeType)) (= (type |a#7#2#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#7#0#0@@6|) (DtRank (|#PivotBetreeGraph.Node.Node| |a#7#0#0@@6| |a#7#1#0@@2| |a#7#2#0@@0|)))) :qid |PivotBet.36:7| :skolemid |3940| :pattern ( (|#PivotBetreeGraph.Node.Node| |a#7#0#0@@6| |a#7#1#0@@2| |a#7#2#0@@0|)) )))
(assert (forall ((|a#8#0#0@@6| T@U) (|a#8#1#0@@2| T@U) (|a#8#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#8#0#0@@6|) (SeqType BoxType)) (= (type |a#8#1#0@@2|) DatatypeTypeType)) (= (type |a#8#2#0@@0|) (SeqType BoxType))) (= (PivotBetreeGraph.Node.children (|#PivotBetreeGraph.Node.Node| |a#8#0#0@@6| |a#8#1#0@@2| |a#8#2#0@@0|)) |a#8#1#0@@2|)) :qid |PivotBet.36:7| :skolemid |3941| :pattern ( (|#PivotBetreeGraph.Node.Node| |a#8#0#0@@6| |a#8#1#0@@2| |a#8#2#0@@0|)) )))
(assert (forall ((|a#9#0#0@@5| T@U) (|a#9#1#0@@1| T@U) (|a#9#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@5|) (SeqType BoxType)) (= (type |a#9#1#0@@1|) DatatypeTypeType)) (= (type |a#9#2#0@@0|) (SeqType BoxType))) (< (DtRank |a#9#1#0@@1|) (DtRank (|#PivotBetreeGraph.Node.Node| |a#9#0#0@@5| |a#9#1#0@@1| |a#9#2#0@@0|)))) :qid |PivotBet.36:7| :skolemid |3942| :pattern ( (|#PivotBetreeGraph.Node.Node| |a#9#0#0@@5| |a#9#1#0@@1| |a#9#2#0@@0|)) )))
(assert (forall ((|a#10#0#0@@5| T@U) (|a#10#1#0@@1| T@U) (|a#10#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#10#0#0@@5|) (SeqType BoxType)) (= (type |a#10#1#0@@1|) DatatypeTypeType)) (= (type |a#10#2#0@@0|) (SeqType BoxType))) (= (PivotBetreeGraph.Node.buckets (|#PivotBetreeGraph.Node.Node| |a#10#0#0@@5| |a#10#1#0@@1| |a#10#2#0@@0|)) |a#10#2#0@@0|)) :qid |PivotBet.36:7| :skolemid |3943| :pattern ( (|#PivotBetreeGraph.Node.Node| |a#10#0#0@@5| |a#10#1#0@@1| |a#10#2#0@@0|)) )))
(assert (forall ((|a#11#0#0@@5| T@U) (|a#11#1#0@@1| T@U) (|a#11#2#0@@0| T@U) (i@@37 Int) ) (!  (=> (and (and (and (= (type |a#11#0#0@@5|) (SeqType BoxType)) (= (type |a#11#1#0@@1|) DatatypeTypeType)) (= (type |a#11#2#0@@0|) (SeqType BoxType))) (and (<= 0 i@@37) (< i@@37 (|Seq#Length| |a#11#2#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#11#2#0@@0| i@@37))) (DtRank (|#PivotBetreeGraph.Node.Node| |a#11#0#0@@5| |a#11#1#0@@1| |a#11#2#0@@0|)))) :qid |PivotBet.36:7| :skolemid |3944| :pattern ( (|Seq#Index| |a#11#2#0@@0| i@@37) (|#PivotBetreeGraph.Node.Node| |a#11#0#0@@5| |a#11#1#0@@1| |a#11#2#0@@0|)) )))
(assert (forall ((|a#12#0#0@@3| T@U) (|a#12#1#0@@1| T@U) (|a#12#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#12#0#0@@3|) (SeqType BoxType)) (= (type |a#12#1#0@@1|) DatatypeTypeType)) (= (type |a#12#2#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#12#2#0@@0|) (DtRank (|#PivotBetreeGraph.Node.Node| |a#12#0#0@@3| |a#12#1#0@@1| |a#12#2#0@@0|)))) :qid |PivotBet.36:7| :skolemid |3945| :pattern ( (|#PivotBetreeGraph.Node.Node| |a#12#0#0@@3| |a#12#1#0@@1| |a#12#2#0@@0|)) )))
(assert (forall ((d@@152 T@U) ) (!  (=> (and (= (type d@@152) DatatypeTypeType) (|$IsA#PivotBetreeGraph.Node| d@@152)) (PivotBetreeGraph.Node.Node_q d@@152)) :qid |unknown.0:0| :skolemid |3946| :pattern ( (|$IsA#PivotBetreeGraph.Node| d@@152)) )))
(assert (forall ((d@@153 T@U) ) (!  (=> (and (= (type d@@153) DatatypeTypeType) ($Is d@@153 Tclass.PivotBetreeGraph.Node)) (PivotBetreeGraph.Node.Node_q d@@153)) :qid |unknown.0:0| :skolemid |3947| :pattern ( (PivotBetreeGraph.Node.Node_q d@@153) ($Is d@@153 Tclass.PivotBetreeGraph.Node)) )))
(assert (forall ((a@@181 T@U) (b@@112 T@U) ) (!  (=> (and (and (= (type a@@181) DatatypeTypeType) (= (type b@@112) DatatypeTypeType)) true) (and (=> (|PivotBetreeGraph.Node#Equal| a@@181 b@@112) (and (and (|Seq#Equal| (PivotBetreeGraph.Node.pivotTable a@@181) (PivotBetreeGraph.Node.pivotTable b@@112)) (|Options.Option#Equal| (PivotBetreeGraph.Node.children a@@181) (PivotBetreeGraph.Node.children b@@112))) (|Seq#Equal| (PivotBetreeGraph.Node.buckets a@@181) (PivotBetreeGraph.Node.buckets b@@112)))) (=> (and (and (|Seq#Equal| (PivotBetreeGraph.Node.pivotTable a@@181) (PivotBetreeGraph.Node.pivotTable b@@112)) (|Options.Option#Equal| (PivotBetreeGraph.Node.children a@@181) (PivotBetreeGraph.Node.children b@@112))) (|Seq#Equal| (PivotBetreeGraph.Node.buckets a@@181) (PivotBetreeGraph.Node.buckets b@@112))) (|PivotBetreeGraph.Node#Equal| a@@181 b@@112)))) :qid |unknown.0:0| :skolemid |3948| :pattern ( (|PivotBetreeGraph.Node#Equal| a@@181 b@@112)) )))
(assert (forall ((a@@182 T@U) (b@@113 T@U) ) (!  (=> (and (= (type a@@182) DatatypeTypeType) (= (type b@@113) DatatypeTypeType)) (and (=> (|PivotBetreeGraph.Node#Equal| a@@182 b@@113) (= a@@182 b@@113)) (=> (= a@@182 b@@113) (|PivotBetreeGraph.Node#Equal| a@@182 b@@113)))) :qid |unknown.0:0| :skolemid |3949| :pattern ( (|PivotBetreeGraph.Node#Equal| a@@182 b@@113)) )))
(assert (= (type Tclass.PivotBetreeGraph.__default) TyType))
(assert (= (Tag Tclass.PivotBetreeGraph.__default) Tagclass.PivotBetreeGraph.__default))
(assert (forall ((bx@@172 T@U) ) (!  (=> (and (= (type bx@@172) BoxType) ($IsBox bx@@172 Tclass.PivotBetreeGraph.__default)) (and (= ($Box ($Unbox refType bx@@172)) bx@@172) ($Is ($Unbox refType bx@@172) Tclass.PivotBetreeGraph.__default))) :qid |unknown.0:0| :skolemid |3950| :pattern ( ($IsBox bx@@172 Tclass.PivotBetreeGraph.__default)) )))
(assert (forall (($o@@60 T@U) ) (!  (=> (= (type $o@@60) refType) (and (=> ($Is $o@@60 Tclass.PivotBetreeGraph.__default) (or (= $o@@60 null) (= (dtype $o@@60) Tclass.PivotBetreeGraph.__default))) (=> (or (= $o@@60 null) (= (dtype $o@@60) Tclass.PivotBetreeGraph.__default)) ($Is $o@@60 Tclass.PivotBetreeGraph.__default)))) :qid |unknown.0:0| :skolemid |3951| :pattern ( ($Is $o@@60 Tclass.PivotBetreeGraph.__default)) )))
(assert (forall (($o@@61 T@U) ($h@@137 T@U) ) (!  (=> (and (= (type $o@@61) refType) (= (type $h@@137) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@61 Tclass.PivotBetreeGraph.__default $h@@137) (or (= $o@@61 null) (U_2_bool (MapType1Select (MapType0Select $h@@137 $o@@61) alloc)))) (=> (or (= $o@@61 null) (U_2_bool (MapType1Select (MapType0Select $h@@137 $o@@61) alloc))) ($IsAlloc $o@@61 Tclass.PivotBetreeGraph.__default $h@@137)))) :qid |unknown.0:0| :skolemid |3952| :pattern ( ($IsAlloc $o@@61 Tclass.PivotBetreeGraph.__default $h@@137)) )))
(assert (forall ((arg0@@561 T@U) ) (! (= (type (PivotBetreeGraph.__default.Successors arg0@@561)) (MapType0Type BoxType boolType)) :qid |funType:PivotBetreeGraph.__default.Successors| :pattern ( (PivotBetreeGraph.__default.Successors arg0@@561)) )))
(assert  (=> true (forall ((|node#0@@3| T@U) ) (!  (=> (and (= (type |node#0@@3|) DatatypeTypeType) (or (|PivotBetreeGraph.__default.Successors#canCall| |node#0@@3|) ($Is |node#0@@3| Tclass.PivotBetreeGraph.Node))) ($Is (PivotBetreeGraph.__default.Successors |node#0@@3|) (TISet Tclass.ReferenceType.Reference))) :qid |Graphidf.39:23| :skolemid |3953| :pattern ( (PivotBetreeGraph.__default.Successors |node#0@@3|)) ))))
(assert (forall ((|node#0@@4| T@U) ) (!  (=> (and (= (type |node#0@@4|) DatatypeTypeType) ($Is |node#0@@4| Tclass.PivotBetreeGraph.Node)) (and (=> (|PivotBetreeGraph.__default.Successors#requires| |node#0@@4|) true) (=> true (|PivotBetreeGraph.__default.Successors#requires| |node#0@@4|)))) :qid |Graphidf.39:23| :skolemid |3954| :pattern ( (|PivotBetreeGraph.__default.Successors#requires| |node#0@@4|)) )))
(assert (forall ((arg0@@562 Int) (arg1@@321 Int) (arg2@@222 T@U) (arg3@@149 T@U) ) (! (= (type (|lambda#362| arg0@@562 arg1@@321 arg2@@222 arg3@@149)) (MapType0Type BoxType boolType)) :qid |funType:lambda#362| :pattern ( (|lambda#362| arg0@@562 arg1@@321 arg2@@222 arg3@@149)) )))
(assert  (=> true (forall ((|node#0@@5| T@U) ) (!  (=> (and (= (type |node#0@@5|) DatatypeTypeType) (or (|PivotBetreeGraph.__default.Successors#canCall| |node#0@@5|) ($Is |node#0@@5| Tclass.PivotBetreeGraph.Node))) (and (and (PivotBetreeGraph.Node.Node_q |node#0@@5|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@5|)) (forall ((|i#0@@171| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@171|) (PivotBetreeGraph.Node.Node_q |node#0@@5|)) (=> (and (<= (LitInt 0) |i#0@@171|) (< |i#0@@171| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@5|)))))) (PivotBetreeGraph.Node.Node_q |node#0@@5|))) :qid |PivotBet.43:12| :skolemid |3955| :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@5|))) |i#0@@171|)) )))) (= (PivotBetreeGraph.__default.Successors |node#0@@5|) (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@5|)) (|lambda#362| (LitInt 0) (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@5|)))) ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@5|))) ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@5|)))) (|ISet#Empty| BoxType))))) :qid |Graphidf.39:23| :skolemid |3957| :pattern ( (PivotBetreeGraph.__default.Successors |node#0@@5|)) ))))
(assert  (=> true (forall ((|node#0@@6| T@U) ) (!  (=> (and (= (type |node#0@@6|) DatatypeTypeType) (or (|PivotBetreeGraph.__default.Successors#canCall| (Lit |node#0@@6|)) ($Is |node#0@@6| Tclass.PivotBetreeGraph.Node))) (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@6|))))))) (forall ((|i#1@@83| Int) ) (!  (and (=> (<= (LitInt 0) |i#1@@83|) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@6|))) (=> (and (<= (LitInt 0) |i#1@@83|) (< |i#1@@83| (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@6|))))))))) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@6|)))) :qid |PivotBet.43:12| :skolemid |3958| :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@6|))) |i#1@@83|)) )))) (= (PivotBetreeGraph.__default.Successors (Lit |node#0@@6|)) (ite (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@6|)))) (|lambda#362| (LitInt 0) (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@6|))))))) (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@6|)))))) ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@6|)))) (|ISet#Empty| BoxType))))) :qid |Graphidf.39:23| :weight 3 :skolemid |3960| :pattern ( (PivotBetreeGraph.__default.Successors (Lit |node#0@@6|))) ))))
(assert (= (type PivotBetreeGraph.__default.Root) BoxType))
(assert  (=> true (=> true ($IsBox PivotBetreeGraph.__default.Root Tclass.ReferenceType.Reference))))
(assert  (=> |PivotBetreeGraph.__default.Root#requires| true))
(assert  (=> true |PivotBetreeGraph.__default.Root#requires|))
(assert  (=> true (=> true (and |ReferenceType.__default.Root#canCall| (= PivotBetreeGraph.__default.Root ReferenceType.__default.Root)))))
(assert  (=> true (=> true (and |ReferenceType.__default.Root#canCall| (= PivotBetreeGraph.__default.Root ReferenceType.__default.Root)))))
(assert  (=> true (forall ((|g#0@@62| T@U) ) (!  (=> (and (= (type |g#0@@62|) (IMapType BoxType BoxType)) (or (|PivotBetreeGraph.__default.IsClosed#canCall| |g#0@@62|) ($Is |g#0@@62| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)))) true) :qid |Graphidf.56:22| :skolemid |3961| :pattern ( (PivotBetreeGraph.__default.IsClosed |g#0@@62|)) ))))
(assert (forall ((|g#0@@63| T@U) ) (!  (=> (and (= (type |g#0@@63|) (IMapType BoxType BoxType)) ($Is |g#0@@63| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) (and (=> (|PivotBetreeGraph.__default.IsClosed#requires| |g#0@@63|) true) (=> true (|PivotBetreeGraph.__default.IsClosed#requires| |g#0@@63|)))) :qid |Graphidf.56:22| :skolemid |3962| :pattern ( (|PivotBetreeGraph.__default.IsClosed#requires| |g#0@@63|)) )))
(assert  (=> true (forall ((|g#0@@64| T@U) ) (!  (=> (and (= (type |g#0@@64|) (IMapType BoxType BoxType)) (or (|PivotBetreeGraph.__default.IsClosed#canCall| |g#0@@64|) ($Is |g#0@@64| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)))) (and (forall ((|ref#0@@6| T@U) ) (!  (=> (and (and (= (type |ref#0@@6|) BoxType) ($IsBox |ref#0@@6| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@64|) |ref#0@@6|))) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@64|) |ref#0@@6|)))) :qid |Graphidf.57:12| :skolemid |3963| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@64|) |ref#0@@6|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@64|) |ref#0@@6|)) )) (and (=> (PivotBetreeGraph.__default.IsClosed |g#0@@64|) (forall ((|ref#0@@7| T@U) ) (!  (=> (and (and (= (type |ref#0@@7|) BoxType) ($IsBox |ref#0@@7| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@64|) |ref#0@@7|))) (|ISet#Subset| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@64|) |ref#0@@7|))) (|IMap#Domain| |g#0@@64|))) :qid |Graphidf.57:12| :skolemid |3964| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@64|) |ref#0@@7|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@64|) |ref#0@@7|)) ))) (=> (forall ((|ref#0@@8| T@U) ) (!  (=> (and (and (= (type |ref#0@@8|) BoxType) ($IsBox |ref#0@@8| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@64|) |ref#0@@8|))) (|ISet#Subset| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@64|) |ref#0@@8|))) (|IMap#Domain| |g#0@@64|))) :qid |Graphidf.57:12| :skolemid |3964| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@64|) |ref#0@@8|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@64|) |ref#0@@8|)) )) (PivotBetreeGraph.__default.IsClosed |g#0@@64|))))) :qid |Graphidf.56:22| :skolemid |3965| :pattern ( (PivotBetreeGraph.__default.IsClosed |g#0@@64|)) ))))
(assert  (=> true (forall ((|g#0@@65| T@U) ) (!  (=> (and (= (type |g#0@@65|) (IMapType BoxType BoxType)) (or (|PivotBetreeGraph.__default.IsClosed#canCall| (Lit |g#0@@65|)) ($Is |g#0@@65| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)))) (and (forall ((|ref#1@@6| T@U) ) (!  (=> (and (and (= (type |ref#1@@6|) BoxType) ($IsBox |ref#1@@6| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@65|) |ref#1@@6|))) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@65|)) |ref#1@@6|)))) :qid |Graphidf.57:12| :skolemid |3966| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@65|) |ref#1@@6|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@65|) |ref#1@@6|)) )) (and (=> (PivotBetreeGraph.__default.IsClosed (Lit |g#0@@65|)) (forall ((|ref#1@@7| T@U) ) (!  (=> (and (and (= (type |ref#1@@7|) BoxType) ($IsBox |ref#1@@7| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@65|) |ref#1@@7|))) (|ISet#Subset| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@65|)) |ref#1@@7|))) (|IMap#Domain| (Lit |g#0@@65|)))) :qid |Graphidf.57:12| :skolemid |3967| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@65|) |ref#1@@7|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@65|) |ref#1@@7|)) ))) (=> (forall ((|ref#1@@8| T@U) ) (!  (=> (and (and (= (type |ref#1@@8|) BoxType) ($IsBox |ref#1@@8| Tclass.ReferenceType.Reference)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@65|) |ref#1@@8|))) (|ISet#Subset| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@65|)) |ref#1@@8|))) (|IMap#Domain| (Lit |g#0@@65|)))) :qid |Graphidf.57:12| :skolemid |3967| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@65|) |ref#1@@8|))) :pattern ( (MapType0Select (|IMap#Domain| |g#0@@65|) |ref#1@@8|)) )) (PivotBetreeGraph.__default.IsClosed (Lit |g#0@@65|)))))) :qid |Graphidf.56:22| :weight 3 :skolemid |3968| :pattern ( (PivotBetreeGraph.__default.IsClosed (Lit |g#0@@65|))) ))))
(assert  (=> true (forall ((|g#0@@66| T@U) (|path#0@@46| T@U) ) (!  (=> (and (and (= (type |g#0@@66|) (IMapType BoxType BoxType)) (= (type |path#0@@46|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@66| |path#0@@46|) (and ($Is |g#0@@66| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@46| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |Graphidf.60:20| :skolemid |3969| :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@66| |path#0@@46|)) ))))
(assert (forall ((|g#0@@67| T@U) (|path#0@@47| T@U) ) (!  (=> (and (and (= (type |g#0@@67|) (IMapType BoxType BoxType)) (= (type |path#0@@47|) (SeqType BoxType))) (and ($Is |g#0@@67| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@47| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|PivotBetreeGraph.__default.IsPath#requires| |g#0@@67| |path#0@@47|) true) (=> true (|PivotBetreeGraph.__default.IsPath#requires| |g#0@@67| |path#0@@47|)))) :qid |Graphidf.60:20| :skolemid |3970| :pattern ( (|PivotBetreeGraph.__default.IsPath#requires| |g#0@@67| |path#0@@47|)) )))
(assert  (=> true (forall ((|g#0@@68| T@U) (|path#0@@48| T@U) ) (!  (=> (and (and (= (type |g#0@@68|) (IMapType BoxType BoxType)) (= (type |path#0@@48|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@68| |path#0@@48|) (and ($Is |g#0@@68| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@48| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (forall ((|i#0@@172| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@172|) (< |i#0@@172| (- (|Seq#Length| |path#0@@48|) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@68|) (|Seq#Index| |path#0@@48| |i#0@@172|))))) :qid |Graphidf.61:12| :skolemid |3972| :pattern ( (|Seq#Index| |path#0@@48| |i#0@@172|)) )) (forall ((|i#1@@84| Int) (|_t#0#0@@2| Int) ) (!  (=> (= |_t#0#0@@2| (+ |i#1@@84| 1)) (=> (< |i#1@@84| (- (|Seq#Length| |path#0@@48|) 1)) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@68|) (|Seq#Index| |path#0@@48| |i#1@@84|)))))) :qid |Graphidf.61:12| :skolemid |3971| :pattern ( (|Seq#Index| |path#0@@48| |i#1@@84|) (|Seq#Index| |path#0@@48| |_t#0#0@@2|)) ))) (and (=> (PivotBetreeGraph.__default.IsPath |g#0@@68| |path#0@@48|) (and (forall ((|i#0@@173| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@173|) (< |i#0@@173| (- (|Seq#Length| |path#0@@48|) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@68|) (|Seq#Index| |path#0@@48| |i#0@@173|))))) :qid |Graphidf.61:12| :skolemid |3973| :pattern ( (|Seq#Index| |path#0@@48| |i#0@@173|)) )) (forall ((|i#1@@85| Int) (|_t#0#0@@3| Int) ) (!  (=> (= |_t#0#0@@3| (+ |i#1@@85| 1)) (=> (and (<= (LitInt 0) |i#1@@85|) (< |i#1@@85| (- (|Seq#Length| |path#0@@48|) 1))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@68|) (|Seq#Index| |path#0@@48| |i#1@@85|)))) (|Seq#Index| |path#0@@48| |_t#0#0@@3|))))) :qid |Graphidf.61:12| :skolemid |3974| :pattern ( (|Seq#Index| |path#0@@48| |i#1@@85|) (|Seq#Index| |path#0@@48| |_t#0#0@@3|)) )))) (=> (and (forall ((|i#0@@174| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@174|) (< |i#0@@174| (- (|Seq#Length| |path#0@@48|) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@68|) (|Seq#Index| |path#0@@48| |i#0@@174|))))) :qid |Graphidf.61:12| :skolemid |3973| :pattern ( (|Seq#Index| |path#0@@48| |i#0@@174|)) )) (forall ((|i#1@@86| Int) (|_t#0#0@@4| Int) ) (!  (=> (= |_t#0#0@@4| (+ |i#1@@86| 1)) (=> (and (<= (LitInt 0) |i#1@@86|) (< |i#1@@86| (- (|Seq#Length| |path#0@@48|) 1))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@68|) (|Seq#Index| |path#0@@48| |i#1@@86|)))) (|Seq#Index| |path#0@@48| |_t#0#0@@4|))))) :qid |Graphidf.61:12| :skolemid |3974| :pattern ( (|Seq#Index| |path#0@@48| |i#1@@86|) (|Seq#Index| |path#0@@48| |_t#0#0@@4|)) ))) (PivotBetreeGraph.__default.IsPath |g#0@@68| |path#0@@48|))))) :qid |Graphidf.60:20| :skolemid |3975| :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@68| |path#0@@48|)) ))))
(assert  (=> true (forall ((|g#0@@69| T@U) (|path#0@@49| T@U) ) (!  (=> (and (and (= (type |g#0@@69|) (IMapType BoxType BoxType)) (= (type |path#0@@49|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@69| (Lit |path#0@@49|)) (and ($Is |g#0@@69| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@49| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (forall ((|i#2@@35| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@35|) (< |i#2@@35| (- (|Seq#Length| (Lit |path#0@@49|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@69|) (|Seq#Index| (Lit |path#0@@49|) |i#2@@35|))))) :qid |Graphidf.61:12| :skolemid |3977| :pattern ( (|Seq#Index| |path#0@@49| |i#2@@35|)) )) (forall ((|i#3@@22| Int) (|_t#0#1@@2| Int) ) (!  (=> (= |_t#0#1@@2| (+ |i#3@@22| 1)) (=> (< |i#3@@22| (- (|Seq#Length| (Lit |path#0@@49|)) 1)) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@69|) (|Seq#Index| (Lit |path#0@@49|) |i#3@@22|)))))) :qid |Graphidf.61:12| :skolemid |3976| :pattern ( (|Seq#Index| |path#0@@49| |i#3@@22|) (|Seq#Index| |path#0@@49| |_t#0#1@@2|)) ))) (and (=> (PivotBetreeGraph.__default.IsPath |g#0@@69| (Lit |path#0@@49|)) (and (forall ((|i#2@@36| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@36|) (< |i#2@@36| (- (|Seq#Length| (Lit |path#0@@49|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@69|) (|Seq#Index| (Lit |path#0@@49|) |i#2@@36|))))) :qid |Graphidf.61:12| :skolemid |3978| :pattern ( (|Seq#Index| |path#0@@49| |i#2@@36|)) )) (forall ((|i#3@@23| Int) (|_t#0#1@@3| Int) ) (!  (=> (= |_t#0#1@@3| (+ |i#3@@23| 1)) (=> (and (<= (LitInt 0) |i#3@@23|) (< |i#3@@23| (- (|Seq#Length| (Lit |path#0@@49|)) 1))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@69|) (|Seq#Index| (Lit |path#0@@49|) |i#3@@23|)))) (|Seq#Index| (Lit |path#0@@49|) |_t#0#1@@3|))))) :qid |Graphidf.61:12| :skolemid |3979| :pattern ( (|Seq#Index| |path#0@@49| |i#3@@23|) (|Seq#Index| |path#0@@49| |_t#0#1@@3|)) )))) (=> (and (forall ((|i#2@@37| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@37|) (< |i#2@@37| (- (|Seq#Length| (Lit |path#0@@49|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@69|) (|Seq#Index| (Lit |path#0@@49|) |i#2@@37|))))) :qid |Graphidf.61:12| :skolemid |3978| :pattern ( (|Seq#Index| |path#0@@49| |i#2@@37|)) )) (forall ((|i#3@@24| Int) (|_t#0#1@@4| Int) ) (!  (=> (= |_t#0#1@@4| (+ |i#3@@24| 1)) (=> (and (<= (LitInt 0) |i#3@@24|) (< |i#3@@24| (- (|Seq#Length| (Lit |path#0@@49|)) 1))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@69|) (|Seq#Index| (Lit |path#0@@49|) |i#3@@24|)))) (|Seq#Index| (Lit |path#0@@49|) |_t#0#1@@4|))))) :qid |Graphidf.61:12| :skolemid |3979| :pattern ( (|Seq#Index| |path#0@@49| |i#3@@24|) (|Seq#Index| |path#0@@49| |_t#0#1@@4|)) ))) (PivotBetreeGraph.__default.IsPath |g#0@@69| (Lit |path#0@@49|)))))) :qid |Graphidf.60:20| :weight 3 :skolemid |3980| :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@69| (Lit |path#0@@49|))) ))))
(assert  (=> true (forall ((|g#0@@70| T@U) (|path#0@@50| T@U) ) (!  (=> (and (and (= (type |g#0@@70|) (IMapType BoxType BoxType)) (= (type |path#0@@50|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsPath#canCall| (Lit |g#0@@70|) (Lit |path#0@@50|)) (and ($Is |g#0@@70| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@50| (TSeq Tclass.ReferenceType.Reference))))) (and (=> (forall ((|i#4@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@7|) (< |i#4@@7| (- (|Seq#Length| (Lit |path#0@@50|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@70|) (|Seq#Index| (Lit |path#0@@50|) |i#4@@7|))))) :qid |Graphidf.61:12| :skolemid |3982| :pattern ( (|Seq#Index| |path#0@@50| |i#4@@7|)) )) (forall ((|i#5@@7| Int) (|_t#0#2@@2| Int) ) (!  (=> (= |_t#0#2@@2| (+ |i#5@@7| 1)) (=> (< |i#5@@7| (- (|Seq#Length| (Lit |path#0@@50|)) 1)) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@70|)) (|Seq#Index| (Lit |path#0@@50|) |i#5@@7|)))))) :qid |Graphidf.61:12| :skolemid |3981| :pattern ( (|Seq#Index| |path#0@@50| |i#5@@7|) (|Seq#Index| |path#0@@50| |_t#0#2@@2|)) ))) (and (=> (PivotBetreeGraph.__default.IsPath (Lit |g#0@@70|) (Lit |path#0@@50|)) (and (forall ((|i#4@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@8|) (< |i#4@@8| (- (|Seq#Length| (Lit |path#0@@50|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@70|) (|Seq#Index| (Lit |path#0@@50|) |i#4@@8|))))) :qid |Graphidf.61:12| :skolemid |3983| :pattern ( (|Seq#Index| |path#0@@50| |i#4@@8|)) )) (forall ((|i#5@@8| Int) (|_t#0#2@@3| Int) ) (!  (=> (= |_t#0#2@@3| (+ |i#5@@8| 1)) (=> (and (<= (LitInt 0) |i#5@@8|) (< |i#5@@8| (- (|Seq#Length| (Lit |path#0@@50|)) 1))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@70|)) (|Seq#Index| (Lit |path#0@@50|) |i#5@@8|)))) (|Seq#Index| (Lit |path#0@@50|) |_t#0#2@@3|))))) :qid |Graphidf.61:12| :skolemid |3984| :pattern ( (|Seq#Index| |path#0@@50| |i#5@@8|) (|Seq#Index| |path#0@@50| |_t#0#2@@3|)) )))) (=> (and (forall ((|i#4@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@9|) (< |i#4@@9| (- (|Seq#Length| (Lit |path#0@@50|)) 1))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@70|) (|Seq#Index| (Lit |path#0@@50|) |i#4@@9|))))) :qid |Graphidf.61:12| :skolemid |3983| :pattern ( (|Seq#Index| |path#0@@50| |i#4@@9|)) )) (forall ((|i#5@@9| Int) (|_t#0#2@@4| Int) ) (!  (=> (= |_t#0#2@@4| (+ |i#5@@9| 1)) (=> (and (<= (LitInt 0) |i#5@@9|) (< |i#5@@9| (- (|Seq#Length| (Lit |path#0@@50|)) 1))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@70|)) (|Seq#Index| (Lit |path#0@@50|) |i#5@@9|)))) (|Seq#Index| (Lit |path#0@@50|) |_t#0#2@@4|))))) :qid |Graphidf.61:12| :skolemid |3984| :pattern ( (|Seq#Index| |path#0@@50| |i#5@@9|) (|Seq#Index| |path#0@@50| |_t#0#2@@4|)) ))) (PivotBetreeGraph.__default.IsPath (Lit |g#0@@70|) (Lit |path#0@@50|)))))) :qid |Graphidf.60:20| :weight 3 :skolemid |3985| :pattern ( (PivotBetreeGraph.__default.IsPath (Lit |g#0@@70|) (Lit |path#0@@50|))) ))))
(assert  (=> true (forall ((|g#0@@71| T@U) (|path#0@@51| T@U) ) (!  (=> (and (and (= (type |g#0@@71|) (IMapType BoxType BoxType)) (= (type |path#0@@51|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsCycle#canCall| |g#0@@71| |path#0@@51|) (and ($Is |g#0@@71| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@51| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |Graphidf.64:21| :skolemid |3986| :pattern ( (PivotBetreeGraph.__default.IsCycle |g#0@@71| |path#0@@51|)) ))))
(assert (forall ((|g#0@@72| T@U) (|path#0@@52| T@U) ) (!  (=> (and (and (= (type |g#0@@72|) (IMapType BoxType BoxType)) (= (type |path#0@@52|) (SeqType BoxType))) (and ($Is |g#0@@72| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@52| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|PivotBetreeGraph.__default.IsCycle#requires| |g#0@@72| |path#0@@52|) true) (=> true (|PivotBetreeGraph.__default.IsCycle#requires| |g#0@@72| |path#0@@52|)))) :qid |Graphidf.64:21| :skolemid |3987| :pattern ( (|PivotBetreeGraph.__default.IsCycle#requires| |g#0@@72| |path#0@@52|)) )))
(assert  (=> true (forall ((|g#0@@73| T@U) (|path#0@@53| T@U) ) (!  (=> (and (and (= (type |g#0@@73|) (IMapType BoxType BoxType)) (= (type |path#0@@53|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsCycle#canCall| |g#0@@73| |path#0@@53|) (and ($Is |g#0@@73| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@53| (TSeq Tclass.ReferenceType.Reference))))) (and (and (and (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@73| |path#0@@53|) (=> (< 0 (|Seq#Length| |path#0@@53|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@53|))) (=> (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@53|) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@73|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@53|)))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@53|) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@73|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@53|))))))) (and (=> (PivotBetreeGraph.__default.IsCycle |g#0@@73| |path#0@@53|) (and (and (and (PivotBetreeGraph.__default.IsPath |g#0@@73| |path#0@@53|) (< 0 (|Seq#Length| |path#0@@53|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@73|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@53|)))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@73|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@53|)))) (|Seq#Index| |path#0@@53| (LitInt 0)))))) (=> (and (and (and (PivotBetreeGraph.__default.IsPath |g#0@@73| |path#0@@53|) (< 0 (|Seq#Length| |path#0@@53|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@73|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@53|)))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@73|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@53|)))) (|Seq#Index| |path#0@@53| (LitInt 0))))) (PivotBetreeGraph.__default.IsCycle |g#0@@73| |path#0@@53|))))) :qid |Graphidf.64:21| :skolemid |3988| :pattern ( (PivotBetreeGraph.__default.IsCycle |g#0@@73| |path#0@@53|)) ))))
(assert  (=> true (forall ((|g#0@@74| T@U) (|path#0@@54| T@U) ) (!  (=> (and (and (= (type |g#0@@74|) (IMapType BoxType BoxType)) (= (type |path#0@@54|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsCycle#canCall| |g#0@@74| (Lit |path#0@@54|)) (and ($Is |g#0@@74| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@54| (TSeq Tclass.ReferenceType.Reference))))) (and (and (and (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@74| (Lit |path#0@@54|)) (=> (< 0 (|Seq#Length| (Lit |path#0@@54|))) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@54|)))) (=> (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@54|)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@74|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@54|))))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@54|)) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@74|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@54|))))))))) (and (=> (PivotBetreeGraph.__default.IsCycle |g#0@@74| (Lit |path#0@@54|)) (and (and (and (PivotBetreeGraph.__default.IsPath |g#0@@74| (Lit |path#0@@54|)) (< 0 (|Seq#Length| (Lit |path#0@@54|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@74|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@54|))))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@74|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@54|)))))) (|Seq#Index| (Lit |path#0@@54|) (LitInt 0)))))) (=> (and (and (and (PivotBetreeGraph.__default.IsPath |g#0@@74| (Lit |path#0@@54|)) (< 0 (|Seq#Length| (Lit |path#0@@54|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@74|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@54|))))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@74|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@54|)))))) (|Seq#Index| (Lit |path#0@@54|) (LitInt 0))))) (PivotBetreeGraph.__default.IsCycle |g#0@@74| (Lit |path#0@@54|)))))) :qid |Graphidf.64:21| :weight 3 :skolemid |3989| :pattern ( (PivotBetreeGraph.__default.IsCycle |g#0@@74| (Lit |path#0@@54|))) ))))
(assert  (=> true (forall ((|g#0@@75| T@U) (|path#0@@55| T@U) ) (!  (=> (and (and (= (type |g#0@@75|) (IMapType BoxType BoxType)) (= (type |path#0@@55|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsCycle#canCall| (Lit |g#0@@75|) (Lit |path#0@@55|)) (and ($Is |g#0@@75| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@55| (TSeq Tclass.ReferenceType.Reference))))) (and (and (and (|PivotBetreeGraph.__default.IsPath#canCall| (Lit |g#0@@75|) (Lit |path#0@@55|)) (=> (< 0 (|Seq#Length| (Lit |path#0@@55|))) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@55|)))) (=> (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@55|)) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@75|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@55|))))) (and (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@55|)) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@75|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@55|))))))))) (and (=> (PivotBetreeGraph.__default.IsCycle (Lit |g#0@@75|) (Lit |path#0@@55|)) (and (and (and (PivotBetreeGraph.__default.IsPath (Lit |g#0@@75|) (Lit |path#0@@55|)) (< 0 (|Seq#Length| (Lit |path#0@@55|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@75|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@55|))))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@75|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@55|)))))) (|Seq#Index| (Lit |path#0@@55|) (LitInt 0)))))) (=> (and (and (and (PivotBetreeGraph.__default.IsPath (Lit |g#0@@75|) (Lit |path#0@@55|)) (< 0 (|Seq#Length| (Lit |path#0@@55|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@75|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@55|))))) (U_2_bool (MapType0Select (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@75|)) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@55|)))))) (|Seq#Index| (Lit |path#0@@55|) (LitInt 0))))) (PivotBetreeGraph.__default.IsCycle (Lit |g#0@@75|) (Lit |path#0@@55|)))))) :qid |Graphidf.64:21| :weight 3 :skolemid |3990| :pattern ( (PivotBetreeGraph.__default.IsCycle (Lit |g#0@@75|) (Lit |path#0@@55|))) ))))
(assert  (=> true (forall ((|g#0@@76| T@U) (|path#0@@56| T@U) ) (!  (=> (and (and (= (type |g#0@@76|) (IMapType BoxType BoxType)) (= (type |path#0@@56|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsSimple#canCall| |g#0@@76| |path#0@@56|) (and ($Is |g#0@@76| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@56| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |Graphidf.71:22| :skolemid |3991| :pattern ( (PivotBetreeGraph.__default.IsSimple |g#0@@76| |path#0@@56|)) ))))
(assert (forall ((|g#0@@77| T@U) (|path#0@@57| T@U) ) (!  (=> (and (and (= (type |g#0@@77|) (IMapType BoxType BoxType)) (= (type |path#0@@57|) (SeqType BoxType))) (and ($Is |g#0@@77| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@57| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|PivotBetreeGraph.__default.IsSimple#requires| |g#0@@77| |path#0@@57|) true) (=> true (|PivotBetreeGraph.__default.IsSimple#requires| |g#0@@77| |path#0@@57|)))) :qid |Graphidf.71:22| :skolemid |3992| :pattern ( (|PivotBetreeGraph.__default.IsSimple#requires| |g#0@@77| |path#0@@57|)) )))
(assert  (=> true (forall ((|g#0@@78| T@U) (|path#0@@58| T@U) ) (!  (=> (and (and (= (type |g#0@@78|) (IMapType BoxType BoxType)) (= (type |path#0@@58|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsSimple#canCall| |g#0@@78| |path#0@@58|) (and ($Is |g#0@@78| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@58| (TSeq Tclass.ReferenceType.Reference))))) (and (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@78| |path#0@@58|) (and (=> (PivotBetreeGraph.__default.IsSimple |g#0@@78| |path#0@@58|) (and (PivotBetreeGraph.__default.IsPath |g#0@@78| |path#0@@58|) (forall ((|i#0@@175| Int) (|j#0@@31| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@175|) (< |i#0@@175| (|Seq#Length| |path#0@@58|))) (and (<= (LitInt 0) |j#0@@31|) (< |j#0@@31| (|Seq#Length| |path#0@@58|)))) (not (= |i#0@@175| |j#0@@31|))) (not (= (|Seq#Index| |path#0@@58| |i#0@@175|) (|Seq#Index| |path#0@@58| |j#0@@31|))))) :qid |Graphidf.73:16| :skolemid |3993| :pattern ( (|Seq#Index| |path#0@@58| |j#0@@31|) (|Seq#Index| |path#0@@58| |i#0@@175|)) )))) (=> (and (PivotBetreeGraph.__default.IsPath |g#0@@78| |path#0@@58|) (forall ((|i#0@@176| Int) (|j#0@@32| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@176|) (< |i#0@@176| (|Seq#Length| |path#0@@58|))) (and (<= (LitInt 0) |j#0@@32|) (< |j#0@@32| (|Seq#Length| |path#0@@58|)))) (not (= |i#0@@176| |j#0@@32|))) (not (= (|Seq#Index| |path#0@@58| |i#0@@176|) (|Seq#Index| |path#0@@58| |j#0@@32|))))) :qid |Graphidf.73:16| :skolemid |3993| :pattern ( (|Seq#Index| |path#0@@58| |j#0@@32|) (|Seq#Index| |path#0@@58| |i#0@@176|)) ))) (PivotBetreeGraph.__default.IsSimple |g#0@@78| |path#0@@58|))))) :qid |Graphidf.71:22| :skolemid |3994| :pattern ( (PivotBetreeGraph.__default.IsSimple |g#0@@78| |path#0@@58|)) ))))
(assert  (=> true (forall ((|g#0@@79| T@U) (|path#0@@59| T@U) ) (!  (=> (and (and (= (type |g#0@@79|) (IMapType BoxType BoxType)) (= (type |path#0@@59|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsSimple#canCall| |g#0@@79| (Lit |path#0@@59|)) (and ($Is |g#0@@79| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@59| (TSeq Tclass.ReferenceType.Reference))))) (and (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@79| (Lit |path#0@@59|)) (and (=> (PivotBetreeGraph.__default.IsSimple |g#0@@79| (Lit |path#0@@59|)) (and (PivotBetreeGraph.__default.IsPath |g#0@@79| (Lit |path#0@@59|)) (forall ((|i#1@@87| Int) (|j#1@@21| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@87|) (< |i#1@@87| (|Seq#Length| (Lit |path#0@@59|)))) (and (<= (LitInt 0) |j#1@@21|) (< |j#1@@21| (|Seq#Length| (Lit |path#0@@59|))))) (not (= |i#1@@87| |j#1@@21|))) (not (= (|Seq#Index| (Lit |path#0@@59|) |i#1@@87|) (|Seq#Index| (Lit |path#0@@59|) |j#1@@21|))))) :qid |Graphidf.73:16| :skolemid |3995| :pattern ( (|Seq#Index| |path#0@@59| |j#1@@21|) (|Seq#Index| |path#0@@59| |i#1@@87|)) )))) (=> (and (PivotBetreeGraph.__default.IsPath |g#0@@79| (Lit |path#0@@59|)) (forall ((|i#1@@88| Int) (|j#1@@22| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@88|) (< |i#1@@88| (|Seq#Length| (Lit |path#0@@59|)))) (and (<= (LitInt 0) |j#1@@22|) (< |j#1@@22| (|Seq#Length| (Lit |path#0@@59|))))) (not (= |i#1@@88| |j#1@@22|))) (not (= (|Seq#Index| (Lit |path#0@@59|) |i#1@@88|) (|Seq#Index| (Lit |path#0@@59|) |j#1@@22|))))) :qid |Graphidf.73:16| :skolemid |3995| :pattern ( (|Seq#Index| |path#0@@59| |j#1@@22|) (|Seq#Index| |path#0@@59| |i#1@@88|)) ))) (PivotBetreeGraph.__default.IsSimple |g#0@@79| (Lit |path#0@@59|)))))) :qid |Graphidf.71:22| :weight 3 :skolemid |3996| :pattern ( (PivotBetreeGraph.__default.IsSimple |g#0@@79| (Lit |path#0@@59|))) ))))
(assert  (=> true (forall ((|g#0@@80| T@U) (|path#0@@60| T@U) ) (!  (=> (and (and (= (type |g#0@@80|) (IMapType BoxType BoxType)) (= (type |path#0@@60|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.IsSimple#canCall| (Lit |g#0@@80|) (Lit |path#0@@60|)) (and ($Is |g#0@@80| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@60| (TSeq Tclass.ReferenceType.Reference))))) (and (|PivotBetreeGraph.__default.IsPath#canCall| (Lit |g#0@@80|) (Lit |path#0@@60|)) (and (=> (PivotBetreeGraph.__default.IsSimple (Lit |g#0@@80|) (Lit |path#0@@60|)) (and (PivotBetreeGraph.__default.IsPath (Lit |g#0@@80|) (Lit |path#0@@60|)) (forall ((|i#2@@38| Int) (|j#2@@2| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#2@@38|) (< |i#2@@38| (|Seq#Length| (Lit |path#0@@60|)))) (and (<= (LitInt 0) |j#2@@2|) (< |j#2@@2| (|Seq#Length| (Lit |path#0@@60|))))) (not (= |i#2@@38| |j#2@@2|))) (not (= (|Seq#Index| (Lit |path#0@@60|) |i#2@@38|) (|Seq#Index| (Lit |path#0@@60|) |j#2@@2|))))) :qid |Graphidf.73:16| :skolemid |3997| :pattern ( (|Seq#Index| |path#0@@60| |j#2@@2|) (|Seq#Index| |path#0@@60| |i#2@@38|)) )))) (=> (and (PivotBetreeGraph.__default.IsPath (Lit |g#0@@80|) (Lit |path#0@@60|)) (forall ((|i#2@@39| Int) (|j#2@@3| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#2@@39|) (< |i#2@@39| (|Seq#Length| (Lit |path#0@@60|)))) (and (<= (LitInt 0) |j#2@@3|) (< |j#2@@3| (|Seq#Length| (Lit |path#0@@60|))))) (not (= |i#2@@39| |j#2@@3|))) (not (= (|Seq#Index| (Lit |path#0@@60|) |i#2@@39|) (|Seq#Index| (Lit |path#0@@60|) |j#2@@3|))))) :qid |Graphidf.73:16| :skolemid |3997| :pattern ( (|Seq#Index| |path#0@@60| |j#2@@3|) (|Seq#Index| |path#0@@60| |i#2@@39|)) ))) (PivotBetreeGraph.__default.IsSimple (Lit |g#0@@80|) (Lit |path#0@@60|)))))) :qid |Graphidf.71:22| :weight 3 :skolemid |3998| :pattern ( (PivotBetreeGraph.__default.IsSimple (Lit |g#0@@80|) (Lit |path#0@@60|))) ))))
(assert  (=> true (forall ((|g#0@@81| T@U) ) (!  (=> (and (= (type |g#0@@81|) (IMapType BoxType BoxType)) (or (|PivotBetreeGraph.__default.IsAcyclic#canCall| |g#0@@81|) ($Is |g#0@@81| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)))) true) :qid |Graphidf.76:23| :skolemid |3999| :pattern ( (PivotBetreeGraph.__default.IsAcyclic |g#0@@81|)) ))))
(assert (forall ((|g#0@@82| T@U) ) (!  (=> (and (= (type |g#0@@82|) (IMapType BoxType BoxType)) ($Is |g#0@@82| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) (and (=> (|PivotBetreeGraph.__default.IsAcyclic#requires| |g#0@@82|) true) (=> true (|PivotBetreeGraph.__default.IsAcyclic#requires| |g#0@@82|)))) :qid |Graphidf.76:23| :skolemid |4000| :pattern ( (|PivotBetreeGraph.__default.IsAcyclic#requires| |g#0@@82|)) )))
(assert  (=> true (forall ((|g#0@@83| T@U) ) (!  (=> (and (= (type |g#0@@83|) (IMapType BoxType BoxType)) (or (|PivotBetreeGraph.__default.IsAcyclic#canCall| |g#0@@83|) ($Is |g#0@@83| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)))) (and (forall ((|path#0@@61| T@U) ) (!  (=> (and (= (type |path#0@@61|) (SeqType BoxType)) ($Is |path#0@@61| (TSeq Tclass.ReferenceType.Reference))) (and (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@83| |path#0@@61|) (=> (PivotBetreeGraph.__default.IsPath |g#0@@83| |path#0@@61|) (|PivotBetreeGraph.__default.IsCycle#canCall| |g#0@@83| |path#0@@61|)))) :qid |Graphidf.77:12| :skolemid |4001| :pattern ( (PivotBetreeGraph.__default.IsCycle |g#0@@83| |path#0@@61|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@83| |path#0@@61|)) )) (and (=> (PivotBetreeGraph.__default.IsAcyclic |g#0@@83|) (forall ((|path#0@@62| T@U) ) (!  (=> (and (and (= (type |path#0@@62|) (SeqType BoxType)) ($Is |path#0@@62| (TSeq Tclass.ReferenceType.Reference))) (PivotBetreeGraph.__default.IsPath |g#0@@83| |path#0@@62|)) (not (PivotBetreeGraph.__default.IsCycle |g#0@@83| |path#0@@62|))) :qid |Graphidf.77:12| :skolemid |4002| :pattern ( (PivotBetreeGraph.__default.IsCycle |g#0@@83| |path#0@@62|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@83| |path#0@@62|)) ))) (=> (forall ((|path#0@@63| T@U) ) (!  (=> (and (and (= (type |path#0@@63|) (SeqType BoxType)) ($Is |path#0@@63| (TSeq Tclass.ReferenceType.Reference))) (PivotBetreeGraph.__default.IsPath |g#0@@83| |path#0@@63|)) (not (PivotBetreeGraph.__default.IsCycle |g#0@@83| |path#0@@63|))) :qid |Graphidf.77:12| :skolemid |4002| :pattern ( (PivotBetreeGraph.__default.IsCycle |g#0@@83| |path#0@@63|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@83| |path#0@@63|)) )) (PivotBetreeGraph.__default.IsAcyclic |g#0@@83|))))) :qid |Graphidf.76:23| :skolemid |4003| :pattern ( (PivotBetreeGraph.__default.IsAcyclic |g#0@@83|)) ))))
(assert  (=> true (forall ((|g#0@@84| T@U) ) (!  (=> (and (= (type |g#0@@84|) (IMapType BoxType BoxType)) (or (|PivotBetreeGraph.__default.IsAcyclic#canCall| (Lit |g#0@@84|)) ($Is |g#0@@84| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)))) (and (forall ((|path#1@@7| T@U) ) (!  (=> (and (= (type |path#1@@7|) (SeqType BoxType)) ($Is |path#1@@7| (TSeq Tclass.ReferenceType.Reference))) (and (|PivotBetreeGraph.__default.IsPath#canCall| (Lit |g#0@@84|) |path#1@@7|) (=> (PivotBetreeGraph.__default.IsPath (Lit |g#0@@84|) |path#1@@7|) (|PivotBetreeGraph.__default.IsCycle#canCall| (Lit |g#0@@84|) |path#1@@7|)))) :qid |Graphidf.77:12| :skolemid |4004| :pattern ( (PivotBetreeGraph.__default.IsCycle |g#0@@84| |path#1@@7|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@84| |path#1@@7|)) )) (and (=> (PivotBetreeGraph.__default.IsAcyclic (Lit |g#0@@84|)) (forall ((|path#1@@8| T@U) ) (!  (=> (and (and (= (type |path#1@@8|) (SeqType BoxType)) ($Is |path#1@@8| (TSeq Tclass.ReferenceType.Reference))) (PivotBetreeGraph.__default.IsPath (Lit |g#0@@84|) |path#1@@8|)) (not (PivotBetreeGraph.__default.IsCycle (Lit |g#0@@84|) |path#1@@8|))) :qid |Graphidf.77:12| :skolemid |4005| :pattern ( (PivotBetreeGraph.__default.IsCycle |g#0@@84| |path#1@@8|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@84| |path#1@@8|)) ))) (=> (forall ((|path#1@@9| T@U) ) (!  (=> (and (and (= (type |path#1@@9|) (SeqType BoxType)) ($Is |path#1@@9| (TSeq Tclass.ReferenceType.Reference))) (PivotBetreeGraph.__default.IsPath (Lit |g#0@@84|) |path#1@@9|)) (not (PivotBetreeGraph.__default.IsCycle (Lit |g#0@@84|) |path#1@@9|))) :qid |Graphidf.77:12| :skolemid |4005| :pattern ( (PivotBetreeGraph.__default.IsCycle |g#0@@84| |path#1@@9|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@84| |path#1@@9|)) )) (PivotBetreeGraph.__default.IsAcyclic (Lit |g#0@@84|)))))) :qid |Graphidf.76:23| :weight 3 :skolemid |4006| :pattern ( (PivotBetreeGraph.__default.IsAcyclic (Lit |g#0@@84|))) ))))
(assert  (=> true (forall ((|g#0@@85| T@U) (|path#0@@64| T@U) (|start#0@@33| T@U) (|end#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@85|) (IMapType BoxType BoxType)) (= (type |path#0@@64|) (SeqType BoxType))) (= (type |start#0@@33|) BoxType)) (= (type |end#0@@33|) BoxType)) (or (|PivotBetreeGraph.__default.IsPathFromTo#canCall| |g#0@@85| |path#0@@64| |start#0@@33| |end#0@@33|) (and (and (and ($Is |g#0@@85| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@64| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@33| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@33| Tclass.ReferenceType.Reference)))) true) :qid |Graphidf.92:26| :skolemid |4007| :pattern ( (PivotBetreeGraph.__default.IsPathFromTo |g#0@@85| |path#0@@64| |start#0@@33| |end#0@@33|)) ))))
(assert (forall ((|g#0@@86| T@U) (|path#0@@65| T@U) (|start#0@@34| T@U) (|end#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@86|) (IMapType BoxType BoxType)) (= (type |path#0@@65|) (SeqType BoxType))) (= (type |start#0@@34|) BoxType)) (= (type |end#0@@34|) BoxType)) (and (and (and ($Is |g#0@@86| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@65| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@34| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@34| Tclass.ReferenceType.Reference))) (and (=> (|PivotBetreeGraph.__default.IsPathFromTo#requires| |g#0@@86| |path#0@@65| |start#0@@34| |end#0@@34|) true) (=> true (|PivotBetreeGraph.__default.IsPathFromTo#requires| |g#0@@86| |path#0@@65| |start#0@@34| |end#0@@34|)))) :qid |Graphidf.92:26| :skolemid |4008| :pattern ( (|PivotBetreeGraph.__default.IsPathFromTo#requires| |g#0@@86| |path#0@@65| |start#0@@34| |end#0@@34|)) )))
(assert  (=> true (forall ((|g#0@@87| T@U) (|path#0@@66| T@U) (|start#0@@35| T@U) (|end#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@87|) (IMapType BoxType BoxType)) (= (type |path#0@@66|) (SeqType BoxType))) (= (type |start#0@@35|) BoxType)) (= (type |end#0@@35|) BoxType)) (or (|PivotBetreeGraph.__default.IsPathFromTo#canCall| |g#0@@87| |path#0@@66| |start#0@@35| |end#0@@35|) (and (and (and ($Is |g#0@@87| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@66| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@35| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@35| Tclass.ReferenceType.Reference)))) (and (and (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@87| |path#0@@66|) (=> (= (|Seq#Index| |path#0@@66| (LitInt 0)) |start#0@@35|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@66|))) (and (=> (PivotBetreeGraph.__default.IsPathFromTo |g#0@@87| |path#0@@66| |start#0@@35| |end#0@@35|) (and (and (and (PivotBetreeGraph.__default.IsPath |g#0@@87| |path#0@@66|) (< 1 (|Seq#Length| |path#0@@66|))) (= (|Seq#Index| |path#0@@66| (LitInt 0)) |start#0@@35|)) (= (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@66|) |end#0@@35|))) (=> (and (and (and (PivotBetreeGraph.__default.IsPath |g#0@@87| |path#0@@66|) (< 1 (|Seq#Length| |path#0@@66|))) (= (|Seq#Index| |path#0@@66| (LitInt 0)) |start#0@@35|)) (= (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@66|) |end#0@@35|)) (PivotBetreeGraph.__default.IsPathFromTo |g#0@@87| |path#0@@66| |start#0@@35| |end#0@@35|))))) :qid |Graphidf.92:26| :skolemid |4009| :pattern ( (PivotBetreeGraph.__default.IsPathFromTo |g#0@@87| |path#0@@66| |start#0@@35| |end#0@@35|)) ))))
(assert  (=> true (forall ((|g#0@@88| T@U) (|path#0@@67| T@U) (|start#0@@36| T@U) (|end#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@88|) (IMapType BoxType BoxType)) (= (type |path#0@@67|) (SeqType BoxType))) (= (type |start#0@@36|) BoxType)) (= (type |end#0@@36|) BoxType)) (or (|PivotBetreeGraph.__default.IsPathFromTo#canCall| |g#0@@88| (Lit |path#0@@67|) |start#0@@36| |end#0@@36|) (and (and (and ($Is |g#0@@88| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@67| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@36| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@36| Tclass.ReferenceType.Reference)))) (and (and (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@88| (Lit |path#0@@67|)) (=> (= (|Seq#Index| (Lit |path#0@@67|) (LitInt 0)) |start#0@@36|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@67|)))) (and (=> (PivotBetreeGraph.__default.IsPathFromTo |g#0@@88| (Lit |path#0@@67|) |start#0@@36| |end#0@@36|) (and (and (and (PivotBetreeGraph.__default.IsPath |g#0@@88| (Lit |path#0@@67|)) (< 1 (|Seq#Length| (Lit |path#0@@67|)))) (= (|Seq#Index| (Lit |path#0@@67|) (LitInt 0)) |start#0@@36|)) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@67|))) |end#0@@36|))) (=> (and (and (and (PivotBetreeGraph.__default.IsPath |g#0@@88| (Lit |path#0@@67|)) (< 1 (|Seq#Length| (Lit |path#0@@67|)))) (= (|Seq#Index| (Lit |path#0@@67|) (LitInt 0)) |start#0@@36|)) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@67|))) |end#0@@36|)) (PivotBetreeGraph.__default.IsPathFromTo |g#0@@88| (Lit |path#0@@67|) |start#0@@36| |end#0@@36|))))) :qid |Graphidf.92:26| :weight 3 :skolemid |4010| :pattern ( (PivotBetreeGraph.__default.IsPathFromTo |g#0@@88| (Lit |path#0@@67|) |start#0@@36| |end#0@@36|)) ))))
(assert  (=> true (forall ((|g#0@@89| T@U) (|path#0@@68| T@U) (|start#0@@37| T@U) (|end#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@89|) (IMapType BoxType BoxType)) (= (type |path#0@@68|) (SeqType BoxType))) (= (type |start#0@@37|) BoxType)) (= (type |end#0@@37|) BoxType)) (or (|PivotBetreeGraph.__default.IsPathFromTo#canCall| (Lit |g#0@@89|) (Lit |path#0@@68|) (Lit |start#0@@37|) (Lit |end#0@@37|)) (and (and (and ($Is |g#0@@89| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |path#0@@68| (TSeq Tclass.ReferenceType.Reference))) ($IsBox |start#0@@37| Tclass.ReferenceType.Reference)) ($IsBox |end#0@@37| Tclass.ReferenceType.Reference)))) (and (and (|PivotBetreeGraph.__default.IsPath#canCall| (Lit |g#0@@89|) (Lit |path#0@@68|)) (=> (= (|Seq#Index| (Lit |path#0@@68|) (LitInt 0)) (Lit |start#0@@37|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@68|)))) (and (=> (PivotBetreeGraph.__default.IsPathFromTo (Lit |g#0@@89|) (Lit |path#0@@68|) (Lit |start#0@@37|) (Lit |end#0@@37|)) (and (and (and (PivotBetreeGraph.__default.IsPath (Lit |g#0@@89|) (Lit |path#0@@68|)) (< 1 (|Seq#Length| (Lit |path#0@@68|)))) (= (|Seq#Index| (Lit |path#0@@68|) (LitInt 0)) (Lit |start#0@@37|))) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@68|))) (Lit |end#0@@37|)))) (=> (and (and (and (PivotBetreeGraph.__default.IsPath (Lit |g#0@@89|) (Lit |path#0@@68|)) (< 1 (|Seq#Length| (Lit |path#0@@68|)))) (= (|Seq#Index| (Lit |path#0@@68|) (LitInt 0)) (Lit |start#0@@37|))) (= (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@68|))) (Lit |end#0@@37|))) (PivotBetreeGraph.__default.IsPathFromTo (Lit |g#0@@89|) (Lit |path#0@@68|) (Lit |start#0@@37|) (Lit |end#0@@37|)))))) :qid |Graphidf.92:26| :weight 3 :skolemid |4011| :pattern ( (PivotBetreeGraph.__default.IsPathFromTo (Lit |g#0@@89|) (Lit |path#0@@68|) (Lit |start#0@@37|) (Lit |end#0@@37|))) ))))
(assert (forall ((arg0@@563 T@U) (arg1@@322 T@U) ) (! (= (type (PivotBetreeGraph.__default.ReachableReferences arg0@@563 arg1@@322)) (MapType0Type BoxType boolType)) :qid |funType:PivotBetreeGraph.__default.ReachableReferences| :pattern ( (PivotBetreeGraph.__default.ReachableReferences arg0@@563 arg1@@322)) )))
(assert  (=> true (forall ((|g#0@@90| T@U) (|p#0@@23| T@U) ) (!  (=> (and (and (= (type |g#0@@90|) (IMapType BoxType BoxType)) (= (type |p#0@@23|) BoxType)) (or (|PivotBetreeGraph.__default.ReachableReferences#canCall| |g#0@@90| |p#0@@23|) (and ($Is |g#0@@90| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($IsBox |p#0@@23| Tclass.ReferenceType.Reference)))) ($Is (PivotBetreeGraph.__default.ReachableReferences |g#0@@90| |p#0@@23|) (TISet Tclass.ReferenceType.Reference))) :qid |Graphidf.97:32| :skolemid |4012| :pattern ( (PivotBetreeGraph.__default.ReachableReferences |g#0@@90| |p#0@@23|)) ))))
(assert (forall ((|g#0@@91| T@U) (|p#0@@24| T@U) ) (!  (=> (and (and (= (type |g#0@@91|) (IMapType BoxType BoxType)) (= (type |p#0@@24|) BoxType)) (and ($Is |g#0@@91| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($IsBox |p#0@@24| Tclass.ReferenceType.Reference))) (and (=> (|PivotBetreeGraph.__default.ReachableReferences#requires| |g#0@@91| |p#0@@24|) true) (=> true (|PivotBetreeGraph.__default.ReachableReferences#requires| |g#0@@91| |p#0@@24|)))) :qid |Graphidf.97:32| :skolemid |4013| :pattern ( (|PivotBetreeGraph.__default.ReachableReferences#requires| |g#0@@91| |p#0@@24|)) )))
(assert (forall ((arg0@@564 T@U) (arg1@@323 T@U) (arg2@@223 Int) (arg3@@150 Int) (arg4@@115 T@U) (arg5@@75 T@U) (arg6@@55 T@U) (arg7@@39 Int) (arg8@@24 T@U) ) (! (= (type (|lambda#364| arg0@@564 arg1@@323 arg2@@223 arg3@@150 arg4@@115 arg5@@75 arg6@@55 arg7@@39 arg8@@24)) (MapType0Type BoxType boolType)) :qid |funType:lambda#364| :pattern ( (|lambda#364| arg0@@564 arg1@@323 arg2@@223 arg3@@150 arg4@@115 arg5@@75 arg6@@55 arg7@@39 arg8@@24)) )))
(assert  (=> true (forall ((|g#0@@92| T@U) (|p#0@@25| T@U) ) (!  (=> (and (and (= (type |g#0@@92|) (IMapType BoxType BoxType)) (= (type |p#0@@25|) BoxType)) (or (|PivotBetreeGraph.__default.ReachableReferences#canCall| |g#0@@92| |p#0@@25|) (and ($Is |g#0@@92| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($IsBox |p#0@@25| Tclass.ReferenceType.Reference)))) (and (forall ((|path#0@@69| T@U) ) (!  (=> (and (= (type |path#0@@69|) (SeqType BoxType)) ($Is |path#0@@69| (TSeq Tclass.ReferenceType.Reference))) (and (|PivotBetreeGraph.__default.IsPath#canCall| |g#0@@92| |path#0@@69|) (=> (and (and (PivotBetreeGraph.__default.IsPath |g#0@@92| |path#0@@69|) (< 1 (|Seq#Length| |path#0@@69|))) (= (|Seq#Index| |path#0@@69| (LitInt 0)) |p#0@@25|)) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@69|)))) :qid |Graphidf.99:10| :skolemid |4014| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@69|)) :pattern ( (|Seq#Index| |path#0@@69| 0)) :pattern ( (|Seq#Length| |path#0@@69|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@92| |path#0@@69|)) )) (= (PivotBetreeGraph.__default.ReachableReferences |g#0@@92| |p#0@@25|) (|lambda#364| (TSeq Tclass.ReferenceType.Reference) |g#0@@92| 1 (LitInt 0) |p#0@@25| Tclass.ReferenceType.Reference |g#0@@92| 0 Tclass.ReferenceType.Reference)))) :qid |Graphidf.97:32| :skolemid |4016| :pattern ( (PivotBetreeGraph.__default.ReachableReferences |g#0@@92| |p#0@@25|)) ))))
(assert  (=> true (forall ((|g#0@@93| T@U) (|p#0@@26| T@U) ) (!  (=> (and (and (= (type |g#0@@93|) (IMapType BoxType BoxType)) (= (type |p#0@@26|) BoxType)) (or (|PivotBetreeGraph.__default.ReachableReferences#canCall| (Lit |g#0@@93|) (Lit |p#0@@26|)) (and ($Is |g#0@@93| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($IsBox |p#0@@26| Tclass.ReferenceType.Reference)))) (and (forall ((|path#1@@10| T@U) ) (!  (=> (and (= (type |path#1@@10|) (SeqType BoxType)) ($Is |path#1@@10| (TSeq Tclass.ReferenceType.Reference))) (and (|PivotBetreeGraph.__default.IsPath#canCall| (Lit |g#0@@93|) |path#1@@10|) (=> (and (and (PivotBetreeGraph.__default.IsPath (Lit |g#0@@93|) |path#1@@10|) (< 1 (|Seq#Length| |path#1@@10|))) (= (|Seq#Index| |path#1@@10| (LitInt 0)) (Lit |p#0@@26|))) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#1@@10|)))) :qid |Graphidf.99:10| :skolemid |4017| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#1@@10|)) :pattern ( (|Seq#Index| |path#1@@10| 0)) :pattern ( (|Seq#Length| |path#1@@10|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g#0@@93| |path#1@@10|)) )) (= (PivotBetreeGraph.__default.ReachableReferences (Lit |g#0@@93|) (Lit |p#0@@26|)) (|lambda#364| (TSeq Tclass.ReferenceType.Reference) (Lit |g#0@@93|) 1 (LitInt 0) (Lit |p#0@@26|) Tclass.ReferenceType.Reference |g#0@@93| 0 Tclass.ReferenceType.Reference)))) :qid |Graphidf.97:32| :weight 3 :skolemid |4019| :pattern ( (PivotBetreeGraph.__default.ReachableReferences (Lit |g#0@@93|) (Lit |p#0@@26|))) ))))
(assert  (=> true (forall ((|g#0@@94| T@U) (|g'#0@@23| T@U) (|p#0@@27| T@U) (|path#0@@70| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@94|) (IMapType BoxType BoxType)) (= (type |g'#0@@23|) (IMapType BoxType BoxType))) (= (type |p#0@@27|) BoxType)) (= (type |path#0@@70|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.NewPath#canCall| |g#0@@94| |g'#0@@23| |p#0@@27| |path#0@@70|) (and (and (and ($Is |g#0@@94| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@23| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@27| Tclass.ReferenceType.Reference)) ($Is |path#0@@70| (TSeq Tclass.ReferenceType.Reference))))) true) :qid |Graphidf.106:21| :skolemid |4020| :pattern ( (PivotBetreeGraph.__default.NewPath |g#0@@94| |g'#0@@23| |p#0@@27| |path#0@@70|)) ))))
(assert (forall ((|g#0@@95| T@U) (|g'#0@@24| T@U) (|p#0@@28| T@U) (|path#0@@71| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@95|) (IMapType BoxType BoxType)) (= (type |g'#0@@24|) (IMapType BoxType BoxType))) (= (type |p#0@@28|) BoxType)) (= (type |path#0@@71|) (SeqType BoxType))) (and (and (and ($Is |g#0@@95| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@24| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@28| Tclass.ReferenceType.Reference)) ($Is |path#0@@71| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|PivotBetreeGraph.__default.NewPath#requires| |g#0@@95| |g'#0@@24| |p#0@@28| |path#0@@71|) true) (=> true (|PivotBetreeGraph.__default.NewPath#requires| |g#0@@95| |g'#0@@24| |p#0@@28| |path#0@@71|)))) :qid |Graphidf.106:21| :skolemid |4021| :pattern ( (|PivotBetreeGraph.__default.NewPath#requires| |g#0@@95| |g'#0@@24| |p#0@@28| |path#0@@71|)) )))
(assert  (=> true (forall ((|g#0@@96| T@U) (|g'#0@@25| T@U) (|p#0@@29| T@U) (|path#0@@72| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@96|) (IMapType BoxType BoxType)) (= (type |g'#0@@25|) (IMapType BoxType BoxType))) (= (type |p#0@@29|) BoxType)) (= (type |path#0@@72|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.NewPath#canCall| |g#0@@96| |g'#0@@25| |p#0@@29| |path#0@@72|) (and (and (and ($Is |g#0@@96| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@25| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@29| Tclass.ReferenceType.Reference)) ($Is |path#0@@72| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|PivotBetreeGraph.__default.IsPath#canCall| |g'#0@@25| |path#0@@72|) (=> (forall ((|i#0@@177| Int) ) (!  (=> true (=> (and (< 0 |i#0@@177|) (< |i#0@@177| (- (|Seq#Length| |path#0@@72|) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@25|) (|Seq#Index| |path#0@@72| |i#0@@177|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@96|) (|Seq#Index| |path#0@@72| |i#0@@177|))))))) :qid |Graphidf.110:16| :skolemid |4022| :pattern ( (|Seq#Index| |path#0@@72| |i#0@@177|)) )) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@72|))) (and (=> (PivotBetreeGraph.__default.NewPath |g#0@@96| |g'#0@@25| |p#0@@29| |path#0@@72|) (and (and (and (and (PivotBetreeGraph.__default.IsPath |g'#0@@25| |path#0@@72|) (< 1 (|Seq#Length| |path#0@@72|))) (= (|Seq#Index| |path#0@@72| (LitInt 0)) |p#0@@29|)) (forall ((|i#0@@178| Int) ) (!  (=> true (=> (and (< 0 |i#0@@178|) (< |i#0@@178| (- (|Seq#Length| |path#0@@72|) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@25|) (|Seq#Index| |path#0@@72| |i#0@@178|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@96|) (|Seq#Index| |path#0@@72| |i#0@@178|))))))) :qid |Graphidf.110:16| :skolemid |4023| :pattern ( (|Seq#Index| |path#0@@72| |i#0@@178|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@96|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@72|))))) (=> (and (and (and (and (PivotBetreeGraph.__default.IsPath |g'#0@@25| |path#0@@72|) (< 1 (|Seq#Length| |path#0@@72|))) (= (|Seq#Index| |path#0@@72| (LitInt 0)) |p#0@@29|)) (forall ((|i#0@@179| Int) ) (!  (=> true (=> (and (< 0 |i#0@@179|) (< |i#0@@179| (- (|Seq#Length| |path#0@@72|) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@25|) (|Seq#Index| |path#0@@72| |i#0@@179|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@96|) (|Seq#Index| |path#0@@72| |i#0@@179|))))))) :qid |Graphidf.110:16| :skolemid |4023| :pattern ( (|Seq#Index| |path#0@@72| |i#0@@179|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@96|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@72|)))) (PivotBetreeGraph.__default.NewPath |g#0@@96| |g'#0@@25| |p#0@@29| |path#0@@72|))))) :qid |Graphidf.106:21| :skolemid |4024| :pattern ( (PivotBetreeGraph.__default.NewPath |g#0@@96| |g'#0@@25| |p#0@@29| |path#0@@72|)) ))))
(assert  (=> true (forall ((|g#0@@97| T@U) (|g'#0@@26| T@U) (|p#0@@30| T@U) (|path#0@@73| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@97|) (IMapType BoxType BoxType)) (= (type |g'#0@@26|) (IMapType BoxType BoxType))) (= (type |p#0@@30|) BoxType)) (= (type |path#0@@73|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.NewPath#canCall| |g#0@@97| |g'#0@@26| |p#0@@30| (Lit |path#0@@73|)) (and (and (and ($Is |g#0@@97| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@26| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@30| Tclass.ReferenceType.Reference)) ($Is |path#0@@73| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|PivotBetreeGraph.__default.IsPath#canCall| |g'#0@@26| (Lit |path#0@@73|)) (=> (forall ((|i#1@@89| Int) ) (!  (=> true (=> (and (< 0 |i#1@@89|) (< |i#1@@89| (- (|Seq#Length| (Lit |path#0@@73|)) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@26|) (|Seq#Index| (Lit |path#0@@73|) |i#1@@89|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@97|) (|Seq#Index| (Lit |path#0@@73|) |i#1@@89|))))))) :qid |Graphidf.110:16| :skolemid |4025| :pattern ( (|Seq#Index| |path#0@@73| |i#1@@89|)) )) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@73|)))) (and (=> (PivotBetreeGraph.__default.NewPath |g#0@@97| |g'#0@@26| |p#0@@30| (Lit |path#0@@73|)) (and (and (and (and (PivotBetreeGraph.__default.IsPath |g'#0@@26| (Lit |path#0@@73|)) (< 1 (|Seq#Length| (Lit |path#0@@73|)))) (= (|Seq#Index| (Lit |path#0@@73|) (LitInt 0)) |p#0@@30|)) (forall ((|i#1@@90| Int) ) (!  (=> true (=> (and (< 0 |i#1@@90|) (< |i#1@@90| (- (|Seq#Length| (Lit |path#0@@73|)) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@26|) (|Seq#Index| (Lit |path#0@@73|) |i#1@@90|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@97|) (|Seq#Index| (Lit |path#0@@73|) |i#1@@90|))))))) :qid |Graphidf.110:16| :skolemid |4026| :pattern ( (|Seq#Index| |path#0@@73| |i#1@@90|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@97|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@73|)))))) (=> (and (and (and (and (PivotBetreeGraph.__default.IsPath |g'#0@@26| (Lit |path#0@@73|)) (< 1 (|Seq#Length| (Lit |path#0@@73|)))) (= (|Seq#Index| (Lit |path#0@@73|) (LitInt 0)) |p#0@@30|)) (forall ((|i#1@@91| Int) ) (!  (=> true (=> (and (< 0 |i#1@@91|) (< |i#1@@91| (- (|Seq#Length| (Lit |path#0@@73|)) 1))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@26|) (|Seq#Index| (Lit |path#0@@73|) |i#1@@91|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@97|) (|Seq#Index| (Lit |path#0@@73|) |i#1@@91|))))))) :qid |Graphidf.110:16| :skolemid |4026| :pattern ( (|Seq#Index| |path#0@@73| |i#1@@91|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@97|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@73|))))) (PivotBetreeGraph.__default.NewPath |g#0@@97| |g'#0@@26| |p#0@@30| (Lit |path#0@@73|)))))) :qid |Graphidf.106:21| :weight 3 :skolemid |4027| :pattern ( (PivotBetreeGraph.__default.NewPath |g#0@@97| |g'#0@@26| |p#0@@30| (Lit |path#0@@73|))) ))))
(assert  (=> true (forall ((|g#0@@98| T@U) (|g'#0@@27| T@U) (|p#0@@31| T@U) (|path#0@@74| T@U) ) (!  (=> (and (and (and (and (= (type |g#0@@98|) (IMapType BoxType BoxType)) (= (type |g'#0@@27|) (IMapType BoxType BoxType))) (= (type |p#0@@31|) BoxType)) (= (type |path#0@@74|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.NewPath#canCall| (Lit |g#0@@98|) (Lit |g'#0@@27|) (Lit |p#0@@31|) (Lit |path#0@@74|)) (and (and (and ($Is |g#0@@98| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@27| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@31| Tclass.ReferenceType.Reference)) ($Is |path#0@@74| (TSeq Tclass.ReferenceType.Reference))))) (and (and (|PivotBetreeGraph.__default.IsPath#canCall| (Lit |g'#0@@27|) (Lit |path#0@@74|)) (=> (forall ((|i#2@@40| Int) ) (!  (=> true (=> (and (< 0 |i#2@@40|) (< |i#2@@40| (- (|Seq#Length| (Lit |path#0@@74|)) 1))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@27|))) (|Seq#Index| (Lit |path#0@@74|) |i#2@@40|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@98|))) (|Seq#Index| (Lit |path#0@@74|) |i#2@@40|))))))) :qid |Graphidf.110:16| :skolemid |4028| :pattern ( (|Seq#Index| |path#0@@74| |i#2@@40|)) )) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference (Lit |path#0@@74|)))) (and (=> (PivotBetreeGraph.__default.NewPath (Lit |g#0@@98|) (Lit |g'#0@@27|) (Lit |p#0@@31|) (Lit |path#0@@74|)) (and (and (and (and (PivotBetreeGraph.__default.IsPath (Lit |g'#0@@27|) (Lit |path#0@@74|)) (< 1 (|Seq#Length| (Lit |path#0@@74|)))) (= (|Seq#Index| (Lit |path#0@@74|) (LitInt 0)) (Lit |p#0@@31|))) (forall ((|i#2@@41| Int) ) (!  (=> true (=> (and (< 0 |i#2@@41|) (< |i#2@@41| (- (|Seq#Length| (Lit |path#0@@74|)) 1))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@27|))) (|Seq#Index| (Lit |path#0@@74|) |i#2@@41|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@98|))) (|Seq#Index| (Lit |path#0@@74|) |i#2@@41|))))))) :qid |Graphidf.110:16| :skolemid |4029| :pattern ( (|Seq#Index| |path#0@@74| |i#2@@41|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@98|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@74|)))))) (=> (and (and (and (and (PivotBetreeGraph.__default.IsPath (Lit |g'#0@@27|) (Lit |path#0@@74|)) (< 1 (|Seq#Length| (Lit |path#0@@74|)))) (= (|Seq#Index| (Lit |path#0@@74|) (LitInt 0)) (Lit |p#0@@31|))) (forall ((|i#2@@42| Int) ) (!  (=> true (=> (and (< 0 |i#2@@42|) (< |i#2@@42| (- (|Seq#Length| (Lit |path#0@@74|)) 1))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@27|))) (|Seq#Index| (Lit |path#0@@74|) |i#2@@42|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@98|))) (|Seq#Index| (Lit |path#0@@74|) |i#2@@42|))))))) :qid |Graphidf.110:16| :skolemid |4029| :pattern ( (|Seq#Index| |path#0@@74| |i#2@@42|)) ))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@98|) (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@74|))))) (PivotBetreeGraph.__default.NewPath (Lit |g#0@@98|) (Lit |g'#0@@27|) (Lit |p#0@@31|) (Lit |path#0@@74|)))))) :qid |Graphidf.106:21| :weight 3 :skolemid |4030| :pattern ( (PivotBetreeGraph.__default.NewPath (Lit |g#0@@98|) (Lit |g'#0@@27|) (Lit |p#0@@31|) (Lit |path#0@@74|))) ))))
(assert (forall ((arg0@@565 T@U) (arg1@@324 T@U) (arg2@@224 T@U) ) (! (= (type (PivotBetreeGraph.__default.NewlyReachableReferences arg0@@565 arg1@@324 arg2@@224)) (MapType0Type BoxType boolType)) :qid |funType:PivotBetreeGraph.__default.NewlyReachableReferences| :pattern ( (PivotBetreeGraph.__default.NewlyReachableReferences arg0@@565 arg1@@324 arg2@@224)) )))
(assert  (=> true (forall ((|g#0@@99| T@U) (|g'#0@@28| T@U) (|p#0@@32| T@U) ) (!  (=> (and (and (and (= (type |g#0@@99|) (IMapType BoxType BoxType)) (= (type |g'#0@@28|) (IMapType BoxType BoxType))) (= (type |p#0@@32|) BoxType)) (or (|PivotBetreeGraph.__default.NewlyReachableReferences#canCall| |g#0@@99| |g'#0@@28| |p#0@@32|) (and (and ($Is |g#0@@99| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@28| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@32| Tclass.ReferenceType.Reference)))) ($Is (PivotBetreeGraph.__default.NewlyReachableReferences |g#0@@99| |g'#0@@28| |p#0@@32|) (TISet Tclass.ReferenceType.Reference))) :qid |Graphidf.114:37| :skolemid |4031| :pattern ( (PivotBetreeGraph.__default.NewlyReachableReferences |g#0@@99| |g'#0@@28| |p#0@@32|)) ))))
(assert (forall ((|g#0@@100| T@U) (|g'#0@@29| T@U) (|p#0@@33| T@U) ) (!  (=> (and (and (and (= (type |g#0@@100|) (IMapType BoxType BoxType)) (= (type |g'#0@@29|) (IMapType BoxType BoxType))) (= (type |p#0@@33|) BoxType)) (and (and ($Is |g#0@@100| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@29| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@33| Tclass.ReferenceType.Reference))) (and (=> (|PivotBetreeGraph.__default.NewlyReachableReferences#requires| |g#0@@100| |g'#0@@29| |p#0@@33|) true) (=> true (|PivotBetreeGraph.__default.NewlyReachableReferences#requires| |g#0@@100| |g'#0@@29| |p#0@@33|)))) :qid |Graphidf.114:37| :skolemid |4032| :pattern ( (|PivotBetreeGraph.__default.NewlyReachableReferences#requires| |g#0@@100| |g'#0@@29| |p#0@@33|)) )))
(assert (forall ((arg0@@566 T@U) (arg1@@325 T@U) (arg2@@225 T@U) (arg3@@151 T@U) (arg4@@116 T@U) (arg5@@76 T@U) (arg6@@56 T@U) (arg7@@40 T@U) (arg8@@25 T@U) ) (! (= (type (|lambda#366| arg0@@566 arg1@@325 arg2@@225 arg3@@151 arg4@@116 arg5@@76 arg6@@56 arg7@@40 arg8@@25)) (MapType0Type BoxType boolType)) :qid |funType:lambda#366| :pattern ( (|lambda#366| arg0@@566 arg1@@325 arg2@@225 arg3@@151 arg4@@116 arg5@@76 arg6@@56 arg7@@40 arg8@@25)) )))
(assert  (=> true (forall ((|g#0@@101| T@U) (|g'#0@@30| T@U) (|p#0@@34| T@U) ) (!  (=> (and (and (and (= (type |g#0@@101|) (IMapType BoxType BoxType)) (= (type |g'#0@@30|) (IMapType BoxType BoxType))) (= (type |p#0@@34|) BoxType)) (or (|PivotBetreeGraph.__default.NewlyReachableReferences#canCall| |g#0@@101| |g'#0@@30| |p#0@@34|) (and (and ($Is |g#0@@101| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@30| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@34| Tclass.ReferenceType.Reference)))) (and (forall ((|path#0@@75| T@U) ) (!  (=> (and (= (type |path#0@@75|) (SeqType BoxType)) ($Is |path#0@@75| (TSeq Tclass.ReferenceType.Reference))) (and (|PivotBetreeGraph.__default.NewPath#canCall| |g#0@@101| |g'#0@@30| |p#0@@34| |path#0@@75|) (=> (PivotBetreeGraph.__default.NewPath |g#0@@101| |g'#0@@30| |p#0@@34| |path#0@@75|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#0@@75|)))) :qid |Graphidf.116:10| :skolemid |4033| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@75|)) :pattern ( (PivotBetreeGraph.__default.NewPath |g#0@@101| |g'#0@@30| |p#0@@34| |path#0@@75|)) )) (= (PivotBetreeGraph.__default.NewlyReachableReferences |g#0@@101| |g'#0@@30| |p#0@@34|) (|lambda#366| (TSeq Tclass.ReferenceType.Reference) |g#0@@101| |g'#0@@30| |p#0@@34| Tclass.ReferenceType.Reference |g#0@@101| |g'#0@@30| |p#0@@34| Tclass.ReferenceType.Reference)))) :qid |Graphidf.114:37| :skolemid |4035| :pattern ( (PivotBetreeGraph.__default.NewlyReachableReferences |g#0@@101| |g'#0@@30| |p#0@@34|)) ))))
(assert  (=> true (forall ((|g#0@@102| T@U) (|g'#0@@31| T@U) (|p#0@@35| T@U) ) (!  (=> (and (and (and (= (type |g#0@@102|) (IMapType BoxType BoxType)) (= (type |g'#0@@31|) (IMapType BoxType BoxType))) (= (type |p#0@@35|) BoxType)) (or (|PivotBetreeGraph.__default.NewlyReachableReferences#canCall| (Lit |g#0@@102|) (Lit |g'#0@@31|) (Lit |p#0@@35|)) (and (and ($Is |g#0@@102| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@31| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@35| Tclass.ReferenceType.Reference)))) (and (forall ((|path#1@@11| T@U) ) (!  (=> (and (= (type |path#1@@11|) (SeqType BoxType)) ($Is |path#1@@11| (TSeq Tclass.ReferenceType.Reference))) (and (|PivotBetreeGraph.__default.NewPath#canCall| (Lit |g#0@@102|) (Lit |g'#0@@31|) (Lit |p#0@@35|) |path#1@@11|) (=> (PivotBetreeGraph.__default.NewPath (Lit |g#0@@102|) (Lit |g'#0@@31|) (Lit |p#0@@35|) |path#1@@11|) (|Sequences.__default.Last#canCall| Tclass.ReferenceType.Reference |path#1@@11|)))) :qid |Graphidf.116:10| :skolemid |4036| :pattern ( (Sequences.__default.Last Tclass.ReferenceType.Reference |path#1@@11|)) :pattern ( (PivotBetreeGraph.__default.NewPath |g#0@@102| |g'#0@@31| |p#0@@35| |path#1@@11|)) )) (= (PivotBetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@102|) (Lit |g'#0@@31|) (Lit |p#0@@35|)) (|lambda#366| (TSeq Tclass.ReferenceType.Reference) (Lit |g#0@@102|) (Lit |g'#0@@31|) (Lit |p#0@@35|) Tclass.ReferenceType.Reference |g#0@@102| |g'#0@@31| |p#0@@35| Tclass.ReferenceType.Reference)))) :qid |Graphidf.114:37| :weight 3 :skolemid |4038| :pattern ( (PivotBetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@102|) (Lit |g'#0@@31|) (Lit |p#0@@35|))) ))))
(assert  (=> true (forall ((|g#0@@103| T@U) (|g'#0@@32| T@U) (|p#0@@36| T@U) ) (!  (=> (and (and (and (= (type |g#0@@103|) (IMapType BoxType BoxType)) (= (type |g'#0@@32|) (IMapType BoxType BoxType))) (= (type |p#0@@36|) BoxType)) (or (|PivotBetreeGraph.__default.EditIsLocal#canCall| |g#0@@103| |g'#0@@32| |p#0@@36|) (and (and ($Is |g#0@@103| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@32| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@36| Tclass.ReferenceType.Reference)))) true) :qid |Graphidf.119:25| :skolemid |4039| :pattern ( (PivotBetreeGraph.__default.EditIsLocal |g#0@@103| |g'#0@@32| |p#0@@36|)) ))))
(assert (forall ((|g#0@@104| T@U) (|g'#0@@33| T@U) (|p#0@@37| T@U) ) (!  (=> (and (and (and (= (type |g#0@@104|) (IMapType BoxType BoxType)) (= (type |g'#0@@33|) (IMapType BoxType BoxType))) (= (type |p#0@@37|) BoxType)) (and (and ($Is |g#0@@104| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@33| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@37| Tclass.ReferenceType.Reference))) (and (=> (|PivotBetreeGraph.__default.EditIsLocal#requires| |g#0@@104| |g'#0@@33| |p#0@@37|) true) (=> true (|PivotBetreeGraph.__default.EditIsLocal#requires| |g#0@@104| |g'#0@@33| |p#0@@37|)))) :qid |Graphidf.119:25| :skolemid |4040| :pattern ( (|PivotBetreeGraph.__default.EditIsLocal#requires| |g#0@@104| |g'#0@@33| |p#0@@37|)) )))
(assert  (=> true (forall ((|g#0@@105| T@U) (|g'#0@@34| T@U) (|p#0@@38| T@U) ) (!  (=> (and (and (and (= (type |g#0@@105|) (IMapType BoxType BoxType)) (= (type |g'#0@@34|) (IMapType BoxType BoxType))) (= (type |p#0@@38|) BoxType)) (or (|PivotBetreeGraph.__default.EditIsLocal#canCall| |g#0@@105| |g'#0@@34| |p#0@@38|) (and (and ($Is |g#0@@105| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@34| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@38| Tclass.ReferenceType.Reference)))) (and (and (forall ((|ref#0@@9| T@U) ) (!  (=> (and (= (type |ref#0@@9|) BoxType) ($IsBox |ref#0@@9| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@105|) |ref#0@@9|)) (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@34|) |ref#0@@9|))) (not (= |ref#0@@9| |p#0@@38|))) (and (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@105|) |ref#0@@9|))) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@34|) |ref#0@@9|)))))) :qid |Graphidf.121:16| :skolemid |4041| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@34|) |ref#0@@9|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@105|) |ref#0@@9|))) )) (=> (forall ((|ref#0@@10| T@U) ) (!  (=> (and (= (type |ref#0@@10|) BoxType) ($IsBox |ref#0@@10| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@105|) |ref#0@@10|)) (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@34|) |ref#0@@10|))) (not (= |ref#0@@10| |p#0@@38|))) (|ISet#Equal| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@105|) |ref#0@@10|))) (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@34|) |ref#0@@10|)))))) :qid |Graphidf.121:16| :skolemid |4042| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@34|) |ref#0@@10|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@105|) |ref#0@@10|))) )) (and (|PivotBetreeGraph.__default.NewlyReachableReferences#canCall| |g#0@@105| |g'#0@@34| |p#0@@38|) (|PivotBetreeGraph.__default.ReachableReferences#canCall| |g#0@@105| |p#0@@38|)))) (and (=> (PivotBetreeGraph.__default.EditIsLocal |g#0@@105| |g'#0@@34| |p#0@@38|) (and (forall ((|ref#0@@11| T@U) ) (!  (=> (and (= (type |ref#0@@11|) BoxType) ($IsBox |ref#0@@11| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@105|) |ref#0@@11|)) (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@34|) |ref#0@@11|))) (not (= |ref#0@@11| |p#0@@38|))) (|ISet#Equal| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@105|) |ref#0@@11|))) (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@34|) |ref#0@@11|)))))) :qid |Graphidf.121:16| :skolemid |4043| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@34|) |ref#0@@11|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@105|) |ref#0@@11|))) )) (|ISet#Subset| (PivotBetreeGraph.__default.NewlyReachableReferences |g#0@@105| |g'#0@@34| |p#0@@38|) (PivotBetreeGraph.__default.ReachableReferences |g#0@@105| |p#0@@38|)))) (=> (and (forall ((|ref#0@@12| T@U) ) (!  (=> (and (= (type |ref#0@@12|) BoxType) ($IsBox |ref#0@@12| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@105|) |ref#0@@12|)) (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@34|) |ref#0@@12|))) (not (= |ref#0@@12| |p#0@@38|))) (|ISet#Equal| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@105|) |ref#0@@12|))) (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@34|) |ref#0@@12|)))))) :qid |Graphidf.121:16| :skolemid |4043| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@34|) |ref#0@@12|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@105|) |ref#0@@12|))) )) (|ISet#Subset| (PivotBetreeGraph.__default.NewlyReachableReferences |g#0@@105| |g'#0@@34| |p#0@@38|) (PivotBetreeGraph.__default.ReachableReferences |g#0@@105| |p#0@@38|))) (PivotBetreeGraph.__default.EditIsLocal |g#0@@105| |g'#0@@34| |p#0@@38|))))) :qid |Graphidf.119:25| :skolemid |4044| :pattern ( (PivotBetreeGraph.__default.EditIsLocal |g#0@@105| |g'#0@@34| |p#0@@38|)) ))))
(assert  (=> true (forall ((|g#0@@106| T@U) (|g'#0@@35| T@U) (|p#0@@39| T@U) ) (!  (=> (and (and (and (= (type |g#0@@106|) (IMapType BoxType BoxType)) (= (type |g'#0@@35|) (IMapType BoxType BoxType))) (= (type |p#0@@39|) BoxType)) (or (|PivotBetreeGraph.__default.EditIsLocal#canCall| (Lit |g#0@@106|) (Lit |g'#0@@35|) (Lit |p#0@@39|)) (and (and ($Is |g#0@@106| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@35| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@39| Tclass.ReferenceType.Reference)))) (and (and (forall ((|ref#1@@9| T@U) ) (!  (=> (and (= (type |ref#1@@9|) BoxType) ($IsBox |ref#1@@9| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@106|))) |ref#1@@9|)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@35|))) |ref#1@@9|))) (not (= |ref#1@@9| (Lit |p#0@@39|)))) (and (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@106|)) |ref#1@@9|))) (|PivotBetreeGraph.__default.Successors#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@35|)) |ref#1@@9|)))))) :qid |Graphidf.121:16| :skolemid |4045| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@35|) |ref#1@@9|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@106|) |ref#1@@9|))) )) (=> (forall ((|ref#1@@10| T@U) ) (!  (=> (and (= (type |ref#1@@10|) BoxType) ($IsBox |ref#1@@10| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@106|))) |ref#1@@10|)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@35|))) |ref#1@@10|))) (not (= |ref#1@@10| (Lit |p#0@@39|)))) (|ISet#Equal| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@106|)) |ref#1@@10|))) (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@35|)) |ref#1@@10|)))))) :qid |Graphidf.121:16| :skolemid |4046| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@35|) |ref#1@@10|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@106|) |ref#1@@10|))) )) (and (|PivotBetreeGraph.__default.NewlyReachableReferences#canCall| (Lit |g#0@@106|) (Lit |g'#0@@35|) (Lit |p#0@@39|)) (|PivotBetreeGraph.__default.ReachableReferences#canCall| (Lit |g#0@@106|) (Lit |p#0@@39|))))) (and (=> (PivotBetreeGraph.__default.EditIsLocal (Lit |g#0@@106|) (Lit |g'#0@@35|) (Lit |p#0@@39|)) (and (forall ((|ref#1@@11| T@U) ) (!  (=> (and (= (type |ref#1@@11|) BoxType) ($IsBox |ref#1@@11| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@106|))) |ref#1@@11|)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@35|))) |ref#1@@11|))) (not (= |ref#1@@11| (Lit |p#0@@39|)))) (|ISet#Equal| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@106|)) |ref#1@@11|))) (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@35|)) |ref#1@@11|)))))) :qid |Graphidf.121:16| :skolemid |4047| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@35|) |ref#1@@11|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@106|) |ref#1@@11|))) )) (|ISet#Subset| (PivotBetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@106|) (Lit |g'#0@@35|) (Lit |p#0@@39|)) (PivotBetreeGraph.__default.ReachableReferences (Lit |g#0@@106|) (Lit |p#0@@39|))))) (=> (and (forall ((|ref#1@@12| T@U) ) (!  (=> (and (= (type |ref#1@@12|) BoxType) ($IsBox |ref#1@@12| Tclass.ReferenceType.Reference)) (=> (and (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@106|))) |ref#1@@12|)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@35|))) |ref#1@@12|))) (not (= |ref#1@@12| (Lit |p#0@@39|)))) (|ISet#Equal| (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g#0@@106|)) |ref#1@@12|))) (PivotBetreeGraph.__default.Successors ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Lit |g'#0@@35|)) |ref#1@@12|)))))) :qid |Graphidf.121:16| :skolemid |4047| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g'#0@@35|) |ref#1@@12|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |g#0@@106|) |ref#1@@12|))) )) (|ISet#Subset| (PivotBetreeGraph.__default.NewlyReachableReferences (Lit |g#0@@106|) (Lit |g'#0@@35|) (Lit |p#0@@39|)) (PivotBetreeGraph.__default.ReachableReferences (Lit |g#0@@106|) (Lit |p#0@@39|)))) (PivotBetreeGraph.__default.EditIsLocal (Lit |g#0@@106|) (Lit |g'#0@@35|) (Lit |p#0@@39|)))))) :qid |Graphidf.119:25| :weight 3 :skolemid |4048| :pattern ( (PivotBetreeGraph.__default.EditIsLocal (Lit |g#0@@106|) (Lit |g'#0@@35|) (Lit |p#0@@39|))) ))))
(assert  (=> true (forall ((|g#0@@107| T@U) (|g'#0@@36| T@U) ) (!  (=> (and (and (= (type |g#0@@107|) (IMapType BoxType BoxType)) (= (type |g'#0@@36|) (IMapType BoxType BoxType))) (or (|PivotBetreeGraph.__default.NewNodesAreCycleFree#canCall| |g#0@@107| |g'#0@@36|) (and ($Is |g#0@@107| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@36| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))))) true) :qid |Graphidf.125:34| :skolemid |4049| :pattern ( (PivotBetreeGraph.__default.NewNodesAreCycleFree |g#0@@107| |g'#0@@36|)) ))))
(assert (forall ((|g#0@@108| T@U) (|g'#0@@37| T@U) ) (!  (=> (and (and (= (type |g#0@@108|) (IMapType BoxType BoxType)) (= (type |g'#0@@37|) (IMapType BoxType BoxType))) (and ($Is |g#0@@108| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@37| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)))) (and (=> (|PivotBetreeGraph.__default.NewNodesAreCycleFree#requires| |g#0@@108| |g'#0@@37|) true) (=> true (|PivotBetreeGraph.__default.NewNodesAreCycleFree#requires| |g#0@@108| |g'#0@@37|)))) :qid |Graphidf.125:34| :skolemid |4050| :pattern ( (|PivotBetreeGraph.__default.NewNodesAreCycleFree#requires| |g#0@@108| |g'#0@@37|)) )))
(assert  (=> true (forall ((|g#0@@109| T@U) (|g'#0@@38| T@U) ) (!  (=> (and (and (= (type |g#0@@109|) (IMapType BoxType BoxType)) (= (type |g'#0@@38|) (IMapType BoxType BoxType))) (or (|PivotBetreeGraph.__default.NewNodesAreCycleFree#canCall| |g#0@@109| |g'#0@@38|) (and ($Is |g#0@@109| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@38| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))))) (and (forall ((|path#0@@76| T@U) ) (!  (=> (and (= (type |path#0@@76|) (SeqType BoxType)) ($Is |path#0@@76| (TSeq Tclass.ReferenceType.Reference))) (and (|PivotBetreeGraph.__default.IsPath#canCall| |g'#0@@38| |path#0@@76|) (=> (forall ((|i#0@@180| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@180|) (< |i#0@@180| (|Seq#Length| |path#0@@76|))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@38|) (|Seq#Index| |path#0@@76| |i#0@@180|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@109|) (|Seq#Index| |path#0@@76| |i#0@@180|))))))) :qid |Graphidf.129:18| :skolemid |4051| :pattern ( (|Seq#Index| |path#0@@76| |i#0@@180|)) )) (|PivotBetreeGraph.__default.IsCycle#canCall| |g'#0@@38| |path#0@@76|)))) :qid |Graphidf.127:12| :skolemid |4052| :pattern ( (PivotBetreeGraph.__default.IsCycle |g'#0@@38| |path#0@@76|)) :pattern ( (|Seq#Length| |path#0@@76|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g'#0@@38| |path#0@@76|)) )) (and (=> (PivotBetreeGraph.__default.NewNodesAreCycleFree |g#0@@109| |g'#0@@38|) (forall ((|path#0@@77| T@U) ) (!  (=> (and (and (= (type |path#0@@77|) (SeqType BoxType)) ($Is |path#0@@77| (TSeq Tclass.ReferenceType.Reference))) (and (PivotBetreeGraph.__default.IsPath |g'#0@@38| |path#0@@77|) (forall ((|i#0@@181| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@181|) (< |i#0@@181| (|Seq#Length| |path#0@@77|))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@38|) (|Seq#Index| |path#0@@77| |i#0@@181|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@109|) (|Seq#Index| |path#0@@77| |i#0@@181|))))))) :qid |Graphidf.129:18| :skolemid |4053| :pattern ( (|Seq#Index| |path#0@@77| |i#0@@181|)) )))) (not (PivotBetreeGraph.__default.IsCycle |g'#0@@38| |path#0@@77|))) :qid |Graphidf.127:12| :skolemid |4054| :pattern ( (PivotBetreeGraph.__default.IsCycle |g'#0@@38| |path#0@@77|)) :pattern ( (|Seq#Length| |path#0@@77|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g'#0@@38| |path#0@@77|)) ))) (=> (forall ((|path#0@@78| T@U) ) (!  (=> (and (and (= (type |path#0@@78|) (SeqType BoxType)) ($Is |path#0@@78| (TSeq Tclass.ReferenceType.Reference))) (and (PivotBetreeGraph.__default.IsPath |g'#0@@38| |path#0@@78|) (forall ((|i#0@@182| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@182|) (< |i#0@@182| (|Seq#Length| |path#0@@78|))) (and (U_2_bool (MapType0Select (|IMap#Domain| |g'#0@@38|) (|Seq#Index| |path#0@@78| |i#0@@182|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@109|) (|Seq#Index| |path#0@@78| |i#0@@182|))))))) :qid |Graphidf.129:18| :skolemid |4053| :pattern ( (|Seq#Index| |path#0@@78| |i#0@@182|)) )))) (not (PivotBetreeGraph.__default.IsCycle |g'#0@@38| |path#0@@78|))) :qid |Graphidf.127:12| :skolemid |4054| :pattern ( (PivotBetreeGraph.__default.IsCycle |g'#0@@38| |path#0@@78|)) :pattern ( (|Seq#Length| |path#0@@78|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g'#0@@38| |path#0@@78|)) )) (PivotBetreeGraph.__default.NewNodesAreCycleFree |g#0@@109| |g'#0@@38|))))) :qid |Graphidf.125:34| :skolemid |4055| :pattern ( (PivotBetreeGraph.__default.NewNodesAreCycleFree |g#0@@109| |g'#0@@38|)) ))))
(assert  (=> true (forall ((|g#0@@110| T@U) (|g'#0@@39| T@U) ) (!  (=> (and (and (= (type |g#0@@110|) (IMapType BoxType BoxType)) (= (type |g'#0@@39|) (IMapType BoxType BoxType))) (or (|PivotBetreeGraph.__default.NewNodesAreCycleFree#canCall| (Lit |g#0@@110|) (Lit |g'#0@@39|)) (and ($Is |g#0@@110| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@39| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))))) (and (forall ((|path#1@@12| T@U) ) (!  (=> (and (= (type |path#1@@12|) (SeqType BoxType)) ($Is |path#1@@12| (TSeq Tclass.ReferenceType.Reference))) (and (|PivotBetreeGraph.__default.IsPath#canCall| (Lit |g'#0@@39|) |path#1@@12|) (=> (forall ((|i#1@@92| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@92|) (< |i#1@@92| (|Seq#Length| |path#1@@12|))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@39|))) (|Seq#Index| |path#1@@12| |i#1@@92|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@110|))) (|Seq#Index| |path#1@@12| |i#1@@92|))))))) :qid |Graphidf.129:18| :skolemid |4056| :pattern ( (|Seq#Index| |path#1@@12| |i#1@@92|)) )) (|PivotBetreeGraph.__default.IsCycle#canCall| (Lit |g'#0@@39|) |path#1@@12|)))) :qid |Graphidf.127:12| :skolemid |4057| :pattern ( (PivotBetreeGraph.__default.IsCycle |g'#0@@39| |path#1@@12|)) :pattern ( (|Seq#Length| |path#1@@12|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g'#0@@39| |path#1@@12|)) )) (and (=> (PivotBetreeGraph.__default.NewNodesAreCycleFree (Lit |g#0@@110|) (Lit |g'#0@@39|)) (forall ((|path#1@@13| T@U) ) (!  (=> (and (and (= (type |path#1@@13|) (SeqType BoxType)) ($Is |path#1@@13| (TSeq Tclass.ReferenceType.Reference))) (and (PivotBetreeGraph.__default.IsPath (Lit |g'#0@@39|) |path#1@@13|) (forall ((|i#1@@93| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@93|) (< |i#1@@93| (|Seq#Length| |path#1@@13|))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@39|))) (|Seq#Index| |path#1@@13| |i#1@@93|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@110|))) (|Seq#Index| |path#1@@13| |i#1@@93|))))))) :qid |Graphidf.129:18| :skolemid |4058| :pattern ( (|Seq#Index| |path#1@@13| |i#1@@93|)) )))) (not (PivotBetreeGraph.__default.IsCycle (Lit |g'#0@@39|) |path#1@@13|))) :qid |Graphidf.127:12| :skolemid |4059| :pattern ( (PivotBetreeGraph.__default.IsCycle |g'#0@@39| |path#1@@13|)) :pattern ( (|Seq#Length| |path#1@@13|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g'#0@@39| |path#1@@13|)) ))) (=> (forall ((|path#1@@14| T@U) ) (!  (=> (and (and (= (type |path#1@@14|) (SeqType BoxType)) ($Is |path#1@@14| (TSeq Tclass.ReferenceType.Reference))) (and (PivotBetreeGraph.__default.IsPath (Lit |g'#0@@39|) |path#1@@14|) (forall ((|i#1@@94| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@94|) (< |i#1@@94| (|Seq#Length| |path#1@@14|))) (and (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g'#0@@39|))) (|Seq#Index| |path#1@@14| |i#1@@94|))) (not (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@110|))) (|Seq#Index| |path#1@@14| |i#1@@94|))))))) :qid |Graphidf.129:18| :skolemid |4058| :pattern ( (|Seq#Index| |path#1@@14| |i#1@@94|)) )))) (not (PivotBetreeGraph.__default.IsCycle (Lit |g'#0@@39|) |path#1@@14|))) :qid |Graphidf.127:12| :skolemid |4059| :pattern ( (PivotBetreeGraph.__default.IsCycle |g'#0@@39| |path#1@@14|)) :pattern ( (|Seq#Length| |path#1@@14|)) :pattern ( (PivotBetreeGraph.__default.IsPath |g'#0@@39| |path#1@@14|)) )) (PivotBetreeGraph.__default.NewNodesAreCycleFree (Lit |g#0@@110|) (Lit |g'#0@@39|)))))) :qid |Graphidf.125:34| :weight 3 :skolemid |4060| :pattern ( (PivotBetreeGraph.__default.NewNodesAreCycleFree (Lit |g#0@@110|) (Lit |g'#0@@39|))) ))))
(assert (forall (($ly@@693 T@U) (|path#0@@79| T@U) (|g#0@@111| T@U) ) (!  (=> (and (and (= (type $ly@@693) LayerTypeType) (= (type |path#0@@79|) (SeqType BoxType))) (= (type |g#0@@111|) (IMapType BoxType BoxType))) (= (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@693) |path#0@@79| |g#0@@111|) (PivotBetreeGraph.__default.FirstInGraph $ly@@693 |path#0@@79| |g#0@@111|))) :qid |Graphidf.133:12| :skolemid |4061| :pattern ( (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@693) |path#0@@79| |g#0@@111|)) )))
(assert (forall (($ly@@694 T@U) (|path#0@@80| T@U) (|g#0@@112| T@U) ) (!  (=> (and (and (= (type $ly@@694) LayerTypeType) (= (type |path#0@@80|) (SeqType BoxType))) (= (type |g#0@@112|) (IMapType BoxType BoxType))) (= (PivotBetreeGraph.__default.FirstInGraph $ly@@694 |path#0@@80| |g#0@@112|) (PivotBetreeGraph.__default.FirstInGraph $LZ |path#0@@80| |g#0@@112|))) :qid |Graphidf.133:12| :skolemid |4062| :pattern ( (PivotBetreeGraph.__default.FirstInGraph (AsFuelBottom $ly@@694) |path#0@@80| |g#0@@112|)) )))
(assert  (=> true (forall (($ly@@695 T@U) (|path#0@@81| T@U) (|g#0@@113| T@U) ) (!  (=> (and (and (and (= (type $ly@@695) LayerTypeType) (= (type |path#0@@81|) (SeqType BoxType))) (= (type |g#0@@113|) (IMapType BoxType BoxType))) (or (|PivotBetreeGraph.__default.FirstInGraph#canCall| |path#0@@81| |g#0@@113|) (and (and ($Is |path#0@@81| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@113| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) (exists ((|i#0@@183| Int) ) (!  (and (and (<= (LitInt 0) |i#0@@183|) (< |i#0@@183| (|Seq#Length| |path#0@@81|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@113|) (|Seq#Index| |path#0@@81| |i#0@@183|)))) :qid |Graphidf.134:21| :skolemid |4063| :pattern ( (|Seq#Index| |path#0@@81| |i#0@@183|)) ))))) (and (and (and (<= (LitInt 0) (PivotBetreeGraph.__default.FirstInGraph $ly@@695 |path#0@@81| |g#0@@113|)) (< (PivotBetreeGraph.__default.FirstInGraph $ly@@695 |path#0@@81| |g#0@@113|) (|Seq#Length| |path#0@@81|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@113|) (|Seq#Index| |path#0@@81| (PivotBetreeGraph.__default.FirstInGraph $ly@@695 |path#0@@81| |g#0@@113|))))) (forall ((|i#1@@95| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@95|) (< |i#1@@95| (PivotBetreeGraph.__default.FirstInGraph $ly@@695 |path#0@@81| |g#0@@113|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@113|) (|Seq#Index| |path#0@@81| |i#1@@95|)))))) :qid |Graphidf.137:20| :skolemid |4064| :pattern ( (|Seq#Index| |path#0@@81| |i#1@@95|)) )))) :qid |Graphidf.133:12| :skolemid |4065| :pattern ( (PivotBetreeGraph.__default.FirstInGraph $ly@@695 |path#0@@81| |g#0@@113|)) ))))
(assert (forall (($ly@@696 T@U) (|path#0@@82| T@U) (|g#0@@114| T@U) ) (!  (=> (and (and (and (= (type $ly@@696) LayerTypeType) (= (type |path#0@@82|) (SeqType BoxType))) (= (type |g#0@@114|) (IMapType BoxType BoxType))) (and ($Is |path#0@@82| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@114| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)))) (and (=> (|PivotBetreeGraph.__default.FirstInGraph#requires| $ly@@696 |path#0@@82| |g#0@@114|) (exists ((|i#2@@43| Int) ) (!  (and (and (<= (LitInt 0) |i#2@@43|) (< |i#2@@43| (|Seq#Length| |path#0@@82|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@114|) (|Seq#Index| |path#0@@82| |i#2@@43|)))) :qid |Graphidf.134:21| :skolemid |4066| :pattern ( (|Seq#Index| |path#0@@82| |i#2@@43|)) ))) (=> (exists ((|i#2@@44| Int) ) (!  (and (and (<= (LitInt 0) |i#2@@44|) (< |i#2@@44| (|Seq#Length| |path#0@@82|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@114|) (|Seq#Index| |path#0@@82| |i#2@@44|)))) :qid |Graphidf.134:21| :skolemid |4066| :pattern ( (|Seq#Index| |path#0@@82| |i#2@@44|)) )) (|PivotBetreeGraph.__default.FirstInGraph#requires| $ly@@696 |path#0@@82| |g#0@@114|)))) :qid |Graphidf.133:12| :skolemid |4067| :pattern ( (|PivotBetreeGraph.__default.FirstInGraph#requires| $ly@@696 |path#0@@82| |g#0@@114|)) )))
(assert  (=> true (forall (($ly@@697 T@U) (|path#0@@83| T@U) (|g#0@@115| T@U) ) (!  (=> (and (and (and (= (type $ly@@697) LayerTypeType) (= (type |path#0@@83|) (SeqType BoxType))) (= (type |g#0@@115|) (IMapType BoxType BoxType))) (or (|PivotBetreeGraph.__default.FirstInGraph#canCall| |path#0@@83| |g#0@@115|) (and (and ($Is |path#0@@83| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@115| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) (exists ((|i#2@@45| Int) ) (!  (and (and (<= (LitInt 0) |i#2@@45|) (< |i#2@@45| (|Seq#Length| |path#0@@83|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@115|) (|Seq#Index| |path#0@@83| |i#2@@45|)))) :qid |Graphidf.134:21| :skolemid |4066| :pattern ( (|Seq#Index| |path#0@@83| |i#2@@45|)) ))))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@115|) (|Seq#Index| |path#0@@83| (LitInt 0))))) (|PivotBetreeGraph.__default.FirstInGraph#canCall| (|Seq#Drop| |path#0@@83| (LitInt 1)) |g#0@@115|)) (= (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@697) |path#0@@83| |g#0@@115|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@115|) (|Seq#Index| |path#0@@83| (LitInt 0)))) 0 (+ 1 (PivotBetreeGraph.__default.FirstInGraph $ly@@697 (|Seq#Drop| |path#0@@83| (LitInt 1)) |g#0@@115|)))))) :qid |Graphidf.133:12| :skolemid |4068| :pattern ( (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@697) |path#0@@83| |g#0@@115|)) ))))
(assert  (=> true (forall (($ly@@698 T@U) (|path#0@@84| T@U) (|g#0@@116| T@U) ) (!  (=> (and (and (and (= (type $ly@@698) LayerTypeType) (= (type |path#0@@84|) (SeqType BoxType))) (= (type |g#0@@116|) (IMapType BoxType BoxType))) (or (|PivotBetreeGraph.__default.FirstInGraph#canCall| (Lit |path#0@@84|) |g#0@@116|) (and (and ($Is |path#0@@84| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@116| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) (exists ((|i#3@@25| Int) ) (!  (and (and (<= (LitInt 0) |i#3@@25|) (< |i#3@@25| (|Seq#Length| (Lit |path#0@@84|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@116|) (|Seq#Index| (Lit |path#0@@84|) |i#3@@25|)))) :qid |Graphidf.134:21| :skolemid |4069| :pattern ( (|Seq#Index| |path#0@@84| |i#3@@25|)) ))))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@116|) (|Seq#Index| (Lit |path#0@@84|) (LitInt 0))))) (|PivotBetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@84|) (LitInt 1))) |g#0@@116|)) (= (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@698) (Lit |path#0@@84|) |g#0@@116|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@116|) (|Seq#Index| (Lit |path#0@@84|) (LitInt 0)))) 0 (+ 1 (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@698) (Lit (|Seq#Drop| (Lit |path#0@@84|) (LitInt 1))) |g#0@@116|)))))) :qid |Graphidf.133:12| :weight 3 :skolemid |4070| :pattern ( (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@698) (Lit |path#0@@84|) |g#0@@116|)) ))))
(assert  (=> true (forall (($ly@@699 T@U) (|path#0@@85| T@U) (|g#0@@117| T@U) ) (!  (=> (and (and (and (= (type $ly@@699) LayerTypeType) (= (type |path#0@@85|) (SeqType BoxType))) (= (type |g#0@@117|) (IMapType BoxType BoxType))) (or (|PivotBetreeGraph.__default.FirstInGraph#canCall| (Lit |path#0@@85|) (Lit |g#0@@117|)) (and (and ($Is |path#0@@85| (TSeq Tclass.ReferenceType.Reference)) ($Is |g#0@@117| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) (exists ((|i#4@@10| Int) ) (!  (and (and (<= (LitInt 0) |i#4@@10|) (< |i#4@@10| (|Seq#Length| (Lit |path#0@@85|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@117|) (|Seq#Index| (Lit |path#0@@85|) |i#4@@10|)))) :qid |Graphidf.134:21| :skolemid |4071| :pattern ( (|Seq#Index| |path#0@@85| |i#4@@10|)) ))))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@117|) (|Seq#Index| (Lit |path#0@@85|) (LitInt 0))))) (|PivotBetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@85|) (LitInt 1))) (Lit |g#0@@117|))) (= (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@699) (Lit |path#0@@85|) (Lit |g#0@@117|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@117|) (|Seq#Index| (Lit |path#0@@85|) (LitInt 0)))) 0 (+ 1 (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@699) (Lit (|Seq#Drop| (Lit |path#0@@85|) (LitInt 1))) (Lit |g#0@@117|))))))) :qid |Graphidf.133:12| :weight 3 :skolemid |4072| :pattern ( (PivotBetreeGraph.__default.FirstInGraph ($LS $ly@@699) (Lit |path#0@@85|) (Lit |g#0@@117|))) ))))
(assert (forall ((arg0@@567 T@U) (arg1@@326 T@U) (arg2@@226 T@U) (arg3@@152 T@U) (arg4@@117 T@U) ) (! (= (type (PivotBetreeGraph.__default.UndoLocalEdit arg0@@567 arg1@@326 arg2@@226 arg3@@152 arg4@@117)) (SeqType BoxType)) :qid |funType:PivotBetreeGraph.__default.UndoLocalEdit| :pattern ( (PivotBetreeGraph.__default.UndoLocalEdit arg0@@567 arg1@@326 arg2@@226 arg3@@152 arg4@@117)) )))
(assert (forall (($ly@@700 T@U) (|g#0@@118| T@U) (|g'#0@@40| T@U) (|p#0@@40| T@U) (|path#0@@86| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@700) LayerTypeType) (= (type |g#0@@118|) (IMapType BoxType BoxType))) (= (type |g'#0@@40|) (IMapType BoxType BoxType))) (= (type |p#0@@40|) BoxType)) (= (type |path#0@@86|) (SeqType BoxType))) (= (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@700) |g#0@@118| |g'#0@@40| |p#0@@40| |path#0@@86|) (PivotBetreeGraph.__default.UndoLocalEdit $ly@@700 |g#0@@118| |g'#0@@40| |p#0@@40| |path#0@@86|))) :qid |Graphidf.143:12| :skolemid |4073| :pattern ( (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@700) |g#0@@118| |g'#0@@40| |p#0@@40| |path#0@@86|)) )))
(assert (forall (($ly@@701 T@U) (|g#0@@119| T@U) (|g'#0@@41| T@U) (|p#0@@41| T@U) (|path#0@@87| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@701) LayerTypeType) (= (type |g#0@@119|) (IMapType BoxType BoxType))) (= (type |g'#0@@41|) (IMapType BoxType BoxType))) (= (type |p#0@@41|) BoxType)) (= (type |path#0@@87|) (SeqType BoxType))) (= (PivotBetreeGraph.__default.UndoLocalEdit $ly@@701 |g#0@@119| |g'#0@@41| |p#0@@41| |path#0@@87|) (PivotBetreeGraph.__default.UndoLocalEdit $LZ |g#0@@119| |g'#0@@41| |p#0@@41| |path#0@@87|))) :qid |Graphidf.143:12| :skolemid |4074| :pattern ( (PivotBetreeGraph.__default.UndoLocalEdit (AsFuelBottom $ly@@701) |g#0@@119| |g'#0@@41| |p#0@@41| |path#0@@87|)) )))
(assert  (=> true (forall (($ly@@702 T@U) (|g#0@@120| T@U) (|g'#0@@42| T@U) (|p#0@@42| T@U) (|path#0@@88| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@702) LayerTypeType) (= (type |g#0@@120|) (IMapType BoxType BoxType))) (= (type |g'#0@@42|) (IMapType BoxType BoxType))) (= (type |p#0@@42|) BoxType)) (= (type |path#0@@88|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@120| |g'#0@@42| |p#0@@42| |path#0@@88|) (and (and (and (and ($Is |g#0@@120| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node)) ($Is |g'#0@@42| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@42| Tclass.ReferenceType.Reference)) ($Is |path#0@@88| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (PivotBetreeGraph.__default.IsClosed |g#0@@120|) (< 1 (|Seq#Length| |path#0@@88|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@120|) (|Seq#Index| |path#0@@88| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@120|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@88|)))) (PivotBetreeGraph.__default.EditIsLocal |g#0@@120| |g'#0@@42| |p#0@@42|)) (PivotBetreeGraph.__default.IsPath |g'#0@@42| |path#0@@88|))))) (and (PivotBetreeGraph.__default.IsPathFromTo |g#0@@120| (PivotBetreeGraph.__default.UndoLocalEdit $ly@@702 |g#0@@120| |g'#0@@42| |p#0@@42| |path#0@@88|) (|Seq#Index| |path#0@@88| (LitInt 0)) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@88|)) ($Is (PivotBetreeGraph.__default.UndoLocalEdit $ly@@702 |g#0@@120| |g'#0@@42| |p#0@@42| |path#0@@88|) (TSeq Tclass.ReferenceType.Reference)))) :qid |Graphidf.143:12| :skolemid |4075| :pattern ( (PivotBetreeGraph.__default.UndoLocalEdit $ly@@702 |g#0@@120| |g'#0@@42| |p#0@@42| |path#0@@88|)) ))))
(assert (forall (($ly@@703 T@U) ($Heap@@105 T@U) (|g#0@@121| T@U) (|g'#0@@43| T@U) (|p#0@@43| T@U) (|path#0@@89| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@703) LayerTypeType) (= (type $Heap@@105) (MapType0Type refType MapType1Type))) (= (type |g#0@@121|) (IMapType BoxType BoxType))) (= (type |g'#0@@43|) (IMapType BoxType BoxType))) (= (type |p#0@@43|) BoxType)) (= (type |path#0@@89|) (SeqType BoxType))) (and (and (and (and ($IsGoodHeap $Heap@@105) ($Is |g#0@@121| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($Is |g'#0@@43| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@43| Tclass.ReferenceType.Reference)) ($Is |path#0@@89| (TSeq Tclass.ReferenceType.Reference)))) (and (=> (|PivotBetreeGraph.__default.UndoLocalEdit#requires| $ly@@703 |g#0@@121| |g'#0@@43| |p#0@@43| |path#0@@89|) (and (and (and (and (and (PivotBetreeGraph.__default.IsClosed |g#0@@121|) (< 1 (|Seq#Length| |path#0@@89|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@121|) (|Seq#Index| |path#0@@89| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@121|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@89|)))) (PivotBetreeGraph.__default.EditIsLocal |g#0@@121| |g'#0@@43| |p#0@@43|)) (PivotBetreeGraph.__default.IsPath |g'#0@@43| |path#0@@89|))) (=> (and (and (and (and (and (PivotBetreeGraph.__default.IsClosed |g#0@@121|) (< 1 (|Seq#Length| |path#0@@89|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@121|) (|Seq#Index| |path#0@@89| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@121|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@89|)))) (PivotBetreeGraph.__default.EditIsLocal |g#0@@121| |g'#0@@43| |p#0@@43|)) (PivotBetreeGraph.__default.IsPath |g'#0@@43| |path#0@@89|)) (|PivotBetreeGraph.__default.UndoLocalEdit#requires| $ly@@703 |g#0@@121| |g'#0@@43| |p#0@@43| |path#0@@89|)))) :qid |Graphidf.143:12| :skolemid |4076| :pattern ( (|PivotBetreeGraph.__default.UndoLocalEdit#requires| $ly@@703 |g#0@@121| |g'#0@@43| |p#0@@43| |path#0@@89|) ($IsGoodHeap $Heap@@105)) )))
(assert (forall ((arg0@@568 T@U) (arg1@@327 T@U) (arg2@@227 T@U) ) (! (= (type (|$let#29_replacement| arg0@@568 arg1@@327 arg2@@227)) (SeqType BoxType)) :qid |funType:$let#29_replacement| :pattern ( (|$let#29_replacement| arg0@@568 arg1@@327 arg2@@227)) )))
(assert (forall ((g@@0 T@U) (path@@0 T@U) (wit@@0 T@U) ) (!  (=> (and (and (and (= (type g@@0) (IMapType BoxType BoxType)) (= (type path@@0) (SeqType BoxType))) (= (type wit@@0) (SeqType BoxType))) (|$let#29$canCall| g@@0 path@@0 wit@@0)) (and ($Is (|$let#29_replacement| g@@0 path@@0 wit@@0) (TSeq Tclass.ReferenceType.Reference)) (PivotBetreeGraph.__default.IsPathFromTo g@@0 (|$let#29_replacement| g@@0 path@@0 wit@@0) (|Seq#Index| path@@0 (LitInt 0)) (Sequences.__default.Last Tclass.ReferenceType.Reference wit@@0)))) :qid |Graphidf.156:7| :skolemid |4077| :pattern ( (|$let#29_replacement| g@@0 path@@0 wit@@0)) )))
(assert  (=> true (forall (($ly@@704 T@U) ($Heap@@106 T@U) (|g#0@@122| T@U) (|g'#0@@44| T@U) (|p#0@@44| T@U) (|path#0@@90| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@704) LayerTypeType) (= (type $Heap@@106) (MapType0Type refType MapType1Type))) (= (type |g#0@@122|) (IMapType BoxType BoxType))) (= (type |g'#0@@44|) (IMapType BoxType BoxType))) (= (type |p#0@@44|) BoxType)) (= (type |path#0@@90|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@122| |g'#0@@44| |p#0@@44| |path#0@@90|) (and (and (and (and (and ($IsGoodHeap $Heap@@106) ($Is |g#0@@122| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($Is |g'#0@@44| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@44| Tclass.ReferenceType.Reference)) ($Is |path#0@@90| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (PivotBetreeGraph.__default.IsClosed |g#0@@122|) (< 1 (|Seq#Length| |path#0@@90|))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@122|) (|Seq#Index| |path#0@@90| (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@122|) (Sequences.__default.Last Tclass.ReferenceType.Reference |path#0@@90|)))) (PivotBetreeGraph.__default.EditIsLocal |g#0@@122| |g'#0@@44| |p#0@@44|)) (PivotBetreeGraph.__default.IsPath |g'#0@@44| |path#0@@90|))))) (and (and (=> (= (|Seq#Index| |path#0@@90| (LitInt 0)) |p#0@@44|) (and (|PivotBetreeGraph.__default.FirstInGraph#canCall| (|Seq#Drop| |path#0@@90| (LitInt 1)) |g#0@@122|) (let ((|len#0@@1| (+ 1 (PivotBetreeGraph.__default.FirstInGraph ($LS $LZ) (|Seq#Drop| |path#0@@90| (LitInt 1)) |g#0@@122|)))) (let ((|wit#1@@1| (|Seq#Take| |path#0@@90| (+ |len#0@@1| 1)))) (and (|$let#29$canCall| |g#0@@122| |path#0@@90| |wit#1@@1|) (=> (< |len#0@@1| (- (|Seq#Length| |path#0@@90|) 1)) (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (|$let#29_replacement| |g#0@@122| |path#0@@90| |wit#1@@1|)) (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@122| |g'#0@@44| |p#0@@44| (|Seq#Drop| |path#0@@90| |len#0@@1|))))))))) (=> (not (= (|Seq#Index| |path#0@@90| (LitInt 0)) |p#0@@44|)) (=> (not (= (|Seq#Length| |path#0@@90|) (LitInt 2))) (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@122| |g'#0@@44| |p#0@@44| (|Seq#Drop| |path#0@@90| (LitInt 1)))))) (= (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@704) |g#0@@122| |g'#0@@44| |p#0@@44| |path#0@@90|) (ite (= (|Seq#Index| |path#0@@90| (LitInt 0)) |p#0@@44|) (let ((|len#0@@2| (+ 1 (PivotBetreeGraph.__default.FirstInGraph ($LS $LZ) (|Seq#Drop| |path#0@@90| (LitInt 1)) |g#0@@122|)))) (let ((|wit#1@@2| (|Seq#Take| |path#0@@90| (+ |len#0@@2| 1)))) (let ((|replacement#0@@0| (|$let#29_replacement| |g#0@@122| |path#0@@90| |wit#1@@2|))) (ite (< |len#0@@2| (- (|Seq#Length| |path#0@@90|) 1)) (|Seq#Append| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |replacement#0@@0|) (PivotBetreeGraph.__default.UndoLocalEdit $ly@@704 |g#0@@122| |g'#0@@44| |p#0@@44| (|Seq#Drop| |path#0@@90| |len#0@@2|))) |replacement#0@@0|)))) (ite (= (|Seq#Length| |path#0@@90|) (LitInt 2)) |path#0@@90| (|Seq#Append| (|Seq#Take| |path#0@@90| (LitInt 1)) (PivotBetreeGraph.__default.UndoLocalEdit $ly@@704 |g#0@@122| |g'#0@@44| |p#0@@44| (|Seq#Drop| |path#0@@90| (LitInt 1))))))))) :qid |Graphidf.143:12| :skolemid |4078| :pattern ( (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@704) |g#0@@122| |g'#0@@44| |p#0@@44| |path#0@@90|) ($IsGoodHeap $Heap@@106)) ))))
(assert  (=> true (forall (($ly@@705 T@U) ($Heap@@107 T@U) (|g#0@@123| T@U) (|g'#0@@45| T@U) (|p#0@@45| T@U) (|path#0@@91| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@705) LayerTypeType) (= (type $Heap@@107) (MapType0Type refType MapType1Type))) (= (type |g#0@@123|) (IMapType BoxType BoxType))) (= (type |g'#0@@45|) (IMapType BoxType BoxType))) (= (type |p#0@@45|) BoxType)) (= (type |path#0@@91|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@123| |g'#0@@45| |p#0@@45| (Lit |path#0@@91|)) (and (and (and (and (and ($IsGoodHeap $Heap@@107) ($Is |g#0@@123| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($Is |g'#0@@45| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@45| Tclass.ReferenceType.Reference)) ($Is |path#0@@91| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (PivotBetreeGraph.__default.IsClosed |g#0@@123|) (< 1 (|Seq#Length| (Lit |path#0@@91|)))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@123|) (|Seq#Index| (Lit |path#0@@91|) (LitInt 0))))) (U_2_bool (MapType0Select (|IMap#Domain| |g#0@@123|) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@91|)))))) (PivotBetreeGraph.__default.EditIsLocal |g#0@@123| |g'#0@@45| |p#0@@45|)) (PivotBetreeGraph.__default.IsPath |g'#0@@45| (Lit |path#0@@91|)))))) (and (and (=> (= (|Seq#Index| (Lit |path#0@@91|) (LitInt 0)) |p#0@@45|) (and (|PivotBetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@91|) (LitInt 1))) |g#0@@123|) (let ((|len#1@@1| (+ 1 (PivotBetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@91|) (LitInt 1))) |g#0@@123|)))) (let ((|wit#2@@1| (|Seq#Take| (Lit |path#0@@91|) (+ |len#1@@1| 1)))) (and (|$let#29$canCall| |g#0@@123| (Lit |path#0@@91|) |wit#2@@1|) (=> (< |len#1@@1| (- (|Seq#Length| (Lit |path#0@@91|)) 1)) (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (|$let#29_replacement| |g#0@@123| (Lit |path#0@@91|) |wit#2@@1|)) (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@123| |g'#0@@45| |p#0@@45| (|Seq#Drop| (Lit |path#0@@91|) |len#1@@1|))))))))) (=> (not (= (|Seq#Index| (Lit |path#0@@91|) (LitInt 0)) |p#0@@45|)) (=> (not (= (|Seq#Length| (Lit |path#0@@91|)) (LitInt 2))) (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| |g#0@@123| |g'#0@@45| |p#0@@45| (Lit (|Seq#Drop| (Lit |path#0@@91|) (LitInt 1))))))) (= (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@705) |g#0@@123| |g'#0@@45| |p#0@@45| (Lit |path#0@@91|)) (ite (= (|Seq#Index| (Lit |path#0@@91|) (LitInt 0)) |p#0@@45|) (let ((|len#1@@2| (+ 1 (PivotBetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@91|) (LitInt 1))) |g#0@@123|)))) (let ((|wit#2@@2| (|Seq#Take| (Lit |path#0@@91|) (+ |len#1@@2| 1)))) (let ((|replacement#1@@0| (|$let#29_replacement| |g#0@@123| (Lit |path#0@@91|) |wit#2@@2|))) (ite (< |len#1@@2| (- (|Seq#Length| (Lit |path#0@@91|)) 1)) (|Seq#Append| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |replacement#1@@0|) (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@705) |g#0@@123| |g'#0@@45| |p#0@@45| (|Seq#Drop| (Lit |path#0@@91|) |len#1@@2|))) |replacement#1@@0|)))) (ite (= (|Seq#Length| (Lit |path#0@@91|)) (LitInt 2)) |path#0@@91| (|Seq#Append| (|Seq#Take| (Lit |path#0@@91|) (LitInt 1)) (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@705) |g#0@@123| |g'#0@@45| |p#0@@45| (Lit (|Seq#Drop| (Lit |path#0@@91|) (LitInt 1)))))))))) :qid |Graphidf.143:12| :weight 3 :skolemid |4079| :pattern ( (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@705) |g#0@@123| |g'#0@@45| |p#0@@45| (Lit |path#0@@91|)) ($IsGoodHeap $Heap@@107)) ))))
(assert  (=> true (forall (($ly@@706 T@U) ($Heap@@108 T@U) (|g#0@@124| T@U) (|g'#0@@46| T@U) (|p#0@@46| T@U) (|path#0@@92| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@706) LayerTypeType) (= (type $Heap@@108) (MapType0Type refType MapType1Type))) (= (type |g#0@@124|) (IMapType BoxType BoxType))) (= (type |g'#0@@46|) (IMapType BoxType BoxType))) (= (type |p#0@@46|) BoxType)) (= (type |path#0@@92|) (SeqType BoxType))) (or (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| (Lit |g#0@@124|) (Lit |g'#0@@46|) (Lit |p#0@@46|) (Lit |path#0@@92|)) (and (and (and (and (and ($IsGoodHeap $Heap@@108) ($Is |g#0@@124| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($Is |g'#0@@46| (TIMap Tclass.ReferenceType.Reference Tclass.PivotBetreeGraph.Node))) ($IsBox |p#0@@46| Tclass.ReferenceType.Reference)) ($Is |path#0@@92| (TSeq Tclass.ReferenceType.Reference))) (and (and (and (and (and (U_2_bool (Lit (bool_2_U (PivotBetreeGraph.__default.IsClosed (Lit |g#0@@124|))))) (< 1 (|Seq#Length| (Lit |path#0@@92|)))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@124|))) (|Seq#Index| (Lit |path#0@@92|) (LitInt 0))))) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |g#0@@124|))) (Lit (Sequences.__default.Last Tclass.ReferenceType.Reference (Lit |path#0@@92|)))))) (U_2_bool (Lit (bool_2_U (PivotBetreeGraph.__default.EditIsLocal (Lit |g#0@@124|) (Lit |g'#0@@46|) (Lit |p#0@@46|)))))) (U_2_bool (Lit (bool_2_U (PivotBetreeGraph.__default.IsPath (Lit |g'#0@@46|) (Lit |path#0@@92|))))))))) (and (and (=> (= (|Seq#Index| (Lit |path#0@@92|) (LitInt 0)) (Lit |p#0@@46|)) (and (|PivotBetreeGraph.__default.FirstInGraph#canCall| (Lit (|Seq#Drop| (Lit |path#0@@92|) (LitInt 1))) (Lit |g#0@@124|)) (let ((|len#2@@1| (LitInt (+ 1 (PivotBetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@92|) (LitInt 1))) (Lit |g#0@@124|)))))) (let ((|wit#3@@1| (|Seq#Take| (Lit |path#0@@92|) (+ |len#2@@1| 1)))) (and (|$let#29$canCall| (Lit |g#0@@124|) (Lit |path#0@@92|) |wit#3@@1|) (=> (< |len#2@@1| (- (|Seq#Length| (Lit |path#0@@92|)) 1)) (and (|Sequences.__default.DropLast#canCall| Tclass.ReferenceType.Reference (|$let#29_replacement| (Lit |g#0@@124|) (Lit |path#0@@92|) |wit#3@@1|)) (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| (Lit |g#0@@124|) (Lit |g'#0@@46|) (Lit |p#0@@46|) (|Seq#Drop| (Lit |path#0@@92|) |len#2@@1|))))))))) (=> (not (= (|Seq#Index| (Lit |path#0@@92|) (LitInt 0)) (Lit |p#0@@46|))) (=> (not (= (|Seq#Length| (Lit |path#0@@92|)) (LitInt 2))) (|PivotBetreeGraph.__default.UndoLocalEdit#canCall| (Lit |g#0@@124|) (Lit |g'#0@@46|) (Lit |p#0@@46|) (Lit (|Seq#Drop| (Lit |path#0@@92|) (LitInt 1))))))) (= (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@706) (Lit |g#0@@124|) (Lit |g'#0@@46|) (Lit |p#0@@46|) (Lit |path#0@@92|)) (ite (= (|Seq#Index| (Lit |path#0@@92|) (LitInt 0)) (Lit |p#0@@46|)) (let ((|len#2@@2| (LitInt (+ 1 (PivotBetreeGraph.__default.FirstInGraph ($LS $LZ) (Lit (|Seq#Drop| (Lit |path#0@@92|) (LitInt 1))) (Lit |g#0@@124|)))))) (let ((|wit#3@@2| (Lit (|Seq#Take| (Lit |path#0@@92|) (LitInt (+ |len#2@@2| 1)))))) (let ((|replacement#2@@0| (|$let#29_replacement| (Lit |g#0@@124|) (Lit |path#0@@92|) |wit#3@@2|))) (ite (< |len#2@@2| (- (|Seq#Length| (Lit |path#0@@92|)) 1)) (|Seq#Append| (Sequences.__default.DropLast Tclass.ReferenceType.Reference |replacement#2@@0|) (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@706) (Lit |g#0@@124|) (Lit |g'#0@@46|) (Lit |p#0@@46|) (Lit (|Seq#Drop| (Lit |path#0@@92|) |len#2@@2|)))) |replacement#2@@0|)))) (ite (= (|Seq#Length| (Lit |path#0@@92|)) (LitInt 2)) |path#0@@92| (|Seq#Append| (|Seq#Take| (Lit |path#0@@92|) (LitInt 1)) (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@706) (Lit |g#0@@124|) (Lit |g'#0@@46|) (Lit |p#0@@46|) (Lit (|Seq#Drop| (Lit |path#0@@92|) (LitInt 1)))))))))) :qid |Graphidf.143:12| :weight 3 :skolemid |4080| :pattern ( (PivotBetreeGraph.__default.UndoLocalEdit ($LS $ly@@706) (Lit |g#0@@124|) (Lit |g'#0@@46|) (Lit |p#0@@46|) (Lit |path#0@@92|)) ($IsGoodHeap $Heap@@108)) ))))
(assert (forall ((arg0@@569 T@U) (arg1@@328 T@U) ) (! (= (type (|#PivotBetreeGraph.Op.AllocOp| arg0@@569 arg1@@328)) DatatypeTypeType) :qid |funType:#PivotBetreeGraph.Op.AllocOp| :pattern ( (|#PivotBetreeGraph.Op.AllocOp| arg0@@569 arg1@@328)) )))
(assert (forall ((|a#0#0#0@@5| T@U) (|a#0#1#0@@3| T@U) ) (!  (=> (and (= (type |a#0#0#0@@5|) BoxType) (= (type |a#0#1#0@@3|) DatatypeTypeType)) (= (DatatypeCtorId (|#PivotBetreeGraph.Op.AllocOp| |a#0#0#0@@5| |a#0#1#0@@3|)) |##PivotBetreeGraph.Op.AllocOp|)) :qid |Graphidf.46:15| :skolemid |4081| :pattern ( (|#PivotBetreeGraph.Op.AllocOp| |a#0#0#0@@5| |a#0#1#0@@3|)) )))
(assert (forall ((d@@154 T@U) ) (!  (=> (= (type d@@154) DatatypeTypeType) (and (=> (PivotBetreeGraph.Op.AllocOp_q d@@154) (= (DatatypeCtorId d@@154) |##PivotBetreeGraph.Op.AllocOp|)) (=> (= (DatatypeCtorId d@@154) |##PivotBetreeGraph.Op.AllocOp|) (PivotBetreeGraph.Op.AllocOp_q d@@154)))) :qid |unknown.0:0| :skolemid |4082| :pattern ( (PivotBetreeGraph.Op.AllocOp_q d@@154)) )))
(assert (forall ((d@@155 T@U) ) (!  (=> (and (= (type d@@155) DatatypeTypeType) (PivotBetreeGraph.Op.AllocOp_q d@@155)) (exists ((|a#1#0#0@@5| T@U) (|a#1#1#0@@3| T@U) ) (!  (and (and (= (type |a#1#0#0@@5|) BoxType) (= (type |a#1#1#0@@3|) DatatypeTypeType)) (= d@@155 (|#PivotBetreeGraph.Op.AllocOp| |a#1#0#0@@5| |a#1#1#0@@3|))) :qid |Graphidf.46:15| :skolemid |4083| :no-pattern (type |a#1#0#0@@5|) :no-pattern (type |a#1#1#0@@3|) :no-pattern (U_2_int |a#1#0#0@@5|) :no-pattern (U_2_bool |a#1#0#0@@5|) :no-pattern (U_2_int |a#1#1#0@@3|) :no-pattern (U_2_bool |a#1#1#0@@3|) ))) :qid |unknown.0:0| :skolemid |4084| :pattern ( (PivotBetreeGraph.Op.AllocOp_q d@@155)) )))
(assert (= (type Tclass.PivotBetreeGraph.Op) TyType))
(assert (= (Tag Tclass.PivotBetreeGraph.Op) Tagclass.PivotBetreeGraph.Op))
(assert (forall ((bx@@173 T@U) ) (!  (=> (and (= (type bx@@173) BoxType) ($IsBox bx@@173 Tclass.PivotBetreeGraph.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@173)) bx@@173) ($Is ($Unbox DatatypeTypeType bx@@173) Tclass.PivotBetreeGraph.Op))) :qid |unknown.0:0| :skolemid |4085| :pattern ( ($IsBox bx@@173 Tclass.PivotBetreeGraph.Op)) )))
(assert (forall ((|a#2#0#0@@5| T@U) (|a#2#1#0@@3| T@U) ) (!  (=> (and (= (type |a#2#0#0@@5|) BoxType) (= (type |a#2#1#0@@3|) DatatypeTypeType)) (and (=> ($Is (|#PivotBetreeGraph.Op.AllocOp| |a#2#0#0@@5| |a#2#1#0@@3|) Tclass.PivotBetreeGraph.Op) (and ($IsBox |a#2#0#0@@5| Tclass.ReferenceType.Reference) ($Is |a#2#1#0@@3| Tclass.PivotBetreeGraph.Node))) (=> (and ($IsBox |a#2#0#0@@5| Tclass.ReferenceType.Reference) ($Is |a#2#1#0@@3| Tclass.PivotBetreeGraph.Node)) ($Is (|#PivotBetreeGraph.Op.AllocOp| |a#2#0#0@@5| |a#2#1#0@@3|) Tclass.PivotBetreeGraph.Op)))) :qid |Graphidf.46:15| :skolemid |4086| :pattern ( ($Is (|#PivotBetreeGraph.Op.AllocOp| |a#2#0#0@@5| |a#2#1#0@@3|) Tclass.PivotBetreeGraph.Op)) )))
(assert (forall ((|a#3#0#0@@5| T@U) (|a#3#1#0@@3| T@U) ($h@@138 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@5|) BoxType) (= (type |a#3#1#0@@3|) DatatypeTypeType)) (= (type $h@@138) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@138)) (and (=> ($IsAlloc (|#PivotBetreeGraph.Op.AllocOp| |a#3#0#0@@5| |a#3#1#0@@3|) Tclass.PivotBetreeGraph.Op $h@@138) (and ($IsAllocBox |a#3#0#0@@5| Tclass.ReferenceType.Reference $h@@138) ($IsAlloc |a#3#1#0@@3| Tclass.PivotBetreeGraph.Node $h@@138))) (=> (and ($IsAllocBox |a#3#0#0@@5| Tclass.ReferenceType.Reference $h@@138) ($IsAlloc |a#3#1#0@@3| Tclass.PivotBetreeGraph.Node $h@@138)) ($IsAlloc (|#PivotBetreeGraph.Op.AllocOp| |a#3#0#0@@5| |a#3#1#0@@3|) Tclass.PivotBetreeGraph.Op $h@@138)))) :qid |Graphidf.46:15| :skolemid |4087| :pattern ( ($IsAlloc (|#PivotBetreeGraph.Op.AllocOp| |a#3#0#0@@5| |a#3#1#0@@3|) Tclass.PivotBetreeGraph.Op $h@@138)) )))
(assert (forall ((arg0@@570 T@U) ) (! (= (type (PivotBetreeGraph.Op.ref arg0@@570)) BoxType) :qid |funType:PivotBetreeGraph.Op.ref| :pattern ( (PivotBetreeGraph.Op.ref arg0@@570)) )))
(assert (forall ((d@@156 T@U) ($h@@139 T@U) ) (!  (=> (and (and (= (type d@@156) DatatypeTypeType) (= (type $h@@139) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@139) (and (PivotBetreeGraph.Op.AllocOp_q d@@156) ($IsAlloc d@@156 Tclass.PivotBetreeGraph.Op $h@@139)))) ($IsAllocBox (PivotBetreeGraph.Op.ref d@@156) Tclass.ReferenceType.Reference $h@@139)) :qid |unknown.0:0| :skolemid |4088| :pattern ( ($IsAllocBox (PivotBetreeGraph.Op.ref d@@156) Tclass.ReferenceType.Reference $h@@139)) )))
(assert (forall ((arg0@@571 T@U) ) (! (= (type (PivotBetreeGraph.Op.node arg0@@571)) DatatypeTypeType) :qid |funType:PivotBetreeGraph.Op.node| :pattern ( (PivotBetreeGraph.Op.node arg0@@571)) )))
(assert (forall ((d@@157 T@U) ($h@@140 T@U) ) (!  (=> (and (and (= (type d@@157) DatatypeTypeType) (= (type $h@@140) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@140) (and (PivotBetreeGraph.Op.AllocOp_q d@@157) ($IsAlloc d@@157 Tclass.PivotBetreeGraph.Op $h@@140)))) ($IsAlloc (PivotBetreeGraph.Op.node d@@157) Tclass.PivotBetreeGraph.Node $h@@140)) :qid |unknown.0:0| :skolemid |4089| :pattern ( ($IsAlloc (PivotBetreeGraph.Op.node d@@157) Tclass.PivotBetreeGraph.Node $h@@140)) )))
(assert (forall ((|a#4#0#0@@5| T@U) (|a#4#1#0@@3| T@U) ) (!  (=> (and (= (type |a#4#0#0@@5|) BoxType) (= (type |a#4#1#0@@3|) DatatypeTypeType)) (= (|#PivotBetreeGraph.Op.AllocOp| (Lit |a#4#0#0@@5|) (Lit |a#4#1#0@@3|)) (Lit (|#PivotBetreeGraph.Op.AllocOp| |a#4#0#0@@5| |a#4#1#0@@3|)))) :qid |Graphidf.46:15| :skolemid |4090| :pattern ( (|#PivotBetreeGraph.Op.AllocOp| (Lit |a#4#0#0@@5|) (Lit |a#4#1#0@@3|))) )))
(assert (forall ((|a#5#0#0@@7| T@U) (|a#5#1#0@@3| T@U) ) (!  (=> (and (= (type |a#5#0#0@@7|) BoxType) (= (type |a#5#1#0@@3|) DatatypeTypeType)) (= (PivotBetreeGraph.Op.ref (|#PivotBetreeGraph.Op.AllocOp| |a#5#0#0@@7| |a#5#1#0@@3|)) |a#5#0#0@@7|)) :qid |Graphidf.46:15| :skolemid |4091| :pattern ( (|#PivotBetreeGraph.Op.AllocOp| |a#5#0#0@@7| |a#5#1#0@@3|)) )))
(assert (forall ((|a#6#0#0@@7| T@U) (|a#6#1#0@@3| T@U) ) (!  (=> (and (= (type |a#6#0#0@@7|) BoxType) (= (type |a#6#1#0@@3|) DatatypeTypeType)) (= (PivotBetreeGraph.Op.node (|#PivotBetreeGraph.Op.AllocOp| |a#6#0#0@@7| |a#6#1#0@@3|)) |a#6#1#0@@3|)) :qid |Graphidf.46:15| :skolemid |4092| :pattern ( (|#PivotBetreeGraph.Op.AllocOp| |a#6#0#0@@7| |a#6#1#0@@3|)) )))
(assert (forall ((|a#7#0#0@@7| T@U) (|a#7#1#0@@3| T@U) ) (!  (=> (and (= (type |a#7#0#0@@7|) BoxType) (= (type |a#7#1#0@@3|) DatatypeTypeType)) (< (DtRank |a#7#1#0@@3|) (DtRank (|#PivotBetreeGraph.Op.AllocOp| |a#7#0#0@@7| |a#7#1#0@@3|)))) :qid |Graphidf.46:15| :skolemid |4093| :pattern ( (|#PivotBetreeGraph.Op.AllocOp| |a#7#0#0@@7| |a#7#1#0@@3|)) )))
(assert (forall ((arg0@@572 T@U) (arg1@@329 T@U) ) (! (= (type (|#PivotBetreeGraph.Op.WriteOp| arg0@@572 arg1@@329)) DatatypeTypeType) :qid |funType:#PivotBetreeGraph.Op.WriteOp| :pattern ( (|#PivotBetreeGraph.Op.WriteOp| arg0@@572 arg1@@329)) )))
(assert (forall ((|a#8#0#0@@7| T@U) (|a#8#1#0@@3| T@U) ) (!  (=> (and (= (type |a#8#0#0@@7|) BoxType) (= (type |a#8#1#0@@3|) DatatypeTypeType)) (= (DatatypeCtorId (|#PivotBetreeGraph.Op.WriteOp| |a#8#0#0@@7| |a#8#1#0@@3|)) |##PivotBetreeGraph.Op.WriteOp|)) :qid |Graphidf.47:15| :skolemid |4094| :pattern ( (|#PivotBetreeGraph.Op.WriteOp| |a#8#0#0@@7| |a#8#1#0@@3|)) )))
(assert (forall ((d@@158 T@U) ) (!  (=> (= (type d@@158) DatatypeTypeType) (and (=> (PivotBetreeGraph.Op.WriteOp_q d@@158) (= (DatatypeCtorId d@@158) |##PivotBetreeGraph.Op.WriteOp|)) (=> (= (DatatypeCtorId d@@158) |##PivotBetreeGraph.Op.WriteOp|) (PivotBetreeGraph.Op.WriteOp_q d@@158)))) :qid |unknown.0:0| :skolemid |4095| :pattern ( (PivotBetreeGraph.Op.WriteOp_q d@@158)) )))
(assert (forall ((d@@159 T@U) ) (!  (=> (and (= (type d@@159) DatatypeTypeType) (PivotBetreeGraph.Op.WriteOp_q d@@159)) (exists ((|a#9#0#0@@6| T@U) (|a#9#1#0@@2| T@U) ) (!  (and (and (= (type |a#9#0#0@@6|) BoxType) (= (type |a#9#1#0@@2|) DatatypeTypeType)) (= d@@159 (|#PivotBetreeGraph.Op.WriteOp| |a#9#0#0@@6| |a#9#1#0@@2|))) :qid |Graphidf.47:15| :skolemid |4096| :no-pattern (type |a#9#0#0@@6|) :no-pattern (type |a#9#1#0@@2|) :no-pattern (U_2_int |a#9#0#0@@6|) :no-pattern (U_2_bool |a#9#0#0@@6|) :no-pattern (U_2_int |a#9#1#0@@2|) :no-pattern (U_2_bool |a#9#1#0@@2|) ))) :qid |unknown.0:0| :skolemid |4097| :pattern ( (PivotBetreeGraph.Op.WriteOp_q d@@159)) )))
(assert (forall ((|a#10#0#0@@6| T@U) (|a#10#1#0@@2| T@U) ) (!  (=> (and (= (type |a#10#0#0@@6|) BoxType) (= (type |a#10#1#0@@2|) DatatypeTypeType)) (and (=> ($Is (|#PivotBetreeGraph.Op.WriteOp| |a#10#0#0@@6| |a#10#1#0@@2|) Tclass.PivotBetreeGraph.Op) (and ($IsBox |a#10#0#0@@6| Tclass.ReferenceType.Reference) ($Is |a#10#1#0@@2| Tclass.PivotBetreeGraph.Node))) (=> (and ($IsBox |a#10#0#0@@6| Tclass.ReferenceType.Reference) ($Is |a#10#1#0@@2| Tclass.PivotBetreeGraph.Node)) ($Is (|#PivotBetreeGraph.Op.WriteOp| |a#10#0#0@@6| |a#10#1#0@@2|) Tclass.PivotBetreeGraph.Op)))) :qid |Graphidf.47:15| :skolemid |4098| :pattern ( ($Is (|#PivotBetreeGraph.Op.WriteOp| |a#10#0#0@@6| |a#10#1#0@@2|) Tclass.PivotBetreeGraph.Op)) )))
(assert (forall ((|a#11#0#0@@6| T@U) (|a#11#1#0@@2| T@U) ($h@@141 T@U) ) (!  (=> (and (and (and (= (type |a#11#0#0@@6|) BoxType) (= (type |a#11#1#0@@2|) DatatypeTypeType)) (= (type $h@@141) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@141)) (and (=> ($IsAlloc (|#PivotBetreeGraph.Op.WriteOp| |a#11#0#0@@6| |a#11#1#0@@2|) Tclass.PivotBetreeGraph.Op $h@@141) (and ($IsAllocBox |a#11#0#0@@6| Tclass.ReferenceType.Reference $h@@141) ($IsAlloc |a#11#1#0@@2| Tclass.PivotBetreeGraph.Node $h@@141))) (=> (and ($IsAllocBox |a#11#0#0@@6| Tclass.ReferenceType.Reference $h@@141) ($IsAlloc |a#11#1#0@@2| Tclass.PivotBetreeGraph.Node $h@@141)) ($IsAlloc (|#PivotBetreeGraph.Op.WriteOp| |a#11#0#0@@6| |a#11#1#0@@2|) Tclass.PivotBetreeGraph.Op $h@@141)))) :qid |Graphidf.47:15| :skolemid |4099| :pattern ( ($IsAlloc (|#PivotBetreeGraph.Op.WriteOp| |a#11#0#0@@6| |a#11#1#0@@2|) Tclass.PivotBetreeGraph.Op $h@@141)) )))
(assert (forall ((d@@160 T@U) ($h@@142 T@U) ) (!  (=> (and (and (= (type d@@160) DatatypeTypeType) (= (type $h@@142) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@142) (and (PivotBetreeGraph.Op.WriteOp_q d@@160) ($IsAlloc d@@160 Tclass.PivotBetreeGraph.Op $h@@142)))) ($IsAllocBox (PivotBetreeGraph.Op.ref d@@160) Tclass.ReferenceType.Reference $h@@142)) :qid |unknown.0:0| :skolemid |4100| :pattern ( ($IsAllocBox (PivotBetreeGraph.Op.ref d@@160) Tclass.ReferenceType.Reference $h@@142)) )))
(assert (forall ((d@@161 T@U) ($h@@143 T@U) ) (!  (=> (and (and (= (type d@@161) DatatypeTypeType) (= (type $h@@143) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@143) (and (PivotBetreeGraph.Op.WriteOp_q d@@161) ($IsAlloc d@@161 Tclass.PivotBetreeGraph.Op $h@@143)))) ($IsAlloc (PivotBetreeGraph.Op.node d@@161) Tclass.PivotBetreeGraph.Node $h@@143)) :qid |unknown.0:0| :skolemid |4101| :pattern ( ($IsAlloc (PivotBetreeGraph.Op.node d@@161) Tclass.PivotBetreeGraph.Node $h@@143)) )))
(assert (forall ((|a#12#0#0@@4| T@U) (|a#12#1#0@@2| T@U) ) (!  (=> (and (= (type |a#12#0#0@@4|) BoxType) (= (type |a#12#1#0@@2|) DatatypeTypeType)) (= (|#PivotBetreeGraph.Op.WriteOp| (Lit |a#12#0#0@@4|) (Lit |a#12#1#0@@2|)) (Lit (|#PivotBetreeGraph.Op.WriteOp| |a#12#0#0@@4| |a#12#1#0@@2|)))) :qid |Graphidf.47:15| :skolemid |4102| :pattern ( (|#PivotBetreeGraph.Op.WriteOp| (Lit |a#12#0#0@@4|) (Lit |a#12#1#0@@2|))) )))
(assert (forall ((|a#13#0#0@@3| T@U) (|a#13#1#0@@3| T@U) ) (!  (=> (and (= (type |a#13#0#0@@3|) BoxType) (= (type |a#13#1#0@@3|) DatatypeTypeType)) (= (PivotBetreeGraph.Op.ref (|#PivotBetreeGraph.Op.WriteOp| |a#13#0#0@@3| |a#13#1#0@@3|)) |a#13#0#0@@3|)) :qid |Graphidf.47:15| :skolemid |4103| :pattern ( (|#PivotBetreeGraph.Op.WriteOp| |a#13#0#0@@3| |a#13#1#0@@3|)) )))
(assert (forall ((|a#14#0#0@@2| T@U) (|a#14#1#0@@2| T@U) ) (!  (=> (and (= (type |a#14#0#0@@2|) BoxType) (= (type |a#14#1#0@@2|) DatatypeTypeType)) (= (PivotBetreeGraph.Op.node (|#PivotBetreeGraph.Op.WriteOp| |a#14#0#0@@2| |a#14#1#0@@2|)) |a#14#1#0@@2|)) :qid |Graphidf.47:15| :skolemid |4104| :pattern ( (|#PivotBetreeGraph.Op.WriteOp| |a#14#0#0@@2| |a#14#1#0@@2|)) )))
(assert (forall ((|a#15#0#0@@2| T@U) (|a#15#1#0@@2| T@U) ) (!  (=> (and (= (type |a#15#0#0@@2|) BoxType) (= (type |a#15#1#0@@2|) DatatypeTypeType)) (< (DtRank |a#15#1#0@@2|) (DtRank (|#PivotBetreeGraph.Op.WriteOp| |a#15#0#0@@2| |a#15#1#0@@2|)))) :qid |Graphidf.47:15| :skolemid |4105| :pattern ( (|#PivotBetreeGraph.Op.WriteOp| |a#15#0#0@@2| |a#15#1#0@@2|)) )))
(assert (forall ((d@@162 T@U) ) (!  (=> (and (= (type d@@162) DatatypeTypeType) (|$IsA#PivotBetreeGraph.Op| d@@162)) (or (PivotBetreeGraph.Op.AllocOp_q d@@162) (PivotBetreeGraph.Op.WriteOp_q d@@162))) :qid |unknown.0:0| :skolemid |4106| :pattern ( (|$IsA#PivotBetreeGraph.Op| d@@162)) )))
(assert (forall ((d@@163 T@U) ) (!  (=> (and (= (type d@@163) DatatypeTypeType) ($Is d@@163 Tclass.PivotBetreeGraph.Op)) (or (PivotBetreeGraph.Op.AllocOp_q d@@163) (PivotBetreeGraph.Op.WriteOp_q d@@163))) :qid |unknown.0:0| :skolemid |4107| :pattern ( (PivotBetreeGraph.Op.WriteOp_q d@@163) ($Is d@@163 Tclass.PivotBetreeGraph.Op)) :pattern ( (PivotBetreeGraph.Op.AllocOp_q d@@163) ($Is d@@163 Tclass.PivotBetreeGraph.Op)) )))
(assert (forall ((a@@183 T@U) (b@@114 T@U) ) (!  (=> (and (and (= (type a@@183) DatatypeTypeType) (= (type b@@114) DatatypeTypeType)) (and (PivotBetreeGraph.Op.AllocOp_q a@@183) (PivotBetreeGraph.Op.AllocOp_q b@@114))) (and (=> (|PivotBetreeGraph.Op#Equal| a@@183 b@@114) (and (= (PivotBetreeGraph.Op.ref a@@183) (PivotBetreeGraph.Op.ref b@@114)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeGraph.Op.node a@@183) (PivotBetreeGraph.Op.node b@@114)))) (=> (and (= (PivotBetreeGraph.Op.ref a@@183) (PivotBetreeGraph.Op.ref b@@114)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeGraph.Op.node a@@183) (PivotBetreeGraph.Op.node b@@114))) (|PivotBetreeGraph.Op#Equal| a@@183 b@@114)))) :qid |unknown.0:0| :skolemid |4108| :pattern ( (|PivotBetreeGraph.Op#Equal| a@@183 b@@114) (PivotBetreeGraph.Op.AllocOp_q a@@183)) :pattern ( (|PivotBetreeGraph.Op#Equal| a@@183 b@@114) (PivotBetreeGraph.Op.AllocOp_q b@@114)) )))
(assert (forall ((a@@184 T@U) (b@@115 T@U) ) (!  (=> (and (and (= (type a@@184) DatatypeTypeType) (= (type b@@115) DatatypeTypeType)) (and (PivotBetreeGraph.Op.WriteOp_q a@@184) (PivotBetreeGraph.Op.WriteOp_q b@@115))) (and (=> (|PivotBetreeGraph.Op#Equal| a@@184 b@@115) (and (= (PivotBetreeGraph.Op.ref a@@184) (PivotBetreeGraph.Op.ref b@@115)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeGraph.Op.node a@@184) (PivotBetreeGraph.Op.node b@@115)))) (=> (and (= (PivotBetreeGraph.Op.ref a@@184) (PivotBetreeGraph.Op.ref b@@115)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeGraph.Op.node a@@184) (PivotBetreeGraph.Op.node b@@115))) (|PivotBetreeGraph.Op#Equal| a@@184 b@@115)))) :qid |unknown.0:0| :skolemid |4109| :pattern ( (|PivotBetreeGraph.Op#Equal| a@@184 b@@115) (PivotBetreeGraph.Op.WriteOp_q a@@184)) :pattern ( (|PivotBetreeGraph.Op#Equal| a@@184 b@@115) (PivotBetreeGraph.Op.WriteOp_q b@@115)) )))
(assert (forall ((a@@185 T@U) (b@@116 T@U) ) (!  (=> (and (= (type a@@185) DatatypeTypeType) (= (type b@@116) DatatypeTypeType)) (and (=> (|PivotBetreeGraph.Op#Equal| a@@185 b@@116) (= a@@185 b@@116)) (=> (= a@@185 b@@116) (|PivotBetreeGraph.Op#Equal| a@@185 b@@116)))) :qid |unknown.0:0| :skolemid |4110| :pattern ( (|PivotBetreeGraph.Op#Equal| a@@185 b@@116)) )))
(assert (forall ((arg0@@573 T@U) (arg1@@330 T@U) ) (! (= (type (|#PivotBetreeGraph.ReadOp.ReadOp| arg0@@573 arg1@@330)) DatatypeTypeType) :qid |funType:#PivotBetreeGraph.ReadOp.ReadOp| :pattern ( (|#PivotBetreeGraph.ReadOp.ReadOp| arg0@@573 arg1@@330)) )))
(assert (forall ((|a#16#0#0@@2| T@U) (|a#16#1#0@@2| T@U) ) (!  (=> (and (= (type |a#16#0#0@@2|) BoxType) (= (type |a#16#1#0@@2|) DatatypeTypeType)) (= (DatatypeCtorId (|#PivotBetreeGraph.ReadOp.ReadOp| |a#16#0#0@@2| |a#16#1#0@@2|)) |##PivotBetreeGraph.ReadOp.ReadOp|)) :qid |Graphidf.50:14| :skolemid |4111| :pattern ( (|#PivotBetreeGraph.ReadOp.ReadOp| |a#16#0#0@@2| |a#16#1#0@@2|)) )))
(assert (forall ((d@@164 T@U) ) (!  (=> (= (type d@@164) DatatypeTypeType) (and (=> (PivotBetreeGraph.ReadOp.ReadOp_q d@@164) (= (DatatypeCtorId d@@164) |##PivotBetreeGraph.ReadOp.ReadOp|)) (=> (= (DatatypeCtorId d@@164) |##PivotBetreeGraph.ReadOp.ReadOp|) (PivotBetreeGraph.ReadOp.ReadOp_q d@@164)))) :qid |unknown.0:0| :skolemid |4112| :pattern ( (PivotBetreeGraph.ReadOp.ReadOp_q d@@164)) )))
(assert (forall ((d@@165 T@U) ) (!  (=> (and (= (type d@@165) DatatypeTypeType) (PivotBetreeGraph.ReadOp.ReadOp_q d@@165)) (exists ((|a#17#0#0@@3| T@U) (|a#17#1#0@@2| T@U) ) (!  (and (and (= (type |a#17#0#0@@3|) BoxType) (= (type |a#17#1#0@@2|) DatatypeTypeType)) (= d@@165 (|#PivotBetreeGraph.ReadOp.ReadOp| |a#17#0#0@@3| |a#17#1#0@@2|))) :qid |Graphidf.50:14| :skolemid |4113| :no-pattern (type |a#17#0#0@@3|) :no-pattern (type |a#17#1#0@@2|) :no-pattern (U_2_int |a#17#0#0@@3|) :no-pattern (U_2_bool |a#17#0#0@@3|) :no-pattern (U_2_int |a#17#1#0@@2|) :no-pattern (U_2_bool |a#17#1#0@@2|) ))) :qid |unknown.0:0| :skolemid |4114| :pattern ( (PivotBetreeGraph.ReadOp.ReadOp_q d@@165)) )))
(assert (= (type Tclass.PivotBetreeGraph.ReadOp) TyType))
(assert (= (Tag Tclass.PivotBetreeGraph.ReadOp) Tagclass.PivotBetreeGraph.ReadOp))
(assert (forall ((bx@@174 T@U) ) (!  (=> (and (= (type bx@@174) BoxType) ($IsBox bx@@174 Tclass.PivotBetreeGraph.ReadOp)) (and (= ($Box ($Unbox DatatypeTypeType bx@@174)) bx@@174) ($Is ($Unbox DatatypeTypeType bx@@174) Tclass.PivotBetreeGraph.ReadOp))) :qid |unknown.0:0| :skolemid |4115| :pattern ( ($IsBox bx@@174 Tclass.PivotBetreeGraph.ReadOp)) )))
(assert (forall ((|a#18#0#0@@3| T@U) (|a#18#1#0@@2| T@U) ) (!  (=> (and (= (type |a#18#0#0@@3|) BoxType) (= (type |a#18#1#0@@2|) DatatypeTypeType)) (and (=> ($Is (|#PivotBetreeGraph.ReadOp.ReadOp| |a#18#0#0@@3| |a#18#1#0@@2|) Tclass.PivotBetreeGraph.ReadOp) (and ($IsBox |a#18#0#0@@3| Tclass.ReferenceType.Reference) ($Is |a#18#1#0@@2| Tclass.PivotBetreeGraph.Node))) (=> (and ($IsBox |a#18#0#0@@3| Tclass.ReferenceType.Reference) ($Is |a#18#1#0@@2| Tclass.PivotBetreeGraph.Node)) ($Is (|#PivotBetreeGraph.ReadOp.ReadOp| |a#18#0#0@@3| |a#18#1#0@@2|) Tclass.PivotBetreeGraph.ReadOp)))) :qid |Graphidf.50:14| :skolemid |4116| :pattern ( ($Is (|#PivotBetreeGraph.ReadOp.ReadOp| |a#18#0#0@@3| |a#18#1#0@@2|) Tclass.PivotBetreeGraph.ReadOp)) )))
(assert (forall ((|a#19#0#0@@3| T@U) (|a#19#1#0@@2| T@U) ($h@@144 T@U) ) (!  (=> (and (and (and (= (type |a#19#0#0@@3|) BoxType) (= (type |a#19#1#0@@2|) DatatypeTypeType)) (= (type $h@@144) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@144)) (and (=> ($IsAlloc (|#PivotBetreeGraph.ReadOp.ReadOp| |a#19#0#0@@3| |a#19#1#0@@2|) Tclass.PivotBetreeGraph.ReadOp $h@@144) (and ($IsAllocBox |a#19#0#0@@3| Tclass.ReferenceType.Reference $h@@144) ($IsAlloc |a#19#1#0@@2| Tclass.PivotBetreeGraph.Node $h@@144))) (=> (and ($IsAllocBox |a#19#0#0@@3| Tclass.ReferenceType.Reference $h@@144) ($IsAlloc |a#19#1#0@@2| Tclass.PivotBetreeGraph.Node $h@@144)) ($IsAlloc (|#PivotBetreeGraph.ReadOp.ReadOp| |a#19#0#0@@3| |a#19#1#0@@2|) Tclass.PivotBetreeGraph.ReadOp $h@@144)))) :qid |Graphidf.50:14| :skolemid |4117| :pattern ( ($IsAlloc (|#PivotBetreeGraph.ReadOp.ReadOp| |a#19#0#0@@3| |a#19#1#0@@2|) Tclass.PivotBetreeGraph.ReadOp $h@@144)) )))
(assert (forall ((arg0@@574 T@U) ) (! (= (type (PivotBetreeGraph.ReadOp.ref arg0@@574)) BoxType) :qid |funType:PivotBetreeGraph.ReadOp.ref| :pattern ( (PivotBetreeGraph.ReadOp.ref arg0@@574)) )))
(assert (forall ((d@@166 T@U) ($h@@145 T@U) ) (!  (=> (and (and (= (type d@@166) DatatypeTypeType) (= (type $h@@145) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@145) (and (PivotBetreeGraph.ReadOp.ReadOp_q d@@166) ($IsAlloc d@@166 Tclass.PivotBetreeGraph.ReadOp $h@@145)))) ($IsAllocBox (PivotBetreeGraph.ReadOp.ref d@@166) Tclass.ReferenceType.Reference $h@@145)) :qid |unknown.0:0| :skolemid |4118| :pattern ( ($IsAllocBox (PivotBetreeGraph.ReadOp.ref d@@166) Tclass.ReferenceType.Reference $h@@145)) )))
(assert (forall ((arg0@@575 T@U) ) (! (= (type (PivotBetreeGraph.ReadOp.node arg0@@575)) DatatypeTypeType) :qid |funType:PivotBetreeGraph.ReadOp.node| :pattern ( (PivotBetreeGraph.ReadOp.node arg0@@575)) )))
(assert (forall ((d@@167 T@U) ($h@@146 T@U) ) (!  (=> (and (and (= (type d@@167) DatatypeTypeType) (= (type $h@@146) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@146) (and (PivotBetreeGraph.ReadOp.ReadOp_q d@@167) ($IsAlloc d@@167 Tclass.PivotBetreeGraph.ReadOp $h@@146)))) ($IsAlloc (PivotBetreeGraph.ReadOp.node d@@167) Tclass.PivotBetreeGraph.Node $h@@146)) :qid |unknown.0:0| :skolemid |4119| :pattern ( ($IsAlloc (PivotBetreeGraph.ReadOp.node d@@167) Tclass.PivotBetreeGraph.Node $h@@146)) )))
(assert (forall ((|a#20#0#0@@3| T@U) (|a#20#1#0@@2| T@U) ) (!  (=> (and (= (type |a#20#0#0@@3|) BoxType) (= (type |a#20#1#0@@2|) DatatypeTypeType)) (= (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit |a#20#0#0@@3|) (Lit |a#20#1#0@@2|)) (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| |a#20#0#0@@3| |a#20#1#0@@2|)))) :qid |Graphidf.50:14| :skolemid |4120| :pattern ( (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit |a#20#0#0@@3|) (Lit |a#20#1#0@@2|))) )))
(assert (forall ((|a#21#0#0@@3| T@U) (|a#21#1#0@@2| T@U) ) (!  (=> (and (= (type |a#21#0#0@@3|) BoxType) (= (type |a#21#1#0@@2|) DatatypeTypeType)) (= (PivotBetreeGraph.ReadOp.ref (|#PivotBetreeGraph.ReadOp.ReadOp| |a#21#0#0@@3| |a#21#1#0@@2|)) |a#21#0#0@@3|)) :qid |Graphidf.50:14| :skolemid |4121| :pattern ( (|#PivotBetreeGraph.ReadOp.ReadOp| |a#21#0#0@@3| |a#21#1#0@@2|)) )))
(assert (forall ((|a#22#0#0@@3| T@U) (|a#22#1#0@@2| T@U) ) (!  (=> (and (= (type |a#22#0#0@@3|) BoxType) (= (type |a#22#1#0@@2|) DatatypeTypeType)) (= (PivotBetreeGraph.ReadOp.node (|#PivotBetreeGraph.ReadOp.ReadOp| |a#22#0#0@@3| |a#22#1#0@@2|)) |a#22#1#0@@2|)) :qid |Graphidf.50:14| :skolemid |4122| :pattern ( (|#PivotBetreeGraph.ReadOp.ReadOp| |a#22#0#0@@3| |a#22#1#0@@2|)) )))
(assert (forall ((|a#23#0#0@@3| T@U) (|a#23#1#0@@2| T@U) ) (!  (=> (and (= (type |a#23#0#0@@3|) BoxType) (= (type |a#23#1#0@@2|) DatatypeTypeType)) (< (DtRank |a#23#1#0@@2|) (DtRank (|#PivotBetreeGraph.ReadOp.ReadOp| |a#23#0#0@@3| |a#23#1#0@@2|)))) :qid |Graphidf.50:14| :skolemid |4123| :pattern ( (|#PivotBetreeGraph.ReadOp.ReadOp| |a#23#0#0@@3| |a#23#1#0@@2|)) )))
(assert (forall ((d@@168 T@U) ) (!  (=> (and (= (type d@@168) DatatypeTypeType) (|$IsA#PivotBetreeGraph.ReadOp| d@@168)) (PivotBetreeGraph.ReadOp.ReadOp_q d@@168)) :qid |unknown.0:0| :skolemid |4124| :pattern ( (|$IsA#PivotBetreeGraph.ReadOp| d@@168)) )))
(assert (forall ((d@@169 T@U) ) (!  (=> (and (= (type d@@169) DatatypeTypeType) ($Is d@@169 Tclass.PivotBetreeGraph.ReadOp)) (PivotBetreeGraph.ReadOp.ReadOp_q d@@169)) :qid |unknown.0:0| :skolemid |4125| :pattern ( (PivotBetreeGraph.ReadOp.ReadOp_q d@@169) ($Is d@@169 Tclass.PivotBetreeGraph.ReadOp)) )))
(assert (forall ((a@@186 T@U) (b@@117 T@U) ) (!  (=> (and (and (= (type a@@186) DatatypeTypeType) (= (type b@@117) DatatypeTypeType)) true) (and (=> (|PivotBetreeGraph.ReadOp#Equal| a@@186 b@@117) (and (= (PivotBetreeGraph.ReadOp.ref a@@186) (PivotBetreeGraph.ReadOp.ref b@@117)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeGraph.ReadOp.node a@@186) (PivotBetreeGraph.ReadOp.node b@@117)))) (=> (and (= (PivotBetreeGraph.ReadOp.ref a@@186) (PivotBetreeGraph.ReadOp.ref b@@117)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeGraph.ReadOp.node a@@186) (PivotBetreeGraph.ReadOp.node b@@117))) (|PivotBetreeGraph.ReadOp#Equal| a@@186 b@@117)))) :qid |unknown.0:0| :skolemid |4126| :pattern ( (|PivotBetreeGraph.ReadOp#Equal| a@@186 b@@117)) )))
(assert (forall ((a@@187 T@U) (b@@118 T@U) ) (!  (=> (and (= (type a@@187) DatatypeTypeType) (= (type b@@118) DatatypeTypeType)) (and (=> (|PivotBetreeGraph.ReadOp#Equal| a@@187 b@@118) (= a@@187 b@@118)) (=> (= a@@187 b@@118) (|PivotBetreeGraph.ReadOp#Equal| a@@187 b@@118)))) :qid |unknown.0:0| :skolemid |4127| :pattern ( (|PivotBetreeGraph.ReadOp#Equal| a@@187 b@@118)) )))
(assert (= (type Tclass.Bounds.__default) TyType))
(assert (= (Tag Tclass.Bounds.__default) Tagclass.Bounds.__default))
(assert (forall ((bx@@175 T@U) ) (!  (=> (and (= (type bx@@175) BoxType) ($IsBox bx@@175 Tclass.Bounds.__default)) (and (= ($Box ($Unbox refType bx@@175)) bx@@175) ($Is ($Unbox refType bx@@175) Tclass.Bounds.__default))) :qid |unknown.0:0| :skolemid |4128| :pattern ( ($IsBox bx@@175 Tclass.Bounds.__default)) )))
(assert (forall (($o@@62 T@U) ) (!  (=> (= (type $o@@62) refType) (and (=> ($Is $o@@62 Tclass.Bounds.__default) (or (= $o@@62 null) (= (dtype $o@@62) Tclass.Bounds.__default))) (=> (or (= $o@@62 null) (= (dtype $o@@62) Tclass.Bounds.__default)) ($Is $o@@62 Tclass.Bounds.__default)))) :qid |unknown.0:0| :skolemid |4129| :pattern ( ($Is $o@@62 Tclass.Bounds.__default)) )))
(assert (forall (($o@@63 T@U) ($h@@147 T@U) ) (!  (=> (and (= (type $o@@63) refType) (= (type $h@@147) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@63 Tclass.Bounds.__default $h@@147) (or (= $o@@63 null) (U_2_bool (MapType1Select (MapType0Select $h@@147 $o@@63) alloc)))) (=> (or (= $o@@63 null) (U_2_bool (MapType1Select (MapType0Select $h@@147 $o@@63) alloc))) ($IsAlloc $o@@63 Tclass.Bounds.__default $h@@147)))) :qid |unknown.0:0| :skolemid |4130| :pattern ( ($IsAlloc $o@@63 Tclass.Bounds.__default $h@@147)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.NodeBlockSizeUint64) (< Bounds.__default.NodeBlockSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.NodeBlockSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.NodeBlockSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.NodeBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.NodeBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MinNodeBlockIndexUint64) (< Bounds.__default.MinNodeBlockIndexUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.MinNodeBlockIndexUint64#requires| true))
(assert  (=> true |Bounds.__default.MinNodeBlockIndexUint64#requires|))
(assert  (=> true (=> true (and (and (and (and (and |Bounds.__default.SuperblockSizeUint64#canCall| (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| |Bounds.__default.JournalBlockSizeUint64#canCall|)) |Bounds.__default.IndirectionTableBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) (= Bounds.__default.MinNodeBlockIndexUint64 (LitInt (Div (- (+ (+ (+ (Mul (LitInt 2) (LitInt Bounds.__default.SuperblockSizeUint64)) (Mul (LitInt Bounds.__default.DiskNumJournalBlocksUint64) (LitInt Bounds.__default.JournalBlockSizeUint64))) (Mul (LitInt 2) (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))) Bounds.__default.NodeBlockSizeUint64) 1) (LitInt Bounds.__default.NodeBlockSizeUint64))))))))
(assert  (=> true (=> true (and (and (and (and (and |Bounds.__default.SuperblockSizeUint64#canCall| (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| |Bounds.__default.JournalBlockSizeUint64#canCall|)) |Bounds.__default.IndirectionTableBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) (= Bounds.__default.MinNodeBlockIndexUint64 (LitInt (Div (- (+ (+ (+ (Mul (LitInt 2) (LitInt Bounds.__default.SuperblockSizeUint64)) (Mul (LitInt Bounds.__default.DiskNumJournalBlocksUint64) (LitInt Bounds.__default.JournalBlockSizeUint64))) (Mul (LitInt 2) (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))) Bounds.__default.NodeBlockSizeUint64) 1) (LitInt Bounds.__default.NodeBlockSizeUint64))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.SuperblockSizeUint64) (< Bounds.__default.SuperblockSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.SuperblockSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.SuperblockSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.SuperblockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (= Bounds.__default.SuperblockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.JournalBlockSizeUint64) (< Bounds.__default.JournalBlockSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.JournalBlockSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.JournalBlockSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.JournalBlockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (= Bounds.__default.JournalBlockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.DiskNumJournalBlocksUint64) (< Bounds.__default.DiskNumJournalBlocksUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.DiskNumJournalBlocksUint64#requires| true))
(assert  (=> true |Bounds.__default.DiskNumJournalBlocksUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.DiskNumJournalBlocksUint64 (LitInt (Mul (LitInt 64) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.DiskNumJournalBlocksUint64 (LitInt (Mul (LitInt 64) (LitInt 1024)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.IndirectionTableBlockSizeUint64) (< Bounds.__default.IndirectionTableBlockSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.IndirectionTableBlockSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.IndirectionTableBlockSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 24) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 24) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (and (and (<= (LitInt Bounds.__default.IndirectionTableBlockSizeUint64) Bounds.__default.LargestBlockSizeOfAnyTypeUint64) (<= (LitInt Bounds.__default.NodeBlockSizeUint64) Bounds.__default.LargestBlockSizeOfAnyTypeUint64)) (and (<= (LitInt 0) Bounds.__default.LargestBlockSizeOfAnyTypeUint64) (< Bounds.__default.LargestBlockSizeOfAnyTypeUint64 18446744073709551616))))))
(assert  (=> |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires| true))
(assert  (=> true |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires|))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.LargestBlockSizeOfAnyTypeUint64 (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.LargestBlockSizeOfAnyTypeUint64 (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxTotalBucketWeightUint64) (< Bounds.__default.MaxTotalBucketWeightUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.MaxTotalBucketWeightUint64#requires| true))
(assert  (=> true |Bounds.__default.MaxTotalBucketWeightUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.MaxTotalBucketWeightUint64 (LitInt (- (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)) 65536))))))
(assert  (=> true (=> true (= Bounds.__default.MaxTotalBucketWeightUint64 (LitInt (- (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)) 65536))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxCacheSizeUint64) (< Bounds.__default.MaxCacheSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.MaxCacheSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.MaxCacheSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.MaxCacheSizeUint64 (LitInt 100)))))
(assert  (=> true (=> true (= Bounds.__default.MaxCacheSizeUint64 (LitInt 100)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxNumChildrenUint64) (< Bounds.__default.MaxNumChildrenUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.MaxNumChildrenUint64#requires| true))
(assert  (=> true |Bounds.__default.MaxNumChildrenUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.MaxNumChildrenUint64 (LitInt 8)))))
(assert  (=> true (=> true (= Bounds.__default.MaxNumChildrenUint64 (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.FlushTriggerWeightUint64) (< Bounds.__default.FlushTriggerWeightUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.FlushTriggerWeightUint64#requires| true))
(assert  (=> true |Bounds.__default.FlushTriggerWeightUint64#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeightUint64 (LitInt (Div Bounds.__default.MaxTotalBucketWeightUint64 (LitInt 8))))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeightUint64 (LitInt (Div Bounds.__default.MaxTotalBucketWeightUint64 (LitInt 8))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.NumBlocksUint64) (< Bounds.__default.NumBlocksUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.NumBlocksUint64#requires| true))
(assert  (=> true |Bounds.__default.NumBlocksUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.NumBlocksUint64 (LitInt 1048576)))))
(assert  (=> true (=> true (= Bounds.__default.NumBlocksUint64 (LitInt 1048576)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.IndirectionTableMaxSizeUint64) (< Bounds.__default.IndirectionTableMaxSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.IndirectionTableMaxSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.IndirectionTableMaxSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableMaxSizeUint64 (LitInt 4294967296)))))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableMaxSizeUint64 (LitInt 4294967296)))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.SuperblockSize#requires| true))
(assert  (=> true |Bounds.__default.SuperblockSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.SuperblockSizeUint64#canCall| (= Bounds.__default.SuperblockSize (LitInt Bounds.__default.SuperblockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.SuperblockSizeUint64#canCall| (= Bounds.__default.SuperblockSize (LitInt Bounds.__default.SuperblockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.IndirectionTableBlockSize#requires| true))
(assert  (=> true |Bounds.__default.IndirectionTableBlockSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.IndirectionTableBlockSize (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.IndirectionTableBlockSize (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.NodeBlockSize#requires| true))
(assert  (=> true |Bounds.__default.NodeBlockSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.NodeBlockSizeUint64#canCall| (= Bounds.__default.NodeBlockSize (LitInt Bounds.__default.NodeBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.NodeBlockSizeUint64#canCall| (= Bounds.__default.NodeBlockSize (LitInt Bounds.__default.NodeBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.MinNodeBlockIndex#requires| true))
(assert  (=> true |Bounds.__default.MinNodeBlockIndex#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MinNodeBlockIndexUint64#canCall| (= Bounds.__default.MinNodeBlockIndex (LitInt Bounds.__default.MinNodeBlockIndexUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MinNodeBlockIndexUint64#canCall| (= Bounds.__default.MinNodeBlockIndex (LitInt Bounds.__default.MinNodeBlockIndexUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.MaxNumChildren#requires| true))
(assert  (=> true |Bounds.__default.MaxNumChildren#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MaxNumChildrenUint64#canCall| (= Bounds.__default.MaxNumChildren (LitInt Bounds.__default.MaxNumChildrenUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxNumChildrenUint64#canCall| (= Bounds.__default.MaxNumChildren (LitInt Bounds.__default.MaxNumChildrenUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.MaxTotalBucketWeight#requires| true))
(assert  (=> true |Bounds.__default.MaxTotalBucketWeight#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.MaxTotalBucketWeight (LitInt Bounds.__default.MaxTotalBucketWeightUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.MaxTotalBucketWeight (LitInt Bounds.__default.MaxTotalBucketWeightUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.MaxCacheSize#requires| true))
(assert  (=> true |Bounds.__default.MaxCacheSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MaxCacheSizeUint64#canCall| (= Bounds.__default.MaxCacheSize (LitInt Bounds.__default.MaxCacheSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxCacheSizeUint64#canCall| (= Bounds.__default.MaxCacheSize (LitInt Bounds.__default.MaxCacheSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.FlushTriggerWeight#requires| true))
(assert  (=> true |Bounds.__default.FlushTriggerWeight#requires|))
(assert  (=> true (=> true (and |Bounds.__default.FlushTriggerWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeight (LitInt Bounds.__default.FlushTriggerWeightUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.FlushTriggerWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeight (LitInt Bounds.__default.FlushTriggerWeightUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.NumBlocks#requires| true))
(assert  (=> true |Bounds.__default.NumBlocks#requires|))
(assert  (=> true (=> true (and |Bounds.__default.NumBlocksUint64#canCall| (= Bounds.__default.NumBlocks (LitInt Bounds.__default.NumBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.NumBlocksUint64#canCall| (= Bounds.__default.NumBlocks (LitInt Bounds.__default.NumBlocksUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.IndirectionTableMaxSize#requires| true))
(assert  (=> true |Bounds.__default.IndirectionTableMaxSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| (= Bounds.__default.IndirectionTableMaxSize (LitInt Bounds.__default.IndirectionTableMaxSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| (= Bounds.__default.IndirectionTableMaxSize (LitInt Bounds.__default.IndirectionTableMaxSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.JournalBlockSize#requires| true))
(assert  (=> true |Bounds.__default.JournalBlockSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.JournalBlockSizeUint64#canCall| (= Bounds.__default.JournalBlockSize (LitInt Bounds.__default.JournalBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.JournalBlockSizeUint64#canCall| (= Bounds.__default.JournalBlockSize (LitInt Bounds.__default.JournalBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.DiskNumJournalBlocks#requires| true))
(assert  (=> true |Bounds.__default.DiskNumJournalBlocks#requires|))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= Bounds.__default.DiskNumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= Bounds.__default.DiskNumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert (= (type Tclass.Sets.__default) TyType))
(assert (= (Tag Tclass.Sets.__default) Tagclass.Sets.__default))
(assert (forall ((bx@@176 T@U) ) (!  (=> (and (= (type bx@@176) BoxType) ($IsBox bx@@176 Tclass.Sets.__default)) (and (= ($Box ($Unbox refType bx@@176)) bx@@176) ($Is ($Unbox refType bx@@176) Tclass.Sets.__default))) :qid |unknown.0:0| :skolemid |4131| :pattern ( ($IsBox bx@@176 Tclass.Sets.__default)) )))
(assert (forall (($o@@64 T@U) ) (!  (=> (= (type $o@@64) refType) (and (=> ($Is $o@@64 Tclass.Sets.__default) (or (= $o@@64 null) (= (dtype $o@@64) Tclass.Sets.__default))) (=> (or (= $o@@64 null) (= (dtype $o@@64) Tclass.Sets.__default)) ($Is $o@@64 Tclass.Sets.__default)))) :qid |unknown.0:0| :skolemid |4132| :pattern ( ($Is $o@@64 Tclass.Sets.__default)) )))
(assert (forall (($o@@65 T@U) ($h@@148 T@U) ) (!  (=> (and (= (type $o@@65) refType) (= (type $h@@148) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@65 Tclass.Sets.__default $h@@148) (or (= $o@@65 null) (U_2_bool (MapType1Select (MapType0Select $h@@148 $o@@65) alloc)))) (=> (or (= $o@@65 null) (U_2_bool (MapType1Select (MapType0Select $h@@148 $o@@65) alloc))) ($IsAlloc $o@@65 Tclass.Sets.__default $h@@148)))) :qid |unknown.0:0| :skolemid |4133| :pattern ( ($IsAlloc $o@@65 Tclass.Sets.__default $h@@148)) )))
(assert (forall ((arg0@@576 Int) ) (! (= (type (Sets.__default.SetRange arg0@@576)) (MapType0Type BoxType boolType)) :qid |funType:Sets.__default.SetRange| :pattern ( (Sets.__default.SetRange arg0@@576)) )))
(assert  (=> true (forall ((|n#0@@18| Int) ) (!  (=> true ($Is (Sets.__default.SetRange |n#0@@18|) (TSet TInt))) :qid |Setsidfy.32:21| :skolemid |4134| :pattern ( (Sets.__default.SetRange |n#0@@18|)) ))))
(assert (forall ((|n#0@@19| Int) ) (!  (and (=> (|Sets.__default.SetRange#requires| |n#0@@19|) true) (=> true (|Sets.__default.SetRange#requires| |n#0@@19|))) :qid |Setsidfy.32:21| :skolemid |4135| :pattern ( (|Sets.__default.SetRange#requires| |n#0@@19|)) )))
(assert (forall ((arg0@@577 T@U) (arg1@@331 Int) (arg2@@228 Int) ) (! (= (type (|lambda#368| arg0@@577 arg1@@331 arg2@@228)) (MapType0Type BoxType boolType)) :qid |funType:lambda#368| :pattern ( (|lambda#368| arg0@@577 arg1@@331 arg2@@228)) )))
(assert  (=> true (forall ((|n#0@@20| Int) ) (!  (=> true (= (Sets.__default.SetRange |n#0@@20|) (|lambda#368| TInt (LitInt 0) |n#0@@20|))) :qid |Setsidfy.32:21| :skolemid |4136| :pattern ( (Sets.__default.SetRange |n#0@@20|)) ))))
(assert  (=> true (forall ((|n#0@@21| Int) ) (!  (=> true (= (Sets.__default.SetRange (LitInt |n#0@@21|)) (|lambda#368| TInt (LitInt 0) |n#0@@21|))) :qid |Setsidfy.32:21| :weight 3 :skolemid |4137| :pattern ( (Sets.__default.SetRange (LitInt |n#0@@21|))) ))))
(assert (= (type Tclass.BucketWeights.__default) TyType))
(assert (= (Tag Tclass.BucketWeights.__default) Tagclass.BucketWeights.__default))
(assert (forall ((bx@@177 T@U) ) (!  (=> (and (= (type bx@@177) BoxType) ($IsBox bx@@177 Tclass.BucketWeights.__default)) (and (= ($Box ($Unbox refType bx@@177)) bx@@177) ($Is ($Unbox refType bx@@177) Tclass.BucketWeights.__default))) :qid |unknown.0:0| :skolemid |4138| :pattern ( ($IsBox bx@@177 Tclass.BucketWeights.__default)) )))
(assert (forall (($o@@66 T@U) ) (!  (=> (= (type $o@@66) refType) (and (=> ($Is $o@@66 Tclass.BucketWeights.__default) (or (= $o@@66 null) (= (dtype $o@@66) Tclass.BucketWeights.__default))) (=> (or (= $o@@66 null) (= (dtype $o@@66) Tclass.BucketWeights.__default)) ($Is $o@@66 Tclass.BucketWeights.__default)))) :qid |unknown.0:0| :skolemid |4139| :pattern ( ($Is $o@@66 Tclass.BucketWeights.__default)) )))
(assert (forall (($o@@67 T@U) ($h@@149 T@U) ) (!  (=> (and (= (type $o@@67) refType) (= (type $h@@149) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@67 Tclass.BucketWeights.__default $h@@149) (or (= $o@@67 null) (U_2_bool (MapType1Select (MapType0Select $h@@149 $o@@67) alloc)))) (=> (or (= $o@@67 null) (U_2_bool (MapType1Select (MapType0Select $h@@149 $o@@67) alloc))) ($IsAlloc $o@@67 Tclass.BucketWeights.__default $h@@149)))) :qid |unknown.0:0| :skolemid |4140| :pattern ( ($IsAlloc $o@@67 Tclass.BucketWeights.__default $h@@149)) )))
(assert  (=> true (forall ((|key#0@@216| T@U) ) (!  (=> (and (= (type |key#0@@216|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKey#canCall| |key#0@@216|) ($Is |key#0@@216| Tclass.KeyType.Key))) (and (>= (BucketWeights.__default.WeightKey |key#0@@216|) (LitInt 0)) (<= (LitInt 0) (BucketWeights.__default.WeightKey |key#0@@216|)))) :qid |BucketWe.32:22| :skolemid |4141| :pattern ( (BucketWeights.__default.WeightKey |key#0@@216|)) ))))
(assert (forall ((|key#0@@217| T@U) ) (!  (=> (and (= (type |key#0@@217|) (SeqType BoxType)) ($Is |key#0@@217| Tclass.KeyType.Key)) (and (=> (|BucketWeights.__default.WeightKey#requires| |key#0@@217|) true) (=> true (|BucketWeights.__default.WeightKey#requires| |key#0@@217|)))) :qid |BucketWe.32:22| :skolemid |4142| :pattern ( (|BucketWeights.__default.WeightKey#requires| |key#0@@217|)) )))
(assert  (=> true (forall ((|key#0@@218| T@U) ) (!  (=> (and (= (type |key#0@@218|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKey#canCall| |key#0@@218|) ($Is |key#0@@218| Tclass.KeyType.Key))) (= (BucketWeights.__default.WeightKey |key#0@@218|) (+ 4 (|Seq#Length| |key#0@@218|)))) :qid |BucketWe.32:22| :skolemid |4143| :pattern ( (BucketWeights.__default.WeightKey |key#0@@218|)) ))))
(assert  (=> true (forall ((|key#0@@219| T@U) ) (!  (=> (and (= (type |key#0@@219|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKey#canCall| (Lit |key#0@@219|)) ($Is |key#0@@219| Tclass.KeyType.Key))) (= (BucketWeights.__default.WeightKey (Lit |key#0@@219|)) (+ 4 (|Seq#Length| (Lit |key#0@@219|))))) :qid |BucketWe.32:22| :weight 3 :skolemid |4144| :pattern ( (BucketWeights.__default.WeightKey (Lit |key#0@@219|))) ))))
(assert  (=> true (forall ((|msg#0@@19| T@U) ) (!  (=> (and (= (type |msg#0@@19|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessage#canCall| |msg#0@@19|) ($Is |msg#0@@19| Tclass.ValueMessage.Message))) (and (>= (BucketWeights.__default.WeightMessage |msg#0@@19|) (LitInt 0)) (<= (LitInt 0) (BucketWeights.__default.WeightMessage |msg#0@@19|)))) :qid |BucketWe.38:26| :skolemid |4145| :pattern ( (BucketWeights.__default.WeightMessage |msg#0@@19|)) ))))
(assert (forall ((|msg#0@@20| T@U) ) (!  (=> (and (= (type |msg#0@@20|) DatatypeTypeType) ($Is |msg#0@@20| Tclass.ValueMessage.Message)) (and (=> (|BucketWeights.__default.WeightMessage#requires| |msg#0@@20|) true) (=> true (|BucketWeights.__default.WeightMessage#requires| |msg#0@@20|)))) :qid |BucketWe.38:26| :skolemid |4146| :pattern ( (|BucketWeights.__default.WeightMessage#requires| |msg#0@@20|)) )))
(assert  (=> true (forall ((|msg#0@@21| T@U) ) (!  (=> (and (= (type |msg#0@@21|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessage#canCall| |msg#0@@21|) ($Is |msg#0@@21| Tclass.ValueMessage.Message))) (and (=> (ValueMessage.Message.Define_q |msg#0@@21|) (let ((|value#0@@4| (ValueMessage.Message.value |msg#0@@21|))) (|ValueType.__default.Len#canCall| |value#0@@4|))) (= (BucketWeights.__default.WeightMessage |msg#0@@21|) (ite (ValueMessage.Message.Define_q |msg#0@@21|) (let ((|value#1@@0| (ValueMessage.Message.value |msg#0@@21|))) (+ 4 (ValueType.__default.Len |value#1@@0|))) (LitInt 0))))) :qid |BucketWe.38:26| :skolemid |4147| :pattern ( (BucketWeights.__default.WeightMessage |msg#0@@21|)) ))))
(assert  (=> true (forall ((|msg#0@@22| T@U) ) (!  (=> (and (= (type |msg#0@@22|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessage#canCall| (Lit |msg#0@@22|)) ($Is |msg#0@@22| Tclass.ValueMessage.Message))) (and (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit |msg#0@@22|))))) (let ((|value#2@@0| (Lit (ValueMessage.Message.value (Lit |msg#0@@22|))))) (|ValueType.__default.Len#canCall| |value#2@@0|))) (= (BucketWeights.__default.WeightMessage (Lit |msg#0@@22|)) (ite (ValueMessage.Message.Define_q (Lit |msg#0@@22|)) (let ((|value#3@@0| (Lit (ValueMessage.Message.value (Lit |msg#0@@22|))))) (LitInt (+ 4 (ValueType.__default.Len |value#3@@0|)))) (LitInt 0))))) :qid |BucketWe.38:26| :weight 3 :skolemid |4148| :pattern ( (BucketWeights.__default.WeightMessage (Lit |msg#0@@22|))) ))))
(assert  (=> true (forall ((|key#0@@220| T@U) ) (!  (=> (and (= (type |key#0@@220|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyUint64#canCall| |key#0@@220|) ($Is |key#0@@220| Tclass.KeyType.Key))) (and (= (BucketWeights.__default.WeightKeyUint64 |key#0@@220|) (BucketWeights.__default.WeightKey |key#0@@220|)) (and (<= (LitInt 0) (BucketWeights.__default.WeightKeyUint64 |key#0@@220|)) (< (BucketWeights.__default.WeightKeyUint64 |key#0@@220|) 18446744073709551616)))) :qid |BucketWe.55:35| :skolemid |4149| :pattern ( (BucketWeights.__default.WeightKeyUint64 |key#0@@220|)) ))))
(assert (forall ((|key#0@@221| T@U) ) (!  (=> (and (= (type |key#0@@221|) (SeqType BoxType)) ($Is |key#0@@221| Tclass.KeyType.Key)) (and (=> (|BucketWeights.__default.WeightKeyUint64#requires| |key#0@@221|) true) (=> true (|BucketWeights.__default.WeightKeyUint64#requires| |key#0@@221|)))) :qid |BucketWe.55:35| :skolemid |4150| :pattern ( (|BucketWeights.__default.WeightKeyUint64#requires| |key#0@@221|)) )))
(assert  (=> true (forall ((|key#0@@222| T@U) ) (!  (=> (and (= (type |key#0@@222|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyUint64#canCall| |key#0@@222|) ($Is |key#0@@222| Tclass.KeyType.Key))) (= (BucketWeights.__default.WeightKeyUint64 |key#0@@222|) (+ 4 (|Seq#Length| |key#0@@222|)))) :qid |BucketWe.55:35| :skolemid |4151| :pattern ( (BucketWeights.__default.WeightKeyUint64 |key#0@@222|)) ))))
(assert  (=> true (forall ((|key#0@@223| T@U) ) (!  (=> (and (= (type |key#0@@223|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyUint64#canCall| (Lit |key#0@@223|)) ($Is |key#0@@223| Tclass.KeyType.Key))) (= (BucketWeights.__default.WeightKeyUint64 (Lit |key#0@@223|)) (+ 4 (|Seq#Length| (Lit |key#0@@223|))))) :qid |BucketWe.55:35| :weight 3 :skolemid |4152| :pattern ( (BucketWeights.__default.WeightKeyUint64 (Lit |key#0@@223|))) ))))
(assert  (=> true (forall ((|msg#0@@23| T@U) ) (!  (=> (and (= (type |msg#0@@23|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessageUint64#canCall| |msg#0@@23|) ($Is |msg#0@@23| Tclass.ValueMessage.Message))) (and (= (BucketWeights.__default.WeightMessageUint64 |msg#0@@23|) (BucketWeights.__default.WeightMessage |msg#0@@23|)) (and (<= (LitInt 0) (BucketWeights.__default.WeightMessageUint64 |msg#0@@23|)) (< (BucketWeights.__default.WeightMessageUint64 |msg#0@@23|) 18446744073709551616)))) :qid |BucketWe.61:39| :skolemid |4153| :pattern ( (BucketWeights.__default.WeightMessageUint64 |msg#0@@23|)) ))))
(assert (forall ((|msg#0@@24| T@U) ) (!  (=> (and (= (type |msg#0@@24|) DatatypeTypeType) ($Is |msg#0@@24| Tclass.ValueMessage.Message)) (and (=> (|BucketWeights.__default.WeightMessageUint64#requires| |msg#0@@24|) true) (=> true (|BucketWeights.__default.WeightMessageUint64#requires| |msg#0@@24|)))) :qid |BucketWe.61:39| :skolemid |4154| :pattern ( (|BucketWeights.__default.WeightMessageUint64#requires| |msg#0@@24|)) )))
(assert  (=> true (forall ((|msg#0@@25| T@U) ) (!  (=> (and (= (type |msg#0@@25|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessageUint64#canCall| |msg#0@@25|) ($Is |msg#0@@25| Tclass.ValueMessage.Message))) (= (BucketWeights.__default.WeightMessageUint64 |msg#0@@25|) (ite (ValueMessage.Message.Define_q |msg#0@@25|) (let ((|value#1@@1| (ValueMessage.Message.value |msg#0@@25|))) (+ 4 (|Seq#Length| |value#1@@1|))) (LitInt 0)))) :qid |BucketWe.61:39| :skolemid |4155| :pattern ( (BucketWeights.__default.WeightMessageUint64 |msg#0@@25|)) ))))
(assert  (=> true (forall ((|msg#0@@26| T@U) ) (!  (=> (and (= (type |msg#0@@26|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessageUint64#canCall| (Lit |msg#0@@26|)) ($Is |msg#0@@26| Tclass.ValueMessage.Message))) (= (BucketWeights.__default.WeightMessageUint64 (Lit |msg#0@@26|)) (ite (ValueMessage.Message.Define_q (Lit |msg#0@@26|)) (let ((|value#3@@1| (Lit (ValueMessage.Message.value (Lit |msg#0@@26|))))) (+ 4 (|Seq#Length| |value#3@@1|))) (LitInt 0)))) :qid |BucketWe.61:39| :weight 3 :skolemid |4156| :pattern ( (BucketWeights.__default.WeightMessageUint64 (Lit |msg#0@@26|))) ))))
(assert (forall (($ly@@707 T@U) (|keys#0@@27| T@U) ) (!  (=> (and (= (type $ly@@707) LayerTypeType) (= (type |keys#0@@27|) (MapType0Type BoxType intType))) (= (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@707) |keys#0@@27|) (BucketWeights.__default.WeightKeyMultiset $ly@@707 |keys#0@@27|))) :qid |BucketWe.70:22| :skolemid |4157| :pattern ( (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@707) |keys#0@@27|)) )))
(assert (forall (($ly@@708 T@U) (|keys#0@@28| T@U) ) (!  (=> (and (= (type $ly@@708) LayerTypeType) (= (type |keys#0@@28|) (MapType0Type BoxType intType))) (= (BucketWeights.__default.WeightKeyMultiset $ly@@708 |keys#0@@28|) (BucketWeights.__default.WeightKeyMultiset $LZ |keys#0@@28|))) :qid |BucketWe.70:22| :skolemid |4158| :pattern ( (BucketWeights.__default.WeightKeyMultiset (AsFuelBottom $ly@@708) |keys#0@@28|)) )))
(assert  (=> true (forall (($ly@@709 T@U) (|keys#0@@29| T@U) ) (!  (=> (and (and (= (type $ly@@709) LayerTypeType) (= (type |keys#0@@29|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightKeyMultiset#canCall| |keys#0@@29|) ($Is |keys#0@@29| (TMultiSet Tclass.KeyType.Key)))) (and (=> (= (|MultiSet#Card| |keys#0@@29|) (LitInt 0)) (= (BucketWeights.__default.WeightKeyMultiset $ly@@709 |keys#0@@29|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightKeyMultiset $ly@@709 |keys#0@@29|)))) :qid |BucketWe.70:22| :skolemid |4159| :pattern ( (BucketWeights.__default.WeightKeyMultiset $ly@@709 |keys#0@@29|)) ))))
(assert (forall (($ly@@710 T@U) ($Heap@@109 T@U) (|keys#0@@30| T@U) ) (!  (=> (and (and (and (= (type $ly@@710) LayerTypeType) (= (type $Heap@@109) (MapType0Type refType MapType1Type))) (= (type |keys#0@@30|) (MapType0Type BoxType intType))) (and ($IsGoodHeap $Heap@@109) ($Is |keys#0@@30| (TMultiSet Tclass.KeyType.Key)))) (and (=> (|BucketWeights.__default.WeightKeyMultiset#requires| $ly@@710 |keys#0@@30|) true) (=> true (|BucketWeights.__default.WeightKeyMultiset#requires| $ly@@710 |keys#0@@30|)))) :qid |BucketWe.70:22| :skolemid |4160| :pattern ( (|BucketWeights.__default.WeightKeyMultiset#requires| $ly@@710 |keys#0@@30|) ($IsGoodHeap $Heap@@109)) )))
(assert (= (type |BucketWeights.__default.WeightKey#Handle|) HandleTypeType))
(assert (forall (($heap T@U) (|$fh$0x#0| T@U) ) (!  (=> (and (= (type $heap) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0|) BoxType)) (= (Apply1 Tclass.KeyType.Key Tclass._System.nat $heap |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0|) ($Box (int_2_U (BucketWeights.__default.WeightKey ($Unbox (SeqType BoxType) |$fh$0x#0|)))))) :qid |DafnyPre.521:12| :skolemid |4161| :pattern ( (Apply1 Tclass.KeyType.Key Tclass._System.nat $heap |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0|)) )))
(assert (forall (($heap@@0 T@U) (|$fh$0x#0@@0| T@U) ) (!  (=> (and (= (type $heap@@0) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@0|) BoxType)) (and (=> (Requires1 Tclass.KeyType.Key Tclass._System.nat $heap@@0 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@0|) (|BucketWeights.__default.WeightKey#requires| ($Unbox (SeqType BoxType) |$fh$0x#0@@0|))) (=> (|BucketWeights.__default.WeightKey#requires| ($Unbox (SeqType BoxType) |$fh$0x#0@@0|)) (Requires1 Tclass.KeyType.Key Tclass._System.nat $heap@@0 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@0|)))) :qid |DafnyPre.521:12| :skolemid |4162| :pattern ( (Requires1 Tclass.KeyType.Key Tclass._System.nat $heap@@0 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@0|)) )))
(assert (forall (($bx T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) ) (!  (=> (and (and (= (type $bx) BoxType) (= (type $heap@@1) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@1|) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 Tclass.KeyType.Key Tclass._System.nat $heap@@1 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@1|) $bx)) false) (=> false (U_2_bool (MapType0Select (Reads1 Tclass.KeyType.Key Tclass._System.nat $heap@@1 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@1|) $bx))))) :qid |unknown.0:0| :skolemid |4163| :pattern ( (MapType0Select (Reads1 Tclass.KeyType.Key Tclass._System.nat $heap@@1 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@1|) $bx)) )))
(assert (forall (($heap@@2 T@U) (|$fh$0x#0@@2| T@U) ) (!  (=> (and (= (type $heap@@2) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@2|) (SeqType BoxType))) (= (BucketWeights.__default.WeightKey |$fh$0x#0@@2|) (U_2_int ($Unbox intType (Apply1 Tclass.KeyType.Key Tclass._System.nat $heap@@2 |BucketWeights.__default.WeightKey#Handle| ($Box |$fh$0x#0@@2|)))))) :qid |DafnyPre.521:12| :skolemid |4164| :pattern ( (BucketWeights.__default.WeightKey |$fh$0x#0@@2|) ($IsGoodHeap $heap@@2)) )))
(assert (= (type |Multisets.__default.AddNat#Handle|) HandleTypeType))
(assert (forall (($heap@@3 T@U) (|$fh$0x#0@@3| T@U) (|$fh$0x#1| T@U) ) (!  (=> (and (and (= (type $heap@@3) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@3|) BoxType)) (= (type |$fh$0x#1|) BoxType)) (= (Apply2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@3 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@3| |$fh$0x#1|) ($Box (int_2_U (Multisets.__default.AddNat (U_2_int ($Unbox intType |$fh$0x#0@@3|)) (U_2_int ($Unbox intType |$fh$0x#1|))))))) :qid |DafnyPre.521:12| :skolemid |4165| :pattern ( (Apply2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@3 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@3| |$fh$0x#1|)) )))
(assert (forall (($heap@@4 T@U) (|$fh$0x#0@@4| T@U) (|$fh$0x#1@@0| T@U) ) (!  (=> (and (and (= (type $heap@@4) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@4|) BoxType)) (= (type |$fh$0x#1@@0|) BoxType)) (and (=> (Requires2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@4 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@4| |$fh$0x#1@@0|) (|Multisets.__default.AddNat#requires| (U_2_int ($Unbox intType |$fh$0x#0@@4|)) (U_2_int ($Unbox intType |$fh$0x#1@@0|)))) (=> (|Multisets.__default.AddNat#requires| (U_2_int ($Unbox intType |$fh$0x#0@@4|)) (U_2_int ($Unbox intType |$fh$0x#1@@0|))) (Requires2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@4 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@4| |$fh$0x#1@@0|)))) :qid |DafnyPre.521:12| :skolemid |4166| :pattern ( (Requires2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@4 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@4| |$fh$0x#1@@0|)) )))
(assert (forall (($bx@@0 T@U) ($heap@@5 T@U) (|$fh$0x#0@@5| T@U) (|$fh$0x#1@@1| T@U) ) (!  (=> (and (and (and (= (type $bx@@0) BoxType) (= (type $heap@@5) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@5|) BoxType)) (= (type |$fh$0x#1@@1|) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@5 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@5| |$fh$0x#1@@1|) $bx@@0)) false) (=> false (U_2_bool (MapType0Select (Reads2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@5 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@5| |$fh$0x#1@@1|) $bx@@0))))) :qid |unknown.0:0| :skolemid |4167| :pattern ( (MapType0Select (Reads2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@5 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@5| |$fh$0x#1@@1|) $bx@@0)) )))
(assert (forall (($heap@@6 T@U) (|$fh$0x#0@@6| Int) (|$fh$0x#1@@2| Int) ) (!  (=> (= (type $heap@@6) (MapType0Type refType MapType1Type)) (= (Multisets.__default.AddNat |$fh$0x#0@@6| |$fh$0x#1@@2|) (U_2_int ($Unbox intType (Apply2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@6 |Multisets.__default.AddNat#Handle| ($Box (int_2_U |$fh$0x#0@@6|)) ($Box (int_2_U |$fh$0x#1@@2|))))))) :qid |DafnyPre.521:12| :skolemid |4168| :pattern ( (Multisets.__default.AddNat |$fh$0x#0@@6| |$fh$0x#1@@2|) ($IsGoodHeap $heap@@6)) )))
(assert  (=> true (forall (($ly@@711 T@U) ($Heap@@110 T@U) (|keys#0@@31| T@U) ) (!  (=> (and (and (and (= (type $ly@@711) LayerTypeType) (= (type $Heap@@110) (MapType0Type refType MapType1Type))) (= (type |keys#0@@31|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightKeyMultiset#canCall| |keys#0@@31|) (and ($IsGoodHeap $Heap@@110) ($Is |keys#0@@31| (TMultiSet Tclass.KeyType.Key))))) (and (and (|Multisets.__default.Apply#canCall| Tclass.KeyType.Key Tclass._System.nat $Heap@@110 |BucketWeights.__default.WeightKey#Handle| |keys#0@@31|) (let ((|weights#0| (Multisets.__default.Apply Tclass.KeyType.Key Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@110 |BucketWeights.__default.WeightKey#Handle| |keys#0@@31|))) (|Multisets.__default.FoldSimple#canCall| Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#0|))) (= (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@711) |keys#0@@31|) (U_2_int (let ((|weights#0@@0| (Multisets.__default.Apply Tclass.KeyType.Key Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@110 |BucketWeights.__default.WeightKey#Handle| |keys#0@@31|))) ($Unbox intType (Multisets.__default.FoldSimple Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#0@@0|))))))) :qid |BucketWe.70:22| :skolemid |4169| :pattern ( (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@711) |keys#0@@31|) ($IsGoodHeap $Heap@@110)) ))))
(assert  (=> true (forall (($ly@@712 T@U) ($Heap@@111 T@U) (|keys#0@@32| T@U) ) (!  (=> (and (and (and (= (type $ly@@712) LayerTypeType) (= (type $Heap@@111) (MapType0Type refType MapType1Type))) (= (type |keys#0@@32|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightKeyMultiset#canCall| (Lit |keys#0@@32|)) (and ($IsGoodHeap $Heap@@111) ($Is |keys#0@@32| (TMultiSet Tclass.KeyType.Key))))) (and (and (|Multisets.__default.Apply#canCall| Tclass.KeyType.Key Tclass._System.nat $Heap@@111 |BucketWeights.__default.WeightKey#Handle| (Lit |keys#0@@32|)) (let ((|weights#1| (Multisets.__default.Apply Tclass.KeyType.Key Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@111 |BucketWeights.__default.WeightKey#Handle| (Lit |keys#0@@32|)))) (|Multisets.__default.FoldSimple#canCall| Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#1|))) (= (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@712) (Lit |keys#0@@32|)) (U_2_int (let ((|weights#1@@0| (Multisets.__default.Apply Tclass.KeyType.Key Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@111 |BucketWeights.__default.WeightKey#Handle| (Lit |keys#0@@32|)))) ($Unbox intType (Multisets.__default.FoldSimple Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#1@@0|))))))) :qid |BucketWe.70:22| :weight 3 :skolemid |4170| :pattern ( (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@712) (Lit |keys#0@@32|)) ($IsGoodHeap $Heap@@111)) ))))
(assert (forall (($ly@@713 T@U) (|keys#0@@33| T@U) ) (!  (=> (and (= (type $ly@@713) LayerTypeType) (= (type |keys#0@@33|) (SeqType BoxType))) (= (BucketWeights.__default.WeightKeySeq ($LS $ly@@713) |keys#0@@33|) (BucketWeights.__default.WeightKeySeq $ly@@713 |keys#0@@33|))) :qid |BucketWe.78:22| :skolemid |4171| :pattern ( (BucketWeights.__default.WeightKeySeq ($LS $ly@@713) |keys#0@@33|)) )))
(assert (forall (($ly@@714 T@U) (|keys#0@@34| T@U) ) (!  (=> (and (= (type $ly@@714) LayerTypeType) (= (type |keys#0@@34|) (SeqType BoxType))) (= (BucketWeights.__default.WeightKeySeq $ly@@714 |keys#0@@34|) (BucketWeights.__default.WeightKeySeq $LZ |keys#0@@34|))) :qid |BucketWe.78:22| :skolemid |4172| :pattern ( (BucketWeights.__default.WeightKeySeq (AsFuelBottom $ly@@714) |keys#0@@34|)) )))
(assert  (=> true (forall (($ly@@715 T@U) (|keys#0@@35| T@U) ) (!  (=> (and (and (= (type $ly@@715) LayerTypeType) (= (type |keys#0@@35|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightKeySeq#canCall| |keys#0@@35|) ($Is |keys#0@@35| (TSeq Tclass.KeyType.Key)))) (<= (LitInt 0) (BucketWeights.__default.WeightKeySeq $ly@@715 |keys#0@@35|))) :qid |BucketWe.78:22| :skolemid |4173| :pattern ( (BucketWeights.__default.WeightKeySeq $ly@@715 |keys#0@@35|)) ))))
(assert (forall (($ly@@716 T@U) ($Heap@@112 T@U) (|keys#0@@36| T@U) ) (!  (=> (and (and (and (= (type $ly@@716) LayerTypeType) (= (type $Heap@@112) (MapType0Type refType MapType1Type))) (= (type |keys#0@@36|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@112) ($Is |keys#0@@36| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketWeights.__default.WeightKeySeq#requires| $ly@@716 |keys#0@@36|) true) (=> true (|BucketWeights.__default.WeightKeySeq#requires| $ly@@716 |keys#0@@36|)))) :qid |BucketWe.78:22| :skolemid |4174| :pattern ( (|BucketWeights.__default.WeightKeySeq#requires| $ly@@716 |keys#0@@36|) ($IsGoodHeap $Heap@@112)) )))
(assert (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType))
(assert  (=> true (forall (($ly@@717 T@U) ($Heap@@113 T@U) (|keys#0@@37| T@U) ) (!  (=> (and (and (and (= (type $ly@@717) LayerTypeType) (= (type $Heap@@113) (MapType0Type refType MapType1Type))) (= (type |keys#0@@37|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightKeySeq#canCall| |keys#0@@37|) (and ($IsGoodHeap $Heap@@113) ($Is |keys#0@@37| (TSeq Tclass.KeyType.Key))))) (and (and (|Sequences.__default.ApplyOpaque#canCall| Tclass.KeyType.Key Tclass._System.nat $Heap@@113 |BucketWeights.__default.WeightKey#Handle| |keys#0@@37|) (let ((|weights#0@@1| (Sequences.__default.ApplyOpaque Tclass.KeyType.Key Tclass._System.nat StartFuel_Sequences._default.ApplyOpaque $Heap@@113 |BucketWeights.__default.WeightKey#Handle| |keys#0@@37|))) (|Sequences.__default.FoldFromRight#canCall| Tclass._System.nat Tclass._System.nat |Multisets.__default.AddNat#Handle| ($Box (int_2_U (LitInt 0))) |weights#0@@1|))) (= (BucketWeights.__default.WeightKeySeq ($LS $ly@@717) |keys#0@@37|) (U_2_int (let ((|weights#0@@2| (Sequences.__default.ApplyOpaque Tclass.KeyType.Key Tclass._System.nat StartFuel_Sequences._default.ApplyOpaque $Heap@@113 |BucketWeights.__default.WeightKey#Handle| |keys#0@@37|))) ($Unbox intType (Sequences.__default.FoldFromRight Tclass._System.nat Tclass._System.nat ($LS $LZ) |Multisets.__default.AddNat#Handle| ($Box (int_2_U (LitInt 0))) |weights#0@@2|))))))) :qid |BucketWe.78:22| :skolemid |4175| :pattern ( (BucketWeights.__default.WeightKeySeq ($LS $ly@@717) |keys#0@@37|) ($IsGoodHeap $Heap@@113)) ))))
(assert  (=> true (forall (($ly@@718 T@U) ($Heap@@114 T@U) (|keys#0@@38| T@U) ) (!  (=> (and (and (and (= (type $ly@@718) LayerTypeType) (= (type $Heap@@114) (MapType0Type refType MapType1Type))) (= (type |keys#0@@38|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightKeySeq#canCall| (Lit |keys#0@@38|)) (and ($IsGoodHeap $Heap@@114) ($Is |keys#0@@38| (TSeq Tclass.KeyType.Key))))) (and (and (|Sequences.__default.ApplyOpaque#canCall| Tclass.KeyType.Key Tclass._System.nat $Heap@@114 |BucketWeights.__default.WeightKey#Handle| (Lit |keys#0@@38|)) (let ((|weights#1@@1| (Sequences.__default.ApplyOpaque Tclass.KeyType.Key Tclass._System.nat StartFuel_Sequences._default.ApplyOpaque $Heap@@114 |BucketWeights.__default.WeightKey#Handle| (Lit |keys#0@@38|)))) (|Sequences.__default.FoldFromRight#canCall| Tclass._System.nat Tclass._System.nat |Multisets.__default.AddNat#Handle| ($Box (int_2_U (LitInt 0))) |weights#1@@1|))) (= (BucketWeights.__default.WeightKeySeq ($LS $ly@@718) (Lit |keys#0@@38|)) (U_2_int (let ((|weights#1@@2| (Sequences.__default.ApplyOpaque Tclass.KeyType.Key Tclass._System.nat StartFuel_Sequences._default.ApplyOpaque $Heap@@114 |BucketWeights.__default.WeightKey#Handle| (Lit |keys#0@@38|)))) ($Unbox intType (Sequences.__default.FoldFromRight Tclass._System.nat Tclass._System.nat ($LS $LZ) |Multisets.__default.AddNat#Handle| ($Box (int_2_U (LitInt 0))) |weights#1@@2|))))))) :qid |BucketWe.78:22| :weight 3 :skolemid |4176| :pattern ( (BucketWeights.__default.WeightKeySeq ($LS $ly@@718) (Lit |keys#0@@38|)) ($IsGoodHeap $Heap@@114)) ))))
(assert (forall (($ly@@719 T@U) (|msgs#0@@19| T@U) ) (!  (=> (and (= (type $ly@@719) LayerTypeType) (= (type |msgs#0@@19|) (MapType0Type BoxType intType))) (= (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@719) |msgs#0@@19|) (BucketWeights.__default.WeightMessageMultiset $ly@@719 |msgs#0@@19|))) :qid |BucketWe.124:22| :skolemid |4177| :pattern ( (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@719) |msgs#0@@19|)) )))
(assert (forall (($ly@@720 T@U) (|msgs#0@@20| T@U) ) (!  (=> (and (= (type $ly@@720) LayerTypeType) (= (type |msgs#0@@20|) (MapType0Type BoxType intType))) (= (BucketWeights.__default.WeightMessageMultiset $ly@@720 |msgs#0@@20|) (BucketWeights.__default.WeightMessageMultiset $LZ |msgs#0@@20|))) :qid |BucketWe.124:22| :skolemid |4178| :pattern ( (BucketWeights.__default.WeightMessageMultiset (AsFuelBottom $ly@@720) |msgs#0@@20|)) )))
(assert  (=> true (forall (($ly@@721 T@U) (|msgs#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@721) LayerTypeType) (= (type |msgs#0@@21|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightMessageMultiset#canCall| |msgs#0@@21|) ($Is |msgs#0@@21| (TMultiSet Tclass.ValueMessage.Message)))) (and (=> (= (|MultiSet#Card| |msgs#0@@21|) (LitInt 0)) (= (BucketWeights.__default.WeightMessageMultiset $ly@@721 |msgs#0@@21|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightMessageMultiset $ly@@721 |msgs#0@@21|)))) :qid |BucketWe.124:22| :skolemid |4179| :pattern ( (BucketWeights.__default.WeightMessageMultiset $ly@@721 |msgs#0@@21|)) ))))
(assert (forall (($ly@@722 T@U) ($Heap@@115 T@U) (|msgs#0@@22| T@U) ) (!  (=> (and (and (and (= (type $ly@@722) LayerTypeType) (= (type $Heap@@115) (MapType0Type refType MapType1Type))) (= (type |msgs#0@@22|) (MapType0Type BoxType intType))) (and ($IsGoodHeap $Heap@@115) ($Is |msgs#0@@22| (TMultiSet Tclass.ValueMessage.Message)))) (and (=> (|BucketWeights.__default.WeightMessageMultiset#requires| $ly@@722 |msgs#0@@22|) true) (=> true (|BucketWeights.__default.WeightMessageMultiset#requires| $ly@@722 |msgs#0@@22|)))) :qid |BucketWe.124:22| :skolemid |4180| :pattern ( (|BucketWeights.__default.WeightMessageMultiset#requires| $ly@@722 |msgs#0@@22|) ($IsGoodHeap $Heap@@115)) )))
(assert (= (type |BucketWeights.__default.WeightMessage#Handle|) HandleTypeType))
(assert (forall (($heap@@7 T@U) (|$fh$0x#0@@7| T@U) ) (!  (=> (and (= (type $heap@@7) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@7|) BoxType)) (= (Apply1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@7 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@7|) ($Box (int_2_U (BucketWeights.__default.WeightMessage ($Unbox DatatypeTypeType |$fh$0x#0@@7|)))))) :qid |DafnyPre.521:12| :skolemid |4181| :pattern ( (Apply1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@7 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@7|)) )))
(assert (forall (($heap@@8 T@U) (|$fh$0x#0@@8| T@U) ) (!  (=> (and (= (type $heap@@8) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@8|) BoxType)) (and (=> (Requires1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@8 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@8|) (|BucketWeights.__default.WeightMessage#requires| ($Unbox DatatypeTypeType |$fh$0x#0@@8|))) (=> (|BucketWeights.__default.WeightMessage#requires| ($Unbox DatatypeTypeType |$fh$0x#0@@8|)) (Requires1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@8 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@8|)))) :qid |DafnyPre.521:12| :skolemid |4182| :pattern ( (Requires1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@8 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@8|)) )))
(assert (forall (($bx@@1 T@U) ($heap@@9 T@U) (|$fh$0x#0@@9| T@U) ) (!  (=> (and (and (= (type $bx@@1) BoxType) (= (type $heap@@9) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@9|) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@9 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@9|) $bx@@1)) false) (=> false (U_2_bool (MapType0Select (Reads1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@9 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@9|) $bx@@1))))) :qid |unknown.0:0| :skolemid |4183| :pattern ( (MapType0Select (Reads1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@9 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@9|) $bx@@1)) )))
(assert (forall (($heap@@10 T@U) (|$fh$0x#0@@10| T@U) ) (!  (=> (and (= (type $heap@@10) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@10|) DatatypeTypeType)) (= (BucketWeights.__default.WeightMessage |$fh$0x#0@@10|) (U_2_int ($Unbox intType (Apply1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@10 |BucketWeights.__default.WeightMessage#Handle| ($Box |$fh$0x#0@@10|)))))) :qid |DafnyPre.521:12| :skolemid |4184| :pattern ( (BucketWeights.__default.WeightMessage |$fh$0x#0@@10|) ($IsGoodHeap $heap@@10)) )))
(assert  (=> true (forall (($ly@@723 T@U) ($Heap@@116 T@U) (|msgs#0@@23| T@U) ) (!  (=> (and (and (and (= (type $ly@@723) LayerTypeType) (= (type $Heap@@116) (MapType0Type refType MapType1Type))) (= (type |msgs#0@@23|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightMessageMultiset#canCall| |msgs#0@@23|) (and ($IsGoodHeap $Heap@@116) ($Is |msgs#0@@23| (TMultiSet Tclass.ValueMessage.Message))))) (and (and (|Multisets.__default.Apply#canCall| Tclass.ValueMessage.Message Tclass._System.nat $Heap@@116 |BucketWeights.__default.WeightMessage#Handle| |msgs#0@@23|) (let ((|weights#0@@3| (Multisets.__default.Apply Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@116 |BucketWeights.__default.WeightMessage#Handle| |msgs#0@@23|))) (|Multisets.__default.FoldSimple#canCall| Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#0@@3|))) (= (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@723) |msgs#0@@23|) (U_2_int (let ((|weights#0@@4| (Multisets.__default.Apply Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@116 |BucketWeights.__default.WeightMessage#Handle| |msgs#0@@23|))) ($Unbox intType (Multisets.__default.FoldSimple Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#0@@4|))))))) :qid |BucketWe.124:22| :skolemid |4185| :pattern ( (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@723) |msgs#0@@23|) ($IsGoodHeap $Heap@@116)) ))))
(assert  (=> true (forall (($ly@@724 T@U) ($Heap@@117 T@U) (|msgs#0@@24| T@U) ) (!  (=> (and (and (and (= (type $ly@@724) LayerTypeType) (= (type $Heap@@117) (MapType0Type refType MapType1Type))) (= (type |msgs#0@@24|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightMessageMultiset#canCall| (Lit |msgs#0@@24|)) (and ($IsGoodHeap $Heap@@117) ($Is |msgs#0@@24| (TMultiSet Tclass.ValueMessage.Message))))) (and (and (|Multisets.__default.Apply#canCall| Tclass.ValueMessage.Message Tclass._System.nat $Heap@@117 |BucketWeights.__default.WeightMessage#Handle| (Lit |msgs#0@@24|)) (let ((|weights#1@@3| (Multisets.__default.Apply Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@117 |BucketWeights.__default.WeightMessage#Handle| (Lit |msgs#0@@24|)))) (|Multisets.__default.FoldSimple#canCall| Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#1@@3|))) (= (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@724) (Lit |msgs#0@@24|)) (U_2_int (let ((|weights#1@@4| (Multisets.__default.Apply Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@117 |BucketWeights.__default.WeightMessage#Handle| (Lit |msgs#0@@24|)))) ($Unbox intType (Multisets.__default.FoldSimple Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#1@@4|))))))) :qid |BucketWe.124:22| :weight 3 :skolemid |4186| :pattern ( (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@724) (Lit |msgs#0@@24|)) ($IsGoodHeap $Heap@@117)) ))))
(assert (forall (($ly@@725 T@U) (|msgs#0@@25| T@U) ) (!  (=> (and (= (type $ly@@725) LayerTypeType) (= (type |msgs#0@@25|) (SeqType BoxType))) (= (BucketWeights.__default.WeightMessageSeq ($LS $ly@@725) |msgs#0@@25|) (BucketWeights.__default.WeightMessageSeq $ly@@725 |msgs#0@@25|))) :qid |BucketWe.132:22| :skolemid |4187| :pattern ( (BucketWeights.__default.WeightMessageSeq ($LS $ly@@725) |msgs#0@@25|)) )))
(assert (forall (($ly@@726 T@U) (|msgs#0@@26| T@U) ) (!  (=> (and (= (type $ly@@726) LayerTypeType) (= (type |msgs#0@@26|) (SeqType BoxType))) (= (BucketWeights.__default.WeightMessageSeq $ly@@726 |msgs#0@@26|) (BucketWeights.__default.WeightMessageSeq $LZ |msgs#0@@26|))) :qid |BucketWe.132:22| :skolemid |4188| :pattern ( (BucketWeights.__default.WeightMessageSeq (AsFuelBottom $ly@@726) |msgs#0@@26|)) )))
(assert  (=> true (forall (($ly@@727 T@U) (|msgs#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@727) LayerTypeType) (= (type |msgs#0@@27|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightMessageSeq#canCall| |msgs#0@@27|) ($Is |msgs#0@@27| (TSeq Tclass.ValueMessage.Message)))) (<= (LitInt 0) (BucketWeights.__default.WeightMessageSeq $ly@@727 |msgs#0@@27|))) :qid |BucketWe.132:22| :skolemid |4189| :pattern ( (BucketWeights.__default.WeightMessageSeq $ly@@727 |msgs#0@@27|)) ))))
(assert (forall (($ly@@728 T@U) ($Heap@@118 T@U) (|msgs#0@@28| T@U) ) (!  (=> (and (and (and (= (type $ly@@728) LayerTypeType) (= (type $Heap@@118) (MapType0Type refType MapType1Type))) (= (type |msgs#0@@28|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@118) ($Is |msgs#0@@28| (TSeq Tclass.ValueMessage.Message)))) (and (=> (|BucketWeights.__default.WeightMessageSeq#requires| $ly@@728 |msgs#0@@28|) true) (=> true (|BucketWeights.__default.WeightMessageSeq#requires| $ly@@728 |msgs#0@@28|)))) :qid |BucketWe.132:22| :skolemid |4190| :pattern ( (|BucketWeights.__default.WeightMessageSeq#requires| $ly@@728 |msgs#0@@28|) ($IsGoodHeap $Heap@@118)) )))
(assert  (=> true (forall (($ly@@729 T@U) ($Heap@@119 T@U) (|msgs#0@@29| T@U) ) (!  (=> (and (and (and (= (type $ly@@729) LayerTypeType) (= (type $Heap@@119) (MapType0Type refType MapType1Type))) (= (type |msgs#0@@29|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightMessageSeq#canCall| |msgs#0@@29|) (and ($IsGoodHeap $Heap@@119) ($Is |msgs#0@@29| (TSeq Tclass.ValueMessage.Message))))) (and (and (|Sequences.__default.ApplyOpaque#canCall| Tclass.ValueMessage.Message Tclass._System.nat $Heap@@119 |BucketWeights.__default.WeightMessage#Handle| |msgs#0@@29|) (let ((|weights#0@@5| (Sequences.__default.ApplyOpaque Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Sequences._default.ApplyOpaque $Heap@@119 |BucketWeights.__default.WeightMessage#Handle| |msgs#0@@29|))) (|Sequences.__default.FoldFromRight#canCall| Tclass._System.nat Tclass._System.nat |Multisets.__default.AddNat#Handle| ($Box (int_2_U (LitInt 0))) |weights#0@@5|))) (= (BucketWeights.__default.WeightMessageSeq ($LS $ly@@729) |msgs#0@@29|) (U_2_int (let ((|weights#0@@6| (Sequences.__default.ApplyOpaque Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Sequences._default.ApplyOpaque $Heap@@119 |BucketWeights.__default.WeightMessage#Handle| |msgs#0@@29|))) ($Unbox intType (Sequences.__default.FoldFromRight Tclass._System.nat Tclass._System.nat ($LS $LZ) |Multisets.__default.AddNat#Handle| ($Box (int_2_U (LitInt 0))) |weights#0@@6|))))))) :qid |BucketWe.132:22| :skolemid |4191| :pattern ( (BucketWeights.__default.WeightMessageSeq ($LS $ly@@729) |msgs#0@@29|) ($IsGoodHeap $Heap@@119)) ))))
(assert  (=> true (forall (($ly@@730 T@U) ($Heap@@120 T@U) (|msgs#0@@30| T@U) ) (!  (=> (and (and (and (= (type $ly@@730) LayerTypeType) (= (type $Heap@@120) (MapType0Type refType MapType1Type))) (= (type |msgs#0@@30|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightMessageSeq#canCall| (Lit |msgs#0@@30|)) (and ($IsGoodHeap $Heap@@120) ($Is |msgs#0@@30| (TSeq Tclass.ValueMessage.Message))))) (and (and (|Sequences.__default.ApplyOpaque#canCall| Tclass.ValueMessage.Message Tclass._System.nat $Heap@@120 |BucketWeights.__default.WeightMessage#Handle| (Lit |msgs#0@@30|)) (let ((|weights#1@@5| (Sequences.__default.ApplyOpaque Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Sequences._default.ApplyOpaque $Heap@@120 |BucketWeights.__default.WeightMessage#Handle| (Lit |msgs#0@@30|)))) (|Sequences.__default.FoldFromRight#canCall| Tclass._System.nat Tclass._System.nat |Multisets.__default.AddNat#Handle| ($Box (int_2_U (LitInt 0))) |weights#1@@5|))) (= (BucketWeights.__default.WeightMessageSeq ($LS $ly@@730) (Lit |msgs#0@@30|)) (U_2_int (let ((|weights#1@@6| (Sequences.__default.ApplyOpaque Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Sequences._default.ApplyOpaque $Heap@@120 |BucketWeights.__default.WeightMessage#Handle| (Lit |msgs#0@@30|)))) ($Unbox intType (Sequences.__default.FoldFromRight Tclass._System.nat Tclass._System.nat ($LS $LZ) |Multisets.__default.AddNat#Handle| ($Box (int_2_U (LitInt 0))) |weights#1@@6|))))))) :qid |BucketWe.132:22| :weight 3 :skolemid |4192| :pattern ( (BucketWeights.__default.WeightMessageSeq ($LS $ly@@730) (Lit |msgs#0@@30|)) ($IsGoodHeap $Heap@@120)) ))))
(assert  (=> true (forall ((|keys#0@@39| T@U) ) (!  (=> (and (= (type |keys#0@@39|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyList#canCall| |keys#0@@39|) ($Is |keys#0@@39| (TSeq Tclass.KeyType.Key)))) (and (=> (= (|Seq#Length| |keys#0@@39|) (LitInt 0)) (= (BucketWeights.__default.WeightKeyList |keys#0@@39|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightKeyList |keys#0@@39|)))) :qid |BucketWe.151:26| :skolemid |4193| :pattern ( (BucketWeights.__default.WeightKeyList |keys#0@@39|)) ))))
(assert (forall ((|keys#0@@40| T@U) ) (!  (=> (and (= (type |keys#0@@40|) (SeqType BoxType)) ($Is |keys#0@@40| (TSeq Tclass.KeyType.Key))) (and (=> (|BucketWeights.__default.WeightKeyList#requires| |keys#0@@40|) true) (=> true (|BucketWeights.__default.WeightKeyList#requires| |keys#0@@40|)))) :qid |BucketWe.151:26| :skolemid |4194| :pattern ( (|BucketWeights.__default.WeightKeyList#requires| |keys#0@@40|)) )))
(assert (= (type StartFuel_BucketWeights._default.WeightKeyMultiset) LayerTypeType))
(assert  (=> true (forall ((|keys#0@@41| T@U) ) (!  (=> (and (= (type |keys#0@@41|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyList#canCall| |keys#0@@41|) ($Is |keys#0@@41| (TSeq Tclass.KeyType.Key)))) (and (|BucketWeights.__default.WeightKeyMultiset#canCall| (|MultiSet#FromSeq| |keys#0@@41|)) (= (BucketWeights.__default.WeightKeyList |keys#0@@41|) (BucketWeights.__default.WeightKeyMultiset StartFuel_BucketWeights._default.WeightKeyMultiset (|MultiSet#FromSeq| |keys#0@@41|))))) :qid |BucketWe.151:26| :skolemid |4195| :pattern ( (BucketWeights.__default.WeightKeyList |keys#0@@41|)) ))))
(assert  (=> true (forall ((|keys#0@@42| T@U) ) (!  (=> (and (= (type |keys#0@@42|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyList#canCall| (Lit |keys#0@@42|)) ($Is |keys#0@@42| (TSeq Tclass.KeyType.Key)))) (and (|BucketWeights.__default.WeightKeyMultiset#canCall| (|MultiSet#FromSeq| (Lit |keys#0@@42|))) (= (BucketWeights.__default.WeightKeyList (Lit |keys#0@@42|)) (BucketWeights.__default.WeightKeyMultiset StartFuel_BucketWeights._default.WeightKeyMultiset (|MultiSet#FromSeq| (Lit |keys#0@@42|)))))) :qid |BucketWe.151:26| :weight 3 :skolemid |4196| :pattern ( (BucketWeights.__default.WeightKeyList (Lit |keys#0@@42|))) ))))
(assert  (=> true (forall ((|msgs#0@@31| T@U) ) (!  (=> (and (= (type |msgs#0@@31|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightMessageList#canCall| |msgs#0@@31|) ($Is |msgs#0@@31| (TSeq Tclass.ValueMessage.Message)))) (and (=> (= (|Seq#Length| |msgs#0@@31|) (LitInt 0)) (= (BucketWeights.__default.WeightMessageList |msgs#0@@31|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightMessageList |msgs#0@@31|)))) :qid |BucketWe.157:30| :skolemid |4197| :pattern ( (BucketWeights.__default.WeightMessageList |msgs#0@@31|)) ))))
(assert (forall ((|msgs#0@@32| T@U) ) (!  (=> (and (= (type |msgs#0@@32|) (SeqType BoxType)) ($Is |msgs#0@@32| (TSeq Tclass.ValueMessage.Message))) (and (=> (|BucketWeights.__default.WeightMessageList#requires| |msgs#0@@32|) true) (=> true (|BucketWeights.__default.WeightMessageList#requires| |msgs#0@@32|)))) :qid |BucketWe.157:30| :skolemid |4198| :pattern ( (|BucketWeights.__default.WeightMessageList#requires| |msgs#0@@32|)) )))
(assert (= (type StartFuel_BucketWeights._default.WeightMessageMultiset) LayerTypeType))
(assert  (=> true (forall ((|msgs#0@@33| T@U) ) (!  (=> (and (= (type |msgs#0@@33|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightMessageList#canCall| |msgs#0@@33|) ($Is |msgs#0@@33| (TSeq Tclass.ValueMessage.Message)))) (and (|BucketWeights.__default.WeightMessageMultiset#canCall| (|MultiSet#FromSeq| |msgs#0@@33|)) (= (BucketWeights.__default.WeightMessageList |msgs#0@@33|) (BucketWeights.__default.WeightMessageMultiset StartFuel_BucketWeights._default.WeightMessageMultiset (|MultiSet#FromSeq| |msgs#0@@33|))))) :qid |BucketWe.157:30| :skolemid |4199| :pattern ( (BucketWeights.__default.WeightMessageList |msgs#0@@33|)) ))))
(assert  (=> true (forall ((|msgs#0@@34| T@U) ) (!  (=> (and (= (type |msgs#0@@34|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightMessageList#canCall| (Lit |msgs#0@@34|)) ($Is |msgs#0@@34| (TSeq Tclass.ValueMessage.Message)))) (and (|BucketWeights.__default.WeightMessageMultiset#canCall| (|MultiSet#FromSeq| (Lit |msgs#0@@34|))) (= (BucketWeights.__default.WeightMessageList (Lit |msgs#0@@34|)) (BucketWeights.__default.WeightMessageMultiset StartFuel_BucketWeights._default.WeightMessageMultiset (|MultiSet#FromSeq| (Lit |msgs#0@@34|)))))) :qid |BucketWe.157:30| :weight 3 :skolemid |4200| :pattern ( (BucketWeights.__default.WeightMessageList (Lit |msgs#0@@34|))) ))))
(assert  (=> true (forall ((|bucket#0@@98| T@U) ) (!  (=> (and (= (type |bucket#0@@98|) DatatypeTypeType) (or (|BucketWeights.__default.WeightBucket#canCall| |bucket#0@@98|) ($Is |bucket#0@@98| Tclass.BucketsLib.Bucket))) (and (=> (and (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@98|)) (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@98|))) (= (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@98|)) (LitInt 0))) (= (BucketWeights.__default.WeightBucket |bucket#0@@98|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightBucket |bucket#0@@98|)))) :qid |BucketWe.163:25| :skolemid |4201| :pattern ( (BucketWeights.__default.WeightBucket |bucket#0@@98|)) ))))
(assert (forall ((|bucket#0@@99| T@U) ) (!  (=> (and (= (type |bucket#0@@99|) DatatypeTypeType) ($Is |bucket#0@@99| Tclass.BucketsLib.Bucket)) (and (=> (|BucketWeights.__default.WeightBucket#requires| |bucket#0@@99|) true) (=> true (|BucketWeights.__default.WeightBucket#requires| |bucket#0@@99|)))) :qid |BucketWe.163:25| :skolemid |4202| :pattern ( (|BucketWeights.__default.WeightBucket#requires| |bucket#0@@99|)) )))
(assert  (=> true (forall ((|bucket#0@@100| T@U) ) (!  (=> (and (= (type |bucket#0@@100|) DatatypeTypeType) (or (|BucketWeights.__default.WeightBucket#canCall| |bucket#0@@100|) ($Is |bucket#0@@100| Tclass.BucketsLib.Bucket))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@100|) (|BucketWeights.__default.WeightKeyList#canCall| (BucketsLib.Bucket.keys |bucket#0@@100|))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@100|) (|BucketWeights.__default.WeightMessageList#canCall| (BucketsLib.Bucket.msgs |bucket#0@@100|)))) (= (BucketWeights.__default.WeightBucket |bucket#0@@100|) (+ (BucketWeights.__default.WeightKeyList (BucketsLib.Bucket.keys |bucket#0@@100|)) (BucketWeights.__default.WeightMessageList (BucketsLib.Bucket.msgs |bucket#0@@100|)))))) :qid |BucketWe.163:25| :skolemid |4203| :pattern ( (BucketWeights.__default.WeightBucket |bucket#0@@100|)) ))))
(assert  (=> true (forall ((|bucket#0@@101| T@U) ) (!  (=> (and (= (type |bucket#0@@101|) DatatypeTypeType) (or (|BucketWeights.__default.WeightBucket#canCall| (Lit |bucket#0@@101|)) ($Is |bucket#0@@101| Tclass.BucketsLib.Bucket))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@101|)) (|BucketWeights.__default.WeightKeyList#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@101|))))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@101|)) (|BucketWeights.__default.WeightMessageList#canCall| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@101|)))))) (= (BucketWeights.__default.WeightBucket (Lit |bucket#0@@101|)) (LitInt (+ (BucketWeights.__default.WeightKeyList (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@101|)))) (BucketWeights.__default.WeightMessageList (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@101|))))))))) :qid |BucketWe.163:25| :weight 3 :skolemid |4204| :pattern ( (BucketWeights.__default.WeightBucket (Lit |bucket#0@@101|))) ))))
(assert (forall (($ly@@731 T@U) (|buckets#0@@17| T@U) ) (!  (=> (and (= (type $ly@@731) LayerTypeType) (= (type |buckets#0@@17|) (SeqType BoxType))) (= (BucketWeights.__default.WeightBucketList ($LS $ly@@731) |buckets#0@@17|) (BucketWeights.__default.WeightBucketList $ly@@731 |buckets#0@@17|))) :qid |BucketWe.169:22| :skolemid |4205| :pattern ( (BucketWeights.__default.WeightBucketList ($LS $ly@@731) |buckets#0@@17|)) )))
(assert (forall (($ly@@732 T@U) (|buckets#0@@18| T@U) ) (!  (=> (and (= (type $ly@@732) LayerTypeType) (= (type |buckets#0@@18|) (SeqType BoxType))) (= (BucketWeights.__default.WeightBucketList $ly@@732 |buckets#0@@18|) (BucketWeights.__default.WeightBucketList $LZ |buckets#0@@18|))) :qid |BucketWe.169:22| :skolemid |4206| :pattern ( (BucketWeights.__default.WeightBucketList (AsFuelBottom $ly@@732) |buckets#0@@18|)) )))
(assert  (=> true (forall (($ly@@733 T@U) (|buckets#0@@19| T@U) ) (!  (=> (and (and (= (type $ly@@733) LayerTypeType) (= (type |buckets#0@@19|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightBucketList#canCall| |buckets#0@@19|) ($Is |buckets#0@@19| (TSeq Tclass.BucketsLib.Bucket)))) (<= (LitInt 0) (BucketWeights.__default.WeightBucketList $ly@@733 |buckets#0@@19|))) :qid |BucketWe.169:22| :skolemid |4207| :pattern ( (BucketWeights.__default.WeightBucketList $ly@@733 |buckets#0@@19|)) ))))
(assert (forall (($ly@@734 T@U) (|buckets#0@@20| T@U) ) (!  (=> (and (and (= (type $ly@@734) LayerTypeType) (= (type |buckets#0@@20|) (SeqType BoxType))) ($Is |buckets#0@@20| (TSeq Tclass.BucketsLib.Bucket))) (and (=> (|BucketWeights.__default.WeightBucketList#requires| $ly@@734 |buckets#0@@20|) true) (=> true (|BucketWeights.__default.WeightBucketList#requires| $ly@@734 |buckets#0@@20|)))) :qid |BucketWe.169:22| :skolemid |4208| :pattern ( (|BucketWeights.__default.WeightBucketList#requires| $ly@@734 |buckets#0@@20|)) )))
(assert  (=> true (forall (($ly@@735 T@U) (|buckets#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@735) LayerTypeType) (= (type |buckets#0@@21|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightBucketList#canCall| |buckets#0@@21|) ($Is |buckets#0@@21| (TSeq Tclass.BucketsLib.Bucket)))) (and (=> (not (= (|Seq#Length| |buckets#0@@21|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket |buckets#0@@21|) (|BucketWeights.__default.WeightBucketList#canCall| (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@21|))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket |buckets#0@@21|) (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@21|)))))) (= (BucketWeights.__default.WeightBucketList ($LS $ly@@735) |buckets#0@@21|) (ite (= (|Seq#Length| |buckets#0@@21|) (LitInt 0)) 0 (+ (BucketWeights.__default.WeightBucketList $ly@@735 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@21|)) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@21|)))))))) :qid |BucketWe.169:22| :skolemid |4209| :pattern ( (BucketWeights.__default.WeightBucketList ($LS $ly@@735) |buckets#0@@21|)) ))))
(assert  (=> true (forall (($ly@@736 T@U) (|buckets#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@736) LayerTypeType) (= (type |buckets#0@@22|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightBucketList#canCall| (Lit |buckets#0@@22|)) ($Is |buckets#0@@22| (TSeq Tclass.BucketsLib.Bucket)))) (and (=> (not (= (|Seq#Length| (Lit |buckets#0@@22|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@22|)) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@22|))))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@22|)) (|BucketWeights.__default.WeightBucket#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@22|)))))))) (= (BucketWeights.__default.WeightBucketList ($LS $ly@@736) (Lit |buckets#0@@22|)) (ite (= (|Seq#Length| (Lit |buckets#0@@22|)) (LitInt 0)) 0 (+ (BucketWeights.__default.WeightBucketList ($LS $ly@@736) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@22|)))) (BucketWeights.__default.WeightBucket (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@22|)))))))))) :qid |BucketWe.169:22| :weight 3 :skolemid |4210| :pattern ( (BucketWeights.__default.WeightBucketList ($LS $ly@@736) (Lit |buckets#0@@22|))) ))))
(assert (= (type BucketWeights.__default.AllKeys) (MapType0Type BoxType boolType)))
(assert  (=> true (=> true ($Is BucketWeights.__default.AllKeys (TISet Tclass.KeyType.Key)))))
(assert  (=> |BucketWeights.__default.AllKeys#requires| true))
(assert  (=> true |BucketWeights.__default.AllKeys#requires|))
(assert (forall ((arg0@@578 T@U) (arg1@@332 Bool) ) (! (= (type (|lambda#370| arg0@@578 arg1@@332)) (MapType0Type BoxType boolType)) :qid |funType:lambda#370| :pattern ( (|lambda#370| arg0@@578 arg1@@332)) )))
(assert  (=> true (=> true (= BucketWeights.__default.AllKeys (|lambda#370| Tclass.KeyType.Key (U_2_bool (Lit (bool_2_U true))))))))
(assert  (=> true (=> true (= BucketWeights.__default.AllKeys (|lambda#370| Tclass.KeyType.Key (U_2_bool (Lit (bool_2_U true))))))))
(assert (forall ((arg0@@579 T@U) ) (! (= (type (BucketWeights.__default.IncludeKey arg0@@579)) (MapType0Type BoxType boolType)) :qid |funType:BucketWeights.__default.IncludeKey| :pattern ( (BucketWeights.__default.IncludeKey arg0@@579)) )))
(assert  (=> true (forall ((|key#0@@224| T@U) ) (!  (=> (and (= (type |key#0@@224|) (SeqType BoxType)) (or (|BucketWeights.__default.IncludeKey#canCall| |key#0@@224|) ($Is |key#0@@224| Tclass.KeyType.Key))) ($Is (BucketWeights.__default.IncludeKey |key#0@@224|) (TISet Tclass.KeyType.Key))) :qid |BucketWe.345:23| :skolemid |4211| :pattern ( (BucketWeights.__default.IncludeKey |key#0@@224|)) ))))
(assert (forall ((|key#0@@225| T@U) ) (!  (=> (and (= (type |key#0@@225|) (SeqType BoxType)) ($Is |key#0@@225| Tclass.KeyType.Key)) (and (=> (|BucketWeights.__default.IncludeKey#requires| |key#0@@225|) true) (=> true (|BucketWeights.__default.IncludeKey#requires| |key#0@@225|)))) :qid |BucketWe.345:23| :skolemid |4212| :pattern ( (|BucketWeights.__default.IncludeKey#requires| |key#0@@225|)) )))
(assert (forall ((arg0@@580 T@U) (arg1@@333 T@U) ) (! (= (type (|lambda#372| arg0@@580 arg1@@333)) (MapType0Type BoxType boolType)) :qid |funType:lambda#372| :pattern ( (|lambda#372| arg0@@580 arg1@@333)) )))
(assert  (=> true (forall ((|key#0@@226| T@U) ) (!  (=> (and (= (type |key#0@@226|) (SeqType BoxType)) (or (|BucketWeights.__default.IncludeKey#canCall| |key#0@@226|) ($Is |key#0@@226| Tclass.KeyType.Key))) (= (BucketWeights.__default.IncludeKey |key#0@@226|) (|lambda#372| Tclass.KeyType.Key |key#0@@226|))) :qid |BucketWe.345:23| :skolemid |4213| :pattern ( (BucketWeights.__default.IncludeKey |key#0@@226|)) ))))
(assert  (=> true (forall ((|key#0@@227| T@U) ) (!  (=> (and (= (type |key#0@@227|) (SeqType BoxType)) (or (|BucketWeights.__default.IncludeKey#canCall| (Lit |key#0@@227|)) ($Is |key#0@@227| Tclass.KeyType.Key))) (= (BucketWeights.__default.IncludeKey (Lit |key#0@@227|)) (|lambda#372| Tclass.KeyType.Key |key#0@@227|))) :qid |BucketWe.345:23| :weight 3 :skolemid |4214| :pattern ( (BucketWeights.__default.IncludeKey (Lit |key#0@@227|))) ))))
(assert (forall ((arg0@@581 T@U) ) (! (= (type (BucketWeights.__default.ExcludeKey arg0@@581)) (MapType0Type BoxType boolType)) :qid |funType:BucketWeights.__default.ExcludeKey| :pattern ( (BucketWeights.__default.ExcludeKey arg0@@581)) )))
(assert  (=> true (forall ((|key#0@@228| T@U) ) (!  (=> (and (= (type |key#0@@228|) (SeqType BoxType)) (or (|BucketWeights.__default.ExcludeKey#canCall| |key#0@@228|) ($Is |key#0@@228| Tclass.KeyType.Key))) ($Is (BucketWeights.__default.ExcludeKey |key#0@@228|) (TISet Tclass.KeyType.Key))) :qid |BucketWe.349:23| :skolemid |4215| :pattern ( (BucketWeights.__default.ExcludeKey |key#0@@228|)) ))))
(assert (forall ((|key#0@@229| T@U) ) (!  (=> (and (= (type |key#0@@229|) (SeqType BoxType)) ($Is |key#0@@229| Tclass.KeyType.Key)) (and (=> (|BucketWeights.__default.ExcludeKey#requires| |key#0@@229|) true) (=> true (|BucketWeights.__default.ExcludeKey#requires| |key#0@@229|)))) :qid |BucketWe.349:23| :skolemid |4216| :pattern ( (|BucketWeights.__default.ExcludeKey#requires| |key#0@@229|)) )))
(assert (forall ((arg0@@582 T@U) (arg1@@334 T@U) ) (! (= (type (|lambda#374| arg0@@582 arg1@@334)) (MapType0Type BoxType boolType)) :qid |funType:lambda#374| :pattern ( (|lambda#374| arg0@@582 arg1@@334)) )))
(assert  (=> true (forall ((|key#0@@230| T@U) ) (!  (=> (and (= (type |key#0@@230|) (SeqType BoxType)) (or (|BucketWeights.__default.ExcludeKey#canCall| |key#0@@230|) ($Is |key#0@@230| Tclass.KeyType.Key))) (= (BucketWeights.__default.ExcludeKey |key#0@@230|) (|lambda#374| Tclass.KeyType.Key |key#0@@230|))) :qid |BucketWe.349:23| :skolemid |4217| :pattern ( (BucketWeights.__default.ExcludeKey |key#0@@230|)) ))))
(assert  (=> true (forall ((|key#0@@231| T@U) ) (!  (=> (and (= (type |key#0@@231|) (SeqType BoxType)) (or (|BucketWeights.__default.ExcludeKey#canCall| (Lit |key#0@@231|)) ($Is |key#0@@231| Tclass.KeyType.Key))) (= (BucketWeights.__default.ExcludeKey (Lit |key#0@@231|)) (|lambda#374| Tclass.KeyType.Key |key#0@@231|))) :qid |BucketWe.349:23| :weight 3 :skolemid |4218| :pattern ( (BucketWeights.__default.ExcludeKey (Lit |key#0@@231|))) ))))
(assert (forall ((arg0@@583 T@U) (arg1@@335 T@U) (arg2@@229 T@U) ) (! (= (type (BucketWeights.__default.Image arg0@@583 arg1@@335 arg2@@229)) DatatypeTypeType) :qid |funType:BucketWeights.__default.Image| :pattern ( (BucketWeights.__default.Image arg0@@583 arg1@@335 arg2@@229)) )))
(assert (forall (($ly@@737 T@U) (|bucket#0@@102| T@U) (|filter#0| T@U) ) (!  (=> (and (and (= (type $ly@@737) LayerTypeType) (= (type |bucket#0@@102|) DatatypeTypeType)) (= (type |filter#0|) (MapType0Type BoxType boolType))) (= (BucketWeights.__default.Image ($LS $ly@@737) |bucket#0@@102| |filter#0|) (BucketWeights.__default.Image $ly@@737 |bucket#0@@102| |filter#0|))) :qid |BucketWe.355:22| :skolemid |4219| :pattern ( (BucketWeights.__default.Image ($LS $ly@@737) |bucket#0@@102| |filter#0|)) )))
(assert (forall (($ly@@738 T@U) (|bucket#0@@103| T@U) (|filter#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@738) LayerTypeType) (= (type |bucket#0@@103|) DatatypeTypeType)) (= (type |filter#0@@0|) (MapType0Type BoxType boolType))) (= (BucketWeights.__default.Image $ly@@738 |bucket#0@@103| |filter#0@@0|) (BucketWeights.__default.Image $LZ |bucket#0@@103| |filter#0@@0|))) :qid |BucketWe.355:22| :skolemid |4220| :pattern ( (BucketWeights.__default.Image (AsFuelBottom $ly@@738) |bucket#0@@103| |filter#0@@0|)) )))
(assert  (=> true (forall (($ly@@739 T@U) (|bucket#0@@104| T@U) (|filter#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@739) LayerTypeType) (= (type |bucket#0@@104|) DatatypeTypeType)) (= (type |filter#0@@1|) (MapType0Type BoxType boolType))) (or (|BucketWeights.__default.Image#canCall| |bucket#0@@104| |filter#0@@1|) (and ($Is |bucket#0@@104| Tclass.BucketsLib.Bucket) ($Is |filter#0@@1| (TISet Tclass.KeyType.Key))))) (and (and (and (and (BucketsLib.__default.BucketWellMarshalled (BucketWeights.__default.Image $ly@@739 |bucket#0@@104| |filter#0@@1|)) (BucketsLib.__default.PreWFBucket (BucketWeights.__default.Image $ly@@739 |bucket#0@@104| |filter#0@@1|))) (= (|Seq#Length| (BucketsLib.Bucket.keys (BucketWeights.__default.Image $ly@@739 |bucket#0@@104| |filter#0@@1|))) (|Seq#Length| (BucketsLib.Bucket.msgs (BucketWeights.__default.Image $ly@@739 |bucket#0@@104| |filter#0@@1|))))) (=> (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@104|)) (BucketsLib.__default.WFBucket (BucketWeights.__default.Image $ly@@739 |bucket#0@@104| |filter#0@@1|)))) ($Is (BucketWeights.__default.Image $ly@@739 |bucket#0@@104| |filter#0@@1|) Tclass.BucketsLib.Bucket))) :qid |BucketWe.355:22| :skolemid |4221| :pattern ( (BucketWeights.__default.Image $ly@@739 |bucket#0@@104| |filter#0@@1|)) ))))
(assert (forall (($ly@@740 T@U) (|bucket#0@@105| T@U) (|filter#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@740) LayerTypeType) (= (type |bucket#0@@105|) DatatypeTypeType)) (= (type |filter#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |bucket#0@@105| Tclass.BucketsLib.Bucket) ($Is |filter#0@@2| (TISet Tclass.KeyType.Key)))) (and (=> (|BucketWeights.__default.Image#requires| $ly@@740 |bucket#0@@105| |filter#0@@2|) true) (=> true (|BucketWeights.__default.Image#requires| $ly@@740 |bucket#0@@105| |filter#0@@2|)))) :qid |BucketWe.355:22| :skolemid |4222| :pattern ( (|BucketWeights.__default.Image#requires| $ly@@740 |bucket#0@@105| |filter#0@@2|)) )))
(assert  (=> true (forall (($ly@@741 T@U) (|bucket#0@@106| T@U) (|filter#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@741) LayerTypeType) (= (type |bucket#0@@106|) DatatypeTypeType)) (= (type |filter#0@@3|) (MapType0Type BoxType boolType))) (or (|BucketWeights.__default.Image#canCall| |bucket#0@@106| |filter#0@@3|) (and ($Is |bucket#0@@106| Tclass.BucketsLib.Bucket) ($Is |filter#0@@3| (TISet Tclass.KeyType.Key))))) (and (and (forall ((|k#0@@93| T@U) ) (!  (=> (and (= (type |k#0@@93|) (SeqType BoxType)) ($Is |k#0@@93| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@106|) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@106|)) ($Box |k#0@@93|))) (U_2_bool (MapType0Select |filter#0@@3| ($Box |k#0@@93|)))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@106|)))) :qid |BucketWe.361:11| :skolemid |4223| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@106|)) ($Box |k#0@@93|)))) :pattern ( (MapType0Select |filter#0@@3| ($Box |k#0@@93|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@106|)) ($Box |k#0@@93|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@106|)) |filter#0@@3|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@106|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketWeights.__default.Image ($LS $ly@@741) |bucket#0@@106| |filter#0@@3|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@106|)) |filter#0@@3|) (|lambda#55| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@106|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketWe.355:22| :skolemid |4224| :pattern ( (BucketWeights.__default.Image ($LS $ly@@741) |bucket#0@@106| |filter#0@@3|)) ))))
(assert  (=> true (forall (($ly@@742 T@U) (|bucket#0@@107| T@U) (|filter#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@742) LayerTypeType) (= (type |bucket#0@@107|) DatatypeTypeType)) (= (type |filter#0@@4|) (MapType0Type BoxType boolType))) (or (|BucketWeights.__default.Image#canCall| (Lit |bucket#0@@107|) |filter#0@@4|) (and ($Is |bucket#0@@107| Tclass.BucketsLib.Bucket) ($Is |filter#0@@4| (TISet Tclass.KeyType.Key))))) (and (and (forall ((|k#0@@94| T@U) ) (!  (=> (and (= (type |k#0@@94|) (SeqType BoxType)) ($Is |k#0@@94| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@107|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@107|))) ($Box |k#0@@94|))) (U_2_bool (MapType0Select |filter#0@@4| ($Box |k#0@@94|)))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@107|))))) :qid |BucketWe.361:11| :skolemid |4225| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@107|)) ($Box |k#0@@94|)))) :pattern ( (MapType0Select |filter#0@@4| ($Box |k#0@@94|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@107|)) ($Box |k#0@@94|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@107|))) |filter#0@@4|) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@107|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketWeights.__default.Image ($LS $ly@@742) (Lit |bucket#0@@107|) |filter#0@@4|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@107|))) |filter#0@@4|) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@107|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketWe.355:22| :weight 3 :skolemid |4226| :pattern ( (BucketWeights.__default.Image ($LS $ly@@742) (Lit |bucket#0@@107|) |filter#0@@4|)) ))))
(assert  (=> true (forall (($ly@@743 T@U) (|bucket#0@@108| T@U) (|filter#0@@5| T@U) ) (!  (=> (and (and (and (= (type $ly@@743) LayerTypeType) (= (type |bucket#0@@108|) DatatypeTypeType)) (= (type |filter#0@@5|) (MapType0Type BoxType boolType))) (or (|BucketWeights.__default.Image#canCall| (Lit |bucket#0@@108|) (Lit |filter#0@@5|)) (and ($Is |bucket#0@@108| Tclass.BucketsLib.Bucket) ($Is |filter#0@@5| (TISet Tclass.KeyType.Key))))) (and (and (forall ((|k#0@@95| T@U) ) (!  (=> (and (= (type |k#0@@95|) (SeqType BoxType)) ($Is |k#0@@95| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@108|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@108|))) ($Box |k#0@@95|))) (U_2_bool (MapType0Select (Lit |filter#0@@5|) ($Box |k#0@@95|)))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@108|))))) :qid |BucketWe.361:11| :skolemid |4227| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@108|)) ($Box |k#0@@95|)))) :pattern ( (MapType0Select |filter#0@@5| ($Box |k#0@@95|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@108|)) ($Box |k#0@@95|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@108|))) (Lit |filter#0@@5|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@108|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketWeights.__default.Image ($LS $ly@@743) (Lit |bucket#0@@108|) (Lit |filter#0@@5|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#294| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@108|))) (Lit |filter#0@@5|)) (|lambda#55| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@108|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketWe.355:22| :weight 3 :skolemid |4228| :pattern ( (BucketWeights.__default.Image ($LS $ly@@743) (Lit |bucket#0@@108|) (Lit |filter#0@@5|))) ))))
(assert  (=> true (forall ((|bucket#0@@109| T@U) (|key#0@@232| T@U) ) (!  (=> (and (and (= (type |bucket#0@@109|) DatatypeTypeType) (= (type |key#0@@232|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightOneKey#canCall| |bucket#0@@109| |key#0@@232|) (and (and ($Is |bucket#0@@109| Tclass.BucketsLib.Bucket) ($Is |key#0@@232| Tclass.KeyType.Key)) (and (BucketsLib.__default.PreWFBucket |bucket#0@@109|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@109|))))) true) :qid |BucketWe.602:25| :skolemid |4229| :pattern ( (BucketWeights.__default.WeightOneKey |bucket#0@@109| |key#0@@232|)) ))))
(assert (forall ((|bucket#0@@110| T@U) (|key#0@@233| T@U) ) (!  (=> (and (and (= (type |bucket#0@@110|) DatatypeTypeType) (= (type |key#0@@233|) (SeqType BoxType))) (and ($Is |bucket#0@@110| Tclass.BucketsLib.Bucket) ($Is |key#0@@233| Tclass.KeyType.Key))) (and (=> (|BucketWeights.__default.WeightOneKey#requires| |bucket#0@@110| |key#0@@233|) (and (BucketsLib.__default.PreWFBucket |bucket#0@@110|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@110|))) (=> (and (BucketsLib.__default.PreWFBucket |bucket#0@@110|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@110|)) (|BucketWeights.__default.WeightOneKey#requires| |bucket#0@@110| |key#0@@233|)))) :qid |BucketWe.602:25| :skolemid |4230| :pattern ( (|BucketWeights.__default.WeightOneKey#requires| |bucket#0@@110| |key#0@@233|)) )))
(assert  (=> true (forall ((|bucket#0@@111| T@U) (|key#0@@234| T@U) ) (!  (=> (and (and (= (type |bucket#0@@111|) DatatypeTypeType) (= (type |key#0@@234|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightOneKey#canCall| |bucket#0@@111| |key#0@@234|) (and (and ($Is |bucket#0@@111| Tclass.BucketsLib.Bucket) ($Is |key#0@@234| Tclass.KeyType.Key)) (and (BucketsLib.__default.PreWFBucket |bucket#0@@111|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@111|))))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@111|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@111|)) ($Box |key#0@@234|))) (and (|BucketWeights.__default.WeightKey#canCall| |key#0@@234|) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@111|) (|BucketWeights.__default.WeightMessage#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@111|)) ($Box |key#0@@234|)))))))) (= (BucketWeights.__default.WeightOneKey |bucket#0@@111| |key#0@@234|) (ite (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@111|)) ($Box |key#0@@234|))) (+ (BucketWeights.__default.WeightKey |key#0@@234|) (BucketWeights.__default.WeightMessage ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@111|)) ($Box |key#0@@234|))))) 0)))) :qid |BucketWe.602:25| :skolemid |4231| :pattern ( (BucketWeights.__default.WeightOneKey |bucket#0@@111| |key#0@@234|)) ))))
(assert  (=> true (forall ((|bucket#0@@112| T@U) (|key#0@@235| T@U) ) (!  (=> (and (and (= (type |bucket#0@@112|) DatatypeTypeType) (= (type |key#0@@235|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightOneKey#canCall| (Lit |bucket#0@@112|) (Lit |key#0@@235|)) (and (and ($Is |bucket#0@@112| Tclass.BucketsLib.Bucket) ($Is |key#0@@235| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@112|))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@112|))))))))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@112|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@112|))) ($Box |key#0@@235|))) (and (|BucketWeights.__default.WeightKey#canCall| (Lit |key#0@@235|)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@112|)) (|BucketWeights.__default.WeightMessage#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@112|)))) ($Box (Lit |key#0@@235|))))))))) (= (BucketWeights.__default.WeightOneKey (Lit |bucket#0@@112|) (Lit |key#0@@235|)) (ite (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@112|))) ($Box |key#0@@235|))) (+ (BucketWeights.__default.WeightKey (Lit |key#0@@235|)) (BucketWeights.__default.WeightMessage ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@112|)))) ($Box (Lit |key#0@@235|)))))) 0)))) :qid |BucketWe.602:25| :weight 3 :skolemid |4232| :pattern ( (BucketWeights.__default.WeightOneKey (Lit |bucket#0@@112|) (Lit |key#0@@235|))) ))))
(assert (forall ((arg0@@584 T@U) ) (! (= (type (BucketWeights.__default.ILeftKeys arg0@@584)) (MapType0Type BoxType boolType)) :qid |funType:BucketWeights.__default.ILeftKeys| :pattern ( (BucketWeights.__default.ILeftKeys arg0@@584)) )))
(assert  (=> true (forall ((|pivot#0@@37| T@U) ) (!  (=> (and (= (type |pivot#0@@37|) (SeqType BoxType)) (or (|BucketWeights.__default.ILeftKeys#canCall| |pivot#0@@37|) ($Is |pivot#0@@37| Tclass.KeyType.Key))) ($Is (BucketWeights.__default.ILeftKeys |pivot#0@@37|) (TISet Tclass.KeyType.Key))) :qid |BucketWe.657:22| :skolemid |4233| :pattern ( (BucketWeights.__default.ILeftKeys |pivot#0@@37|)) ))))
(assert (forall ((|pivot#0@@38| T@U) ) (!  (=> (and (= (type |pivot#0@@38|) (SeqType BoxType)) ($Is |pivot#0@@38| Tclass.KeyType.Key)) (and (=> (|BucketWeights.__default.ILeftKeys#requires| |pivot#0@@38|) true) (=> true (|BucketWeights.__default.ILeftKeys#requires| |pivot#0@@38|)))) :qid |BucketWe.657:22| :skolemid |4234| :pattern ( (|BucketWeights.__default.ILeftKeys#requires| |pivot#0@@38|)) )))
(assert  (=> true (forall ((|pivot#0@@39| T@U) ) (!  (=> (and (= (type |pivot#0@@39|) (SeqType BoxType)) (or (|BucketWeights.__default.ILeftKeys#canCall| |pivot#0@@39|) ($Is |pivot#0@@39| Tclass.KeyType.Key))) (and (forall ((|k#0@@96| T@U) ) (!  (=> (and (= (type |k#0@@96|) (SeqType BoxType)) ($Is |k#0@@96| Tclass.KeyType.Key)) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#0@@96| |pivot#0@@39|)) :qid |BucketWe.657:53| :skolemid |4235| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@96| |pivot#0@@39|)) )) (= (BucketWeights.__default.ILeftKeys |pivot#0@@39|) (|lambda#130| Tclass.KeyType.Key |pivot#0@@39|)))) :qid |BucketWe.657:22| :skolemid |4236| :pattern ( (BucketWeights.__default.ILeftKeys |pivot#0@@39|)) ))))
(assert  (=> true (forall ((|pivot#0@@40| T@U) ) (!  (=> (and (= (type |pivot#0@@40|) (SeqType BoxType)) (or (|BucketWeights.__default.ILeftKeys#canCall| (Lit |pivot#0@@40|)) ($Is |pivot#0@@40| Tclass.KeyType.Key))) (and (forall ((|k#1@@15| T@U) ) (!  (=> (and (= (type |k#1@@15|) (SeqType BoxType)) ($Is |k#1@@15| Tclass.KeyType.Key)) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#1@@15| (Lit |pivot#0@@40|))) :qid |BucketWe.657:53| :skolemid |4237| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#1@@15| |pivot#0@@40|)) )) (= (BucketWeights.__default.ILeftKeys (Lit |pivot#0@@40|)) (|lambda#130| Tclass.KeyType.Key (Lit |pivot#0@@40|))))) :qid |BucketWe.657:22| :weight 3 :skolemid |4238| :pattern ( (BucketWeights.__default.ILeftKeys (Lit |pivot#0@@40|))) ))))
(assert (forall ((arg0@@585 T@U) ) (! (= (type (BucketWeights.__default.IRightKeys arg0@@585)) (MapType0Type BoxType boolType)) :qid |funType:BucketWeights.__default.IRightKeys| :pattern ( (BucketWeights.__default.IRightKeys arg0@@585)) )))
(assert  (=> true (forall ((|pivot#0@@41| T@U) ) (!  (=> (and (= (type |pivot#0@@41|) (SeqType BoxType)) (or (|BucketWeights.__default.IRightKeys#canCall| |pivot#0@@41|) ($Is |pivot#0@@41| Tclass.KeyType.Key))) ($Is (BucketWeights.__default.IRightKeys |pivot#0@@41|) (TISet Tclass.KeyType.Key))) :qid |BucketWe.658:23| :skolemid |4239| :pattern ( (BucketWeights.__default.IRightKeys |pivot#0@@41|)) ))))
(assert (forall ((|pivot#0@@42| T@U) ) (!  (=> (and (= (type |pivot#0@@42|) (SeqType BoxType)) ($Is |pivot#0@@42| Tclass.KeyType.Key)) (and (=> (|BucketWeights.__default.IRightKeys#requires| |pivot#0@@42|) true) (=> true (|BucketWeights.__default.IRightKeys#requires| |pivot#0@@42|)))) :qid |BucketWe.658:23| :skolemid |4240| :pattern ( (|BucketWeights.__default.IRightKeys#requires| |pivot#0@@42|)) )))
(assert  (=> true (forall ((|pivot#0@@43| T@U) ) (!  (=> (and (= (type |pivot#0@@43|) (SeqType BoxType)) (or (|BucketWeights.__default.IRightKeys#canCall| |pivot#0@@43|) ($Is |pivot#0@@43| Tclass.KeyType.Key))) (and (forall ((|k#0@@97| T@U) ) (!  (=> (and (= (type |k#0@@97|) (SeqType BoxType)) ($Is |k#0@@97| Tclass.KeyType.Key)) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@43| |k#0@@97|)) :qid |BucketWe.658:54| :skolemid |4241| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@43| |k#0@@97|)) )) (= (BucketWeights.__default.IRightKeys |pivot#0@@43|) (|lambda#131| Tclass.KeyType.Key |pivot#0@@43|)))) :qid |BucketWe.658:23| :skolemid |4242| :pattern ( (BucketWeights.__default.IRightKeys |pivot#0@@43|)) ))))
(assert  (=> true (forall ((|pivot#0@@44| T@U) ) (!  (=> (and (= (type |pivot#0@@44|) (SeqType BoxType)) (or (|BucketWeights.__default.IRightKeys#canCall| (Lit |pivot#0@@44|)) ($Is |pivot#0@@44| Tclass.KeyType.Key))) (and (forall ((|k#1@@16| T@U) ) (!  (=> (and (= (type |k#1@@16|) (SeqType BoxType)) ($Is |k#1@@16| Tclass.KeyType.Key)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@44|) |k#1@@16|)) :qid |BucketWe.658:54| :skolemid |4243| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@44| |k#1@@16|)) )) (= (BucketWeights.__default.IRightKeys (Lit |pivot#0@@44|)) (|lambda#131| Tclass.KeyType.Key (Lit |pivot#0@@44|))))) :qid |BucketWe.658:23| :weight 3 :skolemid |4244| :pattern ( (BucketWeights.__default.IRightKeys (Lit |pivot#0@@44|))) ))))
(assert (forall ((arg0@@586 T@U) (arg1@@336 Int) ) (! (= (type (BucketWeights.__default.RouteRange arg0@@586 arg1@@336)) (MapType0Type BoxType boolType)) :qid |funType:BucketWeights.__default.RouteRange| :pattern ( (BucketWeights.__default.RouteRange arg0@@586 arg1@@336)) )))
(assert  (=> true (forall ((|pivots#0@@68| T@U) (|i#0@@184| Int) ) (!  (=> (and (= (type |pivots#0@@68|) (SeqType BoxType)) (or (|BucketWeights.__default.RouteRange#canCall| |pivots#0@@68| |i#0@@184|) (and ($Is |pivots#0@@68| (TSeq Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@68|)))) ($Is (BucketWeights.__default.RouteRange |pivots#0@@68| |i#0@@184|) (TISet Tclass.KeyType.Key))) :qid |BucketWe.859:23| :skolemid |4245| :pattern ( (BucketWeights.__default.RouteRange |pivots#0@@68| |i#0@@184|)) ))))
(assert (forall ((|pivots#0@@69| T@U) (|i#0@@185| Int) ) (!  (=> (and (= (type |pivots#0@@69|) (SeqType BoxType)) ($Is |pivots#0@@69| (TSeq Tclass.KeyType.Key))) (and (=> (|BucketWeights.__default.RouteRange#requires| |pivots#0@@69| |i#0@@185|) (PivotsLib.__default.WFPivots |pivots#0@@69|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@69|) (|BucketWeights.__default.RouteRange#requires| |pivots#0@@69| |i#0@@185|)))) :qid |BucketWe.859:23| :skolemid |4246| :pattern ( (|BucketWeights.__default.RouteRange#requires| |pivots#0@@69| |i#0@@185|)) )))
(assert  (=> true (forall ((|pivots#0@@70| T@U) (|i#0@@186| Int) ) (!  (=> (and (= (type |pivots#0@@70|) (SeqType BoxType)) (or (|BucketWeights.__default.RouteRange#canCall| |pivots#0@@70| |i#0@@186|) (and ($Is |pivots#0@@70| (TSeq Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@70|)))) (and (forall ((|k#0@@98| T@U) ) (!  (=> (and (= (type |k#0@@98|) (SeqType BoxType)) ($Is |k#0@@98| Tclass.KeyType.Key)) (|PivotsLib.__default.Route#canCall| |pivots#0@@70| |k#0@@98|)) :qid |BucketWe.862:10| :skolemid |4247| :pattern ( (PivotsLib.__default.Route |pivots#0@@70| |k#0@@98|)) )) (= (BucketWeights.__default.RouteRange |pivots#0@@70| |i#0@@186|) (|lambda#146| Tclass.KeyType.Key |pivots#0@@70| |i#0@@186|)))) :qid |BucketWe.859:23| :skolemid |4248| :pattern ( (BucketWeights.__default.RouteRange |pivots#0@@70| |i#0@@186|)) ))))
(assert  (=> true (forall ((|pivots#0@@71| T@U) (|i#0@@187| Int) ) (!  (=> (and (= (type |pivots#0@@71|) (SeqType BoxType)) (or (|BucketWeights.__default.RouteRange#canCall| (Lit |pivots#0@@71|) (LitInt |i#0@@187|)) (and ($Is |pivots#0@@71| (TSeq Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@71|)))))))) (and (forall ((|k#1@@17| T@U) ) (!  (=> (and (= (type |k#1@@17|) (SeqType BoxType)) ($Is |k#1@@17| Tclass.KeyType.Key)) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@71|) |k#1@@17|)) :qid |BucketWe.862:10| :skolemid |4249| :pattern ( (PivotsLib.__default.Route |pivots#0@@71| |k#1@@17|)) )) (= (BucketWeights.__default.RouteRange (Lit |pivots#0@@71|) (LitInt |i#0@@187|)) (|lambda#146| Tclass.KeyType.Key (Lit |pivots#0@@71|) (LitInt |i#0@@187|))))) :qid |BucketWe.859:23| :weight 3 :skolemid |4250| :pattern ( (BucketWeights.__default.RouteRange (Lit |pivots#0@@71|) (LitInt |i#0@@187|))) ))))
(assert (forall ((arg0@@587 T@U) (arg1@@337 Int) ) (! (= (type (BucketWeights.__default.RouteRanges arg0@@587 arg1@@337)) (MapType0Type BoxType boolType)) :qid |funType:BucketWeights.__default.RouteRanges| :pattern ( (BucketWeights.__default.RouteRanges arg0@@587 arg1@@337)) )))
(assert  (=> true (forall ((|pivots#0@@72| T@U) (|i#0@@188| Int) ) (!  (=> (and (= (type |pivots#0@@72|) (SeqType BoxType)) (or (|BucketWeights.__default.RouteRanges#canCall| |pivots#0@@72| |i#0@@188|) (and ($Is |pivots#0@@72| (TSeq Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@72|)))) ($Is (BucketWeights.__default.RouteRanges |pivots#0@@72| |i#0@@188|) (TISet Tclass.KeyType.Key))) :qid |BucketWe.1058:24| :skolemid |4251| :pattern ( (BucketWeights.__default.RouteRanges |pivots#0@@72| |i#0@@188|)) ))))
(assert (forall ((|pivots#0@@73| T@U) (|i#0@@189| Int) ) (!  (=> (and (= (type |pivots#0@@73|) (SeqType BoxType)) ($Is |pivots#0@@73| (TSeq Tclass.KeyType.Key))) (and (=> (|BucketWeights.__default.RouteRanges#requires| |pivots#0@@73| |i#0@@189|) (PivotsLib.__default.WFPivots |pivots#0@@73|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@73|) (|BucketWeights.__default.RouteRanges#requires| |pivots#0@@73| |i#0@@189|)))) :qid |BucketWe.1058:24| :skolemid |4252| :pattern ( (|BucketWeights.__default.RouteRanges#requires| |pivots#0@@73| |i#0@@189|)) )))
(assert (forall ((arg0@@588 T@U) (arg1@@338 T@U) (arg2@@230 Int) ) (! (= (type (|lambda#394| arg0@@588 arg1@@338 arg2@@230)) (MapType0Type BoxType boolType)) :qid |funType:lambda#394| :pattern ( (|lambda#394| arg0@@588 arg1@@338 arg2@@230)) )))
(assert  (=> true (forall ((|pivots#0@@74| T@U) (|i#0@@190| Int) ) (!  (=> (and (= (type |pivots#0@@74|) (SeqType BoxType)) (or (|BucketWeights.__default.RouteRanges#canCall| |pivots#0@@74| |i#0@@190|) (and ($Is |pivots#0@@74| (TSeq Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@74|)))) (and (forall ((|k#0@@99| T@U) ) (!  (=> (and (= (type |k#0@@99|) (SeqType BoxType)) ($Is |k#0@@99| Tclass.KeyType.Key)) (|PivotsLib.__default.Route#canCall| |pivots#0@@74| |k#0@@99|)) :qid |BucketWe.1062:10| :skolemid |4253| :pattern ( (PivotsLib.__default.Route |pivots#0@@74| |k#0@@99|)) )) (= (BucketWeights.__default.RouteRanges |pivots#0@@74| |i#0@@190|) (|lambda#394| Tclass.KeyType.Key |pivots#0@@74| |i#0@@190|)))) :qid |BucketWe.1058:24| :skolemid |4254| :pattern ( (BucketWeights.__default.RouteRanges |pivots#0@@74| |i#0@@190|)) ))))
(assert  (=> true (forall ((|pivots#0@@75| T@U) (|i#0@@191| Int) ) (!  (=> (and (= (type |pivots#0@@75|) (SeqType BoxType)) (or (|BucketWeights.__default.RouteRanges#canCall| (Lit |pivots#0@@75|) (LitInt |i#0@@191|)) (and ($Is |pivots#0@@75| (TSeq Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@75|)))))))) (and (forall ((|k#1@@18| T@U) ) (!  (=> (and (= (type |k#1@@18|) (SeqType BoxType)) ($Is |k#1@@18| Tclass.KeyType.Key)) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@75|) |k#1@@18|)) :qid |BucketWe.1062:10| :skolemid |4255| :pattern ( (PivotsLib.__default.Route |pivots#0@@75| |k#1@@18|)) )) (= (BucketWeights.__default.RouteRanges (Lit |pivots#0@@75|) (LitInt |i#0@@191|)) (|lambda#394| Tclass.KeyType.Key (Lit |pivots#0@@75|) |i#0@@191|)))) :qid |BucketWe.1058:24| :weight 3 :skolemid |4256| :pattern ( (BucketWeights.__default.RouteRanges (Lit |pivots#0@@75|) (LitInt |i#0@@191|))) ))))
(assert (forall ((arg0@@589 T@U) (arg1@@339 T@U) (arg2@@231 T@U) ) (! (= (type (|#PivotBetreeSpec.LookupQuery.LookupQuery| arg0@@589 arg1@@339 arg2@@231)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.LookupQuery.LookupQuery| :pattern ( (|#PivotBetreeSpec.LookupQuery.LookupQuery| arg0@@589 arg1@@339 arg2@@231)) )))
(assert (forall ((|a#0#0#0@@6| T@U) (|a#0#1#0@@4| T@U) (|a#0#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#0#0#0@@6|) (SeqType BoxType)) (= (type |a#0#1#0@@4|) (SeqType BoxType))) (= (type |a#0#2#0@@1|) (SeqType BoxType))) (= (DatatypeCtorId (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#0#0#0@@6| |a#0#1#0@@4| |a#0#2#0@@1|)) |##PivotBetreeSpec.LookupQuery.LookupQuery|)) :qid |PivotBet.122:38| :skolemid |4270| :pattern ( (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#0#0#0@@6| |a#0#1#0@@4| |a#0#2#0@@1|)) )))
(assert (forall ((d@@170 T@U) ) (!  (=> (= (type d@@170) DatatypeTypeType) (and (=> (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@170) (= (DatatypeCtorId d@@170) |##PivotBetreeSpec.LookupQuery.LookupQuery|)) (=> (= (DatatypeCtorId d@@170) |##PivotBetreeSpec.LookupQuery.LookupQuery|) (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@170)))) :qid |unknown.0:0| :skolemid |4271| :pattern ( (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@170)) )))
(assert (forall ((d@@171 T@U) ) (!  (=> (and (= (type d@@171) DatatypeTypeType) (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@171)) (exists ((|a#1#0#0@@6| T@U) (|a#1#1#0@@4| T@U) (|a#1#2#0@@1| T@U) ) (!  (and (and (and (= (type |a#1#0#0@@6|) (SeqType BoxType)) (= (type |a#1#1#0@@4|) (SeqType BoxType))) (= (type |a#1#2#0@@1|) (SeqType BoxType))) (= d@@171 (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#1#0#0@@6| |a#1#1#0@@4| |a#1#2#0@@1|))) :qid |PivotBet.122:38| :skolemid |4272| :no-pattern (type |a#1#0#0@@6|) :no-pattern (type |a#1#1#0@@4|) :no-pattern (type |a#1#2#0@@1|) :no-pattern (U_2_int |a#1#0#0@@6|) :no-pattern (U_2_bool |a#1#0#0@@6|) :no-pattern (U_2_int |a#1#1#0@@4|) :no-pattern (U_2_bool |a#1#1#0@@4|) :no-pattern (U_2_int |a#1#2#0@@1|) :no-pattern (U_2_bool |a#1#2#0@@1|) ))) :qid |unknown.0:0| :skolemid |4273| :pattern ( (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@171)) )))
(assert (forall ((|a#2#0#0@@6| T@U) (|a#2#1#0@@4| T@U) (|a#2#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#2#0#0@@6|) (SeqType BoxType)) (= (type |a#2#1#0@@4|) (SeqType BoxType))) (= (type |a#2#2#0@@1|) (SeqType BoxType))) (and (=> ($Is (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#2#0#0@@6| |a#2#1#0@@4| |a#2#2#0@@1|) Tclass.PivotBetreeSpec.LookupQuery) (and (and ($Is |a#2#0#0@@6| Tclass.KeyType.Key) ($Is |a#2#1#0@@4| Tclass.ValueType.Value)) ($Is |a#2#2#0@@1| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) (=> (and (and ($Is |a#2#0#0@@6| Tclass.KeyType.Key) ($Is |a#2#1#0@@4| Tclass.ValueType.Value)) ($Is |a#2#2#0@@1| (TSeq Tclass.PivotBetreeGraph.ReadOp))) ($Is (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#2#0#0@@6| |a#2#1#0@@4| |a#2#2#0@@1|) Tclass.PivotBetreeSpec.LookupQuery)))) :qid |PivotBet.122:38| :skolemid |4274| :pattern ( ($Is (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#2#0#0@@6| |a#2#1#0@@4| |a#2#2#0@@1|) Tclass.PivotBetreeSpec.LookupQuery)) )))
(assert (forall ((|a#3#0#0@@6| T@U) (|a#3#1#0@@4| T@U) (|a#3#2#0@@1| T@U) ($h@@150 T@U) ) (!  (=> (and (and (and (and (= (type |a#3#0#0@@6|) (SeqType BoxType)) (= (type |a#3#1#0@@4|) (SeqType BoxType))) (= (type |a#3#2#0@@1|) (SeqType BoxType))) (= (type $h@@150) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@150)) (and (=> ($IsAlloc (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#3#0#0@@6| |a#3#1#0@@4| |a#3#2#0@@1|) Tclass.PivotBetreeSpec.LookupQuery $h@@150) (and (and ($IsAlloc |a#3#0#0@@6| Tclass.KeyType.Key $h@@150) ($IsAlloc |a#3#1#0@@4| Tclass.ValueType.Value $h@@150)) ($IsAlloc |a#3#2#0@@1| (TSeq Tclass.PivotBetreeGraph.ReadOp) $h@@150))) (=> (and (and ($IsAlloc |a#3#0#0@@6| Tclass.KeyType.Key $h@@150) ($IsAlloc |a#3#1#0@@4| Tclass.ValueType.Value $h@@150)) ($IsAlloc |a#3#2#0@@1| (TSeq Tclass.PivotBetreeGraph.ReadOp) $h@@150)) ($IsAlloc (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#3#0#0@@6| |a#3#1#0@@4| |a#3#2#0@@1|) Tclass.PivotBetreeSpec.LookupQuery $h@@150)))) :qid |PivotBet.122:38| :skolemid |4275| :pattern ( ($IsAlloc (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#3#0#0@@6| |a#3#1#0@@4| |a#3#2#0@@1|) Tclass.PivotBetreeSpec.LookupQuery $h@@150)) )))
(assert (forall ((arg0@@590 T@U) ) (! (= (type (PivotBetreeSpec.LookupQuery.key arg0@@590)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.LookupQuery.key| :pattern ( (PivotBetreeSpec.LookupQuery.key arg0@@590)) )))
(assert (forall ((d@@172 T@U) ($h@@151 T@U) ) (!  (=> (and (and (= (type d@@172) DatatypeTypeType) (= (type $h@@151) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@151) (and (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@172) ($IsAlloc d@@172 Tclass.PivotBetreeSpec.LookupQuery $h@@151)))) ($IsAlloc (PivotBetreeSpec.LookupQuery.key d@@172) Tclass.KeyType.Key $h@@151)) :qid |unknown.0:0| :skolemid |4276| :pattern ( ($IsAlloc (PivotBetreeSpec.LookupQuery.key d@@172) Tclass.KeyType.Key $h@@151)) )))
(assert (forall ((arg0@@591 T@U) ) (! (= (type (PivotBetreeSpec.LookupQuery.value arg0@@591)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.LookupQuery.value| :pattern ( (PivotBetreeSpec.LookupQuery.value arg0@@591)) )))
(assert (forall ((d@@173 T@U) ($h@@152 T@U) ) (!  (=> (and (and (= (type d@@173) DatatypeTypeType) (= (type $h@@152) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@152) (and (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@173) ($IsAlloc d@@173 Tclass.PivotBetreeSpec.LookupQuery $h@@152)))) ($IsAlloc (PivotBetreeSpec.LookupQuery.value d@@173) Tclass.ValueType.Value $h@@152)) :qid |unknown.0:0| :skolemid |4277| :pattern ( ($IsAlloc (PivotBetreeSpec.LookupQuery.value d@@173) Tclass.ValueType.Value $h@@152)) )))
(assert (forall ((arg0@@592 T@U) ) (! (= (type (PivotBetreeSpec.LookupQuery.lookup arg0@@592)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.LookupQuery.lookup| :pattern ( (PivotBetreeSpec.LookupQuery.lookup arg0@@592)) )))
(assert (forall ((d@@174 T@U) ($h@@153 T@U) ) (!  (=> (and (and (= (type d@@174) DatatypeTypeType) (= (type $h@@153) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@153) (and (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@174) ($IsAlloc d@@174 Tclass.PivotBetreeSpec.LookupQuery $h@@153)))) ($IsAlloc (PivotBetreeSpec.LookupQuery.lookup d@@174) (TSeq Tclass.PivotBetreeGraph.ReadOp) $h@@153)) :qid |unknown.0:0| :skolemid |4278| :pattern ( ($IsAlloc (PivotBetreeSpec.LookupQuery.lookup d@@174) (TSeq Tclass.PivotBetreeGraph.ReadOp) $h@@153)) )))
(assert (forall ((|a#4#0#0@@6| T@U) (|a#4#1#0@@4| T@U) (|a#4#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#4#0#0@@6|) (SeqType BoxType)) (= (type |a#4#1#0@@4|) (SeqType BoxType))) (= (type |a#4#2#0@@1|) (SeqType BoxType))) (= (|#PivotBetreeSpec.LookupQuery.LookupQuery| (Lit |a#4#0#0@@6|) (Lit |a#4#1#0@@4|) (Lit |a#4#2#0@@1|)) (Lit (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#4#0#0@@6| |a#4#1#0@@4| |a#4#2#0@@1|)))) :qid |PivotBet.122:38| :skolemid |4279| :pattern ( (|#PivotBetreeSpec.LookupQuery.LookupQuery| (Lit |a#4#0#0@@6|) (Lit |a#4#1#0@@4|) (Lit |a#4#2#0@@1|))) )))
(assert (forall ((|a#5#0#0@@8| T@U) (|a#5#1#0@@4| T@U) (|a#5#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#5#0#0@@8|) (SeqType BoxType)) (= (type |a#5#1#0@@4|) (SeqType BoxType))) (= (type |a#5#2#0@@1|) (SeqType BoxType))) (= (PivotBetreeSpec.LookupQuery.key (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#5#0#0@@8| |a#5#1#0@@4| |a#5#2#0@@1|)) |a#5#0#0@@8|)) :qid |PivotBet.122:38| :skolemid |4280| :pattern ( (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#5#0#0@@8| |a#5#1#0@@4| |a#5#2#0@@1|)) )))
(assert (forall ((|a#6#0#0@@8| T@U) (|a#6#1#0@@4| T@U) (|a#6#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#6#0#0@@8|) (SeqType BoxType)) (= (type |a#6#1#0@@4|) (SeqType BoxType))) (= (type |a#6#2#0@@1|) (SeqType BoxType))) (= (PivotBetreeSpec.LookupQuery.value (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#6#0#0@@8| |a#6#1#0@@4| |a#6#2#0@@1|)) |a#6#1#0@@4|)) :qid |PivotBet.122:38| :skolemid |4281| :pattern ( (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#6#0#0@@8| |a#6#1#0@@4| |a#6#2#0@@1|)) )))
(assert (forall ((|a#7#0#0@@8| T@U) (|a#7#1#0@@4| T@U) (|a#7#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#7#0#0@@8|) (SeqType BoxType)) (= (type |a#7#1#0@@4|) (SeqType BoxType))) (= (type |a#7#2#0@@1|) (SeqType BoxType))) (= (PivotBetreeSpec.LookupQuery.lookup (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#7#0#0@@8| |a#7#1#0@@4| |a#7#2#0@@1|)) |a#7#2#0@@1|)) :qid |PivotBet.122:38| :skolemid |4282| :pattern ( (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#7#0#0@@8| |a#7#1#0@@4| |a#7#2#0@@1|)) )))
(assert (forall ((|a#8#0#0@@8| T@U) (|a#8#1#0@@4| T@U) (|a#8#2#0@@1| T@U) (i@@38 Int) ) (!  (=> (and (and (and (= (type |a#8#0#0@@8|) (SeqType BoxType)) (= (type |a#8#1#0@@4|) (SeqType BoxType))) (= (type |a#8#2#0@@1|) (SeqType BoxType))) (and (<= 0 i@@38) (< i@@38 (|Seq#Length| |a#8#2#0@@1|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#8#2#0@@1| i@@38))) (DtRank (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#8#0#0@@8| |a#8#1#0@@4| |a#8#2#0@@1|)))) :qid |PivotBet.122:38| :skolemid |4283| :pattern ( (|Seq#Index| |a#8#2#0@@1| i@@38) (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#8#0#0@@8| |a#8#1#0@@4| |a#8#2#0@@1|)) )))
(assert (forall ((|a#9#0#0@@7| T@U) (|a#9#1#0@@3| T@U) (|a#9#2#0@@1| T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@7|) (SeqType BoxType)) (= (type |a#9#1#0@@3|) (SeqType BoxType))) (= (type |a#9#2#0@@1|) (SeqType BoxType))) (< (|Seq#Rank| |a#9#2#0@@1|) (DtRank (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#9#0#0@@7| |a#9#1#0@@3| |a#9#2#0@@1|)))) :qid |PivotBet.122:38| :skolemid |4284| :pattern ( (|#PivotBetreeSpec.LookupQuery.LookupQuery| |a#9#0#0@@7| |a#9#1#0@@3| |a#9#2#0@@1|)) )))
(assert (forall ((d@@175 T@U) ) (!  (=> (and (= (type d@@175) DatatypeTypeType) (|$IsA#PivotBetreeSpec.LookupQuery| d@@175)) (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@175)) :qid |unknown.0:0| :skolemid |4285| :pattern ( (|$IsA#PivotBetreeSpec.LookupQuery| d@@175)) )))
(assert (forall ((d@@176 T@U) ) (!  (=> (and (= (type d@@176) DatatypeTypeType) ($Is d@@176 Tclass.PivotBetreeSpec.LookupQuery)) (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@176)) :qid |unknown.0:0| :skolemid |4286| :pattern ( (PivotBetreeSpec.LookupQuery.LookupQuery_q d@@176) ($Is d@@176 Tclass.PivotBetreeSpec.LookupQuery)) )))
(assert (forall ((a@@188 T@U) (b@@119 T@U) ) (!  (=> (and (and (= (type a@@188) DatatypeTypeType) (= (type b@@119) DatatypeTypeType)) true) (and (=> (|PivotBetreeSpec.LookupQuery#Equal| a@@188 b@@119) (and (and (|Seq#Equal| (PivotBetreeSpec.LookupQuery.key a@@188) (PivotBetreeSpec.LookupQuery.key b@@119)) (|Seq#Equal| (PivotBetreeSpec.LookupQuery.value a@@188) (PivotBetreeSpec.LookupQuery.value b@@119))) (|Seq#Equal| (PivotBetreeSpec.LookupQuery.lookup a@@188) (PivotBetreeSpec.LookupQuery.lookup b@@119)))) (=> (and (and (|Seq#Equal| (PivotBetreeSpec.LookupQuery.key a@@188) (PivotBetreeSpec.LookupQuery.key b@@119)) (|Seq#Equal| (PivotBetreeSpec.LookupQuery.value a@@188) (PivotBetreeSpec.LookupQuery.value b@@119))) (|Seq#Equal| (PivotBetreeSpec.LookupQuery.lookup a@@188) (PivotBetreeSpec.LookupQuery.lookup b@@119))) (|PivotBetreeSpec.LookupQuery#Equal| a@@188 b@@119)))) :qid |unknown.0:0| :skolemid |4287| :pattern ( (|PivotBetreeSpec.LookupQuery#Equal| a@@188 b@@119)) )))
(assert (forall ((a@@189 T@U) (b@@120 T@U) ) (!  (=> (and (= (type a@@189) DatatypeTypeType) (= (type b@@120) DatatypeTypeType)) (and (=> (|PivotBetreeSpec.LookupQuery#Equal| a@@189 b@@120) (= a@@189 b@@120)) (=> (= a@@189 b@@120) (|PivotBetreeSpec.LookupQuery#Equal| a@@189 b@@120)))) :qid |unknown.0:0| :skolemid |4288| :pattern ( (|PivotBetreeSpec.LookupQuery#Equal| a@@189 b@@120)) )))
(assert (forall ((arg0@@593 T@U) (arg1@@340 T@U) (arg2@@232 T@U) (arg3@@153 T@U) (arg4@@118 T@U) ) (! (= (type (|#PivotBetreeSpec.SuccQuery.SuccQuery| arg0@@593 arg1@@340 arg2@@232 arg3@@153 arg4@@118)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.SuccQuery.SuccQuery| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| arg0@@593 arg1@@340 arg2@@232 arg3@@153 arg4@@118)) )))
(assert (forall ((|a#10#0#0@@7| T@U) (|a#10#1#0@@3| T@U) (|a#10#2#0@@1| T@U) (|a#10#3#0| T@U) (|a#10#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#10#0#0@@7|) DatatypeTypeType) (= (type |a#10#1#0@@3|) (SeqType BoxType))) (= (type |a#10#2#0@@1|) DatatypeTypeType)) (= (type |a#10#3#0|) (SeqType BoxType))) (= (type |a#10#4#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#10#0#0@@7| |a#10#1#0@@3| |a#10#2#0@@1| |a#10#3#0| |a#10#4#0|)) |##PivotBetreeSpec.SuccQuery.SuccQuery|)) :qid |PivotBet.217:7| :skolemid |4289| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#10#0#0@@7| |a#10#1#0@@3| |a#10#2#0@@1| |a#10#3#0| |a#10#4#0|)) )))
(assert (forall ((d@@177 T@U) ) (!  (=> (= (type d@@177) DatatypeTypeType) (and (=> (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@177) (= (DatatypeCtorId d@@177) |##PivotBetreeSpec.SuccQuery.SuccQuery|)) (=> (= (DatatypeCtorId d@@177) |##PivotBetreeSpec.SuccQuery.SuccQuery|) (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@177)))) :qid |unknown.0:0| :skolemid |4290| :pattern ( (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@177)) )))
(assert (forall ((d@@178 T@U) ) (!  (=> (and (= (type d@@178) DatatypeTypeType) (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@178)) (exists ((|a#11#0#0@@7| T@U) (|a#11#1#0@@3| T@U) (|a#11#2#0@@1| T@U) (|a#11#3#0| T@U) (|a#11#4#0| T@U) ) (!  (and (and (and (and (and (= (type |a#11#0#0@@7|) DatatypeTypeType) (= (type |a#11#1#0@@3|) (SeqType BoxType))) (= (type |a#11#2#0@@1|) DatatypeTypeType)) (= (type |a#11#3#0|) (SeqType BoxType))) (= (type |a#11#4#0|) (SeqType BoxType))) (= d@@178 (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#11#0#0@@7| |a#11#1#0@@3| |a#11#2#0@@1| |a#11#3#0| |a#11#4#0|))) :qid |PivotBet.217:7| :skolemid |4291| :no-pattern (type |a#11#0#0@@7|) :no-pattern (type |a#11#1#0@@3|) :no-pattern (type |a#11#2#0@@1|) :no-pattern (type |a#11#3#0|) :no-pattern (type |a#11#4#0|) :no-pattern (U_2_int |a#11#0#0@@7|) :no-pattern (U_2_bool |a#11#0#0@@7|) :no-pattern (U_2_int |a#11#1#0@@3|) :no-pattern (U_2_bool |a#11#1#0@@3|) :no-pattern (U_2_int |a#11#2#0@@1|) :no-pattern (U_2_bool |a#11#2#0@@1|) :no-pattern (U_2_int |a#11#3#0|) :no-pattern (U_2_bool |a#11#3#0|) :no-pattern (U_2_int |a#11#4#0|) :no-pattern (U_2_bool |a#11#4#0|) ))) :qid |unknown.0:0| :skolemid |4292| :pattern ( (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@178)) )))
(assert (forall ((|a#12#0#0@@5| T@U) (|a#12#1#0@@3| T@U) (|a#12#2#0@@1| T@U) (|a#12#3#0| T@U) (|a#12#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#12#0#0@@5|) DatatypeTypeType) (= (type |a#12#1#0@@3|) (SeqType BoxType))) (= (type |a#12#2#0@@1|) DatatypeTypeType)) (= (type |a#12#3#0|) (SeqType BoxType))) (= (type |a#12#4#0|) (SeqType BoxType))) (and (=> ($Is (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#12#0#0@@5| |a#12#1#0@@3| |a#12#2#0@@1| |a#12#3#0| |a#12#4#0|) Tclass.PivotBetreeSpec.SuccQuery) (and (and (and (and ($Is |a#12#0#0@@5| Tclass.UI.RangeStart) ($Is |a#12#1#0@@3| (TSeq Tclass.UI.SuccResult))) ($Is |a#12#2#0@@1| Tclass.UI.RangeEnd)) ($Is |a#12#3#0| (TSeq Tclass.BucketsLib.Bucket))) ($Is |a#12#4#0| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) (=> (and (and (and (and ($Is |a#12#0#0@@5| Tclass.UI.RangeStart) ($Is |a#12#1#0@@3| (TSeq Tclass.UI.SuccResult))) ($Is |a#12#2#0@@1| Tclass.UI.RangeEnd)) ($Is |a#12#3#0| (TSeq Tclass.BucketsLib.Bucket))) ($Is |a#12#4#0| (TSeq Tclass.PivotBetreeGraph.ReadOp))) ($Is (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#12#0#0@@5| |a#12#1#0@@3| |a#12#2#0@@1| |a#12#3#0| |a#12#4#0|) Tclass.PivotBetreeSpec.SuccQuery)))) :qid |PivotBet.217:7| :skolemid |4293| :pattern ( ($Is (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#12#0#0@@5| |a#12#1#0@@3| |a#12#2#0@@1| |a#12#3#0| |a#12#4#0|) Tclass.PivotBetreeSpec.SuccQuery)) )))
(assert (forall ((|a#13#0#0@@4| T@U) (|a#13#1#0@@4| T@U) (|a#13#2#0@@0| T@U) (|a#13#3#0| T@U) (|a#13#4#0| T@U) ($h@@154 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#13#0#0@@4|) DatatypeTypeType) (= (type |a#13#1#0@@4|) (SeqType BoxType))) (= (type |a#13#2#0@@0|) DatatypeTypeType)) (= (type |a#13#3#0|) (SeqType BoxType))) (= (type |a#13#4#0|) (SeqType BoxType))) (= (type $h@@154) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@154)) (and (=> ($IsAlloc (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#13#0#0@@4| |a#13#1#0@@4| |a#13#2#0@@0| |a#13#3#0| |a#13#4#0|) Tclass.PivotBetreeSpec.SuccQuery $h@@154) (and (and (and (and ($IsAlloc |a#13#0#0@@4| Tclass.UI.RangeStart $h@@154) ($IsAlloc |a#13#1#0@@4| (TSeq Tclass.UI.SuccResult) $h@@154)) ($IsAlloc |a#13#2#0@@0| Tclass.UI.RangeEnd $h@@154)) ($IsAlloc |a#13#3#0| (TSeq Tclass.BucketsLib.Bucket) $h@@154)) ($IsAlloc |a#13#4#0| (TSeq Tclass.PivotBetreeGraph.ReadOp) $h@@154))) (=> (and (and (and (and ($IsAlloc |a#13#0#0@@4| Tclass.UI.RangeStart $h@@154) ($IsAlloc |a#13#1#0@@4| (TSeq Tclass.UI.SuccResult) $h@@154)) ($IsAlloc |a#13#2#0@@0| Tclass.UI.RangeEnd $h@@154)) ($IsAlloc |a#13#3#0| (TSeq Tclass.BucketsLib.Bucket) $h@@154)) ($IsAlloc |a#13#4#0| (TSeq Tclass.PivotBetreeGraph.ReadOp) $h@@154)) ($IsAlloc (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#13#0#0@@4| |a#13#1#0@@4| |a#13#2#0@@0| |a#13#3#0| |a#13#4#0|) Tclass.PivotBetreeSpec.SuccQuery $h@@154)))) :qid |PivotBet.217:7| :skolemid |4294| :pattern ( ($IsAlloc (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#13#0#0@@4| |a#13#1#0@@4| |a#13#2#0@@0| |a#13#3#0| |a#13#4#0|) Tclass.PivotBetreeSpec.SuccQuery $h@@154)) )))
(assert (forall ((arg0@@594 T@U) ) (! (= (type (PivotBetreeSpec.SuccQuery.start arg0@@594)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.SuccQuery.start| :pattern ( (PivotBetreeSpec.SuccQuery.start arg0@@594)) )))
(assert (forall ((d@@179 T@U) ($h@@155 T@U) ) (!  (=> (and (and (= (type d@@179) DatatypeTypeType) (= (type $h@@155) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@155) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@179) ($IsAlloc d@@179 Tclass.PivotBetreeSpec.SuccQuery $h@@155)))) ($IsAlloc (PivotBetreeSpec.SuccQuery.start d@@179) Tclass.UI.RangeStart $h@@155)) :qid |unknown.0:0| :skolemid |4295| :pattern ( ($IsAlloc (PivotBetreeSpec.SuccQuery.start d@@179) Tclass.UI.RangeStart $h@@155)) )))
(assert (forall ((arg0@@595 T@U) ) (! (= (type (PivotBetreeSpec.SuccQuery.results arg0@@595)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.SuccQuery.results| :pattern ( (PivotBetreeSpec.SuccQuery.results arg0@@595)) )))
(assert (forall ((d@@180 T@U) ($h@@156 T@U) ) (!  (=> (and (and (= (type d@@180) DatatypeTypeType) (= (type $h@@156) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@156) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@180) ($IsAlloc d@@180 Tclass.PivotBetreeSpec.SuccQuery $h@@156)))) ($IsAlloc (PivotBetreeSpec.SuccQuery.results d@@180) (TSeq Tclass.UI.SuccResult) $h@@156)) :qid |unknown.0:0| :skolemid |4296| :pattern ( ($IsAlloc (PivotBetreeSpec.SuccQuery.results d@@180) (TSeq Tclass.UI.SuccResult) $h@@156)) )))
(assert (forall ((arg0@@596 T@U) ) (! (= (type (PivotBetreeSpec.SuccQuery.end arg0@@596)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.SuccQuery.end| :pattern ( (PivotBetreeSpec.SuccQuery.end arg0@@596)) )))
(assert (forall ((d@@181 T@U) ($h@@157 T@U) ) (!  (=> (and (and (= (type d@@181) DatatypeTypeType) (= (type $h@@157) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@157) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@181) ($IsAlloc d@@181 Tclass.PivotBetreeSpec.SuccQuery $h@@157)))) ($IsAlloc (PivotBetreeSpec.SuccQuery.end d@@181) Tclass.UI.RangeEnd $h@@157)) :qid |unknown.0:0| :skolemid |4297| :pattern ( ($IsAlloc (PivotBetreeSpec.SuccQuery.end d@@181) Tclass.UI.RangeEnd $h@@157)) )))
(assert (forall ((arg0@@597 T@U) ) (! (= (type (PivotBetreeSpec.SuccQuery.buckets arg0@@597)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.SuccQuery.buckets| :pattern ( (PivotBetreeSpec.SuccQuery.buckets arg0@@597)) )))
(assert (forall ((d@@182 T@U) ($h@@158 T@U) ) (!  (=> (and (and (= (type d@@182) DatatypeTypeType) (= (type $h@@158) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@158) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@182) ($IsAlloc d@@182 Tclass.PivotBetreeSpec.SuccQuery $h@@158)))) ($IsAlloc (PivotBetreeSpec.SuccQuery.buckets d@@182) (TSeq Tclass.BucketsLib.Bucket) $h@@158)) :qid |unknown.0:0| :skolemid |4298| :pattern ( ($IsAlloc (PivotBetreeSpec.SuccQuery.buckets d@@182) (TSeq Tclass.BucketsLib.Bucket) $h@@158)) )))
(assert (forall ((arg0@@598 T@U) ) (! (= (type (PivotBetreeSpec.SuccQuery.lookup arg0@@598)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.SuccQuery.lookup| :pattern ( (PivotBetreeSpec.SuccQuery.lookup arg0@@598)) )))
(assert (forall ((d@@183 T@U) ($h@@159 T@U) ) (!  (=> (and (and (= (type d@@183) DatatypeTypeType) (= (type $h@@159) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@159) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@183) ($IsAlloc d@@183 Tclass.PivotBetreeSpec.SuccQuery $h@@159)))) ($IsAlloc (PivotBetreeSpec.SuccQuery.lookup d@@183) (TSeq Tclass.PivotBetreeGraph.ReadOp) $h@@159)) :qid |unknown.0:0| :skolemid |4299| :pattern ( ($IsAlloc (PivotBetreeSpec.SuccQuery.lookup d@@183) (TSeq Tclass.PivotBetreeGraph.ReadOp) $h@@159)) )))
(assert (forall ((|a#14#0#0@@3| T@U) (|a#14#1#0@@3| T@U) (|a#14#2#0| T@U) (|a#14#3#0| T@U) (|a#14#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#14#0#0@@3|) DatatypeTypeType) (= (type |a#14#1#0@@3|) (SeqType BoxType))) (= (type |a#14#2#0|) DatatypeTypeType)) (= (type |a#14#3#0|) (SeqType BoxType))) (= (type |a#14#4#0|) (SeqType BoxType))) (= (|#PivotBetreeSpec.SuccQuery.SuccQuery| (Lit |a#14#0#0@@3|) (Lit |a#14#1#0@@3|) (Lit |a#14#2#0|) (Lit |a#14#3#0|) (Lit |a#14#4#0|)) (Lit (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#14#0#0@@3| |a#14#1#0@@3| |a#14#2#0| |a#14#3#0| |a#14#4#0|)))) :qid |PivotBet.217:7| :skolemid |4300| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| (Lit |a#14#0#0@@3|) (Lit |a#14#1#0@@3|) (Lit |a#14#2#0|) (Lit |a#14#3#0|) (Lit |a#14#4#0|))) )))
(assert (forall ((|a#15#0#0@@3| T@U) (|a#15#1#0@@3| T@U) (|a#15#2#0| T@U) (|a#15#3#0| T@U) (|a#15#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#15#0#0@@3|) DatatypeTypeType) (= (type |a#15#1#0@@3|) (SeqType BoxType))) (= (type |a#15#2#0|) DatatypeTypeType)) (= (type |a#15#3#0|) (SeqType BoxType))) (= (type |a#15#4#0|) (SeqType BoxType))) (= (PivotBetreeSpec.SuccQuery.start (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#15#0#0@@3| |a#15#1#0@@3| |a#15#2#0| |a#15#3#0| |a#15#4#0|)) |a#15#0#0@@3|)) :qid |PivotBet.217:7| :skolemid |4301| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#15#0#0@@3| |a#15#1#0@@3| |a#15#2#0| |a#15#3#0| |a#15#4#0|)) )))
(assert (forall ((|a#16#0#0@@3| T@U) (|a#16#1#0@@3| T@U) (|a#16#2#0| T@U) (|a#16#3#0| T@U) (|a#16#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#16#0#0@@3|) DatatypeTypeType) (= (type |a#16#1#0@@3|) (SeqType BoxType))) (= (type |a#16#2#0|) DatatypeTypeType)) (= (type |a#16#3#0|) (SeqType BoxType))) (= (type |a#16#4#0|) (SeqType BoxType))) (< (DtRank |a#16#0#0@@3|) (DtRank (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#16#0#0@@3| |a#16#1#0@@3| |a#16#2#0| |a#16#3#0| |a#16#4#0|)))) :qid |PivotBet.217:7| :skolemid |4302| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#16#0#0@@3| |a#16#1#0@@3| |a#16#2#0| |a#16#3#0| |a#16#4#0|)) )))
(assert (forall ((|a#17#0#0@@4| T@U) (|a#17#1#0@@3| T@U) (|a#17#2#0| T@U) (|a#17#3#0| T@U) (|a#17#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#17#0#0@@4|) DatatypeTypeType) (= (type |a#17#1#0@@3|) (SeqType BoxType))) (= (type |a#17#2#0|) DatatypeTypeType)) (= (type |a#17#3#0|) (SeqType BoxType))) (= (type |a#17#4#0|) (SeqType BoxType))) (= (PivotBetreeSpec.SuccQuery.results (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#17#0#0@@4| |a#17#1#0@@3| |a#17#2#0| |a#17#3#0| |a#17#4#0|)) |a#17#1#0@@3|)) :qid |PivotBet.217:7| :skolemid |4303| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#17#0#0@@4| |a#17#1#0@@3| |a#17#2#0| |a#17#3#0| |a#17#4#0|)) )))
(assert (forall ((|a#18#0#0@@4| T@U) (|a#18#1#0@@3| T@U) (|a#18#2#0| T@U) (|a#18#3#0| T@U) (|a#18#4#0| T@U) (i@@39 Int) ) (!  (=> (and (and (and (and (and (= (type |a#18#0#0@@4|) DatatypeTypeType) (= (type |a#18#1#0@@3|) (SeqType BoxType))) (= (type |a#18#2#0|) DatatypeTypeType)) (= (type |a#18#3#0|) (SeqType BoxType))) (= (type |a#18#4#0|) (SeqType BoxType))) (and (<= 0 i@@39) (< i@@39 (|Seq#Length| |a#18#1#0@@3|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#18#1#0@@3| i@@39))) (DtRank (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#18#0#0@@4| |a#18#1#0@@3| |a#18#2#0| |a#18#3#0| |a#18#4#0|)))) :qid |PivotBet.217:7| :skolemid |4304| :pattern ( (|Seq#Index| |a#18#1#0@@3| i@@39) (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#18#0#0@@4| |a#18#1#0@@3| |a#18#2#0| |a#18#3#0| |a#18#4#0|)) )))
(assert (forall ((|a#19#0#0@@4| T@U) (|a#19#1#0@@3| T@U) (|a#19#2#0| T@U) (|a#19#3#0| T@U) (|a#19#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#19#0#0@@4|) DatatypeTypeType) (= (type |a#19#1#0@@3|) (SeqType BoxType))) (= (type |a#19#2#0|) DatatypeTypeType)) (= (type |a#19#3#0|) (SeqType BoxType))) (= (type |a#19#4#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#19#1#0@@3|) (DtRank (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#19#0#0@@4| |a#19#1#0@@3| |a#19#2#0| |a#19#3#0| |a#19#4#0|)))) :qid |PivotBet.217:7| :skolemid |4305| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#19#0#0@@4| |a#19#1#0@@3| |a#19#2#0| |a#19#3#0| |a#19#4#0|)) )))
(assert (forall ((|a#20#0#0@@4| T@U) (|a#20#1#0@@3| T@U) (|a#20#2#0| T@U) (|a#20#3#0| T@U) (|a#20#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#20#0#0@@4|) DatatypeTypeType) (= (type |a#20#1#0@@3|) (SeqType BoxType))) (= (type |a#20#2#0|) DatatypeTypeType)) (= (type |a#20#3#0|) (SeqType BoxType))) (= (type |a#20#4#0|) (SeqType BoxType))) (= (PivotBetreeSpec.SuccQuery.end (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#20#0#0@@4| |a#20#1#0@@3| |a#20#2#0| |a#20#3#0| |a#20#4#0|)) |a#20#2#0|)) :qid |PivotBet.217:7| :skolemid |4306| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#20#0#0@@4| |a#20#1#0@@3| |a#20#2#0| |a#20#3#0| |a#20#4#0|)) )))
(assert (forall ((|a#21#0#0@@4| T@U) (|a#21#1#0@@3| T@U) (|a#21#2#0| T@U) (|a#21#3#0| T@U) (|a#21#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#21#0#0@@4|) DatatypeTypeType) (= (type |a#21#1#0@@3|) (SeqType BoxType))) (= (type |a#21#2#0|) DatatypeTypeType)) (= (type |a#21#3#0|) (SeqType BoxType))) (= (type |a#21#4#0|) (SeqType BoxType))) (< (DtRank |a#21#2#0|) (DtRank (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#21#0#0@@4| |a#21#1#0@@3| |a#21#2#0| |a#21#3#0| |a#21#4#0|)))) :qid |PivotBet.217:7| :skolemid |4307| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#21#0#0@@4| |a#21#1#0@@3| |a#21#2#0| |a#21#3#0| |a#21#4#0|)) )))
(assert (forall ((|a#22#0#0@@4| T@U) (|a#22#1#0@@3| T@U) (|a#22#2#0| T@U) (|a#22#3#0| T@U) (|a#22#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#22#0#0@@4|) DatatypeTypeType) (= (type |a#22#1#0@@3|) (SeqType BoxType))) (= (type |a#22#2#0|) DatatypeTypeType)) (= (type |a#22#3#0|) (SeqType BoxType))) (= (type |a#22#4#0|) (SeqType BoxType))) (= (PivotBetreeSpec.SuccQuery.buckets (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#22#0#0@@4| |a#22#1#0@@3| |a#22#2#0| |a#22#3#0| |a#22#4#0|)) |a#22#3#0|)) :qid |PivotBet.217:7| :skolemid |4308| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#22#0#0@@4| |a#22#1#0@@3| |a#22#2#0| |a#22#3#0| |a#22#4#0|)) )))
(assert (forall ((|a#23#0#0@@4| T@U) (|a#23#1#0@@3| T@U) (|a#23#2#0| T@U) (|a#23#3#0| T@U) (|a#23#4#0| T@U) (i@@40 Int) ) (!  (=> (and (and (and (and (and (= (type |a#23#0#0@@4|) DatatypeTypeType) (= (type |a#23#1#0@@3|) (SeqType BoxType))) (= (type |a#23#2#0|) DatatypeTypeType)) (= (type |a#23#3#0|) (SeqType BoxType))) (= (type |a#23#4#0|) (SeqType BoxType))) (and (<= 0 i@@40) (< i@@40 (|Seq#Length| |a#23#3#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#23#3#0| i@@40))) (DtRank (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#23#0#0@@4| |a#23#1#0@@3| |a#23#2#0| |a#23#3#0| |a#23#4#0|)))) :qid |PivotBet.217:7| :skolemid |4309| :pattern ( (|Seq#Index| |a#23#3#0| i@@40) (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#23#0#0@@4| |a#23#1#0@@3| |a#23#2#0| |a#23#3#0| |a#23#4#0|)) )))
(assert (forall ((|a#24#0#0@@1| T@U) (|a#24#1#0@@0| T@U) (|a#24#2#0| T@U) (|a#24#3#0| T@U) (|a#24#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#24#0#0@@1|) DatatypeTypeType) (= (type |a#24#1#0@@0|) (SeqType BoxType))) (= (type |a#24#2#0|) DatatypeTypeType)) (= (type |a#24#3#0|) (SeqType BoxType))) (= (type |a#24#4#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#24#3#0|) (DtRank (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#24#0#0@@1| |a#24#1#0@@0| |a#24#2#0| |a#24#3#0| |a#24#4#0|)))) :qid |PivotBet.217:7| :skolemid |4310| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#24#0#0@@1| |a#24#1#0@@0| |a#24#2#0| |a#24#3#0| |a#24#4#0|)) )))
(assert (forall ((|a#25#0#0@@1| T@U) (|a#25#1#0@@0| T@U) (|a#25#2#0| T@U) (|a#25#3#0| T@U) (|a#25#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#25#0#0@@1|) DatatypeTypeType) (= (type |a#25#1#0@@0|) (SeqType BoxType))) (= (type |a#25#2#0|) DatatypeTypeType)) (= (type |a#25#3#0|) (SeqType BoxType))) (= (type |a#25#4#0|) (SeqType BoxType))) (= (PivotBetreeSpec.SuccQuery.lookup (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#25#0#0@@1| |a#25#1#0@@0| |a#25#2#0| |a#25#3#0| |a#25#4#0|)) |a#25#4#0|)) :qid |PivotBet.217:7| :skolemid |4311| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#25#0#0@@1| |a#25#1#0@@0| |a#25#2#0| |a#25#3#0| |a#25#4#0|)) )))
(assert (forall ((|a#26#0#0@@1| T@U) (|a#26#1#0@@0| T@U) (|a#26#2#0| T@U) (|a#26#3#0| T@U) (|a#26#4#0| T@U) (i@@41 Int) ) (!  (=> (and (and (and (and (and (= (type |a#26#0#0@@1|) DatatypeTypeType) (= (type |a#26#1#0@@0|) (SeqType BoxType))) (= (type |a#26#2#0|) DatatypeTypeType)) (= (type |a#26#3#0|) (SeqType BoxType))) (= (type |a#26#4#0|) (SeqType BoxType))) (and (<= 0 i@@41) (< i@@41 (|Seq#Length| |a#26#4#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#26#4#0| i@@41))) (DtRank (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#26#0#0@@1| |a#26#1#0@@0| |a#26#2#0| |a#26#3#0| |a#26#4#0|)))) :qid |PivotBet.217:7| :skolemid |4312| :pattern ( (|Seq#Index| |a#26#4#0| i@@41) (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#26#0#0@@1| |a#26#1#0@@0| |a#26#2#0| |a#26#3#0| |a#26#4#0|)) )))
(assert (forall ((|a#27#0#0@@1| T@U) (|a#27#1#0@@0| T@U) (|a#27#2#0@@0| T@U) (|a#27#3#0| T@U) (|a#27#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#27#0#0@@1|) DatatypeTypeType) (= (type |a#27#1#0@@0|) (SeqType BoxType))) (= (type |a#27#2#0@@0|) DatatypeTypeType)) (= (type |a#27#3#0|) (SeqType BoxType))) (= (type |a#27#4#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#27#4#0|) (DtRank (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#27#0#0@@1| |a#27#1#0@@0| |a#27#2#0@@0| |a#27#3#0| |a#27#4#0|)))) :qid |PivotBet.217:7| :skolemid |4313| :pattern ( (|#PivotBetreeSpec.SuccQuery.SuccQuery| |a#27#0#0@@1| |a#27#1#0@@0| |a#27#2#0@@0| |a#27#3#0| |a#27#4#0|)) )))
(assert (forall ((d@@184 T@U) ) (!  (=> (and (= (type d@@184) DatatypeTypeType) (|$IsA#PivotBetreeSpec.SuccQuery| d@@184)) (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@184)) :qid |unknown.0:0| :skolemid |4314| :pattern ( (|$IsA#PivotBetreeSpec.SuccQuery| d@@184)) )))
(assert (forall ((d@@185 T@U) ) (!  (=> (and (= (type d@@185) DatatypeTypeType) ($Is d@@185 Tclass.PivotBetreeSpec.SuccQuery)) (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@185)) :qid |unknown.0:0| :skolemid |4315| :pattern ( (PivotBetreeSpec.SuccQuery.SuccQuery_q d@@185) ($Is d@@185 Tclass.PivotBetreeSpec.SuccQuery)) )))
(assert (forall ((a@@190 T@U) (b@@121 T@U) ) (!  (=> (and (and (= (type a@@190) DatatypeTypeType) (= (type b@@121) DatatypeTypeType)) true) (and (=> (|PivotBetreeSpec.SuccQuery#Equal| a@@190 b@@121) (and (and (and (and (|UI.RangeStart#Equal| (PivotBetreeSpec.SuccQuery.start a@@190) (PivotBetreeSpec.SuccQuery.start b@@121)) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.results a@@190) (PivotBetreeSpec.SuccQuery.results b@@121))) (|UI.RangeEnd#Equal| (PivotBetreeSpec.SuccQuery.end a@@190) (PivotBetreeSpec.SuccQuery.end b@@121))) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.buckets a@@190) (PivotBetreeSpec.SuccQuery.buckets b@@121))) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.lookup a@@190) (PivotBetreeSpec.SuccQuery.lookup b@@121)))) (=> (and (and (and (and (|UI.RangeStart#Equal| (PivotBetreeSpec.SuccQuery.start a@@190) (PivotBetreeSpec.SuccQuery.start b@@121)) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.results a@@190) (PivotBetreeSpec.SuccQuery.results b@@121))) (|UI.RangeEnd#Equal| (PivotBetreeSpec.SuccQuery.end a@@190) (PivotBetreeSpec.SuccQuery.end b@@121))) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.buckets a@@190) (PivotBetreeSpec.SuccQuery.buckets b@@121))) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.lookup a@@190) (PivotBetreeSpec.SuccQuery.lookup b@@121))) (|PivotBetreeSpec.SuccQuery#Equal| a@@190 b@@121)))) :qid |unknown.0:0| :skolemid |4316| :pattern ( (|PivotBetreeSpec.SuccQuery#Equal| a@@190 b@@121)) )))
(assert (forall ((a@@191 T@U) (b@@122 T@U) ) (!  (=> (and (= (type a@@191) DatatypeTypeType) (= (type b@@122) DatatypeTypeType)) (and (=> (|PivotBetreeSpec.SuccQuery#Equal| a@@191 b@@122) (= a@@191 b@@122)) (=> (= a@@191 b@@122) (|PivotBetreeSpec.SuccQuery#Equal| a@@191 b@@122)))) :qid |unknown.0:0| :skolemid |4317| :pattern ( (|PivotBetreeSpec.SuccQuery#Equal| a@@191 b@@122)) )))
(assert (forall ((arg0@@599 T@U) (arg1@@341 T@U) (arg2@@233 T@U) ) (! (= (type (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| arg0@@599 arg1@@341 arg2@@233)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.MessageInsertion.MessageInsertion| :pattern ( (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| arg0@@599 arg1@@341 arg2@@233)) )))
(assert (forall ((|a#28#0#0@@1| T@U) (|a#28#1#0@@0| T@U) (|a#28#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#28#0#0@@1|) (SeqType BoxType)) (= (type |a#28#1#0@@0|) DatatypeTypeType)) (= (type |a#28#2#0@@0|) DatatypeTypeType)) (= (DatatypeCtorId (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#28#0#0@@1| |a#28#1#0@@0| |a#28#2#0@@0|)) |##PivotBetreeSpec.MessageInsertion.MessageInsertion|)) :qid |PivotBet.290:48| :skolemid |4318| :pattern ( (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#28#0#0@@1| |a#28#1#0@@0| |a#28#2#0@@0|)) )))
(assert (forall ((d@@186 T@U) ) (!  (=> (= (type d@@186) DatatypeTypeType) (and (=> (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@186) (= (DatatypeCtorId d@@186) |##PivotBetreeSpec.MessageInsertion.MessageInsertion|)) (=> (= (DatatypeCtorId d@@186) |##PivotBetreeSpec.MessageInsertion.MessageInsertion|) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@186)))) :qid |unknown.0:0| :skolemid |4319| :pattern ( (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@186)) )))
(assert (forall ((d@@187 T@U) ) (!  (=> (and (= (type d@@187) DatatypeTypeType) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@187)) (exists ((|a#29#0#0@@0| T@U) (|a#29#1#0@@0| T@U) (|a#29#2#0@@0| T@U) ) (!  (and (and (and (= (type |a#29#0#0@@0|) (SeqType BoxType)) (= (type |a#29#1#0@@0|) DatatypeTypeType)) (= (type |a#29#2#0@@0|) DatatypeTypeType)) (= d@@187 (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#29#0#0@@0| |a#29#1#0@@0| |a#29#2#0@@0|))) :qid |PivotBet.290:48| :skolemid |4320| :no-pattern (type |a#29#0#0@@0|) :no-pattern (type |a#29#1#0@@0|) :no-pattern (type |a#29#2#0@@0|) :no-pattern (U_2_int |a#29#0#0@@0|) :no-pattern (U_2_bool |a#29#0#0@@0|) :no-pattern (U_2_int |a#29#1#0@@0|) :no-pattern (U_2_bool |a#29#1#0@@0|) :no-pattern (U_2_int |a#29#2#0@@0|) :no-pattern (U_2_bool |a#29#2#0@@0|) ))) :qid |unknown.0:0| :skolemid |4321| :pattern ( (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@187)) )))
(assert (forall ((|a#30#0#0@@0| T@U) (|a#30#1#0@@0| T@U) (|a#30#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#30#0#0@@0|) (SeqType BoxType)) (= (type |a#30#1#0@@0|) DatatypeTypeType)) (= (type |a#30#2#0@@0|) DatatypeTypeType)) (and (=> ($Is (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#30#0#0@@0| |a#30#1#0@@0| |a#30#2#0@@0|) Tclass.PivotBetreeSpec.MessageInsertion) (and (and ($Is |a#30#0#0@@0| Tclass.KeyType.Key) ($Is |a#30#1#0@@0| Tclass.ValueMessage.Message)) ($Is |a#30#2#0@@0| Tclass.PivotBetreeGraph.Node))) (=> (and (and ($Is |a#30#0#0@@0| Tclass.KeyType.Key) ($Is |a#30#1#0@@0| Tclass.ValueMessage.Message)) ($Is |a#30#2#0@@0| Tclass.PivotBetreeGraph.Node)) ($Is (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#30#0#0@@0| |a#30#1#0@@0| |a#30#2#0@@0|) Tclass.PivotBetreeSpec.MessageInsertion)))) :qid |PivotBet.290:48| :skolemid |4322| :pattern ( ($Is (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#30#0#0@@0| |a#30#1#0@@0| |a#30#2#0@@0|) Tclass.PivotBetreeSpec.MessageInsertion)) )))
(assert (forall ((|a#31#0#0@@0| T@U) (|a#31#1#0@@0| T@U) (|a#31#2#0@@0| T@U) ($h@@160 T@U) ) (!  (=> (and (and (and (and (= (type |a#31#0#0@@0|) (SeqType BoxType)) (= (type |a#31#1#0@@0|) DatatypeTypeType)) (= (type |a#31#2#0@@0|) DatatypeTypeType)) (= (type $h@@160) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@160)) (and (=> ($IsAlloc (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#31#0#0@@0| |a#31#1#0@@0| |a#31#2#0@@0|) Tclass.PivotBetreeSpec.MessageInsertion $h@@160) (and (and ($IsAlloc |a#31#0#0@@0| Tclass.KeyType.Key $h@@160) ($IsAlloc |a#31#1#0@@0| Tclass.ValueMessage.Message $h@@160)) ($IsAlloc |a#31#2#0@@0| Tclass.PivotBetreeGraph.Node $h@@160))) (=> (and (and ($IsAlloc |a#31#0#0@@0| Tclass.KeyType.Key $h@@160) ($IsAlloc |a#31#1#0@@0| Tclass.ValueMessage.Message $h@@160)) ($IsAlloc |a#31#2#0@@0| Tclass.PivotBetreeGraph.Node $h@@160)) ($IsAlloc (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#31#0#0@@0| |a#31#1#0@@0| |a#31#2#0@@0|) Tclass.PivotBetreeSpec.MessageInsertion $h@@160)))) :qid |PivotBet.290:48| :skolemid |4323| :pattern ( ($IsAlloc (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#31#0#0@@0| |a#31#1#0@@0| |a#31#2#0@@0|) Tclass.PivotBetreeSpec.MessageInsertion $h@@160)) )))
(assert (forall ((arg0@@600 T@U) ) (! (= (type (PivotBetreeSpec.MessageInsertion.key arg0@@600)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.MessageInsertion.key| :pattern ( (PivotBetreeSpec.MessageInsertion.key arg0@@600)) )))
(assert (forall ((d@@188 T@U) ($h@@161 T@U) ) (!  (=> (and (and (= (type d@@188) DatatypeTypeType) (= (type $h@@161) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@161) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@188) ($IsAlloc d@@188 Tclass.PivotBetreeSpec.MessageInsertion $h@@161)))) ($IsAlloc (PivotBetreeSpec.MessageInsertion.key d@@188) Tclass.KeyType.Key $h@@161)) :qid |unknown.0:0| :skolemid |4324| :pattern ( ($IsAlloc (PivotBetreeSpec.MessageInsertion.key d@@188) Tclass.KeyType.Key $h@@161)) )))
(assert (forall ((arg0@@601 T@U) ) (! (= (type (PivotBetreeSpec.MessageInsertion.msg arg0@@601)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.MessageInsertion.msg| :pattern ( (PivotBetreeSpec.MessageInsertion.msg arg0@@601)) )))
(assert (forall ((d@@189 T@U) ($h@@162 T@U) ) (!  (=> (and (and (= (type d@@189) DatatypeTypeType) (= (type $h@@162) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@162) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@189) ($IsAlloc d@@189 Tclass.PivotBetreeSpec.MessageInsertion $h@@162)))) ($IsAlloc (PivotBetreeSpec.MessageInsertion.msg d@@189) Tclass.ValueMessage.Message $h@@162)) :qid |unknown.0:0| :skolemid |4325| :pattern ( ($IsAlloc (PivotBetreeSpec.MessageInsertion.msg d@@189) Tclass.ValueMessage.Message $h@@162)) )))
(assert (forall ((arg0@@602 T@U) ) (! (= (type (PivotBetreeSpec.MessageInsertion.oldroot arg0@@602)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.MessageInsertion.oldroot| :pattern ( (PivotBetreeSpec.MessageInsertion.oldroot arg0@@602)) )))
(assert (forall ((d@@190 T@U) ($h@@163 T@U) ) (!  (=> (and (and (= (type d@@190) DatatypeTypeType) (= (type $h@@163) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@163) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@190) ($IsAlloc d@@190 Tclass.PivotBetreeSpec.MessageInsertion $h@@163)))) ($IsAlloc (PivotBetreeSpec.MessageInsertion.oldroot d@@190) Tclass.PivotBetreeGraph.Node $h@@163)) :qid |unknown.0:0| :skolemid |4326| :pattern ( ($IsAlloc (PivotBetreeSpec.MessageInsertion.oldroot d@@190) Tclass.PivotBetreeGraph.Node $h@@163)) )))
(assert (forall ((|a#32#0#0@@0| T@U) (|a#32#1#0@@0| T@U) (|a#32#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#32#0#0@@0|) (SeqType BoxType)) (= (type |a#32#1#0@@0|) DatatypeTypeType)) (= (type |a#32#2#0@@0|) DatatypeTypeType)) (= (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| (Lit |a#32#0#0@@0|) (Lit |a#32#1#0@@0|) (Lit |a#32#2#0@@0|)) (Lit (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#32#0#0@@0| |a#32#1#0@@0| |a#32#2#0@@0|)))) :qid |PivotBet.290:48| :skolemid |4327| :pattern ( (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| (Lit |a#32#0#0@@0|) (Lit |a#32#1#0@@0|) (Lit |a#32#2#0@@0|))) )))
(assert (forall ((|a#33#0#0@@0| T@U) (|a#33#1#0@@0| T@U) (|a#33#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#33#0#0@@0|) (SeqType BoxType)) (= (type |a#33#1#0@@0|) DatatypeTypeType)) (= (type |a#33#2#0@@0|) DatatypeTypeType)) (= (PivotBetreeSpec.MessageInsertion.key (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#33#0#0@@0| |a#33#1#0@@0| |a#33#2#0@@0|)) |a#33#0#0@@0|)) :qid |PivotBet.290:48| :skolemid |4328| :pattern ( (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#33#0#0@@0| |a#33#1#0@@0| |a#33#2#0@@0|)) )))
(assert (forall ((|a#34#0#0@@1| T@U) (|a#34#1#0@@1| T@U) (|a#34#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#34#0#0@@1|) (SeqType BoxType)) (= (type |a#34#1#0@@1|) DatatypeTypeType)) (= (type |a#34#2#0@@0|) DatatypeTypeType)) (= (PivotBetreeSpec.MessageInsertion.msg (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#34#0#0@@1| |a#34#1#0@@1| |a#34#2#0@@0|)) |a#34#1#0@@1|)) :qid |PivotBet.290:48| :skolemid |4329| :pattern ( (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#34#0#0@@1| |a#34#1#0@@1| |a#34#2#0@@0|)) )))
(assert (forall ((|a#35#0#0@@1| T@U) (|a#35#1#0@@1| T@U) (|a#35#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#35#0#0@@1|) (SeqType BoxType)) (= (type |a#35#1#0@@1|) DatatypeTypeType)) (= (type |a#35#2#0@@0|) DatatypeTypeType)) (< (DtRank |a#35#1#0@@1|) (DtRank (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#35#0#0@@1| |a#35#1#0@@1| |a#35#2#0@@0|)))) :qid |PivotBet.290:48| :skolemid |4330| :pattern ( (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#35#0#0@@1| |a#35#1#0@@1| |a#35#2#0@@0|)) )))
(assert (forall ((|a#36#0#0@@1| T@U) (|a#36#1#0@@1| T@U) (|a#36#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#36#0#0@@1|) (SeqType BoxType)) (= (type |a#36#1#0@@1|) DatatypeTypeType)) (= (type |a#36#2#0@@0|) DatatypeTypeType)) (= (PivotBetreeSpec.MessageInsertion.oldroot (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#36#0#0@@1| |a#36#1#0@@1| |a#36#2#0@@0|)) |a#36#2#0@@0|)) :qid |PivotBet.290:48| :skolemid |4331| :pattern ( (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#36#0#0@@1| |a#36#1#0@@1| |a#36#2#0@@0|)) )))
(assert (forall ((|a#37#0#0@@1| T@U) (|a#37#1#0@@1| T@U) (|a#37#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#37#0#0@@1|) (SeqType BoxType)) (= (type |a#37#1#0@@1|) DatatypeTypeType)) (= (type |a#37#2#0@@0|) DatatypeTypeType)) (< (DtRank |a#37#2#0@@0|) (DtRank (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#37#0#0@@1| |a#37#1#0@@1| |a#37#2#0@@0|)))) :qid |PivotBet.290:48| :skolemid |4332| :pattern ( (|#PivotBetreeSpec.MessageInsertion.MessageInsertion| |a#37#0#0@@1| |a#37#1#0@@1| |a#37#2#0@@0|)) )))
(assert (forall ((d@@191 T@U) ) (!  (=> (and (= (type d@@191) DatatypeTypeType) (|$IsA#PivotBetreeSpec.MessageInsertion| d@@191)) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@191)) :qid |unknown.0:0| :skolemid |4333| :pattern ( (|$IsA#PivotBetreeSpec.MessageInsertion| d@@191)) )))
(assert (forall ((d@@192 T@U) ) (!  (=> (and (= (type d@@192) DatatypeTypeType) ($Is d@@192 Tclass.PivotBetreeSpec.MessageInsertion)) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@192)) :qid |unknown.0:0| :skolemid |4334| :pattern ( (PivotBetreeSpec.MessageInsertion.MessageInsertion_q d@@192) ($Is d@@192 Tclass.PivotBetreeSpec.MessageInsertion)) )))
(assert (forall ((a@@192 T@U) (b@@123 T@U) ) (!  (=> (and (and (= (type a@@192) DatatypeTypeType) (= (type b@@123) DatatypeTypeType)) true) (and (=> (|PivotBetreeSpec.MessageInsertion#Equal| a@@192 b@@123) (and (and (|Seq#Equal| (PivotBetreeSpec.MessageInsertion.key a@@192) (PivotBetreeSpec.MessageInsertion.key b@@123)) (|ValueMessage.Message#Equal| (PivotBetreeSpec.MessageInsertion.msg a@@192) (PivotBetreeSpec.MessageInsertion.msg b@@123))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.MessageInsertion.oldroot a@@192) (PivotBetreeSpec.MessageInsertion.oldroot b@@123)))) (=> (and (and (|Seq#Equal| (PivotBetreeSpec.MessageInsertion.key a@@192) (PivotBetreeSpec.MessageInsertion.key b@@123)) (|ValueMessage.Message#Equal| (PivotBetreeSpec.MessageInsertion.msg a@@192) (PivotBetreeSpec.MessageInsertion.msg b@@123))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.MessageInsertion.oldroot a@@192) (PivotBetreeSpec.MessageInsertion.oldroot b@@123))) (|PivotBetreeSpec.MessageInsertion#Equal| a@@192 b@@123)))) :qid |unknown.0:0| :skolemid |4335| :pattern ( (|PivotBetreeSpec.MessageInsertion#Equal| a@@192 b@@123)) )))
(assert (forall ((a@@193 T@U) (b@@124 T@U) ) (!  (=> (and (= (type a@@193) DatatypeTypeType) (= (type b@@124) DatatypeTypeType)) (and (=> (|PivotBetreeSpec.MessageInsertion#Equal| a@@193 b@@124) (= a@@193 b@@124)) (=> (= a@@193 b@@124) (|PivotBetreeSpec.MessageInsertion#Equal| a@@193 b@@124)))) :qid |unknown.0:0| :skolemid |4336| :pattern ( (|PivotBetreeSpec.MessageInsertion#Equal| a@@193 b@@124)) )))
(assert (forall ((arg0@@603 T@U) (arg1@@342 T@U) (arg2@@234 T@U) (arg3@@154 T@U) (arg4@@119 T@U) (arg5@@77 T@U) (arg6@@57 Int) (arg7@@41 T@U) (arg8@@26 T@U) (arg9@@8 T@U) ) (! (= (type (|#PivotBetreeSpec.NodeFlush.NodeFlush| arg0@@603 arg1@@342 arg2@@234 arg3@@154 arg4@@119 arg5@@77 arg6@@57 arg7@@41 arg8@@26 arg9@@8)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.NodeFlush.NodeFlush| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| arg0@@603 arg1@@342 arg2@@234 arg3@@154 arg4@@119 arg5@@77 arg6@@57 arg7@@41 arg8@@26 arg9@@8)) )))
(assert (forall ((|a#38#0#0@@1| T@U) (|a#38#1#0@@1| T@U) (|a#38#2#0@@0| T@U) (|a#38#3#0| T@U) (|a#38#4#0| T@U) (|a#38#5#0| T@U) (|a#38#6#0| Int) (|a#38#7#0| T@U) (|a#38#8#0| T@U) (|a#38#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#38#0#0@@1|) BoxType) (= (type |a#38#1#0@@1|) DatatypeTypeType)) (= (type |a#38#2#0@@0|) BoxType)) (= (type |a#38#3#0|) DatatypeTypeType)) (= (type |a#38#4#0|) BoxType)) (= (type |a#38#5#0|) DatatypeTypeType)) (= (type |a#38#7#0|) (MapType0Type BoxType boolType))) (= (type |a#38#8#0|) DatatypeTypeType)) (= (type |a#38#9#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#38#0#0@@1| |a#38#1#0@@1| |a#38#2#0@@0| |a#38#3#0| |a#38#4#0| |a#38#5#0| |a#38#6#0| |a#38#7#0| |a#38#8#0| |a#38#9#0|)) |##PivotBetreeSpec.NodeFlush.NodeFlush|)) :qid |PivotBet.315:5| :skolemid |4337| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#38#0#0@@1| |a#38#1#0@@1| |a#38#2#0@@0| |a#38#3#0| |a#38#4#0| |a#38#5#0| |a#38#6#0| |a#38#7#0| |a#38#8#0| |a#38#9#0|)) )))
(assert (forall ((d@@193 T@U) ) (!  (=> (= (type d@@193) DatatypeTypeType) (and (=> (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@193) (= (DatatypeCtorId d@@193) |##PivotBetreeSpec.NodeFlush.NodeFlush|)) (=> (= (DatatypeCtorId d@@193) |##PivotBetreeSpec.NodeFlush.NodeFlush|) (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@193)))) :qid |unknown.0:0| :skolemid |4338| :pattern ( (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@193)) )))
(assert (forall ((d@@194 T@U) ) (!  (=> (and (= (type d@@194) DatatypeTypeType) (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@194)) (exists ((|a#39#0#0@@0| T@U) (|a#39#1#0@@0| T@U) (|a#39#2#0| T@U) (|a#39#3#0| T@U) (|a#39#4#0| T@U) (|a#39#5#0| T@U) (|a#39#6#0| Int) (|a#39#7#0| T@U) (|a#39#8#0| T@U) (|a#39#9#0| T@U) ) (!  (and (and (and (and (and (and (and (and (and (= (type |a#39#0#0@@0|) BoxType) (= (type |a#39#1#0@@0|) DatatypeTypeType)) (= (type |a#39#2#0|) BoxType)) (= (type |a#39#3#0|) DatatypeTypeType)) (= (type |a#39#4#0|) BoxType)) (= (type |a#39#5#0|) DatatypeTypeType)) (= (type |a#39#7#0|) (MapType0Type BoxType boolType))) (= (type |a#39#8#0|) DatatypeTypeType)) (= (type |a#39#9#0|) (SeqType BoxType))) (= d@@194 (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#39#0#0@@0| |a#39#1#0@@0| |a#39#2#0| |a#39#3#0| |a#39#4#0| |a#39#5#0| |a#39#6#0| |a#39#7#0| |a#39#8#0| |a#39#9#0|))) :qid |PivotBet.315:5| :skolemid |4339| :no-pattern (type |a#39#0#0@@0|) :no-pattern (type |a#39#1#0@@0|) :no-pattern (type |a#39#2#0|) :no-pattern (type |a#39#3#0|) :no-pattern (type |a#39#4#0|) :no-pattern (type |a#39#5#0|) :no-pattern (type |a#39#7#0|) :no-pattern (type |a#39#8#0|) :no-pattern (type |a#39#9#0|) :no-pattern (U_2_int |a#39#0#0@@0|) :no-pattern (U_2_bool |a#39#0#0@@0|) :no-pattern (U_2_int |a#39#1#0@@0|) :no-pattern (U_2_bool |a#39#1#0@@0|) :no-pattern (U_2_int |a#39#2#0|) :no-pattern (U_2_bool |a#39#2#0|) :no-pattern (U_2_int |a#39#3#0|) :no-pattern (U_2_bool |a#39#3#0|) :no-pattern (U_2_int |a#39#4#0|) :no-pattern (U_2_bool |a#39#4#0|) :no-pattern (U_2_int |a#39#5#0|) :no-pattern (U_2_bool |a#39#5#0|) :no-pattern (U_2_int |a#39#7#0|) :no-pattern (U_2_bool |a#39#7#0|) :no-pattern (U_2_int |a#39#8#0|) :no-pattern (U_2_bool |a#39#8#0|) :no-pattern (U_2_int |a#39#9#0|) :no-pattern (U_2_bool |a#39#9#0|) ))) :qid |unknown.0:0| :skolemid |4340| :pattern ( (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@194)) )))
(assert (forall ((|a#40#0#0@@0| T@U) (|a#40#1#0@@0| T@U) (|a#40#2#0| T@U) (|a#40#3#0| T@U) (|a#40#4#0| T@U) (|a#40#5#0| T@U) (|a#40#6#0| Int) (|a#40#7#0| T@U) (|a#40#8#0| T@U) (|a#40#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#40#0#0@@0|) BoxType) (= (type |a#40#1#0@@0|) DatatypeTypeType)) (= (type |a#40#2#0|) BoxType)) (= (type |a#40#3#0|) DatatypeTypeType)) (= (type |a#40#4#0|) BoxType)) (= (type |a#40#5#0|) DatatypeTypeType)) (= (type |a#40#7#0|) (MapType0Type BoxType boolType))) (= (type |a#40#8#0|) DatatypeTypeType)) (= (type |a#40#9#0|) (SeqType BoxType))) (and (=> ($Is (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#40#0#0@@0| |a#40#1#0@@0| |a#40#2#0| |a#40#3#0| |a#40#4#0| |a#40#5#0| |a#40#6#0| |a#40#7#0| |a#40#8#0| |a#40#9#0|) Tclass.PivotBetreeSpec.NodeFlush) (and (and (and (and (and (and (and (and (and ($IsBox |a#40#0#0@@0| Tclass.ReferenceType.Reference) ($Is |a#40#1#0@@0| Tclass.PivotBetreeGraph.Node)) ($IsBox |a#40#2#0| Tclass.ReferenceType.Reference)) ($Is |a#40#3#0| Tclass.PivotBetreeGraph.Node)) ($IsBox |a#40#4#0| Tclass.ReferenceType.Reference)) ($Is |a#40#5#0| Tclass.PivotBetreeGraph.Node)) ($Is (int_2_U |a#40#6#0|) TInt)) ($Is |a#40#7#0| (TSet Tclass.KeyType.Key))) ($Is |a#40#8#0| Tclass.BucketsLib.Bucket)) ($Is |a#40#9#0| (TSeq Tclass.BucketsLib.Bucket)))) (=> (and (and (and (and (and (and (and (and (and ($IsBox |a#40#0#0@@0| Tclass.ReferenceType.Reference) ($Is |a#40#1#0@@0| Tclass.PivotBetreeGraph.Node)) ($IsBox |a#40#2#0| Tclass.ReferenceType.Reference)) ($Is |a#40#3#0| Tclass.PivotBetreeGraph.Node)) ($IsBox |a#40#4#0| Tclass.ReferenceType.Reference)) ($Is |a#40#5#0| Tclass.PivotBetreeGraph.Node)) ($Is (int_2_U |a#40#6#0|) TInt)) ($Is |a#40#7#0| (TSet Tclass.KeyType.Key))) ($Is |a#40#8#0| Tclass.BucketsLib.Bucket)) ($Is |a#40#9#0| (TSeq Tclass.BucketsLib.Bucket))) ($Is (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#40#0#0@@0| |a#40#1#0@@0| |a#40#2#0| |a#40#3#0| |a#40#4#0| |a#40#5#0| |a#40#6#0| |a#40#7#0| |a#40#8#0| |a#40#9#0|) Tclass.PivotBetreeSpec.NodeFlush)))) :qid |PivotBet.315:5| :skolemid |4341| :pattern ( ($Is (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#40#0#0@@0| |a#40#1#0@@0| |a#40#2#0| |a#40#3#0| |a#40#4#0| |a#40#5#0| |a#40#6#0| |a#40#7#0| |a#40#8#0| |a#40#9#0|) Tclass.PivotBetreeSpec.NodeFlush)) )))
(assert (forall ((|a#41#0#0@@0| T@U) (|a#41#1#0@@0| T@U) (|a#41#2#0| T@U) (|a#41#3#0| T@U) (|a#41#4#0| T@U) (|a#41#5#0| T@U) (|a#41#6#0| Int) (|a#41#7#0| T@U) (|a#41#8#0| T@U) (|a#41#9#0| T@U) ($h@@164 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |a#41#0#0@@0|) BoxType) (= (type |a#41#1#0@@0|) DatatypeTypeType)) (= (type |a#41#2#0|) BoxType)) (= (type |a#41#3#0|) DatatypeTypeType)) (= (type |a#41#4#0|) BoxType)) (= (type |a#41#5#0|) DatatypeTypeType)) (= (type |a#41#7#0|) (MapType0Type BoxType boolType))) (= (type |a#41#8#0|) DatatypeTypeType)) (= (type |a#41#9#0|) (SeqType BoxType))) (= (type $h@@164) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@164)) (and (=> ($IsAlloc (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#41#0#0@@0| |a#41#1#0@@0| |a#41#2#0| |a#41#3#0| |a#41#4#0| |a#41#5#0| |a#41#6#0| |a#41#7#0| |a#41#8#0| |a#41#9#0|) Tclass.PivotBetreeSpec.NodeFlush $h@@164) (and (and (and (and (and (and (and (and (and ($IsAllocBox |a#41#0#0@@0| Tclass.ReferenceType.Reference $h@@164) ($IsAlloc |a#41#1#0@@0| Tclass.PivotBetreeGraph.Node $h@@164)) ($IsAllocBox |a#41#2#0| Tclass.ReferenceType.Reference $h@@164)) ($IsAlloc |a#41#3#0| Tclass.PivotBetreeGraph.Node $h@@164)) ($IsAllocBox |a#41#4#0| Tclass.ReferenceType.Reference $h@@164)) ($IsAlloc |a#41#5#0| Tclass.PivotBetreeGraph.Node $h@@164)) ($IsAlloc (int_2_U |a#41#6#0|) TInt $h@@164)) ($IsAlloc |a#41#7#0| (TSet Tclass.KeyType.Key) $h@@164)) ($IsAlloc |a#41#8#0| Tclass.BucketsLib.Bucket $h@@164)) ($IsAlloc |a#41#9#0| (TSeq Tclass.BucketsLib.Bucket) $h@@164))) (=> (and (and (and (and (and (and (and (and (and ($IsAllocBox |a#41#0#0@@0| Tclass.ReferenceType.Reference $h@@164) ($IsAlloc |a#41#1#0@@0| Tclass.PivotBetreeGraph.Node $h@@164)) ($IsAllocBox |a#41#2#0| Tclass.ReferenceType.Reference $h@@164)) ($IsAlloc |a#41#3#0| Tclass.PivotBetreeGraph.Node $h@@164)) ($IsAllocBox |a#41#4#0| Tclass.ReferenceType.Reference $h@@164)) ($IsAlloc |a#41#5#0| Tclass.PivotBetreeGraph.Node $h@@164)) ($IsAlloc (int_2_U |a#41#6#0|) TInt $h@@164)) ($IsAlloc |a#41#7#0| (TSet Tclass.KeyType.Key) $h@@164)) ($IsAlloc |a#41#8#0| Tclass.BucketsLib.Bucket $h@@164)) ($IsAlloc |a#41#9#0| (TSeq Tclass.BucketsLib.Bucket) $h@@164)) ($IsAlloc (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#41#0#0@@0| |a#41#1#0@@0| |a#41#2#0| |a#41#3#0| |a#41#4#0| |a#41#5#0| |a#41#6#0| |a#41#7#0| |a#41#8#0| |a#41#9#0|) Tclass.PivotBetreeSpec.NodeFlush $h@@164)))) :qid |PivotBet.315:5| :skolemid |4342| :pattern ( ($IsAlloc (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#41#0#0@@0| |a#41#1#0@@0| |a#41#2#0| |a#41#3#0| |a#41#4#0| |a#41#5#0| |a#41#6#0| |a#41#7#0| |a#41#8#0| |a#41#9#0|) Tclass.PivotBetreeSpec.NodeFlush $h@@164)) )))
(assert (forall ((arg0@@604 T@U) ) (! (= (type (PivotBetreeSpec.NodeFlush.parentref arg0@@604)) BoxType) :qid |funType:PivotBetreeSpec.NodeFlush.parentref| :pattern ( (PivotBetreeSpec.NodeFlush.parentref arg0@@604)) )))
(assert (forall ((d@@195 T@U) ($h@@165 T@U) ) (!  (=> (and (and (= (type d@@195) DatatypeTypeType) (= (type $h@@165) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@165) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@195) ($IsAlloc d@@195 Tclass.PivotBetreeSpec.NodeFlush $h@@165)))) ($IsAllocBox (PivotBetreeSpec.NodeFlush.parentref d@@195) Tclass.ReferenceType.Reference $h@@165)) :qid |unknown.0:0| :skolemid |4343| :pattern ( ($IsAllocBox (PivotBetreeSpec.NodeFlush.parentref d@@195) Tclass.ReferenceType.Reference $h@@165)) )))
(assert (forall ((arg0@@605 T@U) ) (! (= (type (PivotBetreeSpec.NodeFlush.parent arg0@@605)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.NodeFlush.parent| :pattern ( (PivotBetreeSpec.NodeFlush.parent arg0@@605)) )))
(assert (forall ((d@@196 T@U) ($h@@166 T@U) ) (!  (=> (and (and (= (type d@@196) DatatypeTypeType) (= (type $h@@166) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@166) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@196) ($IsAlloc d@@196 Tclass.PivotBetreeSpec.NodeFlush $h@@166)))) ($IsAlloc (PivotBetreeSpec.NodeFlush.parent d@@196) Tclass.PivotBetreeGraph.Node $h@@166)) :qid |unknown.0:0| :skolemid |4344| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFlush.parent d@@196) Tclass.PivotBetreeGraph.Node $h@@166)) )))
(assert (forall ((arg0@@606 T@U) ) (! (= (type (PivotBetreeSpec.NodeFlush.childref arg0@@606)) BoxType) :qid |funType:PivotBetreeSpec.NodeFlush.childref| :pattern ( (PivotBetreeSpec.NodeFlush.childref arg0@@606)) )))
(assert (forall ((d@@197 T@U) ($h@@167 T@U) ) (!  (=> (and (and (= (type d@@197) DatatypeTypeType) (= (type $h@@167) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@167) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@197) ($IsAlloc d@@197 Tclass.PivotBetreeSpec.NodeFlush $h@@167)))) ($IsAllocBox (PivotBetreeSpec.NodeFlush.childref d@@197) Tclass.ReferenceType.Reference $h@@167)) :qid |unknown.0:0| :skolemid |4345| :pattern ( ($IsAllocBox (PivotBetreeSpec.NodeFlush.childref d@@197) Tclass.ReferenceType.Reference $h@@167)) )))
(assert (forall ((arg0@@607 T@U) ) (! (= (type (PivotBetreeSpec.NodeFlush.child arg0@@607)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.NodeFlush.child| :pattern ( (PivotBetreeSpec.NodeFlush.child arg0@@607)) )))
(assert (forall ((d@@198 T@U) ($h@@168 T@U) ) (!  (=> (and (and (= (type d@@198) DatatypeTypeType) (= (type $h@@168) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@168) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@198) ($IsAlloc d@@198 Tclass.PivotBetreeSpec.NodeFlush $h@@168)))) ($IsAlloc (PivotBetreeSpec.NodeFlush.child d@@198) Tclass.PivotBetreeGraph.Node $h@@168)) :qid |unknown.0:0| :skolemid |4346| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFlush.child d@@198) Tclass.PivotBetreeGraph.Node $h@@168)) )))
(assert (forall ((arg0@@608 T@U) ) (! (= (type (PivotBetreeSpec.NodeFlush.newchildref arg0@@608)) BoxType) :qid |funType:PivotBetreeSpec.NodeFlush.newchildref| :pattern ( (PivotBetreeSpec.NodeFlush.newchildref arg0@@608)) )))
(assert (forall ((d@@199 T@U) ($h@@169 T@U) ) (!  (=> (and (and (= (type d@@199) DatatypeTypeType) (= (type $h@@169) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@169) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@199) ($IsAlloc d@@199 Tclass.PivotBetreeSpec.NodeFlush $h@@169)))) ($IsAllocBox (PivotBetreeSpec.NodeFlush.newchildref d@@199) Tclass.ReferenceType.Reference $h@@169)) :qid |unknown.0:0| :skolemid |4347| :pattern ( ($IsAllocBox (PivotBetreeSpec.NodeFlush.newchildref d@@199) Tclass.ReferenceType.Reference $h@@169)) )))
(assert (forall ((arg0@@609 T@U) ) (! (= (type (PivotBetreeSpec.NodeFlush.newchild arg0@@609)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.NodeFlush.newchild| :pattern ( (PivotBetreeSpec.NodeFlush.newchild arg0@@609)) )))
(assert (forall ((d@@200 T@U) ($h@@170 T@U) ) (!  (=> (and (and (= (type d@@200) DatatypeTypeType) (= (type $h@@170) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@170) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@200) ($IsAlloc d@@200 Tclass.PivotBetreeSpec.NodeFlush $h@@170)))) ($IsAlloc (PivotBetreeSpec.NodeFlush.newchild d@@200) Tclass.PivotBetreeGraph.Node $h@@170)) :qid |unknown.0:0| :skolemid |4348| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFlush.newchild d@@200) Tclass.PivotBetreeGraph.Node $h@@170)) )))
(assert (forall ((d@@201 T@U) ($h@@171 T@U) ) (!  (=> (and (and (= (type d@@201) DatatypeTypeType) (= (type $h@@171) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@171) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@201) ($IsAlloc d@@201 Tclass.PivotBetreeSpec.NodeFlush $h@@171)))) ($IsAlloc (int_2_U (PivotBetreeSpec.NodeFlush.slotIndex d@@201)) TInt $h@@171)) :qid |unknown.0:0| :skolemid |4349| :pattern ( ($IsAlloc (int_2_U (PivotBetreeSpec.NodeFlush.slotIndex d@@201)) TInt $h@@171)) )))
(assert (forall ((arg0@@610 T@U) ) (! (= (type (PivotBetreeSpec.NodeFlush.keys arg0@@610)) (MapType0Type BoxType boolType)) :qid |funType:PivotBetreeSpec.NodeFlush.keys| :pattern ( (PivotBetreeSpec.NodeFlush.keys arg0@@610)) )))
(assert (forall ((d@@202 T@U) ($h@@172 T@U) ) (!  (=> (and (and (= (type d@@202) DatatypeTypeType) (= (type $h@@172) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@172) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@202) ($IsAlloc d@@202 Tclass.PivotBetreeSpec.NodeFlush $h@@172)))) ($IsAlloc (PivotBetreeSpec.NodeFlush.keys d@@202) (TSet Tclass.KeyType.Key) $h@@172)) :qid |unknown.0:0| :skolemid |4350| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFlush.keys d@@202) (TSet Tclass.KeyType.Key) $h@@172)) )))
(assert (forall ((arg0@@611 T@U) ) (! (= (type (PivotBetreeSpec.NodeFlush.newParentBucket arg0@@611)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.NodeFlush.newParentBucket| :pattern ( (PivotBetreeSpec.NodeFlush.newParentBucket arg0@@611)) )))
(assert (forall ((d@@203 T@U) ($h@@173 T@U) ) (!  (=> (and (and (= (type d@@203) DatatypeTypeType) (= (type $h@@173) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@173) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@203) ($IsAlloc d@@203 Tclass.PivotBetreeSpec.NodeFlush $h@@173)))) ($IsAlloc (PivotBetreeSpec.NodeFlush.newParentBucket d@@203) Tclass.BucketsLib.Bucket $h@@173)) :qid |unknown.0:0| :skolemid |4351| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFlush.newParentBucket d@@203) Tclass.BucketsLib.Bucket $h@@173)) )))
(assert (forall ((arg0@@612 T@U) ) (! (= (type (PivotBetreeSpec.NodeFlush.newChildBuckets arg0@@612)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.NodeFlush.newChildBuckets| :pattern ( (PivotBetreeSpec.NodeFlush.newChildBuckets arg0@@612)) )))
(assert (forall ((d@@204 T@U) ($h@@174 T@U) ) (!  (=> (and (and (= (type d@@204) DatatypeTypeType) (= (type $h@@174) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@174) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@204) ($IsAlloc d@@204 Tclass.PivotBetreeSpec.NodeFlush $h@@174)))) ($IsAlloc (PivotBetreeSpec.NodeFlush.newChildBuckets d@@204) (TSeq Tclass.BucketsLib.Bucket) $h@@174)) :qid |unknown.0:0| :skolemid |4352| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFlush.newChildBuckets d@@204) (TSeq Tclass.BucketsLib.Bucket) $h@@174)) )))
(assert (forall ((|a#42#0#0@@0| T@U) (|a#42#1#0@@0| T@U) (|a#42#2#0| T@U) (|a#42#3#0| T@U) (|a#42#4#0| T@U) (|a#42#5#0| T@U) (|a#42#6#0| Int) (|a#42#7#0| T@U) (|a#42#8#0| T@U) (|a#42#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#42#0#0@@0|) BoxType) (= (type |a#42#1#0@@0|) DatatypeTypeType)) (= (type |a#42#2#0|) BoxType)) (= (type |a#42#3#0|) DatatypeTypeType)) (= (type |a#42#4#0|) BoxType)) (= (type |a#42#5#0|) DatatypeTypeType)) (= (type |a#42#7#0|) (MapType0Type BoxType boolType))) (= (type |a#42#8#0|) DatatypeTypeType)) (= (type |a#42#9#0|) (SeqType BoxType))) (= (|#PivotBetreeSpec.NodeFlush.NodeFlush| (Lit |a#42#0#0@@0|) (Lit |a#42#1#0@@0|) (Lit |a#42#2#0|) (Lit |a#42#3#0|) (Lit |a#42#4#0|) (Lit |a#42#5#0|) (LitInt |a#42#6#0|) (Lit |a#42#7#0|) (Lit |a#42#8#0|) (Lit |a#42#9#0|)) (Lit (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#42#0#0@@0| |a#42#1#0@@0| |a#42#2#0| |a#42#3#0| |a#42#4#0| |a#42#5#0| |a#42#6#0| |a#42#7#0| |a#42#8#0| |a#42#9#0|)))) :qid |PivotBet.315:5| :skolemid |4353| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| (Lit |a#42#0#0@@0|) (Lit |a#42#1#0@@0|) (Lit |a#42#2#0|) (Lit |a#42#3#0|) (Lit |a#42#4#0|) (Lit |a#42#5#0|) (LitInt |a#42#6#0|) (Lit |a#42#7#0|) (Lit |a#42#8#0|) (Lit |a#42#9#0|))) )))
(assert (forall ((|a#43#0#0@@0| T@U) (|a#43#1#0@@0| T@U) (|a#43#2#0| T@U) (|a#43#3#0| T@U) (|a#43#4#0| T@U) (|a#43#5#0| T@U) (|a#43#6#0| Int) (|a#43#7#0| T@U) (|a#43#8#0| T@U) (|a#43#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#43#0#0@@0|) BoxType) (= (type |a#43#1#0@@0|) DatatypeTypeType)) (= (type |a#43#2#0|) BoxType)) (= (type |a#43#3#0|) DatatypeTypeType)) (= (type |a#43#4#0|) BoxType)) (= (type |a#43#5#0|) DatatypeTypeType)) (= (type |a#43#7#0|) (MapType0Type BoxType boolType))) (= (type |a#43#8#0|) DatatypeTypeType)) (= (type |a#43#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.parentref (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#43#0#0@@0| |a#43#1#0@@0| |a#43#2#0| |a#43#3#0| |a#43#4#0| |a#43#5#0| |a#43#6#0| |a#43#7#0| |a#43#8#0| |a#43#9#0|)) |a#43#0#0@@0|)) :qid |PivotBet.315:5| :skolemid |4354| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#43#0#0@@0| |a#43#1#0@@0| |a#43#2#0| |a#43#3#0| |a#43#4#0| |a#43#5#0| |a#43#6#0| |a#43#7#0| |a#43#8#0| |a#43#9#0|)) )))
(assert (forall ((|a#44#0#0@@0| T@U) (|a#44#1#0@@0| T@U) (|a#44#2#0| T@U) (|a#44#3#0| T@U) (|a#44#4#0| T@U) (|a#44#5#0| T@U) (|a#44#6#0| Int) (|a#44#7#0| T@U) (|a#44#8#0| T@U) (|a#44#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#44#0#0@@0|) BoxType) (= (type |a#44#1#0@@0|) DatatypeTypeType)) (= (type |a#44#2#0|) BoxType)) (= (type |a#44#3#0|) DatatypeTypeType)) (= (type |a#44#4#0|) BoxType)) (= (type |a#44#5#0|) DatatypeTypeType)) (= (type |a#44#7#0|) (MapType0Type BoxType boolType))) (= (type |a#44#8#0|) DatatypeTypeType)) (= (type |a#44#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.parent (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#44#0#0@@0| |a#44#1#0@@0| |a#44#2#0| |a#44#3#0| |a#44#4#0| |a#44#5#0| |a#44#6#0| |a#44#7#0| |a#44#8#0| |a#44#9#0|)) |a#44#1#0@@0|)) :qid |PivotBet.315:5| :skolemid |4355| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#44#0#0@@0| |a#44#1#0@@0| |a#44#2#0| |a#44#3#0| |a#44#4#0| |a#44#5#0| |a#44#6#0| |a#44#7#0| |a#44#8#0| |a#44#9#0|)) )))
(assert (forall ((|a#45#0#0@@0| T@U) (|a#45#1#0@@0| T@U) (|a#45#2#0| T@U) (|a#45#3#0| T@U) (|a#45#4#0| T@U) (|a#45#5#0| T@U) (|a#45#6#0| Int) (|a#45#7#0| T@U) (|a#45#8#0| T@U) (|a#45#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#45#0#0@@0|) BoxType) (= (type |a#45#1#0@@0|) DatatypeTypeType)) (= (type |a#45#2#0|) BoxType)) (= (type |a#45#3#0|) DatatypeTypeType)) (= (type |a#45#4#0|) BoxType)) (= (type |a#45#5#0|) DatatypeTypeType)) (= (type |a#45#7#0|) (MapType0Type BoxType boolType))) (= (type |a#45#8#0|) DatatypeTypeType)) (= (type |a#45#9#0|) (SeqType BoxType))) (< (DtRank |a#45#1#0@@0|) (DtRank (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#45#0#0@@0| |a#45#1#0@@0| |a#45#2#0| |a#45#3#0| |a#45#4#0| |a#45#5#0| |a#45#6#0| |a#45#7#0| |a#45#8#0| |a#45#9#0|)))) :qid |PivotBet.315:5| :skolemid |4356| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#45#0#0@@0| |a#45#1#0@@0| |a#45#2#0| |a#45#3#0| |a#45#4#0| |a#45#5#0| |a#45#6#0| |a#45#7#0| |a#45#8#0| |a#45#9#0|)) )))
(assert (forall ((|a#46#0#0@@0| T@U) (|a#46#1#0@@0| T@U) (|a#46#2#0| T@U) (|a#46#3#0| T@U) (|a#46#4#0| T@U) (|a#46#5#0| T@U) (|a#46#6#0| Int) (|a#46#7#0| T@U) (|a#46#8#0| T@U) (|a#46#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#46#0#0@@0|) BoxType) (= (type |a#46#1#0@@0|) DatatypeTypeType)) (= (type |a#46#2#0|) BoxType)) (= (type |a#46#3#0|) DatatypeTypeType)) (= (type |a#46#4#0|) BoxType)) (= (type |a#46#5#0|) DatatypeTypeType)) (= (type |a#46#7#0|) (MapType0Type BoxType boolType))) (= (type |a#46#8#0|) DatatypeTypeType)) (= (type |a#46#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.childref (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#46#0#0@@0| |a#46#1#0@@0| |a#46#2#0| |a#46#3#0| |a#46#4#0| |a#46#5#0| |a#46#6#0| |a#46#7#0| |a#46#8#0| |a#46#9#0|)) |a#46#2#0|)) :qid |PivotBet.315:5| :skolemid |4357| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#46#0#0@@0| |a#46#1#0@@0| |a#46#2#0| |a#46#3#0| |a#46#4#0| |a#46#5#0| |a#46#6#0| |a#46#7#0| |a#46#8#0| |a#46#9#0|)) )))
(assert (forall ((|a#47#0#0@@0| T@U) (|a#47#1#0@@0| T@U) (|a#47#2#0| T@U) (|a#47#3#0| T@U) (|a#47#4#0| T@U) (|a#47#5#0| T@U) (|a#47#6#0| Int) (|a#47#7#0| T@U) (|a#47#8#0| T@U) (|a#47#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#47#0#0@@0|) BoxType) (= (type |a#47#1#0@@0|) DatatypeTypeType)) (= (type |a#47#2#0|) BoxType)) (= (type |a#47#3#0|) DatatypeTypeType)) (= (type |a#47#4#0|) BoxType)) (= (type |a#47#5#0|) DatatypeTypeType)) (= (type |a#47#7#0|) (MapType0Type BoxType boolType))) (= (type |a#47#8#0|) DatatypeTypeType)) (= (type |a#47#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.child (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#47#0#0@@0| |a#47#1#0@@0| |a#47#2#0| |a#47#3#0| |a#47#4#0| |a#47#5#0| |a#47#6#0| |a#47#7#0| |a#47#8#0| |a#47#9#0|)) |a#47#3#0|)) :qid |PivotBet.315:5| :skolemid |4358| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#47#0#0@@0| |a#47#1#0@@0| |a#47#2#0| |a#47#3#0| |a#47#4#0| |a#47#5#0| |a#47#6#0| |a#47#7#0| |a#47#8#0| |a#47#9#0|)) )))
(assert (forall ((|a#48#0#0@@0| T@U) (|a#48#1#0@@0| T@U) (|a#48#2#0| T@U) (|a#48#3#0| T@U) (|a#48#4#0| T@U) (|a#48#5#0| T@U) (|a#48#6#0| Int) (|a#48#7#0| T@U) (|a#48#8#0| T@U) (|a#48#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#48#0#0@@0|) BoxType) (= (type |a#48#1#0@@0|) DatatypeTypeType)) (= (type |a#48#2#0|) BoxType)) (= (type |a#48#3#0|) DatatypeTypeType)) (= (type |a#48#4#0|) BoxType)) (= (type |a#48#5#0|) DatatypeTypeType)) (= (type |a#48#7#0|) (MapType0Type BoxType boolType))) (= (type |a#48#8#0|) DatatypeTypeType)) (= (type |a#48#9#0|) (SeqType BoxType))) (< (DtRank |a#48#3#0|) (DtRank (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#48#0#0@@0| |a#48#1#0@@0| |a#48#2#0| |a#48#3#0| |a#48#4#0| |a#48#5#0| |a#48#6#0| |a#48#7#0| |a#48#8#0| |a#48#9#0|)))) :qid |PivotBet.315:5| :skolemid |4359| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#48#0#0@@0| |a#48#1#0@@0| |a#48#2#0| |a#48#3#0| |a#48#4#0| |a#48#5#0| |a#48#6#0| |a#48#7#0| |a#48#8#0| |a#48#9#0|)) )))
(assert (forall ((|a#49#0#0@@0| T@U) (|a#49#1#0@@0| T@U) (|a#49#2#0| T@U) (|a#49#3#0| T@U) (|a#49#4#0| T@U) (|a#49#5#0| T@U) (|a#49#6#0| Int) (|a#49#7#0| T@U) (|a#49#8#0| T@U) (|a#49#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#49#0#0@@0|) BoxType) (= (type |a#49#1#0@@0|) DatatypeTypeType)) (= (type |a#49#2#0|) BoxType)) (= (type |a#49#3#0|) DatatypeTypeType)) (= (type |a#49#4#0|) BoxType)) (= (type |a#49#5#0|) DatatypeTypeType)) (= (type |a#49#7#0|) (MapType0Type BoxType boolType))) (= (type |a#49#8#0|) DatatypeTypeType)) (= (type |a#49#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.newchildref (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#49#0#0@@0| |a#49#1#0@@0| |a#49#2#0| |a#49#3#0| |a#49#4#0| |a#49#5#0| |a#49#6#0| |a#49#7#0| |a#49#8#0| |a#49#9#0|)) |a#49#4#0|)) :qid |PivotBet.315:5| :skolemid |4360| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#49#0#0@@0| |a#49#1#0@@0| |a#49#2#0| |a#49#3#0| |a#49#4#0| |a#49#5#0| |a#49#6#0| |a#49#7#0| |a#49#8#0| |a#49#9#0|)) )))
(assert (forall ((|a#50#0#0@@0| T@U) (|a#50#1#0@@0| T@U) (|a#50#2#0| T@U) (|a#50#3#0| T@U) (|a#50#4#0| T@U) (|a#50#5#0| T@U) (|a#50#6#0| Int) (|a#50#7#0| T@U) (|a#50#8#0| T@U) (|a#50#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#50#0#0@@0|) BoxType) (= (type |a#50#1#0@@0|) DatatypeTypeType)) (= (type |a#50#2#0|) BoxType)) (= (type |a#50#3#0|) DatatypeTypeType)) (= (type |a#50#4#0|) BoxType)) (= (type |a#50#5#0|) DatatypeTypeType)) (= (type |a#50#7#0|) (MapType0Type BoxType boolType))) (= (type |a#50#8#0|) DatatypeTypeType)) (= (type |a#50#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.newchild (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#50#0#0@@0| |a#50#1#0@@0| |a#50#2#0| |a#50#3#0| |a#50#4#0| |a#50#5#0| |a#50#6#0| |a#50#7#0| |a#50#8#0| |a#50#9#0|)) |a#50#5#0|)) :qid |PivotBet.315:5| :skolemid |4361| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#50#0#0@@0| |a#50#1#0@@0| |a#50#2#0| |a#50#3#0| |a#50#4#0| |a#50#5#0| |a#50#6#0| |a#50#7#0| |a#50#8#0| |a#50#9#0|)) )))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) (|a#51#2#0| T@U) (|a#51#3#0| T@U) (|a#51#4#0| T@U) (|a#51#5#0| T@U) (|a#51#6#0| Int) (|a#51#7#0| T@U) (|a#51#8#0| T@U) (|a#51#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#51#0#0|) BoxType) (= (type |a#51#1#0|) DatatypeTypeType)) (= (type |a#51#2#0|) BoxType)) (= (type |a#51#3#0|) DatatypeTypeType)) (= (type |a#51#4#0|) BoxType)) (= (type |a#51#5#0|) DatatypeTypeType)) (= (type |a#51#7#0|) (MapType0Type BoxType boolType))) (= (type |a#51#8#0|) DatatypeTypeType)) (= (type |a#51#9#0|) (SeqType BoxType))) (< (DtRank |a#51#5#0|) (DtRank (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#51#0#0| |a#51#1#0| |a#51#2#0| |a#51#3#0| |a#51#4#0| |a#51#5#0| |a#51#6#0| |a#51#7#0| |a#51#8#0| |a#51#9#0|)))) :qid |PivotBet.315:5| :skolemid |4362| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#51#0#0| |a#51#1#0| |a#51#2#0| |a#51#3#0| |a#51#4#0| |a#51#5#0| |a#51#6#0| |a#51#7#0| |a#51#8#0| |a#51#9#0|)) )))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) (|a#52#2#0| T@U) (|a#52#3#0| T@U) (|a#52#4#0| T@U) (|a#52#5#0| T@U) (|a#52#6#0| Int) (|a#52#7#0| T@U) (|a#52#8#0| T@U) (|a#52#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#52#0#0|) BoxType) (= (type |a#52#1#0|) DatatypeTypeType)) (= (type |a#52#2#0|) BoxType)) (= (type |a#52#3#0|) DatatypeTypeType)) (= (type |a#52#4#0|) BoxType)) (= (type |a#52#5#0|) DatatypeTypeType)) (= (type |a#52#7#0|) (MapType0Type BoxType boolType))) (= (type |a#52#8#0|) DatatypeTypeType)) (= (type |a#52#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.slotIndex (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#52#0#0| |a#52#1#0| |a#52#2#0| |a#52#3#0| |a#52#4#0| |a#52#5#0| |a#52#6#0| |a#52#7#0| |a#52#8#0| |a#52#9#0|)) |a#52#6#0|)) :qid |PivotBet.315:5| :skolemid |4363| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#52#0#0| |a#52#1#0| |a#52#2#0| |a#52#3#0| |a#52#4#0| |a#52#5#0| |a#52#6#0| |a#52#7#0| |a#52#8#0| |a#52#9#0|)) )))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) (|a#53#2#0| T@U) (|a#53#3#0| T@U) (|a#53#4#0| T@U) (|a#53#5#0| T@U) (|a#53#6#0| Int) (|a#53#7#0| T@U) (|a#53#8#0| T@U) (|a#53#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#53#0#0|) BoxType) (= (type |a#53#1#0|) DatatypeTypeType)) (= (type |a#53#2#0|) BoxType)) (= (type |a#53#3#0|) DatatypeTypeType)) (= (type |a#53#4#0|) BoxType)) (= (type |a#53#5#0|) DatatypeTypeType)) (= (type |a#53#7#0|) (MapType0Type BoxType boolType))) (= (type |a#53#8#0|) DatatypeTypeType)) (= (type |a#53#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.keys (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#53#0#0| |a#53#1#0| |a#53#2#0| |a#53#3#0| |a#53#4#0| |a#53#5#0| |a#53#6#0| |a#53#7#0| |a#53#8#0| |a#53#9#0|)) |a#53#7#0|)) :qid |PivotBet.315:5| :skolemid |4364| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#53#0#0| |a#53#1#0| |a#53#2#0| |a#53#3#0| |a#53#4#0| |a#53#5#0| |a#53#6#0| |a#53#7#0| |a#53#8#0| |a#53#9#0|)) )))
(assert (forall ((|a#54#0#0| T@U) (|a#54#1#0| T@U) (|a#54#2#0| T@U) (|a#54#3#0| T@U) (|a#54#4#0| T@U) (|a#54#5#0| T@U) (|a#54#6#0| Int) (|a#54#7#0| T@U) (|a#54#8#0| T@U) (|a#54#9#0| T@U) (d@@205 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |a#54#0#0|) BoxType) (= (type |a#54#1#0|) DatatypeTypeType)) (= (type |a#54#2#0|) BoxType)) (= (type |a#54#3#0|) DatatypeTypeType)) (= (type |a#54#4#0|) BoxType)) (= (type |a#54#5#0|) DatatypeTypeType)) (= (type |a#54#7#0|) (MapType0Type BoxType boolType))) (= (type |a#54#8#0|) DatatypeTypeType)) (= (type |a#54#9#0|) (SeqType BoxType))) (= (type d@@205) DatatypeTypeType)) (U_2_bool (MapType0Select |a#54#7#0| ($Box d@@205)))) (< (DtRank d@@205) (DtRank (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#54#0#0| |a#54#1#0| |a#54#2#0| |a#54#3#0| |a#54#4#0| |a#54#5#0| |a#54#6#0| |a#54#7#0| |a#54#8#0| |a#54#9#0|)))) :qid |PivotBet.315:5| :skolemid |4365| :pattern ( (MapType0Select |a#54#7#0| ($Box d@@205)) (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#54#0#0| |a#54#1#0| |a#54#2#0| |a#54#3#0| |a#54#4#0| |a#54#5#0| |a#54#6#0| |a#54#7#0| |a#54#8#0| |a#54#9#0|)) )))
(assert (forall ((|a#55#0#0| T@U) (|a#55#1#0| T@U) (|a#55#2#0| T@U) (|a#55#3#0| T@U) (|a#55#4#0| T@U) (|a#55#5#0| T@U) (|a#55#6#0| Int) (|a#55#7#0| T@U) (|a#55#8#0| T@U) (|a#55#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#55#0#0|) BoxType) (= (type |a#55#1#0|) DatatypeTypeType)) (= (type |a#55#2#0|) BoxType)) (= (type |a#55#3#0|) DatatypeTypeType)) (= (type |a#55#4#0|) BoxType)) (= (type |a#55#5#0|) DatatypeTypeType)) (= (type |a#55#7#0|) (MapType0Type BoxType boolType))) (= (type |a#55#8#0|) DatatypeTypeType)) (= (type |a#55#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.newParentBucket (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#55#0#0| |a#55#1#0| |a#55#2#0| |a#55#3#0| |a#55#4#0| |a#55#5#0| |a#55#6#0| |a#55#7#0| |a#55#8#0| |a#55#9#0|)) |a#55#8#0|)) :qid |PivotBet.315:5| :skolemid |4366| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#55#0#0| |a#55#1#0| |a#55#2#0| |a#55#3#0| |a#55#4#0| |a#55#5#0| |a#55#6#0| |a#55#7#0| |a#55#8#0| |a#55#9#0|)) )))
(assert (forall ((|a#56#0#0| T@U) (|a#56#1#0| T@U) (|a#56#2#0| T@U) (|a#56#3#0| T@U) (|a#56#4#0| T@U) (|a#56#5#0| T@U) (|a#56#6#0| Int) (|a#56#7#0| T@U) (|a#56#8#0| T@U) (|a#56#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#56#0#0|) BoxType) (= (type |a#56#1#0|) DatatypeTypeType)) (= (type |a#56#2#0|) BoxType)) (= (type |a#56#3#0|) DatatypeTypeType)) (= (type |a#56#4#0|) BoxType)) (= (type |a#56#5#0|) DatatypeTypeType)) (= (type |a#56#7#0|) (MapType0Type BoxType boolType))) (= (type |a#56#8#0|) DatatypeTypeType)) (= (type |a#56#9#0|) (SeqType BoxType))) (< (DtRank |a#56#8#0|) (DtRank (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#56#0#0| |a#56#1#0| |a#56#2#0| |a#56#3#0| |a#56#4#0| |a#56#5#0| |a#56#6#0| |a#56#7#0| |a#56#8#0| |a#56#9#0|)))) :qid |PivotBet.315:5| :skolemid |4367| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#56#0#0| |a#56#1#0| |a#56#2#0| |a#56#3#0| |a#56#4#0| |a#56#5#0| |a#56#6#0| |a#56#7#0| |a#56#8#0| |a#56#9#0|)) )))
(assert (forall ((|a#57#0#0| T@U) (|a#57#1#0| T@U) (|a#57#2#0| T@U) (|a#57#3#0| T@U) (|a#57#4#0| T@U) (|a#57#5#0| T@U) (|a#57#6#0| Int) (|a#57#7#0| T@U) (|a#57#8#0| T@U) (|a#57#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#57#0#0|) BoxType) (= (type |a#57#1#0|) DatatypeTypeType)) (= (type |a#57#2#0|) BoxType)) (= (type |a#57#3#0|) DatatypeTypeType)) (= (type |a#57#4#0|) BoxType)) (= (type |a#57#5#0|) DatatypeTypeType)) (= (type |a#57#7#0|) (MapType0Type BoxType boolType))) (= (type |a#57#8#0|) DatatypeTypeType)) (= (type |a#57#9#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFlush.newChildBuckets (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#57#0#0| |a#57#1#0| |a#57#2#0| |a#57#3#0| |a#57#4#0| |a#57#5#0| |a#57#6#0| |a#57#7#0| |a#57#8#0| |a#57#9#0|)) |a#57#9#0|)) :qid |PivotBet.315:5| :skolemid |4368| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#57#0#0| |a#57#1#0| |a#57#2#0| |a#57#3#0| |a#57#4#0| |a#57#5#0| |a#57#6#0| |a#57#7#0| |a#57#8#0| |a#57#9#0|)) )))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) (|a#58#2#0| T@U) (|a#58#3#0| T@U) (|a#58#4#0| T@U) (|a#58#5#0| T@U) (|a#58#6#0| Int) (|a#58#7#0| T@U) (|a#58#8#0| T@U) (|a#58#9#0| T@U) (i@@42 Int) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#58#0#0|) BoxType) (= (type |a#58#1#0|) DatatypeTypeType)) (= (type |a#58#2#0|) BoxType)) (= (type |a#58#3#0|) DatatypeTypeType)) (= (type |a#58#4#0|) BoxType)) (= (type |a#58#5#0|) DatatypeTypeType)) (= (type |a#58#7#0|) (MapType0Type BoxType boolType))) (= (type |a#58#8#0|) DatatypeTypeType)) (= (type |a#58#9#0|) (SeqType BoxType))) (and (<= 0 i@@42) (< i@@42 (|Seq#Length| |a#58#9#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#58#9#0| i@@42))) (DtRank (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#58#0#0| |a#58#1#0| |a#58#2#0| |a#58#3#0| |a#58#4#0| |a#58#5#0| |a#58#6#0| |a#58#7#0| |a#58#8#0| |a#58#9#0|)))) :qid |PivotBet.315:5| :skolemid |4369| :pattern ( (|Seq#Index| |a#58#9#0| i@@42) (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#58#0#0| |a#58#1#0| |a#58#2#0| |a#58#3#0| |a#58#4#0| |a#58#5#0| |a#58#6#0| |a#58#7#0| |a#58#8#0| |a#58#9#0|)) )))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) (|a#59#2#0| T@U) (|a#59#3#0| T@U) (|a#59#4#0| T@U) (|a#59#5#0| T@U) (|a#59#6#0| Int) (|a#59#7#0| T@U) (|a#59#8#0| T@U) (|a#59#9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#59#0#0|) BoxType) (= (type |a#59#1#0|) DatatypeTypeType)) (= (type |a#59#2#0|) BoxType)) (= (type |a#59#3#0|) DatatypeTypeType)) (= (type |a#59#4#0|) BoxType)) (= (type |a#59#5#0|) DatatypeTypeType)) (= (type |a#59#7#0|) (MapType0Type BoxType boolType))) (= (type |a#59#8#0|) DatatypeTypeType)) (= (type |a#59#9#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#59#9#0|) (DtRank (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#59#0#0| |a#59#1#0| |a#59#2#0| |a#59#3#0| |a#59#4#0| |a#59#5#0| |a#59#6#0| |a#59#7#0| |a#59#8#0| |a#59#9#0|)))) :qid |PivotBet.315:5| :skolemid |4370| :pattern ( (|#PivotBetreeSpec.NodeFlush.NodeFlush| |a#59#0#0| |a#59#1#0| |a#59#2#0| |a#59#3#0| |a#59#4#0| |a#59#5#0| |a#59#6#0| |a#59#7#0| |a#59#8#0| |a#59#9#0|)) )))
(assert (forall ((d@@206 T@U) ) (!  (=> (and (= (type d@@206) DatatypeTypeType) (|$IsA#PivotBetreeSpec.NodeFlush| d@@206)) (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@206)) :qid |unknown.0:0| :skolemid |4371| :pattern ( (|$IsA#PivotBetreeSpec.NodeFlush| d@@206)) )))
(assert (forall ((d@@207 T@U) ) (!  (=> (and (= (type d@@207) DatatypeTypeType) ($Is d@@207 Tclass.PivotBetreeSpec.NodeFlush)) (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@207)) :qid |unknown.0:0| :skolemid |4372| :pattern ( (PivotBetreeSpec.NodeFlush.NodeFlush_q d@@207) ($Is d@@207 Tclass.PivotBetreeSpec.NodeFlush)) )))
(assert (forall ((a@@194 T@U) (b@@125 T@U) ) (!  (=> (and (and (= (type a@@194) DatatypeTypeType) (= (type b@@125) DatatypeTypeType)) true) (and (=> (|PivotBetreeSpec.NodeFlush#Equal| a@@194 b@@125) (and (and (and (and (and (and (and (and (and (= (PivotBetreeSpec.NodeFlush.parentref a@@194) (PivotBetreeSpec.NodeFlush.parentref b@@125)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFlush.parent a@@194) (PivotBetreeSpec.NodeFlush.parent b@@125))) (= (PivotBetreeSpec.NodeFlush.childref a@@194) (PivotBetreeSpec.NodeFlush.childref b@@125))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFlush.child a@@194) (PivotBetreeSpec.NodeFlush.child b@@125))) (= (PivotBetreeSpec.NodeFlush.newchildref a@@194) (PivotBetreeSpec.NodeFlush.newchildref b@@125))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFlush.newchild a@@194) (PivotBetreeSpec.NodeFlush.newchild b@@125))) (= (PivotBetreeSpec.NodeFlush.slotIndex a@@194) (PivotBetreeSpec.NodeFlush.slotIndex b@@125))) (|Set#Equal| (PivotBetreeSpec.NodeFlush.keys a@@194) (PivotBetreeSpec.NodeFlush.keys b@@125))) (|BucketsLib.Bucket#Equal| (PivotBetreeSpec.NodeFlush.newParentBucket a@@194) (PivotBetreeSpec.NodeFlush.newParentBucket b@@125))) (|Seq#Equal| (PivotBetreeSpec.NodeFlush.newChildBuckets a@@194) (PivotBetreeSpec.NodeFlush.newChildBuckets b@@125)))) (=> (and (and (and (and (and (and (and (and (and (= (PivotBetreeSpec.NodeFlush.parentref a@@194) (PivotBetreeSpec.NodeFlush.parentref b@@125)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFlush.parent a@@194) (PivotBetreeSpec.NodeFlush.parent b@@125))) (= (PivotBetreeSpec.NodeFlush.childref a@@194) (PivotBetreeSpec.NodeFlush.childref b@@125))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFlush.child a@@194) (PivotBetreeSpec.NodeFlush.child b@@125))) (= (PivotBetreeSpec.NodeFlush.newchildref a@@194) (PivotBetreeSpec.NodeFlush.newchildref b@@125))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFlush.newchild a@@194) (PivotBetreeSpec.NodeFlush.newchild b@@125))) (= (PivotBetreeSpec.NodeFlush.slotIndex a@@194) (PivotBetreeSpec.NodeFlush.slotIndex b@@125))) (|Set#Equal| (PivotBetreeSpec.NodeFlush.keys a@@194) (PivotBetreeSpec.NodeFlush.keys b@@125))) (|BucketsLib.Bucket#Equal| (PivotBetreeSpec.NodeFlush.newParentBucket a@@194) (PivotBetreeSpec.NodeFlush.newParentBucket b@@125))) (|Seq#Equal| (PivotBetreeSpec.NodeFlush.newChildBuckets a@@194) (PivotBetreeSpec.NodeFlush.newChildBuckets b@@125))) (|PivotBetreeSpec.NodeFlush#Equal| a@@194 b@@125)))) :qid |unknown.0:0| :skolemid |4373| :pattern ( (|PivotBetreeSpec.NodeFlush#Equal| a@@194 b@@125)) )))
(assert (forall ((a@@195 T@U) (b@@126 T@U) ) (!  (=> (and (= (type a@@195) DatatypeTypeType) (= (type b@@126) DatatypeTypeType)) (and (=> (|PivotBetreeSpec.NodeFlush#Equal| a@@195 b@@126) (= a@@195 b@@126)) (=> (= a@@195 b@@126) (|PivotBetreeSpec.NodeFlush#Equal| a@@195 b@@126)))) :qid |unknown.0:0| :skolemid |4374| :pattern ( (|PivotBetreeSpec.NodeFlush#Equal| a@@195 b@@126)) )))
(assert (forall ((arg0@@613 T@U) (arg1@@343 T@U) ) (! (= (type (|#PivotBetreeSpec.RootGrowth.RootGrowth| arg0@@613 arg1@@343)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.RootGrowth.RootGrowth| :pattern ( (|#PivotBetreeSpec.RootGrowth.RootGrowth| arg0@@613 arg1@@343)) )))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) ) (!  (=> (and (= (type |a#60#0#0|) DatatypeTypeType) (= (type |a#60#1#0|) BoxType)) (= (DatatypeCtorId (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#60#0#0| |a#60#1#0|)) |##PivotBetreeSpec.RootGrowth.RootGrowth|)) :qid |PivotBet.374:36| :skolemid |4375| :pattern ( (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#60#0#0| |a#60#1#0|)) )))
(assert (forall ((d@@208 T@U) ) (!  (=> (= (type d@@208) DatatypeTypeType) (and (=> (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@208) (= (DatatypeCtorId d@@208) |##PivotBetreeSpec.RootGrowth.RootGrowth|)) (=> (= (DatatypeCtorId d@@208) |##PivotBetreeSpec.RootGrowth.RootGrowth|) (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@208)))) :qid |unknown.0:0| :skolemid |4376| :pattern ( (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@208)) )))
(assert (forall ((d@@209 T@U) ) (!  (=> (and (= (type d@@209) DatatypeTypeType) (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@209)) (exists ((|a#61#0#0| T@U) (|a#61#1#0| T@U) ) (!  (and (and (= (type |a#61#0#0|) DatatypeTypeType) (= (type |a#61#1#0|) BoxType)) (= d@@209 (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#61#0#0| |a#61#1#0|))) :qid |PivotBet.374:36| :skolemid |4377| :no-pattern (type |a#61#0#0|) :no-pattern (type |a#61#1#0|) :no-pattern (U_2_int |a#61#0#0|) :no-pattern (U_2_bool |a#61#0#0|) :no-pattern (U_2_int |a#61#1#0|) :no-pattern (U_2_bool |a#61#1#0|) ))) :qid |unknown.0:0| :skolemid |4378| :pattern ( (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@209)) )))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) ) (!  (=> (and (= (type |a#62#0#0|) DatatypeTypeType) (= (type |a#62#1#0|) BoxType)) (and (=> ($Is (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#62#0#0| |a#62#1#0|) Tclass.PivotBetreeSpec.RootGrowth) (and ($Is |a#62#0#0| Tclass.PivotBetreeGraph.Node) ($IsBox |a#62#1#0| Tclass.ReferenceType.Reference))) (=> (and ($Is |a#62#0#0| Tclass.PivotBetreeGraph.Node) ($IsBox |a#62#1#0| Tclass.ReferenceType.Reference)) ($Is (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#62#0#0| |a#62#1#0|) Tclass.PivotBetreeSpec.RootGrowth)))) :qid |PivotBet.374:36| :skolemid |4379| :pattern ( ($Is (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#62#0#0| |a#62#1#0|) Tclass.PivotBetreeSpec.RootGrowth)) )))
(assert (forall ((|a#63#0#0| T@U) (|a#63#1#0| T@U) ($h@@175 T@U) ) (!  (=> (and (and (and (= (type |a#63#0#0|) DatatypeTypeType) (= (type |a#63#1#0|) BoxType)) (= (type $h@@175) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@175)) (and (=> ($IsAlloc (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#63#0#0| |a#63#1#0|) Tclass.PivotBetreeSpec.RootGrowth $h@@175) (and ($IsAlloc |a#63#0#0| Tclass.PivotBetreeGraph.Node $h@@175) ($IsAllocBox |a#63#1#0| Tclass.ReferenceType.Reference $h@@175))) (=> (and ($IsAlloc |a#63#0#0| Tclass.PivotBetreeGraph.Node $h@@175) ($IsAllocBox |a#63#1#0| Tclass.ReferenceType.Reference $h@@175)) ($IsAlloc (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#63#0#0| |a#63#1#0|) Tclass.PivotBetreeSpec.RootGrowth $h@@175)))) :qid |PivotBet.374:36| :skolemid |4380| :pattern ( ($IsAlloc (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#63#0#0| |a#63#1#0|) Tclass.PivotBetreeSpec.RootGrowth $h@@175)) )))
(assert (forall ((arg0@@614 T@U) ) (! (= (type (PivotBetreeSpec.RootGrowth.oldroot arg0@@614)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.RootGrowth.oldroot| :pattern ( (PivotBetreeSpec.RootGrowth.oldroot arg0@@614)) )))
(assert (forall ((d@@210 T@U) ($h@@176 T@U) ) (!  (=> (and (and (= (type d@@210) DatatypeTypeType) (= (type $h@@176) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@176) (and (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@210) ($IsAlloc d@@210 Tclass.PivotBetreeSpec.RootGrowth $h@@176)))) ($IsAlloc (PivotBetreeSpec.RootGrowth.oldroot d@@210) Tclass.PivotBetreeGraph.Node $h@@176)) :qid |unknown.0:0| :skolemid |4381| :pattern ( ($IsAlloc (PivotBetreeSpec.RootGrowth.oldroot d@@210) Tclass.PivotBetreeGraph.Node $h@@176)) )))
(assert (forall ((arg0@@615 T@U) ) (! (= (type (PivotBetreeSpec.RootGrowth.newchildref arg0@@615)) BoxType) :qid |funType:PivotBetreeSpec.RootGrowth.newchildref| :pattern ( (PivotBetreeSpec.RootGrowth.newchildref arg0@@615)) )))
(assert (forall ((d@@211 T@U) ($h@@177 T@U) ) (!  (=> (and (and (= (type d@@211) DatatypeTypeType) (= (type $h@@177) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@177) (and (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@211) ($IsAlloc d@@211 Tclass.PivotBetreeSpec.RootGrowth $h@@177)))) ($IsAllocBox (PivotBetreeSpec.RootGrowth.newchildref d@@211) Tclass.ReferenceType.Reference $h@@177)) :qid |unknown.0:0| :skolemid |4382| :pattern ( ($IsAllocBox (PivotBetreeSpec.RootGrowth.newchildref d@@211) Tclass.ReferenceType.Reference $h@@177)) )))
(assert (forall ((|a#64#0#0| T@U) (|a#64#1#0| T@U) ) (!  (=> (and (= (type |a#64#0#0|) DatatypeTypeType) (= (type |a#64#1#0|) BoxType)) (= (|#PivotBetreeSpec.RootGrowth.RootGrowth| (Lit |a#64#0#0|) (Lit |a#64#1#0|)) (Lit (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#64#0#0| |a#64#1#0|)))) :qid |PivotBet.374:36| :skolemid |4383| :pattern ( (|#PivotBetreeSpec.RootGrowth.RootGrowth| (Lit |a#64#0#0|) (Lit |a#64#1#0|))) )))
(assert (forall ((|a#65#0#0| T@U) (|a#65#1#0| T@U) ) (!  (=> (and (= (type |a#65#0#0|) DatatypeTypeType) (= (type |a#65#1#0|) BoxType)) (= (PivotBetreeSpec.RootGrowth.oldroot (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#65#0#0| |a#65#1#0|)) |a#65#0#0|)) :qid |PivotBet.374:36| :skolemid |4384| :pattern ( (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#65#0#0| |a#65#1#0|)) )))
(assert (forall ((|a#66#0#0@@0| T@U) (|a#66#1#0| T@U) ) (!  (=> (and (= (type |a#66#0#0@@0|) DatatypeTypeType) (= (type |a#66#1#0|) BoxType)) (< (DtRank |a#66#0#0@@0|) (DtRank (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#66#0#0@@0| |a#66#1#0|)))) :qid |PivotBet.374:36| :skolemid |4385| :pattern ( (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#66#0#0@@0| |a#66#1#0|)) )))
(assert (forall ((|a#67#0#0@@0| T@U) (|a#67#1#0| T@U) ) (!  (=> (and (= (type |a#67#0#0@@0|) DatatypeTypeType) (= (type |a#67#1#0|) BoxType)) (= (PivotBetreeSpec.RootGrowth.newchildref (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#67#0#0@@0| |a#67#1#0|)) |a#67#1#0|)) :qid |PivotBet.374:36| :skolemid |4386| :pattern ( (|#PivotBetreeSpec.RootGrowth.RootGrowth| |a#67#0#0@@0| |a#67#1#0|)) )))
(assert (forall ((d@@212 T@U) ) (!  (=> (and (= (type d@@212) DatatypeTypeType) (|$IsA#PivotBetreeSpec.RootGrowth| d@@212)) (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@212)) :qid |unknown.0:0| :skolemid |4387| :pattern ( (|$IsA#PivotBetreeSpec.RootGrowth| d@@212)) )))
(assert (forall ((d@@213 T@U) ) (!  (=> (and (= (type d@@213) DatatypeTypeType) ($Is d@@213 Tclass.PivotBetreeSpec.RootGrowth)) (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@213)) :qid |unknown.0:0| :skolemid |4388| :pattern ( (PivotBetreeSpec.RootGrowth.RootGrowth_q d@@213) ($Is d@@213 Tclass.PivotBetreeSpec.RootGrowth)) )))
(assert (forall ((a@@196 T@U) (b@@127 T@U) ) (!  (=> (and (and (= (type a@@196) DatatypeTypeType) (= (type b@@127) DatatypeTypeType)) true) (and (=> (|PivotBetreeSpec.RootGrowth#Equal| a@@196 b@@127) (and (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.RootGrowth.oldroot a@@196) (PivotBetreeSpec.RootGrowth.oldroot b@@127)) (= (PivotBetreeSpec.RootGrowth.newchildref a@@196) (PivotBetreeSpec.RootGrowth.newchildref b@@127)))) (=> (and (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.RootGrowth.oldroot a@@196) (PivotBetreeSpec.RootGrowth.oldroot b@@127)) (= (PivotBetreeSpec.RootGrowth.newchildref a@@196) (PivotBetreeSpec.RootGrowth.newchildref b@@127))) (|PivotBetreeSpec.RootGrowth#Equal| a@@196 b@@127)))) :qid |unknown.0:0| :skolemid |4389| :pattern ( (|PivotBetreeSpec.RootGrowth#Equal| a@@196 b@@127)) )))
(assert (forall ((a@@197 T@U) (b@@128 T@U) ) (!  (=> (and (= (type a@@197) DatatypeTypeType) (= (type b@@128) DatatypeTypeType)) (and (=> (|PivotBetreeSpec.RootGrowth#Equal| a@@197 b@@128) (= a@@197 b@@128)) (=> (= a@@197 b@@128) (|PivotBetreeSpec.RootGrowth#Equal| a@@197 b@@128)))) :qid |unknown.0:0| :skolemid |4390| :pattern ( (|PivotBetreeSpec.RootGrowth#Equal| a@@197 b@@128)) )))
(assert (forall ((arg0@@616 T@U) (arg1@@344 T@U) (arg2@@235 T@U) (arg3@@155 T@U) (arg4@@120 T@U) (arg5@@78 T@U) (arg6@@58 T@U) (arg7@@42 T@U) (arg8@@27 T@U) (arg9@@9 Int) (arg10@@7 Int) (arg11@@5 T@U) ) (! (= (type (|#PivotBetreeSpec.NodeFusion.NodeFusion| arg0@@616 arg1@@344 arg2@@235 arg3@@155 arg4@@120 arg5@@78 arg6@@58 arg7@@42 arg8@@27 arg9@@9 arg10@@7 arg11@@5)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.NodeFusion.NodeFusion| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| arg0@@616 arg1@@344 arg2@@235 arg3@@155 arg4@@120 arg5@@78 arg6@@58 arg7@@42 arg8@@27 arg9@@9 arg10@@7 arg11@@5)) )))
(assert (forall ((|a#68#0#0@@0| T@U) (|a#68#1#0| T@U) (|a#68#2#0| T@U) (|a#68#3#0| T@U) (|a#68#4#0| T@U) (|a#68#5#0| T@U) (|a#68#6#0| T@U) (|a#68#7#0| T@U) (|a#68#8#0| T@U) (|a#68#9#0| Int) (|a#68#10#0| Int) (|a#68#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#68#0#0@@0|) BoxType) (= (type |a#68#1#0|) BoxType)) (= (type |a#68#2#0|) BoxType)) (= (type |a#68#3#0|) BoxType)) (= (type |a#68#4#0|) DatatypeTypeType)) (= (type |a#68#5#0|) DatatypeTypeType)) (= (type |a#68#6#0|) DatatypeTypeType)) (= (type |a#68#7#0|) DatatypeTypeType)) (= (type |a#68#8#0|) DatatypeTypeType)) (= (type |a#68#11#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#68#0#0@@0| |a#68#1#0| |a#68#2#0| |a#68#3#0| |a#68#4#0| |a#68#5#0| |a#68#6#0| |a#68#7#0| |a#68#8#0| |a#68#9#0| |a#68#10#0| |a#68#11#0|)) |##PivotBetreeSpec.NodeFusion.NodeFusion|)) :qid |PivotBet.399:5| :skolemid |4391| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#68#0#0@@0| |a#68#1#0| |a#68#2#0| |a#68#3#0| |a#68#4#0| |a#68#5#0| |a#68#6#0| |a#68#7#0| |a#68#8#0| |a#68#9#0| |a#68#10#0| |a#68#11#0|)) )))
(assert (forall ((d@@214 T@U) ) (!  (=> (= (type d@@214) DatatypeTypeType) (and (=> (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@214) (= (DatatypeCtorId d@@214) |##PivotBetreeSpec.NodeFusion.NodeFusion|)) (=> (= (DatatypeCtorId d@@214) |##PivotBetreeSpec.NodeFusion.NodeFusion|) (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@214)))) :qid |unknown.0:0| :skolemid |4392| :pattern ( (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@214)) )))
(assert (forall ((d@@215 T@U) ) (!  (=> (and (= (type d@@215) DatatypeTypeType) (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@215)) (exists ((|a#69#0#0@@0| T@U) (|a#69#1#0| T@U) (|a#69#2#0| T@U) (|a#69#3#0| T@U) (|a#69#4#0| T@U) (|a#69#5#0| T@U) (|a#69#6#0| T@U) (|a#69#7#0| T@U) (|a#69#8#0| T@U) (|a#69#9#0| Int) (|a#69#10#0| Int) (|a#69#11#0| T@U) ) (!  (and (and (and (and (and (and (and (and (and (and (= (type |a#69#0#0@@0|) BoxType) (= (type |a#69#1#0|) BoxType)) (= (type |a#69#2#0|) BoxType)) (= (type |a#69#3#0|) BoxType)) (= (type |a#69#4#0|) DatatypeTypeType)) (= (type |a#69#5#0|) DatatypeTypeType)) (= (type |a#69#6#0|) DatatypeTypeType)) (= (type |a#69#7#0|) DatatypeTypeType)) (= (type |a#69#8#0|) DatatypeTypeType)) (= (type |a#69#11#0|) (SeqType BoxType))) (= d@@215 (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#69#0#0@@0| |a#69#1#0| |a#69#2#0| |a#69#3#0| |a#69#4#0| |a#69#5#0| |a#69#6#0| |a#69#7#0| |a#69#8#0| |a#69#9#0| |a#69#10#0| |a#69#11#0|))) :qid |PivotBet.399:5| :skolemid |4393| :no-pattern (type |a#69#0#0@@0|) :no-pattern (type |a#69#1#0|) :no-pattern (type |a#69#2#0|) :no-pattern (type |a#69#3#0|) :no-pattern (type |a#69#4#0|) :no-pattern (type |a#69#5#0|) :no-pattern (type |a#69#6#0|) :no-pattern (type |a#69#7#0|) :no-pattern (type |a#69#8#0|) :no-pattern (type |a#69#11#0|) :no-pattern (U_2_int |a#69#0#0@@0|) :no-pattern (U_2_bool |a#69#0#0@@0|) :no-pattern (U_2_int |a#69#1#0|) :no-pattern (U_2_bool |a#69#1#0|) :no-pattern (U_2_int |a#69#2#0|) :no-pattern (U_2_bool |a#69#2#0|) :no-pattern (U_2_int |a#69#3#0|) :no-pattern (U_2_bool |a#69#3#0|) :no-pattern (U_2_int |a#69#4#0|) :no-pattern (U_2_bool |a#69#4#0|) :no-pattern (U_2_int |a#69#5#0|) :no-pattern (U_2_bool |a#69#5#0|) :no-pattern (U_2_int |a#69#6#0|) :no-pattern (U_2_bool |a#69#6#0|) :no-pattern (U_2_int |a#69#7#0|) :no-pattern (U_2_bool |a#69#7#0|) :no-pattern (U_2_int |a#69#8#0|) :no-pattern (U_2_bool |a#69#8#0|) :no-pattern (U_2_int |a#69#11#0|) :no-pattern (U_2_bool |a#69#11#0|) ))) :qid |unknown.0:0| :skolemid |4394| :pattern ( (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@215)) )))
(assert (forall ((|a#70#0#0@@0| T@U) (|a#70#1#0| T@U) (|a#70#2#0| T@U) (|a#70#3#0| T@U) (|a#70#4#0| T@U) (|a#70#5#0| T@U) (|a#70#6#0| T@U) (|a#70#7#0| T@U) (|a#70#8#0| T@U) (|a#70#9#0| Int) (|a#70#10#0| Int) (|a#70#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#70#0#0@@0|) BoxType) (= (type |a#70#1#0|) BoxType)) (= (type |a#70#2#0|) BoxType)) (= (type |a#70#3#0|) BoxType)) (= (type |a#70#4#0|) DatatypeTypeType)) (= (type |a#70#5#0|) DatatypeTypeType)) (= (type |a#70#6#0|) DatatypeTypeType)) (= (type |a#70#7#0|) DatatypeTypeType)) (= (type |a#70#8#0|) DatatypeTypeType)) (= (type |a#70#11#0|) (SeqType BoxType))) (and (=> ($Is (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#70#0#0@@0| |a#70#1#0| |a#70#2#0| |a#70#3#0| |a#70#4#0| |a#70#5#0| |a#70#6#0| |a#70#7#0| |a#70#8#0| |a#70#9#0| |a#70#10#0| |a#70#11#0|) Tclass.PivotBetreeSpec.NodeFusion) (and (and (and (and (and (and (and (and (and (and (and ($IsBox |a#70#0#0@@0| Tclass.ReferenceType.Reference) ($IsBox |a#70#1#0| Tclass.ReferenceType.Reference)) ($IsBox |a#70#2#0| Tclass.ReferenceType.Reference)) ($IsBox |a#70#3#0| Tclass.ReferenceType.Reference)) ($Is |a#70#4#0| Tclass.PivotBetreeGraph.Node)) ($Is |a#70#5#0| Tclass.PivotBetreeGraph.Node)) ($Is |a#70#6#0| Tclass.PivotBetreeGraph.Node)) ($Is |a#70#7#0| Tclass.PivotBetreeGraph.Node)) ($Is |a#70#8#0| Tclass.PivotBetreeGraph.Node)) ($Is (int_2_U |a#70#9#0|) TInt)) ($Is (int_2_U |a#70#10#0|) TInt)) ($Is |a#70#11#0| Tclass.KeyType.Key))) (=> (and (and (and (and (and (and (and (and (and (and (and ($IsBox |a#70#0#0@@0| Tclass.ReferenceType.Reference) ($IsBox |a#70#1#0| Tclass.ReferenceType.Reference)) ($IsBox |a#70#2#0| Tclass.ReferenceType.Reference)) ($IsBox |a#70#3#0| Tclass.ReferenceType.Reference)) ($Is |a#70#4#0| Tclass.PivotBetreeGraph.Node)) ($Is |a#70#5#0| Tclass.PivotBetreeGraph.Node)) ($Is |a#70#6#0| Tclass.PivotBetreeGraph.Node)) ($Is |a#70#7#0| Tclass.PivotBetreeGraph.Node)) ($Is |a#70#8#0| Tclass.PivotBetreeGraph.Node)) ($Is (int_2_U |a#70#9#0|) TInt)) ($Is (int_2_U |a#70#10#0|) TInt)) ($Is |a#70#11#0| Tclass.KeyType.Key)) ($Is (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#70#0#0@@0| |a#70#1#0| |a#70#2#0| |a#70#3#0| |a#70#4#0| |a#70#5#0| |a#70#6#0| |a#70#7#0| |a#70#8#0| |a#70#9#0| |a#70#10#0| |a#70#11#0|) Tclass.PivotBetreeSpec.NodeFusion)))) :qid |PivotBet.399:5| :skolemid |4395| :pattern ( ($Is (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#70#0#0@@0| |a#70#1#0| |a#70#2#0| |a#70#3#0| |a#70#4#0| |a#70#5#0| |a#70#6#0| |a#70#7#0| |a#70#8#0| |a#70#9#0| |a#70#10#0| |a#70#11#0|) Tclass.PivotBetreeSpec.NodeFusion)) )))
(assert (forall ((|a#71#0#0@@0| T@U) (|a#71#1#0| T@U) (|a#71#2#0| T@U) (|a#71#3#0| T@U) (|a#71#4#0| T@U) (|a#71#5#0| T@U) (|a#71#6#0| T@U) (|a#71#7#0| T@U) (|a#71#8#0| T@U) (|a#71#9#0| Int) (|a#71#10#0| Int) (|a#71#11#0| T@U) ($h@@178 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type |a#71#0#0@@0|) BoxType) (= (type |a#71#1#0|) BoxType)) (= (type |a#71#2#0|) BoxType)) (= (type |a#71#3#0|) BoxType)) (= (type |a#71#4#0|) DatatypeTypeType)) (= (type |a#71#5#0|) DatatypeTypeType)) (= (type |a#71#6#0|) DatatypeTypeType)) (= (type |a#71#7#0|) DatatypeTypeType)) (= (type |a#71#8#0|) DatatypeTypeType)) (= (type |a#71#11#0|) (SeqType BoxType))) (= (type $h@@178) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@178)) (and (=> ($IsAlloc (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#71#0#0@@0| |a#71#1#0| |a#71#2#0| |a#71#3#0| |a#71#4#0| |a#71#5#0| |a#71#6#0| |a#71#7#0| |a#71#8#0| |a#71#9#0| |a#71#10#0| |a#71#11#0|) Tclass.PivotBetreeSpec.NodeFusion $h@@178) (and (and (and (and (and (and (and (and (and (and (and ($IsAllocBox |a#71#0#0@@0| Tclass.ReferenceType.Reference $h@@178) ($IsAllocBox |a#71#1#0| Tclass.ReferenceType.Reference $h@@178)) ($IsAllocBox |a#71#2#0| Tclass.ReferenceType.Reference $h@@178)) ($IsAllocBox |a#71#3#0| Tclass.ReferenceType.Reference $h@@178)) ($IsAlloc |a#71#4#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc |a#71#5#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc |a#71#6#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc |a#71#7#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc |a#71#8#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc (int_2_U |a#71#9#0|) TInt $h@@178)) ($IsAlloc (int_2_U |a#71#10#0|) TInt $h@@178)) ($IsAlloc |a#71#11#0| Tclass.KeyType.Key $h@@178))) (=> (and (and (and (and (and (and (and (and (and (and (and ($IsAllocBox |a#71#0#0@@0| Tclass.ReferenceType.Reference $h@@178) ($IsAllocBox |a#71#1#0| Tclass.ReferenceType.Reference $h@@178)) ($IsAllocBox |a#71#2#0| Tclass.ReferenceType.Reference $h@@178)) ($IsAllocBox |a#71#3#0| Tclass.ReferenceType.Reference $h@@178)) ($IsAlloc |a#71#4#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc |a#71#5#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc |a#71#6#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc |a#71#7#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc |a#71#8#0| Tclass.PivotBetreeGraph.Node $h@@178)) ($IsAlloc (int_2_U |a#71#9#0|) TInt $h@@178)) ($IsAlloc (int_2_U |a#71#10#0|) TInt $h@@178)) ($IsAlloc |a#71#11#0| Tclass.KeyType.Key $h@@178)) ($IsAlloc (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#71#0#0@@0| |a#71#1#0| |a#71#2#0| |a#71#3#0| |a#71#4#0| |a#71#5#0| |a#71#6#0| |a#71#7#0| |a#71#8#0| |a#71#9#0| |a#71#10#0| |a#71#11#0|) Tclass.PivotBetreeSpec.NodeFusion $h@@178)))) :qid |PivotBet.399:5| :skolemid |4396| :pattern ( ($IsAlloc (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#71#0#0@@0| |a#71#1#0| |a#71#2#0| |a#71#3#0| |a#71#4#0| |a#71#5#0| |a#71#6#0| |a#71#7#0| |a#71#8#0| |a#71#9#0| |a#71#10#0| |a#71#11#0|) Tclass.PivotBetreeSpec.NodeFusion $h@@178)) )))
(assert (forall ((arg0@@617 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.parentref arg0@@617)) BoxType) :qid |funType:PivotBetreeSpec.NodeFusion.parentref| :pattern ( (PivotBetreeSpec.NodeFusion.parentref arg0@@617)) )))
(assert (forall ((d@@216 T@U) ($h@@179 T@U) ) (!  (=> (and (and (= (type d@@216) DatatypeTypeType) (= (type $h@@179) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@179) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@216) ($IsAlloc d@@216 Tclass.PivotBetreeSpec.NodeFusion $h@@179)))) ($IsAllocBox (PivotBetreeSpec.NodeFusion.parentref d@@216) Tclass.ReferenceType.Reference $h@@179)) :qid |unknown.0:0| :skolemid |4397| :pattern ( ($IsAllocBox (PivotBetreeSpec.NodeFusion.parentref d@@216) Tclass.ReferenceType.Reference $h@@179)) )))
(assert (forall ((arg0@@618 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.fused__childref arg0@@618)) BoxType) :qid |funType:PivotBetreeSpec.NodeFusion.fused__childref| :pattern ( (PivotBetreeSpec.NodeFusion.fused__childref arg0@@618)) )))
(assert (forall ((d@@217 T@U) ($h@@180 T@U) ) (!  (=> (and (and (= (type d@@217) DatatypeTypeType) (= (type $h@@180) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@180) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@217) ($IsAlloc d@@217 Tclass.PivotBetreeSpec.NodeFusion $h@@180)))) ($IsAllocBox (PivotBetreeSpec.NodeFusion.fused__childref d@@217) Tclass.ReferenceType.Reference $h@@180)) :qid |unknown.0:0| :skolemid |4398| :pattern ( ($IsAllocBox (PivotBetreeSpec.NodeFusion.fused__childref d@@217) Tclass.ReferenceType.Reference $h@@180)) )))
(assert (forall ((arg0@@619 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.left__childref arg0@@619)) BoxType) :qid |funType:PivotBetreeSpec.NodeFusion.left__childref| :pattern ( (PivotBetreeSpec.NodeFusion.left__childref arg0@@619)) )))
(assert (forall ((d@@218 T@U) ($h@@181 T@U) ) (!  (=> (and (and (= (type d@@218) DatatypeTypeType) (= (type $h@@181) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@181) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@218) ($IsAlloc d@@218 Tclass.PivotBetreeSpec.NodeFusion $h@@181)))) ($IsAllocBox (PivotBetreeSpec.NodeFusion.left__childref d@@218) Tclass.ReferenceType.Reference $h@@181)) :qid |unknown.0:0| :skolemid |4399| :pattern ( ($IsAllocBox (PivotBetreeSpec.NodeFusion.left__childref d@@218) Tclass.ReferenceType.Reference $h@@181)) )))
(assert (forall ((arg0@@620 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.right__childref arg0@@620)) BoxType) :qid |funType:PivotBetreeSpec.NodeFusion.right__childref| :pattern ( (PivotBetreeSpec.NodeFusion.right__childref arg0@@620)) )))
(assert (forall ((d@@219 T@U) ($h@@182 T@U) ) (!  (=> (and (and (= (type d@@219) DatatypeTypeType) (= (type $h@@182) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@182) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@219) ($IsAlloc d@@219 Tclass.PivotBetreeSpec.NodeFusion $h@@182)))) ($IsAllocBox (PivotBetreeSpec.NodeFusion.right__childref d@@219) Tclass.ReferenceType.Reference $h@@182)) :qid |unknown.0:0| :skolemid |4400| :pattern ( ($IsAllocBox (PivotBetreeSpec.NodeFusion.right__childref d@@219) Tclass.ReferenceType.Reference $h@@182)) )))
(assert (forall ((arg0@@621 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.fused__parent arg0@@621)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.NodeFusion.fused__parent| :pattern ( (PivotBetreeSpec.NodeFusion.fused__parent arg0@@621)) )))
(assert (forall ((d@@220 T@U) ($h@@183 T@U) ) (!  (=> (and (and (= (type d@@220) DatatypeTypeType) (= (type $h@@183) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@183) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@220) ($IsAlloc d@@220 Tclass.PivotBetreeSpec.NodeFusion $h@@183)))) ($IsAlloc (PivotBetreeSpec.NodeFusion.fused__parent d@@220) Tclass.PivotBetreeGraph.Node $h@@183)) :qid |unknown.0:0| :skolemid |4401| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFusion.fused__parent d@@220) Tclass.PivotBetreeGraph.Node $h@@183)) )))
(assert (forall ((arg0@@622 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.split__parent arg0@@622)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.NodeFusion.split__parent| :pattern ( (PivotBetreeSpec.NodeFusion.split__parent arg0@@622)) )))
(assert (forall ((d@@221 T@U) ($h@@184 T@U) ) (!  (=> (and (and (= (type d@@221) DatatypeTypeType) (= (type $h@@184) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@184) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@221) ($IsAlloc d@@221 Tclass.PivotBetreeSpec.NodeFusion $h@@184)))) ($IsAlloc (PivotBetreeSpec.NodeFusion.split__parent d@@221) Tclass.PivotBetreeGraph.Node $h@@184)) :qid |unknown.0:0| :skolemid |4402| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFusion.split__parent d@@221) Tclass.PivotBetreeGraph.Node $h@@184)) )))
(assert (forall ((arg0@@623 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.fused__child arg0@@623)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.NodeFusion.fused__child| :pattern ( (PivotBetreeSpec.NodeFusion.fused__child arg0@@623)) )))
(assert (forall ((d@@222 T@U) ($h@@185 T@U) ) (!  (=> (and (and (= (type d@@222) DatatypeTypeType) (= (type $h@@185) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@185) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@222) ($IsAlloc d@@222 Tclass.PivotBetreeSpec.NodeFusion $h@@185)))) ($IsAlloc (PivotBetreeSpec.NodeFusion.fused__child d@@222) Tclass.PivotBetreeGraph.Node $h@@185)) :qid |unknown.0:0| :skolemid |4403| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFusion.fused__child d@@222) Tclass.PivotBetreeGraph.Node $h@@185)) )))
(assert (forall ((arg0@@624 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.left__child arg0@@624)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.NodeFusion.left__child| :pattern ( (PivotBetreeSpec.NodeFusion.left__child arg0@@624)) )))
(assert (forall ((d@@223 T@U) ($h@@186 T@U) ) (!  (=> (and (and (= (type d@@223) DatatypeTypeType) (= (type $h@@186) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@186) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@223) ($IsAlloc d@@223 Tclass.PivotBetreeSpec.NodeFusion $h@@186)))) ($IsAlloc (PivotBetreeSpec.NodeFusion.left__child d@@223) Tclass.PivotBetreeGraph.Node $h@@186)) :qid |unknown.0:0| :skolemid |4404| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFusion.left__child d@@223) Tclass.PivotBetreeGraph.Node $h@@186)) )))
(assert (forall ((arg0@@625 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.right__child arg0@@625)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.NodeFusion.right__child| :pattern ( (PivotBetreeSpec.NodeFusion.right__child arg0@@625)) )))
(assert (forall ((d@@224 T@U) ($h@@187 T@U) ) (!  (=> (and (and (= (type d@@224) DatatypeTypeType) (= (type $h@@187) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@187) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@224) ($IsAlloc d@@224 Tclass.PivotBetreeSpec.NodeFusion $h@@187)))) ($IsAlloc (PivotBetreeSpec.NodeFusion.right__child d@@224) Tclass.PivotBetreeGraph.Node $h@@187)) :qid |unknown.0:0| :skolemid |4405| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFusion.right__child d@@224) Tclass.PivotBetreeGraph.Node $h@@187)) )))
(assert (forall ((d@@225 T@U) ($h@@188 T@U) ) (!  (=> (and (and (= (type d@@225) DatatypeTypeType) (= (type $h@@188) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@188) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@225) ($IsAlloc d@@225 Tclass.PivotBetreeSpec.NodeFusion $h@@188)))) ($IsAlloc (int_2_U (PivotBetreeSpec.NodeFusion.slot__idx d@@225)) TInt $h@@188)) :qid |unknown.0:0| :skolemid |4406| :pattern ( ($IsAlloc (int_2_U (PivotBetreeSpec.NodeFusion.slot__idx d@@225)) TInt $h@@188)) )))
(assert (forall ((d@@226 T@U) ($h@@189 T@U) ) (!  (=> (and (and (= (type d@@226) DatatypeTypeType) (= (type $h@@189) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@189) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@226) ($IsAlloc d@@226 Tclass.PivotBetreeSpec.NodeFusion $h@@189)))) ($IsAlloc (int_2_U (PivotBetreeSpec.NodeFusion.num__children__left d@@226)) TInt $h@@189)) :qid |unknown.0:0| :skolemid |4407| :pattern ( ($IsAlloc (int_2_U (PivotBetreeSpec.NodeFusion.num__children__left d@@226)) TInt $h@@189)) )))
(assert (forall ((arg0@@626 T@U) ) (! (= (type (PivotBetreeSpec.NodeFusion.pivot arg0@@626)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.NodeFusion.pivot| :pattern ( (PivotBetreeSpec.NodeFusion.pivot arg0@@626)) )))
(assert (forall ((d@@227 T@U) ($h@@190 T@U) ) (!  (=> (and (and (= (type d@@227) DatatypeTypeType) (= (type $h@@190) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@190) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@227) ($IsAlloc d@@227 Tclass.PivotBetreeSpec.NodeFusion $h@@190)))) ($IsAlloc (PivotBetreeSpec.NodeFusion.pivot d@@227) Tclass.KeyType.Key $h@@190)) :qid |unknown.0:0| :skolemid |4408| :pattern ( ($IsAlloc (PivotBetreeSpec.NodeFusion.pivot d@@227) Tclass.KeyType.Key $h@@190)) )))
(assert (forall ((|a#72#0#0@@0| T@U) (|a#72#1#0| T@U) (|a#72#2#0| T@U) (|a#72#3#0| T@U) (|a#72#4#0| T@U) (|a#72#5#0| T@U) (|a#72#6#0| T@U) (|a#72#7#0| T@U) (|a#72#8#0| T@U) (|a#72#9#0| Int) (|a#72#10#0| Int) (|a#72#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#72#0#0@@0|) BoxType) (= (type |a#72#1#0|) BoxType)) (= (type |a#72#2#0|) BoxType)) (= (type |a#72#3#0|) BoxType)) (= (type |a#72#4#0|) DatatypeTypeType)) (= (type |a#72#5#0|) DatatypeTypeType)) (= (type |a#72#6#0|) DatatypeTypeType)) (= (type |a#72#7#0|) DatatypeTypeType)) (= (type |a#72#8#0|) DatatypeTypeType)) (= (type |a#72#11#0|) (SeqType BoxType))) (= (|#PivotBetreeSpec.NodeFusion.NodeFusion| (Lit |a#72#0#0@@0|) (Lit |a#72#1#0|) (Lit |a#72#2#0|) (Lit |a#72#3#0|) (Lit |a#72#4#0|) (Lit |a#72#5#0|) (Lit |a#72#6#0|) (Lit |a#72#7#0|) (Lit |a#72#8#0|) (LitInt |a#72#9#0|) (LitInt |a#72#10#0|) (Lit |a#72#11#0|)) (Lit (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#72#0#0@@0| |a#72#1#0| |a#72#2#0| |a#72#3#0| |a#72#4#0| |a#72#5#0| |a#72#6#0| |a#72#7#0| |a#72#8#0| |a#72#9#0| |a#72#10#0| |a#72#11#0|)))) :qid |PivotBet.399:5| :skolemid |4409| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| (Lit |a#72#0#0@@0|) (Lit |a#72#1#0|) (Lit |a#72#2#0|) (Lit |a#72#3#0|) (Lit |a#72#4#0|) (Lit |a#72#5#0|) (Lit |a#72#6#0|) (Lit |a#72#7#0|) (Lit |a#72#8#0|) (LitInt |a#72#9#0|) (LitInt |a#72#10#0|) (Lit |a#72#11#0|))) )))
(assert (forall ((|a#73#0#0@@0| T@U) (|a#73#1#0| T@U) (|a#73#2#0| T@U) (|a#73#3#0| T@U) (|a#73#4#0| T@U) (|a#73#5#0| T@U) (|a#73#6#0| T@U) (|a#73#7#0| T@U) (|a#73#8#0| T@U) (|a#73#9#0| Int) (|a#73#10#0| Int) (|a#73#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#73#0#0@@0|) BoxType) (= (type |a#73#1#0|) BoxType)) (= (type |a#73#2#0|) BoxType)) (= (type |a#73#3#0|) BoxType)) (= (type |a#73#4#0|) DatatypeTypeType)) (= (type |a#73#5#0|) DatatypeTypeType)) (= (type |a#73#6#0|) DatatypeTypeType)) (= (type |a#73#7#0|) DatatypeTypeType)) (= (type |a#73#8#0|) DatatypeTypeType)) (= (type |a#73#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.parentref (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#73#0#0@@0| |a#73#1#0| |a#73#2#0| |a#73#3#0| |a#73#4#0| |a#73#5#0| |a#73#6#0| |a#73#7#0| |a#73#8#0| |a#73#9#0| |a#73#10#0| |a#73#11#0|)) |a#73#0#0@@0|)) :qid |PivotBet.399:5| :skolemid |4410| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#73#0#0@@0| |a#73#1#0| |a#73#2#0| |a#73#3#0| |a#73#4#0| |a#73#5#0| |a#73#6#0| |a#73#7#0| |a#73#8#0| |a#73#9#0| |a#73#10#0| |a#73#11#0|)) )))
(assert (forall ((|a#74#0#0@@0| T@U) (|a#74#1#0| T@U) (|a#74#2#0| T@U) (|a#74#3#0| T@U) (|a#74#4#0| T@U) (|a#74#5#0| T@U) (|a#74#6#0| T@U) (|a#74#7#0| T@U) (|a#74#8#0| T@U) (|a#74#9#0| Int) (|a#74#10#0| Int) (|a#74#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#74#0#0@@0|) BoxType) (= (type |a#74#1#0|) BoxType)) (= (type |a#74#2#0|) BoxType)) (= (type |a#74#3#0|) BoxType)) (= (type |a#74#4#0|) DatatypeTypeType)) (= (type |a#74#5#0|) DatatypeTypeType)) (= (type |a#74#6#0|) DatatypeTypeType)) (= (type |a#74#7#0|) DatatypeTypeType)) (= (type |a#74#8#0|) DatatypeTypeType)) (= (type |a#74#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.fused__childref (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#74#0#0@@0| |a#74#1#0| |a#74#2#0| |a#74#3#0| |a#74#4#0| |a#74#5#0| |a#74#6#0| |a#74#7#0| |a#74#8#0| |a#74#9#0| |a#74#10#0| |a#74#11#0|)) |a#74#1#0|)) :qid |PivotBet.399:5| :skolemid |4411| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#74#0#0@@0| |a#74#1#0| |a#74#2#0| |a#74#3#0| |a#74#4#0| |a#74#5#0| |a#74#6#0| |a#74#7#0| |a#74#8#0| |a#74#9#0| |a#74#10#0| |a#74#11#0|)) )))
(assert (forall ((|a#75#0#0@@0| T@U) (|a#75#1#0| T@U) (|a#75#2#0| T@U) (|a#75#3#0| T@U) (|a#75#4#0| T@U) (|a#75#5#0| T@U) (|a#75#6#0| T@U) (|a#75#7#0| T@U) (|a#75#8#0| T@U) (|a#75#9#0| Int) (|a#75#10#0| Int) (|a#75#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#75#0#0@@0|) BoxType) (= (type |a#75#1#0|) BoxType)) (= (type |a#75#2#0|) BoxType)) (= (type |a#75#3#0|) BoxType)) (= (type |a#75#4#0|) DatatypeTypeType)) (= (type |a#75#5#0|) DatatypeTypeType)) (= (type |a#75#6#0|) DatatypeTypeType)) (= (type |a#75#7#0|) DatatypeTypeType)) (= (type |a#75#8#0|) DatatypeTypeType)) (= (type |a#75#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.left__childref (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#75#0#0@@0| |a#75#1#0| |a#75#2#0| |a#75#3#0| |a#75#4#0| |a#75#5#0| |a#75#6#0| |a#75#7#0| |a#75#8#0| |a#75#9#0| |a#75#10#0| |a#75#11#0|)) |a#75#2#0|)) :qid |PivotBet.399:5| :skolemid |4412| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#75#0#0@@0| |a#75#1#0| |a#75#2#0| |a#75#3#0| |a#75#4#0| |a#75#5#0| |a#75#6#0| |a#75#7#0| |a#75#8#0| |a#75#9#0| |a#75#10#0| |a#75#11#0|)) )))
(assert (forall ((|a#76#0#0@@0| T@U) (|a#76#1#0| T@U) (|a#76#2#0| T@U) (|a#76#3#0| T@U) (|a#76#4#0| T@U) (|a#76#5#0| T@U) (|a#76#6#0| T@U) (|a#76#7#0| T@U) (|a#76#8#0| T@U) (|a#76#9#0| Int) (|a#76#10#0| Int) (|a#76#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#76#0#0@@0|) BoxType) (= (type |a#76#1#0|) BoxType)) (= (type |a#76#2#0|) BoxType)) (= (type |a#76#3#0|) BoxType)) (= (type |a#76#4#0|) DatatypeTypeType)) (= (type |a#76#5#0|) DatatypeTypeType)) (= (type |a#76#6#0|) DatatypeTypeType)) (= (type |a#76#7#0|) DatatypeTypeType)) (= (type |a#76#8#0|) DatatypeTypeType)) (= (type |a#76#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.right__childref (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#76#0#0@@0| |a#76#1#0| |a#76#2#0| |a#76#3#0| |a#76#4#0| |a#76#5#0| |a#76#6#0| |a#76#7#0| |a#76#8#0| |a#76#9#0| |a#76#10#0| |a#76#11#0|)) |a#76#3#0|)) :qid |PivotBet.399:5| :skolemid |4413| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#76#0#0@@0| |a#76#1#0| |a#76#2#0| |a#76#3#0| |a#76#4#0| |a#76#5#0| |a#76#6#0| |a#76#7#0| |a#76#8#0| |a#76#9#0| |a#76#10#0| |a#76#11#0|)) )))
(assert (forall ((|a#77#0#0@@0| T@U) (|a#77#1#0| T@U) (|a#77#2#0| T@U) (|a#77#3#0| T@U) (|a#77#4#0| T@U) (|a#77#5#0| T@U) (|a#77#6#0| T@U) (|a#77#7#0| T@U) (|a#77#8#0| T@U) (|a#77#9#0| Int) (|a#77#10#0| Int) (|a#77#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#77#0#0@@0|) BoxType) (= (type |a#77#1#0|) BoxType)) (= (type |a#77#2#0|) BoxType)) (= (type |a#77#3#0|) BoxType)) (= (type |a#77#4#0|) DatatypeTypeType)) (= (type |a#77#5#0|) DatatypeTypeType)) (= (type |a#77#6#0|) DatatypeTypeType)) (= (type |a#77#7#0|) DatatypeTypeType)) (= (type |a#77#8#0|) DatatypeTypeType)) (= (type |a#77#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.fused__parent (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#77#0#0@@0| |a#77#1#0| |a#77#2#0| |a#77#3#0| |a#77#4#0| |a#77#5#0| |a#77#6#0| |a#77#7#0| |a#77#8#0| |a#77#9#0| |a#77#10#0| |a#77#11#0|)) |a#77#4#0|)) :qid |PivotBet.399:5| :skolemid |4414| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#77#0#0@@0| |a#77#1#0| |a#77#2#0| |a#77#3#0| |a#77#4#0| |a#77#5#0| |a#77#6#0| |a#77#7#0| |a#77#8#0| |a#77#9#0| |a#77#10#0| |a#77#11#0|)) )))
(assert (forall ((|a#78#0#0@@0| T@U) (|a#78#1#0@@0| T@U) (|a#78#2#0| T@U) (|a#78#3#0| T@U) (|a#78#4#0| T@U) (|a#78#5#0| T@U) (|a#78#6#0| T@U) (|a#78#7#0| T@U) (|a#78#8#0| T@U) (|a#78#9#0| Int) (|a#78#10#0| Int) (|a#78#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#78#0#0@@0|) BoxType) (= (type |a#78#1#0@@0|) BoxType)) (= (type |a#78#2#0|) BoxType)) (= (type |a#78#3#0|) BoxType)) (= (type |a#78#4#0|) DatatypeTypeType)) (= (type |a#78#5#0|) DatatypeTypeType)) (= (type |a#78#6#0|) DatatypeTypeType)) (= (type |a#78#7#0|) DatatypeTypeType)) (= (type |a#78#8#0|) DatatypeTypeType)) (= (type |a#78#11#0|) (SeqType BoxType))) (< (DtRank |a#78#4#0|) (DtRank (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#78#0#0@@0| |a#78#1#0@@0| |a#78#2#0| |a#78#3#0| |a#78#4#0| |a#78#5#0| |a#78#6#0| |a#78#7#0| |a#78#8#0| |a#78#9#0| |a#78#10#0| |a#78#11#0|)))) :qid |PivotBet.399:5| :skolemid |4415| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#78#0#0@@0| |a#78#1#0@@0| |a#78#2#0| |a#78#3#0| |a#78#4#0| |a#78#5#0| |a#78#6#0| |a#78#7#0| |a#78#8#0| |a#78#9#0| |a#78#10#0| |a#78#11#0|)) )))
(assert (forall ((|a#79#0#0@@0| T@U) (|a#79#1#0@@0| T@U) (|a#79#2#0| T@U) (|a#79#3#0| T@U) (|a#79#4#0| T@U) (|a#79#5#0| T@U) (|a#79#6#0| T@U) (|a#79#7#0| T@U) (|a#79#8#0| T@U) (|a#79#9#0| Int) (|a#79#10#0| Int) (|a#79#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#79#0#0@@0|) BoxType) (= (type |a#79#1#0@@0|) BoxType)) (= (type |a#79#2#0|) BoxType)) (= (type |a#79#3#0|) BoxType)) (= (type |a#79#4#0|) DatatypeTypeType)) (= (type |a#79#5#0|) DatatypeTypeType)) (= (type |a#79#6#0|) DatatypeTypeType)) (= (type |a#79#7#0|) DatatypeTypeType)) (= (type |a#79#8#0|) DatatypeTypeType)) (= (type |a#79#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.split__parent (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#79#0#0@@0| |a#79#1#0@@0| |a#79#2#0| |a#79#3#0| |a#79#4#0| |a#79#5#0| |a#79#6#0| |a#79#7#0| |a#79#8#0| |a#79#9#0| |a#79#10#0| |a#79#11#0|)) |a#79#5#0|)) :qid |PivotBet.399:5| :skolemid |4416| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#79#0#0@@0| |a#79#1#0@@0| |a#79#2#0| |a#79#3#0| |a#79#4#0| |a#79#5#0| |a#79#6#0| |a#79#7#0| |a#79#8#0| |a#79#9#0| |a#79#10#0| |a#79#11#0|)) )))
(assert (forall ((|a#80#0#0@@0| T@U) (|a#80#1#0@@0| T@U) (|a#80#2#0| T@U) (|a#80#3#0| T@U) (|a#80#4#0| T@U) (|a#80#5#0| T@U) (|a#80#6#0| T@U) (|a#80#7#0| T@U) (|a#80#8#0| T@U) (|a#80#9#0| Int) (|a#80#10#0| Int) (|a#80#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#80#0#0@@0|) BoxType) (= (type |a#80#1#0@@0|) BoxType)) (= (type |a#80#2#0|) BoxType)) (= (type |a#80#3#0|) BoxType)) (= (type |a#80#4#0|) DatatypeTypeType)) (= (type |a#80#5#0|) DatatypeTypeType)) (= (type |a#80#6#0|) DatatypeTypeType)) (= (type |a#80#7#0|) DatatypeTypeType)) (= (type |a#80#8#0|) DatatypeTypeType)) (= (type |a#80#11#0|) (SeqType BoxType))) (< (DtRank |a#80#5#0|) (DtRank (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#80#0#0@@0| |a#80#1#0@@0| |a#80#2#0| |a#80#3#0| |a#80#4#0| |a#80#5#0| |a#80#6#0| |a#80#7#0| |a#80#8#0| |a#80#9#0| |a#80#10#0| |a#80#11#0|)))) :qid |PivotBet.399:5| :skolemid |4417| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#80#0#0@@0| |a#80#1#0@@0| |a#80#2#0| |a#80#3#0| |a#80#4#0| |a#80#5#0| |a#80#6#0| |a#80#7#0| |a#80#8#0| |a#80#9#0| |a#80#10#0| |a#80#11#0|)) )))
(assert (forall ((|a#81#0#0@@0| T@U) (|a#81#1#0@@0| T@U) (|a#81#2#0| T@U) (|a#81#3#0| T@U) (|a#81#4#0| T@U) (|a#81#5#0| T@U) (|a#81#6#0| T@U) (|a#81#7#0| T@U) (|a#81#8#0| T@U) (|a#81#9#0| Int) (|a#81#10#0| Int) (|a#81#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#81#0#0@@0|) BoxType) (= (type |a#81#1#0@@0|) BoxType)) (= (type |a#81#2#0|) BoxType)) (= (type |a#81#3#0|) BoxType)) (= (type |a#81#4#0|) DatatypeTypeType)) (= (type |a#81#5#0|) DatatypeTypeType)) (= (type |a#81#6#0|) DatatypeTypeType)) (= (type |a#81#7#0|) DatatypeTypeType)) (= (type |a#81#8#0|) DatatypeTypeType)) (= (type |a#81#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.fused__child (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#81#0#0@@0| |a#81#1#0@@0| |a#81#2#0| |a#81#3#0| |a#81#4#0| |a#81#5#0| |a#81#6#0| |a#81#7#0| |a#81#8#0| |a#81#9#0| |a#81#10#0| |a#81#11#0|)) |a#81#6#0|)) :qid |PivotBet.399:5| :skolemid |4418| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#81#0#0@@0| |a#81#1#0@@0| |a#81#2#0| |a#81#3#0| |a#81#4#0| |a#81#5#0| |a#81#6#0| |a#81#7#0| |a#81#8#0| |a#81#9#0| |a#81#10#0| |a#81#11#0|)) )))
(assert (forall ((|a#82#0#0@@0| T@U) (|a#82#1#0@@0| T@U) (|a#82#2#0| T@U) (|a#82#3#0| T@U) (|a#82#4#0| T@U) (|a#82#5#0| T@U) (|a#82#6#0| T@U) (|a#82#7#0| T@U) (|a#82#8#0| T@U) (|a#82#9#0| Int) (|a#82#10#0| Int) (|a#82#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#82#0#0@@0|) BoxType) (= (type |a#82#1#0@@0|) BoxType)) (= (type |a#82#2#0|) BoxType)) (= (type |a#82#3#0|) BoxType)) (= (type |a#82#4#0|) DatatypeTypeType)) (= (type |a#82#5#0|) DatatypeTypeType)) (= (type |a#82#6#0|) DatatypeTypeType)) (= (type |a#82#7#0|) DatatypeTypeType)) (= (type |a#82#8#0|) DatatypeTypeType)) (= (type |a#82#11#0|) (SeqType BoxType))) (< (DtRank |a#82#6#0|) (DtRank (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#82#0#0@@0| |a#82#1#0@@0| |a#82#2#0| |a#82#3#0| |a#82#4#0| |a#82#5#0| |a#82#6#0| |a#82#7#0| |a#82#8#0| |a#82#9#0| |a#82#10#0| |a#82#11#0|)))) :qid |PivotBet.399:5| :skolemid |4419| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#82#0#0@@0| |a#82#1#0@@0| |a#82#2#0| |a#82#3#0| |a#82#4#0| |a#82#5#0| |a#82#6#0| |a#82#7#0| |a#82#8#0| |a#82#9#0| |a#82#10#0| |a#82#11#0|)) )))
(assert (forall ((|a#83#0#0@@0| T@U) (|a#83#1#0@@0| T@U) (|a#83#2#0| T@U) (|a#83#3#0| T@U) (|a#83#4#0| T@U) (|a#83#5#0| T@U) (|a#83#6#0| T@U) (|a#83#7#0| T@U) (|a#83#8#0| T@U) (|a#83#9#0| Int) (|a#83#10#0| Int) (|a#83#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#83#0#0@@0|) BoxType) (= (type |a#83#1#0@@0|) BoxType)) (= (type |a#83#2#0|) BoxType)) (= (type |a#83#3#0|) BoxType)) (= (type |a#83#4#0|) DatatypeTypeType)) (= (type |a#83#5#0|) DatatypeTypeType)) (= (type |a#83#6#0|) DatatypeTypeType)) (= (type |a#83#7#0|) DatatypeTypeType)) (= (type |a#83#8#0|) DatatypeTypeType)) (= (type |a#83#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.left__child (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#83#0#0@@0| |a#83#1#0@@0| |a#83#2#0| |a#83#3#0| |a#83#4#0| |a#83#5#0| |a#83#6#0| |a#83#7#0| |a#83#8#0| |a#83#9#0| |a#83#10#0| |a#83#11#0|)) |a#83#7#0|)) :qid |PivotBet.399:5| :skolemid |4420| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#83#0#0@@0| |a#83#1#0@@0| |a#83#2#0| |a#83#3#0| |a#83#4#0| |a#83#5#0| |a#83#6#0| |a#83#7#0| |a#83#8#0| |a#83#9#0| |a#83#10#0| |a#83#11#0|)) )))
(assert (forall ((|a#84#0#0@@0| T@U) (|a#84#1#0@@0| T@U) (|a#84#2#0| T@U) (|a#84#3#0| T@U) (|a#84#4#0| T@U) (|a#84#5#0| T@U) (|a#84#6#0| T@U) (|a#84#7#0| T@U) (|a#84#8#0| T@U) (|a#84#9#0| Int) (|a#84#10#0| Int) (|a#84#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#84#0#0@@0|) BoxType) (= (type |a#84#1#0@@0|) BoxType)) (= (type |a#84#2#0|) BoxType)) (= (type |a#84#3#0|) BoxType)) (= (type |a#84#4#0|) DatatypeTypeType)) (= (type |a#84#5#0|) DatatypeTypeType)) (= (type |a#84#6#0|) DatatypeTypeType)) (= (type |a#84#7#0|) DatatypeTypeType)) (= (type |a#84#8#0|) DatatypeTypeType)) (= (type |a#84#11#0|) (SeqType BoxType))) (< (DtRank |a#84#7#0|) (DtRank (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#84#0#0@@0| |a#84#1#0@@0| |a#84#2#0| |a#84#3#0| |a#84#4#0| |a#84#5#0| |a#84#6#0| |a#84#7#0| |a#84#8#0| |a#84#9#0| |a#84#10#0| |a#84#11#0|)))) :qid |PivotBet.399:5| :skolemid |4421| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#84#0#0@@0| |a#84#1#0@@0| |a#84#2#0| |a#84#3#0| |a#84#4#0| |a#84#5#0| |a#84#6#0| |a#84#7#0| |a#84#8#0| |a#84#9#0| |a#84#10#0| |a#84#11#0|)) )))
(assert (forall ((|a#85#0#0@@0| T@U) (|a#85#1#0@@0| T@U) (|a#85#2#0| T@U) (|a#85#3#0| T@U) (|a#85#4#0| T@U) (|a#85#5#0| T@U) (|a#85#6#0| T@U) (|a#85#7#0| T@U) (|a#85#8#0| T@U) (|a#85#9#0| Int) (|a#85#10#0| Int) (|a#85#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#85#0#0@@0|) BoxType) (= (type |a#85#1#0@@0|) BoxType)) (= (type |a#85#2#0|) BoxType)) (= (type |a#85#3#0|) BoxType)) (= (type |a#85#4#0|) DatatypeTypeType)) (= (type |a#85#5#0|) DatatypeTypeType)) (= (type |a#85#6#0|) DatatypeTypeType)) (= (type |a#85#7#0|) DatatypeTypeType)) (= (type |a#85#8#0|) DatatypeTypeType)) (= (type |a#85#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.right__child (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#85#0#0@@0| |a#85#1#0@@0| |a#85#2#0| |a#85#3#0| |a#85#4#0| |a#85#5#0| |a#85#6#0| |a#85#7#0| |a#85#8#0| |a#85#9#0| |a#85#10#0| |a#85#11#0|)) |a#85#8#0|)) :qid |PivotBet.399:5| :skolemid |4422| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#85#0#0@@0| |a#85#1#0@@0| |a#85#2#0| |a#85#3#0| |a#85#4#0| |a#85#5#0| |a#85#6#0| |a#85#7#0| |a#85#8#0| |a#85#9#0| |a#85#10#0| |a#85#11#0|)) )))
(assert (forall ((|a#86#0#0@@0| T@U) (|a#86#1#0@@0| T@U) (|a#86#2#0| T@U) (|a#86#3#0| T@U) (|a#86#4#0| T@U) (|a#86#5#0| T@U) (|a#86#6#0| T@U) (|a#86#7#0| T@U) (|a#86#8#0| T@U) (|a#86#9#0| Int) (|a#86#10#0| Int) (|a#86#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#86#0#0@@0|) BoxType) (= (type |a#86#1#0@@0|) BoxType)) (= (type |a#86#2#0|) BoxType)) (= (type |a#86#3#0|) BoxType)) (= (type |a#86#4#0|) DatatypeTypeType)) (= (type |a#86#5#0|) DatatypeTypeType)) (= (type |a#86#6#0|) DatatypeTypeType)) (= (type |a#86#7#0|) DatatypeTypeType)) (= (type |a#86#8#0|) DatatypeTypeType)) (= (type |a#86#11#0|) (SeqType BoxType))) (< (DtRank |a#86#8#0|) (DtRank (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#86#0#0@@0| |a#86#1#0@@0| |a#86#2#0| |a#86#3#0| |a#86#4#0| |a#86#5#0| |a#86#6#0| |a#86#7#0| |a#86#8#0| |a#86#9#0| |a#86#10#0| |a#86#11#0|)))) :qid |PivotBet.399:5| :skolemid |4423| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#86#0#0@@0| |a#86#1#0@@0| |a#86#2#0| |a#86#3#0| |a#86#4#0| |a#86#5#0| |a#86#6#0| |a#86#7#0| |a#86#8#0| |a#86#9#0| |a#86#10#0| |a#86#11#0|)) )))
(assert (forall ((|a#87#0#0@@0| T@U) (|a#87#1#0@@0| T@U) (|a#87#2#0| T@U) (|a#87#3#0| T@U) (|a#87#4#0| T@U) (|a#87#5#0| T@U) (|a#87#6#0| T@U) (|a#87#7#0| T@U) (|a#87#8#0| T@U) (|a#87#9#0| Int) (|a#87#10#0| Int) (|a#87#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#87#0#0@@0|) BoxType) (= (type |a#87#1#0@@0|) BoxType)) (= (type |a#87#2#0|) BoxType)) (= (type |a#87#3#0|) BoxType)) (= (type |a#87#4#0|) DatatypeTypeType)) (= (type |a#87#5#0|) DatatypeTypeType)) (= (type |a#87#6#0|) DatatypeTypeType)) (= (type |a#87#7#0|) DatatypeTypeType)) (= (type |a#87#8#0|) DatatypeTypeType)) (= (type |a#87#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.slot__idx (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#87#0#0@@0| |a#87#1#0@@0| |a#87#2#0| |a#87#3#0| |a#87#4#0| |a#87#5#0| |a#87#6#0| |a#87#7#0| |a#87#8#0| |a#87#9#0| |a#87#10#0| |a#87#11#0|)) |a#87#9#0|)) :qid |PivotBet.399:5| :skolemid |4424| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#87#0#0@@0| |a#87#1#0@@0| |a#87#2#0| |a#87#3#0| |a#87#4#0| |a#87#5#0| |a#87#6#0| |a#87#7#0| |a#87#8#0| |a#87#9#0| |a#87#10#0| |a#87#11#0|)) )))
(assert (forall ((|a#88#0#0@@0| T@U) (|a#88#1#0@@0| T@U) (|a#88#2#0| T@U) (|a#88#3#0| T@U) (|a#88#4#0| T@U) (|a#88#5#0| T@U) (|a#88#6#0| T@U) (|a#88#7#0| T@U) (|a#88#8#0| T@U) (|a#88#9#0| Int) (|a#88#10#0| Int) (|a#88#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#88#0#0@@0|) BoxType) (= (type |a#88#1#0@@0|) BoxType)) (= (type |a#88#2#0|) BoxType)) (= (type |a#88#3#0|) BoxType)) (= (type |a#88#4#0|) DatatypeTypeType)) (= (type |a#88#5#0|) DatatypeTypeType)) (= (type |a#88#6#0|) DatatypeTypeType)) (= (type |a#88#7#0|) DatatypeTypeType)) (= (type |a#88#8#0|) DatatypeTypeType)) (= (type |a#88#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.num__children__left (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#88#0#0@@0| |a#88#1#0@@0| |a#88#2#0| |a#88#3#0| |a#88#4#0| |a#88#5#0| |a#88#6#0| |a#88#7#0| |a#88#8#0| |a#88#9#0| |a#88#10#0| |a#88#11#0|)) |a#88#10#0|)) :qid |PivotBet.399:5| :skolemid |4425| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#88#0#0@@0| |a#88#1#0@@0| |a#88#2#0| |a#88#3#0| |a#88#4#0| |a#88#5#0| |a#88#6#0| |a#88#7#0| |a#88#8#0| |a#88#9#0| |a#88#10#0| |a#88#11#0|)) )))
(assert (forall ((|a#89#0#0@@0| T@U) (|a#89#1#0@@0| T@U) (|a#89#2#0| T@U) (|a#89#3#0| T@U) (|a#89#4#0| T@U) (|a#89#5#0| T@U) (|a#89#6#0| T@U) (|a#89#7#0| T@U) (|a#89#8#0| T@U) (|a#89#9#0| Int) (|a#89#10#0| Int) (|a#89#11#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#89#0#0@@0|) BoxType) (= (type |a#89#1#0@@0|) BoxType)) (= (type |a#89#2#0|) BoxType)) (= (type |a#89#3#0|) BoxType)) (= (type |a#89#4#0|) DatatypeTypeType)) (= (type |a#89#5#0|) DatatypeTypeType)) (= (type |a#89#6#0|) DatatypeTypeType)) (= (type |a#89#7#0|) DatatypeTypeType)) (= (type |a#89#8#0|) DatatypeTypeType)) (= (type |a#89#11#0|) (SeqType BoxType))) (= (PivotBetreeSpec.NodeFusion.pivot (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#89#0#0@@0| |a#89#1#0@@0| |a#89#2#0| |a#89#3#0| |a#89#4#0| |a#89#5#0| |a#89#6#0| |a#89#7#0| |a#89#8#0| |a#89#9#0| |a#89#10#0| |a#89#11#0|)) |a#89#11#0|)) :qid |PivotBet.399:5| :skolemid |4426| :pattern ( (|#PivotBetreeSpec.NodeFusion.NodeFusion| |a#89#0#0@@0| |a#89#1#0@@0| |a#89#2#0| |a#89#3#0| |a#89#4#0| |a#89#5#0| |a#89#6#0| |a#89#7#0| |a#89#8#0| |a#89#9#0| |a#89#10#0| |a#89#11#0|)) )))
(assert (forall ((d@@228 T@U) ) (!  (=> (and (= (type d@@228) DatatypeTypeType) (|$IsA#PivotBetreeSpec.NodeFusion| d@@228)) (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@228)) :qid |unknown.0:0| :skolemid |4427| :pattern ( (|$IsA#PivotBetreeSpec.NodeFusion| d@@228)) )))
(assert (forall ((d@@229 T@U) ) (!  (=> (and (= (type d@@229) DatatypeTypeType) ($Is d@@229 Tclass.PivotBetreeSpec.NodeFusion)) (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@229)) :qid |unknown.0:0| :skolemid |4428| :pattern ( (PivotBetreeSpec.NodeFusion.NodeFusion_q d@@229) ($Is d@@229 Tclass.PivotBetreeSpec.NodeFusion)) )))
(assert (forall ((a@@198 T@U) (b@@129 T@U) ) (!  (=> (and (and (= (type a@@198) DatatypeTypeType) (= (type b@@129) DatatypeTypeType)) true) (and (=> (|PivotBetreeSpec.NodeFusion#Equal| a@@198 b@@129) (and (and (and (and (and (and (and (and (and (and (and (= (PivotBetreeSpec.NodeFusion.parentref a@@198) (PivotBetreeSpec.NodeFusion.parentref b@@129)) (= (PivotBetreeSpec.NodeFusion.fused__childref a@@198) (PivotBetreeSpec.NodeFusion.fused__childref b@@129))) (= (PivotBetreeSpec.NodeFusion.left__childref a@@198) (PivotBetreeSpec.NodeFusion.left__childref b@@129))) (= (PivotBetreeSpec.NodeFusion.right__childref a@@198) (PivotBetreeSpec.NodeFusion.right__childref b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__parent a@@198) (PivotBetreeSpec.NodeFusion.fused__parent b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.split__parent a@@198) (PivotBetreeSpec.NodeFusion.split__parent b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__child a@@198) (PivotBetreeSpec.NodeFusion.fused__child b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child a@@198) (PivotBetreeSpec.NodeFusion.left__child b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.right__child a@@198) (PivotBetreeSpec.NodeFusion.right__child b@@129))) (= (PivotBetreeSpec.NodeFusion.slot__idx a@@198) (PivotBetreeSpec.NodeFusion.slot__idx b@@129))) (= (PivotBetreeSpec.NodeFusion.num__children__left a@@198) (PivotBetreeSpec.NodeFusion.num__children__left b@@129))) (|Seq#Equal| (PivotBetreeSpec.NodeFusion.pivot a@@198) (PivotBetreeSpec.NodeFusion.pivot b@@129)))) (=> (and (and (and (and (and (and (and (and (and (and (and (= (PivotBetreeSpec.NodeFusion.parentref a@@198) (PivotBetreeSpec.NodeFusion.parentref b@@129)) (= (PivotBetreeSpec.NodeFusion.fused__childref a@@198) (PivotBetreeSpec.NodeFusion.fused__childref b@@129))) (= (PivotBetreeSpec.NodeFusion.left__childref a@@198) (PivotBetreeSpec.NodeFusion.left__childref b@@129))) (= (PivotBetreeSpec.NodeFusion.right__childref a@@198) (PivotBetreeSpec.NodeFusion.right__childref b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__parent a@@198) (PivotBetreeSpec.NodeFusion.fused__parent b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.split__parent a@@198) (PivotBetreeSpec.NodeFusion.split__parent b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__child a@@198) (PivotBetreeSpec.NodeFusion.fused__child b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child a@@198) (PivotBetreeSpec.NodeFusion.left__child b@@129))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.right__child a@@198) (PivotBetreeSpec.NodeFusion.right__child b@@129))) (= (PivotBetreeSpec.NodeFusion.slot__idx a@@198) (PivotBetreeSpec.NodeFusion.slot__idx b@@129))) (= (PivotBetreeSpec.NodeFusion.num__children__left a@@198) (PivotBetreeSpec.NodeFusion.num__children__left b@@129))) (|Seq#Equal| (PivotBetreeSpec.NodeFusion.pivot a@@198) (PivotBetreeSpec.NodeFusion.pivot b@@129))) (|PivotBetreeSpec.NodeFusion#Equal| a@@198 b@@129)))) :qid |unknown.0:0| :skolemid |4429| :pattern ( (|PivotBetreeSpec.NodeFusion#Equal| a@@198 b@@129)) )))
(assert (forall ((a@@199 T@U) (b@@130 T@U) ) (!  (=> (and (= (type a@@199) DatatypeTypeType) (= (type b@@130) DatatypeTypeType)) (and (=> (|PivotBetreeSpec.NodeFusion#Equal| a@@199 b@@130) (= a@@199 b@@130)) (=> (= a@@199 b@@130) (|PivotBetreeSpec.NodeFusion#Equal| a@@199 b@@130)))) :qid |unknown.0:0| :skolemid |4430| :pattern ( (|PivotBetreeSpec.NodeFusion#Equal| a@@199 b@@130)) )))
(assert (forall ((arg0@@627 T@U) (arg1@@345 T@U) (arg2@@236 T@U) ) (! (= (type (|#PivotBetreeSpec.Repivot.Repivot| arg0@@627 arg1@@345 arg2@@236)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.Repivot.Repivot| :pattern ( (|#PivotBetreeSpec.Repivot.Repivot| arg0@@627 arg1@@345 arg2@@236)) )))
(assert (forall ((|a#90#0#0@@0| T@U) (|a#90#1#0@@0| T@U) (|a#90#2#0| T@U) ) (!  (=> (and (and (= (type |a#90#0#0@@0|) BoxType) (= (type |a#90#1#0@@0|) DatatypeTypeType)) (= (type |a#90#2#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#PivotBetreeSpec.Repivot.Repivot| |a#90#0#0@@0| |a#90#1#0@@0| |a#90#2#0|)) |##PivotBetreeSpec.Repivot.Repivot|)) :qid |PivotBet.670:30| :skolemid |4431| :pattern ( (|#PivotBetreeSpec.Repivot.Repivot| |a#90#0#0@@0| |a#90#1#0@@0| |a#90#2#0|)) )))
(assert (forall ((d@@230 T@U) ) (!  (=> (= (type d@@230) DatatypeTypeType) (and (=> (PivotBetreeSpec.Repivot.Repivot_q d@@230) (= (DatatypeCtorId d@@230) |##PivotBetreeSpec.Repivot.Repivot|)) (=> (= (DatatypeCtorId d@@230) |##PivotBetreeSpec.Repivot.Repivot|) (PivotBetreeSpec.Repivot.Repivot_q d@@230)))) :qid |unknown.0:0| :skolemid |4432| :pattern ( (PivotBetreeSpec.Repivot.Repivot_q d@@230)) )))
(assert (forall ((d@@231 T@U) ) (!  (=> (and (= (type d@@231) DatatypeTypeType) (PivotBetreeSpec.Repivot.Repivot_q d@@231)) (exists ((|a#91#0#0@@0| T@U) (|a#91#1#0@@0| T@U) (|a#91#2#0| T@U) ) (!  (and (and (and (= (type |a#91#0#0@@0|) BoxType) (= (type |a#91#1#0@@0|) DatatypeTypeType)) (= (type |a#91#2#0|) (SeqType BoxType))) (= d@@231 (|#PivotBetreeSpec.Repivot.Repivot| |a#91#0#0@@0| |a#91#1#0@@0| |a#91#2#0|))) :qid |PivotBet.670:30| :skolemid |4433| :no-pattern (type |a#91#0#0@@0|) :no-pattern (type |a#91#1#0@@0|) :no-pattern (type |a#91#2#0|) :no-pattern (U_2_int |a#91#0#0@@0|) :no-pattern (U_2_bool |a#91#0#0@@0|) :no-pattern (U_2_int |a#91#1#0@@0|) :no-pattern (U_2_bool |a#91#1#0@@0|) :no-pattern (U_2_int |a#91#2#0|) :no-pattern (U_2_bool |a#91#2#0|) ))) :qid |unknown.0:0| :skolemid |4434| :pattern ( (PivotBetreeSpec.Repivot.Repivot_q d@@231)) )))
(assert (forall ((|a#92#0#0@@0| T@U) (|a#92#1#0@@0| T@U) (|a#92#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#92#0#0@@0|) BoxType) (= (type |a#92#1#0@@0|) DatatypeTypeType)) (= (type |a#92#2#0@@0|) (SeqType BoxType))) (and (=> ($Is (|#PivotBetreeSpec.Repivot.Repivot| |a#92#0#0@@0| |a#92#1#0@@0| |a#92#2#0@@0|) Tclass.PivotBetreeSpec.Repivot) (and (and ($IsBox |a#92#0#0@@0| Tclass.ReferenceType.Reference) ($Is |a#92#1#0@@0| Tclass.PivotBetreeGraph.Node)) ($Is |a#92#2#0@@0| (TSeq Tclass.KeyType.Key)))) (=> (and (and ($IsBox |a#92#0#0@@0| Tclass.ReferenceType.Reference) ($Is |a#92#1#0@@0| Tclass.PivotBetreeGraph.Node)) ($Is |a#92#2#0@@0| (TSeq Tclass.KeyType.Key))) ($Is (|#PivotBetreeSpec.Repivot.Repivot| |a#92#0#0@@0| |a#92#1#0@@0| |a#92#2#0@@0|) Tclass.PivotBetreeSpec.Repivot)))) :qid |PivotBet.670:30| :skolemid |4435| :pattern ( ($Is (|#PivotBetreeSpec.Repivot.Repivot| |a#92#0#0@@0| |a#92#1#0@@0| |a#92#2#0@@0|) Tclass.PivotBetreeSpec.Repivot)) )))
(assert (forall ((|a#93#0#0@@0| T@U) (|a#93#1#0@@0| T@U) (|a#93#2#0@@0| T@U) ($h@@191 T@U) ) (!  (=> (and (and (and (and (= (type |a#93#0#0@@0|) BoxType) (= (type |a#93#1#0@@0|) DatatypeTypeType)) (= (type |a#93#2#0@@0|) (SeqType BoxType))) (= (type $h@@191) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@191)) (and (=> ($IsAlloc (|#PivotBetreeSpec.Repivot.Repivot| |a#93#0#0@@0| |a#93#1#0@@0| |a#93#2#0@@0|) Tclass.PivotBetreeSpec.Repivot $h@@191) (and (and ($IsAllocBox |a#93#0#0@@0| Tclass.ReferenceType.Reference $h@@191) ($IsAlloc |a#93#1#0@@0| Tclass.PivotBetreeGraph.Node $h@@191)) ($IsAlloc |a#93#2#0@@0| (TSeq Tclass.KeyType.Key) $h@@191))) (=> (and (and ($IsAllocBox |a#93#0#0@@0| Tclass.ReferenceType.Reference $h@@191) ($IsAlloc |a#93#1#0@@0| Tclass.PivotBetreeGraph.Node $h@@191)) ($IsAlloc |a#93#2#0@@0| (TSeq Tclass.KeyType.Key) $h@@191)) ($IsAlloc (|#PivotBetreeSpec.Repivot.Repivot| |a#93#0#0@@0| |a#93#1#0@@0| |a#93#2#0@@0|) Tclass.PivotBetreeSpec.Repivot $h@@191)))) :qid |PivotBet.670:30| :skolemid |4436| :pattern ( ($IsAlloc (|#PivotBetreeSpec.Repivot.Repivot| |a#93#0#0@@0| |a#93#1#0@@0| |a#93#2#0@@0|) Tclass.PivotBetreeSpec.Repivot $h@@191)) )))
(assert (forall ((arg0@@628 T@U) ) (! (= (type (PivotBetreeSpec.Repivot.ref arg0@@628)) BoxType) :qid |funType:PivotBetreeSpec.Repivot.ref| :pattern ( (PivotBetreeSpec.Repivot.ref arg0@@628)) )))
(assert (forall ((d@@232 T@U) ($h@@192 T@U) ) (!  (=> (and (and (= (type d@@232) DatatypeTypeType) (= (type $h@@192) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@192) (and (PivotBetreeSpec.Repivot.Repivot_q d@@232) ($IsAlloc d@@232 Tclass.PivotBetreeSpec.Repivot $h@@192)))) ($IsAllocBox (PivotBetreeSpec.Repivot.ref d@@232) Tclass.ReferenceType.Reference $h@@192)) :qid |unknown.0:0| :skolemid |4437| :pattern ( ($IsAllocBox (PivotBetreeSpec.Repivot.ref d@@232) Tclass.ReferenceType.Reference $h@@192)) )))
(assert (forall ((arg0@@629 T@U) ) (! (= (type (PivotBetreeSpec.Repivot.leaf arg0@@629)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.Repivot.leaf| :pattern ( (PivotBetreeSpec.Repivot.leaf arg0@@629)) )))
(assert (forall ((d@@233 T@U) ($h@@193 T@U) ) (!  (=> (and (and (= (type d@@233) DatatypeTypeType) (= (type $h@@193) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@193) (and (PivotBetreeSpec.Repivot.Repivot_q d@@233) ($IsAlloc d@@233 Tclass.PivotBetreeSpec.Repivot $h@@193)))) ($IsAlloc (PivotBetreeSpec.Repivot.leaf d@@233) Tclass.PivotBetreeGraph.Node $h@@193)) :qid |unknown.0:0| :skolemid |4438| :pattern ( ($IsAlloc (PivotBetreeSpec.Repivot.leaf d@@233) Tclass.PivotBetreeGraph.Node $h@@193)) )))
(assert (forall ((arg0@@630 T@U) ) (! (= (type (PivotBetreeSpec.Repivot.pivots arg0@@630)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.Repivot.pivots| :pattern ( (PivotBetreeSpec.Repivot.pivots arg0@@630)) )))
(assert (forall ((d@@234 T@U) ($h@@194 T@U) ) (!  (=> (and (and (= (type d@@234) DatatypeTypeType) (= (type $h@@194) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@194) (and (PivotBetreeSpec.Repivot.Repivot_q d@@234) ($IsAlloc d@@234 Tclass.PivotBetreeSpec.Repivot $h@@194)))) ($IsAlloc (PivotBetreeSpec.Repivot.pivots d@@234) (TSeq Tclass.KeyType.Key) $h@@194)) :qid |unknown.0:0| :skolemid |4439| :pattern ( ($IsAlloc (PivotBetreeSpec.Repivot.pivots d@@234) (TSeq Tclass.KeyType.Key) $h@@194)) )))
(assert (forall ((|a#94#0#0@@0| T@U) (|a#94#1#0@@0| T@U) (|a#94#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#94#0#0@@0|) BoxType) (= (type |a#94#1#0@@0|) DatatypeTypeType)) (= (type |a#94#2#0@@0|) (SeqType BoxType))) (= (|#PivotBetreeSpec.Repivot.Repivot| (Lit |a#94#0#0@@0|) (Lit |a#94#1#0@@0|) (Lit |a#94#2#0@@0|)) (Lit (|#PivotBetreeSpec.Repivot.Repivot| |a#94#0#0@@0| |a#94#1#0@@0| |a#94#2#0@@0|)))) :qid |PivotBet.670:30| :skolemid |4440| :pattern ( (|#PivotBetreeSpec.Repivot.Repivot| (Lit |a#94#0#0@@0|) (Lit |a#94#1#0@@0|) (Lit |a#94#2#0@@0|))) )))
(assert (forall ((|a#95#0#0@@0| T@U) (|a#95#1#0@@0| T@U) (|a#95#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#95#0#0@@0|) BoxType) (= (type |a#95#1#0@@0|) DatatypeTypeType)) (= (type |a#95#2#0@@0|) (SeqType BoxType))) (= (PivotBetreeSpec.Repivot.ref (|#PivotBetreeSpec.Repivot.Repivot| |a#95#0#0@@0| |a#95#1#0@@0| |a#95#2#0@@0|)) |a#95#0#0@@0|)) :qid |PivotBet.670:30| :skolemid |4441| :pattern ( (|#PivotBetreeSpec.Repivot.Repivot| |a#95#0#0@@0| |a#95#1#0@@0| |a#95#2#0@@0|)) )))
(assert (forall ((|a#96#0#0@@0| T@U) (|a#96#1#0@@0| T@U) (|a#96#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#96#0#0@@0|) BoxType) (= (type |a#96#1#0@@0|) DatatypeTypeType)) (= (type |a#96#2#0@@0|) (SeqType BoxType))) (= (PivotBetreeSpec.Repivot.leaf (|#PivotBetreeSpec.Repivot.Repivot| |a#96#0#0@@0| |a#96#1#0@@0| |a#96#2#0@@0|)) |a#96#1#0@@0|)) :qid |PivotBet.670:30| :skolemid |4442| :pattern ( (|#PivotBetreeSpec.Repivot.Repivot| |a#96#0#0@@0| |a#96#1#0@@0| |a#96#2#0@@0|)) )))
(assert (forall ((|a#97#0#0@@0| T@U) (|a#97#1#0@@0| T@U) (|a#97#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#97#0#0@@0|) BoxType) (= (type |a#97#1#0@@0|) DatatypeTypeType)) (= (type |a#97#2#0@@0|) (SeqType BoxType))) (< (DtRank |a#97#1#0@@0|) (DtRank (|#PivotBetreeSpec.Repivot.Repivot| |a#97#0#0@@0| |a#97#1#0@@0| |a#97#2#0@@0|)))) :qid |PivotBet.670:30| :skolemid |4443| :pattern ( (|#PivotBetreeSpec.Repivot.Repivot| |a#97#0#0@@0| |a#97#1#0@@0| |a#97#2#0@@0|)) )))
(assert (forall ((|a#98#0#0@@0| T@U) (|a#98#1#0@@0| T@U) (|a#98#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#98#0#0@@0|) BoxType) (= (type |a#98#1#0@@0|) DatatypeTypeType)) (= (type |a#98#2#0@@0|) (SeqType BoxType))) (= (PivotBetreeSpec.Repivot.pivots (|#PivotBetreeSpec.Repivot.Repivot| |a#98#0#0@@0| |a#98#1#0@@0| |a#98#2#0@@0|)) |a#98#2#0@@0|)) :qid |PivotBet.670:30| :skolemid |4444| :pattern ( (|#PivotBetreeSpec.Repivot.Repivot| |a#98#0#0@@0| |a#98#1#0@@0| |a#98#2#0@@0|)) )))
(assert (forall ((|a#99#0#0@@0| T@U) (|a#99#1#0@@0| T@U) (|a#99#2#0@@0| T@U) (i@@43 Int) ) (!  (=> (and (and (and (= (type |a#99#0#0@@0|) BoxType) (= (type |a#99#1#0@@0|) DatatypeTypeType)) (= (type |a#99#2#0@@0|) (SeqType BoxType))) (and (<= 0 i@@43) (< i@@43 (|Seq#Length| |a#99#2#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#99#2#0@@0| i@@43))) (DtRank (|#PivotBetreeSpec.Repivot.Repivot| |a#99#0#0@@0| |a#99#1#0@@0| |a#99#2#0@@0|)))) :qid |PivotBet.670:30| :skolemid |4445| :pattern ( (|Seq#Index| |a#99#2#0@@0| i@@43) (|#PivotBetreeSpec.Repivot.Repivot| |a#99#0#0@@0| |a#99#1#0@@0| |a#99#2#0@@0|)) )))
(assert (forall ((|a#100#0#0@@0| T@U) (|a#100#1#0@@0| T@U) (|a#100#2#0@@0| T@U) ) (!  (=> (and (and (= (type |a#100#0#0@@0|) BoxType) (= (type |a#100#1#0@@0|) DatatypeTypeType)) (= (type |a#100#2#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#100#2#0@@0|) (DtRank (|#PivotBetreeSpec.Repivot.Repivot| |a#100#0#0@@0| |a#100#1#0@@0| |a#100#2#0@@0|)))) :qid |PivotBet.670:30| :skolemid |4446| :pattern ( (|#PivotBetreeSpec.Repivot.Repivot| |a#100#0#0@@0| |a#100#1#0@@0| |a#100#2#0@@0|)) )))
(assert (forall ((d@@235 T@U) ) (!  (=> (and (= (type d@@235) DatatypeTypeType) (|$IsA#PivotBetreeSpec.Repivot| d@@235)) (PivotBetreeSpec.Repivot.Repivot_q d@@235)) :qid |unknown.0:0| :skolemid |4447| :pattern ( (|$IsA#PivotBetreeSpec.Repivot| d@@235)) )))
(assert (forall ((d@@236 T@U) ) (!  (=> (and (= (type d@@236) DatatypeTypeType) ($Is d@@236 Tclass.PivotBetreeSpec.Repivot)) (PivotBetreeSpec.Repivot.Repivot_q d@@236)) :qid |unknown.0:0| :skolemid |4448| :pattern ( (PivotBetreeSpec.Repivot.Repivot_q d@@236) ($Is d@@236 Tclass.PivotBetreeSpec.Repivot)) )))
(assert (forall ((a@@200 T@U) (b@@131 T@U) ) (!  (=> (and (and (= (type a@@200) DatatypeTypeType) (= (type b@@131) DatatypeTypeType)) true) (and (=> (|PivotBetreeSpec.Repivot#Equal| a@@200 b@@131) (and (and (= (PivotBetreeSpec.Repivot.ref a@@200) (PivotBetreeSpec.Repivot.ref b@@131)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.Repivot.leaf a@@200) (PivotBetreeSpec.Repivot.leaf b@@131))) (|Seq#Equal| (PivotBetreeSpec.Repivot.pivots a@@200) (PivotBetreeSpec.Repivot.pivots b@@131)))) (=> (and (and (= (PivotBetreeSpec.Repivot.ref a@@200) (PivotBetreeSpec.Repivot.ref b@@131)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.Repivot.leaf a@@200) (PivotBetreeSpec.Repivot.leaf b@@131))) (|Seq#Equal| (PivotBetreeSpec.Repivot.pivots a@@200) (PivotBetreeSpec.Repivot.pivots b@@131))) (|PivotBetreeSpec.Repivot#Equal| a@@200 b@@131)))) :qid |unknown.0:0| :skolemid |4449| :pattern ( (|PivotBetreeSpec.Repivot#Equal| a@@200 b@@131)) )))
(assert (forall ((a@@201 T@U) (b@@132 T@U) ) (!  (=> (and (= (type a@@201) DatatypeTypeType) (= (type b@@132) DatatypeTypeType)) (and (=> (|PivotBetreeSpec.Repivot#Equal| a@@201 b@@132) (= a@@201 b@@132)) (=> (= a@@201 b@@132) (|PivotBetreeSpec.Repivot#Equal| a@@201 b@@132)))) :qid |unknown.0:0| :skolemid |4450| :pattern ( (|PivotBetreeSpec.Repivot#Equal| a@@201 b@@132)) )))
(assert (forall ((arg0@@631 T@U) ) (! (= (type (|#PivotBetreeSpec.BetreeStep.BetreeQuery| arg0@@631)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.BetreeStep.BetreeQuery| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeQuery| arg0@@631)) )))
(assert (forall ((|a#101#0#0@@0| T@U) ) (!  (=> (= (type |a#101#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#101#0#0@@0|)) |##PivotBetreeSpec.BetreeStep.BetreeQuery|)) :qid |PivotBet.707:19| :skolemid |4451| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#101#0#0@@0|)) )))
(assert (forall ((d@@237 T@U) ) (!  (=> (= (type d@@237) DatatypeTypeType) (and (=> (PivotBetreeSpec.BetreeStep.BetreeQuery_q d@@237) (= (DatatypeCtorId d@@237) |##PivotBetreeSpec.BetreeStep.BetreeQuery|)) (=> (= (DatatypeCtorId d@@237) |##PivotBetreeSpec.BetreeStep.BetreeQuery|) (PivotBetreeSpec.BetreeStep.BetreeQuery_q d@@237)))) :qid |unknown.0:0| :skolemid |4452| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeQuery_q d@@237)) )))
(assert (forall ((d@@238 T@U) ) (!  (=> (and (= (type d@@238) DatatypeTypeType) (PivotBetreeSpec.BetreeStep.BetreeQuery_q d@@238)) (exists ((|a#102#0#0@@0| T@U) ) (!  (and (= (type |a#102#0#0@@0|) DatatypeTypeType) (= d@@238 (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#102#0#0@@0|))) :qid |PivotBet.707:19| :skolemid |4453| :no-pattern (type |a#102#0#0@@0|) :no-pattern (U_2_int |a#102#0#0@@0|) :no-pattern (U_2_bool |a#102#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |4454| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeQuery_q d@@238)) )))
(assert (forall ((|a#103#0#0@@0| T@U) ) (!  (=> (= (type |a#103#0#0@@0|) DatatypeTypeType) (and (=> ($Is (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#103#0#0@@0|) Tclass.PivotBetreeSpec.BetreeStep) ($Is |a#103#0#0@@0| Tclass.PivotBetreeSpec.LookupQuery)) (=> ($Is |a#103#0#0@@0| Tclass.PivotBetreeSpec.LookupQuery) ($Is (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#103#0#0@@0|) Tclass.PivotBetreeSpec.BetreeStep)))) :qid |PivotBet.707:19| :skolemid |4455| :pattern ( ($Is (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#103#0#0@@0|) Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (forall ((|a#104#0#0| T@U) ($h@@195 T@U) ) (!  (=> (and (and (= (type |a#104#0#0|) DatatypeTypeType) (= (type $h@@195) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@195)) (and (=> ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#104#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@195) ($IsAlloc |a#104#0#0| Tclass.PivotBetreeSpec.LookupQuery $h@@195)) (=> ($IsAlloc |a#104#0#0| Tclass.PivotBetreeSpec.LookupQuery $h@@195) ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#104#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@195)))) :qid |PivotBet.707:19| :skolemid |4456| :pattern ( ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#104#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@195)) )))
(assert (forall ((arg0@@632 T@U) ) (! (= (type (PivotBetreeSpec.BetreeStep.q arg0@@632)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.BetreeStep.q| :pattern ( (PivotBetreeSpec.BetreeStep.q arg0@@632)) )))
(assert (forall ((d@@239 T@U) ($h@@196 T@U) ) (!  (=> (and (and (= (type d@@239) DatatypeTypeType) (= (type $h@@196) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@196) (and (PivotBetreeSpec.BetreeStep.BetreeQuery_q d@@239) ($IsAlloc d@@239 Tclass.PivotBetreeSpec.BetreeStep $h@@196)))) ($IsAlloc (PivotBetreeSpec.BetreeStep.q d@@239) Tclass.PivotBetreeSpec.LookupQuery $h@@196)) :qid |unknown.0:0| :skolemid |4457| :pattern ( ($IsAlloc (PivotBetreeSpec.BetreeStep.q d@@239) Tclass.PivotBetreeSpec.LookupQuery $h@@196)) )))
(assert (forall ((|a#105#0#0| T@U) ) (!  (=> (= (type |a#105#0#0|) DatatypeTypeType) (= (|#PivotBetreeSpec.BetreeStep.BetreeQuery| (Lit |a#105#0#0|)) (Lit (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#105#0#0|)))) :qid |PivotBet.707:19| :skolemid |4458| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeQuery| (Lit |a#105#0#0|))) )))
(assert (forall ((|a#106#0#0| T@U) ) (!  (=> (= (type |a#106#0#0|) DatatypeTypeType) (= (PivotBetreeSpec.BetreeStep.q (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#106#0#0|)) |a#106#0#0|)) :qid |PivotBet.707:19| :skolemid |4459| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#106#0#0|)) )))
(assert (forall ((|a#107#0#0| T@U) ) (!  (=> (= (type |a#107#0#0|) DatatypeTypeType) (< (DtRank |a#107#0#0|) (DtRank (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#107#0#0|)))) :qid |PivotBet.707:19| :skolemid |4460| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeQuery| |a#107#0#0|)) )))
(assert (forall ((arg0@@633 T@U) ) (! (= (type (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| arg0@@633)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| arg0@@633)) )))
(assert (forall ((|a#108#0#0| T@U) ) (!  (=> (= (type |a#108#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#108#0#0|)) |##PivotBetreeSpec.BetreeStep.BetreeSuccQuery|)) :qid |PivotBet.708:23| :skolemid |4461| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#108#0#0|)) )))
(assert (forall ((d@@240 T@U) ) (!  (=> (= (type d@@240) DatatypeTypeType) (and (=> (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q d@@240) (= (DatatypeCtorId d@@240) |##PivotBetreeSpec.BetreeStep.BetreeSuccQuery|)) (=> (= (DatatypeCtorId d@@240) |##PivotBetreeSpec.BetreeStep.BetreeSuccQuery|) (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q d@@240)))) :qid |unknown.0:0| :skolemid |4462| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q d@@240)) )))
(assert (forall ((d@@241 T@U) ) (!  (=> (and (= (type d@@241) DatatypeTypeType) (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q d@@241)) (exists ((|a#109#0#0| T@U) ) (!  (and (= (type |a#109#0#0|) DatatypeTypeType) (= d@@241 (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#109#0#0|))) :qid |PivotBet.708:23| :skolemid |4463| :no-pattern (type |a#109#0#0|) :no-pattern (U_2_int |a#109#0#0|) :no-pattern (U_2_bool |a#109#0#0|) ))) :qid |unknown.0:0| :skolemid |4464| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q d@@241)) )))
(assert (forall ((|a#110#0#0| T@U) ) (!  (=> (= (type |a#110#0#0|) DatatypeTypeType) (and (=> ($Is (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#110#0#0|) Tclass.PivotBetreeSpec.BetreeStep) ($Is |a#110#0#0| Tclass.PivotBetreeSpec.SuccQuery)) (=> ($Is |a#110#0#0| Tclass.PivotBetreeSpec.SuccQuery) ($Is (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#110#0#0|) Tclass.PivotBetreeSpec.BetreeStep)))) :qid |PivotBet.708:23| :skolemid |4465| :pattern ( ($Is (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#110#0#0|) Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (forall ((|a#111#0#0| T@U) ($h@@197 T@U) ) (!  (=> (and (and (= (type |a#111#0#0|) DatatypeTypeType) (= (type $h@@197) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@197)) (and (=> ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#111#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@197) ($IsAlloc |a#111#0#0| Tclass.PivotBetreeSpec.SuccQuery $h@@197)) (=> ($IsAlloc |a#111#0#0| Tclass.PivotBetreeSpec.SuccQuery $h@@197) ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#111#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@197)))) :qid |PivotBet.708:23| :skolemid |4466| :pattern ( ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#111#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@197)) )))
(assert (forall ((arg0@@634 T@U) ) (! (= (type (PivotBetreeSpec.BetreeStep.sq arg0@@634)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.BetreeStep.sq| :pattern ( (PivotBetreeSpec.BetreeStep.sq arg0@@634)) )))
(assert (forall ((d@@242 T@U) ($h@@198 T@U) ) (!  (=> (and (and (= (type d@@242) DatatypeTypeType) (= (type $h@@198) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@198) (and (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q d@@242) ($IsAlloc d@@242 Tclass.PivotBetreeSpec.BetreeStep $h@@198)))) ($IsAlloc (PivotBetreeSpec.BetreeStep.sq d@@242) Tclass.PivotBetreeSpec.SuccQuery $h@@198)) :qid |unknown.0:0| :skolemid |4467| :pattern ( ($IsAlloc (PivotBetreeSpec.BetreeStep.sq d@@242) Tclass.PivotBetreeSpec.SuccQuery $h@@198)) )))
(assert (forall ((|a#112#0#0| T@U) ) (!  (=> (= (type |a#112#0#0|) DatatypeTypeType) (= (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| (Lit |a#112#0#0|)) (Lit (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#112#0#0|)))) :qid |PivotBet.708:23| :skolemid |4468| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| (Lit |a#112#0#0|))) )))
(assert (forall ((|a#113#0#0| T@U) ) (!  (=> (= (type |a#113#0#0|) DatatypeTypeType) (= (PivotBetreeSpec.BetreeStep.sq (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#113#0#0|)) |a#113#0#0|)) :qid |PivotBet.708:23| :skolemid |4469| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#113#0#0|)) )))
(assert (forall ((|a#114#0#0| T@U) ) (!  (=> (= (type |a#114#0#0|) DatatypeTypeType) (< (DtRank |a#114#0#0|) (DtRank (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#114#0#0|)))) :qid |PivotBet.708:23| :skolemid |4470| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSuccQuery| |a#114#0#0|)) )))
(assert (forall ((arg0@@635 T@U) ) (! (= (type (|#PivotBetreeSpec.BetreeStep.BetreeInsert| arg0@@635)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.BetreeStep.BetreeInsert| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeInsert| arg0@@635)) )))
(assert (forall ((|a#115#0#0| T@U) ) (!  (=> (= (type |a#115#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#115#0#0|)) |##PivotBetreeSpec.BetreeStep.BetreeInsert|)) :qid |PivotBet.709:20| :skolemid |4471| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#115#0#0|)) )))
(assert (forall ((d@@243 T@U) ) (!  (=> (= (type d@@243) DatatypeTypeType) (and (=> (PivotBetreeSpec.BetreeStep.BetreeInsert_q d@@243) (= (DatatypeCtorId d@@243) |##PivotBetreeSpec.BetreeStep.BetreeInsert|)) (=> (= (DatatypeCtorId d@@243) |##PivotBetreeSpec.BetreeStep.BetreeInsert|) (PivotBetreeSpec.BetreeStep.BetreeInsert_q d@@243)))) :qid |unknown.0:0| :skolemid |4472| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeInsert_q d@@243)) )))
(assert (forall ((d@@244 T@U) ) (!  (=> (and (= (type d@@244) DatatypeTypeType) (PivotBetreeSpec.BetreeStep.BetreeInsert_q d@@244)) (exists ((|a#116#0#0| T@U) ) (!  (and (= (type |a#116#0#0|) DatatypeTypeType) (= d@@244 (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#116#0#0|))) :qid |PivotBet.709:20| :skolemid |4473| :no-pattern (type |a#116#0#0|) :no-pattern (U_2_int |a#116#0#0|) :no-pattern (U_2_bool |a#116#0#0|) ))) :qid |unknown.0:0| :skolemid |4474| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeInsert_q d@@244)) )))
(assert (forall ((|a#117#0#0| T@U) ) (!  (=> (= (type |a#117#0#0|) DatatypeTypeType) (and (=> ($Is (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#117#0#0|) Tclass.PivotBetreeSpec.BetreeStep) ($Is |a#117#0#0| Tclass.PivotBetreeSpec.MessageInsertion)) (=> ($Is |a#117#0#0| Tclass.PivotBetreeSpec.MessageInsertion) ($Is (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#117#0#0|) Tclass.PivotBetreeSpec.BetreeStep)))) :qid |PivotBet.709:20| :skolemid |4475| :pattern ( ($Is (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#117#0#0|) Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (forall ((|a#118#0#0| T@U) ($h@@199 T@U) ) (!  (=> (and (and (= (type |a#118#0#0|) DatatypeTypeType) (= (type $h@@199) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@199)) (and (=> ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#118#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@199) ($IsAlloc |a#118#0#0| Tclass.PivotBetreeSpec.MessageInsertion $h@@199)) (=> ($IsAlloc |a#118#0#0| Tclass.PivotBetreeSpec.MessageInsertion $h@@199) ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#118#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@199)))) :qid |PivotBet.709:20| :skolemid |4476| :pattern ( ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#118#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@199)) )))
(assert (forall ((arg0@@636 T@U) ) (! (= (type (PivotBetreeSpec.BetreeStep.ins arg0@@636)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.BetreeStep.ins| :pattern ( (PivotBetreeSpec.BetreeStep.ins arg0@@636)) )))
(assert (forall ((d@@245 T@U) ($h@@200 T@U) ) (!  (=> (and (and (= (type d@@245) DatatypeTypeType) (= (type $h@@200) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@200) (and (PivotBetreeSpec.BetreeStep.BetreeInsert_q d@@245) ($IsAlloc d@@245 Tclass.PivotBetreeSpec.BetreeStep $h@@200)))) ($IsAlloc (PivotBetreeSpec.BetreeStep.ins d@@245) Tclass.PivotBetreeSpec.MessageInsertion $h@@200)) :qid |unknown.0:0| :skolemid |4477| :pattern ( ($IsAlloc (PivotBetreeSpec.BetreeStep.ins d@@245) Tclass.PivotBetreeSpec.MessageInsertion $h@@200)) )))
(assert (forall ((|a#119#0#0| T@U) ) (!  (=> (= (type |a#119#0#0|) DatatypeTypeType) (= (|#PivotBetreeSpec.BetreeStep.BetreeInsert| (Lit |a#119#0#0|)) (Lit (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#119#0#0|)))) :qid |PivotBet.709:20| :skolemid |4478| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeInsert| (Lit |a#119#0#0|))) )))
(assert (forall ((|a#120#0#0| T@U) ) (!  (=> (= (type |a#120#0#0|) DatatypeTypeType) (= (PivotBetreeSpec.BetreeStep.ins (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#120#0#0|)) |a#120#0#0|)) :qid |PivotBet.709:20| :skolemid |4479| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#120#0#0|)) )))
(assert (forall ((|a#121#0#0| T@U) ) (!  (=> (= (type |a#121#0#0|) DatatypeTypeType) (< (DtRank |a#121#0#0|) (DtRank (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#121#0#0|)))) :qid |PivotBet.709:20| :skolemid |4480| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeInsert| |a#121#0#0|)) )))
(assert (forall ((arg0@@637 T@U) ) (! (= (type (|#PivotBetreeSpec.BetreeStep.BetreeFlush| arg0@@637)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.BetreeStep.BetreeFlush| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeFlush| arg0@@637)) )))
(assert (forall ((|a#122#0#0| T@U) ) (!  (=> (= (type |a#122#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#122#0#0|)) |##PivotBetreeSpec.BetreeStep.BetreeFlush|)) :qid |PivotBet.710:19| :skolemid |4481| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#122#0#0|)) )))
(assert (forall ((d@@246 T@U) ) (!  (=> (= (type d@@246) DatatypeTypeType) (and (=> (PivotBetreeSpec.BetreeStep.BetreeFlush_q d@@246) (= (DatatypeCtorId d@@246) |##PivotBetreeSpec.BetreeStep.BetreeFlush|)) (=> (= (DatatypeCtorId d@@246) |##PivotBetreeSpec.BetreeStep.BetreeFlush|) (PivotBetreeSpec.BetreeStep.BetreeFlush_q d@@246)))) :qid |unknown.0:0| :skolemid |4482| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeFlush_q d@@246)) )))
(assert (forall ((d@@247 T@U) ) (!  (=> (and (= (type d@@247) DatatypeTypeType) (PivotBetreeSpec.BetreeStep.BetreeFlush_q d@@247)) (exists ((|a#123#0#0| T@U) ) (!  (and (= (type |a#123#0#0|) DatatypeTypeType) (= d@@247 (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#123#0#0|))) :qid |PivotBet.710:19| :skolemid |4483| :no-pattern (type |a#123#0#0|) :no-pattern (U_2_int |a#123#0#0|) :no-pattern (U_2_bool |a#123#0#0|) ))) :qid |unknown.0:0| :skolemid |4484| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeFlush_q d@@247)) )))
(assert (forall ((|a#124#0#0| T@U) ) (!  (=> (= (type |a#124#0#0|) DatatypeTypeType) (and (=> ($Is (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#124#0#0|) Tclass.PivotBetreeSpec.BetreeStep) ($Is |a#124#0#0| Tclass.PivotBetreeSpec.NodeFlush)) (=> ($Is |a#124#0#0| Tclass.PivotBetreeSpec.NodeFlush) ($Is (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#124#0#0|) Tclass.PivotBetreeSpec.BetreeStep)))) :qid |PivotBet.710:19| :skolemid |4485| :pattern ( ($Is (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#124#0#0|) Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (forall ((|a#125#0#0| T@U) ($h@@201 T@U) ) (!  (=> (and (and (= (type |a#125#0#0|) DatatypeTypeType) (= (type $h@@201) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@201)) (and (=> ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#125#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@201) ($IsAlloc |a#125#0#0| Tclass.PivotBetreeSpec.NodeFlush $h@@201)) (=> ($IsAlloc |a#125#0#0| Tclass.PivotBetreeSpec.NodeFlush $h@@201) ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#125#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@201)))) :qid |PivotBet.710:19| :skolemid |4486| :pattern ( ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#125#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@201)) )))
(assert (forall ((arg0@@638 T@U) ) (! (= (type (PivotBetreeSpec.BetreeStep.flush arg0@@638)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.BetreeStep.flush| :pattern ( (PivotBetreeSpec.BetreeStep.flush arg0@@638)) )))
(assert (forall ((d@@248 T@U) ($h@@202 T@U) ) (!  (=> (and (and (= (type d@@248) DatatypeTypeType) (= (type $h@@202) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@202) (and (PivotBetreeSpec.BetreeStep.BetreeFlush_q d@@248) ($IsAlloc d@@248 Tclass.PivotBetreeSpec.BetreeStep $h@@202)))) ($IsAlloc (PivotBetreeSpec.BetreeStep.flush d@@248) Tclass.PivotBetreeSpec.NodeFlush $h@@202)) :qid |unknown.0:0| :skolemid |4487| :pattern ( ($IsAlloc (PivotBetreeSpec.BetreeStep.flush d@@248) Tclass.PivotBetreeSpec.NodeFlush $h@@202)) )))
(assert (forall ((|a#126#0#0| T@U) ) (!  (=> (= (type |a#126#0#0|) DatatypeTypeType) (= (|#PivotBetreeSpec.BetreeStep.BetreeFlush| (Lit |a#126#0#0|)) (Lit (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#126#0#0|)))) :qid |PivotBet.710:19| :skolemid |4488| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeFlush| (Lit |a#126#0#0|))) )))
(assert (forall ((|a#127#0#0| T@U) ) (!  (=> (= (type |a#127#0#0|) DatatypeTypeType) (= (PivotBetreeSpec.BetreeStep.flush (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#127#0#0|)) |a#127#0#0|)) :qid |PivotBet.710:19| :skolemid |4489| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#127#0#0|)) )))
(assert (forall ((|a#128#0#0| T@U) ) (!  (=> (= (type |a#128#0#0|) DatatypeTypeType) (< (DtRank |a#128#0#0|) (DtRank (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#128#0#0|)))) :qid |PivotBet.710:19| :skolemid |4490| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeFlush| |a#128#0#0|)) )))
(assert (forall ((arg0@@639 T@U) ) (! (= (type (|#PivotBetreeSpec.BetreeStep.BetreeGrow| arg0@@639)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.BetreeStep.BetreeGrow| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeGrow| arg0@@639)) )))
(assert (forall ((|a#129#0#0| T@U) ) (!  (=> (= (type |a#129#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#129#0#0|)) |##PivotBetreeSpec.BetreeStep.BetreeGrow|)) :qid |PivotBet.711:18| :skolemid |4491| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#129#0#0|)) )))
(assert (forall ((d@@249 T@U) ) (!  (=> (= (type d@@249) DatatypeTypeType) (and (=> (PivotBetreeSpec.BetreeStep.BetreeGrow_q d@@249) (= (DatatypeCtorId d@@249) |##PivotBetreeSpec.BetreeStep.BetreeGrow|)) (=> (= (DatatypeCtorId d@@249) |##PivotBetreeSpec.BetreeStep.BetreeGrow|) (PivotBetreeSpec.BetreeStep.BetreeGrow_q d@@249)))) :qid |unknown.0:0| :skolemid |4492| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeGrow_q d@@249)) )))
(assert (forall ((d@@250 T@U) ) (!  (=> (and (= (type d@@250) DatatypeTypeType) (PivotBetreeSpec.BetreeStep.BetreeGrow_q d@@250)) (exists ((|a#130#0#0| T@U) ) (!  (and (= (type |a#130#0#0|) DatatypeTypeType) (= d@@250 (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#130#0#0|))) :qid |PivotBet.711:18| :skolemid |4493| :no-pattern (type |a#130#0#0|) :no-pattern (U_2_int |a#130#0#0|) :no-pattern (U_2_bool |a#130#0#0|) ))) :qid |unknown.0:0| :skolemid |4494| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeGrow_q d@@250)) )))
(assert (forall ((|a#131#0#0| T@U) ) (!  (=> (= (type |a#131#0#0|) DatatypeTypeType) (and (=> ($Is (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#131#0#0|) Tclass.PivotBetreeSpec.BetreeStep) ($Is |a#131#0#0| Tclass.PivotBetreeSpec.RootGrowth)) (=> ($Is |a#131#0#0| Tclass.PivotBetreeSpec.RootGrowth) ($Is (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#131#0#0|) Tclass.PivotBetreeSpec.BetreeStep)))) :qid |PivotBet.711:18| :skolemid |4495| :pattern ( ($Is (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#131#0#0|) Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (forall ((|a#132#0#0| T@U) ($h@@203 T@U) ) (!  (=> (and (and (= (type |a#132#0#0|) DatatypeTypeType) (= (type $h@@203) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@203)) (and (=> ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#132#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@203) ($IsAlloc |a#132#0#0| Tclass.PivotBetreeSpec.RootGrowth $h@@203)) (=> ($IsAlloc |a#132#0#0| Tclass.PivotBetreeSpec.RootGrowth $h@@203) ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#132#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@203)))) :qid |PivotBet.711:18| :skolemid |4496| :pattern ( ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#132#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@203)) )))
(assert (forall ((arg0@@640 T@U) ) (! (= (type (PivotBetreeSpec.BetreeStep.growth arg0@@640)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.BetreeStep.growth| :pattern ( (PivotBetreeSpec.BetreeStep.growth arg0@@640)) )))
(assert (forall ((d@@251 T@U) ($h@@204 T@U) ) (!  (=> (and (and (= (type d@@251) DatatypeTypeType) (= (type $h@@204) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@204) (and (PivotBetreeSpec.BetreeStep.BetreeGrow_q d@@251) ($IsAlloc d@@251 Tclass.PivotBetreeSpec.BetreeStep $h@@204)))) ($IsAlloc (PivotBetreeSpec.BetreeStep.growth d@@251) Tclass.PivotBetreeSpec.RootGrowth $h@@204)) :qid |unknown.0:0| :skolemid |4497| :pattern ( ($IsAlloc (PivotBetreeSpec.BetreeStep.growth d@@251) Tclass.PivotBetreeSpec.RootGrowth $h@@204)) )))
(assert (forall ((|a#133#0#0| T@U) ) (!  (=> (= (type |a#133#0#0|) DatatypeTypeType) (= (|#PivotBetreeSpec.BetreeStep.BetreeGrow| (Lit |a#133#0#0|)) (Lit (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#133#0#0|)))) :qid |PivotBet.711:18| :skolemid |4498| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeGrow| (Lit |a#133#0#0|))) )))
(assert (forall ((|a#134#0#0| T@U) ) (!  (=> (= (type |a#134#0#0|) DatatypeTypeType) (= (PivotBetreeSpec.BetreeStep.growth (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#134#0#0|)) |a#134#0#0|)) :qid |PivotBet.711:18| :skolemid |4499| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#134#0#0|)) )))
(assert (forall ((|a#135#0#0| T@U) ) (!  (=> (= (type |a#135#0#0|) DatatypeTypeType) (< (DtRank |a#135#0#0|) (DtRank (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#135#0#0|)))) :qid |PivotBet.711:18| :skolemid |4500| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeGrow| |a#135#0#0|)) )))
(assert (forall ((arg0@@641 T@U) ) (! (= (type (|#PivotBetreeSpec.BetreeStep.BetreeSplit| arg0@@641)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.BetreeStep.BetreeSplit| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSplit| arg0@@641)) )))
(assert (forall ((|a#136#0#0| T@U) ) (!  (=> (= (type |a#136#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#136#0#0|)) |##PivotBetreeSpec.BetreeStep.BetreeSplit|)) :qid |PivotBet.712:19| :skolemid |4501| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#136#0#0|)) )))
(assert (forall ((d@@252 T@U) ) (!  (=> (= (type d@@252) DatatypeTypeType) (and (=> (PivotBetreeSpec.BetreeStep.BetreeSplit_q d@@252) (= (DatatypeCtorId d@@252) |##PivotBetreeSpec.BetreeStep.BetreeSplit|)) (=> (= (DatatypeCtorId d@@252) |##PivotBetreeSpec.BetreeStep.BetreeSplit|) (PivotBetreeSpec.BetreeStep.BetreeSplit_q d@@252)))) :qid |unknown.0:0| :skolemid |4502| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeSplit_q d@@252)) )))
(assert (forall ((d@@253 T@U) ) (!  (=> (and (= (type d@@253) DatatypeTypeType) (PivotBetreeSpec.BetreeStep.BetreeSplit_q d@@253)) (exists ((|a#137#0#0| T@U) ) (!  (and (= (type |a#137#0#0|) DatatypeTypeType) (= d@@253 (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#137#0#0|))) :qid |PivotBet.712:19| :skolemid |4503| :no-pattern (type |a#137#0#0|) :no-pattern (U_2_int |a#137#0#0|) :no-pattern (U_2_bool |a#137#0#0|) ))) :qid |unknown.0:0| :skolemid |4504| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeSplit_q d@@253)) )))
(assert (forall ((|a#138#0#0| T@U) ) (!  (=> (= (type |a#138#0#0|) DatatypeTypeType) (and (=> ($Is (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#138#0#0|) Tclass.PivotBetreeSpec.BetreeStep) ($Is |a#138#0#0| Tclass.PivotBetreeSpec.NodeFusion)) (=> ($Is |a#138#0#0| Tclass.PivotBetreeSpec.NodeFusion) ($Is (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#138#0#0|) Tclass.PivotBetreeSpec.BetreeStep)))) :qid |PivotBet.712:19| :skolemid |4505| :pattern ( ($Is (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#138#0#0|) Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (forall ((|a#139#0#0| T@U) ($h@@205 T@U) ) (!  (=> (and (and (= (type |a#139#0#0|) DatatypeTypeType) (= (type $h@@205) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@205)) (and (=> ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#139#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@205) ($IsAlloc |a#139#0#0| Tclass.PivotBetreeSpec.NodeFusion $h@@205)) (=> ($IsAlloc |a#139#0#0| Tclass.PivotBetreeSpec.NodeFusion $h@@205) ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#139#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@205)))) :qid |PivotBet.712:19| :skolemid |4506| :pattern ( ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#139#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@205)) )))
(assert (forall ((arg0@@642 T@U) ) (! (= (type (PivotBetreeSpec.BetreeStep.fusion arg0@@642)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.BetreeStep.fusion| :pattern ( (PivotBetreeSpec.BetreeStep.fusion arg0@@642)) )))
(assert (forall ((d@@254 T@U) ($h@@206 T@U) ) (!  (=> (and (and (= (type d@@254) DatatypeTypeType) (= (type $h@@206) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@206) (and (PivotBetreeSpec.BetreeStep.BetreeSplit_q d@@254) ($IsAlloc d@@254 Tclass.PivotBetreeSpec.BetreeStep $h@@206)))) ($IsAlloc (PivotBetreeSpec.BetreeStep.fusion d@@254) Tclass.PivotBetreeSpec.NodeFusion $h@@206)) :qid |unknown.0:0| :skolemid |4507| :pattern ( ($IsAlloc (PivotBetreeSpec.BetreeStep.fusion d@@254) Tclass.PivotBetreeSpec.NodeFusion $h@@206)) )))
(assert (forall ((|a#140#0#0| T@U) ) (!  (=> (= (type |a#140#0#0|) DatatypeTypeType) (= (|#PivotBetreeSpec.BetreeStep.BetreeSplit| (Lit |a#140#0#0|)) (Lit (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#140#0#0|)))) :qid |PivotBet.712:19| :skolemid |4508| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSplit| (Lit |a#140#0#0|))) )))
(assert (forall ((|a#141#0#0| T@U) ) (!  (=> (= (type |a#141#0#0|) DatatypeTypeType) (= (PivotBetreeSpec.BetreeStep.fusion (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#141#0#0|)) |a#141#0#0|)) :qid |PivotBet.712:19| :skolemid |4509| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#141#0#0|)) )))
(assert (forall ((|a#142#0#0| T@U) ) (!  (=> (= (type |a#142#0#0|) DatatypeTypeType) (< (DtRank |a#142#0#0|) (DtRank (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#142#0#0|)))) :qid |PivotBet.712:19| :skolemid |4510| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeSplit| |a#142#0#0|)) )))
(assert (forall ((arg0@@643 T@U) ) (! (= (type (|#PivotBetreeSpec.BetreeStep.BetreeMerge| arg0@@643)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.BetreeStep.BetreeMerge| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeMerge| arg0@@643)) )))
(assert (forall ((|a#143#0#0| T@U) ) (!  (=> (= (type |a#143#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#143#0#0|)) |##PivotBetreeSpec.BetreeStep.BetreeMerge|)) :qid |PivotBet.713:19| :skolemid |4511| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#143#0#0|)) )))
(assert (forall ((d@@255 T@U) ) (!  (=> (= (type d@@255) DatatypeTypeType) (and (=> (PivotBetreeSpec.BetreeStep.BetreeMerge_q d@@255) (= (DatatypeCtorId d@@255) |##PivotBetreeSpec.BetreeStep.BetreeMerge|)) (=> (= (DatatypeCtorId d@@255) |##PivotBetreeSpec.BetreeStep.BetreeMerge|) (PivotBetreeSpec.BetreeStep.BetreeMerge_q d@@255)))) :qid |unknown.0:0| :skolemid |4512| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeMerge_q d@@255)) )))
(assert (forall ((d@@256 T@U) ) (!  (=> (and (= (type d@@256) DatatypeTypeType) (PivotBetreeSpec.BetreeStep.BetreeMerge_q d@@256)) (exists ((|a#144#0#0| T@U) ) (!  (and (= (type |a#144#0#0|) DatatypeTypeType) (= d@@256 (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#144#0#0|))) :qid |PivotBet.713:19| :skolemid |4513| :no-pattern (type |a#144#0#0|) :no-pattern (U_2_int |a#144#0#0|) :no-pattern (U_2_bool |a#144#0#0|) ))) :qid |unknown.0:0| :skolemid |4514| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeMerge_q d@@256)) )))
(assert (forall ((|a#145#0#0| T@U) ) (!  (=> (= (type |a#145#0#0|) DatatypeTypeType) (and (=> ($Is (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#145#0#0|) Tclass.PivotBetreeSpec.BetreeStep) ($Is |a#145#0#0| Tclass.PivotBetreeSpec.NodeFusion)) (=> ($Is |a#145#0#0| Tclass.PivotBetreeSpec.NodeFusion) ($Is (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#145#0#0|) Tclass.PivotBetreeSpec.BetreeStep)))) :qid |PivotBet.713:19| :skolemid |4515| :pattern ( ($Is (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#145#0#0|) Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (forall ((|a#146#0#0| T@U) ($h@@207 T@U) ) (!  (=> (and (and (= (type |a#146#0#0|) DatatypeTypeType) (= (type $h@@207) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@207)) (and (=> ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#146#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@207) ($IsAlloc |a#146#0#0| Tclass.PivotBetreeSpec.NodeFusion $h@@207)) (=> ($IsAlloc |a#146#0#0| Tclass.PivotBetreeSpec.NodeFusion $h@@207) ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#146#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@207)))) :qid |PivotBet.713:19| :skolemid |4516| :pattern ( ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#146#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@207)) )))
(assert (forall ((d@@257 T@U) ($h@@208 T@U) ) (!  (=> (and (and (= (type d@@257) DatatypeTypeType) (= (type $h@@208) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@208) (and (PivotBetreeSpec.BetreeStep.BetreeMerge_q d@@257) ($IsAlloc d@@257 Tclass.PivotBetreeSpec.BetreeStep $h@@208)))) ($IsAlloc (PivotBetreeSpec.BetreeStep.fusion d@@257) Tclass.PivotBetreeSpec.NodeFusion $h@@208)) :qid |unknown.0:0| :skolemid |4517| :pattern ( ($IsAlloc (PivotBetreeSpec.BetreeStep.fusion d@@257) Tclass.PivotBetreeSpec.NodeFusion $h@@208)) )))
(assert (forall ((|a#147#0#0| T@U) ) (!  (=> (= (type |a#147#0#0|) DatatypeTypeType) (= (|#PivotBetreeSpec.BetreeStep.BetreeMerge| (Lit |a#147#0#0|)) (Lit (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#147#0#0|)))) :qid |PivotBet.713:19| :skolemid |4518| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeMerge| (Lit |a#147#0#0|))) )))
(assert (forall ((|a#148#0#0| T@U) ) (!  (=> (= (type |a#148#0#0|) DatatypeTypeType) (= (PivotBetreeSpec.BetreeStep.fusion (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#148#0#0|)) |a#148#0#0|)) :qid |PivotBet.713:19| :skolemid |4519| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#148#0#0|)) )))
(assert (forall ((|a#149#0#0| T@U) ) (!  (=> (= (type |a#149#0#0|) DatatypeTypeType) (< (DtRank |a#149#0#0|) (DtRank (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#149#0#0|)))) :qid |PivotBet.713:19| :skolemid |4520| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeMerge| |a#149#0#0|)) )))
(assert (forall ((arg0@@644 T@U) ) (! (= (type (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| arg0@@644)) DatatypeTypeType) :qid |funType:#PivotBetreeSpec.BetreeStep.BetreeRepivot| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| arg0@@644)) )))
(assert (forall ((|a#150#0#0| T@U) ) (!  (=> (= (type |a#150#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#150#0#0|)) |##PivotBetreeSpec.BetreeStep.BetreeRepivot|)) :qid |PivotBet.714:21| :skolemid |4521| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#150#0#0|)) )))
(assert (forall ((d@@258 T@U) ) (!  (=> (= (type d@@258) DatatypeTypeType) (and (=> (PivotBetreeSpec.BetreeStep.BetreeRepivot_q d@@258) (= (DatatypeCtorId d@@258) |##PivotBetreeSpec.BetreeStep.BetreeRepivot|)) (=> (= (DatatypeCtorId d@@258) |##PivotBetreeSpec.BetreeStep.BetreeRepivot|) (PivotBetreeSpec.BetreeStep.BetreeRepivot_q d@@258)))) :qid |unknown.0:0| :skolemid |4522| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeRepivot_q d@@258)) )))
(assert (forall ((d@@259 T@U) ) (!  (=> (and (= (type d@@259) DatatypeTypeType) (PivotBetreeSpec.BetreeStep.BetreeRepivot_q d@@259)) (exists ((|a#151#0#0| T@U) ) (!  (and (= (type |a#151#0#0|) DatatypeTypeType) (= d@@259 (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#151#0#0|))) :qid |PivotBet.714:21| :skolemid |4523| :no-pattern (type |a#151#0#0|) :no-pattern (U_2_int |a#151#0#0|) :no-pattern (U_2_bool |a#151#0#0|) ))) :qid |unknown.0:0| :skolemid |4524| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeRepivot_q d@@259)) )))
(assert (forall ((|a#152#0#0| T@U) ) (!  (=> (= (type |a#152#0#0|) DatatypeTypeType) (and (=> ($Is (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#152#0#0|) Tclass.PivotBetreeSpec.BetreeStep) ($Is |a#152#0#0| Tclass.PivotBetreeSpec.Repivot)) (=> ($Is |a#152#0#0| Tclass.PivotBetreeSpec.Repivot) ($Is (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#152#0#0|) Tclass.PivotBetreeSpec.BetreeStep)))) :qid |PivotBet.714:21| :skolemid |4525| :pattern ( ($Is (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#152#0#0|) Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (forall ((|a#153#0#0| T@U) ($h@@209 T@U) ) (!  (=> (and (and (= (type |a#153#0#0|) DatatypeTypeType) (= (type $h@@209) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@209)) (and (=> ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#153#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@209) ($IsAlloc |a#153#0#0| Tclass.PivotBetreeSpec.Repivot $h@@209)) (=> ($IsAlloc |a#153#0#0| Tclass.PivotBetreeSpec.Repivot $h@@209) ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#153#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@209)))) :qid |PivotBet.714:21| :skolemid |4526| :pattern ( ($IsAlloc (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#153#0#0|) Tclass.PivotBetreeSpec.BetreeStep $h@@209)) )))
(assert (forall ((arg0@@645 T@U) ) (! (= (type (PivotBetreeSpec.BetreeStep.repivot arg0@@645)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.BetreeStep.repivot| :pattern ( (PivotBetreeSpec.BetreeStep.repivot arg0@@645)) )))
(assert (forall ((d@@260 T@U) ($h@@210 T@U) ) (!  (=> (and (and (= (type d@@260) DatatypeTypeType) (= (type $h@@210) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@210) (and (PivotBetreeSpec.BetreeStep.BetreeRepivot_q d@@260) ($IsAlloc d@@260 Tclass.PivotBetreeSpec.BetreeStep $h@@210)))) ($IsAlloc (PivotBetreeSpec.BetreeStep.repivot d@@260) Tclass.PivotBetreeSpec.Repivot $h@@210)) :qid |unknown.0:0| :skolemid |4527| :pattern ( ($IsAlloc (PivotBetreeSpec.BetreeStep.repivot d@@260) Tclass.PivotBetreeSpec.Repivot $h@@210)) )))
(assert (forall ((|a#154#0#0| T@U) ) (!  (=> (= (type |a#154#0#0|) DatatypeTypeType) (= (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| (Lit |a#154#0#0|)) (Lit (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#154#0#0|)))) :qid |PivotBet.714:21| :skolemid |4528| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| (Lit |a#154#0#0|))) )))
(assert (forall ((|a#155#0#0| T@U) ) (!  (=> (= (type |a#155#0#0|) DatatypeTypeType) (= (PivotBetreeSpec.BetreeStep.repivot (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#155#0#0|)) |a#155#0#0|)) :qid |PivotBet.714:21| :skolemid |4529| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#155#0#0|)) )))
(assert (forall ((|a#156#0#0| T@U) ) (!  (=> (= (type |a#156#0#0|) DatatypeTypeType) (< (DtRank |a#156#0#0|) (DtRank (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#156#0#0|)))) :qid |PivotBet.714:21| :skolemid |4530| :pattern ( (|#PivotBetreeSpec.BetreeStep.BetreeRepivot| |a#156#0#0|)) )))
(assert (forall ((d@@261 T@U) ) (!  (=> (and (= (type d@@261) DatatypeTypeType) (|$IsA#PivotBetreeSpec.BetreeStep| d@@261)) (or (or (or (or (or (or (or (PivotBetreeSpec.BetreeStep.BetreeQuery_q d@@261) (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q d@@261)) (PivotBetreeSpec.BetreeStep.BetreeInsert_q d@@261)) (PivotBetreeSpec.BetreeStep.BetreeFlush_q d@@261)) (PivotBetreeSpec.BetreeStep.BetreeGrow_q d@@261)) (PivotBetreeSpec.BetreeStep.BetreeSplit_q d@@261)) (PivotBetreeSpec.BetreeStep.BetreeMerge_q d@@261)) (PivotBetreeSpec.BetreeStep.BetreeRepivot_q d@@261))) :qid |unknown.0:0| :skolemid |4531| :pattern ( (|$IsA#PivotBetreeSpec.BetreeStep| d@@261)) )))
(assert (forall ((d@@262 T@U) ) (!  (=> (and (= (type d@@262) DatatypeTypeType) ($Is d@@262 Tclass.PivotBetreeSpec.BetreeStep)) (or (or (or (or (or (or (or (PivotBetreeSpec.BetreeStep.BetreeQuery_q d@@262) (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q d@@262)) (PivotBetreeSpec.BetreeStep.BetreeInsert_q d@@262)) (PivotBetreeSpec.BetreeStep.BetreeFlush_q d@@262)) (PivotBetreeSpec.BetreeStep.BetreeGrow_q d@@262)) (PivotBetreeSpec.BetreeStep.BetreeSplit_q d@@262)) (PivotBetreeSpec.BetreeStep.BetreeMerge_q d@@262)) (PivotBetreeSpec.BetreeStep.BetreeRepivot_q d@@262))) :qid |unknown.0:0| :skolemid |4532| :pattern ( (PivotBetreeSpec.BetreeStep.BetreeRepivot_q d@@262) ($Is d@@262 Tclass.PivotBetreeSpec.BetreeStep)) :pattern ( (PivotBetreeSpec.BetreeStep.BetreeMerge_q d@@262) ($Is d@@262 Tclass.PivotBetreeSpec.BetreeStep)) :pattern ( (PivotBetreeSpec.BetreeStep.BetreeSplit_q d@@262) ($Is d@@262 Tclass.PivotBetreeSpec.BetreeStep)) :pattern ( (PivotBetreeSpec.BetreeStep.BetreeGrow_q d@@262) ($Is d@@262 Tclass.PivotBetreeSpec.BetreeStep)) :pattern ( (PivotBetreeSpec.BetreeStep.BetreeFlush_q d@@262) ($Is d@@262 Tclass.PivotBetreeSpec.BetreeStep)) :pattern ( (PivotBetreeSpec.BetreeStep.BetreeInsert_q d@@262) ($Is d@@262 Tclass.PivotBetreeSpec.BetreeStep)) :pattern ( (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q d@@262) ($Is d@@262 Tclass.PivotBetreeSpec.BetreeStep)) :pattern ( (PivotBetreeSpec.BetreeStep.BetreeQuery_q d@@262) ($Is d@@262 Tclass.PivotBetreeSpec.BetreeStep)) )))
(assert (forall ((a@@202 T@U) (b@@133 T@U) ) (!  (=> (and (and (= (type a@@202) DatatypeTypeType) (= (type b@@133) DatatypeTypeType)) (and (PivotBetreeSpec.BetreeStep.BetreeQuery_q a@@202) (PivotBetreeSpec.BetreeStep.BetreeQuery_q b@@133))) (and (=> (|PivotBetreeSpec.BetreeStep#Equal| a@@202 b@@133) (|PivotBetreeSpec.LookupQuery#Equal| (PivotBetreeSpec.BetreeStep.q a@@202) (PivotBetreeSpec.BetreeStep.q b@@133))) (=> (|PivotBetreeSpec.LookupQuery#Equal| (PivotBetreeSpec.BetreeStep.q a@@202) (PivotBetreeSpec.BetreeStep.q b@@133)) (|PivotBetreeSpec.BetreeStep#Equal| a@@202 b@@133)))) :qid |unknown.0:0| :skolemid |4533| :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@202 b@@133) (PivotBetreeSpec.BetreeStep.BetreeQuery_q a@@202)) :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@202 b@@133) (PivotBetreeSpec.BetreeStep.BetreeQuery_q b@@133)) )))
(assert (forall ((a@@203 T@U) (b@@134 T@U) ) (!  (=> (and (and (= (type a@@203) DatatypeTypeType) (= (type b@@134) DatatypeTypeType)) (and (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q a@@203) (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q b@@134))) (and (=> (|PivotBetreeSpec.BetreeStep#Equal| a@@203 b@@134) (|PivotBetreeSpec.SuccQuery#Equal| (PivotBetreeSpec.BetreeStep.sq a@@203) (PivotBetreeSpec.BetreeStep.sq b@@134))) (=> (|PivotBetreeSpec.SuccQuery#Equal| (PivotBetreeSpec.BetreeStep.sq a@@203) (PivotBetreeSpec.BetreeStep.sq b@@134)) (|PivotBetreeSpec.BetreeStep#Equal| a@@203 b@@134)))) :qid |unknown.0:0| :skolemid |4534| :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@203 b@@134) (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q a@@203)) :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@203 b@@134) (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q b@@134)) )))
(assert (forall ((a@@204 T@U) (b@@135 T@U) ) (!  (=> (and (and (= (type a@@204) DatatypeTypeType) (= (type b@@135) DatatypeTypeType)) (and (PivotBetreeSpec.BetreeStep.BetreeInsert_q a@@204) (PivotBetreeSpec.BetreeStep.BetreeInsert_q b@@135))) (and (=> (|PivotBetreeSpec.BetreeStep#Equal| a@@204 b@@135) (|PivotBetreeSpec.MessageInsertion#Equal| (PivotBetreeSpec.BetreeStep.ins a@@204) (PivotBetreeSpec.BetreeStep.ins b@@135))) (=> (|PivotBetreeSpec.MessageInsertion#Equal| (PivotBetreeSpec.BetreeStep.ins a@@204) (PivotBetreeSpec.BetreeStep.ins b@@135)) (|PivotBetreeSpec.BetreeStep#Equal| a@@204 b@@135)))) :qid |unknown.0:0| :skolemid |4535| :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@204 b@@135) (PivotBetreeSpec.BetreeStep.BetreeInsert_q a@@204)) :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@204 b@@135) (PivotBetreeSpec.BetreeStep.BetreeInsert_q b@@135)) )))
(assert (forall ((a@@205 T@U) (b@@136 T@U) ) (!  (=> (and (and (= (type a@@205) DatatypeTypeType) (= (type b@@136) DatatypeTypeType)) (and (PivotBetreeSpec.BetreeStep.BetreeFlush_q a@@205) (PivotBetreeSpec.BetreeStep.BetreeFlush_q b@@136))) (and (=> (|PivotBetreeSpec.BetreeStep#Equal| a@@205 b@@136) (|PivotBetreeSpec.NodeFlush#Equal| (PivotBetreeSpec.BetreeStep.flush a@@205) (PivotBetreeSpec.BetreeStep.flush b@@136))) (=> (|PivotBetreeSpec.NodeFlush#Equal| (PivotBetreeSpec.BetreeStep.flush a@@205) (PivotBetreeSpec.BetreeStep.flush b@@136)) (|PivotBetreeSpec.BetreeStep#Equal| a@@205 b@@136)))) :qid |unknown.0:0| :skolemid |4536| :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@205 b@@136) (PivotBetreeSpec.BetreeStep.BetreeFlush_q a@@205)) :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@205 b@@136) (PivotBetreeSpec.BetreeStep.BetreeFlush_q b@@136)) )))
(assert (forall ((a@@206 T@U) (b@@137 T@U) ) (!  (=> (and (and (= (type a@@206) DatatypeTypeType) (= (type b@@137) DatatypeTypeType)) (and (PivotBetreeSpec.BetreeStep.BetreeGrow_q a@@206) (PivotBetreeSpec.BetreeStep.BetreeGrow_q b@@137))) (and (=> (|PivotBetreeSpec.BetreeStep#Equal| a@@206 b@@137) (|PivotBetreeSpec.RootGrowth#Equal| (PivotBetreeSpec.BetreeStep.growth a@@206) (PivotBetreeSpec.BetreeStep.growth b@@137))) (=> (|PivotBetreeSpec.RootGrowth#Equal| (PivotBetreeSpec.BetreeStep.growth a@@206) (PivotBetreeSpec.BetreeStep.growth b@@137)) (|PivotBetreeSpec.BetreeStep#Equal| a@@206 b@@137)))) :qid |unknown.0:0| :skolemid |4537| :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@206 b@@137) (PivotBetreeSpec.BetreeStep.BetreeGrow_q a@@206)) :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@206 b@@137) (PivotBetreeSpec.BetreeStep.BetreeGrow_q b@@137)) )))
(assert (forall ((a@@207 T@U) (b@@138 T@U) ) (!  (=> (and (and (= (type a@@207) DatatypeTypeType) (= (type b@@138) DatatypeTypeType)) (and (PivotBetreeSpec.BetreeStep.BetreeSplit_q a@@207) (PivotBetreeSpec.BetreeStep.BetreeSplit_q b@@138))) (and (=> (|PivotBetreeSpec.BetreeStep#Equal| a@@207 b@@138) (|PivotBetreeSpec.NodeFusion#Equal| (PivotBetreeSpec.BetreeStep.fusion a@@207) (PivotBetreeSpec.BetreeStep.fusion b@@138))) (=> (|PivotBetreeSpec.NodeFusion#Equal| (PivotBetreeSpec.BetreeStep.fusion a@@207) (PivotBetreeSpec.BetreeStep.fusion b@@138)) (|PivotBetreeSpec.BetreeStep#Equal| a@@207 b@@138)))) :qid |unknown.0:0| :skolemid |4538| :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@207 b@@138) (PivotBetreeSpec.BetreeStep.BetreeSplit_q a@@207)) :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@207 b@@138) (PivotBetreeSpec.BetreeStep.BetreeSplit_q b@@138)) )))
(assert (forall ((a@@208 T@U) (b@@139 T@U) ) (!  (=> (and (and (= (type a@@208) DatatypeTypeType) (= (type b@@139) DatatypeTypeType)) (and (PivotBetreeSpec.BetreeStep.BetreeMerge_q a@@208) (PivotBetreeSpec.BetreeStep.BetreeMerge_q b@@139))) (and (=> (|PivotBetreeSpec.BetreeStep#Equal| a@@208 b@@139) (|PivotBetreeSpec.NodeFusion#Equal| (PivotBetreeSpec.BetreeStep.fusion a@@208) (PivotBetreeSpec.BetreeStep.fusion b@@139))) (=> (|PivotBetreeSpec.NodeFusion#Equal| (PivotBetreeSpec.BetreeStep.fusion a@@208) (PivotBetreeSpec.BetreeStep.fusion b@@139)) (|PivotBetreeSpec.BetreeStep#Equal| a@@208 b@@139)))) :qid |unknown.0:0| :skolemid |4539| :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@208 b@@139) (PivotBetreeSpec.BetreeStep.BetreeMerge_q a@@208)) :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@208 b@@139) (PivotBetreeSpec.BetreeStep.BetreeMerge_q b@@139)) )))
(assert (forall ((a@@209 T@U) (b@@140 T@U) ) (!  (=> (and (and (= (type a@@209) DatatypeTypeType) (= (type b@@140) DatatypeTypeType)) (and (PivotBetreeSpec.BetreeStep.BetreeRepivot_q a@@209) (PivotBetreeSpec.BetreeStep.BetreeRepivot_q b@@140))) (and (=> (|PivotBetreeSpec.BetreeStep#Equal| a@@209 b@@140) (|PivotBetreeSpec.Repivot#Equal| (PivotBetreeSpec.BetreeStep.repivot a@@209) (PivotBetreeSpec.BetreeStep.repivot b@@140))) (=> (|PivotBetreeSpec.Repivot#Equal| (PivotBetreeSpec.BetreeStep.repivot a@@209) (PivotBetreeSpec.BetreeStep.repivot b@@140)) (|PivotBetreeSpec.BetreeStep#Equal| a@@209 b@@140)))) :qid |unknown.0:0| :skolemid |4540| :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@209 b@@140) (PivotBetreeSpec.BetreeStep.BetreeRepivot_q a@@209)) :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@209 b@@140) (PivotBetreeSpec.BetreeStep.BetreeRepivot_q b@@140)) )))
(assert (forall ((a@@210 T@U) (b@@141 T@U) ) (!  (=> (and (= (type a@@210) DatatypeTypeType) (= (type b@@141) DatatypeTypeType)) (and (=> (|PivotBetreeSpec.BetreeStep#Equal| a@@210 b@@141) (= a@@210 b@@141)) (=> (= a@@210 b@@141) (|PivotBetreeSpec.BetreeStep#Equal| a@@210 b@@141)))) :qid |unknown.0:0| :skolemid |4541| :pattern ( (|PivotBetreeSpec.BetreeStep#Equal| a@@210 b@@141)) )))
(assert (= (type Tclass.PivotBetreeSpec.__default) TyType))
(assert (= (Tag Tclass.PivotBetreeSpec.__default) Tagclass.PivotBetreeSpec.__default))
(assert (forall ((bx@@178 T@U) ) (!  (=> (and (= (type bx@@178) BoxType) ($IsBox bx@@178 Tclass.PivotBetreeSpec.__default)) (and (= ($Box ($Unbox refType bx@@178)) bx@@178) ($Is ($Unbox refType bx@@178) Tclass.PivotBetreeSpec.__default))) :qid |unknown.0:0| :skolemid |4542| :pattern ( ($IsBox bx@@178 Tclass.PivotBetreeSpec.__default)) )))
(assert (forall (($o@@68 T@U) ) (!  (=> (= (type $o@@68) refType) (and (=> ($Is $o@@68 Tclass.PivotBetreeSpec.__default) (or (= $o@@68 null) (= (dtype $o@@68) Tclass.PivotBetreeSpec.__default))) (=> (or (= $o@@68 null) (= (dtype $o@@68) Tclass.PivotBetreeSpec.__default)) ($Is $o@@68 Tclass.PivotBetreeSpec.__default)))) :qid |unknown.0:0| :skolemid |4543| :pattern ( ($Is $o@@68 Tclass.PivotBetreeSpec.__default)) )))
(assert (forall (($o@@69 T@U) ($h@@211 T@U) ) (!  (=> (and (= (type $o@@69) refType) (= (type $h@@211) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@69 Tclass.PivotBetreeSpec.__default $h@@211) (or (= $o@@69 null) (U_2_bool (MapType1Select (MapType0Select $h@@211 $o@@69) alloc)))) (=> (or (= $o@@69 null) (U_2_bool (MapType1Select (MapType0Select $h@@211 $o@@69) alloc))) ($IsAlloc $o@@69 Tclass.PivotBetreeSpec.__default $h@@211)))) :qid |unknown.0:0| :skolemid |4544| :pattern ( ($IsAlloc $o@@69 Tclass.PivotBetreeSpec.__default $h@@211)) )))
(assert  (=> true (forall ((|node#0@@7| T@U) ) (!  (=> (and (= (type |node#0@@7|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BoundedNode#canCall| |node#0@@7|) ($Is |node#0@@7| Tclass.PivotBetreeGraph.Node))) true) :qid |PivotBet.73:25| :skolemid |4545| :pattern ( (PivotBetreeSpec.__default.BoundedNode |node#0@@7|)) ))))
(assert (forall ((|node#0@@8| T@U) ) (!  (=> (and (= (type |node#0@@8|) DatatypeTypeType) ($Is |node#0@@8| Tclass.PivotBetreeGraph.Node)) (and (=> (|PivotBetreeSpec.__default.BoundedNode#requires| |node#0@@8|) true) (=> true (|PivotBetreeSpec.__default.BoundedNode#requires| |node#0@@8|)))) :qid |PivotBet.73:25| :skolemid |4546| :pattern ( (|PivotBetreeSpec.__default.BoundedNode#requires| |node#0@@8|)) )))
(assert (= (type StartFuel_BucketWeights._default.WeightBucketList) LayerTypeType))
(assert  (=> true (forall ((|node#0@@9| T@U) ) (!  (=> (and (= (type |node#0@@9|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BoundedNode#canCall| |node#0@@9|) ($Is |node#0@@9| Tclass.PivotBetreeGraph.Node))) (and (and (and (PivotBetreeGraph.Node.Node_q |node#0@@9|) |Bounds.__default.MaxNumChildren#canCall|) (=> (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@9|)) (LitInt Bounds.__default.MaxNumChildren)) (and (and (PivotBetreeGraph.Node.Node_q |node#0@@9|) (|BucketWeights.__default.WeightBucketList#canCall| (PivotBetreeGraph.Node.buckets |node#0@@9|))) |Bounds.__default.MaxTotalBucketWeight#canCall|))) (and (=> (PivotBetreeSpec.__default.BoundedNode |node#0@@9|) (and (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@9|)) (LitInt Bounds.__default.MaxNumChildren)) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets |node#0@@9|)) (LitInt Bounds.__default.MaxTotalBucketWeight)))) (=> (and (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@9|)) (LitInt Bounds.__default.MaxNumChildren)) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets |node#0@@9|)) (LitInt Bounds.__default.MaxTotalBucketWeight))) (PivotBetreeSpec.__default.BoundedNode |node#0@@9|))))) :qid |PivotBet.73:25| :skolemid |4547| :pattern ( (PivotBetreeSpec.__default.BoundedNode |node#0@@9|)) ))))
(assert  (=> true (forall ((|node#0@@10| T@U) ) (!  (=> (and (= (type |node#0@@10|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BoundedNode#canCall| (Lit |node#0@@10|)) ($Is |node#0@@10| Tclass.PivotBetreeGraph.Node))) (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@10|)) |Bounds.__default.MaxNumChildren#canCall|) (=> (<= (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@10|)))) (LitInt Bounds.__default.MaxNumChildren)) (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@10|)) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@10|))))) |Bounds.__default.MaxTotalBucketWeight#canCall|))) (and (=> (PivotBetreeSpec.__default.BoundedNode (Lit |node#0@@10|)) (and (<= (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@10|)))) (LitInt Bounds.__default.MaxNumChildren)) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@10|)))) (LitInt Bounds.__default.MaxTotalBucketWeight)))) (=> (and (<= (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@10|)))) (LitInt Bounds.__default.MaxNumChildren)) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@10|)))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (PivotBetreeSpec.__default.BoundedNode (Lit |node#0@@10|)))))) :qid |PivotBet.73:25| :weight 3 :skolemid |4548| :pattern ( (PivotBetreeSpec.__default.BoundedNode (Lit |node#0@@10|))) ))))
(assert  (=> true (forall ((|node#0@@11| T@U) ) (!  (=> (and (= (type |node#0@@11|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.WFNode#canCall| |node#0@@11|) ($Is |node#0@@11| Tclass.PivotBetreeGraph.Node))) true) :qid |PivotBet.82:20| :skolemid |4549| :pattern ( (PivotBetreeSpec.__default.WFNode |node#0@@11|)) ))))
(assert (forall ((|node#0@@12| T@U) ) (!  (=> (and (= (type |node#0@@12|) DatatypeTypeType) ($Is |node#0@@12| Tclass.PivotBetreeGraph.Node)) (and (=> (|PivotBetreeSpec.__default.WFNode#requires| |node#0@@12|) true) (=> true (|PivotBetreeSpec.__default.WFNode#requires| |node#0@@12|)))) :qid |PivotBet.82:20| :skolemid |4550| :pattern ( (|PivotBetreeSpec.__default.WFNode#requires| |node#0@@12|)) )))
(assert  (=> true (forall ((|node#0@@13| T@U) ) (!  (=> (and (= (type |node#0@@13|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.WFNode#canCall| |node#0@@13|) ($Is |node#0@@13| Tclass.PivotBetreeGraph.Node))) (and (and (and (and (and (and (and (PivotBetreeGraph.Node.Node_q |node#0@@13|) (|PivotsLib.__default.NumBuckets#canCall| (PivotBetreeGraph.Node.pivotTable |node#0@@13|))) (PivotBetreeGraph.Node.Node_q |node#0@@13|)) (=> (= (PivotsLib.__default.NumBuckets (PivotBetreeGraph.Node.pivotTable |node#0@@13|)) (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@13|))) (and (PivotBetreeGraph.Node.Node_q |node#0@@13|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@13|)) (and (PivotBetreeGraph.Node.Node_q |node#0@@13|) (PivotBetreeGraph.Node.Node_q |node#0@@13|)))))) (=> (and (and (PivotBetreeGraph.Node.Node_q |node#0@@13|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@13|)) (and (PivotBetreeGraph.Node.Node_q |node#0@@13|) (PivotBetreeGraph.Node.Node_q |node#0@@13|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@13|)) (= (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@13|)) (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@13|))))))) (and (PivotBetreeGraph.Node.Node_q |node#0@@13|) (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable |node#0@@13|))))) (=> (and (and (PivotBetreeGraph.Node.Node_q |node#0@@13|) (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable |node#0@@13|))) (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable |node#0@@13|))) (and (and (PivotBetreeGraph.Node.Node_q |node#0@@13|) (PivotBetreeGraph.Node.Node_q |node#0@@13|)) (|BucketsLib.__default.WFBucketList#canCall| (PivotBetreeGraph.Node.buckets |node#0@@13|) (PivotBetreeGraph.Node.pivotTable |node#0@@13|))))) (=> (and (and (and (PivotBetreeGraph.Node.Node_q |node#0@@13|) (PivotBetreeGraph.Node.Node_q |node#0@@13|)) (|BucketsLib.__default.WFBucketList#canCall| (PivotBetreeGraph.Node.buckets |node#0@@13|) (PivotBetreeGraph.Node.pivotTable |node#0@@13|))) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets |node#0@@13|) (PivotBetreeGraph.Node.pivotTable |node#0@@13|))) (|PivotBetreeSpec.__default.BoundedNode#canCall| |node#0@@13|))) (and (=> (PivotBetreeSpec.__default.WFNode |node#0@@13|) (and (and (and (and (= (PivotsLib.__default.NumBuckets (PivotBetreeGraph.Node.pivotTable |node#0@@13|)) (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@13|))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@13|)) (= (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@13|)) (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@13|))))))) (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable |node#0@@13|))) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets |node#0@@13|) (PivotBetreeGraph.Node.pivotTable |node#0@@13|))) (PivotBetreeSpec.__default.BoundedNode |node#0@@13|))) (=> (and (and (and (and (= (PivotsLib.__default.NumBuckets (PivotBetreeGraph.Node.pivotTable |node#0@@13|)) (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@13|))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@13|)) (= (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@13|)) (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@13|))))))) (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable |node#0@@13|))) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets |node#0@@13|) (PivotBetreeGraph.Node.pivotTable |node#0@@13|))) (PivotBetreeSpec.__default.BoundedNode |node#0@@13|)) (PivotBetreeSpec.__default.WFNode |node#0@@13|))))) :qid |PivotBet.82:20| :skolemid |4551| :pattern ( (PivotBetreeSpec.__default.WFNode |node#0@@13|)) ))))
(assert  (=> true (forall ((|node#0@@14| T@U) ) (!  (=> (and (= (type |node#0@@14|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.WFNode#canCall| (Lit |node#0@@14|)) ($Is |node#0@@14| Tclass.PivotBetreeGraph.Node))) (and (and (and (and (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|)) (|PivotsLib.__default.NumBuckets#canCall| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|))) (=> (= (LitInt (PivotsLib.__default.NumBuckets (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|))))) (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@14|))))))) (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|))))))) (=> (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@14|))))))) (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|))))) (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@14|)))) (= (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|)))) (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@14|)))))))))) (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|)) (|PivotsLib.__default.WFPivots#canCall| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))))) (=> (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|)) (|PivotsLib.__default.WFPivots#canCall| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|)))))))) (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|))) (|BucketsLib.__default.WFBucketList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))))) (=> (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@14|))) (|BucketsLib.__default.WFBucketList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|)))))))) (|PivotBetreeSpec.__default.BoundedNode#canCall| (Lit |node#0@@14|)))) (and (=> (PivotBetreeSpec.__default.WFNode (Lit |node#0@@14|)) (and (and (and (and (= (LitInt (PivotsLib.__default.NumBuckets (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|))))) (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@14|)))) (= (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|)))) (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@14|)))))))))) (PivotsLib.__default.WFPivots (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (BucketsLib.__default.WFBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (PivotBetreeSpec.__default.BoundedNode (Lit |node#0@@14|)))) (=> (and (and (and (and (= (LitInt (PivotsLib.__default.NumBuckets (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|))))) (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@14|)))) (= (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|)))) (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@14|)))))))))) (PivotsLib.__default.WFPivots (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (BucketsLib.__default.WFBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@14|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@14|))))) (PivotBetreeSpec.__default.BoundedNode (Lit |node#0@@14|))) (PivotBetreeSpec.__default.WFNode (Lit |node#0@@14|)))))) :qid |PivotBet.82:20| :weight 3 :skolemid |4552| :pattern ( (PivotBetreeSpec.__default.WFNode (Lit |node#0@@14|))) ))))
(assert  (=> true (forall ((|node#0@@15| T@U) ) (!  (=> (and (= (type |node#0@@15|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.InvNode#canCall| |node#0@@15|) ($Is |node#0@@15| Tclass.PivotBetreeGraph.Node))) true) :qid |PivotBet.91:21| :skolemid |4553| :pattern ( (PivotBetreeSpec.__default.InvNode |node#0@@15|)) ))))
(assert (forall ((|node#0@@16| T@U) ) (!  (=> (and (= (type |node#0@@16|) DatatypeTypeType) ($Is |node#0@@16| Tclass.PivotBetreeGraph.Node)) (and (=> (|PivotBetreeSpec.__default.InvNode#requires| |node#0@@16|) true) (=> true (|PivotBetreeSpec.__default.InvNode#requires| |node#0@@16|)))) :qid |PivotBet.91:21| :skolemid |4554| :pattern ( (|PivotBetreeSpec.__default.InvNode#requires| |node#0@@16|)) )))
(assert  (=> true (forall ((|node#0@@17| T@U) ) (!  (=> (and (= (type |node#0@@17|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.InvNode#canCall| |node#0@@17|) ($Is |node#0@@17| Tclass.PivotBetreeGraph.Node))) (and (and (and (|PivotBetreeSpec.__default.WFNode#canCall| |node#0@@17|) (=> (PivotBetreeSpec.__default.WFNode |node#0@@17|) (and (and (PivotBetreeGraph.Node.Node_q |node#0@@17|) (PivotBetreeGraph.Node.Node_q |node#0@@17|)) (|BucketsLib.__default.WFBucketListProper#canCall| (PivotBetreeGraph.Node.buckets |node#0@@17|) (PivotBetreeGraph.Node.pivotTable |node#0@@17|))))) (=> (and (and (and (PivotBetreeGraph.Node.Node_q |node#0@@17|) (PivotBetreeGraph.Node.Node_q |node#0@@17|)) (|BucketsLib.__default.WFBucketListProper#canCall| (PivotBetreeGraph.Node.buckets |node#0@@17|) (PivotBetreeGraph.Node.pivotTable |node#0@@17|))) (BucketsLib.__default.WFBucketListProper (PivotBetreeGraph.Node.buckets |node#0@@17|) (PivotBetreeGraph.Node.pivotTable |node#0@@17|))) (and (PivotBetreeGraph.Node.Node_q |node#0@@17|) (|BucketsLib.__default.BucketListWellMarshalled#canCall| (PivotBetreeGraph.Node.buckets |node#0@@17|))))) (and (=> (PivotBetreeSpec.__default.InvNode |node#0@@17|) (and (and (PivotBetreeSpec.__default.WFNode |node#0@@17|) (BucketsLib.__default.WFBucketListProper (PivotBetreeGraph.Node.buckets |node#0@@17|) (PivotBetreeGraph.Node.pivotTable |node#0@@17|))) (BucketsLib.__default.BucketListWellMarshalled (PivotBetreeGraph.Node.buckets |node#0@@17|)))) (=> (and (and (PivotBetreeSpec.__default.WFNode |node#0@@17|) (BucketsLib.__default.WFBucketListProper (PivotBetreeGraph.Node.buckets |node#0@@17|) (PivotBetreeGraph.Node.pivotTable |node#0@@17|))) (BucketsLib.__default.BucketListWellMarshalled (PivotBetreeGraph.Node.buckets |node#0@@17|))) (PivotBetreeSpec.__default.InvNode |node#0@@17|))))) :qid |PivotBet.91:21| :skolemid |4555| :pattern ( (PivotBetreeSpec.__default.InvNode |node#0@@17|)) ))))
(assert  (=> true (forall ((|node#0@@18| T@U) ) (!  (=> (and (= (type |node#0@@18|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.InvNode#canCall| (Lit |node#0@@18|)) ($Is |node#0@@18| Tclass.PivotBetreeGraph.Node))) (and (and (and (|PivotBetreeSpec.__default.WFNode#canCall| (Lit |node#0@@18|)) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit |node#0@@18|))))) (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@18|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@18|))) (|BucketsLib.__default.WFBucketListProper#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@18|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@18|))))))) (=> (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@18|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@18|))) (|BucketsLib.__default.WFBucketListProper#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@18|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@18|))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketListProper (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@18|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@18|)))))))) (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@18|)) (|BucketsLib.__default.BucketListWellMarshalled#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@18|))))))) (and (=> (PivotBetreeSpec.__default.InvNode (Lit |node#0@@18|)) (U_2_bool (Lit (bool_2_U  (and (and (PivotBetreeSpec.__default.WFNode (Lit |node#0@@18|)) (BucketsLib.__default.WFBucketListProper (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@18|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@18|))))) (BucketsLib.__default.BucketListWellMarshalled (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@18|))))))))) (=> (U_2_bool (Lit (bool_2_U  (and (and (PivotBetreeSpec.__default.WFNode (Lit |node#0@@18|)) (BucketsLib.__default.WFBucketListProper (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@18|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@18|))))) (BucketsLib.__default.BucketListWellMarshalled (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@18|)))))))) (PivotBetreeSpec.__default.InvNode (Lit |node#0@@18|)))))) :qid |PivotBet.91:21| :weight 3 :skolemid |4556| :pattern ( (PivotBetreeSpec.__default.InvNode (Lit |node#0@@18|))) ))))
(assert (forall ((arg0@@646 T@U) (arg1@@346 T@U) (arg2@@237 T@U) ) (! (= (type (PivotBetreeSpec.__default.AddMessageToNode arg0@@646 arg1@@346 arg2@@237)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.AddMessageToNode| :pattern ( (PivotBetreeSpec.__default.AddMessageToNode arg0@@646 arg1@@346 arg2@@237)) )))
(assert  (=> true (forall ((|node#0@@19| T@U) (|key#0@@236| T@U) (|msg#0@@27| T@U) ) (!  (=> (and (and (and (= (type |node#0@@19|) DatatypeTypeType) (= (type |key#0@@236|) (SeqType BoxType))) (= (type |msg#0@@27|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.AddMessageToNode#canCall| |node#0@@19| |key#0@@236| |msg#0@@27|) (and (and (and ($Is |node#0@@19| Tclass.PivotBetreeGraph.Node) ($Is |key#0@@236| Tclass.KeyType.Key)) ($Is |msg#0@@27| Tclass.ValueMessage.Message)) (PivotBetreeSpec.__default.WFNode |node#0@@19|)))) ($Is (PivotBetreeSpec.__default.AddMessageToNode |node#0@@19| |key#0@@236| |msg#0@@27|) Tclass.PivotBetreeGraph.Node)) :qid |PivotBet.98:29| :skolemid |4557| :pattern ( (PivotBetreeSpec.__default.AddMessageToNode |node#0@@19| |key#0@@236| |msg#0@@27|)) ))))
(assert (forall ((|node#0@@20| T@U) (|key#0@@237| T@U) (|msg#0@@28| T@U) ) (!  (=> (and (and (and (= (type |node#0@@20|) DatatypeTypeType) (= (type |key#0@@237|) (SeqType BoxType))) (= (type |msg#0@@28|) DatatypeTypeType)) (and (and ($Is |node#0@@20| Tclass.PivotBetreeGraph.Node) ($Is |key#0@@237| Tclass.KeyType.Key)) ($Is |msg#0@@28| Tclass.ValueMessage.Message))) (and (=> (|PivotBetreeSpec.__default.AddMessageToNode#requires| |node#0@@20| |key#0@@237| |msg#0@@28|) (PivotBetreeSpec.__default.WFNode |node#0@@20|)) (=> (PivotBetreeSpec.__default.WFNode |node#0@@20|) (|PivotBetreeSpec.__default.AddMessageToNode#requires| |node#0@@20| |key#0@@237| |msg#0@@28|)))) :qid |PivotBet.98:29| :skolemid |4558| :pattern ( (|PivotBetreeSpec.__default.AddMessageToNode#requires| |node#0@@20| |key#0@@237| |msg#0@@28|)) )))
(assert  (=> true (forall ((|node#0@@21| T@U) (|key#0@@238| T@U) (|msg#0@@29| T@U) ) (!  (=> (and (and (and (= (type |node#0@@21|) DatatypeTypeType) (= (type |key#0@@238|) (SeqType BoxType))) (= (type |msg#0@@29|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.AddMessageToNode#canCall| |node#0@@21| |key#0@@238| |msg#0@@29|) (and (and (and ($Is |node#0@@21| Tclass.PivotBetreeGraph.Node) ($Is |key#0@@238| Tclass.KeyType.Key)) ($Is |msg#0@@29| Tclass.ValueMessage.Message)) (PivotBetreeSpec.__default.WFNode |node#0@@21|)))) (and (let ((|dt_update_tmp#0#0| |node#0@@21|)) (and (and (and (PivotBetreeGraph.Node.Node_q |node#0@@21|) (PivotBetreeGraph.Node.Node_q |node#0@@21|)) (|BucketsLib.__default.BucketListInsert#canCall| (PivotBetreeGraph.Node.buckets |node#0@@21|) (PivotBetreeGraph.Node.pivotTable |node#0@@21|) |key#0@@238| |msg#0@@29|)) (and (PivotBetreeGraph.Node.Node_q |dt_update_tmp#0#0|) (PivotBetreeGraph.Node.Node_q |dt_update_tmp#0#0|)))) (= (PivotBetreeSpec.__default.AddMessageToNode |node#0@@21| |key#0@@238| |msg#0@@29|) (let ((|newnode#0| (let ((|dt_update_tmp#0#0@@0| |node#0@@21|)) (let ((|dt_update#buckets#0#0| (BucketsLib.__default.BucketListInsert (PivotBetreeGraph.Node.buckets |node#0@@21|) (PivotBetreeGraph.Node.pivotTable |node#0@@21|) |key#0@@238| |msg#0@@29|))) (|#PivotBetreeGraph.Node.Node| (PivotBetreeGraph.Node.pivotTable |dt_update_tmp#0#0@@0|) (PivotBetreeGraph.Node.children |dt_update_tmp#0#0@@0|) |dt_update#buckets#0#0|))))) |newnode#0|)))) :qid |PivotBet.98:29| :skolemid |4559| :pattern ( (PivotBetreeSpec.__default.AddMessageToNode |node#0@@21| |key#0@@238| |msg#0@@29|)) ))))
(assert  (=> true (forall ((|node#0@@22| T@U) (|key#0@@239| T@U) (|msg#0@@30| T@U) ) (!  (=> (and (and (and (= (type |node#0@@22|) DatatypeTypeType) (= (type |key#0@@239|) (SeqType BoxType))) (= (type |msg#0@@30|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.AddMessageToNode#canCall| (Lit |node#0@@22|) (Lit |key#0@@239|) (Lit |msg#0@@30|)) (and (and (and ($Is |node#0@@22| Tclass.PivotBetreeGraph.Node) ($Is |key#0@@239| Tclass.KeyType.Key)) ($Is |msg#0@@30| Tclass.ValueMessage.Message)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit |node#0@@22|)))))))) (and (let ((|dt_update_tmp#0#1| (Lit |node#0@@22|))) (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@22|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@22|))) (|BucketsLib.__default.BucketListInsert#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@22|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@22|))) (Lit |key#0@@239|) (Lit |msg#0@@30|))) (and (PivotBetreeGraph.Node.Node_q |dt_update_tmp#0#1|) (PivotBetreeGraph.Node.Node_q |dt_update_tmp#0#1|)))) (= (PivotBetreeSpec.__default.AddMessageToNode (Lit |node#0@@22|) (Lit |key#0@@239|) (Lit |msg#0@@30|)) (let ((|newnode#1| (let ((|dt_update_tmp#0#1@@0| (Lit |node#0@@22|))) (let ((|dt_update#buckets#0#1| (Lit (BucketsLib.__default.BucketListInsert (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@22|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@22|))) (Lit |key#0@@239|) (Lit |msg#0@@30|))))) (Lit (|#PivotBetreeGraph.Node.Node| (Lit (PivotBetreeGraph.Node.pivotTable |dt_update_tmp#0#1@@0|)) (Lit (PivotBetreeGraph.Node.children |dt_update_tmp#0#1@@0|)) |dt_update#buckets#0#1|)))))) |newnode#1|)))) :qid |PivotBet.98:29| :weight 3 :skolemid |4560| :pattern ( (PivotBetreeSpec.__default.AddMessageToNode (Lit |node#0@@22|) (Lit |key#0@@239|) (Lit |msg#0@@30|))) ))))
(assert (forall ((arg0@@647 T@U) (arg1@@347 T@U) ) (! (= (type (PivotBetreeSpec.__default.AddMessagesToNode arg0@@647 arg1@@347)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.AddMessagesToNode| :pattern ( (PivotBetreeSpec.__default.AddMessagesToNode arg0@@647 arg1@@347)) )))
(assert  (=> true (forall ((|node#0@@23| T@U) (|msgs#0@@35| T@U) ) (!  (=> (and (and (= (type |node#0@@23|) DatatypeTypeType) (= (type |msgs#0@@35|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.AddMessagesToNode#canCall| |node#0@@23| |msgs#0@@35|) (and (and ($Is |node#0@@23| Tclass.PivotBetreeGraph.Node) ($Is |msgs#0@@35| Tclass.BucketsLib.Bucket)) (PivotBetreeSpec.__default.WFNode |node#0@@23|)))) ($Is (PivotBetreeSpec.__default.AddMessagesToNode |node#0@@23| |msgs#0@@35|) Tclass.PivotBetreeGraph.Node)) :qid |PivotBet.107:30| :skolemid |4561| :pattern ( (PivotBetreeSpec.__default.AddMessagesToNode |node#0@@23| |msgs#0@@35|)) ))))
(assert (forall ((|node#0@@24| T@U) (|msgs#0@@36| T@U) ) (!  (=> (and (and (= (type |node#0@@24|) DatatypeTypeType) (= (type |msgs#0@@36|) DatatypeTypeType)) (and ($Is |node#0@@24| Tclass.PivotBetreeGraph.Node) ($Is |msgs#0@@36| Tclass.BucketsLib.Bucket))) (and (=> (|PivotBetreeSpec.__default.AddMessagesToNode#requires| |node#0@@24| |msgs#0@@36|) (PivotBetreeSpec.__default.WFNode |node#0@@24|)) (=> (PivotBetreeSpec.__default.WFNode |node#0@@24|) (|PivotBetreeSpec.__default.AddMessagesToNode#requires| |node#0@@24| |msgs#0@@36|)))) :qid |PivotBet.107:30| :skolemid |4562| :pattern ( (|PivotBetreeSpec.__default.AddMessagesToNode#requires| |node#0@@24| |msgs#0@@36|)) )))
(assert  (=> true (forall ((|node#0@@25| T@U) (|msgs#0@@37| T@U) ) (!  (=> (and (and (= (type |node#0@@25|) DatatypeTypeType) (= (type |msgs#0@@37|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.AddMessagesToNode#canCall| |node#0@@25| |msgs#0@@37|) (and (and ($Is |node#0@@25| Tclass.PivotBetreeGraph.Node) ($Is |msgs#0@@37| Tclass.BucketsLib.Bucket)) (PivotBetreeSpec.__default.WFNode |node#0@@25|)))) (and (and (and (PivotBetreeGraph.Node.Node_q |node#0@@25|) (PivotBetreeGraph.Node.Node_q |node#0@@25|)) (and (and (PivotBetreeGraph.Node.Node_q |node#0@@25|) (PivotBetreeGraph.Node.Node_q |node#0@@25|)) (|BucketsLib.__default.BucketListFlush#canCall| |msgs#0@@37| (PivotBetreeGraph.Node.buckets |node#0@@25|) (PivotBetreeGraph.Node.pivotTable |node#0@@25|)))) (= (PivotBetreeSpec.__default.AddMessagesToNode |node#0@@25| |msgs#0@@37|) (|#PivotBetreeGraph.Node.Node| (PivotBetreeGraph.Node.pivotTable |node#0@@25|) (PivotBetreeGraph.Node.children |node#0@@25|) (BucketsLib.__default.BucketListFlush |msgs#0@@37| (PivotBetreeGraph.Node.buckets |node#0@@25|) (PivotBetreeGraph.Node.pivotTable |node#0@@25|)))))) :qid |PivotBet.107:30| :skolemid |4563| :pattern ( (PivotBetreeSpec.__default.AddMessagesToNode |node#0@@25| |msgs#0@@37|)) ))))
(assert  (=> true (forall ((|node#0@@26| T@U) (|msgs#0@@38| T@U) ) (!  (=> (and (and (= (type |node#0@@26|) DatatypeTypeType) (= (type |msgs#0@@38|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.AddMessagesToNode#canCall| (Lit |node#0@@26|) (Lit |msgs#0@@38|)) (and (and ($Is |node#0@@26| Tclass.PivotBetreeGraph.Node) ($Is |msgs#0@@38| Tclass.BucketsLib.Bucket)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit |node#0@@26|)))))))) (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@26|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@26|))) (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@26|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@26|))) (|BucketsLib.__default.BucketListFlush#canCall| (Lit |msgs#0@@38|) (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@26|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@26|)))))) (= (PivotBetreeSpec.__default.AddMessagesToNode (Lit |node#0@@26|) (Lit |msgs#0@@38|)) (Lit (|#PivotBetreeGraph.Node.Node| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@26|))) (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@26|))) (Lit (BucketsLib.__default.BucketListFlush (Lit |msgs#0@@38|) (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@26|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@26|)))))))))) :qid |PivotBet.107:30| :weight 3 :skolemid |4564| :pattern ( (PivotBetreeSpec.__default.AddMessagesToNode (Lit |node#0@@26|) (Lit |msgs#0@@38|))) ))))
(assert  (=> true (forall ((|entry#0| T@U) ) (!  (=> (and (= (type |entry#0|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BufferIsDefining#canCall| |entry#0|) ($Is |entry#0| Tclass.ValueMessage.Message))) true) :qid |PivotBet.124:30| :skolemid |4565| :pattern ( (PivotBetreeSpec.__default.BufferIsDefining |entry#0|)) ))))
(assert (forall ((|entry#0@@0| T@U) ) (!  (=> (and (= (type |entry#0@@0|) DatatypeTypeType) ($Is |entry#0@@0| Tclass.ValueMessage.Message)) (and (=> (|PivotBetreeSpec.__default.BufferIsDefining#requires| |entry#0@@0|) true) (=> true (|PivotBetreeSpec.__default.BufferIsDefining#requires| |entry#0@@0|)))) :qid |PivotBet.124:30| :skolemid |4566| :pattern ( (|PivotBetreeSpec.__default.BufferIsDefining#requires| |entry#0@@0|)) )))
(assert  (=> true (forall ((|entry#0@@1| T@U) ) (!  (=> (and (= (type |entry#0@@1|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BufferIsDefining#canCall| |entry#0@@1|) ($Is |entry#0@@1| Tclass.ValueMessage.Message))) (and (=> (PivotBetreeSpec.__default.BufferIsDefining |entry#0@@1|) (and true (ValueMessage.Message.Define_q |entry#0@@1|))) (=> (and true (ValueMessage.Message.Define_q |entry#0@@1|)) (PivotBetreeSpec.__default.BufferIsDefining |entry#0@@1|)))) :qid |PivotBet.124:30| :skolemid |4567| :pattern ( (PivotBetreeSpec.__default.BufferIsDefining |entry#0@@1|)) ))))
(assert  (=> true (forall ((|entry#0@@2| T@U) ) (!  (=> (and (= (type |entry#0@@2|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BufferIsDefining#canCall| (Lit |entry#0@@2|)) ($Is |entry#0@@2| Tclass.ValueMessage.Message))) (and (=> (PivotBetreeSpec.__default.BufferIsDefining (Lit |entry#0@@2|)) (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |entry#0@@2|))))))) (=> (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |entry#0@@2|)))))) (PivotBetreeSpec.__default.BufferIsDefining (Lit |entry#0@@2|))))) :qid |PivotBet.124:30| :weight 3 :skolemid |4568| :pattern ( (PivotBetreeSpec.__default.BufferIsDefining (Lit |entry#0@@2|))) ))))
(assert  (=> true (forall ((|log#0| T@U) (|value#0@@5| T@U) ) (!  (=> (and (and (= (type |log#0|) DatatypeTypeType) (= (type |value#0@@5|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.BufferDefinesValue#canCall| |log#0| |value#0@@5|) (and ($Is |log#0| Tclass.ValueMessage.Message) ($Is |value#0@@5| Tclass.ValueType.Value)))) true) :qid |PivotBet.129:32| :skolemid |4569| :pattern ( (PivotBetreeSpec.__default.BufferDefinesValue |log#0| |value#0@@5|)) ))))
(assert (forall ((|log#0@@0| T@U) (|value#0@@6| T@U) ) (!  (=> (and (and (= (type |log#0@@0|) DatatypeTypeType) (= (type |value#0@@6|) (SeqType BoxType))) (and ($Is |log#0@@0| Tclass.ValueMessage.Message) ($Is |value#0@@6| Tclass.ValueType.Value))) (and (=> (|PivotBetreeSpec.__default.BufferDefinesValue#requires| |log#0@@0| |value#0@@6|) true) (=> true (|PivotBetreeSpec.__default.BufferDefinesValue#requires| |log#0@@0| |value#0@@6|)))) :qid |PivotBet.129:32| :skolemid |4570| :pattern ( (|PivotBetreeSpec.__default.BufferDefinesValue#requires| |log#0@@0| |value#0@@6|)) )))
(assert  (=> true (forall ((|log#0@@1| T@U) (|value#0@@7| T@U) ) (!  (=> (and (and (= (type |log#0@@1|) DatatypeTypeType) (= (type |value#0@@7|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.BufferDefinesValue#canCall| |log#0@@1| |value#0@@7|) (and ($Is |log#0@@1| Tclass.ValueMessage.Message) ($Is |value#0@@7| Tclass.ValueType.Value)))) (and (|PivotBetreeSpec.__default.BufferIsDefining#canCall| |log#0@@1|) (and (=> (PivotBetreeSpec.__default.BufferDefinesValue |log#0@@1| |value#0@@7|) (and (PivotBetreeSpec.__default.BufferIsDefining |log#0@@1|) (|Seq#Equal| (ValueMessage.Message.value |log#0@@1|) |value#0@@7|))) (=> (and (PivotBetreeSpec.__default.BufferIsDefining |log#0@@1|) (|Seq#Equal| (ValueMessage.Message.value |log#0@@1|) |value#0@@7|)) (PivotBetreeSpec.__default.BufferDefinesValue |log#0@@1| |value#0@@7|))))) :qid |PivotBet.129:32| :skolemid |4571| :pattern ( (PivotBetreeSpec.__default.BufferDefinesValue |log#0@@1| |value#0@@7|)) ))))
(assert  (=> true (forall ((|log#0@@2| T@U) (|value#0@@8| T@U) ) (!  (=> (and (and (= (type |log#0@@2|) DatatypeTypeType) (= (type |value#0@@8|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.BufferDefinesValue#canCall| (Lit |log#0@@2|) (Lit |value#0@@8|)) (and ($Is |log#0@@2| Tclass.ValueMessage.Message) ($Is |value#0@@8| Tclass.ValueType.Value)))) (and (|PivotBetreeSpec.__default.BufferIsDefining#canCall| (Lit |log#0@@2|)) (and (=> (PivotBetreeSpec.__default.BufferDefinesValue (Lit |log#0@@2|) (Lit |value#0@@8|)) (and (PivotBetreeSpec.__default.BufferIsDefining (Lit |log#0@@2|)) (|Seq#Equal| (ValueMessage.Message.value (Lit |log#0@@2|)) |value#0@@8|))) (=> (and (PivotBetreeSpec.__default.BufferIsDefining (Lit |log#0@@2|)) (|Seq#Equal| (ValueMessage.Message.value (Lit |log#0@@2|)) |value#0@@8|)) (PivotBetreeSpec.__default.BufferDefinesValue (Lit |log#0@@2|) (Lit |value#0@@8|)))))) :qid |PivotBet.129:32| :weight 3 :skolemid |4572| :pattern ( (PivotBetreeSpec.__default.BufferDefinesValue (Lit |log#0@@2|) (Lit |value#0@@8|))) ))))
(assert  (=> true (forall ((|lookup#0| T@U) (|idx#0@@3| Int) ) (!  (=> (and (= (type |lookup#0|) (SeqType BoxType)) (or (|PivotBetreeSpec.__default.ValidLayerIndex#canCall| |lookup#0| |idx#0@@3|) ($Is |lookup#0| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) true) :qid |PivotBet.135:29| :skolemid |4573| :pattern ( (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0| |idx#0@@3|)) ))))
(assert (forall ((|lookup#0@@0| T@U) (|idx#0@@4| Int) ) (!  (=> (and (= (type |lookup#0@@0|) (SeqType BoxType)) ($Is |lookup#0@@0| (TSeq Tclass.PivotBetreeGraph.ReadOp))) (and (=> (|PivotBetreeSpec.__default.ValidLayerIndex#requires| |lookup#0@@0| |idx#0@@4|) true) (=> true (|PivotBetreeSpec.__default.ValidLayerIndex#requires| |lookup#0@@0| |idx#0@@4|)))) :qid |PivotBet.135:29| :skolemid |4574| :pattern ( (|PivotBetreeSpec.__default.ValidLayerIndex#requires| |lookup#0@@0| |idx#0@@4|)) )))
(assert  (=> true (forall ((|lookup#0@@1| T@U) (|idx#0@@5| Int) ) (!  (=> (and (= (type |lookup#0@@1|) (SeqType BoxType)) (or (|PivotBetreeSpec.__default.ValidLayerIndex#canCall| |lookup#0@@1| |idx#0@@5|) ($Is |lookup#0@@1| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) (and (=> (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@1| |idx#0@@5|) (and true (and (<= (LitInt 0) |idx#0@@5|) (< |idx#0@@5| (|Seq#Length| |lookup#0@@1|))))) (=> (and true (and (<= (LitInt 0) |idx#0@@5|) (< |idx#0@@5| (|Seq#Length| |lookup#0@@1|)))) (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@1| |idx#0@@5|)))) :qid |PivotBet.135:29| :skolemid |4575| :pattern ( (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@1| |idx#0@@5|)) ))))
(assert  (=> true (forall ((|lookup#0@@2| T@U) (|idx#0@@6| Int) ) (!  (=> (and (= (type |lookup#0@@2|) (SeqType BoxType)) (or (|PivotBetreeSpec.__default.ValidLayerIndex#canCall| (Lit |lookup#0@@2|) (LitInt |idx#0@@6|)) ($Is |lookup#0@@2| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) (and (=> (PivotBetreeSpec.__default.ValidLayerIndex (Lit |lookup#0@@2|) (LitInt |idx#0@@6|)) (and true (and (<= (LitInt 0) (LitInt |idx#0@@6|)) (< |idx#0@@6| (|Seq#Length| (Lit |lookup#0@@2|)))))) (=> (and true (and (<= (LitInt 0) (LitInt |idx#0@@6|)) (< |idx#0@@6| (|Seq#Length| (Lit |lookup#0@@2|))))) (PivotBetreeSpec.__default.ValidLayerIndex (Lit |lookup#0@@2|) (LitInt |idx#0@@6|))))) :qid |PivotBet.135:29| :weight 3 :skolemid |4576| :pattern ( (PivotBetreeSpec.__default.ValidLayerIndex (Lit |lookup#0@@2|) (LitInt |idx#0@@6|))) ))))
(assert  (=> true (forall ((|lookup#0@@3| T@U) ) (!  (=> (and (= (type |lookup#0@@3|) (SeqType BoxType)) (or (|PivotBetreeSpec.__default.LookupVisitsWFNodes#canCall| |lookup#0@@3|) ($Is |lookup#0@@3| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) true) :qid |PivotBet.140:33| :skolemid |4577| :pattern ( (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@3|)) ))))
(assert (forall ((|lookup#0@@4| T@U) ) (!  (=> (and (= (type |lookup#0@@4|) (SeqType BoxType)) ($Is |lookup#0@@4| (TSeq Tclass.PivotBetreeGraph.ReadOp))) (and (=> (|PivotBetreeSpec.__default.LookupVisitsWFNodes#requires| |lookup#0@@4|) true) (=> true (|PivotBetreeSpec.__default.LookupVisitsWFNodes#requires| |lookup#0@@4|)))) :qid |PivotBet.140:33| :skolemid |4578| :pattern ( (|PivotBetreeSpec.__default.LookupVisitsWFNodes#requires| |lookup#0@@4|)) )))
(assert  (=> true (forall ((|lookup#0@@5| T@U) ) (!  (=> (and (= (type |lookup#0@@5|) (SeqType BoxType)) (or (|PivotBetreeSpec.__default.LookupVisitsWFNodes#canCall| |lookup#0@@5|) ($Is |lookup#0@@5| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) (and (forall ((|i#0@@192| Int) ) (!  (=> (< |i#0@@192| (|Seq#Length| |lookup#0@@5|)) (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@192|))) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@192|)))))) :qid |PivotBet.142:12| :skolemid |4579| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@192|))) )) (and (=> (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@5|) (forall ((|i#0@@193| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@193|) (< |i#0@@193| (|Seq#Length| |lookup#0@@5|))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@193|)))))) :qid |PivotBet.142:12| :skolemid |4580| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@193|))) ))) (=> (forall ((|i#0@@194| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@194|) (< |i#0@@194| (|Seq#Length| |lookup#0@@5|))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@194|)))))) :qid |PivotBet.142:12| :skolemid |4580| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@5| |i#0@@194|))) )) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@5|))))) :qid |PivotBet.140:33| :skolemid |4581| :pattern ( (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@5|)) ))))
(assert  (=> true (forall ((|lookup#0@@6| T@U) ) (!  (=> (and (= (type |lookup#0@@6|) (SeqType BoxType)) (or (|PivotBetreeSpec.__default.LookupVisitsWFNodes#canCall| (Lit |lookup#0@@6|)) ($Is |lookup#0@@6| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) (and (forall ((|i#1@@96| Int) ) (!  (=> (< |i#1@@96| (|Seq#Length| (Lit |lookup#0@@6|))) (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@6|) |i#1@@96|))) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@6|) |i#1@@96|)))))) :qid |PivotBet.142:12| :skolemid |4582| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@6| |i#1@@96|))) )) (and (=> (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@6|)) (forall ((|i#1@@97| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@97|) (< |i#1@@97| (|Seq#Length| (Lit |lookup#0@@6|)))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@6|) |i#1@@97|)))))) :qid |PivotBet.142:12| :skolemid |4583| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@6| |i#1@@97|))) ))) (=> (forall ((|i#1@@98| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@98|) (< |i#1@@98| (|Seq#Length| (Lit |lookup#0@@6|)))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@6|) |i#1@@98|)))))) :qid |PivotBet.142:12| :skolemid |4583| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@6| |i#1@@98|))) )) (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@6|)))))) :qid |PivotBet.140:33| :weight 3 :skolemid |4584| :pattern ( (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@6|))) ))))
(assert  (=> true (forall ((|lookup#0@@7| T@U) (|key#0@@240| T@U) ) (!  (=> (and (and (= (type |lookup#0@@7|) (SeqType BoxType)) (= (type |key#0@@240|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#canCall| |lookup#0@@7| |key#0@@240|) (and (and ($Is |lookup#0@@7| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@240| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@7|)))) true) :qid |PivotBet.145:47| :skolemid |4585| :pattern ( (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets |lookup#0@@7| |key#0@@240|)) ))))
(assert (forall ((|lookup#0@@8| T@U) (|key#0@@241| T@U) ) (!  (=> (and (and (= (type |lookup#0@@8|) (SeqType BoxType)) (= (type |key#0@@241|) (SeqType BoxType))) (and ($Is |lookup#0@@8| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@241| Tclass.KeyType.Key))) (and (=> (|PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#requires| |lookup#0@@8| |key#0@@241|) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@8|)) (=> (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@8|) (|PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#requires| |lookup#0@@8| |key#0@@241|)))) :qid |PivotBet.145:47| :skolemid |4586| :pattern ( (|PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#requires| |lookup#0@@8| |key#0@@241|)) )))
(assert  (=> true (forall ((|lookup#0@@9| T@U) (|key#0@@242| T@U) ) (!  (=> (and (and (= (type |lookup#0@@9|) (SeqType BoxType)) (= (type |key#0@@242|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#canCall| |lookup#0@@9| |key#0@@242|) (and (and ($Is |lookup#0@@9| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@242| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@9|)))) (and (forall ((|i#0@@195| Int) ) (!  (=> (< |i#0@@195| (|Seq#Length| |lookup#0@@9|)) (and (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@195|))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@195|))))) (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@195|))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@195|))))) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@195|)))) |key#0@@242|))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@195|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@195|)))) |key#0@@242|)))))) :qid |PivotBet.148:12| :skolemid |4587| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@195|))) )) (and (=> (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets |lookup#0@@9| |key#0@@242|) (forall ((|i#0@@196| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@196|) (< |i#0@@196| (|Seq#Length| |lookup#0@@9|))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@196|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@196|)))) |key#0@@242|)))))) :qid |PivotBet.148:12| :skolemid |4588| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@196|))) ))) (=> (forall ((|i#0@@197| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@197|) (< |i#0@@197| (|Seq#Length| |lookup#0@@9|))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@197|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@197|)))) |key#0@@242|)))))) :qid |PivotBet.148:12| :skolemid |4588| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@9| |i#0@@197|))) )) (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets |lookup#0@@9| |key#0@@242|))))) :qid |PivotBet.145:47| :skolemid |4589| :pattern ( (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets |lookup#0@@9| |key#0@@242|)) ))))
(assert  (=> true (forall ((|lookup#0@@10| T@U) (|key#0@@243| T@U) ) (!  (=> (and (and (= (type |lookup#0@@10|) (SeqType BoxType)) (= (type |key#0@@243|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#canCall| (Lit |lookup#0@@10|) (Lit |key#0@@243|)) (and (and ($Is |lookup#0@@10| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@243| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@10|)))))))) (and (forall ((|i#1@@99| Int) ) (!  (=> (< |i#1@@99| (|Seq#Length| (Lit |lookup#0@@10|))) (and (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@99|))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@99|))))) (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@99|))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@99|))))) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@99|)))) (Lit |key#0@@243|)))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@99|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@99|)))) (Lit |key#0@@243|))))))) :qid |PivotBet.148:12| :skolemid |4590| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@10| |i#1@@99|))) )) (and (=> (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (Lit |lookup#0@@10|) (Lit |key#0@@243|)) (forall ((|i#1@@100| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@100|) (< |i#1@@100| (|Seq#Length| (Lit |lookup#0@@10|)))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@100|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@100|)))) (Lit |key#0@@243|))))))) :qid |PivotBet.148:12| :skolemid |4591| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@10| |i#1@@100|))) ))) (=> (forall ((|i#1@@101| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@101|) (< |i#1@@101| (|Seq#Length| (Lit |lookup#0@@10|)))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@101|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@10|) |i#1@@101|)))) (Lit |key#0@@243|))))))) :qid |PivotBet.148:12| :skolemid |4591| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@10| |i#1@@101|))) )) (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (Lit |lookup#0@@10|) (Lit |key#0@@243|)))))) :qid |PivotBet.145:47| :weight 3 :skolemid |4592| :pattern ( (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (Lit |lookup#0@@10|) (Lit |key#0@@243|))) ))))
(assert  (=> true (forall ((|key#0@@244| T@U) (|lookup#0@@11| T@U) (|idx#0@@7| Int) ) (!  (=> (and (and (= (type |key#0@@244|) (SeqType BoxType)) (= (type |lookup#0@@11|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| |key#0@@244| |lookup#0@@11| |idx#0@@7|) (and (and ($Is |key#0@@244| Tclass.KeyType.Key) ($Is |lookup#0@@11| (TSeq Tclass.PivotBetreeGraph.ReadOp))) (and (and (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@11| |idx#0@@7|) (< |idx#0@@7| (- (|Seq#Length| |lookup#0@@11|) 1))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@11| |idx#0@@7|)))))))) true) :qid |PivotBet.151:42| :skolemid |4593| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@244| |lookup#0@@11| |idx#0@@7|)) ))))
(assert (forall ((|key#0@@245| T@U) (|lookup#0@@12| T@U) (|idx#0@@8| Int) ) (!  (=> (and (and (= (type |key#0@@245|) (SeqType BoxType)) (= (type |lookup#0@@12|) (SeqType BoxType))) (and ($Is |key#0@@245| Tclass.KeyType.Key) ($Is |lookup#0@@12| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) (and (=> (|PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#requires| |key#0@@245| |lookup#0@@12| |idx#0@@8|) (and (and (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@12| |idx#0@@8|) (< |idx#0@@8| (- (|Seq#Length| |lookup#0@@12|) 1))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@12| |idx#0@@8|)))))) (=> (and (and (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@12| |idx#0@@8|) (< |idx#0@@8| (- (|Seq#Length| |lookup#0@@12|) 1))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@12| |idx#0@@8|))))) (|PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#requires| |key#0@@245| |lookup#0@@12| |idx#0@@8|)))) :qid |PivotBet.151:42| :skolemid |4594| :pattern ( (|PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#requires| |key#0@@245| |lookup#0@@12| |idx#0@@8|)) )))
(assert  (=> true (forall ((|key#0@@246| T@U) (|lookup#0@@13| T@U) (|idx#0@@9| Int) ) (!  (=> (and (and (= (type |key#0@@246|) (SeqType BoxType)) (= (type |lookup#0@@13|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| |key#0@@246| |lookup#0@@13| |idx#0@@9|) (and (and ($Is |key#0@@246| Tclass.KeyType.Key) ($Is |lookup#0@@13| (TSeq Tclass.PivotBetreeGraph.ReadOp))) (and (and (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@13| |idx#0@@9|) (< |idx#0@@9| (- (|Seq#Length| |lookup#0@@13|) 1))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|)))))))) (and (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|))))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|))))) (and (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|))))) (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|))))) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|)))) |key#0@@246|))) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| (+ |idx#0@@9| 1))))))) (and (=> (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@246| |lookup#0@@13| |idx#0@@9|) (and (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|))))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|)))))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|)))) |key#0@@246|)) (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| (+ |idx#0@@9| 1))))))) (=> (and (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|))))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|)))))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| |idx#0@@9|)))) |key#0@@246|)) (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@13| (+ |idx#0@@9| 1)))))) (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@246| |lookup#0@@13| |idx#0@@9|))))) :qid |PivotBet.151:42| :skolemid |4595| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@246| |lookup#0@@13| |idx#0@@9|)) ))))
(assert  (=> true (forall ((|key#0@@247| T@U) (|lookup#0@@14| T@U) (|idx#0@@10| Int) ) (!  (=> (and (and (= (type |key#0@@247|) (SeqType BoxType)) (= (type |lookup#0@@14|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| (Lit |key#0@@247|) (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)) (and (and ($Is |key#0@@247| Tclass.KeyType.Key) ($Is |lookup#0@@14| (TSeq Tclass.PivotBetreeGraph.ReadOp))) (and (and (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidLayerIndex (Lit |lookup#0@@14|) (LitInt |idx#0@@10|))))) (< |idx#0@@10| (- (|Seq#Length| (Lit |lookup#0@@14|)) 1))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|))))))))) (and (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))))) (and (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))))) (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))))) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|))))) (Lit |key#0@@247|)))) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt (+ |idx#0@@10| 1)))))))) (and (=> (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer (Lit |key#0@@247|) (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)) (and (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|))))))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|))))) (Lit |key#0@@247|))) (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt (+ |idx#0@@10| 1)))))))) (=> (and (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|))))))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt |idx#0@@10|))))) (Lit |key#0@@247|))) (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@14|) (LitInt (+ |idx#0@@10| 1))))))) (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer (Lit |key#0@@247|) (Lit |lookup#0@@14|) (LitInt |idx#0@@10|)))))) :qid |PivotBet.151:42| :weight 3 :skolemid |4596| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer (Lit |key#0@@247|) (Lit |lookup#0@@14|) (LitInt |idx#0@@10|))) ))))
(assert  (=> true (forall ((|key#0@@248| T@U) (|lookup#0@@15| T@U) ) (!  (=> (and (and (= (type |key#0@@248|) (SeqType BoxType)) (= (type |lookup#0@@15|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupFollowsChildRefs#canCall| |key#0@@248| |lookup#0@@15|) (and (and ($Is |key#0@@248| Tclass.KeyType.Key) ($Is |lookup#0@@15| (TSeq Tclass.PivotBetreeGraph.ReadOp))) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@15|)))) true) :qid |PivotBet.160:36| :skolemid |4597| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefs |key#0@@248| |lookup#0@@15|)) ))))
(assert (forall ((|key#0@@249| T@U) (|lookup#0@@16| T@U) ) (!  (=> (and (and (= (type |key#0@@249|) (SeqType BoxType)) (= (type |lookup#0@@16|) (SeqType BoxType))) (and ($Is |key#0@@249| Tclass.KeyType.Key) ($Is |lookup#0@@16| (TSeq Tclass.PivotBetreeGraph.ReadOp)))) (and (=> (|PivotBetreeSpec.__default.LookupFollowsChildRefs#requires| |key#0@@249| |lookup#0@@16|) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@16|)) (=> (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@16|) (|PivotBetreeSpec.__default.LookupFollowsChildRefs#requires| |key#0@@249| |lookup#0@@16|)))) :qid |PivotBet.160:36| :skolemid |4598| :pattern ( (|PivotBetreeSpec.__default.LookupFollowsChildRefs#requires| |key#0@@249| |lookup#0@@16|)) )))
(assert  (=> true (forall ((|key#0@@250| T@U) (|lookup#0@@17| T@U) ) (!  (=> (and (and (= (type |key#0@@250|) (SeqType BoxType)) (= (type |lookup#0@@17|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupFollowsChildRefs#canCall| |key#0@@250| |lookup#0@@17|) (and (and ($Is |key#0@@250| Tclass.KeyType.Key) ($Is |lookup#0@@17| (TSeq Tclass.PivotBetreeGraph.ReadOp))) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@17|)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|idx#0@@11| Int) ) (!  (and (|PivotBetreeSpec.__default.ValidLayerIndex#canCall| |lookup#0@@17| |idx#0@@11|) (=> (< |idx#0@@11| (- (|Seq#Length| |lookup#0@@17|) 1)) (|PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| |key#0@@250| |lookup#0@@17| |idx#0@@11|))) :qid |PivotBet.163:16| :skolemid |4599| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@250| |lookup#0@@17| |idx#0@@11|)) :pattern ( (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@17| |idx#0@@11|)) ))) (and (=> (PivotBetreeSpec.__default.LookupFollowsChildRefs |key#0@@250| |lookup#0@@17|) (and true (forall ((|idx#0@@12| Int) ) (!  (=> true (=> (and (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@17| |idx#0@@12|) (< |idx#0@@12| (- (|Seq#Length| |lookup#0@@17|) 1))) (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@250| |lookup#0@@17| |idx#0@@12|))) :qid |PivotBet.163:16| :skolemid |4600| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@250| |lookup#0@@17| |idx#0@@12|)) :pattern ( (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@17| |idx#0@@12|)) )))) (=> (and true (forall ((|idx#0@@13| Int) ) (!  (=> true (=> (and (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@17| |idx#0@@13|) (< |idx#0@@13| (- (|Seq#Length| |lookup#0@@17|) 1))) (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@250| |lookup#0@@17| |idx#0@@13|))) :qid |PivotBet.163:16| :skolemid |4600| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@250| |lookup#0@@17| |idx#0@@13|)) :pattern ( (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@17| |idx#0@@13|)) ))) (PivotBetreeSpec.__default.LookupFollowsChildRefs |key#0@@250| |lookup#0@@17|))))) :qid |PivotBet.160:36| :skolemid |4601| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefs |key#0@@250| |lookup#0@@17|)) ))))
(assert  (=> true (forall ((|key#0@@251| T@U) (|lookup#0@@18| T@U) ) (!  (=> (and (and (= (type |key#0@@251|) (SeqType BoxType)) (= (type |lookup#0@@18|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupFollowsChildRefs#canCall| (Lit |key#0@@251|) (Lit |lookup#0@@18|)) (and (and ($Is |key#0@@251| Tclass.KeyType.Key) ($Is |lookup#0@@18| (TSeq Tclass.PivotBetreeGraph.ReadOp))) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@18|)))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|idx#1| Int) ) (!  (and (|PivotBetreeSpec.__default.ValidLayerIndex#canCall| (Lit |lookup#0@@18|) |idx#1|) (=> (< |idx#1| (- (|Seq#Length| (Lit |lookup#0@@18|)) 1)) (|PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer#canCall| (Lit |key#0@@251|) (Lit |lookup#0@@18|) |idx#1|))) :qid |PivotBet.163:16| :skolemid |4602| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@251| |lookup#0@@18| |idx#1|)) :pattern ( (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@18| |idx#1|)) ))) (and (=> (PivotBetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@251|) (Lit |lookup#0@@18|)) (and true (forall ((|idx#1@@0| Int) ) (!  (=> true (=> (and (PivotBetreeSpec.__default.ValidLayerIndex (Lit |lookup#0@@18|) |idx#1@@0|) (< |idx#1@@0| (- (|Seq#Length| (Lit |lookup#0@@18|)) 1))) (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer (Lit |key#0@@251|) (Lit |lookup#0@@18|) |idx#1@@0|))) :qid |PivotBet.163:16| :skolemid |4603| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@251| |lookup#0@@18| |idx#1@@0|)) :pattern ( (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@18| |idx#1@@0|)) )))) (=> (and true (forall ((|idx#1@@1| Int) ) (!  (=> true (=> (and (PivotBetreeSpec.__default.ValidLayerIndex (Lit |lookup#0@@18|) |idx#1@@1|) (< |idx#1@@1| (- (|Seq#Length| (Lit |lookup#0@@18|)) 1))) (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer (Lit |key#0@@251|) (Lit |lookup#0@@18|) |idx#1@@1|))) :qid |PivotBet.163:16| :skolemid |4603| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefAtLayer |key#0@@251| |lookup#0@@18| |idx#1@@1|)) :pattern ( (PivotBetreeSpec.__default.ValidLayerIndex |lookup#0@@18| |idx#1@@1|)) ))) (PivotBetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@251|) (Lit |lookup#0@@18|)))))) :qid |PivotBet.160:36| :weight 3 :skolemid |4604| :pattern ( (PivotBetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@251|) (Lit |lookup#0@@18|))) ))))
(assert (forall ((arg0@@648 T@U) (arg1@@348 T@U) ) (! (= (type (PivotBetreeSpec.__default.NodeLookup arg0@@648 arg1@@348)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.NodeLookup| :pattern ( (PivotBetreeSpec.__default.NodeLookup arg0@@648 arg1@@348)) )))
(assert  (=> true (forall ((|node#0@@27| T@U) (|key#0@@252| T@U) ) (!  (=> (and (and (= (type |node#0@@27|) DatatypeTypeType) (= (type |key#0@@252|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.NodeLookup#canCall| |node#0@@27| |key#0@@252|) (and (and ($Is |node#0@@27| Tclass.PivotBetreeGraph.Node) ($Is |key#0@@252| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets |node#0@@27|) (PivotBetreeGraph.Node.pivotTable |node#0@@27|))))) ($Is (PivotBetreeSpec.__default.NodeLookup |node#0@@27| |key#0@@252|) Tclass.ValueMessage.Message)) :qid |PivotBet.166:23| :skolemid |4605| :pattern ( (PivotBetreeSpec.__default.NodeLookup |node#0@@27| |key#0@@252|)) ))))
(assert (forall ((|node#0@@28| T@U) (|key#0@@253| T@U) ) (!  (=> (and (and (= (type |node#0@@28|) DatatypeTypeType) (= (type |key#0@@253|) (SeqType BoxType))) (and ($Is |node#0@@28| Tclass.PivotBetreeGraph.Node) ($Is |key#0@@253| Tclass.KeyType.Key))) (and (=> (|PivotBetreeSpec.__default.NodeLookup#requires| |node#0@@28| |key#0@@253|) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets |node#0@@28|) (PivotBetreeGraph.Node.pivotTable |node#0@@28|))) (=> (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets |node#0@@28|) (PivotBetreeGraph.Node.pivotTable |node#0@@28|)) (|PivotBetreeSpec.__default.NodeLookup#requires| |node#0@@28| |key#0@@253|)))) :qid |PivotBet.166:23| :skolemid |4606| :pattern ( (|PivotBetreeSpec.__default.NodeLookup#requires| |node#0@@28| |key#0@@253|)) )))
(assert  (=> true (forall ((|node#0@@29| T@U) (|key#0@@254| T@U) ) (!  (=> (and (and (= (type |node#0@@29|) DatatypeTypeType) (= (type |key#0@@254|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.NodeLookup#canCall| |node#0@@29| |key#0@@254|) (and (and ($Is |node#0@@29| Tclass.PivotBetreeGraph.Node) ($Is |key#0@@254| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets |node#0@@29|) (PivotBetreeGraph.Node.pivotTable |node#0@@29|))))) (and (and (and (PivotBetreeGraph.Node.Node_q |node#0@@29|) (PivotBetreeGraph.Node.Node_q |node#0@@29|)) (|BucketsLib.__default.BucketListGet#canCall| (PivotBetreeGraph.Node.buckets |node#0@@29|) (PivotBetreeGraph.Node.pivotTable |node#0@@29|) |key#0@@254|)) (= (PivotBetreeSpec.__default.NodeLookup |node#0@@29| |key#0@@254|) (BucketsLib.__default.BucketListGet (PivotBetreeGraph.Node.buckets |node#0@@29|) (PivotBetreeGraph.Node.pivotTable |node#0@@29|) |key#0@@254|)))) :qid |PivotBet.166:23| :skolemid |4607| :pattern ( (PivotBetreeSpec.__default.NodeLookup |node#0@@29| |key#0@@254|)) ))))
(assert  (=> true (forall ((|node#0@@30| T@U) (|key#0@@255| T@U) ) (!  (=> (and (and (= (type |node#0@@30|) DatatypeTypeType) (= (type |key#0@@255|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.NodeLookup#canCall| (Lit |node#0@@30|) (Lit |key#0@@255|)) (and (and ($Is |node#0@@30| Tclass.PivotBetreeGraph.Node) ($Is |key#0@@255| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@30|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@30|)))))))))) (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@30|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@30|))) (|BucketsLib.__default.BucketListGet#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@30|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@30|))) (Lit |key#0@@255|))) (= (PivotBetreeSpec.__default.NodeLookup (Lit |node#0@@30|) (Lit |key#0@@255|)) (Lit (BucketsLib.__default.BucketListGet (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@30|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@30|))) (Lit |key#0@@255|)))))) :qid |PivotBet.166:23| :weight 3 :skolemid |4608| :pattern ( (PivotBetreeSpec.__default.NodeLookup (Lit |node#0@@30|) (Lit |key#0@@255|))) ))))
(assert (forall ((arg0@@649 T@U) (arg1@@349 T@U) (arg2@@238 T@U) ) (! (= (type (PivotBetreeSpec.__default.InterpretLookup arg0@@649 arg1@@349 arg2@@238)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.InterpretLookup| :pattern ( (PivotBetreeSpec.__default.InterpretLookup arg0@@649 arg1@@349 arg2@@238)) )))
(assert (forall (($ly@@744 T@U) (|lookup#0@@19| T@U) (|key#0@@256| T@U) ) (!  (=> (and (and (= (type $ly@@744) LayerTypeType) (= (type |lookup#0@@19|) (SeqType BoxType))) (= (type |key#0@@256|) (SeqType BoxType))) (= (PivotBetreeSpec.__default.InterpretLookup ($LS $ly@@744) |lookup#0@@19| |key#0@@256|) (PivotBetreeSpec.__default.InterpretLookup $ly@@744 |lookup#0@@19| |key#0@@256|))) :qid |PivotBet.172:12| :skolemid |4609| :pattern ( (PivotBetreeSpec.__default.InterpretLookup ($LS $ly@@744) |lookup#0@@19| |key#0@@256|)) )))
(assert (forall (($ly@@745 T@U) (|lookup#0@@20| T@U) (|key#0@@257| T@U) ) (!  (=> (and (and (= (type $ly@@745) LayerTypeType) (= (type |lookup#0@@20|) (SeqType BoxType))) (= (type |key#0@@257|) (SeqType BoxType))) (= (PivotBetreeSpec.__default.InterpretLookup $ly@@745 |lookup#0@@20| |key#0@@257|) (PivotBetreeSpec.__default.InterpretLookup $LZ |lookup#0@@20| |key#0@@257|))) :qid |PivotBet.172:12| :skolemid |4610| :pattern ( (PivotBetreeSpec.__default.InterpretLookup (AsFuelBottom $ly@@745) |lookup#0@@20| |key#0@@257|)) )))
(assert  (=> true (forall (($ly@@746 T@U) (|lookup#0@@21| T@U) (|key#0@@258| T@U) ) (!  (=> (and (and (and (= (type $ly@@746) LayerTypeType) (= (type |lookup#0@@21|) (SeqType BoxType))) (= (type |key#0@@258|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.InterpretLookup#canCall| |lookup#0@@21| |key#0@@258|) (and (and ($Is |lookup#0@@21| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@258| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@21|)))) ($Is (PivotBetreeSpec.__default.InterpretLookup $ly@@746 |lookup#0@@21| |key#0@@258|) Tclass.ValueMessage.Message)) :qid |PivotBet.172:12| :skolemid |4611| :pattern ( (PivotBetreeSpec.__default.InterpretLookup $ly@@746 |lookup#0@@21| |key#0@@258|)) ))))
(assert (forall (($ly@@747 T@U) (|lookup#0@@22| T@U) (|key#0@@259| T@U) ) (!  (=> (and (and (and (= (type $ly@@747) LayerTypeType) (= (type |lookup#0@@22|) (SeqType BoxType))) (= (type |key#0@@259|) (SeqType BoxType))) (and ($Is |lookup#0@@22| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@259| Tclass.KeyType.Key))) (and (=> (|PivotBetreeSpec.__default.InterpretLookup#requires| $ly@@747 |lookup#0@@22| |key#0@@259|) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@22|)) (=> (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@22|) (|PivotBetreeSpec.__default.InterpretLookup#requires| $ly@@747 |lookup#0@@22| |key#0@@259|)))) :qid |PivotBet.172:12| :skolemid |4612| :pattern ( (|PivotBetreeSpec.__default.InterpretLookup#requires| $ly@@747 |lookup#0@@22| |key#0@@259|)) )))
(assert  (=> true (forall (($ly@@748 T@U) (|lookup#0@@23| T@U) (|key#0@@260| T@U) ) (!  (=> (and (and (and (= (type $ly@@748) LayerTypeType) (= (type |lookup#0@@23|) (SeqType BoxType))) (= (type |key#0@@260|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.InterpretLookup#canCall| |lookup#0@@23| |key#0@@260|) (and (and ($Is |lookup#0@@23| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@260| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@23|)))) (and (and (=> (= (|Seq#Length| |lookup#0@@23|) (LitInt 0)) |ValueMessage.__default.NopDelta#canCall|) (=> (not (= (|Seq#Length| |lookup#0@@23|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.PivotBetreeGraph.ReadOp |lookup#0@@23|) (|PivotBetreeSpec.__default.InterpretLookup#canCall| (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp |lookup#0@@23|) |key#0@@260|)) (and (and (|Sequences.__default.Last#canCall| Tclass.PivotBetreeGraph.ReadOp |lookup#0@@23|) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@23|)))) (|PivotBetreeSpec.__default.NodeLookup#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@23|))) |key#0@@260|))) (|ValueMessage.__default.Merge#canCall| (PivotBetreeSpec.__default.InterpretLookup $ly@@748 (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp |lookup#0@@23|) |key#0@@260|) (PivotBetreeSpec.__default.NodeLookup (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@23|))) |key#0@@260|))))) (= (PivotBetreeSpec.__default.InterpretLookup ($LS $ly@@748) |lookup#0@@23| |key#0@@260|) (ite (= (|Seq#Length| |lookup#0@@23|) (LitInt 0)) (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta)) (ValueMessage.__default.Merge (PivotBetreeSpec.__default.InterpretLookup $ly@@748 (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp |lookup#0@@23|) |key#0@@260|) (PivotBetreeSpec.__default.NodeLookup (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@23|))) |key#0@@260|)))))) :qid |PivotBet.172:12| :skolemid |4613| :pattern ( (PivotBetreeSpec.__default.InterpretLookup ($LS $ly@@748) |lookup#0@@23| |key#0@@260|)) ))))
(assert  (=> true (forall (($ly@@749 T@U) (|lookup#0@@24| T@U) (|key#0@@261| T@U) ) (!  (=> (and (and (and (= (type $ly@@749) LayerTypeType) (= (type |lookup#0@@24|) (SeqType BoxType))) (= (type |key#0@@261|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.InterpretLookup#canCall| (Lit |lookup#0@@24|) (Lit |key#0@@261|)) (and (and ($Is |lookup#0@@24| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@261| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@24|)))))))) (and (and (=> (= (|Seq#Length| (Lit |lookup#0@@24|)) (LitInt 0)) |ValueMessage.__default.NopDelta#canCall|) (=> (not (= (|Seq#Length| (Lit |lookup#0@@24|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@24|)) (|PivotBetreeSpec.__default.InterpretLookup#canCall| (Lit (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@24|))) (Lit |key#0@@261|))) (and (and (|Sequences.__default.Last#canCall| Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@24|)) (PivotBetreeGraph.ReadOp.ReadOp_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@24|)))))) (|PivotBetreeSpec.__default.NodeLookup#canCall| (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@24|)))))) (Lit |key#0@@261|)))) (|ValueMessage.__default.Merge#canCall| (Lit (PivotBetreeSpec.__default.InterpretLookup ($LS $ly@@749) (Lit (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@24|))) (Lit |key#0@@261|))) (Lit (PivotBetreeSpec.__default.NodeLookup (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@24|)))))) (Lit |key#0@@261|))))))) (= (PivotBetreeSpec.__default.InterpretLookup ($LS $ly@@749) (Lit |lookup#0@@24|) (Lit |key#0@@261|)) (ite (= (|Seq#Length| (Lit |lookup#0@@24|)) (LitInt 0)) (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta)) (ValueMessage.__default.Merge (Lit (PivotBetreeSpec.__default.InterpretLookup ($LS $ly@@749) (Lit (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@24|))) (Lit |key#0@@261|))) (Lit (PivotBetreeSpec.__default.NodeLookup (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@24|)))))) (Lit |key#0@@261|)))))))) :qid |PivotBet.172:12| :weight 3 :skolemid |4614| :pattern ( (PivotBetreeSpec.__default.InterpretLookup ($LS $ly@@749) (Lit |lookup#0@@24|) (Lit |key#0@@261|))) ))))
(assert (forall ((arg0@@650 T@U) (arg1@@350 T@U) ) (! (= (type (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf arg0@@650 arg1@@350)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf| :pattern ( (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf arg0@@650 arg1@@350)) )))
(assert  (=> true (forall ((|lookup#0@@25| T@U) (|key#0@@262| T@U) ) (!  (=> (and (and (= (type |lookup#0@@25|) (SeqType BoxType)) (= (type |key#0@@262|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#canCall| |lookup#0@@25| |key#0@@262|) (and (and ($Is |lookup#0@@25| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@262| Tclass.KeyType.Key)) (and (> (|Seq#Length| |lookup#0@@25|) 0) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@25|))))) ($Is (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf |lookup#0@@25| |key#0@@262|) Tclass.ValueMessage.Message)) :qid |PivotBet.181:45| :skolemid |4615| :pattern ( (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf |lookup#0@@25| |key#0@@262|)) ))))
(assert (forall ((|lookup#0@@26| T@U) (|key#0@@263| T@U) ) (!  (=> (and (and (= (type |lookup#0@@26|) (SeqType BoxType)) (= (type |key#0@@263|) (SeqType BoxType))) (and ($Is |lookup#0@@26| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@263| Tclass.KeyType.Key))) (and (=> (|PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#requires| |lookup#0@@26| |key#0@@263|) (and (> (|Seq#Length| |lookup#0@@26|) 0) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@26|))) (=> (and (> (|Seq#Length| |lookup#0@@26|) 0) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@26|)) (|PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#requires| |lookup#0@@26| |key#0@@263|)))) :qid |PivotBet.181:45| :skolemid |4616| :pattern ( (|PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#requires| |lookup#0@@26| |key#0@@263|)) )))
(assert  (=> true (forall ((|lookup#0@@27| T@U) (|key#0@@264| T@U) ) (!  (=> (and (and (= (type |lookup#0@@27|) (SeqType BoxType)) (= (type |key#0@@264|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#canCall| |lookup#0@@27| |key#0@@264|) (and (and ($Is |lookup#0@@27| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@264| Tclass.KeyType.Key)) (and (> (|Seq#Length| |lookup#0@@27|) 0) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@27|))))) (and (and (and (and (and (|Sequences.__default.Last#canCall| Tclass.PivotBetreeGraph.ReadOp |lookup#0@@27|) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@27|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@27|))))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@27|))))) (|PivotBetreeSpec.__default.InterpretLookup#canCall| |lookup#0@@27| |key#0@@264|))) (=> (not (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@27|)))))) (and (and (|PivotBetreeSpec.__default.InterpretLookup#canCall| |lookup#0@@27| |key#0@@264|) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| (PivotBetreeSpec.__default.InterpretLookup ($LS $LZ) |lookup#0@@27| |key#0@@264|) (Lit ValueMessage.__default.DefineDefault))))) (= (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf |lookup#0@@27| |key#0@@264|) (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@27|))))) (PivotBetreeSpec.__default.InterpretLookup ($LS $LZ) |lookup#0@@27| |key#0@@264|) (ValueMessage.__default.Merge (PivotBetreeSpec.__default.InterpretLookup ($LS $LZ) |lookup#0@@27| |key#0@@264|) (Lit ValueMessage.__default.DefineDefault)))))) :qid |PivotBet.181:45| :skolemid |4617| :pattern ( (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf |lookup#0@@27| |key#0@@264|)) ))))
(assert  (=> true (forall ((|lookup#0@@28| T@U) (|key#0@@265| T@U) ) (!  (=> (and (and (= (type |lookup#0@@28|) (SeqType BoxType)) (= (type |key#0@@265|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#canCall| (Lit |lookup#0@@28|) (Lit |key#0@@265|)) (and (and ($Is |lookup#0@@28| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@265| Tclass.KeyType.Key)) (and (> (|Seq#Length| (Lit |lookup#0@@28|)) 0) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@28|))))))))) (and (and (and (and (and (|Sequences.__default.Last#canCall| Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@28|)) (PivotBetreeGraph.ReadOp.ReadOp_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@28|)))))) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@28|)))))))) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@28|)))))))))))) (|PivotBetreeSpec.__default.InterpretLookup#canCall| (Lit |lookup#0@@28|) (Lit |key#0@@265|)))) (=> (not (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@28|))))))))))))) (and (and (|PivotBetreeSpec.__default.InterpretLookup#canCall| (Lit |lookup#0@@28|) (Lit |key#0@@265|)) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| (Lit (PivotBetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit |lookup#0@@28|) (Lit |key#0@@265|))) (Lit ValueMessage.__default.DefineDefault))))) (= (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf (Lit |lookup#0@@28|) (Lit |key#0@@265|)) (ite (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@28|))))))))) (PivotBetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit |lookup#0@@28|) (Lit |key#0@@265|)) (ValueMessage.__default.Merge (Lit (PivotBetreeSpec.__default.InterpretLookup ($LS $LZ) (Lit |lookup#0@@28|) (Lit |key#0@@265|))) (Lit ValueMessage.__default.DefineDefault)))))) :qid |PivotBet.181:45| :weight 3 :skolemid |4618| :pattern ( (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf (Lit |lookup#0@@28|) (Lit |key#0@@265|))) ))))
(assert  (=> true (forall ((|lookup#0@@29| T@U) (|key#0@@266| T@U) ) (!  (=> (and (and (= (type |lookup#0@@29|) (SeqType BoxType)) (= (type |key#0@@266|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.WFLookupForKey#canCall| |lookup#0@@29| |key#0@@266|) (and ($Is |lookup#0@@29| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@266| Tclass.KeyType.Key)))) true) :qid |PivotBet.191:28| :skolemid |4619| :pattern ( (PivotBetreeSpec.__default.WFLookupForKey |lookup#0@@29| |key#0@@266|)) ))))
(assert (forall ((|lookup#0@@30| T@U) (|key#0@@267| T@U) ) (!  (=> (and (and (= (type |lookup#0@@30|) (SeqType BoxType)) (= (type |key#0@@267|) (SeqType BoxType))) (and ($Is |lookup#0@@30| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@267| Tclass.KeyType.Key))) (and (=> (|PivotBetreeSpec.__default.WFLookupForKey#requires| |lookup#0@@30| |key#0@@267|) true) (=> true (|PivotBetreeSpec.__default.WFLookupForKey#requires| |lookup#0@@30| |key#0@@267|)))) :qid |PivotBet.191:28| :skolemid |4620| :pattern ( (|PivotBetreeSpec.__default.WFLookupForKey#requires| |lookup#0@@30| |key#0@@267|)) )))
(assert  (=> true (forall ((|lookup#0@@31| T@U) (|key#0@@268| T@U) ) (!  (=> (and (and (= (type |lookup#0@@31|) (SeqType BoxType)) (= (type |key#0@@268|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.WFLookupForKey#canCall| |lookup#0@@31| |key#0@@268|) (and ($Is |lookup#0@@31| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@268| Tclass.KeyType.Key)))) (and (and (and (=> (> (|Seq#Length| |lookup#0@@31|) 0) (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@31| (LitInt 0)))) |PivotBetreeGraph.__default.Root#canCall|)) (=> (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@31| (LitInt 0)))) |PivotBetreeGraph.__default.Root#canCall|) (= (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@31| (LitInt 0)))) (Lit PivotBetreeGraph.__default.Root))) (|PivotBetreeSpec.__default.LookupVisitsWFNodes#canCall| |lookup#0@@31|))) (=> (and (|PivotBetreeSpec.__default.LookupVisitsWFNodes#canCall| |lookup#0@@31|) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@31|)) (|PivotBetreeSpec.__default.LookupFollowsChildRefs#canCall| |key#0@@268| |lookup#0@@31|))) (and (=> (PivotBetreeSpec.__default.WFLookupForKey |lookup#0@@31| |key#0@@268|) (and (and (and (> (|Seq#Length| |lookup#0@@31|) 0) (= (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@31| (LitInt 0)))) (Lit PivotBetreeGraph.__default.Root))) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@31|)) (PivotBetreeSpec.__default.LookupFollowsChildRefs |key#0@@268| |lookup#0@@31|))) (=> (and (and (and (> (|Seq#Length| |lookup#0@@31|) 0) (= (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| |lookup#0@@31| (LitInt 0)))) (Lit PivotBetreeGraph.__default.Root))) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@31|)) (PivotBetreeSpec.__default.LookupFollowsChildRefs |key#0@@268| |lookup#0@@31|)) (PivotBetreeSpec.__default.WFLookupForKey |lookup#0@@31| |key#0@@268|))))) :qid |PivotBet.191:28| :skolemid |4621| :pattern ( (PivotBetreeSpec.__default.WFLookupForKey |lookup#0@@31| |key#0@@268|)) ))))
(assert  (=> true (forall ((|lookup#0@@32| T@U) (|key#0@@269| T@U) ) (!  (=> (and (and (= (type |lookup#0@@32|) (SeqType BoxType)) (= (type |key#0@@269|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.WFLookupForKey#canCall| (Lit |lookup#0@@32|) (Lit |key#0@@269|)) (and ($Is |lookup#0@@32| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@269| Tclass.KeyType.Key)))) (and (and (and (=> (> (|Seq#Length| (Lit |lookup#0@@32|)) 0) (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@32|) (LitInt 0)))) |PivotBetreeGraph.__default.Root#canCall|)) (=> (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@32|) (LitInt 0)))) |PivotBetreeGraph.__default.Root#canCall|) (= (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@32|) (LitInt 0)))) (Lit PivotBetreeGraph.__default.Root))) (|PivotBetreeSpec.__default.LookupVisitsWFNodes#canCall| (Lit |lookup#0@@32|)))) (=> (and (|PivotBetreeSpec.__default.LookupVisitsWFNodes#canCall| (Lit |lookup#0@@32|)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@32|)))))) (|PivotBetreeSpec.__default.LookupFollowsChildRefs#canCall| (Lit |key#0@@269|) (Lit |lookup#0@@32|)))) (and (=> (PivotBetreeSpec.__default.WFLookupForKey (Lit |lookup#0@@32|) (Lit |key#0@@269|)) (and (and (and (> (|Seq#Length| (Lit |lookup#0@@32|)) 0) (= (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@32|) (LitInt 0)))) (Lit PivotBetreeGraph.__default.Root))) (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@32|))) (PivotBetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@269|) (Lit |lookup#0@@32|)))) (=> (and (and (and (> (|Seq#Length| (Lit |lookup#0@@32|)) 0) (= (PivotBetreeGraph.ReadOp.ref ($Unbox DatatypeTypeType (|Seq#Index| (Lit |lookup#0@@32|) (LitInt 0)))) (Lit PivotBetreeGraph.__default.Root))) (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@32|))) (PivotBetreeSpec.__default.LookupFollowsChildRefs (Lit |key#0@@269|) (Lit |lookup#0@@32|))) (PivotBetreeSpec.__default.WFLookupForKey (Lit |lookup#0@@32|) (Lit |key#0@@269|)))))) :qid |PivotBet.191:28| :weight 3 :skolemid |4622| :pattern ( (PivotBetreeSpec.__default.WFLookupForKey (Lit |lookup#0@@32|) (Lit |key#0@@269|))) ))))
(assert  (=> true (forall ((|q#0| T@U) ) (!  (=> (and (= (type |q#0|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidQuery#canCall| |q#0|) ($Is |q#0| Tclass.PivotBetreeSpec.LookupQuery))) true) :qid |PivotBet.199:24| :skolemid |4623| :pattern ( (PivotBetreeSpec.__default.ValidQuery |q#0|)) ))))
(assert (forall ((|q#0@@0| T@U) ) (!  (=> (and (= (type |q#0@@0|) DatatypeTypeType) ($Is |q#0@@0| Tclass.PivotBetreeSpec.LookupQuery)) (and (=> (|PivotBetreeSpec.__default.ValidQuery#requires| |q#0@@0|) true) (=> true (|PivotBetreeSpec.__default.ValidQuery#requires| |q#0@@0|)))) :qid |PivotBet.199:24| :skolemid |4624| :pattern ( (|PivotBetreeSpec.__default.ValidQuery#requires| |q#0@@0|)) )))
(assert  (=> true (forall ((|q#0@@1| T@U) ) (!  (=> (and (= (type |q#0@@1|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidQuery#canCall| |q#0@@1|) ($Is |q#0@@1| Tclass.PivotBetreeSpec.LookupQuery))) (and (and (and (and (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|) (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|)) (|PivotBetreeSpec.__default.WFLookupForKey#canCall| (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|))) (=> (PivotBetreeSpec.__default.WFLookupForKey (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|)) (and (and (and (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|) (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|)) (|PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#canCall| (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|))) (=> (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|)) (and (and (and (and (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|) (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|)) (|PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#canCall| (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|))) (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@1|)) (|PivotBetreeSpec.__default.BufferDefinesValue#canCall| (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|)) (PivotBetreeSpec.LookupQuery.value |q#0@@1|))))))) (and (=> (PivotBetreeSpec.__default.ValidQuery |q#0@@1|) (and (PivotBetreeSpec.__default.WFLookupForKey (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|)) (=> (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|)) (PivotBetreeSpec.__default.BufferDefinesValue (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|)) (PivotBetreeSpec.LookupQuery.value |q#0@@1|))))) (=> (and (PivotBetreeSpec.__default.WFLookupForKey (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|)) (=> (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|)) (PivotBetreeSpec.__default.BufferDefinesValue (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf (PivotBetreeSpec.LookupQuery.lookup |q#0@@1|) (PivotBetreeSpec.LookupQuery.key |q#0@@1|)) (PivotBetreeSpec.LookupQuery.value |q#0@@1|)))) (PivotBetreeSpec.__default.ValidQuery |q#0@@1|))))) :qid |PivotBet.199:24| :skolemid |4625| :pattern ( (PivotBetreeSpec.__default.ValidQuery |q#0@@1|)) ))))
(assert  (=> true (forall ((|q#0@@2| T@U) ) (!  (=> (and (= (type |q#0@@2|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidQuery#canCall| (Lit |q#0@@2|)) ($Is |q#0@@2| Tclass.PivotBetreeSpec.LookupQuery))) (and (and (and (and (PivotBetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|)) (PivotBetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|))) (|PivotBetreeSpec.__default.WFLookupForKey#canCall| (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFLookupForKey (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|))))))) (and (and (and (PivotBetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|)) (PivotBetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|))) (|PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets#canCall| (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|))))))) (and (and (and (and (PivotBetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|)) (PivotBetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|))) (|PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf#canCall| (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (PivotBetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@2|))) (|PivotBetreeSpec.__default.BufferDefinesValue#canCall| (Lit (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (Lit (PivotBetreeSpec.LookupQuery.value (Lit |q#0@@2|))))))))) (and (=> (PivotBetreeSpec.__default.ValidQuery (Lit |q#0@@2|)) (U_2_bool (Lit (bool_2_U  (and (PivotBetreeSpec.__default.WFLookupForKey (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|)))) (=> (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|)))) (PivotBetreeSpec.__default.BufferDefinesValue (Lit (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (Lit (PivotBetreeSpec.LookupQuery.value (Lit |q#0@@2|)))))))))) (=> (U_2_bool (Lit (bool_2_U  (and (PivotBetreeSpec.__default.WFLookupForKey (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|)))) (=> (PivotBetreeSpec.__default.LookupVisitsWellMarshalledBuckets (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|)))) (PivotBetreeSpec.__default.BufferDefinesValue (Lit (PivotBetreeSpec.__default.InterpretLookupAccountingForLeaf (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@2|))) (Lit (PivotBetreeSpec.LookupQuery.key (Lit |q#0@@2|))))) (Lit (PivotBetreeSpec.LookupQuery.value (Lit |q#0@@2|))))))))) (PivotBetreeSpec.__default.ValidQuery (Lit |q#0@@2|)))))) :qid |PivotBet.199:24| :weight 3 :skolemid |4626| :pattern ( (PivotBetreeSpec.__default.ValidQuery (Lit |q#0@@2|))) ))))
(assert (forall ((arg0@@651 T@U) ) (! (= (type (PivotBetreeSpec.__default.QueryReads arg0@@651)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.QueryReads| :pattern ( (PivotBetreeSpec.__default.QueryReads arg0@@651)) )))
(assert  (=> true (forall ((|q#0@@3| T@U) ) (!  (=> (and (= (type |q#0@@3|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.QueryReads#canCall| |q#0@@3|) ($Is |q#0@@3| Tclass.PivotBetreeSpec.LookupQuery))) ($Is (PivotBetreeSpec.__default.QueryReads |q#0@@3|) (TSeq Tclass.PivotBetreeGraph.ReadOp))) :qid |PivotBet.206:23| :skolemid |4627| :pattern ( (PivotBetreeSpec.__default.QueryReads |q#0@@3|)) ))))
(assert (forall ((|q#0@@4| T@U) ) (!  (=> (and (= (type |q#0@@4|) DatatypeTypeType) ($Is |q#0@@4| Tclass.PivotBetreeSpec.LookupQuery)) (and (=> (|PivotBetreeSpec.__default.QueryReads#requires| |q#0@@4|) true) (=> true (|PivotBetreeSpec.__default.QueryReads#requires| |q#0@@4|)))) :qid |PivotBet.206:23| :skolemid |4628| :pattern ( (|PivotBetreeSpec.__default.QueryReads#requires| |q#0@@4|)) )))
(assert  (=> true (forall ((|q#0@@5| T@U) ) (!  (=> (and (= (type |q#0@@5|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.QueryReads#canCall| |q#0@@5|) ($Is |q#0@@5| Tclass.PivotBetreeSpec.LookupQuery))) (and (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@5|) (= (PivotBetreeSpec.__default.QueryReads |q#0@@5|) (PivotBetreeSpec.LookupQuery.lookup |q#0@@5|)))) :qid |PivotBet.206:23| :skolemid |4629| :pattern ( (PivotBetreeSpec.__default.QueryReads |q#0@@5|)) ))))
(assert  (=> true (forall ((|q#0@@6| T@U) ) (!  (=> (and (= (type |q#0@@6|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.QueryReads#canCall| (Lit |q#0@@6|)) ($Is |q#0@@6| Tclass.PivotBetreeSpec.LookupQuery))) (and (PivotBetreeSpec.LookupQuery.LookupQuery_q (Lit |q#0@@6|)) (= (PivotBetreeSpec.__default.QueryReads (Lit |q#0@@6|)) (Lit (PivotBetreeSpec.LookupQuery.lookup (Lit |q#0@@6|)))))) :qid |PivotBet.206:23| :weight 3 :skolemid |4630| :pattern ( (PivotBetreeSpec.__default.QueryReads (Lit |q#0@@6|))) ))))
(assert (forall ((arg0@@652 T@U) ) (! (= (type (PivotBetreeSpec.__default.QueryOps arg0@@652)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.QueryOps| :pattern ( (PivotBetreeSpec.__default.QueryOps arg0@@652)) )))
(assert  (=> true (forall ((|q#0@@7| T@U) ) (!  (=> (and (= (type |q#0@@7|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.QueryOps#canCall| |q#0@@7|) ($Is |q#0@@7| Tclass.PivotBetreeSpec.LookupQuery))) ($Is (PivotBetreeSpec.__default.QueryOps |q#0@@7|) (TSeq Tclass.PivotBetreeGraph.Op))) :qid |PivotBet.210:21| :skolemid |4631| :pattern ( (PivotBetreeSpec.__default.QueryOps |q#0@@7|)) ))))
(assert (forall ((|q#0@@8| T@U) ) (!  (=> (and (= (type |q#0@@8|) DatatypeTypeType) ($Is |q#0@@8| Tclass.PivotBetreeSpec.LookupQuery)) (and (=> (|PivotBetreeSpec.__default.QueryOps#requires| |q#0@@8|) true) (=> true (|PivotBetreeSpec.__default.QueryOps#requires| |q#0@@8|)))) :qid |PivotBet.210:21| :skolemid |4632| :pattern ( (|PivotBetreeSpec.__default.QueryOps#requires| |q#0@@8|)) )))
(assert  (=> true (forall ((|q#0@@9| T@U) ) (!  (=> (and (= (type |q#0@@9|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.QueryOps#canCall| |q#0@@9|) ($Is |q#0@@9| Tclass.PivotBetreeSpec.LookupQuery))) (= (PivotBetreeSpec.__default.QueryOps |q#0@@9|) (Lit (|Seq#Empty| BoxType)))) :qid |PivotBet.210:21| :skolemid |4633| :pattern ( (PivotBetreeSpec.__default.QueryOps |q#0@@9|)) ))))
(assert  (=> true (forall ((|q#0@@10| T@U) ) (!  (=> (and (= (type |q#0@@10|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.QueryOps#canCall| (Lit |q#0@@10|)) ($Is |q#0@@10| Tclass.PivotBetreeSpec.LookupQuery))) (= (PivotBetreeSpec.__default.QueryOps (Lit |q#0@@10|)) (Lit (|Seq#Empty| BoxType)))) :qid |PivotBet.210:21| :weight 3 :skolemid |4634| :pattern ( (PivotBetreeSpec.__default.QueryOps (Lit |q#0@@10|))) ))))
(assert (forall ((arg0@@653 T@U) (arg1@@351 T@U) ) (! (= (type (PivotBetreeSpec.__default.LookupUpperBoundAtLayer arg0@@653 arg1@@351)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.LookupUpperBoundAtLayer| :pattern ( (PivotBetreeSpec.__default.LookupUpperBoundAtLayer arg0@@653 arg1@@351)) )))
(assert  (=> true (forall ((|layer#0| T@U) (|key#0@@270| T@U) ) (!  (=> (and (and (= (type |layer#0|) DatatypeTypeType) (= (type |key#0@@270|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupUpperBoundAtLayer#canCall| |layer#0| |key#0@@270|) (and (and ($Is |layer#0| Tclass.PivotBetreeGraph.ReadOp) ($Is |key#0@@270| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node |layer#0|))))) ($Is (PivotBetreeSpec.__default.LookupUpperBoundAtLayer |layer#0| |key#0@@270|) (Tclass.Options.Option Tclass.KeyType.Key))) :qid |PivotBet.223:36| :skolemid |4635| :pattern ( (PivotBetreeSpec.__default.LookupUpperBoundAtLayer |layer#0| |key#0@@270|)) ))))
(assert (forall ((|layer#0@@0| T@U) (|key#0@@271| T@U) ) (!  (=> (and (and (= (type |layer#0@@0|) DatatypeTypeType) (= (type |key#0@@271|) (SeqType BoxType))) (and ($Is |layer#0@@0| Tclass.PivotBetreeGraph.ReadOp) ($Is |key#0@@271| Tclass.KeyType.Key))) (and (=> (|PivotBetreeSpec.__default.LookupUpperBoundAtLayer#requires| |layer#0@@0| |key#0@@271|) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node |layer#0@@0|))) (=> (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node |layer#0@@0|)) (|PivotBetreeSpec.__default.LookupUpperBoundAtLayer#requires| |layer#0@@0| |key#0@@271|)))) :qid |PivotBet.223:36| :skolemid |4636| :pattern ( (|PivotBetreeSpec.__default.LookupUpperBoundAtLayer#requires| |layer#0@@0| |key#0@@271|)) )))
(assert  (=> true (forall ((|layer#0@@1| T@U) (|key#0@@272| T@U) ) (!  (=> (and (and (= (type |layer#0@@1|) DatatypeTypeType) (= (type |key#0@@272|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupUpperBoundAtLayer#canCall| |layer#0@@1| |key#0@@272|) (and (and ($Is |layer#0@@1| Tclass.PivotBetreeGraph.ReadOp) ($Is |key#0@@272| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node |layer#0@@1|))))) (and (and (and (and (PivotBetreeGraph.ReadOp.ReadOp_q |layer#0@@1|) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node |layer#0@@1|))) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node |layer#0@@1|)) |key#0@@272|)) (let ((|r#0@@1| (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node |layer#0@@1|)) |key#0@@272|))) (and (and (PivotBetreeGraph.ReadOp.ReadOp_q |layer#0@@1|) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node |layer#0@@1|))) (=> (< |r#0@@1| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node |layer#0@@1|)))) (and (PivotBetreeGraph.ReadOp.ReadOp_q |layer#0@@1|) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node |layer#0@@1|))))))) (= (PivotBetreeSpec.__default.LookupUpperBoundAtLayer |layer#0@@1| |key#0@@272|) (let ((|r#0@@2| (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node |layer#0@@1|)) |key#0@@272|))) (ite (< |r#0@@2| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node |layer#0@@1|)))) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node |layer#0@@1|)) |r#0@@2|)) |#Options.Option.None|))))) :qid |PivotBet.223:36| :skolemid |4637| :pattern ( (PivotBetreeSpec.__default.LookupUpperBoundAtLayer |layer#0@@1| |key#0@@272|)) ))))
(assert  (=> true (forall ((|layer#0@@2| T@U) (|key#0@@273| T@U) ) (!  (=> (and (and (= (type |layer#0@@2|) DatatypeTypeType) (= (type |key#0@@273|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupUpperBoundAtLayer#canCall| (Lit |layer#0@@2|) (Lit |key#0@@273|)) (and (and ($Is |layer#0@@2| Tclass.PivotBetreeGraph.ReadOp) ($Is |key#0@@273| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|)))))))))) (and (and (and (and (PivotBetreeGraph.ReadOp.ReadOp_q (Lit |layer#0@@2|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|))))) (|PivotsLib.__default.Route#canCall| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|))))) (Lit |key#0@@273|))) (let ((|r#1@@1| (LitInt (PivotsLib.__default.Route (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|))))) (Lit |key#0@@273|))))) (and (and (PivotBetreeGraph.ReadOp.ReadOp_q (Lit |layer#0@@2|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|))))) (=> (< |r#1@@1| (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|))))))) (and (PivotBetreeGraph.ReadOp.ReadOp_q (Lit |layer#0@@2|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|))))))))) (= (PivotBetreeSpec.__default.LookupUpperBoundAtLayer (Lit |layer#0@@2|) (Lit |key#0@@273|)) (let ((|r#1@@2| (LitInt (PivotsLib.__default.Route (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|))))) (Lit |key#0@@273|))))) (ite (< |r#1@@2| (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|))))))) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeGraph.ReadOp.node (Lit |layer#0@@2|))))) |r#1@@2|)) |#Options.Option.None|))))) :qid |PivotBet.223:36| :weight 3 :skolemid |4638| :pattern ( (PivotBetreeSpec.__default.LookupUpperBoundAtLayer (Lit |layer#0@@2|) (Lit |key#0@@273|))) ))))
(assert (forall ((arg0@@654 T@U) (arg1@@352 T@U) ) (! (= (type (PivotBetreeSpec.__default.OptionKeyMin arg0@@654 arg1@@352)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.OptionKeyMin| :pattern ( (PivotBetreeSpec.__default.OptionKeyMin arg0@@654 arg1@@352)) )))
(assert  (=> true (forall ((|k1#0| T@U) (|k2#0| T@U) ) (!  (=> (and (and (= (type |k1#0|) DatatypeTypeType) (= (type |k2#0|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.OptionKeyMin#canCall| |k1#0| |k2#0|) (and ($Is |k1#0| (Tclass.Options.Option Tclass.KeyType.Key)) ($Is |k2#0| (Tclass.Options.Option Tclass.KeyType.Key))))) ($Is (PivotBetreeSpec.__default.OptionKeyMin |k1#0| |k2#0|) (Tclass.Options.Option Tclass.KeyType.Key))) :qid |PivotBet.232:25| :skolemid |4639| :pattern ( (PivotBetreeSpec.__default.OptionKeyMin |k1#0| |k2#0|)) ))))
(assert (forall ((|k1#0@@0| T@U) (|k2#0@@0| T@U) ) (!  (=> (and (and (= (type |k1#0@@0|) DatatypeTypeType) (= (type |k2#0@@0|) DatatypeTypeType)) (and ($Is |k1#0@@0| (Tclass.Options.Option Tclass.KeyType.Key)) ($Is |k2#0@@0| (Tclass.Options.Option Tclass.KeyType.Key)))) (and (=> (|PivotBetreeSpec.__default.OptionKeyMin#requires| |k1#0@@0| |k2#0@@0|) true) (=> true (|PivotBetreeSpec.__default.OptionKeyMin#requires| |k1#0@@0| |k2#0@@0|)))) :qid |PivotBet.232:25| :skolemid |4640| :pattern ( (|PivotBetreeSpec.__default.OptionKeyMin#requires| |k1#0@@0| |k2#0@@0|)) )))
(assert  (=> true (forall ((|k1#0@@1| T@U) (|k2#0@@1| T@U) ) (!  (=> (and (and (= (type |k1#0@@1|) DatatypeTypeType) (= (type |k2#0@@1|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.OptionKeyMin#canCall| |k1#0@@1| |k2#0@@1|) (and ($Is |k1#0@@1| (Tclass.Options.Option Tclass.KeyType.Key)) ($Is |k2#0@@1| (Tclass.Options.Option Tclass.KeyType.Key))))) (and (=> (not (Options.Option.None_q |k1#0@@1|)) (=> (not (Options.Option.None_q |k2#0@@1|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Options.Option.value |k1#0@@1|)) ($Unbox (SeqType BoxType) (Options.Option.value |k2#0@@1|))))) (= (PivotBetreeSpec.__default.OptionKeyMin |k1#0@@1| |k2#0@@1|) (ite (Options.Option.None_q |k1#0@@1|) |k2#0@@1| (ite (Options.Option.None_q |k2#0@@1|) |k1#0@@1| (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Options.Option.value |k1#0@@1|)) ($Unbox (SeqType BoxType) (Options.Option.value |k2#0@@1|))) (|#Options.Option.Some| (Options.Option.value |k1#0@@1|)) (|#Options.Option.Some| (Options.Option.value |k2#0@@1|)))))))) :qid |PivotBet.232:25| :skolemid |4641| :pattern ( (PivotBetreeSpec.__default.OptionKeyMin |k1#0@@1| |k2#0@@1|)) ))))
(assert  (=> true (forall ((|k1#0@@2| T@U) (|k2#0@@2| T@U) ) (!  (=> (and (and (= (type |k1#0@@2|) DatatypeTypeType) (= (type |k2#0@@2|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.OptionKeyMin#canCall| (Lit |k1#0@@2|) (Lit |k2#0@@2|)) (and ($Is |k1#0@@2| (Tclass.Options.Option Tclass.KeyType.Key)) ($Is |k2#0@@2| (Tclass.Options.Option Tclass.KeyType.Key))))) (and (=> (not (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit |k1#0@@2|)))))) (=> (not (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit |k2#0@@2|)))))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |k1#0@@2|)))) (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |k2#0@@2|))))))) (= (PivotBetreeSpec.__default.OptionKeyMin (Lit |k1#0@@2|) (Lit |k2#0@@2|)) (ite (Options.Option.None_q (Lit |k1#0@@2|)) |k2#0@@2| (ite (Options.Option.None_q (Lit |k2#0@@2|)) |k1#0@@2| (ite (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |k1#0@@2|)))) (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |k2#0@@2|))))) (|#Options.Option.Some| ($Box (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |k1#0@@2|)))))) (|#Options.Option.Some| ($Box (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |k2#0@@2|)))))))))))) :qid |PivotBet.232:25| :weight 3 :skolemid |4642| :pattern ( (PivotBetreeSpec.__default.OptionKeyMin (Lit |k1#0@@2|) (Lit |k2#0@@2|))) ))))
(assert (forall ((arg0@@655 T@U) (arg1@@353 T@U) (arg2@@239 T@U) ) (! (= (type (PivotBetreeSpec.__default.LookupUpperBound arg0@@655 arg1@@353 arg2@@239)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.LookupUpperBound| :pattern ( (PivotBetreeSpec.__default.LookupUpperBound arg0@@655 arg1@@353 arg2@@239)) )))
(assert (forall (($ly@@750 T@U) (|lookup#0@@33| T@U) (|key#0@@274| T@U) ) (!  (=> (and (and (= (type $ly@@750) LayerTypeType) (= (type |lookup#0@@33|) (SeqType BoxType))) (= (type |key#0@@274|) (SeqType BoxType))) (= (PivotBetreeSpec.__default.LookupUpperBound ($LS $ly@@750) |lookup#0@@33| |key#0@@274|) (PivotBetreeSpec.__default.LookupUpperBound $ly@@750 |lookup#0@@33| |key#0@@274|))) :qid |PivotBet.243:22| :skolemid |4643| :pattern ( (PivotBetreeSpec.__default.LookupUpperBound ($LS $ly@@750) |lookup#0@@33| |key#0@@274|)) )))
(assert (forall (($ly@@751 T@U) (|lookup#0@@34| T@U) (|key#0@@275| T@U) ) (!  (=> (and (and (= (type $ly@@751) LayerTypeType) (= (type |lookup#0@@34|) (SeqType BoxType))) (= (type |key#0@@275|) (SeqType BoxType))) (= (PivotBetreeSpec.__default.LookupUpperBound $ly@@751 |lookup#0@@34| |key#0@@275|) (PivotBetreeSpec.__default.LookupUpperBound $LZ |lookup#0@@34| |key#0@@275|))) :qid |PivotBet.243:22| :skolemid |4644| :pattern ( (PivotBetreeSpec.__default.LookupUpperBound (AsFuelBottom $ly@@751) |lookup#0@@34| |key#0@@275|)) )))
(assert  (=> true (forall (($ly@@752 T@U) (|lookup#0@@35| T@U) (|key#0@@276| T@U) ) (!  (=> (and (and (and (= (type $ly@@752) LayerTypeType) (= (type |lookup#0@@35|) (SeqType BoxType))) (= (type |key#0@@276|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupUpperBound#canCall| |lookup#0@@35| |key#0@@276|) (and (and ($Is |lookup#0@@35| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@276| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@35|)))) ($Is (PivotBetreeSpec.__default.LookupUpperBound $ly@@752 |lookup#0@@35| |key#0@@276|) (Tclass.Options.Option Tclass.KeyType.Key))) :qid |PivotBet.243:22| :skolemid |4645| :pattern ( (PivotBetreeSpec.__default.LookupUpperBound $ly@@752 |lookup#0@@35| |key#0@@276|)) ))))
(assert (forall (($ly@@753 T@U) (|lookup#0@@36| T@U) (|key#0@@277| T@U) ) (!  (=> (and (and (and (= (type $ly@@753) LayerTypeType) (= (type |lookup#0@@36|) (SeqType BoxType))) (= (type |key#0@@277|) (SeqType BoxType))) (and ($Is |lookup#0@@36| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@277| Tclass.KeyType.Key))) (and (=> (|PivotBetreeSpec.__default.LookupUpperBound#requires| $ly@@753 |lookup#0@@36| |key#0@@277|) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@36|)) (=> (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@36|) (|PivotBetreeSpec.__default.LookupUpperBound#requires| $ly@@753 |lookup#0@@36| |key#0@@277|)))) :qid |PivotBet.243:22| :skolemid |4646| :pattern ( (|PivotBetreeSpec.__default.LookupUpperBound#requires| $ly@@753 |lookup#0@@36| |key#0@@277|)) )))
(assert  (=> true (forall (($ly@@754 T@U) (|lookup#0@@37| T@U) (|key#0@@278| T@U) ) (!  (=> (and (and (and (= (type $ly@@754) LayerTypeType) (= (type |lookup#0@@37|) (SeqType BoxType))) (= (type |key#0@@278|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupUpperBound#canCall| |lookup#0@@37| |key#0@@278|) (and (and ($Is |lookup#0@@37| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@278| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.LookupVisitsWFNodes |lookup#0@@37|)))) (and (=> (not (|Seq#Equal| |lookup#0@@37| (|Seq#Empty| BoxType))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.PivotBetreeGraph.ReadOp |lookup#0@@37|) (|PivotBetreeSpec.__default.LookupUpperBound#canCall| (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp |lookup#0@@37|) |key#0@@278|)) (and (|Sequences.__default.Last#canCall| Tclass.PivotBetreeGraph.ReadOp |lookup#0@@37|) (|PivotBetreeSpec.__default.LookupUpperBoundAtLayer#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@37|)) |key#0@@278|))) (|PivotBetreeSpec.__default.OptionKeyMin#canCall| (PivotBetreeSpec.__default.LookupUpperBound $ly@@754 (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp |lookup#0@@37|) |key#0@@278|) (PivotBetreeSpec.__default.LookupUpperBoundAtLayer ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@37|)) |key#0@@278|)))) (= (PivotBetreeSpec.__default.LookupUpperBound ($LS $ly@@754) |lookup#0@@37| |key#0@@278|) (ite (|Seq#Equal| |lookup#0@@37| (|Seq#Empty| BoxType)) |#Options.Option.None| (PivotBetreeSpec.__default.OptionKeyMin (PivotBetreeSpec.__default.LookupUpperBound $ly@@754 (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp |lookup#0@@37|) |key#0@@278|) (PivotBetreeSpec.__default.LookupUpperBoundAtLayer ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp |lookup#0@@37|)) |key#0@@278|)))))) :qid |PivotBet.243:22| :skolemid |4647| :pattern ( (PivotBetreeSpec.__default.LookupUpperBound ($LS $ly@@754) |lookup#0@@37| |key#0@@278|)) ))))
(assert  (=> true (forall (($ly@@755 T@U) (|lookup#0@@38| T@U) (|key#0@@279| T@U) ) (!  (=> (and (and (and (= (type $ly@@755) LayerTypeType) (= (type |lookup#0@@38|) (SeqType BoxType))) (= (type |key#0@@279|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.LookupUpperBound#canCall| (Lit |lookup#0@@38|) (Lit |key#0@@279|)) (and (and ($Is |lookup#0@@38| (TSeq Tclass.PivotBetreeGraph.ReadOp)) ($Is |key#0@@279| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.LookupVisitsWFNodes (Lit |lookup#0@@38|)))))))) (and (=> (not (|Seq#Equal| |lookup#0@@38| (|Seq#Empty| BoxType))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@38|)) (|PivotBetreeSpec.__default.LookupUpperBound#canCall| (Lit (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@38|))) (Lit |key#0@@279|))) (and (|Sequences.__default.Last#canCall| Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@38|)) (|PivotBetreeSpec.__default.LookupUpperBoundAtLayer#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@38|)))) (Lit |key#0@@279|)))) (|PivotBetreeSpec.__default.OptionKeyMin#canCall| (PivotBetreeSpec.__default.LookupUpperBound ($LS $ly@@755) (Lit (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@38|))) (Lit |key#0@@279|)) (Lit (PivotBetreeSpec.__default.LookupUpperBoundAtLayer (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@38|)))) (Lit |key#0@@279|)))))) (= (PivotBetreeSpec.__default.LookupUpperBound ($LS $ly@@755) (Lit |lookup#0@@38|) (Lit |key#0@@279|)) (ite (|Seq#Equal| |lookup#0@@38| (|Seq#Empty| BoxType)) |#Options.Option.None| (PivotBetreeSpec.__default.OptionKeyMin (PivotBetreeSpec.__default.LookupUpperBound ($LS $ly@@755) (Lit (Sequences.__default.DropLast Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@38|))) (Lit |key#0@@279|)) (Lit (PivotBetreeSpec.__default.LookupUpperBoundAtLayer (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit |lookup#0@@38|)))) (Lit |key#0@@279|)))))))) :qid |PivotBet.243:22| :weight 3 :skolemid |4648| :pattern ( (PivotBetreeSpec.__default.LookupUpperBound ($LS $ly@@755) (Lit |lookup#0@@38|) (Lit |key#0@@279|))) ))))
(assert  (=> true (forall ((|m#0@@145| T@U) ) (!  (=> (and (= (type |m#0@@145|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BufferDefinesEmptyValue#canCall| |m#0@@145|) ($Is |m#0@@145| Tclass.ValueMessage.Message))) true) :qid |PivotBet.254:37| :skolemid |4649| :pattern ( (PivotBetreeSpec.__default.BufferDefinesEmptyValue |m#0@@145|)) ))))
(assert (forall ((|m#0@@146| T@U) ) (!  (=> (and (= (type |m#0@@146|) DatatypeTypeType) ($Is |m#0@@146| Tclass.ValueMessage.Message)) (and (=> (|PivotBetreeSpec.__default.BufferDefinesEmptyValue#requires| |m#0@@146|) true) (=> true (|PivotBetreeSpec.__default.BufferDefinesEmptyValue#requires| |m#0@@146|)))) :qid |PivotBet.254:37| :skolemid |4650| :pattern ( (|PivotBetreeSpec.__default.BufferDefinesEmptyValue#requires| |m#0@@146|)) )))
(assert  (=> true (forall ((|m#0@@147| T@U) ) (!  (=> (and (= (type |m#0@@147|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BufferDefinesEmptyValue#canCall| |m#0@@147|) ($Is |m#0@@147| Tclass.ValueMessage.Message))) (and (and (and |ValueMessage.__default.DefineDefault#canCall| (|ValueMessage.__default.Merge#canCall| |m#0@@147| (Lit ValueMessage.__default.DefineDefault))) |ValueMessage.__default.DefaultValue#canCall|) (and (=> (PivotBetreeSpec.__default.BufferDefinesEmptyValue |m#0@@147|) (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge |m#0@@147| (Lit ValueMessage.__default.DefineDefault))) ValueMessage.__default.DefaultValue)) (=> (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge |m#0@@147| (Lit ValueMessage.__default.DefineDefault))) ValueMessage.__default.DefaultValue) (PivotBetreeSpec.__default.BufferDefinesEmptyValue |m#0@@147|))))) :qid |PivotBet.254:37| :skolemid |4651| :pattern ( (PivotBetreeSpec.__default.BufferDefinesEmptyValue |m#0@@147|)) ))))
(assert  (=> true (forall ((|m#0@@148| T@U) ) (!  (=> (and (= (type |m#0@@148|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BufferDefinesEmptyValue#canCall| (Lit |m#0@@148|)) ($Is |m#0@@148| Tclass.ValueMessage.Message))) (and (and (and |ValueMessage.__default.DefineDefault#canCall| (|ValueMessage.__default.Merge#canCall| (Lit |m#0@@148|) (Lit ValueMessage.__default.DefineDefault))) |ValueMessage.__default.DefaultValue#canCall|) (and (=> (PivotBetreeSpec.__default.BufferDefinesEmptyValue (Lit |m#0@@148|)) (|Seq#Equal| (ValueMessage.Message.value (Lit (ValueMessage.__default.Merge (Lit |m#0@@148|) (Lit ValueMessage.__default.DefineDefault)))) ValueMessage.__default.DefaultValue)) (=> (|Seq#Equal| (ValueMessage.Message.value (Lit (ValueMessage.__default.Merge (Lit |m#0@@148|) (Lit ValueMessage.__default.DefineDefault)))) ValueMessage.__default.DefaultValue) (PivotBetreeSpec.__default.BufferDefinesEmptyValue (Lit |m#0@@148|)))))) :qid |PivotBet.254:37| :weight 3 :skolemid |4652| :pattern ( (PivotBetreeSpec.__default.BufferDefinesEmptyValue (Lit |m#0@@148|))) ))))
(assert  (=> true (forall ((|sq#0| T@U) ) (!  (=> (and (= (type |sq#0|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidSuccQuery#canCall| |sq#0|) ($Is |sq#0| Tclass.PivotBetreeSpec.SuccQuery))) true) :qid |PivotBet.259:28| :skolemid |4653| :pattern ( (PivotBetreeSpec.__default.ValidSuccQuery |sq#0|)) ))))
(assert (forall ((|sq#0@@0| T@U) ) (!  (=> (and (= (type |sq#0@@0|) DatatypeTypeType) ($Is |sq#0@@0| Tclass.PivotBetreeSpec.SuccQuery)) (and (=> (|PivotBetreeSpec.__default.ValidSuccQuery#requires| |sq#0@@0|) true) (=> true (|PivotBetreeSpec.__default.ValidSuccQuery#requires| |sq#0@@0|)))) :qid |PivotBet.259:28| :skolemid |4654| :pattern ( (|PivotBetreeSpec.__default.ValidSuccQuery#requires| |sq#0@@0|)) )))
(assert  (and (and (and (and (= (type StartFuel_PivotBetreeSpec._default.LookupUpperBound) LayerTypeType) (= (type StartFuel_BucketsLib._default.ComposeSeq) LayerTypeType)) (= (type StartFuel_BucketsLib._default.ClampRange) LayerTypeType)) (= (type StartFuel_BucketsLib._default.KeyValueMapOfBucket) LayerTypeType)) (= (type StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap) LayerTypeType)))
(assert  (=> true (forall ((|sq#0@@1| T@U) ) (!  (=> (and (= (type |sq#0@@1|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidSuccQuery#canCall| |sq#0@@1|) ($Is |sq#0@@1| Tclass.PivotBetreeSpec.SuccQuery))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (=> (not (UI.RangeStart.NegativeInf_q (PivotBetreeSpec.SuccQuery.start |sq#0@@1|))) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|))) (let ((|startKey#0| (ite (UI.RangeStart.NegativeInf_q (PivotBetreeSpec.SuccQuery.start |sq#0@@1|)) (|Seq#Empty| BoxType) (UI.RangeStart.key (PivotBetreeSpec.SuccQuery.start |sq#0@@1|))))) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (|PivotBetreeSpec.__default.WFLookupForKey#canCall| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |startKey#0|)) (=> (PivotBetreeSpec.__default.WFLookupForKey (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |startKey#0|) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (|PivotBetreeSpec.__default.LookupUpperBound#canCall| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |startKey#0|)) (let ((|lookupUpperBound#0| (PivotBetreeSpec.__default.LookupUpperBound StartFuel_PivotBetreeSpec._default.LookupUpperBound (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |startKey#0|))) (and (and (and (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (|Sequences.__default.Last#canCall| Tclass.PivotBetreeGraph.ReadOp (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|))) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|))))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)))))) (=> (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)))))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|)))) (=> (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|)) (= (|Seq#Length| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)) (|Seq#Length| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)))) (forall ((|i#0@@198| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@198|) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|)) (=> (and (<= (LitInt 0) |i#0@@198|) (< |i#0@@198| (|Seq#Length| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)))) (and (and (|$IsA#BucketsLib.Bucket| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@198|))) (|$IsA#BucketsLib.Bucket| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@198|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@198|)))) |startKey#0|))))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@198|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@198|))))) (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@198|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@198|))))) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@198|)))) |startKey#0|))))))) :qid |PivotBet.269:16| :skolemid |4655| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@198|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@198|))) )))) (=> (and (forall ((|i#0@@199| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@199|) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|)) (=> (and (<= (LitInt 0) |i#0@@199|) (< |i#0@@199| (|Seq#Length| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)))) (and (and (|$IsA#BucketsLib.Bucket| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@199|))) (|$IsA#BucketsLib.Bucket| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@199|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@199|)))) |startKey#0|))))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@199|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@199|))))) (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@199|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@199|))))) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@199|)))) |startKey#0|))))))) :qid |PivotBet.269:16| :skolemid |4656| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@199|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@199|))) )) (forall ((|i#0@@200| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@200|) (< |i#0@@200| (|Seq#Length| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@200|)) ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@200|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@200|)))) |startKey#0|))))) :qid |PivotBet.269:16| :skolemid |4657| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@200|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@200|))) ))) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (|BucketsLib.__default.BucketListWellMarshalled#canCall| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|))) (=> (BucketsLib.__default.BucketListWellMarshalled (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)) (and (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|)) (|MapSpec.__default.NonEmptyRange#canCall| (PivotBetreeSpec.SuccQuery.start |sq#0@@1|) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|))) (=> (MapSpec.__default.NonEmptyRange (PivotBetreeSpec.SuccQuery.start |sq#0@@1|) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|)) (=> (Options.Option.Some_q |lookupUpperBound#0|) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (|MapSpec.__default.UpperBound#canCall| ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#0|)) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|)))))) (=> (and (=> (Options.Option.Some_q |lookupUpperBound#0|) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (|MapSpec.__default.UpperBound#canCall| ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#0|)) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|)))) (=> (Options.Option.Some_q |lookupUpperBound#0|) (not (MapSpec.__default.UpperBound ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#0|)) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|))))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (and (and (and (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|) (|BucketsLib.__default.ComposeSeq#canCall| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|))) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|)) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@1|)) (|BucketsLib.__default.ClampRange#canCall| (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)) (PivotBetreeSpec.SuccQuery.start |sq#0@@1|) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|))) (|BucketsLib.__default.KeyValueMapOfBucket#canCall| (BucketsLib.__default.ClampRange StartFuel_BucketsLib._default.ClampRange (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)) (PivotBetreeSpec.SuccQuery.start |sq#0@@1|) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|)))) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (BucketsLib.__default.KeyValueMapOfBucket StartFuel_BucketsLib._default.KeyValueMapOfBucket (BucketsLib.__default.ClampRange StartFuel_BucketsLib._default.ClampRange (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)) (PivotBetreeSpec.SuccQuery.start |sq#0@@1|) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|))))))))))))))))))) (and (=> (PivotBetreeSpec.__default.ValidSuccQuery |sq#0@@1|) (and true (let ((|startKey#0@@0| (ite (UI.RangeStart.NegativeInf_q (PivotBetreeSpec.SuccQuery.start |sq#0@@1|)) (|Seq#Empty| BoxType) (UI.RangeStart.key (PivotBetreeSpec.SuccQuery.start |sq#0@@1|))))) (and (PivotBetreeSpec.__default.WFLookupForKey (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |startKey#0@@0|) (let ((|lookupUpperBound#0@@0| (PivotBetreeSpec.__default.LookupUpperBound StartFuel_PivotBetreeSpec._default.LookupUpperBound (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |startKey#0@@0|))) (and (and (and (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)))))) (= (|Seq#Length| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)) (|Seq#Length| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)))) (forall ((|i#0@@201| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@201|) (< |i#0@@201| (|Seq#Length| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@201|)) ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@201|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@201|)))) |startKey#0@@0|))))) :qid |PivotBet.269:16| :skolemid |4658| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@201|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@201|))) ))) (=> (BucketsLib.__default.BucketListWellMarshalled (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)) (and (and (MapSpec.__default.NonEmptyRange (PivotBetreeSpec.SuccQuery.start |sq#0@@1|) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|)) (=> (Options.Option.Some_q |lookupUpperBound#0@@0|) (not (MapSpec.__default.UpperBound ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#0@@0|)) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|))))) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.results |sq#0@@1|) (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (BucketsLib.__default.KeyValueMapOfBucket StartFuel_BucketsLib._default.KeyValueMapOfBucket (BucketsLib.__default.ClampRange StartFuel_BucketsLib._default.ClampRange (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)) (PivotBetreeSpec.SuccQuery.start |sq#0@@1|) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|))))))))))))) (=> (and true (let ((|startKey#0@@1| (ite (UI.RangeStart.NegativeInf_q (PivotBetreeSpec.SuccQuery.start |sq#0@@1|)) (|Seq#Empty| BoxType) (UI.RangeStart.key (PivotBetreeSpec.SuccQuery.start |sq#0@@1|))))) (and (PivotBetreeSpec.__default.WFLookupForKey (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |startKey#0@@1|) (let ((|lookupUpperBound#0@@1| (PivotBetreeSpec.__default.LookupUpperBound StartFuel_PivotBetreeSpec._default.LookupUpperBound (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |startKey#0@@1|))) (and (and (and (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)))))) (= (|Seq#Length| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)) (|Seq#Length| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)))) (forall ((|i#0@@202| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@202|) (< |i#0@@202| (|Seq#Length| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|)))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@202|)) ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@202|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@202|)))) |startKey#0@@1|))))) :qid |PivotBet.269:16| :skolemid |4658| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@1|) |i#0@@202|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|) |i#0@@202|))) ))) (=> (BucketsLib.__default.BucketListWellMarshalled (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)) (and (and (MapSpec.__default.NonEmptyRange (PivotBetreeSpec.SuccQuery.start |sq#0@@1|) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|)) (=> (Options.Option.Some_q |lookupUpperBound#0@@1|) (not (MapSpec.__default.UpperBound ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#0@@1|)) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|))))) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.results |sq#0@@1|) (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (BucketsLib.__default.KeyValueMapOfBucket StartFuel_BucketsLib._default.KeyValueMapOfBucket (BucketsLib.__default.ClampRange StartFuel_BucketsLib._default.ClampRange (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (PivotBetreeSpec.SuccQuery.buckets |sq#0@@1|)) (PivotBetreeSpec.SuccQuery.start |sq#0@@1|) (PivotBetreeSpec.SuccQuery.end |sq#0@@1|)))))))))))) (PivotBetreeSpec.__default.ValidSuccQuery |sq#0@@1|))))) :qid |PivotBet.259:28| :skolemid |4659| :pattern ( (PivotBetreeSpec.__default.ValidSuccQuery |sq#0@@1|)) ))))
(assert  (=> true (forall ((|sq#0@@2| T@U) ) (!  (=> (and (= (type |sq#0@@2|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidSuccQuery#canCall| (Lit |sq#0@@2|)) ($Is |sq#0@@2| Tclass.PivotBetreeSpec.SuccQuery))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (=> (not (U_2_bool (Lit (bool_2_U (UI.RangeStart.NegativeInf_q (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|)))))))) (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)))) (let ((|startKey#1| (ite (UI.RangeStart.NegativeInf_q (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|)))) (|Seq#Empty| BoxType) (UI.RangeStart.key (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))))))) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (|PivotBetreeSpec.__default.WFLookupForKey#canCall| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |startKey#1|)) (=> (PivotBetreeSpec.__default.WFLookupForKey (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |startKey#1|) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (|PivotBetreeSpec.__default.LookupUpperBound#canCall| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |startKey#1|)) (let ((|lookupUpperBound#1| (PivotBetreeSpec.__default.LookupUpperBound StartFuel_PivotBetreeSpec._default.LookupUpperBound (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |startKey#1|))) (and (and (and (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (|Sequences.__default.Last#canCall| Tclass.PivotBetreeGraph.ReadOp (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))))) (PivotBetreeGraph.ReadOp.ReadOp_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))))))) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))))))))) (=> (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))))))))))))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|))))) (=> (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|))) (= (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))) (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))))) (forall ((|i#1@@102| Int) ) (!  (and (=> (<= (LitInt 0) |i#1@@102|) (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|))) (=> (and (<= (LitInt 0) |i#1@@102|) (< |i#1@@102| (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))))) (and (and (|$IsA#BucketsLib.Bucket| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|))) |i#1@@102|))) (|$IsA#BucketsLib.Bucket| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@102|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@102|)))) |startKey#1|))))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@102|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@102|))))) (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@102|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@102|))))) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@102|)))) |startKey#1|))))))) :qid |PivotBet.269:16| :skolemid |4660| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@2|) |i#1@@102|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@2|) |i#1@@102|))) )))) (=> (and (forall ((|i#1@@103| Int) ) (!  (and (=> (<= (LitInt 0) |i#1@@103|) (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|))) (=> (and (<= (LitInt 0) |i#1@@103|) (< |i#1@@103| (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))))) (and (and (|$IsA#BucketsLib.Bucket| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|))) |i#1@@103|))) (|$IsA#BucketsLib.Bucket| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@103|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@103|)))) |startKey#1|))))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@103|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@103|))))) (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@103|)))) (PivotBetreeGraph.Node.Node_q (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@103|))))) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@103|)))) |startKey#1|))))))) :qid |PivotBet.269:16| :skolemid |4661| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@2|) |i#1@@103|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@2|) |i#1@@103|))) )) (forall ((|i#1@@104| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@104|) (< |i#1@@104| (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|))) |i#1@@104|)) ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@104|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@104|)))) |startKey#1|))))) :qid |PivotBet.269:16| :skolemid |4662| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@2|) |i#1@@104|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@2|) |i#1@@104|))) ))) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (|BucketsLib.__default.BucketListWellMarshalled#canCall| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketListWellMarshalled (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|))))))) (and (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|))) (|MapSpec.__default.NonEmptyRange#canCall| (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.NonEmptyRange (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|))))))) (=> (Options.Option.Some_q |lookupUpperBound#1|) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (|MapSpec.__default.UpperBound#canCall| ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#1|)) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|)))))))) (=> (and (=> (Options.Option.Some_q |lookupUpperBound#1|) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (|MapSpec.__default.UpperBound#canCall| ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#1|)) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|)))))) (=> (Options.Option.Some_q |lookupUpperBound#1|) (not (MapSpec.__default.UpperBound ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#1|)) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|))))))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (and (and (and (and (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|)) (|BucketsLib.__default.ComposeSeq#canCall| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|))))) (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|))) (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |sq#0@@2|))) (|BucketsLib.__default.ClampRange#canCall| (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))) (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|))))) (|BucketsLib.__default.KeyValueMapOfBucket#canCall| (BucketsLib.__default.ClampRange StartFuel_BucketsLib._default.ClampRange (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))) (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|)))))) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (BucketsLib.__default.KeyValueMapOfBucket StartFuel_BucketsLib._default.KeyValueMapOfBucket (BucketsLib.__default.ClampRange StartFuel_BucketsLib._default.ClampRange (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))) (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|))))))))))))))))))))) (and (=> (PivotBetreeSpec.__default.ValidSuccQuery (Lit |sq#0@@2|)) (and true (let ((|startKey#1@@0| (ite (UI.RangeStart.NegativeInf_q (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|)))) (|Seq#Empty| BoxType) (UI.RangeStart.key (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))))))) (and (PivotBetreeSpec.__default.WFLookupForKey (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |startKey#1@@0|) (let ((|lookupUpperBound#1@@0| (PivotBetreeSpec.__default.LookupUpperBound StartFuel_PivotBetreeSpec._default.LookupUpperBound (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |startKey#1@@0|))) (and (and (and (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))))))))))) (= (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))) (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))))) (forall ((|i#1@@105| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@105|) (< |i#1@@105| (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|))) |i#1@@105|)) ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@105|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@105|)))) |startKey#1@@0|))))) :qid |PivotBet.269:16| :skolemid |4663| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@2|) |i#1@@105|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@2|) |i#1@@105|))) ))) (=> (BucketsLib.__default.BucketListWellMarshalled (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))) (and (and (MapSpec.__default.NonEmptyRange (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|)))) (=> (Options.Option.Some_q |lookupUpperBound#1@@0|) (not (MapSpec.__default.UpperBound ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#1@@0|)) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|))))))) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.results (Lit |sq#0@@2|)) (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (BucketsLib.__default.KeyValueMapOfBucket StartFuel_BucketsLib._default.KeyValueMapOfBucket (BucketsLib.__default.ClampRange StartFuel_BucketsLib._default.ClampRange (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))) (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|))))))))))))))) (=> (and true (let ((|startKey#1@@1| (ite (UI.RangeStart.NegativeInf_q (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|)))) (|Seq#Empty| BoxType) (UI.RangeStart.key (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))))))) (and (PivotBetreeSpec.__default.WFLookupForKey (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |startKey#1@@1|) (let ((|lookupUpperBound#1@@1| (PivotBetreeSpec.__default.LookupUpperBound StartFuel_PivotBetreeSpec._default.LookupUpperBound (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |startKey#1@@1|))) (and (and (and (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeGraph.ReadOp.node (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.PivotBetreeGraph.ReadOp (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))))))))))) (= (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))) (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))))) (forall ((|i#1@@106| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@106|) (< |i#1@@106| (|Seq#Length| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|)))))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|))) |i#1@@106|)) ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@106|)))) (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |sq#0@@2|))) |i#1@@106|)))) |startKey#1@@1|))))) :qid |PivotBet.269:16| :skolemid |4663| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.lookup |sq#0@@2|) |i#1@@106|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.SuccQuery.buckets |sq#0@@2|) |i#1@@106|))) ))) (=> (BucketsLib.__default.BucketListWellMarshalled (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))) (and (and (MapSpec.__default.NonEmptyRange (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|)))) (=> (Options.Option.Some_q |lookupUpperBound#1@@1|) (not (MapSpec.__default.UpperBound ($Unbox (SeqType BoxType) (Options.Option.value |lookupUpperBound#1@@1|)) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|))))))) (|Seq#Equal| (PivotBetreeSpec.SuccQuery.results (Lit |sq#0@@2|)) (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (BucketsLib.__default.KeyValueMapOfBucket StartFuel_BucketsLib._default.KeyValueMapOfBucket (BucketsLib.__default.ClampRange StartFuel_BucketsLib._default.ClampRange (BucketsLib.__default.ComposeSeq StartFuel_BucketsLib._default.ComposeSeq (Lit (PivotBetreeSpec.SuccQuery.buckets (Lit |sq#0@@2|)))) (Lit (PivotBetreeSpec.SuccQuery.start (Lit |sq#0@@2|))) (Lit (PivotBetreeSpec.SuccQuery.end (Lit |sq#0@@2|)))))))))))))) (PivotBetreeSpec.__default.ValidSuccQuery (Lit |sq#0@@2|)))))) :qid |PivotBet.259:28| :weight 3 :skolemid |4664| :pattern ( (PivotBetreeSpec.__default.ValidSuccQuery (Lit |sq#0@@2|))) ))))
(assert (forall ((arg0@@656 T@U) ) (! (= (type (PivotBetreeSpec.__default.SuccQueryReads arg0@@656)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.SuccQueryReads| :pattern ( (PivotBetreeSpec.__default.SuccQueryReads arg0@@656)) )))
(assert  (=> true (forall ((|q#0@@11| T@U) ) (!  (=> (and (= (type |q#0@@11|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SuccQueryReads#canCall| |q#0@@11|) ($Is |q#0@@11| Tclass.PivotBetreeSpec.SuccQuery))) ($Is (PivotBetreeSpec.__default.SuccQueryReads |q#0@@11|) (TSeq Tclass.PivotBetreeGraph.ReadOp))) :qid |PivotBet.281:27| :skolemid |4665| :pattern ( (PivotBetreeSpec.__default.SuccQueryReads |q#0@@11|)) ))))
(assert (forall ((|q#0@@12| T@U) ) (!  (=> (and (= (type |q#0@@12|) DatatypeTypeType) ($Is |q#0@@12| Tclass.PivotBetreeSpec.SuccQuery)) (and (=> (|PivotBetreeSpec.__default.SuccQueryReads#requires| |q#0@@12|) true) (=> true (|PivotBetreeSpec.__default.SuccQueryReads#requires| |q#0@@12|)))) :qid |PivotBet.281:27| :skolemid |4666| :pattern ( (|PivotBetreeSpec.__default.SuccQueryReads#requires| |q#0@@12|)) )))
(assert  (=> true (forall ((|q#0@@13| T@U) ) (!  (=> (and (= (type |q#0@@13|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SuccQueryReads#canCall| |q#0@@13|) ($Is |q#0@@13| Tclass.PivotBetreeSpec.SuccQuery))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |q#0@@13|) (= (PivotBetreeSpec.__default.SuccQueryReads |q#0@@13|) (PivotBetreeSpec.SuccQuery.lookup |q#0@@13|)))) :qid |PivotBet.281:27| :skolemid |4667| :pattern ( (PivotBetreeSpec.__default.SuccQueryReads |q#0@@13|)) ))))
(assert  (=> true (forall ((|q#0@@14| T@U) ) (!  (=> (and (= (type |q#0@@14|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SuccQueryReads#canCall| (Lit |q#0@@14|)) ($Is |q#0@@14| Tclass.PivotBetreeSpec.SuccQuery))) (and (PivotBetreeSpec.SuccQuery.SuccQuery_q (Lit |q#0@@14|)) (= (PivotBetreeSpec.__default.SuccQueryReads (Lit |q#0@@14|)) (Lit (PivotBetreeSpec.SuccQuery.lookup (Lit |q#0@@14|)))))) :qid |PivotBet.281:27| :weight 3 :skolemid |4668| :pattern ( (PivotBetreeSpec.__default.SuccQueryReads (Lit |q#0@@14|))) ))))
(assert (forall ((arg0@@657 T@U) ) (! (= (type (PivotBetreeSpec.__default.SuccQueryOps arg0@@657)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.SuccQueryOps| :pattern ( (PivotBetreeSpec.__default.SuccQueryOps arg0@@657)) )))
(assert  (=> true (forall ((|q#0@@15| T@U) ) (!  (=> (and (= (type |q#0@@15|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SuccQueryOps#canCall| |q#0@@15|) ($Is |q#0@@15| Tclass.PivotBetreeSpec.SuccQuery))) ($Is (PivotBetreeSpec.__default.SuccQueryOps |q#0@@15|) (TSeq Tclass.PivotBetreeGraph.Op))) :qid |PivotBet.285:25| :skolemid |4669| :pattern ( (PivotBetreeSpec.__default.SuccQueryOps |q#0@@15|)) ))))
(assert (forall ((|q#0@@16| T@U) ) (!  (=> (and (= (type |q#0@@16|) DatatypeTypeType) ($Is |q#0@@16| Tclass.PivotBetreeSpec.SuccQuery)) (and (=> (|PivotBetreeSpec.__default.SuccQueryOps#requires| |q#0@@16|) true) (=> true (|PivotBetreeSpec.__default.SuccQueryOps#requires| |q#0@@16|)))) :qid |PivotBet.285:25| :skolemid |4670| :pattern ( (|PivotBetreeSpec.__default.SuccQueryOps#requires| |q#0@@16|)) )))
(assert  (=> true (forall ((|q#0@@17| T@U) ) (!  (=> (and (= (type |q#0@@17|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SuccQueryOps#canCall| |q#0@@17|) ($Is |q#0@@17| Tclass.PivotBetreeSpec.SuccQuery))) (= (PivotBetreeSpec.__default.SuccQueryOps |q#0@@17|) (Lit (|Seq#Empty| BoxType)))) :qid |PivotBet.285:25| :skolemid |4671| :pattern ( (PivotBetreeSpec.__default.SuccQueryOps |q#0@@17|)) ))))
(assert  (=> true (forall ((|q#0@@18| T@U) ) (!  (=> (and (= (type |q#0@@18|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SuccQueryOps#canCall| (Lit |q#0@@18|)) ($Is |q#0@@18| Tclass.PivotBetreeSpec.SuccQuery))) (= (PivotBetreeSpec.__default.SuccQueryOps (Lit |q#0@@18|)) (Lit (|Seq#Empty| BoxType)))) :qid |PivotBet.285:25| :weight 3 :skolemid |4672| :pattern ( (PivotBetreeSpec.__default.SuccQueryOps (Lit |q#0@@18|))) ))))
(assert  (=> true (forall ((|ins#0| T@U) ) (!  (=> (and (= (type |ins#0|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidInsertion#canCall| |ins#0|) ($Is |ins#0| Tclass.PivotBetreeSpec.MessageInsertion))) true) :qid |PivotBet.292:28| :skolemid |4673| :pattern ( (PivotBetreeSpec.__default.ValidInsertion |ins#0|)) ))))
(assert (forall ((|ins#0@@0| T@U) ) (!  (=> (and (= (type |ins#0@@0|) DatatypeTypeType) ($Is |ins#0@@0| Tclass.PivotBetreeSpec.MessageInsertion)) (and (=> (|PivotBetreeSpec.__default.ValidInsertion#requires| |ins#0@@0|) true) (=> true (|PivotBetreeSpec.__default.ValidInsertion#requires| |ins#0@@0|)))) :qid |PivotBet.292:28| :skolemid |4674| :pattern ( (|PivotBetreeSpec.__default.ValidInsertion#requires| |ins#0@@0|)) )))
(assert  (=> true (forall ((|ins#0@@1| T@U) ) (!  (=> (and (= (type |ins#0@@1|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidInsertion#canCall| |ins#0@@1|) ($Is |ins#0@@1| Tclass.PivotBetreeSpec.MessageInsertion))) (and (and (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@1|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@1|))) (=> (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@1|)) (and (and (and (and (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@1|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@1|))) (|BucketWeights.__default.WeightBucketList#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@1|)))) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@1|) (|BucketWeights.__default.WeightKey#canCall| (PivotBetreeSpec.MessageInsertion.key |ins#0@@1|)))) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@1|) (|BucketWeights.__default.WeightMessage#canCall| (PivotBetreeSpec.MessageInsertion.msg |ins#0@@1|)))) |Bounds.__default.MaxTotalBucketWeight#canCall|))) (and (=> (PivotBetreeSpec.__default.ValidInsertion |ins#0@@1|) (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@1|)) (<= (+ (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@1|))) (BucketWeights.__default.WeightKey (PivotBetreeSpec.MessageInsertion.key |ins#0@@1|))) (BucketWeights.__default.WeightMessage (PivotBetreeSpec.MessageInsertion.msg |ins#0@@1|))) (LitInt Bounds.__default.MaxTotalBucketWeight)))) (=> (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@1|)) (<= (+ (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@1|))) (BucketWeights.__default.WeightKey (PivotBetreeSpec.MessageInsertion.key |ins#0@@1|))) (BucketWeights.__default.WeightMessage (PivotBetreeSpec.MessageInsertion.msg |ins#0@@1|))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (PivotBetreeSpec.__default.ValidInsertion |ins#0@@1|))))) :qid |PivotBet.292:28| :skolemid |4675| :pattern ( (PivotBetreeSpec.__default.ValidInsertion |ins#0@@1|)) ))))
(assert  (=> true (forall ((|ins#0@@2| T@U) ) (!  (=> (and (= (type |ins#0@@2|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidInsertion#canCall| (Lit |ins#0@@2|)) ($Is |ins#0@@2| Tclass.PivotBetreeSpec.MessageInsertion))) (and (and (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@2|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|))))))) (and (and (and (and (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@2|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|))))) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|))))))) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@2|)) (|BucketWeights.__default.WeightKey#canCall| (Lit (PivotBetreeSpec.MessageInsertion.key (Lit |ins#0@@2|)))))) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@2|)) (|BucketWeights.__default.WeightMessage#canCall| (Lit (PivotBetreeSpec.MessageInsertion.msg (Lit |ins#0@@2|)))))) |Bounds.__default.MaxTotalBucketWeight#canCall|))) (and (=> (PivotBetreeSpec.__default.ValidInsertion (Lit |ins#0@@2|)) (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|)))) (<= (+ (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|)))))) (BucketWeights.__default.WeightKey (Lit (PivotBetreeSpec.MessageInsertion.key (Lit |ins#0@@2|))))) (BucketWeights.__default.WeightMessage (Lit (PivotBetreeSpec.MessageInsertion.msg (Lit |ins#0@@2|))))) (LitInt Bounds.__default.MaxTotalBucketWeight)))) (=> (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|)))) (<= (+ (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@2|)))))) (BucketWeights.__default.WeightKey (Lit (PivotBetreeSpec.MessageInsertion.key (Lit |ins#0@@2|))))) (BucketWeights.__default.WeightMessage (Lit (PivotBetreeSpec.MessageInsertion.msg (Lit |ins#0@@2|))))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (PivotBetreeSpec.__default.ValidInsertion (Lit |ins#0@@2|)))))) :qid |PivotBet.292:28| :weight 3 :skolemid |4676| :pattern ( (PivotBetreeSpec.__default.ValidInsertion (Lit |ins#0@@2|))) ))))
(assert (forall ((arg0@@658 T@U) ) (! (= (type (PivotBetreeSpec.__default.InsertionReads arg0@@658)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.InsertionReads| :pattern ( (PivotBetreeSpec.__default.InsertionReads arg0@@658)) )))
(assert  (=> true (forall ((|ins#0@@3| T@U) ) (!  (=> (and (= (type |ins#0@@3|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.InsertionReads#canCall| |ins#0@@3|) (and ($Is |ins#0@@3| Tclass.PivotBetreeSpec.MessageInsertion) (PivotBetreeSpec.__default.ValidInsertion |ins#0@@3|)))) ($Is (PivotBetreeSpec.__default.InsertionReads |ins#0@@3|) (TSeq Tclass.PivotBetreeGraph.ReadOp))) :qid |PivotBet.298:27| :skolemid |4677| :pattern ( (PivotBetreeSpec.__default.InsertionReads |ins#0@@3|)) ))))
(assert (forall ((|ins#0@@4| T@U) ) (!  (=> (and (= (type |ins#0@@4|) DatatypeTypeType) ($Is |ins#0@@4| Tclass.PivotBetreeSpec.MessageInsertion)) (and (=> (|PivotBetreeSpec.__default.InsertionReads#requires| |ins#0@@4|) (PivotBetreeSpec.__default.ValidInsertion |ins#0@@4|)) (=> (PivotBetreeSpec.__default.ValidInsertion |ins#0@@4|) (|PivotBetreeSpec.__default.InsertionReads#requires| |ins#0@@4|)))) :qid |PivotBet.298:27| :skolemid |4678| :pattern ( (|PivotBetreeSpec.__default.InsertionReads#requires| |ins#0@@4|)) )))
(assert  (=> true (forall ((|ins#0@@5| T@U) ) (!  (=> (and (= (type |ins#0@@5|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.InsertionReads#canCall| |ins#0@@5|) (and ($Is |ins#0@@5| Tclass.PivotBetreeSpec.MessageInsertion) (PivotBetreeSpec.__default.ValidInsertion |ins#0@@5|)))) (and (and |PivotBetreeGraph.__default.Root#canCall| (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@5|)) (= (PivotBetreeSpec.__default.InsertionReads |ins#0@@5|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit PivotBetreeGraph.__default.Root) (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@5|))))))) :qid |PivotBet.298:27| :skolemid |4679| :pattern ( (PivotBetreeSpec.__default.InsertionReads |ins#0@@5|)) ))))
(assert  (=> true (forall ((|ins#0@@6| T@U) ) (!  (=> (and (= (type |ins#0@@6|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.InsertionReads#canCall| (Lit |ins#0@@6|)) (and ($Is |ins#0@@6| Tclass.PivotBetreeSpec.MessageInsertion) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidInsertion (Lit |ins#0@@6|)))))))) (and (and |PivotBetreeGraph.__default.Root#canCall| (PivotBetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@6|))) (= (PivotBetreeSpec.__default.InsertionReads (Lit |ins#0@@6|)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit PivotBetreeGraph.__default.Root) (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@6|))))))))))) :qid |PivotBet.298:27| :weight 3 :skolemid |4680| :pattern ( (PivotBetreeSpec.__default.InsertionReads (Lit |ins#0@@6|))) ))))
(assert (forall ((arg0@@659 T@U) ) (! (= (type (PivotBetreeSpec.__default.InsertionOps arg0@@659)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.InsertionOps| :pattern ( (PivotBetreeSpec.__default.InsertionOps arg0@@659)) )))
(assert  (=> true (forall ((|ins#0@@7| T@U) ) (!  (=> (and (= (type |ins#0@@7|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.InsertionOps#canCall| |ins#0@@7|) (and ($Is |ins#0@@7| Tclass.PivotBetreeSpec.MessageInsertion) (PivotBetreeSpec.__default.ValidInsertion |ins#0@@7|)))) ($Is (PivotBetreeSpec.__default.InsertionOps |ins#0@@7|) (TSeq Tclass.PivotBetreeGraph.Op))) :qid |PivotBet.304:25| :skolemid |4681| :pattern ( (PivotBetreeSpec.__default.InsertionOps |ins#0@@7|)) ))))
(assert (forall ((|ins#0@@8| T@U) ) (!  (=> (and (= (type |ins#0@@8|) DatatypeTypeType) ($Is |ins#0@@8| Tclass.PivotBetreeSpec.MessageInsertion)) (and (=> (|PivotBetreeSpec.__default.InsertionOps#requires| |ins#0@@8|) (PivotBetreeSpec.__default.ValidInsertion |ins#0@@8|)) (=> (PivotBetreeSpec.__default.ValidInsertion |ins#0@@8|) (|PivotBetreeSpec.__default.InsertionOps#requires| |ins#0@@8|)))) :qid |PivotBet.304:25| :skolemid |4682| :pattern ( (|PivotBetreeSpec.__default.InsertionOps#requires| |ins#0@@8|)) )))
(assert  (=> true (forall ((|ins#0@@9| T@U) ) (!  (=> (and (= (type |ins#0@@9|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.InsertionOps#canCall| |ins#0@@9|) (and ($Is |ins#0@@9| Tclass.PivotBetreeSpec.MessageInsertion) (PivotBetreeSpec.__default.ValidInsertion |ins#0@@9|)))) (and (and (and (and (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@9|) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@9|)) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@9|)) (|PivotBetreeSpec.__default.AddMessageToNode#canCall| (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@9|) (PivotBetreeSpec.MessageInsertion.key |ins#0@@9|) (PivotBetreeSpec.MessageInsertion.msg |ins#0@@9|))) |PivotBetreeGraph.__default.Root#canCall|) (= (PivotBetreeSpec.__default.InsertionOps |ins#0@@9|) (let ((|newroot#0| (PivotBetreeSpec.__default.AddMessageToNode (PivotBetreeSpec.MessageInsertion.oldroot |ins#0@@9|) (PivotBetreeSpec.MessageInsertion.key |ins#0@@9|) (PivotBetreeSpec.MessageInsertion.msg |ins#0@@9|)))) (let ((|writeop#0| (|#PivotBetreeGraph.Op.WriteOp| (Lit PivotBetreeGraph.__default.Root) |newroot#0|))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |writeop#0|))))))) :qid |PivotBet.304:25| :skolemid |4683| :pattern ( (PivotBetreeSpec.__default.InsertionOps |ins#0@@9|)) ))))
(assert  (=> true (forall ((|ins#0@@10| T@U) ) (!  (=> (and (= (type |ins#0@@10|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.InsertionOps#canCall| (Lit |ins#0@@10|)) (and ($Is |ins#0@@10| Tclass.PivotBetreeSpec.MessageInsertion) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidInsertion (Lit |ins#0@@10|)))))))) (and (and (and (and (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@10|)) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@10|))) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q (Lit |ins#0@@10|))) (|PivotBetreeSpec.__default.AddMessageToNode#canCall| (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@10|))) (Lit (PivotBetreeSpec.MessageInsertion.key (Lit |ins#0@@10|))) (Lit (PivotBetreeSpec.MessageInsertion.msg (Lit |ins#0@@10|))))) |PivotBetreeGraph.__default.Root#canCall|) (= (PivotBetreeSpec.__default.InsertionOps (Lit |ins#0@@10|)) (let ((|newroot#1| (Lit (PivotBetreeSpec.__default.AddMessageToNode (Lit (PivotBetreeSpec.MessageInsertion.oldroot (Lit |ins#0@@10|))) (Lit (PivotBetreeSpec.MessageInsertion.key (Lit |ins#0@@10|))) (Lit (PivotBetreeSpec.MessageInsertion.msg (Lit |ins#0@@10|))))))) (let ((|writeop#1| (Lit (|#PivotBetreeGraph.Op.WriteOp| (Lit PivotBetreeGraph.__default.Root) |newroot#1|)))) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box |writeop#1|)))))))) :qid |PivotBet.304:25| :weight 3 :skolemid |4684| :pattern ( (PivotBetreeSpec.__default.InsertionOps (Lit |ins#0@@10|))) ))))
(assert  (=> true (forall ((|f#0@@78| T@U) ) (!  (=> (and (= (type |f#0@@78|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidFlush#canCall| |f#0@@78|) ($Is |f#0@@78| Tclass.PivotBetreeSpec.NodeFlush))) true) :qid |PivotBet.327:24| :skolemid |4685| :pattern ( (PivotBetreeSpec.__default.ValidFlush |f#0@@78|)) ))))
(assert (forall ((|f#0@@79| T@U) ) (!  (=> (and (= (type |f#0@@79|) DatatypeTypeType) ($Is |f#0@@79| Tclass.PivotBetreeSpec.NodeFlush)) (and (=> (|PivotBetreeSpec.__default.ValidFlush#requires| |f#0@@79|) true) (=> true (|PivotBetreeSpec.__default.ValidFlush#requires| |f#0@@79|)))) :qid |PivotBet.327:24| :skolemid |4686| :pattern ( (|PivotBetreeSpec.__default.ValidFlush#requires| |f#0@@79|)) )))
(assert  (and (= (type StartFuel_BucketsLib._default.BucketComplement) LayerTypeType) (= (type StartFuel_BucketsLib._default.BucketIntersect) LayerTypeType)))
(assert  (=> true (forall ((|f#0@@80| T@U) ) (!  (=> (and (= (type |f#0@@80|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidFlush#canCall| |f#0@@80|) ($Is |f#0@@80| Tclass.PivotBetreeSpec.NodeFlush))) (and (and (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (=> (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFlush.child |f#0@@80|))))) (=> (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (=> (<= (LitInt 0) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))))))) (=> (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (=> (<= (LitInt 0) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))))) (and (<= (LitInt 0) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)) (< (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))))) (=> (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)))) (=> (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)) (PivotBetreeSpec.NodeFlush.childref |f#0@@80|))) (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (|BucketsLib.__default.WFBucketList#canCall| (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))))) (=> (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (|BucketsLib.__default.WFBucketList#canCall| (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (BucketsLib.__default.WFBucketList (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (|BucketsLib.__default.WFBucket#canCall| (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|))))) (=> (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (|BucketsLib.__default.WFBucket#canCall| (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|))) (BucketsLib.__default.WFBucket (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|))) (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (|BucketWeights.__default.WeightBucketList#canCall| (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|))) |Bounds.__default.MaxTotalBucketWeight#canCall|))) (=> (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (|BucketWeights.__default.WeightBucketList#canCall| (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|))) |Bounds.__default.MaxTotalBucketWeight#canCall|) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|)) (LitInt Bounds.__default.MaxTotalBucketWeight))) (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (|BucketWeights.__default.WeightBucket#canCall| (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)))))))) (=> (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (|BucketWeights.__default.WeightBucket#canCall| (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)))))) (<= (BucketWeights.__default.WeightBucket (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|)) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)))))) (and (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (|BucketsLib.__default.BucketListWellMarshalled#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (=> (BucketsLib.__default.BucketListWellMarshalled (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))))))) (=> (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (|BucketsLib.__default.WFBucketListProper#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))))) (=> (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (|BucketsLib.__default.WFBucketListProper#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (BucketsLib.__default.WFBucketListProper (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (and (and (and (|$IsA#BucketsLib.Bucket| (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|)) (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.BucketComplement StartFuel_BucketsLib._default.BucketComplement ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))) (PivotBetreeSpec.NodeFlush.keys |f#0@@80|)))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (|BucketsLib.__default.BucketComplement#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))) (PivotBetreeSpec.NodeFlush.keys |f#0@@80|))))) (=> (|BucketsLib.Bucket#Equal| (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|) (BucketsLib.__default.BucketComplement StartFuel_BucketsLib._default.BucketComplement ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))) (PivotBetreeSpec.NodeFlush.keys |f#0@@80|))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@80|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|)) (|BucketsLib.__default.BucketIntersect#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))) (PivotBetreeSpec.NodeFlush.keys |f#0@@80|))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@80|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (|BucketsLib.__default.BucketListFlush#canCall| (BucketsLib.__default.BucketIntersect StartFuel_BucketsLib._default.BucketIntersect ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))) (PivotBetreeSpec.NodeFlush.keys |f#0@@80|)) (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|))))))))))) (and (=> (PivotBetreeSpec.__default.ValidFlush |f#0@@80|) (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (and (<= (LitInt 0) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)) (< (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)) (PivotBetreeSpec.NodeFlush.childref |f#0@@80|))) (BucketsLib.__default.WFBucketList (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (BucketsLib.__default.WFBucket (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|)) (LitInt Bounds.__default.MaxTotalBucketWeight))) (<= (BucketWeights.__default.WeightBucket (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|)) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)))))) (=> (and (and (BucketsLib.__default.BucketListWellMarshalled (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))))) (BucketsLib.__default.WFBucketListProper (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (and (|BucketsLib.Bucket#Equal| (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|) (BucketsLib.__default.BucketComplement StartFuel_BucketsLib._default.BucketComplement ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))) (PivotBetreeSpec.NodeFlush.keys |f#0@@80|))) (|Seq#Equal| (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|) (BucketsLib.__default.BucketListFlush (BucketsLib.__default.BucketIntersect StartFuel_BucketsLib._default.BucketIntersect ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))) (PivotBetreeSpec.NodeFlush.keys |f#0@@80|)) (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))))))) (=> (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (and (<= (LitInt 0) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)) (< (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)))) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)) (PivotBetreeSpec.NodeFlush.childref |f#0@@80|))) (BucketsLib.__default.WFBucketList (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (BucketsLib.__default.WFBucket (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|)) (LitInt Bounds.__default.MaxTotalBucketWeight))) (<= (BucketWeights.__default.WeightBucket (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|)) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|)))))) (=> (and (and (BucketsLib.__default.BucketListWellMarshalled (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))))) (BucketsLib.__default.WFBucketListProper (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|)))) (and (|BucketsLib.Bucket#Equal| (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@80|) (BucketsLib.__default.BucketComplement StartFuel_BucketsLib._default.BucketComplement ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))) (PivotBetreeSpec.NodeFlush.keys |f#0@@80|))) (|Seq#Equal| (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@80|) (BucketsLib.__default.BucketListFlush (BucketsLib.__default.BucketIntersect StartFuel_BucketsLib._default.BucketIntersect ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@80|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@80|))) (PivotBetreeSpec.NodeFlush.keys |f#0@@80|)) (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.child |f#0@@80|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.child |f#0@@80|))))))) (PivotBetreeSpec.__default.ValidFlush |f#0@@80|))))) :qid |PivotBet.327:24| :skolemid |4687| :pattern ( (PivotBetreeSpec.__default.ValidFlush |f#0@@80|)) ))))
(assert  (=> true (forall ((|f#0@@81| T@U) ) (!  (=> (and (= (type |f#0@@81|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidFlush#canCall| (Lit |f#0@@81|)) ($Is |f#0@@81| Tclass.PivotBetreeSpec.NodeFlush))) (and (and (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))) (=> (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (=> (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|)))))))))) (=> (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (=> (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|)))))))) (and (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))) (< (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))))) (=> (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|)))))))))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))))) (=> (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|)))))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))) (Lit (PivotBetreeSpec.NodeFlush.childref (Lit |f#0@@81|))))) (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))) (|BucketsLib.__default.WFBucketList#canCall| (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))))) (=> (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))) (|BucketsLib.__default.WFBucketList#canCall| (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (|BucketsLib.__default.WFBucket#canCall| (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|))))))) (=> (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (|BucketsLib.__default.WFBucket#canCall| (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|)))))))) (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|))))) |Bounds.__default.MaxTotalBucketWeight#canCall|))) (=> (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|))))) |Bounds.__default.MaxTotalBucketWeight#canCall|) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|)))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (|BucketWeights.__default.WeightBucket#canCall| (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|))))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))))))))) (=> (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (|BucketWeights.__default.WeightBucket#canCall| (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|))))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))))))) (<= (LitInt (BucketWeights.__default.WeightBucket (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|))))) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))))))) (and (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (|BucketsLib.__default.BucketListWellMarshalled#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketListWellMarshalled (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))))))) (=> (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))) (|BucketsLib.__default.WFBucketListProper#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))))) (=> (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))) (|BucketsLib.__default.WFBucketListProper#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketListProper (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))))))) (and (and (and (|$IsA#BucketsLib.Bucket| (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|)))) (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.BucketComplement StartFuel_BucketsLib._default.BucketComplement ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))) (Lit (PivotBetreeSpec.NodeFlush.keys (Lit |f#0@@81|)))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (|BucketsLib.__default.BucketComplement#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))) (Lit (PivotBetreeSpec.NodeFlush.keys (Lit |f#0@@81|))))))) (=> (|BucketsLib.Bucket#Equal| (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|)) (BucketsLib.__default.BucketComplement StartFuel_BucketsLib._default.BucketComplement ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))) (Lit (PivotBetreeSpec.NodeFlush.keys (Lit |f#0@@81|))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|))) (|BucketsLib.__default.BucketIntersect#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))) (Lit (PivotBetreeSpec.NodeFlush.keys (Lit |f#0@@81|))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@81|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))) (|BucketsLib.__default.BucketListFlush#canCall| (BucketsLib.__default.BucketIntersect StartFuel_BucketsLib._default.BucketIntersect ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))) (Lit (PivotBetreeSpec.NodeFlush.keys (Lit |f#0@@81|)))) (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))))))))))) (and (=> (PivotBetreeSpec.__default.ValidFlush (Lit |f#0@@81|)) (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|)))) (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (and (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))) (< (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))))))) (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|)))))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))) (Lit (PivotBetreeSpec.NodeFlush.childref (Lit |f#0@@81|))))) (BucketsLib.__default.WFBucketList (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))) (BucketsLib.__default.WFBucket (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|))))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|)))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (<= (LitInt (BucketWeights.__default.WeightBucket (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|))))) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))))))) (=> (and (and (BucketsLib.__default.BucketListWellMarshalled (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))))) (BucketsLib.__default.WFBucketListProper (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))) (and (|BucketsLib.Bucket#Equal| (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|)) (BucketsLib.__default.BucketComplement StartFuel_BucketsLib._default.BucketComplement ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))) (Lit (PivotBetreeSpec.NodeFlush.keys (Lit |f#0@@81|))))) (|Seq#Equal| (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|)) (BucketsLib.__default.BucketListFlush (BucketsLib.__default.BucketIntersect StartFuel_BucketsLib._default.BucketIntersect ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))) (Lit (PivotBetreeSpec.NodeFlush.keys (Lit |f#0@@81|)))) (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))))))) (=> (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|)))) (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (and (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))) (< (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))))))) (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|)))))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))) (Lit (PivotBetreeSpec.NodeFlush.childref (Lit |f#0@@81|))))) (BucketsLib.__default.WFBucketList (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))) (BucketsLib.__default.WFBucket (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|))))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|)))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (<= (LitInt (BucketWeights.__default.WeightBucket (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|))))) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|)))))))) (=> (and (and (BucketsLib.__default.BucketListWellMarshalled (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))))) (BucketsLib.__default.WFBucketListProper (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))))) (and (|BucketsLib.Bucket#Equal| (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@81|)) (BucketsLib.__default.BucketComplement StartFuel_BucketsLib._default.BucketComplement ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))) (Lit (PivotBetreeSpec.NodeFlush.keys (Lit |f#0@@81|))))) (|Seq#Equal| (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@81|)) (BucketsLib.__default.BucketListFlush (BucketsLib.__default.BucketIntersect StartFuel_BucketsLib._default.BucketIntersect ($Unbox DatatypeTypeType (|Seq#Index| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@81|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@81|))))) (Lit (PivotBetreeSpec.NodeFlush.keys (Lit |f#0@@81|)))) (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|))))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@81|)))))))))) (PivotBetreeSpec.__default.ValidFlush (Lit |f#0@@81|)))))) :qid |PivotBet.327:24| :weight 3 :skolemid |4688| :pattern ( (PivotBetreeSpec.__default.ValidFlush (Lit |f#0@@81|))) ))))
(assert (forall ((arg0@@660 T@U) ) (! (= (type (PivotBetreeSpec.__default.FlushReads arg0@@660)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.FlushReads| :pattern ( (PivotBetreeSpec.__default.FlushReads arg0@@660)) )))
(assert  (=> true (forall ((|f#0@@82| T@U) ) (!  (=> (and (= (type |f#0@@82|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.FlushReads#canCall| |f#0@@82|) (and ($Is |f#0@@82| Tclass.PivotBetreeSpec.NodeFlush) (PivotBetreeSpec.__default.ValidFlush |f#0@@82|)))) ($Is (PivotBetreeSpec.__default.FlushReads |f#0@@82|) (TSeq Tclass.PivotBetreeGraph.ReadOp))) :qid |PivotBet.349:23| :skolemid |4689| :pattern ( (PivotBetreeSpec.__default.FlushReads |f#0@@82|)) ))))
(assert (forall ((|f#0@@83| T@U) ) (!  (=> (and (= (type |f#0@@83|) DatatypeTypeType) ($Is |f#0@@83| Tclass.PivotBetreeSpec.NodeFlush)) (and (=> (|PivotBetreeSpec.__default.FlushReads#requires| |f#0@@83|) (PivotBetreeSpec.__default.ValidFlush |f#0@@83|)) (=> (PivotBetreeSpec.__default.ValidFlush |f#0@@83|) (|PivotBetreeSpec.__default.FlushReads#requires| |f#0@@83|)))) :qid |PivotBet.349:23| :skolemid |4690| :pattern ( (|PivotBetreeSpec.__default.FlushReads#requires| |f#0@@83|)) )))
(assert  (=> true (forall ((|f#0@@84| T@U) ) (!  (=> (and (= (type |f#0@@84|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.FlushReads#canCall| |f#0@@84|) (and ($Is |f#0@@84| Tclass.PivotBetreeSpec.NodeFlush) (PivotBetreeSpec.__default.ValidFlush |f#0@@84|)))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@84|) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@84|)) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@84|) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@84|))) (= (PivotBetreeSpec.__default.FlushReads |f#0@@84|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (PivotBetreeSpec.NodeFlush.parentref |f#0@@84|) (PivotBetreeSpec.NodeFlush.parent |f#0@@84|)))) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (PivotBetreeSpec.NodeFlush.childref |f#0@@84|) (PivotBetreeSpec.NodeFlush.child |f#0@@84|))))))) :qid |PivotBet.349:23| :skolemid |4691| :pattern ( (PivotBetreeSpec.__default.FlushReads |f#0@@84|)) ))))
(assert  (=> true (forall ((|f#0@@85| T@U) ) (!  (=> (and (= (type |f#0@@85|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.FlushReads#canCall| (Lit |f#0@@85|)) (and ($Is |f#0@@85| Tclass.PivotBetreeSpec.NodeFlush) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidFlush (Lit |f#0@@85|)))))))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@85|)) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@85|))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@85|)) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@85|)))) (= (PivotBetreeSpec.__default.FlushReads (Lit |f#0@@85|)) (Lit (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit (PivotBetreeSpec.NodeFlush.parentref (Lit |f#0@@85|))) (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@85|))))))) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit (PivotBetreeSpec.NodeFlush.childref (Lit |f#0@@85|))) (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@85|))))))))))) :qid |PivotBet.349:23| :weight 3 :skolemid |4692| :pattern ( (PivotBetreeSpec.__default.FlushReads (Lit |f#0@@85|))) ))))
(assert (forall ((arg0@@661 T@U) ) (! (= (type (PivotBetreeSpec.__default.FlushOps arg0@@661)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.FlushOps| :pattern ( (PivotBetreeSpec.__default.FlushOps arg0@@661)) )))
(assert  (=> true (forall ((|f#0@@86| T@U) ) (!  (=> (and (= (type |f#0@@86|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.FlushOps#canCall| |f#0@@86|) (and ($Is |f#0@@86| Tclass.PivotBetreeSpec.NodeFlush) (PivotBetreeSpec.__default.ValidFlush |f#0@@86|)))) ($Is (PivotBetreeSpec.__default.FlushOps |f#0@@86|) (TSeq Tclass.PivotBetreeGraph.Op))) :qid |PivotBet.358:21| :skolemid |4693| :pattern ( (PivotBetreeSpec.__default.FlushOps |f#0@@86|)) ))))
(assert (forall ((|f#0@@87| T@U) ) (!  (=> (and (= (type |f#0@@87|) DatatypeTypeType) ($Is |f#0@@87| Tclass.PivotBetreeSpec.NodeFlush)) (and (=> (|PivotBetreeSpec.__default.FlushOps#requires| |f#0@@87|) (PivotBetreeSpec.__default.ValidFlush |f#0@@87|)) (=> (PivotBetreeSpec.__default.ValidFlush |f#0@@87|) (|PivotBetreeSpec.__default.FlushOps#requires| |f#0@@87|)))) :qid |PivotBet.358:21| :skolemid |4694| :pattern ( (|PivotBetreeSpec.__default.FlushOps#requires| |f#0@@87|)) )))
(assert  (=> true (forall ((|f#0@@88| T@U) ) (!  (=> (and (= (type |f#0@@88|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.FlushOps#canCall| |f#0@@88|) (and ($Is |f#0@@88| Tclass.PivotBetreeSpec.NodeFlush) (PivotBetreeSpec.__default.ValidFlush |f#0@@88|)))) (and (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@88|))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@88|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|)) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFlush.parent |f#0@@88|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|)) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|))) (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|) (let ((|dt_update_tmp#0#0@@1| (PivotBetreeSpec.NodeFlush.child |f#0@@88|))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|) (and (PivotBetreeGraph.Node.Node_q |dt_update_tmp#0#0@@1|) (PivotBetreeGraph.Node.Node_q |dt_update_tmp#0#0@@1|))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|) (PivotBetreeSpec.NodeFlush.NodeFlush_q |f#0@@88|)))) (= (PivotBetreeSpec.__default.FlushOps |f#0@@88|) (let ((|newparent#0@@7| (|#PivotBetreeGraph.Node.Node| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFlush.parent |f#0@@88|)) (|#Options.Option.Some| ($Box (|Seq#Update| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFlush.parent |f#0@@88|)))) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@88|) (PivotBetreeSpec.NodeFlush.newchildref |f#0@@88|)))) (|Seq#Update| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFlush.parent |f#0@@88|)) (PivotBetreeSpec.NodeFlush.slotIndex |f#0@@88|) ($Box (PivotBetreeSpec.NodeFlush.newParentBucket |f#0@@88|)))))) (let ((|newchild#0@@3| (let ((|dt_update_tmp#0#0@@2| (PivotBetreeSpec.NodeFlush.child |f#0@@88|))) (let ((|dt_update#buckets#0#0@@0| (PivotBetreeSpec.NodeFlush.newChildBuckets |f#0@@88|))) (|#PivotBetreeGraph.Node.Node| (PivotBetreeGraph.Node.pivotTable |dt_update_tmp#0#0@@2|) (PivotBetreeGraph.Node.children |dt_update_tmp#0#0@@2|) |dt_update#buckets#0#0@@0|))))) (let ((|allocop#0| (|#PivotBetreeGraph.Op.AllocOp| (PivotBetreeSpec.NodeFlush.newchildref |f#0@@88|) |newchild#0@@3|))) (let ((|writeop#0@@0| (|#PivotBetreeGraph.Op.WriteOp| (PivotBetreeSpec.NodeFlush.parentref |f#0@@88|) |newparent#0@@7|))) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |allocop#0|)) ($Box |writeop#0@@0|))))))))) :qid |PivotBet.358:21| :skolemid |4695| :pattern ( (PivotBetreeSpec.__default.FlushOps |f#0@@88|)) ))))
(assert  (=> true (forall ((|f#0@@89| T@U) ) (!  (=> (and (= (type |f#0@@89|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.FlushOps#canCall| (Lit |f#0@@89|)) (and ($Is |f#0@@89| Tclass.PivotBetreeSpec.NodeFlush) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidFlush (Lit |f#0@@89|)))))))) (and (and (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@89|))))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@89|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|)))) (and (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@89|))))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|))) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|)))) (and (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|)) (let ((|dt_update_tmp#0#1@@1| (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@89|))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|)) (and (PivotBetreeGraph.Node.Node_q |dt_update_tmp#0#1@@1|) (PivotBetreeGraph.Node.Node_q |dt_update_tmp#0#1@@1|))))) (and (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|)) (PivotBetreeSpec.NodeFlush.NodeFlush_q (Lit |f#0@@89|))))) (= (PivotBetreeSpec.__default.FlushOps (Lit |f#0@@89|)) (let ((|newparent#1| (|#PivotBetreeGraph.Node.Node| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@89|))))) (|#Options.Option.Some| ($Box (|Seq#Update| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@89|)))))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@89|))) (Lit (PivotBetreeSpec.NodeFlush.newchildref (Lit |f#0@@89|)))))) (|Seq#Update| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFlush.parent (Lit |f#0@@89|))))) (LitInt (PivotBetreeSpec.NodeFlush.slotIndex (Lit |f#0@@89|))) ($Box (Lit (PivotBetreeSpec.NodeFlush.newParentBucket (Lit |f#0@@89|)))))))) (let ((|newchild#1| (let ((|dt_update_tmp#0#1@@2| (Lit (PivotBetreeSpec.NodeFlush.child (Lit |f#0@@89|))))) (let ((|dt_update#buckets#0#1@@0| (Lit (PivotBetreeSpec.NodeFlush.newChildBuckets (Lit |f#0@@89|))))) (Lit (|#PivotBetreeGraph.Node.Node| (Lit (PivotBetreeGraph.Node.pivotTable |dt_update_tmp#0#1@@2|)) (Lit (PivotBetreeGraph.Node.children |dt_update_tmp#0#1@@2|)) |dt_update#buckets#0#1@@0|)))))) (let ((|allocop#1| (|#PivotBetreeGraph.Op.AllocOp| (Lit (PivotBetreeSpec.NodeFlush.newchildref (Lit |f#0@@89|))) |newchild#1|))) (let ((|writeop#1@@0| (|#PivotBetreeGraph.Op.WriteOp| (Lit (PivotBetreeSpec.NodeFlush.parentref (Lit |f#0@@89|))) |newparent#1|))) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |allocop#1|)) ($Box |writeop#1@@0|))))))))) :qid |PivotBet.358:21| :weight 3 :skolemid |4696| :pattern ( (PivotBetreeSpec.__default.FlushOps (Lit |f#0@@89|))) ))))
(assert  (=> true (forall ((|growth#0| T@U) ) (!  (=> (and (= (type |growth#0|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidGrow#canCall| |growth#0|) ($Is |growth#0| Tclass.PivotBetreeSpec.RootGrowth))) true) :qid |PivotBet.376:23| :skolemid |4697| :pattern ( (PivotBetreeSpec.__default.ValidGrow |growth#0|)) ))))
(assert (forall ((|growth#0@@0| T@U) ) (!  (=> (and (= (type |growth#0@@0|) DatatypeTypeType) ($Is |growth#0@@0| Tclass.PivotBetreeSpec.RootGrowth)) (and (=> (|PivotBetreeSpec.__default.ValidGrow#requires| |growth#0@@0|) true) (=> true (|PivotBetreeSpec.__default.ValidGrow#requires| |growth#0@@0|)))) :qid |PivotBet.376:23| :skolemid |4698| :pattern ( (|PivotBetreeSpec.__default.ValidGrow#requires| |growth#0@@0|)) )))
(assert  (=> true (forall ((|growth#0@@1| T@U) ) (!  (=> (and (= (type |growth#0@@1|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidGrow#canCall| |growth#0@@1|) ($Is |growth#0@@1| Tclass.PivotBetreeSpec.RootGrowth))) (and (and (PivotBetreeSpec.RootGrowth.RootGrowth_q |growth#0@@1|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.RootGrowth.oldroot |growth#0@@1|))) (and (=> (PivotBetreeSpec.__default.ValidGrow |growth#0@@1|) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.RootGrowth.oldroot |growth#0@@1|))) (=> (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.RootGrowth.oldroot |growth#0@@1|)) (PivotBetreeSpec.__default.ValidGrow |growth#0@@1|))))) :qid |PivotBet.376:23| :skolemid |4699| :pattern ( (PivotBetreeSpec.__default.ValidGrow |growth#0@@1|)) ))))
(assert  (=> true (forall ((|growth#0@@2| T@U) ) (!  (=> (and (= (type |growth#0@@2|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidGrow#canCall| (Lit |growth#0@@2|)) ($Is |growth#0@@2| Tclass.PivotBetreeSpec.RootGrowth))) (and (and (PivotBetreeSpec.RootGrowth.RootGrowth_q (Lit |growth#0@@2|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.RootGrowth.oldroot (Lit |growth#0@@2|))))) (and (=> (PivotBetreeSpec.__default.ValidGrow (Lit |growth#0@@2|)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.RootGrowth.oldroot (Lit |growth#0@@2|)))))))) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.RootGrowth.oldroot (Lit |growth#0@@2|))))))) (PivotBetreeSpec.__default.ValidGrow (Lit |growth#0@@2|)))))) :qid |PivotBet.376:23| :weight 3 :skolemid |4700| :pattern ( (PivotBetreeSpec.__default.ValidGrow (Lit |growth#0@@2|))) ))))
(assert (forall ((arg0@@662 T@U) ) (! (= (type (PivotBetreeSpec.__default.GrowReads arg0@@662)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.GrowReads| :pattern ( (PivotBetreeSpec.__default.GrowReads arg0@@662)) )))
(assert  (=> true (forall ((|growth#0@@3| T@U) ) (!  (=> (and (= (type |growth#0@@3|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.GrowReads#canCall| |growth#0@@3|) (and ($Is |growth#0@@3| Tclass.PivotBetreeSpec.RootGrowth) (PivotBetreeSpec.__default.ValidGrow |growth#0@@3|)))) ($Is (PivotBetreeSpec.__default.GrowReads |growth#0@@3|) (TSeq Tclass.PivotBetreeGraph.ReadOp))) :qid |PivotBet.381:22| :skolemid |4701| :pattern ( (PivotBetreeSpec.__default.GrowReads |growth#0@@3|)) ))))
(assert (forall ((|growth#0@@4| T@U) ) (!  (=> (and (= (type |growth#0@@4|) DatatypeTypeType) ($Is |growth#0@@4| Tclass.PivotBetreeSpec.RootGrowth)) (and (=> (|PivotBetreeSpec.__default.GrowReads#requires| |growth#0@@4|) (PivotBetreeSpec.__default.ValidGrow |growth#0@@4|)) (=> (PivotBetreeSpec.__default.ValidGrow |growth#0@@4|) (|PivotBetreeSpec.__default.GrowReads#requires| |growth#0@@4|)))) :qid |PivotBet.381:22| :skolemid |4702| :pattern ( (|PivotBetreeSpec.__default.GrowReads#requires| |growth#0@@4|)) )))
(assert  (=> true (forall ((|growth#0@@5| T@U) ) (!  (=> (and (= (type |growth#0@@5|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.GrowReads#canCall| |growth#0@@5|) (and ($Is |growth#0@@5| Tclass.PivotBetreeSpec.RootGrowth) (PivotBetreeSpec.__default.ValidGrow |growth#0@@5|)))) (and (and |PivotBetreeGraph.__default.Root#canCall| (PivotBetreeSpec.RootGrowth.RootGrowth_q |growth#0@@5|)) (= (PivotBetreeSpec.__default.GrowReads |growth#0@@5|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit PivotBetreeGraph.__default.Root) (PivotBetreeSpec.RootGrowth.oldroot |growth#0@@5|))))))) :qid |PivotBet.381:22| :skolemid |4703| :pattern ( (PivotBetreeSpec.__default.GrowReads |growth#0@@5|)) ))))
(assert  (=> true (forall ((|growth#0@@6| T@U) ) (!  (=> (and (= (type |growth#0@@6|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.GrowReads#canCall| (Lit |growth#0@@6|)) (and ($Is |growth#0@@6| Tclass.PivotBetreeSpec.RootGrowth) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidGrow (Lit |growth#0@@6|)))))))) (and (and |PivotBetreeGraph.__default.Root#canCall| (PivotBetreeSpec.RootGrowth.RootGrowth_q (Lit |growth#0@@6|))) (= (PivotBetreeSpec.__default.GrowReads (Lit |growth#0@@6|)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit PivotBetreeGraph.__default.Root) (Lit (PivotBetreeSpec.RootGrowth.oldroot (Lit |growth#0@@6|))))))))))) :qid |PivotBet.381:22| :weight 3 :skolemid |4704| :pattern ( (PivotBetreeSpec.__default.GrowReads (Lit |growth#0@@6|))) ))))
(assert (forall ((arg0@@663 T@U) ) (! (= (type (PivotBetreeSpec.__default.GrowOps arg0@@663)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.GrowOps| :pattern ( (PivotBetreeSpec.__default.GrowOps arg0@@663)) )))
(assert  (=> true (forall ((|growth#0@@7| T@U) ) (!  (=> (and (= (type |growth#0@@7|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.GrowOps#canCall| |growth#0@@7|) (and ($Is |growth#0@@7| Tclass.PivotBetreeSpec.RootGrowth) (PivotBetreeSpec.__default.ValidGrow |growth#0@@7|)))) ($Is (PivotBetreeSpec.__default.GrowOps |growth#0@@7|) (TSeq Tclass.PivotBetreeGraph.Op))) :qid |PivotBet.387:20| :skolemid |4705| :pattern ( (PivotBetreeSpec.__default.GrowOps |growth#0@@7|)) ))))
(assert (forall ((|growth#0@@8| T@U) ) (!  (=> (and (= (type |growth#0@@8|) DatatypeTypeType) ($Is |growth#0@@8| Tclass.PivotBetreeSpec.RootGrowth)) (and (=> (|PivotBetreeSpec.__default.GrowOps#requires| |growth#0@@8|) (PivotBetreeSpec.__default.ValidGrow |growth#0@@8|)) (=> (PivotBetreeSpec.__default.ValidGrow |growth#0@@8|) (|PivotBetreeSpec.__default.GrowOps#requires| |growth#0@@8|)))) :qid |PivotBet.387:20| :skolemid |4706| :pattern ( (|PivotBetreeSpec.__default.GrowOps#requires| |growth#0@@8|)) )))
(assert  (=> true (forall ((|growth#0@@9| T@U) ) (!  (=> (and (= (type |growth#0@@9|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.GrowOps#canCall| |growth#0@@9|) (and ($Is |growth#0@@9| Tclass.PivotBetreeSpec.RootGrowth) (PivotBetreeSpec.__default.ValidGrow |growth#0@@9|)))) (and (and (and (PivotBetreeSpec.RootGrowth.RootGrowth_q |growth#0@@9|) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (and (and (PivotBetreeSpec.RootGrowth.RootGrowth_q |growth#0@@9|) (PivotBetreeSpec.RootGrowth.RootGrowth_q |growth#0@@9|)) |PivotBetreeGraph.__default.Root#canCall|)) (= (PivotBetreeSpec.__default.GrowOps |growth#0@@9|) (let ((|newroot#0@@0| (|#PivotBetreeGraph.Node.Node| (Lit (|Seq#Empty| BoxType)) (|#Options.Option.Some| ($Box (|Seq#Build| (|Seq#Empty| BoxType) (PivotBetreeSpec.RootGrowth.newchildref |growth#0@@9|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType)))))))) (let ((|allocop#0@@0| (|#PivotBetreeGraph.Op.AllocOp| (PivotBetreeSpec.RootGrowth.newchildref |growth#0@@9|) (PivotBetreeSpec.RootGrowth.oldroot |growth#0@@9|)))) (let ((|writeop#0@@1| (|#PivotBetreeGraph.Op.WriteOp| (Lit PivotBetreeGraph.__default.Root) |newroot#0@@0|))) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |allocop#0@@0|)) ($Box |writeop#0@@1|)))))))) :qid |PivotBet.387:20| :skolemid |4707| :pattern ( (PivotBetreeSpec.__default.GrowOps |growth#0@@9|)) ))))
(assert  (=> true (forall ((|growth#0@@10| T@U) ) (!  (=> (and (= (type |growth#0@@10|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.GrowOps#canCall| (Lit |growth#0@@10|)) (and ($Is |growth#0@@10| Tclass.PivotBetreeSpec.RootGrowth) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidGrow (Lit |growth#0@@10|)))))))) (and (and (and (PivotBetreeSpec.RootGrowth.RootGrowth_q (Lit |growth#0@@10|)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (and (and (PivotBetreeSpec.RootGrowth.RootGrowth_q (Lit |growth#0@@10|)) (PivotBetreeSpec.RootGrowth.RootGrowth_q (Lit |growth#0@@10|))) |PivotBetreeGraph.__default.Root#canCall|)) (= (PivotBetreeSpec.__default.GrowOps (Lit |growth#0@@10|)) (let ((|newroot#1@@0| (|#PivotBetreeGraph.Node.Node| (Lit (|Seq#Empty| BoxType)) (Lit (|#Options.Option.Some| ($Box (Lit (|Seq#Build| (|Seq#Empty| BoxType) (Lit (PivotBetreeSpec.RootGrowth.newchildref (Lit |growth#0@@10|)))))))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType)))))))) (let ((|allocop#1@@0| (Lit (|#PivotBetreeGraph.Op.AllocOp| (Lit (PivotBetreeSpec.RootGrowth.newchildref (Lit |growth#0@@10|))) (Lit (PivotBetreeSpec.RootGrowth.oldroot (Lit |growth#0@@10|))))))) (let ((|writeop#1@@1| (|#PivotBetreeGraph.Op.WriteOp| (Lit PivotBetreeGraph.__default.Root) |newroot#1@@0|))) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |allocop#1@@0|)) ($Box |writeop#1@@1|)))))))) :qid |PivotBet.387:20| :weight 3 :skolemid |4708| :pattern ( (PivotBetreeSpec.__default.GrowOps (Lit |growth#0@@10|))) ))))
(assert (forall ((arg0@@664 T@U) (arg1@@354 T@U) (arg2@@240 T@U) ) (! (= (type (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft arg0@@664 arg1@@354 arg2@@240)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.CutoffNodeAndKeepLeft| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft arg0@@664 arg1@@354 arg2@@240)) )))
(assert (forall (($ly@@756 T@U) (|node#0@@31| T@U) (|pivot#0@@45| T@U) ) (!  (=> (and (and (= (type $ly@@756) LayerTypeType) (= (type |node#0@@31|) DatatypeTypeType)) (= (type |pivot#0@@45|) (SeqType BoxType))) (= (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft ($LS $ly@@756) |node#0@@31| |pivot#0@@45|) (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@756 |node#0@@31| |pivot#0@@45|))) :qid |PivotBet.416:22| :skolemid |4709| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft ($LS $ly@@756) |node#0@@31| |pivot#0@@45|)) )))
(assert (forall (($ly@@757 T@U) (|node#0@@32| T@U) (|pivot#0@@46| T@U) ) (!  (=> (and (and (= (type $ly@@757) LayerTypeType) (= (type |node#0@@32|) DatatypeTypeType)) (= (type |pivot#0@@46|) (SeqType BoxType))) (= (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@757 |node#0@@32| |pivot#0@@46|) (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $LZ |node#0@@32| |pivot#0@@46|))) :qid |PivotBet.416:22| :skolemid |4710| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft (AsFuelBottom $ly@@757) |node#0@@32| |pivot#0@@46|)) )))
(assert  (=> true (forall (($ly@@758 T@U) (|node#0@@33| T@U) (|pivot#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@758) LayerTypeType) (= (type |node#0@@33|) DatatypeTypeType)) (= (type |pivot#0@@47|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#canCall| |node#0@@33| |pivot#0@@47|) (and (and ($Is |node#0@@33| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@47| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.WFNode |node#0@@33|)))) (and (and (and (and (and (and (and (and (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@33|)) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@33|)))) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|))) (=> (> (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|))) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|)))) |pivot#0@@47|))) (forall ((|key#0@@280| T@U) ) (!  (=> (= (type |key#0@@280|) (SeqType BoxType)) (=> (and ($Is |key#0@@280| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|)))))) ($Box |key#0@@280|)))) (Lexicographic__Byte__Order.__default.lt |key#0@@280| |pivot#0@@47|))) :qid |PivotBet.421:18| :skolemid |4711| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@280| |pivot#0@@47|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|)))))) ($Box |key#0@@280|))) ))) (|ISet#Subset| (PivotBetreeGraph.__default.Successors (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|)) (PivotBetreeGraph.__default.Successors |node#0@@33|))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|))) (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets |node#0@@33|)))) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|))) (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@33|)))) ($Is (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|) Tclass.PivotBetreeGraph.Node))) :qid |PivotBet.416:22| :skolemid |4712| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft $ly@@758 |node#0@@33| |pivot#0@@47|)) ))))
(assert (forall (($ly@@759 T@U) (|node#0@@34| T@U) (|pivot#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@759) LayerTypeType) (= (type |node#0@@34|) DatatypeTypeType)) (= (type |pivot#0@@48|) (SeqType BoxType))) (and ($Is |node#0@@34| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@48| Tclass.KeyType.Key))) (and (=> (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#requires| $ly@@759 |node#0@@34| |pivot#0@@48|) (PivotBetreeSpec.__default.WFNode |node#0@@34|)) (=> (PivotBetreeSpec.__default.WFNode |node#0@@34|) (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#requires| $ly@@759 |node#0@@34| |pivot#0@@48|)))) :qid |PivotBet.416:22| :skolemid |4713| :pattern ( (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#requires| $ly@@759 |node#0@@34| |pivot#0@@48|)) )))
(assert  (and (= (type MoreFuel_BucketsLib._default.SplitBucketLeft0) LayerTypeType) (= (type StartFuelAssert_BucketsLib._default.SplitBucketLeft) LayerTypeType)))
(assert  (=> true (forall (($ly@@760 T@U) (|node#0@@35| T@U) (|pivot#0@@49| T@U) ) (!  (=> (and (and (and (= (type $ly@@760) LayerTypeType) (= (type |node#0@@35|) DatatypeTypeType)) (= (type |pivot#0@@49|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#canCall| |node#0@@35| |pivot#0@@49|) (and (and ($Is |node#0@@35| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@49| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.WFNode |node#0@@35|)))) (and (and (and (PivotBetreeGraph.Node.Node_q |node#0@@35|) (|PivotsLib.__default.CutoffForLeft#canCall| (PivotBetreeGraph.Node.pivotTable |node#0@@35|) |pivot#0@@49|)) (let ((|cLeft#0@@3| (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft (PivotBetreeGraph.Node.pivotTable |node#0@@35|) |pivot#0@@49|))) (and (PivotBetreeGraph.Node.Node_q |node#0@@35|) (and (and (PivotBetreeGraph.Node.Node_q |node#0@@35|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@35|)) (PivotBetreeGraph.Node.Node_q |node#0@@35|))) (and (and (PivotBetreeGraph.Node.Node_q |node#0@@35|) (PivotBetreeGraph.Node.Node_q |node#0@@35|)) (|BucketsLib.__default.SplitBucketListLeft#canCall| (PivotBetreeGraph.Node.buckets |node#0@@35|) (PivotBetreeGraph.Node.pivotTable |node#0@@35|) |cLeft#0@@3| |pivot#0@@49|)))))) (and (and (and (= StartFuel_BucketsLib._default.SplitBucketLeft ($LS MoreFuel_BucketsLib._default.SplitBucketLeft0)) (= StartFuelAssert_BucketsLib._default.SplitBucketLeft ($LS ($LS MoreFuel_BucketsLib._default.SplitBucketLeft0)))) (= (AsFuelBottom MoreFuel_BucketsLib._default.SplitBucketLeft0) MoreFuel_BucketsLib._default.SplitBucketLeft0)) (= (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft ($LS $ly@@760) |node#0@@35| |pivot#0@@49|) (let ((|cLeft#0@@4| (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft (PivotBetreeGraph.Node.pivotTable |node#0@@35|) |pivot#0@@49|))) (let ((|leftPivots#0| (|Seq#Take| (PivotBetreeGraph.Node.pivotTable |node#0@@35|) |cLeft#0@@4|))) (let ((|leftChildren#0| (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@35|)) (|#Options.Option.Some| ($Box (|Seq#Take| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@35|))) (+ |cLeft#0@@4| 1)))) |#Options.Option.None|))) (let ((|leftBuckets#0| (BucketsLib.__default.SplitBucketListLeft (PivotBetreeGraph.Node.buckets |node#0@@35|) (PivotBetreeGraph.Node.pivotTable |node#0@@35|) |cLeft#0@@4| |pivot#0@@49|))) (|#PivotBetreeGraph.Node.Node| |leftPivots#0| |leftChildren#0| |leftBuckets#0|))))))))) :qid |PivotBet.416:22| :skolemid |4714| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft ($LS $ly@@760) |node#0@@35| |pivot#0@@49|)) ))))
(assert (= (type MoreFuel_BucketsLib._default.SplitBucketLeft1) LayerTypeType))
(assert  (=> true (forall (($ly@@761 T@U) (|node#0@@36| T@U) (|pivot#0@@50| T@U) ) (!  (=> (and (and (and (= (type $ly@@761) LayerTypeType) (= (type |node#0@@36|) DatatypeTypeType)) (= (type |pivot#0@@50|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#canCall| (Lit |node#0@@36|) (Lit |pivot#0@@50|)) (and (and ($Is |node#0@@36| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@50| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit |node#0@@36|)))))))) (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@36|)) (|PivotsLib.__default.CutoffForLeft#canCall| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@36|))) (Lit |pivot#0@@50|))) (let ((|cLeft#1| (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@36|))) (Lit |pivot#0@@50|)))) (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@36|)) (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@36|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@36|))))))) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@36|)))) (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@36|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@36|))) (|BucketsLib.__default.SplitBucketListLeft#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@36|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@36|))) |cLeft#1| (Lit |pivot#0@@50|))))))) (and (and (and (= StartFuel_BucketsLib._default.SplitBucketLeft ($LS MoreFuel_BucketsLib._default.SplitBucketLeft1)) (= StartFuelAssert_BucketsLib._default.SplitBucketLeft ($LS ($LS MoreFuel_BucketsLib._default.SplitBucketLeft1)))) (= (AsFuelBottom MoreFuel_BucketsLib._default.SplitBucketLeft1) MoreFuel_BucketsLib._default.SplitBucketLeft1)) (= (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft ($LS $ly@@761) (Lit |node#0@@36|) (Lit |pivot#0@@50|)) (let ((|cLeft#1@@0| (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@36|))) (Lit |pivot#0@@50|)))) (let ((|leftPivots#1| (|Seq#Take| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@36|))) |cLeft#1@@0|))) (let ((|leftChildren#1| (ite (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@36|)))) (|#Options.Option.Some| ($Box (|Seq#Take| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@36|)))))) (+ |cLeft#1@@0| 1)))) |#Options.Option.None|))) (let ((|leftBuckets#1| (BucketsLib.__default.SplitBucketListLeft (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@36|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@36|))) |cLeft#1@@0| (Lit |pivot#0@@50|)))) (|#PivotBetreeGraph.Node.Node| |leftPivots#1| |leftChildren#1| |leftBuckets#1|))))))))) :qid |PivotBet.416:22| :weight 3 :skolemid |4715| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft ($LS $ly@@761) (Lit |node#0@@36|) (Lit |pivot#0@@50|))) ))))
(assert (forall ((arg0@@665 T@U) (arg1@@355 T@U) (arg2@@241 T@U) ) (! (= (type (PivotBetreeSpec.__default.CutoffNodeAndKeepRight arg0@@665 arg1@@355 arg2@@241)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.CutoffNodeAndKeepRight| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepRight arg0@@665 arg1@@355 arg2@@241)) )))
(assert (forall (($ly@@762 T@U) (|node#0@@37| T@U) (|pivot#0@@51| T@U) ) (!  (=> (and (and (= (type $ly@@762) LayerTypeType) (= (type |node#0@@37|) DatatypeTypeType)) (= (type |pivot#0@@51|) (SeqType BoxType))) (= (PivotBetreeSpec.__default.CutoffNodeAndKeepRight ($LS $ly@@762) |node#0@@37| |pivot#0@@51|) (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@762 |node#0@@37| |pivot#0@@51|))) :qid |PivotBet.438:22| :skolemid |4716| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepRight ($LS $ly@@762) |node#0@@37| |pivot#0@@51|)) )))
(assert (forall (($ly@@763 T@U) (|node#0@@38| T@U) (|pivot#0@@52| T@U) ) (!  (=> (and (and (= (type $ly@@763) LayerTypeType) (= (type |node#0@@38|) DatatypeTypeType)) (= (type |pivot#0@@52|) (SeqType BoxType))) (= (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@763 |node#0@@38| |pivot#0@@52|) (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $LZ |node#0@@38| |pivot#0@@52|))) :qid |PivotBet.438:22| :skolemid |4717| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepRight (AsFuelBottom $ly@@763) |node#0@@38| |pivot#0@@52|)) )))
(assert  (=> true (forall (($ly@@764 T@U) (|node#0@@39| T@U) (|pivot#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@764) LayerTypeType) (= (type |node#0@@39|) DatatypeTypeType)) (= (type |pivot#0@@53|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#canCall| |node#0@@39| |pivot#0@@53|) (and (and ($Is |node#0@@39| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@53| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.WFNode |node#0@@39|)))) (and (and (and (and (and (and (and (and (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@39|)) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@39|)))) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|))) (=> (> (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|))) 0) (Lexicographic__Byte__Order.__default.lt |pivot#0@@53| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|)) (LitInt 0)))))) (forall ((|key#0@@281| T@U) ) (!  (=> (= (type |key#0@@281|) (SeqType BoxType)) (=> (and ($Is |key#0@@281| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|)) (LitInt 0))))) ($Box |key#0@@281|)))) (Lexicographic__Byte__Order.__default.lte |pivot#0@@53| |key#0@@281|))) :qid |PivotBet.443:18| :skolemid |4718| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@53| |key#0@@281|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|)) 0)))) ($Box |key#0@@281|))) ))) (|ISet#Subset| (PivotBetreeGraph.__default.Successors (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|)) (PivotBetreeGraph.__default.Successors |node#0@@39|))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|))) (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets |node#0@@39|)))) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|))) (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@39|)))) ($Is (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|) Tclass.PivotBetreeGraph.Node))) :qid |PivotBet.438:22| :skolemid |4719| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepRight $ly@@764 |node#0@@39| |pivot#0@@53|)) ))))
(assert (forall (($ly@@765 T@U) (|node#0@@40| T@U) (|pivot#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@765) LayerTypeType) (= (type |node#0@@40|) DatatypeTypeType)) (= (type |pivot#0@@54|) (SeqType BoxType))) (and ($Is |node#0@@40| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@54| Tclass.KeyType.Key))) (and (=> (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#requires| $ly@@765 |node#0@@40| |pivot#0@@54|) (PivotBetreeSpec.__default.WFNode |node#0@@40|)) (=> (PivotBetreeSpec.__default.WFNode |node#0@@40|) (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#requires| $ly@@765 |node#0@@40| |pivot#0@@54|)))) :qid |PivotBet.438:22| :skolemid |4720| :pattern ( (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#requires| $ly@@765 |node#0@@40| |pivot#0@@54|)) )))
(assert  (and (= (type MoreFuel_BucketsLib._default.SplitBucketRight0) LayerTypeType) (= (type StartFuelAssert_BucketsLib._default.SplitBucketRight) LayerTypeType)))
(assert  (=> true (forall (($ly@@766 T@U) (|node#0@@41| T@U) (|pivot#0@@55| T@U) ) (!  (=> (and (and (and (= (type $ly@@766) LayerTypeType) (= (type |node#0@@41|) DatatypeTypeType)) (= (type |pivot#0@@55|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#canCall| |node#0@@41| |pivot#0@@55|) (and (and ($Is |node#0@@41| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@55| Tclass.KeyType.Key)) (PivotBetreeSpec.__default.WFNode |node#0@@41|)))) (and (and (and (PivotBetreeGraph.Node.Node_q |node#0@@41|) (|PivotsLib.__default.CutoffForRight#canCall| (PivotBetreeGraph.Node.pivotTable |node#0@@41|) |pivot#0@@55|)) (let ((|cRight#0@@3| (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight (PivotBetreeGraph.Node.pivotTable |node#0@@41|) |pivot#0@@55|))) (and (PivotBetreeGraph.Node.Node_q |node#0@@41|) (and (and (PivotBetreeGraph.Node.Node_q |node#0@@41|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@41|)) (PivotBetreeGraph.Node.Node_q |node#0@@41|))) (and (and (PivotBetreeGraph.Node.Node_q |node#0@@41|) (PivotBetreeGraph.Node.Node_q |node#0@@41|)) (|BucketsLib.__default.SplitBucketListRight#canCall| (PivotBetreeGraph.Node.buckets |node#0@@41|) (PivotBetreeGraph.Node.pivotTable |node#0@@41|) |cRight#0@@3| |pivot#0@@55|)))))) (and (and (and (= StartFuel_BucketsLib._default.SplitBucketRight ($LS MoreFuel_BucketsLib._default.SplitBucketRight0)) (= StartFuelAssert_BucketsLib._default.SplitBucketRight ($LS ($LS MoreFuel_BucketsLib._default.SplitBucketRight0)))) (= (AsFuelBottom MoreFuel_BucketsLib._default.SplitBucketRight0) MoreFuel_BucketsLib._default.SplitBucketRight0)) (= (PivotBetreeSpec.__default.CutoffNodeAndKeepRight ($LS $ly@@766) |node#0@@41| |pivot#0@@55|) (let ((|cRight#0@@4| (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight (PivotBetreeGraph.Node.pivotTable |node#0@@41|) |pivot#0@@55|))) (let ((|rightPivots#0| (|Seq#Drop| (PivotBetreeGraph.Node.pivotTable |node#0@@41|) |cRight#0@@4|))) (let ((|rightChildren#0| (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@41|)) (|#Options.Option.Some| ($Box (|Seq#Drop| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |node#0@@41|))) |cRight#0@@4|))) |#Options.Option.None|))) (let ((|rightBuckets#0| (BucketsLib.__default.SplitBucketListRight (PivotBetreeGraph.Node.buckets |node#0@@41|) (PivotBetreeGraph.Node.pivotTable |node#0@@41|) |cRight#0@@4| |pivot#0@@55|))) (|#PivotBetreeGraph.Node.Node| |rightPivots#0| |rightChildren#0| |rightBuckets#0|))))))))) :qid |PivotBet.438:22| :skolemid |4721| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepRight ($LS $ly@@766) |node#0@@41| |pivot#0@@55|)) ))))
(assert (= (type MoreFuel_BucketsLib._default.SplitBucketRight1) LayerTypeType))
(assert  (=> true (forall (($ly@@767 T@U) (|node#0@@42| T@U) (|pivot#0@@56| T@U) ) (!  (=> (and (and (and (= (type $ly@@767) LayerTypeType) (= (type |node#0@@42|) DatatypeTypeType)) (= (type |pivot#0@@56|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#canCall| (Lit |node#0@@42|) (Lit |pivot#0@@56|)) (and (and ($Is |node#0@@42| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@56| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit |node#0@@42|)))))))) (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@42|)) (|PivotsLib.__default.CutoffForRight#canCall| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@42|))) (Lit |pivot#0@@56|))) (let ((|cRight#1| (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@42|))) (Lit |pivot#0@@56|)))) (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@42|)) (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@42|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@42|))))))) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@42|)))) (and (and (PivotBetreeGraph.Node.Node_q (Lit |node#0@@42|)) (PivotBetreeGraph.Node.Node_q (Lit |node#0@@42|))) (|BucketsLib.__default.SplitBucketListRight#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@42|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@42|))) |cRight#1| (Lit |pivot#0@@56|))))))) (and (and (and (= StartFuel_BucketsLib._default.SplitBucketRight ($LS MoreFuel_BucketsLib._default.SplitBucketRight1)) (= StartFuelAssert_BucketsLib._default.SplitBucketRight ($LS ($LS MoreFuel_BucketsLib._default.SplitBucketRight1)))) (= (AsFuelBottom MoreFuel_BucketsLib._default.SplitBucketRight1) MoreFuel_BucketsLib._default.SplitBucketRight1)) (= (PivotBetreeSpec.__default.CutoffNodeAndKeepRight ($LS $ly@@767) (Lit |node#0@@42|) (Lit |pivot#0@@56|)) (let ((|cRight#1@@0| (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@42|))) (Lit |pivot#0@@56|)))) (let ((|rightPivots#1| (|Seq#Drop| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@42|))) |cRight#1@@0|))) (let ((|rightChildren#1| (ite (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@42|)))) (|#Options.Option.Some| ($Box (|Seq#Drop| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |node#0@@42|)))))) |cRight#1@@0|))) |#Options.Option.None|))) (let ((|rightBuckets#1| (BucketsLib.__default.SplitBucketListRight (Lit (PivotBetreeGraph.Node.buckets (Lit |node#0@@42|))) (Lit (PivotBetreeGraph.Node.pivotTable (Lit |node#0@@42|))) |cRight#1@@0| (Lit |pivot#0@@56|)))) (|#PivotBetreeGraph.Node.Node| |rightPivots#1| |rightChildren#1| |rightBuckets#1|))))))))) :qid |PivotBet.438:22| :weight 3 :skolemid |4722| :pattern ( (PivotBetreeSpec.__default.CutoffNodeAndKeepRight ($LS $ly@@767) (Lit |node#0@@42|) (Lit |pivot#0@@56|))) ))))
(assert (forall ((arg0@@666 T@U) (arg1@@356 T@U) (arg2@@242 T@U) (arg3@@156 T@U) ) (! (= (type (PivotBetreeSpec.__default.CutoffNode arg0@@666 arg1@@356 arg2@@242 arg3@@156)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.CutoffNode| :pattern ( (PivotBetreeSpec.__default.CutoffNode arg0@@666 arg1@@356 arg2@@242 arg3@@156)) )))
(assert (forall (($ly@@768 T@U) (|node#0@@43| T@U) (|lpivot#0| T@U) (|rpivot#0| T@U) ) (!  (=> (and (and (and (= (type $ly@@768) LayerTypeType) (= (type |node#0@@43|) DatatypeTypeType)) (= (type |lpivot#0|) DatatypeTypeType)) (= (type |rpivot#0|) DatatypeTypeType)) (= (PivotBetreeSpec.__default.CutoffNode ($LS $ly@@768) |node#0@@43| |lpivot#0| |rpivot#0|) (PivotBetreeSpec.__default.CutoffNode $ly@@768 |node#0@@43| |lpivot#0| |rpivot#0|))) :qid |PivotBet.482:22| :skolemid |4727| :pattern ( (PivotBetreeSpec.__default.CutoffNode ($LS $ly@@768) |node#0@@43| |lpivot#0| |rpivot#0|)) )))
(assert (forall (($ly@@769 T@U) (|node#0@@44| T@U) (|lpivot#0@@0| T@U) (|rpivot#0@@0| T@U) ) (!  (=> (and (and (and (= (type $ly@@769) LayerTypeType) (= (type |node#0@@44|) DatatypeTypeType)) (= (type |lpivot#0@@0|) DatatypeTypeType)) (= (type |rpivot#0@@0|) DatatypeTypeType)) (= (PivotBetreeSpec.__default.CutoffNode $ly@@769 |node#0@@44| |lpivot#0@@0| |rpivot#0@@0|) (PivotBetreeSpec.__default.CutoffNode $LZ |node#0@@44| |lpivot#0@@0| |rpivot#0@@0|))) :qid |PivotBet.482:22| :skolemid |4728| :pattern ( (PivotBetreeSpec.__default.CutoffNode (AsFuelBottom $ly@@769) |node#0@@44| |lpivot#0@@0| |rpivot#0@@0|)) )))
(assert  (=> true (forall (($ly@@770 T@U) (|node#0@@45| T@U) (|lpivot#0@@1| T@U) (|rpivot#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@770) LayerTypeType) (= (type |node#0@@45|) DatatypeTypeType)) (= (type |lpivot#0@@1|) DatatypeTypeType)) (= (type |rpivot#0@@1|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.CutoffNode#canCall| |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|) (and (and (and ($Is |node#0@@45| Tclass.PivotBetreeGraph.Node) ($Is |lpivot#0@@1| (Tclass.Options.Option Tclass.KeyType.Key))) ($Is |rpivot#0@@1| (Tclass.Options.Option Tclass.KeyType.Key))) (PivotBetreeSpec.__default.WFNode |node#0@@45|)))) (and (and (and (and (and (and (and (and (and (and (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@45|)) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children |node#0@@45|)))) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|))) (=> (and (Options.Option.Some_q |lpivot#0@@1|) (> (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|))) 0)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Options.Option.value |lpivot#0@@1|)) ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|)) (LitInt 0)))))) (=> (and (Options.Option.Some_q |rpivot#0@@1|) (> (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|))) 0)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|)))) ($Unbox (SeqType BoxType) (Options.Option.value |rpivot#0@@1|))))) (=> (Options.Option.Some_q |lpivot#0@@1|) (forall ((|key#0@@282| T@U) ) (!  (=> (= (type |key#0@@282|) (SeqType BoxType)) (=> (and ($Is |key#0@@282| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|)) (LitInt 0))))) ($Box |key#0@@282|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value |lpivot#0@@1|)) |key#0@@282|))) :qid |PivotBet.488:35| :skolemid |4729| :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value |lpivot#0@@1|)) |key#0@@282|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|)) 0)))) ($Box |key#0@@282|))) )))) (=> (Options.Option.Some_q |rpivot#0@@1|) (forall ((|key#1@@29| T@U) ) (!  (=> (= (type |key#1@@29|) (SeqType BoxType)) (=> (and ($Is |key#1@@29| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|)))))) ($Box |key#1@@29|)))) (Lexicographic__Byte__Order.__default.lt |key#1@@29| ($Unbox (SeqType BoxType) (Options.Option.value |rpivot#0@@1|))))) :qid |PivotBet.489:35| :skolemid |4730| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#1@@29| ($Unbox (SeqType BoxType) (Options.Option.value |rpivot#0@@1|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|)))))) ($Box |key#1@@29|))) )))) (|ISet#Subset| (PivotBetreeGraph.__default.Successors (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|)) (PivotBetreeGraph.__default.Successors |node#0@@45|))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|))) (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets |node#0@@45|)))) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|))) (|Seq#Length| (PivotBetreeGraph.Node.buckets |node#0@@45|)))) ($Is (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|) Tclass.PivotBetreeGraph.Node))) :qid |PivotBet.482:22| :skolemid |4731| :pattern ( (PivotBetreeSpec.__default.CutoffNode $ly@@770 |node#0@@45| |lpivot#0@@1| |rpivot#0@@1|)) ))))
(assert (forall (($ly@@771 T@U) (|node#0@@46| T@U) (|lpivot#0@@2| T@U) (|rpivot#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@771) LayerTypeType) (= (type |node#0@@46|) DatatypeTypeType)) (= (type |lpivot#0@@2|) DatatypeTypeType)) (= (type |rpivot#0@@2|) DatatypeTypeType)) (and (and ($Is |node#0@@46| Tclass.PivotBetreeGraph.Node) ($Is |lpivot#0@@2| (Tclass.Options.Option Tclass.KeyType.Key))) ($Is |rpivot#0@@2| (Tclass.Options.Option Tclass.KeyType.Key)))) (and (=> (|PivotBetreeSpec.__default.CutoffNode#requires| $ly@@771 |node#0@@46| |lpivot#0@@2| |rpivot#0@@2|) (PivotBetreeSpec.__default.WFNode |node#0@@46|)) (=> (PivotBetreeSpec.__default.WFNode |node#0@@46|) (|PivotBetreeSpec.__default.CutoffNode#requires| $ly@@771 |node#0@@46| |lpivot#0@@2| |rpivot#0@@2|)))) :qid |PivotBet.482:22| :skolemid |4732| :pattern ( (|PivotBetreeSpec.__default.CutoffNode#requires| $ly@@771 |node#0@@46| |lpivot#0@@2| |rpivot#0@@2|)) )))
(assert  (and (= (type StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft) LayerTypeType) (= (type StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepRight) LayerTypeType)))
(assert  (=> true (forall (($ly@@772 T@U) (|node#0@@47| T@U) (|lpivot#0@@3| T@U) (|rpivot#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@772) LayerTypeType) (= (type |node#0@@47|) DatatypeTypeType)) (= (type |lpivot#0@@3|) DatatypeTypeType)) (= (type |rpivot#0@@3|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.CutoffNode#canCall| |node#0@@47| |lpivot#0@@3| |rpivot#0@@3|) (and (and (and ($Is |node#0@@47| Tclass.PivotBetreeGraph.Node) ($Is |lpivot#0@@3| (Tclass.Options.Option Tclass.KeyType.Key))) ($Is |rpivot#0@@3| (Tclass.Options.Option Tclass.KeyType.Key))) (PivotBetreeSpec.__default.WFNode |node#0@@47|)))) (and (and (=> (Options.Option.None_q |lpivot#0@@3|) (=> (not (Options.Option.None_q |rpivot#0@@3|)) (let ((|rpivot#1| ($Unbox (SeqType BoxType) (Options.Option.value |rpivot#0@@3|)))) (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#canCall| |node#0@@47| |rpivot#1|)))) (=> (not (Options.Option.None_q |lpivot#0@@3|)) (let ((|lpivot#1| ($Unbox (SeqType BoxType) (Options.Option.value |lpivot#0@@3|)))) (and (=> (Options.Option.None_q |rpivot#0@@3|) (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#canCall| |node#0@@47| |lpivot#1|)) (=> (not (Options.Option.None_q |rpivot#0@@3|)) (let ((|rpivot#2| ($Unbox (SeqType BoxType) (Options.Option.value |rpivot#0@@3|)))) (and (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#canCall| |node#0@@47| |rpivot#2|) (let ((|node1#0| (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft |node#0@@47| |rpivot#2|))) (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#canCall| |node1#0| |lpivot#1|))))))))) (= (PivotBetreeSpec.__default.CutoffNode ($LS $ly@@772) |node#0@@47| |lpivot#0@@3| |rpivot#0@@3|) (ite (Options.Option.None_q |lpivot#0@@3|) (ite (Options.Option.None_q |rpivot#0@@3|) |node#0@@47| (let ((|rpivot#3| ($Unbox (SeqType BoxType) (Options.Option.value |rpivot#0@@3|)))) (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft |node#0@@47| |rpivot#3|))) (let ((|lpivot#2| ($Unbox (SeqType BoxType) (Options.Option.value |lpivot#0@@3|)))) (ite (Options.Option.None_q |rpivot#0@@3|) (PivotBetreeSpec.__default.CutoffNodeAndKeepRight StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepRight |node#0@@47| |lpivot#2|) (let ((|rpivot#4| ($Unbox (SeqType BoxType) (Options.Option.value |rpivot#0@@3|)))) (let ((|node1#1| (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft |node#0@@47| |rpivot#4|))) (let ((|node'#1| (PivotBetreeSpec.__default.CutoffNodeAndKeepRight StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepRight |node1#1| |lpivot#2|))) |node'#1|))))))))) :qid |PivotBet.482:22| :skolemid |4733| :pattern ( (PivotBetreeSpec.__default.CutoffNode ($LS $ly@@772) |node#0@@47| |lpivot#0@@3| |rpivot#0@@3|)) ))))
(assert  (=> true (forall (($ly@@773 T@U) (|node#0@@48| T@U) (|lpivot#0@@4| T@U) (|rpivot#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@773) LayerTypeType) (= (type |node#0@@48|) DatatypeTypeType)) (= (type |lpivot#0@@4|) DatatypeTypeType)) (= (type |rpivot#0@@4|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.CutoffNode#canCall| (Lit |node#0@@48|) (Lit |lpivot#0@@4|) (Lit |rpivot#0@@4|)) (and (and (and ($Is |node#0@@48| Tclass.PivotBetreeGraph.Node) ($Is |lpivot#0@@4| (Tclass.Options.Option Tclass.KeyType.Key))) ($Is |rpivot#0@@4| (Tclass.Options.Option Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit |node#0@@48|)))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit |lpivot#0@@4|))))) (=> (not (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit |rpivot#0@@4|)))))) (let ((|rpivot#5| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |rpivot#0@@4|)))))) (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#canCall| (Lit |node#0@@48|) |rpivot#5|)))) (=> (not (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit |lpivot#0@@4|)))))) (let ((|lpivot#3| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |lpivot#0@@4|)))))) (and (=> (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit |rpivot#0@@4|))))) (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#canCall| (Lit |node#0@@48|) |lpivot#3|)) (=> (not (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit |rpivot#0@@4|)))))) (let ((|rpivot#6| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |rpivot#0@@4|)))))) (and (|PivotBetreeSpec.__default.CutoffNodeAndKeepLeft#canCall| (Lit |node#0@@48|) |rpivot#6|) (let ((|node1#2| (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft (Lit |node#0@@48|) |rpivot#6|))) (|PivotBetreeSpec.__default.CutoffNodeAndKeepRight#canCall| |node1#2| |lpivot#3|))))))))) (= (PivotBetreeSpec.__default.CutoffNode ($LS $ly@@773) (Lit |node#0@@48|) (Lit |lpivot#0@@4|) (Lit |rpivot#0@@4|)) (ite (Options.Option.None_q (Lit |lpivot#0@@4|)) (ite (Options.Option.None_q (Lit |rpivot#0@@4|)) |node#0@@48| (let ((|rpivot#7| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |rpivot#0@@4|)))))) (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft (Lit |node#0@@48|) |rpivot#7|))) (let ((|lpivot#4| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |lpivot#0@@4|)))))) (ite (Options.Option.None_q (Lit |rpivot#0@@4|)) (PivotBetreeSpec.__default.CutoffNodeAndKeepRight StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepRight (Lit |node#0@@48|) |lpivot#4|) (let ((|rpivot#8| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit |rpivot#0@@4|)))))) (let ((|node1#3| (PivotBetreeSpec.__default.CutoffNodeAndKeepLeft StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft (Lit |node#0@@48|) |rpivot#8|))) (let ((|node'#3| (PivotBetreeSpec.__default.CutoffNodeAndKeepRight StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepRight |node1#3| |lpivot#4|))) |node'#3|))))))))) :qid |PivotBet.482:22| :weight 3 :skolemid |4734| :pattern ( (PivotBetreeSpec.__default.CutoffNode ($LS $ly@@773) (Lit |node#0@@48|) (Lit |lpivot#0@@4|) (Lit |rpivot#0@@4|))) ))))
(assert (forall ((arg0@@667 T@U) (arg1@@357 Int) ) (! (= (type (PivotBetreeSpec.__default.SplitChildLeft arg0@@667 arg1@@357)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.SplitChildLeft| :pattern ( (PivotBetreeSpec.__default.SplitChildLeft arg0@@667 arg1@@357)) )))
(assert  (=> true (forall ((|child#0@@3| T@U) (|num_children_left#0| Int) ) (!  (=> (and (= (type |child#0@@3|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitChildLeft#canCall| |child#0@@3| |num_children_left#0|) (and ($Is |child#0@@3| Tclass.PivotBetreeGraph.Node) (and (and (and (<= (LitInt 0) (- |num_children_left#0| 1)) (<= (- |num_children_left#0| 1) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |child#0@@3|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@3|)) (and (<= (LitInt 0) |num_children_left#0|) (<= |num_children_left#0| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@3|)))))))) (and (<= (LitInt 0) |num_children_left#0|) (<= |num_children_left#0| (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@3|)))))))) ($Is (PivotBetreeSpec.__default.SplitChildLeft |child#0@@3| |num_children_left#0|) Tclass.PivotBetreeGraph.Node)) :qid |PivotBet.525:27| :skolemid |4735| :pattern ( (PivotBetreeSpec.__default.SplitChildLeft |child#0@@3| |num_children_left#0|)) ))))
(assert (forall ((|child#0@@4| T@U) (|num_children_left#0@@0| Int) ) (!  (=> (and (= (type |child#0@@4|) DatatypeTypeType) ($Is |child#0@@4| Tclass.PivotBetreeGraph.Node)) (and (=> (|PivotBetreeSpec.__default.SplitChildLeft#requires| |child#0@@4| |num_children_left#0@@0|) (and (and (and (<= (LitInt 0) (- |num_children_left#0@@0| 1)) (<= (- |num_children_left#0@@0| 1) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |child#0@@4|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@4|)) (and (<= (LitInt 0) |num_children_left#0@@0|) (<= |num_children_left#0@@0| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@4|)))))))) (and (<= (LitInt 0) |num_children_left#0@@0|) (<= |num_children_left#0@@0| (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@4|)))))) (=> (and (and (and (<= (LitInt 0) (- |num_children_left#0@@0| 1)) (<= (- |num_children_left#0@@0| 1) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |child#0@@4|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@4|)) (and (<= (LitInt 0) |num_children_left#0@@0|) (<= |num_children_left#0@@0| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@4|)))))))) (and (<= (LitInt 0) |num_children_left#0@@0|) (<= |num_children_left#0@@0| (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@4|))))) (|PivotBetreeSpec.__default.SplitChildLeft#requires| |child#0@@4| |num_children_left#0@@0|)))) :qid |PivotBet.525:27| :skolemid |4736| :pattern ( (|PivotBetreeSpec.__default.SplitChildLeft#requires| |child#0@@4| |num_children_left#0@@0|)) )))
(assert  (=> true (forall ((|child#0@@5| T@U) (|num_children_left#0@@1| Int) ) (!  (=> (and (= (type |child#0@@5|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitChildLeft#canCall| |child#0@@5| |num_children_left#0@@1|) (and ($Is |child#0@@5| Tclass.PivotBetreeGraph.Node) (and (and (and (<= (LitInt 0) (- |num_children_left#0@@1| 1)) (<= (- |num_children_left#0@@1| 1) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |child#0@@5|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@5|)) (and (<= (LitInt 0) |num_children_left#0@@1|) (<= |num_children_left#0@@1| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@5|)))))))) (and (<= (LitInt 0) |num_children_left#0@@1|) (<= |num_children_left#0@@1| (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@5|)))))))) (and (and (and (PivotBetreeGraph.Node.Node_q |child#0@@5|) (and (PivotBetreeGraph.Node.Node_q |child#0@@5|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@5|)) (PivotBetreeGraph.Node.Node_q |child#0@@5|)))) (PivotBetreeGraph.Node.Node_q |child#0@@5|)) (= (PivotBetreeSpec.__default.SplitChildLeft |child#0@@5| |num_children_left#0@@1|) (|#PivotBetreeGraph.Node.Node| (|Seq#Take| (PivotBetreeGraph.Node.pivotTable |child#0@@5|) (- |num_children_left#0@@1| 1)) (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@5|)) (|#Options.Option.Some| ($Box (|Seq#Take| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@5|))) |num_children_left#0@@1|))) |#Options.Option.None|) (|Seq#Take| (PivotBetreeGraph.Node.buckets |child#0@@5|) |num_children_left#0@@1|))))) :qid |PivotBet.525:27| :skolemid |4737| :pattern ( (PivotBetreeSpec.__default.SplitChildLeft |child#0@@5| |num_children_left#0@@1|)) ))))
(assert  (=> true (forall ((|child#0@@6| T@U) (|num_children_left#0@@2| Int) ) (!  (=> (and (= (type |child#0@@6|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitChildLeft#canCall| (Lit |child#0@@6|) (LitInt |num_children_left#0@@2|)) (and ($Is |child#0@@6| Tclass.PivotBetreeGraph.Node) (and (and (and (<= (LitInt 0) (LitInt (- |num_children_left#0@@2| 1))) (<= (LitInt (- |num_children_left#0@@2| 1)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |child#0@@6|)))))) (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@6|)))) (and (<= (LitInt 0) (LitInt |num_children_left#0@@2|)) (<= (LitInt |num_children_left#0@@2|) (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@6|))))))))))) (and (<= (LitInt 0) (LitInt |num_children_left#0@@2|)) (<= (LitInt |num_children_left#0@@2|) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |child#0@@6|)))))))))) (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |child#0@@6|)) (and (PivotBetreeGraph.Node.Node_q (Lit |child#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@6|))))))) (PivotBetreeGraph.Node.Node_q (Lit |child#0@@6|))))) (PivotBetreeGraph.Node.Node_q (Lit |child#0@@6|))) (= (PivotBetreeSpec.__default.SplitChildLeft (Lit |child#0@@6|) (LitInt |num_children_left#0@@2|)) (|#PivotBetreeGraph.Node.Node| (Lit (|Seq#Take| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |child#0@@6|))) (LitInt (- |num_children_left#0@@2| 1)))) (ite (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@6|)))) (|#Options.Option.Some| ($Box (Lit (|Seq#Take| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@6|)))))) (LitInt |num_children_left#0@@2|))))) |#Options.Option.None|) (Lit (|Seq#Take| (Lit (PivotBetreeGraph.Node.buckets (Lit |child#0@@6|))) (LitInt |num_children_left#0@@2|))))))) :qid |PivotBet.525:27| :weight 3 :skolemid |4738| :pattern ( (PivotBetreeSpec.__default.SplitChildLeft (Lit |child#0@@6|) (LitInt |num_children_left#0@@2|))) ))))
(assert (forall ((arg0@@668 T@U) (arg1@@358 Int) ) (! (= (type (PivotBetreeSpec.__default.SplitChildRight arg0@@668 arg1@@358)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.SplitChildRight| :pattern ( (PivotBetreeSpec.__default.SplitChildRight arg0@@668 arg1@@358)) )))
(assert  (=> true (forall ((|child#0@@7| T@U) (|num_children_left#0@@3| Int) ) (!  (=> (and (= (type |child#0@@7|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitChildRight#canCall| |child#0@@7| |num_children_left#0@@3|) (and ($Is |child#0@@7| Tclass.PivotBetreeGraph.Node) (and (and (and (<= (LitInt 0) |num_children_left#0@@3|) (<= |num_children_left#0@@3| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |child#0@@7|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@7|)) (and (<= (LitInt 0) |num_children_left#0@@3|) (<= |num_children_left#0@@3| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@7|)))))))) (and (<= (LitInt 0) |num_children_left#0@@3|) (<= |num_children_left#0@@3| (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@7|)))))))) ($Is (PivotBetreeSpec.__default.SplitChildRight |child#0@@7| |num_children_left#0@@3|) Tclass.PivotBetreeGraph.Node)) :qid |PivotBet.537:28| :skolemid |4739| :pattern ( (PivotBetreeSpec.__default.SplitChildRight |child#0@@7| |num_children_left#0@@3|)) ))))
(assert (forall ((|child#0@@8| T@U) (|num_children_left#0@@4| Int) ) (!  (=> (and (= (type |child#0@@8|) DatatypeTypeType) ($Is |child#0@@8| Tclass.PivotBetreeGraph.Node)) (and (=> (|PivotBetreeSpec.__default.SplitChildRight#requires| |child#0@@8| |num_children_left#0@@4|) (and (and (and (<= (LitInt 0) |num_children_left#0@@4|) (<= |num_children_left#0@@4| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |child#0@@8|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@8|)) (and (<= (LitInt 0) |num_children_left#0@@4|) (<= |num_children_left#0@@4| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@8|)))))))) (and (<= (LitInt 0) |num_children_left#0@@4|) (<= |num_children_left#0@@4| (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@8|)))))) (=> (and (and (and (<= (LitInt 0) |num_children_left#0@@4|) (<= |num_children_left#0@@4| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |child#0@@8|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@8|)) (and (<= (LitInt 0) |num_children_left#0@@4|) (<= |num_children_left#0@@4| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@8|)))))))) (and (<= (LitInt 0) |num_children_left#0@@4|) (<= |num_children_left#0@@4| (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@8|))))) (|PivotBetreeSpec.__default.SplitChildRight#requires| |child#0@@8| |num_children_left#0@@4|)))) :qid |PivotBet.537:28| :skolemid |4740| :pattern ( (|PivotBetreeSpec.__default.SplitChildRight#requires| |child#0@@8| |num_children_left#0@@4|)) )))
(assert  (=> true (forall ((|child#0@@9| T@U) (|num_children_left#0@@5| Int) ) (!  (=> (and (= (type |child#0@@9|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitChildRight#canCall| |child#0@@9| |num_children_left#0@@5|) (and ($Is |child#0@@9| Tclass.PivotBetreeGraph.Node) (and (and (and (<= (LitInt 0) |num_children_left#0@@5|) (<= |num_children_left#0@@5| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |child#0@@9|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@9|)) (and (<= (LitInt 0) |num_children_left#0@@5|) (<= |num_children_left#0@@5| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@9|)))))))) (and (<= (LitInt 0) |num_children_left#0@@5|) (<= |num_children_left#0@@5| (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@9|)))))))) (and (and (and (PivotBetreeGraph.Node.Node_q |child#0@@9|) (and (PivotBetreeGraph.Node.Node_q |child#0@@9|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@9|)) (PivotBetreeGraph.Node.Node_q |child#0@@9|)))) (PivotBetreeGraph.Node.Node_q |child#0@@9|)) (= (PivotBetreeSpec.__default.SplitChildRight |child#0@@9| |num_children_left#0@@5|) (|#PivotBetreeGraph.Node.Node| (|Seq#Drop| (PivotBetreeGraph.Node.pivotTable |child#0@@9|) |num_children_left#0@@5|) (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children |child#0@@9|)) (|#Options.Option.Some| ($Box (|Seq#Drop| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |child#0@@9|))) |num_children_left#0@@5|))) |#Options.Option.None|) (|Seq#Drop| (PivotBetreeGraph.Node.buckets |child#0@@9|) |num_children_left#0@@5|))))) :qid |PivotBet.537:28| :skolemid |4741| :pattern ( (PivotBetreeSpec.__default.SplitChildRight |child#0@@9| |num_children_left#0@@5|)) ))))
(assert  (=> true (forall ((|child#0@@10| T@U) (|num_children_left#0@@6| Int) ) (!  (=> (and (= (type |child#0@@10|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitChildRight#canCall| (Lit |child#0@@10|) (LitInt |num_children_left#0@@6|)) (and ($Is |child#0@@10| Tclass.PivotBetreeGraph.Node) (and (and (and (<= (LitInt 0) (LitInt |num_children_left#0@@6|)) (<= (LitInt |num_children_left#0@@6|) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |child#0@@10|)))))) (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@10|)))) (and (<= (LitInt 0) (LitInt |num_children_left#0@@6|)) (<= (LitInt |num_children_left#0@@6|) (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@10|))))))))))) (and (<= (LitInt 0) (LitInt |num_children_left#0@@6|)) (<= (LitInt |num_children_left#0@@6|) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |child#0@@10|)))))))))) (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |child#0@@10|)) (and (PivotBetreeGraph.Node.Node_q (Lit |child#0@@10|)) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@10|))))))) (PivotBetreeGraph.Node.Node_q (Lit |child#0@@10|))))) (PivotBetreeGraph.Node.Node_q (Lit |child#0@@10|))) (= (PivotBetreeSpec.__default.SplitChildRight (Lit |child#0@@10|) (LitInt |num_children_left#0@@6|)) (|#PivotBetreeGraph.Node.Node| (Lit (|Seq#Drop| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |child#0@@10|))) (LitInt |num_children_left#0@@6|))) (ite (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@10|)))) (|#Options.Option.Some| ($Box (Lit (|Seq#Drop| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |child#0@@10|)))))) (LitInt |num_children_left#0@@6|))))) |#Options.Option.None|) (Lit (|Seq#Drop| (Lit (PivotBetreeGraph.Node.buckets (Lit |child#0@@10|))) (LitInt |num_children_left#0@@6|))))))) :qid |PivotBet.537:28| :weight 3 :skolemid |4742| :pattern ( (PivotBetreeSpec.__default.SplitChildRight (Lit |child#0@@10|) (LitInt |num_children_left#0@@6|))) ))))
(assert (forall ((arg0@@669 T@U) (arg1@@359 T@U) (arg2@@243 Int) (arg3@@157 T@U) (arg4@@121 T@U) ) (! (= (type (PivotBetreeSpec.__default.SplitParent arg0@@669 arg1@@359 arg2@@243 arg3@@157 arg4@@121)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.SplitParent| :pattern ( (PivotBetreeSpec.__default.SplitParent arg0@@669 arg1@@359 arg2@@243 arg3@@157 arg4@@121)) )))
(assert  (=> true (forall ((|fused_parent#0| T@U) (|pivot#0@@57| T@U) (|slot_idx#0| Int) (|left_childref#0| T@U) (|right_childref#0| T@U) ) (!  (=> (and (and (and (and (= (type |fused_parent#0|) DatatypeTypeType) (= (type |pivot#0@@57|) (SeqType BoxType))) (= (type |left_childref#0|) BoxType)) (= (type |right_childref#0|) BoxType)) (or (|PivotBetreeSpec.__default.SplitParent#canCall| |fused_parent#0| |pivot#0@@57| |slot_idx#0| |left_childref#0| |right_childref#0|) (and (and (and (and ($Is |fused_parent#0| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@57| Tclass.KeyType.Key)) ($IsBox |left_childref#0| Tclass.ReferenceType.Reference)) ($IsBox |right_childref#0| Tclass.ReferenceType.Reference)) (and (and (and (and (<= (LitInt 0) |slot_idx#0|) (<= |slot_idx#0| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |fused_parent#0|)))) (Options.Option.Some_q (PivotBetreeGraph.Node.children |fused_parent#0|))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |fused_parent#0|)) (and (<= (LitInt 0) |slot_idx#0|) (< |slot_idx#0| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |fused_parent#0|)))))))) (and (<= (LitInt 0) |slot_idx#0|) (< |slot_idx#0| (|Seq#Length| (PivotBetreeGraph.Node.buckets |fused_parent#0|)))))))) ($Is (PivotBetreeSpec.__default.SplitParent |fused_parent#0| |pivot#0@@57| |slot_idx#0| |left_childref#0| |right_childref#0|) Tclass.PivotBetreeGraph.Node)) :qid |PivotBet.549:24| :skolemid |4743| :pattern ( (PivotBetreeSpec.__default.SplitParent |fused_parent#0| |pivot#0@@57| |slot_idx#0| |left_childref#0| |right_childref#0|)) ))))
(assert (forall ((|fused_parent#0@@0| T@U) (|pivot#0@@58| T@U) (|slot_idx#0@@0| Int) (|left_childref#0@@0| T@U) (|right_childref#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |fused_parent#0@@0|) DatatypeTypeType) (= (type |pivot#0@@58|) (SeqType BoxType))) (= (type |left_childref#0@@0|) BoxType)) (= (type |right_childref#0@@0|) BoxType)) (and (and (and ($Is |fused_parent#0@@0| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@58| Tclass.KeyType.Key)) ($IsBox |left_childref#0@@0| Tclass.ReferenceType.Reference)) ($IsBox |right_childref#0@@0| Tclass.ReferenceType.Reference))) (and (=> (|PivotBetreeSpec.__default.SplitParent#requires| |fused_parent#0@@0| |pivot#0@@58| |slot_idx#0@@0| |left_childref#0@@0| |right_childref#0@@0|) (and (and (and (and (<= (LitInt 0) |slot_idx#0@@0|) (<= |slot_idx#0@@0| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |fused_parent#0@@0|)))) (Options.Option.Some_q (PivotBetreeGraph.Node.children |fused_parent#0@@0|))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |fused_parent#0@@0|)) (and (<= (LitInt 0) |slot_idx#0@@0|) (< |slot_idx#0@@0| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |fused_parent#0@@0|)))))))) (and (<= (LitInt 0) |slot_idx#0@@0|) (< |slot_idx#0@@0| (|Seq#Length| (PivotBetreeGraph.Node.buckets |fused_parent#0@@0|)))))) (=> (and (and (and (and (<= (LitInt 0) |slot_idx#0@@0|) (<= |slot_idx#0@@0| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |fused_parent#0@@0|)))) (Options.Option.Some_q (PivotBetreeGraph.Node.children |fused_parent#0@@0|))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |fused_parent#0@@0|)) (and (<= (LitInt 0) |slot_idx#0@@0|) (< |slot_idx#0@@0| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |fused_parent#0@@0|)))))))) (and (<= (LitInt 0) |slot_idx#0@@0|) (< |slot_idx#0@@0| (|Seq#Length| (PivotBetreeGraph.Node.buckets |fused_parent#0@@0|))))) (|PivotBetreeSpec.__default.SplitParent#requires| |fused_parent#0@@0| |pivot#0@@58| |slot_idx#0@@0| |left_childref#0@@0| |right_childref#0@@0|)))) :qid |PivotBet.549:24| :skolemid |4744| :pattern ( (|PivotBetreeSpec.__default.SplitParent#requires| |fused_parent#0@@0| |pivot#0@@58| |slot_idx#0@@0| |left_childref#0@@0| |right_childref#0@@0|)) )))
(assert  (and (= (type StartFuel_Sequences._default.insert) LayerTypeType) (= (type StartFuel_BucketsLib._default.SplitBucketInList) LayerTypeType)))
(assert  (=> true (forall ((|fused_parent#0@@1| T@U) (|pivot#0@@59| T@U) (|slot_idx#0@@1| Int) (|left_childref#0@@1| T@U) (|right_childref#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |fused_parent#0@@1|) DatatypeTypeType) (= (type |pivot#0@@59|) (SeqType BoxType))) (= (type |left_childref#0@@1|) BoxType)) (= (type |right_childref#0@@1|) BoxType)) (or (|PivotBetreeSpec.__default.SplitParent#canCall| |fused_parent#0@@1| |pivot#0@@59| |slot_idx#0@@1| |left_childref#0@@1| |right_childref#0@@1|) (and (and (and (and ($Is |fused_parent#0@@1| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@59| Tclass.KeyType.Key)) ($IsBox |left_childref#0@@1| Tclass.ReferenceType.Reference)) ($IsBox |right_childref#0@@1| Tclass.ReferenceType.Reference)) (and (and (and (and (<= (LitInt 0) |slot_idx#0@@1|) (<= |slot_idx#0@@1| (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |fused_parent#0@@1|)))) (Options.Option.Some_q (PivotBetreeGraph.Node.children |fused_parent#0@@1|))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |fused_parent#0@@1|)) (and (<= (LitInt 0) |slot_idx#0@@1|) (< |slot_idx#0@@1| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |fused_parent#0@@1|)))))))) (and (<= (LitInt 0) |slot_idx#0@@1|) (< |slot_idx#0@@1| (|Seq#Length| (PivotBetreeGraph.Node.buckets |fused_parent#0@@1|)))))))) (and (and (and (and (PivotBetreeGraph.Node.Node_q |fused_parent#0@@1|) (|Sequences.__default.insert#canCall| Tclass.KeyType.Key (PivotBetreeGraph.Node.pivotTable |fused_parent#0@@1|) ($Box |pivot#0@@59|) |slot_idx#0@@1|)) (and (PivotBetreeGraph.Node.Node_q |fused_parent#0@@1|) (|Sequences.__default.replace1with2#canCall| Tclass.ReferenceType.Reference ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |fused_parent#0@@1|))) |left_childref#0@@1| |right_childref#0@@1| |slot_idx#0@@1|))) (and (PivotBetreeGraph.Node.Node_q |fused_parent#0@@1|) (|BucketsLib.__default.SplitBucketInList#canCall| (PivotBetreeGraph.Node.buckets |fused_parent#0@@1|) |slot_idx#0@@1| |pivot#0@@59|))) (= (PivotBetreeSpec.__default.SplitParent |fused_parent#0@@1| |pivot#0@@59| |slot_idx#0@@1| |left_childref#0@@1| |right_childref#0@@1|) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.insert Tclass.KeyType.Key StartFuel_Sequences._default.insert (PivotBetreeGraph.Node.pivotTable |fused_parent#0@@1|) ($Box |pivot#0@@59|) |slot_idx#0@@1|) (|#Options.Option.Some| ($Box (Sequences.__default.replace1with2 Tclass.ReferenceType.Reference StartFuel_Sequences._default.replace1with2 ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |fused_parent#0@@1|))) |left_childref#0@@1| |right_childref#0@@1| |slot_idx#0@@1|))) (BucketsLib.__default.SplitBucketInList StartFuel_BucketsLib._default.SplitBucketInList (PivotBetreeGraph.Node.buckets |fused_parent#0@@1|) |slot_idx#0@@1| |pivot#0@@59|))))) :qid |PivotBet.549:24| :skolemid |4745| :pattern ( (PivotBetreeSpec.__default.SplitParent |fused_parent#0@@1| |pivot#0@@59| |slot_idx#0@@1| |left_childref#0@@1| |right_childref#0@@1|)) ))))
(assert  (=> true (forall ((|fused_parent#0@@2| T@U) (|pivot#0@@60| T@U) (|slot_idx#0@@2| Int) (|left_childref#0@@2| T@U) (|right_childref#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |fused_parent#0@@2|) DatatypeTypeType) (= (type |pivot#0@@60|) (SeqType BoxType))) (= (type |left_childref#0@@2|) BoxType)) (= (type |right_childref#0@@2|) BoxType)) (or (|PivotBetreeSpec.__default.SplitParent#canCall| (Lit |fused_parent#0@@2|) (Lit |pivot#0@@60|) (LitInt |slot_idx#0@@2|) |left_childref#0@@2| |right_childref#0@@2|) (and (and (and (and ($Is |fused_parent#0@@2| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@60| Tclass.KeyType.Key)) ($IsBox |left_childref#0@@2| Tclass.ReferenceType.Reference)) ($IsBox |right_childref#0@@2| Tclass.ReferenceType.Reference)) (and (and (and (and (<= (LitInt 0) (LitInt |slot_idx#0@@2|)) (<= (LitInt |slot_idx#0@@2|) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |fused_parent#0@@2|)))))) (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@2|)))))))) (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@2|)))) (and (<= (LitInt 0) (LitInt |slot_idx#0@@2|)) (< |slot_idx#0@@2| (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@2|))))))))))) (and (<= (LitInt 0) (LitInt |slot_idx#0@@2|)) (< |slot_idx#0@@2| (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |fused_parent#0@@2|)))))))))) (and (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |fused_parent#0@@2|)) (|Sequences.__default.insert#canCall| Tclass.KeyType.Key (Lit (PivotBetreeGraph.Node.pivotTable (Lit |fused_parent#0@@2|))) ($Box (Lit |pivot#0@@60|)) (LitInt |slot_idx#0@@2|))) (and (PivotBetreeGraph.Node.Node_q (Lit |fused_parent#0@@2|)) (|Sequences.__default.replace1with2#canCall| Tclass.ReferenceType.Reference (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@2|)))))) |left_childref#0@@2| |right_childref#0@@2| (LitInt |slot_idx#0@@2|)))) (and (PivotBetreeGraph.Node.Node_q (Lit |fused_parent#0@@2|)) (|BucketsLib.__default.SplitBucketInList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |fused_parent#0@@2|))) (LitInt |slot_idx#0@@2|) (Lit |pivot#0@@60|)))) (= (PivotBetreeSpec.__default.SplitParent (Lit |fused_parent#0@@2|) (Lit |pivot#0@@60|) (LitInt |slot_idx#0@@2|) |left_childref#0@@2| |right_childref#0@@2|) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.insert Tclass.KeyType.Key StartFuel_Sequences._default.insert (Lit (PivotBetreeGraph.Node.pivotTable (Lit |fused_parent#0@@2|))) ($Box (Lit |pivot#0@@60|)) (LitInt |slot_idx#0@@2|)) (|#Options.Option.Some| ($Box (Sequences.__default.replace1with2 Tclass.ReferenceType.Reference StartFuel_Sequences._default.replace1with2 (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@2|)))))) |left_childref#0@@2| |right_childref#0@@2| (LitInt |slot_idx#0@@2|)))) (BucketsLib.__default.SplitBucketInList StartFuel_BucketsLib._default.SplitBucketInList (Lit (PivotBetreeGraph.Node.buckets (Lit |fused_parent#0@@2|))) (LitInt |slot_idx#0@@2|) (Lit |pivot#0@@60|)))))) :qid |PivotBet.549:24| :weight 3 :skolemid |4746| :pattern ( (PivotBetreeSpec.__default.SplitParent (Lit |fused_parent#0@@2|) (Lit |pivot#0@@60|) (LitInt |slot_idx#0@@2|) |left_childref#0@@2| |right_childref#0@@2|)) ))))
(assert  (=> true (forall ((|fused_parent#0@@3| T@U) (|pivot#0@@61| T@U) (|slot_idx#0@@3| Int) (|left_childref#0@@3| T@U) (|right_childref#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type |fused_parent#0@@3|) DatatypeTypeType) (= (type |pivot#0@@61|) (SeqType BoxType))) (= (type |left_childref#0@@3|) BoxType)) (= (type |right_childref#0@@3|) BoxType)) (or (|PivotBetreeSpec.__default.SplitParent#canCall| (Lit |fused_parent#0@@3|) (Lit |pivot#0@@61|) (LitInt |slot_idx#0@@3|) (Lit |left_childref#0@@3|) (Lit |right_childref#0@@3|)) (and (and (and (and ($Is |fused_parent#0@@3| Tclass.PivotBetreeGraph.Node) ($Is |pivot#0@@61| Tclass.KeyType.Key)) ($IsBox |left_childref#0@@3| Tclass.ReferenceType.Reference)) ($IsBox |right_childref#0@@3| Tclass.ReferenceType.Reference)) (and (and (and (and (<= (LitInt 0) (LitInt |slot_idx#0@@3|)) (<= (LitInt |slot_idx#0@@3|) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit |fused_parent#0@@3|)))))) (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@3|)))))))) (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@3|)))) (and (<= (LitInt 0) (LitInt |slot_idx#0@@3|)) (< |slot_idx#0@@3| (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@3|))))))))))) (and (<= (LitInt 0) (LitInt |slot_idx#0@@3|)) (< |slot_idx#0@@3| (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit |fused_parent#0@@3|)))))))))) (and (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |fused_parent#0@@3|)) (|Sequences.__default.insert#canCall| Tclass.KeyType.Key (Lit (PivotBetreeGraph.Node.pivotTable (Lit |fused_parent#0@@3|))) ($Box (Lit |pivot#0@@61|)) (LitInt |slot_idx#0@@3|))) (and (PivotBetreeGraph.Node.Node_q (Lit |fused_parent#0@@3|)) (|Sequences.__default.replace1with2#canCall| Tclass.ReferenceType.Reference (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@3|)))))) (Lit |left_childref#0@@3|) (Lit |right_childref#0@@3|) (LitInt |slot_idx#0@@3|)))) (and (PivotBetreeGraph.Node.Node_q (Lit |fused_parent#0@@3|)) (|BucketsLib.__default.SplitBucketInList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |fused_parent#0@@3|))) (LitInt |slot_idx#0@@3|) (Lit |pivot#0@@61|)))) (= (PivotBetreeSpec.__default.SplitParent (Lit |fused_parent#0@@3|) (Lit |pivot#0@@61|) (LitInt |slot_idx#0@@3|) (Lit |left_childref#0@@3|) (Lit |right_childref#0@@3|)) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.insert Tclass.KeyType.Key StartFuel_Sequences._default.insert (Lit (PivotBetreeGraph.Node.pivotTable (Lit |fused_parent#0@@3|))) ($Box (Lit |pivot#0@@61|)) (LitInt |slot_idx#0@@3|)) (|#Options.Option.Some| ($Box (Sequences.__default.replace1with2 Tclass.ReferenceType.Reference StartFuel_Sequences._default.replace1with2 (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit |fused_parent#0@@3|)))))) (Lit |left_childref#0@@3|) (Lit |right_childref#0@@3|) (LitInt |slot_idx#0@@3|)))) (BucketsLib.__default.SplitBucketInList StartFuel_BucketsLib._default.SplitBucketInList (Lit (PivotBetreeGraph.Node.buckets (Lit |fused_parent#0@@3|))) (LitInt |slot_idx#0@@3|) (Lit |pivot#0@@61|)))))) :qid |PivotBet.549:24| :weight 3 :skolemid |4747| :pattern ( (PivotBetreeSpec.__default.SplitParent (Lit |fused_parent#0@@3|) (Lit |pivot#0@@61|) (LitInt |slot_idx#0@@3|) (Lit |left_childref#0@@3|) (Lit |right_childref#0@@3|))) ))))
(assert  (=> true (forall ((|f#0@@90| T@U) ) (!  (=> (and (= (type |f#0@@90|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidSplit#canCall| |f#0@@90|) ($Is |f#0@@90| Tclass.PivotBetreeSpec.NodeFusion))) true) :qid |PivotBet.562:24| :skolemid |4748| :pattern ( (PivotBetreeSpec.__default.ValidSplit |f#0@@90|)) ))))
(assert (forall ((|f#0@@91| T@U) ) (!  (=> (and (= (type |f#0@@91|) DatatypeTypeType) ($Is |f#0@@91| Tclass.PivotBetreeSpec.NodeFusion)) (and (=> (|PivotBetreeSpec.__default.ValidSplit#requires| |f#0@@91|) true) (=> true (|PivotBetreeSpec.__default.ValidSplit#requires| |f#0@@91|)))) :qid |PivotBet.562:24| :skolemid |4749| :pattern ( (|PivotBetreeSpec.__default.ValidSplit#requires| |f#0@@91|)) )))
(assert (= (type StartFuel_PivotBetreeSpec._default.CutoffNode) LayerTypeType))
(assert  (=> true (forall ((|f#0@@92| T@U) ) (!  (=> (and (= (type |f#0@@92|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidSplit#canCall| |f#0@@92|) ($Is |f#0@@92| Tclass.PivotBetreeSpec.NodeFusion))) (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (=> (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFusion.fused__child |f#0@@92|))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFusion.fused__child |f#0@@92|))) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.fused__child |f#0@@92|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (=> (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (=> (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))))) (and (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|)) (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) |Bounds.__default.MaxNumChildren#canCall|))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) |Bounds.__default.MaxNumChildren#canCall|) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (LitInt (- Bounds.__default.MaxNumChildren 1)))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (=> (> (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) 0) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)))) (let ((|lbound#0| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) 0) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (- (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) 1))) |#Options.Option.None|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (=> (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)))) (let ((|ubound#0| (ite (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|))) |#Options.Option.None|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (|PivotBetreeSpec.__default.CutoffNode#canCall| (PivotBetreeSpec.NodeFusion.fused__child |f#0@@92|) |lbound#0| |ubound#0|)) (let ((|child#0@@11| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (PivotBetreeSpec.NodeFusion.fused__child |f#0@@92|) |lbound#0| |ubound#0|))) (and (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (=> (<= (LitInt 1) (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q |child#0@@11|)))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q |child#0@@11|)) (< (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@11|)))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|)) (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@92|))) (and (and (PivotBetreeGraph.Node.Node_q |child#0@@11|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)))) (=> (and (and (and (PivotBetreeGraph.Node.Node_q |child#0@@11|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable |child#0@@11|) (- (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|) 1))) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)))) (=> (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (|PivotsLib.__default.Route#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (= (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)) (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|)) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.right__child |f#0@@92|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|))))))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)) (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|)) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.right__child |f#0@@92|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|))))) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__child |f#0@@92|)))) (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.split__parent |f#0@@92|)) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.__default.SplitParent (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (|PivotBetreeSpec.__default.SplitParent#canCall| (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|))))))) (=> (and (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.split__parent |f#0@@92|)) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.__default.SplitParent (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|)) (|PivotBetreeSpec.__default.SplitParent#canCall| (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.split__parent |f#0@@92|) (PivotBetreeSpec.__default.SplitParent (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)))) (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|)) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.__default.SplitChildLeft |child#0@@11| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (|PivotBetreeSpec.__default.SplitChildLeft#canCall| |child#0@@11| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|))))))) (=> (and (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|)) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.__default.SplitChildLeft |child#0@@11| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (|PivotBetreeSpec.__default.SplitChildLeft#canCall| |child#0@@11| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|) (PivotBetreeSpec.__default.SplitChildLeft |child#0@@11| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)))) (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.right__child |f#0@@92|)) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.__default.SplitChildRight |child#0@@11| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@92|) (|PivotBetreeSpec.__default.SplitChildRight#canCall| |child#0@@11| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|))))))))))))))))) (and (=> (PivotBetreeSpec.__default.ValidSplit |f#0@@92|) (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.fused__child |f#0@@92|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (and (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|)) (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))))) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (LitInt (- Bounds.__default.MaxNumChildren 1)))) (let ((|lbound#0@@0| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) 0) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (- (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) 1))) |#Options.Option.None|))) (and true (let ((|ubound#0@@0| (ite (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|))) |#Options.Option.None|))) (and true (let ((|child#0@@12| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (PivotBetreeSpec.NodeFusion.fused__child |f#0@@92|) |lbound#0@@0| |ubound#0@@0|))) (and (and (and (and (and (and (and (and (<= (LitInt 1) (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)) (< (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@12|)))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|)) (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@92|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable |child#0@@12|) (- (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|) 1))) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|))) (= (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|))) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__child |f#0@@92|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.split__parent |f#0@@92|) (PivotBetreeSpec.__default.SplitParent (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|) (PivotBetreeSpec.__default.SplitChildLeft |child#0@@12| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.right__child |f#0@@92|) (PivotBetreeSpec.__default.SplitChildRight |child#0@@12| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|))))))))))) (=> (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.fused__child |f#0@@92|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (and (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|)) (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))))) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|))) (LitInt (- Bounds.__default.MaxNumChildren 1)))) (let ((|lbound#0@@1| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) 0) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (- (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) 1))) |#Options.Option.None|))) (and true (let ((|ubound#0@@1| (ite (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|))) |#Options.Option.None|))) (and true (let ((|child#0@@13| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (PivotBetreeSpec.NodeFusion.fused__child |f#0@@92|) |lbound#0@@1| |ubound#0@@1|))) (and (and (and (and (and (and (and (and (<= (LitInt 1) (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)) (< (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|) (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#0@@13|)))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)))) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|)) (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@92|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable |child#0@@13|) (- (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|) 1))) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|))) (= (PivotsLib.__default.Route (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|)) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|))) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__child |f#0@@92|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.split__parent |f#0@@92|) (PivotBetreeSpec.__default.SplitParent (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@92|) (PivotBetreeSpec.NodeFusion.pivot |f#0@@92|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@92|) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@92|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@92|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child |f#0@@92|) (PivotBetreeSpec.__default.SplitChildLeft |child#0@@13| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.right__child |f#0@@92|) (PivotBetreeSpec.__default.SplitChildRight |child#0@@13| (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@92|)))))))))) (PivotBetreeSpec.__default.ValidSplit |f#0@@92|))))) :qid |PivotBet.562:24| :skolemid |4750| :pattern ( (PivotBetreeSpec.__default.ValidSplit |f#0@@92|)) ))))
(assert  (=> true (forall ((|f#0@@93| T@U) ) (!  (=> (and (= (type |f#0@@93|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidSplit#canCall| (Lit |f#0@@93|)) ($Is |f#0@@93| Tclass.PivotBetreeSpec.NodeFusion))) (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@93|))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@93|))))) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@93|)))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (=> (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (=> (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))))) (and (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)))) (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) |Bounds.__default.MaxNumChildren#canCall|))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) |Bounds.__default.MaxNumChildren#canCall|) (<= (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))) (LitInt (- Bounds.__default.MaxNumChildren 1)))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (=> (U_2_bool (Lit (bool_2_U (> (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) 0)))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))))) (let ((|lbound#1| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) 0) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (LitInt (- (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) 1)))) |#Options.Option.None|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))) (=> (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))))) (let ((|ubound#1| (ite (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))))) |#Options.Option.None|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (|PivotBetreeSpec.__default.CutoffNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@93|))) |lbound#1| |ubound#1|)) (let ((|child#1| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@93|))) |lbound#1| |ubound#1|))) (and (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (=> (<= (LitInt 1) (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q |child#1|)))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q |child#1|)) (< (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)) (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#1|)))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)))) (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@93|))))) (and (and (PivotBetreeGraph.Node.Node_q |child#1|) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))))) (=> (and (and (and (PivotBetreeGraph.Node.Node_q |child#1|) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable |child#1|) (LitInt (- (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)) 1)))) (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|)))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (|PivotsLib.__default.Route#canCall| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))))) (=> (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (|PivotsLib.__default.Route#canCall| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (= (LitInt (PivotsLib.__default.Route (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|)))) (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)))) (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@93|))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)))))))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|)))) (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)))) (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@93|))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)))))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)) (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@93|))))) (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@93|)))) (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.__default.SplitParent (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (|PivotBetreeSpec.__default.SplitParent#canCall| (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|))))))))) (=> (and (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@93|)))) (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.__default.SplitParent (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|))) (|PivotBetreeSpec.__default.SplitParent#canCall| (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|))))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@93|)) (PivotBetreeSpec.__default.SplitParent (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|)))))) (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)))) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.__default.SplitChildLeft |child#1| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (|PivotBetreeSpec.__default.SplitChildLeft#canCall| |child#1| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|))))))))) (=> (and (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)))) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.__default.SplitChildLeft |child#1| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (|PivotBetreeSpec.__default.SplitChildLeft#canCall| |child#1| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|))))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)) (PivotBetreeSpec.__default.SplitChildLeft |child#1| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))))) (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@93|)))) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.__default.SplitChildRight |child#1| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@93|)) (|PivotBetreeSpec.__default.SplitChildRight#canCall| |child#1| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|))))))))))))))))))) (and (=> (PivotBetreeSpec.__default.ValidSplit (Lit |f#0@@93|)) (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))) (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@93|))))) (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))) (and (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)))) (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))))) (<= (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))) (LitInt (- Bounds.__default.MaxNumChildren 1)))) (let ((|lbound#1@@0| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) 0) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (LitInt (- (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) 1)))) |#Options.Option.None|))) (and true (let ((|ubound#1@@0| (ite (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))))) |#Options.Option.None|))) (and true (let ((|child#1@@0| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@93|))) |lbound#1@@0| |ubound#1@@0|))) (and (and (and (and (and (and (and (and (<= (LitInt 1) (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))) (< (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)) (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#1@@0|)))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)))) (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@93|))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable |child#1@@0|) (LitInt (- (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)) 1)))) (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|)))) (= (LitInt (PivotsLib.__default.Route (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)) (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@93|))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@93|)) (PivotBetreeSpec.__default.SplitParent (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|)))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)) (PivotBetreeSpec.__default.SplitChildLeft |child#1@@0| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@93|)) (PivotBetreeSpec.__default.SplitChildRight |child#1@@0| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|))))))))))))) (=> (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))) (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@93|))))) (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))) (and (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)))) (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))))) (<= (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))) (LitInt (- Bounds.__default.MaxNumChildren 1)))) (let ((|lbound#1@@1| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) 0) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (LitInt (- (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) 1)))) |#Options.Option.None|))) (and true (let ((|ubound#1@@1| (ite (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))))) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))))) |#Options.Option.None|))) (and true (let ((|child#1@@1| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@93|))) |lbound#1@@1| |ubound#1@@1|))) (and (and (and (and (and (and (and (and (<= (LitInt 1) (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))) (< (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)) (|Seq#Length| (PivotBetreeGraph.Node.buckets |child#1@@1|)))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|)))))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|)))) (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@93|))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable |child#1@@1|) (LitInt (- (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)) 1)))) (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|)))) (= (LitInt (PivotsLib.__default.Route (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)) (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@93|))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@93|)) (PivotBetreeSpec.__default.SplitParent (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@93|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@93|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@93|)))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@93|)) (PivotBetreeSpec.__default.SplitChildLeft |child#1@@1| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@93|)) (PivotBetreeSpec.__default.SplitChildRight |child#1@@1| (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@93|)))))))))))) (PivotBetreeSpec.__default.ValidSplit (Lit |f#0@@93|)))))) :qid |PivotBet.562:24| :weight 3 :skolemid |4751| :pattern ( (PivotBetreeSpec.__default.ValidSplit (Lit |f#0@@93|))) ))))
(assert (forall ((arg0@@670 T@U) ) (! (= (type (PivotBetreeSpec.__default.SplitReads arg0@@670)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.SplitReads| :pattern ( (PivotBetreeSpec.__default.SplitReads arg0@@670)) )))
(assert  (=> true (forall ((|f#0@@94| T@U) ) (!  (=> (and (= (type |f#0@@94|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitReads#canCall| |f#0@@94|) (and ($Is |f#0@@94| Tclass.PivotBetreeSpec.NodeFusion) (PivotBetreeSpec.__default.ValidSplit |f#0@@94|)))) ($Is (PivotBetreeSpec.__default.SplitReads |f#0@@94|) (TSeq Tclass.PivotBetreeGraph.ReadOp))) :qid |PivotBet.588:23| :skolemid |4752| :pattern ( (PivotBetreeSpec.__default.SplitReads |f#0@@94|)) ))))
(assert (forall ((|f#0@@95| T@U) ) (!  (=> (and (= (type |f#0@@95|) DatatypeTypeType) ($Is |f#0@@95| Tclass.PivotBetreeSpec.NodeFusion)) (and (=> (|PivotBetreeSpec.__default.SplitReads#requires| |f#0@@95|) (PivotBetreeSpec.__default.ValidSplit |f#0@@95|)) (=> (PivotBetreeSpec.__default.ValidSplit |f#0@@95|) (|PivotBetreeSpec.__default.SplitReads#requires| |f#0@@95|)))) :qid |PivotBet.588:23| :skolemid |4753| :pattern ( (|PivotBetreeSpec.__default.SplitReads#requires| |f#0@@95|)) )))
(assert  (=> true (forall ((|f#0@@96| T@U) ) (!  (=> (and (= (type |f#0@@96|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitReads#canCall| |f#0@@96|) (and ($Is |f#0@@96| Tclass.PivotBetreeSpec.NodeFusion) (PivotBetreeSpec.__default.ValidSplit |f#0@@96|)))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@96|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@96|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@96|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@96|))) (= (PivotBetreeSpec.__default.SplitReads |f#0@@96|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (PivotBetreeSpec.NodeFusion.parentref |f#0@@96|) (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@96|)))) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@96|) (PivotBetreeSpec.NodeFusion.fused__child |f#0@@96|))))))) :qid |PivotBet.588:23| :skolemid |4754| :pattern ( (PivotBetreeSpec.__default.SplitReads |f#0@@96|)) ))))
(assert  (=> true (forall ((|f#0@@97| T@U) ) (!  (=> (and (= (type |f#0@@97|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitReads#canCall| (Lit |f#0@@97|)) (and ($Is |f#0@@97| Tclass.PivotBetreeSpec.NodeFusion) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidSplit (Lit |f#0@@97|)))))))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@97|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@97|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@97|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@97|)))) (= (PivotBetreeSpec.__default.SplitReads (Lit |f#0@@97|)) (Lit (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit (PivotBetreeSpec.NodeFusion.parentref (Lit |f#0@@97|))) (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@97|))))))) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@97|))) (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@97|))))))))))) :qid |PivotBet.588:23| :weight 3 :skolemid |4755| :pattern ( (PivotBetreeSpec.__default.SplitReads (Lit |f#0@@97|))) ))))
(assert (forall ((arg0@@671 T@U) ) (! (= (type (PivotBetreeSpec.__default.SplitOps arg0@@671)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.SplitOps| :pattern ( (PivotBetreeSpec.__default.SplitOps arg0@@671)) )))
(assert  (=> true (forall ((|f#0@@98| T@U) ) (!  (=> (and (= (type |f#0@@98|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitOps#canCall| |f#0@@98|) (and ($Is |f#0@@98| Tclass.PivotBetreeSpec.NodeFusion) (PivotBetreeSpec.__default.ValidSplit |f#0@@98|)))) ($Is (PivotBetreeSpec.__default.SplitOps |f#0@@98|) (TSeq Tclass.PivotBetreeGraph.Op))) :qid |PivotBet.597:21| :skolemid |4756| :pattern ( (PivotBetreeSpec.__default.SplitOps |f#0@@98|)) ))))
(assert (forall ((|f#0@@99| T@U) ) (!  (=> (and (= (type |f#0@@99|) DatatypeTypeType) ($Is |f#0@@99| Tclass.PivotBetreeSpec.NodeFusion)) (and (=> (|PivotBetreeSpec.__default.SplitOps#requires| |f#0@@99|) (PivotBetreeSpec.__default.ValidSplit |f#0@@99|)) (=> (PivotBetreeSpec.__default.ValidSplit |f#0@@99|) (|PivotBetreeSpec.__default.SplitOps#requires| |f#0@@99|)))) :qid |PivotBet.597:21| :skolemid |4757| :pattern ( (|PivotBetreeSpec.__default.SplitOps#requires| |f#0@@99|)) )))
(assert  (=> true (forall ((|f#0@@100| T@U) ) (!  (=> (and (= (type |f#0@@100|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitOps#canCall| |f#0@@100|) (and ($Is |f#0@@100| Tclass.PivotBetreeSpec.NodeFusion) (PivotBetreeSpec.__default.ValidSplit |f#0@@100|)))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@100|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@100|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@100|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@100|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@100|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@100|))) (= (PivotBetreeSpec.__default.SplitOps |f#0@@100|) (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#PivotBetreeGraph.Op.AllocOp| (PivotBetreeSpec.NodeFusion.left__childref |f#0@@100|) (PivotBetreeSpec.NodeFusion.left__child |f#0@@100|)))) ($Box (|#PivotBetreeGraph.Op.AllocOp| (PivotBetreeSpec.NodeFusion.right__childref |f#0@@100|) (PivotBetreeSpec.NodeFusion.right__child |f#0@@100|)))) ($Box (|#PivotBetreeGraph.Op.WriteOp| (PivotBetreeSpec.NodeFusion.parentref |f#0@@100|) (PivotBetreeSpec.NodeFusion.split__parent |f#0@@100|))))))) :qid |PivotBet.597:21| :skolemid |4758| :pattern ( (PivotBetreeSpec.__default.SplitOps |f#0@@100|)) ))))
(assert  (=> true (forall ((|f#0@@101| T@U) ) (!  (=> (and (= (type |f#0@@101|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.SplitOps#canCall| (Lit |f#0@@101|)) (and ($Is |f#0@@101| Tclass.PivotBetreeSpec.NodeFusion) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidSplit (Lit |f#0@@101|)))))))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@101|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@101|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@101|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@101|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@101|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@101|)))) (= (PivotBetreeSpec.__default.SplitOps (Lit |f#0@@101|)) (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#PivotBetreeGraph.Op.AllocOp| (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@101|))) (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@101|))))))) ($Box (Lit (|#PivotBetreeGraph.Op.AllocOp| (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@101|))) (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@101|))))))) ($Box (Lit (|#PivotBetreeGraph.Op.WriteOp| (Lit (PivotBetreeSpec.NodeFusion.parentref (Lit |f#0@@101|))) (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@101|))))))))))) :qid |PivotBet.597:21| :weight 3 :skolemid |4759| :pattern ( (PivotBetreeSpec.__default.SplitOps (Lit |f#0@@101|))) ))))
(assert  (=> true (forall ((|f#0@@102| T@U) ) (!  (=> (and (= (type |f#0@@102|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidMerge#canCall| |f#0@@102|) ($Is |f#0@@102| Tclass.PivotBetreeSpec.NodeFusion))) true) :qid |PivotBet.609:24| :skolemid |4760| :pattern ( (PivotBetreeSpec.__default.ValidMerge |f#0@@102|)) ))))
(assert (forall ((|f#0@@103| T@U) ) (!  (=> (and (= (type |f#0@@103|) DatatypeTypeType) ($Is |f#0@@103| Tclass.PivotBetreeSpec.NodeFusion)) (and (=> (|PivotBetreeSpec.__default.ValidMerge#requires| |f#0@@103|) true) (=> true (|PivotBetreeSpec.__default.ValidMerge#requires| |f#0@@103|)))) :qid |PivotBet.609:24| :skolemid |4761| :pattern ( (|PivotBetreeSpec.__default.ValidMerge#requires| |f#0@@103|)) )))
(assert  (and (and (= (type StartFuel_Sequences._default.remove) LayerTypeType) (= (type StartFuel_BucketsLib._default.MergeBucketsInList) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)))
(assert  (=> true (forall ((|f#0@@104| T@U) ) (!  (=> (and (= (type |f#0@@104|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidMerge#canCall| |f#0@@104|) ($Is |f#0@@104| Tclass.PivotBetreeSpec.NodeFusion))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (=> (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (=> (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (=> (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))))) (and (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) (- (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) 1)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|)))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|)))) (= (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@104|) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|))) (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@104|))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1)) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@104|))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (|BucketWeights.__default.WeightBucketList#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|)))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))) (|BucketWeights.__default.WeightBucketList#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) |Bounds.__default.MaxTotalBucketWeight#canCall|))) (=> (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (|BucketWeights.__default.WeightBucketList#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|)))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))) (|BucketWeights.__default.WeightBucketList#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) |Bounds.__default.MaxTotalBucketWeight#canCall|) (<= (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) |Bounds.__default.MaxNumChildren#canCall|))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) |Bounds.__default.MaxNumChildren#canCall|) (<= (+ (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) (LitInt Bounds.__default.MaxNumChildren))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@104|)) (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|)) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|))))))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@104|)) (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|)) (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|))))) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@104|)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|) (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@104|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (|Sequences.__default.remove#canCall| Tclass.KeyType.Key (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (|Sequences.__default.replace2with1#canCall| Tclass.ReferenceType.Reference ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (|BucketsLib.__default.MergeBucketsInList#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)))))))) (=> (and (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@104|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (|Sequences.__default.remove#canCall| Tclass.KeyType.Key (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (|Sequences.__default.replace2with1#canCall| Tclass.ReferenceType.Reference ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (|BucketsLib.__default.MergeBucketsInList#canCall| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@104|) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.remove Tclass.KeyType.Key StartFuel_Sequences._default.remove (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (|#Options.Option.Some| ($Box (Sequences.__default.replace2with1 Tclass.ReferenceType.Reference StartFuel_Sequences._default.replace2with1 ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)))) (BucketsLib.__default.MergeBucketsInList StartFuel_BucketsLib._default.MergeBucketsInList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (=> (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (=> (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) (=> (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (=> (> (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 0) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)))) (let ((|lbound#0@@2| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 0) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (- (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1))) |#Options.Option.None|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (=> (< (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)))) (let ((|ubound#0@@2| (ite (< (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1))) |#Options.Option.None|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (|PivotBetreeSpec.__default.CutoffNode#canCall| (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|) |lbound#0@@2| (|#Options.Option.Some| ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|))))) (let ((|left#0@@13| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|) |lbound#0@@2| (|#Options.Option.Some| ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|)))))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (|PivotBetreeSpec.__default.CutoffNode#canCall| (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|) (|#Options.Option.Some| ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|))) |ubound#0@@2|)) (let ((|right#0@@13| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|) (|#Options.Option.Some| ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|))) |ubound#0@@2|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (|$IsA#PivotBetreeGraph.Node| (PivotBetreeSpec.NodeFusion.fused__child |f#0@@104|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|) (and (and (and (and (and (PivotBetreeGraph.Node.Node_q |left#0@@13|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@104|)) (PivotBetreeGraph.Node.Node_q |right#0@@13|)) (|Sequences.__default.concat3#canCall| Tclass.KeyType.Key (PivotBetreeGraph.Node.pivotTable |left#0@@13|) ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|)) (PivotBetreeGraph.Node.pivotTable |right#0@@13|))) (and (PivotBetreeGraph.Node.Node_q |left#0@@13|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |left#0@@13|)) (and (PivotBetreeGraph.Node.Node_q |left#0@@13|) (PivotBetreeGraph.Node.Node_q |right#0@@13|))))) (and (PivotBetreeGraph.Node.Node_q |left#0@@13|) (PivotBetreeGraph.Node.Node_q |right#0@@13|))))))))))))))))))) (and (=> (PivotBetreeSpec.__default.ValidMerge |f#0@@104|) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))) (and (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) (- (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) 1)))) (= (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@104|) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|))) (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@104|))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1)) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@104|))) (<= (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (<= (+ (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) (LitInt Bounds.__default.MaxNumChildren))) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@104|)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|) (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@104|) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.remove Tclass.KeyType.Key StartFuel_Sequences._default.remove (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (|#Options.Option.Some| ($Box (Sequences.__default.replace2with1 Tclass.ReferenceType.Reference StartFuel_Sequences._default.replace2with1 ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)))) (BucketsLib.__default.MergeBucketsInList StartFuel_BucketsLib._default.MergeBucketsInList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|))))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) (=> (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) (let ((|lbound#0@@3| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 0) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (- (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1))) |#Options.Option.None|))) (and true (let ((|ubound#0@@3| (ite (< (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1))) |#Options.Option.None|))) (and true (let ((|left#0@@14| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|) |lbound#0@@3| (|#Options.Option.Some| ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|)))))) (and true (let ((|right#0@@14| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|) (|#Options.Option.Some| ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|))) |ubound#0@@3|))) (and true (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__child |f#0@@104|) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.concat3 Tclass.KeyType.Key StartFuel_Sequences._default.concat3 (PivotBetreeGraph.Node.pivotTable |left#0@@14|) ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|)) (PivotBetreeGraph.Node.pivotTable |right#0@@14|)) (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children |left#0@@14|)) (|#Options.Option.Some| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |left#0@@14|))) ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |right#0@@14|)))))) |#Options.Option.None|) (|Seq#Append| (PivotBetreeGraph.Node.buckets |left#0@@14|) (PivotBetreeGraph.Node.buckets |right#0@@14|)))))))))))))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))) (and (<= (LitInt 0) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (< (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) (- (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|))) 1)))) (= (PivotBetreeSpec.NodeFusion.num__children__left |f#0@@104|) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|))) (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (PivotBetreeSpec.NodeFusion.left__childref |f#0@@104|))) (= (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1)) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@104|))) (<= (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (<= (+ (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) (LitInt Bounds.__default.MaxNumChildren))) (=> (= (PivotBetreeSpec.NodeFusion.left__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.right__childref |f#0@@104|)) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|) (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@104|) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.remove Tclass.KeyType.Key StartFuel_Sequences._default.remove (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)) (|#Options.Option.Some| ($Box (Sequences.__default.replace2with1 Tclass.ReferenceType.Reference StartFuel_Sequences._default.replace2with1 ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@104|) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|)))) (BucketsLib.__default.MergeBucketsInList StartFuel_BucketsLib._default.MergeBucketsInList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|))))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) (=> (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|))) (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|))))) (let ((|lbound#0@@4| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 0) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (- (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1))) |#Options.Option.None|))) (and true (let ((|ubound#0@@4| (ite (< (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1) (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)))) (|#Options.Option.Some| (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.NodeFusion.split__parent |f#0@@104|)) (+ (PivotBetreeSpec.NodeFusion.slot__idx |f#0@@104|) 1))) |#Options.Option.None|))) (and true (let ((|left#0@@15| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (PivotBetreeSpec.NodeFusion.left__child |f#0@@104|) |lbound#0@@4| (|#Options.Option.Some| ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|)))))) (and true (let ((|right#0@@15| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (PivotBetreeSpec.NodeFusion.right__child |f#0@@104|) (|#Options.Option.Some| ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|))) |ubound#0@@4|))) (and true (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__child |f#0@@104|) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.concat3 Tclass.KeyType.Key StartFuel_Sequences._default.concat3 (PivotBetreeGraph.Node.pivotTable |left#0@@15|) ($Box (PivotBetreeSpec.NodeFusion.pivot |f#0@@104|)) (PivotBetreeGraph.Node.pivotTable |right#0@@15|)) (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children |left#0@@15|)) (|#Options.Option.Some| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |left#0@@15|))) ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |right#0@@15|)))))) |#Options.Option.None|) (|Seq#Append| (PivotBetreeGraph.Node.buckets |left#0@@15|) (PivotBetreeGraph.Node.buckets |right#0@@15|))))))))))))) (PivotBetreeSpec.__default.ValidMerge |f#0@@104|))))) :qid |PivotBet.609:24| :skolemid |4762| :pattern ( (PivotBetreeSpec.__default.ValidMerge |f#0@@104|)) ))))
(assert  (=> true (forall ((|f#0@@105| T@U) ) (!  (=> (and (= (type |f#0@@105|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidMerge#canCall| (Lit |f#0@@105|)) ($Is |f#0@@105| Tclass.PivotBetreeSpec.NodeFusion))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|)))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (=> (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (=> (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (and (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) (- (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))) 1)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (= (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@105|))) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))))) (=> (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@105|))))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (LitInt (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@105|))))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|)))))))) |Bounds.__default.MaxTotalBucketWeight#canCall|))) (=> (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|)))))))) |Bounds.__default.MaxTotalBucketWeight#canCall|) (<= (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|)))))) |Bounds.__default.MaxNumChildren#canCall|))) (=> (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|)))))) |Bounds.__default.MaxNumChildren#canCall|) (<= (+ (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))) (LitInt Bounds.__default.MaxNumChildren))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@105|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@105|)))) (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))) (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)))))))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@105|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@105|)))) (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))) (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)))))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@105|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@105|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)) (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@105|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (|Sequences.__default.remove#canCall| Tclass.KeyType.Key (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|))))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (|Sequences.__default.replace2with1#canCall| Tclass.ReferenceType.Reference (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@105|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (|BucketsLib.__default.MergeBucketsInList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))))))))) (=> (and (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@105|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (and (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (|Sequences.__default.remove#canCall| Tclass.KeyType.Key (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|))))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (|Sequences.__default.replace2with1#canCall| Tclass.ReferenceType.Reference (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@105|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (|BucketsLib.__default.MergeBucketsInList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@105|)) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.remove Tclass.KeyType.Key StartFuel_Sequences._default.remove (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (|#Options.Option.Some| ($Box (Sequences.__default.replace2with1 Tclass.ReferenceType.Reference StartFuel_Sequences._default.replace2with1 (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@105|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))))) (BucketsLib.__default.MergeBucketsInList StartFuel_BucketsLib._default.MergeBucketsInList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|))))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (=> (U_2_bool (Lit (bool_2_U (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))) (U_2_bool (Lit (bool_2_U  (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (=> (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))))) (=> (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (=> (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))))))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))) (U_2_bool (Lit (bool_2_U  (=> (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (=> (U_2_bool (Lit (bool_2_U (> (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 0)))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))))) (let ((|lbound#1@@2| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 0) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (- (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1)))) |#Options.Option.None|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))) (=> (< (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))))) (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))))) (let ((|ubound#1@@2| (ite (< (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))))) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1)))) |#Options.Option.None|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (|PivotBetreeSpec.__default.CutoffNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))) |lbound#1@@2| (Lit (|#Options.Option.Some| ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))))))) (let ((|left#1| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))) |lbound#1@@2| (Lit (|#Options.Option.Some| ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|))))))))) (=> (U_2_bool (Lit (bool_2_U true))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (|PivotBetreeSpec.__default.CutoffNode#canCall| (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))) (Lit (|#Options.Option.Some| ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))))) |ubound#1@@2|)) (let ((|right#1| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))) (Lit (|#Options.Option.Some| ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))))) |ubound#1@@2|))) (=> (U_2_bool (Lit (bool_2_U true))) (and (|$IsA#PivotBetreeGraph.Node| (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@105|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|)) (and (and (and (and (and (PivotBetreeGraph.Node.Node_q |left#1|) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@105|))) (PivotBetreeGraph.Node.Node_q |right#1|)) (|Sequences.__default.concat3#canCall| Tclass.KeyType.Key (PivotBetreeGraph.Node.pivotTable |left#1|) ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))) (PivotBetreeGraph.Node.pivotTable |right#1|))) (and (PivotBetreeGraph.Node.Node_q |left#1|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |left#1|)) (and (PivotBetreeGraph.Node.Node_q |left#1|) (PivotBetreeGraph.Node.Node_q |right#1|))))) (and (PivotBetreeGraph.Node.Node_q |left#1|) (PivotBetreeGraph.Node.Node_q |right#1|))))))))))))))))))) (and (=> (PivotBetreeSpec.__default.ValidMerge (Lit |f#0@@105|)) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))) (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (and (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) (- (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))) 1)))) (= (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@105|))) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))) (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@105|))))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (LitInt (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@105|))))) (<= (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (<= (+ (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))) (LitInt Bounds.__default.MaxNumChildren))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@105|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@105|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)) (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@105|)) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.remove Tclass.KeyType.Key StartFuel_Sequences._default.remove (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (|#Options.Option.Some| ($Box (Sequences.__default.replace2with1 Tclass.ReferenceType.Reference StartFuel_Sequences._default.replace2with1 (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@105|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))))) (BucketsLib.__default.MergeBucketsInList StartFuel_BucketsLib._default.MergeBucketsInList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|))))))) (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|)))))))) (=> (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|)))))))) (let ((|lbound#1@@3| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 0) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (- (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1)))) |#Options.Option.None|))) (and true (let ((|ubound#1@@3| (ite (< (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))))) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1)))) |#Options.Option.None|))) (and true (let ((|left#1@@0| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))) |lbound#1@@3| (Lit (|#Options.Option.Some| ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|))))))))) (and true (let ((|right#1@@0| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))) (Lit (|#Options.Option.Some| ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))))) |ubound#1@@3|))) (and true (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@105|)) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.concat3 Tclass.KeyType.Key StartFuel_Sequences._default.concat3 (PivotBetreeGraph.Node.pivotTable |left#1@@0|) ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))) (PivotBetreeGraph.Node.pivotTable |right#1@@0|)) (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children |left#1@@0|)) (|#Options.Option.Some| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |left#1@@0|))) ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |right#1@@0|)))))) |#Options.Option.None|) (|Seq#Append| (PivotBetreeGraph.Node.buckets |left#1@@0|) (PivotBetreeGraph.Node.buckets |right#1@@0|)))))))))))))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))) (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))))) (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (and (<= (LitInt 0) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (< (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) (- (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))) 1)))) (= (LitInt (PivotBetreeSpec.NodeFusion.num__children__left (Lit |f#0@@105|))) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|))))) (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))) (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@105|))))) (= (|Seq#Index| (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (LitInt (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@105|))))) (<= (+ (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))) (LitInt Bounds.__default.MaxTotalBucketWeight))) (<= (+ (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (|Seq#Length| (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))))) (LitInt Bounds.__default.MaxNumChildren))) (=> (= (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@105|))) (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@105|)))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)) (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))))) (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@105|)) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.remove Tclass.KeyType.Key StartFuel_Sequences._default.remove (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))) (|#Options.Option.Some| ($Box (Sequences.__default.replace2with1 Tclass.ReferenceType.Reference StartFuel_Sequences._default.replace2with1 (Lit ($Unbox (SeqType BoxType) (Options.Option.value (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|)))))))) (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@105|))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)))))) (BucketsLib.__default.MergeBucketsInList StartFuel_BucketsLib._default.MergeBucketsInList (Lit (PivotBetreeGraph.Node.buckets (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|))))))) (=> (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (Options.Option.Some_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|)))))))) (=> (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|)))))) (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|)))))))) (let ((|lbound#1@@4| (ite (> (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 0) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (- (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1)))) |#Options.Option.None|))) (and true (let ((|ubound#1@@4| (ite (< (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1) (|Seq#Length| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))))) (|#Options.Option.Some| (|Seq#Index| (Lit (PivotBetreeGraph.Node.pivotTable (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@105|))))) (LitInt (+ (PivotBetreeSpec.NodeFusion.slot__idx (Lit |f#0@@105|)) 1)))) |#Options.Option.None|))) (and true (let ((|left#1@@1| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@105|))) |lbound#1@@4| (Lit (|#Options.Option.Some| ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|))))))))) (and true (let ((|right#1@@1| (PivotBetreeSpec.__default.CutoffNode StartFuel_PivotBetreeSpec._default.CutoffNode (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@105|))) (Lit (|#Options.Option.Some| ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))))) |ubound#1@@4|))) (and true (|PivotBetreeGraph.Node#Equal| (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@105|)) (|#PivotBetreeGraph.Node.Node| (Sequences.__default.concat3 Tclass.KeyType.Key StartFuel_Sequences._default.concat3 (PivotBetreeGraph.Node.pivotTable |left#1@@1|) ($Box (Lit (PivotBetreeSpec.NodeFusion.pivot (Lit |f#0@@105|)))) (PivotBetreeGraph.Node.pivotTable |right#1@@1|)) (ite (Options.Option.Some_q (PivotBetreeGraph.Node.children |left#1@@1|)) (|#Options.Option.Some| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |left#1@@1|))) ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |right#1@@1|)))))) |#Options.Option.None|) (|Seq#Append| (PivotBetreeGraph.Node.buckets |left#1@@1|) (PivotBetreeGraph.Node.buckets |right#1@@1|))))))))))))) (PivotBetreeSpec.__default.ValidMerge (Lit |f#0@@105|)))))) :qid |PivotBet.609:24| :weight 3 :skolemid |4763| :pattern ( (PivotBetreeSpec.__default.ValidMerge (Lit |f#0@@105|))) ))))
(assert (forall ((arg0@@672 T@U) ) (! (= (type (PivotBetreeSpec.__default.MergeReads arg0@@672)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.MergeReads| :pattern ( (PivotBetreeSpec.__default.MergeReads arg0@@672)) )))
(assert  (=> true (forall ((|f#0@@106| T@U) ) (!  (=> (and (= (type |f#0@@106|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.MergeReads#canCall| |f#0@@106|) (and ($Is |f#0@@106| Tclass.PivotBetreeSpec.NodeFusion) (PivotBetreeSpec.__default.ValidMerge |f#0@@106|)))) ($Is (PivotBetreeSpec.__default.MergeReads |f#0@@106|) (TSeq Tclass.PivotBetreeGraph.ReadOp))) :qid |PivotBet.649:23| :skolemid |4764| :pattern ( (PivotBetreeSpec.__default.MergeReads |f#0@@106|)) ))))
(assert (forall ((|f#0@@107| T@U) ) (!  (=> (and (= (type |f#0@@107|) DatatypeTypeType) ($Is |f#0@@107| Tclass.PivotBetreeSpec.NodeFusion)) (and (=> (|PivotBetreeSpec.__default.MergeReads#requires| |f#0@@107|) (PivotBetreeSpec.__default.ValidMerge |f#0@@107|)) (=> (PivotBetreeSpec.__default.ValidMerge |f#0@@107|) (|PivotBetreeSpec.__default.MergeReads#requires| |f#0@@107|)))) :qid |PivotBet.649:23| :skolemid |4765| :pattern ( (|PivotBetreeSpec.__default.MergeReads#requires| |f#0@@107|)) )))
(assert  (=> true (forall ((|f#0@@108| T@U) ) (!  (=> (and (= (type |f#0@@108|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.MergeReads#canCall| |f#0@@108|) (and ($Is |f#0@@108| Tclass.PivotBetreeSpec.NodeFusion) (PivotBetreeSpec.__default.ValidMerge |f#0@@108|)))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@108|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@108|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@108|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@108|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@108|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@108|))) (= (PivotBetreeSpec.__default.MergeReads |f#0@@108|) (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (PivotBetreeSpec.NodeFusion.parentref |f#0@@108|) (PivotBetreeSpec.NodeFusion.split__parent |f#0@@108|)))) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (PivotBetreeSpec.NodeFusion.left__childref |f#0@@108|) (PivotBetreeSpec.NodeFusion.left__child |f#0@@108|)))) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (PivotBetreeSpec.NodeFusion.right__childref |f#0@@108|) (PivotBetreeSpec.NodeFusion.right__child |f#0@@108|))))))) :qid |PivotBet.649:23| :skolemid |4766| :pattern ( (PivotBetreeSpec.__default.MergeReads |f#0@@108|)) ))))
(assert  (=> true (forall ((|f#0@@109| T@U) ) (!  (=> (and (= (type |f#0@@109|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.MergeReads#canCall| (Lit |f#0@@109|)) (and ($Is |f#0@@109| Tclass.PivotBetreeSpec.NodeFusion) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidMerge (Lit |f#0@@109|)))))))) (and (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@109|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@109|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@109|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@109|)))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@109|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@109|)))) (= (PivotBetreeSpec.__default.MergeReads (Lit |f#0@@109|)) (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit (PivotBetreeSpec.NodeFusion.parentref (Lit |f#0@@109|))) (Lit (PivotBetreeSpec.NodeFusion.split__parent (Lit |f#0@@109|))))))) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit (PivotBetreeSpec.NodeFusion.left__childref (Lit |f#0@@109|))) (Lit (PivotBetreeSpec.NodeFusion.left__child (Lit |f#0@@109|))))))) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit (PivotBetreeSpec.NodeFusion.right__childref (Lit |f#0@@109|))) (Lit (PivotBetreeSpec.NodeFusion.right__child (Lit |f#0@@109|))))))))))) :qid |PivotBet.649:23| :weight 3 :skolemid |4767| :pattern ( (PivotBetreeSpec.__default.MergeReads (Lit |f#0@@109|))) ))))
(assert (forall ((arg0@@673 T@U) ) (! (= (type (PivotBetreeSpec.__default.MergeOps arg0@@673)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.MergeOps| :pattern ( (PivotBetreeSpec.__default.MergeOps arg0@@673)) )))
(assert  (=> true (forall ((|f#0@@110| T@U) ) (!  (=> (and (= (type |f#0@@110|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.MergeOps#canCall| |f#0@@110|) (and ($Is |f#0@@110| Tclass.PivotBetreeSpec.NodeFusion) (PivotBetreeSpec.__default.ValidMerge |f#0@@110|)))) ($Is (PivotBetreeSpec.__default.MergeOps |f#0@@110|) (TSeq Tclass.PivotBetreeGraph.Op))) :qid |PivotBet.659:21| :skolemid |4768| :pattern ( (PivotBetreeSpec.__default.MergeOps |f#0@@110|)) ))))
(assert (forall ((|f#0@@111| T@U) ) (!  (=> (and (= (type |f#0@@111|) DatatypeTypeType) ($Is |f#0@@111| Tclass.PivotBetreeSpec.NodeFusion)) (and (=> (|PivotBetreeSpec.__default.MergeOps#requires| |f#0@@111|) (PivotBetreeSpec.__default.ValidMerge |f#0@@111|)) (=> (PivotBetreeSpec.__default.ValidMerge |f#0@@111|) (|PivotBetreeSpec.__default.MergeOps#requires| |f#0@@111|)))) :qid |PivotBet.659:21| :skolemid |4769| :pattern ( (|PivotBetreeSpec.__default.MergeOps#requires| |f#0@@111|)) )))
(assert  (=> true (forall ((|f#0@@112| T@U) ) (!  (=> (and (= (type |f#0@@112|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.MergeOps#canCall| |f#0@@112|) (and ($Is |f#0@@112| Tclass.PivotBetreeSpec.NodeFusion) (PivotBetreeSpec.__default.ValidMerge |f#0@@112|)))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@112|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@112|)) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@112|) (PivotBetreeSpec.NodeFusion.NodeFusion_q |f#0@@112|))) (= (PivotBetreeSpec.__default.MergeOps |f#0@@112|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#PivotBetreeGraph.Op.AllocOp| (PivotBetreeSpec.NodeFusion.fused__childref |f#0@@112|) (PivotBetreeSpec.NodeFusion.fused__child |f#0@@112|)))) ($Box (|#PivotBetreeGraph.Op.WriteOp| (PivotBetreeSpec.NodeFusion.parentref |f#0@@112|) (PivotBetreeSpec.NodeFusion.fused__parent |f#0@@112|))))))) :qid |PivotBet.659:21| :skolemid |4770| :pattern ( (PivotBetreeSpec.__default.MergeOps |f#0@@112|)) ))))
(assert  (=> true (forall ((|f#0@@113| T@U) ) (!  (=> (and (= (type |f#0@@113|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.MergeOps#canCall| (Lit |f#0@@113|)) (and ($Is |f#0@@113| Tclass.PivotBetreeSpec.NodeFusion) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidMerge (Lit |f#0@@113|)))))))) (and (and (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@113|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@113|))) (and (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@113|)) (PivotBetreeSpec.NodeFusion.NodeFusion_q (Lit |f#0@@113|)))) (= (PivotBetreeSpec.__default.MergeOps (Lit |f#0@@113|)) (Lit (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#PivotBetreeGraph.Op.AllocOp| (Lit (PivotBetreeSpec.NodeFusion.fused__childref (Lit |f#0@@113|))) (Lit (PivotBetreeSpec.NodeFusion.fused__child (Lit |f#0@@113|))))))) ($Box (Lit (|#PivotBetreeGraph.Op.WriteOp| (Lit (PivotBetreeSpec.NodeFusion.parentref (Lit |f#0@@113|))) (Lit (PivotBetreeSpec.NodeFusion.fused__parent (Lit |f#0@@113|))))))))))) :qid |PivotBet.659:21| :weight 3 :skolemid |4771| :pattern ( (PivotBetreeSpec.__default.MergeOps (Lit |f#0@@113|))) ))))
(assert  (=> true (forall ((|r#0@@3| T@U) ) (!  (=> (and (= (type |r#0@@3|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@3|) ($Is |r#0@@3| Tclass.PivotBetreeSpec.Repivot))) true) :qid |PivotBet.672:26| :skolemid |4772| :pattern ( (PivotBetreeSpec.__default.ValidRepivot |r#0@@3|)) ))))
(assert (forall ((|r#0@@4| T@U) ) (!  (=> (and (= (type |r#0@@4|) DatatypeTypeType) ($Is |r#0@@4| Tclass.PivotBetreeSpec.Repivot)) (and (=> (|PivotBetreeSpec.__default.ValidRepivot#requires| |r#0@@4|) true) (=> true (|PivotBetreeSpec.__default.ValidRepivot#requires| |r#0@@4|)))) :qid |PivotBet.672:26| :skolemid |4773| :pattern ( (|PivotBetreeSpec.__default.ValidRepivot#requires| |r#0@@4|)) )))
(assert  (=> true (forall ((|r#0@@5| T@U) ) (!  (=> (and (= (type |r#0@@5|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@5|) ($Is |r#0@@5| Tclass.PivotBetreeSpec.Repivot))) (and (and (and (and (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@5|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@5|))) (=> (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@5|)) (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@5|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.Repivot.leaf |r#0@@5|))))) (=> (and (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@5|) (PivotBetreeGraph.Node.Node_q (PivotBetreeSpec.Repivot.leaf |r#0@@5|))) (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.Repivot.leaf |r#0@@5|)))) (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@5|) (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeSpec.Repivot.pivots |r#0@@5|))))) (=> (and (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@5|) (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeSpec.Repivot.pivots |r#0@@5|))) (PivotsLib.__default.WFPivots (PivotBetreeSpec.Repivot.pivots |r#0@@5|))) (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@5|) |Bounds.__default.MaxNumChildren#canCall|))) (and (=> (PivotBetreeSpec.__default.ValidRepivot |r#0@@5|) (and (and (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@5|)) (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.Repivot.leaf |r#0@@5|)))) (PivotsLib.__default.WFPivots (PivotBetreeSpec.Repivot.pivots |r#0@@5|))) (<= (|Seq#Length| (PivotBetreeSpec.Repivot.pivots |r#0@@5|)) (LitInt (- Bounds.__default.MaxNumChildren 1))))) (=> (and (and (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@5|)) (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.Repivot.leaf |r#0@@5|)))) (PivotsLib.__default.WFPivots (PivotBetreeSpec.Repivot.pivots |r#0@@5|))) (<= (|Seq#Length| (PivotBetreeSpec.Repivot.pivots |r#0@@5|)) (LitInt (- Bounds.__default.MaxNumChildren 1)))) (PivotBetreeSpec.__default.ValidRepivot |r#0@@5|))))) :qid |PivotBet.672:26| :skolemid |4774| :pattern ( (PivotBetreeSpec.__default.ValidRepivot |r#0@@5|)) ))))
(assert  (=> true (forall ((|r#0@@6| T@U) ) (!  (=> (and (= (type |r#0@@6|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidRepivot#canCall| (Lit |r#0@@6|)) ($Is |r#0@@6| Tclass.PivotBetreeSpec.Repivot))) (and (and (and (and (and (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@6|)) (|PivotBetreeSpec.__default.WFNode#canCall| (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@6|))))))) (and (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@6|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@6|))))))) (=> (and (and (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@6|)) (PivotBetreeGraph.Node.Node_q (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@6|))))) (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@6|)))))))))) (and (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@6|)) (|PivotsLib.__default.WFPivots#canCall| (Lit (PivotBetreeSpec.Repivot.pivots (Lit |r#0@@6|))))))) (=> (and (and (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@6|)) (|PivotsLib.__default.WFPivots#canCall| (Lit (PivotBetreeSpec.Repivot.pivots (Lit |r#0@@6|))))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit (PivotBetreeSpec.Repivot.pivots (Lit |r#0@@6|)))))))) (and (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@6|)) |Bounds.__default.MaxNumChildren#canCall|))) (and (=> (PivotBetreeSpec.__default.ValidRepivot (Lit |r#0@@6|)) (and (and (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@6|)))) (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@6|))))))) (PivotsLib.__default.WFPivots (Lit (PivotBetreeSpec.Repivot.pivots (Lit |r#0@@6|))))) (<= (|Seq#Length| (Lit (PivotBetreeSpec.Repivot.pivots (Lit |r#0@@6|)))) (LitInt (- Bounds.__default.MaxNumChildren 1))))) (=> (and (and (and (PivotBetreeSpec.__default.WFNode (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@6|)))) (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@6|))))))) (PivotsLib.__default.WFPivots (Lit (PivotBetreeSpec.Repivot.pivots (Lit |r#0@@6|))))) (<= (|Seq#Length| (Lit (PivotBetreeSpec.Repivot.pivots (Lit |r#0@@6|)))) (LitInt (- Bounds.__default.MaxNumChildren 1)))) (PivotBetreeSpec.__default.ValidRepivot (Lit |r#0@@6|)))))) :qid |PivotBet.672:26| :weight 3 :skolemid |4775| :pattern ( (PivotBetreeSpec.__default.ValidRepivot (Lit |r#0@@6|))) ))))
(assert (forall ((arg0@@674 T@U) ) (! (= (type (PivotBetreeSpec.__default.RepivotReads arg0@@674)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.RepivotReads| :pattern ( (PivotBetreeSpec.__default.RepivotReads arg0@@674)) )))
(assert  (=> true (forall ((|r#0@@7| T@U) ) (!  (=> (and (= (type |r#0@@7|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.RepivotReads#canCall| |r#0@@7|) (and ($Is |r#0@@7| Tclass.PivotBetreeSpec.Repivot) (PivotBetreeSpec.__default.ValidRepivot |r#0@@7|)))) ($Is (PivotBetreeSpec.__default.RepivotReads |r#0@@7|) (TSeq Tclass.PivotBetreeGraph.ReadOp))) :qid |PivotBet.680:25| :skolemid |4776| :pattern ( (PivotBetreeSpec.__default.RepivotReads |r#0@@7|)) ))))
(assert (forall ((|r#0@@8| T@U) ) (!  (=> (and (= (type |r#0@@8|) DatatypeTypeType) ($Is |r#0@@8| Tclass.PivotBetreeSpec.Repivot)) (and (=> (|PivotBetreeSpec.__default.RepivotReads#requires| |r#0@@8|) (PivotBetreeSpec.__default.ValidRepivot |r#0@@8|)) (=> (PivotBetreeSpec.__default.ValidRepivot |r#0@@8|) (|PivotBetreeSpec.__default.RepivotReads#requires| |r#0@@8|)))) :qid |PivotBet.680:25| :skolemid |4777| :pattern ( (|PivotBetreeSpec.__default.RepivotReads#requires| |r#0@@8|)) )))
(assert  (=> true (forall ((|r#0@@9| T@U) ) (!  (=> (and (= (type |r#0@@9|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.RepivotReads#canCall| |r#0@@9|) (and ($Is |r#0@@9| Tclass.PivotBetreeSpec.Repivot) (PivotBetreeSpec.__default.ValidRepivot |r#0@@9|)))) (and (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@9|) (PivotBetreeSpec.Repivot.Repivot_q |r#0@@9|)) (= (PivotBetreeSpec.__default.RepivotReads |r#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#PivotBetreeGraph.ReadOp.ReadOp| (PivotBetreeSpec.Repivot.ref |r#0@@9|) (PivotBetreeSpec.Repivot.leaf |r#0@@9|))))))) :qid |PivotBet.680:25| :skolemid |4778| :pattern ( (PivotBetreeSpec.__default.RepivotReads |r#0@@9|)) ))))
(assert  (=> true (forall ((|r#0@@10| T@U) ) (!  (=> (and (= (type |r#0@@10|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.RepivotReads#canCall| (Lit |r#0@@10|)) (and ($Is |r#0@@10| Tclass.PivotBetreeSpec.Repivot) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidRepivot (Lit |r#0@@10|)))))))) (and (and (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@10|)) (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@10|))) (= (PivotBetreeSpec.__default.RepivotReads (Lit |r#0@@10|)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#PivotBetreeGraph.ReadOp.ReadOp| (Lit (PivotBetreeSpec.Repivot.ref (Lit |r#0@@10|))) (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@10|))))))))))) :qid |PivotBet.680:25| :weight 3 :skolemid |4779| :pattern ( (PivotBetreeSpec.__default.RepivotReads (Lit |r#0@@10|))) ))))
(assert (forall ((arg0@@675 T@U) (arg1@@360 T@U) ) (! (= (type (PivotBetreeSpec.__default.ApplyRepivot arg0@@675 arg1@@360)) DatatypeTypeType) :qid |funType:PivotBetreeSpec.__default.ApplyRepivot| :pattern ( (PivotBetreeSpec.__default.ApplyRepivot arg0@@675 arg1@@360)) )))
(assert  (=> true (forall ((|leaf#0| T@U) (|pivots#0@@76| T@U) ) (!  (=> (and (and (= (type |leaf#0|) DatatypeTypeType) (= (type |pivots#0@@76|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.ApplyRepivot#canCall| |leaf#0| |pivots#0@@76|) (and (and ($Is |leaf#0| Tclass.PivotBetreeGraph.Node) ($Is |pivots#0@@76| (TSeq Tclass.KeyType.Key))) (and (and (PivotBetreeSpec.__default.WFNode |leaf#0|) (Options.Option.None_q (PivotBetreeGraph.Node.children |leaf#0|))) (PivotsLib.__default.WFPivots |pivots#0@@76|))))) ($Is (PivotBetreeSpec.__default.ApplyRepivot |leaf#0| |pivots#0@@76|) Tclass.PivotBetreeGraph.Node)) :qid |PivotBet.688:25| :skolemid |4780| :pattern ( (PivotBetreeSpec.__default.ApplyRepivot |leaf#0| |pivots#0@@76|)) ))))
(assert (forall ((|leaf#0@@0| T@U) (|pivots#0@@77| T@U) ) (!  (=> (and (and (= (type |leaf#0@@0|) DatatypeTypeType) (= (type |pivots#0@@77|) (SeqType BoxType))) (and ($Is |leaf#0@@0| Tclass.PivotBetreeGraph.Node) ($Is |pivots#0@@77| (TSeq Tclass.KeyType.Key)))) (and (=> (|PivotBetreeSpec.__default.ApplyRepivot#requires| |leaf#0@@0| |pivots#0@@77|) (and (and (PivotBetreeSpec.__default.WFNode |leaf#0@@0|) (Options.Option.None_q (PivotBetreeGraph.Node.children |leaf#0@@0|))) (PivotsLib.__default.WFPivots |pivots#0@@77|))) (=> (and (and (PivotBetreeSpec.__default.WFNode |leaf#0@@0|) (Options.Option.None_q (PivotBetreeGraph.Node.children |leaf#0@@0|))) (PivotsLib.__default.WFPivots |pivots#0@@77|)) (|PivotBetreeSpec.__default.ApplyRepivot#requires| |leaf#0@@0| |pivots#0@@77|)))) :qid |PivotBet.688:25| :skolemid |4781| :pattern ( (|PivotBetreeSpec.__default.ApplyRepivot#requires| |leaf#0@@0| |pivots#0@@77|)) )))
(assert  (=> true (forall ((|leaf#0@@1| T@U) (|pivots#0@@78| T@U) ) (!  (=> (and (and (= (type |leaf#0@@1|) DatatypeTypeType) (= (type |pivots#0@@78|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.ApplyRepivot#canCall| |leaf#0@@1| |pivots#0@@78|) (and (and ($Is |leaf#0@@1| Tclass.PivotBetreeGraph.Node) ($Is |pivots#0@@78| (TSeq Tclass.KeyType.Key))) (and (and (PivotBetreeSpec.__default.WFNode |leaf#0@@1|) (Options.Option.None_q (PivotBetreeGraph.Node.children |leaf#0@@1|))) (PivotsLib.__default.WFPivots |pivots#0@@78|))))) (and (and (and (PivotBetreeGraph.Node.Node_q |leaf#0@@1|) (|BucketsLib.__default.JoinBucketList#canCall| (PivotBetreeGraph.Node.buckets |leaf#0@@1|))) (|BucketsLib.__default.SplitBucketOnPivots#canCall| (BucketsLib.__default.JoinBucketList ($LS $LZ) (PivotBetreeGraph.Node.buckets |leaf#0@@1|)) |pivots#0@@78|)) (= (PivotBetreeSpec.__default.ApplyRepivot |leaf#0@@1| |pivots#0@@78|) (|#PivotBetreeGraph.Node.Node| |pivots#0@@78| (Lit |#Options.Option.None|) (BucketsLib.__default.SplitBucketOnPivots ($LS $LZ) (BucketsLib.__default.JoinBucketList ($LS $LZ) (PivotBetreeGraph.Node.buckets |leaf#0@@1|)) |pivots#0@@78|))))) :qid |PivotBet.688:25| :skolemid |4782| :pattern ( (PivotBetreeSpec.__default.ApplyRepivot |leaf#0@@1| |pivots#0@@78|)) ))))
(assert  (=> true (forall ((|leaf#0@@2| T@U) (|pivots#0@@79| T@U) ) (!  (=> (and (and (= (type |leaf#0@@2|) DatatypeTypeType) (= (type |pivots#0@@79|) (SeqType BoxType))) (or (|PivotBetreeSpec.__default.ApplyRepivot#canCall| (Lit |leaf#0@@2|) (Lit |pivots#0@@79|)) (and (and ($Is |leaf#0@@2| Tclass.PivotBetreeGraph.Node) ($Is |pivots#0@@79| (TSeq Tclass.KeyType.Key))) (and (and (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.WFNode (Lit |leaf#0@@2|))))) (U_2_bool (Lit (bool_2_U (Options.Option.None_q (Lit (PivotBetreeGraph.Node.children (Lit |leaf#0@@2|)))))))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@79|))))))))) (and (and (and (PivotBetreeGraph.Node.Node_q (Lit |leaf#0@@2|)) (|BucketsLib.__default.JoinBucketList#canCall| (Lit (PivotBetreeGraph.Node.buckets (Lit |leaf#0@@2|))))) (|BucketsLib.__default.SplitBucketOnPivots#canCall| (Lit (BucketsLib.__default.JoinBucketList ($LS $LZ) (Lit (PivotBetreeGraph.Node.buckets (Lit |leaf#0@@2|))))) (Lit |pivots#0@@79|))) (= (PivotBetreeSpec.__default.ApplyRepivot (Lit |leaf#0@@2|) (Lit |pivots#0@@79|)) (Lit (|#PivotBetreeGraph.Node.Node| (Lit |pivots#0@@79|) (Lit |#Options.Option.None|) (Lit (BucketsLib.__default.SplitBucketOnPivots ($LS $LZ) (Lit (BucketsLib.__default.JoinBucketList ($LS $LZ) (Lit (PivotBetreeGraph.Node.buckets (Lit |leaf#0@@2|))))) (Lit |pivots#0@@79|)))))))) :qid |PivotBet.688:25| :weight 3 :skolemid |4783| :pattern ( (PivotBetreeSpec.__default.ApplyRepivot (Lit |leaf#0@@2|) (Lit |pivots#0@@79|))) ))))
(assert (forall ((arg0@@676 T@U) ) (! (= (type (PivotBetreeSpec.__default.RepivotOps arg0@@676)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.RepivotOps| :pattern ( (PivotBetreeSpec.__default.RepivotOps arg0@@676)) )))
(assert  (=> true (forall ((|r#0@@11| T@U) ) (!  (=> (and (= (type |r#0@@11|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.RepivotOps#canCall| |r#0@@11|) (and ($Is |r#0@@11| Tclass.PivotBetreeSpec.Repivot) (PivotBetreeSpec.__default.ValidRepivot |r#0@@11|)))) ($Is (PivotBetreeSpec.__default.RepivotOps |r#0@@11|) (TSeq Tclass.PivotBetreeGraph.Op))) :qid |PivotBet.696:23| :skolemid |4784| :pattern ( (PivotBetreeSpec.__default.RepivotOps |r#0@@11|)) ))))
(assert (forall ((|r#0@@12| T@U) ) (!  (=> (and (= (type |r#0@@12|) DatatypeTypeType) ($Is |r#0@@12| Tclass.PivotBetreeSpec.Repivot)) (and (=> (|PivotBetreeSpec.__default.RepivotOps#requires| |r#0@@12|) (PivotBetreeSpec.__default.ValidRepivot |r#0@@12|)) (=> (PivotBetreeSpec.__default.ValidRepivot |r#0@@12|) (|PivotBetreeSpec.__default.RepivotOps#requires| |r#0@@12|)))) :qid |PivotBet.696:23| :skolemid |4785| :pattern ( (|PivotBetreeSpec.__default.RepivotOps#requires| |r#0@@12|)) )))
(assert  (=> true (forall ((|r#0@@13| T@U) ) (!  (=> (and (= (type |r#0@@13|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.RepivotOps#canCall| |r#0@@13|) (and ($Is |r#0@@13| Tclass.PivotBetreeSpec.Repivot) (PivotBetreeSpec.__default.ValidRepivot |r#0@@13|)))) (and (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@13|) (and (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@13|) (PivotBetreeSpec.Repivot.Repivot_q |r#0@@13|)) (|PivotBetreeSpec.__default.ApplyRepivot#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@13|) (PivotBetreeSpec.Repivot.pivots |r#0@@13|)))) (= (PivotBetreeSpec.__default.RepivotOps |r#0@@13|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#PivotBetreeGraph.Op.WriteOp| (PivotBetreeSpec.Repivot.ref |r#0@@13|) (PivotBetreeSpec.__default.ApplyRepivot (PivotBetreeSpec.Repivot.leaf |r#0@@13|) (PivotBetreeSpec.Repivot.pivots |r#0@@13|)))))))) :qid |PivotBet.696:23| :skolemid |4786| :pattern ( (PivotBetreeSpec.__default.RepivotOps |r#0@@13|)) ))))
(assert  (=> true (forall ((|r#0@@14| T@U) ) (!  (=> (and (= (type |r#0@@14|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.RepivotOps#canCall| (Lit |r#0@@14|)) (and ($Is |r#0@@14| Tclass.PivotBetreeSpec.Repivot) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidRepivot (Lit |r#0@@14|)))))))) (and (and (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@14|)) (and (and (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@14|)) (PivotBetreeSpec.Repivot.Repivot_q (Lit |r#0@@14|))) (|PivotBetreeSpec.__default.ApplyRepivot#canCall| (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@14|))) (Lit (PivotBetreeSpec.Repivot.pivots (Lit |r#0@@14|)))))) (= (PivotBetreeSpec.__default.RepivotOps (Lit |r#0@@14|)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#PivotBetreeGraph.Op.WriteOp| (Lit (PivotBetreeSpec.Repivot.ref (Lit |r#0@@14|))) (Lit (PivotBetreeSpec.__default.ApplyRepivot (Lit (PivotBetreeSpec.Repivot.leaf (Lit |r#0@@14|))) (Lit (PivotBetreeSpec.Repivot.pivots (Lit |r#0@@14|))))))))))))) :qid |PivotBet.696:23| :weight 3 :skolemid |4787| :pattern ( (PivotBetreeSpec.__default.RepivotOps (Lit |r#0@@14|))) ))))
(assert  (=> true (forall ((|step#0@@6| T@U) ) (!  (=> (and (= (type |step#0@@6|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidBetreeStep#canCall| |step#0@@6|) ($Is |step#0@@6| Tclass.PivotBetreeSpec.BetreeStep))) true) :qid |PivotBet.716:29| :skolemid |4788| :pattern ( (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@6|)) ))))
(assert (forall ((|step#0@@7| T@U) ) (!  (=> (and (= (type |step#0@@7|) DatatypeTypeType) ($Is |step#0@@7| Tclass.PivotBetreeSpec.BetreeStep)) (and (=> (|PivotBetreeSpec.__default.ValidBetreeStep#requires| |step#0@@7|) true) (=> true (|PivotBetreeSpec.__default.ValidBetreeStep#requires| |step#0@@7|)))) :qid |PivotBet.716:29| :skolemid |4789| :pattern ( (|PivotBetreeSpec.__default.ValidBetreeStep#requires| |step#0@@7|)) )))
(assert  (=> true (forall ((|step#0@@8| T@U) ) (!  (=> (and (= (type |step#0@@8|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidBetreeStep#canCall| |step#0@@8|) ($Is |step#0@@8| Tclass.PivotBetreeSpec.BetreeStep))) (and (and (=> (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@8|) (let ((|q#0@@19| (PivotBetreeSpec.BetreeStep.q |step#0@@8|))) (|PivotBetreeSpec.__default.ValidQuery#canCall| |q#0@@19|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@8|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@8|) (let ((|sq#0@@3| (PivotBetreeSpec.BetreeStep.sq |step#0@@8|))) (|PivotBetreeSpec.__default.ValidSuccQuery#canCall| |sq#0@@3|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@8|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@8|) (let ((|ins#0@@11| (PivotBetreeSpec.BetreeStep.ins |step#0@@8|))) (|PivotBetreeSpec.__default.ValidInsertion#canCall| |ins#0@@11|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@8|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@8|) (let ((|flush#0| (PivotBetreeSpec.BetreeStep.flush |step#0@@8|))) (|PivotBetreeSpec.__default.ValidFlush#canCall| |flush#0|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@8|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@8|) (let ((|growth#0@@11| (PivotBetreeSpec.BetreeStep.growth |step#0@@8|))) (|PivotBetreeSpec.__default.ValidGrow#canCall| |growth#0@@11|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@8|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@8|) (let ((|fusion#0| (PivotBetreeSpec.BetreeStep.fusion |step#0@@8|))) (|PivotBetreeSpec.__default.ValidSplit#canCall| |fusion#0|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@8|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@8|) (let ((|fusion#1| (PivotBetreeSpec.BetreeStep.fusion |step#0@@8|))) (|PivotBetreeSpec.__default.ValidMerge#canCall| |fusion#1|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@8|)) (let ((|r#0@@15| (PivotBetreeSpec.BetreeStep.repivot |step#0@@8|))) (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@15|)))))))))))))))) (and (=> (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@8|) (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@8|) (let ((|q#1| (PivotBetreeSpec.BetreeStep.q |step#0@@8|))) (PivotBetreeSpec.__default.ValidQuery |q#1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@8|) (let ((|sq#1| (PivotBetreeSpec.BetreeStep.sq |step#0@@8|))) (PivotBetreeSpec.__default.ValidSuccQuery |sq#1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@8|) (let ((|ins#1| (PivotBetreeSpec.BetreeStep.ins |step#0@@8|))) (PivotBetreeSpec.__default.ValidInsertion |ins#1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@8|) (let ((|flush#1| (PivotBetreeSpec.BetreeStep.flush |step#0@@8|))) (PivotBetreeSpec.__default.ValidFlush |flush#1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@8|) (let ((|growth#1| (PivotBetreeSpec.BetreeStep.growth |step#0@@8|))) (PivotBetreeSpec.__default.ValidGrow |growth#1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@8|) (let ((|fusion#2| (PivotBetreeSpec.BetreeStep.fusion |step#0@@8|))) (PivotBetreeSpec.__default.ValidSplit |fusion#2|)) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@8|) (let ((|fusion#3| (PivotBetreeSpec.BetreeStep.fusion |step#0@@8|))) (PivotBetreeSpec.__default.ValidMerge |fusion#3|)) (let ((|r#1@@3| (PivotBetreeSpec.BetreeStep.repivot |step#0@@8|))) (PivotBetreeSpec.__default.ValidRepivot |r#1@@3|)))))))))) (=> (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@8|) (let ((|q#1@@0| (PivotBetreeSpec.BetreeStep.q |step#0@@8|))) (PivotBetreeSpec.__default.ValidQuery |q#1@@0|)) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@8|) (let ((|sq#1@@0| (PivotBetreeSpec.BetreeStep.sq |step#0@@8|))) (PivotBetreeSpec.__default.ValidSuccQuery |sq#1@@0|)) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@8|) (let ((|ins#1@@0| (PivotBetreeSpec.BetreeStep.ins |step#0@@8|))) (PivotBetreeSpec.__default.ValidInsertion |ins#1@@0|)) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@8|) (let ((|flush#1@@0| (PivotBetreeSpec.BetreeStep.flush |step#0@@8|))) (PivotBetreeSpec.__default.ValidFlush |flush#1@@0|)) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@8|) (let ((|growth#1@@0| (PivotBetreeSpec.BetreeStep.growth |step#0@@8|))) (PivotBetreeSpec.__default.ValidGrow |growth#1@@0|)) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@8|) (let ((|fusion#2@@0| (PivotBetreeSpec.BetreeStep.fusion |step#0@@8|))) (PivotBetreeSpec.__default.ValidSplit |fusion#2@@0|)) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@8|) (let ((|fusion#3@@0| (PivotBetreeSpec.BetreeStep.fusion |step#0@@8|))) (PivotBetreeSpec.__default.ValidMerge |fusion#3@@0|)) (let ((|r#1@@4| (PivotBetreeSpec.BetreeStep.repivot |step#0@@8|))) (PivotBetreeSpec.__default.ValidRepivot |r#1@@4|))))))))) (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@8|))))) :qid |PivotBet.716:29| :skolemid |4790| :pattern ( (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@8|)) ))))
(assert  (=> true (forall ((|step#0@@9| T@U) ) (!  (=> (and (= (type |step#0@@9|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.ValidBetreeStep#canCall| (Lit |step#0@@9|)) ($Is |step#0@@9| Tclass.PivotBetreeSpec.BetreeStep))) (and (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@9|))))) (let ((|q#2| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@9|))))) (|PivotBetreeSpec.__default.ValidQuery#canCall| |q#2|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@9|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@9|))))) (let ((|sq#2| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@9|))))) (|PivotBetreeSpec.__default.ValidSuccQuery#canCall| |sq#2|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@9|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@9|))))) (let ((|ins#2| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@9|))))) (|PivotBetreeSpec.__default.ValidInsertion#canCall| |ins#2|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@9|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@9|))))) (let ((|flush#2| (Lit (PivotBetreeSpec.BetreeStep.flush (Lit |step#0@@9|))))) (|PivotBetreeSpec.__default.ValidFlush#canCall| |flush#2|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@9|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@9|))))) (let ((|growth#2| (Lit (PivotBetreeSpec.BetreeStep.growth (Lit |step#0@@9|))))) (|PivotBetreeSpec.__default.ValidGrow#canCall| |growth#2|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@9|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@9|))))) (let ((|fusion#4| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@9|))))) (|PivotBetreeSpec.__default.ValidSplit#canCall| |fusion#4|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@9|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@9|))))) (let ((|fusion#5| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@9|))))) (|PivotBetreeSpec.__default.ValidMerge#canCall| |fusion#5|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@9|)))))) (let ((|r#2@@0| (Lit (PivotBetreeSpec.BetreeStep.repivot (Lit |step#0@@9|))))) (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#2@@0|)))))))))))))))) (and (=> (PivotBetreeSpec.__default.ValidBetreeStep (Lit |step#0@@9|)) (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@9|)) (U_2_bool (let ((|q#3| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidQuery |q#3|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@9|)) (U_2_bool (let ((|sq#3| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidSuccQuery |sq#3|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@9|)) (U_2_bool (let ((|ins#3| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidInsertion |ins#3|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@9|)) (U_2_bool (let ((|flush#3| (Lit (PivotBetreeSpec.BetreeStep.flush (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidFlush |flush#3|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@9|)) (U_2_bool (let ((|growth#3| (Lit (PivotBetreeSpec.BetreeStep.growth (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidGrow |growth#3|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@9|)) (U_2_bool (let ((|fusion#6| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidSplit |fusion#6|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@9|)) (U_2_bool (let ((|fusion#7| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidMerge |fusion#7|))))) (U_2_bool (let ((|r#3| (Lit (PivotBetreeSpec.BetreeStep.repivot (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidRepivot |r#3|))))))))))))) (=> (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@9|)) (U_2_bool (let ((|q#3@@0| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidQuery |q#3@@0|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@9|)) (U_2_bool (let ((|sq#3@@0| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidSuccQuery |sq#3@@0|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@9|)) (U_2_bool (let ((|ins#3@@0| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidInsertion |ins#3@@0|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@9|)) (U_2_bool (let ((|flush#3@@0| (Lit (PivotBetreeSpec.BetreeStep.flush (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidFlush |flush#3@@0|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@9|)) (U_2_bool (let ((|growth#3@@0| (Lit (PivotBetreeSpec.BetreeStep.growth (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidGrow |growth#3@@0|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@9|)) (U_2_bool (let ((|fusion#6@@0| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidSplit |fusion#6@@0|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@9|)) (U_2_bool (let ((|fusion#7@@0| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidMerge |fusion#7@@0|))))) (U_2_bool (let ((|r#3@@0| (Lit (PivotBetreeSpec.BetreeStep.repivot (Lit |step#0@@9|))))) (Lit (bool_2_U (PivotBetreeSpec.__default.ValidRepivot |r#3@@0|)))))))))))) (PivotBetreeSpec.__default.ValidBetreeStep (Lit |step#0@@9|)))))) :qid |PivotBet.716:29| :weight 3 :skolemid |4791| :pattern ( (PivotBetreeSpec.__default.ValidBetreeStep (Lit |step#0@@9|))) ))))
(assert (forall ((arg0@@677 T@U) ) (! (= (type (PivotBetreeSpec.__default.BetreeStepReads arg0@@677)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.BetreeStepReads| :pattern ( (PivotBetreeSpec.__default.BetreeStepReads arg0@@677)) )))
(assert  (=> true (forall ((|step#0@@10| T@U) ) (!  (=> (and (= (type |step#0@@10|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BetreeStepReads#canCall| |step#0@@10|) (and ($Is |step#0@@10| Tclass.PivotBetreeSpec.BetreeStep) (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@10|)))) ($Is (PivotBetreeSpec.__default.BetreeStepReads |step#0@@10|) (TSeq Tclass.PivotBetreeGraph.ReadOp))) :qid |PivotBet.730:28| :skolemid |4792| :pattern ( (PivotBetreeSpec.__default.BetreeStepReads |step#0@@10|)) ))))
(assert (forall ((|step#0@@11| T@U) ) (!  (=> (and (= (type |step#0@@11|) DatatypeTypeType) ($Is |step#0@@11| Tclass.PivotBetreeSpec.BetreeStep)) (and (=> (|PivotBetreeSpec.__default.BetreeStepReads#requires| |step#0@@11|) (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@11|)) (=> (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@11|) (|PivotBetreeSpec.__default.BetreeStepReads#requires| |step#0@@11|)))) :qid |PivotBet.730:28| :skolemid |4793| :pattern ( (|PivotBetreeSpec.__default.BetreeStepReads#requires| |step#0@@11|)) )))
(assert  (=> true (forall ((|step#0@@12| T@U) ) (!  (=> (and (= (type |step#0@@12|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BetreeStepReads#canCall| |step#0@@12|) (and ($Is |step#0@@12| Tclass.PivotBetreeSpec.BetreeStep) (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@12|)))) (and (and (=> (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@12|) (let ((|q#0@@20| (PivotBetreeSpec.BetreeStep.q |step#0@@12|))) (|PivotBetreeSpec.__default.QueryReads#canCall| |q#0@@20|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@12|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@12|) (let ((|sq#0@@4| (PivotBetreeSpec.BetreeStep.sq |step#0@@12|))) (|PivotBetreeSpec.__default.SuccQueryReads#canCall| |sq#0@@4|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@12|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@12|) (let ((|ins#0@@12| (PivotBetreeSpec.BetreeStep.ins |step#0@@12|))) (|PivotBetreeSpec.__default.InsertionReads#canCall| |ins#0@@12|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@12|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@12|) (let ((|flush#0@@0| (PivotBetreeSpec.BetreeStep.flush |step#0@@12|))) (|PivotBetreeSpec.__default.FlushReads#canCall| |flush#0@@0|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@12|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@12|) (let ((|growth#0@@12| (PivotBetreeSpec.BetreeStep.growth |step#0@@12|))) (|PivotBetreeSpec.__default.GrowReads#canCall| |growth#0@@12|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@12|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@12|) (let ((|fusion#0@@0| (PivotBetreeSpec.BetreeStep.fusion |step#0@@12|))) (|PivotBetreeSpec.__default.SplitReads#canCall| |fusion#0@@0|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@12|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@12|) (let ((|fusion#1@@0| (PivotBetreeSpec.BetreeStep.fusion |step#0@@12|))) (|PivotBetreeSpec.__default.MergeReads#canCall| |fusion#1@@0|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@12|)) (let ((|r#0@@16| (PivotBetreeSpec.BetreeStep.repivot |step#0@@12|))) (|PivotBetreeSpec.__default.RepivotReads#canCall| |r#0@@16|)))))))))))))))) (= (PivotBetreeSpec.__default.BetreeStepReads |step#0@@12|) (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@12|) (let ((|q#1@@1| (PivotBetreeSpec.BetreeStep.q |step#0@@12|))) (PivotBetreeSpec.__default.QueryReads |q#1@@1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@12|) (let ((|sq#1@@1| (PivotBetreeSpec.BetreeStep.sq |step#0@@12|))) (PivotBetreeSpec.__default.SuccQueryReads |sq#1@@1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@12|) (let ((|ins#1@@1| (PivotBetreeSpec.BetreeStep.ins |step#0@@12|))) (PivotBetreeSpec.__default.InsertionReads |ins#1@@1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@12|) (let ((|flush#1@@1| (PivotBetreeSpec.BetreeStep.flush |step#0@@12|))) (PivotBetreeSpec.__default.FlushReads |flush#1@@1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@12|) (let ((|growth#1@@1| (PivotBetreeSpec.BetreeStep.growth |step#0@@12|))) (PivotBetreeSpec.__default.GrowReads |growth#1@@1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@12|) (let ((|fusion#2@@1| (PivotBetreeSpec.BetreeStep.fusion |step#0@@12|))) (PivotBetreeSpec.__default.SplitReads |fusion#2@@1|)) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@12|) (let ((|fusion#3@@1| (PivotBetreeSpec.BetreeStep.fusion |step#0@@12|))) (PivotBetreeSpec.__default.MergeReads |fusion#3@@1|)) (let ((|r#1@@5| (PivotBetreeSpec.BetreeStep.repivot |step#0@@12|))) (PivotBetreeSpec.__default.RepivotReads |r#1@@5|)))))))))))) :qid |PivotBet.730:28| :skolemid |4794| :pattern ( (PivotBetreeSpec.__default.BetreeStepReads |step#0@@12|)) ))))
(assert  (=> true (forall ((|step#0@@13| T@U) ) (!  (=> (and (= (type |step#0@@13|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BetreeStepReads#canCall| (Lit |step#0@@13|)) (and ($Is |step#0@@13| Tclass.PivotBetreeSpec.BetreeStep) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidBetreeStep (Lit |step#0@@13|)))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@13|))))) (let ((|q#2@@0| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@13|))))) (|PivotBetreeSpec.__default.QueryReads#canCall| |q#2@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@13|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@13|))))) (let ((|sq#2@@0| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@13|))))) (|PivotBetreeSpec.__default.SuccQueryReads#canCall| |sq#2@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@13|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@13|))))) (let ((|ins#2@@0| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@13|))))) (|PivotBetreeSpec.__default.InsertionReads#canCall| |ins#2@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@13|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@13|))))) (let ((|flush#2@@0| (Lit (PivotBetreeSpec.BetreeStep.flush (Lit |step#0@@13|))))) (|PivotBetreeSpec.__default.FlushReads#canCall| |flush#2@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@13|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@13|))))) (let ((|growth#2@@0| (Lit (PivotBetreeSpec.BetreeStep.growth (Lit |step#0@@13|))))) (|PivotBetreeSpec.__default.GrowReads#canCall| |growth#2@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@13|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@13|))))) (let ((|fusion#4@@0| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@13|))))) (|PivotBetreeSpec.__default.SplitReads#canCall| |fusion#4@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@13|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@13|))))) (let ((|fusion#5@@0| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@13|))))) (|PivotBetreeSpec.__default.MergeReads#canCall| |fusion#5@@0|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@13|)))))) (let ((|r#2@@1| (Lit (PivotBetreeSpec.BetreeStep.repivot (Lit |step#0@@13|))))) (|PivotBetreeSpec.__default.RepivotReads#canCall| |r#2@@1|)))))))))))))))) (= (PivotBetreeSpec.__default.BetreeStepReads (Lit |step#0@@13|)) (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@13|)) (let ((|q#3@@1| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@13|))))) (Lit (PivotBetreeSpec.__default.QueryReads |q#3@@1|))) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@13|)) (let ((|sq#3@@1| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@13|))))) (Lit (PivotBetreeSpec.__default.SuccQueryReads |sq#3@@1|))) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@13|)) (let ((|ins#3@@1| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@13|))))) (Lit (PivotBetreeSpec.__default.InsertionReads |ins#3@@1|))) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@13|)) (let ((|flush#3@@1| (Lit (PivotBetreeSpec.BetreeStep.flush (Lit |step#0@@13|))))) (Lit (PivotBetreeSpec.__default.FlushReads |flush#3@@1|))) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@13|)) (let ((|growth#3@@1| (Lit (PivotBetreeSpec.BetreeStep.growth (Lit |step#0@@13|))))) (Lit (PivotBetreeSpec.__default.GrowReads |growth#3@@1|))) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@13|)) (let ((|fusion#6@@1| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@13|))))) (Lit (PivotBetreeSpec.__default.SplitReads |fusion#6@@1|))) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@13|)) (let ((|fusion#7@@1| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@13|))))) (Lit (PivotBetreeSpec.__default.MergeReads |fusion#7@@1|))) (let ((|r#3@@1| (Lit (PivotBetreeSpec.BetreeStep.repivot (Lit |step#0@@13|))))) (Lit (PivotBetreeSpec.__default.RepivotReads |r#3@@1|))))))))))))) :qid |PivotBet.730:28| :weight 3 :skolemid |4795| :pattern ( (PivotBetreeSpec.__default.BetreeStepReads (Lit |step#0@@13|))) ))))
(assert (forall ((arg0@@678 T@U) ) (! (= (type (PivotBetreeSpec.__default.BetreeStepOps arg0@@678)) (SeqType BoxType)) :qid |funType:PivotBetreeSpec.__default.BetreeStepOps| :pattern ( (PivotBetreeSpec.__default.BetreeStepOps arg0@@678)) )))
(assert  (=> true (forall ((|step#0@@14| T@U) ) (!  (=> (and (= (type |step#0@@14|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BetreeStepOps#canCall| |step#0@@14|) (and ($Is |step#0@@14| Tclass.PivotBetreeSpec.BetreeStep) (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@14|)))) ($Is (PivotBetreeSpec.__default.BetreeStepOps |step#0@@14|) (TSeq Tclass.PivotBetreeGraph.Op))) :qid |PivotBet.745:26| :skolemid |4796| :pattern ( (PivotBetreeSpec.__default.BetreeStepOps |step#0@@14|)) ))))
(assert (forall ((|step#0@@15| T@U) ) (!  (=> (and (= (type |step#0@@15|) DatatypeTypeType) ($Is |step#0@@15| Tclass.PivotBetreeSpec.BetreeStep)) (and (=> (|PivotBetreeSpec.__default.BetreeStepOps#requires| |step#0@@15|) (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@15|)) (=> (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@15|) (|PivotBetreeSpec.__default.BetreeStepOps#requires| |step#0@@15|)))) :qid |PivotBet.745:26| :skolemid |4797| :pattern ( (|PivotBetreeSpec.__default.BetreeStepOps#requires| |step#0@@15|)) )))
(assert  (=> true (forall ((|step#0@@16| T@U) ) (!  (=> (and (= (type |step#0@@16|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BetreeStepOps#canCall| |step#0@@16|) (and ($Is |step#0@@16| Tclass.PivotBetreeSpec.BetreeStep) (PivotBetreeSpec.__default.ValidBetreeStep |step#0@@16|)))) (and (and (=> (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@16|) (let ((|q#0@@21| (PivotBetreeSpec.BetreeStep.q |step#0@@16|))) (|PivotBetreeSpec.__default.QueryOps#canCall| |q#0@@21|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@16|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@16|) (let ((|sq#0@@5| (PivotBetreeSpec.BetreeStep.sq |step#0@@16|))) (|PivotBetreeSpec.__default.SuccQueryOps#canCall| |sq#0@@5|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@16|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@16|) (let ((|ins#0@@13| (PivotBetreeSpec.BetreeStep.ins |step#0@@16|))) (|PivotBetreeSpec.__default.InsertionOps#canCall| |ins#0@@13|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@16|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@16|) (let ((|flush#0@@1| (PivotBetreeSpec.BetreeStep.flush |step#0@@16|))) (|PivotBetreeSpec.__default.FlushOps#canCall| |flush#0@@1|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@16|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@16|) (let ((|growth#0@@13| (PivotBetreeSpec.BetreeStep.growth |step#0@@16|))) (|PivotBetreeSpec.__default.GrowOps#canCall| |growth#0@@13|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@16|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@16|) (let ((|fusion#0@@1| (PivotBetreeSpec.BetreeStep.fusion |step#0@@16|))) (|PivotBetreeSpec.__default.SplitOps#canCall| |fusion#0@@1|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@16|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@16|) (let ((|fusion#1@@1| (PivotBetreeSpec.BetreeStep.fusion |step#0@@16|))) (|PivotBetreeSpec.__default.MergeOps#canCall| |fusion#1@@1|))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@16|)) (let ((|r#0@@17| (PivotBetreeSpec.BetreeStep.repivot |step#0@@16|))) (|PivotBetreeSpec.__default.RepivotOps#canCall| |r#0@@17|)))))))))))))))) (= (PivotBetreeSpec.__default.BetreeStepOps |step#0@@16|) (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@16|) (let ((|q#1@@2| (PivotBetreeSpec.BetreeStep.q |step#0@@16|))) (PivotBetreeSpec.__default.QueryOps |q#1@@2|)) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@16|) (let ((|sq#1@@2| (PivotBetreeSpec.BetreeStep.sq |step#0@@16|))) (PivotBetreeSpec.__default.SuccQueryOps |sq#1@@2|)) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@16|) (let ((|ins#1@@2| (PivotBetreeSpec.BetreeStep.ins |step#0@@16|))) (PivotBetreeSpec.__default.InsertionOps |ins#1@@2|)) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@16|) (let ((|flush#1@@2| (PivotBetreeSpec.BetreeStep.flush |step#0@@16|))) (PivotBetreeSpec.__default.FlushOps |flush#1@@2|)) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@16|) (let ((|growth#1@@2| (PivotBetreeSpec.BetreeStep.growth |step#0@@16|))) (PivotBetreeSpec.__default.GrowOps |growth#1@@2|)) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@16|) (let ((|fusion#2@@2| (PivotBetreeSpec.BetreeStep.fusion |step#0@@16|))) (PivotBetreeSpec.__default.SplitOps |fusion#2@@2|)) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@16|) (let ((|fusion#3@@2| (PivotBetreeSpec.BetreeStep.fusion |step#0@@16|))) (PivotBetreeSpec.__default.MergeOps |fusion#3@@2|)) (let ((|r#1@@6| (PivotBetreeSpec.BetreeStep.repivot |step#0@@16|))) (PivotBetreeSpec.__default.RepivotOps |r#1@@6|)))))))))))) :qid |PivotBet.745:26| :skolemid |4798| :pattern ( (PivotBetreeSpec.__default.BetreeStepOps |step#0@@16|)) ))))
(assert  (=> true (forall ((|step#0@@17| T@U) ) (!  (=> (and (= (type |step#0@@17|) DatatypeTypeType) (or (|PivotBetreeSpec.__default.BetreeStepOps#canCall| (Lit |step#0@@17|)) (and ($Is |step#0@@17| Tclass.PivotBetreeSpec.BetreeStep) (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.__default.ValidBetreeStep (Lit |step#0@@17|)))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@17|))))) (let ((|q#2@@1| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@17|))))) (|PivotBetreeSpec.__default.QueryOps#canCall| |q#2@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@17|))))) (let ((|sq#2@@1| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@17|))))) (|PivotBetreeSpec.__default.SuccQueryOps#canCall| |sq#2@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@17|))))) (let ((|ins#2@@1| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@17|))))) (|PivotBetreeSpec.__default.InsertionOps#canCall| |ins#2@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@17|))))) (let ((|flush#2@@1| (Lit (PivotBetreeSpec.BetreeStep.flush (Lit |step#0@@17|))))) (|PivotBetreeSpec.__default.FlushOps#canCall| |flush#2@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@17|))))) (let ((|growth#2@@1| (Lit (PivotBetreeSpec.BetreeStep.growth (Lit |step#0@@17|))))) (|PivotBetreeSpec.__default.GrowOps#canCall| |growth#2@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@17|))))) (let ((|fusion#4@@1| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@17|))))) (|PivotBetreeSpec.__default.SplitOps#canCall| |fusion#4@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@17|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@17|))))) (let ((|fusion#5@@1| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@17|))))) (|PivotBetreeSpec.__default.MergeOps#canCall| |fusion#5@@1|))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@17|)))))) (let ((|r#2@@2| (Lit (PivotBetreeSpec.BetreeStep.repivot (Lit |step#0@@17|))))) (|PivotBetreeSpec.__default.RepivotOps#canCall| |r#2@@2|)))))))))))))))) (= (PivotBetreeSpec.__default.BetreeStepOps (Lit |step#0@@17|)) (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@17|)) (let ((|q#3@@2| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@17|))))) (Lit (PivotBetreeSpec.__default.QueryOps |q#3@@2|))) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@17|)) (let ((|sq#3@@2| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@17|))))) (Lit (PivotBetreeSpec.__default.SuccQueryOps |sq#3@@2|))) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@17|)) (let ((|ins#3@@2| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@17|))))) (Lit (PivotBetreeSpec.__default.InsertionOps |ins#3@@2|))) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@17|)) (let ((|flush#3@@2| (Lit (PivotBetreeSpec.BetreeStep.flush (Lit |step#0@@17|))))) (Lit (PivotBetreeSpec.__default.FlushOps |flush#3@@2|))) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@17|)) (let ((|growth#3@@2| (Lit (PivotBetreeSpec.BetreeStep.growth (Lit |step#0@@17|))))) (Lit (PivotBetreeSpec.__default.GrowOps |growth#3@@2|))) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@17|)) (let ((|fusion#6@@2| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@17|))))) (Lit (PivotBetreeSpec.__default.SplitOps |fusion#6@@2|))) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@17|)) (let ((|fusion#7@@2| (Lit (PivotBetreeSpec.BetreeStep.fusion (Lit |step#0@@17|))))) (Lit (PivotBetreeSpec.__default.MergeOps |fusion#7@@2|))) (let ((|r#3@@2| (Lit (PivotBetreeSpec.BetreeStep.repivot (Lit |step#0@@17|))))) (Lit (PivotBetreeSpec.__default.RepivotOps |r#3@@2|))))))))))))) :qid |PivotBet.745:26| :weight 3 :skolemid |4799| :pattern ( (PivotBetreeSpec.__default.BetreeStepOps (Lit |step#0@@17|))) ))))
(assert  (=> true (forall ((|step#0@@18| T@U) (|uiop#0@@25| T@U) ) (!  (=> (and (and (= (type |step#0@@18|) DatatypeTypeType) (= (type |uiop#0@@25|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.BetreeStepUI#canCall| |step#0@@18| |uiop#0@@25|) (and ($Is |step#0@@18| Tclass.PivotBetreeSpec.BetreeStep) ($Is |uiop#0@@25| Tclass.UI.Op)))) true) :qid |PivotBet.760:26| :skolemid |4800| :pattern ( (PivotBetreeSpec.__default.BetreeStepUI |step#0@@18| |uiop#0@@25|)) ))))
(assert (forall ((|step#0@@19| T@U) (|uiop#0@@26| T@U) ) (!  (=> (and (and (= (type |step#0@@19|) DatatypeTypeType) (= (type |uiop#0@@26|) DatatypeTypeType)) (and ($Is |step#0@@19| Tclass.PivotBetreeSpec.BetreeStep) ($Is |uiop#0@@26| Tclass.UI.Op))) (and (=> (|PivotBetreeSpec.__default.BetreeStepUI#requires| |step#0@@19| |uiop#0@@26|) true) (=> true (|PivotBetreeSpec.__default.BetreeStepUI#requires| |step#0@@19| |uiop#0@@26|)))) :qid |PivotBet.760:26| :skolemid |4801| :pattern ( (|PivotBetreeSpec.__default.BetreeStepUI#requires| |step#0@@19| |uiop#0@@26|)) )))
(assert  (=> true (forall ((|step#0@@20| T@U) (|uiop#0@@27| T@U) ) (!  (=> (and (and (= (type |step#0@@20|) DatatypeTypeType) (= (type |uiop#0@@27|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.BetreeStepUI#canCall| |step#0@@20| |uiop#0@@27|) (and ($Is |step#0@@20| Tclass.PivotBetreeSpec.BetreeStep) ($Is |uiop#0@@27| Tclass.UI.Op)))) (and (and (=> (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@20|) (let ((|q#0@@22| (PivotBetreeSpec.BetreeStep.q |step#0@@20|))) (and (|$IsA#UI.Op| |uiop#0@@27|) (and (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@22|) (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#0@@22|))))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@20|)) (and (=> (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@20|) (let ((|sq#0@@6| (PivotBetreeSpec.BetreeStep.sq |step#0@@20|))) (and (|$IsA#UI.Op| |uiop#0@@27|) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@6|) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@6|)) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#0@@6|))))) (=> (not (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@20|)) (=> (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@20|) (let ((|ins#0@@14| (PivotBetreeSpec.BetreeStep.ins |step#0@@20|))) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@14|) (=> (ValueMessage.Message.Define_q (PivotBetreeSpec.MessageInsertion.msg |ins#0@@14|)) (and (|$IsA#UI.Op| |uiop#0@@27|) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@14|) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#0@@14|))))))))))) (and (=> (PivotBetreeSpec.__default.BetreeStepUI |step#0@@20| |uiop#0@@27|) (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@20|) (let ((|q#1@@3| (PivotBetreeSpec.BetreeStep.q |step#0@@20|))) (|UI.Op#Equal| |uiop#0@@27| (|#UI.Op.GetOp| (PivotBetreeSpec.LookupQuery.key |q#1@@3|) (PivotBetreeSpec.LookupQuery.value |q#1@@3|)))) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@20|) (let ((|sq#1@@3| (PivotBetreeSpec.BetreeStep.sq |step#0@@20|))) (|UI.Op#Equal| |uiop#0@@27| (|#UI.Op.SuccOp| (PivotBetreeSpec.SuccQuery.start |sq#1@@3|) (PivotBetreeSpec.SuccQuery.results |sq#1@@3|) (PivotBetreeSpec.SuccQuery.end |sq#1@@3|)))) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@20|) (let ((|ins#1@@3| (PivotBetreeSpec.BetreeStep.ins |step#0@@20|))) (and (ValueMessage.Message.Define_q (PivotBetreeSpec.MessageInsertion.msg |ins#1@@3|)) (|UI.Op#Equal| |uiop#0@@27| (|#UI.Op.PutOp| (PivotBetreeSpec.MessageInsertion.key |ins#1@@3|) (ValueMessage.Message.value (PivotBetreeSpec.MessageInsertion.msg |ins#1@@3|)))))) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@20|) (UI.Op.NoOp_q |uiop#0@@27|) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@20|) (UI.Op.NoOp_q |uiop#0@@27|) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@20|) (UI.Op.NoOp_q |uiop#0@@27|) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@20|) (UI.Op.NoOp_q |uiop#0@@27|) (UI.Op.NoOp_q |uiop#0@@27|))))))))) (=> (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q |step#0@@20|) (let ((|q#1@@4| (PivotBetreeSpec.BetreeStep.q |step#0@@20|))) (|UI.Op#Equal| |uiop#0@@27| (|#UI.Op.GetOp| (PivotBetreeSpec.LookupQuery.key |q#1@@4|) (PivotBetreeSpec.LookupQuery.value |q#1@@4|)))) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q |step#0@@20|) (let ((|sq#1@@4| (PivotBetreeSpec.BetreeStep.sq |step#0@@20|))) (|UI.Op#Equal| |uiop#0@@27| (|#UI.Op.SuccOp| (PivotBetreeSpec.SuccQuery.start |sq#1@@4|) (PivotBetreeSpec.SuccQuery.results |sq#1@@4|) (PivotBetreeSpec.SuccQuery.end |sq#1@@4|)))) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q |step#0@@20|) (let ((|ins#1@@4| (PivotBetreeSpec.BetreeStep.ins |step#0@@20|))) (and (ValueMessage.Message.Define_q (PivotBetreeSpec.MessageInsertion.msg |ins#1@@4|)) (|UI.Op#Equal| |uiop#0@@27| (|#UI.Op.PutOp| (PivotBetreeSpec.MessageInsertion.key |ins#1@@4|) (ValueMessage.Message.value (PivotBetreeSpec.MessageInsertion.msg |ins#1@@4|)))))) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q |step#0@@20|) (UI.Op.NoOp_q |uiop#0@@27|) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q |step#0@@20|) (UI.Op.NoOp_q |uiop#0@@27|) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q |step#0@@20|) (UI.Op.NoOp_q |uiop#0@@27|) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q |step#0@@20|) (UI.Op.NoOp_q |uiop#0@@27|) (UI.Op.NoOp_q |uiop#0@@27|)))))))) (PivotBetreeSpec.__default.BetreeStepUI |step#0@@20| |uiop#0@@27|))))) :qid |PivotBet.760:26| :skolemid |4802| :pattern ( (PivotBetreeSpec.__default.BetreeStepUI |step#0@@20| |uiop#0@@27|)) ))))
(assert  (=> true (forall ((|step#0@@21| T@U) (|uiop#0@@28| T@U) ) (!  (=> (and (and (= (type |step#0@@21|) DatatypeTypeType) (= (type |uiop#0@@28|) DatatypeTypeType)) (or (|PivotBetreeSpec.__default.BetreeStepUI#canCall| (Lit |step#0@@21|) (Lit |uiop#0@@28|)) (and ($Is |step#0@@21| Tclass.PivotBetreeSpec.BetreeStep) ($Is |uiop#0@@28| Tclass.UI.Op)))) (and (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@21|))))) (let ((|q#2@@2| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@21|))))) (and (|$IsA#UI.Op| (Lit |uiop#0@@28|)) (and (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#2@@2|) (PivotBetreeSpec.LookupQuery.LookupQuery_q |q#2@@2|))))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@21|)))))) (and (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@21|))))) (let ((|sq#2@@2| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@21|))))) (and (|$IsA#UI.Op| (Lit |uiop#0@@28|)) (and (and (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#2@@2|) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#2@@2|)) (PivotBetreeSpec.SuccQuery.SuccQuery_q |sq#2@@2|))))) (=> (not (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@21|)))))) (=> (U_2_bool (Lit (bool_2_U (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@21|))))) (let ((|ins#2@@2| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@21|))))) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#2@@2|) (=> (ValueMessage.Message.Define_q (PivotBetreeSpec.MessageInsertion.msg |ins#2@@2|)) (and (|$IsA#UI.Op| (Lit |uiop#0@@28|)) (and (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#2@@2|) (PivotBetreeSpec.MessageInsertion.MessageInsertion_q |ins#2@@2|))))))))))) (and (=> (PivotBetreeSpec.__default.BetreeStepUI (Lit |step#0@@21|) (Lit |uiop#0@@28|)) (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@21|)) (let ((|q#3@@3| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@21|))))) (|UI.Op#Equal| |uiop#0@@28| (|#UI.Op.GetOp| (Lit (PivotBetreeSpec.LookupQuery.key |q#3@@3|)) (Lit (PivotBetreeSpec.LookupQuery.value |q#3@@3|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@21|)) (let ((|sq#3@@3| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@21|))))) (|UI.Op#Equal| |uiop#0@@28| (|#UI.Op.SuccOp| (Lit (PivotBetreeSpec.SuccQuery.start |sq#3@@3|)) (Lit (PivotBetreeSpec.SuccQuery.results |sq#3@@3|)) (Lit (PivotBetreeSpec.SuccQuery.end |sq#3@@3|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@21|)) (let ((|ins#3@@3| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@21|))))) (and (ValueMessage.Message.Define_q (Lit (PivotBetreeSpec.MessageInsertion.msg |ins#3@@3|))) (|UI.Op#Equal| |uiop#0@@28| (|#UI.Op.PutOp| (Lit (PivotBetreeSpec.MessageInsertion.key |ins#3@@3|)) (Lit (ValueMessage.Message.value (Lit (PivotBetreeSpec.MessageInsertion.msg |ins#3@@3|)))))))) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@21|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@21|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@21|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@21|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|))))) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|))))))))))))) (=> (ite (PivotBetreeSpec.BetreeStep.BetreeQuery_q (Lit |step#0@@21|)) (let ((|q#3@@4| (Lit (PivotBetreeSpec.BetreeStep.q (Lit |step#0@@21|))))) (|UI.Op#Equal| |uiop#0@@28| (|#UI.Op.GetOp| (Lit (PivotBetreeSpec.LookupQuery.key |q#3@@4|)) (Lit (PivotBetreeSpec.LookupQuery.value |q#3@@4|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeSuccQuery_q (Lit |step#0@@21|)) (let ((|sq#3@@4| (Lit (PivotBetreeSpec.BetreeStep.sq (Lit |step#0@@21|))))) (|UI.Op#Equal| |uiop#0@@28| (|#UI.Op.SuccOp| (Lit (PivotBetreeSpec.SuccQuery.start |sq#3@@4|)) (Lit (PivotBetreeSpec.SuccQuery.results |sq#3@@4|)) (Lit (PivotBetreeSpec.SuccQuery.end |sq#3@@4|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeInsert_q (Lit |step#0@@21|)) (let ((|ins#3@@4| (Lit (PivotBetreeSpec.BetreeStep.ins (Lit |step#0@@21|))))) (and (ValueMessage.Message.Define_q (Lit (PivotBetreeSpec.MessageInsertion.msg |ins#3@@4|))) (|UI.Op#Equal| |uiop#0@@28| (|#UI.Op.PutOp| (Lit (PivotBetreeSpec.MessageInsertion.key |ins#3@@4|)) (Lit (ValueMessage.Message.value (Lit (PivotBetreeSpec.MessageInsertion.msg |ins#3@@4|)))))))) (ite (PivotBetreeSpec.BetreeStep.BetreeFlush_q (Lit |step#0@@21|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeGrow_q (Lit |step#0@@21|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeSplit_q (Lit |step#0@@21|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|))))) (ite (PivotBetreeSpec.BetreeStep.BetreeMerge_q (Lit |step#0@@21|)) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|))))) (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@28|)))))))))))) (PivotBetreeSpec.__default.BetreeStepUI (Lit |step#0@@21|) (Lit |uiop#0@@28|)))))) :qid |PivotBet.760:26| :weight 3 :skolemid |4803| :pattern ( (PivotBetreeSpec.__default.BetreeStepUI (Lit |step#0@@21|) (Lit |uiop#0@@28|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@679 T@T) (arg1@@361 T@T) ) (! (= (Ctor (MapType9Type arg0@@679 arg1@@361)) 28) :qid |ctor:MapType9Type| )) (forall ((arg0@@680 T@T) (arg1@@362 T@T) ) (! (= (MapType9TypeInv0 (MapType9Type arg0@@680 arg1@@362)) arg0@@680) :qid |typeInv:MapType9TypeInv0| :pattern ( (MapType9Type arg0@@680 arg1@@362)) ))) (forall ((arg0@@681 T@T) (arg1@@363 T@T) ) (! (= (MapType9TypeInv1 (MapType9Type arg0@@681 arg1@@363)) arg1@@363) :qid |typeInv:MapType9TypeInv1| :pattern ( (MapType9Type arg0@@681 arg1@@363)) ))) (forall ((arg0@@682 T@U) (arg1@@364 T@U) (arg2@@244 T@U) ) (! (let ((aVar1@@9 (MapType9TypeInv1 (type arg0@@682)))) (= (type (MapType9Select arg0@@682 arg1@@364 arg2@@244)) aVar1@@9)) :qid |funType:MapType9Select| :pattern ( (MapType9Select arg0@@682 arg1@@364 arg2@@244)) ))) (forall ((arg0@@683 T@U) (arg1@@365 T@U) (arg2@@245 T@U) (arg3@@158 T@U) ) (! (let ((aVar1@@10 (type arg3@@158))) (let ((aVar0@@7 (type arg1@@365))) (= (type (MapType9Store arg0@@683 arg1@@365 arg2@@245 arg3@@158)) (MapType9Type aVar0@@7 aVar1@@10)))) :qid |funType:MapType9Store| :pattern ( (MapType9Store arg0@@683 arg1@@365 arg2@@245 arg3@@158)) ))) (forall ((m@@78 T@U) (x0@@54 T@U) (x1@@48 T@U) (val@@55 T@U) ) (! (let ((aVar1@@11 (MapType9TypeInv1 (type m@@78)))) (=> (= (type val@@55) aVar1@@11) (= (MapType9Select (MapType9Store m@@78 x0@@54 x1@@48 val@@55) x0@@54 x1@@48) val@@55))) :qid |mapAx0:MapType9Select| :weight 0 ))) (and (and (forall ((val@@56 T@U) (m@@79 T@U) (x0@@55 T@U) (x1@@49 T@U) (y0@@45 T@U) (y1@@41 T@U) ) (!  (or (= x0@@55 y0@@45) (= (MapType9Select (MapType9Store m@@79 x0@@55 x1@@49 val@@56) y0@@45 y1@@41) (MapType9Select m@@79 y0@@45 y1@@41))) :qid |mapAx1:MapType9Select:0| :weight 0 )) (forall ((val@@57 T@U) (m@@80 T@U) (x0@@56 T@U) (x1@@50 T@U) (y0@@46 T@U) (y1@@42 T@U) ) (!  (or (= x1@@50 y1@@42) (= (MapType9Select (MapType9Store m@@80 x0@@56 x1@@50 val@@57) y0@@46 y1@@42) (MapType9Select m@@80 y0@@46 y1@@42))) :qid |mapAx1:MapType9Select:1| :weight 0 ))) (forall ((val@@58 T@U) (m@@81 T@U) (x0@@57 T@U) (x1@@51 T@U) (y0@@47 T@U) (y1@@43 T@U) ) (!  (or true (= (MapType9Select (MapType9Store m@@81 x0@@57 x1@@51 val@@58) y0@@47 y1@@43) (MapType9Select m@@81 y0@@47 y1@@43))) :qid |mapAx2:MapType9Select| :weight 0 )))) (forall ((arg0@@684 T@U) (arg1@@366 T@U) (arg2@@246 T@U) (arg3@@159 Bool) ) (! (= (type (|lambda#0| arg0@@684 arg1@@366 arg2@@246 arg3@@159)) (MapType9Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@684 arg1@@366 arg2@@246 arg3@@159)) ))))
(assert (forall (($o@@70 T@U) ($f@@10 T@U) (|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3| Bool) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type $o@@70) refType) (= (type $f@@10) (FieldType alpha@@17))) (= (type |l#0@@1|) refType)) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@1| |l#3|) $o@@70 $f@@10))  (=> (and (not (= $o@@70 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@70) |l#2@@1|))) |l#3|)))) :qid |PivotBet.21:9| :skolemid |4804| :pattern ( (MapType9Select (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@1| |l#3|) $o@@70 $f@@10)) )))
(assert (forall ((arg0@@685 T@U) (arg1@@367 T@U) (arg2@@247 T@U) (arg3@@160 Bool) ) (! (= (type (|lambda#1| arg0@@685 arg1@@367 arg2@@247 arg3@@160)) (MapType9Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@685 arg1@@367 arg2@@247 arg3@@160)) )))
(assert (forall (($o@@71 T@U) ($f@@11 T@U) (|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@0| Bool) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type $o@@71) refType) (= (type $f@@11) (FieldType alpha@@18))) (= (type |l#0@@2|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#1| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@0|) $o@@71 $f@@11))  (=> (and (not (= $o@@71 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@71) |l#2@@2|))) |l#3@@0|)))) :qid |PivotBet.21:9| :skolemid |4805| :pattern ( (MapType9Select (|lambda#1| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@0|) $o@@71 $f@@11)) )))
(assert (forall ((arg0@@686 T@U) (arg1@@368 T@U) (arg2@@248 T@U) (arg3@@161 Bool) ) (! (= (type (|lambda#2| arg0@@686 arg1@@368 arg2@@248 arg3@@161)) (MapType9Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@686 arg1@@368 arg2@@248 arg3@@161)) )))
(assert (forall (($o@@72 T@U) ($f@@12 T@U) (|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@1| Bool) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type $o@@72) refType) (= (type $f@@12) (FieldType alpha@@19))) (= (type |l#0@@3|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#2| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@1|) $o@@72 $f@@12))  (=> (and (not (= $o@@72 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@72) |l#2@@3|))) |l#3@@1|)))) :qid |PivotBet.41:9| :skolemid |4806| :pattern ( (MapType9Select (|lambda#2| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@1|) $o@@72 $f@@12)) )))
(assert (forall ((arg0@@687 T@U) (arg1@@369 T@U) (arg2@@249 T@U) (arg3@@162 Bool) ) (! (= (type (|lambda#3| arg0@@687 arg1@@369 arg2@@249 arg3@@162)) (MapType9Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@687 arg1@@369 arg2@@249 arg3@@162)) )))
(assert (forall (($o@@73 T@U) ($f@@13 T@U) (|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type $o@@73) refType) (= (type $f@@13) (FieldType alpha@@20))) (= (type |l#0@@4|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#3| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@2|) $o@@73 $f@@13))  (=> (and (not (= $o@@73 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@73) |l#2@@4|))) |l#3@@2|)))) :qid |PivotBet.41:9| :skolemid |4807| :pattern ( (MapType9Select (|lambda#3| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@2|) $o@@73 $f@@13)) )))
(assert (forall ((arg0@@688 T@U) (arg1@@370 T@U) (arg2@@250 T@U) (arg3@@163 Bool) ) (! (= (type (|lambda#4| arg0@@688 arg1@@370 arg2@@250 arg3@@163)) (MapType9Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@688 arg1@@370 arg2@@250 arg3@@163)) )))
(assert (forall (($o@@74 T@U) ($f@@14 T@U) (|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@3| Bool) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type $o@@74) refType) (= (type $f@@14) (FieldType alpha@@21))) (= (type |l#0@@5|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#4| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@3|) $o@@74 $f@@14))  (=> (and (not (= $o@@74 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@74) |l#2@@5|))) |l#3@@3|)))) :qid |PivotBet.83:9| :skolemid |4808| :pattern ( (MapType9Select (|lambda#4| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@3|) $o@@74 $f@@14)) )))
(assert (forall ((arg0@@689 T@U) (arg1@@371 T@U) (arg2@@251 T@U) (arg3@@164 Bool) ) (! (= (type (|lambda#5| arg0@@689 arg1@@371 arg2@@251 arg3@@164)) (MapType9Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@689 arg1@@371 arg2@@251 arg3@@164)) )))
(assert (forall (($o@@75 T@U) ($f@@15 T@U) (|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@4| Bool) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type $o@@75) refType) (= (type $f@@15) (FieldType alpha@@22))) (= (type |l#0@@6|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#5| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@4|) $o@@75 $f@@15))  (=> (and (not (= $o@@75 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@75) |l#2@@6|))) |l#3@@4|)))) :qid |PivotBet.83:9| :skolemid |4809| :pattern ( (MapType9Select (|lambda#5| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@4|) $o@@75 $f@@15)) )))
(assert (forall ((arg0@@690 T@U) (arg1@@372 T@U) (arg2@@252 T@U) (arg3@@165 Bool) ) (! (= (type (|lambda#6| arg0@@690 arg1@@372 arg2@@252 arg3@@165)) (MapType9Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@690 arg1@@372 arg2@@252 arg3@@165)) )))
(assert (forall (($o@@76 T@U) ($f@@16 T@U) (|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type $o@@76) refType) (= (type $f@@16) (FieldType alpha@@23))) (= (type |l#0@@7|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#6| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@5|) $o@@76 $f@@16))  (=> (and (not (= $o@@76 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@76) |l#2@@7|))) |l#3@@5|)))) :qid |PivotBet.96:9| :skolemid |4810| :pattern ( (MapType9Select (|lambda#6| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@5|) $o@@76 $f@@16)) )))
(assert (forall ((arg0@@691 T@U) (arg1@@373 T@U) (arg2@@253 T@U) (arg3@@166 Bool) ) (! (= (type (|lambda#7| arg0@@691 arg1@@373 arg2@@253 arg3@@166)) (MapType9Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@691 arg1@@373 arg2@@253 arg3@@166)) )))
(assert (forall (($o@@77 T@U) ($f@@17 T@U) (|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@6| Bool) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type $o@@77) refType) (= (type $f@@17) (FieldType alpha@@24))) (= (type |l#0@@8|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#7| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@6|) $o@@77 $f@@17))  (=> (and (not (= $o@@77 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@77) |l#2@@8|))) |l#3@@6|)))) :qid |PivotBet.96:9| :skolemid |4811| :pattern ( (MapType9Select (|lambda#7| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@6|) $o@@77 $f@@17)) )))
(assert (forall ((arg0@@692 T@U) (arg1@@374 T@U) (arg2@@254 T@U) (arg3@@167 Bool) ) (! (= (type (|lambda#8| arg0@@692 arg1@@374 arg2@@254 arg3@@167)) (MapType9Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@692 arg1@@374 arg2@@254 arg3@@167)) )))
(assert (forall (($o@@78 T@U) ($f@@18 T@U) (|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@7| Bool) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type $o@@78) refType) (= (type $f@@18) (FieldType alpha@@25))) (= (type |l#0@@9|) refType)) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#8| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@7|) $o@@78 $f@@18))  (=> (and (not (= $o@@78 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@78) |l#2@@9|))) |l#3@@7|)))) :qid |PivotBet.110:9| :skolemid |4812| :pattern ( (MapType9Select (|lambda#8| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@7|) $o@@78 $f@@18)) )))
(assert (forall ((arg0@@693 T@U) (arg1@@375 T@U) (arg2@@255 T@U) (arg3@@168 Bool) ) (! (= (type (|lambda#9| arg0@@693 arg1@@375 arg2@@255 arg3@@168)) (MapType9Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@693 arg1@@375 arg2@@255 arg3@@168)) )))
(assert (forall (($o@@79 T@U) ($f@@19 T@U) (|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@8| Bool) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type $o@@79) refType) (= (type $f@@19) (FieldType alpha@@26))) (= (type |l#0@@10|) refType)) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#9| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@8|) $o@@79 $f@@19))  (=> (and (not (= $o@@79 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@79) |l#2@@10|))) |l#3@@8|)))) :qid |PivotBet.110:9| :skolemid |4813| :pattern ( (MapType9Select (|lambda#9| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@8|) $o@@79 $f@@19)) )))
(assert (forall ((arg0@@694 T@U) (arg1@@376 T@U) (arg2@@256 T@U) (arg3@@169 Bool) ) (! (= (type (|lambda#10| arg0@@694 arg1@@376 arg2@@256 arg3@@169)) (MapType9Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@694 arg1@@376 arg2@@256 arg3@@169)) )))
(assert (forall (($o@@80 T@U) ($f@@20 T@U) (|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@9| Bool) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type $o@@80) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type |l#0@@11|) refType)) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#10| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@9|) $o@@80 $f@@20))  (=> (and (not (= $o@@80 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@80) |l#2@@11|))) |l#3@@9|)))) :qid |PivotBet.157:9| :skolemid |4814| :pattern ( (MapType9Select (|lambda#10| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@9|) $o@@80 $f@@20)) )))
(assert (forall ((arg0@@695 T@U) (arg1@@377 T@U) (arg2@@257 T@U) (arg3@@170 Bool) ) (! (= (type (|lambda#11| arg0@@695 arg1@@377 arg2@@257 arg3@@170)) (MapType9Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@695 arg1@@377 arg2@@257 arg3@@170)) )))
(assert (forall (($o@@81 T@U) ($f@@21 T@U) (|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@10| Bool) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type $o@@81) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@12|) refType)) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#11| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@10|) $o@@81 $f@@21))  (=> (and (not (= $o@@81 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@81) |l#2@@12|))) |l#3@@10|)))) :qid |PivotBet.157:9| :skolemid |4815| :pattern ( (MapType9Select (|lambda#11| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@10|) $o@@81 $f@@21)) )))
(assert (forall ((arg0@@696 T@U) (arg1@@378 T@U) (arg2@@258 T@U) (arg3@@171 Bool) ) (! (= (type (|lambda#12| arg0@@696 arg1@@378 arg2@@258 arg3@@171)) (MapType9Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@696 arg1@@378 arg2@@258 arg3@@171)) )))
(assert (forall (($o@@82 T@U) ($f@@22 T@U) (|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@11| Bool) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@82) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@13|) refType)) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#12| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@11|) $o@@82 $f@@22))  (=> (and (not (= $o@@82 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@82) |l#2@@13|))) |l#3@@11|)))) :qid |PivotBet.170:9| :skolemid |4816| :pattern ( (MapType9Select (|lambda#12| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@11|) $o@@82 $f@@22)) )))
(assert (forall ((arg0@@697 T@U) (arg1@@379 T@U) (arg2@@259 T@U) (arg3@@172 Bool) ) (! (= (type (|lambda#13| arg0@@697 arg1@@379 arg2@@259 arg3@@172)) (MapType9Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@697 arg1@@379 arg2@@259 arg3@@172)) )))
(assert (forall (($o@@83 T@U) ($f@@23 T@U) (|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@12| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@83) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@14|) refType)) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#13| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@12|) $o@@83 $f@@23))  (=> (and (not (= $o@@83 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@83) |l#2@@14|))) |l#3@@12|)))) :qid |PivotBet.170:9| :skolemid |4817| :pattern ( (MapType9Select (|lambda#13| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@12|) $o@@83 $f@@23)) )))
(assert (forall ((arg0@@698 T@U) (arg1@@380 T@U) (arg2@@260 T@U) (arg3@@173 Bool) ) (! (= (type (|lambda#14| arg0@@698 arg1@@380 arg2@@260 arg3@@173)) (MapType9Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@698 arg1@@380 arg2@@260 arg3@@173)) )))
(assert (forall (($o@@84 T@U) ($f@@24 T@U) (|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@13| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@84) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@15|) refType)) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#14| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@13|) $o@@84 $f@@24))  (=> (and (not (= $o@@84 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@84) |l#2@@15|))) |l#3@@13|)))) :qid |PivotBet.183:9| :skolemid |4818| :pattern ( (MapType9Select (|lambda#14| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@13|) $o@@84 $f@@24)) )))
(assert (forall ((arg0@@699 T@U) (arg1@@381 T@U) (arg2@@261 T@U) (arg3@@174 Bool) ) (! (= (type (|lambda#15| arg0@@699 arg1@@381 arg2@@261 arg3@@174)) (MapType9Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@699 arg1@@381 arg2@@261 arg3@@174)) )))
(assert (forall (($o@@85 T@U) ($f@@25 T@U) (|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@14| Bool) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type $o@@85) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@16|) refType)) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#15| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@14|) $o@@85 $f@@25))  (=> (and (not (= $o@@85 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@85) |l#2@@16|))) |l#3@@14|)))) :qid |PivotBet.183:9| :skolemid |4819| :pattern ( (MapType9Select (|lambda#15| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@14|) $o@@85 $f@@25)) )))
(assert (forall ((arg0@@700 T@U) (arg1@@382 T@U) (arg2@@262 T@U) (arg3@@175 Bool) ) (! (= (type (|lambda#16| arg0@@700 arg1@@382 arg2@@262 arg3@@175)) (MapType9Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@700 arg1@@382 arg2@@262 arg3@@175)) )))
(assert (forall (($o@@86 T@U) ($f@@26 T@U) (|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@15| Bool) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type $o@@86) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@17|) refType)) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#16| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@15|) $o@@86 $f@@26))  (=> (and (not (= $o@@86 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@86) |l#2@@17|))) |l#3@@15|)))) :qid |PivotBet.230:9| :skolemid |4820| :pattern ( (MapType9Select (|lambda#16| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@15|) $o@@86 $f@@26)) )))
(assert (forall ((arg0@@701 T@U) (arg1@@383 T@U) (arg2@@263 T@U) (arg3@@176 Bool) ) (! (= (type (|lambda#17| arg0@@701 arg1@@383 arg2@@263 arg3@@176)) (MapType9Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@701 arg1@@383 arg2@@263 arg3@@176)) )))
(assert (forall (($o@@87 T@U) ($f@@27 T@U) (|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@16| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@87) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@18|) refType)) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#17| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@16|) $o@@87 $f@@27))  (=> (and (not (= $o@@87 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@87) |l#2@@18|))) |l#3@@16|)))) :qid |PivotBet.230:9| :skolemid |4821| :pattern ( (MapType9Select (|lambda#17| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@16|) $o@@87 $f@@27)) )))
(assert (forall ((arg0@@702 T@U) (arg1@@384 T@U) (arg2@@264 T@U) (arg3@@177 Bool) ) (! (= (type (|lambda#18| arg0@@702 arg1@@384 arg2@@264 arg3@@177)) (MapType9Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@702 arg1@@384 arg2@@264 arg3@@177)) )))
(assert (forall (($o@@88 T@U) ($f@@28 T@U) (|l#0@@19| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@17| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@88) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@19|) refType)) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#18| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@17|) $o@@88 $f@@28))  (=> (and (not (= $o@@88 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@88) |l#2@@19|))) |l#3@@17|)))) :qid |PivotBet.270:9| :skolemid |4822| :pattern ( (MapType9Select (|lambda#18| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@17|) $o@@88 $f@@28)) )))
(assert (forall ((arg0@@703 T@U) (arg1@@385 T@U) (arg2@@265 T@U) (arg3@@178 Bool) ) (! (= (type (|lambda#19| arg0@@703 arg1@@385 arg2@@265 arg3@@178)) (MapType9Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@703 arg1@@385 arg2@@265 arg3@@178)) )))
(assert (forall (($o@@89 T@U) ($f@@29 T@U) (|l#0@@20| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@18| Bool) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type $o@@89) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type |l#0@@20|) refType)) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#19| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@18|) $o@@89 $f@@29))  (=> (and (not (= $o@@89 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@89) |l#2@@20|))) |l#3@@18|)))) :qid |PivotBet.270:9| :skolemid |4823| :pattern ( (MapType9Select (|lambda#19| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@18|) $o@@89 $f@@29)) )))
(assert (forall ((arg0@@704 T@U) (arg1@@386 T@U) (arg2@@266 T@U) (arg3@@179 Bool) ) (! (= (type (|lambda#20| arg0@@704 arg1@@386 arg2@@266 arg3@@179)) (MapType9Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@704 arg1@@386 arg2@@266 arg3@@179)) )))
(assert (forall (($o@@90 T@U) ($f@@30 T@U) (|l#0@@21| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@19| Bool) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type $o@@90) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type |l#0@@21|) refType)) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#20| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@19|) $o@@90 $f@@30))  (=> (and (not (= $o@@90 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@90) |l#2@@21|))) |l#3@@19|)))) :qid |PivotBet.328:9| :skolemid |4824| :pattern ( (MapType9Select (|lambda#20| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@19|) $o@@90 $f@@30)) )))
(assert (forall ((arg0@@705 T@U) (arg1@@387 T@U) (arg2@@267 T@U) (arg3@@180 Bool) ) (! (= (type (|lambda#21| arg0@@705 arg1@@387 arg2@@267 arg3@@180)) (MapType9Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@705 arg1@@387 arg2@@267 arg3@@180)) )))
(assert (forall (($o@@91 T@U) ($f@@31 T@U) (|l#0@@22| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@20| Bool) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type $o@@91) refType) (= (type $f@@31) (FieldType alpha@@38))) (= (type |l#0@@22|) refType)) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#21| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@20|) $o@@91 $f@@31))  (=> (and (not (= $o@@91 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@91) |l#2@@22|))) |l#3@@20|)))) :qid |PivotBet.328:9| :skolemid |4825| :pattern ( (MapType9Select (|lambda#21| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@20|) $o@@91 $f@@31)) )))
(assert (forall ((arg0@@706 T@U) (arg1@@388 T@U) (arg2@@268 T@U) (arg3@@181 Bool) ) (! (= (type (|lambda#22| arg0@@706 arg1@@388 arg2@@268 arg3@@181)) (MapType9Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@706 arg1@@388 arg2@@268 arg3@@181)) )))
(assert (forall (($o@@92 T@U) ($f@@32 T@U) (|l#0@@23| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@21| Bool) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type $o@@92) refType) (= (type $f@@32) (FieldType alpha@@39))) (= (type |l#0@@23|) refType)) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#22| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@21|) $o@@92 $f@@32))  (=> (and (not (= $o@@92 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@92) |l#2@@23|))) |l#3@@21|)))) :qid |PivotBet.366:9| :skolemid |4826| :pattern ( (MapType9Select (|lambda#22| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@21|) $o@@92 $f@@32)) )))
(assert (forall ((arg0@@707 T@U) (arg1@@389 T@U) (arg2@@269 T@U) (arg3@@182 Bool) ) (! (= (type (|lambda#23| arg0@@707 arg1@@389 arg2@@269 arg3@@182)) (MapType9Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@707 arg1@@389 arg2@@269 arg3@@182)) )))
(assert (forall (($o@@93 T@U) ($f@@33 T@U) (|l#0@@24| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@22| Bool) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type $o@@93) refType) (= (type $f@@33) (FieldType alpha@@40))) (= (type |l#0@@24|) refType)) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#23| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@22|) $o@@93 $f@@33))  (=> (and (not (= $o@@93 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@93) |l#2@@24|))) |l#3@@22|)))) :qid |PivotBet.366:9| :skolemid |4827| :pattern ( (MapType9Select (|lambda#23| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@22|) $o@@93 $f@@33)) )))
(assert (forall ((arg0@@708 T@U) (arg1@@390 T@U) (arg2@@270 T@U) (arg3@@183 Bool) ) (! (= (type (|lambda#24| arg0@@708 arg1@@390 arg2@@270 arg3@@183)) (MapType9Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@708 arg1@@390 arg2@@270 arg3@@183)) )))
(assert (forall (($o@@94 T@U) ($f@@34 T@U) (|l#0@@25| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@23| Bool) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type $o@@94) refType) (= (type $f@@34) (FieldType alpha@@41))) (= (type |l#0@@25|) refType)) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#24| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@23|) $o@@94 $f@@34))  (=> (and (not (= $o@@94 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@94) |l#2@@25|))) |l#3@@23|)))) :qid |PivotBet.423:9| :skolemid |4828| :pattern ( (MapType9Select (|lambda#24| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@23|) $o@@94 $f@@34)) )))
(assert (forall ((arg0@@709 T@U) (arg1@@391 T@U) (arg2@@271 T@U) (arg3@@184 Bool) ) (! (= (type (|lambda#25| arg0@@709 arg1@@391 arg2@@271 arg3@@184)) (MapType9Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@709 arg1@@391 arg2@@271 arg3@@184)) )))
(assert (forall (($o@@95 T@U) ($f@@35 T@U) (|l#0@@26| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@24| Bool) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type $o@@95) refType) (= (type $f@@35) (FieldType alpha@@42))) (= (type |l#0@@26|) refType)) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#25| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@24|) $o@@95 $f@@35))  (=> (and (not (= $o@@95 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@95) |l#2@@26|))) |l#3@@24|)))) :qid |PivotBet.423:9| :skolemid |4829| :pattern ( (MapType9Select (|lambda#25| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@24|) $o@@95 $f@@35)) )))
(assert (forall ((arg0@@710 T@U) (arg1@@392 T@U) (arg2@@272 T@U) (arg3@@185 Bool) ) (! (= (type (|lambda#26| arg0@@710 arg1@@392 arg2@@272 arg3@@185)) (MapType9Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@710 arg1@@392 arg2@@272 arg3@@185)) )))
(assert (forall (($o@@96 T@U) ($f@@36 T@U) (|l#0@@27| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@25| Bool) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type $o@@96) refType) (= (type $f@@36) (FieldType alpha@@43))) (= (type |l#0@@27|) refType)) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#26| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@25|) $o@@96 $f@@36))  (=> (and (not (= $o@@96 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@96) |l#2@@27|))) |l#3@@25|)))) :qid |PivotBet.438:9| :skolemid |4830| :pattern ( (MapType9Select (|lambda#26| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@25|) $o@@96 $f@@36)) )))
(assert (forall ((arg0@@711 T@U) (arg1@@393 T@U) (arg2@@273 T@U) (arg3@@186 Bool) ) (! (= (type (|lambda#27| arg0@@711 arg1@@393 arg2@@273 arg3@@186)) (MapType9Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@711 arg1@@393 arg2@@273 arg3@@186)) )))
(assert (forall (($o@@97 T@U) ($f@@37 T@U) (|l#0@@28| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@26| Bool) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type $o@@97) refType) (= (type $f@@37) (FieldType alpha@@44))) (= (type |l#0@@28|) refType)) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#27| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@26|) $o@@97 $f@@37))  (=> (and (not (= $o@@97 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@97) |l#2@@28|))) |l#3@@26|)))) :qid |PivotBet.438:9| :skolemid |4831| :pattern ( (MapType9Select (|lambda#27| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@26|) $o@@97 $f@@37)) )))
(assert (forall ((arg0@@712 T@U) (arg1@@394 T@U) (arg2@@274 T@U) (arg3@@187 Bool) ) (! (= (type (|lambda#28| arg0@@712 arg1@@394 arg2@@274 arg3@@187)) (MapType9Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@712 arg1@@394 arg2@@274 arg3@@187)) )))
(assert (forall (($o@@98 T@U) ($f@@38 T@U) (|l#0@@29| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@27| Bool) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type $o@@98) refType) (= (type $f@@38) (FieldType alpha@@45))) (= (type |l#0@@29|) refType)) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#28| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@27|) $o@@98 $f@@38))  (=> (and (not (= $o@@98 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@98) |l#2@@29|))) |l#3@@27|)))) :qid |PivotBet.453:9| :skolemid |4832| :pattern ( (MapType9Select (|lambda#28| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@27|) $o@@98 $f@@38)) )))
(assert (forall ((arg0@@713 T@U) (arg1@@395 T@U) (arg2@@275 T@U) (arg3@@188 Bool) ) (! (= (type (|lambda#29| arg0@@713 arg1@@395 arg2@@275 arg3@@188)) (MapType9Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@713 arg1@@395 arg2@@275 arg3@@188)) )))
(assert (forall (($o@@99 T@U) ($f@@39 T@U) (|l#0@@30| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@28| Bool) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type $o@@99) refType) (= (type $f@@39) (FieldType alpha@@46))) (= (type |l#0@@30|) refType)) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#29| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@28|) $o@@99 $f@@39))  (=> (and (not (= $o@@99 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@99) |l#2@@30|))) |l#3@@28|)))) :qid |PivotBet.453:9| :skolemid |4833| :pattern ( (MapType9Select (|lambda#29| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@28|) $o@@99 $f@@39)) )))
(assert (forall ((arg0@@714 T@U) (arg1@@396 T@U) (arg2@@276 T@U) (arg3@@189 Bool) ) (! (= (type (|lambda#30| arg0@@714 arg1@@396 arg2@@276 arg3@@189)) (MapType9Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@714 arg1@@396 arg2@@276 arg3@@189)) )))
(assert (forall (($o@@100 T@U) ($f@@40 T@U) (|l#0@@31| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@29| Bool) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type $o@@100) refType) (= (type $f@@40) (FieldType alpha@@47))) (= (type |l#0@@31|) refType)) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#30| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@29|) $o@@100 $f@@40))  (=> (and (not (= $o@@100 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@100) |l#2@@31|))) |l#3@@29|)))) :qid |PivotBet.471:9| :skolemid |4834| :pattern ( (MapType9Select (|lambda#30| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@29|) $o@@100 $f@@40)) )))
(assert (forall ((arg0@@715 T@U) (arg1@@397 T@U) (arg2@@277 T@U) (arg3@@190 Bool) ) (! (= (type (|lambda#31| arg0@@715 arg1@@397 arg2@@277 arg3@@190)) (MapType9Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@715 arg1@@397 arg2@@277 arg3@@190)) )))
(assert (forall (($o@@101 T@U) ($f@@41 T@U) (|l#0@@32| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@30| Bool) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type $o@@101) refType) (= (type $f@@41) (FieldType alpha@@48))) (= (type |l#0@@32|) refType)) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#31| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@30|) $o@@101 $f@@41))  (=> (and (not (= $o@@101 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@101) |l#2@@32|))) |l#3@@30|)))) :qid |PivotBet.471:9| :skolemid |4835| :pattern ( (MapType9Select (|lambda#31| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@30|) $o@@101 $f@@41)) )))
(assert (forall ((arg0@@716 T@U) (arg1@@398 T@U) (arg2@@278 T@U) (arg3@@191 Bool) ) (! (= (type (|lambda#32| arg0@@716 arg1@@398 arg2@@278 arg3@@191)) (MapType9Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@716 arg1@@398 arg2@@278 arg3@@191)) )))
(assert (forall (($o@@102 T@U) ($f@@42 T@U) (|l#0@@33| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@31| Bool) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type $o@@102) refType) (= (type $f@@42) (FieldType alpha@@49))) (= (type |l#0@@33|) refType)) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#32| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@31|) $o@@102 $f@@42))  (=> (and (not (= $o@@102 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@102) |l#2@@33|))) |l#3@@31|)))) :qid |PivotBet.482:9| :skolemid |4836| :pattern ( (MapType9Select (|lambda#32| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@31|) $o@@102 $f@@42)) )))
(assert (forall ((arg0@@717 T@U) (arg1@@399 T@U) (arg2@@279 T@U) (arg3@@192 Bool) ) (! (= (type (|lambda#33| arg0@@717 arg1@@399 arg2@@279 arg3@@192)) (MapType9Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@717 arg1@@399 arg2@@279 arg3@@192)) )))
(assert (forall (($o@@103 T@U) ($f@@43 T@U) (|l#0@@34| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@32| Bool) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type $o@@103) refType) (= (type $f@@43) (FieldType alpha@@50))) (= (type |l#0@@34|) refType)) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#33| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@32|) $o@@103 $f@@43))  (=> (and (not (= $o@@103 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@103) |l#2@@34|))) |l#3@@32|)))) :qid |PivotBet.482:9| :skolemid |4837| :pattern ( (MapType9Select (|lambda#33| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@32|) $o@@103 $f@@43)) )))
(assert (forall ((arg0@@718 T@U) (arg1@@400 T@U) (arg2@@280 T@U) (arg3@@193 Bool) ) (! (= (type (|lambda#34| arg0@@718 arg1@@400 arg2@@280 arg3@@193)) (MapType9Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@718 arg1@@400 arg2@@280 arg3@@193)) )))
(assert (forall (($o@@104 T@U) ($f@@44 T@U) (|l#0@@35| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@33| Bool) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type $o@@104) refType) (= (type $f@@44) (FieldType alpha@@51))) (= (type |l#0@@35|) refType)) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#34| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@33|) $o@@104 $f@@44))  (=> (and (not (= $o@@104 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@104) |l#2@@35|))) |l#3@@33|)))) :qid |PivotBet.493:9| :skolemid |4838| :pattern ( (MapType9Select (|lambda#34| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@33|) $o@@104 $f@@44)) )))
(assert (forall ((arg0@@719 T@U) (arg1@@401 T@U) (arg2@@281 T@U) (arg3@@194 Bool) ) (! (= (type (|lambda#35| arg0@@719 arg1@@401 arg2@@281 arg3@@194)) (MapType9Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@719 arg1@@401 arg2@@281 arg3@@194)) )))
(assert (forall (($o@@105 T@U) ($f@@45 T@U) (|l#0@@36| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@34| Bool) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type $o@@105) refType) (= (type $f@@45) (FieldType alpha@@52))) (= (type |l#0@@36|) refType)) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#35| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@34|) $o@@105 $f@@45))  (=> (and (not (= $o@@105 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@105) |l#2@@36|))) |l#3@@34|)))) :qid |PivotBet.493:9| :skolemid |4839| :pattern ( (MapType9Select (|lambda#35| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@34|) $o@@105 $f@@45)) )))
(assert (forall ((arg0@@720 T@U) (arg1@@402 T@U) (arg2@@282 T@U) (arg3@@195 Bool) ) (! (= (type (|lambda#36| arg0@@720 arg1@@402 arg2@@282 arg3@@195)) (MapType9Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@720 arg1@@402 arg2@@282 arg3@@195)) )))
(assert (forall (($o@@106 T@U) ($f@@46 T@U) (|l#0@@37| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@35| Bool) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type $o@@106) refType) (= (type $f@@46) (FieldType alpha@@53))) (= (type |l#0@@37|) refType)) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#36| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@35|) $o@@106 $f@@46))  (=> (and (not (= $o@@106 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@106) |l#2@@37|))) |l#3@@35|)))) :qid |PivotBet.506:9| :skolemid |4840| :pattern ( (MapType9Select (|lambda#36| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@35|) $o@@106 $f@@46)) )))
(assert (forall ((arg0@@721 T@U) (arg1@@403 T@U) (arg2@@283 T@U) (arg3@@196 Bool) ) (! (= (type (|lambda#37| arg0@@721 arg1@@403 arg2@@283 arg3@@196)) (MapType9Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@721 arg1@@403 arg2@@283 arg3@@196)) )))
(assert (forall (($o@@107 T@U) ($f@@47 T@U) (|l#0@@38| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@36| Bool) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type $o@@107) refType) (= (type $f@@47) (FieldType alpha@@54))) (= (type |l#0@@38|) refType)) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#37| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@36|) $o@@107 $f@@47))  (=> (and (not (= $o@@107 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@107) |l#2@@38|))) |l#3@@36|)))) :qid |PivotBet.506:9| :skolemid |4841| :pattern ( (MapType9Select (|lambda#37| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@36|) $o@@107 $f@@47)) )))
(assert (forall ((arg0@@722 T@U) (arg1@@404 T@U) (arg2@@284 T@U) (arg3@@197 Bool) ) (! (= (type (|lambda#38| arg0@@722 arg1@@404 arg2@@284 arg3@@197)) (MapType9Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@722 arg1@@404 arg2@@284 arg3@@197)) )))
(assert (forall (($o@@108 T@U) ($f@@48 T@U) (|l#0@@39| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@37| Bool) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type $o@@108) refType) (= (type $f@@48) (FieldType alpha@@55))) (= (type |l#0@@39|) refType)) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#38| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@37|) $o@@108 $f@@48))  (=> (and (not (= $o@@108 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@108) |l#2@@39|))) |l#3@@37|)))) :qid |PivotBet.554:9| :skolemid |4842| :pattern ( (MapType9Select (|lambda#38| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@37|) $o@@108 $f@@48)) )))
(assert (forall ((arg0@@723 T@U) (arg1@@405 T@U) (arg2@@285 T@U) (arg3@@198 Bool) ) (! (= (type (|lambda#39| arg0@@723 arg1@@405 arg2@@285 arg3@@198)) (MapType9Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@723 arg1@@405 arg2@@285 arg3@@198)) )))
(assert (forall (($o@@109 T@U) ($f@@49 T@U) (|l#0@@40| T@U) (|l#1@@40| T@U) (|l#2@@40| T@U) (|l#3@@38| Bool) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type $o@@109) refType) (= (type $f@@49) (FieldType alpha@@56))) (= (type |l#0@@40|) refType)) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#39| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@38|) $o@@109 $f@@49))  (=> (and (not (= $o@@109 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@109) |l#2@@40|))) |l#3@@38|)))) :qid |PivotBet.554:9| :skolemid |4843| :pattern ( (MapType9Select (|lambda#39| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@38|) $o@@109 $f@@49)) )))
(assert (forall ((|$w#0| T@U) (|l#0@@41| T@U) ) (!  (=> (and (= (type |$w#0|) BoxType) (= (type |l#0@@41|) TyType)) (= (U_2_bool (MapType0Select (|lambda#40| |l#0@@41|) |$w#0|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0|) |l#0@@41|) (MapSpec.__default.InDomain ($Unbox (SeqType BoxType) |$w#0|))))) :qid |MapSpecs.43:5| :skolemid |4844| :pattern ( (MapType0Select (|lambda#40| |l#0@@41|) |$w#0|)) )))
(assert (forall ((|$w#0@@0| T@U) (|l#0@@42| T@U) ) (!  (=> (and (= (type |$w#0@@0|) BoxType) (= (type |l#0@@42|) BoxType)) (= (MapType0Select (|lambda#41| |l#0@@42|) |$w#0@@0|) |l#0@@42|)) :qid |MapSpecs.43:5| :skolemid |4845| :pattern ( (MapType0Select (|lambda#41| |l#0@@42|) |$w#0@@0|)) )))
(assert (forall ((|$y#0| T@U) (|l#0@@43| T@U) (|l#1@@41| T@U) (|l#2@@41| Int) ) (!  (=> (and (and (= (type |$y#0|) BoxType) (= (type |l#0@@43|) TyType)) (= (type |l#1@@41|) (MapType0Type BoxType intType))) (= (U_2_bool (MapType0Select (|lambda#44| |l#0@@43| |l#1@@41| |l#2@@41|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@43|) (> (U_2_int (MapType0Select |l#1@@41| |$y#0|)) |l#2@@41|)))) :qid |sequence.28:5| :skolemid |4846| :pattern ( (MapType0Select (|lambda#44| |l#0@@43| |l#1@@41| |l#2@@41|) |$y#0|)) )))
(assert (forall ((|$y#0@@0| T@U) (|l#0@@44| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@39| T@U) (|l#4| T@U) ) (!  (=> (and (and (and (and (and (= (type |$y#0@@0|) BoxType) (= (type |l#0@@44|) TyType)) (= (type |l#1@@42|) (MapType0Type BoxType boolType))) (= (type |l#2@@42|) (MapType0Type BoxType BoxType))) (= (type |l#3@@39|) (MapType0Type BoxType boolType))) (= (type |l#4|) (MapType0Type BoxType BoxType))) (= (U_2_bool (MapType0Select (|lambda#48| |l#0@@44| |l#1@@42| |l#2@@42| |l#3@@39| |l#4|) |$y#0@@0|)) (exists ((|k#0@@100| T@U) ) (!  (and (= (type |k#0@@100|) (SeqType BoxType)) (and (and ($Is |k#0@@100| |l#0@@44|) (U_2_bool (MapType0Select |l#1@@42| ($Box |k#0@@100|)))) (= |$y#0@@0| (MapType0Select |l#2@@42| ($Box |k#0@@100|))))) :qid |BetreeSp.31:10| :skolemid |2519| :pattern ( (MapType0Select |l#4| ($Box |k#0@@100|))) :pattern ( (MapType0Select |l#3@@39| ($Box |k#0@@100|))) )))) :qid |BetreeSp.31:5| :skolemid |4847| :pattern ( (MapType0Select (|lambda#48| |l#0@@44| |l#1@@42| |l#2@@42| |l#3@@39| |l#4|) |$y#0@@0|)) )))
(assert (forall ((|$y#0@@1| T@U) (|l#0@@45| T@U) (|l#1@@43| T@U) (|l#2@@43| Int) (|l#3@@40| Int) (|l#4@@0| T@U) (|l#5| T@U) (|l#6| T@U) (|l#7| Int) (|l#8| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |$y#0@@1|) BoxType) (= (type |l#0@@45|) TyType)) (= (type |l#1@@43|) (IMapType BoxType BoxType))) (= (type |l#4@@0|) BoxType)) (= (type |l#5|) TyType)) (= (type |l#6|) (IMapType BoxType BoxType))) (= (type |l#8|) TyType)) (= (U_2_bool (MapType0Select (|lambda#50| |l#0@@45| |l#1@@43| |l#2@@43| |l#3@@40| |l#4@@0| |l#5| |l#6| |l#7| |l#8|) |$y#0@@1|)) (exists ((|path#0@@93| T@U) ) (!  (and (= (type |path#0@@93|) (SeqType BoxType)) (and (and ($Is |path#0@@93| |l#0@@45|) (and (and (BetreeGraph.__default.IsPath |l#1@@43| |path#0@@93|) (< |l#2@@43| (|Seq#Length| |path#0@@93|))) (= (|Seq#Index| |path#0@@93| |l#3@@40|) |l#4@@0|))) (= |$y#0@@1| (Sequences.__default.Last |l#5| |path#0@@93|)))) :qid |Graphidf.99:10| :skolemid |2578| :pattern ( (Sequences.__default.Last |l#8| |path#0@@93|)) :pattern ( (|Seq#Index| |path#0@@93| |l#7|)) :pattern ( (|Seq#Length| |path#0@@93|)) :pattern ( (BetreeGraph.__default.IsPath |l#6| |path#0@@93|)) )))) :qid |Graphidf.99:5| :skolemid |4848| :pattern ( (MapType0Select (|lambda#50| |l#0@@45| |l#1@@43| |l#2@@43| |l#3@@40| |l#4@@0| |l#5| |l#6| |l#7| |l#8|) |$y#0@@1|)) )))
(assert (forall ((|$y#0@@2| T@U) (|l#0@@46| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@41| T@U) (|l#4@@1| T@U) (|l#5@@0| T@U) (|l#6@@0| T@U) (|l#7@@0| T@U) (|l#8@@0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |$y#0@@2|) BoxType) (= (type |l#0@@46|) TyType)) (= (type |l#1@@44|) (IMapType BoxType BoxType))) (= (type |l#2@@44|) (IMapType BoxType BoxType))) (= (type |l#3@@41|) BoxType)) (= (type |l#4@@1|) TyType)) (= (type |l#5@@0|) (IMapType BoxType BoxType))) (= (type |l#6@@0|) (IMapType BoxType BoxType))) (= (type |l#7@@0|) BoxType)) (= (type |l#8@@0|) TyType)) (= (U_2_bool (MapType0Select (|lambda#52| |l#0@@46| |l#1@@44| |l#2@@44| |l#3@@41| |l#4@@1| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0|) |$y#0@@2|)) (exists ((|path#0@@94| T@U) ) (!  (and (= (type |path#0@@94|) (SeqType BoxType)) (and (and ($Is |path#0@@94| |l#0@@46|) (BetreeGraph.__default.NewPath |l#1@@44| |l#2@@44| |l#3@@41| |path#0@@94|)) (= |$y#0@@2| (Sequences.__default.Last |l#4@@1| |path#0@@94|)))) :qid |Graphidf.116:10| :skolemid |2597| :pattern ( (Sequences.__default.Last |l#8@@0| |path#0@@94|)) :pattern ( (BetreeGraph.__default.NewPath |l#5@@0| |l#6@@0| |l#7@@0| |path#0@@94|)) )))) :qid |Graphidf.116:5| :skolemid |4849| :pattern ( (MapType0Select (|lambda#52| |l#0@@46| |l#1@@44| |l#2@@44| |l#3@@41| |l#4@@1| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0|) |$y#0@@2|)) )))
(assert (forall ((|$w#1| T@U) (|l#0@@47| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) ) (!  (=> (and (and (and (= (type |$w#1|) BoxType) (= (type |l#0@@47|) TyType)) (= (type |l#1@@45|) (MapType0Type BoxType boolType))) (= (type |l#2@@45|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#54| |l#0@@47| |l#1@@45| |l#2@@45|) |$w#1|))  (and ($IsBox |$w#1| |l#0@@47|) (and (U_2_bool (MapType0Select |l#1@@45| |$w#1|)) (not (U_2_bool (MapType0Select |l#2@@45| |$w#1|))))))) :qid |Mapssdfy.43:14| :skolemid |4850| :pattern ( (MapType0Select (|lambda#54| |l#0@@47| |l#1@@45| |l#2@@45|) |$w#1|)) )))
(assert (forall ((|$w#1@@0| T@U) (|l#0@@48| T@U) ) (!  (=> (and (= (type |$w#1@@0|) BoxType) (= (type |l#0@@48|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#55| |l#0@@48|) |$w#1@@0|) (MapType0Select |l#0@@48| |$w#1@@0|))) :qid |Mapssdfy.43:14| :skolemid |4851| :pattern ( (MapType0Select (|lambda#55| |l#0@@48|) |$w#1@@0|)) )))
(assert (forall ((|$w#1@@1| T@U) (|l#0@@49| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) ) (!  (=> (and (and (and (= (type |$w#1@@1|) BoxType) (= (type |l#0@@49|) TyType)) (= (type |l#1@@46|) (MapType0Type BoxType boolType))) (= (type |l#2@@46|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#58| |l#0@@49| |l#1@@46| |l#2@@46|) |$w#1@@1|))  (and ($IsBox |$w#1@@1| |l#0@@49|) (and (U_2_bool (MapType0Select |l#1@@46| |$w#1@@1|)) (not (= |$w#1@@1| |l#2@@46|)))))) :qid |Mapssdfy.66:15| :skolemid |4852| :pattern ( (MapType0Select (|lambda#58| |l#0@@49| |l#1@@46| |l#2@@46|) |$w#1@@1|)) )))
(assert (forall ((|$w#0@@1| T@U) (|l#0@@50| T@U) (|l#1@@47| T@U) (|l#2@@47| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@1|) BoxType) (= (type |l#0@@50|) TyType)) (= (type |l#1@@47|) (MapType0Type BoxType boolType))) (= (type |l#2@@47|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#72| |l#0@@50| |l#1@@47| |l#2@@47|) |$w#0@@1|))  (and ($IsBox |$w#0@@1| |l#0@@50|) (and (U_2_bool (MapType0Select |l#1@@47| |$w#0@@1|)) (U_2_bool (MapType0Select |l#2@@47| |$w#0@@1|)))))) :qid |Mapssdfy.99:5| :skolemid |4853| :pattern ( (MapType0Select (|lambda#72| |l#0@@50| |l#1@@47| |l#2@@47|) |$w#0@@1|)) )))
(assert (forall ((|$w#0@@2| T@U) (|l#0@@51| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@2|) BoxType) (= (type |l#0@@51|) TyType)) (= (type |l#1@@48|) (MapType0Type BoxType boolType))) (= (type |l#2@@48|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#86| |l#0@@51| |l#1@@48| |l#2@@48|) |$w#0@@2|))  (and ($IsBox |$w#0@@2| |l#0@@51|) (or (U_2_bool (MapType0Select |l#1@@48| |$w#0@@2|)) (U_2_bool (MapType0Select |l#2@@48| |$w#0@@2|)))))) :qid |Mapssdfy.117:3| :skolemid |4854| :pattern ( (MapType0Select (|lambda#86| |l#0@@51| |l#1@@48| |l#2@@48|) |$w#0@@2|)) )))
(assert (forall ((|$w#0@@3| T@U) (|l#0@@52| T@U) (|l#1@@49| T@U) (|l#2@@49| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@3|) BoxType) (= (type |l#0@@52|) (MapType0Type BoxType boolType))) (= (type |l#1@@49|) (MapType0Type BoxType BoxType))) (= (type |l#2@@49|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#87| |l#0@@52| |l#1@@49| |l#2@@49|) |$w#0@@3|) (ite (U_2_bool (MapType0Select |l#0@@52| |$w#0@@3|)) (MapType0Select |l#1@@49| |$w#0@@3|) (MapType0Select |l#2@@49| |$w#0@@3|)))) :qid |Mapssdfy.117:3| :skolemid |4855| :pattern ( (MapType0Select (|lambda#87| |l#0@@52| |l#1@@49| |l#2@@49|) |$w#0@@3|)) )))
(assert (forall ((|$w#0@@4| T@U) (|l#0@@53| T@U) (|l#1@@50| T@U) (|l#2@@50| T@U) (|l#3@@42| T@U) ) (!  (=> (and (and (and (and (= (type |$w#0@@4|) BoxType) (= (type |l#0@@53|) TyType)) (= (type |l#1@@50|) (MapType0Type BoxType boolType))) (= (type |l#2@@50|) (MapType0Type BoxType boolType))) (= (type |l#3@@42|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#106| |l#0@@53| |l#1@@50| |l#2@@50| |l#3@@42|) |$w#0@@4|))  (and ($IsBox |$w#0@@4| |l#0@@53|) (or (or (U_2_bool (MapType0Select |l#1@@50| |$w#0@@4|)) (U_2_bool (MapType0Select |l#2@@50| |$w#0@@4|))) (U_2_bool (MapType0Select |l#3@@42| |$w#0@@4|)))))) :qid |Mapssdfy.191:3| :skolemid |4856| :pattern ( (MapType0Select (|lambda#106| |l#0@@53| |l#1@@50| |l#2@@50| |l#3@@42|) |$w#0@@4|)) )))
(assert (forall ((|$w#0@@5| T@U) (|l#0@@54| T@U) (|l#1@@51| T@U) (|l#2@@51| T@U) (|l#3@@43| T@U) (|l#4@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#0@@5|) BoxType) (= (type |l#0@@54|) (MapType0Type BoxType boolType))) (= (type |l#1@@51|) (MapType0Type BoxType BoxType))) (= (type |l#2@@51|) (MapType0Type BoxType boolType))) (= (type |l#3@@43|) (MapType0Type BoxType BoxType))) (= (type |l#4@@2|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#107| |l#0@@54| |l#1@@51| |l#2@@51| |l#3@@43| |l#4@@2|) |$w#0@@5|) (ite (U_2_bool (MapType0Select |l#0@@54| |$w#0@@5|)) (MapType0Select |l#1@@51| |$w#0@@5|) (ite (U_2_bool (MapType0Select |l#2@@51| |$w#0@@5|)) (MapType0Select |l#3@@43| |$w#0@@5|) (MapType0Select |l#4@@2| |$w#0@@5|))))) :qid |Mapssdfy.191:3| :skolemid |4857| :pattern ( (MapType0Select (|lambda#107| |l#0@@54| |l#1@@51| |l#2@@51| |l#3@@43| |l#4@@2|) |$w#0@@5|)) )))
(assert (forall ((|$w#0@@6| T@U) (|l#0@@55| T@U) (|l#1@@52| T@U) ) (!  (=> (and (and (= (type |$w#0@@6|) BoxType) (= (type |l#0@@55|) TyType)) (= (type |l#1@@52|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#110| |l#0@@55| |l#1@@52|) |$w#0@@6|))  (and ($IsBox |$w#0@@6| |l#0@@55|) (U_2_bool (MapType0Select |l#1@@52| |$w#0@@6|))))) :qid |Mapssdfy.198:4| :skolemid |4858| :pattern ( (MapType0Select (|lambda#110| |l#0@@55| |l#1@@52|) |$w#0@@6|)) )))
(assert (forall ((|$y#0@@3| T@U) (|l#0@@56| T@U) (|l#1@@53| Int) ) (!  (=> (and (= (type |$y#0@@3|) BoxType) (= (type |l#0@@56|) TyType)) (= (U_2_bool (MapType0Select (|lambda#114| |l#0@@56| |l#1@@53|) |$y#0@@3|))  (and ($IsBox |$y#0@@3| |l#0@@56|) (Byte__Order.__default.lt (U_2_int ($Unbox intType |$y#0@@3|)) |l#1@@53|)))) :qid |totalord.716:52| :skolemid |4859| :pattern ( (MapType0Select (|lambda#114| |l#0@@56| |l#1@@53|) |$y#0@@3|)) )))
(assert (forall ((|$y#1| T@U) (|l#0@@57| T@U) (|l#1@@54| T@U) (|l#2@@52| Int) ) (!  (=> (and (and (= (type |$y#1|) BoxType) (= (type |l#0@@57|) TyType)) (= (type |l#1@@54|) LayerTypeType)) (= (U_2_bool (MapType0Select (|lambda#115| |l#0@@57| |l#1@@54| |l#2@@52|) |$y#1|))  (and ($IsBox |$y#1| |l#0@@57|) (Byte__Order.__default.lte |l#1@@54| |l#2@@52| (U_2_int ($Unbox intType |$y#1|)))))) :qid |totalord.717:54| :skolemid |4860| :pattern ( (MapType0Select (|lambda#115| |l#0@@57| |l#1@@54| |l#2@@52|) |$y#1|)) )))
(assert (forall ((|$y#0@@4| T@U) (|l#0@@58| T@U) (|l#1@@55| T@U) ) (!  (=> (and (and (= (type |$y#0@@4|) BoxType) (= (type |l#0@@58|) TyType)) (= (type |l#1@@55|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#126| |l#0@@58| |l#1@@55|) |$y#0@@4|))  (and ($IsBox |$y#0@@4| |l#0@@58|) (|Seq#Contains| |l#1@@55| |$y#0@@4|)))) :qid |totalord.739:18| :skolemid |4861| :pattern ( (MapType0Select (|lambda#126| |l#0@@58| |l#1@@55|) |$y#0@@4|)) )))
(assert (forall ((|$y#0@@5| T@U) (|l#0@@59| T@U) (|l#1@@56| T@U) ) (!  (=> (and (and (= (type |$y#0@@5|) BoxType) (= (type |l#0@@59|) TyType)) (= (type |l#1@@56|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#130| |l#0@@59| |l#1@@56|) |$y#0@@5|))  (and ($IsBox |$y#0@@5| |l#0@@59|) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) |$y#0@@5|) |l#1@@56|)))) :qid |totalord.716:52| :skolemid |4862| :pattern ( (MapType0Select (|lambda#130| |l#0@@59| |l#1@@56|) |$y#0@@5|)) )))
(assert (forall ((|$y#1@@0| T@U) (|l#0@@60| T@U) (|l#1@@57| T@U) ) (!  (=> (and (and (= (type |$y#1@@0|) BoxType) (= (type |l#0@@60|) TyType)) (= (type |l#1@@57|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#131| |l#0@@60| |l#1@@57|) |$y#1@@0|))  (and ($IsBox |$y#1@@0| |l#0@@60|) (Lexicographic__Byte__Order.__default.lte |l#1@@57| ($Unbox (SeqType BoxType) |$y#1@@0|))))) :qid |totalord.717:54| :skolemid |4863| :pattern ( (MapType0Select (|lambda#131| |l#0@@60| |l#1@@57|) |$y#1@@0|)) )))
(assert (forall ((|$y#0@@6| T@U) (|l#0@@61| T@U) (|l#1@@58| T@U) (|l#2@@53| Int) ) (!  (=> (and (and (= (type |$y#0@@6|) BoxType) (= (type |l#0@@61|) TyType)) (= (type |l#1@@58|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#146| |l#0@@61| |l#1@@58| |l#2@@53|) |$y#0@@6|))  (and ($IsBox |$y#0@@6| |l#0@@61|) (= (PivotsLib.__default.Route |l#1@@58| ($Unbox (SeqType BoxType) |$y#0@@6|)) |l#2@@53|)))) :qid |PivotsLi.278:5| :skolemid |4864| :pattern ( (MapType0Select (|lambda#146| |l#0@@61| |l#1@@58| |l#2@@53|) |$y#0@@6|)) )))
(assert (forall ((|$l#1#heap#0| T@U) (|$l#1#x#0| T@U) (|l#0@@62| T@U) ) (!  (=> (and (and (= (type |$l#1#heap#0|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0|) BoxType)) (= (type |l#0@@62|) BoxType)) (= (MapType3Select (|lambda#148| |l#0@@62|) |$l#1#heap#0| |$l#1#x#0|) |l#0@@62|)) :qid |DafnyPre.521:12| :skolemid |4865| :pattern ( (MapType3Select (|lambda#148| |l#0@@62|) |$l#1#heap#0| |$l#1#x#0|)) )))
(assert (forall ((|$l#1#heap#0@@0| T@U) (|$l#1#x#0@@0| T@U) (|l#0@@63| T@U) ) (!  (=> (and (and (= (type |$l#1#heap#0@@0|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0@@0|) BoxType)) (= (type |l#0@@63|) TyType)) (= (U_2_bool (MapType3Select (|lambda#149| |l#0@@63|) |$l#1#heap#0@@0| |$l#1#x#0@@0|)) ($IsBox |$l#1#x#0@@0| |l#0@@63|))) :qid |DafnyPre.521:12| :skolemid |4866| :pattern ( (MapType3Select (|lambda#149| |l#0@@63|) |$l#1#heap#0@@0| |$l#1#x#0@@0|)) )))
(assert (forall ((|$l#1#o#0| T@U) (|l#0@@64| Bool) ) (!  (=> (= (type |$l#1#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#150| |l#0@@64|) |$l#1#o#0|)) |l#0@@64|)) :qid |unknown.0:0| :skolemid |4867| :pattern ( (MapType0Select (|lambda#150| |l#0@@64|) |$l#1#o#0|)) )))
(assert (forall ((|$l#1#heap#0@@1| T@U) (|$l#1#x#0@@1| T@U) (|l#0@@65| T@U) ) (!  (=> (and (and (= (type |$l#1#heap#0@@1|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0@@1|) BoxType)) (= (type |l#0@@65|) (MapType0Type BoxType boolType))) (= (MapType3Select (|lambda#151| |l#0@@65|) |$l#1#heap#0@@1| |$l#1#x#0@@1|) |l#0@@65|)) :qid |DafnyPre.521:12| :skolemid |4868| :pattern ( (MapType3Select (|lambda#151| |l#0@@65|) |$l#1#heap#0@@1| |$l#1#x#0@@1|)) )))
(assert (forall ((|$l#1#ly#0| T@U) (|l#0@@66| T@U) ) (!  (=> (and (= (type |$l#1#ly#0|) LayerTypeType) (= (type |l#0@@66|) HandleTypeType)) (= (MapType0Select (|lambda#152| |l#0@@66|) |$l#1#ly#0|) |l#0@@66|)) :qid |unknown.0:0| :skolemid |4869| :pattern ( (MapType0Select (|lambda#152| |l#0@@66|) |$l#1#ly#0|)) )))
(assert (forall ((|$l#1#heap#0@@2| T@U) (|$l#1#x#0@@2| T@U) (|l#0@@67| T@U) ) (!  (=> (and (and (= (type |$l#1#heap#0@@2|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0@@2|) BoxType)) (= (type |l#0@@67|) (MapType0Type BoxType BoxType))) (= (MapType3Select (|lambda#238| |l#0@@67|) |$l#1#heap#0@@2| |$l#1#x#0@@2|) (MapType0Select |l#0@@67| |$l#1#x#0@@2|))) :qid |DafnyPre.521:12| :skolemid |4870| :pattern ( (MapType3Select (|lambda#238| |l#0@@67|) |$l#1#heap#0@@2| |$l#1#x#0@@2|)) )))
(assert (forall ((|$l#1#heap#0@@3| T@U) (|$l#1#x#0@@3| T@U) (|l#0@@68| T@U) (|l#1@@59| T@U) ) (!  (=> (and (and (and (= (type |$l#1#heap#0@@3|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0@@3|) BoxType)) (= (type |l#0@@68|) TyType)) (= (type |l#1@@59|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType3Select (|lambda#239| |l#0@@68| |l#1@@59|) |$l#1#heap#0@@3| |$l#1#x#0@@3|))  (and ($IsBox |$l#1#x#0@@3| |l#0@@68|) (U_2_bool (MapType0Select |l#1@@59| |$l#1#x#0@@3|))))) :qid |DafnyPre.521:12| :skolemid |4871| :pattern ( (MapType3Select (|lambda#239| |l#0@@68| |l#1@@59|) |$l#1#heap#0@@3| |$l#1#x#0@@3|)) )))
(assert (forall ((|$w#0@@7| T@U) (|l#0@@69| T@U) (|l#1@@60| T@U) (|l#2@@54| T@U) (|l#3@@44| T@U) (|l#4@@3| Int) (|l#5@@1| T@U) (|l#6@@1| T@U) (|l#7@@1| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |$w#0@@7|) BoxType) (= (type |l#0@@69|) TyType)) (= (type |l#1@@60|) (MapType0Type BoxType boolType))) (= (type |l#2@@54|) (MapType0Type BoxType boolType))) (= (type |l#3@@44|) (SeqType BoxType))) (= (type |l#5@@1|) DatatypeTypeType)) (= (type |l#6@@1|) DatatypeTypeType)) (= (type |l#7@@1|) DatatypeTypeType)) (= (U_2_bool (MapType0Select (|lambda#248| |l#0@@69| |l#1@@60| |l#2@@54| |l#3@@44| |l#4@@3| |l#5@@1| |l#6@@1| |l#7@@1|) |$w#0@@7|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@7|) |l#0@@69|) (and (and (or (U_2_bool (MapType0Select |l#1@@60| |$w#0@@7|)) (U_2_bool (MapType0Select |l#2@@54| |$w#0@@7|))) (= (PivotsLib.__default.Route |l#3@@44| ($Unbox (SeqType BoxType) |$w#0@@7|)) |l#4@@3|)) (not (|ValueMessage.Message#Equal| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet |l#5@@1| ($Unbox (SeqType BoxType) |$w#0@@7|)) (BucketsLib.__default.BucketGet |l#6@@1| ($Unbox (SeqType BoxType) |$w#0@@7|))) |l#7@@1|)))))) :qid |BucketsL.512:7| :skolemid |4872| :pattern ( (MapType0Select (|lambda#248| |l#0@@69| |l#1@@60| |l#2@@54| |l#3@@44| |l#4@@3| |l#5@@1| |l#6@@1| |l#7@@1|) |$w#0@@7|)) )))
(assert (forall ((|$w#0@@8| T@U) (|l#0@@70| T@U) (|l#1@@61| T@U) ) (!  (=> (and (and (= (type |$w#0@@8|) BoxType) (= (type |l#0@@70|) DatatypeTypeType)) (= (type |l#1@@61|) DatatypeTypeType)) (= (MapType0Select (|lambda#249| |l#0@@70| |l#1@@61|) |$w#0@@8|) ($Box (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet |l#0@@70| ($Unbox (SeqType BoxType) |$w#0@@8|)) (BucketsLib.__default.BucketGet |l#1@@61| ($Unbox (SeqType BoxType) |$w#0@@8|)))))) :qid |BucketsL.512:7| :skolemid |4873| :pattern ( (MapType0Select (|lambda#249| |l#0@@70| |l#1@@61|) |$w#0@@8|)) )))
(assert (forall ((|$w#0@@9| T@U) (|l#0@@71| T@U) (|l#1@@62| T@U) (|l#2@@55| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@9|) BoxType) (= (type |l#0@@71|) TyType)) (= (type |l#1@@62|) (MapType0Type BoxType boolType))) (= (type |l#2@@55|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#256| |l#0@@71| |l#1@@62| |l#2@@55|) |$w#0@@9|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@9|) |l#0@@71|) (and (U_2_bool (MapType0Select |l#1@@62| |$w#0@@9|)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) |$w#0@@9|) |l#2@@55|))))) :qid |BucketsL.611:18| :skolemid |4874| :pattern ( (MapType0Select (|lambda#256| |l#0@@71| |l#1@@62| |l#2@@55|) |$w#0@@9|)) )))
(assert (forall ((|$w#1@@2| T@U) (|l#0@@72| T@U) (|l#1@@63| T@U) (|l#2@@56| T@U) ) (!  (=> (and (and (and (= (type |$w#1@@2|) BoxType) (= (type |l#0@@72|) TyType)) (= (type |l#1@@63|) (MapType0Type BoxType boolType))) (= (type |l#2@@56|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#258| |l#0@@72| |l#1@@63| |l#2@@56|) |$w#1@@2|))  (and ($Is ($Unbox (SeqType BoxType) |$w#1@@2|) |l#0@@72|) (and (U_2_bool (MapType0Select |l#1@@63| |$w#1@@2|)) (Lexicographic__Byte__Order.__default.lte |l#2@@56| ($Unbox (SeqType BoxType) |$w#1@@2|)))))) :qid |BucketsL.612:18| :skolemid |4875| :pattern ( (MapType0Select (|lambda#258| |l#0@@72| |l#1@@63| |l#2@@56|) |$w#1@@2|)) )))
(assert (forall ((|$w#0@@10| T@U) (|l#0@@73| T@U) (|l#1@@64| T@U) (|l#2@@57| T@U) (|l#3@@45| Int) ) (!  (=> (and (and (and (= (type |$w#0@@10|) BoxType) (= (type |l#0@@73|) TyType)) (= (type |l#1@@64|) (MapType0Type BoxType boolType))) (= (type |l#2@@57|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#286| |l#0@@73| |l#1@@64| |l#2@@57| |l#3@@45|) |$w#0@@10|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@10|) |l#0@@73|) (and (U_2_bool (MapType0Select |l#1@@64| |$w#0@@10|)) (= (PivotsLib.__default.Route |l#2@@57| ($Unbox (SeqType BoxType) |$w#0@@10|)) |l#3@@45|))))) :qid |BucketsL.621:7| :skolemid |4876| :pattern ( (MapType0Select (|lambda#286| |l#0@@73| |l#1@@64| |l#2@@57| |l#3@@45|) |$w#0@@10|)) )))
(assert (forall ((|$w#0@@11| T@U) (|l#0@@74| T@U) (|l#1@@65| T@U) (|l#2@@58| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@11|) BoxType) (= (type |l#0@@74|) TyType)) (= (type |l#1@@65|) (MapType0Type BoxType boolType))) (= (type |l#2@@58|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#294| |l#0@@74| |l#1@@65| |l#2@@58|) |$w#0@@11|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@11|) |l#0@@74|) (and (U_2_bool (MapType0Select |l#1@@65| |$w#0@@11|)) (U_2_bool (MapType0Select |l#2@@58| |$w#0@@11|)))))) :qid |BucketsL.627:7| :skolemid |4877| :pattern ( (MapType0Select (|lambda#294| |l#0@@74| |l#1@@65| |l#2@@58|) |$w#0@@11|)) )))
(assert (forall ((|$w#0@@12| T@U) (|l#0@@75| T@U) (|l#1@@66| T@U) (|l#2@@59| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@12|) BoxType) (= (type |l#0@@75|) TyType)) (= (type |l#1@@66|) (MapType0Type BoxType boolType))) (= (type |l#2@@59|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#302| |l#0@@75| |l#1@@66| |l#2@@59|) |$w#0@@12|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@12|) |l#0@@75|) (and (U_2_bool (MapType0Select |l#1@@66| |$w#0@@12|)) (not (U_2_bool (MapType0Select |l#2@@59| |$w#0@@12|))))))) :qid |BucketsL.633:7| :skolemid |4878| :pattern ( (MapType0Select (|lambda#302| |l#0@@75| |l#1@@66| |l#2@@59|) |$w#0@@12|)) )))
(assert (forall ((|$w#0@@13| T@U) (|l#0@@76| T@U) (|l#1@@67| T@U) (|l#2@@60| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@13|) BoxType) (= (type |l#0@@76|) TyType)) (= (type |l#1@@67|) (MapType0Type BoxType boolType))) (= (type |l#2@@60|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#310| |l#0@@76| |l#1@@67| |l#2@@60|) |$w#0@@13|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@13|) |l#0@@76|) (or (U_2_bool (MapType0Select |l#1@@67| |$w#0@@13|)) (U_2_bool (MapType0Select |l#2@@60| |$w#0@@13|)))))) :qid |BucketsL.669:7| :skolemid |4879| :pattern ( (MapType0Select (|lambda#310| |l#0@@76| |l#1@@67| |l#2@@60|) |$w#0@@13|)) )))
(assert (forall ((|$w#0@@14| T@U) (|l#0@@77| T@U) (|l#1@@68| T@U) (|l#2@@61| T@U) (|l#3@@46| T@U) ) (!  (=> (and (and (and (and (= (type |$w#0@@14|) BoxType) (= (type |l#0@@77|) TyType)) (= (type |l#1@@68|) (MapType0Type BoxType boolType))) (= (type |l#2@@61|) DatatypeTypeType)) (= (type |l#3@@46|) DatatypeTypeType)) (= (U_2_bool (MapType0Select (|lambda#318| |l#0@@77| |l#1@@68| |l#2@@61| |l#3@@46|) |$w#0@@14|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@14|) |l#0@@77|) (and (U_2_bool (MapType0Select |l#1@@68| |$w#0@@14|)) (MapSpec.__default.InRange |l#2@@61| ($Unbox (SeqType BoxType) |$w#0@@14|) |l#3@@46|))))) :qid |BucketsL.777:7| :skolemid |4880| :pattern ( (MapType0Select (|lambda#318| |l#0@@77| |l#1@@68| |l#2@@61| |l#3@@46|) |$w#0@@14|)) )))
(assert (forall ((|$w#0@@15| T@U) (|l#0@@78| T@U) (|l#1@@69| T@U) (|l#2@@62| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@15|) BoxType) (= (type |l#0@@78|) TyType)) (= (type |l#1@@69|) (MapType0Type BoxType boolType))) (= (type |l#2@@62|) DatatypeTypeType)) (= (U_2_bool (MapType0Select (|lambda#326| |l#0@@78| |l#1@@69| |l#2@@62|) |$w#0@@15|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@15|) |l#0@@78|) (and (U_2_bool (MapType0Select |l#1@@69| |$w#0@@15|)) (MapSpec.__default.LowerBound |l#2@@62| ($Unbox (SeqType BoxType) |$w#0@@15|)))))) :qid |BucketsL.783:7| :skolemid |4881| :pattern ( (MapType0Select (|lambda#326| |l#0@@78| |l#1@@69| |l#2@@62|) |$w#0@@15|)) )))
(assert (forall ((|$w#0@@16| T@U) (|l#0@@79| T@U) (|l#1@@70| T@U) (|l#2@@63| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@16|) BoxType) (= (type |l#0@@79|) TyType)) (= (type |l#1@@70|) (MapType0Type BoxType boolType))) (= (type |l#2@@63|) DatatypeTypeType)) (= (U_2_bool (MapType0Select (|lambda#334| |l#0@@79| |l#1@@70| |l#2@@63|) |$w#0@@16|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@16|) |l#0@@79|) (and (U_2_bool (MapType0Select |l#1@@70| |$w#0@@16|)) (MapSpec.__default.UpperBound ($Unbox (SeqType BoxType) |$w#0@@16|) |l#2@@63|))))) :qid |BucketsL.789:7| :skolemid |4882| :pattern ( (MapType0Select (|lambda#334| |l#0@@79| |l#1@@70| |l#2@@63|) |$w#0@@16|)) )))
(assert (forall ((|$w#0@@17| T@U) (|l#0@@80| T@U) (|l#1@@71| T@U) (|l#2@@64| T@U) (|l#3@@47| T@U) (|l#4@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#0@@17|) BoxType) (= (type |l#0@@80|) TyType)) (= (type |l#1@@71|) (MapType0Type BoxType boolType))) (= (type |l#2@@64|) (MapType0Type BoxType BoxType))) (= (type |l#3@@47|) DatatypeTypeType)) (= (type |l#4@@4|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#342| |l#0@@80| |l#1@@71| |l#2@@64| |l#3@@47| |l#4@@4|) |$w#0@@17|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@17|) |l#0@@80|) (and (U_2_bool (MapType0Select |l#1@@71| |$w#0@@17|)) (not (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select |l#2@@64| |$w#0@@17|)) |l#3@@47|)) |l#4@@4|)))))) :qid |BucketsL.796:5| :skolemid |4883| :pattern ( (MapType0Select (|lambda#342| |l#0@@80| |l#1@@71| |l#2@@64| |l#3@@47| |l#4@@4|) |$w#0@@17|)) )))
(assert (forall ((|$w#0@@18| T@U) (|l#0@@81| T@U) (|l#1@@72| T@U) ) (!  (=> (and (and (= (type |$w#0@@18|) BoxType) (= (type |l#0@@81|) (MapType0Type BoxType BoxType))) (= (type |l#1@@72|) DatatypeTypeType)) (= (MapType0Select (|lambda#343| |l#0@@81| |l#1@@72|) |$w#0@@18|) ($Box (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select |l#0@@81| |$w#0@@18|)) |l#1@@72|))))) :qid |BucketsL.796:5| :skolemid |4884| :pattern ( (MapType0Select (|lambda#343| |l#0@@81| |l#1@@72|) |$w#0@@18|)) )))
(assert (forall ((|$y#0@@7| T@U) (|l#0@@82| Int) (|l#1@@73| Int) (|l#2@@65| T@U) (|l#3@@48| T@U) ) (!  (=> (and (and (= (type |$y#0@@7|) BoxType) (= (type |l#2@@65|) (SeqType BoxType))) (= (type |l#3@@48|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#362| |l#0@@82| |l#1@@73| |l#2@@65| |l#3@@48|) |$y#0@@7|)) (exists ((|i#0@@203| Int) ) (!  (and (and (<= |l#0@@82| |i#0@@203|) (< |i#0@@203| |l#1@@73|)) (= |$y#0@@7| (|Seq#Index| |l#2@@65| |i#0@@203|))) :qid |PivotBet.43:12| :skolemid |3956| :pattern ( (|Seq#Index| |l#3@@48| |i#0@@203|)) )))) :qid |PivotBet.43:7| :skolemid |4885| :pattern ( (MapType0Select (|lambda#362| |l#0@@82| |l#1@@73| |l#2@@65| |l#3@@48|) |$y#0@@7|)) )))
(assert (forall ((|$y#0@@8| T@U) (|l#0@@83| T@U) (|l#1@@74| T@U) (|l#2@@66| Int) (|l#3@@49| Int) (|l#4@@5| T@U) (|l#5@@2| T@U) (|l#6@@2| T@U) (|l#7@@2| Int) (|l#8@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |$y#0@@8|) BoxType) (= (type |l#0@@83|) TyType)) (= (type |l#1@@74|) (IMapType BoxType BoxType))) (= (type |l#4@@5|) BoxType)) (= (type |l#5@@2|) TyType)) (= (type |l#6@@2|) (IMapType BoxType BoxType))) (= (type |l#8@@1|) TyType)) (= (U_2_bool (MapType0Select (|lambda#364| |l#0@@83| |l#1@@74| |l#2@@66| |l#3@@49| |l#4@@5| |l#5@@2| |l#6@@2| |l#7@@2| |l#8@@1|) |$y#0@@8|)) (exists ((|path#0@@95| T@U) ) (!  (and (= (type |path#0@@95|) (SeqType BoxType)) (and (and ($Is |path#0@@95| |l#0@@83|) (and (and (PivotBetreeGraph.__default.IsPath |l#1@@74| |path#0@@95|) (< |l#2@@66| (|Seq#Length| |path#0@@95|))) (= (|Seq#Index| |path#0@@95| |l#3@@49|) |l#4@@5|))) (= |$y#0@@8| (Sequences.__default.Last |l#5@@2| |path#0@@95|)))) :qid |Graphidf.99:10| :skolemid |4015| :pattern ( (Sequences.__default.Last |l#8@@1| |path#0@@95|)) :pattern ( (|Seq#Index| |path#0@@95| |l#7@@2|)) :pattern ( (|Seq#Length| |path#0@@95|)) :pattern ( (PivotBetreeGraph.__default.IsPath |l#6@@2| |path#0@@95|)) )))) :qid |Graphidf.99:5| :skolemid |4886| :pattern ( (MapType0Select (|lambda#364| |l#0@@83| |l#1@@74| |l#2@@66| |l#3@@49| |l#4@@5| |l#5@@2| |l#6@@2| |l#7@@2| |l#8@@1|) |$y#0@@8|)) )))
(assert (forall ((|$y#0@@9| T@U) (|l#0@@84| T@U) (|l#1@@75| T@U) (|l#2@@67| T@U) (|l#3@@50| T@U) (|l#4@@6| T@U) (|l#5@@3| T@U) (|l#6@@3| T@U) (|l#7@@3| T@U) (|l#8@@2| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |$y#0@@9|) BoxType) (= (type |l#0@@84|) TyType)) (= (type |l#1@@75|) (IMapType BoxType BoxType))) (= (type |l#2@@67|) (IMapType BoxType BoxType))) (= (type |l#3@@50|) BoxType)) (= (type |l#4@@6|) TyType)) (= (type |l#5@@3|) (IMapType BoxType BoxType))) (= (type |l#6@@3|) (IMapType BoxType BoxType))) (= (type |l#7@@3|) BoxType)) (= (type |l#8@@2|) TyType)) (= (U_2_bool (MapType0Select (|lambda#366| |l#0@@84| |l#1@@75| |l#2@@67| |l#3@@50| |l#4@@6| |l#5@@3| |l#6@@3| |l#7@@3| |l#8@@2|) |$y#0@@9|)) (exists ((|path#0@@96| T@U) ) (!  (and (= (type |path#0@@96|) (SeqType BoxType)) (and (and ($Is |path#0@@96| |l#0@@84|) (PivotBetreeGraph.__default.NewPath |l#1@@75| |l#2@@67| |l#3@@50| |path#0@@96|)) (= |$y#0@@9| (Sequences.__default.Last |l#4@@6| |path#0@@96|)))) :qid |Graphidf.116:10| :skolemid |4034| :pattern ( (Sequences.__default.Last |l#8@@2| |path#0@@96|)) :pattern ( (PivotBetreeGraph.__default.NewPath |l#5@@3| |l#6@@3| |l#7@@3| |path#0@@96|)) )))) :qid |Graphidf.116:5| :skolemid |4887| :pattern ( (MapType0Select (|lambda#366| |l#0@@84| |l#1@@75| |l#2@@67| |l#3@@50| |l#4@@6| |l#5@@3| |l#6@@3| |l#7@@3| |l#8@@2|) |$y#0@@9|)) )))
(assert (forall ((|$y#0@@10| T@U) (|l#0@@85| T@U) (|l#1@@76| Int) (|l#2@@68| Int) ) (!  (=> (and (= (type |$y#0@@10|) BoxType) (= (type |l#0@@85|) TyType)) (= (U_2_bool (MapType0Select (|lambda#368| |l#0@@85| |l#1@@76| |l#2@@68|) |$y#0@@10|))  (and ($IsBox |$y#0@@10| |l#0@@85|) (and (<= |l#1@@76| (U_2_int ($Unbox intType |$y#0@@10|))) (< (U_2_int ($Unbox intType |$y#0@@10|)) |l#2@@68|))))) :qid |Setsidfy.34:5| :skolemid |4888| :pattern ( (MapType0Select (|lambda#368| |l#0@@85| |l#1@@76| |l#2@@68|) |$y#0@@10|)) )))
(assert (forall ((|$y#0@@11| T@U) (|l#0@@86| T@U) (|l#1@@77| Bool) ) (!  (=> (and (= (type |$y#0@@11|) BoxType) (= (type |l#0@@86|) TyType)) (= (U_2_bool (MapType0Select (|lambda#370| |l#0@@86| |l#1@@77|) |$y#0@@11|))  (and ($IsBox |$y#0@@11| |l#0@@86|) |l#1@@77|))) :qid |BucketWe.343:5| :skolemid |4889| :pattern ( (MapType0Select (|lambda#370| |l#0@@86| |l#1@@77|) |$y#0@@11|)) )))
(assert (forall ((|$y#0@@12| T@U) (|l#0@@87| T@U) (|l#1@@78| T@U) ) (!  (=> (and (and (= (type |$y#0@@12|) BoxType) (= (type |l#0@@87|) TyType)) (= (type |l#1@@78|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#372| |l#0@@87| |l#1@@78|) |$y#0@@12|))  (and ($IsBox |$y#0@@12| |l#0@@87|) (|Seq#Equal| ($Unbox (SeqType BoxType) |$y#0@@12|) |l#1@@78|)))) :qid |BucketWe.347:5| :skolemid |4890| :pattern ( (MapType0Select (|lambda#372| |l#0@@87| |l#1@@78|) |$y#0@@12|)) )))
(assert (forall ((|$y#0@@13| T@U) (|l#0@@88| T@U) (|l#1@@79| T@U) ) (!  (=> (and (and (= (type |$y#0@@13|) BoxType) (= (type |l#0@@88|) TyType)) (= (type |l#1@@79|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#374| |l#0@@88| |l#1@@79|) |$y#0@@13|))  (and ($IsBox |$y#0@@13| |l#0@@88|) (not (|Seq#Equal| ($Unbox (SeqType BoxType) |$y#0@@13|) |l#1@@79|))))) :qid |BucketWe.351:5| :skolemid |4891| :pattern ( (MapType0Select (|lambda#374| |l#0@@88| |l#1@@79|) |$y#0@@13|)) )))
(assert (forall ((|$y#0@@14| T@U) (|l#0@@89| T@U) (|l#1@@80| T@U) (|l#2@@69| Int) ) (!  (=> (and (and (= (type |$y#0@@14|) BoxType) (= (type |l#0@@89|) TyType)) (= (type |l#1@@80|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#394| |l#0@@89| |l#1@@80| |l#2@@69|) |$y#0@@14|))  (and ($IsBox |$y#0@@14| |l#0@@89|) (< (PivotsLib.__default.Route |l#1@@80| ($Unbox (SeqType BoxType) |$y#0@@14|)) |l#2@@69|)))) :qid |BucketWe.1062:5| :skolemid |4892| :pattern ( (MapType0Select (|lambda#394| |l#0@@89| |l#1@@80| |l#2@@69|) |$y#0@@14|)) )))
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.lte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_PivotsLib._default.CutoffForLeft () T@U)
(declare-fun StartFuelAssert_PivotsLib._default.CutoffForRight () T@U)
(declare-fun StartFuelAssert_Multisets._default.Choose () T@U)
(declare-fun StartFuelAssert_Multisets._default.Apply () T@U)
(declare-fun StartFuelAssert_Multisets._default.Fold () T@U)
(declare-fun StartFuelAssert_Multisets._default.IsIdentity () T@U)
(declare-fun StartFuelAssert_Multisets._default.IsCommutative () T@U)
(declare-fun StartFuelAssert_Multisets._default.IsAssociative () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.BucketMapOfSeq () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.B () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.BucketIntersect () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.BucketComplement () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.Compose () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.ComposeSeq () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.ClampRange () T@U)
(declare-fun StartFuel_BucketsLib._default.ClampStart () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.ClampStart () T@U)
(declare-fun StartFuel_BucketsLib._default.ClampEnd () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.ClampEnd () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.KeyValueMapOfBucket () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SplitBucketInList () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.MergeBuckets () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.MergeBucketsInList () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.WeightKeyMultiset () T@U)
(declare-fun StartFuel_BucketWeights._default.WeightKeySeq () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.WeightKeySeq () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.WeightMessageMultiset () T@U)
(declare-fun StartFuel_BucketWeights._default.WeightMessageSeq () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.WeightMessageSeq () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.WeightBucketList () T@U)
(declare-fun StartFuel_BucketWeights._default.Image () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.Image () T@U)
(declare-fun StartFuelAssert_PivotBetreeSpec._default.LookupUpperBound () T@U)
(declare-fun StartFuelAssert_PivotBetreeSpec._default.CutoffNodeAndKeepLeft () T@U)
(declare-fun StartFuelAssert_PivotBetreeSpec._default.CutoffNodeAndKeepRight () T@U)
(declare-fun StartFuelAssert_PivotBetreeSpec._default.CutoffNode () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@@121 () T@U)
(declare-fun |r#0@@18| () T@U)
(declare-fun |##node#2@0| () T@U)
(declare-fun |leaf##0@0| () T@U)
(declare-fun |pivots##0@0| () T@U)
(declare-fun TType () T@T)
(declare-fun type@@0 (T@U) T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%@2 () Bool)
(declare-fun %lbl%@3 () Bool)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%@5 () Bool)
(declare-fun %lbl%@6 () Bool)
(declare-fun %lbl%@7 () Bool)
(declare-fun %lbl%@8 () Bool)
(declare-fun %lbl%@9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun %lbl%@11 () Bool)
(declare-fun %lbl%@12 () Bool)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%@14 () Bool)
(declare-fun %lbl%@15 () Bool)
(declare-fun %lbl%@16 () Bool)
(declare-fun %lbl%@17 () Bool)
(declare-fun %lbl%@18 () Bool)
(declare-fun %lbl%@19 () Bool)
(declare-fun %lbl%@20 () Bool)
(declare-fun $o@@110 () T@U)
(declare-fun $f@@50 () T@U)
(declare-fun %lbl%@21 () Bool)
(declare-fun %lbl%@22 () Bool)
(declare-fun %lbl%@23 () Bool)
(declare-fun %lbl%@24 () Bool)
(declare-fun %lbl%@25 () Bool)
(declare-fun %lbl%@26 () Bool)
(declare-fun %lbl%@27 () Bool)
(declare-fun %lbl%@28 () Bool)
(declare-fun %lbl%@29 () Bool)
(declare-fun %lbl%@30 () Bool)
(declare-fun %lbl%@31 () Bool)
(declare-fun %lbl%@32 () Bool)
(declare-fun %lbl%+33 () Bool)
(declare-fun $FunctionContextHeight () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType) (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.lte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuelAssert_PivotsLib._default.CutoffForLeft) LayerTypeType)) (= (type StartFuelAssert_PivotsLib._default.CutoffForRight) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.Choose) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.Apply) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.Fold) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.IsIdentity) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.IsCommutative) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.IsAssociative) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.BucketMapOfSeq) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.B) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.BucketIntersect) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.BucketComplement) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.Compose) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.ComposeSeq) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.ClampRange) LayerTypeType)) (= (type StartFuel_BucketsLib._default.ClampStart) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.ClampStart) LayerTypeType)) (= (type StartFuel_BucketsLib._default.ClampEnd) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.ClampEnd) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.KeyValueMapOfBucket) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.SplitBucketInList) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.MergeBuckets) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.MergeBucketsInList) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.WeightKeyMultiset) LayerTypeType)) (= (type StartFuel_BucketWeights._default.WeightKeySeq) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.WeightKeySeq) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.WeightMessageMultiset) LayerTypeType)) (= (type StartFuel_BucketWeights._default.WeightMessageSeq) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.WeightMessageSeq) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.WeightBucketList) LayerTypeType)) (= (type StartFuel_BucketWeights._default.Image) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.Image) LayerTypeType)) (= (type StartFuelAssert_PivotBetreeSpec._default.LookupUpperBound) LayerTypeType)) (= (type StartFuelAssert_PivotBetreeSpec._default.CutoffNodeAndKeepLeft) LayerTypeType)) (= (type StartFuelAssert_PivotBetreeSpec._default.CutoffNodeAndKeepRight) LayerTypeType)) (= (type StartFuelAssert_PivotBetreeSpec._default.CutoffNode) LayerTypeType)) (= (type $_Frame@0) (MapType9Type refType boolType))) (= (type $Heap@@121) (MapType0Type refType MapType1Type))) (= (type |r#0@@18|) DatatypeTypeType)) (= (type |##node#2@0|) DatatypeTypeType)) (= (type |leaf##0@0|) DatatypeTypeType)) (= (type |pivots##0@0|) (SeqType BoxType))) (= (Ctor TType) 29)) (forall ((arg0@@724 T@U) ) (! (= (type (type@@0 arg0@@724)) TType) :qid |funType:type| :pattern ( (type@@0 arg0@@724)) ))) (= (type $Heap@0) (MapType0Type refType MapType1Type))))
(push 1)
(set-info :boogie-vc-id Impl$$PivotBetreeSpecWFNodes.__default.ValidRepivotWFNodes)
(assert (not (let ((anon0_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (=> (and (and (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte) (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte)) (and (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes))) (=> (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range) (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range)) (and (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove) (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove)) (and (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert) (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert)))) (=> (and (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2) (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2)) (and (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1) (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat) (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat)) (and (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3) (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3)))) (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq) (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq)) (and (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix)) (and (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate))))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex)) (and (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate)) (and (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip) (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip)))) (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip) (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip)) (and (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape))) (and (and (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength)) (and (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten) (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten))))) (and (and (and (and (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill) (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill)) (and (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove) (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove))) (and (and (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong)) (and (= (AsFuelBottom StartFuel_Maps._default.MapRemove1) StartFuel_Maps._default.MapRemove1) (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1) StartFuelAssert_Maps._default.MapRemove1)))) (and (and (and (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong)) (and (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove))) (and (and (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1)) (and (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion)))))) (=> (and (and (and (and (and (and (and (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA)) (and (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB))) (and (and (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion) (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion)) (and (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA)))) (and (and (and (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB)) (and (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion) (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion))) (and (and (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.lte) StartFuel_Byte_Order._default.lte) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.lte) StartFuelAssert_Byte_Order._default.lte))))) (and (and (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.ltedef) StartFuel_Byte_Order._default.ltedef) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.ltedef) StartFuelAssert_Byte_Order._default.ltedef)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte))) (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.NotMinimum) StartFuel_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.NotMinimum) StartFuelAssert_Byte_Order._default.NotMinimum)))) (and (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.SortedSeqForMap) StartFuel_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Byte_Order._default.SortedSeqForMap)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.minimum) StartFuel_Byte_Order._default.minimum) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimum) StartFuelAssert_Byte_Order._default.minimum))) (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.minimumOpt) StartFuel_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimumOpt) StartFuelAssert_Byte_Order._default.minimumOpt)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.maximum) StartFuel_Byte_Order._default.maximum) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximum) StartFuelAssert_Byte_Order._default.maximum)))))) (and (and (and (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.maximumOpt) StartFuel_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximumOpt) StartFuelAssert_Byte_Order._default.maximumOpt)) (and (= (AsFuelBottom StartFuel_Byte_Order._default.IsSorted) StartFuel_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsSorted) StartFuelAssert_Byte_Order._default.IsSorted))) (and (and (= (AsFuelBottom StartFuel_Byte_Order._default.IsStrictlySorted) StartFuel_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Byte_Order._default.IsStrictlySorted)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))) (and (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.NotMinimum) StartFuel_Lexicographic_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum))) (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimum) StartFuel_Lexicographic_Byte_Order._default.minimum) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimum) StartFuelAssert_Lexicographic_Byte_Order._default.minimum))))) (and (and (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimumOpt) StartFuel_Lexicographic_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximum) StartFuel_Lexicographic_Byte_Order._default.maximum) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximum) StartFuelAssert_Lexicographic_Byte_Order._default.maximum))) (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximumOpt) StartFuel_Lexicographic_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt)) (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsSorted) StartFuel_Lexicographic_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted)))) (and (and (and (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted)) (and (= (AsFuelBottom StartFuel_PivotsLib._default.CutoffForLeft) StartFuel_PivotsLib._default.CutoffForLeft) (= (AsFuelBottom StartFuelAssert_PivotsLib._default.CutoffForLeft) StartFuelAssert_PivotsLib._default.CutoffForLeft))) (and (and (= (AsFuelBottom StartFuel_PivotsLib._default.CutoffForRight) StartFuel_PivotsLib._default.CutoffForRight) (= (AsFuelBottom StartFuelAssert_PivotsLib._default.CutoffForRight) StartFuelAssert_PivotsLib._default.CutoffForRight)) (and (= (AsFuelBottom StartFuel_Multisets._default.Choose) StartFuel_Multisets._default.Choose) (= (AsFuelBottom StartFuelAssert_Multisets._default.Choose) StartFuelAssert_Multisets._default.Choose))))))) (and (and (and (and (and (and (= (AsFuelBottom StartFuel_Multisets._default.Apply) StartFuel_Multisets._default.Apply) (= (AsFuelBottom StartFuelAssert_Multisets._default.Apply) StartFuelAssert_Multisets._default.Apply)) (and (= (AsFuelBottom StartFuel_Multisets._default.Fold) StartFuel_Multisets._default.Fold) (= (AsFuelBottom StartFuelAssert_Multisets._default.Fold) StartFuelAssert_Multisets._default.Fold))) (and (and (= (AsFuelBottom StartFuel_Multisets._default.IsIdentity) StartFuel_Multisets._default.IsIdentity) (= (AsFuelBottom StartFuelAssert_Multisets._default.IsIdentity) StartFuelAssert_Multisets._default.IsIdentity)) (and (= (AsFuelBottom StartFuel_Multisets._default.IsCommutative) StartFuel_Multisets._default.IsCommutative) (= (AsFuelBottom StartFuelAssert_Multisets._default.IsCommutative) StartFuelAssert_Multisets._default.IsCommutative)))) (and (and (and (= (AsFuelBottom StartFuel_Multisets._default.IsAssociative) StartFuel_Multisets._default.IsAssociative) (= (AsFuelBottom StartFuelAssert_Multisets._default.IsAssociative) StartFuelAssert_Multisets._default.IsAssociative)) (and (= (AsFuelBottom StartFuel_BucketsLib._default.BucketMapOfSeq) StartFuel_BucketsLib._default.BucketMapOfSeq) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.BucketMapOfSeq) StartFuelAssert_BucketsLib._default.BucketMapOfSeq))) (and (and (= (AsFuelBottom StartFuel_BucketsLib._default.B) StartFuel_BucketsLib._default.B) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.B) StartFuelAssert_BucketsLib._default.B)) (and (= (AsFuelBottom StartFuel_BucketsLib._default.BucketIntersect) StartFuel_BucketsLib._default.BucketIntersect) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.BucketIntersect) StartFuelAssert_BucketsLib._default.BucketIntersect))))) (and (and (and (and (= (AsFuelBottom StartFuel_BucketsLib._default.BucketComplement) StartFuel_BucketsLib._default.BucketComplement) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.BucketComplement) StartFuelAssert_BucketsLib._default.BucketComplement)) (and (= (AsFuelBottom StartFuel_BucketsLib._default.Compose) StartFuel_BucketsLib._default.Compose) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.Compose) StartFuelAssert_BucketsLib._default.Compose))) (and (and (= (AsFuelBottom StartFuel_BucketsLib._default.ComposeSeq) StartFuel_BucketsLib._default.ComposeSeq) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.ComposeSeq) StartFuelAssert_BucketsLib._default.ComposeSeq)) (and (= (AsFuelBottom StartFuel_BucketsLib._default.ClampRange) StartFuel_BucketsLib._default.ClampRange) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.ClampRange) StartFuelAssert_BucketsLib._default.ClampRange)))) (and (and (and (= (AsFuelBottom StartFuel_BucketsLib._default.ClampStart) StartFuel_BucketsLib._default.ClampStart) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.ClampStart) StartFuelAssert_BucketsLib._default.ClampStart)) (and (= (AsFuelBottom StartFuel_BucketsLib._default.ClampEnd) StartFuel_BucketsLib._default.ClampEnd) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.ClampEnd) StartFuelAssert_BucketsLib._default.ClampEnd))) (and (and (= (AsFuelBottom StartFuel_BucketsLib._default.KeyValueMapOfBucket) StartFuel_BucketsLib._default.KeyValueMapOfBucket) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.KeyValueMapOfBucket) StartFuelAssert_BucketsLib._default.KeyValueMapOfBucket)) (and (= (AsFuelBottom StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap) StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap) StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap)))))) (and (and (and (and (and (= (AsFuelBottom StartFuel_BucketsLib._default.SplitBucketLeft) StartFuel_BucketsLib._default.SplitBucketLeft) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SplitBucketLeft) StartFuelAssert_BucketsLib._default.SplitBucketLeft)) (and (= (AsFuelBottom StartFuel_BucketsLib._default.SplitBucketRight) StartFuel_BucketsLib._default.SplitBucketRight) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SplitBucketRight) StartFuelAssert_BucketsLib._default.SplitBucketRight))) (and (and (= (AsFuelBottom StartFuel_BucketsLib._default.SplitBucketInList) StartFuel_BucketsLib._default.SplitBucketInList) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SplitBucketInList) StartFuelAssert_BucketsLib._default.SplitBucketInList)) (and (= (AsFuelBottom StartFuel_BucketsLib._default.MergeBuckets) StartFuel_BucketsLib._default.MergeBuckets) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.MergeBuckets) StartFuelAssert_BucketsLib._default.MergeBuckets)))) (and (and (and (= (AsFuelBottom StartFuel_BucketsLib._default.MergeBucketsInList) StartFuel_BucketsLib._default.MergeBucketsInList) (= (AsFuelBottom StartFuelAssert_BucketsLib._default.MergeBucketsInList) StartFuelAssert_BucketsLib._default.MergeBucketsInList)) (and (= (AsFuelBottom StartFuel_BucketWeights._default.WeightKeyMultiset) StartFuel_BucketWeights._default.WeightKeyMultiset) (= (AsFuelBottom StartFuelAssert_BucketWeights._default.WeightKeyMultiset) StartFuelAssert_BucketWeights._default.WeightKeyMultiset))) (and (and (= (AsFuelBottom StartFuel_BucketWeights._default.WeightKeySeq) StartFuel_BucketWeights._default.WeightKeySeq) (= (AsFuelBottom StartFuelAssert_BucketWeights._default.WeightKeySeq) StartFuelAssert_BucketWeights._default.WeightKeySeq)) (and (= (AsFuelBottom StartFuel_BucketWeights._default.WeightMessageMultiset) StartFuel_BucketWeights._default.WeightMessageMultiset) (= (AsFuelBottom StartFuelAssert_BucketWeights._default.WeightMessageMultiset) StartFuelAssert_BucketWeights._default.WeightMessageMultiset))))) (and (and (and (and (= (AsFuelBottom StartFuel_BucketWeights._default.WeightMessageSeq) StartFuel_BucketWeights._default.WeightMessageSeq) (= (AsFuelBottom StartFuelAssert_BucketWeights._default.WeightMessageSeq) StartFuelAssert_BucketWeights._default.WeightMessageSeq)) (and (= (AsFuelBottom StartFuel_BucketWeights._default.WeightBucketList) StartFuel_BucketWeights._default.WeightBucketList) (= (AsFuelBottom StartFuelAssert_BucketWeights._default.WeightBucketList) StartFuelAssert_BucketWeights._default.WeightBucketList))) (and (and (= (AsFuelBottom StartFuel_BucketWeights._default.Image) StartFuel_BucketWeights._default.Image) (= (AsFuelBottom StartFuelAssert_BucketWeights._default.Image) StartFuelAssert_BucketWeights._default.Image)) (and (= (AsFuelBottom StartFuel_PivotBetreeSpec._default.LookupUpperBound) StartFuel_PivotBetreeSpec._default.LookupUpperBound) (= (AsFuelBottom StartFuelAssert_PivotBetreeSpec._default.LookupUpperBound) StartFuelAssert_PivotBetreeSpec._default.LookupUpperBound)))) (and (and (and (= (AsFuelBottom StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft) StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepLeft) (= (AsFuelBottom StartFuelAssert_PivotBetreeSpec._default.CutoffNodeAndKeepLeft) StartFuelAssert_PivotBetreeSpec._default.CutoffNodeAndKeepLeft)) (and (= (AsFuelBottom StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepRight) StartFuel_PivotBetreeSpec._default.CutoffNodeAndKeepRight) (= (AsFuelBottom StartFuelAssert_PivotBetreeSpec._default.CutoffNodeAndKeepRight) StartFuelAssert_PivotBetreeSpec._default.CutoffNodeAndKeepRight))) (and (and (= (AsFuelBottom StartFuel_PivotBetreeSpec._default.CutoffNode) StartFuel_PivotBetreeSpec._default.CutoffNode) (= (AsFuelBottom StartFuelAssert_PivotBetreeSpec._default.CutoffNode) StartFuelAssert_PivotBetreeSpec._default.CutoffNode)) (and (= $_Frame@0 (|lambda#29| null $Heap@@121 alloc false)) ($IsAlloc |r#0@@18| Tclass.PivotBetreeSpec.Repivot $Heap@@121)))))))) (and (! (or %lbl%@1  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (= (PivotsLib.__default.NumBuckets (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.Repivot.leaf |r#0@@18|))))))))) :lblneg @1) (and (! (or %lbl%@2  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) (= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.Repivot.leaf |r#0@@18|)))))))))))) :lblneg @2) (and (! (or %lbl%@3  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) (or (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.Repivot.leaf |r#0@@18|)))))))))) :lblneg @3) (and (! (or %lbl%@4  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) (or (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) (=> (> (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (LitInt 0)))))))))))) :lblneg @4) (and (! (or %lbl%@5  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.Repivot.leaf |r#0@@18|)))))))) :lblneg @5) (and (! (or %lbl%@6  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (=> (|PivotBetreeSpec.__default.BoundedNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (or (PivotBetreeSpec.__default.BoundedNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) (LitInt Bounds.__default.MaxNumChildren))))))))) :lblneg @6) (and (! (or %lbl%@7  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (=> (|PivotBetreeSpec.__default.BoundedNode#canCall| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (or (PivotBetreeSpec.__default.BoundedNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (<= (BucketWeights.__default.WeightBucketList StartFuelAssert_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.Repivot.leaf |r#0@@18|))) (LitInt Bounds.__default.MaxTotalBucketWeight))))))))) :lblneg @7) (and (! (or %lbl%@8  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.Repivot.leaf |r#0@@18|)))))) :lblneg @8) (and (! (or %lbl%@9  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeSpec.Repivot.pivots |r#0@@18|)) (or (PivotsLib.__default.WFPivots (PivotBetreeSpec.Repivot.pivots |r#0@@18|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (PivotBetreeSpec.Repivot.pivots |r#0@@18|))))))) :lblneg @9) (and (! (or %lbl%@10  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeSpec.Repivot.pivots |r#0@@18|)) (or (PivotsLib.__default.WFPivots (PivotBetreeSpec.Repivot.pivots |r#0@@18|)) (=> (> (|Seq#Length| (PivotBetreeSpec.Repivot.pivots |r#0@@18|)) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeSpec.Repivot.pivots |r#0@@18|) (LitInt 0)))))))))) :lblneg @10) (and (! (or %lbl%@11  (=> (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (or (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (<= (|Seq#Length| (PivotBetreeSpec.Repivot.pivots |r#0@@18|)) (LitInt (- Bounds.__default.MaxNumChildren 1)))))) :lblneg @11) (=> (|PivotBetreeSpec.__default.RepivotReads#canCall| |r#0@@18|) (and (! (or %lbl%@12  (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|))))) :lblneg @12) (=> (and (and (and (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))) (= |##node#2@0| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (and ($IsAlloc |##node#2@0| Tclass.PivotBetreeGraph.Node $Heap@@121) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))))) (and (and (|PivotBetreeSpec.__default.RepivotReads#canCall| |r#0@@18|) (PivotBetreeGraph.ReadOp.ReadOp_q ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))))) (and (! (or %lbl%@13  (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (= (PivotsLib.__default.NumBuckets (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))))))) :lblneg @13) (and (! (or %lbl%@14  (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))))))))))) :lblneg @14) (and (! (or %lbl%@15  (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (or (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))))))))) :lblneg @15) (and (! (or %lbl%@16  (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (or (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (=> (> (|Seq#Length| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (LitInt 0)))))))))) :lblneg @16) (and (! (or %lbl%@17  (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (PivotBetreeGraph.Node.pivotTable (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))))))) :lblneg @17) (and (! (or %lbl%@18  (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (=> (|PivotBetreeSpec.__default.BoundedNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (or (PivotBetreeSpec.__default.BoundedNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (LitInt Bounds.__default.MaxNumChildren))))))) :lblneg @18) (and (! (or %lbl%@19  (=> (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (or (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (=> (|PivotBetreeSpec.__default.BoundedNode#canCall| (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (or (PivotBetreeSpec.__default.BoundedNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (<= (BucketWeights.__default.WeightBucketList StartFuelAssert_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0)))))) (LitInt Bounds.__default.MaxTotalBucketWeight))))))) :lblneg @19) (=> (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) (LitInt 0))))) (=> (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@18|) (PivotBetreeSpec.Repivot.Repivot_q |r#0@@18|)) (=> (and (and (= |leaf##0@0| (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (PivotBetreeSpec.Repivot.Repivot_q |r#0@@18|)) (and (PivotBetreeSpec.Repivot.Repivot_q |r#0@@18|) (= |pivots##0@0| (PivotBetreeSpec.Repivot.pivots |r#0@@18|)))) (and (! (or %lbl%@20 (forall (($o@@111 T@U) ($f@@51 T@U) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (= (type $o@@111) refType) (= (type $f@@51) (FieldType alpha@@57))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@111 $f@@51)))) :qid |PivotBet.459:19| :skolemid |1589| :no-pattern (type $o@@111) :no-pattern (type $f@@51) :no-pattern (U_2_int $o@@111) :no-pattern (U_2_bool $o@@111) :no-pattern (U_2_int $f@@51) :no-pattern (U_2_bool $f@@51) ))) :lblneg @20) (=> (forall (($o@@112 T@U) ($f@@52 T@U) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (= (type $o@@112) refType) (= (type $f@@52) (FieldType alpha@@58))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@112 $f@@52)))) :qid |PivotBet.459:19| :skolemid |1589| :no-pattern (type@@0 $o@@110) :no-pattern (type@@0 $f@@50) :no-pattern (type $o@@112) :no-pattern (type $f@@52) :no-pattern (U_2_int $o@@112) :no-pattern (U_2_bool $o@@112) :no-pattern (U_2_int $f@@52) :no-pattern (U_2_bool $f@@52) )) (and (! (or %lbl%@21  (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (= (PivotsLib.__default.NumBuckets (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (|Seq#Length| (PivotBetreeGraph.Node.buckets |leaf##0@0|)))))) :lblneg @21) (=> (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (= (PivotsLib.__default.NumBuckets (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (|Seq#Length| (PivotBetreeGraph.Node.buckets |leaf##0@0|))))) (and (! (or %lbl%@22  (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |leaf##0@0|)) (= (|Seq#Length| (PivotBetreeGraph.Node.buckets |leaf##0@0|)) (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |leaf##0@0|))))))))) :lblneg @22) (=> (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children |leaf##0@0|)) (= (|Seq#Length| (PivotBetreeGraph.Node.buckets |leaf##0@0|)) (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children |leaf##0@0|)))))))) (and (! (or %lbl%@23  (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (or (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (PivotBetreeGraph.Node.pivotTable |leaf##0@0|))))))) :lblneg @23) (=> (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (or (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)))))) (and (! (or %lbl%@24  (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (or (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (=> (> (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable |leaf##0@0|) (LitInt 0)))))))))) :lblneg @24) (=> (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (|PivotsLib.__default.WFPivots#canCall| (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (or (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) (=> (> (|Seq#Length| (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| (PivotBetreeGraph.Node.pivotTable |leaf##0@0|) (LitInt 0))))))))) (and (! (or %lbl%@25  (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets |leaf##0@0|) (PivotBetreeGraph.Node.pivotTable |leaf##0@0|))))) :lblneg @25) (=> (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets |leaf##0@0|) (PivotBetreeGraph.Node.pivotTable |leaf##0@0|)))) (and (! (or %lbl%@26  (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (|PivotBetreeSpec.__default.BoundedNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.BoundedNode |leaf##0@0|) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets |leaf##0@0|)) (LitInt Bounds.__default.MaxNumChildren))))))) :lblneg @26) (=> (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (|PivotBetreeSpec.__default.BoundedNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.BoundedNode |leaf##0@0|) (<= (|Seq#Length| (PivotBetreeGraph.Node.buckets |leaf##0@0|)) (LitInt Bounds.__default.MaxNumChildren)))))) (and (! (or %lbl%@27  (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (|PivotBetreeSpec.__default.BoundedNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.BoundedNode |leaf##0@0|) (<= (BucketWeights.__default.WeightBucketList StartFuelAssert_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets |leaf##0@0|)) (LitInt Bounds.__default.MaxTotalBucketWeight))))))) :lblneg @27) (=> (=> (|PivotBetreeSpec.__default.WFNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.WFNode |leaf##0@0|) (=> (|PivotBetreeSpec.__default.BoundedNode#canCall| |leaf##0@0|) (or (PivotBetreeSpec.__default.BoundedNode |leaf##0@0|) (<= (BucketWeights.__default.WeightBucketList StartFuelAssert_BucketWeights._default.WeightBucketList (PivotBetreeGraph.Node.buckets |leaf##0@0|)) (LitInt Bounds.__default.MaxTotalBucketWeight)))))) (and (! (or %lbl%@28 (Options.Option.None_q (PivotBetreeGraph.Node.children |leaf##0@0|))) :lblneg @28) (=> (Options.Option.None_q (PivotBetreeGraph.Node.children |leaf##0@0|)) (and (! (or %lbl%@29  (=> (|PivotsLib.__default.WFPivots#canCall| |pivots##0@0|) (or (PivotsLib.__default.WFPivots |pivots##0@0|) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |pivots##0@0|)))) :lblneg @29) (=> (=> (|PivotsLib.__default.WFPivots#canCall| |pivots##0@0|) (or (PivotsLib.__default.WFPivots |pivots##0@0|) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |pivots##0@0|))) (and (! (or %lbl%@30  (=> (|PivotsLib.__default.WFPivots#canCall| |pivots##0@0|) (or (PivotsLib.__default.WFPivots |pivots##0@0|) (=> (> (|Seq#Length| |pivots##0@0|) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| |pivots##0@0| (LitInt 0)))))))) :lblneg @30) (=> (=> (|PivotsLib.__default.WFPivots#canCall| |pivots##0@0|) (or (PivotsLib.__default.WFPivots |pivots##0@0|) (=> (> (|Seq#Length| |pivots##0@0|) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| |pivots##0@0| (LitInt 0))))))) (and (! (or %lbl%@31 (<= (|Seq#Length| |pivots##0@0|) (LitInt (- Bounds.__default.MaxNumChildren 1)))) :lblneg @31) (=> (<= (|Seq#Length| |pivots##0@0|) (LitInt (- Bounds.__default.MaxNumChildren 1))) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (|PivotBetreeSpec.__default.ApplyRepivot#canCall| |leaf##0@0| |pivots##0@0|) (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|)))) (and (and (|PivotBetreeSpec.__default.WFNode#canCall| (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|)) (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|)) (and (and (and (and (= (PivotsLib.__default.NumBuckets (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|))) (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|)))) (=> (Options.Option.Some_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|))) (= (|Seq#Length| (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|))) (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (PivotBetreeGraph.Node.children (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|)))))))) (PivotsLib.__default.WFPivots (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|)))) (BucketsLib.__default.WFBucketList (PivotBetreeGraph.Node.buckets (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|)) (PivotBetreeGraph.Node.pivotTable (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|)))) (PivotBetreeSpec.__default.BoundedNode (PivotBetreeSpec.__default.ApplyRepivot |leaf##0@0| |pivots##0@0|))))) (= $Heap@@121 $Heap@0))) (! (or %lbl%@32 (forall ((|i#3@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@26|) (< |i#3@@26| (|Seq#Length| (PivotBetreeSpec.__default.RepivotOps |r#0@@18|)))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.Op.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotOps |r#0@@18|) |i#3@@26|))))) :qid |PivotBet.456:18| :skolemid |1588| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotOps |r#0@@18|) |i#3@@26|))) ))) :lblneg @32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+33 true) :lblpos +33) (=> (and ($IsGoodHeap $Heap@@121) ($IsHeapAnchor $Heap@@121)) (=> (and (and (and (and ($Is |r#0@@18| Tclass.PivotBetreeSpec.Repivot) ($IsAlloc |r#0@@18| Tclass.PivotBetreeSpec.Repivot $Heap@@121)) (|$IsA#PivotBetreeSpec.Repivot| |r#0@@18|)) (= 20 $FunctionContextHeight)) (and (and (|PivotBetreeSpec.__default.ValidRepivot#canCall| |r#0@@18|) (and (PivotBetreeSpec.__default.ValidRepivot |r#0@@18|) (and (and (and (PivotBetreeSpec.__default.WFNode (PivotBetreeSpec.Repivot.leaf |r#0@@18|)) (Options.Option.None_q (PivotBetreeGraph.Node.children (PivotBetreeSpec.Repivot.leaf |r#0@@18|)))) (PivotsLib.__default.WFPivots (PivotBetreeSpec.Repivot.pivots |r#0@@18|))) (<= (|Seq#Length| (PivotBetreeSpec.Repivot.pivots |r#0@@18|)) (LitInt (- Bounds.__default.MaxNumChildren 1)))))) (forall ((|i#1@@107| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@107|) (< |i#1@@107| (|Seq#Length| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|)))) (PivotBetreeSpec.__default.WFNode (PivotBetreeGraph.ReadOp.node ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) |i#1@@107|))))) :qid |PivotBet.455:19| :skolemid |1586| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetreeSpec.__default.RepivotReads |r#0@@18|) |i#1@@107|))) )))) anon0_correct))))) PreconditionGeneratedEntry_correct)) ))
(check-sat)
