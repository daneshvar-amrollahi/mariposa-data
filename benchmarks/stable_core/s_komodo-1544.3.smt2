(set-option :auto-config false)
(set-option :produce-unsat-cores false)
(set-option :smt.mbqi.max_iterations 10000000)
(set-option :smt.relevancy 0)
(declare-fun c2 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(define-fun e3 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (c2 c0 c1))
(define-fun e4 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e5 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (bvult (e3 c0 c1) (e4 c0 c1)))
(define-fun e6 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv4 64))
(declare-fun c7 ((_ BitVec 64)) (_ BitVec 64))
(define-fun e8 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (c7 (e3 c0 c1)))
(define-fun e9 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e6 c0 c1) (e8 c0 c1)))
(define-fun e10 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e5 c0 c1) (e9 c0 c1)))
(declare-fun c11 ((_ BitVec 64)) (_ BitVec 64))
(define-fun e12 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (c11 c0))
(define-fun e13 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (c11 (e3 c0 c1)))
(define-fun e14 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e12 c0 c1) (e13 c0 c1)))
(define-fun e15 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e10 c0 c1) (e14 c0 c1)))
(define-fun e16 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (bvult c0 (e4 c0 c1)))
(define-fun e17 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv3 64))
(define-fun e18 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (c7 c0))
(define-fun e19 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e17 c0 c1) (e18 c0 c1)))
(define-fun e20 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e16 c0 c1) (e19 c0 c1)))
(declare-fun c21 ((_ BitVec 64) (_ BitVec 64)) Bool)
(define-fun e22 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (c21 c0 c1))
(define-fun e23 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv512 64))
(define-fun e24 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (bvult c1 (e23 c0 c1)))
(define-fun e25 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (bvult (e12 c0 c1) (e4 c0 c1)))
(define-fun e26 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv1 64))
(define-fun e27 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (c7 (e12 c0 c1)))
(define-fun e28 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e26 c0 c1) (e27 c0 c1)))
(define-fun e29 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e25 c0 c1) (e28 c0 c1)))
(define-fun e30 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv2 64))
(declare-fun c31 () Bool)
(declare-fun c32 () (_ BitVec 64))
(define-fun e33 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= c32 (e12 c0 c1)))
(declare-fun c34 () (_ BitVec 64))
(declare-fun c35 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(define-fun e36 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (c35 (e12 c0 c1) (e30 c0 c1)))
(define-fun e37 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (ite (e33 c0 c1) c34 (e36 c0 c1)))
(define-fun e38 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (ite c31 (e37 c0 c1) (e36 c0 c1)))
(define-fun e39 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e30 c0 c1) (e38 c0 c1)))
(define-fun e40 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e39 c0 c1)))
(define-fun e41 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e16 c0 c1) (e24 c0 c1) (e29 c0 c1) (e40 c0 c1)))
(define-fun e42 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e20 c0 c1) (e22 c0 c1) (e41 c0 c1)))
(define-fun e43 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e42 c0 c1)))
(define-fun e44 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e15 c0 c1) (e43 c0 c1)))
(define-fun e45 () Bool (forall ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (e44 c0 c1)))
(define-fun e46 () (_ BitVec 64) (_ bv1024 64))
(define-fun e47 () Bool (bvult c32 e46))
(define-fun e48 () (_ BitVec 64) (_ bv2 64))
(define-fun e49 () (_ BitVec 64) (c7 c32))
(define-fun e50 () Bool (= e48 e49))
(define-fun e51 () Bool (and e47 e50))
(define-fun e52 () Bool (not c31))
(define-fun e53 () Bool (or e51 e52))
(define-fun e54 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(define-fun e55 ((c0 (_ BitVec 64))) (_ BitVec 64) (c35 c0 (e54 c0)))
(define-fun e56 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e57 ((c0 (_ BitVec 64))) Bool (bvult (e55 c0) (e56 c0)))
(define-fun e58 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv3 64))
(define-fun e59 ((c0 (_ BitVec 64))) (_ BitVec 64) (c7 (e55 c0)))
(define-fun e60 ((c0 (_ BitVec 64))) Bool (= (e58 c0) (e59 c0)))
(define-fun e61 ((c0 (_ BitVec 64))) Bool (and (e57 c0) (e60 c0)))
(define-fun e62 ((c0 (_ BitVec 64))) (_ BitVec 64) (c11 (e55 c0)))
(define-fun e63 ((c0 (_ BitVec 64))) Bool (= c0 (e62 c0)))
(define-fun e64 ((c0 (_ BitVec 64))) Bool (and (e61 c0) (e63 c0)))
(define-fun e65 ((c0 (_ BitVec 64))) Bool (bvult c0 (e56 c0)))
(define-fun e66 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv1 64))
(define-fun e67 ((c0 (_ BitVec 64))) (_ BitVec 64) (c7 c0))
(define-fun e68 ((c0 (_ BitVec 64))) Bool (= (e66 c0) (e67 c0)))
(define-fun e69 ((c0 (_ BitVec 64))) Bool (and (e65 c0) (e68 c0)))
(define-fun e70 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv2 64))
(define-fun e71 ((c0 (_ BitVec 64))) (_ BitVec 64) (c35 c0 (e70 c0)))
(define-fun e72 ((c0 (_ BitVec 64))) Bool (= (e70 c0) (e71 c0)))
(define-fun e73 ((c0 (_ BitVec 64))) Bool (not (e72 c0)))
(define-fun e74 ((c0 (_ BitVec 64))) Bool (and (e69 c0) (e73 c0)))
(define-fun e75 ((c0 (_ BitVec 64))) Bool (not (e74 c0)))
(define-fun e76 ((c0 (_ BitVec 64))) Bool (or (e64 c0) (e75 c0)))
(define-fun e77 () Bool (forall ((c0 (_ BitVec 64))) (e76 c0)))
(define-fun e78 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (c35 c0 c1))
(define-fun e79 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv524314 64))
(define-fun e80 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (bvadd (e79 c0 c1) (e3 c0 c1)))
(define-fun e81 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv10 64))
(define-fun e82 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (bvshl (e80 c0 c1) (e81 c0 c1)))
(define-fun e83 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (bvor (e26 c0 c1) (e82 c0 c1)))
(define-fun e84 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(define-fun e85 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (ite (e22 c0 c1) (e83 c0 c1) (e84 c0 c1)))
(define-fun e86 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e78 c0 c1) (e85 c0 c1)))
(define-fun e87 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e30 c0 c1) (e36 c0 c1)))
(define-fun e88 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e87 c0 c1)))
(define-fun e89 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e16 c0 c1) (e24 c0 c1) (e29 c0 c1) (e88 c0 c1)))
(define-fun e90 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e6 c0 c1) (e18 c0 c1)))
(define-fun e91 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e16 c0 c1) (e90 c0 c1)))
(define-fun e92 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e20 c0 c1) (e91 c0 c1)))
(define-fun e93 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e89 c0 c1) (e92 c0 c1)))
(define-fun e94 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e93 c0 c1)))
(define-fun e95 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e86 c0 c1) (e94 c0 c1)))
(define-fun e96 () Bool (forall ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (e95 c0 c1)))
(declare-fun c97 ((_ BitVec 64) (_ BitVec 64)) Bool)
(define-fun e98 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (c97 c0 c1))
(define-fun e99 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv193 64))
(define-fun e100 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv14 64))
(declare-fun c101 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(define-fun e102 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (c101 c0 c1))
(define-fun e103 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (bvand (e100 c0 c1) (e102 c0 c1)))
(define-fun e104 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (bvor (e99 c0 c1) (e103 c0 c1)))
(define-fun e105 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (bvor (e82 c0 c1) (e104 c0 c1)))
(define-fun e106 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv525824 64))
(define-fun e107 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (bvadd (e106 c0 c1) (e3 c0 c1)))
(define-fun e108 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (bvshl (e107 c0 c1) (e81 c0 c1)))
(define-fun e109 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (bvor (e104 c0 c1) (e108 c0 c1)))
(define-fun e110 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (ite (e98 c0 c1) (e105 c0 c1) (e109 c0 c1)))
(define-fun e111 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (ite (e22 c0 c1) (e110 c0 c1) (e84 c0 c1)))
(define-fun e112 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e78 c0 c1) (e111 c0 c1)))
(define-fun e113 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv5 64))
(define-fun e114 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e113 c0 c1) (e18 c0 c1)))
(define-fun e115 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e16 c0 c1) (e114 c0 c1)))
(define-fun e116 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e89 c0 c1) (e115 c0 c1)))
(define-fun e117 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e116 c0 c1)))
(define-fun e118 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e112 c0 c1) (e117 c0 c1)))
(define-fun e119 () Bool (forall ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (e118 c0 c1)))
(define-fun e120 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e89 c0 c1) (e20 c0 c1) (e22 c0 c1)))
(define-fun e121 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e120 c0 c1)))
(define-fun e122 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e15 c0 c1) (e121 c0 c1)))
(define-fun e123 () Bool (forall ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (e122 c0 c1)))
(define-fun e124 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e113 c0 c1) (e8 c0 c1)))
(define-fun e125 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e5 c0 c1) (e124 c0 c1)))
(define-fun e126 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e14 c0 c1) (e125 c0 c1)))
(define-fun e127 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e89 c0 c1) (e91 c0 c1) (e22 c0 c1)))
(define-fun e128 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e127 c0 c1)))
(define-fun e129 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e126 c0 c1) (e128 c0 c1)))
(define-fun e130 () Bool (forall ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (e129 c0 c1)))
(define-fun e131 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv6 64))
(define-fun e132 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e131 c0 c1) (e8 c0 c1)))
(define-fun e133 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e5 c0 c1) (e132 c0 c1)))
(define-fun e134 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e14 c0 c1) (e133 c0 c1)))
(define-fun e135 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e89 c0 c1) (e22 c0 c1) (e115 c0 c1) (e98 c0 c1)))
(define-fun e136 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e135 c0 c1)))
(define-fun e137 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e134 c0 c1) (e136 c0 c1)))
(define-fun e138 () Bool (forall ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (e137 c0 c1)))
(define-fun e139 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (_ BitVec 64) (_ bv256 64))
(define-fun e140 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (bvult (e3 c0 c1) (e139 c0 c1)))
(define-fun e141 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e98 c0 c1)))
(define-fun e142 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e89 c0 c1) (e22 c0 c1) (e115 c0 c1) (e141 c0 c1)))
(define-fun e143 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e142 c0 c1)))
(define-fun e144 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e140 c0 c1) (e143 c0 c1)))
(define-fun e145 () Bool (forall ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (e144 c0 c1)))
(define-fun e146 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e22 c0 c1)))
(define-fun e147 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e84 c0 c1) (e3 c0 c1)))
(define-fun e148 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e146 c0 c1) (e147 c0 c1)))
(define-fun e149 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e20 c0 c1)))
(define-fun e150 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e91 c0 c1)))
(define-fun e151 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e115 c0 c1)))
(define-fun e152 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e16 c0 c1) (e24 c0 c1) (e149 c0 c1) (e150 c0 c1) (e151 c0 c1)))
(define-fun e153 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e152 c0 c1)))
(define-fun e154 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e148 c0 c1) (e153 c0 c1)))
(define-fun e155 () Bool (forall ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (e154 c0 c1)))
(define-fun e156 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (= (e84 c0 c1) (e102 c0 c1)))
(define-fun e157 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e141 c0 c1) (e156 c0 c1)))
(define-fun e158 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (and (e16 c0 c1) (e24 c0 c1) (e151 c0 c1)))
(define-fun e159 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (not (e158 c0 c1)))
(define-fun e160 ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) Bool (or (e157 c0 c1) (e159 c0 c1)))
(define-fun e161 () Bool (forall ((c0 (_ BitVec 64)) (c1 (_ BitVec 64))) (e160 c0 c1)))
(define-fun e162 () Bool (and e53 e77 e96 e119 e123 e130 e138 e145 e155 e161))
(define-fun e164 ((c163 (_ BitVec 64))) (_ BitVec 64) (c11 c163))
(define-fun e165 ((c163 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e166 ((c163 (_ BitVec 64))) Bool (bvult (e164 c163) (e165 c163)))
(define-fun e167 ((c163 (_ BitVec 64))) (_ BitVec 64) (_ bv1 64))
(define-fun e168 ((c163 (_ BitVec 64))) (_ BitVec 64) (c7 (e164 c163)))
(define-fun e169 ((c163 (_ BitVec 64))) Bool (= (e167 c163) (e168 c163)))
(define-fun e170 ((c163 (_ BitVec 64))) Bool (and (e166 c163) (e169 c163)))
(define-fun e171 ((c163 (_ BitVec 64))) Bool (bvult c163 (e165 c163)))
(define-fun e172 ((c163 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(define-fun e173 ((c163 (_ BitVec 64))) (_ BitVec 64) (c7 c163))
(define-fun e174 ((c163 (_ BitVec 64))) Bool (= (e172 c163) (e173 c163)))
(define-fun e175 ((c163 (_ BitVec 64))) Bool (not (e174 c163)))
(define-fun e176 ((c163 (_ BitVec 64))) Bool (and (e171 c163) (e175 c163)))
(define-fun e177 ((c163 (_ BitVec 64))) Bool (not (e176 c163)))
(define-fun e178 ((c163 (_ BitVec 64))) Bool (or (e170 c163) (e177 c163)))
(define-fun e179 () Bool (forall ((c163 (_ BitVec 64))) (e178 c163)))
(define-fun e180 () Bool (and e162 e179))
(define-fun e181 () Bool (not e180))
(define-fun e182 () Bool (or e45 e181))
(define-fun e183 () Bool (not e182))
(assert e183)
(check-sat)
