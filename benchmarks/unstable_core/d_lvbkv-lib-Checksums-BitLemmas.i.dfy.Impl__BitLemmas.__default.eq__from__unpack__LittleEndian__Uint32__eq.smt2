(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun class.BitLemmas.__default () T@U)
(declare-fun Tagclass.BitLemmas.__default () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.Bits__s.__default () T@U)
(declare-fun Tagclass.Bits__s.__default () T@U)
(declare-fun class.F2__X__s.__default () T@U)
(declare-fun Tagclass.F2__X__s.__default () T@U)
(declare-fun class.CRC32__C.__default () T@U)
(declare-fun Tagclass.CRC32__C.__default () T@U)
(declare-fun class.NativePackedInts.__default () T@U)
(declare-fun Tagclass.NativePackedInts.__default () T@U)
(declare-fun class.NonlinearLemmas.__default () T@U)
(declare-fun Tagclass.NonlinearLemmas.__default () T@U)
(declare-fun class.Math.__default () T@U)
(declare-fun Tagclass.Math.__default () T@U)
(declare-fun class.ModLemmas.__default () T@U)
(declare-fun Tagclass.ModLemmas.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4TypeInv5 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass.BitLemmas.__default () T@U)
(declare-fun BitLemmas.__default.int__of__bits (T@U T@U) Int)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |BitLemmas.__default.int__of__bits#canCall| (T@U) Bool)
(declare-fun |BitLemmas.__default.int__of__bits#requires| (T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.Bits__s.__default () T@U)
(declare-fun Bits__s.__default.bits__of__int (T@U Int Int) T@U)
(declare-fun |Bits__s.__default.bits__of__int#canCall| (Int Int) Bool)
(declare-fun |Bits__s.__default.bits__of__int#requires| (T@U Int Int) Bool)
(declare-fun Bits__s.__default.zeroes (T@U Int) T@U)
(declare-fun |Bits__s.__default.zeroes#canCall| (Int) Bool)
(declare-fun |Bits__s.__default.zeroes#requires| (T@U Int) Bool)
(declare-fun Bits__s.__default.ones (T@U Int) T@U)
(declare-fun |Bits__s.__default.ones#canCall| (Int) Bool)
(declare-fun |Bits__s.__default.ones#requires| (T@U Int) Bool)
(declare-fun Bits__s.__default.mm__cvtepu32__epi64 (T@U) T@U)
(declare-fun |Bits__s.__default.mm__cvtepu32__epi64#canCall| (T@U) Bool)
(declare-fun |Bits__s.__default.mm__cvtepu32__epi64#requires| (T@U) Bool)
(declare-fun StartFuel_Bits_s._default.zeroes () T@U)
(declare-fun Bits__s.__default.intrinsic_mm_cvtepu32_epi64 (Int) Int)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtepu32_epi64#canCall| (Int) Bool)
(declare-fun StartFuel_Bits_s._default.bits_of_int () T@U)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtepu32_epi64#requires| (Int) Bool)
(declare-fun Bits__s.__default.intrinsic_mm_loadu_si128 (T@U Int) Int)
(declare-fun |Bits__s.__default.intrinsic_mm_loadu_si128#canCall| (T@U Int) Bool)
(declare-fun |Bits__s.__default.intrinsic_mm_loadu_si128#requires| (T@U Int) Bool)
(declare-fun Bits__s.__default.intrinsic_mm_cvtsi64_si128 (Int) Int)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtsi64_si128#canCall| (Int) Bool)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtsi64_si128#requires| (Int) Bool)
(declare-fun Bits__s.__default.intrinsic_mm_cvtsi128_si64 (Int) Int)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtsi128_si64#canCall| (Int) Bool)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtsi128_si64#requires| (Int) Bool)
(declare-fun Tclass.F2__X__s.__default () T@U)
(declare-fun F2__X__s.__default.reverse (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.reverse#canCall| (T@U) Bool)
(declare-fun |F2__X__s.__default.reverse#requires| (T@U T@U) Bool)
(declare-fun F2__X__s.__default.bool__xor (Bool Bool) Bool)
(declare-fun |F2__X__s.__default.bool__xor#requires| (Bool Bool) Bool)
(declare-fun F2__X__s.__default.xor (T@U T@U T@U) T@U)
(declare-fun |F2__X__s.__default.xor#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.xor#requires| (T@U T@U T@U) Bool)
(declare-fun |F2__X__s.__default.bool__xor#canCall| (Bool Bool) Bool)
(declare-fun F2__X__s.__default.extend (T@U Int) T@U)
(declare-fun |F2__X__s.__default.extend#canCall| (T@U Int) Bool)
(declare-fun |F2__X__s.__default.extend#requires| (T@U Int) Bool)
(declare-fun F2__X__s.__default.bits__get (T@U Int) Bool)
(declare-fun |F2__X__s.__default.bits__get#canCall| (T@U Int) Bool)
(declare-fun |F2__X__s.__default.bits__get#requires| (T@U Int) Bool)
(declare-fun F2__X__s.__default.mul__F2__X__digit__partial (T@U T@U T@U Int Int) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X__digit__partial#canCall| (T@U T@U Int Int) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X__digit__partial#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun F2__X__s.__default.mul__F2__X__digit (T@U T@U Int) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X__digit#canCall| (T@U T@U Int) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X__digit#requires| (T@U T@U Int) Bool)
(declare-fun F2__X__s.__default.mul__F2__X (T@U T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mul__F2__X#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#45| (T@U) T@U)
(declare-fun |lambda#41| (T@U T@U) T@U)
(declare-fun |lambda#42| (T@U Int) T@U)
(declare-fun |lambda#44| (T@U) T@U)
(declare-fun |lambda#43| (Bool) T@U)
(declare-fun F2__X__s.__default.shift (T@U Int) T@U)
(declare-fun |F2__X__s.__default.shift#canCall| (T@U Int) Bool)
(declare-fun |F2__X__s.__default.shift#requires| (T@U Int) Bool)
(declare-fun F2__X__s.__default.mod__F2__X (T@U T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mod__F2__X#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mod__F2__X#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_F2_X_s._default.xor () T@U)
(declare-fun F2__X__s.__default.mm__crc32__u8 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__crc32__u8#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__crc32__u8#requires| (T@U T@U) Bool)
(declare-fun StartFuel_F2_X_s._default.reverse () T@U)
(declare-fun F2__X__s.__default.intrinsic_mm_crc32_u8 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u8#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u8#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__crc32__u16 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__crc32__u16#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__crc32__u16#requires| (T@U T@U) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_crc32_u16 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u16#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u16#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__crc32__u32 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__crc32__u32#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__crc32__u32#requires| (T@U T@U) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_crc32_u32 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u32#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u32#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__crc32__u64 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__crc32__u64#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__crc32__u64#requires| (T@U T@U) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_crc32_u64 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u64#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u64#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__clmulepi64__si128__0 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__clmulepi64__si128__0#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__clmulepi64__si128__0#requires| (T@U T@U) Bool)
(declare-fun StartFuel_F2_X_s._default.mul_F2_X () T@U)
(declare-fun F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__clmulepi64__si128__16 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__clmulepi64__si128__16#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__clmulepi64__si128__16#requires| (T@U T@U) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_xor_si128 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_xor_si128#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_xor_si128#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.bitxor32 (Int Int) Int)
(declare-fun |F2__X__s.__default.bitxor32#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.bitxor32#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.bitxor64 (Int Int) Int)
(declare-fun |F2__X__s.__default.bitxor64#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.bitxor64#requires| (Int Int) Bool)
(declare-fun Tclass.CRC32__C.__default () T@U)
(declare-fun CRC32__C.__default.bits__of__bytes (T@U T@U) T@U)
(declare-fun |CRC32__C.__default.bits__of__bytes#canCall| (T@U) Bool)
(declare-fun |CRC32__C.__default.bits__of__bytes#requires| (T@U T@U) Bool)
(declare-fun CRC32__C.__default.byte__of__bits (T@U) Int)
(declare-fun |CRC32__C.__default.byte__of__bits#canCall| (T@U) Bool)
(declare-fun |CRC32__C.__default.byte__of__bits#requires| (T@U) Bool)
(declare-fun CRC32__C.__default.crc32__c (T@U T@U) T@U)
(declare-fun |CRC32__C.__default.crc32__c#canCall| (T@U) Bool)
(declare-fun |CRC32__C.__default.crc32__c#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Bits_s._default.ones () T@U)
(declare-fun CRC32__C.__default.crc32__c__padded (T@U) T@U)
(declare-fun |CRC32__C.__default.crc32__c__padded#canCall| (T@U) Bool)
(declare-fun |CRC32__C.__default.crc32__c__padded#requires| (T@U) Bool)
(declare-fun StartFuel_CRC32_C._default.crc32_c () T@U)
(declare-fun |lambda#51| (T@U) T@U)
(declare-fun |lambda#52| (T@U) T@U)
(declare-fun Tclass.NativePackedInts.__default () T@U)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint32 (T@U T@U) Int)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (T@U) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| (T@U T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint64 (T@U T@U) Int)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (T@U) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| (T@U T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq (T@U T@U Int) T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (T@U Int) Bool)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 () T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| (T@U T@U Int) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq (T@U T@U Int) T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (T@U Int) Bool)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 () T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| (T@U T@U Int) Bool)
(declare-fun Tclass.NonlinearLemmas.__default () T@U)
(declare-fun Tclass.Math.__default () T@U)
(declare-fun Math.__default.power2 (T@U Int) Int)
(declare-fun |Math.__default.power2#canCall| (Int) Bool)
(declare-fun |Math.__default.power2#requires| (T@U Int) Bool)
(declare-fun Tclass.ModLemmas.__default () T@U)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :qid |typeInv:U_2_string| :pattern ( (string_2_U arg0@@7)) ))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :qid |cast:U_2_string| :pattern ( (U_2_string x@@3)) ))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType) :qid |funType:string_2_U| :pattern ( (string_2_U arg0@@8)) ))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :qid |typeInv:U_2_regex| :pattern ( (regex_2_U arg0@@9)) ))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :qid |cast:U_2_regex| :pattern ( (U_2_regex x@@4)) ))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType) :qid |funType:regex_2_U| :pattern ( (regex_2_U arg0@@10)) ))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) )))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z)) )))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType| ))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@12)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type class.BitLemmas.__default) ClassNameType)) (= (type Tagclass.BitLemmas.__default) TyTagType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.Bits__s.__default) ClassNameType)) (= (type Tagclass.Bits__s.__default) TyTagType)) (= (type class.F2__X__s.__default) ClassNameType)) (= (type Tagclass.F2__X__s.__default) TyTagType)) (= (type class.CRC32__C.__default) ClassNameType)) (= (type Tagclass.CRC32__C.__default) TyTagType)) (= (type class.NativePackedInts.__default) ClassNameType)) (= (type Tagclass.NativePackedInts.__default) TyTagType)) (= (type class.NonlinearLemmas.__default) ClassNameType)) (= (type Tagclass.NonlinearLemmas.__default) TyTagType)) (= (type class.Math.__default) ClassNameType)) (= (type Tagclass.Math.__default) TyTagType)) (= (type class.ModLemmas.__default) ClassNameType)) (= (type Tagclass.ModLemmas.__default) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func4|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 class.BitLemmas.__default Tagclass.BitLemmas.__default Tagclass.NativeTypes.byte Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default class.Bits__s.__default Tagclass.Bits__s.__default class.F2__X__s.__default Tagclass.F2__X__s.__default class.CRC32__C.__default Tagclass.CRC32__C.__default class.NativePackedInts.__default Tagclass.NativePackedInts.__default class.NonlinearLemmas.__default Tagclass.NonlinearLemmas.__default class.Math.__default Tagclass.Math.__default class.ModLemmas.__default Tagclass.ModLemmas.__default tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_#Func4| |tytagFamily$_#PartialFunc4| |tytagFamily$_#TotalFunc4| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_tuple#2| |tytagFamily$_tuple#0| tytagFamily$byte tytagFamily$sbyte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$uint32 tytagFamily$int64 tytagFamily$uint64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@13)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPreludebpl.34:15| :skolemid |347| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@15)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPreludebpl.36:15| :skolemid |348| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@17)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPreludebpl.38:15| :skolemid |349| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@18)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@19)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPreludebpl.40:15| :skolemid |350| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@20)) )) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@21)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPreludebpl.42:15| :skolemid |351| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@22 arg1)) )) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@23)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPreludebpl.45:15| :skolemid |352| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@24)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPreludebpl.46:15| :skolemid |353| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@25 arg1@@0)) )) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@26)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPreludebpl.49:15| :skolemid |354| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@27)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPreludebpl.50:15| :skolemid |355| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@28)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPreludebpl.76:15| :skolemid |356| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPreludebpl.77:15| :skolemid |357| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPreludebpl.78:15| :skolemid |358| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPreludebpl.79:15| :skolemid |359| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPreludebpl.80:15| :skolemid |360| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPreludebpl.81:15| :skolemid |361| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29))) (= (type (Lit arg0@@29)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@29)) )))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8) :qid |DafnyPreludebpl.89:29| :skolemid |362| :pattern ( (Lit x@@8)) )))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@30)) ))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :qid |DafnyPreludebpl.90:18| :skolemid |363| :pattern ( ($Box (Lit x@@9))) )))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10) :qid |DafnyPreludebpl.95:29| :skolemid |364| :pattern ( (LitInt x@@10)) )))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :qid |DafnyPreludebpl.96:15| :skolemid |365| :pattern ( ($Box (int_2_U (LitInt x@@11)))) )))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12) :qid |DafnyPreludebpl.97:30| :skolemid |366| :pattern ( (LitReal x@@12)) )))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :qid |DafnyPreludebpl.98:15| :skolemid |367| :pattern ( ($Box (real_2_U (LitReal x@@13)))) )))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@31)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPreludebpl.107:15| :skolemid |368| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPreludebpl.111:15| :skolemid |369| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@32 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPreludebpl.117:15| :skolemid |370| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@33 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPreludebpl.120:15| :skolemid |371| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@34)) )))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14))) (= ($Unbox T@@1 ($Box x@@14)) x@@14)) :qid |DafnyPreludebpl.141:18| :skolemid |372| :pattern ( ($Box x@@14)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPreludebpl.143:15| :skolemid |373| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPreludebpl.146:15| :skolemid |374| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPreludebpl.149:15| :skolemid |375| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPreludebpl.152:15| :skolemid |376| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type| )) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@36 arg1@@4)) ))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@37 arg1@@5)) ))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38)))) (= (type (MapType0Select arg0@@38 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@38 arg1@@6)) ))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :qid |DafnyPreludebpl.158:15| :skolemid |377| :pattern ( ($IsBox bx@@3 (TBitvector 0))) )))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :qid |DafnyPreludebpl.162:15| :skolemid |378| :pattern ( ($IsBox bx@@4 (TSet t@@13))) )))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :qid |DafnyPreludebpl.165:15| :skolemid |379| :pattern ( ($IsBox bx@@5 (TISet t@@14))) )))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :qid |DafnyPreludebpl.168:15| :skolemid |380| :pattern ( ($IsBox bx@@6 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType| )) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@41)) ))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :qid |DafnyPreludebpl.171:15| :skolemid |381| :pattern ( ($IsBox bx@@7 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType| )) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@43 arg1@@9)) ))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@44 arg1@@10)) ))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :qid |DafnyPreludebpl.174:15| :skolemid |382| :pattern ( ($IsBox bx@@8 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType| )) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@46 arg1@@12)) ))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@47 arg1@@13)) ))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :qid |DafnyPreludebpl.177:15| :skolemid |383| :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :qid |DafnyPreludebpl.181:18| :skolemid |384| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@48 arg1@@14)) )) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :qid |DafnyPreludebpl.184:18| :skolemid |385| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPreludebpl.202:14| :skolemid |386| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPreludebpl.203:14| :skolemid |387| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPreludebpl.204:14| :skolemid |388| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPreludebpl.205:14| :skolemid |389| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPreludebpl.206:14| :skolemid |390| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPreludebpl.208:14| :skolemid |391| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPreludebpl.209:14| :skolemid |392| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPreludebpl.210:14| :skolemid |393| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPreludebpl.211:14| :skolemid |394| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPreludebpl.212:14| :skolemid |395| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :qid |DafnyPreludebpl.216:15| :skolemid |396| :pattern ( ($Is v@@11 (TBitvector 0))) )))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :qid |DafnyPreludebpl.217:15| :skolemid |397| :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5)) )))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPreludebpl.221:11| :skolemid |398| :pattern ( (MapType0Select v@@13 bx@@10)) )))) :qid |DafnyPreludebpl.219:15| :skolemid |399| :pattern ( ($Is v@@13 (TSet t0))) )))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPreludebpl.225:11| :skolemid |400| :pattern ( (MapType0Select v@@14 bx@@11)) )))) :qid |DafnyPreludebpl.223:15| :skolemid |401| :pattern ( ($Is v@@14 (TISet t0@@0))) )))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :qid |DafnyPreludebpl.229:11| :skolemid |402| :pattern ( (MapType0Select v@@15 bx@@12)) )))) :qid |DafnyPreludebpl.227:15| :skolemid |403| :pattern ( ($Is v@@15 (TMultiSet t0@@1))) )))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :qid |DafnyPreludebpl.231:15| :skolemid |404| :pattern ( ($Is v@@16 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50)))) (= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@50 arg1@@16)) )))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :qid |DafnyPreludebpl.235:11| :skolemid |405| :pattern ( (|Seq#Index| v@@17 i)) )))) :qid |DafnyPreludebpl.233:15| :skolemid |406| :pattern ( ($Is v@@17 (TSeq t0@@3))) )))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :qid |DafnyPreludebpl.240:11| :skolemid |407| :pattern ( (MapType0Select v@@18 bx@@13)) )))) :qid |DafnyPreludebpl.238:15| :skolemid |408| :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6)) )))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :qid |DafnyPreludebpl.244:11| :skolemid |409| :pattern ( (MapType0Select v@@19 bx@@14)) )))) :qid |DafnyPreludebpl.242:15| :skolemid |410| :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7)) )))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :qid |DafnyPreludebpl.248:11| :skolemid |411| :pattern ( (MapType0Select v@@20 bx@@15)) )))) :qid |DafnyPreludebpl.246:15| :skolemid |412| :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) )))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :qid |DafnyPreludebpl.252:11| :skolemid |413| :pattern ( (|Seq#Index| v@@21 i@@0)) )))) :qid |DafnyPreludebpl.250:15| :skolemid |414| :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) )))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51)))) (let ((U (MapTypeInv0 (type arg0@@51)))) (= (type (|Map#Elements| arg0@@51)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@51)) )) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52)))) (= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@52)) ))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :qid |DafnyPreludebpl.259:19| :skolemid |415| :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16)) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16)) )))) :qid |DafnyPreludebpl.256:15| :skolemid |416| :pattern ( ($Is v@@22 (TMap t0@@8 t1))) )))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :qid |DafnyPreludebpl.267:19| :skolemid |417| :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17)) :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17)) )))) :qid |DafnyPreludebpl.264:15| :skolemid |418| :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) )))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53)))) (= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@53)) )) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@54)) ))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17)) ))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :qid |DafnyPreludebpl.272:15| :skolemid |419| :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1))) )))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@56)))) (= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@56)) )) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57)))) (= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@57)) ))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :qid |DafnyPreludebpl.282:19| :skolemid |420| :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18)) :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18)) )))) :qid |DafnyPreludebpl.279:15| :skolemid |421| :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2))) )))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :qid |DafnyPreludebpl.290:19| :skolemid |422| :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19)) :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19)) )))) :qid |DafnyPreludebpl.287:15| :skolemid |423| :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) )))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58)))) (= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@58)) )) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@59)) ))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :qid |DafnyPreludebpl.295:15| :skolemid |424| :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4))) )))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@60 arg1@@18)) )) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@61)) ))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@62)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPreludebpl.322:15| :skolemid |425| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@63)) )))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :qid |DafnyPreludebpl.331:15| :skolemid |426| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPreludebpl.333:15| :skolemid |427| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPreludebpl.352:15| :skolemid |428| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPreludebpl.367:15| :skolemid |429| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@64)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPreludebpl.373:15| :skolemid |430| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPreludebpl.375:15| :skolemid |431| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPreludebpl.379:15| :skolemid |432| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPreludebpl.385:15| :skolemid |433| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPreludebpl.388:15| :skolemid |434| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :qid |DafnyPreludebpl.395:15| :skolemid |435| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@65 arg1@@19)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPreludebpl.399:15| :skolemid |436| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPreludebpl.404:15| :skolemid |437| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPreludebpl.407:15| :skolemid |438| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@66 arg1@@20)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPreludebpl.412:15| :skolemid |439| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPreludebpl.416:15| :skolemid |440| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPreludebpl.422:15| :skolemid |441| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPreludebpl.427:15| :skolemid |442| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPreludebpl.432:15| :skolemid |443| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPreludebpl.438:15| :skolemid |444| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67)))) (= (type (AtLayer arg0@@67 arg1@@21)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@67 arg1@@21)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPreludebpl.462:18| :skolemid |445| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@68)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPreludebpl.463:18| :skolemid |446| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@69)) )))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1) :qid |DafnyPreludebpl.474:15| :skolemid |447| :pattern ( (IndexField i@@1)) )))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :qid |DafnyPreludebpl.476:15| :skolemid |448| :pattern ( (IndexField i@@2)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@70 arg1@@22)) )))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :qid |DafnyPreludebpl.479:15| :skolemid |449| :pattern ( (MultiIndexField f@@1 i@@3)) )))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71)))) (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@71)) )))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :qid |DafnyPreludebpl.482:15| :skolemid |450| :pattern ( (MultiIndexField f@@2 i@@4)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) )) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@73)) ))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@74)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPreludebpl.491:18| :skolemid |451| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :qid |DafnyPreludebpl.504:17| :skolemid |452| :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) )))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :qid |DafnyPreludebpl.507:14| :skolemid |453| :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPreludebpl.524:15| :skolemid |454| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15)) :qid |DafnyPreludebpl.530:14| :skolemid |455| :pattern ( (q@Int x@@15)) )))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16)) :qid |DafnyPreludebpl.531:15| :skolemid |456| :pattern ( (q@Real x@@16)) )))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5) :qid |DafnyPreludebpl.532:15| :skolemid |457| :pattern ( (q@Int (q@Real i@@5))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17))) (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))))) :qid |DafnyPreludebpl.554:22| :skolemid |458| :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPreludebpl.557:15| :skolemid |459| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPreludebpl.560:30| :skolemid |460| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPreludebpl.559:15| :skolemid |461| :pattern ( ($HeapSucc h@@15 k@@1)) )))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPreludebpl.566:20| :skolemid |462| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPreludebpl.563:15| :skolemid |463| :pattern ( ($HeapSuccGhost h@@16 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPreludebpl.624:18| :skolemid |468| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPreludebpl.627:18| :skolemid |469| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18))) :qid |DafnyPreludebpl.630:33| :skolemid |470| :no-pattern (type x@@18) :no-pattern (U_2_int x@@18) :no-pattern (U_2_bool x@@18) )))))) :qid |DafnyPreludebpl.628:18| :skolemid |471| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75))) (= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@75)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPreludebpl.636:18| :skolemid |472| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)))) :qid |DafnyPreludebpl.637:18| :skolemid |473| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPreludebpl.638:18| :skolemid |474| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24))) (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24)) )))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19)))))) :qid |DafnyPreludebpl.641:18| :skolemid |475| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20)))) :qid |DafnyPreludebpl.643:18| :skolemid |476| :pattern ( (|Set#UnionOne| a@@4 x@@20)) )))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1)))) :qid |DafnyPreludebpl.645:18| :skolemid |477| :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6)))) :qid |DafnyPreludebpl.647:18| :skolemid |478| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22))) )))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPreludebpl.649:18| :skolemid |479| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@77 arg1@@25)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))))) :qid |DafnyPreludebpl.653:18| :skolemid |480| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPreludebpl.655:18| :skolemid |481| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPreludebpl.657:18| :skolemid |482| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@78 arg1@@26)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPreludebpl.659:18| :skolemid |483| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@79 arg1@@27)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))))) :qid |DafnyPreludebpl.669:18| :skolemid |484| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPreludebpl.672:18| :skolemid |485| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPreludebpl.674:18| :skolemid |486| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPreludebpl.676:18| :skolemid |487| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPreludebpl.678:18| :skolemid |488| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPreludebpl.680:18| :skolemid |489| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))))) :qid |DafnyPreludebpl.684:18| :skolemid |490| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPreludebpl.686:18| :skolemid |491| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPreludebpl.688:18| :skolemid |492| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPreludebpl.697:32| :skolemid |493| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))))) :qid |DafnyPreludebpl.696:17| :skolemid |494| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :qid |DafnyPreludebpl.705:31| :skolemid |495| :pattern ( (MapType0Select a@@22 o@@24)) :pattern ( (MapType0Select b@@17 o@@24)) ))))) :qid |DafnyPreludebpl.704:17| :skolemid |496| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPreludebpl.706:17| :skolemid |497| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :qid |DafnyPreludebpl.711:34| :skolemid |498| :pattern ( (MapType0Select a@@24 o@@25)) :pattern ( (MapType0Select b@@19 o@@25)) ))))) :qid |DafnyPreludebpl.710:18| :skolemid |499| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26)))) :qid |DafnyPreludebpl.720:18| :skolemid |500| :pattern ( (let ((T@@38 (type o@@26))) (MapType0Select (|ISet#Empty| T@@38) o@@26))) )))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28))) (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28)) )))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27)))))) :qid |DafnyPreludebpl.727:18| :skolemid |501| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) )))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25)))) :qid |DafnyPreludebpl.729:18| :skolemid |502| :pattern ( (|ISet#UnionOne| a@@26 x@@25)) )))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5)))) :qid |DafnyPreludebpl.731:18| :skolemid |503| :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81)))) (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@81 arg1@@29)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28)))))) :qid |DafnyPreludebpl.735:18| :skolemid |504| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPreludebpl.737:18| :skolemid |505| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPreludebpl.739:18| :skolemid |506| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82)))) (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@82 arg1@@30)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPreludebpl.741:18| :skolemid |507| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83)))) (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29)))))) :qid |DafnyPreludebpl.747:18| :skolemid |508| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPreludebpl.750:18| :skolemid |509| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPreludebpl.752:18| :skolemid |510| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPreludebpl.754:18| :skolemid |511| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPreludebpl.756:18| :skolemid |512| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30))))))) :qid |DafnyPreludebpl.761:18| :skolemid |513| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPreludebpl.763:18| :skolemid |514| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :qid |DafnyPreludebpl.768:33| :skolemid |515| :pattern ( (MapType0Select a@@39 o@@31)) :pattern ( (MapType0Select b@@31 o@@31)) ))))) :qid |DafnyPreludebpl.767:17| :skolemid |516| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :qid |DafnyPreludebpl.772:32| :skolemid |517| :pattern ( (MapType0Select a@@40 o@@32)) :pattern ( (MapType0Select b@@32 o@@32)) ))))) :qid |DafnyPreludebpl.771:17| :skolemid |518| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPreludebpl.773:17| :skolemid |519| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :qid |DafnyPreludebpl.778:35| :skolemid |520| :pattern ( (MapType0Select a@@42 o@@33)) :pattern ( (MapType0Select b@@34 o@@33)) ))))) :qid |DafnyPreludebpl.777:18| :skolemid |521| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :qid |DafnyPreludebpl.785:15| :skolemid |522| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :qid |DafnyPreludebpl.786:15| :skolemid |523| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPreludebpl.787:15| :skolemid |524| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPreludebpl.790:15| :skolemid |525| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPreludebpl.791:15| :skolemid |526| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :qid |DafnyPreludebpl.799:11| :skolemid |527| :pattern ( (MapType0Select ms bx@@22)) ))))) :qid |DafnyPreludebpl.797:18| :skolemid |528| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPreludebpl.802:18| :skolemid |529| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5))))) :qid |DafnyPreludebpl.803:18| :skolemid |530| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0)) :qid |DafnyPreludebpl.807:18| :skolemid |531| :pattern ( (let ((T@@65 (type o@@34))) (MapType0Select (|MultiSet#Empty| T@@65) o@@34))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28)))) :qid |DafnyPreludebpl.810:38| :skolemid |532| :no-pattern (type x@@28) :no-pattern (U_2_int x@@28) :no-pattern (U_2_bool x@@28) )))))) :qid |DafnyPreludebpl.808:18| :skolemid |533| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84))) (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@84)) )))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35)))))) :qid |DafnyPreludebpl.813:18| :skolemid |534| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) )))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32))) (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPreludebpl.815:18| :skolemid |535| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36))))))) :qid |DafnyPreludebpl.819:18| :skolemid |536| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) )))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1)))) :qid |DafnyPreludebpl.822:18| :skolemid |537| :pattern ( (|MultiSet#UnionOne| a@@49 x@@30)) )))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9))))) :qid |DafnyPreludebpl.825:18| :skolemid |538| :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10))))) :qid |DafnyPreludebpl.828:18| :skolemid |539| :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPreludebpl.830:18| :skolemid |540| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) )))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86)))) (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37)))))) :qid |DafnyPreludebpl.836:18| :skolemid |541| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPreludebpl.838:18| :skolemid |542| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87)))) (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38)))))) :qid |DafnyPreludebpl.842:18| :skolemid |543| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPreludebpl.846:18| :skolemid |544| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPreludebpl.848:18| :skolemid |545| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88)))) (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39))))))) :qid |DafnyPreludebpl.853:18| :skolemid |546| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPreludebpl.855:18| :skolemid |547| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPreludebpl.857:18| :skolemid |548| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :qid |DafnyPreludebpl.867:37| :skolemid |549| :pattern ( (MapType0Select a@@61 o@@40)) :pattern ( (MapType0Select b@@46 o@@40)) ))))) :qid |DafnyPreludebpl.866:17| :skolemid |550| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :qid |DafnyPreludebpl.871:36| :skolemid |551| :pattern ( (MapType0Select a@@62 o@@41)) :pattern ( (MapType0Select b@@47 o@@41)) ))))) :qid |DafnyPreludebpl.870:17| :skolemid |552| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPreludebpl.873:17| :skolemid |553| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :qid |DafnyPreludebpl.878:39| :skolemid |554| :pattern ( (MapType0Select a@@64 o@@42)) :pattern ( (MapType0Select b@@49 o@@42)) ))))) :qid |DafnyPreludebpl.877:18| :skolemid |555| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@89)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65)))))) :qid |DafnyPreludebpl.882:18| :skolemid |556| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPreludebpl.885:18| :skolemid |557| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90)))) (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@90)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPreludebpl.891:18| :skolemid |558| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPreludebpl.893:18| :skolemid |559| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36))) (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@91 arg1@@36)) )))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29)))) :qid |DafnyPreludebpl.897:18| :skolemid |560| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| )))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92)))) (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@92 arg1@@37)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPreludebpl.904:18| :skolemid |562| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34))))) :qid |DafnyPreludebpl.909:18| :skolemid |563| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) )))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35))) (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7))) :qid |DafnyPreludebpl.916:11| :skolemid |564| :pattern ( (|Seq#Index| s@@14 i@@7)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))))) :qid |DafnyPreludebpl.915:18| :skolemid |565| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPreludebpl.925:18| :skolemid |566| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |567| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPreludebpl.929:18| :skolemid |568| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94))) (= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@94)) )))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :qid |DafnyPreludebpl.942:18| :skolemid |569| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95)))) (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96)))) (= (type (|Seq#Build_inv1| arg0@@96)) T@@111)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@96)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5))) (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPreludebpl.947:18| :skolemid |570| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31))) (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPreludebpl.952:18| :skolemid |571| :pattern ( (|Seq#Build| s@@18 v@@31)) )))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32))) (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8)))))) :qid |DafnyPreludebpl.955:18| :skolemid |572| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) )))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :qid |DafnyPreludebpl.960:15| :skolemid |573| :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) )))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPreludebpl.964:15| :skolemid |574| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :qid |DafnyPreludebpl.968:15| :skolemid |575| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPreludebpl.974:18| :skolemid |576| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :qid |DafnyPreludebpl.978:18| :skolemid |577| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0)) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0)))) (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0)))))))) :qid |DafnyPreludebpl.979:18| :skolemid |578| :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33))) (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21))))) :qid |DafnyPreludebpl.984:18| :skolemid |579| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) )))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34))) (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPreludebpl.986:18| :skolemid |580| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36))) (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36)) :qid |DafnyPreludebpl.994:13| :skolemid |581| :pattern ( (|Seq#Index| s@@23 i@@12)) ))))) :qid |DafnyPreludebpl.992:18| :skolemid |582| :pattern ( (|Seq#Contains| s@@23 x@@36)) )))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37))) (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) :qid |DafnyPreludebpl.995:18| :skolemid |583| :pattern ( (let ((T@@120 (type x@@37))) (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38))) (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38))))) :qid |DafnyPreludebpl.999:18| :skolemid |584| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) )))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35))) (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39))))) :qid |DafnyPreludebpl.1004:18| :skolemid |585| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) )))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99)))) (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@99 arg1@@41)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40))) (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40)) :qid |DafnyPreludebpl.1011:13| :skolemid |586| :pattern ( (|Seq#Index| s@@25 i@@13)) ))))) :qid |DafnyPreludebpl.1008:18| :skolemid |587| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) )))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100)))) (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@100 arg1@@42)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41))) (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41)) :qid |DafnyPreludebpl.1016:13| :skolemid |588| :pattern ( (|Seq#Index| s@@26 i@@14)) ))))) :qid |DafnyPreludebpl.1013:18| :skolemid |589| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2)))) (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :qid |DafnyPreludebpl.1023:13| :skolemid |590| :pattern ( (|Seq#Index| s0@@2 j)) :pattern ( (|Seq#Index| s1@@2 j)) )))))) :qid |DafnyPreludebpl.1020:18| :skolemid |591| :pattern ( (|Seq#Equal| s0@@2 s1@@2)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPreludebpl.1025:18| :skolemid |592| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPreludebpl.1031:13| :skolemid |593| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))))) :qid |DafnyPreludebpl.1029:18| :skolemid |594| :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPreludebpl.1035:18| :skolemid |595| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1))))) :qid |DafnyPreludebpl.1037:18| :weight 25 :skolemid |596| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPreludebpl.1045:18| :skolemid |597| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14)))))) :qid |DafnyPreludebpl.1047:18| :weight 25 :skolemid |598| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPreludebpl.1052:18| :weight 25 :skolemid |599| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26)))) :qid |DafnyPreludebpl.1058:18| :skolemid |600| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) )))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43)) )))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPreludebpl.1067:15| :skolemid |601| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) )))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :qid |DafnyPreludebpl.1072:11| :skolemid |602| :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) ))) :qid |DafnyPreludebpl.1070:15| :skolemid |603| :pattern ( (|Seq#FromArray| h@@18 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPreludebpl.1082:15| :skolemid |604| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :qid |DafnyPreludebpl.1087:15| :skolemid |605| :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37))) (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37))))) :qid |DafnyPreludebpl.1092:18| :skolemid |606| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38))) (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPreludebpl.1095:18| :skolemid |607| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39))) (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39))))) :qid |DafnyPreludebpl.1098:18| :skolemid |608| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40))) (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPreludebpl.1101:18| :skolemid |609| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) )))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :qid |DafnyPreludebpl.1105:15| :skolemid |610| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41))) (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41))))) :qid |DafnyPreludebpl.1109:18| :skolemid |611| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :qid |DafnyPreludebpl.1114:15| :skolemid |612| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) )))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39))))) :qid |DafnyPreludebpl.1117:18| :skolemid |613| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) )))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40))))) :qid |DafnyPreludebpl.1120:18| :skolemid |614| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23))) )))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41))))) :qid |DafnyPreludebpl.1123:18| :skolemid |615| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPreludebpl.1128:18| :skolemid |616| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145)))) :qid |DafnyPreludebpl.1130:18| :skolemid |617| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPreludebpl.1132:18| :skolemid |618| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPreludebpl.1150:20| :skolemid |619| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@4 V@@4)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11)))) (let ((U@@5 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5)))))) :qid |DafnyPreludebpl.1152:21| :skolemid |620| :pattern ( (|Map#Card| m@@11)) )))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12)))) (let ((U@@6 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4))) :qid |DafnyPreludebpl.1158:31| :skolemid |621| :no-pattern (type k@@4) :no-pattern (U_2_int k@@4) :no-pattern (U_2_bool k@@4) )))))) :qid |DafnyPreludebpl.1156:21| :skolemid |622| :pattern ( (|Map#Domain| m@@12)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13)))) (let ((U@@7 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42))) :qid |DafnyPreludebpl.1161:31| :skolemid |623| :no-pattern (type v@@42) :no-pattern (U_2_int v@@42) :no-pattern (U_2_bool v@@42) )))))) :qid |DafnyPreludebpl.1159:21| :skolemid |624| :pattern ( (|Map#Values| m@@13)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) )))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14)))) (let ((U@@8 (MapTypeInv0 (type m@@14)))) (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43))))) :qid |DafnyPreludebpl.1164:31| :skolemid |625| :no-pattern (type k@@5) :no-pattern (type v@@43) :no-pattern (U_2_int k@@5) :no-pattern (U_2_bool k@@5) :no-pattern (U_2_int v@@43) :no-pattern (U_2_bool v@@43) )))))) :qid |DafnyPreludebpl.1162:21| :skolemid |626| :pattern ( (|Map#Items| m@@14)) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))))) :qid |DafnyPreludebpl.1166:21| :skolemid |627| :pattern ( (|Set#Card| (|Map#Domain| m@@15))) )))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16)))) (let ((U@@10 (MapTypeInv0 (type m@@16)))) (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))))) :qid |DafnyPreludebpl.1169:21| :skolemid |628| :pattern ( (|Set#Card| (|Map#Values| m@@16))) )))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17)))) (let ((U@@11 (MapTypeInv0 (type m@@17)))) (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))))) :qid |DafnyPreludebpl.1172:21| :skolemid |629| :pattern ( (|Set#Card| (|Map#Items| m@@17))) )))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44))) (let ((U@@12 (MapTypeInv0 (type m@@18)))) (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :qid |DafnyPreludebpl.1185:10| :skolemid |630| :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5)) )))))) :qid |DafnyPreludebpl.1183:20| :skolemid |631| :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44)) )))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@103)) )) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@104)) ))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :qid |DafnyPreludebpl.1204:15| :skolemid |632| :pattern ( (MapType0Select (|Map#Items| m@@19) item)) )))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))) :qid |DafnyPreludebpl.1212:21| :skolemid |633| :pattern ( (let ((U@@13 (type u@@6))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))) )))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@14 (MapType0TypeInv0 (type arg0@@105)))) (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52)))) (let ((U@@15 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)))) :qid |DafnyPreludebpl.1217:21| :skolemid |634| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53)))) (let ((U@@16 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)))) :qid |DafnyPreludebpl.1220:21| :skolemid |635| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))) :qid |DafnyPreludebpl.1226:11| :skolemid |636| :no-pattern (type bx@@24) :no-pattern (U_2_int bx@@24) :no-pattern (U_2_bool bx@@24) ))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :qid |DafnyPreludebpl.1223:15| :skolemid |637| :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) )))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5))) (let ((U@@17 (type arg1@@46))) (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) )))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45))) (let ((U@@18 (type u@@7))) (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))))) :qid |DafnyPreludebpl.1237:21| :skolemid |638| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) )))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46))) (let ((U@@19 (type u@@8))) (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))))) :qid |DafnyPreludebpl.1243:21| :skolemid |639| :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) )))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47))) (let ((U@@20 (type u@@9))) (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))))) :qid |DafnyPreludebpl.1245:21| :skolemid |640| :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) )))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107)))) (let ((U@@21 (MapTypeInv0 (type arg0@@107)))) (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21)))) :qid |funType:Map#Merge| :pattern ( (|Map#Merge| arg0@@107 arg1@@47)) )))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23)))) (let ((U@@22 (MapTypeInv0 (type m@@23)))) (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))))) :qid |DafnyPreludebpl.1250:21| :skolemid |641| :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25))) )))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24)))) (let ((U@@23 (type u@@10))) (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))))) :qid |DafnyPreludebpl.1253:21| :skolemid |642| :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) )))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108)))) (let ((U@@24 (MapTypeInv0 (type arg0@@108)))) (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24)))) :qid |funType:Map#Subtract| :pattern ( (|Map#Subtract| arg0@@108 arg1@@48)) )))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25)))) (let ((U@@25 (MapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))))) :qid |DafnyPreludebpl.1260:21| :skolemid |643| :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45))) )))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26)))) (let ((U@@26 (type u@@11))) (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))))) :qid |DafnyPreludebpl.1263:21| :skolemid |644| :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11)) )))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27)))) (let ((U@@27 (MapTypeInv0 (type m@@27)))) (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :qid |DafnyPreludebpl.1272:35| :skolemid |645| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPreludebpl.1273:35| :skolemid |646| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) ))))))) :qid |DafnyPreludebpl.1270:21| :skolemid |647| :pattern ( (|Map#Equal| m@@27 |m'|)) )))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28)))) (let ((U@@28 (MapTypeInv0 (type m@@28)))) (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)))) :qid |DafnyPreludebpl.1275:21| :skolemid |648| :pattern ( (|Map#Equal| m@@28 |m'@@0|)) )))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29)))) (let ((U@@29 (MapTypeInv0 (type m@@29)))) (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :qid |DafnyPreludebpl.1282:38| :skolemid |649| :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43)) )))))) :qid |DafnyPreludebpl.1280:21| :skolemid |650| :pattern ( (|Map#Disjoint| m@@29 |m'@@1|)) )))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@30 V@@30)) )))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30)))) (let ((U@@31 (IMapTypeInv0 (type m@@30)))) (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6))) :qid |DafnyPreludebpl.1298:32| :skolemid |651| :no-pattern (type k@@6) :no-pattern (U_2_int k@@6) :no-pattern (U_2_bool k@@6) )))))) :qid |DafnyPreludebpl.1296:21| :skolemid |652| :pattern ( (|IMap#Domain| m@@30)) )))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31)))) (let ((U@@32 (IMapTypeInv0 (type m@@31)))) (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48))) :qid |DafnyPreludebpl.1301:32| :skolemid |653| :no-pattern (type v@@48) :no-pattern (U_2_int v@@48) :no-pattern (U_2_bool v@@48) )))))) :qid |DafnyPreludebpl.1299:21| :skolemid |654| :pattern ( (|IMap#Values| m@@31)) )))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32)))) (let ((U@@33 (IMapTypeInv0 (type m@@32)))) (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49))))) :qid |DafnyPreludebpl.1304:32| :skolemid |655| :no-pattern (type k@@7) :no-pattern (type v@@49) :no-pattern (U_2_int k@@7) :no-pattern (U_2_bool k@@7) :no-pattern (U_2_int v@@49) :no-pattern (U_2_bool v@@49) )))))) :qid |DafnyPreludebpl.1302:21| :skolemid |656| :pattern ( (|IMap#Items| m@@32)) )))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33)))) (let ((U@@34 (IMapTypeInv0 (type m@@33)))) (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34)))))) :qid |DafnyPreludebpl.1306:21| :skolemid |657| :pattern ( (|IMap#Domain| m@@33)) )))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34)))) (let ((U@@35 (IMapTypeInv0 (type m@@34)))) (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35)))))) :qid |DafnyPreludebpl.1309:21| :skolemid |658| :pattern ( (|IMap#Values| m@@34)) )))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35)))) (let ((U@@36 (IMapTypeInv0 (type m@@35)))) (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))))) :qid |DafnyPreludebpl.1312:21| :skolemid |659| :pattern ( (|IMap#Items| m@@35)) )))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50))) (let ((U@@37 (IMapTypeInv0 (type m@@36)))) (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :qid |DafnyPreludebpl.1325:10| :skolemid |660| :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14)) :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14)) )))))) :qid |DafnyPreludebpl.1323:20| :skolemid |661| :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50)) )))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :qid |DafnyPreludebpl.1340:15| :skolemid |662| :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0)) )))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))) :qid |DafnyPreludebpl.1347:21| :skolemid |663| :pattern ( (let ((U@@38 (type u@@15))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))) )))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49)))) (let ((U@@39 (MapType0TypeInv0 (type arg0@@109)))) (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55)))) (let ((U@@40 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)))) :qid |DafnyPreludebpl.1352:21| :skolemid |664| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56)))) (let ((U@@41 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)))) :qid |DafnyPreludebpl.1355:21| :skolemid |665| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6))) :qid |DafnyPreludebpl.1361:11| :skolemid |666| :no-pattern (type bx@@25) :no-pattern (U_2_int bx@@25) :no-pattern (U_2_bool bx@@25) ))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :qid |DafnyPreludebpl.1358:15| :skolemid |667| :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) )))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7))) (let ((U@@42 (type arg1@@50))) (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) )))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51))) (let ((U@@43 (type u@@16))) (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))))) :qid |DafnyPreludebpl.1371:21| :skolemid |668| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) )))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39)))) (let ((U@@44 (IMapTypeInv0 (type m@@39)))) (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :qid |DafnyPreludebpl.1382:36| :skolemid |669| :no-pattern (type u@@17) :no-pattern (U_2_int u@@17) :no-pattern (U_2_bool u@@17) )) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :qid |DafnyPreludebpl.1383:35| :skolemid |670| :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) ))))))) :qid |DafnyPreludebpl.1380:21| :skolemid |671| :pattern ( (|IMap#Equal| m@@39 |m'@@2|)) )))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40)))) (let ((U@@45 (IMapTypeInv0 (type m@@40)))) (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)))) :qid |DafnyPreludebpl.1385:21| :skolemid |672| :pattern ( (|IMap#Equal| m@@40 |m'@@3|)) )))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111)))) (let ((U@@46 (IMapTypeInv0 (type arg0@@111)))) (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46)))) :qid |funType:IMap#Merge| :pattern ( (|IMap#Merge| arg0@@111 arg1@@51)) )))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41)))) (let ((U@@47 (IMapTypeInv0 (type m@@41)))) (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))))) :qid |DafnyPreludebpl.1391:21| :skolemid |673| :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) )))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42)))) (let ((U@@48 (type u@@19))) (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))))) :qid |DafnyPreludebpl.1394:21| :skolemid |674| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19)) )))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112)))) (let ((U@@49 (IMapTypeInv0 (type arg0@@112)))) (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49)))) :qid |funType:IMap#Subtract| :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52)) )))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43)))) (let ((U@@50 (IMapTypeInv0 (type m@@43)))) (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))))) :qid |DafnyPreludebpl.1401:21| :skolemid |675| :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) )))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44)))) (let ((U@@51 (type u@@20))) (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))))) :qid |DafnyPreludebpl.1404:21| :skolemid |676| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20)) )))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :qid |DafnyPreludebpl.1413:30| :skolemid |677| :pattern ( (INTERNAL_add_boogie x@@42 y@@12)) )))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :qid |DafnyPreludebpl.1414:30| :skolemid |678| :pattern ( (INTERNAL_sub_boogie x@@43 y@@13)) )))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :qid |DafnyPreludebpl.1415:30| :skolemid |679| :pattern ( (INTERNAL_mul_boogie x@@44 y@@14)) )))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :qid |DafnyPreludebpl.1416:30| :skolemid |680| :pattern ( (INTERNAL_div_boogie x@@45 y@@15)) )))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :qid |DafnyPreludebpl.1417:30| :skolemid |681| :pattern ( (INTERNAL_mod_boogie x@@46 y@@16)) )))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :qid |DafnyPreludebpl.1418:51| :skolemid |682| :pattern ( (INTERNAL_lt_boogie x@@47 y@@17)) )))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :qid |DafnyPreludebpl.1419:51| :skolemid |683| :pattern ( (INTERNAL_le_boogie x@@48 y@@18)) )))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19)) :qid |DafnyPreludebpl.1420:51| :skolemid |684| :pattern ( (INTERNAL_gt_boogie x@@49 y@@19)) )))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20)) :qid |DafnyPreludebpl.1421:51| :skolemid |685| :pattern ( (INTERNAL_ge_boogie x@@50 y@@20)) )))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :qid |DafnyPreludebpl.1423:14| :skolemid |686| :pattern ( (Mul x@@51 y@@21)) )))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :qid |DafnyPreludebpl.1424:14| :skolemid |687| :pattern ( (Div x@@52 y@@22)) )))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :qid |DafnyPreludebpl.1425:14| :skolemid |688| :pattern ( (Mod x@@53 y@@23)) )))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :qid |DafnyPreludebpl.1426:14| :skolemid |689| :pattern ( (Add x@@54 y@@24)) )))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :qid |DafnyPreludebpl.1427:14| :skolemid |690| :pattern ( (Sub x@@55 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPreludebpl.1468:15| :skolemid |691| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPreludebpl.1473:15| :skolemid |692| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPreludebpl.1478:15| :skolemid |693| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (TagFamily arg0@@113)) TyTagFamilyType) :qid |funType:TagFamily| :pattern ( (TagFamily arg0@@113)) )))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@26)) bx@@26) ($Is ($Unbox intType bx@@26) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($IsBox bx@@26 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@27)) bx@@27) ($Is ($Unbox refType bx@@27) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsBox bx@@27 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |698| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsBox bx@@28 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :qid |unknown.0:0| :skolemid |702| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.array? arg0@@114)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@114)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.array? _System.array$arg)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@115)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@115)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.array? _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@29) BoxType)) ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) (Tclass._System.array? _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |705| :pattern ( ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (dtype arg0@@116)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@116)) )))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :qid |unknown.0:0| :skolemid |706| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2)) )))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :qid |unknown.0:0| :skolemid |707| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3)) )))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :qid |unknown.0:0| :skolemid |708| :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) )))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :qid |unknown.0:0| :skolemid |709| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)) )))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |710| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6)) )))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |711| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array arg0@@117)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@117)) )))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |712| :pattern ( (Tclass._System.array _System.array$arg@@8)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@118)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@118)) )))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :qid |unknown.0:0| :skolemid |713| :pattern ( (Tclass._System.array _System.array$arg@@9)) )))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array _System.array$arg@@10)))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) )))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :qid |unknown.0:0| :skolemid |715| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) )))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6)) )))
(assert (forall ((arg0@@119 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) )))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :qid |unknown.0:0| :skolemid |717| :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@120)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |718| :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) )))
(assert (forall ((arg0@@121 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@121)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@121)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :qid |unknown.0:0| :skolemid |719| :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@31)) bx@@31) ($Is ($Unbox HandleTypeType bx@@31) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@122 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@122 arg1@@54 arg2@@8)) 24) :qid |ctor:MapType2Type| )) (forall ((arg0@@123 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@123 arg1@@55 arg2@@9)) arg0@@123) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@123 arg1@@55 arg2@@9)) ))) (forall ((arg0@@124 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@124 arg1@@56 arg2@@10)) arg1@@56) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@124 arg1@@56 arg2@@10)) ))) (forall ((arg0@@125 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@125 arg1@@57 arg2@@11)) arg2@@11) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@125 arg1@@57 arg2@@11)) ))) (forall ((arg0@@126 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@58 arg2@@12)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@58 arg2@@12)) ))) (forall ((arg0@@127 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1))) (let ((aVar1@@2 (type arg2@@13))) (let ((aVar0@@0 (type arg1@@59))) (= (type (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) ))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45)))) (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@128 arg1@@60 arg2@@14)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@128 arg1@@60 arg2@@14)) ))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@1 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@1 bx0))) :qid |unknown.0:0| :skolemid |721| :pattern ( (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0)) )))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@2 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@2 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :qid |unknown.0:0| :skolemid |722| :pattern ( (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) )))
(assert (forall ((arg0@@129 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@3 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@32) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@3 bx0@@1) bx@@32)))) :qid |unknown.0:0| :skolemid |723| :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) )))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld)))) :qid |unknown.0:0| :skolemid |724| :no-pattern (type o@@44) :no-pattern (type fld) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :qid |unknown.0:0| :skolemid |725| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) )))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0)))) :qid |unknown.0:0| :skolemid |726| :no-pattern (type o@@45) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) )))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@46) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) )))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@47) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) )))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3)))) :qid |unknown.0:0| :skolemid |732| :no-pattern (type o@@48) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) )))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4)))) :qid |unknown.0:0| :skolemid |734| :no-pattern (type o@@49) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) )))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@4 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@4) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |736| :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@4)) :pattern ( (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8)) )))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@5 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9))) :qid |unknown.0:0| :skolemid |737| :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@5)) :pattern ( (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9)) )))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :qid |DafnyPreludebpl.545:12| :skolemid |738| :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) )))) :qid |unknown.0:0| :skolemid |739| :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) )))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@33 T@U) ) (!  (=> (and (= (type bx@@33) BoxType) ($IsBox bx@@33 u0)) ($IsBox bx@@33 t0@@28)) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@33 u0)) :pattern ( ($IsBox bx@@33 t0@@28)) ))) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 t1@@19)) ($IsBox bx@@34 u1)) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@34 t1@@19)) :pattern ( ($IsBox bx@@34 u1)) )))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) )))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |743| :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9))) )))) :qid |unknown.0:0| :skolemid |744| :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) )))) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :qid |unknown.0:0| :skolemid |746| :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ))) :qid |unknown.0:0| :skolemid |747| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) )))
(assert (forall ((arg0@@131 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@131)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@131)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :qid |unknown.0:0| :skolemid |749| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :qid |unknown.0:0| :skolemid |750| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@35 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@35) BoxType)) ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@35)) bx@@35) ($Is ($Unbox HandleTypeType bx@@35) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) )))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |752| :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) ))))) :qid |unknown.0:0| :skolemid |753| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) )))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :qid |unknown.0:0| :skolemid |754| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7)) )))
(assert (forall ((arg0@@133 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@134)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@134)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :qid |unknown.0:0| :skolemid |756| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) )))
(assert (forall ((arg0@@135 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@135)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@135)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) )))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :qid |unknown.0:0| :skolemid |759| :no-pattern (type |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) ))))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) )))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :qid |unknown.0:0| :skolemid |761| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@136)) )))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :qid |unknown.0:0| :skolemid |762| :pattern ( (Tclass._System.___hFunc0 |#$R@@15|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@137)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@137)) )))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :qid |unknown.0:0| :skolemid |763| :pattern ( (Tclass._System.___hFunc0 |#$R@@16|)) )))
(assert (forall ((|#$R@@17| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$R@@17|)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) )))
(assert  (and (forall ((arg0@@138 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@138 arg1@@64 arg2@@16)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@138 arg1@@64 arg2@@16)) )) (forall ((arg0@@139 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@139 arg1@@65 arg2@@17)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@139 arg1@@65 arg2@@17)) ))))
(assert (forall ((t0@@31 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@6))) :qid |unknown.0:0| :skolemid |765| :pattern ( (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2))) )))
(assert (forall ((t0@@32 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@7))) (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) :qid |unknown.0:0| :skolemid |766| :pattern ( (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) )))
(assert (forall ((arg0@@140 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@140 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@140 arg1@@66 arg2@@18)) )))
(assert (forall ((t0@@33 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@38) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@8) bx@@38)))) :qid |unknown.0:0| :skolemid |767| :pattern ( (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) )))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@50) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) )))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@51) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) )))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@52) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) )))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8)))) :qid |unknown.0:0| :skolemid |774| :no-pattern (type o@@53) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) )))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9)))) :qid |unknown.0:0| :skolemid |776| :no-pattern (type o@@54) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) )))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10)))) :qid |unknown.0:0| :skolemid |778| :no-pattern (type o@@55) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :qid |unknown.0:0| :skolemid |779| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) )))
(assert (forall ((t0@@40 T@U) (heap@@9 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@9) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@9 f@@23) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |780| :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@9)) :pattern ( (Reads0 t0@@40 heap@@9 f@@23)) )))
(assert (forall ((t0@@41 T@U) (heap@@10 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@10) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@10 f@@24))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@10)) :pattern ( (Requires0 t0@@41 heap@@10 f@@24)) )))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :qid |DafnyPreludebpl.545:12| :skolemid |782| :pattern ( (Apply0 t0@@42 h@@30 f@@25)) )))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) )))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@39 T@U) ) (!  (=> (and (= (type bx@@39) BoxType) ($IsBox bx@@39 t0@@43)) ($IsBox bx@@39 u0@@0)) :qid |unknown.0:0| :skolemid |784| :pattern ( ($IsBox bx@@39 t0@@43)) :pattern ( ($IsBox bx@@39 u0@@0)) )))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :qid |unknown.0:0| :skolemid |785| :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) )))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :qid |unknown.0:0| :skolemid |786| :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13))) ))))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) )))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@141)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@141)) )))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :qid |unknown.0:0| :skolemid |789| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|)) )))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@142)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@142)) )))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|)) )))
(assert (forall ((|#$R@@20| T@U) (bx@@40 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@40) BoxType)) ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :qid |unknown.0:0| :skolemid |791| :pattern ( ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) )))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |792| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) )))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@143)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@143)) )))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@144)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@144)) )))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :qid |unknown.0:0| :skolemid |795| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|)) )))
(assert (forall ((|#$R@@25| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) )))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) )))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :qid |unknown.0:0| :skolemid |798| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@42 T@U) ) (!  (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@42)) bx@@42) ($Is ($Unbox refType bx@@42) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |799| :pattern ( ($IsBox bx@@42 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |800| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :qid |unknown.0:0| :skolemid |801| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |802| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :qid |unknown.0:0| :skolemid |803| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@145 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@146)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :qid |unknown.0:0| :skolemid |805| :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) )))
(assert (forall ((arg0@@147 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@147)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@147)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |806| :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@148)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :qid |unknown.0:0| :skolemid |807| :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@149 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@149 arg1@@68 arg2@@20 arg3@@3)) 25) :qid |ctor:MapType3Type| )) (forall ((arg0@@150 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) arg0@@150) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) ))) (forall ((arg0@@151 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) ))) (forall ((arg0@@152 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) ))) (forall ((arg0@@153 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) ))) (forall ((arg0@@154 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@154)))) (= (type (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) ))) (forall ((arg0@@155 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@1 (type arg1@@74))) (= (type (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49)))) (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@156 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@157 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@157 arg1@@76 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@157 arg1@@76 arg2@@28)) ))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@11 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@11 bx0@@13 bx1))) :qid |unknown.0:0| :skolemid |809| :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@12 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@12 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@13 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@44) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@15 bx1@@1) bx@@44)))) :qid |unknown.0:0| :skolemid |811| :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11)))) :qid |unknown.0:0| :skolemid |812| :no-pattern (type o@@56) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :qid |unknown.0:0| :skolemid |813| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12)))) :qid |unknown.0:0| :skolemid |814| :no-pattern (type o@@57) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :qid |unknown.0:0| :skolemid |815| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@58) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14)))) :qid |unknown.0:0| :skolemid |818| :no-pattern (type o@@59) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :qid |unknown.0:0| :skolemid |819| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) )))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@60) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) )))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@61) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) )))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |824| :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@14)) :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8)) )))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9))) :qid |unknown.0:0| :skolemid |825| :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@15)) :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |826| :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) )))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@45 T@U) ) (!  (=> (and (= (type bx@@45) BoxType) ($IsBox bx@@45 u0@@1)) ($IsBox bx@@45 t0@@58)) :qid |unknown.0:0| :skolemid |828| :pattern ( ($IsBox bx@@45 u0@@1)) :pattern ( ($IsBox bx@@45 t0@@58)) ))) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u1@@0)) ($IsBox bx@@46 t1@@34)) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsBox bx@@46 u1@@0)) :pattern ( ($IsBox bx@@46 t1@@34)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 t2@@11)) ($IsBox bx@@47 u2)) :qid |unknown.0:0| :skolemid |830| :pattern ( ($IsBox bx@@47 t2@@11)) :pattern ( ($IsBox bx@@47 u2)) )))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :qid |unknown.0:0| :skolemid |832| :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17))) )))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) )))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) )))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :qid |unknown.0:0| :skolemid |835| :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38)) )))
(assert (forall ((arg0@@159 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@160)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@160)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@161)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@161)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |839| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@162)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |840| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@48 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@48) BoxType)) ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@48)) bx@@48) ($Is ($Unbox HandleTypeType bx@@48) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |841| :pattern ( ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |842| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) ))))) :qid |unknown.0:0| :skolemid |843| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :qid |unknown.0:0| :skolemid |844| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)) )))
(assert (forall ((arg0@@163 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@164)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :qid |unknown.0:0| :skolemid |846| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@165)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@165)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |847| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@166)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |848| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :qid |unknown.0:0| :skolemid |850| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))))) :qid |unknown.0:0| :skolemid |851| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@167 T@U) (arg1@@80 T@U) (arg2@@32 T@U) (arg3@@12 T@U) (arg4@@4 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$T3| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) Tagclass._System.___hFunc4) (= (TagFamily (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) |tytagFamily$_#Func4|))) :qid |unknown.0:0| :skolemid |853| :pattern ( (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@168)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@168)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$T3@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@169 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@169)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@169)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$T3@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@170)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@170)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$T3@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@171)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$T3@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@172)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$T3@@4| T@U) (|#$R@@52| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) |#$R@@52|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$T3@@5| T@U) (|#$R@@53| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|)))) :qid |unknown.0:0| :skolemid |859| :pattern ( ($IsBox bx@@50 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@173 T@T) (arg1@@81 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@5 T@T) (arg5@@1 T@T) ) (! (= (Ctor (MapType4Type arg0@@173 arg1@@81 arg2@@33 arg3@@13 arg4@@5 arg5@@1)) 26) :qid |ctor:MapType4Type| )) (forall ((arg0@@174 T@T) (arg1@@82 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@6 T@T) (arg5@@2 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@174 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) arg0@@174) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@174 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) ))) (forall ((arg0@@175 T@T) (arg1@@83 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@7 T@T) (arg5@@3 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@175 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) arg1@@83) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@175 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) ))) (forall ((arg0@@176 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@8 T@T) (arg5@@4 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@176 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@176 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) ))) (forall ((arg0@@177 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@9 T@T) (arg5@@5 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@177 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@177 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) ))) (forall ((arg0@@178 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@10 T@T) (arg5@@6 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@178 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) arg4@@10) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@178 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) ))) (forall ((arg0@@179 T@T) (arg1@@87 T@T) (arg2@@39 T@T) (arg3@@19 T@T) (arg4@@11 T@T) (arg5@@7 T@T) ) (! (= (MapType4TypeInv5 (MapType4Type arg0@@179 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) arg5@@7) :qid |typeInv:MapType4TypeInv5| :pattern ( (MapType4Type arg0@@179 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) ))) (forall ((arg0@@180 T@U) (arg1@@88 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@12 T@U) (arg5@@8 T@U) ) (! (let ((aVar5 (MapType4TypeInv5 (type arg0@@180)))) (= (type (MapType4Select arg0@@180 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) aVar5)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@180 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) ))) (forall ((arg0@@181 T@U) (arg1@@89 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@13 T@U) (arg5@@9 T@U) (arg6@@1 T@U) ) (! (let ((aVar5@@0 (type arg6@@1))) (let ((aVar4 (type arg5@@9))) (let ((aVar3@@2 (type arg4@@13))) (let ((aVar2@@3 (type arg3@@21))) (let ((aVar1@@4 (type arg2@@41))) (let ((aVar0@@2 (type arg1@@89))) (= (type (MapType4Store arg0@@181 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4 aVar5@@0)))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@181 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) ))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (x4 T@U) (val@@15 T@U) ) (! (let ((aVar5@@1 (MapType4TypeInv5 (type m@@54)))) (=> (= (type val@@15) aVar5@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 x4 val@@15) x0@@14 x1@@8 x2@@4 x3 x4) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (x4@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) (y4 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 x4@@0 val@@16) y0@@10 y1@@6 y2@@3 y3 y4) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3 y4))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (x4@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) (y4@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 x4@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0 y4@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0 y4@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (x4@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) (y4@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 x4@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1 y4@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1 y4@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (x4@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) (y4@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 x4@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2 y4@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2 y4@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (x4@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 x4@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3 y4@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3 y4@@3))) :qid |mapAx1:MapType4Select:4| :weight 0 ))) (forall ((val@@21 T@U) (m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4@@5 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4@@5 val@@21) y0@@15 y1@@11 y2@@8 y3@@4 y4@@4) (MapType4Select m@@60 y0@@15 y1@@11 y2@@8 y3@@4 y4@@4))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@182 T@U) (arg1@@90 T@U) (arg2@@42 T@U) (arg3@@22 T@U) (arg4@@14 T@U) (arg5@@10 T@U) (arg6@@2 T@U) (arg7 T@U) (arg8 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@182 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@182 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) ))) (forall ((arg0@@183 T@U) (arg1@@91 T@U) (arg2@@43 T@U) ) (! (= (type (Handle4 arg0@@183 arg1@@91 arg2@@43)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@183 arg1@@91 arg2@@43)) ))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (t4 T@U) (heap@@16 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type t4) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@61 t1@@37 t2@@14 t3 t4 heap@@16 (Handle4 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3) (MapType4Select h@@39 heap@@16 bx0@@27 bx1@@13 bx2 bx3))) :qid |unknown.0:0| :skolemid |860| :pattern ( (Apply4 t0@@61 t1@@37 t2@@14 t3 t4 heap@@16 (Handle4 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (t4@@0 T@U) (heap@@17 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type t4@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@17 bx0@@28 bx1@@14 bx2@@0 bx3@@0))) (Requires4 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0)) :qid |unknown.0:0| :skolemid |861| :pattern ( (Requires4 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0)) )))
(assert (forall ((arg0@@184 T@U) (arg1@@92 T@U) (arg2@@44 T@U) (arg3@@23 T@U) (arg4@@15 T@U) (arg5@@11 T@U) (arg6@@3 T@U) (arg7@@0 T@U) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@184 arg1@@92 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@184 arg1@@92 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (t4@@1 T@U) (heap@@18 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx3@@1 T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type t4@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@51) BoxType)) (= (U_2_bool (MapType0Select (Reads4 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1) bx@@51)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@29 bx1@@15 bx2@@1 bx3@@1) bx@@51)))) :qid |unknown.0:0| :skolemid |862| :pattern ( (MapType0Select (Reads4 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1) bx@@51)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (t4@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type t4@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($IsBox bx3@@2 t3@@2)) ($Is f@@41 (Tclass._System.___hFunc4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17)))) :qid |unknown.0:0| :skolemid |863| :no-pattern (type o@@62) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2) (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2))) :qid |unknown.0:0| :skolemid |864| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (t4@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type t4@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($IsBox bx3@@3 t3@@3)) ($Is f@@42 (Tclass._System.___hFunc4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18)))) :qid |unknown.0:0| :skolemid |865| :no-pattern (type o@@63) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3) (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3))) :qid |unknown.0:0| :skolemid |866| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (t4@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type t4@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($IsBox bx3@@4 t3@@4)) ($Is f@@43 (Tclass._System.___hFunc4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19)))) :qid |unknown.0:0| :skolemid |867| :no-pattern (type o@@64) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (= (Requires4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4) (Requires4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4))) :qid |unknown.0:0| :skolemid |868| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (t4@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type t4@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($IsBox bx3@@5 t3@@5)) ($Is f@@44 (Tclass._System.___hFunc4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20)))) :qid |unknown.0:0| :skolemid |869| :no-pattern (type o@@65) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (= (Requires4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5) (Requires4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5))) :qid |unknown.0:0| :skolemid |870| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5)) )))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (t4@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type t4@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($IsBox bx3@@6 t3@@6)) ($Is f@@45 (Tclass._System.___hFunc4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21)))) :qid |unknown.0:0| :skolemid |871| :no-pattern (type o@@66) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6) (Apply4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6))) :qid |unknown.0:0| :skolemid |872| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6)) )))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (t4@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type t4@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($IsBox bx3@@7 t3@@7)) ($Is f@@46 (Tclass._System.___hFunc4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22)))) :qid |unknown.0:0| :skolemid |873| :no-pattern (type o@@67) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7) (Apply4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7))) :qid |unknown.0:0| :skolemid |874| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7)) )))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (t4@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type t4@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($IsBox bx3@@8 t3@@8)) ($Is f@@47 (Tclass._System.___hFunc4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8))))) (= (|Set#Equal| (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |875| :pattern ( (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8)) )))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (t4@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type t4@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($IsBox bx3@@9 t3@@9)) ($Is f@@48 (Tclass._System.___hFunc4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9)))) (|Set#Equal| (Reads4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9) (|Set#Empty| BoxType)))) (= (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9) (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9))) :qid |unknown.0:0| :skolemid |876| :pattern ( (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= (type t4@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25)) ($IsBox bx3@@10 t3@@10))) (Requires4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10))) ($IsBox (Apply4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10) t4@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |877| :pattern ( (Apply4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10)) )))) :qid |unknown.0:0| :skolemid |878| :pattern ( ($Is f@@49 (Tclass._System.___hFunc4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (t4@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type t4@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc4 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11)) (forall ((bx@@52 T@U) ) (!  (=> (and (= (type bx@@52) BoxType) ($IsBox bx@@52 u0@@2)) ($IsBox bx@@52 t0@@73)) :qid |unknown.0:0| :skolemid |879| :pattern ( ($IsBox bx@@52 u0@@2)) :pattern ( ($IsBox bx@@52 t0@@73)) ))) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u1@@1)) ($IsBox bx@@53 t1@@49)) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@53 u1@@1)) :pattern ( ($IsBox bx@@53 t1@@49)) ))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u2@@0)) ($IsBox bx@@54 t2@@26)) :qid |unknown.0:0| :skolemid |881| :pattern ( ($IsBox bx@@54 u2@@0)) :pattern ( ($IsBox bx@@54 t2@@26)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 u3)) ($IsBox bx@@55 t3@@11)) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@55 u3)) :pattern ( ($IsBox bx@@55 t3@@11)) ))) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 t4@@11)) ($IsBox bx@@56 u4)) :qid |unknown.0:0| :skolemid |883| :pattern ( ($IsBox bx@@56 t4@@11)) :pattern ( ($IsBox bx@@56 u4)) )))) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) :qid |unknown.0:0| :skolemid |884| :pattern ( ($Is f@@50 (Tclass._System.___hFunc4 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11)) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) )))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (t4@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type t4@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (= (type bx3@@11) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (and ($IsBox bx3@@11 t3@@12) ($IsAllocBox bx3@@11 t3@@12 h@@43))) (Requires4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc)))) :qid |unknown.0:0| :skolemid |885| :pattern ( (MapType0Select (Reads4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11) ($Box r@@21))) )))) :qid |unknown.0:0| :skolemid |886| :pattern ( (Apply4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11)) :pattern ( (Reads4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11)) )))) :qid |unknown.0:0| :skolemid |887| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12) h@@43)) )))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (t4@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type t4@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) ($IsAllocBox bx3@@12 t3@@13 h@@44)) (Requires4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12)) ($IsAllocBox (Apply4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12) t4@@13 h@@44))) :qid |unknown.0:0| :skolemid |888| :pattern ( (Apply4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12)) ))) :qid |unknown.0:0| :skolemid |889| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13) h@@44)) )))
(assert (forall ((arg0@@185 T@U) (arg1@@93 T@U) (arg2@@45 T@U) (arg3@@24 T@U) (arg4@@16 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@185 arg1@@93 arg2@@45 arg3@@24 arg4@@16)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@185 arg1@@93 arg2@@45 arg3@@24 arg4@@16)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$T3@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@54|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) Tagclass._System.___hPartialFunc4) (= (TagFamily (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) |tytagFamily$_#PartialFunc4|))) :qid |unknown.0:0| :skolemid |890| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@186)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@186)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$T3@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) |#$T0@@42|)) :qid |unknown.0:0| :skolemid |891| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@187)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@187)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$T3@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) |#$T1@@27|)) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@188)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@188)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$T3@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) |#$T2@@9|)) :qid |unknown.0:0| :skolemid |893| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@189)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@189)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$T3@@10| T@U) (|#$R@@58| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |894| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@190)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@190)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$T3@@11| T@U) (|#$R@@59| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) |#$R@@59|)) :qid |unknown.0:0| :skolemid |895| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$T3@@12| T@U) (|#$R@@60| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|)))) :qid |unknown.0:0| :skolemid |896| :pattern ( ($IsBox bx@@57 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$T3@@13| T@U) (|#$R@@61| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) (|x2#0| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (= (type |x2#0|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@3| |#$T0@@48|) ($IsBox |x1#0@@1| |#$T1@@32|)) ($IsBox |x2#0| |#$T2@@13|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1| |x2#0| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |897| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@1|) :no-pattern (type |x2#0|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) ))))) :qid |unknown.0:0| :skolemid |898| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$T3@@14| T@U) (|#$R@@62| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14))) :qid |unknown.0:0| :skolemid |899| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14)) )))
(assert (forall ((arg0@@191 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@17 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@191 arg1@@94 arg2@@46 arg3@@25 arg4@@17)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@191 arg1@@94 arg2@@46 arg3@@25 arg4@@17)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$T3@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@63|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) Tagclass._System.___hTotalFunc4) (= (TagFamily (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) |tytagFamily$_#TotalFunc4|))) :qid |unknown.0:0| :skolemid |900| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@192)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@192)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$T3@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) |#$T0@@51|)) :qid |unknown.0:0| :skolemid |901| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@193)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@193)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$T3@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) |#$T1@@36|)) :qid |unknown.0:0| :skolemid |902| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@194)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@194)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$T3@@18| T@U) (|#$R@@66| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) |#$T2@@18|)) :qid |unknown.0:0| :skolemid |903| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@195)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@195)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$T3@@19| T@U) (|#$R@@67| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |904| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@196)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@196)) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$T3@@20| T@U) (|#$R@@68| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) |#$R@@68|)) :qid |unknown.0:0| :skolemid |905| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3@@21| T@U) (|#$R@@69| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@69|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|)))) :qid |unknown.0:0| :skolemid |906| :pattern ( ($IsBox bx@@58 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@22| T@U) (|#$R@@70| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@70|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) (|x2#0@@0| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (= (type |x2#0@@0|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@4| |#$T0@@57|) ($IsBox |x1#0@@2| |#$T1@@41|)) ($IsBox |x2#0@@0| |#$T2@@22|)) ($IsBox |x3#0@@0| |#$T3@@22|))) (Requires4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2| |x2#0@@0| |x3#0@@0|)) :qid |unknown.0:0| :skolemid |907| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@2|) :no-pattern (type |x2#0@@0|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))))) :qid |unknown.0:0| :skolemid |908| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@23| T@U) (|#$R@@71| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@71|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15))) :qid |unknown.0:0| :skolemid |909| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15)) )))
(assert (forall ((arg0@@197 T@U) (arg1@@95 T@U) (arg2@@47 T@U) (arg3@@26 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@197 arg1@@95 arg2@@47 arg3@@26)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@197 arg1@@95 arg2@@47 arg3@@26)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$R@@72|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$R@@72|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$R@@72|)) |tytagFamily$_#Func3|))) :qid |unknown.0:0| :skolemid |910| :pattern ( (Tclass._System.___hFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$R@@72|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@198)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@198)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$R@@73|)) |#$T0@@60|)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$R@@73|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@199)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@199)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$R@@74|)) |#$T1@@45|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.___hFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$R@@74|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@200)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@200)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$R@@75|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) |#$T2@@27|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@201)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@201)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) |#$R@@76|)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$R@@77| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$R@@77|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|)))) :qid |unknown.0:0| :skolemid |915| :pattern ( ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@202 T@T) (arg1@@96 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@18 T@T) ) (! (= (Ctor (MapType5Type arg0@@202 arg1@@96 arg2@@48 arg3@@27 arg4@@18)) 27) :qid |ctor:MapType5Type| )) (forall ((arg0@@203 T@T) (arg1@@97 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@19 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@203 arg1@@97 arg2@@49 arg3@@28 arg4@@19)) arg0@@203) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@203 arg1@@97 arg2@@49 arg3@@28 arg4@@19)) ))) (forall ((arg0@@204 T@T) (arg1@@98 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@20 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@204 arg1@@98 arg2@@50 arg3@@29 arg4@@20)) arg1@@98) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@204 arg1@@98 arg2@@50 arg3@@29 arg4@@20)) ))) (forall ((arg0@@205 T@T) (arg1@@99 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@21 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@205 arg1@@99 arg2@@51 arg3@@30 arg4@@21)) arg2@@51) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@205 arg1@@99 arg2@@51 arg3@@30 arg4@@21)) ))) (forall ((arg0@@206 T@T) (arg1@@100 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@22 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@206 arg1@@100 arg2@@52 arg3@@31 arg4@@22)) arg3@@31) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@206 arg1@@100 arg2@@52 arg3@@31 arg4@@22)) ))) (forall ((arg0@@207 T@T) (arg1@@101 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@23 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@207 arg1@@101 arg2@@53 arg3@@32 arg4@@23)) arg4@@23) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@207 arg1@@101 arg2@@53 arg3@@32 arg4@@23)) ))) (forall ((arg0@@208 T@U) (arg1@@102 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@24 T@U) ) (! (let ((aVar4@@0 (MapType5TypeInv4 (type arg0@@208)))) (= (type (MapType5Select arg0@@208 arg1@@102 arg2@@54 arg3@@33 arg4@@24)) aVar4@@0)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@208 arg1@@102 arg2@@54 arg3@@33 arg4@@24)) ))) (forall ((arg0@@209 T@U) (arg1@@103 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@25 T@U) (arg5@@12 T@U) ) (! (let ((aVar4@@1 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@25))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@103))) (= (type (MapType5Store arg0@@209 arg1@@103 arg2@@55 arg3@@34 arg4@@25 arg5@@12)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@1))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@209 arg1@@103 arg2@@55 arg3@@34 arg4@@25 arg5@@12)) ))) (forall ((m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (val@@22 T@U) ) (! (let ((aVar4@@2 (MapType5TypeInv4 (type m@@61)))) (=> (= (type val@@22) aVar4@@2) (= (MapType5Select (MapType5Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 val@@22) x0@@21 x1@@15 x2@@11 x3@@6) val@@22))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (forall ((val@@23 T@U) (m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) ) (!  (or (= x0@@22 y0@@16) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 val@@23) y0@@16 y1@@12 y2@@9 y3@@5) (MapType5Select m@@62 y0@@16 y1@@12 y2@@9 y3@@5))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) ) (!  (or (= x1@@17 y1@@13) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 val@@24) y0@@17 y1@@13 y2@@10 y3@@6) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) ) (!  (or (= x2@@14 y2@@11) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 val@@25) y0@@18 y1@@14 y2@@11 y3@@7) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) ) (!  (or (= x3@@10 y3@@8) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 val@@26) y0@@19 y1@@15 y2@@12 y3@@8) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 val@@27) y0@@20 y1@@16 y2@@13 y3@@9) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@210 T@U) (arg1@@104 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@26 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) ) (! (= (type (Apply3 arg0@@210 arg1@@104 arg2@@56 arg3@@35 arg4@@26 arg5@@13 arg6@@4 arg7@@1 arg8@@1)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@210 arg1@@104 arg2@@56 arg3@@35 arg4@@26 arg5@@13 arg6@@4 arg7@@1 arg8@@1)) ))) (forall ((arg0@@211 T@U) (arg1@@105 T@U) (arg2@@57 T@U) ) (! (= (type (Handle3 arg0@@211 arg1@@105 arg2@@57)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@211 arg1@@105 arg2@@57)) ))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (heap@@21 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (Apply3 t0@@76 t1@@52 t2@@29 t3@@14 heap@@21 (Handle3 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13) (MapType5Select h@@45 heap@@21 bx0@@41 bx1@@27 bx2@@13))) :qid |unknown.0:0| :skolemid |916| :pattern ( (Apply3 t0@@76 t1@@52 t2@@29 t3@@14 heap@@21 (Handle3 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (heap@@22 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@22 bx0@@42 bx1@@28 bx2@@14))) (Requires3 t0@@77 t1@@53 t2@@30 t3@@15 heap@@22 (Handle3 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14)) :qid |unknown.0:0| :skolemid |917| :pattern ( (Requires3 t0@@77 t1@@53 t2@@30 t3@@15 heap@@22 (Handle3 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14)) )))
(assert (forall ((arg0@@212 T@U) (arg1@@106 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@27 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) ) (! (= (type (Reads3 arg0@@212 arg1@@106 arg2@@58 arg3@@36 arg4@@27 arg5@@14 arg6@@5 arg7@@2 arg8@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@212 arg1@@106 arg2@@58 arg3@@36 arg4@@27 arg5@@14 arg6@@5 arg7@@2 arg8@@2)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (heap@@23 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx@@60) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@78 t1@@54 t2@@31 t3@@16 heap@@23 (Handle3 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15) bx@@60)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@43 bx1@@29 bx2@@15) bx@@60)))) :qid |unknown.0:0| :skolemid |918| :pattern ( (MapType0Select (Reads3 t0@@78 t1@@54 t2@@31 t3@@16 heap@@23 (Handle3 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15) bx@@60)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($Is f@@53 (Tclass._System.___hFunc3 t0@@79 t1@@55 t2@@32 t3@@17)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23)))) :qid |unknown.0:0| :skolemid |919| :no-pattern (type o@@68) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16) (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16))) :qid |unknown.0:0| :skolemid |920| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($Is f@@54 (Tclass._System.___hFunc3 t0@@80 t1@@56 t2@@33 t3@@18)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24)))) :qid |unknown.0:0| :skolemid |921| :no-pattern (type o@@69) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17) (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17))) :qid |unknown.0:0| :skolemid |922| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($Is f@@55 (Tclass._System.___hFunc3 t0@@81 t1@@57 t2@@34 t3@@19)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads3 t0@@81 t1@@57 t2@@34 t3@@19 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25)))) :qid |unknown.0:0| :skolemid |923| :no-pattern (type o@@70) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (= (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18) (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18))) :qid |unknown.0:0| :skolemid |924| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($Is f@@56 (Tclass._System.___hFunc3 t0@@82 t1@@58 t2@@35 t3@@20)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26)))) :qid |unknown.0:0| :skolemid |925| :no-pattern (type o@@71) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (= (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19) (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19))) :qid |unknown.0:0| :skolemid |926| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19)) )))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($Is f@@57 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@36 t3@@21)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@83 t1@@59 t2@@36 t3@@21 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27)))) :qid |unknown.0:0| :skolemid |927| :no-pattern (type o@@72) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20) (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20))) :qid |unknown.0:0| :skolemid |928| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20)) )))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($Is f@@58 (Tclass._System.___hFunc3 t0@@84 t1@@60 t2@@37 t3@@22)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28)))) :qid |unknown.0:0| :skolemid |929| :no-pattern (type o@@73) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21) (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21))) :qid |unknown.0:0| :skolemid |930| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21)) )))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($Is f@@59 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@38 t3@@23))))) (= (|Set#Equal| (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |931| :pattern ( (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22) ($IsGoodHeap heap@@24)) :pattern ( (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22)) )))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($Is f@@60 (Tclass._System.___hFunc3 t0@@86 t1@@62 t2@@39 t3@@24)))) (|Set#Equal| (Reads3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) (|Set#Empty| BoxType)))) (= (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23))) :qid |unknown.0:0| :skolemid |932| :pattern ( (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) ($IsGoodHeap heap@@25)) :pattern ( (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23)) )))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc3 t0@@87 t1@@63 t2@@40 t3@@25)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) ) (!  (=> (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40))) (Requires3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24))) ($IsBox (Apply3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24) t3@@25)) :qid |DafnyPreludebpl.545:12| :skolemid |933| :pattern ( (Apply3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24)) )))) :qid |unknown.0:0| :skolemid |934| :pattern ( ($Is f@@61 (Tclass._System.___hFunc3 t0@@87 t1@@63 t2@@40 t3@@25))) )))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc3 t0@@88 t1@@64 t2@@41 t3@@26)) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u0@@3)) ($IsBox bx@@61 t0@@88)) :qid |unknown.0:0| :skolemid |935| :pattern ( ($IsBox bx@@61 u0@@3)) :pattern ( ($IsBox bx@@61 t0@@88)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u1@@2)) ($IsBox bx@@62 t1@@64)) :qid |unknown.0:0| :skolemid |936| :pattern ( ($IsBox bx@@62 u1@@2)) :pattern ( ($IsBox bx@@62 t1@@64)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u2@@1)) ($IsBox bx@@63 t2@@41)) :qid |unknown.0:0| :skolemid |937| :pattern ( ($IsBox bx@@63 u2@@1)) :pattern ( ($IsBox bx@@63 t2@@41)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t3@@26)) ($IsBox bx@@64 u3@@0)) :qid |unknown.0:0| :skolemid |938| :pattern ( ($IsBox bx@@64 t3@@26)) :pattern ( ($IsBox bx@@64 u3@@0)) )))) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) :qid |unknown.0:0| :skolemid |939| :pattern ( ($Is f@@62 (Tclass._System.___hFunc3 t0@@88 t1@@64 t2@@41 t3@@26)) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) )))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@89 t1@@65 t2@@42 t3@@27) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) ) (!  (=> (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (=> (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (Requires3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |940| :pattern ( (MapType0Select (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |941| :pattern ( (Apply3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) :pattern ( (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) )))) :qid |unknown.0:0| :skolemid |942| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@89 t1@@65 t2@@42 t3@@27) h@@49)) )))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@90 t1@@66 t2@@43 t3@@28) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) ) (!  (=> (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) (Requires3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26)) ($IsAllocBox (Apply3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26) t3@@28 h@@50))) :qid |unknown.0:0| :skolemid |943| :pattern ( (Apply3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26)) ))) :qid |unknown.0:0| :skolemid |944| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@90 t1@@66 t2@@43 t3@@28) h@@50)) )))
(assert (forall ((arg0@@213 T@U) (arg1@@107 T@U) (arg2@@59 T@U) (arg3@@37 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@213 arg1@@107 arg2@@59 arg3@@37)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@213 arg1@@107 arg2@@59 arg3@@37)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$R@@78|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) |tytagFamily$_#PartialFunc3|))) :qid |unknown.0:0| :skolemid |945| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) )))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@214)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@214)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) |#$T0@@66|)) :qid |unknown.0:0| :skolemid |946| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@215)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@215)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|)) |#$T1@@51|)) :qid |unknown.0:0| :skolemid |947| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@216)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@216)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) |#$T2@@33|)) :qid |unknown.0:0| :skolemid |948| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) )))
(assert (forall ((arg0@@217 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@217)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@217)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$R@@82| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$R@@82|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) |#$R@@82|)) :qid |unknown.0:0| :skolemid |949| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$R@@83| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$R@@83|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|)))) :qid |unknown.0:0| :skolemid |950| :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|))) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$R@@84| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@5| |#$T0@@71|) ($IsBox |x1#0@@3| |#$T1@@55|)) ($IsBox |x2#0@@1| |#$T2@@36|))) (|Set#Equal| (Reads3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0@@1|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |951| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) ))))) :qid |unknown.0:0| :skolemid |952| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|))) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$R@@85| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$R@@85|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16))) :qid |unknown.0:0| :skolemid |953| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16)) )))
(assert (forall ((arg0@@218 T@U) (arg1@@108 T@U) (arg2@@60 T@U) (arg3@@38 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@218 arg1@@108 arg2@@60 arg3@@38)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@218 arg1@@108 arg2@@60 arg3@@38)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$R@@86|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)) |tytagFamily$_#TotalFunc3|))) :qid |unknown.0:0| :skolemid |954| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@219)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@219)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|)) |#$T0@@74|)) :qid |unknown.0:0| :skolemid |955| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@220)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@220)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|)) |#$T1@@59|)) :qid |unknown.0:0| :skolemid |956| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@221)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@221)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) |#$T2@@41|)) :qid |unknown.0:0| :skolemid |957| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@222)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@222)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |958| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$R@@91| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |959| :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@6| |#$T0@@79|) ($IsBox |x1#0@@4| |#$T1@@63|)) ($IsBox |x2#0@@2| |#$T2@@44|))) (Requires3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |960| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))))) :qid |unknown.0:0| :skolemid |961| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17))) :qid |unknown.0:0| :skolemid |962| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (DatatypeCtorId arg0@@223)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@223)) )))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |963| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))) :qid |unknown.0:0| :skolemid |964| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |965| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |966| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :qid |unknown.0:0| :skolemid |967| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@224)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@224)) )))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :qid |unknown.0:0| :skolemid |968| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@225)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@225)) )))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :qid |unknown.0:0| :skolemid |969| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) )))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@67)) bx@@67) ($Is ($Unbox DatatypeTypeType bx@@67) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :qid |unknown.0:0| :skolemid |970| :pattern ( ($IsBox bx@@67 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) )))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@3|)))) :qid |unknown.0:0| :skolemid |971| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))) )))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@18)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@18)  (and ($IsAllocBox |a#3#0#0| |_System._tuple#2$T0@@4| $h@@18) ($IsAllocBox |a#3#1#0| |_System._tuple#2$T1@@4| $h@@18)))) :qid |unknown.0:0| :skolemid |972| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@18)) )))
(assert (forall ((d@@2 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@19) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@19)) :qid |unknown.0:0| :skolemid |973| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@19)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@19)) :qid |unknown.0:0| :skolemid |974| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@19)) )))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@20) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@20)) :qid |unknown.0:0| :skolemid |975| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@20)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@20)) :qid |unknown.0:0| :skolemid |976| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@20)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |977| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |978| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |979| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |980| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |981| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |982| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |983| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) )))
(assert (forall ((a@@112 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@112) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@112 b@@61)  (and (= (_System.Tuple2._0 a@@112) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@112) (_System.Tuple2._1 b@@61))))) :qid |unknown.0:0| :skolemid |984| :pattern ( (|_System.Tuple2#Equal| a@@112 b@@61)) )))
(assert (forall ((a@@113 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@113) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@113 b@@62) (= a@@113 b@@62))) :qid |unknown.0:0| :skolemid |985| :pattern ( (|_System.Tuple2#Equal| a@@113 b@@62)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|))) :qid |unknown.0:0| :skolemid |986| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |987| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@68 T@U) ) (!  (=> (and (= (type bx@@68) BoxType) ($IsBox bx@@68 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@68)) bx@@68) ($Is ($Unbox DatatypeTypeType bx@@68) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |988| :pattern ( ($IsBox bx@@68 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@21 T@U) ) (!  (=> (and (= (type $h@@21) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@21)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) :qid |DafnyPreludebpl.545:12| :skolemid |989| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |990| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |991| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@114 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@114) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@114 b@@63) true)) :qid |unknown.0:0| :skolemid |992| :pattern ( (|_System.Tuple0#Equal| a@@114 b@@63)) )))
(assert (forall ((a@@115 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@115) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@115 b@@64) (= a@@115 b@@64))) :qid |unknown.0:0| :skolemid |993| :pattern ( (|_System.Tuple0#Equal| a@@115 b@@64)) )))
(assert (= (type Tclass.BitLemmas.__default) TyType))
(assert (= (Tag Tclass.BitLemmas.__default) Tagclass.BitLemmas.__default))
(assert (= (TagFamily Tclass.BitLemmas.__default) tytagFamily$_default))
(assert (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 Tclass.BitLemmas.__default)) (and (= ($Box ($Unbox refType bx@@69)) bx@@69) ($Is ($Unbox refType bx@@69) Tclass.BitLemmas.__default))) :qid |unknown.0:0| :skolemid |994| :pattern ( ($IsBox bx@@69 Tclass.BitLemmas.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.BitLemmas.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.BitLemmas.__default)))) :qid |unknown.0:0| :skolemid |995| :pattern ( ($Is $o@@9 Tclass.BitLemmas.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@22 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@22) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.BitLemmas.__default $h@@22)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@22 $o@@10) alloc))))) :qid |unknown.0:0| :skolemid |996| :pattern ( ($IsAlloc $o@@10 Tclass.BitLemmas.__default $h@@22)) )))
(assert (forall (($ly T@U) (|s#0| T@U) ) (!  (=> (and (= (type $ly) LayerTypeType) (= (type |s#0|) (SeqType BoxType))) (= (BitLemmas.__default.int__of__bits ($LS $ly) |s#0|) (BitLemmas.__default.int__of__bits $ly |s#0|))) :qid |BitLemmasidfy.141:12| :skolemid |1028| :pattern ( (BitLemmas.__default.int__of__bits ($LS $ly) |s#0|)) )))
(assert  (and (forall ((arg0@@226 T@U) ) (! (= (type (AsFuelBottom arg0@@226)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@226)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|s#0@@0| T@U) ) (!  (=> (and (= (type $ly@@0) LayerTypeType) (= (type |s#0@@0|) (SeqType BoxType))) (= (BitLemmas.__default.int__of__bits $ly@@0 |s#0@@0|) (BitLemmas.__default.int__of__bits $LZ |s#0@@0|))) :qid |BitLemmasidfy.141:12| :skolemid |1029| :pattern ( (BitLemmas.__default.int__of__bits (AsFuelBottom $ly@@0) |s#0@@0|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@1 T@U) (|s#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@1) LayerTypeType) (= (type |s#0@@1|) (SeqType BoxType))) (or (|BitLemmas.__default.int__of__bits#canCall| |s#0@@1|) (and (not (= 11 $FunctionContextHeight)) ($Is |s#0@@1| (TSeq TBool))))) true) :qid |BitLemmasidfy.141:12| :skolemid |1030| :pattern ( (BitLemmas.__default.int__of__bits $ly@@1 |s#0@@1|)) ))))
(assert (forall (($ly@@2 T@U) (|s#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@2) LayerTypeType) (= (type |s#0@@2|) (SeqType BoxType))) ($Is |s#0@@2| (TSeq TBool))) (= (|BitLemmas.__default.int__of__bits#requires| $ly@@2 |s#0@@2|) true)) :qid |BitLemmasidfy.141:12| :skolemid |1031| :pattern ( (|BitLemmas.__default.int__of__bits#requires| $ly@@2 |s#0@@2|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@3 T@U) (|s#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@3) LayerTypeType) (= (type |s#0@@3|) (SeqType BoxType))) (or (|BitLemmas.__default.int__of__bits#canCall| |s#0@@3|) (and (not (= 11 $FunctionContextHeight)) ($Is |s#0@@3| (TSeq TBool))))) (and (=> (not (= (|Seq#Length| |s#0@@3|) (LitInt 0))) (|BitLemmas.__default.int__of__bits#canCall| (|Seq#Drop| |s#0@@3| (LitInt 1)))) (= (BitLemmas.__default.int__of__bits ($LS $ly@@3) |s#0@@3|) (ite (= (|Seq#Length| |s#0@@3|) (LitInt 0)) 0 (+ (ite (U_2_bool ($Unbox boolType (|Seq#Index| |s#0@@3| (LitInt 0)))) 1 0) (Mul (LitInt 2) (BitLemmas.__default.int__of__bits $ly@@3 (|Seq#Drop| |s#0@@3| (LitInt 1))))))))) :qid |BitLemmasidfy.141:12| :skolemid |1032| :pattern ( (BitLemmas.__default.int__of__bits ($LS $ly@@3) |s#0@@3|)) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@4 T@U) (|s#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@4) LayerTypeType) (= (type |s#0@@4|) (SeqType BoxType))) (or (|BitLemmas.__default.int__of__bits#canCall| (Lit |s#0@@4|)) (and (not (= 11 $FunctionContextHeight)) ($Is |s#0@@4| (TSeq TBool))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@4|)) (LitInt 0))) (|BitLemmas.__default.int__of__bits#canCall| (Lit (|Seq#Drop| (Lit |s#0@@4|) (LitInt 1))))) (= (BitLemmas.__default.int__of__bits ($LS $ly@@4) (Lit |s#0@@4|)) (ite (= (|Seq#Length| (Lit |s#0@@4|)) (LitInt 0)) 0 (+ (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |s#0@@4|) (LitInt 0)))) 1 0) (Mul (LitInt 2) (LitInt (BitLemmas.__default.int__of__bits ($LS $ly@@4) (Lit (|Seq#Drop| (Lit |s#0@@4|) (LitInt 1))))))))))) :qid |BitLemmasidfy.141:12| :weight 3 :skolemid |1033| :pattern ( (BitLemmas.__default.int__of__bits ($LS $ly@@4) (Lit |s#0@@4|))) ))))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@70)) bx@@70) ($Is ($Unbox intType bx@@70) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1041| :pattern ( ($IsBox bx@@70 Tclass.NativeTypes.byte)) )))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@71)) bx@@71) ($Is ($Unbox intType bx@@71) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1106| :pattern ( ($IsBox bx@@71 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0| T@U) ) (!  (=> (= (type |i#0|) intType) (= ($Is |i#0| Tclass.NativeTypes.sbyte)  (and (<= (LitInt (- 0 128)) (U_2_int |i#0|)) (< (U_2_int |i#0|) 128)))) :qid |unknown.0:0| :skolemid |1107| :pattern ( ($Is |i#0| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@0| T@U) ($h@@23 T@U) ) (!  (=> (and (= (type |i#0@@0|) intType) (= (type $h@@23) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@23)) :qid |unknown.0:0| :skolemid |1108| :pattern ( ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@23)) )))
(assert (forall ((|i#0@@1| T@U) ) (!  (=> (= (type |i#0@@1|) intType) (= ($Is |i#0@@1| Tclass.NativeTypes.byte)  (and (<= (LitInt 0) (U_2_int |i#0@@1|)) (< (U_2_int |i#0@@1|) 256)))) :qid |unknown.0:0| :skolemid |1109| :pattern ( ($Is |i#0@@1| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@2| T@U) ($h@@24 T@U) ) (!  (=> (and (= (type |i#0@@2|) intType) (= (type $h@@24) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@24)) :qid |unknown.0:0| :skolemid |1110| :pattern ( ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@24)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@72)) bx@@72) ($Is ($Unbox intType bx@@72) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1111| :pattern ( ($IsBox bx@@72 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@3| T@U) ) (!  (=> (= (type |i#0@@3|) intType) (= ($Is |i#0@@3| Tclass.NativeTypes.int16)  (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@3|)) (< (U_2_int |i#0@@3|) 32768)))) :qid |unknown.0:0| :skolemid |1112| :pattern ( ($Is |i#0@@3| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@4| T@U) ($h@@25 T@U) ) (!  (=> (and (= (type |i#0@@4|) intType) (= (type $h@@25) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@25)) :qid |unknown.0:0| :skolemid |1113| :pattern ( ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@25)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@73)) bx@@73) ($Is ($Unbox intType bx@@73) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1114| :pattern ( ($IsBox bx@@73 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@5| T@U) ) (!  (=> (= (type |i#0@@5|) intType) (= ($Is |i#0@@5| Tclass.NativeTypes.uint16)  (and (<= (LitInt 0) (U_2_int |i#0@@5|)) (< (U_2_int |i#0@@5|) 65536)))) :qid |unknown.0:0| :skolemid |1115| :pattern ( ($Is |i#0@@5| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@6| T@U) ($h@@26 T@U) ) (!  (=> (and (= (type |i#0@@6|) intType) (= (type $h@@26) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@26)) :qid |unknown.0:0| :skolemid |1116| :pattern ( ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@26)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@74)) bx@@74) ($Is ($Unbox intType bx@@74) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1117| :pattern ( ($IsBox bx@@74 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@7| T@U) ) (!  (=> (= (type |i#0@@7|) intType) (= ($Is |i#0@@7| Tclass.NativeTypes.int32)  (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@7|)) (< (U_2_int |i#0@@7|) 2147483648)))) :qid |unknown.0:0| :skolemid |1118| :pattern ( ($Is |i#0@@7| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@8| T@U) ($h@@27 T@U) ) (!  (=> (and (= (type |i#0@@8|) intType) (= (type $h@@27) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@27)) :qid |unknown.0:0| :skolemid |1119| :pattern ( ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@27)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@75 T@U) ) (!  (=> (and (= (type bx@@75) BoxType) ($IsBox bx@@75 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@75)) bx@@75) ($Is ($Unbox intType bx@@75) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1120| :pattern ( ($IsBox bx@@75 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@9| T@U) ) (!  (=> (= (type |i#0@@9|) intType) (= ($Is |i#0@@9| Tclass.NativeTypes.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@9|)) (< (U_2_int |i#0@@9|) 4294967296)))) :qid |unknown.0:0| :skolemid |1121| :pattern ( ($Is |i#0@@9| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@10| T@U) ($h@@28 T@U) ) (!  (=> (and (= (type |i#0@@10|) intType) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@28)) :qid |unknown.0:0| :skolemid |1122| :pattern ( ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@28)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@76 T@U) ) (!  (=> (and (= (type bx@@76) BoxType) ($IsBox bx@@76 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@76)) bx@@76) ($Is ($Unbox intType bx@@76) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1123| :pattern ( ($IsBox bx@@76 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@11| T@U) ) (!  (=> (= (type |i#0@@11|) intType) (= ($Is |i#0@@11| Tclass.NativeTypes.int64)  (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@11|)) (< (U_2_int |i#0@@11|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1124| :pattern ( ($Is |i#0@@11| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@12| T@U) ($h@@29 T@U) ) (!  (=> (and (= (type |i#0@@12|) intType) (= (type $h@@29) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@29)) :qid |unknown.0:0| :skolemid |1125| :pattern ( ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@29)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@77)) bx@@77) ($Is ($Unbox intType bx@@77) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1126| :pattern ( ($IsBox bx@@77 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (= ($Is |i#0@@13| Tclass.NativeTypes.uint64)  (and (<= (LitInt 0) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1127| :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@14| T@U) ($h@@30 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@30)) :qid |unknown.0:0| :skolemid |1128| :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@30)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@78)) bx@@78) ($Is ($Unbox intType bx@@78) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1129| :pattern ( ($IsBox bx@@78 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (= ($Is |i#0@@15| Tclass.NativeTypes.nat8)  (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 128)))) :qid |unknown.0:0| :skolemid |1130| :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@16| T@U) ($h@@31 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@31) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@31)) :qid |unknown.0:0| :skolemid |1131| :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@31)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@79)) bx@@79) ($Is ($Unbox intType bx@@79) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1132| :pattern ( ($IsBox bx@@79 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (= ($Is |i#0@@17| Tclass.NativeTypes.nat16)  (and (<= (LitInt 0) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768)))) :qid |unknown.0:0| :skolemid |1133| :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@18| T@U) ($h@@32 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@32) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@32)) :qid |unknown.0:0| :skolemid |1134| :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@32)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@80)) bx@@80) ($Is ($Unbox intType bx@@80) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1135| :pattern ( ($IsBox bx@@80 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (= ($Is |i#0@@19| Tclass.NativeTypes.nat32)  (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 2147483648)))) :qid |unknown.0:0| :skolemid |1136| :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@20| T@U) ($h@@33 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@33) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@33)) :qid |unknown.0:0| :skolemid |1137| :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@33)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@81)) bx@@81) ($Is ($Unbox intType bx@@81) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1138| :pattern ( ($IsBox bx@@81 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (= ($Is |i#0@@21| Tclass.NativeTypes.nat64)  (and (<= (LitInt 0) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1139| :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@22| T@U) ($h@@34 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@34) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@34)) :qid |unknown.0:0| :skolemid |1140| :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@34)) )))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@82)) bx@@82) ($Is ($Unbox intType bx@@82) Tclass.NativeTypes.uint128))) :qid |unknown.0:0| :skolemid |1141| :pattern ( ($IsBox bx@@82 Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@23| T@U) ) (!  (=> (= (type |i#0@@23|) intType) (= ($Is |i#0@@23| Tclass.NativeTypes.uint128)  (and (<= (LitInt 0) (U_2_int |i#0@@23|)) (< (U_2_int |i#0@@23|) 340282366920938463463374607431768211456)))) :qid |unknown.0:0| :skolemid |1142| :pattern ( ($Is |i#0@@23| Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@24| T@U) ($h@@35 T@U) ) (!  (=> (and (= (type |i#0@@24|) intType) (= (type $h@@35) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint128 $h@@35)) :qid |unknown.0:0| :skolemid |1143| :pattern ( ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint128 $h@@35)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@83)) bx@@83) ($Is ($Unbox refType bx@@83) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1144| :pattern ( ($IsBox bx@@83 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.NativeTypes.__default)  (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1145| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@36 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@36) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@36)  (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@36 $o@@12) alloc))))) :qid |unknown.0:0| :skolemid |1146| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@36)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.Bits__s.__default) TyType))
(assert (= (Tag Tclass.Bits__s.__default) Tagclass.Bits__s.__default))
(assert (= (TagFamily Tclass.Bits__s.__default) tytagFamily$_default))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.Bits__s.__default)) (and (= ($Box ($Unbox refType bx@@84)) bx@@84) ($Is ($Unbox refType bx@@84) Tclass.Bits__s.__default))) :qid |unknown.0:0| :skolemid |1147| :pattern ( ($IsBox bx@@84 Tclass.Bits__s.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (= ($Is $o@@13 Tclass.Bits__s.__default)  (or (= $o@@13 null) (= (dtype $o@@13) Tclass.Bits__s.__default)))) :qid |unknown.0:0| :skolemid |1148| :pattern ( ($Is $o@@13 Tclass.Bits__s.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@37 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@37) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@14 Tclass.Bits__s.__default $h@@37)  (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@37 $o@@14) alloc))))) :qid |unknown.0:0| :skolemid |1149| :pattern ( ($IsAlloc $o@@14 Tclass.Bits__s.__default $h@@37)) )))
(assert (forall ((arg0@@227 T@U) (arg1@@109 Int) (arg2@@61 Int) ) (! (= (type (Bits__s.__default.bits__of__int arg0@@227 arg1@@109 arg2@@61)) (SeqType BoxType)) :qid |funType:Bits__s.__default.bits__of__int| :pattern ( (Bits__s.__default.bits__of__int arg0@@227 arg1@@109 arg2@@61)) )))
(assert (forall (($ly@@5 T@U) (|n#0| Int) (|len#0| Int) ) (!  (=> (= (type $ly@@5) LayerTypeType) (= (Bits__s.__default.bits__of__int ($LS $ly@@5) |n#0| |len#0|) (Bits__s.__default.bits__of__int $ly@@5 |n#0| |len#0|))) :qid |Bitssdfy.14:12| :skolemid |1150| :pattern ( (Bits__s.__default.bits__of__int ($LS $ly@@5) |n#0| |len#0|)) )))
(assert (forall (($ly@@6 T@U) (|n#0@@0| Int) (|len#0@@0| Int) ) (!  (=> (= (type $ly@@6) LayerTypeType) (= (Bits__s.__default.bits__of__int $ly@@6 |n#0@@0| |len#0@@0|) (Bits__s.__default.bits__of__int $LZ |n#0@@0| |len#0@@0|))) :qid |Bitssdfy.14:12| :skolemid |1151| :pattern ( (Bits__s.__default.bits__of__int (AsFuelBottom $ly@@6) |n#0@@0| |len#0@@0|)) )))
(assert  (=> true (forall (($ly@@7 T@U) (|n#0@@1| Int) (|len#0@@1| Int) ) (!  (=> (and (= (type $ly@@7) LayerTypeType) (or (|Bits__s.__default.bits__of__int#canCall| |n#0@@1| |len#0@@1|) (and (<= (LitInt 0) |n#0@@1|) (<= (LitInt 0) |len#0@@1|)))) (and (= (|Seq#Length| (Bits__s.__default.bits__of__int $ly@@7 |n#0@@1| |len#0@@1|)) |len#0@@1|) ($Is (Bits__s.__default.bits__of__int $ly@@7 |n#0@@1| |len#0@@1|) (TSeq TBool)))) :qid |Bitssdfy.14:12| :skolemid |1152| :pattern ( (Bits__s.__default.bits__of__int $ly@@7 |n#0@@1| |len#0@@1|)) ))))
(assert (forall (($ly@@8 T@U) (|n#0@@2| Int) (|len#0@@2| Int) ) (!  (=> (= (type $ly@@8) LayerTypeType) (=> (and (<= (LitInt 0) |n#0@@2|) (<= (LitInt 0) |len#0@@2|)) (= (|Bits__s.__default.bits__of__int#requires| $ly@@8 |n#0@@2| |len#0@@2|) true))) :qid |Bitssdfy.14:12| :skolemid |1153| :pattern ( (|Bits__s.__default.bits__of__int#requires| $ly@@8 |n#0@@2| |len#0@@2|)) )))
(assert  (=> true (forall (($ly@@9 T@U) (|n#0@@3| Int) (|len#0@@3| Int) ) (!  (=> (and (= (type $ly@@9) LayerTypeType) (or (|Bits__s.__default.bits__of__int#canCall| |n#0@@3| |len#0@@3|) (and (<= (LitInt 0) |n#0@@3|) (<= (LitInt 0) |len#0@@3|)))) (and (=> (not (= |len#0@@3| (LitInt 0))) (|Bits__s.__default.bits__of__int#canCall| (Div |n#0@@3| (LitInt 2)) (- |len#0@@3| 1))) (= (Bits__s.__default.bits__of__int ($LS $ly@@9) |n#0@@3| |len#0@@3|) (ite (= |len#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U (= (Mod |n#0@@3| (LitInt 2)) (LitInt 1))))) (Bits__s.__default.bits__of__int $ly@@9 (Div |n#0@@3| (LitInt 2)) (- |len#0@@3| 1))))))) :qid |Bitssdfy.14:12| :skolemid |1154| :pattern ( (Bits__s.__default.bits__of__int ($LS $ly@@9) |n#0@@3| |len#0@@3|)) ))))
(assert  (=> true (forall (($ly@@10 T@U) (|n#0@@4| Int) (|len#0@@4| Int) ) (!  (=> (and (= (type $ly@@10) LayerTypeType) (or (|Bits__s.__default.bits__of__int#canCall| (LitInt |n#0@@4|) (LitInt |len#0@@4|)) (and (<= (LitInt 0) |n#0@@4|) (<= (LitInt 0) |len#0@@4|)))) (and (=> (not (= (LitInt |len#0@@4|) (LitInt 0))) (|Bits__s.__default.bits__of__int#canCall| (LitInt (Div |n#0@@4| (LitInt 2))) (LitInt (- |len#0@@4| 1)))) (= (Bits__s.__default.bits__of__int ($LS $ly@@10) (LitInt |n#0@@4|) (LitInt |len#0@@4|)) (ite (= (LitInt |len#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U (= (LitInt (Mod |n#0@@4| (LitInt 2))) (LitInt 1))))) (Bits__s.__default.bits__of__int ($LS $ly@@10) (LitInt (Div |n#0@@4| (LitInt 2))) (LitInt (- |len#0@@4| 1)))))))) :qid |Bitssdfy.14:12| :weight 3 :skolemid |1155| :pattern ( (Bits__s.__default.bits__of__int ($LS $ly@@10) (LitInt |n#0@@4|) (LitInt |len#0@@4|))) ))))
(assert (forall ((arg0@@228 T@U) (arg1@@110 Int) ) (! (= (type (Bits__s.__default.zeroes arg0@@228 arg1@@110)) (SeqType BoxType)) :qid |funType:Bits__s.__default.zeroes| :pattern ( (Bits__s.__default.zeroes arg0@@228 arg1@@110)) )))
(assert (forall (($ly@@11 T@U) (|l#0| Int) ) (!  (=> (= (type $ly@@11) LayerTypeType) (= (Bits__s.__default.zeroes ($LS $ly@@11) |l#0|) (Bits__s.__default.zeroes $ly@@11 |l#0|))) :qid |Bitssdfy.23:22| :skolemid |1156| :pattern ( (Bits__s.__default.zeroes ($LS $ly@@11) |l#0|)) )))
(assert (forall (($ly@@12 T@U) (|l#0@@0| Int) ) (!  (=> (= (type $ly@@12) LayerTypeType) (= (Bits__s.__default.zeroes $ly@@12 |l#0@@0|) (Bits__s.__default.zeroes $LZ |l#0@@0|))) :qid |Bitssdfy.23:22| :skolemid |1157| :pattern ( (Bits__s.__default.zeroes (AsFuelBottom $ly@@12) |l#0@@0|)) )))
(assert  (=> true (forall (($ly@@13 T@U) (|l#0@@1| Int) ) (!  (=> (and (= (type $ly@@13) LayerTypeType) (or (|Bits__s.__default.zeroes#canCall| |l#0@@1|) (<= (LitInt 0) |l#0@@1|))) (and (and (= (|Seq#Length| (Bits__s.__default.zeroes $ly@@13 |l#0@@1|)) |l#0@@1|) (forall ((|i#0@@25| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@25|) (< |i#0@@25| (|Seq#Length| (Bits__s.__default.zeroes $ly@@13 |l#0@@1|)))) (not (U_2_bool ($Unbox boolType (|Seq#Index| (Bits__s.__default.zeroes $ly@@13 |l#0@@1|) |i#0@@25|))))) :qid |Bitssdfy.25:18| :skolemid |1158| :pattern ( ($Unbox boolType (|Seq#Index| (Bits__s.__default.zeroes $ly@@13 |l#0@@1|) |i#0@@25|))) ))) ($Is (Bits__s.__default.zeroes $ly@@13 |l#0@@1|) (TSeq TBool)))) :qid |Bitssdfy.23:22| :skolemid |1159| :pattern ( (Bits__s.__default.zeroes $ly@@13 |l#0@@1|)) ))))
(assert (forall (($ly@@14 T@U) (|l#0@@2| Int) ) (!  (=> (and (= (type $ly@@14) LayerTypeType) (<= (LitInt 0) |l#0@@2|)) (= (|Bits__s.__default.zeroes#requires| $ly@@14 |l#0@@2|) true)) :qid |Bitssdfy.23:22| :skolemid |1160| :pattern ( (|Bits__s.__default.zeroes#requires| $ly@@14 |l#0@@2|)) )))
(assert  (=> true (forall (($ly@@15 T@U) (|l#0@@3| Int) ) (!  (=> (and (= (type $ly@@15) LayerTypeType) (or (|Bits__s.__default.zeroes#canCall| |l#0@@3|) (<= (LitInt 0) |l#0@@3|))) (and (=> (not (= |l#0@@3| (LitInt 0))) (|Bits__s.__default.zeroes#canCall| (- |l#0@@3| 1))) (= (Bits__s.__default.zeroes ($LS $ly@@15) |l#0@@3|) (ite (= |l#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Bits__s.__default.zeroes $ly@@15 (- |l#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U false))))))))) :qid |Bitssdfy.23:22| :skolemid |1161| :pattern ( (Bits__s.__default.zeroes ($LS $ly@@15) |l#0@@3|)) ))))
(assert  (=> true (forall (($ly@@16 T@U) (|l#0@@4| Int) ) (!  (=> (and (= (type $ly@@16) LayerTypeType) (or (|Bits__s.__default.zeroes#canCall| (LitInt |l#0@@4|)) (<= (LitInt 0) |l#0@@4|))) (and (=> (not (= (LitInt |l#0@@4|) (LitInt 0))) (|Bits__s.__default.zeroes#canCall| (LitInt (- |l#0@@4| 1)))) (= (Bits__s.__default.zeroes ($LS $ly@@16) (LitInt |l#0@@4|)) (ite (= (LitInt |l#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Bits__s.__default.zeroes ($LS $ly@@16) (LitInt (- |l#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U false))))))))) :qid |Bitssdfy.23:22| :weight 3 :skolemid |1162| :pattern ( (Bits__s.__default.zeroes ($LS $ly@@16) (LitInt |l#0@@4|))) ))))
(assert (forall ((arg0@@229 T@U) (arg1@@111 Int) ) (! (= (type (Bits__s.__default.ones arg0@@229 arg1@@111)) (SeqType BoxType)) :qid |funType:Bits__s.__default.ones| :pattern ( (Bits__s.__default.ones arg0@@229 arg1@@111)) )))
(assert (forall (($ly@@17 T@U) (|l#0@@5| Int) ) (!  (=> (= (type $ly@@17) LayerTypeType) (= (Bits__s.__default.ones ($LS $ly@@17) |l#0@@5|) (Bits__s.__default.ones $ly@@17 |l#0@@5|))) :qid |Bitssdfy.30:22| :skolemid |1163| :pattern ( (Bits__s.__default.ones ($LS $ly@@17) |l#0@@5|)) )))
(assert (forall (($ly@@18 T@U) (|l#0@@6| Int) ) (!  (=> (= (type $ly@@18) LayerTypeType) (= (Bits__s.__default.ones $ly@@18 |l#0@@6|) (Bits__s.__default.ones $LZ |l#0@@6|))) :qid |Bitssdfy.30:22| :skolemid |1164| :pattern ( (Bits__s.__default.ones (AsFuelBottom $ly@@18) |l#0@@6|)) )))
(assert  (=> true (forall (($ly@@19 T@U) (|l#0@@7| Int) ) (!  (=> (and (= (type $ly@@19) LayerTypeType) (or (|Bits__s.__default.ones#canCall| |l#0@@7|) (<= (LitInt 0) |l#0@@7|))) (and (and (= (|Seq#Length| (Bits__s.__default.ones $ly@@19 |l#0@@7|)) |l#0@@7|) (forall ((|i#0@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@26|) (< |i#0@@26| (|Seq#Length| (Bits__s.__default.ones $ly@@19 |l#0@@7|)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Bits__s.__default.ones $ly@@19 |l#0@@7|) |i#0@@26|)))) :qid |Bitssdfy.32:18| :skolemid |1165| :pattern ( ($Unbox boolType (|Seq#Index| (Bits__s.__default.ones $ly@@19 |l#0@@7|) |i#0@@26|))) ))) ($Is (Bits__s.__default.ones $ly@@19 |l#0@@7|) (TSeq TBool)))) :qid |Bitssdfy.30:22| :skolemid |1166| :pattern ( (Bits__s.__default.ones $ly@@19 |l#0@@7|)) ))))
(assert (forall (($ly@@20 T@U) (|l#0@@8| Int) ) (!  (=> (and (= (type $ly@@20) LayerTypeType) (<= (LitInt 0) |l#0@@8|)) (= (|Bits__s.__default.ones#requires| $ly@@20 |l#0@@8|) true)) :qid |Bitssdfy.30:22| :skolemid |1167| :pattern ( (|Bits__s.__default.ones#requires| $ly@@20 |l#0@@8|)) )))
(assert  (=> true (forall (($ly@@21 T@U) (|l#0@@9| Int) ) (!  (=> (and (= (type $ly@@21) LayerTypeType) (or (|Bits__s.__default.ones#canCall| |l#0@@9|) (<= (LitInt 0) |l#0@@9|))) (and (=> (not (= |l#0@@9| (LitInt 0))) (|Bits__s.__default.ones#canCall| (- |l#0@@9| 1))) (= (Bits__s.__default.ones ($LS $ly@@21) |l#0@@9|) (ite (= |l#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Bits__s.__default.ones $ly@@21 (- |l#0@@9| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U true))))))))) :qid |Bitssdfy.30:22| :skolemid |1168| :pattern ( (Bits__s.__default.ones ($LS $ly@@21) |l#0@@9|)) ))))
(assert  (=> true (forall (($ly@@22 T@U) (|l#0@@10| Int) ) (!  (=> (and (= (type $ly@@22) LayerTypeType) (or (|Bits__s.__default.ones#canCall| (LitInt |l#0@@10|)) (<= (LitInt 0) |l#0@@10|))) (and (=> (not (= (LitInt |l#0@@10|) (LitInt 0))) (|Bits__s.__default.ones#canCall| (LitInt (- |l#0@@10| 1)))) (= (Bits__s.__default.ones ($LS $ly@@22) (LitInt |l#0@@10|)) (ite (= (LitInt |l#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Bits__s.__default.ones ($LS $ly@@22) (LitInt (- |l#0@@10| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U true))))))))) :qid |Bitssdfy.30:22| :weight 3 :skolemid |1169| :pattern ( (Bits__s.__default.ones ($LS $ly@@22) (LitInt |l#0@@10|))) ))))
(assert (forall ((arg0@@230 T@U) ) (! (= (type (Bits__s.__default.mm__cvtepu32__epi64 arg0@@230)) (SeqType BoxType)) :qid |funType:Bits__s.__default.mm__cvtepu32__epi64| :pattern ( (Bits__s.__default.mm__cvtepu32__epi64 arg0@@230)) )))
(assert  (=> true (forall ((|a#0@@1| T@U) ) (!  (=> (and (= (type |a#0@@1|) (SeqType BoxType)) (or (|Bits__s.__default.mm__cvtepu32__epi64#canCall| |a#0@@1|) (and ($Is |a#0@@1| (TSeq TBool)) (= (|Seq#Length| |a#0@@1|) (LitInt 128))))) ($Is (Bits__s.__default.mm__cvtepu32__epi64 |a#0@@1|) (TSeq TBool))) :qid |Bitssdfy.39:30| :skolemid |1170| :pattern ( (Bits__s.__default.mm__cvtepu32__epi64 |a#0@@1|)) ))))
(assert (forall ((|a#0@@2| T@U) ) (!  (=> (and (= (type |a#0@@2|) (SeqType BoxType)) ($Is |a#0@@2| (TSeq TBool))) (= (|Bits__s.__default.mm__cvtepu32__epi64#requires| |a#0@@2|) (= (|Seq#Length| |a#0@@2|) (LitInt 128)))) :qid |Bitssdfy.39:30| :skolemid |1171| :pattern ( (|Bits__s.__default.mm__cvtepu32__epi64#requires| |a#0@@2|)) )))
(assert (= (type StartFuel_Bits_s._default.zeroes) LayerTypeType))
(assert  (=> true (forall ((|a#0@@3| T@U) ) (!  (=> (and (= (type |a#0@@3|) (SeqType BoxType)) (or (|Bits__s.__default.mm__cvtepu32__epi64#canCall| |a#0@@3|) (and ($Is |a#0@@3| (TSeq TBool)) (= (|Seq#Length| |a#0@@3|) (LitInt 128))))) (and (and (|Bits__s.__default.zeroes#canCall| (LitInt 32)) (|Bits__s.__default.zeroes#canCall| (LitInt 32))) (= (Bits__s.__default.mm__cvtepu32__epi64 |a#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Append| (|Seq#Drop| (|Seq#Take| |a#0@@3| (LitInt 32)) (LitInt 0)) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32))) (|Seq#Drop| (|Seq#Take| |a#0@@3| (LitInt 64)) (LitInt 32))) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)))))) :qid |Bitssdfy.39:30| :skolemid |1172| :pattern ( (Bits__s.__default.mm__cvtepu32__epi64 |a#0@@3|)) ))))
(assert  (=> true (forall ((|a#0@@4| T@U) ) (!  (=> (and (= (type |a#0@@4|) (SeqType BoxType)) (or (|Bits__s.__default.mm__cvtepu32__epi64#canCall| (Lit |a#0@@4|)) (and ($Is |a#0@@4| (TSeq TBool)) (= (|Seq#Length| (Lit |a#0@@4|)) (LitInt 128))))) (and (and (|Bits__s.__default.zeroes#canCall| (LitInt 32)) (|Bits__s.__default.zeroes#canCall| (LitInt 32))) (= (Bits__s.__default.mm__cvtepu32__epi64 (Lit |a#0@@4|)) (|Seq#Append| (|Seq#Append| (|Seq#Append| (|Seq#Drop| (|Seq#Take| (Lit |a#0@@4|) (LitInt 32)) (LitInt 0)) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32))) (|Seq#Drop| (|Seq#Take| (Lit |a#0@@4|) (LitInt 64)) (LitInt 32))) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)))))) :qid |Bitssdfy.39:30| :weight 3 :skolemid |1173| :pattern ( (Bits__s.__default.mm__cvtepu32__epi64 (Lit |a#0@@4|))) ))))
(assert (= (type StartFuel_Bits_s._default.bits_of_int) LayerTypeType))
(assert  (=> true (forall ((|a#0@@5| Int) ) (!  (=> (or (|Bits__s.__default.intrinsic_mm_cvtepu32_epi64#canCall| |a#0@@5|) (and (<= (LitInt 0) |a#0@@5|) (< |a#0@@5| 340282366920938463463374607431768211456))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (Bits__s.__default.intrinsic_mm_cvtepu32_epi64 |a#0@@5|) (LitInt 128)) (Bits__s.__default.mm__cvtepu32__epi64 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@5| (LitInt 128)))) (and (<= (LitInt 0) (Bits__s.__default.intrinsic_mm_cvtepu32_epi64 |a#0@@5|)) (< (Bits__s.__default.intrinsic_mm_cvtepu32_epi64 |a#0@@5|) 340282366920938463463374607431768211456)))) :qid |Bitssdfy.46:106| :skolemid |1174| :pattern ( (Bits__s.__default.intrinsic_mm_cvtepu32_epi64 |a#0@@5|)) ))))
(assert (forall ((|a#0@@6| Int) ) (!  (=> (and (<= (LitInt 0) |a#0@@6|) (< |a#0@@6| 340282366920938463463374607431768211456)) (= (|Bits__s.__default.intrinsic_mm_cvtepu32_epi64#requires| |a#0@@6|) true)) :qid |Bitssdfy.46:106| :skolemid |1175| :pattern ( (|Bits__s.__default.intrinsic_mm_cvtepu32_epi64#requires| |a#0@@6|)) )))
(assert  (=> true (forall ((|a#0@@7| T@U) (|idx#0| Int) ) (!  (=> (and (= (type |a#0@@7|) (SeqType BoxType)) (or (|Bits__s.__default.intrinsic_mm_loadu_si128#canCall| |a#0@@7| |idx#0|) (and (and ($Is |a#0@@7| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |idx#0|) (< |idx#0| 4294967296))) (and (<= (LitInt 0) |idx#0|) (< |idx#0| (- (|Seq#Length| |a#0@@7|) 1)))))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (Bits__s.__default.intrinsic_mm_loadu_si128 |a#0@@7| |idx#0|) (LitInt 128)) (|Seq#Append| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (U_2_int ($Unbox intType (|Seq#Index| |a#0@@7| |idx#0|))) (LitInt 64)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (U_2_int ($Unbox intType (|Seq#Index| |a#0@@7| (+ |idx#0| 1)))) (LitInt 64)))) (and (<= (LitInt 0) (Bits__s.__default.intrinsic_mm_loadu_si128 |a#0@@7| |idx#0|)) (< (Bits__s.__default.intrinsic_mm_loadu_si128 |a#0@@7| |idx#0|) 340282366920938463463374607431768211456)))) :qid |Bitssdfy.52:100| :skolemid |1176| :pattern ( (Bits__s.__default.intrinsic_mm_loadu_si128 |a#0@@7| |idx#0|)) ))))
(assert (forall ((|a#0@@8| T@U) (|idx#0@@0| Int) ) (!  (=> (= (type |a#0@@8|) (SeqType BoxType)) (=> (and ($Is |a#0@@8| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |idx#0@@0|) (< |idx#0@@0| 4294967296))) (= (|Bits__s.__default.intrinsic_mm_loadu_si128#requires| |a#0@@8| |idx#0@@0|)  (and (<= (LitInt 0) |idx#0@@0|) (< |idx#0@@0| (- (|Seq#Length| |a#0@@8|) 1)))))) :qid |Bitssdfy.52:100| :skolemid |1177| :pattern ( (|Bits__s.__default.intrinsic_mm_loadu_si128#requires| |a#0@@8| |idx#0@@0|)) )))
(assert  (=> true (forall ((|a#0@@9| Int) ) (!  (=> (or (|Bits__s.__default.intrinsic_mm_cvtsi64_si128#canCall| |a#0@@9|) (and (<= (LitInt 0) |a#0@@9|) (< |a#0@@9| 18446744073709551616))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (Bits__s.__default.intrinsic_mm_cvtsi64_si128 |a#0@@9|) (LitInt 128)) (|Seq#Append| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@9| (LitInt 64)) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 64)))) (and (<= (LitInt 0) (Bits__s.__default.intrinsic_mm_cvtsi64_si128 |a#0@@9|)) (< (Bits__s.__default.intrinsic_mm_cvtsi64_si128 |a#0@@9|) 340282366920938463463374607431768211456)))) :qid |Bitssdfy.59:104| :skolemid |1178| :pattern ( (Bits__s.__default.intrinsic_mm_cvtsi64_si128 |a#0@@9|)) ))))
(assert (forall ((|a#0@@10| Int) ) (!  (=> (and (<= (LitInt 0) |a#0@@10|) (< |a#0@@10| 18446744073709551616)) (= (|Bits__s.__default.intrinsic_mm_cvtsi64_si128#requires| |a#0@@10|) true)) :qid |Bitssdfy.59:104| :skolemid |1179| :pattern ( (|Bits__s.__default.intrinsic_mm_cvtsi64_si128#requires| |a#0@@10|)) )))
(assert  (=> true (forall ((|a#0@@11| Int) ) (!  (=> (or (|Bits__s.__default.intrinsic_mm_cvtsi128_si64#canCall| |a#0@@11|) (and (<= (LitInt 0) |a#0@@11|) (< |a#0@@11| 340282366920938463463374607431768211456))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (Bits__s.__default.intrinsic_mm_cvtsi128_si64 |a#0@@11|) (LitInt 64)) (|Seq#Drop| (|Seq#Take| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@11| (LitInt 128)) (LitInt 64)) (LitInt 0))) (and (<= (LitInt 0) (Bits__s.__default.intrinsic_mm_cvtsi128_si64 |a#0@@11|)) (< (Bits__s.__default.intrinsic_mm_cvtsi128_si64 |a#0@@11|) 18446744073709551616)))) :qid |Bitssdfy.64:104| :skolemid |1180| :pattern ( (Bits__s.__default.intrinsic_mm_cvtsi128_si64 |a#0@@11|)) ))))
(assert (forall ((|a#0@@12| Int) ) (!  (=> (and (<= (LitInt 0) |a#0@@12|) (< |a#0@@12| 340282366920938463463374607431768211456)) (= (|Bits__s.__default.intrinsic_mm_cvtsi128_si64#requires| |a#0@@12|) true)) :qid |Bitssdfy.64:104| :skolemid |1181| :pattern ( (|Bits__s.__default.intrinsic_mm_cvtsi128_si64#requires| |a#0@@12|)) )))
(assert (= (type Tclass.F2__X__s.__default) TyType))
(assert (= (Tag Tclass.F2__X__s.__default) Tagclass.F2__X__s.__default))
(assert (= (TagFamily Tclass.F2__X__s.__default) tytagFamily$_default))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass.F2__X__s.__default)) (and (= ($Box ($Unbox refType bx@@85)) bx@@85) ($Is ($Unbox refType bx@@85) Tclass.F2__X__s.__default))) :qid |unknown.0:0| :skolemid |1182| :pattern ( ($IsBox bx@@85 Tclass.F2__X__s.__default)) )))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (= ($Is $o@@15 Tclass.F2__X__s.__default)  (or (= $o@@15 null) (= (dtype $o@@15) Tclass.F2__X__s.__default)))) :qid |unknown.0:0| :skolemid |1183| :pattern ( ($Is $o@@15 Tclass.F2__X__s.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@38 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@38) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@16 Tclass.F2__X__s.__default $h@@38)  (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@38 $o@@16) alloc))))) :qid |unknown.0:0| :skolemid |1184| :pattern ( ($IsAlloc $o@@16 Tclass.F2__X__s.__default $h@@38)) )))
(assert (forall ((arg0@@231 T@U) (arg1@@112 T@U) ) (! (= (type (F2__X__s.__default.reverse arg0@@231 arg1@@112)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.reverse| :pattern ( (F2__X__s.__default.reverse arg0@@231 arg1@@112)) )))
(assert (forall (($ly@@23 T@U) (|s#0@@5| T@U) ) (!  (=> (and (= (type $ly@@23) LayerTypeType) (= (type |s#0@@5|) (SeqType BoxType))) (= (F2__X__s.__default.reverse ($LS $ly@@23) |s#0@@5|) (F2__X__s.__default.reverse $ly@@23 |s#0@@5|))) :qid |F2Xsdfy.14:22| :skolemid |1185| :pattern ( (F2__X__s.__default.reverse ($LS $ly@@23) |s#0@@5|)) )))
(assert (forall (($ly@@24 T@U) (|s#0@@6| T@U) ) (!  (=> (and (= (type $ly@@24) LayerTypeType) (= (type |s#0@@6|) (SeqType BoxType))) (= (F2__X__s.__default.reverse $ly@@24 |s#0@@6|) (F2__X__s.__default.reverse $LZ |s#0@@6|))) :qid |F2Xsdfy.14:22| :skolemid |1186| :pattern ( (F2__X__s.__default.reverse (AsFuelBottom $ly@@24) |s#0@@6|)) )))
(assert  (=> true (forall (($ly@@25 T@U) (|s#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@25) LayerTypeType) (= (type |s#0@@7|) (SeqType BoxType))) (or (|F2__X__s.__default.reverse#canCall| |s#0@@7|) ($Is |s#0@@7| (TSeq TBool)))) (and (and (= (|Seq#Length| (F2__X__s.__default.reverse $ly@@25 |s#0@@7|)) (|Seq#Length| |s#0@@7|)) (forall ((|i#0@@27| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| (|Seq#Length| (F2__X__s.__default.reverse $ly@@25 |s#0@@7|)))) (= (U_2_bool ($Unbox boolType (|Seq#Index| (F2__X__s.__default.reverse $ly@@25 |s#0@@7|) |i#0@@27|))) (U_2_bool ($Unbox boolType (|Seq#Index| |s#0@@7| (- (- (|Seq#Length| |s#0@@7|) 1) |i#0@@27|)))))) :qid |F2Xsdfy.16:18| :skolemid |1187| :pattern ( ($Unbox boolType (|Seq#Index| (F2__X__s.__default.reverse $ly@@25 |s#0@@7|) |i#0@@27|))) ))) ($Is (F2__X__s.__default.reverse $ly@@25 |s#0@@7|) (TSeq TBool)))) :qid |F2Xsdfy.14:22| :skolemid |1188| :pattern ( (F2__X__s.__default.reverse $ly@@25 |s#0@@7|)) ))))
(assert (forall (($ly@@26 T@U) (|s#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@26) LayerTypeType) (= (type |s#0@@8|) (SeqType BoxType))) ($Is |s#0@@8| (TSeq TBool))) (= (|F2__X__s.__default.reverse#requires| $ly@@26 |s#0@@8|) true)) :qid |F2Xsdfy.14:22| :skolemid |1189| :pattern ( (|F2__X__s.__default.reverse#requires| $ly@@26 |s#0@@8|)) )))
(assert  (=> true (forall (($ly@@27 T@U) (|s#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@27) LayerTypeType) (= (type |s#0@@9|) (SeqType BoxType))) (or (|F2__X__s.__default.reverse#canCall| |s#0@@9|) ($Is |s#0@@9| (TSeq TBool)))) (and (=> (not (= (|Seq#Length| |s#0@@9|) (LitInt 0))) (|F2__X__s.__default.reverse#canCall| (|Seq#Drop| |s#0@@9| (LitInt 1)))) (= (F2__X__s.__default.reverse ($LS $ly@@27) |s#0@@9|) (ite (= (|Seq#Length| |s#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (F2__X__s.__default.reverse $ly@@27 (|Seq#Drop| |s#0@@9| (LitInt 1))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |s#0@@9| (LitInt 0)))))))) :qid |F2Xsdfy.14:22| :skolemid |1190| :pattern ( (F2__X__s.__default.reverse ($LS $ly@@27) |s#0@@9|)) ))))
(assert  (=> true (forall (($ly@@28 T@U) (|s#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@28) LayerTypeType) (= (type |s#0@@10|) (SeqType BoxType))) (or (|F2__X__s.__default.reverse#canCall| (Lit |s#0@@10|)) ($Is |s#0@@10| (TSeq TBool)))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@10|)) (LitInt 0))) (|F2__X__s.__default.reverse#canCall| (Lit (|Seq#Drop| (Lit |s#0@@10|) (LitInt 1))))) (= (F2__X__s.__default.reverse ($LS $ly@@28) (Lit |s#0@@10|)) (ite (= (|Seq#Length| (Lit |s#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (F2__X__s.__default.reverse ($LS $ly@@28) (Lit (|Seq#Drop| (Lit |s#0@@10|) (LitInt 1)))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (Lit |s#0@@10|) (LitInt 0)))))))) :qid |F2Xsdfy.14:22| :weight 3 :skolemid |1191| :pattern ( (F2__X__s.__default.reverse ($LS $ly@@28) (Lit |s#0@@10|))) ))))
(assert  (=> true (forall ((|a#0@@13| Bool) (|b#0@@1| Bool) ) (!  (=> true true) :qid |F2Xsdfy.22:21| :skolemid |1192| :pattern ( (F2__X__s.__default.bool__xor |a#0@@13| |b#0@@1|)) ))))
(assert (forall ((|a#0@@14| Bool) (|b#0@@2| Bool) ) (! (= (|F2__X__s.__default.bool__xor#requires| |a#0@@14| |b#0@@2|) true) :qid |F2Xsdfy.22:21| :skolemid |1193| :pattern ( (|F2__X__s.__default.bool__xor#requires| |a#0@@14| |b#0@@2|)) )))
(assert  (=> true (forall ((|a#0@@15| Bool) (|b#0@@3| Bool) ) (!  (=> true (= (F2__X__s.__default.bool__xor |a#0@@15| |b#0@@3|)  (or (and |a#0@@15| (not |b#0@@3|)) (and (not |a#0@@15|) |b#0@@3|)))) :qid |F2Xsdfy.22:21| :skolemid |1194| :pattern ( (F2__X__s.__default.bool__xor |a#0@@15| |b#0@@3|)) ))))
(assert  (=> true (forall ((|a#0@@16| T@U) (|b#0@@4| T@U) ) (!  (=> (and (and (= (type |a#0@@16|) boolType) (= (type |b#0@@4|) boolType)) true) (= (F2__X__s.__default.bool__xor (U_2_bool (Lit |a#0@@16|)) (U_2_bool (Lit |b#0@@4|)))  (or (and (U_2_bool |a#0@@16|) (not (U_2_bool (Lit |b#0@@4|)))) (and (not (U_2_bool (Lit |a#0@@16|))) (U_2_bool |b#0@@4|))))) :qid |F2Xsdfy.22:21| :weight 3 :skolemid |1195| :pattern ( (F2__X__s.__default.bool__xor (U_2_bool (Lit |a#0@@16|)) (U_2_bool (Lit |b#0@@4|)))) ))))
(assert (forall ((arg0@@232 T@U) (arg1@@113 T@U) (arg2@@62 T@U) ) (! (= (type (F2__X__s.__default.xor arg0@@232 arg1@@113 arg2@@62)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.xor| :pattern ( (F2__X__s.__default.xor arg0@@232 arg1@@113 arg2@@62)) )))
(assert (forall (($ly@@29 T@U) (|p#0| T@U) (|q#0| T@U) ) (!  (=> (and (and (= (type $ly@@29) LayerTypeType) (= (type |p#0|) (SeqType BoxType))) (= (type |q#0|) (SeqType BoxType))) (= (F2__X__s.__default.xor ($LS $ly@@29) |p#0| |q#0|) (F2__X__s.__default.xor $ly@@29 |p#0| |q#0|))) :qid |F2Xsdfy.27:22| :skolemid |1196| :pattern ( (F2__X__s.__default.xor ($LS $ly@@29) |p#0| |q#0|)) )))
(assert (forall (($ly@@30 T@U) (|p#0@@0| T@U) (|q#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@30) LayerTypeType) (= (type |p#0@@0|) (SeqType BoxType))) (= (type |q#0@@0|) (SeqType BoxType))) (= (F2__X__s.__default.xor $ly@@30 |p#0@@0| |q#0@@0|) (F2__X__s.__default.xor $LZ |p#0@@0| |q#0@@0|))) :qid |F2Xsdfy.27:22| :skolemid |1197| :pattern ( (F2__X__s.__default.xor (AsFuelBottom $ly@@30) |p#0@@0| |q#0@@0|)) )))
(assert  (=> true (forall (($ly@@31 T@U) (|p#0@@1| T@U) (|q#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@31) LayerTypeType) (= (type |p#0@@1|) (SeqType BoxType))) (= (type |q#0@@1|) (SeqType BoxType))) (or (|F2__X__s.__default.xor#canCall| |p#0@@1| |q#0@@1|) (and (and ($Is |p#0@@1| (TSeq TBool)) ($Is |q#0@@1| (TSeq TBool))) (= (|Seq#Length| |p#0@@1|) (|Seq#Length| |q#0@@1|))))) (and (and (= (|Seq#Length| (F2__X__s.__default.xor $ly@@31 |p#0@@1| |q#0@@1|)) (|Seq#Length| |p#0@@1|)) (forall ((|i#0@@28| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| (|Seq#Length| (F2__X__s.__default.xor $ly@@31 |p#0@@1| |q#0@@1|)))) (= (U_2_bool ($Unbox boolType (|Seq#Index| (F2__X__s.__default.xor $ly@@31 |p#0@@1| |q#0@@1|) |i#0@@28|))) (F2__X__s.__default.bool__xor (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@1| |i#0@@28|))) (U_2_bool ($Unbox boolType (|Seq#Index| |q#0@@1| |i#0@@28|)))))) :qid |F2Xsdfy.30:18| :skolemid |1198| :pattern ( ($Unbox boolType (|Seq#Index| |q#0@@1| |i#0@@28|))) :pattern ( ($Unbox boolType (|Seq#Index| |p#0@@1| |i#0@@28|))) :pattern ( ($Unbox boolType (|Seq#Index| (F2__X__s.__default.xor $ly@@31 |p#0@@1| |q#0@@1|) |i#0@@28|))) ))) ($Is (F2__X__s.__default.xor $ly@@31 |p#0@@1| |q#0@@1|) (TSeq TBool)))) :qid |F2Xsdfy.27:22| :skolemid |1199| :pattern ( (F2__X__s.__default.xor $ly@@31 |p#0@@1| |q#0@@1|)) ))))
(assert (forall (($ly@@32 T@U) (|p#0@@2| T@U) (|q#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@32) LayerTypeType) (= (type |p#0@@2|) (SeqType BoxType))) (= (type |q#0@@2|) (SeqType BoxType))) (and ($Is |p#0@@2| (TSeq TBool)) ($Is |q#0@@2| (TSeq TBool)))) (= (|F2__X__s.__default.xor#requires| $ly@@32 |p#0@@2| |q#0@@2|) (= (|Seq#Length| |p#0@@2|) (|Seq#Length| |q#0@@2|)))) :qid |F2Xsdfy.27:22| :skolemid |1200| :pattern ( (|F2__X__s.__default.xor#requires| $ly@@32 |p#0@@2| |q#0@@2|)) )))
(assert  (=> true (forall (($ly@@33 T@U) (|p#0@@3| T@U) (|q#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@33) LayerTypeType) (= (type |p#0@@3|) (SeqType BoxType))) (= (type |q#0@@3|) (SeqType BoxType))) (or (|F2__X__s.__default.xor#canCall| |p#0@@3| |q#0@@3|) (and (and ($Is |p#0@@3| (TSeq TBool)) ($Is |q#0@@3| (TSeq TBool))) (= (|Seq#Length| |p#0@@3|) (|Seq#Length| |q#0@@3|))))) (and (=> (not (= (|Seq#Length| |p#0@@3|) (LitInt 0))) (and (|F2__X__s.__default.xor#canCall| (|Seq#Take| |p#0@@3| (- (|Seq#Length| |p#0@@3|) 1)) (|Seq#Take| |q#0@@3| (- (|Seq#Length| |q#0@@3|) 1))) (|F2__X__s.__default.bool__xor#canCall| (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@3| (- (|Seq#Length| |p#0@@3|) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| |q#0@@3| (- (|Seq#Length| |q#0@@3|) 1))))))) (= (F2__X__s.__default.xor ($LS $ly@@33) |p#0@@3| |q#0@@3|) (ite (= (|Seq#Length| |p#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (F2__X__s.__default.xor $ly@@33 (|Seq#Take| |p#0@@3| (- (|Seq#Length| |p#0@@3|) 1)) (|Seq#Take| |q#0@@3| (- (|Seq#Length| |q#0@@3|) 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U (F2__X__s.__default.bool__xor (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@3| (- (|Seq#Length| |p#0@@3|) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| |q#0@@3| (- (|Seq#Length| |q#0@@3|) 1))))))))))))) :qid |F2Xsdfy.27:22| :skolemid |1201| :pattern ( (F2__X__s.__default.xor ($LS $ly@@33) |p#0@@3| |q#0@@3|)) ))))
(assert  (=> true (forall (($ly@@34 T@U) (|p#0@@4| T@U) (|q#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@34) LayerTypeType) (= (type |p#0@@4|) (SeqType BoxType))) (= (type |q#0@@4|) (SeqType BoxType))) (or (|F2__X__s.__default.xor#canCall| (Lit |p#0@@4|) (Lit |q#0@@4|)) (and (and ($Is |p#0@@4| (TSeq TBool)) ($Is |q#0@@4| (TSeq TBool))) (= (|Seq#Length| (Lit |p#0@@4|)) (|Seq#Length| (Lit |q#0@@4|)))))) (and (=> (not (= (|Seq#Length| (Lit |p#0@@4|)) (LitInt 0))) (and (|F2__X__s.__default.xor#canCall| (|Seq#Take| (Lit |p#0@@4|) (- (|Seq#Length| (Lit |p#0@@4|)) 1)) (|Seq#Take| (Lit |q#0@@4|) (- (|Seq#Length| (Lit |q#0@@4|)) 1))) (|F2__X__s.__default.bool__xor#canCall| (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@4|) (- (|Seq#Length| (Lit |p#0@@4|)) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |q#0@@4|) (- (|Seq#Length| (Lit |q#0@@4|)) 1))))))) (= (F2__X__s.__default.xor ($LS $ly@@34) (Lit |p#0@@4|) (Lit |q#0@@4|)) (ite (= (|Seq#Length| (Lit |p#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (F2__X__s.__default.xor ($LS $ly@@34) (|Seq#Take| (Lit |p#0@@4|) (- (|Seq#Length| (Lit |p#0@@4|)) 1)) (|Seq#Take| (Lit |q#0@@4|) (- (|Seq#Length| (Lit |q#0@@4|)) 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U (F2__X__s.__default.bool__xor (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@4|) (- (|Seq#Length| (Lit |p#0@@4|)) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |q#0@@4|) (- (|Seq#Length| (Lit |q#0@@4|)) 1))))))))))))) :qid |F2Xsdfy.27:22| :weight 3 :skolemid |1202| :pattern ( (F2__X__s.__default.xor ($LS $ly@@34) (Lit |p#0@@4|) (Lit |q#0@@4|))) ))))
(assert (forall ((arg0@@233 T@U) (arg1@@114 Int) ) (! (= (type (F2__X__s.__default.extend arg0@@233 arg1@@114)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.extend| :pattern ( (F2__X__s.__default.extend arg0@@233 arg1@@114)) )))
(assert  (=> true (forall ((|p#0@@5| T@U) (|l#0@@11| Int) ) (!  (=> (and (= (type |p#0@@5|) (SeqType BoxType)) (or (|F2__X__s.__default.extend#canCall| |p#0@@5| |l#0@@11|) (and (and ($Is |p#0@@5| (TSeq TBool)) (<= (LitInt 0) |l#0@@11|)) (>= |l#0@@11| (|Seq#Length| |p#0@@5|))))) ($Is (F2__X__s.__default.extend |p#0@@5| |l#0@@11|) (TSeq TBool))) :qid |F2Xsdfy.38:19| :skolemid |1203| :pattern ( (F2__X__s.__default.extend |p#0@@5| |l#0@@11|)) ))))
(assert (forall ((|p#0@@6| T@U) (|l#0@@12| Int) ) (!  (=> (= (type |p#0@@6|) (SeqType BoxType)) (=> (and ($Is |p#0@@6| (TSeq TBool)) (<= (LitInt 0) |l#0@@12|)) (= (|F2__X__s.__default.extend#requires| |p#0@@6| |l#0@@12|) (>= |l#0@@12| (|Seq#Length| |p#0@@6|))))) :qid |F2Xsdfy.38:19| :skolemid |1204| :pattern ( (|F2__X__s.__default.extend#requires| |p#0@@6| |l#0@@12|)) )))
(assert  (=> true (forall ((|p#0@@7| T@U) (|l#0@@13| Int) ) (!  (=> (and (= (type |p#0@@7|) (SeqType BoxType)) (or (|F2__X__s.__default.extend#canCall| |p#0@@7| |l#0@@13|) (and (and ($Is |p#0@@7| (TSeq TBool)) (<= (LitInt 0) |l#0@@13|)) (>= |l#0@@13| (|Seq#Length| |p#0@@7|))))) (and (|Bits__s.__default.zeroes#canCall| (- |l#0@@13| (|Seq#Length| |p#0@@7|))) (= (F2__X__s.__default.extend |p#0@@7| |l#0@@13|) (|Seq#Append| |p#0@@7| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- |l#0@@13| (|Seq#Length| |p#0@@7|))))))) :qid |F2Xsdfy.38:19| :skolemid |1205| :pattern ( (F2__X__s.__default.extend |p#0@@7| |l#0@@13|)) ))))
(assert  (=> true (forall ((|p#0@@8| T@U) (|l#0@@14| Int) ) (!  (=> (and (= (type |p#0@@8|) (SeqType BoxType)) (or (|F2__X__s.__default.extend#canCall| (Lit |p#0@@8|) (LitInt |l#0@@14|)) (and (and ($Is |p#0@@8| (TSeq TBool)) (<= (LitInt 0) |l#0@@14|)) (>= (LitInt |l#0@@14|) (|Seq#Length| (Lit |p#0@@8|)))))) (and (|Bits__s.__default.zeroes#canCall| (- |l#0@@14| (|Seq#Length| (Lit |p#0@@8|)))) (= (F2__X__s.__default.extend (Lit |p#0@@8|) (LitInt |l#0@@14|)) (|Seq#Append| |p#0@@8| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- |l#0@@14| (|Seq#Length| (Lit |p#0@@8|)))))))) :qid |F2Xsdfy.38:19| :weight 3 :skolemid |1206| :pattern ( (F2__X__s.__default.extend (Lit |p#0@@8|) (LitInt |l#0@@14|))) ))))
(assert  (=> true (forall ((|p#0@@9| T@U) (|i#0@@29| Int) ) (!  (=> (and (= (type |p#0@@9|) (SeqType BoxType)) (or (|F2__X__s.__default.bits__get#canCall| |p#0@@9| |i#0@@29|) (and ($Is |p#0@@9| (TSeq TBool)) (<= (LitInt 0) |i#0@@29|)))) true) :qid |F2Xsdfy.44:21| :skolemid |1207| :pattern ( (F2__X__s.__default.bits__get |p#0@@9| |i#0@@29|)) ))))
(assert (forall ((|p#0@@10| T@U) (|i#0@@30| Int) ) (!  (=> (= (type |p#0@@10|) (SeqType BoxType)) (=> (and ($Is |p#0@@10| (TSeq TBool)) (<= (LitInt 0) |i#0@@30|)) (= (|F2__X__s.__default.bits__get#requires| |p#0@@10| |i#0@@30|) true))) :qid |F2Xsdfy.44:21| :skolemid |1208| :pattern ( (|F2__X__s.__default.bits__get#requires| |p#0@@10| |i#0@@30|)) )))
(assert  (=> true (forall ((|p#0@@11| T@U) (|i#0@@31| Int) ) (!  (=> (and (= (type |p#0@@11|) (SeqType BoxType)) (or (|F2__X__s.__default.bits__get#canCall| |p#0@@11| |i#0@@31|) (and ($Is |p#0@@11| (TSeq TBool)) (<= (LitInt 0) |i#0@@31|)))) (= (F2__X__s.__default.bits__get |p#0@@11| |i#0@@31|)  (and (< |i#0@@31| (|Seq#Length| |p#0@@11|)) (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@11| |i#0@@31|)))))) :qid |F2Xsdfy.44:21| :skolemid |1209| :pattern ( (F2__X__s.__default.bits__get |p#0@@11| |i#0@@31|)) ))))
(assert  (=> true (forall ((|p#0@@12| T@U) (|i#0@@32| Int) ) (!  (=> (and (= (type |p#0@@12|) (SeqType BoxType)) (or (|F2__X__s.__default.bits__get#canCall| (Lit |p#0@@12|) (LitInt |i#0@@32|)) (and ($Is |p#0@@12| (TSeq TBool)) (<= (LitInt 0) |i#0@@32|)))) (= (F2__X__s.__default.bits__get (Lit |p#0@@12|) (LitInt |i#0@@32|))  (and (< |i#0@@32| (|Seq#Length| (Lit |p#0@@12|))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@12|) (LitInt |i#0@@32|))))))) :qid |F2Xsdfy.44:21| :weight 3 :skolemid |1210| :pattern ( (F2__X__s.__default.bits__get (Lit |p#0@@12|) (LitInt |i#0@@32|))) ))))
(assert (forall (($ly@@35 T@U) (|p#0@@13| T@U) (|q#0@@5| T@U) (|i#0@@33| Int) (|j#0| Int) ) (!  (=> (and (and (= (type $ly@@35) LayerTypeType) (= (type |p#0@@13|) (SeqType BoxType))) (= (type |q#0@@5|) (SeqType BoxType))) (= (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@35) |p#0@@13| |q#0@@5| |i#0@@33| |j#0|) (F2__X__s.__default.mul__F2__X__digit__partial $ly@@35 |p#0@@13| |q#0@@5| |i#0@@33| |j#0|))) :qid |F2Xsdfy.49:12| :skolemid |1211| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@35) |p#0@@13| |q#0@@5| |i#0@@33| |j#0|)) )))
(assert (forall (($ly@@36 T@U) (|p#0@@14| T@U) (|q#0@@6| T@U) (|i#0@@34| Int) (|j#0@@0| Int) ) (!  (=> (and (and (= (type $ly@@36) LayerTypeType) (= (type |p#0@@14|) (SeqType BoxType))) (= (type |q#0@@6|) (SeqType BoxType))) (= (F2__X__s.__default.mul__F2__X__digit__partial $ly@@36 |p#0@@14| |q#0@@6| |i#0@@34| |j#0@@0|) (F2__X__s.__default.mul__F2__X__digit__partial $LZ |p#0@@14| |q#0@@6| |i#0@@34| |j#0@@0|))) :qid |F2Xsdfy.49:12| :skolemid |1212| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial (AsFuelBottom $ly@@36) |p#0@@14| |q#0@@6| |i#0@@34| |j#0@@0|)) )))
(assert  (=> true (forall (($ly@@37 T@U) (|p#0@@15| T@U) (|q#0@@7| T@U) (|i#0@@35| Int) (|j#0@@1| Int) ) (!  (=> (and (and (and (= (type $ly@@37) LayerTypeType) (= (type |p#0@@15|) (SeqType BoxType))) (= (type |q#0@@7|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@15| |q#0@@7| |i#0@@35| |j#0@@1|) (and (and (and (and ($Is |p#0@@15| (TSeq TBool)) ($Is |q#0@@7| (TSeq TBool))) (<= (LitInt 0) |i#0@@35|)) (<= (LitInt 0) |j#0@@1|)) (<= |j#0@@1| (+ |i#0@@35| 1))))) true) :qid |F2Xsdfy.49:12| :skolemid |1213| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial $ly@@37 |p#0@@15| |q#0@@7| |i#0@@35| |j#0@@1|)) ))))
(assert (forall (($ly@@38 T@U) (|p#0@@16| T@U) (|q#0@@8| T@U) (|i#0@@36| Int) (|j#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@38) LayerTypeType) (= (type |p#0@@16|) (SeqType BoxType))) (= (type |q#0@@8|) (SeqType BoxType))) (=> (and (and (and ($Is |p#0@@16| (TSeq TBool)) ($Is |q#0@@8| (TSeq TBool))) (<= (LitInt 0) |i#0@@36|)) (<= (LitInt 0) |j#0@@2|)) (= (|F2__X__s.__default.mul__F2__X__digit__partial#requires| $ly@@38 |p#0@@16| |q#0@@8| |i#0@@36| |j#0@@2|) (<= |j#0@@2| (+ |i#0@@36| 1))))) :qid |F2Xsdfy.49:12| :skolemid |1214| :pattern ( (|F2__X__s.__default.mul__F2__X__digit__partial#requires| $ly@@38 |p#0@@16| |q#0@@8| |i#0@@36| |j#0@@2|)) )))
(assert  (=> true (forall (($ly@@39 T@U) (|p#0@@17| T@U) (|q#0@@9| T@U) (|i#0@@37| Int) (|j#0@@3| Int) ) (!  (=> (and (and (and (= (type $ly@@39) LayerTypeType) (= (type |p#0@@17|) (SeqType BoxType))) (= (type |q#0@@9|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@17| |q#0@@9| |i#0@@37| |j#0@@3|) (and (and (and (and ($Is |p#0@@17| (TSeq TBool)) ($Is |q#0@@9| (TSeq TBool))) (<= (LitInt 0) |i#0@@37|)) (<= (LitInt 0) |j#0@@3|)) (<= |j#0@@3| (+ |i#0@@37| 1))))) (and (=> (not (= |j#0@@3| (+ |i#0@@37| 1))) (and (and (and (|F2__X__s.__default.bits__get#canCall| |p#0@@17| |j#0@@3|) (=> (F2__X__s.__default.bits__get |p#0@@17| |j#0@@3|) (|F2__X__s.__default.bits__get#canCall| |q#0@@9| (- |i#0@@37| |j#0@@3|)))) (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@17| |q#0@@9| |i#0@@37| (+ |j#0@@3| 1))) (|F2__X__s.__default.bool__xor#canCall|  (and (F2__X__s.__default.bits__get |p#0@@17| |j#0@@3|) (F2__X__s.__default.bits__get |q#0@@9| (- |i#0@@37| |j#0@@3|))) (F2__X__s.__default.mul__F2__X__digit__partial $ly@@39 |p#0@@17| |q#0@@9| |i#0@@37| (+ |j#0@@3| 1))))) (= (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@39) |p#0@@17| |q#0@@9| |i#0@@37| |j#0@@3|) (ite (= |j#0@@3| (+ |i#0@@37| 1)) false (F2__X__s.__default.bool__xor  (and (F2__X__s.__default.bits__get |p#0@@17| |j#0@@3|) (F2__X__s.__default.bits__get |q#0@@9| (- |i#0@@37| |j#0@@3|))) (F2__X__s.__default.mul__F2__X__digit__partial $ly@@39 |p#0@@17| |q#0@@9| |i#0@@37| (+ |j#0@@3| 1))))))) :qid |F2Xsdfy.49:12| :skolemid |1215| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@39) |p#0@@17| |q#0@@9| |i#0@@37| |j#0@@3|)) ))))
(assert  (=> true (forall (($ly@@40 T@U) (|p#0@@18| T@U) (|q#0@@10| T@U) (|i#0@@38| Int) (|j#0@@4| Int) ) (!  (=> (and (and (and (= (type $ly@@40) LayerTypeType) (= (type |p#0@@18|) (SeqType BoxType))) (= (type |q#0@@10|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@18| |q#0@@10| (LitInt |i#0@@38|) (LitInt |j#0@@4|)) (and (and (and (and ($Is |p#0@@18| (TSeq TBool)) ($Is |q#0@@10| (TSeq TBool))) (<= (LitInt 0) |i#0@@38|)) (<= (LitInt 0) |j#0@@4|)) (<= (LitInt |j#0@@4|) (LitInt (+ |i#0@@38| 1)))))) (and (=> (not (= (LitInt |j#0@@4|) (LitInt (+ |i#0@@38| 1)))) (and (and (and (|F2__X__s.__default.bits__get#canCall| |p#0@@18| (LitInt |j#0@@4|)) (=> (F2__X__s.__default.bits__get |p#0@@18| (LitInt |j#0@@4|)) (|F2__X__s.__default.bits__get#canCall| |q#0@@10| (LitInt (- |i#0@@38| |j#0@@4|))))) (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@18| |q#0@@10| (LitInt |i#0@@38|) (LitInt (+ |j#0@@4| 1)))) (|F2__X__s.__default.bool__xor#canCall|  (and (F2__X__s.__default.bits__get |p#0@@18| (LitInt |j#0@@4|)) (F2__X__s.__default.bits__get |q#0@@10| (LitInt (- |i#0@@38| |j#0@@4|)))) (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@40) |p#0@@18| |q#0@@10| (LitInt |i#0@@38|) (LitInt (+ |j#0@@4| 1)))))) (= (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@40) |p#0@@18| |q#0@@10| (LitInt |i#0@@38|) (LitInt |j#0@@4|)) (ite (= (LitInt |j#0@@4|) (LitInt (+ |i#0@@38| 1))) false (F2__X__s.__default.bool__xor  (and (F2__X__s.__default.bits__get |p#0@@18| (LitInt |j#0@@4|)) (F2__X__s.__default.bits__get |q#0@@10| (LitInt (- |i#0@@38| |j#0@@4|)))) (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@40) |p#0@@18| |q#0@@10| (LitInt |i#0@@38|) (LitInt (+ |j#0@@4| 1)))))))) :qid |F2Xsdfy.49:12| :weight 3 :skolemid |1216| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@40) |p#0@@18| |q#0@@10| (LitInt |i#0@@38|) (LitInt |j#0@@4|))) ))))
(assert  (=> true (forall (($ly@@41 T@U) (|p#0@@19| T@U) (|q#0@@11| T@U) (|i#0@@39| Int) (|j#0@@5| Int) ) (!  (=> (and (and (and (= (type $ly@@41) LayerTypeType) (= (type |p#0@@19|) (SeqType BoxType))) (= (type |q#0@@11|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@39|) (LitInt |j#0@@5|)) (and (and (and (and ($Is |p#0@@19| (TSeq TBool)) ($Is |q#0@@11| (TSeq TBool))) (<= (LitInt 0) |i#0@@39|)) (<= (LitInt 0) |j#0@@5|)) (<= (LitInt |j#0@@5|) (LitInt (+ |i#0@@39| 1)))))) (and (=> (not (= (LitInt |j#0@@5|) (LitInt (+ |i#0@@39| 1)))) (and (and (and (|F2__X__s.__default.bits__get#canCall| (Lit |p#0@@19|) (LitInt |j#0@@5|)) (=> (U_2_bool (Lit (bool_2_U (F2__X__s.__default.bits__get (Lit |p#0@@19|) (LitInt |j#0@@5|))))) (|F2__X__s.__default.bits__get#canCall| (Lit |q#0@@11|) (LitInt (- |i#0@@39| |j#0@@5|))))) (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@39|) (LitInt (+ |j#0@@5| 1)))) (|F2__X__s.__default.bool__xor#canCall| (U_2_bool (Lit (bool_2_U  (and (F2__X__s.__default.bits__get (Lit |p#0@@19|) (LitInt |j#0@@5|)) (F2__X__s.__default.bits__get (Lit |q#0@@11|) (LitInt (- |i#0@@39| |j#0@@5|))))))) (U_2_bool (Lit (bool_2_U (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@41) (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@39|) (LitInt (+ |j#0@@5| 1))))))))) (= (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@41) (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@39|) (LitInt |j#0@@5|)) (ite (= (LitInt |j#0@@5|) (LitInt (+ |i#0@@39| 1))) false (F2__X__s.__default.bool__xor (U_2_bool (Lit (bool_2_U  (and (F2__X__s.__default.bits__get (Lit |p#0@@19|) (LitInt |j#0@@5|)) (F2__X__s.__default.bits__get (Lit |q#0@@11|) (LitInt (- |i#0@@39| |j#0@@5|))))))) (U_2_bool (Lit (bool_2_U (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@41) (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@39|) (LitInt (+ |j#0@@5| 1))))))))))) :qid |F2Xsdfy.49:12| :weight 3 :skolemid |1217| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@41) (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@39|) (LitInt |j#0@@5|))) ))))
(assert  (=> true (forall ((|p#0@@20| T@U) (|q#0@@12| T@U) (|i#0@@40| Int) ) (!  (=> (and (and (= (type |p#0@@20|) (SeqType BoxType)) (= (type |q#0@@12|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit#canCall| |p#0@@20| |q#0@@12| |i#0@@40|) (and (and ($Is |p#0@@20| (TSeq TBool)) ($Is |q#0@@12| (TSeq TBool))) (<= (LitInt 0) |i#0@@40|)))) true) :qid |F2Xsdfy.62:27| :skolemid |1218| :pattern ( (F2__X__s.__default.mul__F2__X__digit |p#0@@20| |q#0@@12| |i#0@@40|)) ))))
(assert (forall ((|p#0@@21| T@U) (|q#0@@13| T@U) (|i#0@@41| Int) ) (!  (=> (and (= (type |p#0@@21|) (SeqType BoxType)) (= (type |q#0@@13|) (SeqType BoxType))) (=> (and (and ($Is |p#0@@21| (TSeq TBool)) ($Is |q#0@@13| (TSeq TBool))) (<= (LitInt 0) |i#0@@41|)) (= (|F2__X__s.__default.mul__F2__X__digit#requires| |p#0@@21| |q#0@@13| |i#0@@41|) true))) :qid |F2Xsdfy.62:27| :skolemid |1219| :pattern ( (|F2__X__s.__default.mul__F2__X__digit#requires| |p#0@@21| |q#0@@13| |i#0@@41|)) )))
(assert  (=> true (forall ((|p#0@@22| T@U) (|q#0@@14| T@U) (|i#0@@42| Int) ) (!  (=> (and (and (= (type |p#0@@22|) (SeqType BoxType)) (= (type |q#0@@14|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit#canCall| |p#0@@22| |q#0@@14| |i#0@@42|) (and (and ($Is |p#0@@22| (TSeq TBool)) ($Is |q#0@@14| (TSeq TBool))) (<= (LitInt 0) |i#0@@42|)))) (and (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@22| |q#0@@14| |i#0@@42| (LitInt 0)) (= (F2__X__s.__default.mul__F2__X__digit |p#0@@22| |q#0@@14| |i#0@@42|) (F2__X__s.__default.mul__F2__X__digit__partial ($LS $LZ) |p#0@@22| |q#0@@14| |i#0@@42| (LitInt 0))))) :qid |F2Xsdfy.62:27| :skolemid |1220| :pattern ( (F2__X__s.__default.mul__F2__X__digit |p#0@@22| |q#0@@14| |i#0@@42|)) ))))
(assert  (=> true (forall ((|p#0@@23| T@U) (|q#0@@15| T@U) (|i#0@@43| Int) ) (!  (=> (and (and (= (type |p#0@@23|) (SeqType BoxType)) (= (type |q#0@@15|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit#canCall| (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@43|)) (and (and ($Is |p#0@@23| (TSeq TBool)) ($Is |q#0@@15| (TSeq TBool))) (<= (LitInt 0) |i#0@@43|)))) (and (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@43|) (LitInt 0)) (= (F2__X__s.__default.mul__F2__X__digit (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@43|)) (U_2_bool (Lit (bool_2_U (F2__X__s.__default.mul__F2__X__digit__partial ($LS $LZ) (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@43|) (LitInt 0)))))))) :qid |F2Xsdfy.62:27| :weight 3 :skolemid |1221| :pattern ( (F2__X__s.__default.mul__F2__X__digit (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@43|))) ))))
(assert (forall ((arg0@@234 T@U) (arg1@@115 T@U) (arg2@@63 T@U) ) (! (= (type (F2__X__s.__default.mul__F2__X arg0@@234 arg1@@115 arg2@@63)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mul__F2__X| :pattern ( (F2__X__s.__default.mul__F2__X arg0@@234 arg1@@115 arg2@@63)) )))
(assert (forall (($ly@@42 T@U) (|p#0@@24| T@U) (|q#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@42) LayerTypeType) (= (type |p#0@@24|) (SeqType BoxType))) (= (type |q#0@@16|) (SeqType BoxType))) (= (F2__X__s.__default.mul__F2__X ($LS $ly@@42) |p#0@@24| |q#0@@16|) (F2__X__s.__default.mul__F2__X $ly@@42 |p#0@@24| |q#0@@16|))) :qid |F2Xsdfy.67:22| :skolemid |1222| :pattern ( (F2__X__s.__default.mul__F2__X ($LS $ly@@42) |p#0@@24| |q#0@@16|)) )))
(assert (forall (($ly@@43 T@U) (|p#0@@25| T@U) (|q#0@@17| T@U) ) (!  (=> (and (and (= (type $ly@@43) LayerTypeType) (= (type |p#0@@25|) (SeqType BoxType))) (= (type |q#0@@17|) (SeqType BoxType))) (= (F2__X__s.__default.mul__F2__X $ly@@43 |p#0@@25| |q#0@@17|) (F2__X__s.__default.mul__F2__X $LZ |p#0@@25| |q#0@@17|))) :qid |F2Xsdfy.67:22| :skolemid |1223| :pattern ( (F2__X__s.__default.mul__F2__X (AsFuelBottom $ly@@43) |p#0@@25| |q#0@@17|)) )))
(assert  (=> true (forall (($ly@@44 T@U) (|p#0@@26| T@U) (|q#0@@18| T@U) ) (!  (=> (and (and (and (= (type $ly@@44) LayerTypeType) (= (type |p#0@@26|) (SeqType BoxType))) (= (type |q#0@@18|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X#canCall| |p#0@@26| |q#0@@18|) (and ($Is |p#0@@26| (TSeq TBool)) ($Is |q#0@@18| (TSeq TBool))))) (and (and (= (|Seq#Length| (F2__X__s.__default.mul__F2__X $ly@@44 |p#0@@26| |q#0@@18|)) (+ (|Seq#Length| |p#0@@26|) (|Seq#Length| |q#0@@18|))) (forall ((|i#0@@44| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@44|) (< |i#0@@44| (|Seq#Length| (F2__X__s.__default.mul__F2__X $ly@@44 |p#0@@26| |q#0@@18|)))) (= (U_2_bool ($Unbox boolType (|Seq#Index| (F2__X__s.__default.mul__F2__X $ly@@44 |p#0@@26| |q#0@@18|) |i#0@@44|))) (F2__X__s.__default.mul__F2__X__digit |p#0@@26| |q#0@@18| |i#0@@44|))) :qid |F2Xsdfy.69:18| :skolemid |1224| :pattern ( (F2__X__s.__default.mul__F2__X__digit |p#0@@26| |q#0@@18| |i#0@@44|)) :pattern ( ($Unbox boolType (|Seq#Index| (F2__X__s.__default.mul__F2__X $ly@@44 |p#0@@26| |q#0@@18|) |i#0@@44|))) ))) ($Is (F2__X__s.__default.mul__F2__X $ly@@44 |p#0@@26| |q#0@@18|) (TSeq TBool)))) :qid |F2Xsdfy.67:22| :skolemid |1225| :pattern ( (F2__X__s.__default.mul__F2__X $ly@@44 |p#0@@26| |q#0@@18|)) ))))
(assert (forall (($ly@@45 T@U) ($Heap T@U) (|p#0@@27| T@U) (|q#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@45) LayerTypeType) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |p#0@@27|) (SeqType BoxType))) (= (type |q#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap) ($Is |p#0@@27| (TSeq TBool))) ($Is |q#0@@19| (TSeq TBool)))) (= (|F2__X__s.__default.mul__F2__X#requires| $ly@@45 |p#0@@27| |q#0@@19|) true)) :qid |F2Xsdfy.67:22| :skolemid |1226| :pattern ( (|F2__X__s.__default.mul__F2__X#requires| $ly@@45 |p#0@@27| |q#0@@19|) ($IsGoodHeap $Heap)) )))
(assert  (and (and (and (and (forall ((arg0@@235 T@U) ) (! (= (type (|lambda#45| arg0@@235)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@235)) )) (forall ((arg0@@236 T@U) (arg1@@116 T@U) ) (! (= (type (|lambda#41| arg0@@236 arg1@@116)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@236 arg1@@116)) ))) (forall ((arg0@@237 T@U) (arg1@@117 Int) ) (! (= (type (|lambda#42| arg0@@237 arg1@@117)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@237 arg1@@117)) ))) (forall ((arg0@@238 T@U) ) (! (= (type (|lambda#44| arg0@@238)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@238)) ))) (forall ((arg0@@239 Bool) ) (! (= (type (|lambda#43| arg0@@239)) (MapType0Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@239)) ))))
(assert  (=> true (forall (($ly@@46 T@U) ($Heap@@0 T@U) (|p#0@@28| T@U) (|q#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@46) LayerTypeType) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |p#0@@28|) (SeqType BoxType))) (= (type |q#0@@20|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X#canCall| |p#0@@28| |q#0@@20|) (and (and ($IsGoodHeap $Heap@@0) ($Is |p#0@@28| (TSeq TBool))) ($Is |q#0@@20| (TSeq TBool))))) (and (forall ((|$l#1#i#0| Int) ) (!  (=> (<= (LitInt 0) |$l#1#i#0|) (|F2__X__s.__default.mul__F2__X__digit#canCall| |p#0@@28| |q#0@@20| |$l#1#i#0|)) :qid |unknown.0:0| :skolemid |1227| )) (= (F2__X__s.__default.mul__F2__X ($LS $ly@@46) |p#0@@28| |q#0@@20|) (|Seq#Create| TBool $Heap@@0 (+ (|Seq#Length| |p#0@@28|) (|Seq#Length| |q#0@@20|)) (Lit (AtLayer (|lambda#45| (Handle1 (|lambda#41| |p#0@@28| |q#0@@20|) (|lambda#42| TInt (LitInt 0)) (|lambda#44| (SetRef_to_SetBox (|lambda#43| false))))) $ly@@46)))))) :qid |F2Xsdfy.67:22| :skolemid |1228| :pattern ( (F2__X__s.__default.mul__F2__X ($LS $ly@@46) |p#0@@28| |q#0@@20|) ($IsGoodHeap $Heap@@0)) ))))
(assert  (=> true (forall (($ly@@47 T@U) ($Heap@@1 T@U) (|p#0@@29| T@U) (|q#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@47) LayerTypeType) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |p#0@@29|) (SeqType BoxType))) (= (type |q#0@@21|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X#canCall| (Lit |p#0@@29|) (Lit |q#0@@21|)) (and (and ($IsGoodHeap $Heap@@1) ($Is |p#0@@29| (TSeq TBool))) ($Is |q#0@@21| (TSeq TBool))))) (and (forall ((|$l#3#i#0| Int) ) (!  (=> (<= (LitInt 0) |$l#3#i#0|) (|F2__X__s.__default.mul__F2__X__digit#canCall| (Lit |p#0@@29|) (Lit |q#0@@21|) |$l#3#i#0|)) :qid |unknown.0:0| :skolemid |1229| )) (= (F2__X__s.__default.mul__F2__X ($LS $ly@@47) (Lit |p#0@@29|) (Lit |q#0@@21|)) (|Seq#Create| TBool $Heap@@1 (+ (|Seq#Length| (Lit |p#0@@29|)) (|Seq#Length| (Lit |q#0@@21|))) (Lit (AtLayer (|lambda#45| (Handle1 (|lambda#41| (Lit |p#0@@29|) (Lit |q#0@@21|)) (|lambda#42| TInt (LitInt 0)) (|lambda#44| (SetRef_to_SetBox (|lambda#43| false))))) ($LS $ly@@47))))))) :qid |F2Xsdfy.67:22| :weight 3 :skolemid |1230| :pattern ( (F2__X__s.__default.mul__F2__X ($LS $ly@@47) (Lit |p#0@@29|) (Lit |q#0@@21|)) ($IsGoodHeap $Heap@@1)) ))))
(assert (forall ((arg0@@240 T@U) (arg1@@118 Int) ) (! (= (type (F2__X__s.__default.shift arg0@@240 arg1@@118)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.shift| :pattern ( (F2__X__s.__default.shift arg0@@240 arg1@@118)) )))
(assert  (=> true (forall ((|p#0@@30| T@U) (|t#0| Int) ) (!  (=> (and (= (type |p#0@@30|) (SeqType BoxType)) (or (|F2__X__s.__default.shift#canCall| |p#0@@30| |t#0|) (and ($Is |p#0@@30| (TSeq TBool)) (<= (LitInt 0) |t#0|)))) ($Is (F2__X__s.__default.shift |p#0@@30| |t#0|) (TSeq TBool))) :qid |F2Xsdfy.74:18| :skolemid |1231| :pattern ( (F2__X__s.__default.shift |p#0@@30| |t#0|)) ))))
(assert (forall ((|p#0@@31| T@U) (|t#0@@0| Int) ) (!  (=> (= (type |p#0@@31|) (SeqType BoxType)) (=> (and ($Is |p#0@@31| (TSeq TBool)) (<= (LitInt 0) |t#0@@0|)) (= (|F2__X__s.__default.shift#requires| |p#0@@31| |t#0@@0|) true))) :qid |F2Xsdfy.74:18| :skolemid |1232| :pattern ( (|F2__X__s.__default.shift#requires| |p#0@@31| |t#0@@0|)) )))
(assert  (=> true (forall ((|p#0@@32| T@U) (|t#0@@1| Int) ) (!  (=> (and (= (type |p#0@@32|) (SeqType BoxType)) (or (|F2__X__s.__default.shift#canCall| |p#0@@32| |t#0@@1|) (and ($Is |p#0@@32| (TSeq TBool)) (<= (LitInt 0) |t#0@@1|)))) (and (|Bits__s.__default.zeroes#canCall| |t#0@@1|) (= (F2__X__s.__default.shift |p#0@@32| |t#0@@1|) (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes |t#0@@1|) |p#0@@32|)))) :qid |F2Xsdfy.74:18| :skolemid |1233| :pattern ( (F2__X__s.__default.shift |p#0@@32| |t#0@@1|)) ))))
(assert  (=> true (forall ((|p#0@@33| T@U) (|t#0@@2| Int) ) (!  (=> (and (= (type |p#0@@33|) (SeqType BoxType)) (or (|F2__X__s.__default.shift#canCall| (Lit |p#0@@33|) (LitInt |t#0@@2|)) (and ($Is |p#0@@33| (TSeq TBool)) (<= (LitInt 0) |t#0@@2|)))) (and (|Bits__s.__default.zeroes#canCall| (LitInt |t#0@@2|)) (= (F2__X__s.__default.shift (Lit |p#0@@33|) (LitInt |t#0@@2|)) (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt |t#0@@2|)) |p#0@@33|)))) :qid |F2Xsdfy.74:18| :weight 3 :skolemid |1234| :pattern ( (F2__X__s.__default.shift (Lit |p#0@@33|) (LitInt |t#0@@2|))) ))))
(assert (forall ((arg0@@241 T@U) (arg1@@119 T@U) (arg2@@64 T@U) ) (! (= (type (F2__X__s.__default.mod__F2__X arg0@@241 arg1@@119 arg2@@64)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mod__F2__X| :pattern ( (F2__X__s.__default.mod__F2__X arg0@@241 arg1@@119 arg2@@64)) )))
(assert (forall (($ly@@48 T@U) (|p#0@@34| T@U) (|q#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@48) LayerTypeType) (= (type |p#0@@34|) (SeqType BoxType))) (= (type |q#0@@22|) (SeqType BoxType))) (= (F2__X__s.__default.mod__F2__X ($LS $ly@@48) |p#0@@34| |q#0@@22|) (F2__X__s.__default.mod__F2__X $ly@@48 |p#0@@34| |q#0@@22|))) :qid |F2Xsdfy.79:12| :skolemid |1235| :pattern ( (F2__X__s.__default.mod__F2__X ($LS $ly@@48) |p#0@@34| |q#0@@22|)) )))
(assert (forall (($ly@@49 T@U) (|p#0@@35| T@U) (|q#0@@23| T@U) ) (!  (=> (and (and (= (type $ly@@49) LayerTypeType) (= (type |p#0@@35|) (SeqType BoxType))) (= (type |q#0@@23|) (SeqType BoxType))) (= (F2__X__s.__default.mod__F2__X $ly@@49 |p#0@@35| |q#0@@23|) (F2__X__s.__default.mod__F2__X $LZ |p#0@@35| |q#0@@23|))) :qid |F2Xsdfy.79:12| :skolemid |1236| :pattern ( (F2__X__s.__default.mod__F2__X (AsFuelBottom $ly@@49) |p#0@@35| |q#0@@23|)) )))
(assert  (=> true (forall (($ly@@50 T@U) (|p#0@@36| T@U) (|q#0@@24| T@U) ) (!  (=> (and (and (and (= (type $ly@@50) LayerTypeType) (= (type |p#0@@36|) (SeqType BoxType))) (= (type |q#0@@24|) (SeqType BoxType))) (or (|F2__X__s.__default.mod__F2__X#canCall| |p#0@@36| |q#0@@24|) (and (and ($Is |p#0@@36| (TSeq TBool)) ($Is |q#0@@24| (TSeq TBool))) (> (|Seq#Length| |q#0@@24|) 0)))) (and (= (|Seq#Length| (F2__X__s.__default.mod__F2__X $ly@@50 |p#0@@36| |q#0@@24|)) (- (|Seq#Length| |q#0@@24|) 1)) ($Is (F2__X__s.__default.mod__F2__X $ly@@50 |p#0@@36| |q#0@@24|) (TSeq TBool)))) :qid |F2Xsdfy.79:12| :skolemid |1237| :pattern ( (F2__X__s.__default.mod__F2__X $ly@@50 |p#0@@36| |q#0@@24|)) ))))
(assert (forall (($ly@@51 T@U) (|p#0@@37| T@U) (|q#0@@25| T@U) ) (!  (=> (and (and (and (= (type $ly@@51) LayerTypeType) (= (type |p#0@@37|) (SeqType BoxType))) (= (type |q#0@@25|) (SeqType BoxType))) (and ($Is |p#0@@37| (TSeq TBool)) ($Is |q#0@@25| (TSeq TBool)))) (= (|F2__X__s.__default.mod__F2__X#requires| $ly@@51 |p#0@@37| |q#0@@25|) (> (|Seq#Length| |q#0@@25|) 0))) :qid |F2Xsdfy.79:12| :skolemid |1238| :pattern ( (|F2__X__s.__default.mod__F2__X#requires| $ly@@51 |p#0@@37| |q#0@@25|)) )))
(assert (= (type StartFuel_F2_X_s._default.xor) LayerTypeType))
(assert  (=> true (forall (($ly@@52 T@U) (|p#0@@38| T@U) (|q#0@@26| T@U) ) (!  (=> (and (and (and (= (type $ly@@52) LayerTypeType) (= (type |p#0@@38|) (SeqType BoxType))) (= (type |q#0@@26|) (SeqType BoxType))) (or (|F2__X__s.__default.mod__F2__X#canCall| |p#0@@38| |q#0@@26|) (and (and ($Is |p#0@@38| (TSeq TBool)) ($Is |q#0@@26| (TSeq TBool))) (> (|Seq#Length| |q#0@@26|) 0)))) (and (and (=> (<= (|Seq#Length| |p#0@@38|) (- (|Seq#Length| |q#0@@26|) 1)) (|Bits__s.__default.zeroes#canCall| (- (- (|Seq#Length| |q#0@@26|) 1) (|Seq#Length| |p#0@@38|)))) (=> (< (- (|Seq#Length| |q#0@@26|) 1) (|Seq#Length| |p#0@@38|)) (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1)))) (and (and (|F2__X__s.__default.shift#canCall| |q#0@@26| (- (|Seq#Length| |p#0@@38|) (|Seq#Length| |q#0@@26|))) (|F2__X__s.__default.xor#canCall| |p#0@@38| (F2__X__s.__default.shift |q#0@@26| (- (|Seq#Length| |p#0@@38|) (|Seq#Length| |q#0@@26|))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |p#0@@38| (F2__X__s.__default.shift |q#0@@26| (- (|Seq#Length| |p#0@@38|) (|Seq#Length| |q#0@@26|)))) (- (|Seq#Length| |p#0@@38|) 1)) |q#0@@26|))) (=> (not (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1)) |q#0@@26|))))) (= (F2__X__s.__default.mod__F2__X ($LS $ly@@52) |p#0@@38| |q#0@@26|) (ite (<= (|Seq#Length| |p#0@@38|) (- (|Seq#Length| |q#0@@26|) 1)) (|Seq#Append| |p#0@@38| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (- (|Seq#Length| |q#0@@26|) 1) (|Seq#Length| |p#0@@38|)))) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1)))) (F2__X__s.__default.mod__F2__X $ly@@52 (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |p#0@@38| (F2__X__s.__default.shift |q#0@@26| (- (|Seq#Length| |p#0@@38|) (|Seq#Length| |q#0@@26|)))) (- (|Seq#Length| |p#0@@38|) 1)) |q#0@@26|) (F2__X__s.__default.mod__F2__X $ly@@52 (|Seq#Take| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1)) |q#0@@26|)))))) :qid |F2Xsdfy.79:12| :skolemid |1239| :pattern ( (F2__X__s.__default.mod__F2__X ($LS $ly@@52) |p#0@@38| |q#0@@26|)) ))))
(assert  (=> true (forall (($ly@@53 T@U) (|p#0@@39| T@U) (|q#0@@27| T@U) ) (!  (=> (and (and (and (= (type $ly@@53) LayerTypeType) (= (type |p#0@@39|) (SeqType BoxType))) (= (type |q#0@@27|) (SeqType BoxType))) (or (|F2__X__s.__default.mod__F2__X#canCall| (Lit |p#0@@39|) |q#0@@27|) (and (and ($Is |p#0@@39| (TSeq TBool)) ($Is |q#0@@27| (TSeq TBool))) (> (|Seq#Length| |q#0@@27|) 0)))) (and (and (=> (<= (|Seq#Length| (Lit |p#0@@39|)) (- (|Seq#Length| |q#0@@27|) 1)) (|Bits__s.__default.zeroes#canCall| (- (- (|Seq#Length| |q#0@@27|) 1) (|Seq#Length| (Lit |p#0@@39|))))) (=> (< (- (|Seq#Length| |q#0@@27|) 1) (|Seq#Length| (Lit |p#0@@39|))) (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1)))) (and (and (|F2__X__s.__default.shift#canCall| |q#0@@27| (- (|Seq#Length| (Lit |p#0@@39|)) (|Seq#Length| |q#0@@27|))) (|F2__X__s.__default.xor#canCall| (Lit |p#0@@39|) (F2__X__s.__default.shift |q#0@@27| (- (|Seq#Length| (Lit |p#0@@39|)) (|Seq#Length| |q#0@@27|))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Lit |p#0@@39|) (F2__X__s.__default.shift |q#0@@27| (- (|Seq#Length| (Lit |p#0@@39|)) (|Seq#Length| |q#0@@27|)))) (- (|Seq#Length| (Lit |p#0@@39|)) 1)) |q#0@@27|))) (=> (not (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1)) |q#0@@27|))))) (= (F2__X__s.__default.mod__F2__X ($LS $ly@@53) (Lit |p#0@@39|) |q#0@@27|) (ite (<= (|Seq#Length| (Lit |p#0@@39|)) (- (|Seq#Length| |q#0@@27|) 1)) (|Seq#Append| |p#0@@39| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (- (|Seq#Length| |q#0@@27|) 1) (|Seq#Length| (Lit |p#0@@39|))))) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1)))) (F2__X__s.__default.mod__F2__X ($LS $ly@@53) (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Lit |p#0@@39|) (F2__X__s.__default.shift |q#0@@27| (- (|Seq#Length| (Lit |p#0@@39|)) (|Seq#Length| |q#0@@27|)))) (- (|Seq#Length| (Lit |p#0@@39|)) 1)) |q#0@@27|) (F2__X__s.__default.mod__F2__X ($LS $ly@@53) (|Seq#Take| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1)) |q#0@@27|)))))) :qid |F2Xsdfy.79:12| :weight 3 :skolemid |1240| :pattern ( (F2__X__s.__default.mod__F2__X ($LS $ly@@53) (Lit |p#0@@39|) |q#0@@27|)) ))))
(assert  (=> true (forall (($ly@@54 T@U) (|p#0@@40| T@U) (|q#0@@28| T@U) ) (!  (=> (and (and (and (= (type $ly@@54) LayerTypeType) (= (type |p#0@@40|) (SeqType BoxType))) (= (type |q#0@@28|) (SeqType BoxType))) (or (|F2__X__s.__default.mod__F2__X#canCall| (Lit |p#0@@40|) (Lit |q#0@@28|)) (and (and ($Is |p#0@@40| (TSeq TBool)) ($Is |q#0@@28| (TSeq TBool))) (> (|Seq#Length| (Lit |q#0@@28|)) 0)))) (and (and (=> (<= (|Seq#Length| (Lit |p#0@@40|)) (- (|Seq#Length| (Lit |q#0@@28|)) 1)) (|Bits__s.__default.zeroes#canCall| (- (- (|Seq#Length| (Lit |q#0@@28|)) 1) (|Seq#Length| (Lit |p#0@@40|))))) (=> (< (- (|Seq#Length| (Lit |q#0@@28|)) 1) (|Seq#Length| (Lit |p#0@@40|))) (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1)))) (and (and (|F2__X__s.__default.shift#canCall| (Lit |q#0@@28|) (- (|Seq#Length| (Lit |p#0@@40|)) (|Seq#Length| (Lit |q#0@@28|)))) (|F2__X__s.__default.xor#canCall| (Lit |p#0@@40|) (F2__X__s.__default.shift (Lit |q#0@@28|) (- (|Seq#Length| (Lit |p#0@@40|)) (|Seq#Length| (Lit |q#0@@28|)))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Lit |p#0@@40|) (F2__X__s.__default.shift (Lit |q#0@@28|) (- (|Seq#Length| (Lit |p#0@@40|)) (|Seq#Length| (Lit |q#0@@28|))))) (- (|Seq#Length| (Lit |p#0@@40|)) 1)) (Lit |q#0@@28|)))) (=> (not (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1)) (Lit |q#0@@28|)))))) (= (F2__X__s.__default.mod__F2__X ($LS $ly@@54) (Lit |p#0@@40|) (Lit |q#0@@28|)) (ite (<= (|Seq#Length| (Lit |p#0@@40|)) (- (|Seq#Length| (Lit |q#0@@28|)) 1)) (|Seq#Append| |p#0@@40| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (- (|Seq#Length| (Lit |q#0@@28|)) 1) (|Seq#Length| (Lit |p#0@@40|))))) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1)))) (F2__X__s.__default.mod__F2__X ($LS $ly@@54) (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Lit |p#0@@40|) (F2__X__s.__default.shift (Lit |q#0@@28|) (- (|Seq#Length| (Lit |p#0@@40|)) (|Seq#Length| (Lit |q#0@@28|))))) (- (|Seq#Length| (Lit |p#0@@40|)) 1)) (Lit |q#0@@28|)) (F2__X__s.__default.mod__F2__X ($LS $ly@@54) (|Seq#Take| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1)) (Lit |q#0@@28|))))))) :qid |F2Xsdfy.79:12| :weight 3 :skolemid |1241| :pattern ( (F2__X__s.__default.mod__F2__X ($LS $ly@@54) (Lit |p#0@@40|) (Lit |q#0@@28|))) ))))
(assert (forall ((arg0@@242 T@U) (arg1@@120 T@U) ) (! (= (type (F2__X__s.__default.mm__crc32__u8 arg0@@242 arg1@@120)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__crc32__u8| :pattern ( (F2__X__s.__default.mm__crc32__u8 arg0@@242 arg1@@120)) )))
(assert  (=> true (forall ((|acc#0| T@U) (|b#0@@5| T@U) ) (!  (=> (and (and (= (type |acc#0|) (SeqType BoxType)) (= (type |b#0@@5|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u8#canCall| |acc#0| |b#0@@5|) (and (and ($Is |acc#0| (TSeq TBool)) ($Is |b#0@@5| (TSeq TBool))) (and (= (|Seq#Length| |acc#0|) (LitInt 32)) (= (|Seq#Length| |b#0@@5|) (LitInt 8)))))) ($Is (F2__X__s.__default.mm__crc32__u8 |acc#0| |b#0@@5|) (TSeq TBool))) :qid |F2Xsdfy.94:24| :skolemid |1242| :pattern ( (F2__X__s.__default.mm__crc32__u8 |acc#0| |b#0@@5|)) ))))
(assert (forall ((|acc#0@@0| T@U) (|b#0@@6| T@U) ) (!  (=> (and (and (= (type |acc#0@@0|) (SeqType BoxType)) (= (type |b#0@@6|) (SeqType BoxType))) (and ($Is |acc#0@@0| (TSeq TBool)) ($Is |b#0@@6| (TSeq TBool)))) (= (|F2__X__s.__default.mm__crc32__u8#requires| |acc#0@@0| |b#0@@6|)  (and (= (|Seq#Length| |acc#0@@0|) (LitInt 32)) (= (|Seq#Length| |b#0@@6|) (LitInt 8))))) :qid |F2Xsdfy.94:24| :skolemid |1243| :pattern ( (|F2__X__s.__default.mm__crc32__u8#requires| |acc#0@@0| |b#0@@6|)) )))
(assert (= (type StartFuel_F2_X_s._default.reverse) LayerTypeType))
(assert  (=> true (forall ((|acc#0@@1| T@U) (|b#0@@7| T@U) ) (!  (=> (and (and (= (type |acc#0@@1|) (SeqType BoxType)) (= (type |b#0@@7|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u8#canCall| |acc#0@@1| |b#0@@7|) (and (and ($Is |acc#0@@1| (TSeq TBool)) ($Is |b#0@@7| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@1|) (LitInt 32)) (= (|Seq#Length| |b#0@@7|) (LitInt 8)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| |b#0@@7|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@7|) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| |acc#0@@1|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@7|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@7|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@7|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u8 |acc#0@@1| |b#0@@7|) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@7|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.94:24| :skolemid |1244| :pattern ( (F2__X__s.__default.mm__crc32__u8 |acc#0@@1| |b#0@@7|)) ))))
(assert  (=> true (forall ((|acc#0@@2| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (= (type |acc#0@@2|) (SeqType BoxType)) (= (type |b#0@@8|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u8#canCall| (Lit |acc#0@@2|) (Lit |b#0@@8|)) (and (and ($Is |acc#0@@2| (TSeq TBool)) ($Is |b#0@@8| (TSeq TBool))) (and (= (|Seq#Length| (Lit |acc#0@@2|)) (LitInt 32)) (= (|Seq#Length| (Lit |b#0@@8|)) (LitInt 8)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| (Lit |b#0@@8|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@8|)) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| (Lit |acc#0@@2|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@8|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@8|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@8|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u8 (Lit |acc#0@@2|) (Lit |b#0@@8|)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@8|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.94:24| :weight 3 :skolemid |1245| :pattern ( (F2__X__s.__default.mm__crc32__u8 (Lit |acc#0@@2|) (Lit |b#0@@8|))) ))))
(assert  (=> true (forall ((|acc#0@@3| Int) (|b#0@@9| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_crc32_u8#canCall| |acc#0@@3| |b#0@@9|) (and (and (<= (LitInt 0) |acc#0@@3|) (< |acc#0@@3| 4294967296)) (and (<= (LitInt 0) |b#0@@9|) (< |b#0@@9| 256)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_crc32_u8 |acc#0@@3| |b#0@@9|) (LitInt 32)) (F2__X__s.__default.mm__crc32__u8 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |acc#0@@3| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@9| (LitInt 8)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u8 |acc#0@@3| |b#0@@9|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u8 |acc#0@@3| |b#0@@9|) 4294967296)))) :qid |F2Xsdfy.105:95| :skolemid |1246| :pattern ( (F2__X__s.__default.intrinsic_mm_crc32_u8 |acc#0@@3| |b#0@@9|)) ))))
(assert (forall ((|acc#0@@4| Int) (|b#0@@10| Int) ) (!  (=> (and (and (<= (LitInt 0) |acc#0@@4|) (< |acc#0@@4| 4294967296)) (and (<= (LitInt 0) |b#0@@10|) (< |b#0@@10| 256))) (= (|F2__X__s.__default.intrinsic_mm_crc32_u8#requires| |acc#0@@4| |b#0@@10|) true)) :qid |F2Xsdfy.105:95| :skolemid |1247| :pattern ( (|F2__X__s.__default.intrinsic_mm_crc32_u8#requires| |acc#0@@4| |b#0@@10|)) )))
(assert (forall ((arg0@@243 T@U) (arg1@@121 T@U) ) (! (= (type (F2__X__s.__default.mm__crc32__u16 arg0@@243 arg1@@121)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__crc32__u16| :pattern ( (F2__X__s.__default.mm__crc32__u16 arg0@@243 arg1@@121)) )))
(assert  (=> true (forall ((|acc#0@@5| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (= (type |acc#0@@5|) (SeqType BoxType)) (= (type |b#0@@11|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u16#canCall| |acc#0@@5| |b#0@@11|) (and (and ($Is |acc#0@@5| (TSeq TBool)) ($Is |b#0@@11| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@5|) (LitInt 32)) (= (|Seq#Length| |b#0@@11|) (LitInt 16)))))) ($Is (F2__X__s.__default.mm__crc32__u16 |acc#0@@5| |b#0@@11|) (TSeq TBool))) :qid |F2Xsdfy.113:25| :skolemid |1248| :pattern ( (F2__X__s.__default.mm__crc32__u16 |acc#0@@5| |b#0@@11|)) ))))
(assert (forall ((|acc#0@@6| T@U) (|b#0@@12| T@U) ) (!  (=> (and (and (= (type |acc#0@@6|) (SeqType BoxType)) (= (type |b#0@@12|) (SeqType BoxType))) (and ($Is |acc#0@@6| (TSeq TBool)) ($Is |b#0@@12| (TSeq TBool)))) (= (|F2__X__s.__default.mm__crc32__u16#requires| |acc#0@@6| |b#0@@12|)  (and (= (|Seq#Length| |acc#0@@6|) (LitInt 32)) (= (|Seq#Length| |b#0@@12|) (LitInt 16))))) :qid |F2Xsdfy.113:25| :skolemid |1249| :pattern ( (|F2__X__s.__default.mm__crc32__u16#requires| |acc#0@@6| |b#0@@12|)) )))
(assert  (=> true (forall ((|acc#0@@7| T@U) (|b#0@@13| T@U) ) (!  (=> (and (and (= (type |acc#0@@7|) (SeqType BoxType)) (= (type |b#0@@13|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u16#canCall| |acc#0@@7| |b#0@@13|) (and (and ($Is |acc#0@@7| (TSeq TBool)) ($Is |b#0@@13| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@7|) (LitInt 32)) (= (|Seq#Length| |b#0@@13|) (LitInt 16)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| |b#0@@13|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@13|) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| |acc#0@@7|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@13|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@13|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@13|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u16 |acc#0@@7| |b#0@@13|) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@13|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.113:25| :skolemid |1250| :pattern ( (F2__X__s.__default.mm__crc32__u16 |acc#0@@7| |b#0@@13|)) ))))
(assert  (=> true (forall ((|acc#0@@8| T@U) (|b#0@@14| T@U) ) (!  (=> (and (and (= (type |acc#0@@8|) (SeqType BoxType)) (= (type |b#0@@14|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u16#canCall| (Lit |acc#0@@8|) (Lit |b#0@@14|)) (and (and ($Is |acc#0@@8| (TSeq TBool)) ($Is |b#0@@14| (TSeq TBool))) (and (= (|Seq#Length| (Lit |acc#0@@8|)) (LitInt 32)) (= (|Seq#Length| (Lit |b#0@@14|)) (LitInt 16)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| (Lit |b#0@@14|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@14|)) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| (Lit |acc#0@@8|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@14|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@14|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@14|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u16 (Lit |acc#0@@8|) (Lit |b#0@@14|)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@14|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.113:25| :weight 3 :skolemid |1251| :pattern ( (F2__X__s.__default.mm__crc32__u16 (Lit |acc#0@@8|) (Lit |b#0@@14|))) ))))
(assert  (=> true (forall ((|acc#0@@9| Int) (|b#0@@15| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_crc32_u16#canCall| |acc#0@@9| |b#0@@15|) (and (and (<= (LitInt 0) |acc#0@@9|) (< |acc#0@@9| 4294967296)) (and (<= (LitInt 0) |b#0@@15|) (< |b#0@@15| 65536)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_crc32_u16 |acc#0@@9| |b#0@@15|) (LitInt 32)) (F2__X__s.__default.mm__crc32__u16 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |acc#0@@9| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@15| (LitInt 16)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u16 |acc#0@@9| |b#0@@15|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u16 |acc#0@@9| |b#0@@15|) 4294967296)))) :qid |F2Xsdfy.124:97| :skolemid |1252| :pattern ( (F2__X__s.__default.intrinsic_mm_crc32_u16 |acc#0@@9| |b#0@@15|)) ))))
(assert (forall ((|acc#0@@10| Int) (|b#0@@16| Int) ) (!  (=> (and (and (<= (LitInt 0) |acc#0@@10|) (< |acc#0@@10| 4294967296)) (and (<= (LitInt 0) |b#0@@16|) (< |b#0@@16| 65536))) (= (|F2__X__s.__default.intrinsic_mm_crc32_u16#requires| |acc#0@@10| |b#0@@16|) true)) :qid |F2Xsdfy.124:97| :skolemid |1253| :pattern ( (|F2__X__s.__default.intrinsic_mm_crc32_u16#requires| |acc#0@@10| |b#0@@16|)) )))
(assert (forall ((arg0@@244 T@U) (arg1@@122 T@U) ) (! (= (type (F2__X__s.__default.mm__crc32__u32 arg0@@244 arg1@@122)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__crc32__u32| :pattern ( (F2__X__s.__default.mm__crc32__u32 arg0@@244 arg1@@122)) )))
(assert  (=> true (forall ((|acc#0@@11| T@U) (|b#0@@17| T@U) ) (!  (=> (and (and (= (type |acc#0@@11|) (SeqType BoxType)) (= (type |b#0@@17|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u32#canCall| |acc#0@@11| |b#0@@17|) (and (and ($Is |acc#0@@11| (TSeq TBool)) ($Is |b#0@@17| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@11|) (LitInt 32)) (= (|Seq#Length| |b#0@@17|) (LitInt 32)))))) ($Is (F2__X__s.__default.mm__crc32__u32 |acc#0@@11| |b#0@@17|) (TSeq TBool))) :qid |F2Xsdfy.132:25| :skolemid |1254| :pattern ( (F2__X__s.__default.mm__crc32__u32 |acc#0@@11| |b#0@@17|)) ))))
(assert (forall ((|acc#0@@12| T@U) (|b#0@@18| T@U) ) (!  (=> (and (and (= (type |acc#0@@12|) (SeqType BoxType)) (= (type |b#0@@18|) (SeqType BoxType))) (and ($Is |acc#0@@12| (TSeq TBool)) ($Is |b#0@@18| (TSeq TBool)))) (= (|F2__X__s.__default.mm__crc32__u32#requires| |acc#0@@12| |b#0@@18|)  (and (= (|Seq#Length| |acc#0@@12|) (LitInt 32)) (= (|Seq#Length| |b#0@@18|) (LitInt 32))))) :qid |F2Xsdfy.132:25| :skolemid |1255| :pattern ( (|F2__X__s.__default.mm__crc32__u32#requires| |acc#0@@12| |b#0@@18|)) )))
(assert  (=> true (forall ((|acc#0@@13| T@U) (|b#0@@19| T@U) ) (!  (=> (and (and (= (type |acc#0@@13|) (SeqType BoxType)) (= (type |b#0@@19|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u32#canCall| |acc#0@@13| |b#0@@19|) (and (and ($Is |acc#0@@13| (TSeq TBool)) ($Is |b#0@@19| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@13|) (LitInt 32)) (= (|Seq#Length| |b#0@@19|) (LitInt 32)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| |b#0@@19|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@19|) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| |acc#0@@13|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@19|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@19|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@19|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u32 |acc#0@@13| |b#0@@19|) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@19|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.132:25| :skolemid |1256| :pattern ( (F2__X__s.__default.mm__crc32__u32 |acc#0@@13| |b#0@@19|)) ))))
(assert  (=> true (forall ((|acc#0@@14| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (= (type |acc#0@@14|) (SeqType BoxType)) (= (type |b#0@@20|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u32#canCall| (Lit |acc#0@@14|) (Lit |b#0@@20|)) (and (and ($Is |acc#0@@14| (TSeq TBool)) ($Is |b#0@@20| (TSeq TBool))) (and (= (|Seq#Length| (Lit |acc#0@@14|)) (LitInt 32)) (= (|Seq#Length| (Lit |b#0@@20|)) (LitInt 32)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| (Lit |b#0@@20|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@20|)) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| (Lit |acc#0@@14|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@20|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@20|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@20|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u32 (Lit |acc#0@@14|) (Lit |b#0@@20|)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@20|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.132:25| :weight 3 :skolemid |1257| :pattern ( (F2__X__s.__default.mm__crc32__u32 (Lit |acc#0@@14|) (Lit |b#0@@20|))) ))))
(assert  (=> true (forall ((|acc#0@@15| Int) (|b#0@@21| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_crc32_u32#canCall| |acc#0@@15| |b#0@@21|) (and (and (<= (LitInt 0) |acc#0@@15|) (< |acc#0@@15| 4294967296)) (and (<= (LitInt 0) |b#0@@21|) (< |b#0@@21| 4294967296)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_crc32_u32 |acc#0@@15| |b#0@@21|) (LitInt 32)) (F2__X__s.__default.mm__crc32__u32 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |acc#0@@15| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@21| (LitInt 32)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u32 |acc#0@@15| |b#0@@21|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u32 |acc#0@@15| |b#0@@21|) 4294967296)))) :qid |F2Xsdfy.143:97| :skolemid |1258| :pattern ( (F2__X__s.__default.intrinsic_mm_crc32_u32 |acc#0@@15| |b#0@@21|)) ))))
(assert (forall ((|acc#0@@16| Int) (|b#0@@22| Int) ) (!  (=> (and (and (<= (LitInt 0) |acc#0@@16|) (< |acc#0@@16| 4294967296)) (and (<= (LitInt 0) |b#0@@22|) (< |b#0@@22| 4294967296))) (= (|F2__X__s.__default.intrinsic_mm_crc32_u32#requires| |acc#0@@16| |b#0@@22|) true)) :qid |F2Xsdfy.143:97| :skolemid |1259| :pattern ( (|F2__X__s.__default.intrinsic_mm_crc32_u32#requires| |acc#0@@16| |b#0@@22|)) )))
(assert (forall ((arg0@@245 T@U) (arg1@@123 T@U) ) (! (= (type (F2__X__s.__default.mm__crc32__u64 arg0@@245 arg1@@123)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__crc32__u64| :pattern ( (F2__X__s.__default.mm__crc32__u64 arg0@@245 arg1@@123)) )))
(assert  (=> true (forall ((|acc#0@@17| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (= (type |acc#0@@17|) (SeqType BoxType)) (= (type |b#0@@23|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u64#canCall| |acc#0@@17| |b#0@@23|) (and (and ($Is |acc#0@@17| (TSeq TBool)) ($Is |b#0@@23| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@17|) (LitInt 32)) (= (|Seq#Length| |b#0@@23|) (LitInt 64)))))) ($Is (F2__X__s.__default.mm__crc32__u64 |acc#0@@17| |b#0@@23|) (TSeq TBool))) :qid |F2Xsdfy.151:25| :skolemid |1260| :pattern ( (F2__X__s.__default.mm__crc32__u64 |acc#0@@17| |b#0@@23|)) ))))
(assert (forall ((|acc#0@@18| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (= (type |acc#0@@18|) (SeqType BoxType)) (= (type |b#0@@24|) (SeqType BoxType))) (and ($Is |acc#0@@18| (TSeq TBool)) ($Is |b#0@@24| (TSeq TBool)))) (= (|F2__X__s.__default.mm__crc32__u64#requires| |acc#0@@18| |b#0@@24|)  (and (= (|Seq#Length| |acc#0@@18|) (LitInt 32)) (= (|Seq#Length| |b#0@@24|) (LitInt 64))))) :qid |F2Xsdfy.151:25| :skolemid |1261| :pattern ( (|F2__X__s.__default.mm__crc32__u64#requires| |acc#0@@18| |b#0@@24|)) )))
(assert  (=> true (forall ((|acc#0@@19| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (= (type |acc#0@@19|) (SeqType BoxType)) (= (type |b#0@@25|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u64#canCall| |acc#0@@19| |b#0@@25|) (and (and ($Is |acc#0@@19| (TSeq TBool)) ($Is |b#0@@25| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@19|) (LitInt 32)) (= (|Seq#Length| |b#0@@25|) (LitInt 64)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| |b#0@@25|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@25|) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| |acc#0@@19|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@19|) (LitInt 64)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@25|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@19|) (LitInt 64)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@25|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@19|) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@25|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@19|) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u64 |acc#0@@19| |b#0@@25|) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@25|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@19|) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.151:25| :skolemid |1262| :pattern ( (F2__X__s.__default.mm__crc32__u64 |acc#0@@19| |b#0@@25|)) ))))
(assert  (=> true (forall ((|acc#0@@20| T@U) (|b#0@@26| T@U) ) (!  (=> (and (and (= (type |acc#0@@20|) (SeqType BoxType)) (= (type |b#0@@26|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u64#canCall| (Lit |acc#0@@20|) (Lit |b#0@@26|)) (and (and ($Is |acc#0@@20| (TSeq TBool)) ($Is |b#0@@26| (TSeq TBool))) (and (= (|Seq#Length| (Lit |acc#0@@20|)) (LitInt 32)) (= (|Seq#Length| (Lit |b#0@@26|)) (LitInt 64)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| (Lit |b#0@@26|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@26|)) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| (Lit |acc#0@@20|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@20|)) (LitInt 64)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@26|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@20|)) (LitInt 64)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@26|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@20|)) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@26|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@20|)) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u64 (Lit |acc#0@@20|) (Lit |b#0@@26|)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@26|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@20|)) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.151:25| :weight 3 :skolemid |1263| :pattern ( (F2__X__s.__default.mm__crc32__u64 (Lit |acc#0@@20|) (Lit |b#0@@26|))) ))))
(assert  (=> true (forall ((|acc#0@@21| Int) (|b#0@@27| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_crc32_u64#canCall| |acc#0@@21| |b#0@@27|) (and (and (<= (LitInt 0) |acc#0@@21|) (< |acc#0@@21| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@27|) (< |b#0@@27| 18446744073709551616)))) (and (and (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@21| |b#0@@27|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@21| |b#0@@27|) 4294967296)) (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@21| |b#0@@27|) (LitInt 32)) (F2__X__s.__default.mm__crc32__u64 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |acc#0@@21| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@27| (LitInt 64))))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@21| |b#0@@27|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@21| |b#0@@27|) 18446744073709551616)))) :qid |F2Xsdfy.163:97| :skolemid |1264| :pattern ( (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@21| |b#0@@27|)) ))))
(assert (forall ((|acc#0@@22| Int) (|b#0@@28| Int) ) (!  (=> (and (and (<= (LitInt 0) |acc#0@@22|) (< |acc#0@@22| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@28|) (< |b#0@@28| 18446744073709551616))) (= (|F2__X__s.__default.intrinsic_mm_crc32_u64#requires| |acc#0@@22| |b#0@@28|) true)) :qid |F2Xsdfy.163:97| :skolemid |1265| :pattern ( (|F2__X__s.__default.intrinsic_mm_crc32_u64#requires| |acc#0@@22| |b#0@@28|)) )))
(assert (forall ((arg0@@246 T@U) (arg1@@124 T@U) ) (! (= (type (F2__X__s.__default.mm__clmulepi64__si128__0 arg0@@246 arg1@@124)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__clmulepi64__si128__0| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__0 arg0@@246 arg1@@124)) )))
(assert  (=> true (forall ((|a#0@@17| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (= (type |a#0@@17|) (SeqType BoxType)) (= (type |b#0@@29|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__0#canCall| |a#0@@17| |b#0@@29|) (and (and ($Is |a#0@@17| (TSeq TBool)) ($Is |b#0@@29| (TSeq TBool))) (and (= (|Seq#Length| |a#0@@17|) (LitInt 128)) (= (|Seq#Length| |b#0@@29|) (LitInt 128)))))) ($Is (F2__X__s.__default.mm__clmulepi64__si128__0 |a#0@@17| |b#0@@29|) (TSeq TBool))) :qid |F2Xsdfy.174:34| :skolemid |1266| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__0 |a#0@@17| |b#0@@29|)) ))))
(assert (forall ((|a#0@@18| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (= (type |a#0@@18|) (SeqType BoxType)) (= (type |b#0@@30|) (SeqType BoxType))) (and ($Is |a#0@@18| (TSeq TBool)) ($Is |b#0@@30| (TSeq TBool)))) (= (|F2__X__s.__default.mm__clmulepi64__si128__0#requires| |a#0@@18| |b#0@@30|)  (and (= (|Seq#Length| |a#0@@18|) (LitInt 128)) (= (|Seq#Length| |b#0@@30|) (LitInt 128))))) :qid |F2Xsdfy.174:34| :skolemid |1267| :pattern ( (|F2__X__s.__default.mm__clmulepi64__si128__0#requires| |a#0@@18| |b#0@@30|)) )))
(assert (= (type StartFuel_F2_X_s._default.mul_F2_X) LayerTypeType))
(assert  (=> true (forall ((|a#0@@19| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (= (type |a#0@@19|) (SeqType BoxType)) (= (type |b#0@@31|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__0#canCall| |a#0@@19| |b#0@@31|) (and (and ($Is |a#0@@19| (TSeq TBool)) ($Is |b#0@@31| (TSeq TBool))) (and (= (|Seq#Length| |a#0@@19|) (LitInt 128)) (= (|Seq#Length| |b#0@@31|) (LitInt 128)))))) (and (let ((|tmp1#0| (|Seq#Drop| (|Seq#Take| |a#0@@19| (LitInt 64)) (LitInt 0)))) (let ((|tmp2#0| (|Seq#Drop| (|Seq#Take| |b#0@@31| (LitInt 64)) (LitInt 0)))) (|F2__X__s.__default.mul__F2__X#canCall| |tmp1#0| |tmp2#0|))) (= (F2__X__s.__default.mm__clmulepi64__si128__0 |a#0@@19| |b#0@@31|) (let ((|tmp1#0@@0| (|Seq#Drop| (|Seq#Take| |a#0@@19| (LitInt 64)) (LitInt 0)))) (let ((|tmp2#0@@0| (|Seq#Drop| (|Seq#Take| |b#0@@31| (LitInt 64)) (LitInt 0)))) (F2__X__s.__default.mul__F2__X StartFuel_F2_X_s._default.mul_F2_X |tmp1#0@@0| |tmp2#0@@0|)))))) :qid |F2Xsdfy.174:34| :skolemid |1268| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__0 |a#0@@19| |b#0@@31|)) ))))
(assert  (=> true (forall ((|a#0@@20| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (= (type |a#0@@20|) (SeqType BoxType)) (= (type |b#0@@32|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__0#canCall| (Lit |a#0@@20|) (Lit |b#0@@32|)) (and (and ($Is |a#0@@20| (TSeq TBool)) ($Is |b#0@@32| (TSeq TBool))) (and (= (|Seq#Length| (Lit |a#0@@20|)) (LitInt 128)) (= (|Seq#Length| (Lit |b#0@@32|)) (LitInt 128)))))) (and (let ((|tmp1#1| (Lit (|Seq#Drop| (|Seq#Take| (Lit |a#0@@20|) (LitInt 64)) (LitInt 0))))) (let ((|tmp2#1| (Lit (|Seq#Drop| (|Seq#Take| (Lit |b#0@@32|) (LitInt 64)) (LitInt 0))))) (|F2__X__s.__default.mul__F2__X#canCall| |tmp1#1| |tmp2#1|))) (= (F2__X__s.__default.mm__clmulepi64__si128__0 (Lit |a#0@@20|) (Lit |b#0@@32|)) (let ((|tmp1#1@@0| (Lit (|Seq#Drop| (|Seq#Take| (Lit |a#0@@20|) (LitInt 64)) (LitInt 0))))) (let ((|tmp2#1@@0| (Lit (|Seq#Drop| (|Seq#Take| (Lit |b#0@@32|) (LitInt 64)) (LitInt 0))))) (F2__X__s.__default.mul__F2__X StartFuel_F2_X_s._default.mul_F2_X |tmp1#1@@0| |tmp2#1@@0|)))))) :qid |F2Xsdfy.174:34| :weight 3 :skolemid |1269| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__0 (Lit |a#0@@20|) (Lit |b#0@@32|))) ))))
(assert  (=> true (forall ((|a#0@@21| Int) (|b#0@@33| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#canCall| |a#0@@21| |b#0@@33|) (and (and (<= (LitInt 0) |a#0@@21|) (< |a#0@@21| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@33|) (< |b#0@@33| 340282366920938463463374607431768211456)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 |a#0@@21| |b#0@@33|) (LitInt 128)) (F2__X__s.__default.mm__clmulepi64__si128__0 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@21| (LitInt 128)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@33| (LitInt 128)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 |a#0@@21| |b#0@@33|)) (< (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 |a#0@@21| |b#0@@33|) 340282366920938463463374607431768211456)))) :qid |F2Xsdfy.183:115| :skolemid |1270| :pattern ( (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 |a#0@@21| |b#0@@33|)) ))))
(assert (forall ((|a#0@@22| Int) (|b#0@@34| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@22|) (< |a#0@@22| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@34|) (< |b#0@@34| 340282366920938463463374607431768211456))) (= (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#requires| |a#0@@22| |b#0@@34|) true)) :qid |F2Xsdfy.183:115| :skolemid |1271| :pattern ( (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#requires| |a#0@@22| |b#0@@34|)) )))
(assert (forall ((arg0@@247 T@U) (arg1@@125 T@U) ) (! (= (type (F2__X__s.__default.mm__clmulepi64__si128__16 arg0@@247 arg1@@125)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__clmulepi64__si128__16| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__16 arg0@@247 arg1@@125)) )))
(assert  (=> true (forall ((|a#0@@23| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (= (type |a#0@@23|) (SeqType BoxType)) (= (type |b#0@@35|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__16#canCall| |a#0@@23| |b#0@@35|) (and (and ($Is |a#0@@23| (TSeq TBool)) ($Is |b#0@@35| (TSeq TBool))) (and (= (|Seq#Length| |a#0@@23|) (LitInt 128)) (= (|Seq#Length| |b#0@@35|) (LitInt 128)))))) ($Is (F2__X__s.__default.mm__clmulepi64__si128__16 |a#0@@23| |b#0@@35|) (TSeq TBool))) :qid |F2Xsdfy.190:35| :skolemid |1272| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__16 |a#0@@23| |b#0@@35|)) ))))
(assert (forall ((|a#0@@24| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (= (type |a#0@@24|) (SeqType BoxType)) (= (type |b#0@@36|) (SeqType BoxType))) (and ($Is |a#0@@24| (TSeq TBool)) ($Is |b#0@@36| (TSeq TBool)))) (= (|F2__X__s.__default.mm__clmulepi64__si128__16#requires| |a#0@@24| |b#0@@36|)  (and (= (|Seq#Length| |a#0@@24|) (LitInt 128)) (= (|Seq#Length| |b#0@@36|) (LitInt 128))))) :qid |F2Xsdfy.190:35| :skolemid |1273| :pattern ( (|F2__X__s.__default.mm__clmulepi64__si128__16#requires| |a#0@@24| |b#0@@36|)) )))
(assert  (=> true (forall ((|a#0@@25| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (= (type |a#0@@25|) (SeqType BoxType)) (= (type |b#0@@37|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__16#canCall| |a#0@@25| |b#0@@37|) (and (and ($Is |a#0@@25| (TSeq TBool)) ($Is |b#0@@37| (TSeq TBool))) (and (= (|Seq#Length| |a#0@@25|) (LitInt 128)) (= (|Seq#Length| |b#0@@37|) (LitInt 128)))))) (and (let ((|tmp1#0@@1| (|Seq#Drop| (|Seq#Take| |a#0@@25| (LitInt 64)) (LitInt 0)))) (let ((|tmp2#0@@1| (|Seq#Drop| (|Seq#Take| |b#0@@37| (LitInt 128)) (LitInt 64)))) (|F2__X__s.__default.mul__F2__X#canCall| |tmp1#0@@1| |tmp2#0@@1|))) (= (F2__X__s.__default.mm__clmulepi64__si128__16 |a#0@@25| |b#0@@37|) (let ((|tmp1#0@@2| (|Seq#Drop| (|Seq#Take| |a#0@@25| (LitInt 64)) (LitInt 0)))) (let ((|tmp2#0@@2| (|Seq#Drop| (|Seq#Take| |b#0@@37| (LitInt 128)) (LitInt 64)))) (F2__X__s.__default.mul__F2__X StartFuel_F2_X_s._default.mul_F2_X |tmp1#0@@2| |tmp2#0@@2|)))))) :qid |F2Xsdfy.190:35| :skolemid |1274| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__16 |a#0@@25| |b#0@@37|)) ))))
(assert  (=> true (forall ((|a#0@@26| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (= (type |a#0@@26|) (SeqType BoxType)) (= (type |b#0@@38|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__16#canCall| (Lit |a#0@@26|) (Lit |b#0@@38|)) (and (and ($Is |a#0@@26| (TSeq TBool)) ($Is |b#0@@38| (TSeq TBool))) (and (= (|Seq#Length| (Lit |a#0@@26|)) (LitInt 128)) (= (|Seq#Length| (Lit |b#0@@38|)) (LitInt 128)))))) (and (let ((|tmp1#1@@1| (Lit (|Seq#Drop| (|Seq#Take| (Lit |a#0@@26|) (LitInt 64)) (LitInt 0))))) (let ((|tmp2#1@@1| (Lit (|Seq#Drop| (|Seq#Take| (Lit |b#0@@38|) (LitInt 128)) (LitInt 64))))) (|F2__X__s.__default.mul__F2__X#canCall| |tmp1#1@@1| |tmp2#1@@1|))) (= (F2__X__s.__default.mm__clmulepi64__si128__16 (Lit |a#0@@26|) (Lit |b#0@@38|)) (let ((|tmp1#1@@2| (Lit (|Seq#Drop| (|Seq#Take| (Lit |a#0@@26|) (LitInt 64)) (LitInt 0))))) (let ((|tmp2#1@@2| (Lit (|Seq#Drop| (|Seq#Take| (Lit |b#0@@38|) (LitInt 128)) (LitInt 64))))) (F2__X__s.__default.mul__F2__X StartFuel_F2_X_s._default.mul_F2_X |tmp1#1@@2| |tmp2#1@@2|)))))) :qid |F2Xsdfy.190:35| :weight 3 :skolemid |1275| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__16 (Lit |a#0@@26|) (Lit |b#0@@38|))) ))))
(assert  (=> true (forall ((|a#0@@27| Int) (|b#0@@39| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#canCall| |a#0@@27| |b#0@@39|) (and (and (<= (LitInt 0) |a#0@@27|) (< |a#0@@27| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@39|) (< |b#0@@39| 340282366920938463463374607431768211456)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 |a#0@@27| |b#0@@39|) (LitInt 128)) (F2__X__s.__default.mm__clmulepi64__si128__16 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@27| (LitInt 128)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@39| (LitInt 128)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 |a#0@@27| |b#0@@39|)) (< (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 |a#0@@27| |b#0@@39|) 340282366920938463463374607431768211456)))) :qid |F2Xsdfy.199:117| :skolemid |1276| :pattern ( (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 |a#0@@27| |b#0@@39|)) ))))
(assert (forall ((|a#0@@28| Int) (|b#0@@40| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@28|) (< |a#0@@28| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@40|) (< |b#0@@40| 340282366920938463463374607431768211456))) (= (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#requires| |a#0@@28| |b#0@@40|) true)) :qid |F2Xsdfy.199:117| :skolemid |1277| :pattern ( (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#requires| |a#0@@28| |b#0@@40|)) )))
(assert  (=> true (forall ((|a#0@@29| Int) (|b#0@@41| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_xor_si128#canCall| |a#0@@29| |b#0@@41|) (and (and (<= (LitInt 0) |a#0@@29|) (< |a#0@@29| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@41|) (< |b#0@@41| 340282366920938463463374607431768211456)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_xor_si128 |a#0@@29| |b#0@@41|) (LitInt 128)) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@29| (LitInt 128)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@41| (LitInt 128)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_xor_si128 |a#0@@29| |b#0@@41|)) (< (F2__X__s.__default.intrinsic_mm_xor_si128 |a#0@@29| |b#0@@41|) 340282366920938463463374607431768211456)))) :qid |F2Xsdfy.206:97| :skolemid |1278| :pattern ( (F2__X__s.__default.intrinsic_mm_xor_si128 |a#0@@29| |b#0@@41|)) ))))
(assert (forall ((|a#0@@30| Int) (|b#0@@42| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@30|) (< |a#0@@30| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@42|) (< |b#0@@42| 340282366920938463463374607431768211456))) (= (|F2__X__s.__default.intrinsic_mm_xor_si128#requires| |a#0@@30| |b#0@@42|) true)) :qid |F2Xsdfy.206:97| :skolemid |1279| :pattern ( (|F2__X__s.__default.intrinsic_mm_xor_si128#requires| |a#0@@30| |b#0@@42|)) )))
(assert  (=> true (forall ((|a#0@@31| Int) (|b#0@@43| Int) ) (!  (=> (or (|F2__X__s.__default.bitxor32#canCall| |a#0@@31| |b#0@@43|) (and (and (<= (LitInt 0) |a#0@@31|) (< |a#0@@31| 4294967296)) (and (<= (LitInt 0) |b#0@@43|) (< |b#0@@43| 4294967296)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.bitxor32 |a#0@@31| |b#0@@43|) (LitInt 32)) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@31| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@43| (LitInt 32)))) (and (<= (LitInt 0) (F2__X__s.__default.bitxor32 |a#0@@31| |b#0@@43|)) (< (F2__X__s.__default.bitxor32 |a#0@@31| |b#0@@43|) 4294967296)))) :qid |F2Xsdfy.211:68| :skolemid |1280| :pattern ( (F2__X__s.__default.bitxor32 |a#0@@31| |b#0@@43|)) ))))
(assert (forall ((|a#0@@32| Int) (|b#0@@44| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@32|) (< |a#0@@32| 4294967296)) (and (<= (LitInt 0) |b#0@@44|) (< |b#0@@44| 4294967296))) (= (|F2__X__s.__default.bitxor32#requires| |a#0@@32| |b#0@@44|) true)) :qid |F2Xsdfy.211:68| :skolemid |1281| :pattern ( (|F2__X__s.__default.bitxor32#requires| |a#0@@32| |b#0@@44|)) )))
(assert  (=> true (forall ((|a#0@@33| Int) (|b#0@@45| Int) ) (!  (=> (or (|F2__X__s.__default.bitxor64#canCall| |a#0@@33| |b#0@@45|) (and (and (<= (LitInt 0) |a#0@@33|) (< |a#0@@33| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@45|) (< |b#0@@45| 18446744073709551616)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.bitxor64 |a#0@@33| |b#0@@45|) (LitInt 64)) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@33| (LitInt 64)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@45| (LitInt 64)))) (and (<= (LitInt 0) (F2__X__s.__default.bitxor64 |a#0@@33| |b#0@@45|)) (< (F2__X__s.__default.bitxor64 |a#0@@33| |b#0@@45|) 18446744073709551616)))) :qid |F2Xsdfy.215:68| :skolemid |1282| :pattern ( (F2__X__s.__default.bitxor64 |a#0@@33| |b#0@@45|)) ))))
(assert (forall ((|a#0@@34| Int) (|b#0@@46| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@34|) (< |a#0@@34| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@46|) (< |b#0@@46| 18446744073709551616))) (= (|F2__X__s.__default.bitxor64#requires| |a#0@@34| |b#0@@46|) true)) :qid |F2Xsdfy.215:68| :skolemid |1283| :pattern ( (|F2__X__s.__default.bitxor64#requires| |a#0@@34| |b#0@@46|)) )))
(assert (= (type Tclass.CRC32__C.__default) TyType))
(assert (= (Tag Tclass.CRC32__C.__default) Tagclass.CRC32__C.__default))
(assert (= (TagFamily Tclass.CRC32__C.__default) tytagFamily$_default))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (= ($Is $o@@17 Tclass.CRC32__C.__default)  (or (= $o@@17 null) (= (dtype $o@@17) Tclass.CRC32__C.__default)))) :qid |unknown.0:0| :skolemid |1284| :pattern ( ($Is $o@@17 Tclass.CRC32__C.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@39 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@39) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@18 Tclass.CRC32__C.__default $h@@39)  (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@39 $o@@18) alloc))))) :qid |unknown.0:0| :skolemid |1285| :pattern ( ($IsAlloc $o@@18 Tclass.CRC32__C.__default $h@@39)) )))
(assert (forall ((arg0@@248 T@U) (arg1@@126 T@U) ) (! (= (type (CRC32__C.__default.bits__of__bytes arg0@@248 arg1@@126)) (SeqType BoxType)) :qid |funType:CRC32__C.__default.bits__of__bytes| :pattern ( (CRC32__C.__default.bits__of__bytes arg0@@248 arg1@@126)) )))
(assert (forall (($ly@@55 T@U) (|s#0@@11| T@U) ) (!  (=> (and (= (type $ly@@55) LayerTypeType) (= (type |s#0@@11|) (SeqType BoxType))) (= (CRC32__C.__default.bits__of__bytes ($LS $ly@@55) |s#0@@11|) (CRC32__C.__default.bits__of__bytes $ly@@55 |s#0@@11|))) :qid |CRC32Csdfy.25:12| :skolemid |1286| :pattern ( (CRC32__C.__default.bits__of__bytes ($LS $ly@@55) |s#0@@11|)) )))
(assert (forall (($ly@@56 T@U) (|s#0@@12| T@U) ) (!  (=> (and (= (type $ly@@56) LayerTypeType) (= (type |s#0@@12|) (SeqType BoxType))) (= (CRC32__C.__default.bits__of__bytes $ly@@56 |s#0@@12|) (CRC32__C.__default.bits__of__bytes $LZ |s#0@@12|))) :qid |CRC32Csdfy.25:12| :skolemid |1287| :pattern ( (CRC32__C.__default.bits__of__bytes (AsFuelBottom $ly@@56) |s#0@@12|)) )))
(assert  (=> true (forall (($ly@@57 T@U) (|s#0@@13| T@U) ) (!  (=> (and (and (= (type $ly@@57) LayerTypeType) (= (type |s#0@@13|) (SeqType BoxType))) (or (|CRC32__C.__default.bits__of__bytes#canCall| |s#0@@13|) ($Is |s#0@@13| (TSeq Tclass.NativeTypes.byte)))) (and (= (|Seq#Length| (CRC32__C.__default.bits__of__bytes $ly@@57 |s#0@@13|)) (Mul (LitInt 8) (|Seq#Length| |s#0@@13|))) ($Is (CRC32__C.__default.bits__of__bytes $ly@@57 |s#0@@13|) (TSeq TBool)))) :qid |CRC32Csdfy.25:12| :skolemid |1288| :pattern ( (CRC32__C.__default.bits__of__bytes $ly@@57 |s#0@@13|)) ))))
(assert (forall (($ly@@58 T@U) (|s#0@@14| T@U) ) (!  (=> (and (and (= (type $ly@@58) LayerTypeType) (= (type |s#0@@14|) (SeqType BoxType))) ($Is |s#0@@14| (TSeq Tclass.NativeTypes.byte))) (= (|CRC32__C.__default.bits__of__bytes#requires| $ly@@58 |s#0@@14|) true)) :qid |CRC32Csdfy.25:12| :skolemid |1289| :pattern ( (|CRC32__C.__default.bits__of__bytes#requires| $ly@@58 |s#0@@14|)) )))
(assert  (=> true (forall (($ly@@59 T@U) (|s#0@@15| T@U) ) (!  (=> (and (and (= (type $ly@@59) LayerTypeType) (= (type |s#0@@15|) (SeqType BoxType))) (or (|CRC32__C.__default.bits__of__bytes#canCall| |s#0@@15|) ($Is |s#0@@15| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (= (|Seq#Length| |s#0@@15|) (LitInt 0))) (and (|CRC32__C.__default.bits__of__bytes#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@15| (- (|Seq#Length| |s#0@@15|) 1)) (LitInt 0))) (|Bits__s.__default.bits__of__int#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@15| (- (|Seq#Length| |s#0@@15|) 1)))) (LitInt 8)))) (= (CRC32__C.__default.bits__of__bytes ($LS $ly@@59) |s#0@@15|) (ite (= (|Seq#Length| |s#0@@15|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (CRC32__C.__default.bits__of__bytes $ly@@59 (|Seq#Drop| (|Seq#Take| |s#0@@15| (- (|Seq#Length| |s#0@@15|) 1)) (LitInt 0))) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (U_2_int ($Unbox intType (|Seq#Index| |s#0@@15| (- (|Seq#Length| |s#0@@15|) 1)))) (LitInt 8))))))) :qid |CRC32Csdfy.25:12| :skolemid |1290| :pattern ( (CRC32__C.__default.bits__of__bytes ($LS $ly@@59) |s#0@@15|)) ))))
(assert  (=> true (forall (($ly@@60 T@U) (|s#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@60) LayerTypeType) (= (type |s#0@@16|) (SeqType BoxType))) (or (|CRC32__C.__default.bits__of__bytes#canCall| (Lit |s#0@@16|)) ($Is |s#0@@16| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@16|)) (LitInt 0))) (and (|CRC32__C.__default.bits__of__bytes#canCall| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@16|) (- (|Seq#Length| (Lit |s#0@@16|)) 1)) (LitInt 0))) (|Bits__s.__default.bits__of__int#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@16|) (- (|Seq#Length| (Lit |s#0@@16|)) 1)))) (LitInt 8)))) (= (CRC32__C.__default.bits__of__bytes ($LS $ly@@60) (Lit |s#0@@16|)) (ite (= (|Seq#Length| (Lit |s#0@@16|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (CRC32__C.__default.bits__of__bytes ($LS $ly@@60) (|Seq#Drop| (|Seq#Take| (Lit |s#0@@16|) (- (|Seq#Length| (Lit |s#0@@16|)) 1)) (LitInt 0))) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@16|) (- (|Seq#Length| (Lit |s#0@@16|)) 1)))) (LitInt 8))))))) :qid |CRC32Csdfy.25:12| :weight 3 :skolemid |1291| :pattern ( (CRC32__C.__default.bits__of__bytes ($LS $ly@@60) (Lit |s#0@@16|))) ))))
(assert  (=> true (forall ((|m#0| T@U) ) (!  (=> (and (= (type |m#0|) (SeqType BoxType)) (or (|CRC32__C.__default.byte__of__bits#canCall| |m#0|) (and ($Is |m#0| (TSeq TBool)) (= (|Seq#Length| |m#0|) (LitInt 8))))) (and (<= (LitInt 0) (CRC32__C.__default.byte__of__bits |m#0|)) (< (CRC32__C.__default.byte__of__bits |m#0|) 256))) :qid |CRC32Csdfy.34:25| :skolemid |1292| :pattern ( (CRC32__C.__default.byte__of__bits |m#0|)) ))))
(assert (forall ((|m#0@@0| T@U) ) (!  (=> (and (= (type |m#0@@0|) (SeqType BoxType)) ($Is |m#0@@0| (TSeq TBool))) (= (|CRC32__C.__default.byte__of__bits#requires| |m#0@@0|) (= (|Seq#Length| |m#0@@0|) (LitInt 8)))) :qid |CRC32Csdfy.34:25| :skolemid |1293| :pattern ( (|CRC32__C.__default.byte__of__bits#requires| |m#0@@0|)) )))
(assert  (=> true (forall ((|m#0@@1| T@U) ) (!  (=> (and (= (type |m#0@@1|) (SeqType BoxType)) (or (|CRC32__C.__default.byte__of__bits#canCall| |m#0@@1|) (and ($Is |m#0@@1| (TSeq TBool)) (= (|Seq#Length| |m#0@@1|) (LitInt 8))))) (= (CRC32__C.__default.byte__of__bits |m#0@@1|) (+ (+ (+ (+ (+ (+ (+ (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@1| (LitInt 0)))) 1 0) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@1| (LitInt 1)))) 2 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@1| (LitInt 2)))) 4 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@1| (LitInt 3)))) 8 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@1| (LitInt 4)))) 16 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@1| (LitInt 5)))) 32 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@1| (LitInt 6)))) 64 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@1| (LitInt 7)))) 128 0)))) :qid |CRC32Csdfy.34:25| :skolemid |1294| :pattern ( (CRC32__C.__default.byte__of__bits |m#0@@1|)) ))))
(assert  (=> true (forall ((|m#0@@2| T@U) ) (!  (=> (and (= (type |m#0@@2|) (SeqType BoxType)) (or (|CRC32__C.__default.byte__of__bits#canCall| (Lit |m#0@@2|)) (and ($Is |m#0@@2| (TSeq TBool)) (= (|Seq#Length| (Lit |m#0@@2|)) (LitInt 8))))) (= (CRC32__C.__default.byte__of__bits (Lit |m#0@@2|)) (+ (+ (+ (+ (+ (+ (+ (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@2|) (LitInt 0)))) 1 0) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@2|) (LitInt 1)))) 2 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@2|) (LitInt 2)))) 4 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@2|) (LitInt 3)))) 8 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@2|) (LitInt 4)))) 16 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@2|) (LitInt 5)))) 32 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@2|) (LitInt 6)))) 64 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@2|) (LitInt 7)))) 128 0)))) :qid |CRC32Csdfy.34:25| :weight 3 :skolemid |1295| :pattern ( (CRC32__C.__default.byte__of__bits (Lit |m#0@@2|))) ))))
(assert (forall ((arg0@@249 T@U) (arg1@@127 T@U) ) (! (= (type (CRC32__C.__default.crc32__c arg0@@249 arg1@@127)) (SeqType BoxType)) :qid |funType:CRC32__C.__default.crc32__c| :pattern ( (CRC32__C.__default.crc32__c arg0@@249 arg1@@127)) )))
(assert (forall (($ly@@61 T@U) (|s#0@@17| T@U) ) (!  (=> (and (= (type $ly@@61) LayerTypeType) (= (type |s#0@@17|) (SeqType BoxType))) (= (CRC32__C.__default.crc32__c ($LS $ly@@61) |s#0@@17|) (CRC32__C.__default.crc32__c $ly@@61 |s#0@@17|))) :qid |CRC32Csdfy.47:22| :skolemid |1296| :pattern ( (CRC32__C.__default.crc32__c ($LS $ly@@61) |s#0@@17|)) )))
(assert (forall (($ly@@62 T@U) (|s#0@@18| T@U) ) (!  (=> (and (= (type $ly@@62) LayerTypeType) (= (type |s#0@@18|) (SeqType BoxType))) (= (CRC32__C.__default.crc32__c $ly@@62 |s#0@@18|) (CRC32__C.__default.crc32__c $LZ |s#0@@18|))) :qid |CRC32Csdfy.47:22| :skolemid |1297| :pattern ( (CRC32__C.__default.crc32__c (AsFuelBottom $ly@@62) |s#0@@18|)) )))
(assert  (=> true (forall (($ly@@63 T@U) (|s#0@@19| T@U) ) (!  (=> (and (and (= (type $ly@@63) LayerTypeType) (= (type |s#0@@19|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c#canCall| |s#0@@19|) ($Is |s#0@@19| (TSeq Tclass.NativeTypes.byte)))) (and (= (|Seq#Length| (CRC32__C.__default.crc32__c $ly@@63 |s#0@@19|)) (LitInt 4)) ($Is (CRC32__C.__default.crc32__c $ly@@63 |s#0@@19|) (TSeq Tclass.NativeTypes.byte)))) :qid |CRC32Csdfy.47:22| :skolemid |1298| :pattern ( (CRC32__C.__default.crc32__c $ly@@63 |s#0@@19|)) ))))
(assert (forall (($ly@@64 T@U) (|s#0@@20| T@U) ) (!  (=> (and (and (= (type $ly@@64) LayerTypeType) (= (type |s#0@@20|) (SeqType BoxType))) ($Is |s#0@@20| (TSeq Tclass.NativeTypes.byte))) (= (|CRC32__C.__default.crc32__c#requires| $ly@@64 |s#0@@20|) true)) :qid |CRC32Csdfy.47:22| :skolemid |1299| :pattern ( (|CRC32__C.__default.crc32__c#requires| $ly@@64 |s#0@@20|)) )))
(assert (= (type StartFuel_Bits_s._default.ones) LayerTypeType))
(assert  (=> true (forall (($ly@@65 T@U) (|s#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@65) LayerTypeType) (= (type |s#0@@21|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c#canCall| |s#0@@21|) ($Is |s#0@@21| (TSeq Tclass.NativeTypes.byte)))) (and (and (and (|Bits__s.__default.zeroes#canCall| (LitInt 32)) (and (|CRC32__C.__default.bits__of__bytes#canCall| |s#0@@21|) (|F2__X__s.__default.reverse#canCall| (CRC32__C.__default.bits__of__bytes ($LS $LZ) |s#0@@21|)))) (let ((|bitstream#0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (CRC32__C.__default.bits__of__bytes ($LS $LZ) |s#0@@21|))))) (and (and (and (|Bits__s.__default.zeroes#canCall| (- (|Seq#Length| |bitstream#0|) 32)) (|Bits__s.__default.ones#canCall| (LitInt 32))) (|F2__X__s.__default.xor#canCall| |bitstream#0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#0|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (let ((|bitstream1#0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |bitstream#0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#0|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))))) (and (and (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33)) (|F2__X__s.__default.mod__F2__X#canCall| |bitstream1#0| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (let ((|m#0@@3| (F2__X__s.__default.mod__F2__X ($LS $LZ) |bitstream1#0| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (and (and (and (|F2__X__s.__default.reverse#canCall| |m#0@@3|) (|Bits__s.__default.ones#canCall| (LitInt 32))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#0@@3|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))) (let ((|m1#0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#0@@3|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (and (and (and (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#0| (LitInt 8)) (LitInt 0))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#0| (LitInt 16)) (LitInt 8)))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#0| (LitInt 24)) (LitInt 16)))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#0| (LitInt 32)) (LitInt 24)))))))))))) (= (CRC32__C.__default.crc32__c ($LS $ly@@65) |s#0@@21|) (let ((|bitstream#0@@0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (CRC32__C.__default.bits__of__bytes ($LS $LZ) |s#0@@21|))))) (let ((|bitstream1#0@@0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |bitstream#0@@0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#0@@0|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))))) (let ((|m#0@@4| (F2__X__s.__default.mod__F2__X ($LS $LZ) |bitstream1#0@@0| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (let ((|m1#0@@0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#0@@4|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#0@@0| (LitInt 8)) (LitInt 0)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#0@@0| (LitInt 16)) (LitInt 8)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#0@@0| (LitInt 24)) (LitInt 16)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#0@@0| (LitInt 32)) (LitInt 24))))))))))))) :qid |CRC32Csdfy.47:22| :skolemid |1300| :pattern ( (CRC32__C.__default.crc32__c ($LS $ly@@65) |s#0@@21|)) ))))
(assert  (=> true (forall (($ly@@66 T@U) (|s#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@66) LayerTypeType) (= (type |s#0@@22|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c#canCall| (Lit |s#0@@22|)) ($Is |s#0@@22| (TSeq Tclass.NativeTypes.byte)))) (and (and (and (|Bits__s.__default.zeroes#canCall| (LitInt 32)) (and (|CRC32__C.__default.bits__of__bytes#canCall| (Lit |s#0@@22|)) (|F2__X__s.__default.reverse#canCall| (Lit (CRC32__C.__default.bits__of__bytes ($LS $LZ) (Lit |s#0@@22|)))))) (let ((|bitstream#1| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit (CRC32__C.__default.bits__of__bytes ($LS $LZ) (Lit |s#0@@22|))))))) (and (and (and (|Bits__s.__default.zeroes#canCall| (- (|Seq#Length| |bitstream#1|) 32)) (|Bits__s.__default.ones#canCall| (LitInt 32))) (|F2__X__s.__default.xor#canCall| |bitstream#1| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#1|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (let ((|bitstream1#1| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |bitstream#1| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#1|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))))) (and (and (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33)) (|F2__X__s.__default.mod__F2__X#canCall| |bitstream1#1| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (let ((|m#1| (F2__X__s.__default.mod__F2__X ($LS $LZ) |bitstream1#1| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (and (and (and (|F2__X__s.__default.reverse#canCall| |m#1|) (|Bits__s.__default.ones#canCall| (LitInt 32))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#1|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))) (let ((|m1#1| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#1|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (and (and (and (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#1| (LitInt 8)) (LitInt 0))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#1| (LitInt 16)) (LitInt 8)))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#1| (LitInt 24)) (LitInt 16)))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#1| (LitInt 32)) (LitInt 24)))))))))))) (= (CRC32__C.__default.crc32__c ($LS $ly@@66) (Lit |s#0@@22|)) (let ((|bitstream#1@@0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit (CRC32__C.__default.bits__of__bytes ($LS $LZ) (Lit |s#0@@22|))))))) (let ((|bitstream1#1@@0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |bitstream#1@@0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#1@@0|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))))) (let ((|m#1@@0| (F2__X__s.__default.mod__F2__X ($LS $LZ) |bitstream1#1@@0| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (let ((|m1#1@@0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#1@@0|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#1@@0| (LitInt 8)) (LitInt 0)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#1@@0| (LitInt 16)) (LitInt 8)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#1@@0| (LitInt 24)) (LitInt 16)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#1@@0| (LitInt 32)) (LitInt 24))))))))))))) :qid |CRC32Csdfy.47:22| :weight 3 :skolemid |1301| :pattern ( (CRC32__C.__default.crc32__c ($LS $ly@@66) (Lit |s#0@@22|))) ))))
(assert (forall ((arg0@@250 T@U) ) (! (= (type (CRC32__C.__default.crc32__c__padded arg0@@250)) (SeqType BoxType)) :qid |funType:CRC32__C.__default.crc32__c__padded| :pattern ( (CRC32__C.__default.crc32__c__padded arg0@@250)) )))
(assert  (=> true (forall ((|s#0@@23| T@U) ) (!  (=> (and (= (type |s#0@@23|) (SeqType BoxType)) (or (|CRC32__C.__default.crc32__c__padded#canCall| |s#0@@23|) ($Is |s#0@@23| (TSeq Tclass.NativeTypes.byte)))) (and (= (|Seq#Length| (CRC32__C.__default.crc32__c__padded |s#0@@23|)) (LitInt 32)) ($Is (CRC32__C.__default.crc32__c__padded |s#0@@23|) (TSeq Tclass.NativeTypes.byte)))) :qid |CRC32Csdfy.62:27| :skolemid |1302| :pattern ( (CRC32__C.__default.crc32__c__padded |s#0@@23|)) ))))
(assert (forall (($Heap@@2 T@U) (|s#0@@24| T@U) ) (!  (=> (and (and (= (type $Heap@@2) (MapType0Type refType MapType1Type)) (= (type |s#0@@24|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@2) ($Is |s#0@@24| (TSeq Tclass.NativeTypes.byte)))) (= (|CRC32__C.__default.crc32__c__padded#requires| |s#0@@24|) true)) :qid |CRC32Csdfy.62:12| :skolemid |1303| :pattern ( (|CRC32__C.__default.crc32__c__padded#requires| |s#0@@24|) ($IsGoodHeap $Heap@@2)) )))
(assert  (and (and (= (type StartFuel_CRC32_C._default.crc32_c) LayerTypeType) (forall ((arg0@@251 T@U) ) (! (= (type (|lambda#51| arg0@@251)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@251)) ))) (forall ((arg0@@252 T@U) ) (! (= (type (|lambda#52| arg0@@252)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@252)) ))))
(assert  (=> true (forall (($Heap@@3 T@U) (|s#0@@25| T@U) ) (!  (=> (and (and (= (type $Heap@@3) (MapType0Type refType MapType1Type)) (= (type |s#0@@25|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c__padded#canCall| |s#0@@25|) (and ($IsGoodHeap $Heap@@3) ($Is |s#0@@25| (TSeq Tclass.NativeTypes.byte))))) (and (|CRC32__C.__default.crc32__c#canCall| |s#0@@25|) (= (CRC32__C.__default.crc32__c__padded |s#0@@25|) (|Seq#Append| (CRC32__C.__default.crc32__c StartFuel_CRC32_C._default.crc32_c |s#0@@25|) (|Seq#Create| Tclass.NativeTypes.byte $Heap@@3 (LitInt 28) (Lit (AtLayer (|lambda#45| (Handle1 (|lambda#51| ($Box (int_2_U (LitInt 0)))) (|lambda#52| TInt) (|lambda#44| (SetRef_to_SetBox (|lambda#43| false))))) ($LS $LZ)))))))) :qid |CRC32Csdfy.62:12| :skolemid |1304| :pattern ( (CRC32__C.__default.crc32__c__padded |s#0@@25|) ($IsGoodHeap $Heap@@3)) ))))
(assert  (=> true (forall (($Heap@@4 T@U) (|s#0@@26| T@U) ) (!  (=> (and (and (= (type $Heap@@4) (MapType0Type refType MapType1Type)) (= (type |s#0@@26|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c__padded#canCall| (Lit |s#0@@26|)) (and ($IsGoodHeap $Heap@@4) ($Is |s#0@@26| (TSeq Tclass.NativeTypes.byte))))) (and (|CRC32__C.__default.crc32__c#canCall| (Lit |s#0@@26|)) (= (CRC32__C.__default.crc32__c__padded (Lit |s#0@@26|)) (|Seq#Append| (CRC32__C.__default.crc32__c StartFuel_CRC32_C._default.crc32_c (Lit |s#0@@26|)) (|Seq#Create| Tclass.NativeTypes.byte $Heap@@4 (LitInt 28) (Lit (AtLayer (|lambda#45| (Handle1 (|lambda#51| ($Box (int_2_U (LitInt 0)))) (|lambda#52| TInt) (|lambda#44| (SetRef_to_SetBox (|lambda#43| false))))) ($LS $LZ)))))))) :qid |CRC32Csdfy.62:12| :weight 3 :skolemid |1305| :pattern ( (CRC32__C.__default.crc32__c__padded (Lit |s#0@@26|)) ($IsGoodHeap $Heap@@4)) ))))
(assert (= (type Tclass.NativePackedInts.__default) TyType))
(assert (= (Tag Tclass.NativePackedInts.__default) Tagclass.NativePackedInts.__default))
(assert (= (TagFamily Tclass.NativePackedInts.__default) tytagFamily$_default))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.NativePackedInts.__default)) (and (= ($Box ($Unbox refType bx@@86)) bx@@86) ($Is ($Unbox refType bx@@86) Tclass.NativePackedInts.__default))) :qid |unknown.0:0| :skolemid |1306| :pattern ( ($IsBox bx@@86 Tclass.NativePackedInts.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (= ($Is $o@@19 Tclass.NativePackedInts.__default)  (or (= $o@@19 null) (= (dtype $o@@19) Tclass.NativePackedInts.__default)))) :qid |unknown.0:0| :skolemid |1307| :pattern ( ($Is $o@@19 Tclass.NativePackedInts.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@40 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@40) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@20 Tclass.NativePackedInts.__default $h@@40)  (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@20) alloc))))) :qid |unknown.0:0| :skolemid |1308| :pattern ( ($IsAlloc $o@@20 Tclass.NativePackedInts.__default $h@@40)) )))
(assert (forall (($ly@@67 T@U) (|s#0@@27| T@U) ) (!  (=> (and (= (type $ly@@67) LayerTypeType) (= (type |s#0@@27|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@67) |s#0@@27|) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@67 |s#0@@27|))) :qid |PackedIntssdfy.11:22| :skolemid |1309| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@67) |s#0@@27|)) )))
(assert (forall (($ly@@68 T@U) (|s#0@@28| T@U) ) (!  (=> (and (= (type $ly@@68) LayerTypeType) (= (type |s#0@@28|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@68 |s#0@@28|) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $LZ |s#0@@28|))) :qid |PackedIntssdfy.11:22| :skolemid |1310| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 (AsFuelBottom $ly@@68) |s#0@@28|)) )))
(assert  (=> true (forall (($ly@@69 T@U) (|s#0@@29| T@U) ) (!  (=> (and (and (= (type $ly@@69) LayerTypeType) (= (type |s#0@@29|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| |s#0@@29|) (and ($Is |s#0@@29| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@29|) (LitInt 4))))) (and (<= (LitInt 0) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@69 |s#0@@29|)) (< (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@69 |s#0@@29|) 4294967296))) :qid |PackedIntssdfy.11:22| :skolemid |1311| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@69 |s#0@@29|)) ))))
(assert (forall (($ly@@70 T@U) (|s#0@@30| T@U) ) (!  (=> (and (and (= (type $ly@@70) LayerTypeType) (= (type |s#0@@30|) (SeqType BoxType))) ($Is |s#0@@30| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| $ly@@70 |s#0@@30|) (= (|Seq#Length| |s#0@@30|) (LitInt 4)))) :qid |PackedIntssdfy.11:22| :skolemid |1312| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| $ly@@70 |s#0@@30|)) )))
(assert  (=> true (forall (($ly@@71 T@U) (|s#0@@31| T@U) ) (!  (=> (and (and (= (type $ly@@71) LayerTypeType) (= (type |s#0@@31|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| |s#0@@31|) (and ($Is |s#0@@31| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@31|) (LitInt 4))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@71) |s#0@@31|) (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| |s#0@@31| (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@31| (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@31| (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@31| (LitInt 3)))) (LitInt 16777216))))) :qid |PackedIntssdfy.11:22| :skolemid |1313| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@71) |s#0@@31|)) ))))
(assert  (=> true (forall (($ly@@72 T@U) (|s#0@@32| T@U) ) (!  (=> (and (and (= (type $ly@@72) LayerTypeType) (= (type |s#0@@32|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit |s#0@@32|)) (and ($Is |s#0@@32| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |s#0@@32|)) (LitInt 4))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@72) (Lit |s#0@@32|)) (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@32|) (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@32|) (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@32|) (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@32|) (LitInt 3)))) (LitInt 16777216))))) :qid |PackedIntssdfy.11:22| :weight 3 :skolemid |1314| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@72) (Lit |s#0@@32|))) ))))
(assert (forall (($ly@@73 T@U) (|s#0@@33| T@U) ) (!  (=> (and (= (type $ly@@73) LayerTypeType) (= (type |s#0@@33|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@73) |s#0@@33|) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@73 |s#0@@33|))) :qid |PackedIntssdfy.20:22| :skolemid |1315| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@73) |s#0@@33|)) )))
(assert (forall (($ly@@74 T@U) (|s#0@@34| T@U) ) (!  (=> (and (= (type $ly@@74) LayerTypeType) (= (type |s#0@@34|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@74 |s#0@@34|) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $LZ |s#0@@34|))) :qid |PackedIntssdfy.20:22| :skolemid |1316| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 (AsFuelBottom $ly@@74) |s#0@@34|)) )))
(assert  (=> true (forall (($ly@@75 T@U) (|s#0@@35| T@U) ) (!  (=> (and (and (= (type $ly@@75) LayerTypeType) (= (type |s#0@@35|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| |s#0@@35|) (and ($Is |s#0@@35| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@35|) (LitInt 8))))) (and (<= (LitInt 0) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@75 |s#0@@35|)) (< (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@75 |s#0@@35|) 18446744073709551616))) :qid |PackedIntssdfy.20:22| :skolemid |1317| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@75 |s#0@@35|)) ))))
(assert (forall (($ly@@76 T@U) (|s#0@@36| T@U) ) (!  (=> (and (and (= (type $ly@@76) LayerTypeType) (= (type |s#0@@36|) (SeqType BoxType))) ($Is |s#0@@36| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| $ly@@76 |s#0@@36|) (= (|Seq#Length| |s#0@@36|) (LitInt 8)))) :qid |PackedIntssdfy.20:22| :skolemid |1318| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| $ly@@76 |s#0@@36|)) )))
(assert  (=> true (forall (($ly@@77 T@U) (|s#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@77) LayerTypeType) (= (type |s#0@@37|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| |s#0@@37|) (and ($Is |s#0@@37| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@37|) (LitInt 8))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@77) |s#0@@37|) (+ (+ (+ (+ (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| |s#0@@37| (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@37| (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@37| (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@37| (LitInt 3)))) (LitInt 16777216))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@37| (LitInt 4)))) (LitInt 4294967296))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@37| (LitInt 5)))) (LitInt 1099511627776))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@37| (LitInt 6)))) (LitInt 281474976710656))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@37| (LitInt 7)))) (LitInt 72057594037927936))))) :qid |PackedIntssdfy.20:22| :skolemid |1319| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@77) |s#0@@37|)) ))))
(assert  (=> true (forall (($ly@@78 T@U) (|s#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@78) LayerTypeType) (= (type |s#0@@38|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit |s#0@@38|)) (and ($Is |s#0@@38| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |s#0@@38|)) (LitInt 8))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@78) (Lit |s#0@@38|)) (+ (+ (+ (+ (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@38|) (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@38|) (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@38|) (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@38|) (LitInt 3)))) (LitInt 16777216))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@38|) (LitInt 4)))) (LitInt 4294967296))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@38|) (LitInt 5)))) (LitInt 1099511627776))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@38|) (LitInt 6)))) (LitInt 281474976710656))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@38|) (LitInt 7)))) (LitInt 72057594037927936))))) :qid |PackedIntssdfy.20:22| :weight 3 :skolemid |1320| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@78) (Lit |s#0@@38|))) ))))
(assert (forall ((arg0@@253 T@U) (arg1@@128 T@U) (arg2@@65 Int) ) (! (= (type (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq arg0@@253 arg1@@128 arg2@@65)) (SeqType BoxType)) :qid |funType:NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq arg0@@253 arg1@@128 arg2@@65)) )))
(assert (forall (($ly@@79 T@U) (|packed#0| T@U) (|len#0@@5| Int) ) (!  (=> (and (= (type $ly@@79) LayerTypeType) (= (type |packed#0|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@79) |packed#0| |len#0@@5|) (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@79 |packed#0| |len#0@@5|))) :qid |PackedIntssdfy.33:22| :skolemid |1321| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@79) |packed#0| |len#0@@5|)) )))
(assert (forall (($ly@@80 T@U) (|packed#0@@0| T@U) (|len#0@@6| Int) ) (!  (=> (and (= (type $ly@@80) LayerTypeType) (= (type |packed#0@@0|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@80 |packed#0@@0| |len#0@@6|) (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $LZ |packed#0@@0| |len#0@@6|))) :qid |PackedIntssdfy.33:22| :skolemid |1322| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq (AsFuelBottom $ly@@80) |packed#0@@0| |len#0@@6|)) )))
(assert (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32) LayerTypeType))
(assert  (=> true (forall (($ly@@81 T@U) (|packed#0@@1| T@U) (|len#0@@7| Int) ) (!  (=> (and (and (= (type $ly@@81) LayerTypeType) (= (type |packed#0@@1|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| |packed#0@@1| |len#0@@7|) (and ($Is |packed#0@@1| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@1|) (Mul |len#0@@7| (LitInt 4)))))) (and (and (= (|Seq#Length| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@81 |packed#0@@1| |len#0@@7|)) |len#0@@7|) (forall ((|i#0@@45| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@45|) (< |i#0@@45| |len#0@@7|)) (= (U_2_int ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@81 |packed#0@@1| |len#0@@7|) |i#0@@45|))) (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |packed#0@@1| (+ (Mul (LitInt 4) |i#0@@45|) 4)) (Mul (LitInt 4) |i#0@@45|))))) :qid |PackedIntssdfy.38:18| :skolemid |1323| :pattern ( ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@81 |packed#0@@1| |len#0@@7|) |i#0@@45|))) ))) ($Is (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@81 |packed#0@@1| |len#0@@7|) (TSeq Tclass.NativeTypes.uint32)))) :qid |PackedIntssdfy.33:22| :skolemid |1324| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@81 |packed#0@@1| |len#0@@7|)) ))))
(assert (forall (($ly@@82 T@U) (|packed#0@@2| T@U) (|len#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@82) LayerTypeType) (= (type |packed#0@@2|) (SeqType BoxType))) ($Is |packed#0@@2| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| $ly@@82 |packed#0@@2| |len#0@@8|) (= (|Seq#Length| |packed#0@@2|) (Mul |len#0@@8| (LitInt 4))))) :qid |PackedIntssdfy.33:22| :skolemid |1325| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| $ly@@82 |packed#0@@2| |len#0@@8|)) )))
(assert  (=> true (forall (($ly@@83 T@U) (|packed#0@@3| T@U) (|len#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@83) LayerTypeType) (= (type |packed#0@@3|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| |packed#0@@3| |len#0@@9|) (and ($Is |packed#0@@3| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@3|) (Mul |len#0@@9| (LitInt 4)))))) (and (=> (not (= |len#0@@9| (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) (- |len#0@@9| 1))) (- |len#0@@9| 1)) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) |len#0@@9|)) (Mul (LitInt 4) (- |len#0@@9| 1)))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@83) |packed#0@@3| |len#0@@9|) (ite (= |len#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@83 (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) (- |len#0@@9| 1))) (- |len#0@@9| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) |len#0@@9|)) (Mul (LitInt 4) (- |len#0@@9| 1)))))))))))) :qid |PackedIntssdfy.33:22| :skolemid |1326| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@83) |packed#0@@3| |len#0@@9|)) ))))
(assert  (=> true (forall (($ly@@84 T@U) (|packed#0@@4| T@U) (|len#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@84) LayerTypeType) (= (type |packed#0@@4|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (Lit |packed#0@@4|) (LitInt |len#0@@10|)) (and ($Is |packed#0@@4| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |packed#0@@4|)) (LitInt (Mul (LitInt |len#0@@10|) (LitInt 4))))))) (and (=> (not (= (LitInt |len#0@@10|) (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (Lit (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@10| 1)))))) (LitInt (- |len#0@@10| 1))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt |len#0@@10|)))) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@10| 1))))))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@84) (Lit |packed#0@@4|) (LitInt |len#0@@10|)) (ite (= (LitInt |len#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@84) (Lit (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@10| 1)))))) (LitInt (- |len#0@@10| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt |len#0@@10|)))) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@10| 1))))))))))))))) :qid |PackedIntssdfy.33:22| :weight 3 :skolemid |1327| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@84) (Lit |packed#0@@4|) (LitInt |len#0@@10|))) ))))
(assert (forall ((arg0@@254 T@U) (arg1@@129 T@U) (arg2@@66 Int) ) (! (= (type (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq arg0@@254 arg1@@129 arg2@@66)) (SeqType BoxType)) :qid |funType:NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq arg0@@254 arg1@@129 arg2@@66)) )))
(assert (forall (($ly@@85 T@U) (|packed#0@@5| T@U) (|len#0@@11| Int) ) (!  (=> (and (= (type $ly@@85) LayerTypeType) (= (type |packed#0@@5|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@85) |packed#0@@5| |len#0@@11|) (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@85 |packed#0@@5| |len#0@@11|))) :qid |PackedIntssdfy.50:22| :skolemid |1328| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@85) |packed#0@@5| |len#0@@11|)) )))
(assert (forall (($ly@@86 T@U) (|packed#0@@6| T@U) (|len#0@@12| Int) ) (!  (=> (and (= (type $ly@@86) LayerTypeType) (= (type |packed#0@@6|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@86 |packed#0@@6| |len#0@@12|) (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $LZ |packed#0@@6| |len#0@@12|))) :qid |PackedIntssdfy.50:22| :skolemid |1329| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq (AsFuelBottom $ly@@86) |packed#0@@6| |len#0@@12|)) )))
(assert (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64) LayerTypeType))
(assert  (=> true (forall (($ly@@87 T@U) (|packed#0@@7| T@U) (|len#0@@13| Int) ) (!  (=> (and (and (= (type $ly@@87) LayerTypeType) (= (type |packed#0@@7|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| |packed#0@@7| |len#0@@13|) (and ($Is |packed#0@@7| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@7|) (Mul |len#0@@13| (LitInt 8)))))) (and (and (= (|Seq#Length| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@87 |packed#0@@7| |len#0@@13|)) |len#0@@13|) (forall ((|i#0@@46| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@46|) (< |i#0@@46| |len#0@@13|)) (= (U_2_int ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@87 |packed#0@@7| |len#0@@13|) |i#0@@46|))) (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Drop| (|Seq#Take| |packed#0@@7| (+ (Mul (LitInt 8) |i#0@@46|) 8)) (Mul (LitInt 8) |i#0@@46|))))) :qid |PackedIntssdfy.55:18| :skolemid |1330| :pattern ( ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@87 |packed#0@@7| |len#0@@13|) |i#0@@46|))) ))) ($Is (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@87 |packed#0@@7| |len#0@@13|) (TSeq Tclass.NativeTypes.uint64)))) :qid |PackedIntssdfy.50:22| :skolemid |1331| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@87 |packed#0@@7| |len#0@@13|)) ))))
(assert (forall (($ly@@88 T@U) (|packed#0@@8| T@U) (|len#0@@14| Int) ) (!  (=> (and (and (= (type $ly@@88) LayerTypeType) (= (type |packed#0@@8|) (SeqType BoxType))) ($Is |packed#0@@8| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| $ly@@88 |packed#0@@8| |len#0@@14|) (= (|Seq#Length| |packed#0@@8|) (Mul |len#0@@14| (LitInt 8))))) :qid |PackedIntssdfy.50:22| :skolemid |1332| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| $ly@@88 |packed#0@@8| |len#0@@14|)) )))
(assert  (=> true (forall (($ly@@89 T@U) (|packed#0@@9| T@U) (|len#0@@15| Int) ) (!  (=> (and (and (= (type $ly@@89) LayerTypeType) (= (type |packed#0@@9|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| |packed#0@@9| |len#0@@15|) (and ($Is |packed#0@@9| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@9|) (Mul |len#0@@15| (LitInt 8)))))) (and (=> (not (= |len#0@@15| (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) (- |len#0@@15| 1))) (- |len#0@@15| 1)) (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (|Seq#Drop| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) |len#0@@15|)) (Mul (LitInt 8) (- |len#0@@15| 1)))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@89) |packed#0@@9| |len#0@@15|) (ite (= |len#0@@15| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@89 (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) (- |len#0@@15| 1))) (- |len#0@@15| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Drop| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) |len#0@@15|)) (Mul (LitInt 8) (- |len#0@@15| 1)))))))))))) :qid |PackedIntssdfy.50:22| :skolemid |1333| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@89) |packed#0@@9| |len#0@@15|)) ))))
(assert  (=> true (forall (($ly@@90 T@U) (|packed#0@@10| T@U) (|len#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@90) LayerTypeType) (= (type |packed#0@@10|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (Lit |packed#0@@10|) (LitInt |len#0@@16|)) (and ($Is |packed#0@@10| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |packed#0@@10|)) (LitInt (Mul (LitInt |len#0@@16|) (LitInt 8))))))) (and (=> (not (= (LitInt |len#0@@16|) (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (Lit (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@16| 1)))))) (LitInt (- |len#0@@16| 1))) (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt |len#0@@16|)))) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@16| 1))))))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@90) (Lit |packed#0@@10|) (LitInt |len#0@@16|)) (ite (= (LitInt |len#0@@16|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@90) (Lit (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@16| 1)))))) (LitInt (- |len#0@@16| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt |len#0@@16|)))) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@16| 1))))))))))))))) :qid |PackedIntssdfy.50:22| :weight 3 :skolemid |1334| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@90) (Lit |packed#0@@10|) (LitInt |len#0@@16|))) ))))
(assert (= (type Tclass.NonlinearLemmas.__default) TyType))
(assert (= (Tag Tclass.NonlinearLemmas.__default) Tagclass.NonlinearLemmas.__default))
(assert (= (TagFamily Tclass.NonlinearLemmas.__default) tytagFamily$_default))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.NonlinearLemmas.__default)) (and (= ($Box ($Unbox refType bx@@87)) bx@@87) ($Is ($Unbox refType bx@@87) Tclass.NonlinearLemmas.__default))) :qid |unknown.0:0| :skolemid |1335| :pattern ( ($IsBox bx@@87 Tclass.NonlinearLemmas.__default)) )))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (= ($Is $o@@21 Tclass.NonlinearLemmas.__default)  (or (= $o@@21 null) (= (dtype $o@@21) Tclass.NonlinearLemmas.__default)))) :qid |unknown.0:0| :skolemid |1336| :pattern ( ($Is $o@@21 Tclass.NonlinearLemmas.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@41 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@41) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@22 Tclass.NonlinearLemmas.__default $h@@41)  (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@41 $o@@22) alloc))))) :qid |unknown.0:0| :skolemid |1337| :pattern ( ($IsAlloc $o@@22 Tclass.NonlinearLemmas.__default $h@@41)) )))
(assert (= (type Tclass.Math.__default) TyType))
(assert (= (Tag Tclass.Math.__default) Tagclass.Math.__default))
(assert (= (TagFamily Tclass.Math.__default) tytagFamily$_default))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass.Math.__default)) (and (= ($Box ($Unbox refType bx@@88)) bx@@88) ($Is ($Unbox refType bx@@88) Tclass.Math.__default))) :qid |unknown.0:0| :skolemid |1338| :pattern ( ($IsBox bx@@88 Tclass.Math.__default)) )))
(assert (forall (($o@@23 T@U) ) (!  (=> (= (type $o@@23) refType) (= ($Is $o@@23 Tclass.Math.__default)  (or (= $o@@23 null) (= (dtype $o@@23) Tclass.Math.__default)))) :qid |unknown.0:0| :skolemid |1339| :pattern ( ($Is $o@@23 Tclass.Math.__default)) )))
(assert (forall (($o@@24 T@U) ($h@@42 T@U) ) (!  (=> (and (= (type $o@@24) refType) (= (type $h@@42) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@24 Tclass.Math.__default $h@@42)  (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@42 $o@@24) alloc))))) :qid |unknown.0:0| :skolemid |1340| :pattern ( ($IsAlloc $o@@24 Tclass.Math.__default $h@@42)) )))
(assert (forall (($ly@@91 T@U) (|exp#0| Int) ) (!  (=> (= (type $ly@@91) LayerTypeType) (= (Math.__default.power2 ($LS $ly@@91) |exp#0|) (Math.__default.power2 $ly@@91 |exp#0|))) :qid |Mathidfy.13:22| :skolemid |1341| :pattern ( (Math.__default.power2 ($LS $ly@@91) |exp#0|)) )))
(assert (forall (($ly@@92 T@U) (|exp#0@@0| Int) ) (!  (=> (= (type $ly@@92) LayerTypeType) (= (Math.__default.power2 $ly@@92 |exp#0@@0|) (Math.__default.power2 $LZ |exp#0@@0|))) :qid |Mathidfy.13:22| :skolemid |1342| :pattern ( (Math.__default.power2 (AsFuelBottom $ly@@92) |exp#0@@0|)) )))
(assert  (=> true (forall (($ly@@93 T@U) (|exp#0@@1| Int) ) (!  (=> (and (= (type $ly@@93) LayerTypeType) (or (|Math.__default.power2#canCall| |exp#0@@1|) (<= (LitInt 0) |exp#0@@1|))) (and (> (Math.__default.power2 $ly@@93 |exp#0@@1|) 0) (<= (LitInt 0) (Math.__default.power2 $ly@@93 |exp#0@@1|)))) :qid |Mathidfy.13:22| :skolemid |1343| :pattern ( (Math.__default.power2 $ly@@93 |exp#0@@1|)) ))))
(assert (forall (($ly@@94 T@U) (|exp#0@@2| Int) ) (!  (=> (and (= (type $ly@@94) LayerTypeType) (<= (LitInt 0) |exp#0@@2|)) (= (|Math.__default.power2#requires| $ly@@94 |exp#0@@2|) true)) :qid |Mathidfy.13:22| :skolemid |1344| :pattern ( (|Math.__default.power2#requires| $ly@@94 |exp#0@@2|)) )))
(assert  (=> true (forall (($ly@@95 T@U) (|exp#0@@3| Int) ) (!  (=> (and (= (type $ly@@95) LayerTypeType) (or (|Math.__default.power2#canCall| |exp#0@@3|) (<= (LitInt 0) |exp#0@@3|))) (and (=> (not (= |exp#0@@3| (LitInt 0))) (|Math.__default.power2#canCall| (- |exp#0@@3| 1))) (= (Math.__default.power2 ($LS $ly@@95) |exp#0@@3|) (ite (= |exp#0@@3| (LitInt 0)) 1 (Mul (LitInt 2) (Math.__default.power2 $ly@@95 (- |exp#0@@3| 1))))))) :qid |Mathidfy.13:22| :skolemid |1345| :pattern ( (Math.__default.power2 ($LS $ly@@95) |exp#0@@3|)) ))))
(assert  (=> true (forall (($ly@@96 T@U) (|exp#0@@4| Int) ) (!  (=> (and (= (type $ly@@96) LayerTypeType) (or (|Math.__default.power2#canCall| (LitInt |exp#0@@4|)) (<= (LitInt 0) |exp#0@@4|))) (and (=> (not (= (LitInt |exp#0@@4|) (LitInt 0))) (|Math.__default.power2#canCall| (LitInt (- |exp#0@@4| 1)))) (= (Math.__default.power2 ($LS $ly@@96) (LitInt |exp#0@@4|)) (ite (= (LitInt |exp#0@@4|) (LitInt 0)) 1 (Mul (LitInt 2) (Math.__default.power2 ($LS $ly@@96) (LitInt (- |exp#0@@4| 1)))))))) :qid |Mathidfy.13:22| :weight 3 :skolemid |1346| :pattern ( (Math.__default.power2 ($LS $ly@@96) (LitInt |exp#0@@4|))) ))))
(assert (= (type Tclass.ModLemmas.__default) TyType))
(assert (= (Tag Tclass.ModLemmas.__default) Tagclass.ModLemmas.__default))
(assert (= (TagFamily Tclass.ModLemmas.__default) tytagFamily$_default))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass.ModLemmas.__default)) (and (= ($Box ($Unbox refType bx@@89)) bx@@89) ($Is ($Unbox refType bx@@89) Tclass.ModLemmas.__default))) :qid |unknown.0:0| :skolemid |1347| :pattern ( ($IsBox bx@@89 Tclass.ModLemmas.__default)) )))
(assert (forall (($o@@25 T@U) ) (!  (=> (= (type $o@@25) refType) (= ($Is $o@@25 Tclass.ModLemmas.__default)  (or (= $o@@25 null) (= (dtype $o@@25) Tclass.ModLemmas.__default)))) :qid |unknown.0:0| :skolemid |1348| :pattern ( ($Is $o@@25 Tclass.ModLemmas.__default)) )))
(assert (forall (($o@@26 T@U) ($h@@43 T@U) ) (!  (=> (and (= (type $o@@26) refType) (= (type $h@@43) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@26 Tclass.ModLemmas.__default $h@@43)  (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@43 $o@@26) alloc))))) :qid |unknown.0:0| :skolemid |1349| :pattern ( ($IsAlloc $o@@26 Tclass.ModLemmas.__default $h@@43)) )))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@255 T@T) (arg1@@130 T@T) ) (! (= (Ctor (MapType6Type arg0@@255 arg1@@130)) 28) :qid |ctor:MapType6Type| )) (forall ((arg0@@256 T@T) (arg1@@131 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@256 arg1@@131)) arg0@@256) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@256 arg1@@131)) ))) (forall ((arg0@@257 T@T) (arg1@@132 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@257 arg1@@132)) arg1@@132) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@257 arg1@@132)) ))) (forall ((arg0@@258 T@U) (arg1@@133 T@U) (arg2@@67 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@258)))) (= (type (MapType6Select arg0@@258 arg1@@133 arg2@@67)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@258 arg1@@133 arg2@@67)) ))) (forall ((arg0@@259 T@U) (arg1@@134 T@U) (arg2@@68 T@U) (arg3@@39 T@U) ) (! (let ((aVar1@@7 (type arg3@@39))) (let ((aVar0@@4 (type arg1@@134))) (= (type (MapType6Store arg0@@259 arg1@@134 arg2@@68 arg3@@39)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@259 arg1@@134 arg2@@68 arg3@@39)) ))) (forall ((m@@67 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@67)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@67 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@68 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@68 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@68 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@69 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@69 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@69 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@70 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@70 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@70 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@260 T@U) (arg1@@135 T@U) (arg2@@69 T@U) (arg3@@40 Bool) ) (! (= (type (|lambda#0| arg0@@260 arg1@@135 arg2@@69 arg3@@40)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@260 arg1@@135 arg2@@69 arg3@@40)) ))))
(assert (forall ((|l#0@@15| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@27 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (and (and (= (type |l#0@@15|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@27) refType)) (= (type $f) (FieldType alpha@@6))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0@@15| |l#1| |l#2| |l#3|) $o@@27 $f))  (=> (and (not (= $o@@27 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@27) |l#2|))) |l#3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1350| :pattern ( (MapType6Select (|lambda#0| |l#0@@15| |l#1| |l#2| |l#3|) $o@@27 $f)) )))
(assert (forall ((arg0@@261 T@U) (arg1@@136 T@U) (arg2@@70 T@U) (arg3@@41 Bool) ) (! (= (type (|lambda#1| arg0@@261 arg1@@136 arg2@@70 arg3@@41)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@261 arg1@@136 arg2@@70 arg3@@41)) )))
(assert (forall ((|l#0@@16| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@28 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (and (and (= (type |l#0@@16|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@28) refType)) (= (type $f@@0) (FieldType alpha@@7))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@16| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@28 $f@@0))  (=> (and (not (= $o@@28 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@28) |l#2@@0|))) |l#3@@0|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1351| :pattern ( (MapType6Select (|lambda#1| |l#0@@16| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@28 $f@@0)) )))
(assert (forall ((arg0@@262 T@U) (arg1@@137 T@U) (arg2@@71 T@U) (arg3@@42 Bool) ) (! (= (type (|lambda#2| arg0@@262 arg1@@137 arg2@@71 arg3@@42)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@262 arg1@@137 arg2@@71 arg3@@42)) )))
(assert (forall ((|l#0@@17| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@29 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (and (and (= (type |l#0@@17|) refType) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@29) refType)) (= (type $f@@1) (FieldType alpha@@8))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@17| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@29 $f@@1))  (=> (and (not (= $o@@29 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@29) |l#2@@1|))) |l#3@@1|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1352| :pattern ( (MapType6Select (|lambda#2| |l#0@@17| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@29 $f@@1)) )))
(assert (forall ((arg0@@263 T@U) (arg1@@138 T@U) (arg2@@72 T@U) (arg3@@43 Bool) ) (! (= (type (|lambda#3| arg0@@263 arg1@@138 arg2@@72 arg3@@43)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@263 arg1@@138 arg2@@72 arg3@@43)) )))
(assert (forall ((|l#0@@18| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@30 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (and (and (= (type |l#0@@18|) refType) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (type $o@@30) refType)) (= (type $f@@2) (FieldType alpha@@9))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@18| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@30 $f@@2))  (=> (and (not (= $o@@30 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@30) |l#2@@2|))) |l#3@@2|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1353| :pattern ( (MapType6Select (|lambda#3| |l#0@@18| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@30 $f@@2)) )))
(assert (forall ((arg0@@264 T@U) (arg1@@139 T@U) (arg2@@73 T@U) (arg3@@44 Bool) ) (! (= (type (|lambda#4| arg0@@264 arg1@@139 arg2@@73 arg3@@44)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@264 arg1@@139 arg2@@73 arg3@@44)) )))
(assert (forall ((|l#0@@19| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ($o@@31 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (and (and (= (type |l#0@@19|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type $o@@31) refType)) (= (type $f@@3) (FieldType alpha@@10))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@19| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@31 $f@@3))  (=> (and (not (= $o@@31 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@31) |l#2@@3|))) |l#3@@3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1354| :pattern ( (MapType6Select (|lambda#4| |l#0@@19| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@31 $f@@3)) )))
(assert (forall ((arg0@@265 T@U) (arg1@@140 T@U) (arg2@@74 T@U) (arg3@@45 Bool) ) (! (= (type (|lambda#5| arg0@@265 arg1@@140 arg2@@74 arg3@@45)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@265 arg1@@140 arg2@@74 arg3@@45)) )))
(assert (forall ((|l#0@@20| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ($o@@32 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type |l#0@@20|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@32) refType)) (= (type $f@@4) (FieldType alpha@@11))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@20| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@32 $f@@4))  (=> (and (not (= $o@@32 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@32) |l#2@@4|))) |l#3@@4|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1355| :pattern ( (MapType6Select (|lambda#5| |l#0@@20| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@32 $f@@4)) )))
(assert (forall ((arg0@@266 T@U) (arg1@@141 T@U) (arg2@@75 T@U) (arg3@@46 Bool) ) (! (= (type (|lambda#6| arg0@@266 arg1@@141 arg2@@75 arg3@@46)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@266 arg1@@141 arg2@@75 arg3@@46)) )))
(assert (forall ((|l#0@@21| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ($o@@33 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type |l#0@@21|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (type $o@@33) refType)) (= (type $f@@5) (FieldType alpha@@12))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@21| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@33 $f@@5))  (=> (and (not (= $o@@33 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@33) |l#2@@5|))) |l#3@@5|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1356| :pattern ( (MapType6Select (|lambda#6| |l#0@@21| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@33 $f@@5)) )))
(assert (forall ((arg0@@267 T@U) (arg1@@142 T@U) (arg2@@76 T@U) (arg3@@47 Bool) ) (! (= (type (|lambda#7| arg0@@267 arg1@@142 arg2@@76 arg3@@47)) (MapType6Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@267 arg1@@142 arg2@@76 arg3@@47)) )))
(assert (forall ((|l#0@@22| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ($o@@34 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type |l#0@@22|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@34) refType)) (= (type $f@@6) (FieldType alpha@@13))) (= (U_2_bool (MapType6Select (|lambda#7| |l#0@@22| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@34 $f@@6))  (=> (and (not (= $o@@34 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@34) |l#2@@6|))) |l#3@@6|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1357| :pattern ( (MapType6Select (|lambda#7| |l#0@@22| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@34 $f@@6)) )))
(assert (forall ((arg0@@268 T@U) (arg1@@143 T@U) (arg2@@77 T@U) (arg3@@48 Bool) ) (! (= (type (|lambda#8| arg0@@268 arg1@@143 arg2@@77 arg3@@48)) (MapType6Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@268 arg1@@143 arg2@@77 arg3@@48)) )))
(assert (forall ((|l#0@@23| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ($o@@35 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type |l#0@@23|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type $o@@35) refType)) (= (type $f@@7) (FieldType alpha@@14))) (= (U_2_bool (MapType6Select (|lambda#8| |l#0@@23| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@35 $f@@7))  (=> (and (not (= $o@@35 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@35) |l#2@@7|))) |l#3@@7|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1358| :pattern ( (MapType6Select (|lambda#8| |l#0@@23| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@35 $f@@7)) )))
(assert (forall ((arg0@@269 T@U) (arg1@@144 T@U) (arg2@@78 T@U) (arg3@@49 Bool) ) (! (= (type (|lambda#9| arg0@@269 arg1@@144 arg2@@78 arg3@@49)) (MapType6Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@269 arg1@@144 arg2@@78 arg3@@49)) )))
(assert (forall ((|l#0@@24| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ($o@@36 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type |l#0@@24|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@36) refType)) (= (type $f@@8) (FieldType alpha@@15))) (= (U_2_bool (MapType6Select (|lambda#9| |l#0@@24| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@36 $f@@8))  (=> (and (not (= $o@@36 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@36) |l#2@@8|))) |l#3@@8|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1359| :pattern ( (MapType6Select (|lambda#9| |l#0@@24| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@36 $f@@8)) )))
(assert (forall ((arg0@@270 T@U) (arg1@@145 T@U) (arg2@@79 T@U) (arg3@@50 Bool) ) (! (= (type (|lambda#10| arg0@@270 arg1@@145 arg2@@79 arg3@@50)) (MapType6Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@270 arg1@@145 arg2@@79 arg3@@50)) )))
(assert (forall ((|l#0@@25| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ($o@@37 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type |l#0@@25|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@37) refType)) (= (type $f@@9) (FieldType alpha@@16))) (= (U_2_bool (MapType6Select (|lambda#10| |l#0@@25| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@37 $f@@9))  (=> (and (not (= $o@@37 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@37) |l#2@@9|))) |l#3@@9|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1360| :pattern ( (MapType6Select (|lambda#10| |l#0@@25| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@37 $f@@9)) )))
(assert (forall ((arg0@@271 T@U) (arg1@@146 T@U) (arg2@@80 T@U) (arg3@@51 Bool) ) (! (= (type (|lambda#11| arg0@@271 arg1@@146 arg2@@80 arg3@@51)) (MapType6Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@271 arg1@@146 arg2@@80 arg3@@51)) )))
(assert (forall ((|l#0@@26| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ($o@@38 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type |l#0@@26|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type $o@@38) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType6Select (|lambda#11| |l#0@@26| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@38 $f@@10))  (=> (and (not (= $o@@38 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@38) |l#2@@10|))) |l#3@@10|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1361| :pattern ( (MapType6Select (|lambda#11| |l#0@@26| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@38 $f@@10)) )))
(assert (forall ((arg0@@272 T@U) (arg1@@147 T@U) (arg2@@81 T@U) (arg3@@52 Bool) ) (! (= (type (|lambda#12| arg0@@272 arg1@@147 arg2@@81 arg3@@52)) (MapType6Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@272 arg1@@147 arg2@@81 arg3@@52)) )))
(assert (forall ((|l#0@@27| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ($o@@39 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type |l#0@@27|) refType) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (type $o@@39) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType6Select (|lambda#12| |l#0@@27| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@39 $f@@11))  (=> (and (not (= $o@@39 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@39) |l#2@@11|))) |l#3@@11|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1362| :pattern ( (MapType6Select (|lambda#12| |l#0@@27| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@39 $f@@11)) )))
(assert (forall ((arg0@@273 T@U) (arg1@@148 T@U) (arg2@@82 T@U) (arg3@@53 Bool) ) (! (= (type (|lambda#13| arg0@@273 arg1@@148 arg2@@82 arg3@@53)) (MapType6Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@273 arg1@@148 arg2@@82 arg3@@53)) )))
(assert (forall ((|l#0@@28| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ($o@@40 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type |l#0@@28|) refType) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type $o@@40) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType6Select (|lambda#13| |l#0@@28| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@40 $f@@12))  (=> (and (not (= $o@@40 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@40) |l#2@@12|))) |l#3@@12|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1363| :pattern ( (MapType6Select (|lambda#13| |l#0@@28| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@40 $f@@12)) )))
(assert (forall ((arg0@@274 T@U) (arg1@@149 T@U) (arg2@@83 T@U) (arg3@@54 Bool) ) (! (= (type (|lambda#14| arg0@@274 arg1@@149 arg2@@83 arg3@@54)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@274 arg1@@149 arg2@@83 arg3@@54)) )))
(assert (forall ((|l#0@@29| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ($o@@41 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type |l#0@@29|) refType) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type $o@@41) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@29| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@41 $f@@13))  (=> (and (not (= $o@@41 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@41) |l#2@@13|))) |l#3@@13|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1364| :pattern ( (MapType6Select (|lambda#14| |l#0@@29| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@41 $f@@13)) )))
(assert (forall ((arg0@@275 T@U) (arg1@@150 T@U) (arg2@@84 T@U) (arg3@@55 Bool) ) (! (= (type (|lambda#15| arg0@@275 arg1@@150 arg2@@84 arg3@@55)) (MapType6Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@275 arg1@@150 arg2@@84 arg3@@55)) )))
(assert (forall ((|l#0@@30| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ($o@@42 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type |l#0@@30|) refType) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type $o@@42) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType6Select (|lambda#15| |l#0@@30| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@42 $f@@14))  (=> (and (not (= $o@@42 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@42) |l#2@@14|))) |l#3@@14|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1365| :pattern ( (MapType6Select (|lambda#15| |l#0@@30| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@42 $f@@14)) )))
(assert (forall ((arg0@@276 T@U) (arg1@@151 T@U) (arg2@@85 T@U) (arg3@@56 Bool) ) (! (= (type (|lambda#16| arg0@@276 arg1@@151 arg2@@85 arg3@@56)) (MapType6Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@276 arg1@@151 arg2@@85 arg3@@56)) )))
(assert (forall ((|l#0@@31| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ($o@@43 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type |l#0@@31|) refType) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type $o@@43) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType6Select (|lambda#16| |l#0@@31| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@43 $f@@15))  (=> (and (not (= $o@@43 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@43) |l#2@@15|))) |l#3@@15|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1366| :pattern ( (MapType6Select (|lambda#16| |l#0@@31| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@43 $f@@15)) )))
(assert (forall ((arg0@@277 T@U) (arg1@@152 T@U) (arg2@@86 T@U) (arg3@@57 Bool) ) (! (= (type (|lambda#17| arg0@@277 arg1@@152 arg2@@86 arg3@@57)) (MapType6Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@277 arg1@@152 arg2@@86 arg3@@57)) )))
(assert (forall ((|l#0@@32| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ($o@@44 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type |l#0@@32|) refType) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (type $o@@44) refType)) (= (type $f@@16) (FieldType alpha@@23))) (= (U_2_bool (MapType6Select (|lambda#17| |l#0@@32| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@44 $f@@16))  (=> (and (not (= $o@@44 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@44) |l#2@@16|))) |l#3@@16|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1367| :pattern ( (MapType6Select (|lambda#17| |l#0@@32| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@44 $f@@16)) )))
(assert (forall ((arg0@@278 T@U) (arg1@@153 T@U) (arg2@@87 T@U) (arg3@@58 Bool) ) (! (= (type (|lambda#18| arg0@@278 arg1@@153 arg2@@87 arg3@@58)) (MapType6Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@278 arg1@@153 arg2@@87 arg3@@58)) )))
(assert (forall ((|l#0@@33| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ($o@@45 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type |l#0@@33|) refType) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (type $o@@45) refType)) (= (type $f@@17) (FieldType alpha@@24))) (= (U_2_bool (MapType6Select (|lambda#18| |l#0@@33| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@45 $f@@17))  (=> (and (not (= $o@@45 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@45) |l#2@@17|))) |l#3@@17|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1368| :pattern ( (MapType6Select (|lambda#18| |l#0@@33| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@45 $f@@17)) )))
(assert (forall ((arg0@@279 T@U) (arg1@@154 T@U) (arg2@@88 T@U) (arg3@@59 Bool) ) (! (= (type (|lambda#19| arg0@@279 arg1@@154 arg2@@88 arg3@@59)) (MapType6Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@279 arg1@@154 arg2@@88 arg3@@59)) )))
(assert (forall ((|l#0@@34| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ($o@@46 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type |l#0@@34|) refType) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (type $o@@46) refType)) (= (type $f@@18) (FieldType alpha@@25))) (= (U_2_bool (MapType6Select (|lambda#19| |l#0@@34| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@46 $f@@18))  (=> (and (not (= $o@@46 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@46) |l#2@@18|))) |l#3@@18|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1369| :pattern ( (MapType6Select (|lambda#19| |l#0@@34| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@46 $f@@18)) )))
(assert (forall ((arg0@@280 T@U) (arg1@@155 T@U) (arg2@@89 T@U) (arg3@@60 Bool) ) (! (= (type (|lambda#20| arg0@@280 arg1@@155 arg2@@89 arg3@@60)) (MapType6Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@280 arg1@@155 arg2@@89 arg3@@60)) )))
(assert (forall ((|l#0@@35| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ($o@@47 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type |l#0@@35|) refType) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (type $o@@47) refType)) (= (type $f@@19) (FieldType alpha@@26))) (= (U_2_bool (MapType6Select (|lambda#20| |l#0@@35| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@47 $f@@19))  (=> (and (not (= $o@@47 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@47) |l#2@@19|))) |l#3@@19|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1370| :pattern ( (MapType6Select (|lambda#20| |l#0@@35| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@47 $f@@19)) )))
(assert (forall ((arg0@@281 T@U) (arg1@@156 T@U) (arg2@@90 T@U) (arg3@@61 Bool) ) (! (= (type (|lambda#21| arg0@@281 arg1@@156 arg2@@90 arg3@@61)) (MapType6Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@281 arg1@@156 arg2@@90 arg3@@61)) )))
(assert (forall ((|l#0@@36| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@20| Bool) ($o@@48 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type |l#0@@36|) refType) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (type $o@@48) refType)) (= (type $f@@20) (FieldType alpha@@27))) (= (U_2_bool (MapType6Select (|lambda#21| |l#0@@36| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@48 $f@@20))  (=> (and (not (= $o@@48 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@48) |l#2@@20|))) |l#3@@20|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1371| :pattern ( (MapType6Select (|lambda#21| |l#0@@36| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@48 $f@@20)) )))
(assert (forall ((arg0@@282 T@U) (arg1@@157 T@U) (arg2@@91 T@U) (arg3@@62 Bool) ) (! (= (type (|lambda#22| arg0@@282 arg1@@157 arg2@@91 arg3@@62)) (MapType6Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@282 arg1@@157 arg2@@91 arg3@@62)) )))
(assert (forall ((|l#0@@37| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@21| Bool) ($o@@49 T@U) ($f@@21 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type |l#0@@37|) refType) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (type $o@@49) refType)) (= (type $f@@21) (FieldType alpha@@28))) (= (U_2_bool (MapType6Select (|lambda#22| |l#0@@37| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@49 $f@@21))  (=> (and (not (= $o@@49 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@49) |l#2@@21|))) |l#3@@21|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1372| :pattern ( (MapType6Select (|lambda#22| |l#0@@37| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@49 $f@@21)) )))
(assert (forall ((arg0@@283 T@U) (arg1@@158 T@U) (arg2@@92 T@U) (arg3@@63 Bool) ) (! (= (type (|lambda#23| arg0@@283 arg1@@158 arg2@@92 arg3@@63)) (MapType6Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@283 arg1@@158 arg2@@92 arg3@@63)) )))
(assert (forall ((|l#0@@38| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ($o@@50 T@U) ($f@@22 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type |l#0@@38|) refType) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (type $o@@50) refType)) (= (type $f@@22) (FieldType alpha@@29))) (= (U_2_bool (MapType6Select (|lambda#23| |l#0@@38| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@50 $f@@22))  (=> (and (not (= $o@@50 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@50) |l#2@@22|))) |l#3@@22|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1373| :pattern ( (MapType6Select (|lambda#23| |l#0@@38| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@50 $f@@22)) )))
(assert (forall ((arg0@@284 T@U) (arg1@@159 T@U) (arg2@@93 T@U) (arg3@@64 Bool) ) (! (= (type (|lambda#24| arg0@@284 arg1@@159 arg2@@93 arg3@@64)) (MapType6Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@284 arg1@@159 arg2@@93 arg3@@64)) )))
(assert (forall ((|l#0@@39| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ($o@@51 T@U) ($f@@23 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type |l#0@@39|) refType) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (type $o@@51) refType)) (= (type $f@@23) (FieldType alpha@@30))) (= (U_2_bool (MapType6Select (|lambda#24| |l#0@@39| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@51 $f@@23))  (=> (and (not (= $o@@51 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@51) |l#2@@23|))) |l#3@@23|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1374| :pattern ( (MapType6Select (|lambda#24| |l#0@@39| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@51 $f@@23)) )))
(assert (forall ((arg0@@285 T@U) (arg1@@160 T@U) (arg2@@94 T@U) (arg3@@65 Bool) ) (! (= (type (|lambda#25| arg0@@285 arg1@@160 arg2@@94 arg3@@65)) (MapType6Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@285 arg1@@160 arg2@@94 arg3@@65)) )))
(assert (forall ((|l#0@@40| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@24| Bool) ($o@@52 T@U) ($f@@24 T@U) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type |l#0@@40|) refType) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (type $o@@52) refType)) (= (type $f@@24) (FieldType alpha@@31))) (= (U_2_bool (MapType6Select (|lambda#25| |l#0@@40| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@52 $f@@24))  (=> (and (not (= $o@@52 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@52) |l#2@@24|))) |l#3@@24|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1375| :pattern ( (MapType6Select (|lambda#25| |l#0@@40| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@52 $f@@24)) )))
(assert (forall ((arg0@@286 T@U) (arg1@@161 T@U) (arg2@@95 T@U) (arg3@@66 Bool) ) (! (= (type (|lambda#26| arg0@@286 arg1@@161 arg2@@95 arg3@@66)) (MapType6Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@286 arg1@@161 arg2@@95 arg3@@66)) )))
(assert (forall ((|l#0@@41| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@25| Bool) ($o@@53 T@U) ($f@@25 T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type |l#0@@41|) refType) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (type $o@@53) refType)) (= (type $f@@25) (FieldType alpha@@32))) (= (U_2_bool (MapType6Select (|lambda#26| |l#0@@41| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@53 $f@@25))  (=> (and (not (= $o@@53 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@53) |l#2@@25|))) |l#3@@25|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1376| :pattern ( (MapType6Select (|lambda#26| |l#0@@41| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@53 $f@@25)) )))
(assert (forall ((arg0@@287 T@U) (arg1@@162 T@U) (arg2@@96 T@U) (arg3@@67 Bool) ) (! (= (type (|lambda#27| arg0@@287 arg1@@162 arg2@@96 arg3@@67)) (MapType6Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@287 arg1@@162 arg2@@96 arg3@@67)) )))
(assert (forall ((|l#0@@42| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ($o@@54 T@U) ($f@@26 T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type |l#0@@42|) refType) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (type $o@@54) refType)) (= (type $f@@26) (FieldType alpha@@33))) (= (U_2_bool (MapType6Select (|lambda#27| |l#0@@42| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@54 $f@@26))  (=> (and (not (= $o@@54 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@54) |l#2@@26|))) |l#3@@26|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1377| :pattern ( (MapType6Select (|lambda#27| |l#0@@42| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@54 $f@@26)) )))
(assert (forall ((arg0@@288 T@U) (arg1@@163 T@U) (arg2@@97 T@U) (arg3@@68 Bool) ) (! (= (type (|lambda#28| arg0@@288 arg1@@163 arg2@@97 arg3@@68)) (MapType6Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@288 arg1@@163 arg2@@97 arg3@@68)) )))
(assert (forall ((|l#0@@43| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ($o@@55 T@U) ($f@@27 T@U) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type |l#0@@43|) refType) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (type $o@@55) refType)) (= (type $f@@27) (FieldType alpha@@34))) (= (U_2_bool (MapType6Select (|lambda#28| |l#0@@43| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@55 $f@@27))  (=> (and (not (= $o@@55 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@55) |l#2@@27|))) |l#3@@27|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1378| :pattern ( (MapType6Select (|lambda#28| |l#0@@43| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@55 $f@@27)) )))
(assert (forall ((arg0@@289 T@U) (arg1@@164 T@U) (arg2@@98 T@U) (arg3@@69 Bool) ) (! (= (type (|lambda#29| arg0@@289 arg1@@164 arg2@@98 arg3@@69)) (MapType6Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@289 arg1@@164 arg2@@98 arg3@@69)) )))
(assert (forall ((|l#0@@44| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ($o@@56 T@U) ($f@@28 T@U) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type |l#0@@44|) refType) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (type $o@@56) refType)) (= (type $f@@28) (FieldType alpha@@35))) (= (U_2_bool (MapType6Select (|lambda#29| |l#0@@44| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@56 $f@@28))  (=> (and (not (= $o@@56 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@56) |l#2@@28|))) |l#3@@28|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1379| :pattern ( (MapType6Select (|lambda#29| |l#0@@44| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@56 $f@@28)) )))
(assert (forall ((arg0@@290 T@U) (arg1@@165 T@U) (arg2@@99 T@U) (arg3@@70 Bool) ) (! (= (type (|lambda#30| arg0@@290 arg1@@165 arg2@@99 arg3@@70)) (MapType6Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@290 arg1@@165 arg2@@99 arg3@@70)) )))
(assert (forall ((|l#0@@45| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ($o@@57 T@U) ($f@@29 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type |l#0@@45|) refType) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (type $o@@57) refType)) (= (type $f@@29) (FieldType alpha@@36))) (= (U_2_bool (MapType6Select (|lambda#30| |l#0@@45| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@57 $f@@29))  (=> (and (not (= $o@@57 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@57) |l#2@@29|))) |l#3@@29|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1380| :pattern ( (MapType6Select (|lambda#30| |l#0@@45| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@57 $f@@29)) )))
(assert (forall ((arg0@@291 T@U) (arg1@@166 T@U) (arg2@@100 T@U) (arg3@@71 Bool) ) (! (= (type (|lambda#31| arg0@@291 arg1@@166 arg2@@100 arg3@@71)) (MapType6Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@291 arg1@@166 arg2@@100 arg3@@71)) )))
(assert (forall ((|l#0@@46| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ($o@@58 T@U) ($f@@30 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type |l#0@@46|) refType) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (type $o@@58) refType)) (= (type $f@@30) (FieldType alpha@@37))) (= (U_2_bool (MapType6Select (|lambda#31| |l#0@@46| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@58 $f@@30))  (=> (and (not (= $o@@58 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@58) |l#2@@30|))) |l#3@@30|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1381| :pattern ( (MapType6Select (|lambda#31| |l#0@@46| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@58 $f@@30)) )))
(assert (forall ((arg0@@292 T@U) (arg1@@167 T@U) (arg2@@101 T@U) (arg3@@72 Bool) ) (! (= (type (|lambda#32| arg0@@292 arg1@@167 arg2@@101 arg3@@72)) (MapType6Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@292 arg1@@167 arg2@@101 arg3@@72)) )))
(assert (forall ((|l#0@@47| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ($o@@59 T@U) ($f@@31 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type |l#0@@47|) refType) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (type $o@@59) refType)) (= (type $f@@31) (FieldType alpha@@38))) (= (U_2_bool (MapType6Select (|lambda#32| |l#0@@47| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@59 $f@@31))  (=> (and (not (= $o@@59 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@59) |l#2@@31|))) |l#3@@31|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1382| :pattern ( (MapType6Select (|lambda#32| |l#0@@47| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@59 $f@@31)) )))
(assert (forall ((arg0@@293 T@U) (arg1@@168 T@U) (arg2@@102 T@U) (arg3@@73 Bool) ) (! (= (type (|lambda#33| arg0@@293 arg1@@168 arg2@@102 arg3@@73)) (MapType6Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@293 arg1@@168 arg2@@102 arg3@@73)) )))
(assert (forall ((|l#0@@48| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ($o@@60 T@U) ($f@@32 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type |l#0@@48|) refType) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (type $o@@60) refType)) (= (type $f@@32) (FieldType alpha@@39))) (= (U_2_bool (MapType6Select (|lambda#33| |l#0@@48| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@60 $f@@32))  (=> (and (not (= $o@@60 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@60) |l#2@@32|))) |l#3@@32|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1383| :pattern ( (MapType6Select (|lambda#33| |l#0@@48| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@60 $f@@32)) )))
(assert (forall ((arg0@@294 T@U) (arg1@@169 T@U) (arg2@@103 T@U) (arg3@@74 Bool) ) (! (= (type (|lambda#34| arg0@@294 arg1@@169 arg2@@103 arg3@@74)) (MapType6Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@294 arg1@@169 arg2@@103 arg3@@74)) )))
(assert (forall ((|l#0@@49| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ($o@@61 T@U) ($f@@33 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type |l#0@@49|) refType) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (type $o@@61) refType)) (= (type $f@@33) (FieldType alpha@@40))) (= (U_2_bool (MapType6Select (|lambda#34| |l#0@@49| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@61 $f@@33))  (=> (and (not (= $o@@61 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@61) |l#2@@33|))) |l#3@@33|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1384| :pattern ( (MapType6Select (|lambda#34| |l#0@@49| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@61 $f@@33)) )))
(assert (forall ((arg0@@295 T@U) (arg1@@170 T@U) (arg2@@104 T@U) (arg3@@75 Bool) ) (! (= (type (|lambda#35| arg0@@295 arg1@@170 arg2@@104 arg3@@75)) (MapType6Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@295 arg1@@170 arg2@@104 arg3@@75)) )))
(assert (forall ((|l#0@@50| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ($o@@62 T@U) ($f@@34 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type |l#0@@50|) refType) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (type $o@@62) refType)) (= (type $f@@34) (FieldType alpha@@41))) (= (U_2_bool (MapType6Select (|lambda#35| |l#0@@50| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@62 $f@@34))  (=> (and (not (= $o@@62 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@62) |l#2@@34|))) |l#3@@34|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1385| :pattern ( (MapType6Select (|lambda#35| |l#0@@50| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@62 $f@@34)) )))
(assert (forall ((arg0@@296 T@U) (arg1@@171 T@U) (arg2@@105 T@U) (arg3@@76 Bool) ) (! (= (type (|lambda#36| arg0@@296 arg1@@171 arg2@@105 arg3@@76)) (MapType6Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@296 arg1@@171 arg2@@105 arg3@@76)) )))
(assert (forall ((|l#0@@51| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ($o@@63 T@U) ($f@@35 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type |l#0@@51|) refType) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (type $o@@63) refType)) (= (type $f@@35) (FieldType alpha@@42))) (= (U_2_bool (MapType6Select (|lambda#36| |l#0@@51| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@63 $f@@35))  (=> (and (not (= $o@@63 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@63) |l#2@@35|))) |l#3@@35|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1386| :pattern ( (MapType6Select (|lambda#36| |l#0@@51| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@63 $f@@35)) )))
(assert (forall ((arg0@@297 T@U) (arg1@@172 T@U) (arg2@@106 T@U) (arg3@@77 Bool) ) (! (= (type (|lambda#37| arg0@@297 arg1@@172 arg2@@106 arg3@@77)) (MapType6Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@297 arg1@@172 arg2@@106 arg3@@77)) )))
(assert (forall ((|l#0@@52| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@36| Bool) ($o@@64 T@U) ($f@@36 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type |l#0@@52|) refType) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (type $o@@64) refType)) (= (type $f@@36) (FieldType alpha@@43))) (= (U_2_bool (MapType6Select (|lambda#37| |l#0@@52| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@64 $f@@36))  (=> (and (not (= $o@@64 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@64) |l#2@@36|))) |l#3@@36|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1387| :pattern ( (MapType6Select (|lambda#37| |l#0@@52| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@64 $f@@36)) )))
(assert (forall ((arg0@@298 T@U) (arg1@@173 T@U) (arg2@@107 T@U) (arg3@@78 Bool) ) (! (= (type (|lambda#38| arg0@@298 arg1@@173 arg2@@107 arg3@@78)) (MapType6Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@298 arg1@@173 arg2@@107 arg3@@78)) )))
(assert (forall ((|l#0@@53| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ($o@@65 T@U) ($f@@37 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type |l#0@@53|) refType) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (type $o@@65) refType)) (= (type $f@@37) (FieldType alpha@@44))) (= (U_2_bool (MapType6Select (|lambda#38| |l#0@@53| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@65 $f@@37))  (=> (and (not (= $o@@65 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@65) |l#2@@37|))) |l#3@@37|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1388| :pattern ( (MapType6Select (|lambda#38| |l#0@@53| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@65 $f@@37)) )))
(assert (forall ((arg0@@299 T@U) (arg1@@174 T@U) (arg2@@108 T@U) (arg3@@79 Bool) ) (! (= (type (|lambda#39| arg0@@299 arg1@@174 arg2@@108 arg3@@79)) (MapType6Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@299 arg1@@174 arg2@@108 arg3@@79)) )))
(assert (forall ((|l#0@@54| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@38| Bool) ($o@@66 T@U) ($f@@38 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type |l#0@@54|) refType) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (type $o@@66) refType)) (= (type $f@@38) (FieldType alpha@@45))) (= (U_2_bool (MapType6Select (|lambda#39| |l#0@@54| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@66 $f@@38))  (=> (and (not (= $o@@66 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@66) |l#2@@38|))) |l#3@@38|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1389| :pattern ( (MapType6Select (|lambda#39| |l#0@@54| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@66 $f@@38)) )))
(assert (forall ((arg0@@300 T@U) (arg1@@175 T@U) (arg2@@109 T@U) (arg3@@80 Bool) ) (! (= (type (|lambda#40| arg0@@300 arg1@@175 arg2@@109 arg3@@80)) (MapType6Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@300 arg1@@175 arg2@@109 arg3@@80)) )))
(assert (forall ((|l#0@@55| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@39| Bool) ($o@@67 T@U) ($f@@39 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type |l#0@@55|) refType) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (type $o@@67) refType)) (= (type $f@@39) (FieldType alpha@@46))) (= (U_2_bool (MapType6Select (|lambda#40| |l#0@@55| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@67 $f@@39))  (=> (and (not (= $o@@67 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@67) |l#2@@39|))) |l#3@@39|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1390| :pattern ( (MapType6Select (|lambda#40| |l#0@@55| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@67 $f@@39)) )))
(assert (forall ((|l#0@@56| T@U) (|l#1@@40| T@U) (|$l#0#heap#0| T@U) (|$l#0#i#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@56|) (SeqType BoxType)) (= (type |l#1@@40|) (SeqType BoxType))) (= (type |$l#0#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0|) BoxType)) (= (MapType2Select (|lambda#41| |l#0@@56| |l#1@@40|) |$l#0#heap#0| |$l#0#i#0|) ($Box (bool_2_U (F2__X__s.__default.mul__F2__X__digit |l#0@@56| |l#1@@40| (U_2_int ($Unbox intType |$l#0#i#0|))))))) :qid |F2Xsdfy.67:31| :skolemid |1391| :pattern ( (MapType2Select (|lambda#41| |l#0@@56| |l#1@@40|) |$l#0#heap#0| |$l#0#i#0|)) )))
(assert (forall ((|l#0@@57| T@U) (|l#1@@41| Int) (|$l#0#heap#0@@0| T@U) (|$l#0#i#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@57|) TyType) (= (type |$l#0#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#42| |l#0@@57| |l#1@@41|) |$l#0#heap#0@@0| |$l#0#i#0@@0|))  (and ($IsBox |$l#0#i#0@@0| |l#0@@57|) (<= |l#1@@41| (U_2_int ($Unbox intType |$l#0#i#0@@0|)))))) :qid |DafnyPreludebpl.22:1| :skolemid |1392| :pattern ( (MapType2Select (|lambda#42| |l#0@@57| |l#1@@41|) |$l#0#heap#0@@0| |$l#0#i#0@@0|)) )))
(assert (forall ((|l#0@@58| Bool) (|$l#0#o#0| T@U) ) (!  (=> (= (type |$l#0#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#43| |l#0@@58|) |$l#0#o#0|)) |l#0@@58|)) :qid |unknown.0:0| :skolemid |1393| :pattern ( (MapType0Select (|lambda#43| |l#0@@58|) |$l#0#o#0|)) )))
(assert (forall ((|l#0@@59| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#i#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@59|) (MapType0Type BoxType boolType)) (= (type |$l#0#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@1|) BoxType)) (= (MapType2Select (|lambda#44| |l#0@@59|) |$l#0#heap#0@@1| |$l#0#i#0@@1|) |l#0@@59|)) :qid |F2Xsdfy.71:20| :skolemid |1394| :pattern ( (MapType2Select (|lambda#44| |l#0@@59|) |$l#0#heap#0@@1| |$l#0#i#0@@1|)) )))
(assert (forall ((|l#0@@60| T@U) (|$l#0#ly#0| T@U) ) (!  (=> (and (= (type |l#0@@60|) HandleTypeType) (= (type |$l#0#ly#0|) LayerTypeType)) (= (MapType0Select (|lambda#45| |l#0@@60|) |$l#0#ly#0|) |l#0@@60|)) :qid |F2Xsdfy.71:20| :skolemid |1395| :pattern ( (MapType0Select (|lambda#45| |l#0@@60|) |$l#0#ly#0|)) )))
(assert (forall ((|l#0@@61| T@U) (|$l#0#heap#0@@2| T@U) (|$l#0#i#0@@2| T@U) ) (!  (=> (and (and (= (type |l#0@@61|) BoxType) (= (type |$l#0#heap#0@@2|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@2|) BoxType)) (= (MapType2Select (|lambda#51| |l#0@@61|) |$l#0#heap#0@@2| |$l#0#i#0@@2|) |l#0@@61|)) :qid |unknown.0:0| :skolemid |1396| :pattern ( (MapType2Select (|lambda#51| |l#0@@61|) |$l#0#heap#0@@2| |$l#0#i#0@@2|)) )))
(assert (forall ((|l#0@@62| T@U) (|$l#0#heap#0@@3| T@U) (|$l#0#i#0@@3| T@U) ) (!  (=> (and (and (= (type |l#0@@62|) TyType) (= (type |$l#0#heap#0@@3|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@3|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#52| |l#0@@62|) |$l#0#heap#0@@3| |$l#0#i#0@@3|)) ($IsBox |$l#0#i#0@@3| |l#0@@62|))) :qid |DafnyPreludebpl.22:1| :skolemid |1397| :pattern ( (MapType2Select (|lambda#52| |l#0@@62|) |$l#0#heap#0@@3| |$l#0#i#0@@3|)) )))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun BaseFuel_Bits_s._default.bits_of_int () T@U)
(declare-fun StartFuelAssert_Bits_s._default.bits_of_int () T@U)
(declare-fun StartFuelAssert_Bits_s._default.zeroes () T@U)
(declare-fun StartFuelAssert_Bits_s._default.ones () T@U)
(declare-fun StartFuelAssert_F2_X_s._default.reverse () T@U)
(declare-fun StartFuelAssert_F2_X_s._default.xor () T@U)
(declare-fun StartFuelAssert_F2_X_s._default.mul_F2_X () T@U)
(declare-fun StartFuelAssert_CRC32_C._default.crc32_c () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32 () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64 () T@U)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq () T@U)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq () T@U)
(declare-fun StartFuel_Math._default.power2 () T@U)
(declare-fun StartFuelAssert_Math._default.power2 () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@@5 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun MoreFuel_NativePackedInts._default.unpack_LittleEndian_Uint320 () T@U)
(declare-fun |s#0@@39| () T@U)
(declare-fun |t#0@@3| () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type BaseFuel_Bits_s._default.bits_of_int) LayerTypeType) (= (type StartFuelAssert_Bits_s._default.bits_of_int) LayerTypeType)) (= (type StartFuelAssert_Bits_s._default.zeroes) LayerTypeType)) (= (type StartFuelAssert_Bits_s._default.ones) LayerTypeType)) (= (type StartFuelAssert_F2_X_s._default.reverse) LayerTypeType)) (= (type StartFuelAssert_F2_X_s._default.xor) LayerTypeType)) (= (type StartFuelAssert_F2_X_s._default.mul_F2_X) LayerTypeType)) (= (type StartFuelAssert_CRC32_C._default.crc32_c) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) LayerTypeType)) (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) LayerTypeType)) (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) LayerTypeType)) (= (type StartFuel_Math._default.power2) LayerTypeType)) (= (type StartFuelAssert_Math._default.power2) LayerTypeType)) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type MoreFuel_NativePackedInts._default.unpack_LittleEndian_Uint320) LayerTypeType)) (= (type |s#0@@39|) (SeqType BoxType))) (= (type |t#0@@3|) (SeqType BoxType))))
(push 1)
(set-info :boogie-vc-id Impl$$BitLemmas.__default.eq__from__unpack__LittleEndian__Uint32__eq)
(assert (not (=> (= (ControlFlow 0 0) 274577) (let ((anon0_correct  (=> (and (= StartFuel_Bits_s._default.bits_of_int ($LS BaseFuel_Bits_s._default.bits_of_int)) (= StartFuelAssert_Bits_s._default.bits_of_int ($LS ($LS BaseFuel_Bits_s._default.bits_of_int)))) (=> (and (and (and (= (AsFuelBottom BaseFuel_Bits_s._default.bits_of_int) BaseFuel_Bits_s._default.bits_of_int) (= (AsFuelBottom StartFuel_Bits_s._default.zeroes) StartFuel_Bits_s._default.zeroes)) (and (= (AsFuelBottom StartFuelAssert_Bits_s._default.zeroes) StartFuelAssert_Bits_s._default.zeroes) (= (AsFuelBottom StartFuel_Bits_s._default.ones) StartFuel_Bits_s._default.ones))) (and (and (= (AsFuelBottom StartFuelAssert_Bits_s._default.ones) StartFuelAssert_Bits_s._default.ones) (= (AsFuelBottom StartFuel_F2_X_s._default.reverse) StartFuel_F2_X_s._default.reverse)) (and (= (AsFuelBottom StartFuelAssert_F2_X_s._default.reverse) StartFuelAssert_F2_X_s._default.reverse) (= (AsFuelBottom StartFuel_F2_X_s._default.xor) StartFuel_F2_X_s._default.xor)))) (=> (and (and (and (and (= (AsFuelBottom StartFuelAssert_F2_X_s._default.xor) StartFuelAssert_F2_X_s._default.xor) (= (AsFuelBottom StartFuel_F2_X_s._default.mul_F2_X) StartFuel_F2_X_s._default.mul_F2_X)) (and (= (AsFuelBottom StartFuelAssert_F2_X_s._default.mul_F2_X) StartFuelAssert_F2_X_s._default.mul_F2_X) (= (AsFuelBottom StartFuel_CRC32_C._default.crc32_c) StartFuel_CRC32_C._default.crc32_c))) (and (and (= (AsFuelBottom StartFuelAssert_CRC32_C._default.crc32_c) StartFuelAssert_CRC32_C._default.crc32_c) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32)) (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64)))) (and (and (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq)) (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq))) (and (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) (= (AsFuelBottom StartFuel_Math._default.power2) StartFuel_Math._default.power2)) (and (= (AsFuelBottom StartFuelAssert_Math._default.power2) StartFuelAssert_Math._default.power2) (= $_Frame@0 (|lambda#26| null $Heap@@5 alloc false)))))) (and (=> (= (ControlFlow 0 73761) (- 0 274940)) (forall (($o@@68 T@U) ($f@@40 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (= (type $o@@68) refType) (= (type $f@@40) (FieldType alpha@@47))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@68 $f@@40)))) :qid |BitLemmasidfy.337:38| :skolemid |1058| :no-pattern (type $o@@68) :no-pattern (type $f@@40) :no-pattern (U_2_int $o@@68) :no-pattern (U_2_bool $o@@68) :no-pattern (U_2_int $f@@40) :no-pattern (U_2_bool $f@@40) ))) (=> (forall (($o@@69 T@U) ($f@@41 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (= (type $o@@69) refType) (= (type $f@@41) (FieldType alpha@@48))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@69 $f@@41)))) :qid |BitLemmasidfy.337:38| :skolemid |1058| :no-pattern (type $o@@69) :no-pattern (type $f@@41) :no-pattern (U_2_int $o@@69) :no-pattern (U_2_bool $o@@69) :no-pattern (U_2_int $f@@41) :no-pattern (U_2_bool $f@@41) )) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (= $Heap@@5 $Heap@0) (= StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 ($LS MoreFuel_NativePackedInts._default.unpack_LittleEndian_Uint320))) (and (= StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32 ($LS ($LS MoreFuel_NativePackedInts._default.unpack_LittleEndian_Uint320))) (= (AsFuelBottom MoreFuel_NativePackedInts._default.unpack_LittleEndian_Uint320) MoreFuel_NativePackedInts._default.unpack_LittleEndian_Uint320))) (and (=> (= (ControlFlow 0 73761) (- 0 275006)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |s#0@@39|)))) (and (=> (= (ControlFlow 0 73761) (- 0 275026)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |t#0@@3|)))) (and (=> (= (ControlFlow 0 73761) (- 0 275048)) (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@39| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |t#0@@3| (LitInt 0)))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@39| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |t#0@@3| (LitInt 0))))) (and (=> (= (ControlFlow 0 73761) (- 0 275074)) (and (<= 0 (LitInt 1)) (< (LitInt 1) (|Seq#Length| |s#0@@39|)))) (and (=> (= (ControlFlow 0 73761) (- 0 275094)) (and (<= 0 (LitInt 1)) (< (LitInt 1) (|Seq#Length| |t#0@@3|)))) (and (=> (= (ControlFlow 0 73761) (- 0 275116)) (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@39| (LitInt 1)))) (U_2_int ($Unbox intType (|Seq#Index| |t#0@@3| (LitInt 1)))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@39| (LitInt 1)))) (U_2_int ($Unbox intType (|Seq#Index| |t#0@@3| (LitInt 1))))) (and (=> (= (ControlFlow 0 73761) (- 0 275142)) (and (<= 0 (LitInt 2)) (< (LitInt 2) (|Seq#Length| |s#0@@39|)))) (and (=> (= (ControlFlow 0 73761) (- 0 275162)) (and (<= 0 (LitInt 2)) (< (LitInt 2) (|Seq#Length| |t#0@@3|)))) (and (=> (= (ControlFlow 0 73761) (- 0 275184)) (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@39| (LitInt 2)))) (U_2_int ($Unbox intType (|Seq#Index| |t#0@@3| (LitInt 2)))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@39| (LitInt 2)))) (U_2_int ($Unbox intType (|Seq#Index| |t#0@@3| (LitInt 2))))) (and (=> (= (ControlFlow 0 73761) (- 0 275210)) (and (<= 0 (LitInt 3)) (< (LitInt 3) (|Seq#Length| |s#0@@39|)))) (and (=> (= (ControlFlow 0 73761) (- 0 275230)) (and (<= 0 (LitInt 3)) (< (LitInt 3) (|Seq#Length| |t#0@@3|)))) (and (=> (= (ControlFlow 0 73761) (- 0 275252)) (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@39| (LitInt 3)))) (U_2_int ($Unbox intType (|Seq#Index| |t#0@@3| (LitInt 3)))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| |s#0@@39| (LitInt 3)))) (U_2_int ($Unbox intType (|Seq#Index| |t#0@@3| (LitInt 3))))) (and (=> (= (ControlFlow 0 73761) (- 0 275280)) (|Seq#Equal| |s#0@@39| |t#0@@3|)) (=> (|Seq#Equal| |s#0@@39| |t#0@@3|) (=> (= (ControlFlow 0 73761) (- 0 275286)) (|Seq#Equal| |s#0@@39| |t#0@@3|))))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@5) ($IsHeapAnchor $Heap@@5)) (and ($Is |s#0@@39| (TSeq Tclass.NativeTypes.byte)) ($IsAlloc |s#0@@39| (TSeq Tclass.NativeTypes.byte) $Heap@@5))) (=> (and (and (and ($Is |t#0@@3| (TSeq Tclass.NativeTypes.byte)) ($IsAlloc |t#0@@3| (TSeq Tclass.NativeTypes.byte) $Heap@@5)) (= 15 $FunctionContextHeight)) (and (and (= (|Seq#Length| |s#0@@39|) (LitInt 4)) (= (|Seq#Length| |t#0@@3|) (LitInt 4))) (and (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32 |s#0@@39|) (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32 |t#0@@3|)) (= (ControlFlow 0 274577) 73761)))) anon0_correct)))) PreconditionGeneratedEntry_correct))) ))
(check-sat)
