(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun NoTraitAtAll () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc8 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun class._System.__tuple_h3 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#3._#Make3| () T@U)
(declare-fun Tagclass._System.__tuple_h3 () T@U)
(declare-fun Tagclass._System.___hFunc5 () T@U)
(declare-fun class._System.__tuple_h2 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.__tuple_h2 () T@U)
(declare-fun class._module.SHA256__state () T@U)
(declare-fun |##_module.SHA256_state.SHA256_state_c| () T@U)
(declare-fun Tagclass._module.word () T@U)
(declare-fun Tagclass._module.atoh__Type () T@U)
(declare-fun Tagclass._module.SHA256__state () T@U)
(declare-fun class._module.__default () T@U)
(declare-fun Tagclass._module.__default () T@U)
(declare-fun Tagclass._module.SHA256Trace () T@U)
(declare-fun Tagclass._module.byte () T@U)
(declare-fun Tagclass._module.uint64 () T@U)
(declare-fun Tagclass._module.state () T@U)
(declare-fun Tagclass._module.world () T@U)
(declare-fun Tagclass._module.mode () T@U)
(declare-fun Tagclass._module.priv () T@U)
(declare-fun Tagclass._module.PSR () T@U)
(declare-fun Tagclass._module.UserState () T@U)
(declare-fun Tagclass._module.exception () T@U)
(declare-fun Tagclass._module.ARMReg () T@U)
(declare-fun Tagclass._module.AbsPTE () T@U)
(declare-fun Tagclass._module.Maybe () T@U)
(declare-fun Tagclass._module.memstate () T@U)
(declare-fun Tagclass._module.addr () T@U)
(declare-fun Tagclass._module.SCR () T@U)
(declare-fun Tagclass._module.TTBR () T@U)
(declare-fun Tagclass._module.SReg () T@U)
(declare-fun Tagclass._module.config () T@U)
(declare-fun Tagclass._module.operand () T@U)
(declare-fun Tagclass._module.Shift () T@U)
(declare-fun Tagclass._module.ocmp () T@U)
(declare-fun Tagclass._module.obool () T@U)
(declare-fun Tagclass._module.ins () T@U)
(declare-fun Tagclass._module.codes () T@U)
(declare-fun Tagclass._module.code () T@U)
(declare-fun class._module.atoh__Type () T@U)
(declare-fun |##_module.atoh_Type.atoh_c| () T@U)
(declare-fun class._module.SHA256Trace () T@U)
(declare-fun |##_module.SHA256Trace.SHA256Trace_c| () T@U)
(declare-fun class._module.ARMReg () T@U)
(declare-fun |##_module.ARMReg.R0| () T@U)
(declare-fun |##_module.ARMReg.R1| () T@U)
(declare-fun |##_module.ARMReg.R2| () T@U)
(declare-fun |##_module.ARMReg.R3| () T@U)
(declare-fun |##_module.ARMReg.R4| () T@U)
(declare-fun |##_module.ARMReg.R5| () T@U)
(declare-fun |##_module.ARMReg.R6| () T@U)
(declare-fun |##_module.ARMReg.R7| () T@U)
(declare-fun |##_module.ARMReg.R8| () T@U)
(declare-fun |##_module.ARMReg.R9| () T@U)
(declare-fun |##_module.ARMReg.R10| () T@U)
(declare-fun |##_module.ARMReg.R11| () T@U)
(declare-fun |##_module.ARMReg.R12| () T@U)
(declare-fun |##_module.ARMReg.SP| () T@U)
(declare-fun |##_module.ARMReg.LR| () T@U)
(declare-fun class._module.SReg () T@U)
(declare-fun |##_module.SReg.cpsr| () T@U)
(declare-fun |##_module.SReg.spsr| () T@U)
(declare-fun |##_module.SReg.SCR| () T@U)
(declare-fun |##_module.SReg.SCTLR| () T@U)
(declare-fun |##_module.SReg.VBAR| () T@U)
(declare-fun |##_module.SReg.ttbr0| () T@U)
(declare-fun |##_module.SReg.TLBIALL| () T@U)
(declare-fun class._module.config () T@U)
(declare-fun |##_module.config.Config| () T@U)
(declare-fun class._module.PSR () T@U)
(declare-fun |##_module.PSR.PSR| () T@U)
(declare-fun class._module.SCR () T@U)
(declare-fun |##_module.SCR.SCRT| () T@U)
(declare-fun class._module.TTBR () T@U)
(declare-fun |##_module.TTBR.TTBR| () T@U)
(declare-fun class._module.RNG () T@U)
(declare-fun |##_module.RNG.RNG| () T@U)
(declare-fun Tagclass._module.RNG () T@U)
(declare-fun class._module.Shift () T@U)
(declare-fun |##_module.Shift.LSLShift| () T@U)
(declare-fun Tagclass._module.shift__amount () T@U)
(declare-fun |##_module.Shift.LSRShift| () T@U)
(declare-fun |##_module.Shift.RORShift| () T@U)
(declare-fun class._module.operand () T@U)
(declare-fun |##_module.operand.OConst| () T@U)
(declare-fun |##_module.operand.OReg| () T@U)
(declare-fun |##_module.operand.OShift| () T@U)
(declare-fun |##_module.operand.OSReg| () T@U)
(declare-fun |##_module.operand.OSP| () T@U)
(declare-fun |##_module.operand.OLR| () T@U)
(declare-fun class._module.memstate () T@U)
(declare-fun |##_module.memstate.MemState| () T@U)
(declare-fun class._module.state () T@U)
(declare-fun |##_module.state.State| () T@U)
(declare-fun class._module.mode () T@U)
(declare-fun |##_module.mode.User| () T@U)
(declare-fun |##_module.mode.FIQ| () T@U)
(declare-fun |##_module.mode.IRQ| () T@U)
(declare-fun |##_module.mode.Supervisor| () T@U)
(declare-fun |##_module.mode.Abort| () T@U)
(declare-fun |##_module.mode.Undefined| () T@U)
(declare-fun |##_module.mode.Monitor| () T@U)
(declare-fun class._module.priv () T@U)
(declare-fun |##_module.priv.PL0| () T@U)
(declare-fun |##_module.priv.PL1| () T@U)
(declare-fun class._module.world () T@U)
(declare-fun |##_module.world.Secure| () T@U)
(declare-fun |##_module.world.NotSecure| () T@U)
(declare-fun class._module.exception () T@U)
(declare-fun |##_module.exception.ExAbt| () T@U)
(declare-fun |##_module.exception.ExUnd| () T@U)
(declare-fun |##_module.exception.ExIRQ| () T@U)
(declare-fun |##_module.exception.ExFIQ| () T@U)
(declare-fun |##_module.exception.ExSVC| () T@U)
(declare-fun class._module.UserState () T@U)
(declare-fun |##_module.UserState.UserState| () T@U)
(declare-fun class._module.ins () T@U)
(declare-fun |##_module.ins.ADD| () T@U)
(declare-fun |##_module.ins.SUB| () T@U)
(declare-fun |##_module.ins.MUL| () T@U)
(declare-fun |##_module.ins.UDIV| () T@U)
(declare-fun |##_module.ins.AND| () T@U)
(declare-fun |##_module.ins.ORR| () T@U)
(declare-fun |##_module.ins.EOR| () T@U)
(declare-fun |##_module.ins.LSL| () T@U)
(declare-fun |##_module.ins.LSR| () T@U)
(declare-fun |##_module.ins.REV| () T@U)
(declare-fun |##_module.ins.MOV| () T@U)
(declare-fun |##_module.ins.MOVW| () T@U)
(declare-fun |##_module.ins.MOVT| () T@U)
(declare-fun |##_module.ins.MVN| () T@U)
(declare-fun |##_module.ins.LDR| () T@U)
(declare-fun |##_module.ins.LDR_global| () T@U)
(declare-fun |##_module.ins.LDR_reloc| () T@U)
(declare-fun |##_module.ins.STR| () T@U)
(declare-fun |##_module.ins.STR_global| () T@U)
(declare-fun |##_module.ins.MRS| () T@U)
(declare-fun |##_module.ins.MSR| () T@U)
(declare-fun |##_module.ins.MRC| () T@U)
(declare-fun |##_module.ins.MCR| () T@U)
(declare-fun |##_module.ins.CPSID_IAF| () T@U)
(declare-fun |##_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE| () T@U)
(declare-fun |##_module.ins.LDR_rng| () T@U)
(declare-fun class._module.ocmp () T@U)
(declare-fun |##_module.ocmp.OEq| () T@U)
(declare-fun |##_module.ocmp.ONe| () T@U)
(declare-fun |##_module.ocmp.OLe| () T@U)
(declare-fun |##_module.ocmp.OGe| () T@U)
(declare-fun |##_module.ocmp.OLt| () T@U)
(declare-fun |##_module.ocmp.OGt| () T@U)
(declare-fun |##_module.ocmp.OTstEq| () T@U)
(declare-fun |##_module.ocmp.OTstNe| () T@U)
(declare-fun class._module.obool () T@U)
(declare-fun |##_module.obool.OCmp| () T@U)
(declare-fun class._module.codes () T@U)
(declare-fun |##_module.codes.CNil| () T@U)
(declare-fun |##_module.codes.va_CCons| () T@U)
(declare-fun class._module.code () T@U)
(declare-fun |##_module.code.Ins| () T@U)
(declare-fun |##_module.code.Block| () T@U)
(declare-fun |##_module.code.IfElse| () T@U)
(declare-fun |##_module.code.While| () T@U)
(declare-fun class._module.AbsPTE () T@U)
(declare-fun |##_module.AbsPTE.AbsPTE| () T@U)
(declare-fun class._module.Maybe () T@U)
(declare-fun |##_module.Maybe.Nothing| () T@U)
(declare-fun |##_module.Maybe.Just| () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Type (T@T) T@T)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun NameFamilyType () T@T)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.__tuple_h2._0 (T@U) T@U)
(declare-fun _System.__tuple_h2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun nat_from_bv32 ((_ BitVec 32)) Int)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc8 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc8_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc8_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc8_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc8_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc8_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc8_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc8_6 (T@U) T@U)
(declare-fun Tclass._System.___hFunc8_7 (T@U) T@U)
(declare-fun Tclass._System.___hFunc8_8 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5TypeInv6 (T@T) T@T)
(declare-fun MapType5TypeInv7 (T@T) T@T)
(declare-fun MapType5TypeInv8 (T@T) T@T)
(declare-fun MapType5TypeInv9 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply8 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle8 (T@U T@U T@U) T@U)
(declare-fun Requires8 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads8 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType6Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6TypeInv2 (T@T) T@T)
(declare-fun MapType6TypeInv3 (T@T) T@T)
(declare-fun MapType6TypeInv4 (T@T) T@T)
(declare-fun MapType6TypeInv5 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |#_System._tuple#3._#Make3| (T@U T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.__tuple_h3.___hMake3_q (T@U) Bool)
(declare-fun Tclass._System.__tuple_h3 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.__tuple_h3_0 (T@U) T@U)
(declare-fun Tclass._System.__tuple_h3_1 (T@U) T@U)
(declare-fun Tclass._System.__tuple_h3_2 (T@U) T@U)
(declare-fun _System.__tuple_h3._0 (T@U) T@U)
(declare-fun _System.__tuple_h3._1 (T@U) T@U)
(declare-fun _System.__tuple_h3._2 (T@U) T@U)
(declare-fun |$IsA#_System.__tuple_h3| (T@U) Bool)
(declare-fun Tclass._System.___hFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_5 (T@U) T@U)
(declare-fun MapType7Type (T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType7TypeInv0 (T@T) T@T)
(declare-fun MapType7TypeInv1 (T@T) T@T)
(declare-fun MapType7TypeInv2 (T@T) T@T)
(declare-fun MapType7TypeInv3 (T@T) T@T)
(declare-fun MapType7TypeInv4 (T@T) T@T)
(declare-fun MapType7TypeInv5 (T@T) T@T)
(declare-fun MapType7TypeInv6 (T@T) T@T)
(declare-fun MapType7Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType7Store (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle5 (T@U T@U T@U) T@U)
(declare-fun Requires5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.__tuple_h2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.__tuple_h2 (T@U T@U) T@U)
(declare-fun Tclass._System.__tuple_h2_0 (T@U) T@U)
(declare-fun Tclass._System.__tuple_h2_1 (T@U) T@U)
(declare-fun |$IsA#_System.__tuple_h2| (T@U) Bool)
(declare-fun |#_module.SHA256_state.SHA256_state_c| (T@U T@U T@U) T@U)
(declare-fun _module.SHA256__state.SHA256__state__c_q (T@U) Bool)
(declare-fun Tclass._module.word () T@U)
(declare-fun Tclass._module.atoh__Type () T@U)
(declare-fun Tclass._module.SHA256__state () T@U)
(declare-fun _module.SHA256__state.H (T@U) T@U)
(declare-fun _module.SHA256__state.W (T@U) T@U)
(declare-fun _module.SHA256__state.atoh (T@U) T@U)
(declare-fun |$IsA#_module.SHA256__state| (T@U) Bool)
(declare-fun Tclass._module.__default () T@U)
(declare-fun Tclass._module.SHA256Trace () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.PartialSHA256TraceHasCorrectWs (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectWs#canCall| (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectWs#requires| (T@U) Bool)
(declare-fun _module.SHA256Trace.W (T@U) T@U)
(declare-fun _module.SHA256Trace.M (T@U) T@U)
(declare-fun StartFuel__module._default.SSIG1 () T@U)
(declare-fun StartFuel__module._default.SSIG0 () T@U)
(declare-fun _module.SHA256Trace.SHA256Trace__c_q (T@U) Bool)
(declare-fun _module.__default.TStep (Int) Bool)
(declare-fun _module.__default.isUInt32 (Int) Bool)
(declare-fun |_module.__default.TStep#canCall| (Int) Bool)
(declare-fun |_module.__default.SSIG1#canCall| (Int) Bool)
(declare-fun |_module.__default.BitwiseAdd32#canCall| (Int Int) Bool)
(declare-fun _module.__default.SSIG1 (T@U Int) Int)
(declare-fun |_module.__default.SSIG0#canCall| (Int) Bool)
(declare-fun _module.__default.BitwiseAdd32 (Int Int) Int)
(declare-fun _module.__default.SSIG0 (T@U Int) Int)
(declare-fun _module.SHA256Trace.atoh (T@U) T@U)
(declare-fun _module.SHA256Trace.H (T@U) T@U)
(declare-fun _module.__default.CorrectlyAccumulatedHsForBlock (T@U Int) Bool)
(declare-fun |_module.__default.CorrectlyAccumulatedHsForBlock#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.CorrectlyAccumulatedHsForBlock#requires| (T@U Int) Bool)
(declare-fun _module.__default.ConvertAtoHToSeq (T@U) T@U)
(declare-fun |_module.__default.ConvertAtoHToSeq#canCall| (T@U) Bool)
(declare-fun _module.__default.CorrectlyAccumulatedHsForAllBlocks (T@U) Bool)
(declare-fun |_module.__default.CorrectlyAccumulatedHsForAllBlocks#canCall| (T@U) Bool)
(declare-fun |_module.__default.CorrectlyAccumulatedHsForAllBlocks#requires| (T@U) Bool)
(declare-fun _module.__default.PartialSHA256TraceHasCorrectHs (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectHs#canCall| (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectHs#requires| (T@U) Bool)
(declare-fun StartFuel__module._default.InitialH_SHA256 () T@U)
(declare-fun _module.__default.InitialH__SHA256 (T@U Int) Int)
(declare-fun |_module.__default.InitialH__SHA256#canCall| (Int) Bool)
(declare-fun _module.__default.PartialSHA256TraceHasCorrectatohsWf (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectatohsWf#canCall| (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectatohsWf#requires| (T@U) Bool)
(declare-fun _module.__default.TBlk (Int) Bool)
(declare-fun _module.__default.PartialSHA256TraceHasCorrectatohsOpaque (T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#canCall| (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#requires| (T@U T@U) Bool)
(declare-fun StartFuel__module._default.BSIG1 () T@U)
(declare-fun StartFuel__module._default.Ch () T@U)
(declare-fun StartFuel__module._default.K_SHA256 () T@U)
(declare-fun StartFuel__module._default.BSIG0 () T@U)
(declare-fun StartFuel__module._default.Maj () T@U)
(declare-fun _module.atoh__Type.atoh__c_q (T@U) Bool)
(declare-fun |_module.__default.BSIG1#canCall| (Int) Bool)
(declare-fun _module.atoh__Type.e (T@U) Int)
(declare-fun _module.atoh__Type.h (T@U) Int)
(declare-fun _module.__default.BSIG1 (T@U Int) Int)
(declare-fun |_module.__default.Ch#canCall| (Int Int Int) Bool)
(declare-fun _module.atoh__Type.f (T@U) Int)
(declare-fun _module.atoh__Type.g (T@U) Int)
(declare-fun _module.__default.Ch (T@U Int Int Int) Int)
(declare-fun |_module.__default.K__SHA256#canCall| (Int) Bool)
(declare-fun _module.__default.K__SHA256 (T@U Int) Int)
(declare-fun |_module.__default.BSIG0#canCall| (Int) Bool)
(declare-fun _module.atoh__Type.a (T@U) Int)
(declare-fun |_module.__default.Maj#canCall| (Int Int Int) Bool)
(declare-fun _module.atoh__Type.b (T@U) Int)
(declare-fun _module.atoh__Type.c (T@U) Int)
(declare-fun _module.__default.BSIG0 (T@U Int) Int)
(declare-fun _module.__default.Maj (T@U Int Int Int) Int)
(declare-fun _module.atoh__Type.d (T@U) Int)
(declare-fun _module.__default.PartialSHA256TraceHasCorrectatohs (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectatohs#canCall| (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceHasCorrectatohs#requires| (T@U) Bool)
(declare-fun StartFuel__module._default.PartialSHA256TraceHasCorrectatohsOpaque () T@U)
(declare-fun _module.__default.PartialSHA256TraceIsCorrect (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceIsCorrect#canCall| (T@U) Bool)
(declare-fun |_module.__default.PartialSHA256TraceIsCorrect#requires| (T@U) Bool)
(declare-fun _module.__default.IsSHA256TraceReadyForStep (T@U Int) Bool)
(declare-fun |_module.__default.IsSHA256TraceReadyForStep#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.IsSHA256TraceReadyForStep#requires| (T@U Int) Bool)
(declare-fun _module.__default.IsSHA256ReadyForStep (T@U T@U Int) Bool)
(declare-fun |_module.__default.IsSHA256ReadyForStep#canCall| (T@U T@U Int) Bool)
(declare-fun |_module.__default.IsSHA256ReadyForStep#requires| (T@U T@U Int) Bool)
(declare-fun _module.__default.last (T@U T@U) T@U)
(declare-fun |_module.__default.last#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.TheAToHsAreOK (T@U T@U Int Int) Bool)
(declare-fun |_module.__default.TheAToHsAreOK#canCall| (T@U Int Int) Bool)
(declare-fun |_module.__default.TheAToHsAreOK#requires| (T@U T@U Int Int) Bool)
(declare-fun Tclass._module.byte () T@U)
(declare-fun Tclass._module.uint64 () T@U)
(declare-fun |_module.__default.K__SHA256#requires| (T@U Int) Bool)
(declare-fun |_module.__default.InitialH__SHA256#requires| (T@U Int) Bool)
(declare-fun |_module.__default.ConvertAtoHToSeq#requires| (T@U) Bool)
(declare-fun _module.__default.IsCompleteSHA256Trace (T@U) Bool)
(declare-fun |_module.__default.IsCompleteSHA256Trace#canCall| (T@U) Bool)
(declare-fun |_module.__default.IsCompleteSHA256Trace#requires| (T@U) Bool)
(declare-fun _module.__default.SHA256TraceHasCorrectHs (T@U) Bool)
(declare-fun |_module.__default.SHA256TraceHasCorrectHs#canCall| (T@U) Bool)
(declare-fun |_module.__default.SHA256TraceHasCorrectHs#requires| (T@U) Bool)
(declare-fun |_module.__default.TBlk#canCall| (Int) Bool)
(declare-fun _module.__default.SHA256TraceHasCorrectWs (T@U) Bool)
(declare-fun |_module.__default.SHA256TraceHasCorrectWs#canCall| (T@U) Bool)
(declare-fun |_module.__default.SHA256TraceHasCorrectWs#requires| (T@U) Bool)
(declare-fun _module.__default.SHA256TraceHasCorrectatohs (T@U) Bool)
(declare-fun |_module.__default.SHA256TraceHasCorrectatohs#canCall| (T@U) Bool)
(declare-fun |_module.__default.SHA256TraceHasCorrectatohs#requires| (T@U) Bool)
(declare-fun _module.__default.SHA256TraceIsCorrect (T@U) Bool)
(declare-fun |_module.__default.SHA256TraceIsCorrect#canCall| (T@U) Bool)
(declare-fun |_module.__default.SHA256TraceIsCorrect#requires| (T@U) Bool)
(declare-fun _module.__default.DoesTraceDemonstrateSHA256 (T@U T@U T@U) Bool)
(declare-fun |_module.__default.DoesTraceDemonstrateSHA256#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.DoesTraceDemonstrateSHA256#requires| (T@U T@U T@U) Bool)
(declare-fun _module.__default.ConcatenateSeqs (T@U T@U T@U) T@U)
(declare-fun |_module.__default.MaxBytesForSHA#canCall| () Bool)
(declare-fun _module.__default.MaxBytesForSHA () Int)
(declare-fun |_module.__default.ConcatenateSeqs#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.WordSeqIsProperlySHAPaddedByteSeq#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.WordSeqIsProperlySHAPaddedByteSeq (T@U T@U) Bool)
(declare-fun _module.__default.InitialSHA256Trace () T@U)
(declare-fun |_module.__default.InitialSHA256Trace#requires| () Bool)
(declare-fun MoreFuel__module._default.InitialH_SHA2560 () T@U)
(declare-fun StartFuelAssert__module._default.InitialH_SHA256 () T@U)
(declare-fun |#_module.SHA256Trace.SHA256Trace_c| (T@U T@U T@U T@U) T@U)
(declare-fun MoreFuel__module._default.InitialH_SHA2561 () T@U)
(declare-fun _module.__default.IsSHA256 (T@U T@U) Bool)
(declare-fun |_module.__default.IsSHA256#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.IsSHA256#requires| (T@U T@U) Bool)
(declare-fun _module.__default.SHA256 (T@U) T@U)
(declare-fun |_module.__default.SHA256#canCall| (T@U) Bool)
(declare-fun |_module.__default.SHA256#requires| (T@U) Bool)
(declare-fun _module.__default.HMAC__SHA256 (T@U T@U) T@U)
(declare-fun _module.__default.Opad (Int) T@U)
(declare-fun _module.__default.Ipad (Int) T@U)
(declare-fun _module.__default.WordSeqToBytes (T@U T@U) T@U)
(declare-fun StartFuel__module._default.WordSeqToBytes () T@U)
(declare-fun _module.__default.SeqXor (T@U T@U T@U) T@U)
(declare-fun StartFuel__module._default.SeqXor () T@U)
(declare-fun |_module.__default.HMAC__SHA256#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.HMAC__SHA256#requires| (T@U T@U) Bool)
(declare-fun |_module.__default.Opad#canCall| (Int) Bool)
(declare-fun |_module.__default.SeqXor#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.Ipad#canCall| (Int) Bool)
(declare-fun |_module.__default.WordSeqToBytes#canCall| (T@U) Bool)
(declare-fun |_module.__default.last#requires| (T@U T@U) Bool)
(declare-fun _module.__default.all__but__last (T@U T@U) T@U)
(declare-fun |_module.__default.all__but__last#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.all__but__last#requires| (T@U T@U) Bool)
(declare-fun _module.__default.BytesToUint64 (T@U Int Int Int Int Int Int Int Int) Int)
(declare-fun |_module.__default.BytesToUint64#canCall| (Int Int Int Int Int Int Int Int) Bool)
(declare-fun |_module.__default.BytesToUint64#requires| (T@U Int Int Int Int Int Int Int Int) Bool)
(declare-fun StartFuel__module._default.BEByteSeqToInt () T@U)
(declare-fun |_module.__default.BEByteSeqToInt#canCall| (T@U) Bool)
(declare-fun _module.__default.BEByteSeqToInt (T@U T@U) Int)
(declare-fun _module.__default.bswap32__seq (T@U T@U) T@U)
(declare-fun |_module.__default.bswap32__seq#canCall| (T@U) Bool)
(declare-fun _module.__default.bswap32 (Int) Int)
(declare-fun |_module.__default.bswap32__seq#requires| (T@U T@U) Bool)
(declare-fun |_module.__default.bswap32#canCall| (Int) Bool)
(declare-fun StartFuel__module._default.TruncateWord () T@U)
(declare-fun _module.__default.TruncateWord (T@U Int) Int)
(declare-fun |_module.__default.BitwiseAdd32#requires| (Int Int) Bool)
(declare-fun |_module.__default.Ch#requires| (T@U Int Int Int) Bool)
(declare-fun |_module.__default.BitwiseAnd#canCall| (Int Int) Bool)
(declare-fun |_module.__default.BitwiseNot#canCall| (Int) Bool)
(declare-fun _module.__default.BitwiseNot (Int) Int)
(declare-fun |_module.__default.BitwiseXor#canCall| (Int Int) Bool)
(declare-fun _module.__default.BitwiseAnd (Int Int) Int)
(declare-fun _module.__default.BitwiseXor (Int Int) Int)
(declare-fun |_module.__default.Maj#requires| (T@U Int Int Int) Bool)
(declare-fun _module.__default.Parity (T@U Int Int Int) Int)
(declare-fun |_module.__default.Parity#canCall| (Int Int Int) Bool)
(declare-fun |_module.__default.Parity#requires| (T@U Int Int Int) Bool)
(declare-fun _module.__default.ft (T@U Int Int Int Int) Int)
(declare-fun |_module.__default.ft#canCall| (Int Int Int Int) Bool)
(declare-fun |_module.__default.ft#requires| (T@U Int Int Int Int) Bool)
(declare-fun StartFuel__module._default.Parity () T@U)
(declare-fun |_module.__default.BSIG0#requires| (T@U Int) Bool)
(declare-fun |_module.__default.RotateRight#canCall| (Int Int) Bool)
(declare-fun _module.__default.RotateRight (Int Int) Int)
(declare-fun |_module.__default.BSIG1#requires| (T@U Int) Bool)
(declare-fun |_module.__default.SSIG0#requires| (T@U Int) Bool)
(declare-fun |_module.__default.RightShift#canCall| (Int Int) Bool)
(declare-fun _module.__default.RightShift (Int Int) Int)
(declare-fun |_module.__default.SSIG1#requires| (T@U Int) Bool)
(declare-fun _module.__default.BreakIntoBlocks (T@U T@U T@U Int) T@U)
(declare-fun |_module.__default.BreakIntoBlocks#canCall| (T@U T@U Int) Bool)
(declare-fun |_module.__default.BreakIntoBlocks#requires| (T@U T@U T@U Int) Bool)
(declare-fun |_module.__default.MaxBytesForSHA#requires| () Bool)
(declare-fun |_module.__default.WordSeqIsProperlySHAPaddedByteSeq#requires| (T@U T@U) Bool)
(declare-fun _module.__default.RepeatByte (T@U Int Int) T@U)
(declare-fun StartFuel__module._default.RepeatByte () T@U)
(declare-fun _module.__default.Uint64ToBytes (T@U Int) T@U)
(declare-fun StartFuel__module._default.Uint64ToBytes () T@U)
(declare-fun |_module.__default.RepeatByte#canCall| (Int Int) Bool)
(declare-fun |_module.__default.Uint64ToBytes#canCall| (Int) Bool)
(declare-fun |_module.__default.TBlk#requires| (Int) Bool)
(declare-fun |_module.__default.TStep#requires| (Int) Bool)
(declare-fun |_module.__default.SeqXor#requires| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.Opad#requires| (Int) Bool)
(declare-fun _module.__default.RepeatValue (T@U T@U T@U Int) T@U)
(declare-fun |_module.__default.RepeatValue#canCall| (T@U T@U Int) Bool)
(declare-fun |_module.__default.Ipad#requires| (Int) Bool)
(declare-fun |_module.__default.BEByteSeqToInt#requires| (T@U T@U) Bool)
(declare-fun _module.__default.BEUintToSeqByte (T@U Int Int) T@U)
(declare-fun |_module.__default.BEUintToSeqByte#requires| (T@U Int Int) Bool)
(declare-fun |_module.__default.BEUintToSeqByte#canCall| (Int Int) Bool)
(declare-fun _module.__default.BytesToWord (T@U Int Int Int Int) Int)
(declare-fun |_module.__default.BytesToWord#canCall| (Int Int Int Int) Bool)
(declare-fun |_module.__default.BytesToWord#requires| (T@U Int Int Int Int) Bool)
(declare-fun _module.__default.WordToBytes (T@U Int) T@U)
(declare-fun |_module.__default.WordToBytes#canCall| (Int) Bool)
(declare-fun |_module.__default.WordToBytes#requires| (T@U Int) Bool)
(declare-fun StartFuel__module._default.BEUintToSeqByte () T@U)
(declare-fun |_module.__default.Uint64ToBytes#requires| (T@U Int) Bool)
(declare-fun |_module.__default.WordSeqToBytes#requires| (T@U T@U) Bool)
(declare-fun StartFuel__module._default.WordToBytes () T@U)
(declare-fun |_module.__default.RepeatByte#requires| (T@U Int Int) Bool)
(declare-fun |_module.__default.RepeatValue#requires| (T@U T@U T@U Int) Bool)
(declare-fun |_module.__default.ConcatenateSeqs#requires| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.bswap32#requires| (Int) Bool)
(declare-fun StartFuel__module._default.BytesToWord () T@U)
(declare-fun Tclass._module.state () T@U)
(declare-fun Tclass._module.world () T@U)
(declare-fun _module.__default.world__of__state (T@U) T@U)
(declare-fun |_module.__default.world__of__state#canCall| (T@U) Bool)
(declare-fun |_module.__default.world__of__state#requires| (T@U) Bool)
(declare-fun _module.__default.mode__of__state (T@U) T@U)
(declare-fun |#_module.mode.Monitor| () T@U)
(declare-fun _module.state.conf (T@U) T@U)
(declare-fun _module.config.scr (T@U) T@U)
(declare-fun |#_module.world.Secure| () T@U)
(declare-fun _module.SCR.ns (T@U) T@U)
(declare-fun |_module.__default.mode__of__state#canCall| (T@U) Bool)
(declare-fun _module.state.State_q (T@U) Bool)
(declare-fun _module.config.Config_q (T@U) Bool)
(declare-fun _module.SCR.SCRT_q (T@U) Bool)
(declare-fun Tclass._module.mode () T@U)
(declare-fun |_module.__default.mode__of__state#requires| (T@U) Bool)
(declare-fun _module.config.cpsr (T@U) T@U)
(declare-fun _module.PSR.m (T@U) T@U)
(declare-fun _module.PSR.PSR_q (T@U) Bool)
(declare-fun Tclass._module.priv () T@U)
(declare-fun _module.__default.priv__of__mode (T@U) T@U)
(declare-fun |_module.__default.priv__of__mode#canCall| (T@U) Bool)
(declare-fun |_module.__default.priv__of__mode#requires| (T@U) Bool)
(declare-fun |#_module.mode.User| () T@U)
(declare-fun |#_module.priv.PL0| () T@U)
(declare-fun |#_module.priv.PL1| () T@U)
(declare-fun _module.__default.priv__of__state (T@U) T@U)
(declare-fun |_module.__default.priv__of__state#canCall| (T@U) Bool)
(declare-fun |_module.__default.priv__of__state#requires| (T@U) Bool)
(declare-fun Tclass._module.PSR () T@U)
(declare-fun _module.__default.spsr__of__state (T@U) T@U)
(declare-fun |_module.__default.spsr__of__state#canCall| (T@U) Bool)
(declare-fun _module.__default.ValidState (T@U) Bool)
(declare-fun |_module.__default.spsr__of__state#requires| (T@U) Bool)
(declare-fun _module.state.sregs (T@U) T@U)
(declare-fun |#_module.SReg.spsr| (T@U) T@U)
(declare-fun StartFuel__module._default.ValidSRegState () T@U)
(declare-fun MoreFuel__module._default.ValidSRegState0 () T@U)
(declare-fun StartFuelAssert__module._default.ValidSRegState () T@U)
(declare-fun _module.__default.decode__psr (Int) T@U)
(declare-fun |_module.__default.decode__psr#canCall| (Int) Bool)
(declare-fun MoreFuel__module._default.ValidSRegState1 () T@U)
(declare-fun _module.__default.interrupts__enabled (T@U) Bool)
(declare-fun |_module.__default.interrupts__enabled#canCall| (T@U) Bool)
(declare-fun |_module.__default.interrupts__enabled#requires| (T@U) Bool)
(declare-fun _module.PSR.f (T@U) Bool)
(declare-fun _module.PSR.i (T@U) Bool)
(declare-fun _module.__default.nondet__int (Int Int) Int)
(declare-fun |_module.__default.nondet__int#requires| (Int Int) Bool)
(declare-fun _module.__default.nondet__word (Int Int) Int)
(declare-fun |_module.__default.nondet__word#requires| (Int Int) Bool)
(declare-fun Tclass._module.UserState () T@U)
(declare-fun _module.__default.nondet__private__word (Int T@U Int) Int)
(declare-fun |_module.__default.nondet__private__word#canCall| (Int T@U Int) Bool)
(declare-fun |_module.__default.nondet__private__word#requires| (Int T@U Int) Bool)
(declare-fun _module.__default.nondet__private__nat (Int T@U Int) Int)
(declare-fun |_module.__default.nondet__private__nat#canCall| (Int T@U Int) Bool)
(declare-fun |_module.__default.nondet__private__nat#requires| (Int T@U Int) Bool)
(declare-fun Tclass._module.exception () T@U)
(declare-fun _module.__default.nondet__exception (Int T@U Bool Bool) T@U)
(declare-fun |#_module.exception.ExFIQ| () T@U)
(declare-fun |#_module.exception.ExIRQ| () T@U)
(declare-fun |_module.__default.nondet__exception#canCall| (Int T@U Bool Bool) Bool)
(declare-fun |_module.__default.nondet__exception#requires| (Int T@U Bool Bool) Bool)
(declare-fun _module.__default.nondet__psr (Int T@U T@U) Int)
(declare-fun |_module.__default.nondet__psr#canCall| (Int T@U T@U) Bool)
(declare-fun _module.__default.ValidPsrWord (Int) Bool)
(declare-fun |_module.__default.nondet__psr#requires| (Int T@U T@U) Bool)
(declare-fun |_module.__default.NONDET__GENERATOR#requires| () Bool)
(declare-fun |_module.__default.NONDET__PC#requires| () Bool)
(declare-fun |_module.__default.NONDET__EX#requires| () Bool)
(declare-fun Tclass._module.ARMReg () T@U)
(declare-fun _module.__default.NONDET__REG (T@U) Int)
(declare-fun |_module.__default.NONDET__REG#canCall| (T@U) Bool)
(declare-fun |_module.__default.NONDET__REG#requires| (T@U) Bool)
(declare-fun |_module.__default.NONDET__STEPS#requires| () Bool)
(declare-fun _module.__default.NONDET__RNG (Int) Int)
(declare-fun |_module.__default.NONDET__RNG#requires| (Int) Bool)
(declare-fun Tclass._module.AbsPTE () T@U)
(declare-fun Tclass._module.Maybe (T@U) T@U)
(declare-fun Tclass._module.Maybe_0 (T@U) T@U)
(declare-fun _module.__default.user__visible__state (T@U Int T@U) T@U)
(declare-fun |_module.__default.user__visible__state#canCall| (T@U Int T@U) Bool)
(declare-fun _module.__default.WellformedAbsPTable (T@U) Bool)
(declare-fun |_module.__default.user__visible__state#requires| (T@U Int T@U) Bool)
(declare-fun _module.state.regs (T@U) T@U)
(declare-fun _module.state.m (T@U) T@U)
(declare-fun |#_module.UserState.UserState| (T@U Int T@U) T@U)
(declare-fun _module.__default.user__regs (T@U) T@U)
(declare-fun _module.__default.user__mem (T@U T@U) T@U)
(declare-fun |_module.__default.user__regs#canCall| (T@U) Bool)
(declare-fun |_module.__default.user__mem#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.USER__REGS () T@U)
(declare-fun |_module.__default.USER__REGS#requires| () Bool)
(declare-fun |#_module.ARMReg.R0| () T@U)
(declare-fun |#_module.ARMReg.R1| () T@U)
(declare-fun |#_module.ARMReg.R2| () T@U)
(declare-fun |#_module.ARMReg.R3| () T@U)
(declare-fun |#_module.ARMReg.R4| () T@U)
(declare-fun |#_module.ARMReg.R5| () T@U)
(declare-fun |#_module.ARMReg.R6| () T@U)
(declare-fun |#_module.ARMReg.R7| () T@U)
(declare-fun |#_module.ARMReg.R8| () T@U)
(declare-fun |#_module.ARMReg.R9| () T@U)
(declare-fun |#_module.ARMReg.R10| () T@U)
(declare-fun |#_module.ARMReg.R11| () T@U)
(declare-fun |#_module.ARMReg.R12| () T@U)
(declare-fun |#_module.ARMReg.SP| (T@U) T@U)
(declare-fun |#_module.ARMReg.LR| (T@U) T@U)
(declare-fun StartFuel__module._default.ValidRegState () T@U)
(declare-fun _module.__default.ValidRegState (T@U T@U) Bool)
(declare-fun |_module.__default.user__regs#requires| (T@U) Bool)
(declare-fun MoreFuel__module._default.ValidRegState0 () T@U)
(declare-fun StartFuelAssert__module._default.ValidRegState () T@U)
(declare-fun |lambda#56| () T@U)
(declare-fun |lambda#57| (T@U) T@U)
(declare-fun |_module.__default.USER__REGS#canCall| () Bool)
(declare-fun MoreFuel__module._default.ValidRegState1 () T@U)
(declare-fun |lambda#58| (T@U) T@U)
(declare-fun Tclass._module.memstate () T@U)
(declare-fun Tclass._module.addr () T@U)
(declare-fun StartFuel__module._default.ValidMemState () T@U)
(declare-fun _module.__default.ValidMemState (T@U T@U) Bool)
(declare-fun |_module.__default.user__mem#requires| (T@U T@U) Bool)
(declare-fun _module.memstate.addresses (T@U) T@U)
(declare-fun StartFuel__module._default.PageBase () T@U)
(declare-fun _module.__default.TheValidAddressesRW () T@U)
(declare-fun StartFuel__module._default.WordAligned () T@U)
(declare-fun _module.__default.AllPagesInTable (T@U) T@U)
(declare-fun MoreFuel__module._default.ValidMemState0 () T@U)
(declare-fun StartFuelAssert__module._default.ValidMemState () T@U)
(declare-fun |lambda#59| (T@U T@U T@U) T@U)
(declare-fun |lambda#60| (T@U) T@U)
(declare-fun _module.__default.PageBase (T@U Int) Int)
(declare-fun _module.__default.addrIsSecure (Int) Bool)
(declare-fun _module.__default.ValidMem (Int) Bool)
(declare-fun _module.__default.WordAligned (T@U Int) Bool)
(declare-fun |_module.__default.ValidMem#canCall| (Int) Bool)
(declare-fun |_module.__default.TheValidAddressesRW#canCall| () Bool)
(declare-fun |_module.__default.addrIsSecure#canCall| (Int) Bool)
(declare-fun |_module.__default.PageBase#canCall| (Int) Bool)
(declare-fun |_module.__default.AllPagesInTable#canCall| (T@U) Bool)
(declare-fun _module.memstate.MemState_q (T@U) Bool)
(declare-fun MoreFuel__module._default.ValidMemState1 () T@U)
(declare-fun |lambda#61| (T@U T@U T@U) T@U)
(declare-fun |lambda#62| (T@U) T@U)
(declare-fun _module.__default.psr__mask__mode (Int) Int)
(declare-fun |_module.__default.psr__mask__mode#canCall| (Int) Bool)
(declare-fun |_module.__default.psr__mask__mode#requires| (Int) Bool)
(declare-fun _module.__default.psr__mask__fiq (Int) Int)
(declare-fun |_module.__default.psr__mask__fiq#canCall| (Int) Bool)
(declare-fun |_module.__default.psr__mask__fiq#requires| (Int) Bool)
(declare-fun _module.__default.psr__mask__irq (Int) Int)
(declare-fun |_module.__default.psr__mask__irq#canCall| (Int) Bool)
(declare-fun |_module.__default.psr__mask__irq#requires| (Int) Bool)
(declare-fun |_module.__default.ValidPsrWord#canCall| (Int) Bool)
(declare-fun |_module.__default.ValidPsrWord#requires| (Int) Bool)
(declare-fun |_module.__default.ValidModeEncoding#canCall| (Int) Bool)
(declare-fun _module.__default.ValidModeEncoding (Int) Bool)
(declare-fun |_module.__default.decode__psr#requires| (Int) Bool)
(declare-fun |#_module.PSR.PSR| (T@U Bool Bool) T@U)
(declare-fun _module.__default.decode__mode (Int) T@U)
(declare-fun |_module.__default.decode__mode#canCall| (Int) Bool)
(declare-fun Tclass._module.SCR () T@U)
(declare-fun _module.__default.decode__scr (Int) T@U)
(declare-fun |_module.__default.decode__scr#canCall| (Int) Bool)
(declare-fun |_module.__default.decode__scr#requires| (Int) Bool)
(declare-fun |#_module.SCR.SCRT| (T@U Bool Bool) T@U)
(declare-fun |#_module.world.NotSecure| () T@U)
(declare-fun _module.__default.decode__ttbr (T@U Int) T@U)
(declare-fun Tclass._module.TTBR () T@U)
(declare-fun StartFuel__module._default.PageAligned () T@U)
(declare-fun |_module.__default.decode__ttbr#canCall| (Int) Bool)
(declare-fun _module.__default.PageAligned (T@U Int) Bool)
(declare-fun _module.TTBR.ptbase (T@U) Int)
(declare-fun |_module.__default.decode__ttbr#requires| (T@U Int) Bool)
(declare-fun |#_module.TTBR.TTBR| (Int) T@U)
(declare-fun Tclass._module.SReg () T@U)
(declare-fun _module.__default.ValidSReg (T@U) Bool)
(declare-fun |_module.__default.ValidSReg#canCall| (T@U) Bool)
(declare-fun |_module.__default.ValidSReg#requires| (T@U) Bool)
(declare-fun _module.SReg.m (T@U) T@U)
(declare-fun _module.SReg.spsr_q (T@U) Bool)
(declare-fun Tclass._module.config () T@U)
(declare-fun _module.__default.update__config__from__sreg (T@U T@U Int) T@U)
(declare-fun |_module.__default.update__config__from__sreg#canCall| (T@U T@U Int) Bool)
(declare-fun _module.__default.ValidSRegState (T@U T@U T@U) Bool)
(declare-fun _module.SReg.cpsr_q (T@U) Bool)
(declare-fun |_module.__default.update__config__from__sreg#requires| (T@U T@U Int) Bool)
(declare-fun |#_module.SReg.cpsr| () T@U)
(declare-fun |#_module.SReg.SCR| () T@U)
(declare-fun |#_module.SReg.ttbr0| () T@U)
(declare-fun |#_module.SReg.TLBIALL| () T@U)
(declare-fun MoreFuel__module._default.ValidSRegState2 () T@U)
(declare-fun |#_module.config.Config| (T@U T@U T@U Bool T@U Int Int) T@U)
(declare-fun _module.config.ttbr0 (T@U) T@U)
(declare-fun _module.config.ex (T@U) T@U)
(declare-fun _module.config.tlb__consistent (T@U) Bool)
(declare-fun _module.config.exstep (T@U) Int)
(declare-fun _module.config.nondet (T@U) Int)
(declare-fun MoreFuel__module._default.ValidSRegState3 () T@U)
(declare-fun _module.__default.encode__mode (T@U) Int)
(declare-fun |_module.__default.encode__mode#canCall| (T@U) Bool)
(declare-fun |_module.__default.encode__mode#requires| (T@U) Bool)
(declare-fun _module.mode.User_q (T@U) Bool)
(declare-fun _module.mode.FIQ_q (T@U) Bool)
(declare-fun _module.mode.IRQ_q (T@U) Bool)
(declare-fun _module.mode.Supervisor_q (T@U) Bool)
(declare-fun _module.mode.Abort_q (T@U) Bool)
(declare-fun _module.mode.Undefined_q (T@U) Bool)
(declare-fun _module.__default.decode__mode_k (Int) T@U)
(declare-fun |_module.__default.decode__mode_k#canCall| (Int) Bool)
(declare-fun |_module.__default.decode__mode_k#requires| (Int) Bool)
(declare-fun |#_module.Maybe.Just| (T@U) T@U)
(declare-fun |#_module.mode.FIQ| () T@U)
(declare-fun |#_module.mode.IRQ| () T@U)
(declare-fun |#_module.mode.Supervisor| () T@U)
(declare-fun |#_module.mode.Abort| () T@U)
(declare-fun |#_module.mode.Undefined| () T@U)
(declare-fun |#_module.Maybe.Nothing| () T@U)
(declare-fun |_module.__default.ValidModeEncoding#requires| (Int) Bool)
(declare-fun _module.Maybe.Just_q (T@U) Bool)
(declare-fun |_module.__default.decode__mode#requires| (Int) Bool)
(declare-fun _module.__default.fromJust (T@U T@U) T@U)
(declare-fun |_module.__default.fromJust#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidState#canCall| (T@U) Bool)
(declare-fun |_module.__default.ValidState#requires| (T@U) Bool)
(declare-fun |_module.__default.ValidRegState#canCall| (T@U) Bool)
(declare-fun |_module.__default.ValidMemState#canCall| (T@U) Bool)
(declare-fun |_module.__default.ValidSRegState#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidRegState#requires| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidSRegState#requires| (T@U T@U T@U) Bool)
(declare-fun _module.__default.TheValidAddressesRO () T@U)
(declare-fun |_module.__default.TheValidAddressesRO#requires| () Bool)
(declare-fun |_module.__default.TheValidAddressesRW#requires| () Bool)
(declare-fun _module.__default.TheValidAddresses () T@U)
(declare-fun |_module.__default.TheValidAddresses#requires| () Bool)
(declare-fun |_module.__default.TheValidAddressesRO#canCall| () Bool)
(declare-fun |_module.__default.ValidMemState#requires| (T@U T@U) Bool)
(declare-fun _module.memstate.globals (T@U) T@U)
(declare-fun |_module.__default.ValidAddrMemState#canCall| (T@U) Bool)
(declare-fun _module.__default.ValidAddrMemState (T@U) Bool)
(declare-fun |_module.__default.ValidGlobalState#canCall| (T@U) Bool)
(declare-fun _module.__default.ValidGlobalState (T@U) Bool)
(declare-fun |_module.__default.ValidAddrMemState#requires| (T@U) Bool)
(declare-fun |_module.__default.TheValidAddresses#canCall| () Bool)
(declare-fun |_module.__default.ValidGlobalState#requires| (T@U) Bool)
(declare-fun _module.__default.TheGlobalDecls () T@U)
(declare-fun |_module.__default.TheGlobalDecls#canCall| () Bool)
(declare-fun |_module.__default.BytesToWords#canCall| (Int) Bool)
(declare-fun _module.__default.BytesToWords (Int) Int)
(declare-fun _module.__default.RngBase () Int)
(declare-fun |_module.__default.RngBase#requires| () Bool)
(declare-fun _module.__default.ValidRngOffset (T@U Int) Bool)
(declare-fun |_module.__default.ValidRngOffset#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.ValidRngOffset#requires| (T@U Int) Bool)
(declare-fun _module.state.rng (T@U) T@U)
(declare-fun |_module.__default.WordAligned#canCall| (Int) Bool)
(declare-fun |_module.__default.WordsToBytes#canCall| (Int) Bool)
(declare-fun _module.__default.WordsToBytes (Int) Int)
(declare-fun _module.RNG.RNG_q (T@U) Bool)
(declare-fun _module.RNG.consumed (T@U) Bool)
(declare-fun _module.RNG.ready (T@U) Bool)
(declare-fun _module.__default.RngReadData (T@U Int) Int)
(declare-fun |_module.__default.RngReadData#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.RngReadData#requires| (T@U Int) Bool)
(declare-fun |_module.__default.NONDET__RNG#canCall| (Int) Bool)
(declare-fun |_module.__default.nondet__word#canCall| (Int Int) Bool)
(declare-fun _module.RNG.entropy (T@U) Int)
(declare-fun _module.__default.RngReadState (T@U Int) T@U)
(declare-fun |_module.__default.RngReadState#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.RngReadState#requires| (T@U Int) Bool)
(declare-fun |#_module.state.State| (T@U T@U T@U T@U T@U Bool Int) T@U)
(declare-fun |#_module.RNG.RNG| (Int Bool Bool) T@U)
(declare-fun _module.state.ok (T@U) Bool)
(declare-fun _module.state.steps (T@U) Int)
(declare-fun Tclass._module.operand () T@U)
(declare-fun _module.__default.ValidOperand (T@U) Bool)
(declare-fun |_module.__default.ValidOperand#canCall| (T@U) Bool)
(declare-fun |_module.__default.ValidOperand#requires| (T@U) Bool)
(declare-fun |_module.__default.ValidRegOperand#canCall| (T@U) Bool)
(declare-fun _module.__default.ValidRegOperand (T@U) Bool)
(declare-fun _module.operand.OConst_q (T@U) Bool)
(declare-fun _module.__default.ValidSecondOperand (T@U) Bool)
(declare-fun |_module.__default.ValidSecondOperand#canCall| (T@U) Bool)
(declare-fun |_module.__default.ValidSecondOperand#requires| (T@U) Bool)
(declare-fun _module.operand.reg (T@U) T@U)
(declare-fun _module.operand.OShift_q (T@U) Bool)
(declare-fun _module.ARMReg.SP_q (T@U) Bool)
(declare-fun _module.ARMReg.LR_q (T@U) Bool)
(declare-fun _module.__default.ValidBankedRegOperand (T@U T@U) Bool)
(declare-fun |_module.__default.ValidBankedRegOperand#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidBankedRegOperand#requires| (T@U T@U) Bool)
(declare-fun _module.operand.r (T@U) T@U)
(declare-fun _module.ARMReg.spm (T@U) T@U)
(declare-fun _module.ARMReg.lrm (T@U) T@U)
(declare-fun _module.operand.sr (T@U) T@U)
(declare-fun _module.operand.OReg_q (T@U) Bool)
(declare-fun _module.operand.OSReg_q (T@U) Bool)
(declare-fun _module.__default.ValidMrsMsrOperand (T@U T@U) Bool)
(declare-fun |_module.__default.ValidMrsMsrOperand#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidMrsMsrOperand#requires| (T@U T@U) Bool)
(declare-fun _module.__default.ValidMcrMrcOperand (T@U T@U) Bool)
(declare-fun |_module.__default.ValidMcrMrcOperand#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidMcrMrcOperand#requires| (T@U T@U) Bool)
(declare-fun _module.SReg.ttbr0_q (T@U) Bool)
(declare-fun _module.world.Secure_q (T@U) Bool)
(declare-fun _module.__default.ValidAnySrcOperand (T@U T@U) Bool)
(declare-fun |_module.__default.ValidAnySrcOperand#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidAnySrcOperand#requires| (T@U T@U) Bool)
(declare-fun _module.__default.ValidAddr (Int) Bool)
(declare-fun |_module.__default.ValidAddr#requires| (Int) Bool)
(declare-fun |_module.__default.isUInt32#canCall| (Int) Bool)
(declare-fun _module.__default.ValidMemForRead (Int) Bool)
(declare-fun |_module.__default.ValidMemForRead#requires| (Int) Bool)
(declare-fun |_module.__default.ValidAddr#canCall| (Int) Bool)
(declare-fun |_module.__default.ValidMem#requires| (Int) Bool)
(declare-fun _module.__default.ValidMemRangeForRead (Int Int) Bool)
(declare-fun |_module.__default.ValidMemRangeForRead#requires| (Int Int) Bool)
(declare-fun |_module.__default.ValidMemForRead#canCall| (Int) Bool)
(declare-fun _module.__default.ValidMemRange (Int Int) Bool)
(declare-fun |_module.__default.ValidMemRange#requires| (Int Int) Bool)
(declare-fun _module.__default.ValidMemWords (Int Int) Bool)
(declare-fun |_module.__default.ValidMemWords#requires| (Int Int) Bool)
(declare-fun |_module.__default.ValidWordOffset#canCall| (Int Int) Bool)
(declare-fun _module.__default.ValidWordOffset (Int Int) Bool)
(declare-fun |_module.__default.WordOffset#canCall| (Int Int) Bool)
(declare-fun |_module.__default.ValidMemRange#canCall| (Int Int) Bool)
(declare-fun _module.__default.WordOffset (Int Int) Int)
(declare-fun _module.__default.ValidShiftOperand (T@U T@U) Bool)
(declare-fun |_module.__default.ValidShiftOperand#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidShiftOperand#requires| (T@U T@U) Bool)
(declare-fun |_module.__default.OperandContents#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.OperandContents (T@U T@U) Int)
(declare-fun |_module.__default.ValidRegOperand#requires| (T@U) Bool)
(declare-fun _module.operand.OSP_q (T@U) Bool)
(declare-fun _module.operand.OLR_q (T@U) Bool)
(declare-fun _module.__default.ValidGlobal (T@U) Bool)
(declare-fun |_module.__default.ValidGlobal#canCall| (T@U) Bool)
(declare-fun |_module.__default.ValidGlobal#requires| (T@U) Bool)
(declare-fun _module.__default.ValidGlobalDecls (T@U) Bool)
(declare-fun |_module.__default.ValidGlobalDecls#canCall| (T@U) Bool)
(declare-fun |_module.__default.ValidGlobalDecls#requires| (T@U) Bool)
(declare-fun _module.__default.ValidGlobalAddr (T@U Int) Bool)
(declare-fun |_module.__default.ValidGlobalAddr#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.ValidGlobalAddr#requires| (T@U Int) Bool)
(declare-fun |_module.__default.AddressOfGlobal#canCall| (T@U) Bool)
(declare-fun _module.__default.AddressOfGlobal (T@U) Int)
(declare-fun |_module.__default.SizeOfGlobal#canCall| (T@U) Bool)
(declare-fun _module.__default.SizeOfGlobal (T@U) Int)
(declare-fun _module.__default.ValidGlobalOffset (T@U Int) Bool)
(declare-fun |_module.__default.ValidGlobalOffset#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.ValidGlobalOffset#requires| (T@U Int) Bool)
(declare-fun |_module.__default.AddressOfGlobal#requires| (T@U) Bool)
(declare-fun |_module.__default.SizeOfGlobal#requires| (T@U) Bool)
(declare-fun |_module.__default.TheGlobalDecls#requires| () Bool)
(declare-fun _module.__default.mode__of__exception (T@U T@U) T@U)
(declare-fun |_module.__default.mode__of__exception#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.mode__of__exception#requires| (T@U T@U) Bool)
(declare-fun _module.exception.ExAbt_q (T@U) Bool)
(declare-fun _module.exception.ExUnd_q (T@U) Bool)
(declare-fun _module.exception.ExIRQ_q (T@U) Bool)
(declare-fun _module.exception.ExFIQ_q (T@U) Bool)
(declare-fun _module.SCR.irq (T@U) Bool)
(declare-fun _module.SCR.fiq (T@U) Bool)
(declare-fun _module.__default.update__psr (T@U Int Int Bool Bool) Int)
(declare-fun |_module.__default.update__psr#canCall| (Int Int Bool Bool) Bool)
(declare-fun |_module.__default.update__psr#requires| (T@U Int Int Bool Bool) Bool)
(declare-fun StartFuel__module._default.BitOr () T@U)
(declare-fun StartFuel__module._default.BitsAsWord () T@U)
(declare-fun |_module.__default.BitOr#canCall| ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun |_module.__default.BitsAsWord#canCall| ((_ BitVec 32)) Bool)
(declare-fun _module.__default.BitOr (T@U (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun |_module.__default.BitwiseOr#canCall| (Int Int) Bool)
(declare-fun _module.__default.BitsAsWord (T@U (_ BitVec 32)) Int)
(declare-fun _module.__default.BitwiseOr (Int Int) Int)
(declare-fun _module.__default.psr__of__exception (T@U T@U) Int)
(declare-fun |_module.__default.psr__of__exception#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.psr__of__exception#requires| (T@U T@U) Bool)
(declare-fun MoreFuel__module._default.ValidSRegState4 () T@U)
(declare-fun StartFuel__module._default.update_psr () T@U)
(declare-fun MoreFuel__module._default.ValidSRegState5 () T@U)
(declare-fun _module.__default.exceptionTakenFn (T@U T@U Int) T@U)
(declare-fun |_module.__default.exceptionTakenFn#canCall| (T@U T@U Int) Bool)
(declare-fun |_module.__default.exceptionTakenFn#requires| (T@U T@U Int) Bool)
(declare-fun _module.__default.takestep (T@U) T@U)
(declare-fun |_module.__default.takestep#canCall| (T@U) Bool)
(declare-fun _module.__default.evalExceptionTaken (T@U T@U Int T@U) Bool)
(declare-fun |_module.__default.evalExceptionTaken#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |_module.__default.evalExceptionTaken#requires| (T@U T@U Int T@U) Bool)
(declare-fun _module.__default.evalEnterUserspace (T@U T@U) Bool)
(declare-fun |_module.__default.evalEnterUserspace#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.evalEnterUserspace#requires| (T@U T@U) Bool)
(declare-fun |#_module.operand.OSReg| (T@U) T@U)
(declare-fun |_module.__default.evalMOVSPCLR#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.evalMOVSPCLR (T@U T@U) Bool)
(declare-fun |_module.__default.evalMOVSPCLR#requires| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidModeChange#canCall| (T@U Int) Bool)
(declare-fun _module.__default.ValidModeChange (T@U Int) Bool)
(declare-fun |_module.__default.evalUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun _module.__default.evalUpdate (T@U T@U Int T@U) Bool)
(declare-fun _module.__default.userspaceExecutionFn (T@U T@U Int) T@U)
(declare-fun _module.__default.ExtractAbsPageTable (T@U) T@U)
(declare-fun |_module.__default.userspaceExecutionFn#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.userspaceExecutionFn#requires| (T@U T@U Int) Bool)
(declare-fun _module.Maybe.v (T@U) T@U)
(declare-fun _module.__default.WritablePagesInTable (T@U) T@U)
(declare-fun _module.__default.reseed__nondet__state (T@U) T@U)
(declare-fun _module.__default.havocUserRegs (Int T@U T@U) T@U)
(declare-fun |#_module.memstate.MemState| (T@U T@U) T@U)
(declare-fun _module.__default.havocPages (T@U T@U T@U) T@U)
(declare-fun |_module.__default.ExtractAbsPageTable#canCall| (T@U) Bool)
(declare-fun |_module.__default.WritablePagesInTable#canCall| (T@U) Bool)
(declare-fun |_module.__default.reseed__nondet__state#canCall| (T@U) Bool)
(declare-fun |_module.__default.havocUserRegs#canCall| (Int T@U T@U) Bool)
(declare-fun |_module.__default.havocPages#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.NONDET__STEPS#canCall| () Bool)
(declare-fun _module.__default.NONDET__STEPS () Int)
(declare-fun |_module.__default.NONDET__PC#canCall| () Bool)
(declare-fun _module.__default.NONDET__PC () Int)
(declare-fun |_module.__default.havocPages#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#63| (T@U) T@U)
(declare-fun |lambda#64| (T@U T@U T@U T@U) T@U)
(declare-fun _module.__default.MemContents (T@U Int) Int)
(declare-fun |_module.__default.MemContents#canCall| (T@U Int) Bool)
(declare-fun |lambda#65| (T@U T@U T@U T@U) T@U)
(declare-fun |_module.__default.havocUserRegs#requires| (Int T@U T@U) Bool)
(declare-fun MoreFuel__module._default.ValidRegState2 () T@U)
(declare-fun |lambda#66| (T@U) T@U)
(declare-fun |lambda#67| (T@U Int T@U) T@U)
(declare-fun MoreFuel__module._default.ValidRegState3 () T@U)
(declare-fun |lambda#68| (T@U Int T@U) T@U)
(declare-fun _module.__default.EssentialContinuationInvariantProperties (T@U T@U) Bool)
(declare-fun |_module.__default.EssentialContinuationInvariantProperties#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.EssentialContinuationInvariantProperties#requires| (T@U T@U) Bool)
(declare-fun _module.__default.EssentialInterruptContinuationInvariantProperties (T@U T@U) Bool)
(declare-fun |_module.__default.EssentialInterruptContinuationInvariantProperties#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.EssentialInterruptContinuationInvariantProperties#requires| (T@U T@U) Bool)
(declare-fun |#_module.obool.OCmp| (T@U T@U T@U) T@U)
(declare-fun |#_module.ocmp.OTstEq| () T@U)
(declare-fun |#_module.operand.OSP| () T@U)
(declare-fun |#_module.operand.OConst| (Int) T@U)
(declare-fun |_module.__default.evalOBool#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.evalOBool (T@U T@U) Bool)
(declare-fun _module.__default.UsermodeContinuationPrecondition (T@U) Bool)
(declare-fun |_module.__default.UsermodeContinuationPrecondition#canCall| (T@U) Bool)
(declare-fun |_module.__default.UsermodeContinuationPrecondition#requires| (T@U) Bool)
(declare-fun _module.__default.UsermodeContinuationInvariant (T@U T@U) Bool)
(declare-fun |_module.__default.UsermodeContinuationInvariant#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.UsermodeContinuationInvariant#requires| (T@U T@U) Bool)
(declare-fun _module.__default.InterruptContinuationPrecondition (T@U) Bool)
(declare-fun |_module.__default.InterruptContinuationPrecondition#canCall| (T@U) Bool)
(declare-fun |_module.__default.InterruptContinuationPrecondition#requires| (T@U) Bool)
(declare-fun |#_module.operand.OLR| () T@U)
(declare-fun _module.__default.InterruptContinuationInvariant (T@U T@U) Bool)
(declare-fun |_module.__default.InterruptContinuationInvariant#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.InterruptContinuationInvariant#requires| (T@U T@U) Bool)
(declare-fun |_module.__default.PageBase#requires| (T@U Int) Bool)
(declare-fun MoreFuel__module._default.PageAligned0 () T@U)
(declare-fun StartFuelAssert__module._default.PageAligned () T@U)
(declare-fun StartFuel__module._default.BitwiseMaskHigh () T@U)
(declare-fun |_module.__default.BitwiseMaskHigh#canCall| (Int Int) Bool)
(declare-fun _module.__default.BitwiseMaskHigh (T@U Int Int) Int)
(declare-fun MoreFuel__module._default.PageAligned1 () T@U)
(declare-fun _module.__default.PhysBase () Int)
(declare-fun |_module.__default.PhysBase#requires| () Bool)
(declare-fun |_module.__default.addrIsSecure#requires| (Int) Bool)
(declare-fun |_module.__default.WellformedAbsPTable#canCall| (T@U) Bool)
(declare-fun |_module.__default.WellformedAbsPTable#requires| (T@U) Bool)
(declare-fun |_module.__default.WellformedAbsL2PTable#canCall| (T@U) Bool)
(declare-fun _module.__default.WellformedAbsL2PTable (T@U) Bool)
(declare-fun |_module.__default.WellformedAbsL2PTable#requires| (T@U) Bool)
(declare-fun |_module.__default.WellformedAbsPTE#canCall| (T@U) Bool)
(declare-fun _module.__default.WellformedAbsPTE (T@U) Bool)
(declare-fun |_module.__default.WellformedAbsPTE#requires| (T@U) Bool)
(declare-fun _module.AbsPTE.AbsPTE_q (T@U) Bool)
(declare-fun |_module.__default.PageAligned#canCall| (Int) Bool)
(declare-fun _module.AbsPTE.phys (T@U) Int)
(declare-fun |_module.__default.PhysBase#canCall| () Bool)
(declare-fun _module.__default.ExtractAbsPageTable_k (T@U T@U) T@U)
(declare-fun |_module.__default.ExtractAbsPageTable_k#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ExtractAbsPageTable_k#requires| (T@U T@U) Bool)
(declare-fun _module.__default.ExtractAbsL1PTable (T@U T@U Int) T@U)
(declare-fun StartFuel__module._default.ExtractAbsL1PTable () T@U)
(declare-fun _module.TTBR.TTBR_q (T@U) Bool)
(declare-fun |_module.__default.ValidAbsL1PTable#canCall| (T@U Int) Bool)
(declare-fun _module.__default.ValidAbsL1PTable (T@U Int) Bool)
(declare-fun |_module.__default.ExtractAbsL1PTable#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.ExtractAbsPageTable#requires| (T@U) Bool)
(declare-fun _module.__default.AddrInPageTable_k (T@U T@U Int) Bool)
(declare-fun |_module.__default.AddrInPageTable_k#canCall| (T@U T@U Int) Bool)
(declare-fun |_module.__default.AddrInPageTable_k#requires| (T@U T@U Int) Bool)
(declare-fun _module.Maybe.Nothing_q (T@U) Bool)
(declare-fun |_module.__default.AddrInL2PageTable#canCall| (T@U Int Int) Bool)
(declare-fun _module.__default.AddrInL2PageTable (T@U Int Int) Bool)
(declare-fun _module.__default.AddrInPageTable (T@U Int) Bool)
(declare-fun |_module.__default.AddrInPageTable#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.AddrInPageTable#requires| (T@U Int) Bool)
(declare-fun |_module.__default.AddrInL2PageTable#requires| (T@U Int Int) Bool)
(declare-fun _module.__default.ExtractAbsL1PTE (Int) T@U)
(declare-fun |_module.__default.ExtractAbsL1PTE#canCall| (Int) Bool)
(declare-fun |_module.__default.AllPagesInTable#requires| (T@U) Bool)
(declare-fun |lambda#69| (T@U) T@U)
(declare-fun |_module.__default.WordAlignedAdd#canCall| (Int Int) Bool)
(declare-fun |lambda#70| (T@U) T@U)
(declare-fun |_module.__default.WritablePagesInTable#requires| (T@U) Bool)
(declare-fun |lambda#71| (T@U) T@U)
(declare-fun _module.AbsPTE.write (T@U) Bool)
(declare-fun |lambda#72| (T@U) T@U)
(declare-fun |_module.__default.ValidAbsL1PTable#requires| (T@U Int) Bool)
(declare-fun |_module.__default.ValidMemWords#canCall| (Int Int) Bool)
(declare-fun |_module.__default.ValidAbsL1PTEWord#canCall| (Int) Bool)
(declare-fun _module.__default.ValidAbsL1PTEWord (Int) Bool)
(declare-fun |_module.__default.ValidAbsL2PTable#canCall| (T@U Int) Bool)
(declare-fun _module.__default.ValidAbsL2PTable (T@U Int) Bool)
(declare-fun |_module.__default.ExtractAbsL1PTable#requires| (T@U T@U Int) Bool)
(declare-fun _module.__default.SeqOfNumbersInRightExclusiveRange (T@U Int Int) T@U)
(declare-fun StartFuel__module._default.SeqOfNumbersInRightExclusiveRange () T@U)
(declare-fun |lambda#73| () T@U)
(declare-fun |lambda#74| (T@U Int) T@U)
(declare-fun _module.__default.IMapSeqToSeq (T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel__module._default.IMapSeqToSeq () T@U)
(declare-fun |_module.__default.ExtractAbsL2PTable#canCall| (T@U Int) Bool)
(declare-fun |_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| (Int Int) Bool)
(declare-fun |_module.__default.IMapSeqToSeq#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#75| (T@U Int) T@U)
(declare-fun |_module.__default.ValidAbsL1PTEWord#requires| (Int) Bool)
(declare-fun StartFuel__module._default.WordAsBits () T@U)
(declare-fun bv32_2_U ((_ BitVec 32)) T@U)
(declare-fun U_2_bv32 (T@U) (_ BitVec 32))
(declare-fun bv32Type () T@T)
(declare-fun StartFuel__module._default.BitAnd () T@U)
(declare-fun |_module.__default.WordAsBits#canCall| (Int) Bool)
(declare-fun |_module.__default.BitAnd#canCall| ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun _module.__default.WordAsBits (T@U Int) (_ BitVec 32))
(declare-fun _module.__default.BitAnd (T@U (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun |_module.__default.ExtractAbsL1PTE#requires| (Int) Bool)
(declare-fun |_module.__default.ValidAbsL2PTable#requires| (T@U Int) Bool)
(declare-fun |_module.__default.ValidAbsL2PTEWord#canCall| (Int) Bool)
(declare-fun _module.__default.ValidAbsL2PTEWord (Int) Bool)
(declare-fun _module.__default.ExtractAbsL2PTable (T@U Int) T@U)
(declare-fun |_module.__default.ExtractAbsL2PTable#requires| (T@U Int) Bool)
(declare-fun |lambda#76| () T@U)
(declare-fun |lambda#77| (T@U Int) T@U)
(declare-fun |_module.__default.ExtractAbsL2PTE#canCall| (Int) Bool)
(declare-fun |lambda#78| (T@U Int) T@U)
(declare-fun |_module.__default.ValidAbsL2PTEWord#requires| (Int) Bool)
(declare-fun _module.__default.ExtractAbsL2PTE (Int) T@U)
(declare-fun |_module.__default.ExtractAbsL2PTE#requires| (Int) Bool)
(declare-fun |#_module.AbsPTE.AbsPTE| (Int Bool Bool) T@U)
(declare-fun Tclass._module.Shift () T@U)
(declare-fun _module.__default.EvalShift (Int T@U) Int)
(declare-fun |_module.__default.EvalShift#canCall| (Int T@U) Bool)
(declare-fun |_module.__default.EvalShift#requires| (Int T@U) Bool)
(declare-fun _module.Shift.LSLShift_q (T@U) Bool)
(declare-fun |_module.__default.LeftShift#canCall| (Int Int) Bool)
(declare-fun _module.Shift.amount__lsl (T@U) Int)
(declare-fun _module.Shift.LSRShift_q (T@U) Bool)
(declare-fun _module.Shift.amount__lsr (T@U) Int)
(declare-fun _module.Shift.amount__ror (T@U) Int)
(declare-fun _module.__default.LeftShift (Int Int) Int)
(declare-fun |_module.__default.OperandContents#requires| (T@U T@U) Bool)
(declare-fun _module.operand.s (T@U) T@U)
(declare-fun MoreFuel__module._default.ValidRegState4 () T@U)
(declare-fun _module.operand.n (T@U) Int)
(declare-fun MoreFuel__module._default.ValidRegState5 () T@U)
(declare-fun |_module.__default.MemContents#requires| (T@U Int) Bool)
(declare-fun MoreFuel__module._default.ValidMemState2 () T@U)
(declare-fun MoreFuel__module._default.ValidMemState3 () T@U)
(declare-fun _module.__default.GlobalFullContents (T@U T@U) T@U)
(declare-fun |_module.__default.GlobalFullContents#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.GlobalFullContents#requires| (T@U T@U) Bool)
(declare-fun MoreFuel__module._default.ValidMemState4 () T@U)
(declare-fun MoreFuel__module._default.ValidMemState5 () T@U)
(declare-fun _module.__default.GlobalWord (T@U T@U Int) Int)
(declare-fun |_module.__default.GlobalWord#canCall| (T@U T@U Int) Bool)
(declare-fun |_module.__default.GlobalWord#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel__module._default.ValidMemState6 () T@U)
(declare-fun MoreFuel__module._default.ValidMemState7 () T@U)
(declare-fun |_module.__default.reseed__nondet__state#requires| (T@U) Bool)
(declare-fun MoreFuel__module._default.ValidSRegState6 () T@U)
(declare-fun |_module.__default.NONDET__GENERATOR#canCall| () Bool)
(declare-fun |_module.__default.nondet__int#canCall| (Int Int) Bool)
(declare-fun _module.__default.NONDET__GENERATOR () Int)
(declare-fun MoreFuel__module._default.ValidSRegState7 () T@U)
(declare-fun |_module.__default.takestep#requires| (T@U) Bool)
(declare-fun |_module.__default.evalUpdate#requires| (T@U T@U Int T@U) Bool)
(declare-fun MoreFuel__module._default.ValidRegState6 () T@U)
(declare-fun MoreFuel__module._default.ValidRegState7 () T@U)
(declare-fun _module.__default.evalMemUpdate (T@U Int Int T@U) Bool)
(declare-fun |_module.__default.evalMemUpdate#canCall| (T@U Int Int T@U) Bool)
(declare-fun |_module.__default.evalMemUpdate#requires| (T@U Int Int T@U) Bool)
(declare-fun MoreFuel__module._default.ValidMemState8 () T@U)
(declare-fun MoreFuel__module._default.ValidMemState9 () T@U)
(declare-fun _module.__default.evalGlobalUpdate (T@U T@U Int Int T@U) Bool)
(declare-fun |_module.__default.evalGlobalUpdate#canCall| (T@U T@U Int Int T@U) Bool)
(declare-fun |_module.__default.evalGlobalUpdate#requires| (T@U T@U Int Int T@U) Bool)
(declare-fun MoreFuel__module._default.ValidMemState10 () T@U)
(declare-fun MoreFuel__module._default.ValidMemState11 () T@U)
(declare-fun Tclass._module.ocmp () T@U)
(declare-fun _module.__default.evalCmp (T@U Int Int) Bool)
(declare-fun |_module.__default.evalCmp#canCall| (T@U Int Int) Bool)
(declare-fun |_module.__default.evalCmp#requires| (T@U Int Int) Bool)
(declare-fun _module.ocmp.OEq_q (T@U) Bool)
(declare-fun _module.ocmp.ONe_q (T@U) Bool)
(declare-fun _module.ocmp.OLe_q (T@U) Bool)
(declare-fun _module.ocmp.OGe_q (T@U) Bool)
(declare-fun _module.ocmp.OLt_q (T@U) Bool)
(declare-fun _module.ocmp.OGt_q (T@U) Bool)
(declare-fun _module.ocmp.OTstEq_q (T@U) Bool)
(declare-fun Tclass._module.obool () T@U)
(declare-fun _module.obool.o1 (T@U) T@U)
(declare-fun _module.obool.o2 (T@U) T@U)
(declare-fun |_module.__default.evalOBool#requires| (T@U T@U) Bool)
(declare-fun _module.obool.cmp (T@U) T@U)
(declare-fun _module.obool.OCmp_q (T@U) Bool)
(declare-fun _module.__default.evalGuard (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalGuard#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalGuard#requires| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.maybeHandleInterrupt#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.maybeHandleInterrupt (T@U T@U) Bool)
(declare-fun _module.__default.ValidModeChange_k (T@U T@U) Bool)
(declare-fun |_module.__default.ValidModeChange_k#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidModeChange_k#requires| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidModeChange#requires| (T@U Int) Bool)
(declare-fun Tclass._module.ins () T@U)
(declare-fun _module.__default.ValidInstruction (T@U T@U) Bool)
(declare-fun |_module.__default.ValidInstruction#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.ValidInstruction#requires| (T@U T@U) Bool)
(declare-fun _module.ins.src1ADD (T@U) T@U)
(declare-fun _module.ins.src2ADD (T@U) T@U)
(declare-fun _module.ins.dstADD (T@U) T@U)
(declare-fun _module.ins.src1SUB (T@U) T@U)
(declare-fun _module.ins.src2SUB (T@U) T@U)
(declare-fun _module.ins.dstSUB (T@U) T@U)
(declare-fun _module.ins.src1MUL (T@U) T@U)
(declare-fun _module.ins.src2MUL (T@U) T@U)
(declare-fun _module.ins.dstMUL (T@U) T@U)
(declare-fun _module.ins.src1DIV (T@U) T@U)
(declare-fun _module.ins.src2DIV (T@U) T@U)
(declare-fun _module.ins.dstDIV (T@U) T@U)
(declare-fun _module.ins.src1AND (T@U) T@U)
(declare-fun _module.ins.src2AND (T@U) T@U)
(declare-fun _module.ins.dstAND (T@U) T@U)
(declare-fun _module.ins.src1OR (T@U) T@U)
(declare-fun _module.ins.src2OR (T@U) T@U)
(declare-fun _module.ins.dstOR (T@U) T@U)
(declare-fun _module.ins.src1EOR (T@U) T@U)
(declare-fun _module.ins.src2EOR (T@U) T@U)
(declare-fun _module.ins.dstEOR (T@U) T@U)
(declare-fun _module.ins.src1LSL (T@U) T@U)
(declare-fun _module.ins.src2LSL (T@U) T@U)
(declare-fun _module.ins.dstLSL (T@U) T@U)
(declare-fun _module.ins.src1LSR (T@U) T@U)
(declare-fun _module.ins.src2LSR (T@U) T@U)
(declare-fun _module.ins.dstLSR (T@U) T@U)
(declare-fun _module.ins.srcREV (T@U) T@U)
(declare-fun _module.ins.dstREV (T@U) T@U)
(declare-fun _module.ins.srcMVN (T@U) T@U)
(declare-fun _module.ins.dstMVN (T@U) T@U)
(declare-fun _module.ins.rdLDR (T@U) T@U)
(declare-fun _module.ins.baseLDR (T@U) T@U)
(declare-fun _module.ins.ofsLDR (T@U) T@U)
(declare-fun _module.ins.rdLDR__global (T@U) T@U)
(declare-fun _module.ins.baseLDR__global (T@U) T@U)
(declare-fun _module.ins.ofsLDR__global (T@U) T@U)
(declare-fun _module.ins.globalLDR (T@U) T@U)
(declare-fun _module.ins.rdLDR__reloc (T@U) T@U)
(declare-fun _module.ins.symLDR__reloc (T@U) T@U)
(declare-fun _module.ins.rdLDR__rng (T@U) T@U)
(declare-fun _module.ins.baseLDR__rng (T@U) T@U)
(declare-fun _module.ins.ofsLDR__rng (T@U) T@U)
(declare-fun _module.ins.rdSTR (T@U) T@U)
(declare-fun _module.ins.ofsSTR (T@U) T@U)
(declare-fun _module.ins.baseSTR (T@U) T@U)
(declare-fun _module.ins.rdSTRR__global (T@U) T@U)
(declare-fun _module.ins.baseSTR__global (T@U) T@U)
(declare-fun _module.ins.ofsSTR__global (T@U) T@U)
(declare-fun _module.ins.globalSTR (T@U) T@U)
(declare-fun _module.ins.dstMOV (T@U) T@U)
(declare-fun _module.ins.srcMOV (T@U) T@U)
(declare-fun _module.ins.dstMOVW (T@U) T@U)
(declare-fun _module.ins.dstMOVT (T@U) T@U)
(declare-fun _module.ins.dstMRS (T@U) T@U)
(declare-fun _module.ins.srcMRS (T@U) T@U)
(declare-fun _module.ins.srcMSR (T@U) T@U)
(declare-fun _module.ins.dstMSR (T@U) T@U)
(declare-fun _module.ins.srcMRC (T@U) T@U)
(declare-fun _module.ins.dstMRC (T@U) T@U)
(declare-fun _module.ins.dstMCR (T@U) T@U)
(declare-fun _module.ins.srcMCR (T@U) T@U)
(declare-fun _module.ins.mod (T@U) T@U)
(declare-fun _module.ins.srcMOVW (T@U) T@U)
(declare-fun _module.ins.srcMOVT (T@U) T@U)
(declare-fun _module.ins.ADD_q (T@U) Bool)
(declare-fun _module.ins.SUB_q (T@U) Bool)
(declare-fun _module.ins.MUL_q (T@U) Bool)
(declare-fun _module.ins.UDIV_q (T@U) Bool)
(declare-fun _module.ins.AND_q (T@U) Bool)
(declare-fun _module.ins.ORR_q (T@U) Bool)
(declare-fun _module.ins.EOR_q (T@U) Bool)
(declare-fun _module.ins.LSL_q (T@U) Bool)
(declare-fun _module.ins.LSR_q (T@U) Bool)
(declare-fun _module.ins.REV_q (T@U) Bool)
(declare-fun _module.ins.MVN_q (T@U) Bool)
(declare-fun _module.ins.LDR_q (T@U) Bool)
(declare-fun _module.ins.LDR__global_q (T@U) Bool)
(declare-fun _module.ins.LDR__reloc_q (T@U) Bool)
(declare-fun _module.ins.LDR__rng_q (T@U) Bool)
(declare-fun |_module.__default.RngBase#canCall| () Bool)
(declare-fun _module.ins.STR_q (T@U) Bool)
(declare-fun _module.ins.STR__global_q (T@U) Bool)
(declare-fun _module.ins.MOV_q (T@U) Bool)
(declare-fun _module.ins.MOVW_q (T@U) Bool)
(declare-fun _module.ins.MOVT_q (T@U) Bool)
(declare-fun _module.ins.MRS_q (T@U) Bool)
(declare-fun _module.ins.MSR_q (T@U) Bool)
(declare-fun _module.ins.MRC_q (T@U) Bool)
(declare-fun _module.ins.MCR_q (T@U) Bool)
(declare-fun _module.ins.CPSID__IAF_q (T@U) Bool)
(declare-fun _module.__default.handleInterrupt (T@U T@U T@U) Bool)
(declare-fun |_module.__default.handleInterrupt#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.handleInterrupt#requires| (T@U T@U T@U) Bool)
(declare-fun _module.__default.stateTakesFiq (T@U) Bool)
(declare-fun |_module.__default.stateTakesFiq#canCall| (T@U) Bool)
(declare-fun |_module.__default.stateTakesFiq#requires| (T@U) Bool)
(declare-fun |_module.__default.NONDET__EX#canCall| () Bool)
(declare-fun _module.__default.NONDET__EX () Int)
(declare-fun _module.__default.stateTakesIrq (T@U) Bool)
(declare-fun |_module.__default.stateTakesIrq#canCall| (T@U) Bool)
(declare-fun |_module.__default.stateTakesIrq#requires| (T@U) Bool)
(declare-fun |_module.__default.maybeHandleInterrupt#requires| (T@U T@U) Bool)
(declare-fun _module.__default.evalIns_k (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalIns_k#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalIns_k#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel__module._default.UpdateTopBits () T@U)
(declare-fun StartFuel__module._default.evalMOVSPCLRUC () T@U)
(declare-fun |_module.__default.TruncateWord#canCall| (Int) Bool)
(declare-fun |_module.__default.WordAlignedSub#canCall| (Int Int) Bool)
(declare-fun _module.__default.WordAlignedSub (Int Int) Int)
(declare-fun |_module.__default.UpdateTopBits#canCall| (Int Int) Bool)
(declare-fun _module.__default.UpdateTopBits (T@U Int Int) Int)
(declare-fun |_module.__default.evalCPSID__IAF#canCall| (T@U Int T@U) Bool)
(declare-fun |_module.__default.evalMOVSPCLRUC#canCall| (T@U T@U) Bool)
(declare-fun _module.__default.evalCPSID__IAF (T@U Int T@U) Bool)
(declare-fun _module.__default.evalMOVSPCLRUC (T@U T@U T@U) Bool)
(declare-fun _module.__default.evalIns (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalIns#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalIns#requires| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalCPSID__IAF#requires| (T@U Int T@U) Bool)
(declare-fun MoreFuel__module._default.ValidSRegState8 () T@U)
(declare-fun MoreFuel__module._default.ValidSRegState9 () T@U)
(declare-fun _module.__default.evalUserExecution (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalUserExecution#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalUserExecution#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel__module._default.userspaceExecutionFn () T@U)
(declare-fun |_module.__default.evalMOVSPCLRUC#requires| (T@U T@U T@U) Bool)
(declare-fun _module.__default.evalBlock (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._module.codes () T@U)
(declare-fun |_module.__default.evalBlock#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalBlock#requires| (T@U T@U T@U T@U) Bool)
(declare-fun _module.codes.tl (T@U) T@U)
(declare-fun _module.codes.hd (T@U) T@U)
(declare-fun _module.codes.CNil_q (T@U) Bool)
(declare-fun _module.__default.evalCode (T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalCode#canCall| (T@U T@U T@U) Bool)
(declare-fun _module.__default.evalIfElse (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass._module.code () T@U)
(declare-fun |_module.__default.evalIfElse#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.evalIfElse#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun _module.__default.evalWhile (T@U T@U T@U Int T@U T@U) Bool)
(declare-fun |_module.__default.evalWhile#canCall| (T@U T@U Int T@U T@U) Bool)
(declare-fun |_module.__default.evalWhile#requires| (T@U T@U T@U Int T@U T@U) Bool)
(declare-fun |_module.__default.evalCode#requires| (T@U T@U T@U T@U) Bool)
(declare-fun _module.code.ins (T@U) T@U)
(declare-fun _module.code.block (T@U) T@U)
(declare-fun _module.code.ifCond (T@U) T@U)
(declare-fun _module.code.ifTrue (T@U) T@U)
(declare-fun _module.code.ifFalse (T@U) T@U)
(declare-fun _module.code.whileCond (T@U) T@U)
(declare-fun _module.code.whileBody (T@U) T@U)
(declare-fun _module.code.Ins_q (T@U) Bool)
(declare-fun _module.code.Block_q (T@U) Bool)
(declare-fun _module.code.IfElse_q (T@U) Bool)
(declare-fun |_module.__default.WordAsBits#requires| (T@U Int) Bool)
(declare-fun |_module.__default.BitsAsWord#requires| (T@U (_ BitVec 32)) Bool)
(declare-fun _module.__default.BitAdd (T@U (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun |_module.__default.BitAdd#requires| (T@U (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun _module.__default.BitSub (T@U (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun |_module.__default.BitSub#requires| (T@U (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun |_module.__default.BitAnd#requires| (T@U (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun |_module.__default.BitOr#requires| (T@U (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun _module.__default.BitXor (T@U (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun |_module.__default.BitXor#requires| (T@U (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun _module.__default.BitMod (T@U (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun |_module.__default.BitMod#canCall| ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun |_module.__default.BitMod#requires| (T@U (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun _module.__default.BitDiv (T@U (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun |_module.__default.BitDiv#canCall| ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun |_module.__default.BitDiv#requires| (T@U (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun _module.__default.BitMul (T@U (_ BitVec 32) (_ BitVec 32)) (_ BitVec 32))
(declare-fun |_module.__default.BitMul#requires| (T@U (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun _module.__default.BitNot (T@U (_ BitVec 32)) (_ BitVec 32))
(declare-fun |_module.__default.BitNot#requires| (T@U (_ BitVec 32)) Bool)
(declare-fun _module.__default.BitShiftLeft (T@U (_ BitVec 32) Int) (_ BitVec 32))
(declare-fun |_module.__default.BitShiftLeft#canCall| ((_ BitVec 32) Int) Bool)
(declare-fun |_module.__default.BitShiftLeft#requires| (T@U (_ BitVec 32) Int) Bool)
(declare-fun _module.__default.BitShiftRight (T@U (_ BitVec 32) Int) (_ BitVec 32))
(declare-fun |_module.__default.BitShiftRight#canCall| ((_ BitVec 32) Int) Bool)
(declare-fun |_module.__default.BitShiftRight#requires| (T@U (_ BitVec 32) Int) Bool)
(declare-fun _module.__default.BitRotateRight (T@U (_ BitVec 32) Int) (_ BitVec 32))
(declare-fun |_module.__default.BitRotateRight#canCall| ((_ BitVec 32) Int) Bool)
(declare-fun |_module.__default.BitRotateRight#requires| (T@U (_ BitVec 32) Int) Bool)
(declare-fun _module.__default.pow2 (T@U Int) Int)
(declare-fun |_module.__default.pow2#canCall| (Int) Bool)
(declare-fun |_module.__default.pow2#requires| (T@U Int) Bool)
(declare-fun _module.__default.BitAtPos_k (Int) (_ BitVec 32))
(declare-fun |_module.__default.BitAtPos_k#canCall| (Int) Bool)
(declare-fun |_module.__default.BitAtPos_k#requires| (Int) Bool)
(declare-fun _module.__default.BitAtPos (T@U Int) (_ BitVec 32))
(declare-fun StartFuel__module._default.pow2 () T@U)
(declare-fun |_module.__default.BitAtPos#canCall| (Int) Bool)
(declare-fun |_module.__default.BitAtPos#requires| (T@U Int) Bool)
(declare-fun _module.__default.BitmaskLow (Int) (_ BitVec 32))
(declare-fun |_module.__default.BitmaskLow#canCall| (Int) Bool)
(declare-fun |_module.__default.BitmaskLow#requires| (Int) Bool)
(declare-fun StartFuel__module._default.BitAtPos () T@U)
(declare-fun _module.__default.BitmaskHigh (Int) (_ BitVec 32))
(declare-fun |_module.__default.BitmaskHigh#canCall| (Int) Bool)
(declare-fun |_module.__default.BitmaskHigh#requires| (Int) Bool)
(declare-fun StartFuel__module._default.BitNot () T@U)
(declare-fun |_module.__default.BitNot#canCall| ((_ BitVec 32)) Bool)
(declare-fun _module.__default.pow2__properties (Int) Bool)
(declare-fun |_module.__default.pow2__properties#canCall| (Int) Bool)
(declare-fun |_module.__default.pow2__properties#requires| (Int) Bool)
(declare-fun |_module.__default.BitwiseMaskHigh#requires| (T@U Int Int) Bool)
(declare-fun _module.__default.BitwiseMaskLow (T@U Int Int) Int)
(declare-fun |_module.__default.BitwiseMaskLow#canCall| (Int Int) Bool)
(declare-fun |_module.__default.BitwiseMaskLow#requires| (T@U Int Int) Bool)
(declare-fun |_module.__default.fromJust#requires| (T@U T@U) Bool)
(declare-fun _module.__default.SeqLength (T@U T@U) Int)
(declare-fun |_module.__default.SeqLength#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.SeqLength#requires| (T@U T@U) Bool)
(declare-fun _module.__default.SeqSlice (T@U T@U Int Int) T@U)
(declare-fun |_module.__default.SeqSlice#canCall| (T@U T@U Int Int) Bool)
(declare-fun |_module.__default.SeqSlice#requires| (T@U T@U Int Int) Bool)
(declare-fun _module.__default.SeqDrop (T@U T@U Int) T@U)
(declare-fun |_module.__default.SeqDrop#canCall| (T@U T@U Int) Bool)
(declare-fun |_module.__default.SeqDrop#requires| (T@U T@U Int) Bool)
(declare-fun _module.__default.SeqAppendElt (T@U T@U T@U) T@U)
(declare-fun |_module.__default.SeqAppendElt#canCall| (T@U T@U T@U) Bool)
(declare-fun |_module.__default.SeqAppendElt#requires| (T@U T@U T@U) Bool)
(declare-fun _module.__default.SeqBuild (T@U T@U) T@U)
(declare-fun |_module.__default.SeqBuild#canCall| (T@U T@U) Bool)
(declare-fun |_module.__default.SeqBuild#requires| (T@U T@U) Bool)
(declare-fun _module.__default.SeqRepeat (T@U T@U Int T@U) T@U)
(declare-fun |_module.__default.SeqRepeat#canCall| (T@U Int T@U) Bool)
(declare-fun |_module.__default.SeqRepeat#requires| (T@U T@U Int T@U) Bool)
(declare-fun _module.__default.MapSeqToSeq (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |_module.__default.MapSeqToSeq#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.MapSeqToSeq#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.IMapSeqToSeq#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |_module.__default.SeqOfNumbersInRightExclusiveRange#requires| (T@U Int Int) Bool)
(declare-fun |_module.__default.isUInt32#requires| (Int) Bool)
(declare-fun |_module.__default.WordAligned#requires| (T@U Int) Bool)
(declare-fun |_module.__default.WordsToBytes#requires| (Int) Bool)
(declare-fun MoreFuel__module._default.WordAligned0 () T@U)
(declare-fun StartFuelAssert__module._default.WordAligned () T@U)
(declare-fun MoreFuel__module._default.WordAligned1 () T@U)
(declare-fun |_module.__default.BytesToWords#requires| (Int) Bool)
(declare-fun MoreFuel__module._default.WordAligned2 () T@U)
(declare-fun MoreFuel__module._default.WordAligned3 () T@U)
(declare-fun |_module.__default.TruncateWord#requires| (T@U Int) Bool)
(declare-fun _module.__default.WordOffset_k (Int Int) Int)
(declare-fun |_module.__default.WordOffset_k#canCall| (Int Int) Bool)
(declare-fun |_module.__default.WordOffset_k#requires| (Int Int) Bool)
(declare-fun MoreFuel__module._default.WordAligned4 () T@U)
(declare-fun MoreFuel__module._default.WordAligned5 () T@U)
(declare-fun |_module.__default.ValidWordOffset#requires| (Int Int) Bool)
(declare-fun |_module.__default.WordOffset#requires| (Int Int) Bool)
(declare-fun |_module.__default.PageAligned#requires| (T@U Int) Bool)
(declare-fun _module.__default.WordAlignedAdd (Int Int) Int)
(declare-fun |_module.__default.WordAlignedAdd#requires| (Int Int) Bool)
(declare-fun MoreFuel__module._default.WordAligned6 () T@U)
(declare-fun MoreFuel__module._default.WordAligned7 () T@U)
(declare-fun |_module.__default.WordAlignedSub#requires| (Int Int) Bool)
(declare-fun MoreFuel__module._default.WordAligned8 () T@U)
(declare-fun MoreFuel__module._default.WordAligned9 () T@U)
(declare-fun |_module.__default.BitwiseXor#requires| (Int Int) Bool)
(declare-fun StartFuel__module._default.BitXor () T@U)
(declare-fun |_module.__default.BitXor#canCall| ((_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun |_module.__default.BitwiseAnd#requires| (Int Int) Bool)
(declare-fun |_module.__default.BitwiseOr#requires| (Int Int) Bool)
(declare-fun |_module.__default.BitwiseNot#requires| (Int) Bool)
(declare-fun |_module.__default.LeftShift#requires| (Int Int) Bool)
(declare-fun StartFuel__module._default.BitShiftLeft () T@U)
(declare-fun |_module.__default.RightShift#requires| (Int Int) Bool)
(declare-fun StartFuel__module._default.BitShiftRight () T@U)
(declare-fun |_module.__default.RotateRight#requires| (Int Int) Bool)
(declare-fun StartFuel__module._default.BitRotateRight () T@U)
(declare-fun |_module.__default.UpdateTopBits#requires| (T@U Int Int) Bool)
(declare-fun StartFuel__module._default.BitwiseMaskLow () T@U)
(declare-fun |#_module.atoh_Type.atoh_c| (Int Int Int Int Int Int Int Int) T@U)
(declare-fun |$IsA#_module.atoh__Type| (T@U) Bool)
(declare-fun |$IsA#_module.SHA256Trace| (T@U) Bool)
(declare-fun _module.ARMReg.R0_q (T@U) Bool)
(declare-fun _module.ARMReg.R1_q (T@U) Bool)
(declare-fun _module.ARMReg.R2_q (T@U) Bool)
(declare-fun _module.ARMReg.R3_q (T@U) Bool)
(declare-fun _module.ARMReg.R4_q (T@U) Bool)
(declare-fun _module.ARMReg.R5_q (T@U) Bool)
(declare-fun _module.ARMReg.R6_q (T@U) Bool)
(declare-fun _module.ARMReg.R7_q (T@U) Bool)
(declare-fun _module.ARMReg.R8_q (T@U) Bool)
(declare-fun _module.ARMReg.R9_q (T@U) Bool)
(declare-fun _module.ARMReg.R10_q (T@U) Bool)
(declare-fun _module.ARMReg.R11_q (T@U) Bool)
(declare-fun _module.ARMReg.R12_q (T@U) Bool)
(declare-fun |$IsA#_module.ARMReg| (T@U) Bool)
(declare-fun _module.SReg.SCR_q (T@U) Bool)
(declare-fun |#_module.SReg.SCTLR| () T@U)
(declare-fun _module.SReg.SCTLR_q (T@U) Bool)
(declare-fun |#_module.SReg.VBAR| () T@U)
(declare-fun _module.SReg.VBAR_q (T@U) Bool)
(declare-fun _module.SReg.TLBIALL_q (T@U) Bool)
(declare-fun |$IsA#_module.SReg| (T@U) Bool)
(declare-fun |$IsA#_module.config| (T@U) Bool)
(declare-fun |$IsA#_module.PSR| (T@U) Bool)
(declare-fun |$IsA#_module.SCR| (T@U) Bool)
(declare-fun |$IsA#_module.TTBR| (T@U) Bool)
(declare-fun Tclass._module.RNG () T@U)
(declare-fun |$IsA#_module.RNG| (T@U) Bool)
(declare-fun |#_module.Shift.LSLShift| (Int) T@U)
(declare-fun Tclass._module.shift__amount () T@U)
(declare-fun |#_module.Shift.LSRShift| (Int) T@U)
(declare-fun |#_module.Shift.RORShift| (Int) T@U)
(declare-fun _module.Shift.RORShift_q (T@U) Bool)
(declare-fun |$IsA#_module.Shift| (T@U) Bool)
(declare-fun |#_module.operand.OReg| (T@U) T@U)
(declare-fun |#_module.operand.OShift| (T@U T@U) T@U)
(declare-fun |$IsA#_module.operand| (T@U) Bool)
(declare-fun |$IsA#_module.memstate| (T@U) Bool)
(declare-fun |$IsA#_module.state| (T@U) Bool)
(declare-fun _module.mode.Monitor_q (T@U) Bool)
(declare-fun |$IsA#_module.mode| (T@U) Bool)
(declare-fun _module.priv.PL0_q (T@U) Bool)
(declare-fun _module.priv.PL1_q (T@U) Bool)
(declare-fun |$IsA#_module.priv| (T@U) Bool)
(declare-fun _module.world.NotSecure_q (T@U) Bool)
(declare-fun |$IsA#_module.world| (T@U) Bool)
(declare-fun |#_module.exception.ExAbt| () T@U)
(declare-fun |#_module.exception.ExUnd| () T@U)
(declare-fun |#_module.exception.ExSVC| () T@U)
(declare-fun _module.exception.ExSVC_q (T@U) Bool)
(declare-fun |$IsA#_module.exception| (T@U) Bool)
(declare-fun _module.UserState.UserState_q (T@U) Bool)
(declare-fun _module.UserState.regs (T@U) T@U)
(declare-fun _module.UserState.pc (T@U) Int)
(declare-fun _module.UserState.addresses (T@U) T@U)
(declare-fun |$IsA#_module.UserState| (T@U) Bool)
(declare-fun |#_module.ins.ADD| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.SUB| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.MUL| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.UDIV| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.AND| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.ORR| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.EOR| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.LSL| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.LSR| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.REV| (T@U T@U) T@U)
(declare-fun |#_module.ins.MOV| (T@U T@U) T@U)
(declare-fun |#_module.ins.MOVW| (T@U T@U) T@U)
(declare-fun |#_module.ins.MOVT| (T@U T@U) T@U)
(declare-fun |#_module.ins.MVN| (T@U T@U) T@U)
(declare-fun |#_module.ins.LDR| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.LDR_global| (T@U T@U T@U T@U) T@U)
(declare-fun |#_module.ins.LDR_reloc| (T@U T@U) T@U)
(declare-fun |#_module.ins.STR| (T@U T@U T@U) T@U)
(declare-fun |#_module.ins.STR_global| (T@U T@U T@U T@U) T@U)
(declare-fun |#_module.ins.MRS| (T@U T@U) T@U)
(declare-fun |#_module.ins.MSR| (T@U T@U) T@U)
(declare-fun |#_module.ins.MRC| (T@U T@U) T@U)
(declare-fun |#_module.ins.MCR| (T@U T@U) T@U)
(declare-fun |#_module.ins.CPSID_IAF| (T@U) T@U)
(declare-fun |#_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE| () T@U)
(declare-fun _module.ins.MOVS__PCLR__TO__USERMODE__AND__CONTINUE_q (T@U) Bool)
(declare-fun |#_module.ins.LDR_rng| (T@U T@U T@U) T@U)
(declare-fun |$IsA#_module.ins| (T@U) Bool)
(declare-fun |#_module.ocmp.OEq| () T@U)
(declare-fun |#_module.ocmp.ONe| () T@U)
(declare-fun |#_module.ocmp.OLe| () T@U)
(declare-fun |#_module.ocmp.OGe| () T@U)
(declare-fun |#_module.ocmp.OLt| () T@U)
(declare-fun |#_module.ocmp.OGt| () T@U)
(declare-fun |#_module.ocmp.OTstNe| () T@U)
(declare-fun _module.ocmp.OTstNe_q (T@U) Bool)
(declare-fun |$IsA#_module.ocmp| (T@U) Bool)
(declare-fun |$IsA#_module.obool| (T@U) Bool)
(declare-fun |#_module.codes.CNil| () T@U)
(declare-fun |#_module.codes.va_CCons| (T@U T@U) T@U)
(declare-fun _module.codes.va__CCons_q (T@U) Bool)
(declare-fun |$IsA#_module.codes| (T@U) Bool)
(declare-fun |#_module.code.Ins| (T@U) T@U)
(declare-fun |#_module.code.Block| (T@U) T@U)
(declare-fun |#_module.code.IfElse| (T@U T@U T@U) T@U)
(declare-fun |#_module.code.While| (T@U T@U) T@U)
(declare-fun _module.code.While_q (T@U) Bool)
(declare-fun |$IsA#_module.code| (T@U) Bool)
(declare-fun _module.AbsPTE.exec (T@U) Bool)
(declare-fun |$IsA#_module.AbsPTE| (T@U) Bool)
(declare-fun |$IsA#_module.Maybe| (T@U) Bool)
(declare-fun MapType8Type (T@T T@T) T@T)
(declare-fun MapType8TypeInv0 (T@T) T@T)
(declare-fun MapType8TypeInv1 (T@T) T@T)
(declare-fun MapType8Select (T@U T@U T@U) T@U)
(declare-fun MapType8Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U) T@U)
(declare-fun |lambda#2| (T@U T@U T@U) T@U)
(declare-fun |lambda#3| (T@U T@U T@U) T@U)
(declare-fun |lambda#4| (T@U T@U T@U) T@U)
(declare-fun |lambda#5| (T@U T@U T@U) T@U)
(declare-fun |lambda#6| (T@U T@U T@U) T@U)
(declare-fun |lambda#7| (T@U T@U T@U) T@U)
(declare-fun |lambda#8| (T@U T@U T@U) T@U)
(declare-fun |lambda#9| (T@U T@U T@U) T@U)
(declare-fun |lambda#10| (T@U T@U T@U) T@U)
(declare-fun |lambda#11| (T@U T@U T@U) T@U)
(declare-fun |lambda#12| (T@U T@U T@U) T@U)
(declare-fun |lambda#13| (T@U T@U T@U) T@U)
(declare-fun |lambda#14| (T@U T@U T@U) T@U)
(declare-fun |lambda#15| (T@U T@U T@U) T@U)
(declare-fun |lambda#16| (T@U T@U T@U) T@U)
(declare-fun |lambda#17| (T@U T@U T@U) T@U)
(declare-fun |lambda#18| (T@U T@U T@U) T@U)
(declare-fun |lambda#19| (T@U T@U T@U) T@U)
(declare-fun |lambda#20| (T@U T@U T@U) T@U)
(declare-fun |lambda#21| (T@U T@U T@U) T@U)
(declare-fun |lambda#22| (T@U T@U T@U) T@U)
(declare-fun |lambda#23| (T@U T@U T@U) T@U)
(declare-fun |lambda#24| (T@U T@U T@U) T@U)
(declare-fun |lambda#25| (T@U T@U T@U) T@U)
(declare-fun |lambda#26| (T@U T@U T@U) T@U)
(declare-fun |lambda#27| (T@U T@U T@U) T@U)
(declare-fun |lambda#28| (T@U T@U T@U) T@U)
(declare-fun |lambda#29| (T@U T@U T@U) T@U)
(declare-fun |lambda#30| (T@U T@U T@U) T@U)
(declare-fun |lambda#31| (T@U T@U T@U) T@U)
(declare-fun |lambda#32| (T@U T@U T@U) T@U)
(declare-fun |lambda#33| (T@U T@U T@U) T@U)
(declare-fun |lambda#34| (T@U T@U T@U) T@U)
(declare-fun |lambda#35| (T@U T@U T@U) T@U)
(declare-fun |lambda#36| (T@U T@U T@U) T@U)
(declare-fun |lambda#37| (T@U T@U T@U) T@U)
(declare-fun |lambda#38| (T@U T@U T@U) T@U)
(declare-fun |lambda#39| (T@U T@U T@U) T@U)
(declare-fun |lambda#40| (T@U T@U T@U) T@U)
(declare-fun |lambda#41| (T@U T@U T@U) T@U)
(declare-fun |lambda#42| (T@U T@U T@U) T@U)
(declare-fun |lambda#43| (T@U T@U T@U) T@U)
(declare-fun |lambda#44| (T@U T@U T@U) T@U)
(declare-fun |lambda#45| (T@U T@U T@U) T@U)
(declare-fun |lambda#46| (T@U T@U T@U) T@U)
(declare-fun |lambda#47| (T@U T@U T@U) T@U)
(declare-fun |lambda#48| (T@U T@U T@U) T@U)
(declare-fun |lambda#49| (T@U T@U T@U) T@U)
(declare-fun |lambda#50| (T@U T@U T@U) T@U)
(declare-fun |lambda#51| (T@U T@U T@U) T@U)
(declare-fun |lambda#52| (T@U T@U T@U) T@U)
(declare-fun |lambda#53| (T@U T@U T@U) T@U)
(declare-fun |lambda#54| (T@U T@U T@U) T@U)
(declare-fun |lambda#55| (T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))))
(assert (forall ((x@@2 T@U) ) (! (UOrdering2 x@@2 x@@2) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@2) :no-pattern (U_2_bool x@@2) )))
(assert (forall ((x@@3 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@3))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@3 y) (UOrdering2 y z))) (UOrdering2 x@@3 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@3 y) (UOrdering2 y z)) )))
(assert (forall ((x@@4 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@4))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) (= x@@4 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@4 y@@0) (UOrdering2 y@@0 x@@4)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 3) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (Ctor TyTagType) 4)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 5)) (= (type NoTraitAtAll) ClassNameType)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@5 T@T) ) (! (= (Ctor (FieldType arg0@@5)) 6) :qid |ctor:FieldType| ))) (forall ((arg0@@6 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@6)) arg0@@6) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@6)) ))) (= (type alloc) (FieldType boolType))) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object) ClassNameType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array) ClassNameType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hFunc8) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type class._System.__tuple_h3) ClassNameType)) (= (Ctor DtCtorIdType) 7)) (= (type |##_System._tuple#3._#Make3|) DtCtorIdType)) (= (type Tagclass._System.__tuple_h3) TyTagType)) (= (type Tagclass._System.___hFunc5) TyTagType)) (= (type class._System.__tuple_h2) ClassNameType)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.__tuple_h2) TyTagType)) (= (type class._module.SHA256__state) ClassNameType)) (= (type |##_module.SHA256_state.SHA256_state_c|) DtCtorIdType)) (= (type Tagclass._module.word) TyTagType)) (= (type Tagclass._module.atoh__Type) TyTagType)) (= (type Tagclass._module.SHA256__state) TyTagType)) (= (type class._module.__default) ClassNameType)) (= (type Tagclass._module.__default) TyTagType)) (= (type Tagclass._module.SHA256Trace) TyTagType)) (= (type Tagclass._module.byte) TyTagType)) (= (type Tagclass._module.uint64) TyTagType)) (= (type Tagclass._module.state) TyTagType)) (= (type Tagclass._module.world) TyTagType)) (= (type Tagclass._module.mode) TyTagType)) (= (type Tagclass._module.priv) TyTagType)) (= (type Tagclass._module.PSR) TyTagType)) (= (type Tagclass._module.UserState) TyTagType)) (= (type Tagclass._module.exception) TyTagType)) (= (type Tagclass._module.ARMReg) TyTagType)) (= (type Tagclass._module.AbsPTE) TyTagType)) (= (type Tagclass._module.Maybe) TyTagType)) (= (type Tagclass._module.memstate) TyTagType)) (= (type Tagclass._module.addr) TyTagType)) (= (type Tagclass._module.SCR) TyTagType)) (= (type Tagclass._module.TTBR) TyTagType)) (= (type Tagclass._module.SReg) TyTagType)) (= (type Tagclass._module.config) TyTagType)) (= (type Tagclass._module.operand) TyTagType)) (= (type Tagclass._module.Shift) TyTagType)) (= (type Tagclass._module.ocmp) TyTagType)) (= (type Tagclass._module.obool) TyTagType)) (= (type Tagclass._module.ins) TyTagType)) (= (type Tagclass._module.codes) TyTagType)) (= (type Tagclass._module.code) TyTagType)) (= (type class._module.atoh__Type) ClassNameType)) (= (type |##_module.atoh_Type.atoh_c|) DtCtorIdType)) (= (type class._module.SHA256Trace) ClassNameType)) (= (type |##_module.SHA256Trace.SHA256Trace_c|) DtCtorIdType)) (= (type class._module.ARMReg) ClassNameType)) (= (type |##_module.ARMReg.R0|) DtCtorIdType)) (= (type |##_module.ARMReg.R1|) DtCtorIdType)) (= (type |##_module.ARMReg.R2|) DtCtorIdType)) (= (type |##_module.ARMReg.R3|) DtCtorIdType)) (= (type |##_module.ARMReg.R4|) DtCtorIdType)) (= (type |##_module.ARMReg.R5|) DtCtorIdType)) (= (type |##_module.ARMReg.R6|) DtCtorIdType)) (= (type |##_module.ARMReg.R7|) DtCtorIdType)) (= (type |##_module.ARMReg.R8|) DtCtorIdType)) (= (type |##_module.ARMReg.R9|) DtCtorIdType)) (= (type |##_module.ARMReg.R10|) DtCtorIdType)) (= (type |##_module.ARMReg.R11|) DtCtorIdType)) (= (type |##_module.ARMReg.R12|) DtCtorIdType)) (= (type |##_module.ARMReg.SP|) DtCtorIdType)) (= (type |##_module.ARMReg.LR|) DtCtorIdType)) (= (type class._module.SReg) ClassNameType)) (= (type |##_module.SReg.cpsr|) DtCtorIdType)) (= (type |##_module.SReg.spsr|) DtCtorIdType)) (= (type |##_module.SReg.SCR|) DtCtorIdType)) (= (type |##_module.SReg.SCTLR|) DtCtorIdType)) (= (type |##_module.SReg.VBAR|) DtCtorIdType)) (= (type |##_module.SReg.ttbr0|) DtCtorIdType)) (= (type |##_module.SReg.TLBIALL|) DtCtorIdType)) (= (type class._module.config) ClassNameType)) (= (type |##_module.config.Config|) DtCtorIdType)) (= (type class._module.PSR) ClassNameType)) (= (type |##_module.PSR.PSR|) DtCtorIdType)) (= (type class._module.SCR) ClassNameType)) (= (type |##_module.SCR.SCRT|) DtCtorIdType)) (= (type class._module.TTBR) ClassNameType)) (= (type |##_module.TTBR.TTBR|) DtCtorIdType)) (= (type class._module.RNG) ClassNameType)) (= (type |##_module.RNG.RNG|) DtCtorIdType)) (= (type Tagclass._module.RNG) TyTagType)) (= (type class._module.Shift) ClassNameType)) (= (type |##_module.Shift.LSLShift|) DtCtorIdType)) (= (type Tagclass._module.shift__amount) TyTagType)) (= (type |##_module.Shift.LSRShift|) DtCtorIdType)) (= (type |##_module.Shift.RORShift|) DtCtorIdType)) (= (type class._module.operand) ClassNameType)) (= (type |##_module.operand.OConst|) DtCtorIdType)) (= (type |##_module.operand.OReg|) DtCtorIdType)) (= (type |##_module.operand.OShift|) DtCtorIdType)) (= (type |##_module.operand.OSReg|) DtCtorIdType)) (= (type |##_module.operand.OSP|) DtCtorIdType)) (= (type |##_module.operand.OLR|) DtCtorIdType)) (= (type class._module.memstate) ClassNameType)) (= (type |##_module.memstate.MemState|) DtCtorIdType)) (= (type class._module.state) ClassNameType)) (= (type |##_module.state.State|) DtCtorIdType)) (= (type class._module.mode) ClassNameType)) (= (type |##_module.mode.User|) DtCtorIdType)) (= (type |##_module.mode.FIQ|) DtCtorIdType)) (= (type |##_module.mode.IRQ|) DtCtorIdType)) (= (type |##_module.mode.Supervisor|) DtCtorIdType)) (= (type |##_module.mode.Abort|) DtCtorIdType)) (= (type |##_module.mode.Undefined|) DtCtorIdType)) (= (type |##_module.mode.Monitor|) DtCtorIdType)) (= (type class._module.priv) ClassNameType)) (= (type |##_module.priv.PL0|) DtCtorIdType)) (= (type |##_module.priv.PL1|) DtCtorIdType)) (= (type class._module.world) ClassNameType)) (= (type |##_module.world.Secure|) DtCtorIdType)) (= (type |##_module.world.NotSecure|) DtCtorIdType)) (= (type class._module.exception) ClassNameType)) (= (type |##_module.exception.ExAbt|) DtCtorIdType)) (= (type |##_module.exception.ExUnd|) DtCtorIdType)) (= (type |##_module.exception.ExIRQ|) DtCtorIdType)) (= (type |##_module.exception.ExFIQ|) DtCtorIdType)) (= (type |##_module.exception.ExSVC|) DtCtorIdType)) (= (type class._module.UserState) ClassNameType)) (= (type |##_module.UserState.UserState|) DtCtorIdType)) (= (type class._module.ins) ClassNameType)) (= (type |##_module.ins.ADD|) DtCtorIdType)) (= (type |##_module.ins.SUB|) DtCtorIdType)) (= (type |##_module.ins.MUL|) DtCtorIdType)) (= (type |##_module.ins.UDIV|) DtCtorIdType)) (= (type |##_module.ins.AND|) DtCtorIdType)) (= (type |##_module.ins.ORR|) DtCtorIdType)) (= (type |##_module.ins.EOR|) DtCtorIdType)) (= (type |##_module.ins.LSL|) DtCtorIdType)) (= (type |##_module.ins.LSR|) DtCtorIdType)) (= (type |##_module.ins.REV|) DtCtorIdType)) (= (type |##_module.ins.MOV|) DtCtorIdType)) (= (type |##_module.ins.MOVW|) DtCtorIdType)) (= (type |##_module.ins.MOVT|) DtCtorIdType)) (= (type |##_module.ins.MVN|) DtCtorIdType)) (= (type |##_module.ins.LDR|) DtCtorIdType)) (= (type |##_module.ins.LDR_global|) DtCtorIdType)) (= (type |##_module.ins.LDR_reloc|) DtCtorIdType)) (= (type |##_module.ins.STR|) DtCtorIdType)) (= (type |##_module.ins.STR_global|) DtCtorIdType)) (= (type |##_module.ins.MRS|) DtCtorIdType)) (= (type |##_module.ins.MSR|) DtCtorIdType)) (= (type |##_module.ins.MRC|) DtCtorIdType)) (= (type |##_module.ins.MCR|) DtCtorIdType)) (= (type |##_module.ins.CPSID_IAF|) DtCtorIdType)) (= (type |##_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE|) DtCtorIdType)) (= (type |##_module.ins.LDR_rng|) DtCtorIdType)) (= (type class._module.ocmp) ClassNameType)) (= (type |##_module.ocmp.OEq|) DtCtorIdType)) (= (type |##_module.ocmp.ONe|) DtCtorIdType)) (= (type |##_module.ocmp.OLe|) DtCtorIdType)) (= (type |##_module.ocmp.OGe|) DtCtorIdType)) (= (type |##_module.ocmp.OLt|) DtCtorIdType)) (= (type |##_module.ocmp.OGt|) DtCtorIdType)) (= (type |##_module.ocmp.OTstEq|) DtCtorIdType)) (= (type |##_module.ocmp.OTstNe|) DtCtorIdType)) (= (type class._module.obool) ClassNameType)) (= (type |##_module.obool.OCmp|) DtCtorIdType)) (= (type class._module.codes) ClassNameType)) (= (type |##_module.codes.CNil|) DtCtorIdType)) (= (type |##_module.codes.va_CCons|) DtCtorIdType)) (= (type class._module.code) ClassNameType)) (= (type |##_module.code.Ins|) DtCtorIdType)) (= (type |##_module.code.Block|) DtCtorIdType)) (= (type |##_module.code.IfElse|) DtCtorIdType)) (= (type |##_module.code.While|) DtCtorIdType)) (= (type class._module.AbsPTE) ClassNameType)) (= (type |##_module.AbsPTE.AbsPTE|) DtCtorIdType)) (= (type class._module.Maybe) ClassNameType)) (= (type |##_module.Maybe.Nothing|) DtCtorIdType)) (= (type |##_module.Maybe.Just|) DtCtorIdType)))
(assert (distinct TBool TChar TInt TReal TagBool TagChar TagInt TagReal TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass NoTraitAtAll class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc Tagclass._System.nat class._System.object Tagclass._System.object class._System.array Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hFunc1 Tagclass._System.___hFunc2 Tagclass._System.___hFunc3 Tagclass._System.___hFunc8 Tagclass._System.___hFunc4 class._System.__tuple_h3 |##_System._tuple#3._#Make3| Tagclass._System.__tuple_h3 Tagclass._System.___hFunc5 class._System.__tuple_h2 |##_System._tuple#2._#Make2| Tagclass._System.__tuple_h2 class._module.SHA256__state |##_module.SHA256_state.SHA256_state_c| Tagclass._module.word Tagclass._module.atoh__Type Tagclass._module.SHA256__state class._module.__default Tagclass._module.__default Tagclass._module.SHA256Trace Tagclass._module.byte Tagclass._module.uint64 Tagclass._module.state Tagclass._module.world Tagclass._module.mode Tagclass._module.priv Tagclass._module.PSR Tagclass._module.UserState Tagclass._module.exception Tagclass._module.ARMReg Tagclass._module.AbsPTE Tagclass._module.Maybe Tagclass._module.memstate Tagclass._module.addr Tagclass._module.SCR Tagclass._module.TTBR Tagclass._module.SReg Tagclass._module.config Tagclass._module.operand Tagclass._module.Shift Tagclass._module.ocmp Tagclass._module.obool Tagclass._module.ins Tagclass._module.codes Tagclass._module.code class._module.atoh__Type |##_module.atoh_Type.atoh_c| class._module.SHA256Trace |##_module.SHA256Trace.SHA256Trace_c| class._module.ARMReg |##_module.ARMReg.R0| |##_module.ARMReg.R1| |##_module.ARMReg.R2| |##_module.ARMReg.R3| |##_module.ARMReg.R4| |##_module.ARMReg.R5| |##_module.ARMReg.R6| |##_module.ARMReg.R7| |##_module.ARMReg.R8| |##_module.ARMReg.R9| |##_module.ARMReg.R10| |##_module.ARMReg.R11| |##_module.ARMReg.R12| |##_module.ARMReg.SP| |##_module.ARMReg.LR| class._module.SReg |##_module.SReg.cpsr| |##_module.SReg.spsr| |##_module.SReg.SCR| |##_module.SReg.SCTLR| |##_module.SReg.VBAR| |##_module.SReg.ttbr0| |##_module.SReg.TLBIALL| class._module.config |##_module.config.Config| class._module.PSR |##_module.PSR.PSR| class._module.SCR |##_module.SCR.SCRT| class._module.TTBR |##_module.TTBR.TTBR| class._module.RNG |##_module.RNG.RNG| Tagclass._module.RNG class._module.Shift |##_module.Shift.LSLShift| Tagclass._module.shift__amount |##_module.Shift.LSRShift| |##_module.Shift.RORShift| class._module.operand |##_module.operand.OConst| |##_module.operand.OReg| |##_module.operand.OShift| |##_module.operand.OSReg| |##_module.operand.OSP| |##_module.operand.OLR| class._module.memstate |##_module.memstate.MemState| class._module.state |##_module.state.State| class._module.mode |##_module.mode.User| |##_module.mode.FIQ| |##_module.mode.IRQ| |##_module.mode.Supervisor| |##_module.mode.Abort| |##_module.mode.Undefined| |##_module.mode.Monitor| class._module.priv |##_module.priv.PL0| |##_module.priv.PL1| class._module.world |##_module.world.Secure| |##_module.world.NotSecure| class._module.exception |##_module.exception.ExAbt| |##_module.exception.ExUnd| |##_module.exception.ExIRQ| |##_module.exception.ExFIQ| |##_module.exception.ExSVC| class._module.UserState |##_module.UserState.UserState| class._module.ins |##_module.ins.ADD| |##_module.ins.SUB| |##_module.ins.MUL| |##_module.ins.UDIV| |##_module.ins.AND| |##_module.ins.ORR| |##_module.ins.EOR| |##_module.ins.LSL| |##_module.ins.LSR| |##_module.ins.REV| |##_module.ins.MOV| |##_module.ins.MOVW| |##_module.ins.MOVT| |##_module.ins.MVN| |##_module.ins.LDR| |##_module.ins.LDR_global| |##_module.ins.LDR_reloc| |##_module.ins.STR| |##_module.ins.STR_global| |##_module.ins.MRS| |##_module.ins.MSR| |##_module.ins.MRC| |##_module.ins.MCR| |##_module.ins.CPSID_IAF| |##_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE| |##_module.ins.LDR_rng| class._module.ocmp |##_module.ocmp.OEq| |##_module.ocmp.ONe| |##_module.ocmp.OLe| |##_module.ocmp.OGe| |##_module.ocmp.OLt| |##_module.ocmp.OGt| |##_module.ocmp.OTstEq| |##_module.ocmp.OTstNe| class._module.obool |##_module.obool.OCmp| class._module.codes |##_module.codes.CNil| |##_module.codes.va_CCons| class._module.code |##_module.code.Ins| |##_module.code.Block| |##_module.code.IfElse| |##_module.code.While| class._module.AbsPTE |##_module.AbsPTE.AbsPTE| class._module.Maybe |##_module.Maybe.Nothing| |##_module.Maybe.Just|) )
(assert $$Language$Dafny)
(assert  (and (forall ((arg0@@7 T@U) ) (! (= (type (TSet arg0@@7)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@7)) )) (forall ((arg0@@8 T@U) ) (! (= (type (Inv0_TSet arg0@@8)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@8)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.31:15| :skolemid |292| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@9 T@U) ) (! (= (type (TISet arg0@@9)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@9)) )) (forall ((arg0@@10 T@U) ) (! (= (type (Inv0_TISet arg0@@10)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@10)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.33:15| :skolemid |293| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@11 T@U) ) (! (= (type (TSeq arg0@@11)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@11)) )) (forall ((arg0@@12 T@U) ) (! (= (type (Inv0_TSeq arg0@@12)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@12)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.35:15| :skolemid |294| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@13 T@U) ) (! (= (type (TMultiSet arg0@@13)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@13)) )) (forall ((arg0@@14 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@14)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@14)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.37:15| :skolemid |295| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@15 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@15 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@15 arg1)) )) (forall ((arg0@@16 T@U) ) (! (= (type (Inv0_TMap arg0@@16)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@16)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.40:15| :skolemid |296| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@17 T@U) ) (! (= (type (Inv1_TMap arg0@@17)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@17)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.41:15| :skolemid |297| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@18 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@18 arg1@@0)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TIMap arg0@@19)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@19)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.44:15| :skolemid |298| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TIMap arg0@@20)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@20)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.45:15| :skolemid |299| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@21 T@U) ) (! (= (type (Tag arg0@@21)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@21)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.69:15| :skolemid |300| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.70:15| :skolemid |301| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.71:15| :skolemid |302| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.72:15| :skolemid |303| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.73:15| :skolemid |304| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.74:15| :skolemid |305| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5) :qid |DafnyPre.79:29| :skolemid |306| :pattern ( (LitInt x@@5)) )))
(assert  (and (and (= (Ctor BoxType) 8) (forall ((arg0@@22 T@U) ) (! (= (type ($Box arg0@@22)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@22)) ))) (forall ((arg0@@23 T@U) ) (! (let ((T (type arg0@@23))) (= (type (Lit arg0@@23)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@23)) ))))
(assert (forall ((x@@6 Int) ) (! (= ($Box (int_2_U (LitInt x@@6))) (Lit ($Box (int_2_U x@@6)))) :qid |DafnyPre.80:15| :skolemid |307| :pattern ( ($Box (int_2_U (LitInt x@@6)))) )))
(assert (forall ((x@@7 Real) ) (! (= (LitReal x@@7) x@@7) :qid |DafnyPre.81:30| :skolemid |308| :pattern ( (LitReal x@@7)) )))
(assert (forall ((x@@8 Real) ) (! (= ($Box (real_2_U (LitReal x@@8))) (Lit ($Box (real_2_U x@@8)))) :qid |DafnyPre.82:15| :skolemid |309| :pattern ( ($Box (real_2_U (LitReal x@@8)))) )))
(assert (forall ((x@@9 T@U) ) (! (= (Lit x@@9) x@@9) :qid |DafnyPre.83:29| :skolemid |310| :pattern ( (Lit x@@9)) )))
(assert (forall ((x@@10 T@U) ) (! (= ($Box (Lit x@@10)) (Lit ($Box x@@10))) :qid |DafnyPre.84:18| :skolemid |311| :pattern ( ($Box (Lit x@@10))) )))
(assert  (and (= (Ctor charType) 9) (forall ((arg0@@24 Int) ) (! (= (type (|char#FromInt| arg0@@24)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@24)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (= (|char#FromInt| (|char#ToInt| ch)) ch)) :qid |DafnyPre.93:15| :skolemid |312| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.96:15| :skolemid |313| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((T@@0 T@T) (arg0@@25 T@U) ) (! (= (type ($Unbox T@@0 arg0@@25)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@25)) )))
(assert (forall ((x@@11 T@U) ) (! (let ((T@@1 (type x@@11))) (= ($Unbox T@@1 ($Box x@@11)) x@@11)) :qid |DafnyPre.124:18| :skolemid |314| :pattern ( ($Box x@@11)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.126:15| :skolemid |315| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.129:15| :skolemid |316| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.132:15| :skolemid |317| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.135:15| :skolemid |318| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@26 T@T) (arg1@@1 T@T) ) (! (= (Ctor (MapType0Type arg0@@26 arg1@@1)) 10) :qid |ctor:MapType0Type| )) (forall ((arg0@@27 T@T) (arg1@@2 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@27 arg1@@2)) arg0@@27) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@27 arg1@@2)) ))) (forall ((arg0@@28 T@T) (arg1@@3 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@28 arg1@@3)) arg1@@3) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@28 arg1@@3)) ))) (forall ((arg0@@29 T@U) (arg1@@4 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@29)))) (= (type (MapType0Select arg0@@29 arg1@@4)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@29 arg1@@4)) ))) (forall ((arg0@@30 T@U) (arg1@@5 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@5))) (= (type (MapType0Store arg0@@30 arg1@@5 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@30 arg1@@5 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.138:15| :skolemid |319| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.141:15| :skolemid |320| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.144:15| :skolemid |321| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@31 T@T) ) (! (= (Ctor (SeqType arg0@@31)) 11) :qid |ctor:SeqType| )) (forall ((arg0@@32 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@32)) arg0@@32) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@32)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.147:15| :skolemid |322| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@33 T@T) (arg1@@6 T@T) ) (! (= (Ctor (MapType arg0@@33 arg1@@6)) 12) :qid |ctor:MapType| )) (forall ((arg0@@34 T@T) (arg1@@7 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@34 arg1@@7)) arg0@@34) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@34 arg1@@7)) ))) (forall ((arg0@@35 T@T) (arg1@@8 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@35 arg1@@8)) arg1@@8) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@35 arg1@@8)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.150:15| :skolemid |323| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@36 T@T) (arg1@@9 T@T) ) (! (= (Ctor (IMapType arg0@@36 arg1@@9)) 13) :qid |ctor:IMapType| )) (forall ((arg0@@37 T@T) (arg1@@10 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@37 arg1@@10)) arg0@@37) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@37 arg1@@10)) ))) (forall ((arg0@@38 T@T) (arg1@@11 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@38 arg1@@11)) arg1@@11) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@38 arg1@@11)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.153:15| :skolemid |324| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.157:18| :skolemid |325| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@39 T@T) ) (! (= (Ctor (MapType1Type arg0@@39)) 14) :qid |ctor:MapType1Type| )) (forall ((arg0@@40 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@40)) arg0@@40) :qid |typeInv:MapType1TypeInv0| :pattern ( (MapType1Type arg0@@40)) ))) (forall ((arg0@@41 T@U) (arg1@@12 T@U) (arg2@@0 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg2@@0)))) (= (type (MapType1Select arg0@@41 arg1@@12 arg2@@0)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@41 arg1@@12 arg2@@0)) ))) (forall ((arg0@@42 T@U) (arg1@@13 T@U) (arg2@@1 T@U) (arg3 T@U) ) (! (let ((aVar0@@0 (type arg1@@13))) (= (type (MapType1Store arg0@@42 arg1@@13 arg2@@1 arg3)) (MapType1Type aVar0@@0))) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@42 arg1@@13 arg2@@1 arg3)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (x1 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x1)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 x1 val@@2) x0@@2 x1) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@0 T@U) (y0@@1 T@U) (y1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@0 val@@3) y0@@1 y1) (MapType1Select m@@3 y0@@1 y1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@1 T@U) (y0@@2 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@1 val@@4) y0@@2 y1@@0) (MapType1Select m@@4 y0@@2 y1@@0))) :qid |mapAx1:MapType1Select:1| :weight 0 ))) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@2 T@U) (y0@@3 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@2 val@@5) y0@@3 y1@@1) (MapType1Select m@@5 y0@@3 y1@@1))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 15)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType1Type refType))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.160:18| :skolemid |326| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.178:14| :skolemid |327| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.179:14| :skolemid |328| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.180:14| :skolemid |329| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.181:14| :skolemid |330| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((h@@0 T@U) (v@@5 T@U) ) (!  (=> (and (= (type h@@0) (MapType1Type refType)) (= (type v@@5) intType)) ($IsAlloc v@@5 TInt h@@0)) :qid |DafnyPre.183:14| :skolemid |331| :pattern ( ($IsAlloc v@@5 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@1) (MapType1Type refType)) (= (type v@@6) realType)) ($IsAlloc v@@6 TReal h@@1)) :qid |DafnyPre.184:14| :skolemid |332| :pattern ( ($IsAlloc v@@6 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@2) (MapType1Type refType)) (= (type v@@7) boolType)) ($IsAlloc v@@7 TBool h@@2)) :qid |DafnyPre.185:14| :skolemid |333| :pattern ( ($IsAlloc v@@7 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@3) (MapType1Type refType)) (= (type v@@8) charType)) ($IsAlloc v@@8 TChar h@@3)) :qid |DafnyPre.186:14| :skolemid |334| :pattern ( ($IsAlloc v@@8 TChar h@@3)) )))
(assert (forall ((v@@9 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@9) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@9 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@9 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.190:11| :skolemid |335| :pattern ( (MapType0Select v@@9 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@9 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.190:11| :skolemid |335| :pattern ( (MapType0Select v@@9 bx@@10)) )) ($Is v@@9 (TSet t0))))) :qid |DafnyPre.188:15| :skolemid |336| :pattern ( ($Is v@@9 (TSet t0))) )))
(assert (forall ((v@@10 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@10) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@10 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@10 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.194:11| :skolemid |337| :pattern ( (MapType0Select v@@10 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@10 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.194:11| :skolemid |337| :pattern ( (MapType0Select v@@10 bx@@12)) )) ($Is v@@10 (TISet t0@@0))))) :qid |DafnyPre.192:15| :skolemid |338| :pattern ( ($Is v@@10 (TISet t0@@0))) )))
(assert (forall ((v@@11 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@11 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@11 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.198:11| :skolemid |339| :pattern ( (MapType0Select v@@11 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@11 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.198:11| :skolemid |339| :pattern ( (MapType0Select v@@11 bx@@14)) )) ($Is v@@11 (TMultiSet t0@@1))))) :qid |DafnyPre.196:15| :skolemid |340| :pattern ( ($Is v@@11 (TMultiSet t0@@1))) )))
(assert (forall ((v@@12 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@12) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@12 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@12)) :qid |DafnyPre.200:15| :skolemid |341| :pattern ( ($Is v@@12 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@43 T@U) (arg1@@14 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@43)))) (= (type (|Seq#Index| arg0@@43 arg1@@14)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@43 arg1@@14)) )))
(assert (forall ((v@@13 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@13) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@13 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@13))) ($IsBox (|Seq#Index| v@@13 i) t0@@3)) :qid |DafnyPre.204:11| :skolemid |342| :pattern ( (|Seq#Index| v@@13 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@13))) ($IsBox (|Seq#Index| v@@13 i@@0) t0@@3)) :qid |DafnyPre.204:11| :skolemid |342| :pattern ( (|Seq#Index| v@@13 i@@0)) )) ($Is v@@13 (TSeq t0@@3))))) :qid |DafnyPre.202:15| :skolemid |343| :pattern ( ($Is v@@13 (TSeq t0@@3))) )))
(assert (forall ((v@@14 T@U) (t0@@4 T@U) (h@@4 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@4) (MapType1Type refType))) (and (=> ($IsAlloc v@@14 (TSet t0@@4) h@@4) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@14 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@4)) :qid |DafnyPre.209:11| :skolemid |344| :pattern ( (MapType0Select v@@14 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@14 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@4)) :qid |DafnyPre.209:11| :skolemid |344| :pattern ( (MapType0Select v@@14 bx@@16)) )) ($IsAlloc v@@14 (TSet t0@@4) h@@4)))) :qid |DafnyPre.207:15| :skolemid |345| :pattern ( ($IsAlloc v@@14 (TSet t0@@4) h@@4)) )))
(assert (forall ((v@@15 T@U) (t0@@5 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@15) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@5) (MapType1Type refType))) (and (=> ($IsAlloc v@@15 (TISet t0@@5) h@@5) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@15 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@5)) :qid |DafnyPre.213:11| :skolemid |346| :pattern ( (MapType0Select v@@15 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@15 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@5)) :qid |DafnyPre.213:11| :skolemid |346| :pattern ( (MapType0Select v@@15 bx@@18)) )) ($IsAlloc v@@15 (TISet t0@@5) h@@5)))) :qid |DafnyPre.211:15| :skolemid |347| :pattern ( ($IsAlloc v@@15 (TISet t0@@5) h@@5)) )))
(assert (forall ((v@@16 T@U) (t0@@6 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@6) (MapType1Type refType))) (and (=> ($IsAlloc v@@16 (TMultiSet t0@@6) h@@6) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@16 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@6)) :qid |DafnyPre.217:11| :skolemid |348| :pattern ( (MapType0Select v@@16 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@16 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@6)) :qid |DafnyPre.217:11| :skolemid |348| :pattern ( (MapType0Select v@@16 bx@@20)) )) ($IsAlloc v@@16 (TMultiSet t0@@6) h@@6)))) :qid |DafnyPre.215:15| :skolemid |349| :pattern ( ($IsAlloc v@@16 (TMultiSet t0@@6) h@@6)) )))
(assert (forall ((v@@17 T@U) (t0@@7 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@7) (MapType1Type refType))) (and (=> ($IsAlloc v@@17 (TSeq t0@@7) h@@7) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@17))) ($IsAllocBox (|Seq#Index| v@@17 i@@1) t0@@7 h@@7)) :qid |DafnyPre.221:11| :skolemid |350| :pattern ( (|Seq#Index| v@@17 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@17))) ($IsAllocBox (|Seq#Index| v@@17 i@@2) t0@@7 h@@7)) :qid |DafnyPre.221:11| :skolemid |350| :pattern ( (|Seq#Index| v@@17 i@@2)) )) ($IsAlloc v@@17 (TSeq t0@@7) h@@7)))) :qid |DafnyPre.219:15| :skolemid |351| :pattern ( ($IsAlloc v@@17 (TSeq t0@@7) h@@7)) )))
(assert  (and (forall ((arg0@@44 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@44)))) (let ((U (MapTypeInv0 (type arg0@@44)))) (= (type (|Map#Elements| arg0@@44)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@44)) )) (forall ((arg0@@45 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@45)))) (= (type (|Map#Domain| arg0@@45)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@45)) ))))
(assert (forall ((v@@18 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@18 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@18) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@18) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.228:19| :skolemid |352| :pattern ( (MapType0Select (|Map#Elements| v@@18) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@18) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@18) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@18) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.228:19| :skolemid |352| :pattern ( (MapType0Select (|Map#Elements| v@@18) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@18) bx@@22)) )) ($Is v@@18 (TMap t0@@8 t1))))) :qid |DafnyPre.225:15| :skolemid |353| :pattern ( ($Is v@@18 (TMap t0@@8 t1))) )))
(assert (forall ((v@@19 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@8 T@U) ) (!  (=> (and (and (and (= (type v@@19) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@8) (MapType1Type refType))) (and (=> ($IsAlloc v@@19 (TMap t0@@9 t1@@0) h@@8) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@19) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@19) bx@@23) t1@@0 h@@8) ($IsAllocBox bx@@23 t0@@9 h@@8))) :qid |DafnyPre.236:19| :skolemid |354| :pattern ( (MapType0Select (|Map#Elements| v@@19) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@19) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@19) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@19) bx@@24) t1@@0 h@@8) ($IsAllocBox bx@@24 t0@@9 h@@8))) :qid |DafnyPre.236:19| :skolemid |354| :pattern ( (MapType0Select (|Map#Elements| v@@19) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@19) bx@@24)) )) ($IsAlloc v@@19 (TMap t0@@9 t1@@0) h@@8)))) :qid |DafnyPre.233:15| :skolemid |355| :pattern ( ($IsAlloc v@@19 (TMap t0@@9 t1@@0) h@@8)) )))
(assert  (and (forall ((arg0@@46 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@46)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@46)))) (= (type (|IMap#Elements| arg0@@46)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@46)) )) (forall ((arg0@@47 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@47)))) (= (type (|IMap#Domain| arg0@@47)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@47)) ))))
(assert (forall ((v@@20 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@20) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@20 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@20) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@20) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.245:19| :skolemid |356| :pattern ( (MapType0Select (|IMap#Elements| v@@20) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@20) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@20) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@20) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.245:19| :skolemid |356| :pattern ( (MapType0Select (|IMap#Elements| v@@20) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@20) bx@@26)) )) ($Is v@@20 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.242:15| :skolemid |357| :pattern ( ($Is v@@20 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@21 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@9) (MapType1Type refType))) (and (=> ($IsAlloc v@@21 (TIMap t0@@11 t1@@2) h@@9) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@21) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@21) bx@@27) t1@@2 h@@9) ($IsAllocBox bx@@27 t0@@11 h@@9))) :qid |DafnyPre.253:19| :skolemid |358| :pattern ( (MapType0Select (|IMap#Elements| v@@21) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@21) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@21) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@21) bx@@28) t1@@2 h@@9) ($IsAllocBox bx@@28 t0@@11 h@@9))) :qid |DafnyPre.253:19| :skolemid |358| :pattern ( (MapType0Select (|IMap#Elements| v@@21) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@21) bx@@28)) )) ($IsAlloc v@@21 (TIMap t0@@11 t1@@2) h@@9)))) :qid |DafnyPre.250:15| :skolemid |359| :pattern ( ($IsAlloc v@@21 (TIMap t0@@11 t1@@2) h@@9)) )))
(assert  (and (and (forall ((arg0@@48 T@U) (arg1@@15 T@U) ) (! (= (type (TypeTuple arg0@@48 arg1@@15)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@48 arg1@@15)) )) (forall ((arg0@@49 T@U) ) (! (= (type (TypeTupleCar arg0@@49)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@49)) ))) (forall ((arg0@@50 T@U) ) (! (= (type (TypeTupleCdr arg0@@50)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@50)) ))))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) ClassNameType) (= (type b) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a b)) a) (= (TypeTupleCdr (TypeTuple a b)) b))) :qid |DafnyPre.278:15| :skolemid |360| :pattern ( (TypeTuple a b)) )))
(assert (forall ((arg0@@51 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@51)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@51)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.287:15| :skolemid |361| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object))) :qid |DafnyPre.289:15| :skolemid |362| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 16))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.304:15| :skolemid |363| :pattern ( (BoxRank ($Box d))) )))
(assert  (and (= (Ctor LayerTypeType) 17) (forall ((arg0@@52 T@U) (arg1@@16 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@52)))) (= (type (AtLayer arg0@@52 arg1@@16)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@52 arg1@@16)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.324:18| :skolemid |364| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@53 T@U) ) (! (= (type ($LS arg0@@53)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@53)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.325:18| :skolemid |365| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@54 Int) ) (! (= (type (IndexField arg0@@54)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@54)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.336:15| :skolemid |366| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.338:15| :skolemid |367| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@55 T@U) (arg1@@17 Int) ) (! (= (type (MultiIndexField arg0@@55 arg1@@17)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@55 arg1@@17)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.341:15| :skolemid |368| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@56 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@56)))) (= (type (MultiIndexField_Inverse0 arg0@@56)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@56)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.344:15| :skolemid |369| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (and (= (Ctor NameFamilyType) 18) (forall ((alpha@@3 T@T) (arg0@@57 T@U) (arg1@@18 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@57 arg1@@18)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@57 arg1@@18)) ))) (forall ((arg0@@58 T@U) ) (! (= (type (DeclType arg0@@58)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@58)) ))) (forall ((arg0@@59 T@U) ) (! (= (type (DeclName arg0@@59)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@59)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.353:18| :skolemid |370| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@10 T@U) (k T@U) (v@@22 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@10) (MapType1Type refType)) (= (type k) (MapType1Type refType))) (= (type t@@21) TyType)) ($HeapSucc h@@10 k)) ($IsAlloc v@@22 t@@21 h@@10)) ($IsAlloc v@@22 t@@21 k)) :qid |DafnyPre.366:17| :skolemid |371| :pattern ( ($HeapSucc h@@10 k) ($IsAlloc v@@22 t@@21 h@@10)) )))
(assert (forall ((h@@11 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@11) (MapType1Type refType)) (= (type k@@0) (MapType1Type refType))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@11 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@11)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.369:14| :skolemid |372| :pattern ( ($HeapSucc h@@11 k@@0) ($IsAllocBox bx@@30 t@@22 h@@11)) )))
(assert (= (FDim alloc) 0))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o T@U) ) (!  (=> (= (type o) refType) (<= 0 (_System.array.Length o))) :qid |DafnyPre.383:15| :skolemid |373| :no-pattern (type o) :no-pattern (U_2_int o) :no-pattern (U_2_bool o) )))
(assert (forall ((x@@12 Real) ) (! (= (q@Int x@@12) (to_int x@@12)) :qid |DafnyPre.389:14| :skolemid |374| :pattern ( (q@Int x@@12)) )))
(assert (forall ((x@@13 Int) ) (! (= (q@Real x@@13) (to_real x@@13)) :qid |DafnyPre.390:15| :skolemid |375| :pattern ( (q@Real x@@13)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.391:15| :skolemid |376| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (forall ((h@@12 T@U) (r T@U) (f@@3 T@U) (x@@14 T@U) ) (! (let ((alpha@@4 (type x@@14))) (=> (and (and (and (= (type h@@12) (MapType1Type refType)) (= (type r) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType1Store h@@12 r f@@3 x@@14))) ($HeapSucc h@@12 (MapType1Store h@@12 r f@@3 x@@14)))) :qid |DafnyPre.408:22| :skolemid |377| :pattern ( (MapType1Store h@@12 r f@@3 x@@14)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (and (and (and (= (type a@@0) (MapType1Type refType)) (= (type b@@0) (MapType1Type refType))) (= (type c) (MapType1Type refType))) (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))) ($HeapSucc a@@0 c)) :qid |DafnyPre.411:15| :skolemid |378| :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) )))
(assert (forall ((h@@13 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@13) (MapType1Type refType)) (= (type k@@1) (MapType1Type refType))) ($HeapSucc h@@13 k@@1)) (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) refType) (U_2_bool (MapType1Select h@@13 o@@0 alloc))) (U_2_bool (MapType1Select k@@1 o@@0 alloc))) :qid |DafnyPre.414:30| :skolemid |379| :pattern ( (MapType1Select k@@1 o@@0 alloc)) ))) :qid |DafnyPre.413:15| :skolemid |380| :pattern ( ($HeapSucc h@@13 k@@1)) )))
(assert (forall ((h@@14 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType1Type refType)) (= (type k@@2) (MapType1Type refType))) ($HeapSuccGhost h@@14 k@@2)) (and ($HeapSucc h@@14 k@@2) (forall ((o@@1 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@1) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select h@@14 o@@1 f@@4) (MapType1Select k@@2 o@@1 f@@4)))) :qid |DafnyPre.420:20| :skolemid |381| :pattern ( (MapType1Select k@@2 o@@1 f@@4)) )))) :qid |DafnyPre.417:15| :skolemid |382| :pattern ( ($HeapSuccGhost h@@14 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.478:18| :skolemid |387| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@2 T@U) ) (! (let ((T@@7 (type o@@2))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@2)))) :qid |DafnyPre.481:18| :skolemid |388| :pattern ( (let ((T@@7 (type o@@2))) (MapType0Select (|Set#Empty| T@@7) o@@2))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@15 T@U) ) (!  (and (= (type x@@15) T@@8) (U_2_bool (MapType0Select s@@4 x@@15))) :qid |DafnyPre.484:33| :skolemid |389| :no-pattern (type x@@15) :no-pattern (U_2_int x@@15) :no-pattern (U_2_bool x@@15) )))))) :qid |DafnyPre.482:18| :skolemid |390| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@60 T@U) ) (! (let ((T@@9 (type arg0@@60))) (= (type (|Set#Singleton| arg0@@60)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@60)) )))
(assert (forall ((r@@0 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@0) r@@0)) :qid |DafnyPre.490:18| :skolemid |391| :pattern ( (|Set#Singleton| r@@0)) )))
(assert (forall ((r@@1 T@U) (o@@3 T@U) ) (! (let ((T@@10 (type r@@1))) (=> (= (type o@@3) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@1) o@@3)) (= r@@1 o@@3)) (=> (= r@@1 o@@3) (U_2_bool (MapType0Select (|Set#Singleton| r@@1) o@@3)))))) :qid |DafnyPre.491:18| :skolemid |392| :pattern ( (MapType0Select (|Set#Singleton| r@@1) o@@3)) )))
(assert (forall ((r@@2 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@2)) 1) :qid |DafnyPre.492:18| :skolemid |393| :pattern ( (|Set#Card| (|Set#Singleton| r@@2))) )))
(assert (forall ((arg0@@61 T@U) (arg1@@19 T@U) ) (! (let ((T@@11 (type arg1@@19))) (= (type (|Set#UnionOne| arg0@@61 arg1@@19)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@61 arg1@@19)) )))
(assert (forall ((a@@1 T@U) (x@@16 T@U) (o@@4 T@U) ) (! (let ((T@@12 (type x@@16))) (=> (and (= (type a@@1) (MapType0Type T@@12 boolType)) (= (type o@@4) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@1 x@@16) o@@4)) (or (= o@@4 x@@16) (U_2_bool (MapType0Select a@@1 o@@4)))) (=> (or (= o@@4 x@@16) (U_2_bool (MapType0Select a@@1 o@@4))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@1 x@@16) o@@4)))))) :qid |DafnyPre.495:18| :skolemid |394| :pattern ( (MapType0Select (|Set#UnionOne| a@@1 x@@16) o@@4)) )))
(assert (forall ((a@@2 T@U) (x@@17 T@U) ) (! (let ((T@@13 (type x@@17))) (=> (= (type a@@2) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@2 x@@17) x@@17)))) :qid |DafnyPre.497:18| :skolemid |395| :pattern ( (|Set#UnionOne| a@@2 x@@17)) )))
(assert (forall ((a@@3 T@U) (x@@18 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@18))) (=> (and (and (= (type a@@3) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@3 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@18) y@@1)))) :qid |DafnyPre.499:18| :skolemid |396| :pattern ( (|Set#UnionOne| a@@3 x@@18) (MapType0Select a@@3 y@@1)) )))
(assert (forall ((a@@4 T@U) (x@@19 T@U) ) (! (let ((T@@15 (type x@@19))) (=> (and (= (type a@@4) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@4 x@@19))) (= (|Set#Card| (|Set#UnionOne| a@@4 x@@19)) (|Set#Card| a@@4)))) :qid |DafnyPre.501:18| :skolemid |397| :pattern ( (|Set#Card| (|Set#UnionOne| a@@4 x@@19))) )))
(assert (forall ((a@@5 T@U) (x@@20 T@U) ) (! (let ((T@@16 (type x@@20))) (=> (and (= (type a@@5) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@5 x@@20)))) (= (|Set#Card| (|Set#UnionOne| a@@5 x@@20)) (+ (|Set#Card| a@@5) 1)))) :qid |DafnyPre.503:18| :skolemid |398| :pattern ( (|Set#Card| (|Set#UnionOne| a@@5 x@@20))) )))
(assert (forall ((arg0@@62 T@U) (arg1@@20 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@62)))) (= (type (|Set#Union| arg0@@62 arg1@@20)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@62 arg1@@20)) )))
(assert (forall ((a@@6 T@U) (b@@1 T@U) (o@@5 T@U) ) (! (let ((T@@18 (type o@@5))) (=> (and (= (type a@@6) (MapType0Type T@@18 boolType)) (= (type b@@1) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@6 b@@1) o@@5)) (or (U_2_bool (MapType0Select a@@6 o@@5)) (U_2_bool (MapType0Select b@@1 o@@5)))) (=> (or (U_2_bool (MapType0Select a@@6 o@@5)) (U_2_bool (MapType0Select b@@1 o@@5))) (U_2_bool (MapType0Select (|Set#Union| a@@6 b@@1) o@@5)))))) :qid |DafnyPre.507:18| :skolemid |399| :pattern ( (MapType0Select (|Set#Union| a@@6 b@@1) o@@5)) )))
(assert (forall ((a@@7 T@U) (b@@2 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@7) (MapType0Type T@@19 boolType)) (= (type b@@2) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@7 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@7 b@@2) y@@2)))) :qid |DafnyPre.509:18| :skolemid |400| :pattern ( (|Set#Union| a@@7 b@@2) (MapType0Select a@@7 y@@2)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@8) (MapType0Type T@@20 boolType)) (= (type b@@3) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@3 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) y@@3)))) :qid |DafnyPre.511:18| :skolemid |401| :pattern ( (|Set#Union| a@@8 b@@3) (MapType0Select b@@3 y@@3)) )))
(assert (forall ((arg0@@63 T@U) (arg1@@21 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@63)))) (= (type (|Set#Difference| arg0@@63 arg1@@21)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@63 arg1@@21)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@9)))) (=> (and (and (= (type a@@9) (MapType0Type T@@22 boolType)) (= (type b@@4) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@9 b@@4)) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@4) a@@9) b@@4) (= (|Set#Difference| (|Set#Union| a@@9 b@@4) b@@4) a@@9)))) :qid |DafnyPre.513:18| :skolemid |402| :pattern ( (|Set#Union| a@@9 b@@4)) )))
(assert (forall ((arg0@@64 T@U) (arg1@@22 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@64)))) (= (type (|Set#Intersection| arg0@@64 arg1@@22)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@64 arg1@@22)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (o@@6 T@U) ) (! (let ((T@@24 (type o@@6))) (=> (and (= (type a@@10) (MapType0Type T@@24 boolType)) (= (type b@@5) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@10 b@@5) o@@6)) (and (U_2_bool (MapType0Select a@@10 o@@6)) (U_2_bool (MapType0Select b@@5 o@@6)))) (=> (and (U_2_bool (MapType0Select a@@10 o@@6)) (U_2_bool (MapType0Select b@@5 o@@6))) (U_2_bool (MapType0Select (|Set#Intersection| a@@10 b@@5) o@@6)))))) :qid |DafnyPre.523:18| :skolemid |403| :pattern ( (MapType0Select (|Set#Intersection| a@@10 b@@5) o@@6)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@11)))) (=> (and (= (type a@@11) (MapType0Type T@@25 boolType)) (= (type b@@6) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@11 b@@6) b@@6) (|Set#Union| a@@11 b@@6)))) :qid |DafnyPre.526:18| :skolemid |404| :pattern ( (|Set#Union| (|Set#Union| a@@11 b@@6) b@@6)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@12)))) (=> (and (= (type a@@12) (MapType0Type T@@26 boolType)) (= (type b@@7) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@12 (|Set#Union| a@@12 b@@7)) (|Set#Union| a@@12 b@@7)))) :qid |DafnyPre.528:18| :skolemid |405| :pattern ( (|Set#Union| a@@12 (|Set#Union| a@@12 b@@7))) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@27 boolType)) (= (type b@@8) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@13 b@@8) b@@8) (|Set#Intersection| a@@13 b@@8)))) :qid |DafnyPre.530:18| :skolemid |406| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@28 boolType)) (= (type b@@9) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@14 (|Set#Intersection| a@@14 b@@9)) (|Set#Intersection| a@@14 b@@9)))) :qid |DafnyPre.532:18| :skolemid |407| :pattern ( (|Set#Intersection| a@@14 (|Set#Intersection| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@29 boolType)) (= (type b@@10) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@15 b@@10)) (|Set#Card| (|Set#Intersection| a@@15 b@@10))) (+ (|Set#Card| a@@15) (|Set#Card| b@@10))))) :qid |DafnyPre.534:18| :skolemid |408| :pattern ( (|Set#Card| (|Set#Union| a@@15 b@@10))) :pattern ( (|Set#Card| (|Set#Intersection| a@@15 b@@10))) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) (o@@7 T@U) ) (! (let ((T@@30 (type o@@7))) (=> (and (= (type a@@16) (MapType0Type T@@30 boolType)) (= (type b@@11) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@16 b@@11) o@@7)) (and (U_2_bool (MapType0Select a@@16 o@@7)) (not (U_2_bool (MapType0Select b@@11 o@@7))))) (=> (and (U_2_bool (MapType0Select a@@16 o@@7)) (not (U_2_bool (MapType0Select b@@11 o@@7)))) (U_2_bool (MapType0Select (|Set#Difference| a@@16 b@@11) o@@7)))))) :qid |DafnyPre.538:18| :skolemid |409| :pattern ( (MapType0Select (|Set#Difference| a@@16 b@@11) o@@7)) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@17) (MapType0Type T@@31 boolType)) (= (type b@@12) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@12 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@17 b@@12) y@@4))))) :qid |DafnyPre.540:18| :skolemid |410| :pattern ( (|Set#Difference| a@@17 b@@12) (MapType0Select b@@12 y@@4)) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@18)))) (=> (and (= (type a@@18) (MapType0Type T@@32 boolType)) (= (type b@@13) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@18 b@@13)) (|Set#Card| (|Set#Difference| b@@13 a@@18))) (|Set#Card| (|Set#Intersection| a@@18 b@@13))) (|Set#Card| (|Set#Union| a@@18 b@@13))) (= (|Set#Card| (|Set#Difference| a@@18 b@@13)) (- (|Set#Card| a@@18) (|Set#Card| (|Set#Intersection| a@@18 b@@13))))))) :qid |DafnyPre.542:18| :skolemid |411| :pattern ( (|Set#Card| (|Set#Difference| a@@18 b@@13))) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@19)))) (=> (and (= (type a@@19) (MapType0Type T@@33 boolType)) (= (type b@@14) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@19 b@@14) (forall ((o@@8 T@U) ) (!  (=> (and (= (type o@@8) T@@33) (U_2_bool (MapType0Select a@@19 o@@8))) (U_2_bool (MapType0Select b@@14 o@@8))) :qid |DafnyPre.551:32| :skolemid |412| :pattern ( (MapType0Select a@@19 o@@8)) :pattern ( (MapType0Select b@@14 o@@8)) ))) (=> (forall ((o@@9 T@U) ) (!  (=> (and (= (type o@@9) T@@33) (U_2_bool (MapType0Select a@@19 o@@9))) (U_2_bool (MapType0Select b@@14 o@@9))) :qid |DafnyPre.551:32| :skolemid |412| :pattern ( (MapType0Select a@@19 o@@9)) :pattern ( (MapType0Select b@@14 o@@9)) )) (|Set#Subset| a@@19 b@@14))))) :qid |DafnyPre.550:17| :skolemid |413| :pattern ( (|Set#Subset| a@@19 b@@14)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@34 boolType)) (= (type b@@15) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@20 b@@15) (forall ((o@@10 T@U) ) (!  (=> (= (type o@@10) T@@34) (and (=> (U_2_bool (MapType0Select a@@20 o@@10)) (U_2_bool (MapType0Select b@@15 o@@10))) (=> (U_2_bool (MapType0Select b@@15 o@@10)) (U_2_bool (MapType0Select a@@20 o@@10))))) :qid |DafnyPre.559:31| :skolemid |414| :pattern ( (MapType0Select a@@20 o@@10)) :pattern ( (MapType0Select b@@15 o@@10)) ))) (=> (forall ((o@@11 T@U) ) (!  (=> (= (type o@@11) T@@34) (and (=> (U_2_bool (MapType0Select a@@20 o@@11)) (U_2_bool (MapType0Select b@@15 o@@11))) (=> (U_2_bool (MapType0Select b@@15 o@@11)) (U_2_bool (MapType0Select a@@20 o@@11))))) :qid |DafnyPre.559:31| :skolemid |414| :pattern ( (MapType0Select a@@20 o@@11)) :pattern ( (MapType0Select b@@15 o@@11)) )) (|Set#Equal| a@@20 b@@15))))) :qid |DafnyPre.558:17| :skolemid |415| :pattern ( (|Set#Equal| a@@20 b@@15)) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@21)))) (=> (and (and (= (type a@@21) (MapType0Type T@@35 boolType)) (= (type b@@16) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@21 b@@16)) (= a@@21 b@@16))) :qid |DafnyPre.560:17| :skolemid |416| :pattern ( (|Set#Equal| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@36 boolType)) (= (type b@@17) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@22 b@@17) (forall ((o@@12 T@U) ) (!  (=> (= (type o@@12) T@@36) (or (not (U_2_bool (MapType0Select a@@22 o@@12))) (not (U_2_bool (MapType0Select b@@17 o@@12))))) :qid |DafnyPre.565:34| :skolemid |417| :pattern ( (MapType0Select a@@22 o@@12)) :pattern ( (MapType0Select b@@17 o@@12)) ))) (=> (forall ((o@@13 T@U) ) (!  (=> (= (type o@@13) T@@36) (or (not (U_2_bool (MapType0Select a@@22 o@@13))) (not (U_2_bool (MapType0Select b@@17 o@@13))))) :qid |DafnyPre.565:34| :skolemid |417| :pattern ( (MapType0Select a@@22 o@@13)) :pattern ( (MapType0Select b@@17 o@@13)) )) (|Set#Disjoint| a@@22 b@@17))))) :qid |DafnyPre.564:18| :skolemid |418| :pattern ( (|Set#Disjoint| a@@22 b@@17)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@14 T@U) ) (! (let ((T@@38 (type o@@14))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@14)))) :qid |DafnyPre.574:18| :skolemid |419| :pattern ( (let ((T@@38 (type o@@14))) (MapType0Select (|ISet#Empty| T@@38) o@@14))) )))
(assert (forall ((arg0@@65 T@U) (arg1@@23 T@U) ) (! (let ((T@@39 (type arg1@@23))) (= (type (|ISet#UnionOne| arg0@@65 arg1@@23)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@65 arg1@@23)) )))
(assert (forall ((a@@23 T@U) (x@@21 T@U) (o@@15 T@U) ) (! (let ((T@@40 (type x@@21))) (=> (and (= (type a@@23) (MapType0Type T@@40 boolType)) (= (type o@@15) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@23 x@@21) o@@15)) (or (= o@@15 x@@21) (U_2_bool (MapType0Select a@@23 o@@15)))) (=> (or (= o@@15 x@@21) (U_2_bool (MapType0Select a@@23 o@@15))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@23 x@@21) o@@15)))))) :qid |DafnyPre.581:18| :skolemid |420| :pattern ( (MapType0Select (|ISet#UnionOne| a@@23 x@@21) o@@15)) )))
(assert (forall ((a@@24 T@U) (x@@22 T@U) ) (! (let ((T@@41 (type x@@22))) (=> (= (type a@@24) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@24 x@@22) x@@22)))) :qid |DafnyPre.583:18| :skolemid |421| :pattern ( (|ISet#UnionOne| a@@24 x@@22)) )))
(assert (forall ((a@@25 T@U) (x@@23 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@23))) (=> (and (and (= (type a@@25) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@25 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@23) y@@5)))) :qid |DafnyPre.585:18| :skolemid |422| :pattern ( (|ISet#UnionOne| a@@25 x@@23) (MapType0Select a@@25 y@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@24 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@66)))) (= (type (|ISet#Union| arg0@@66 arg1@@24)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@66 arg1@@24)) )))
(assert (forall ((a@@26 T@U) (b@@18 T@U) (o@@16 T@U) ) (! (let ((T@@44 (type o@@16))) (=> (and (= (type a@@26) (MapType0Type T@@44 boolType)) (= (type b@@18) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@26 b@@18) o@@16)) (or (U_2_bool (MapType0Select a@@26 o@@16)) (U_2_bool (MapType0Select b@@18 o@@16)))) (=> (or (U_2_bool (MapType0Select a@@26 o@@16)) (U_2_bool (MapType0Select b@@18 o@@16))) (U_2_bool (MapType0Select (|ISet#Union| a@@26 b@@18) o@@16)))))) :qid |DafnyPre.589:18| :skolemid |423| :pattern ( (MapType0Select (|ISet#Union| a@@26 b@@18) o@@16)) )))
(assert (forall ((a@@27 T@U) (b@@19 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@27) (MapType0Type T@@45 boolType)) (= (type b@@19) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@27 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@27 b@@19) y@@6)))) :qid |DafnyPre.591:18| :skolemid |424| :pattern ( (|ISet#Union| a@@27 b@@19) (MapType0Select a@@27 y@@6)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@28) (MapType0Type T@@46 boolType)) (= (type b@@20) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@20 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) y@@7)))) :qid |DafnyPre.593:18| :skolemid |425| :pattern ( (|ISet#Union| a@@28 b@@20) (MapType0Select b@@20 y@@7)) )))
(assert (forall ((arg0@@67 T@U) (arg1@@25 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@67)))) (= (type (|ISet#Difference| arg0@@67 arg1@@25)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@67 arg1@@25)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@29)))) (=> (and (and (= (type a@@29) (MapType0Type T@@48 boolType)) (= (type b@@21) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@29 b@@21)) (and (= (|ISet#Difference| (|ISet#Union| a@@29 b@@21) a@@29) b@@21) (= (|ISet#Difference| (|ISet#Union| a@@29 b@@21) b@@21) a@@29)))) :qid |DafnyPre.595:18| :skolemid |426| :pattern ( (|ISet#Union| a@@29 b@@21)) )))
(assert (forall ((arg0@@68 T@U) (arg1@@26 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|ISet#Intersection| arg0@@68 arg1@@26)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@68 arg1@@26)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (o@@17 T@U) ) (! (let ((T@@50 (type o@@17))) (=> (and (= (type a@@30) (MapType0Type T@@50 boolType)) (= (type b@@22) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@30 b@@22) o@@17)) (and (U_2_bool (MapType0Select a@@30 o@@17)) (U_2_bool (MapType0Select b@@22 o@@17)))) (=> (and (U_2_bool (MapType0Select a@@30 o@@17)) (U_2_bool (MapType0Select b@@22 o@@17))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@30 b@@22) o@@17)))))) :qid |DafnyPre.605:18| :skolemid |427| :pattern ( (MapType0Select (|ISet#Intersection| a@@30 b@@22) o@@17)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@31)))) (=> (and (= (type a@@31) (MapType0Type T@@51 boolType)) (= (type b@@23) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@31 b@@23) b@@23) (|ISet#Union| a@@31 b@@23)))) :qid |DafnyPre.608:18| :skolemid |428| :pattern ( (|ISet#Union| (|ISet#Union| a@@31 b@@23) b@@23)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@32)))) (=> (and (= (type a@@32) (MapType0Type T@@52 boolType)) (= (type b@@24) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@32 (|ISet#Union| a@@32 b@@24)) (|ISet#Union| a@@32 b@@24)))) :qid |DafnyPre.610:18| :skolemid |429| :pattern ( (|ISet#Union| a@@32 (|ISet#Union| a@@32 b@@24))) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@53 boolType)) (= (type b@@25) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@33 b@@25) b@@25) (|ISet#Intersection| a@@33 b@@25)))) :qid |DafnyPre.612:18| :skolemid |430| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@54 boolType)) (= (type b@@26) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@34 (|ISet#Intersection| a@@34 b@@26)) (|ISet#Intersection| a@@34 b@@26)))) :qid |DafnyPre.614:18| :skolemid |431| :pattern ( (|ISet#Intersection| a@@34 (|ISet#Intersection| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) (o@@18 T@U) ) (! (let ((T@@55 (type o@@18))) (=> (and (= (type a@@35) (MapType0Type T@@55 boolType)) (= (type b@@27) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@35 b@@27) o@@18)) (and (U_2_bool (MapType0Select a@@35 o@@18)) (not (U_2_bool (MapType0Select b@@27 o@@18))))) (=> (and (U_2_bool (MapType0Select a@@35 o@@18)) (not (U_2_bool (MapType0Select b@@27 o@@18)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@35 b@@27) o@@18)))))) :qid |DafnyPre.619:18| :skolemid |432| :pattern ( (MapType0Select (|ISet#Difference| a@@35 b@@27) o@@18)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@36) (MapType0Type T@@56 boolType)) (= (type b@@28) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@28 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@36 b@@28) y@@8))))) :qid |DafnyPre.621:18| :skolemid |433| :pattern ( (|ISet#Difference| a@@36 b@@28) (MapType0Select b@@28 y@@8)) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@37)))) (=> (and (= (type a@@37) (MapType0Type T@@57 boolType)) (= (type b@@29) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@37 b@@29) (forall ((o@@19 T@U) ) (!  (=> (and (= (type o@@19) T@@57) (U_2_bool (MapType0Select a@@37 o@@19))) (U_2_bool (MapType0Select b@@29 o@@19))) :qid |DafnyPre.626:33| :skolemid |434| :pattern ( (MapType0Select a@@37 o@@19)) :pattern ( (MapType0Select b@@29 o@@19)) ))) (=> (forall ((o@@20 T@U) ) (!  (=> (and (= (type o@@20) T@@57) (U_2_bool (MapType0Select a@@37 o@@20))) (U_2_bool (MapType0Select b@@29 o@@20))) :qid |DafnyPre.626:33| :skolemid |434| :pattern ( (MapType0Select a@@37 o@@20)) :pattern ( (MapType0Select b@@29 o@@20)) )) (|ISet#Subset| a@@37 b@@29))))) :qid |DafnyPre.625:17| :skolemid |435| :pattern ( (|ISet#Subset| a@@37 b@@29)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@38)))) (=> (and (= (type a@@38) (MapType0Type T@@58 boolType)) (= (type b@@30) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@38 b@@30) (forall ((o@@21 T@U) ) (!  (=> (= (type o@@21) T@@58) (and (=> (U_2_bool (MapType0Select a@@38 o@@21)) (U_2_bool (MapType0Select b@@30 o@@21))) (=> (U_2_bool (MapType0Select b@@30 o@@21)) (U_2_bool (MapType0Select a@@38 o@@21))))) :qid |DafnyPre.634:32| :skolemid |436| :pattern ( (MapType0Select a@@38 o@@21)) :pattern ( (MapType0Select b@@30 o@@21)) ))) (=> (forall ((o@@22 T@U) ) (!  (=> (= (type o@@22) T@@58) (and (=> (U_2_bool (MapType0Select a@@38 o@@22)) (U_2_bool (MapType0Select b@@30 o@@22))) (=> (U_2_bool (MapType0Select b@@30 o@@22)) (U_2_bool (MapType0Select a@@38 o@@22))))) :qid |DafnyPre.634:32| :skolemid |436| :pattern ( (MapType0Select a@@38 o@@22)) :pattern ( (MapType0Select b@@30 o@@22)) )) (|ISet#Equal| a@@38 b@@30))))) :qid |DafnyPre.633:17| :skolemid |437| :pattern ( (|ISet#Equal| a@@38 b@@30)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@39)))) (=> (and (and (= (type a@@39) (MapType0Type T@@59 boolType)) (= (type b@@31) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@39 b@@31)) (= a@@39 b@@31))) :qid |DafnyPre.635:17| :skolemid |438| :pattern ( (|ISet#Equal| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@60 boolType)) (= (type b@@32) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@40 b@@32) (forall ((o@@23 T@U) ) (!  (=> (= (type o@@23) T@@60) (or (not (U_2_bool (MapType0Select a@@40 o@@23))) (not (U_2_bool (MapType0Select b@@32 o@@23))))) :qid |DafnyPre.640:35| :skolemid |439| :pattern ( (MapType0Select a@@40 o@@23)) :pattern ( (MapType0Select b@@32 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@60) (or (not (U_2_bool (MapType0Select a@@40 o@@24))) (not (U_2_bool (MapType0Select b@@32 o@@24))))) :qid |DafnyPre.640:35| :skolemid |439| :pattern ( (MapType0Select a@@40 o@@24)) :pattern ( (MapType0Select b@@32 o@@24)) )) (|ISet#Disjoint| a@@40 b@@32))))) :qid |DafnyPre.639:18| :skolemid |440| :pattern ( (|ISet#Disjoint| a@@40 b@@32)) )))
(assert (forall ((a@@41 Int) (b@@33 Int) ) (!  (and (=> (<= a@@41 b@@33) (= (|Math#min| a@@41 b@@33) a@@41)) (=> (= (|Math#min| a@@41 b@@33) a@@41) (<= a@@41 b@@33))) :qid |DafnyPre.647:15| :skolemid |441| :pattern ( (|Math#min| a@@41 b@@33)) )))
(assert (forall ((a@@42 Int) (b@@34 Int) ) (!  (and (=> (<= b@@34 a@@42) (= (|Math#min| a@@42 b@@34) b@@34)) (=> (= (|Math#min| a@@42 b@@34) b@@34) (<= b@@34 a@@42))) :qid |DafnyPre.648:15| :skolemid |442| :pattern ( (|Math#min| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (or (= (|Math#min| a@@43 b@@35) a@@43) (= (|Math#min| a@@43 b@@35) b@@35)) :qid |DafnyPre.649:15| :skolemid |443| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) ) (!  (=> (<= 0 a@@44) (= (|Math#clip| a@@44) a@@44)) :qid |DafnyPre.652:15| :skolemid |444| :pattern ( (|Math#clip| a@@44)) )))
(assert (forall ((a@@45 Int) ) (!  (=> (< a@@45 0) (= (|Math#clip| a@@45) 0)) :qid |DafnyPre.653:15| :skolemid |445| :pattern ( (|Math#clip| a@@45)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.661:11| :skolemid |446| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.661:11| :skolemid |446| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.659:18| :skolemid |447| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.664:18| :skolemid |448| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@24 T@U) (n@@0 T@U) ) (! (let ((T@@63 (type x@@24))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@0) intType)) (<= 0 (U_2_int n@@0))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@24 n@@0)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@24))) (U_2_int n@@0))))) :qid |DafnyPre.665:18| :skolemid |449| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@24 n@@0))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@25 T@U) ) (! (let ((T@@65 (type o@@25))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@25)) 0)) :qid |DafnyPre.669:18| :skolemid |450| :pattern ( (let ((T@@65 (type o@@25))) (MapType0Select (|MultiSet#Empty| T@@65) o@@25))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@25 T@U) ) (!  (and (= (type x@@25) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@25)))) :qid |DafnyPre.672:38| :skolemid |451| :no-pattern (type x@@25) :no-pattern (U_2_int x@@25) :no-pattern (U_2_bool x@@25) )))))) :qid |DafnyPre.670:18| :skolemid |452| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@69 T@U) ) (! (let ((T@@67 (type arg0@@69))) (= (type (|MultiSet#Singleton| arg0@@69)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@69)) )))
(assert (forall ((r@@3 T@U) (o@@26 T@U) ) (! (let ((T@@68 (type r@@3))) (=> (= (type o@@26) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@3) o@@26)) 1) (= r@@3 o@@26)) (=> (= r@@3 o@@26) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@3) o@@26)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@3) o@@26)) 0) (not (= r@@3 o@@26))) (=> (not (= r@@3 o@@26)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@3) o@@26)) 0)))))) :qid |DafnyPre.675:18| :skolemid |453| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@3) o@@26)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@27 T@U) ) (! (let ((T@@69 (type arg1@@27))) (= (type (|MultiSet#UnionOne| arg0@@70 arg1@@27)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@70 arg1@@27)) )))
(assert (forall ((r@@4 T@U) ) (! (let ((T@@70 (type r@@4))) (= (|MultiSet#Singleton| r@@4) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@4))) :qid |DafnyPre.677:18| :skolemid |454| :pattern ( (|MultiSet#Singleton| r@@4)) )))
(assert (forall ((a@@46 T@U) (x@@26 T@U) (o@@27 T@U) ) (! (let ((T@@71 (type x@@26))) (=> (and (= (type a@@46) (MapType0Type T@@71 intType)) (= (type o@@27) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@46 x@@26) o@@27))) (or (= o@@27 x@@26) (< 0 (U_2_int (MapType0Select a@@46 o@@27))))) (=> (or (= o@@27 x@@26) (< 0 (U_2_int (MapType0Select a@@46 o@@27)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@46 x@@26) o@@27))))))) :qid |DafnyPre.681:18| :skolemid |455| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@46 x@@26) o@@27)) )))
(assert (forall ((a@@47 T@U) (x@@27 T@U) ) (! (let ((T@@72 (type x@@27))) (=> (= (type a@@47) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@47 x@@27) x@@27)) (+ (U_2_int (MapType0Select a@@47 x@@27)) 1)))) :qid |DafnyPre.684:18| :skolemid |456| :pattern ( (|MultiSet#UnionOne| a@@47 x@@27)) )))
(assert (forall ((a@@48 T@U) (x@@28 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@28))) (=> (and (and (= (type a@@48) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@48 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@28) y@@9))))) :qid |DafnyPre.687:18| :skolemid |457| :pattern ( (|MultiSet#UnionOne| a@@48 x@@28) (MapType0Select a@@48 y@@9)) )))
(assert (forall ((a@@49 T@U) (x@@29 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@29))) (=> (and (and (= (type a@@49) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@29 y@@10))) (= (U_2_int (MapType0Select a@@49 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@29) y@@10))))) :qid |DafnyPre.690:18| :skolemid |458| :pattern ( (|MultiSet#UnionOne| a@@49 x@@29) (MapType0Select a@@49 y@@10)) )))
(assert (forall ((a@@50 T@U) (x@@30 T@U) ) (! (let ((T@@75 (type x@@30))) (=> (= (type a@@50) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@50 x@@30)) (+ (|MultiSet#Card| a@@50) 1)))) :qid |DafnyPre.692:18| :skolemid |459| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@50 x@@30))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@28 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@71)))) (= (type (|MultiSet#Union| arg0@@71 arg1@@28)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@71 arg1@@28)) )))
(assert (forall ((a@@51 T@U) (b@@36 T@U) (o@@28 T@U) ) (! (let ((T@@77 (type o@@28))) (=> (and (= (type a@@51) (MapType0Type T@@77 intType)) (= (type b@@36) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@51 b@@36) o@@28)) (+ (U_2_int (MapType0Select a@@51 o@@28)) (U_2_int (MapType0Select b@@36 o@@28)))))) :qid |DafnyPre.698:18| :skolemid |460| :pattern ( (MapType0Select (|MultiSet#Union| a@@51 b@@36) o@@28)) )))
(assert (forall ((a@@52 T@U) (b@@37 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@52)))) (=> (and (= (type a@@52) (MapType0Type T@@78 intType)) (= (type b@@37) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@52 b@@37)) (+ (|MultiSet#Card| a@@52) (|MultiSet#Card| b@@37))))) :qid |DafnyPre.700:18| :skolemid |461| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@52 b@@37))) )))
(assert (forall ((arg0@@72 T@U) (arg1@@29 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|MultiSet#Intersection| arg0@@72 arg1@@29)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@72 arg1@@29)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@29 T@U) ) (! (let ((T@@80 (type o@@29))) (=> (and (= (type a@@53) (MapType0Type T@@80 intType)) (= (type b@@38) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@53 b@@38) o@@29)) (|Math#min| (U_2_int (MapType0Select a@@53 o@@29)) (U_2_int (MapType0Select b@@38 o@@29)))))) :qid |DafnyPre.704:18| :skolemid |462| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@53 b@@38) o@@29)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@81 intType)) (= (type b@@39) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@54 b@@39) b@@39) (|MultiSet#Intersection| a@@54 b@@39)))) :qid |DafnyPre.708:18| :skolemid |463| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@54 b@@39) b@@39)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@55)))) (=> (and (= (type a@@55) (MapType0Type T@@82 intType)) (= (type b@@40) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@55 (|MultiSet#Intersection| a@@55 b@@40)) (|MultiSet#Intersection| a@@55 b@@40)))) :qid |DafnyPre.710:18| :skolemid |464| :pattern ( (|MultiSet#Intersection| a@@55 (|MultiSet#Intersection| a@@55 b@@40))) )))
(assert (forall ((arg0@@73 T@U) (arg1@@30 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|MultiSet#Difference| arg0@@73 arg1@@30)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@73 arg1@@30)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) (o@@30 T@U) ) (! (let ((T@@84 (type o@@30))) (=> (and (= (type a@@56) (MapType0Type T@@84 intType)) (= (type b@@41) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@56 b@@41) o@@30)) (|Math#clip| (- (U_2_int (MapType0Select a@@56 o@@30)) (U_2_int (MapType0Select b@@41 o@@30))))))) :qid |DafnyPre.715:18| :skolemid |465| :pattern ( (MapType0Select (|MultiSet#Difference| a@@56 b@@41) o@@30)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@57) (MapType0Type T@@85 intType)) (= (type b@@42) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@57 y@@11)) (U_2_int (MapType0Select b@@42 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@57 b@@42) y@@11)) 0))) :qid |DafnyPre.717:18| :skolemid |466| :pattern ( (|MultiSet#Difference| a@@57 b@@42) (MapType0Select b@@42 y@@11) (MapType0Select a@@57 y@@11)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@58)))) (=> (and (= (type a@@58) (MapType0Type T@@86 intType)) (= (type b@@43) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@58 b@@43)) (|MultiSet#Card| (|MultiSet#Difference| b@@43 a@@58))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@58 b@@43)))) (|MultiSet#Card| (|MultiSet#Union| a@@58 b@@43))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@58 b@@43)) (- (|MultiSet#Card| a@@58) (|MultiSet#Card| (|MultiSet#Intersection| a@@58 b@@43))))))) :qid |DafnyPre.719:18| :skolemid |467| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@58 b@@43))) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@59)))) (=> (and (= (type a@@59) (MapType0Type T@@87 intType)) (= (type b@@44) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@59 b@@44) (forall ((o@@31 T@U) ) (!  (=> (= (type o@@31) T@@87) (<= (U_2_int (MapType0Select a@@59 o@@31)) (U_2_int (MapType0Select b@@44 o@@31)))) :qid |DafnyPre.729:37| :skolemid |468| :pattern ( (MapType0Select a@@59 o@@31)) :pattern ( (MapType0Select b@@44 o@@31)) ))) (=> (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@87) (<= (U_2_int (MapType0Select a@@59 o@@32)) (U_2_int (MapType0Select b@@44 o@@32)))) :qid |DafnyPre.729:37| :skolemid |468| :pattern ( (MapType0Select a@@59 o@@32)) :pattern ( (MapType0Select b@@44 o@@32)) )) (|MultiSet#Subset| a@@59 b@@44))))) :qid |DafnyPre.728:17| :skolemid |469| :pattern ( (|MultiSet#Subset| a@@59 b@@44)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@88 intType)) (= (type b@@45) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@60 b@@45) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@88) (= (U_2_int (MapType0Select a@@60 o@@33)) (U_2_int (MapType0Select b@@45 o@@33)))) :qid |DafnyPre.733:36| :skolemid |470| :pattern ( (MapType0Select a@@60 o@@33)) :pattern ( (MapType0Select b@@45 o@@33)) ))) (=> (forall ((o@@34 T@U) ) (!  (=> (= (type o@@34) T@@88) (= (U_2_int (MapType0Select a@@60 o@@34)) (U_2_int (MapType0Select b@@45 o@@34)))) :qid |DafnyPre.733:36| :skolemid |470| :pattern ( (MapType0Select a@@60 o@@34)) :pattern ( (MapType0Select b@@45 o@@34)) )) (|MultiSet#Equal| a@@60 b@@45))))) :qid |DafnyPre.732:17| :skolemid |471| :pattern ( (|MultiSet#Equal| a@@60 b@@45)) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@61)))) (=> (and (and (= (type a@@61) (MapType0Type T@@89 intType)) (= (type b@@46) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@61 b@@46)) (= a@@61 b@@46))) :qid |DafnyPre.735:17| :skolemid |472| :pattern ( (|MultiSet#Equal| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@90 intType)) (= (type b@@47) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@62 b@@47) (forall ((o@@35 T@U) ) (!  (=> (= (type o@@35) T@@90) (or (= (U_2_int (MapType0Select a@@62 o@@35)) 0) (= (U_2_int (MapType0Select b@@47 o@@35)) 0))) :qid |DafnyPre.740:39| :skolemid |473| :pattern ( (MapType0Select a@@62 o@@35)) :pattern ( (MapType0Select b@@47 o@@35)) ))) (=> (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@90) (or (= (U_2_int (MapType0Select a@@62 o@@36)) 0) (= (U_2_int (MapType0Select b@@47 o@@36)) 0))) :qid |DafnyPre.740:39| :skolemid |473| :pattern ( (MapType0Select a@@62 o@@36)) :pattern ( (MapType0Select b@@47 o@@36)) )) (|MultiSet#Disjoint| a@@62 b@@47))))) :qid |DafnyPre.739:18| :skolemid |474| :pattern ( (|MultiSet#Disjoint| a@@62 b@@47)) )))
(assert (forall ((arg0@@74 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|MultiSet#FromSet| arg0@@74)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@74)) )))
(assert (forall ((s@@8 T@U) (a@@63 T@U) ) (! (let ((T@@92 (type a@@63))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@63)) 0) (not (U_2_bool (MapType0Select s@@8 a@@63)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@63))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@63)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@63)) 1) (U_2_bool (MapType0Select s@@8 a@@63))) (=> (U_2_bool (MapType0Select s@@8 a@@63)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@63)) 1)))))) :qid |DafnyPre.744:18| :skolemid |475| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@63)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.747:18| :skolemid |476| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@75)))) (= (type (|MultiSet#FromSeq| arg0@@75)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@75)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.753:18| :skolemid |477| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.755:18| :skolemid |478| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@97 (type arg1@@31))) (= (type (|Seq#Build| arg0@@76 arg1@@31)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@76 arg1@@31)) )))
(assert (forall ((s@@12 T@U) (v@@23 T@U) ) (! (let ((T@@98 (type v@@23))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@23)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@23)))) :qid |DafnyPre.759:18| :skolemid |479| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@23))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |480| )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@77)))) (= (type (|Seq#Append| arg0@@77 arg1@@32)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@64 T@U) (b@@48 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (SeqType T@@102)) (= (type b@@48) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@64 b@@48)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@64) (|MultiSet#FromSeq| b@@48))))) :qid |DafnyPre.766:18| :skolemid |481| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@64 b@@48))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 Int) (arg2@@2 T@U) ) (! (let ((T@@103 (type arg2@@2))) (= (type (|Seq#Update| arg0@@78 arg1@@33 arg2@@2)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@78 arg1@@33 arg2@@2)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@24 T@U) (x@@31 T@U) ) (! (let ((T@@104 (type v@@24))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@31) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@24)) x@@31)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@24)) x@@31))))) :qid |DafnyPre.771:18| :skolemid |482| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@24)) x@@31)) )))
(assert (forall ((s@@14 T@U) (x@@32 T@U) ) (! (let ((T@@105 (type x@@32))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@32 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.778:11| :skolemid |483| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@32)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@32))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@32 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.778:11| :skolemid |483| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.777:18| :skolemid |484| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@32)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.787:18| :skolemid |485| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |486| )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.791:18| :skolemid |487| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.801:18| :skolemid |488| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@79 T@U) ) (! (let ((T@@110 (type arg0@@79))) (= (type (|Seq#Singleton| arg0@@79)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@79)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.804:18| :skolemid |489| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@80 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@80)))) (= (type (|Seq#Build_inv0| arg0@@80)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@80)) )) (forall ((arg0@@81 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@81)))) (= (type (|Seq#Build_inv1| arg0@@81)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@81)) ))))
(assert (forall ((s@@17 T@U) (val@@6 T@U) ) (! (let ((T@@113 (type val@@6))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@6)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@6)) val@@6)))) :qid |DafnyPre.809:18| :skolemid |490| :pattern ( (|Seq#Build| s@@17 val@@6)) )))
(assert (forall ((s@@18 T@U) (v@@25 T@U) ) (! (let ((T@@114 (type v@@25))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@25)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.814:18| :skolemid |491| :pattern ( (|Seq#Length| (|Seq#Build| s@@18 v@@25))) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@26 T@U) ) (! (let ((T@@115 (type v@@26))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@26) i@@11) v@@26)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@26) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.816:18| :skolemid |492| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@26) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.821:15| :skolemid |493| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.825:18| :skolemid |494| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.829:15| :skolemid |495| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.833:18| :skolemid |496| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@1 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@1 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@1) (|Seq#Index| s0@@1 n@@1))) (=> (<= (|Seq#Length| s0@@1) n@@1) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@1) (|Seq#Index| s1@@1 (- n@@1 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.834:18| :skolemid |497| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@1)) )))
(assert (forall ((s@@21 T@U) (i@@12 Int) (v@@27 T@U) ) (! (let ((T@@118 (type v@@27))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@12 v@@27)) (|Seq#Length| s@@21))))) :qid |DafnyPre.839:18| :skolemid |498| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@12 v@@27))) )))
(assert (forall ((s@@22 T@U) (i@@13 Int) (v@@28 T@U) (n@@2 Int) ) (! (let ((T@@119 (type v@@28))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@2) (< n@@2 (|Seq#Length| s@@22))) (and (=> (= i@@13 n@@2) (= (|Seq#Index| (|Seq#Update| s@@22 i@@13 v@@28) n@@2) v@@28)) (=> (not (= i@@13 n@@2)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@13 v@@28) n@@2) (|Seq#Index| s@@22 n@@2))))))) :qid |DafnyPre.841:18| :skolemid |499| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@13 v@@28) n@@2)) )))
(assert (forall ((s@@23 T@U) (x@@33 T@U) ) (! (let ((T@@120 (type x@@33))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@33) (exists ((i@@14 Int) ) (!  (and (and (<= 0 i@@14) (< i@@14 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@14) x@@33)) :qid |DafnyPre.849:13| :skolemid |500| :pattern ( (|Seq#Index| s@@23 i@@14)) ))) (=> (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@33)) :qid |DafnyPre.849:13| :skolemid |500| :pattern ( (|Seq#Index| s@@23 i@@15)) )) (|Seq#Contains| s@@23 x@@33))))) :qid |DafnyPre.847:18| :skolemid |501| :pattern ( (|Seq#Contains| s@@23 x@@33)) )))
(assert (forall ((x@@34 T@U) ) (! (let ((T@@121 (type x@@34))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@34))) :qid |DafnyPre.850:18| :skolemid |502| :pattern ( (let ((T@@121 (type x@@34))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@34))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@35 T@U) ) (! (let ((T@@122 (type x@@35))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@35) (or (|Seq#Contains| s0@@2 x@@35) (|Seq#Contains| s1@@2 x@@35))) (=> (or (|Seq#Contains| s0@@2 x@@35) (|Seq#Contains| s1@@2 x@@35)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@35))))) :qid |DafnyPre.854:18| :skolemid |503| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@35)) )))
(assert (forall ((s@@24 T@U) (v@@29 T@U) (x@@36 T@U) ) (! (let ((T@@123 (type v@@29))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@36) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@29) x@@36) (or (= v@@29 x@@36) (|Seq#Contains| s@@24 x@@36))) (=> (or (= v@@29 x@@36) (|Seq#Contains| s@@24 x@@36)) (|Seq#Contains| (|Seq#Build| s@@24 v@@29) x@@36))))) :qid |DafnyPre.859:18| :skolemid |504| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@29) x@@36)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@34 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@82)))) (= (type (|Seq#Take| arg0@@82 arg1@@34)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@82 arg1@@34)) )))
(assert (forall ((s@@25 T@U) (n@@3 Int) (x@@37 T@U) ) (! (let ((T@@125 (type x@@37))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@3) x@@37) (exists ((i@@16 Int) ) (!  (and (and (and (<= 0 i@@16) (< i@@16 n@@3)) (< i@@16 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@16) x@@37)) :qid |DafnyPre.866:13| :skolemid |505| :pattern ( (|Seq#Index| s@@25 i@@16)) ))) (=> (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@3)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@37)) :qid |DafnyPre.866:13| :skolemid |505| :pattern ( (|Seq#Index| s@@25 i@@17)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@3) x@@37))))) :qid |DafnyPre.863:18| :skolemid |506| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@3) x@@37)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@35 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Drop| arg0@@83 arg1@@35)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@83 arg1@@35)) )))
(assert (forall ((s@@26 T@U) (n@@4 Int) (x@@38 T@U) ) (! (let ((T@@127 (type x@@38))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@4) x@@38) (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 n@@4) (<= n@@4 i@@18)) (< i@@18 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@18) x@@38)) :qid |DafnyPre.871:13| :skolemid |507| :pattern ( (|Seq#Index| s@@26 i@@18)) ))) (=> (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@4) (<= n@@4 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@38)) :qid |DafnyPre.871:13| :skolemid |507| :pattern ( (|Seq#Index| s@@26 i@@19)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@4) x@@38))))) :qid |DafnyPre.868:18| :skolemid |508| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@4) x@@38)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.878:13| :skolemid |509| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.878:13| :skolemid |509| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.875:18| :skolemid |510| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@65 T@U) (b@@49 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@65)))) (=> (and (and (= (type a@@65) (SeqType T@@129)) (= (type b@@49) (SeqType T@@129))) (|Seq#Equal| a@@65 b@@49)) (= a@@65 b@@49))) :qid |DafnyPre.880:18| :skolemid |511| :pattern ( (|Seq#Equal| a@@65 b@@49)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@5 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@5) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@5)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.886:13| :skolemid |512| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@5)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.886:13| :skolemid |512| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@5))))) :qid |DafnyPre.884:18| :skolemid |513| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@5)) )))
(assert (forall ((s@@27 T@U) (n@@6 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@6) (<= n@@6 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@6)) n@@6)))) :qid |DafnyPre.890:18| :skolemid |514| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@6))) )))
(assert (forall ((s@@28 T@U) (n@@7 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@7)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@7) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.892:18| :weight 25 :skolemid |515| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@7) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@7)) )))
(assert (forall ((s@@29 T@U) (n@@8 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@8) (<= n@@8 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@8)) (- (|Seq#Length| s@@29) n@@8))))) :qid |DafnyPre.900:18| :skolemid |516| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@8))) )))
(assert (forall ((s@@30 T@U) (n@@9 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@9) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@9))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@9) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@9)))))) :qid |DafnyPre.902:18| :weight 25 :skolemid |517| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@9) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@10 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@10) (<= n@@10 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@10) (- k@@3 n@@10)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.907:18| :weight 25 :skolemid |518| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@10)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) (|Seq#Length| s@@32)) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) (|Seq#Length| s@@32)) t@@28)))) :qid |DafnyPre.913:18| :skolemid |519| :pattern ( (|Seq#Append| s@@32 t@@28)) )))
(assert (forall ((arg0@@84 T@U) (arg1@@36 T@U) ) (! (= (type (|Seq#FromArray| arg0@@84 arg1@@36)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@84 arg1@@36)) )))
(assert (forall ((h@@15 T@U) (a@@66 T@U) ) (!  (=> (and (= (type h@@15) (MapType1Type refType)) (= (type a@@66) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@15 a@@66)) (_System.array.Length a@@66))) :qid |DafnyPre.919:15| :skolemid |520| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@15 a@@66))) )))
(assert (forall ((h@@16 T@U) (a@@67 T@U) ) (!  (=> (and (= (type h@@16) (MapType1Type refType)) (= (type a@@67) refType)) (forall ((i@@20 Int) ) (!  (=> (and (<= 0 i@@20) (< i@@20 (|Seq#Length| (|Seq#FromArray| h@@16 a@@67)))) (= (|Seq#Index| (|Seq#FromArray| h@@16 a@@67) i@@20) (MapType1Select h@@16 a@@67 (IndexField i@@20)))) :qid |DafnyPre.924:11| :skolemid |521| :pattern ( (MapType1Select h@@16 a@@67 (IndexField i@@20))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@16 a@@67) i@@20)) ))) :qid |DafnyPre.922:15| :skolemid |522| :pattern ( (|Seq#FromArray| h@@16 a@@67)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@68 T@U) ) (!  (=> (and (and (= (type h0) (MapType1Type refType)) (= (type h1) (MapType1Type refType))) (= (type a@@68) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (_System.array.Length a@@68))) (= (MapType1Select h0 a@@68 (IndexField i@@21)) (MapType1Select h1 a@@68 (IndexField i@@21)))) :qid |DafnyPre.937:11| :skolemid |523| ))) (= (|Seq#FromArray| h0 a@@68) (|Seq#FromArray| h1 a@@68)))) :qid |DafnyPre.934:15| :skolemid |524| :pattern ( (|Seq#FromArray| h1 a@@68) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@17 T@U) (i@@22 Int) (v@@30 T@U) (a@@69 T@U) ) (!  (=> (and (and (and (= (type h@@17) (MapType1Type refType)) (= (type v@@30) BoxType)) (= (type a@@69) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@69)))) (= (|Seq#FromArray| (MapType1Store h@@17 a@@69 (IndexField i@@22) v@@30) a@@69) (|Seq#Update| (|Seq#FromArray| h@@17 a@@69) i@@22 v@@30))) :qid |DafnyPre.941:15| :skolemid |525| :pattern ( (|Seq#FromArray| (MapType1Store h@@17 a@@69 (IndexField i@@22) v@@30) a@@69)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@31 T@U) (n@@11 Int) ) (! (let ((T@@137 (type v@@31))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@11)) (<= n@@11 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@31) n@@11) (|Seq#Update| (|Seq#Take| s@@33 n@@11) i@@23 v@@31))))) :qid |DafnyPre.946:18| :skolemid |526| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@31) n@@11)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@32 T@U) (n@@12 Int) ) (! (let ((T@@138 (type v@@32))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@12 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@32) n@@12) (|Seq#Take| s@@34 n@@12))))) :qid |DafnyPre.949:18| :skolemid |527| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@32) n@@12)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@33 T@U) (n@@13 Int) ) (! (let ((T@@139 (type v@@33))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@13) (<= n@@13 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@33) n@@13) (|Seq#Update| (|Seq#Drop| s@@35 n@@13) (- i@@25 n@@13) v@@33))))) :qid |DafnyPre.952:18| :skolemid |528| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@33) n@@13)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@34 T@U) (n@@14 Int) ) (! (let ((T@@140 (type v@@34))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@14)) (< n@@14 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@34) n@@14) (|Seq#Drop| s@@36 n@@14))))) :qid |DafnyPre.955:18| :skolemid |529| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@34) n@@14)) )))
(assert (forall ((h@@18 T@U) (a@@70 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@18) (MapType1Type refType)) (= (type a@@70) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@70))) (= (|Seq#Take| (|Seq#FromArray| h@@18 a@@70) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@18 a@@70) n0) (MapType1Select h@@18 a@@70 (IndexField n0)))))) :qid |DafnyPre.959:15| :skolemid |530| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@18 a@@70) n0) (|Seq#Take| (|Seq#FromArray| h@@18 a@@70) n1)) )))
(assert (forall ((s@@37 T@U) (v@@35 T@U) (n@@15 Int) ) (! (let ((T@@141 (type v@@35))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@15) (<= n@@15 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@35) n@@15) (|Seq#Build| (|Seq#Drop| s@@37 n@@15) v@@35))))) :qid |DafnyPre.963:18| :skolemid |531| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@35) n@@15)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.968:15| :skolemid |532| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.971:18| :skolemid |533| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.974:18| :skolemid |534| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.977:18| :skolemid |535| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@16 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@16 0)) (= (|Seq#Drop| s@@42 n@@16) s@@42))) :qid |DafnyPre.982:18| :skolemid |536| :pattern ( (|Seq#Drop| s@@42 n@@16)) )))
(assert (forall ((s@@43 T@U) (n@@17 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@17 0)) (= (|Seq#Take| s@@43 n@@17) (|Seq#Empty| T@@146)))) :qid |DafnyPre.984:18| :skolemid |537| :pattern ( (|Seq#Take| s@@43 n@@17)) )))
(assert (forall ((s@@44 T@U) (m@@6 Int) (n@@18 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@6) (<= 0 n@@18)) (<= (+ m@@6 n@@18) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@6) n@@18) (|Seq#Drop| s@@44 (+ m@@6 n@@18)))))) :qid |DafnyPre.986:18| :skolemid |538| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@6) n@@18)) )))
(assert (forall ((m@@7 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@7)))) (let ((U@@3 (MapTypeInv0 (type m@@7)))) (=> (= (type m@@7) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@7))))) :qid |DafnyPre.1004:20| :skolemid |539| :pattern ( (|Map#Card| m@@7)) )))
(assert (forall ((m@@8 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@8)))) (let ((U@@4 (MapTypeInv0 (type m@@8)))) (=> (= (type m@@8) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@8)) (|Map#Card| m@@8))))) :qid |DafnyPre.1009:20| :skolemid |540| :pattern ( (|Set#Card| (|Map#Domain| m@@8))) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@85)))) (= (type (|Map#Values| arg0@@85)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@85)) )))
(assert (forall ((m@@9 T@U) ) (! (let ((V@@4 (MapTypeInv1 (type m@@9)))) (let ((U@@5 (MapTypeInv0 (type m@@9)))) (=> (= (type m@@9) (MapType U@@5 V@@4)) (= (|Set#Card| (|Map#Values| m@@9)) (|Map#Card| m@@9))))) :qid |DafnyPre.1019:20| :skolemid |541| :pattern ( (|Set#Card| (|Map#Values| m@@9))) )))
(assert (forall ((m@@10 T@U) (v@@36 T@U) ) (! (let ((V@@5 (type v@@36))) (let ((U@@6 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@6 V@@5)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@10) v@@36)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@6) (and (U_2_bool (MapType0Select (|Map#Domain| m@@10) u@@5)) (= v@@36 (MapType0Select (|Map#Elements| m@@10) u@@5)))) :qid |DafnyPre.1024:10| :skolemid |542| :pattern ( (MapType0Select (|Map#Domain| m@@10) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@10) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@6) (and (U_2_bool (MapType0Select (|Map#Domain| m@@10) u@@6)) (= v@@36 (MapType0Select (|Map#Elements| m@@10) u@@6)))) :qid |DafnyPre.1024:10| :skolemid |542| :pattern ( (MapType0Select (|Map#Domain| m@@10) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@10) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@10) v@@36))))))) :qid |DafnyPre.1022:20| :skolemid |543| :pattern ( (MapType0Select (|Map#Values| m@@10) v@@36)) )))
(assert (forall ((arg0@@86 T@U) ) (! (= (type (|Map#Items| arg0@@86)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@86)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@11)))) (let ((U@@7 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@7 V@@6)) (= (|Set#Card| (|Map#Items| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1043:20| :skolemid |544| :pattern ( (|Set#Card| (|Map#Items| m@@11))) )))
(assert  (and (forall ((arg0@@87 T@U) ) (! (= (type (_System.__tuple_h2._0 arg0@@87)) BoxType) :qid |funType:_System.__tuple_h2._0| :pattern ( (_System.__tuple_h2._0 arg0@@87)) )) (forall ((arg0@@88 T@U) ) (! (= (type (_System.__tuple_h2._1 arg0@@88)) BoxType) :qid |funType:_System.__tuple_h2._1| :pattern ( (_System.__tuple_h2._1 arg0@@88)) ))))
(assert (forall ((m@@12 T@U) (item T@U) ) (!  (=> (and (= (type m@@12) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@12) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) (_System.__tuple_h2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@12) (_System.__tuple_h2._0 ($Unbox DatatypeTypeType item))) (_System.__tuple_h2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) (_System.__tuple_h2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@12) (_System.__tuple_h2._0 ($Unbox DatatypeTypeType item))) (_System.__tuple_h2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@12) item))))) :qid |DafnyPre.1046:15| :skolemid |545| :pattern ( (MapType0Select (|Map#Items| m@@12) item)) )))
(assert (forall ((U@@8 T@T) (V@@7 T@T) ) (! (= (type (|Map#Empty| U@@8 V@@7)) (MapType U@@8 V@@7)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@8 V@@7)) )))
(assert (forall ((u@@7 T@U) (V@@8 T@T) ) (! (let ((U@@9 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@9 V@@8)) u@@7)))) :qid |DafnyPre.1054:21| :skolemid |546| :pattern ( (let ((U@@9 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@9 V@@8)) u@@7))) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@13)))) (let ((U@@10 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@10 V@@9)) (and (and (=> (= (|Map#Card| m@@13) 0) (= m@@13 (|Map#Empty| U@@10 V@@9))) (=> (= m@@13 (|Map#Empty| U@@10 V@@9)) (= (|Map#Card| m@@13) 0))) (=> (not (= (|Map#Card| m@@13) 0)) (exists ((x@@39 T@U) ) (!  (and (= (type x@@39) U@@10) (U_2_bool (MapType0Select (|Map#Domain| m@@13) x@@39))) :qid |DafnyPre.1059:32| :skolemid |547| :no-pattern (type x@@39) :no-pattern (U_2_int x@@39) :no-pattern (U_2_bool x@@39) ))))))) :qid |DafnyPre.1057:21| :skolemid |548| :pattern ( (|Map#Card| m@@13)) )))
(assert (forall ((arg0@@89 T@U) (arg1@@37 T@U) (arg2@@3 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type arg1@@37)))) (let ((U@@11 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|Map#Glue| arg0@@89 arg1@@37 arg2@@3)) (MapType U@@11 V@@10)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@89 arg1@@37 arg2@@3)) )))
(assert (forall ((a@@71 T@U) (b@@50 T@U) (t@@29 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@50)))) (let ((U@@12 (MapType0TypeInv0 (type a@@71)))) (=> (and (and (= (type a@@71) (MapType0Type U@@12 boolType)) (= (type b@@50) (MapType0Type U@@12 V@@11))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@71 b@@50 t@@29)) a@@71)))) :qid |DafnyPre.1062:21| :skolemid |549| :pattern ( (|Map#Domain| (|Map#Glue| a@@71 b@@50 t@@29))) )))
(assert (forall ((a@@72 T@U) (b@@51 T@U) (t@@30 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@51)))) (let ((U@@13 (MapType0TypeInv0 (type a@@72)))) (=> (and (and (= (type a@@72) (MapType0Type U@@13 boolType)) (= (type b@@51) (MapType0Type U@@13 V@@12))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@72 b@@51 t@@30)) b@@51)))) :qid |DafnyPre.1065:21| :skolemid |550| :pattern ( (|Map#Elements| (|Map#Glue| a@@72 b@@51 t@@30))) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@31 T@U) ) (! (let ((V@@13 (MapType0TypeInv1 (type b@@52)))) (let ((U@@14 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@14 boolType)) (= (type b@@52) (MapType0Type U@@14 V@@13))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@73 b@@52 t@@31) t@@31)))) :qid |DafnyPre.1068:21| :skolemid |551| :pattern ( ($Is (|Map#Glue| a@@73 b@@52 t@@31) t@@31)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@38 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (type arg2@@4))) (let ((U@@15 (type arg1@@38))) (= (type (|Map#Build| arg0@@90 arg1@@38 arg2@@4)) (MapType U@@15 V@@14)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@90 arg1@@38 arg2@@4)) )))
(assert (forall ((m@@14 T@U) (u@@8 T@U) (|u'| T@U) (v@@37 T@U) ) (! (let ((V@@15 (type v@@37))) (let ((U@@16 (type u@@8))) (=> (and (= (type m@@14) (MapType U@@16 V@@15)) (= (type |u'|) U@@16)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@14 u@@8 v@@37)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@14 u@@8 v@@37)) |u'|) v@@37))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@14 u@@8 v@@37)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@14) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@14) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@14 u@@8 v@@37)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@14 u@@8 v@@37)) |u'|) (MapType0Select (|Map#Elements| m@@14) |u'|)))))))) :qid |DafnyPre.1079:21| :skolemid |552| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@14 u@@8 v@@37)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@14 u@@8 v@@37)) |u'|)) )))
(assert (forall ((m@@15 T@U) (u@@9 T@U) (v@@38 T@U) ) (! (let ((V@@16 (type v@@38))) (let ((U@@17 (type u@@9))) (=> (and (= (type m@@15) (MapType U@@17 V@@16)) (U_2_bool (MapType0Select (|Map#Domain| m@@15) u@@9))) (= (|Map#Card| (|Map#Build| m@@15 u@@9 v@@38)) (|Map#Card| m@@15))))) :qid |DafnyPre.1085:21| :skolemid |553| :pattern ( (|Map#Card| (|Map#Build| m@@15 u@@9 v@@38))) )))
(assert (forall ((m@@16 T@U) (u@@10 T@U) (v@@39 T@U) ) (! (let ((V@@17 (type v@@39))) (let ((U@@18 (type u@@10))) (=> (and (= (type m@@16) (MapType U@@18 V@@17)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@16) u@@10)))) (= (|Map#Card| (|Map#Build| m@@16 u@@10 v@@39)) (+ (|Map#Card| m@@16) 1))))) :qid |DafnyPre.1087:21| :skolemid |554| :pattern ( (|Map#Card| (|Map#Build| m@@16 u@@10 v@@39))) )))
(assert (forall ((m@@17 T@U) (u@@11 T@U) (v@@40 T@U) ) (! (let ((V@@18 (type v@@40))) (let ((U@@19 (type u@@11))) (=> (= (type m@@17) (MapType U@@19 V@@18)) (= (|Map#Values| (|Map#Build| m@@17 u@@11 v@@40)) (|Set#UnionOne| (|Map#Values| m@@17) v@@40))))) :qid |DafnyPre.1089:21| :skolemid |555| :pattern ( (|Map#Values| (|Map#Build| m@@17 u@@11 v@@40))) )))
(assert (forall ((m@@18 T@U) (|m'| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@18)))) (let ((U@@20 (MapTypeInv0 (type m@@18)))) (=> (and (= (type m@@18) (MapType U@@20 V@@19)) (= (type |m'|) (MapType U@@20 V@@19))) (and (=> (|Map#Equal| m@@18 |m'|) (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@20) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@12))))) :qid |DafnyPre.1097:35| :skolemid |556| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@20) (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@13))) (= (MapType0Select (|Map#Elements| m@@18) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPre.1098:35| :skolemid |557| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )))) (=> (and (forall ((u@@14 T@U) ) (!  (=> (= (type u@@14) U@@20) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@14)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@14))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@14)) (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@14))))) :qid |DafnyPre.1097:35| :skolemid |556| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) )) (forall ((u@@15 T@U) ) (!  (=> (and (= (type u@@15) U@@20) (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@15))) (= (MapType0Select (|Map#Elements| m@@18) u@@15) (MapType0Select (|Map#Elements| |m'|) u@@15))) :qid |DafnyPre.1098:35| :skolemid |557| :no-pattern (type u@@15) :no-pattern (U_2_int u@@15) :no-pattern (U_2_bool u@@15) ))) (|Map#Equal| m@@18 |m'|)))))) :qid |DafnyPre.1095:21| :skolemid |558| :pattern ( (|Map#Equal| m@@18 |m'|)) )))
(assert (forall ((m@@19 T@U) (|m'@@0| T@U) ) (! (let ((V@@20 (MapTypeInv1 (type m@@19)))) (let ((U@@21 (MapTypeInv0 (type m@@19)))) (=> (and (and (= (type m@@19) (MapType U@@21 V@@20)) (= (type |m'@@0|) (MapType U@@21 V@@20))) (|Map#Equal| m@@19 |m'@@0|)) (= m@@19 |m'@@0|)))) :qid |DafnyPre.1100:21| :skolemid |559| :pattern ( (|Map#Equal| m@@19 |m'@@0|)) )))
(assert (forall ((m@@20 T@U) (|m'@@1| T@U) ) (! (let ((V@@21 (MapTypeInv1 (type m@@20)))) (let ((U@@22 (MapTypeInv0 (type m@@20)))) (=> (and (= (type m@@20) (MapType U@@22 V@@21)) (= (type |m'@@1|) (MapType U@@22 V@@21))) (and (=> (|Map#Disjoint| m@@20 |m'@@1|) (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) U@@22) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@20) o@@37))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@37))))) :qid |DafnyPre.1107:38| :skolemid |560| :pattern ( (MapType0Select (|Map#Domain| m@@20) o@@37)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@37)) ))) (=> (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) U@@22) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@20) o@@38))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@38))))) :qid |DafnyPre.1107:38| :skolemid |560| :pattern ( (MapType0Select (|Map#Domain| m@@20) o@@38)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@38)) )) (|Map#Disjoint| m@@20 |m'@@1|)))))) :qid |DafnyPre.1105:21| :skolemid |561| :pattern ( (|Map#Disjoint| m@@20 |m'@@1|)) )))
(assert (forall ((arg0@@91 T@U) ) (! (let ((V@@22 (IMapTypeInv1 (type arg0@@91)))) (= (type (|IMap#Values| arg0@@91)) (MapType0Type V@@22 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@91)) )))
(assert (forall ((m@@21 T@U) (v@@41 T@U) ) (! (let ((V@@23 (type v@@41))) (let ((U@@23 (IMapTypeInv0 (type m@@21)))) (=> (= (type m@@21) (IMapType U@@23 V@@23)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@21) v@@41)) (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@23) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@21) u@@16)) (= v@@41 (MapType0Select (|IMap#Elements| m@@21) u@@16)))) :qid |DafnyPre.1130:10| :skolemid |562| :pattern ( (MapType0Select (|IMap#Domain| m@@21) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@21) u@@16)) ))) (=> (exists ((u@@17 T@U) ) (!  (and (= (type u@@17) U@@23) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@21) u@@17)) (= v@@41 (MapType0Select (|IMap#Elements| m@@21) u@@17)))) :qid |DafnyPre.1130:10| :skolemid |562| :pattern ( (MapType0Select (|IMap#Domain| m@@21) u@@17)) :pattern ( (MapType0Select (|IMap#Elements| m@@21) u@@17)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@21) v@@41))))))) :qid |DafnyPre.1128:20| :skolemid |563| :pattern ( (MapType0Select (|IMap#Values| m@@21) v@@41)) )))
(assert (forall ((arg0@@92 T@U) ) (! (= (type (|IMap#Items| arg0@@92)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@92)) )))
(assert (forall ((m@@22 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@22) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@22) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) (_System.__tuple_h2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@22) (_System.__tuple_h2._0 ($Unbox DatatypeTypeType item@@0))) (_System.__tuple_h2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) (_System.__tuple_h2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@22) (_System.__tuple_h2._0 ($Unbox DatatypeTypeType item@@0))) (_System.__tuple_h2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@22) item@@0))))) :qid |DafnyPre.1145:15| :skolemid |564| :pattern ( (MapType0Select (|IMap#Items| m@@22) item@@0)) )))
(assert (forall ((U@@24 T@T) (V@@24 T@T) ) (! (= (type (|IMap#Empty| U@@24 V@@24)) (IMapType U@@24 V@@24)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@24 V@@24)) )))
(assert (forall ((u@@18 T@U) (V@@25 T@T) ) (! (let ((U@@25 (type u@@18))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@25 V@@25)) u@@18)))) :qid |DafnyPre.1152:21| :skolemid |565| :pattern ( (let ((U@@25 (type u@@18))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@25 V@@25)) u@@18))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@39 T@U) (arg2@@5 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type arg1@@39)))) (let ((U@@26 (MapType0TypeInv0 (type arg0@@93)))) (= (type (|IMap#Glue| arg0@@93 arg1@@39 arg2@@5)) (IMapType U@@26 V@@26)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@93 arg1@@39 arg2@@5)) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@32 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@53)))) (let ((U@@27 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@27 boolType)) (= (type b@@53) (MapType0Type U@@27 V@@27))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@74 b@@53 t@@32)) a@@74)))) :qid |DafnyPre.1157:21| :skolemid |566| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@74 b@@53 t@@32))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@33 T@U) ) (! (let ((V@@28 (MapType0TypeInv1 (type b@@54)))) (let ((U@@28 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@28 boolType)) (= (type b@@54) (MapType0Type U@@28 V@@28))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@75 b@@54 t@@33)) b@@54)))) :qid |DafnyPre.1160:21| :skolemid |567| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@75 b@@54 t@@33))) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@34 T@U) ) (! (let ((V@@29 (MapType0TypeInv1 (type b@@55)))) (let ((U@@29 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@29 boolType)) (= (type b@@55) (MapType0Type U@@29 V@@29))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@76 b@@55 t@@34) t@@34)))) :qid |DafnyPre.1163:21| :skolemid |568| :pattern ( ($Is (|IMap#Glue| a@@76 b@@55 t@@34) t@@34)) )))
(assert (forall ((arg0@@94 T@U) (arg1@@40 T@U) (arg2@@6 T@U) ) (! (let ((V@@30 (type arg2@@6))) (let ((U@@30 (type arg1@@40))) (= (type (|IMap#Build| arg0@@94 arg1@@40 arg2@@6)) (IMapType U@@30 V@@30)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@94 arg1@@40 arg2@@6)) )))
(assert (forall ((m@@23 T@U) (u@@19 T@U) (|u'@@0| T@U) (v@@42 T@U) ) (! (let ((V@@31 (type v@@42))) (let ((U@@31 (type u@@19))) (=> (and (= (type m@@23) (IMapType U@@31 V@@31)) (= (type |u'@@0|) U@@31)) (and (=> (= |u'@@0| u@@19) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@23 u@@19 v@@42)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@23 u@@19 v@@42)) |u'@@0|) v@@42))) (=> (not (= |u'@@0| u@@19)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@23 u@@19 v@@42)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@23) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@23) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@23 u@@19 v@@42)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@23 u@@19 v@@42)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@23) |u'@@0|)))))))) :qid |DafnyPre.1173:21| :skolemid |569| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@23 u@@19 v@@42)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@23 u@@19 v@@42)) |u'@@0|)) )))
(assert (forall ((m@@24 T@U) (u@@20 T@U) (v@@43 T@U) ) (! (let ((V@@32 (type v@@43))) (let ((U@@32 (type u@@20))) (=> (= (type m@@24) (IMapType U@@32 V@@32)) (= (|IMap#Values| (|IMap#Build| m@@24 u@@20 v@@43)) (|Set#UnionOne| (|IMap#Values| m@@24) v@@43))))) :qid |DafnyPre.1180:21| :skolemid |570| :pattern ( (|IMap#Values| (|IMap#Build| m@@24 u@@20 v@@43))) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@25)))) (let ((U@@33 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@33 V@@33)) (= (type |m'@@2|) (IMapType U@@33 V@@33))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@33) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1187:36| :skolemid |571| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@33) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1188:35| :skolemid |572| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) )))) (=> (and (forall ((u@@23 T@U) ) (!  (=> (= (type u@@23) U@@33) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@23)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@23))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@23)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@23))))) :qid |DafnyPre.1187:36| :skolemid |571| :no-pattern (type u@@23) :no-pattern (U_2_int u@@23) :no-pattern (U_2_bool u@@23) )) (forall ((u@@24 T@U) ) (!  (=> (and (= (type u@@24) U@@33) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@24))) (= (MapType0Select (|IMap#Elements| m@@25) u@@24) (MapType0Select (|IMap#Elements| |m'@@2|) u@@24))) :qid |DafnyPre.1188:35| :skolemid |572| :no-pattern (type u@@24) :no-pattern (U_2_int u@@24) :no-pattern (U_2_bool u@@24) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1185:21| :skolemid |573| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@26)))) (let ((U@@34 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@34 V@@34)) (= (type |m'@@3|) (IMapType U@@34 V@@34))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1190:21| :skolemid |574| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@40 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@40 y@@12) (+ x@@40 y@@12)) :qid |DafnyPre.1198:30| :skolemid |575| :pattern ( (INTERNAL_add_boogie x@@40 y@@12)) )))
(assert (forall ((x@@41 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@41 y@@13) (- x@@41 y@@13)) :qid |DafnyPre.1199:30| :skolemid |576| :pattern ( (INTERNAL_sub_boogie x@@41 y@@13)) )))
(assert (forall ((x@@42 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@42 y@@14) (* x@@42 y@@14)) :qid |DafnyPre.1200:30| :skolemid |577| :pattern ( (INTERNAL_mul_boogie x@@42 y@@14)) )))
(assert (forall ((x@@43 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@43 y@@15) (div x@@43 y@@15)) :qid |DafnyPre.1201:30| :skolemid |578| :pattern ( (INTERNAL_div_boogie x@@43 y@@15)) )))
(assert (forall ((x@@44 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@44 y@@16) (mod x@@44 y@@16)) :qid |DafnyPre.1202:30| :skolemid |579| :pattern ( (INTERNAL_mod_boogie x@@44 y@@16)) )))
(assert (forall ((x@@45 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@45 y@@17) (< x@@45 y@@17)) (=> (< x@@45 y@@17) (INTERNAL_lt_boogie x@@45 y@@17))) :qid |DafnyPre.1203:51| :skolemid |580| :pattern ( (INTERNAL_lt_boogie x@@45 y@@17)) )))
(assert (forall ((x@@46 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@46 y@@18) (<= x@@46 y@@18)) (=> (<= x@@46 y@@18) (INTERNAL_le_boogie x@@46 y@@18))) :qid |DafnyPre.1204:51| :skolemid |581| :pattern ( (INTERNAL_le_boogie x@@46 y@@18)) )))
(assert (forall ((x@@47 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@47 y@@19) (> x@@47 y@@19)) (=> (> x@@47 y@@19) (INTERNAL_gt_boogie x@@47 y@@19))) :qid |DafnyPre.1205:51| :skolemid |582| :pattern ( (INTERNAL_gt_boogie x@@47 y@@19)) )))
(assert (forall ((x@@48 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@48 y@@20) (>= x@@48 y@@20)) (=> (>= x@@48 y@@20) (INTERNAL_ge_boogie x@@48 y@@20))) :qid |DafnyPre.1206:51| :skolemid |583| :pattern ( (INTERNAL_ge_boogie x@@48 y@@20)) )))
(assert (forall ((b@@56 (_ BitVec 32)) ) (!  (and (and (<= 0 (nat_from_bv32 b@@56)) (< (nat_from_bv32 b@@56) 4294967296)) (= (nat_from_bv32 b@@56) (bv2int b@@56))) :qid |unknown.0:0| :skolemid |584| :pattern ( (nat_from_bv32 b@@56)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |585| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (INTERNAL_le_boogie 0 (U_2_int |x#0|))) (=> (INTERNAL_le_boogie 0 (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |586| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType1Type refType))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |587| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object))) :qid |unknown.0:0| :skolemid |588| :pattern ( ($IsBox bx@@35 Tclass._System.object)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object)) :qid |unknown.0:0| :skolemid |589| :pattern ( ($Is $o Tclass._System.object)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType1Type refType))) (and (=> ($IsAlloc $o@@0 Tclass._System.object $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select $h@@0 $o@@0 alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select $h@@0 $o@@0 alloc))) ($IsAlloc $o@@0 Tclass._System.object $h@@0)))) :qid |unknown.0:0| :skolemid |590| :pattern ( ($IsAlloc $o@@0 Tclass._System.object $h@@0)) )))
(assert (forall ((arg0@@95 T@U) ) (! (= (type (Tclass._System.array arg0@@95)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@95)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array |#$arg|)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |591| :pattern ( (Tclass._System.array |#$arg|)) )))
(assert (forall ((arg0@@96 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@96)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@96)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array_0 (Tclass._System.array |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |592| :pattern ( (Tclass._System.array |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@36 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.array |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) (Tclass._System.array |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |593| :pattern ( ($IsBox bx@@36 (Tclass._System.array |#$arg@@1|))) )))
(assert (forall ((arg0@@97 T@U) ) (! (= (type (dtype arg0@@97)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@97)) )))
(assert (forall ((|#$arg@@2| T@U) ($i0 Int) ($h@@1 T@U) ($o@@1 T@U) ) (!  (=> (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@1) (MapType1Type refType))) (= (type $o@@1) refType)) (=> (and (and (and ($IsGoodHeap $h@@1) (not (= $o@@1 null))) (= (dtype $o@@1) (Tclass._System.array |#$arg@@2|))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1)))) (and ($IsBox (MapType1Select $h@@1 $o@@1 (IndexField $i0)) |#$arg@@2|) (=> (U_2_bool (MapType1Select $h@@1 $o@@1 alloc)) ($IsAllocBox (MapType1Select $h@@1 $o@@1 (IndexField $i0)) |#$arg@@2| $h@@1))))) :qid |unknown.0:0| :skolemid |594| :pattern ( (MapType1Select $h@@1 $o@@1 (IndexField $i0)) (Tclass._System.array |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($o@@2 T@U) ) (!  (=> (and (= (type |#$arg@@3|) TyType) (= (type $o@@2) refType)) (and (=> ($Is $o@@2 (Tclass._System.array |#$arg@@3|)) (or (= $o@@2 null) (= (dtype $o@@2) (Tclass._System.array |#$arg@@3|)))) (=> (or (= $o@@2 null) (= (dtype $o@@2) (Tclass._System.array |#$arg@@3|))) ($Is $o@@2 (Tclass._System.array |#$arg@@3|))))) :qid |unknown.0:0| :skolemid |595| :pattern ( ($Is $o@@2 (Tclass._System.array |#$arg@@3|))) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ($h@@2 T@U) ) (!  (=> (and (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (= (type $h@@2) (MapType1Type refType))) (and (=> ($IsAlloc $o@@3 (Tclass._System.array |#$arg@@4|) $h@@2) (or (= $o@@3 null) (U_2_bool (MapType1Select $h@@2 $o@@3 alloc)))) (=> (or (= $o@@3 null) (U_2_bool (MapType1Select $h@@2 $o@@3 alloc))) ($IsAlloc $o@@3 (Tclass._System.array |#$arg@@4|) $h@@2)))) :qid |unknown.0:0| :skolemid |596| :pattern ( ($IsAlloc $o@@3 (Tclass._System.array |#$arg@@4|) $h@@2)) )))
(assert (forall ((|#$arg@@5| T@U) ($h@@3 T@U) ($o@@4 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@5|) TyType) (= (type $h@@3) (MapType1Type refType))) (= (type $o@@4) refType)) (and (and ($IsGoodHeap $h@@3) (not (= $o@@4 null))) (= (dtype $o@@4) (Tclass._System.array |#$arg@@5|)))) (and ($Is (int_2_U (_System.array.Length $o@@4)) TInt) (=> (U_2_bool (MapType1Select $h@@3 $o@@4 alloc)) ($IsAlloc (int_2_U (_System.array.Length $o@@4)) TInt $h@@3)))) :qid |unknown.0:0| :skolemid |597| :no-pattern (type |#$arg@@5|) :no-pattern (type $h@@3) :no-pattern (type $o@@4) :no-pattern (U_2_int |#$arg@@5|) :no-pattern (U_2_bool |#$arg@@5|) :no-pattern (U_2_int $h@@3) :no-pattern (U_2_bool $h@@3) :no-pattern (U_2_int $o@@4) :no-pattern (U_2_bool $o@@4) )))
(assert (forall ((arg0@@98 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@98)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@98)) )))
(assert (forall ((|#$T0| T@U) ) (!  (=> (= (type |#$T0|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$T0|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |598| :pattern ( (Tclass._System.___hFunc0 |#$T0|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@99)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@99)) )))
(assert (forall ((|#$T0@@0| T@U) ) (!  (=> (= (type |#$T0@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$T0@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |599| :pattern ( (Tclass._System.___hFunc0 |#$T0@@0|)) )))
(assert (= (Ctor HandleTypeType) 19))
(assert (forall ((|#$T0@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$T0@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$T0@@1|)))) :qid |unknown.0:0| :skolemid |600| :pattern ( ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$T0@@1|))) )))
(assert  (and (forall ((arg0@@100 T@U) (arg1@@41 T@U) (arg2@@7 T@U) ) (! (= (type (Apply0 arg0@@100 arg1@@41 arg2@@7)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@100 arg1@@41 arg2@@7)) )) (forall ((arg0@@101 T@U) (arg1@@42 T@U) (arg2@@8 T@U) ) (! (= (type (Handle0 arg0@@101 arg1@@42 arg2@@8)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@101 arg1@@42 arg2@@8)) ))))
(assert (forall ((t0@@12 T@U) (heap T@U) (h@@19 T@U) (r@@5 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap) (MapType1Type refType))) (= (type h@@19) (MapType0Type (MapType1Type refType) BoxType))) (= (type r@@5) (MapType0Type (MapType1Type refType) boolType))) (= (type rd) (MapType0Type (MapType1Type refType) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 (Handle0 h@@19 r@@5 rd) heap) (MapType0Select h@@19 heap))) :qid |unknown.0:0| :skolemid |601| :pattern ( (Apply0 t0@@12 (Handle0 h@@19 r@@5 rd) heap)) )))
(assert (forall ((t0@@13 T@U) (heap@@0 T@U) (h@@20 T@U) (r@@6 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@0) (MapType1Type refType))) (= (type h@@20) (MapType0Type (MapType1Type refType) BoxType))) (= (type r@@6) (MapType0Type (MapType1Type refType) boolType))) (= (type rd@@0) (MapType0Type (MapType1Type refType) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@6 heap@@0))) (Requires0 t0@@13 (Handle0 h@@20 r@@6 rd@@0) heap@@0)) :qid |unknown.0:0| :skolemid |602| :pattern ( (Requires0 t0@@13 (Handle0 h@@20 r@@6 rd@@0) heap@@0)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@43 T@U) (arg2@@9 T@U) ) (! (= (type (Reads0 arg0@@102 arg1@@43 arg2@@9)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@102 arg1@@43 arg2@@9)) )))
(assert (forall ((t0@@14 T@U) (heap@@1 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@1) (MapType1Type refType))) (= (type h@@21) (MapType0Type (MapType1Type refType) BoxType))) (= (type r@@7) (MapType0Type (MapType1Type refType) boolType))) (= (type rd@@1) (MapType0Type (MapType1Type refType) (MapType0Type BoxType boolType)))) (= (type bx@@38) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 (Handle0 h@@21 r@@7 rd@@1) heap@@1) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@1) bx@@38))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@1) bx@@38)) (U_2_bool (MapType0Select (Reads0 t0@@14 (Handle0 h@@21 r@@7 rd@@1) heap@@1) bx@@38))))) :qid |unknown.0:0| :skolemid |603| :pattern ( (MapType0Select (Reads0 t0@@14 (Handle0 h@@21 r@@7 rd@@1) heap@@1) bx@@38)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType1Type refType))) (= (type h1@@0) (MapType1Type refType))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@39 T@U) (fld T@U) ) (! (let ((a@@77 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@39) refType) (= (type fld) (FieldType a@@77))) (and (not (= o@@39 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 f@@5 h0@@0) ($Box o@@39))))) (= (MapType1Select h0@@0 o@@39 fld) (MapType1Select h1@@0 o@@39 fld)))) :qid |unknown.0:0| :skolemid |604| :no-pattern (type o@@39) :no-pattern (type fld) :no-pattern (U_2_int o@@39) :no-pattern (U_2_bool o@@39) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 f@@5 h0@@0) (Reads0 t0@@15 f@@5 h1@@0))) :qid |unknown.0:0| :skolemid |605| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 f@@5 h1@@0)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType1Type refType))) (= (type h1@@1) (MapType1Type refType))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@40 T@U) (fld@@0 T@U) ) (! (let ((a@@78 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@40) refType) (= (type fld@@0) (FieldType a@@78))) (and (not (= o@@40 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 f@@6 h1@@1) ($Box o@@40))))) (= (MapType1Select h0@@1 o@@40 fld@@0) (MapType1Select h1@@1 o@@40 fld@@0)))) :qid |unknown.0:0| :skolemid |606| :no-pattern (type o@@40) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@40) :no-pattern (U_2_bool o@@40) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 f@@6 h0@@1) (Reads0 t0@@16 f@@6 h1@@1))) :qid |unknown.0:0| :skolemid |607| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 f@@6 h1@@1)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType1Type refType))) (= (type h1@@2) (MapType1Type refType))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@41 T@U) (fld@@1 T@U) ) (! (let ((a@@79 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@41) refType) (= (type fld@@1) (FieldType a@@79))) (and (not (= o@@41 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 f@@7 h0@@2) ($Box o@@41))))) (= (MapType1Select h0@@2 o@@41 fld@@1) (MapType1Select h1@@2 o@@41 fld@@1)))) :qid |unknown.0:0| :skolemid |608| :no-pattern (type o@@41) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@41) :no-pattern (U_2_bool o@@41) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 f@@7 h0@@2) (Requires0 t0@@17 f@@7 h1@@2)) (=> (Requires0 t0@@17 f@@7 h1@@2) (Requires0 t0@@17 f@@7 h0@@2)))) :qid |unknown.0:0| :skolemid |609| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 f@@7 h1@@2)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType1Type refType))) (= (type h1@@3) (MapType1Type refType))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@42 T@U) (fld@@2 T@U) ) (! (let ((a@@80 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@42) refType) (= (type fld@@2) (FieldType a@@80))) (and (not (= o@@42 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 f@@8 h1@@3) ($Box o@@42))))) (= (MapType1Select h0@@3 o@@42 fld@@2) (MapType1Select h1@@3 o@@42 fld@@2)))) :qid |unknown.0:0| :skolemid |610| :no-pattern (type o@@42) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@42) :no-pattern (U_2_bool o@@42) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 f@@8 h0@@3) (Requires0 t0@@18 f@@8 h1@@3)) (=> (Requires0 t0@@18 f@@8 h1@@3) (Requires0 t0@@18 f@@8 h0@@3)))) :qid |unknown.0:0| :skolemid |611| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 f@@8 h1@@3)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType1Type refType))) (= (type h1@@4) (MapType1Type refType))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@43 T@U) (fld@@3 T@U) ) (! (let ((a@@81 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@43) refType) (= (type fld@@3) (FieldType a@@81))) (and (not (= o@@43 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 f@@9 h0@@4) ($Box o@@43))))) (= (MapType1Select h0@@4 o@@43 fld@@3) (MapType1Select h1@@4 o@@43 fld@@3)))) :qid |unknown.0:0| :skolemid |612| :no-pattern (type o@@43) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@43) :no-pattern (U_2_bool o@@43) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 f@@9 h0@@4) (Apply0 t0@@19 f@@9 h1@@4))) :qid |unknown.0:0| :skolemid |613| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 f@@9 h1@@4)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType1Type refType))) (= (type h1@@5) (MapType1Type refType))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@44 T@U) (fld@@4 T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@44) refType) (= (type fld@@4) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 f@@10 h1@@5) ($Box o@@44))))) (= (MapType1Select h0@@5 o@@44 fld@@4) (MapType1Select h1@@5 o@@44 fld@@4)))) :qid |unknown.0:0| :skolemid |614| :no-pattern (type o@@44) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 f@@10 h0@@5) (Apply0 t0@@20 f@@10 h1@@5))) :qid |unknown.0:0| :skolemid |615| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 f@@10 h1@@5)) )))
(assert (forall ((f@@11 T@U) (t0@@21 T@U) ) (!  (=> (and (= (type f@@11) HandleTypeType) (= (type t0@@21) TyType)) (and (=> ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)) (forall ((h@@22 T@U) ) (!  (=> (= (type h@@22) (MapType1Type refType)) (=> (and ($IsGoodHeap h@@22) (Requires0 t0@@21 f@@11 h@@22)) ($IsBox (Apply0 t0@@21 f@@11 h@@22) t0@@21))) :qid |DafnyPre.405:12| :skolemid |616| :pattern ( (Apply0 t0@@21 f@@11 h@@22)) ))) (=> (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType1Type refType)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@21 f@@11 h@@23)) ($IsBox (Apply0 t0@@21 f@@11 h@@23) t0@@21))) :qid |DafnyPre.405:12| :skolemid |616| :pattern ( (Apply0 t0@@21 f@@11 h@@23)) )) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21))))) :qid |unknown.0:0| :skolemid |617| :pattern ( ($Is f@@11 (Tclass._System.___hFunc0 t0@@21))) )))
(assert (forall ((f@@12 T@U) (t0@@22 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@12) HandleTypeType) (= (type t0@@22) TyType)) (= (type u0) TyType)) (and ($Is f@@12 (Tclass._System.___hFunc0 t0@@22)) (forall ((bx@@39 T@U) ) (!  (=> (and (= (type bx@@39) BoxType) ($IsBox bx@@39 t0@@22)) ($IsBox bx@@39 u0)) :qid |unknown.0:0| :skolemid |618| :pattern ( ($IsBox bx@@39 t0@@22)) :pattern ( ($IsBox bx@@39 u0)) )))) ($Is f@@12 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |619| :pattern ( ($Is f@@12 (Tclass._System.___hFunc0 t0@@22)) ($Is f@@12 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) (h@@24 T@U) ) (!  (=> (and (and (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (= (type h@@24) (MapType1Type refType))) ($IsGoodHeap h@@24)) ($IsAlloc f@@13 (Tclass._System.___hFunc0 t0@@23) h@@24)) :qid |unknown.0:0| :skolemid |621| :pattern ( ($IsAlloc f@@13 (Tclass._System.___hFunc0 t0@@23) h@@24)) )))
(assert (forall ((arg0@@103 T@U) (arg1@@44 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@103 arg1@@44)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@103 arg1@@44)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1| T@U) ) (!  (=> (and (= (type |#$T0@@2|) TyType) (= (type |#$T1|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@2| |#$T1|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |622| :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$T1|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@104)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@104)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@0| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@3| |#$T1@@0|)) |#$T0@@3|)) :qid |unknown.0:0| :skolemid |623| :pattern ( (Tclass._System.___hFunc1 |#$T0@@3| |#$T1@@0|)) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@105)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@105)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@1| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@4| |#$T1@@1|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |624| :pattern ( (Tclass._System.___hFunc1 |#$T0@@4| |#$T1@@1|)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@2| T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@2|) TyType)) (= (type bx@@40) BoxType)) ($IsBox bx@@40 (Tclass._System.___hFunc1 |#$T0@@5| |#$T1@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hFunc1 |#$T0@@5| |#$T1@@2|)))) :qid |unknown.0:0| :skolemid |625| :pattern ( ($IsBox bx@@40 (Tclass._System.___hFunc1 |#$T0@@5| |#$T1@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@106 T@T) (arg1@@45 T@T) (arg2@@10 T@T) ) (! (= (Ctor (MapType2Type arg0@@106 arg1@@45 arg2@@10)) 20) :qid |ctor:MapType2Type| )) (forall ((arg0@@107 T@T) (arg1@@46 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@107 arg1@@46 arg2@@11)) arg0@@107) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@107 arg1@@46 arg2@@11)) ))) (forall ((arg0@@108 T@T) (arg1@@47 T@T) (arg2@@12 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@108 arg1@@47 arg2@@12)) arg1@@47) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@108 arg1@@47 arg2@@12)) ))) (forall ((arg0@@109 T@T) (arg1@@48 T@T) (arg2@@13 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@109 arg1@@48 arg2@@13)) arg2@@13) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@109 arg1@@48 arg2@@13)) ))) (forall ((arg0@@110 T@U) (arg1@@49 T@U) (arg2@@14 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@110)))) (= (type (MapType2Select arg0@@110 arg1@@49 arg2@@14)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@110 arg1@@49 arg2@@14)) ))) (forall ((arg0@@111 T@U) (arg1@@50 T@U) (arg2@@15 T@U) (arg3@@0 T@U) ) (! (let ((aVar2@@0 (type arg3@@0))) (let ((aVar1@@2 (type arg2@@15))) (let ((aVar0@@1 (type arg1@@50))) (= (type (MapType2Store arg0@@111 arg1@@50 arg2@@15 arg3@@0)) (MapType2Type aVar0@@1 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@111 arg1@@50 arg2@@15 arg3@@0)) ))) (forall ((m@@27 T@U) (x0@@6 T@U) (x1@@3 T@U) (val@@7 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@27)))) (=> (= (type val@@7) aVar2@@1) (= (MapType2Select (MapType2Store m@@27 x0@@6 x1@@3 val@@7) x0@@6 x1@@3) val@@7))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@8 T@U) (m@@28 T@U) (x0@@7 T@U) (x1@@4 T@U) (y0@@4 T@U) (y1@@2 T@U) ) (!  (or (= x0@@7 y0@@4) (= (MapType2Select (MapType2Store m@@28 x0@@7 x1@@4 val@@8) y0@@4 y1@@2) (MapType2Select m@@28 y0@@4 y1@@2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@9 T@U) (m@@29 T@U) (x0@@8 T@U) (x1@@5 T@U) (y0@@5 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType2Select (MapType2Store m@@29 x0@@8 x1@@5 val@@9) y0@@5 y1@@3) (MapType2Select m@@29 y0@@5 y1@@3))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@10 T@U) (m@@30 T@U) (x0@@9 T@U) (x1@@6 T@U) (y0@@6 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@30 x0@@9 x1@@6 val@@10) y0@@6 y1@@4) (MapType2Select m@@30 y0@@6 y1@@4))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@112 T@U) (arg1@@51 T@U) (arg2@@16 T@U) (arg3@@1 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@112 arg1@@51 arg2@@16 arg3@@1 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@112 arg1@@51 arg2@@16 arg3@@1 arg4)) ))) (forall ((arg0@@113 T@U) (arg1@@52 T@U) (arg2@@17 T@U) ) (! (= (type (Handle1 arg0@@113 arg1@@52 arg2@@17)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@113 arg1@@52 arg2@@17)) ))))
(assert (forall ((t0@@24 T@U) (t1@@3 T@U) (heap@@2 T@U) (h@@25 T@U) (r@@8 T@U) (rd@@2 T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@3) TyType)) (= (type heap@@2) (MapType1Type refType))) (= (type h@@25) (MapType2Type (MapType1Type refType) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType1Type refType) BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType1Type refType) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@24 t1@@3 (Handle1 h@@25 r@@8 rd@@2) heap@@2 bx0) (MapType2Select h@@25 heap@@2 bx0))) :qid |unknown.0:0| :skolemid |626| :pattern ( (Apply1 t0@@24 t1@@3 (Handle1 h@@25 r@@8 rd@@2) heap@@2 bx0)) )))
(assert (forall ((t0@@25 T@U) (t1@@4 T@U) (heap@@3 T@U) (h@@26 T@U) (r@@9 T@U) (rd@@3 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@4) TyType)) (= (type heap@@3) (MapType1Type refType))) (= (type h@@26) (MapType2Type (MapType1Type refType) BoxType BoxType))) (= (type r@@9) (MapType2Type (MapType1Type refType) BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType1Type refType) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@9 heap@@3 bx0@@0))) (Requires1 t0@@25 t1@@4 (Handle1 h@@26 r@@9 rd@@3) heap@@3 bx0@@0)) :qid |unknown.0:0| :skolemid |627| :pattern ( (Requires1 t0@@25 t1@@4 (Handle1 h@@26 r@@9 rd@@3) heap@@3 bx0@@0)) )))
(assert (forall ((arg0@@114 T@U) (arg1@@53 T@U) (arg2@@18 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@114 arg1@@53 arg2@@18 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@114 arg1@@53 arg2@@18 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@26 T@U) (t1@@5 T@U) (heap@@4 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx@@41 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@5) TyType)) (= (type heap@@4) (MapType1Type refType))) (= (type h@@27) (MapType2Type (MapType1Type refType) BoxType BoxType))) (= (type r@@10) (MapType2Type (MapType1Type refType) BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType1Type refType) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@41) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@26 t1@@5 (Handle1 h@@27 r@@10 rd@@4) heap@@4 bx0@@1) bx@@41)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@4 bx0@@1) bx@@41))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@4 bx0@@1) bx@@41)) (U_2_bool (MapType0Select (Reads1 t0@@26 t1@@5 (Handle1 h@@27 r@@10 rd@@4) heap@@4 bx0@@1) bx@@41))))) :qid |unknown.0:0| :skolemid |628| :pattern ( (MapType0Select (Reads1 t0@@26 t1@@5 (Handle1 h@@27 r@@10 rd@@4) heap@@4 bx0@@1) bx@@41)) )))
(assert (forall ((t0@@27 T@U) (t1@@6 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@14 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@6) TyType)) (= (type h0@@6) (MapType1Type refType))) (= (type h1@@6) (MapType1Type refType))) (= (type f@@14) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and ($IsBox bx0@@2 t0@@27) ($Is f@@14 (Tclass._System.___hFunc1 t0@@27 t1@@6)))) (forall ((o@@45 T@U) (fld@@5 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@5) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@27 t1@@6 f@@14 h0@@6 bx0@@2) ($Box o@@45))))) (= (MapType1Select h0@@6 o@@45 fld@@5) (MapType1Select h1@@6 o@@45 fld@@5)))) :qid |unknown.0:0| :skolemid |629| :no-pattern (type o@@45) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads1 t0@@27 t1@@6 f@@14 h0@@6 bx0@@2) (Reads1 t0@@27 t1@@6 f@@14 h1@@6 bx0@@2))) :qid |unknown.0:0| :skolemid |630| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads1 t0@@27 t1@@6 f@@14 h1@@6 bx0@@2)) )))
(assert (forall ((t0@@28 T@U) (t1@@7 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@15 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@7) TyType)) (= (type h0@@7) (MapType1Type refType))) (= (type h1@@7) (MapType1Type refType))) (= (type f@@15) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and ($IsBox bx0@@3 t0@@28) ($Is f@@15 (Tclass._System.___hFunc1 t0@@28 t1@@7)))) (forall ((o@@46 T@U) (fld@@6 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@6) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@28 t1@@7 f@@15 h1@@7 bx0@@3) ($Box o@@46))))) (= (MapType1Select h0@@7 o@@46 fld@@6) (MapType1Select h1@@7 o@@46 fld@@6)))) :qid |unknown.0:0| :skolemid |631| :no-pattern (type o@@46) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads1 t0@@28 t1@@7 f@@15 h0@@7 bx0@@3) (Reads1 t0@@28 t1@@7 f@@15 h1@@7 bx0@@3))) :qid |unknown.0:0| :skolemid |632| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads1 t0@@28 t1@@7 f@@15 h1@@7 bx0@@3)) )))
(assert (forall ((t0@@29 T@U) (t1@@8 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@16 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@8) TyType)) (= (type h0@@8) (MapType1Type refType))) (= (type h1@@8) (MapType1Type refType))) (= (type f@@16) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and ($IsBox bx0@@4 t0@@29) ($Is f@@16 (Tclass._System.___hFunc1 t0@@29 t1@@8)))) (forall ((o@@47 T@U) (fld@@7 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@7) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@8 f@@16 h0@@8 bx0@@4) ($Box o@@47))))) (= (MapType1Select h0@@8 o@@47 fld@@7) (MapType1Select h1@@8 o@@47 fld@@7)))) :qid |unknown.0:0| :skolemid |633| :no-pattern (type o@@47) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires1 t0@@29 t1@@8 f@@16 h0@@8 bx0@@4) (Requires1 t0@@29 t1@@8 f@@16 h1@@8 bx0@@4)) (=> (Requires1 t0@@29 t1@@8 f@@16 h1@@8 bx0@@4) (Requires1 t0@@29 t1@@8 f@@16 h0@@8 bx0@@4)))) :qid |unknown.0:0| :skolemid |634| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires1 t0@@29 t1@@8 f@@16 h1@@8 bx0@@4)) )))
(assert (forall ((t0@@30 T@U) (t1@@9 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@17 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@9) TyType)) (= (type h0@@9) (MapType1Type refType))) (= (type h1@@9) (MapType1Type refType))) (= (type f@@17) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and ($IsBox bx0@@5 t0@@30) ($Is f@@17 (Tclass._System.___hFunc1 t0@@30 t1@@9)))) (forall ((o@@48 T@U) (fld@@8 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@8) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@30 t1@@9 f@@17 h1@@9 bx0@@5) ($Box o@@48))))) (= (MapType1Select h0@@9 o@@48 fld@@8) (MapType1Select h1@@9 o@@48 fld@@8)))) :qid |unknown.0:0| :skolemid |635| :no-pattern (type o@@48) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires1 t0@@30 t1@@9 f@@17 h0@@9 bx0@@5) (Requires1 t0@@30 t1@@9 f@@17 h1@@9 bx0@@5)) (=> (Requires1 t0@@30 t1@@9 f@@17 h1@@9 bx0@@5) (Requires1 t0@@30 t1@@9 f@@17 h0@@9 bx0@@5)))) :qid |unknown.0:0| :skolemid |636| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires1 t0@@30 t1@@9 f@@17 h1@@9 bx0@@5)) )))
(assert (forall ((t0@@31 T@U) (t1@@10 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@18 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@10) TyType)) (= (type h0@@10) (MapType1Type refType))) (= (type h1@@10) (MapType1Type refType))) (= (type f@@18) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and ($IsBox bx0@@6 t0@@31) ($Is f@@18 (Tclass._System.___hFunc1 t0@@31 t1@@10)))) (forall ((o@@49 T@U) (fld@@9 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@9) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@31 t1@@10 f@@18 h0@@10 bx0@@6) ($Box o@@49))))) (= (MapType1Select h0@@10 o@@49 fld@@9) (MapType1Select h1@@10 o@@49 fld@@9)))) :qid |unknown.0:0| :skolemid |637| :no-pattern (type o@@49) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply1 t0@@31 t1@@10 f@@18 h0@@10 bx0@@6) (Apply1 t0@@31 t1@@10 f@@18 h1@@10 bx0@@6))) :qid |unknown.0:0| :skolemid |638| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply1 t0@@31 t1@@10 f@@18 h1@@10 bx0@@6)) )))
(assert (forall ((t0@@32 T@U) (t1@@11 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@19 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@11) TyType)) (= (type h0@@11) (MapType1Type refType))) (= (type h1@@11) (MapType1Type refType))) (= (type f@@19) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and ($IsBox bx0@@7 t0@@32) ($Is f@@19 (Tclass._System.___hFunc1 t0@@32 t1@@11)))) (forall ((o@@50 T@U) (fld@@10 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@10) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads1 t0@@32 t1@@11 f@@19 h1@@11 bx0@@7) ($Box o@@50))))) (= (MapType1Select h0@@11 o@@50 fld@@10) (MapType1Select h1@@11 o@@50 fld@@10)))) :qid |unknown.0:0| :skolemid |639| :no-pattern (type o@@50) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply1 t0@@32 t1@@11 f@@19 h0@@11 bx0@@7) (Apply1 t0@@32 t1@@11 f@@19 h1@@11 bx0@@7))) :qid |unknown.0:0| :skolemid |640| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply1 t0@@32 t1@@11 f@@19 h1@@11 bx0@@7)) )))
(assert (forall ((f@@20 T@U) (t0@@33 T@U) (t1@@12 T@U) ) (!  (=> (and (and (= (type f@@20) HandleTypeType) (= (type t0@@33) TyType)) (= (type t1@@12) TyType)) (and (=> ($Is f@@20 (Tclass._System.___hFunc1 t0@@33 t1@@12)) (forall ((h@@28 T@U) (bx0@@8 T@U) ) (!  (=> (and (= (type h@@28) (MapType1Type refType)) (= (type bx0@@8) BoxType)) (=> (and (and ($IsGoodHeap h@@28) ($IsBox bx0@@8 t0@@33)) (Requires1 t0@@33 t1@@12 f@@20 h@@28 bx0@@8)) ($IsBox (Apply1 t0@@33 t1@@12 f@@20 h@@28 bx0@@8) t1@@12))) :qid |DafnyPre.405:12| :skolemid |641| :pattern ( (Apply1 t0@@33 t1@@12 f@@20 h@@28 bx0@@8)) ))) (=> (forall ((h@@29 T@U) (bx0@@9 T@U) ) (!  (=> (and (= (type h@@29) (MapType1Type refType)) (= (type bx0@@9) BoxType)) (=> (and (and ($IsGoodHeap h@@29) ($IsBox bx0@@9 t0@@33)) (Requires1 t0@@33 t1@@12 f@@20 h@@29 bx0@@9)) ($IsBox (Apply1 t0@@33 t1@@12 f@@20 h@@29 bx0@@9) t1@@12))) :qid |DafnyPre.405:12| :skolemid |641| :pattern ( (Apply1 t0@@33 t1@@12 f@@20 h@@29 bx0@@9)) )) ($Is f@@20 (Tclass._System.___hFunc1 t0@@33 t1@@12))))) :qid |unknown.0:0| :skolemid |642| :pattern ( ($Is f@@20 (Tclass._System.___hFunc1 t0@@33 t1@@12))) )))
(assert (forall ((f@@21 T@U) (t0@@34 T@U) (t1@@13 T@U) (u0@@0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@21) HandleTypeType) (= (type t0@@34) TyType)) (= (type t1@@13) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@21 (Tclass._System.___hFunc1 t0@@34 t1@@13)) (forall ((bx@@42 T@U) ) (!  (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 u0@@0)) ($IsBox bx@@42 t0@@34)) :qid |unknown.0:0| :skolemid |643| :pattern ( ($IsBox bx@@42 u0@@0)) :pattern ( ($IsBox bx@@42 t0@@34)) ))) (forall ((bx@@43 T@U) ) (!  (=> (and (= (type bx@@43) BoxType) ($IsBox bx@@43 t1@@13)) ($IsBox bx@@43 u1)) :qid |unknown.0:0| :skolemid |644| :pattern ( ($IsBox bx@@43 t1@@13)) :pattern ( ($IsBox bx@@43 u1)) )))) ($Is f@@21 (Tclass._System.___hFunc1 u0@@0 u1))) :qid |unknown.0:0| :skolemid |645| :pattern ( ($Is f@@21 (Tclass._System.___hFunc1 t0@@34 t1@@13)) ($Is f@@21 (Tclass._System.___hFunc1 u0@@0 u1))) )))
(assert (forall ((f@@22 T@U) (t0@@35 T@U) (t1@@14 T@U) (h@@30 T@U) ) (!  (=> (and (and (and (and (= (type f@@22) HandleTypeType) (= (type t0@@35) TyType)) (= (type t1@@14) TyType)) (= (type h@@30) (MapType1Type refType))) ($IsGoodHeap h@@30)) ($IsAlloc f@@22 (Tclass._System.___hFunc1 t0@@35 t1@@14) h@@30)) :qid |unknown.0:0| :skolemid |647| :pattern ( ($IsAlloc f@@22 (Tclass._System.___hFunc1 t0@@35 t1@@14) h@@30)) )))
(assert (forall ((arg0@@115 T@U) (arg1@@54 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@115 arg1@@54 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@115 arg1@@54 arg2@@19)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@3| T@U) (|#$T2| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$T2|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0@@6| |#$T1@@3| |#$T2|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |648| :pattern ( (Tclass._System.___hFunc2 |#$T0@@6| |#$T1@@3| |#$T2|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@116)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@4| T@U) (|#$T2@@0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$T2@@0|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@7| |#$T1@@4| |#$T2@@0|)) |#$T0@@7|)) :qid |unknown.0:0| :skolemid |649| :pattern ( (Tclass._System.___hFunc2 |#$T0@@7| |#$T1@@4| |#$T2@@0|)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@117)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@117)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@5| T@U) (|#$T2@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$T2@@1|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@8| |#$T1@@5| |#$T2@@1|)) |#$T1@@5|)) :qid |unknown.0:0| :skolemid |650| :pattern ( (Tclass._System.___hFunc2 |#$T0@@8| |#$T1@@5| |#$T2@@1|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@118)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@6| T@U) (|#$T2@@2| T@U) ) (!  (=> (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$T2@@2|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@6| |#$T2@@2|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |651| :pattern ( (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@6| |#$T2@@2|)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@7| T@U) (|#$T2@@3| T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type bx@@44) BoxType)) ($IsBox bx@@44 (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@7| |#$T2@@3|))) (and (= ($Box ($Unbox HandleTypeType bx@@44)) bx@@44) ($Is ($Unbox HandleTypeType bx@@44) (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@7| |#$T2@@3|)))) :qid |unknown.0:0| :skolemid |652| :pattern ( ($IsBox bx@@44 (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@7| |#$T2@@3|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@119 T@T) (arg1@@55 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@119 arg1@@55 arg2@@20 arg3@@3)) 21) :qid |ctor:MapType3Type| )) (forall ((arg0@@120 T@T) (arg1@@56 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@120 arg1@@56 arg2@@21 arg3@@4)) arg0@@120) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@120 arg1@@56 arg2@@21 arg3@@4)) ))) (forall ((arg0@@121 T@T) (arg1@@57 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@121 arg1@@57 arg2@@22 arg3@@5)) arg1@@57) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@121 arg1@@57 arg2@@22 arg3@@5)) ))) (forall ((arg0@@122 T@T) (arg1@@58 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@122 arg1@@58 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@122 arg1@@58 arg2@@23 arg3@@6)) ))) (forall ((arg0@@123 T@T) (arg1@@59 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@123 arg1@@59 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@123 arg1@@59 arg2@@24 arg3@@7)) ))) (forall ((arg0@@124 T@U) (arg1@@60 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@124)))) (= (type (MapType3Select arg0@@124 arg1@@60 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@124 arg1@@60 arg2@@25 arg3@@8)) ))) (forall ((arg0@@125 T@U) (arg1@@61 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@2 (type arg1@@61))) (= (type (MapType3Store arg0@@125 arg1@@61 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@2 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@125 arg1@@61 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@31 T@U) (x0@@10 T@U) (x1@@7 T@U) (x2 T@U) (val@@11 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@31)))) (=> (= (type val@@11) aVar3@@1) (= (MapType3Select (MapType3Store m@@31 x0@@10 x1@@7 x2 val@@11) x0@@10 x1@@7 x2) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@12 T@U) (m@@32 T@U) (x0@@11 T@U) (x1@@8 T@U) (x2@@0 T@U) (y0@@7 T@U) (y1@@5 T@U) (y2 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@32 x0@@11 x1@@8 x2@@0 val@@12) y0@@7 y1@@5 y2) (MapType3Select m@@32 y0@@7 y1@@5 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@33 T@U) (x0@@12 T@U) (x1@@9 T@U) (x2@@1 T@U) (y0@@8 T@U) (y1@@6 T@U) (y2@@0 T@U) ) (!  (or (= x1@@9 y1@@6) (= (MapType3Select (MapType3Store m@@33 x0@@12 x1@@9 x2@@1 val@@13) y0@@8 y1@@6 y2@@0) (MapType3Select m@@33 y0@@8 y1@@6 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@34 T@U) (x0@@13 T@U) (x1@@10 T@U) (x2@@2 T@U) (y0@@9 T@U) (y1@@7 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@34 x0@@13 x1@@10 x2@@2 val@@14) y0@@9 y1@@7 y2@@1) (MapType3Select m@@34 y0@@9 y1@@7 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@15 T@U) (m@@35 T@U) (x0@@14 T@U) (x1@@11 T@U) (x2@@3 T@U) (y0@@10 T@U) (y1@@8 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@35 x0@@14 x1@@11 x2@@3 val@@15) y0@@10 y1@@8 y2@@2) (MapType3Select m@@35 y0@@10 y1@@8 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@126 T@U) (arg1@@62 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@126 arg1@@62 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@126 arg1@@62 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@127 T@U) (arg1@@63 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@127 arg1@@63 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@127 arg1@@63 arg2@@28)) ))))
(assert (forall ((t0@@36 T@U) (t1@@15 T@U) (t2 T@U) (heap@@5 T@U) (h@@31 T@U) (r@@11 T@U) (rd@@5 T@U) (bx0@@10 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@15) TyType)) (= (type t2) TyType)) (= (type heap@@5) (MapType1Type refType))) (= (type h@@31) (MapType3Type (MapType1Type refType) BoxType BoxType BoxType))) (= (type r@@11) (MapType3Type (MapType1Type refType) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType1Type refType) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@10) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@36 t1@@15 t2 (Handle2 h@@31 r@@11 rd@@5) heap@@5 bx0@@10 bx1) (MapType3Select h@@31 heap@@5 bx0@@10 bx1))) :qid |unknown.0:0| :skolemid |653| :pattern ( (Apply2 t0@@36 t1@@15 t2 (Handle2 h@@31 r@@11 rd@@5) heap@@5 bx0@@10 bx1)) )))
(assert (forall ((t0@@37 T@U) (t1@@16 T@U) (t2@@0 T@U) (heap@@6 T@U) (h@@32 T@U) (r@@12 T@U) (rd@@6 T@U) (bx0@@11 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@16) TyType)) (= (type t2@@0) TyType)) (= (type heap@@6) (MapType1Type refType))) (= (type h@@32) (MapType3Type (MapType1Type refType) BoxType BoxType BoxType))) (= (type r@@12) (MapType3Type (MapType1Type refType) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType1Type refType) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@11) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@12 heap@@6 bx0@@11 bx1@@0))) (Requires2 t0@@37 t1@@16 t2@@0 (Handle2 h@@32 r@@12 rd@@6) heap@@6 bx0@@11 bx1@@0)) :qid |unknown.0:0| :skolemid |654| :pattern ( (Requires2 t0@@37 t1@@16 t2@@0 (Handle2 h@@32 r@@12 rd@@6) heap@@6 bx0@@11 bx1@@0)) )))
(assert (forall ((arg0@@128 T@U) (arg1@@64 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@128 arg1@@64 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@128 arg1@@64 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@38 T@U) (t1@@17 T@U) (t2@@1 T@U) (heap@@7 T@U) (h@@33 T@U) (r@@13 T@U) (rd@@7 T@U) (bx0@@12 T@U) (bx1@@1 T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@38) TyType) (= (type t1@@17) TyType)) (= (type t2@@1) TyType)) (= (type heap@@7) (MapType1Type refType))) (= (type h@@33) (MapType3Type (MapType1Type refType) BoxType BoxType BoxType))) (= (type r@@13) (MapType3Type (MapType1Type refType) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType1Type refType) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@12) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@45) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@38 t1@@17 t2@@1 (Handle2 h@@33 r@@13 rd@@7) heap@@7 bx0@@12 bx1@@1) bx@@45)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@7 bx0@@12 bx1@@1) bx@@45))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@7 bx0@@12 bx1@@1) bx@@45)) (U_2_bool (MapType0Select (Reads2 t0@@38 t1@@17 t2@@1 (Handle2 h@@33 r@@13 rd@@7) heap@@7 bx0@@12 bx1@@1) bx@@45))))) :qid |unknown.0:0| :skolemid |655| :pattern ( (MapType0Select (Reads2 t0@@38 t1@@17 t2@@1 (Handle2 h@@33 r@@13 rd@@7) heap@@7 bx0@@12 bx1@@1) bx@@45)) )))
(assert (forall ((t0@@39 T@U) (t1@@18 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@23 T@U) (bx0@@13 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@39) TyType) (= (type t1@@18) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType1Type refType))) (= (type h1@@12) (MapType1Type refType))) (= (type f@@23) HandleTypeType)) (= (type bx0@@13) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@13 t0@@39) ($IsBox bx1@@2 t1@@18)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@39 t1@@18 t2@@2)))) (forall ((o@@51 T@U) (fld@@11 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@11) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads2 t0@@39 t1@@18 t2@@2 f@@23 h0@@12 bx0@@13 bx1@@2) ($Box o@@51))))) (= (MapType1Select h0@@12 o@@51 fld@@11) (MapType1Select h1@@12 o@@51 fld@@11)))) :qid |unknown.0:0| :skolemid |656| :no-pattern (type o@@51) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@39 t1@@18 t2@@2 f@@23 h0@@12 bx0@@13 bx1@@2) (Reads2 t0@@39 t1@@18 t2@@2 f@@23 h1@@12 bx0@@13 bx1@@2))) :qid |unknown.0:0| :skolemid |657| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@39 t1@@18 t2@@2 f@@23 h1@@12 bx0@@13 bx1@@2)) )))
(assert (forall ((t0@@40 T@U) (t1@@19 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@24 T@U) (bx0@@14 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@40) TyType) (= (type t1@@19) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType1Type refType))) (= (type h1@@13) (MapType1Type refType))) (= (type f@@24) HandleTypeType)) (= (type bx0@@14) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@14 t0@@40) ($IsBox bx1@@3 t1@@19)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@40 t1@@19 t2@@3)))) (forall ((o@@52 T@U) (fld@@12 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@12) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@19 t2@@3 f@@24 h1@@13 bx0@@14 bx1@@3) ($Box o@@52))))) (= (MapType1Select h0@@13 o@@52 fld@@12) (MapType1Select h1@@13 o@@52 fld@@12)))) :qid |unknown.0:0| :skolemid |658| :no-pattern (type o@@52) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@40 t1@@19 t2@@3 f@@24 h0@@13 bx0@@14 bx1@@3) (Reads2 t0@@40 t1@@19 t2@@3 f@@24 h1@@13 bx0@@14 bx1@@3))) :qid |unknown.0:0| :skolemid |659| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@40 t1@@19 t2@@3 f@@24 h1@@13 bx0@@14 bx1@@3)) )))
(assert (forall ((t0@@41 T@U) (t1@@20 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@25 T@U) (bx0@@15 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@41) TyType) (= (type t1@@20) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType1Type refType))) (= (type h1@@14) (MapType1Type refType))) (= (type f@@25) HandleTypeType)) (= (type bx0@@15) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@15 t0@@41) ($IsBox bx1@@4 t1@@20)) ($Is f@@25 (Tclass._System.___hFunc2 t0@@41 t1@@20 t2@@4)))) (forall ((o@@53 T@U) (fld@@13 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@13) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads2 t0@@41 t1@@20 t2@@4 f@@25 h0@@14 bx0@@15 bx1@@4) ($Box o@@53))))) (= (MapType1Select h0@@14 o@@53 fld@@13) (MapType1Select h1@@14 o@@53 fld@@13)))) :qid |unknown.0:0| :skolemid |660| :no-pattern (type o@@53) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires2 t0@@41 t1@@20 t2@@4 f@@25 h0@@14 bx0@@15 bx1@@4) (Requires2 t0@@41 t1@@20 t2@@4 f@@25 h1@@14 bx0@@15 bx1@@4)) (=> (Requires2 t0@@41 t1@@20 t2@@4 f@@25 h1@@14 bx0@@15 bx1@@4) (Requires2 t0@@41 t1@@20 t2@@4 f@@25 h0@@14 bx0@@15 bx1@@4)))) :qid |unknown.0:0| :skolemid |661| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@41 t1@@20 t2@@4 f@@25 h1@@14 bx0@@15 bx1@@4)) )))
(assert (forall ((t0@@42 T@U) (t1@@21 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@26 T@U) (bx0@@16 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@21) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType1Type refType))) (= (type h1@@15) (MapType1Type refType))) (= (type f@@26) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@16 t0@@42) ($IsBox bx1@@5 t1@@21)) ($Is f@@26 (Tclass._System.___hFunc2 t0@@42 t1@@21 t2@@5)))) (forall ((o@@54 T@U) (fld@@14 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@14) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads2 t0@@42 t1@@21 t2@@5 f@@26 h1@@15 bx0@@16 bx1@@5) ($Box o@@54))))) (= (MapType1Select h0@@15 o@@54 fld@@14) (MapType1Select h1@@15 o@@54 fld@@14)))) :qid |unknown.0:0| :skolemid |662| :no-pattern (type o@@54) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires2 t0@@42 t1@@21 t2@@5 f@@26 h0@@15 bx0@@16 bx1@@5) (Requires2 t0@@42 t1@@21 t2@@5 f@@26 h1@@15 bx0@@16 bx1@@5)) (=> (Requires2 t0@@42 t1@@21 t2@@5 f@@26 h1@@15 bx0@@16 bx1@@5) (Requires2 t0@@42 t1@@21 t2@@5 f@@26 h0@@15 bx0@@16 bx1@@5)))) :qid |unknown.0:0| :skolemid |663| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@42 t1@@21 t2@@5 f@@26 h1@@15 bx0@@16 bx1@@5)) )))
(assert (forall ((t0@@43 T@U) (t1@@22 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@27 T@U) (bx0@@17 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@22) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType1Type refType))) (= (type h1@@16) (MapType1Type refType))) (= (type f@@27) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@17 t0@@43) ($IsBox bx1@@6 t1@@22)) ($Is f@@27 (Tclass._System.___hFunc2 t0@@43 t1@@22 t2@@6)))) (forall ((o@@55 T@U) (fld@@15 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@15) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads2 t0@@43 t1@@22 t2@@6 f@@27 h0@@16 bx0@@17 bx1@@6) ($Box o@@55))))) (= (MapType1Select h0@@16 o@@55 fld@@15) (MapType1Select h1@@16 o@@55 fld@@15)))) :qid |unknown.0:0| :skolemid |664| :no-pattern (type o@@55) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@43 t1@@22 t2@@6 f@@27 h0@@16 bx0@@17 bx1@@6) (Apply2 t0@@43 t1@@22 t2@@6 f@@27 h1@@16 bx0@@17 bx1@@6))) :qid |unknown.0:0| :skolemid |665| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@43 t1@@22 t2@@6 f@@27 h1@@16 bx0@@17 bx1@@6)) )))
(assert (forall ((t0@@44 T@U) (t1@@23 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@28 T@U) (bx0@@18 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@23) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType1Type refType))) (= (type h1@@17) (MapType1Type refType))) (= (type f@@28) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@18 t0@@44) ($IsBox bx1@@7 t1@@23)) ($Is f@@28 (Tclass._System.___hFunc2 t0@@44 t1@@23 t2@@7)))) (forall ((o@@56 T@U) (fld@@16 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@16) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@44 t1@@23 t2@@7 f@@28 h1@@17 bx0@@18 bx1@@7) ($Box o@@56))))) (= (MapType1Select h0@@17 o@@56 fld@@16) (MapType1Select h1@@17 o@@56 fld@@16)))) :qid |unknown.0:0| :skolemid |666| :no-pattern (type o@@56) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@44 t1@@23 t2@@7 f@@28 h0@@17 bx0@@18 bx1@@7) (Apply2 t0@@44 t1@@23 t2@@7 f@@28 h1@@17 bx0@@18 bx1@@7))) :qid |unknown.0:0| :skolemid |667| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@44 t1@@23 t2@@7 f@@28 h1@@17 bx0@@18 bx1@@7)) )))
(assert (forall ((f@@29 T@U) (t0@@45 T@U) (t1@@24 T@U) (t2@@8 T@U) ) (!  (=> (and (and (and (= (type f@@29) HandleTypeType) (= (type t0@@45) TyType)) (= (type t1@@24) TyType)) (= (type t2@@8) TyType)) (and (=> ($Is f@@29 (Tclass._System.___hFunc2 t0@@45 t1@@24 t2@@8)) (forall ((h@@34 T@U) (bx0@@19 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (= (type h@@34) (MapType1Type refType)) (= (type bx0@@19) BoxType)) (= (type bx1@@8) BoxType)) (and (and ($IsGoodHeap h@@34) (and ($IsBox bx0@@19 t0@@45) ($IsBox bx1@@8 t1@@24))) (Requires2 t0@@45 t1@@24 t2@@8 f@@29 h@@34 bx0@@19 bx1@@8))) ($IsBox (Apply2 t0@@45 t1@@24 t2@@8 f@@29 h@@34 bx0@@19 bx1@@8) t2@@8)) :qid |DafnyPre.405:12| :skolemid |668| :pattern ( (Apply2 t0@@45 t1@@24 t2@@8 f@@29 h@@34 bx0@@19 bx1@@8)) ))) (=> (forall ((h@@35 T@U) (bx0@@20 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (= (type h@@35) (MapType1Type refType)) (= (type bx0@@20) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap h@@35) (and ($IsBox bx0@@20 t0@@45) ($IsBox bx1@@9 t1@@24))) (Requires2 t0@@45 t1@@24 t2@@8 f@@29 h@@35 bx0@@20 bx1@@9))) ($IsBox (Apply2 t0@@45 t1@@24 t2@@8 f@@29 h@@35 bx0@@20 bx1@@9) t2@@8)) :qid |DafnyPre.405:12| :skolemid |668| :pattern ( (Apply2 t0@@45 t1@@24 t2@@8 f@@29 h@@35 bx0@@20 bx1@@9)) )) ($Is f@@29 (Tclass._System.___hFunc2 t0@@45 t1@@24 t2@@8))))) :qid |unknown.0:0| :skolemid |669| :pattern ( ($Is f@@29 (Tclass._System.___hFunc2 t0@@45 t1@@24 t2@@8))) )))
(assert (forall ((f@@30 T@U) (t0@@46 T@U) (t1@@25 T@U) (t2@@9 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@30) HandleTypeType) (= (type t0@@46) TyType)) (= (type t1@@25) TyType)) (= (type t2@@9) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@30 (Tclass._System.___hFunc2 t0@@46 t1@@25 t2@@9)) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u0@@1)) ($IsBox bx@@46 t0@@46)) :qid |unknown.0:0| :skolemid |670| :pattern ( ($IsBox bx@@46 u0@@1)) :pattern ( ($IsBox bx@@46 t0@@46)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u1@@0)) ($IsBox bx@@47 t1@@25)) :qid |unknown.0:0| :skolemid |671| :pattern ( ($IsBox bx@@47 u1@@0)) :pattern ( ($IsBox bx@@47 t1@@25)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 t2@@9)) ($IsBox bx@@48 u2)) :qid |unknown.0:0| :skolemid |672| :pattern ( ($IsBox bx@@48 t2@@9)) :pattern ( ($IsBox bx@@48 u2)) )))) ($Is f@@30 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |673| :pattern ( ($Is f@@30 (Tclass._System.___hFunc2 t0@@46 t1@@25 t2@@9)) ($Is f@@30 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@31 T@U) (t0@@47 T@U) (t1@@26 T@U) (t2@@10 T@U) (h@@36 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@31) HandleTypeType) (= (type t0@@47) TyType)) (= (type t1@@26) TyType)) (= (type t2@@10) TyType)) (= (type h@@36) (MapType1Type refType))) ($IsGoodHeap h@@36)) ($IsAlloc f@@31 (Tclass._System.___hFunc2 t0@@47 t1@@26 t2@@10) h@@36)) :qid |unknown.0:0| :skolemid |675| :pattern ( ($IsAlloc f@@31 (Tclass._System.___hFunc2 t0@@47 t1@@26 t2@@10) h@@36)) )))
(assert (forall ((arg0@@129 T@U) (arg1@@65 T@U) (arg2@@30 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@129 arg1@@65 arg2@@30 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@129 arg1@@65 arg2@@30 arg3@@12)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@8| T@U) (|#$T2@@4| T@U) (|#$T3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$T3|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@11| |#$T1@@8| |#$T2@@4| |#$T3|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |676| :pattern ( (Tclass._System.___hFunc3 |#$T0@@11| |#$T1@@8| |#$T2@@4| |#$T3|)) )))
(assert (forall ((arg0@@130 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@130)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@130)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@9| T@U) (|#$T2@@5| T@U) (|#$T3@@0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$T3@@0|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@12| |#$T1@@9| |#$T2@@5| |#$T3@@0|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |677| :pattern ( (Tclass._System.___hFunc3 |#$T0@@12| |#$T1@@9| |#$T2@@5| |#$T3@@0|)) )))
(assert (forall ((arg0@@131 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@131)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@131)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@10| T@U) (|#$T2@@6| T@U) (|#$T3@@1| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$T3@@1|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@13| |#$T1@@10| |#$T2@@6| |#$T3@@1|)) |#$T1@@10|)) :qid |unknown.0:0| :skolemid |678| :pattern ( (Tclass._System.___hFunc3 |#$T0@@13| |#$T1@@10| |#$T2@@6| |#$T3@@1|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@132)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@132)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@11| T@U) (|#$T2@@7| T@U) (|#$T3@@2| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$T3@@2|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@14| |#$T1@@11| |#$T2@@7| |#$T3@@2|)) |#$T2@@7|)) :qid |unknown.0:0| :skolemid |679| :pattern ( (Tclass._System.___hFunc3 |#$T0@@14| |#$T1@@11| |#$T2@@7| |#$T3@@2|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@133)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@133)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@12| T@U) (|#$T2@@8| T@U) (|#$T3@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$T3@@3|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@15| |#$T1@@12| |#$T2@@8| |#$T3@@3|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |680| :pattern ( (Tclass._System.___hFunc3 |#$T0@@15| |#$T1@@12| |#$T2@@8| |#$T3@@3|)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@13| T@U) (|#$T2@@9| T@U) (|#$T3@@4| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hFunc3 |#$T0@@16| |#$T1@@13| |#$T2@@9| |#$T3@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hFunc3 |#$T0@@16| |#$T1@@13| |#$T2@@9| |#$T3@@4|)))) :qid |unknown.0:0| :skolemid |681| :pattern ( ($IsBox bx@@49 (Tclass._System.___hFunc3 |#$T0@@16| |#$T1@@13| |#$T2@@9| |#$T3@@4|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@134 T@T) (arg1@@66 T@T) (arg2@@31 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@134 arg1@@66 arg2@@31 arg3@@13 arg4@@4)) 22) :qid |ctor:MapType4Type| )) (forall ((arg0@@135 T@T) (arg1@@67 T@T) (arg2@@32 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@135 arg1@@67 arg2@@32 arg3@@14 arg4@@5)) arg0@@135) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@135 arg1@@67 arg2@@32 arg3@@14 arg4@@5)) ))) (forall ((arg0@@136 T@T) (arg1@@68 T@T) (arg2@@33 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@136 arg1@@68 arg2@@33 arg3@@15 arg4@@6)) arg1@@68) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@136 arg1@@68 arg2@@33 arg3@@15 arg4@@6)) ))) (forall ((arg0@@137 T@T) (arg1@@69 T@T) (arg2@@34 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@137 arg1@@69 arg2@@34 arg3@@16 arg4@@7)) arg2@@34) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@137 arg1@@69 arg2@@34 arg3@@16 arg4@@7)) ))) (forall ((arg0@@138 T@T) (arg1@@70 T@T) (arg2@@35 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@138 arg1@@70 arg2@@35 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@138 arg1@@70 arg2@@35 arg3@@17 arg4@@8)) ))) (forall ((arg0@@139 T@T) (arg1@@71 T@T) (arg2@@36 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@139 arg1@@71 arg2@@36 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@139 arg1@@71 arg2@@36 arg3@@18 arg4@@9)) ))) (forall ((arg0@@140 T@U) (arg1@@72 T@U) (arg2@@37 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@140)))) (= (type (MapType4Select arg0@@140 arg1@@72 arg2@@37 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@140 arg1@@72 arg2@@37 arg3@@19 arg4@@10)) ))) (forall ((arg0@@141 T@U) (arg1@@73 T@U) (arg2@@38 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@38))) (let ((aVar0@@3 (type arg1@@73))) (= (type (MapType4Store arg0@@141 arg1@@73 arg2@@38 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@3 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@141 arg1@@73 arg2@@38 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@36 T@U) (x0@@15 T@U) (x1@@12 T@U) (x2@@4 T@U) (x3 T@U) (val@@16 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@36)))) (=> (= (type val@@16) aVar4@@1) (= (MapType4Select (MapType4Store m@@36 x0@@15 x1@@12 x2@@4 x3 val@@16) x0@@15 x1@@12 x2@@4 x3) val@@16))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@17 T@U) (m@@37 T@U) (x0@@16 T@U) (x1@@13 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@11 T@U) (y1@@9 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@16 y0@@11) (= (MapType4Select (MapType4Store m@@37 x0@@16 x1@@13 x2@@5 x3@@0 val@@17) y0@@11 y1@@9 y2@@3 y3) (MapType4Select m@@37 y0@@11 y1@@9 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@18 T@U) (m@@38 T@U) (x0@@17 T@U) (x1@@14 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@12 T@U) (y1@@10 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@14 y1@@10) (= (MapType4Select (MapType4Store m@@38 x0@@17 x1@@14 x2@@6 x3@@1 val@@18) y0@@12 y1@@10 y2@@4 y3@@0) (MapType4Select m@@38 y0@@12 y1@@10 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@19 T@U) (m@@39 T@U) (x0@@18 T@U) (x1@@15 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@13 T@U) (y1@@11 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@39 x0@@18 x1@@15 x2@@7 x3@@2 val@@19) y0@@13 y1@@11 y2@@5 y3@@1) (MapType4Select m@@39 y0@@13 y1@@11 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@20 T@U) (m@@40 T@U) (x0@@19 T@U) (x1@@16 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@14 T@U) (y1@@12 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@40 x0@@19 x1@@16 x2@@8 x3@@3 val@@20) y0@@14 y1@@12 y2@@6 y3@@2) (MapType4Select m@@40 y0@@14 y1@@12 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@21 T@U) (m@@41 T@U) (x0@@20 T@U) (x1@@17 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@15 T@U) (y1@@13 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@41 x0@@20 x1@@17 x2@@9 x3@@4 val@@21) y0@@15 y1@@13 y2@@7 y3@@3) (MapType4Select m@@41 y0@@15 y1@@13 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@142 T@U) (arg1@@74 T@U) (arg2@@39 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@142 arg1@@74 arg2@@39 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@142 arg1@@74 arg2@@39 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@143 T@U) (arg1@@75 T@U) (arg2@@40 T@U) ) (! (= (type (Handle3 arg0@@143 arg1@@75 arg2@@40)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@143 arg1@@75 arg2@@40)) ))))
(assert (forall ((t0@@48 T@U) (t1@@27 T@U) (t2@@11 T@U) (t3 T@U) (heap@@8 T@U) (h@@37 T@U) (r@@14 T@U) (rd@@8 T@U) (bx0@@21 T@U) (bx1@@10 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@27) TyType)) (= (type t2@@11) TyType)) (= (type t3) TyType)) (= (type heap@@8) (MapType1Type refType))) (= (type h@@37) (MapType4Type (MapType1Type refType) BoxType BoxType BoxType BoxType))) (= (type r@@14) (MapType4Type (MapType1Type refType) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType1Type refType) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@21) BoxType)) (= (type bx1@@10) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@48 t1@@27 t2@@11 t3 (Handle3 h@@37 r@@14 rd@@8) heap@@8 bx0@@21 bx1@@10 bx2) (MapType4Select h@@37 heap@@8 bx0@@21 bx1@@10 bx2))) :qid |unknown.0:0| :skolemid |682| :pattern ( (Apply3 t0@@48 t1@@27 t2@@11 t3 (Handle3 h@@37 r@@14 rd@@8) heap@@8 bx0@@21 bx1@@10 bx2)) )))
(assert (forall ((t0@@49 T@U) (t1@@28 T@U) (t2@@12 T@U) (t3@@0 T@U) (heap@@9 T@U) (h@@38 T@U) (r@@15 T@U) (rd@@9 T@U) (bx0@@22 T@U) (bx1@@11 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@28) TyType)) (= (type t2@@12) TyType)) (= (type t3@@0) TyType)) (= (type heap@@9) (MapType1Type refType))) (= (type h@@38) (MapType4Type (MapType1Type refType) BoxType BoxType BoxType BoxType))) (= (type r@@15) (MapType4Type (MapType1Type refType) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType1Type refType) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@22) BoxType)) (= (type bx1@@11) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@15 heap@@9 bx0@@22 bx1@@11 bx2@@0))) (Requires3 t0@@49 t1@@28 t2@@12 t3@@0 (Handle3 h@@38 r@@15 rd@@9) heap@@9 bx0@@22 bx1@@11 bx2@@0)) :qid |unknown.0:0| :skolemid |683| :pattern ( (Requires3 t0@@49 t1@@28 t2@@12 t3@@0 (Handle3 h@@38 r@@15 rd@@9) heap@@9 bx0@@22 bx1@@11 bx2@@0)) )))
(assert (forall ((arg0@@144 T@U) (arg1@@76 T@U) (arg2@@41 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@144 arg1@@76 arg2@@41 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@144 arg1@@76 arg2@@41 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@50 T@U) (t1@@29 T@U) (t2@@13 T@U) (t3@@1 T@U) (heap@@10 T@U) (h@@39 T@U) (r@@16 T@U) (rd@@10 T@U) (bx0@@23 T@U) (bx1@@12 T@U) (bx2@@1 T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@29) TyType)) (= (type t2@@13) TyType)) (= (type t3@@1) TyType)) (= (type heap@@10) (MapType1Type refType))) (= (type h@@39) (MapType4Type (MapType1Type refType) BoxType BoxType BoxType BoxType))) (= (type r@@16) (MapType4Type (MapType1Type refType) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType1Type refType) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@23) BoxType)) (= (type bx1@@12) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@50) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@50 t1@@29 t2@@13 t3@@1 (Handle3 h@@39 r@@16 rd@@10) heap@@10 bx0@@23 bx1@@12 bx2@@1) bx@@50)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@10 bx0@@23 bx1@@12 bx2@@1) bx@@50))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@10 bx0@@23 bx1@@12 bx2@@1) bx@@50)) (U_2_bool (MapType0Select (Reads3 t0@@50 t1@@29 t2@@13 t3@@1 (Handle3 h@@39 r@@16 rd@@10) heap@@10 bx0@@23 bx1@@12 bx2@@1) bx@@50))))) :qid |unknown.0:0| :skolemid |684| :pattern ( (MapType0Select (Reads3 t0@@50 t1@@29 t2@@13 t3@@1 (Handle3 h@@39 r@@16 rd@@10) heap@@10 bx0@@23 bx1@@12 bx2@@1) bx@@50)) )))
(assert (forall ((t0@@51 T@U) (t1@@30 T@U) (t2@@14 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@32 T@U) (bx0@@24 T@U) (bx1@@13 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@30) TyType)) (= (type t2@@14) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType1Type refType))) (= (type h1@@18) (MapType1Type refType))) (= (type f@@32) HandleTypeType)) (= (type bx0@@24) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@24 t0@@51) ($IsBox bx1@@13 t1@@30)) ($IsBox bx2@@2 t2@@14)) ($Is f@@32 (Tclass._System.___hFunc3 t0@@51 t1@@30 t2@@14 t3@@2)))) (forall ((o@@57 T@U) (fld@@17 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@17) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads3 t0@@51 t1@@30 t2@@14 t3@@2 f@@32 h0@@18 bx0@@24 bx1@@13 bx2@@2) ($Box o@@57))))) (= (MapType1Select h0@@18 o@@57 fld@@17) (MapType1Select h1@@18 o@@57 fld@@17)))) :qid |unknown.0:0| :skolemid |685| :no-pattern (type o@@57) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@51 t1@@30 t2@@14 t3@@2 f@@32 h0@@18 bx0@@24 bx1@@13 bx2@@2) (Reads3 t0@@51 t1@@30 t2@@14 t3@@2 f@@32 h1@@18 bx0@@24 bx1@@13 bx2@@2))) :qid |unknown.0:0| :skolemid |686| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@51 t1@@30 t2@@14 t3@@2 f@@32 h1@@18 bx0@@24 bx1@@13 bx2@@2)) )))
(assert (forall ((t0@@52 T@U) (t1@@31 T@U) (t2@@15 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@33 T@U) (bx0@@25 T@U) (bx1@@14 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@31) TyType)) (= (type t2@@15) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType1Type refType))) (= (type h1@@19) (MapType1Type refType))) (= (type f@@33) HandleTypeType)) (= (type bx0@@25) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@25 t0@@52) ($IsBox bx1@@14 t1@@31)) ($IsBox bx2@@3 t2@@15)) ($Is f@@33 (Tclass._System.___hFunc3 t0@@52 t1@@31 t2@@15 t3@@3)))) (forall ((o@@58 T@U) (fld@@18 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@18) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads3 t0@@52 t1@@31 t2@@15 t3@@3 f@@33 h1@@19 bx0@@25 bx1@@14 bx2@@3) ($Box o@@58))))) (= (MapType1Select h0@@19 o@@58 fld@@18) (MapType1Select h1@@19 o@@58 fld@@18)))) :qid |unknown.0:0| :skolemid |687| :no-pattern (type o@@58) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@52 t1@@31 t2@@15 t3@@3 f@@33 h0@@19 bx0@@25 bx1@@14 bx2@@3) (Reads3 t0@@52 t1@@31 t2@@15 t3@@3 f@@33 h1@@19 bx0@@25 bx1@@14 bx2@@3))) :qid |unknown.0:0| :skolemid |688| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@52 t1@@31 t2@@15 t3@@3 f@@33 h1@@19 bx0@@25 bx1@@14 bx2@@3)) )))
(assert (forall ((t0@@53 T@U) (t1@@32 T@U) (t2@@16 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@34 T@U) (bx0@@26 T@U) (bx1@@15 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@32) TyType)) (= (type t2@@16) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType1Type refType))) (= (type h1@@20) (MapType1Type refType))) (= (type f@@34) HandleTypeType)) (= (type bx0@@26) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@26 t0@@53) ($IsBox bx1@@15 t1@@32)) ($IsBox bx2@@4 t2@@16)) ($Is f@@34 (Tclass._System.___hFunc3 t0@@53 t1@@32 t2@@16 t3@@4)))) (forall ((o@@59 T@U) (fld@@19 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@19) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads3 t0@@53 t1@@32 t2@@16 t3@@4 f@@34 h0@@20 bx0@@26 bx1@@15 bx2@@4) ($Box o@@59))))) (= (MapType1Select h0@@20 o@@59 fld@@19) (MapType1Select h1@@20 o@@59 fld@@19)))) :qid |unknown.0:0| :skolemid |689| :no-pattern (type o@@59) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires3 t0@@53 t1@@32 t2@@16 t3@@4 f@@34 h0@@20 bx0@@26 bx1@@15 bx2@@4) (Requires3 t0@@53 t1@@32 t2@@16 t3@@4 f@@34 h1@@20 bx0@@26 bx1@@15 bx2@@4)) (=> (Requires3 t0@@53 t1@@32 t2@@16 t3@@4 f@@34 h1@@20 bx0@@26 bx1@@15 bx2@@4) (Requires3 t0@@53 t1@@32 t2@@16 t3@@4 f@@34 h0@@20 bx0@@26 bx1@@15 bx2@@4)))) :qid |unknown.0:0| :skolemid |690| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@53 t1@@32 t2@@16 t3@@4 f@@34 h1@@20 bx0@@26 bx1@@15 bx2@@4)) )))
(assert (forall ((t0@@54 T@U) (t1@@33 T@U) (t2@@17 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@35 T@U) (bx0@@27 T@U) (bx1@@16 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@33) TyType)) (= (type t2@@17) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType1Type refType))) (= (type h1@@21) (MapType1Type refType))) (= (type f@@35) HandleTypeType)) (= (type bx0@@27) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@27 t0@@54) ($IsBox bx1@@16 t1@@33)) ($IsBox bx2@@5 t2@@17)) ($Is f@@35 (Tclass._System.___hFunc3 t0@@54 t1@@33 t2@@17 t3@@5)))) (forall ((o@@60 T@U) (fld@@20 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@20) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads3 t0@@54 t1@@33 t2@@17 t3@@5 f@@35 h1@@21 bx0@@27 bx1@@16 bx2@@5) ($Box o@@60))))) (= (MapType1Select h0@@21 o@@60 fld@@20) (MapType1Select h1@@21 o@@60 fld@@20)))) :qid |unknown.0:0| :skolemid |691| :no-pattern (type o@@60) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires3 t0@@54 t1@@33 t2@@17 t3@@5 f@@35 h0@@21 bx0@@27 bx1@@16 bx2@@5) (Requires3 t0@@54 t1@@33 t2@@17 t3@@5 f@@35 h1@@21 bx0@@27 bx1@@16 bx2@@5)) (=> (Requires3 t0@@54 t1@@33 t2@@17 t3@@5 f@@35 h1@@21 bx0@@27 bx1@@16 bx2@@5) (Requires3 t0@@54 t1@@33 t2@@17 t3@@5 f@@35 h0@@21 bx0@@27 bx1@@16 bx2@@5)))) :qid |unknown.0:0| :skolemid |692| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@54 t1@@33 t2@@17 t3@@5 f@@35 h1@@21 bx0@@27 bx1@@16 bx2@@5)) )))
(assert (forall ((t0@@55 T@U) (t1@@34 T@U) (t2@@18 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@36 T@U) (bx0@@28 T@U) (bx1@@17 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@34) TyType)) (= (type t2@@18) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType1Type refType))) (= (type h1@@22) (MapType1Type refType))) (= (type f@@36) HandleTypeType)) (= (type bx0@@28) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@28 t0@@55) ($IsBox bx1@@17 t1@@34)) ($IsBox bx2@@6 t2@@18)) ($Is f@@36 (Tclass._System.___hFunc3 t0@@55 t1@@34 t2@@18 t3@@6)))) (forall ((o@@61 T@U) (fld@@21 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@21) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads3 t0@@55 t1@@34 t2@@18 t3@@6 f@@36 h0@@22 bx0@@28 bx1@@17 bx2@@6) ($Box o@@61))))) (= (MapType1Select h0@@22 o@@61 fld@@21) (MapType1Select h1@@22 o@@61 fld@@21)))) :qid |unknown.0:0| :skolemid |693| :no-pattern (type o@@61) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@55 t1@@34 t2@@18 t3@@6 f@@36 h0@@22 bx0@@28 bx1@@17 bx2@@6) (Apply3 t0@@55 t1@@34 t2@@18 t3@@6 f@@36 h1@@22 bx0@@28 bx1@@17 bx2@@6))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@55 t1@@34 t2@@18 t3@@6 f@@36 h1@@22 bx0@@28 bx1@@17 bx2@@6)) )))
(assert (forall ((t0@@56 T@U) (t1@@35 T@U) (t2@@19 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@37 T@U) (bx0@@29 T@U) (bx1@@18 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@35) TyType)) (= (type t2@@19) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType1Type refType))) (= (type h1@@23) (MapType1Type refType))) (= (type f@@37) HandleTypeType)) (= (type bx0@@29) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@29 t0@@56) ($IsBox bx1@@18 t1@@35)) ($IsBox bx2@@7 t2@@19)) ($Is f@@37 (Tclass._System.___hFunc3 t0@@56 t1@@35 t2@@19 t3@@7)))) (forall ((o@@62 T@U) (fld@@22 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@22) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads3 t0@@56 t1@@35 t2@@19 t3@@7 f@@37 h1@@23 bx0@@29 bx1@@18 bx2@@7) ($Box o@@62))))) (= (MapType1Select h0@@23 o@@62 fld@@22) (MapType1Select h1@@23 o@@62 fld@@22)))) :qid |unknown.0:0| :skolemid |695| :no-pattern (type o@@62) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@56 t1@@35 t2@@19 t3@@7 f@@37 h0@@23 bx0@@29 bx1@@18 bx2@@7) (Apply3 t0@@56 t1@@35 t2@@19 t3@@7 f@@37 h1@@23 bx0@@29 bx1@@18 bx2@@7))) :qid |unknown.0:0| :skolemid |696| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@56 t1@@35 t2@@19 t3@@7 f@@37 h1@@23 bx0@@29 bx1@@18 bx2@@7)) )))
(assert (forall ((f@@38 T@U) (t0@@57 T@U) (t1@@36 T@U) (t2@@20 T@U) (t3@@8 T@U) ) (!  (=> (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@36) TyType)) (= (type t2@@20) TyType)) (= (type t3@@8) TyType)) (and (=> ($Is f@@38 (Tclass._System.___hFunc3 t0@@57 t1@@36 t2@@20 t3@@8)) (forall ((h@@40 T@U) (bx0@@30 T@U) (bx1@@19 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (= (type h@@40) (MapType1Type refType)) (= (type bx0@@30) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@8) BoxType)) (and (and ($IsGoodHeap h@@40) (and (and ($IsBox bx0@@30 t0@@57) ($IsBox bx1@@19 t1@@36)) ($IsBox bx2@@8 t2@@20))) (Requires3 t0@@57 t1@@36 t2@@20 t3@@8 f@@38 h@@40 bx0@@30 bx1@@19 bx2@@8))) ($IsBox (Apply3 t0@@57 t1@@36 t2@@20 t3@@8 f@@38 h@@40 bx0@@30 bx1@@19 bx2@@8) t3@@8)) :qid |DafnyPre.405:12| :skolemid |697| :pattern ( (Apply3 t0@@57 t1@@36 t2@@20 t3@@8 f@@38 h@@40 bx0@@30 bx1@@19 bx2@@8)) ))) (=> (forall ((h@@41 T@U) (bx0@@31 T@U) (bx1@@20 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (= (type h@@41) (MapType1Type refType)) (= (type bx0@@31) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap h@@41) (and (and ($IsBox bx0@@31 t0@@57) ($IsBox bx1@@20 t1@@36)) ($IsBox bx2@@9 t2@@20))) (Requires3 t0@@57 t1@@36 t2@@20 t3@@8 f@@38 h@@41 bx0@@31 bx1@@20 bx2@@9))) ($IsBox (Apply3 t0@@57 t1@@36 t2@@20 t3@@8 f@@38 h@@41 bx0@@31 bx1@@20 bx2@@9) t3@@8)) :qid |DafnyPre.405:12| :skolemid |697| :pattern ( (Apply3 t0@@57 t1@@36 t2@@20 t3@@8 f@@38 h@@41 bx0@@31 bx1@@20 bx2@@9)) )) ($Is f@@38 (Tclass._System.___hFunc3 t0@@57 t1@@36 t2@@20 t3@@8))))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($Is f@@38 (Tclass._System.___hFunc3 t0@@57 t1@@36 t2@@20 t3@@8))) )))
(assert (forall ((f@@39 T@U) (t0@@58 T@U) (t1@@37 T@U) (t2@@21 T@U) (t3@@9 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@37) TyType)) (= (type t2@@21) TyType)) (= (type t3@@9) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@39 (Tclass._System.___hFunc3 t0@@58 t1@@37 t2@@21 t3@@9)) (forall ((bx@@51 T@U) ) (!  (=> (and (= (type bx@@51) BoxType) ($IsBox bx@@51 u0@@2)) ($IsBox bx@@51 t0@@58)) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsBox bx@@51 u0@@2)) :pattern ( ($IsBox bx@@51 t0@@58)) ))) (forall ((bx@@52 T@U) ) (!  (=> (and (= (type bx@@52) BoxType) ($IsBox bx@@52 u1@@1)) ($IsBox bx@@52 t1@@37)) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsBox bx@@52 u1@@1)) :pattern ( ($IsBox bx@@52 t1@@37)) ))) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u2@@0)) ($IsBox bx@@53 t2@@21)) :qid |unknown.0:0| :skolemid |701| :pattern ( ($IsBox bx@@53 u2@@0)) :pattern ( ($IsBox bx@@53 t2@@21)) ))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 t3@@9)) ($IsBox bx@@54 u3)) :qid |unknown.0:0| :skolemid |702| :pattern ( ($IsBox bx@@54 t3@@9)) :pattern ( ($IsBox bx@@54 u3)) )))) ($Is f@@39 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |703| :pattern ( ($Is f@@39 (Tclass._System.___hFunc3 t0@@58 t1@@37 t2@@21 t3@@9)) ($Is f@@39 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@40 T@U) (t0@@59 T@U) (t1@@38 T@U) (t2@@22 T@U) (t3@@10 T@U) (h@@42 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@38) TyType)) (= (type t2@@22) TyType)) (= (type t3@@10) TyType)) (= (type h@@42) (MapType1Type refType))) ($IsGoodHeap h@@42)) ($IsAlloc f@@40 (Tclass._System.___hFunc3 t0@@59 t1@@38 t2@@22 t3@@10) h@@42)) :qid |unknown.0:0| :skolemid |705| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc3 t0@@59 t1@@38 t2@@22 t3@@10) h@@42)) )))
(assert (forall ((arg0@@145 T@U) (arg1@@77 T@U) (arg2@@42 T@U) (arg3@@23 T@U) (arg4@@14 T@U) (arg5@@4 T@U) (arg6@@3 T@U) (arg7@@1 T@U) (arg8@@1 T@U) ) (! (= (type (Tclass._System.___hFunc8 arg0@@145 arg1@@77 arg2@@42 arg3@@23 arg4@@14 arg5@@4 arg6@@3 arg7@@1 arg8@@1)) TyType) :qid |funType:Tclass._System.___hFunc8| :pattern ( (Tclass._System.___hFunc8 arg0@@145 arg1@@77 arg2@@42 arg3@@23 arg4@@14 arg5@@4 arg6@@3 arg7@@1 arg8@@1)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@14| T@U) (|#$T2@@10| T@U) (|#$T3@@5| T@U) (|#$T4| T@U) (|#$T5| T@U) (|#$T6| T@U) (|#$T7| T@U) (|#$T8| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$T4|) TyType)) (= (type |#$T5|) TyType)) (= (type |#$T6|) TyType)) (= (type |#$T7|) TyType)) (= (type |#$T8|) TyType)) (= (Tag (Tclass._System.___hFunc8 |#$T0@@17| |#$T1@@14| |#$T2@@10| |#$T3@@5| |#$T4| |#$T5| |#$T6| |#$T7| |#$T8|)) Tagclass._System.___hFunc8)) :qid |unknown.0:0| :skolemid |706| :pattern ( (Tclass._System.___hFunc8 |#$T0@@17| |#$T1@@14| |#$T2@@10| |#$T3@@5| |#$T4| |#$T5| |#$T6| |#$T7| |#$T8|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hFunc8_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hFunc8_0| :pattern ( (Tclass._System.___hFunc8_0 arg0@@146)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@15| T@U) (|#$T2@@11| T@U) (|#$T3@@6| T@U) (|#$T4@@0| T@U) (|#$T5@@0| T@U) (|#$T6@@0| T@U) (|#$T7@@0| T@U) (|#$T8@@0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$T4@@0|) TyType)) (= (type |#$T5@@0|) TyType)) (= (type |#$T6@@0|) TyType)) (= (type |#$T7@@0|) TyType)) (= (type |#$T8@@0|) TyType)) (= (Tclass._System.___hFunc8_0 (Tclass._System.___hFunc8 |#$T0@@18| |#$T1@@15| |#$T2@@11| |#$T3@@6| |#$T4@@0| |#$T5@@0| |#$T6@@0| |#$T7@@0| |#$T8@@0|)) |#$T0@@18|)) :qid |unknown.0:0| :skolemid |707| :pattern ( (Tclass._System.___hFunc8 |#$T0@@18| |#$T1@@15| |#$T2@@11| |#$T3@@6| |#$T4@@0| |#$T5@@0| |#$T6@@0| |#$T7@@0| |#$T8@@0|)) )))
(assert (forall ((arg0@@147 T@U) ) (! (= (type (Tclass._System.___hFunc8_1 arg0@@147)) TyType) :qid |funType:Tclass._System.___hFunc8_1| :pattern ( (Tclass._System.___hFunc8_1 arg0@@147)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@16| T@U) (|#$T2@@12| T@U) (|#$T3@@7| T@U) (|#$T4@@1| T@U) (|#$T5@@1| T@U) (|#$T6@@1| T@U) (|#$T7@@1| T@U) (|#$T8@@1| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$T4@@1|) TyType)) (= (type |#$T5@@1|) TyType)) (= (type |#$T6@@1|) TyType)) (= (type |#$T7@@1|) TyType)) (= (type |#$T8@@1|) TyType)) (= (Tclass._System.___hFunc8_1 (Tclass._System.___hFunc8 |#$T0@@19| |#$T1@@16| |#$T2@@12| |#$T3@@7| |#$T4@@1| |#$T5@@1| |#$T6@@1| |#$T7@@1| |#$T8@@1|)) |#$T1@@16|)) :qid |unknown.0:0| :skolemid |708| :pattern ( (Tclass._System.___hFunc8 |#$T0@@19| |#$T1@@16| |#$T2@@12| |#$T3@@7| |#$T4@@1| |#$T5@@1| |#$T6@@1| |#$T7@@1| |#$T8@@1|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc8_2 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc8_2| :pattern ( (Tclass._System.___hFunc8_2 arg0@@148)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@17| T@U) (|#$T2@@13| T@U) (|#$T3@@8| T@U) (|#$T4@@2| T@U) (|#$T5@@2| T@U) (|#$T6@@2| T@U) (|#$T7@@2| T@U) (|#$T8@@2| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$T4@@2|) TyType)) (= (type |#$T5@@2|) TyType)) (= (type |#$T6@@2|) TyType)) (= (type |#$T7@@2|) TyType)) (= (type |#$T8@@2|) TyType)) (= (Tclass._System.___hFunc8_2 (Tclass._System.___hFunc8 |#$T0@@20| |#$T1@@17| |#$T2@@13| |#$T3@@8| |#$T4@@2| |#$T5@@2| |#$T6@@2| |#$T7@@2| |#$T8@@2|)) |#$T2@@13|)) :qid |unknown.0:0| :skolemid |709| :pattern ( (Tclass._System.___hFunc8 |#$T0@@20| |#$T1@@17| |#$T2@@13| |#$T3@@8| |#$T4@@2| |#$T5@@2| |#$T6@@2| |#$T7@@2| |#$T8@@2|)) )))
(assert (forall ((arg0@@149 T@U) ) (! (= (type (Tclass._System.___hFunc8_3 arg0@@149)) TyType) :qid |funType:Tclass._System.___hFunc8_3| :pattern ( (Tclass._System.___hFunc8_3 arg0@@149)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@18| T@U) (|#$T2@@14| T@U) (|#$T3@@9| T@U) (|#$T4@@3| T@U) (|#$T5@@3| T@U) (|#$T6@@3| T@U) (|#$T7@@3| T@U) (|#$T8@@3| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$T4@@3|) TyType)) (= (type |#$T5@@3|) TyType)) (= (type |#$T6@@3|) TyType)) (= (type |#$T7@@3|) TyType)) (= (type |#$T8@@3|) TyType)) (= (Tclass._System.___hFunc8_3 (Tclass._System.___hFunc8 |#$T0@@21| |#$T1@@18| |#$T2@@14| |#$T3@@9| |#$T4@@3| |#$T5@@3| |#$T6@@3| |#$T7@@3| |#$T8@@3|)) |#$T3@@9|)) :qid |unknown.0:0| :skolemid |710| :pattern ( (Tclass._System.___hFunc8 |#$T0@@21| |#$T1@@18| |#$T2@@14| |#$T3@@9| |#$T4@@3| |#$T5@@3| |#$T6@@3| |#$T7@@3| |#$T8@@3|)) )))
(assert (forall ((arg0@@150 T@U) ) (! (= (type (Tclass._System.___hFunc8_4 arg0@@150)) TyType) :qid |funType:Tclass._System.___hFunc8_4| :pattern ( (Tclass._System.___hFunc8_4 arg0@@150)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@19| T@U) (|#$T2@@15| T@U) (|#$T3@@10| T@U) (|#$T4@@4| T@U) (|#$T5@@4| T@U) (|#$T6@@4| T@U) (|#$T7@@4| T@U) (|#$T8@@4| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$T4@@4|) TyType)) (= (type |#$T5@@4|) TyType)) (= (type |#$T6@@4|) TyType)) (= (type |#$T7@@4|) TyType)) (= (type |#$T8@@4|) TyType)) (= (Tclass._System.___hFunc8_4 (Tclass._System.___hFunc8 |#$T0@@22| |#$T1@@19| |#$T2@@15| |#$T3@@10| |#$T4@@4| |#$T5@@4| |#$T6@@4| |#$T7@@4| |#$T8@@4|)) |#$T4@@4|)) :qid |unknown.0:0| :skolemid |711| :pattern ( (Tclass._System.___hFunc8 |#$T0@@22| |#$T1@@19| |#$T2@@15| |#$T3@@10| |#$T4@@4| |#$T5@@4| |#$T6@@4| |#$T7@@4| |#$T8@@4|)) )))
(assert (forall ((arg0@@151 T@U) ) (! (= (type (Tclass._System.___hFunc8_5 arg0@@151)) TyType) :qid |funType:Tclass._System.___hFunc8_5| :pattern ( (Tclass._System.___hFunc8_5 arg0@@151)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@20| T@U) (|#$T2@@16| T@U) (|#$T3@@11| T@U) (|#$T4@@5| T@U) (|#$T5@@5| T@U) (|#$T6@@5| T@U) (|#$T7@@5| T@U) (|#$T8@@5| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$T4@@5|) TyType)) (= (type |#$T5@@5|) TyType)) (= (type |#$T6@@5|) TyType)) (= (type |#$T7@@5|) TyType)) (= (type |#$T8@@5|) TyType)) (= (Tclass._System.___hFunc8_5 (Tclass._System.___hFunc8 |#$T0@@23| |#$T1@@20| |#$T2@@16| |#$T3@@11| |#$T4@@5| |#$T5@@5| |#$T6@@5| |#$T7@@5| |#$T8@@5|)) |#$T5@@5|)) :qid |unknown.0:0| :skolemid |712| :pattern ( (Tclass._System.___hFunc8 |#$T0@@23| |#$T1@@20| |#$T2@@16| |#$T3@@11| |#$T4@@5| |#$T5@@5| |#$T6@@5| |#$T7@@5| |#$T8@@5|)) )))
(assert (forall ((arg0@@152 T@U) ) (! (= (type (Tclass._System.___hFunc8_6 arg0@@152)) TyType) :qid |funType:Tclass._System.___hFunc8_6| :pattern ( (Tclass._System.___hFunc8_6 arg0@@152)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@21| T@U) (|#$T2@@17| T@U) (|#$T3@@12| T@U) (|#$T4@@6| T@U) (|#$T5@@6| T@U) (|#$T6@@6| T@U) (|#$T7@@6| T@U) (|#$T8@@6| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$T4@@6|) TyType)) (= (type |#$T5@@6|) TyType)) (= (type |#$T6@@6|) TyType)) (= (type |#$T7@@6|) TyType)) (= (type |#$T8@@6|) TyType)) (= (Tclass._System.___hFunc8_6 (Tclass._System.___hFunc8 |#$T0@@24| |#$T1@@21| |#$T2@@17| |#$T3@@12| |#$T4@@6| |#$T5@@6| |#$T6@@6| |#$T7@@6| |#$T8@@6|)) |#$T6@@6|)) :qid |unknown.0:0| :skolemid |713| :pattern ( (Tclass._System.___hFunc8 |#$T0@@24| |#$T1@@21| |#$T2@@17| |#$T3@@12| |#$T4@@6| |#$T5@@6| |#$T6@@6| |#$T7@@6| |#$T8@@6|)) )))
(assert (forall ((arg0@@153 T@U) ) (! (= (type (Tclass._System.___hFunc8_7 arg0@@153)) TyType) :qid |funType:Tclass._System.___hFunc8_7| :pattern ( (Tclass._System.___hFunc8_7 arg0@@153)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@22| T@U) (|#$T2@@18| T@U) (|#$T3@@13| T@U) (|#$T4@@7| T@U) (|#$T5@@7| T@U) (|#$T6@@7| T@U) (|#$T7@@7| T@U) (|#$T8@@7| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$T4@@7|) TyType)) (= (type |#$T5@@7|) TyType)) (= (type |#$T6@@7|) TyType)) (= (type |#$T7@@7|) TyType)) (= (type |#$T8@@7|) TyType)) (= (Tclass._System.___hFunc8_7 (Tclass._System.___hFunc8 |#$T0@@25| |#$T1@@22| |#$T2@@18| |#$T3@@13| |#$T4@@7| |#$T5@@7| |#$T6@@7| |#$T7@@7| |#$T8@@7|)) |#$T7@@7|)) :qid |unknown.0:0| :skolemid |714| :pattern ( (Tclass._System.___hFunc8 |#$T0@@25| |#$T1@@22| |#$T2@@18| |#$T3@@13| |#$T4@@7| |#$T5@@7| |#$T6@@7| |#$T7@@7| |#$T8@@7|)) )))
(assert (forall ((arg0@@154 T@U) ) (! (= (type (Tclass._System.___hFunc8_8 arg0@@154)) TyType) :qid |funType:Tclass._System.___hFunc8_8| :pattern ( (Tclass._System.___hFunc8_8 arg0@@154)) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@23| T@U) (|#$T2@@19| T@U) (|#$T3@@14| T@U) (|#$T4@@8| T@U) (|#$T5@@8| T@U) (|#$T6@@8| T@U) (|#$T7@@8| T@U) (|#$T8@@8| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$T4@@8|) TyType)) (= (type |#$T5@@8|) TyType)) (= (type |#$T6@@8|) TyType)) (= (type |#$T7@@8|) TyType)) (= (type |#$T8@@8|) TyType)) (= (Tclass._System.___hFunc8_8 (Tclass._System.___hFunc8 |#$T0@@26| |#$T1@@23| |#$T2@@19| |#$T3@@14| |#$T4@@8| |#$T5@@8| |#$T6@@8| |#$T7@@8| |#$T8@@8|)) |#$T8@@8|)) :qid |unknown.0:0| :skolemid |715| :pattern ( (Tclass._System.___hFunc8 |#$T0@@26| |#$T1@@23| |#$T2@@19| |#$T3@@14| |#$T4@@8| |#$T5@@8| |#$T6@@8| |#$T7@@8| |#$T8@@8|)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@24| T@U) (|#$T2@@20| T@U) (|#$T3@@15| T@U) (|#$T4@@9| T@U) (|#$T5@@9| T@U) (|#$T6@@9| T@U) (|#$T7@@9| T@U) (|#$T8@@9| T@U) (bx@@55 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$T4@@9|) TyType)) (= (type |#$T5@@9|) TyType)) (= (type |#$T6@@9|) TyType)) (= (type |#$T7@@9|) TyType)) (= (type |#$T8@@9|) TyType)) (= (type bx@@55) BoxType)) ($IsBox bx@@55 (Tclass._System.___hFunc8 |#$T0@@27| |#$T1@@24| |#$T2@@20| |#$T3@@15| |#$T4@@9| |#$T5@@9| |#$T6@@9| |#$T7@@9| |#$T8@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@55)) bx@@55) ($Is ($Unbox HandleTypeType bx@@55) (Tclass._System.___hFunc8 |#$T0@@27| |#$T1@@24| |#$T2@@20| |#$T3@@15| |#$T4@@9| |#$T5@@9| |#$T6@@9| |#$T7@@9| |#$T8@@9|)))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($IsBox bx@@55 (Tclass._System.___hFunc8 |#$T0@@27| |#$T1@@24| |#$T2@@20| |#$T3@@15| |#$T4@@9| |#$T5@@9| |#$T6@@9| |#$T7@@9| |#$T8@@9|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@155 T@T) (arg1@@78 T@T) (arg2@@43 T@T) (arg3@@24 T@T) (arg4@@15 T@T) (arg5@@5 T@T) (arg6@@4 T@T) (arg7@@2 T@T) (arg8@@2 T@T) (arg9 T@T) ) (! (= (Ctor (MapType5Type arg0@@155 arg1@@78 arg2@@43 arg3@@24 arg4@@15 arg5@@5 arg6@@4 arg7@@2 arg8@@2 arg9)) 23) :qid |ctor:MapType5Type| )) (forall ((arg0@@156 T@T) (arg1@@79 T@T) (arg2@@44 T@T) (arg3@@25 T@T) (arg4@@16 T@T) (arg5@@6 T@T) (arg6@@5 T@T) (arg7@@3 T@T) (arg8@@3 T@T) (arg9@@0 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@156 arg1@@79 arg2@@44 arg3@@25 arg4@@16 arg5@@6 arg6@@5 arg7@@3 arg8@@3 arg9@@0)) arg0@@156) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@156 arg1@@79 arg2@@44 arg3@@25 arg4@@16 arg5@@6 arg6@@5 arg7@@3 arg8@@3 arg9@@0)) ))) (forall ((arg0@@157 T@T) (arg1@@80 T@T) (arg2@@45 T@T) (arg3@@26 T@T) (arg4@@17 T@T) (arg5@@7 T@T) (arg6@@6 T@T) (arg7@@4 T@T) (arg8@@4 T@T) (arg9@@1 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@157 arg1@@80 arg2@@45 arg3@@26 arg4@@17 arg5@@7 arg6@@6 arg7@@4 arg8@@4 arg9@@1)) arg1@@80) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@157 arg1@@80 arg2@@45 arg3@@26 arg4@@17 arg5@@7 arg6@@6 arg7@@4 arg8@@4 arg9@@1)) ))) (forall ((arg0@@158 T@T) (arg1@@81 T@T) (arg2@@46 T@T) (arg3@@27 T@T) (arg4@@18 T@T) (arg5@@8 T@T) (arg6@@7 T@T) (arg7@@5 T@T) (arg8@@5 T@T) (arg9@@2 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@158 arg1@@81 arg2@@46 arg3@@27 arg4@@18 arg5@@8 arg6@@7 arg7@@5 arg8@@5 arg9@@2)) arg2@@46) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@158 arg1@@81 arg2@@46 arg3@@27 arg4@@18 arg5@@8 arg6@@7 arg7@@5 arg8@@5 arg9@@2)) ))) (forall ((arg0@@159 T@T) (arg1@@82 T@T) (arg2@@47 T@T) (arg3@@28 T@T) (arg4@@19 T@T) (arg5@@9 T@T) (arg6@@8 T@T) (arg7@@6 T@T) (arg8@@6 T@T) (arg9@@3 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@159 arg1@@82 arg2@@47 arg3@@28 arg4@@19 arg5@@9 arg6@@8 arg7@@6 arg8@@6 arg9@@3)) arg3@@28) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@159 arg1@@82 arg2@@47 arg3@@28 arg4@@19 arg5@@9 arg6@@8 arg7@@6 arg8@@6 arg9@@3)) ))) (forall ((arg0@@160 T@T) (arg1@@83 T@T) (arg2@@48 T@T) (arg3@@29 T@T) (arg4@@20 T@T) (arg5@@10 T@T) (arg6@@9 T@T) (arg7@@7 T@T) (arg8@@7 T@T) (arg9@@4 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@160 arg1@@83 arg2@@48 arg3@@29 arg4@@20 arg5@@10 arg6@@9 arg7@@7 arg8@@7 arg9@@4)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@160 arg1@@83 arg2@@48 arg3@@29 arg4@@20 arg5@@10 arg6@@9 arg7@@7 arg8@@7 arg9@@4)) ))) (forall ((arg0@@161 T@T) (arg1@@84 T@T) (arg2@@49 T@T) (arg3@@30 T@T) (arg4@@21 T@T) (arg5@@11 T@T) (arg6@@10 T@T) (arg7@@8 T@T) (arg8@@8 T@T) (arg9@@5 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@161 arg1@@84 arg2@@49 arg3@@30 arg4@@21 arg5@@11 arg6@@10 arg7@@8 arg8@@8 arg9@@5)) arg5@@11) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@161 arg1@@84 arg2@@49 arg3@@30 arg4@@21 arg5@@11 arg6@@10 arg7@@8 arg8@@8 arg9@@5)) ))) (forall ((arg0@@162 T@T) (arg1@@85 T@T) (arg2@@50 T@T) (arg3@@31 T@T) (arg4@@22 T@T) (arg5@@12 T@T) (arg6@@11 T@T) (arg7@@9 T@T) (arg8@@9 T@T) (arg9@@6 T@T) ) (! (= (MapType5TypeInv6 (MapType5Type arg0@@162 arg1@@85 arg2@@50 arg3@@31 arg4@@22 arg5@@12 arg6@@11 arg7@@9 arg8@@9 arg9@@6)) arg6@@11) :qid |typeInv:MapType5TypeInv6| :pattern ( (MapType5Type arg0@@162 arg1@@85 arg2@@50 arg3@@31 arg4@@22 arg5@@12 arg6@@11 arg7@@9 arg8@@9 arg9@@6)) ))) (forall ((arg0@@163 T@T) (arg1@@86 T@T) (arg2@@51 T@T) (arg3@@32 T@T) (arg4@@23 T@T) (arg5@@13 T@T) (arg6@@12 T@T) (arg7@@10 T@T) (arg8@@10 T@T) (arg9@@7 T@T) ) (! (= (MapType5TypeInv7 (MapType5Type arg0@@163 arg1@@86 arg2@@51 arg3@@32 arg4@@23 arg5@@13 arg6@@12 arg7@@10 arg8@@10 arg9@@7)) arg7@@10) :qid |typeInv:MapType5TypeInv7| :pattern ( (MapType5Type arg0@@163 arg1@@86 arg2@@51 arg3@@32 arg4@@23 arg5@@13 arg6@@12 arg7@@10 arg8@@10 arg9@@7)) ))) (forall ((arg0@@164 T@T) (arg1@@87 T@T) (arg2@@52 T@T) (arg3@@33 T@T) (arg4@@24 T@T) (arg5@@14 T@T) (arg6@@13 T@T) (arg7@@11 T@T) (arg8@@11 T@T) (arg9@@8 T@T) ) (! (= (MapType5TypeInv8 (MapType5Type arg0@@164 arg1@@87 arg2@@52 arg3@@33 arg4@@24 arg5@@14 arg6@@13 arg7@@11 arg8@@11 arg9@@8)) arg8@@11) :qid |typeInv:MapType5TypeInv8| :pattern ( (MapType5Type arg0@@164 arg1@@87 arg2@@52 arg3@@33 arg4@@24 arg5@@14 arg6@@13 arg7@@11 arg8@@11 arg9@@8)) ))) (forall ((arg0@@165 T@T) (arg1@@88 T@T) (arg2@@53 T@T) (arg3@@34 T@T) (arg4@@25 T@T) (arg5@@15 T@T) (arg6@@14 T@T) (arg7@@12 T@T) (arg8@@12 T@T) (arg9@@9 T@T) ) (! (= (MapType5TypeInv9 (MapType5Type arg0@@165 arg1@@88 arg2@@53 arg3@@34 arg4@@25 arg5@@15 arg6@@14 arg7@@12 arg8@@12 arg9@@9)) arg9@@9) :qid |typeInv:MapType5TypeInv9| :pattern ( (MapType5Type arg0@@165 arg1@@88 arg2@@53 arg3@@34 arg4@@25 arg5@@15 arg6@@14 arg7@@12 arg8@@12 arg9@@9)) ))) (forall ((arg0@@166 T@U) (arg1@@89 T@U) (arg2@@54 T@U) (arg3@@35 T@U) (arg4@@26 T@U) (arg5@@16 T@U) (arg6@@15 T@U) (arg7@@13 T@U) (arg8@@13 T@U) (arg9@@10 T@U) ) (! (let ((aVar9 (MapType5TypeInv9 (type arg0@@166)))) (= (type (MapType5Select arg0@@166 arg1@@89 arg2@@54 arg3@@35 arg4@@26 arg5@@16 arg6@@15 arg7@@13 arg8@@13 arg9@@10)) aVar9)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@166 arg1@@89 arg2@@54 arg3@@35 arg4@@26 arg5@@16 arg6@@15 arg7@@13 arg8@@13 arg9@@10)) ))) (forall ((arg0@@167 T@U) (arg1@@90 T@U) (arg2@@55 T@U) (arg3@@36 T@U) (arg4@@27 T@U) (arg5@@17 T@U) (arg6@@16 T@U) (arg7@@14 T@U) (arg8@@14 T@U) (arg9@@11 T@U) (arg10 T@U) ) (! (let ((aVar9@@0 (type arg10))) (let ((aVar8 (type arg9@@11))) (let ((aVar7 (type arg8@@14))) (let ((aVar6 (type arg7@@14))) (let ((aVar5 (type arg6@@16))) (let ((aVar4@@2 (type arg5@@17))) (let ((aVar3@@3 (type arg4@@27))) (let ((aVar2@@4 (type arg3@@36))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@4 (type arg1@@90))) (= (type (MapType5Store arg0@@167 arg1@@90 arg2@@55 arg3@@36 arg4@@27 arg5@@17 arg6@@16 arg7@@14 arg8@@14 arg9@@11 arg10)) (MapType5Type aVar0@@4 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5 aVar6 aVar7 aVar8 aVar9@@0)))))))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@167 arg1@@90 arg2@@55 arg3@@36 arg4@@27 arg5@@17 arg6@@16 arg7@@14 arg8@@14 arg9@@11 arg10)) ))) (forall ((m@@42 T@U) (x0@@21 T@U) (x1@@18 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (x5 T@U) (x6 T@U) (x7 T@U) (x8 T@U) (val@@22 T@U) ) (! (let ((aVar9@@1 (MapType5TypeInv9 (type m@@42)))) (=> (= (type val@@22) aVar9@@1) (= (MapType5Select (MapType5Store m@@42 x0@@21 x1@@18 x2@@10 x3@@5 x4 x5 x6 x7 x8 val@@22) x0@@21 x1@@18 x2@@10 x3@@5 x4 x5 x6 x7 x8) val@@22))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (and (and (and (and (forall ((val@@23 T@U) (m@@43 T@U) (x0@@22 T@U) (x1@@19 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (x5@@0 T@U) (x6@@0 T@U) (x7@@0 T@U) (x8@@0 T@U) (y0@@16 T@U) (y1@@14 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) (y5 T@U) (y6 T@U) (y7 T@U) (y8 T@U) ) (!  (or (= x0@@22 y0@@16) (= (MapType5Select (MapType5Store m@@43 x0@@22 x1@@19 x2@@11 x3@@6 x4@@0 x5@@0 x6@@0 x7@@0 x8@@0 val@@23) y0@@16 y1@@14 y2@@8 y3@@4 y4 y5 y6 y7 y8) (MapType5Select m@@43 y0@@16 y1@@14 y2@@8 y3@@4 y4 y5 y6 y7 y8))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@24 T@U) (m@@44 T@U) (x0@@23 T@U) (x1@@20 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (x5@@1 T@U) (x6@@1 T@U) (x7@@1 T@U) (x8@@1 T@U) (y0@@17 T@U) (y1@@15 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) (y5@@0 T@U) (y6@@0 T@U) (y7@@0 T@U) (y8@@0 T@U) ) (!  (or (= x1@@20 y1@@15) (= (MapType5Select (MapType5Store m@@44 x0@@23 x1@@20 x2@@12 x3@@7 x4@@1 x5@@1 x6@@1 x7@@1 x8@@1 val@@24) y0@@17 y1@@15 y2@@9 y3@@5 y4@@0 y5@@0 y6@@0 y7@@0 y8@@0) (MapType5Select m@@44 y0@@17 y1@@15 y2@@9 y3@@5 y4@@0 y5@@0 y6@@0 y7@@0 y8@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@25 T@U) (m@@45 T@U) (x0@@24 T@U) (x1@@21 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (x5@@2 T@U) (x6@@2 T@U) (x7@@2 T@U) (x8@@2 T@U) (y0@@18 T@U) (y1@@16 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) (y5@@1 T@U) (y6@@1 T@U) (y7@@1 T@U) (y8@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@45 x0@@24 x1@@21 x2@@13 x3@@8 x4@@2 x5@@2 x6@@2 x7@@2 x8@@2 val@@25) y0@@18 y1@@16 y2@@10 y3@@6 y4@@1 y5@@1 y6@@1 y7@@1 y8@@1) (MapType5Select m@@45 y0@@18 y1@@16 y2@@10 y3@@6 y4@@1 y5@@1 y6@@1 y7@@1 y8@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@26 T@U) (m@@46 T@U) (x0@@25 T@U) (x1@@22 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (x5@@3 T@U) (x6@@3 T@U) (x7@@3 T@U) (x8@@3 T@U) (y0@@19 T@U) (y1@@17 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) (y5@@2 T@U) (y6@@2 T@U) (y7@@2 T@U) (y8@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@46 x0@@25 x1@@22 x2@@14 x3@@9 x4@@3 x5@@3 x6@@3 x7@@3 x8@@3 val@@26) y0@@19 y1@@17 y2@@11 y3@@7 y4@@2 y5@@2 y6@@2 y7@@2 y8@@2) (MapType5Select m@@46 y0@@19 y1@@17 y2@@11 y3@@7 y4@@2 y5@@2 y6@@2 y7@@2 y8@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@27 T@U) (m@@47 T@U) (x0@@26 T@U) (x1@@23 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (x5@@4 T@U) (x6@@4 T@U) (x7@@4 T@U) (x8@@4 T@U) (y0@@20 T@U) (y1@@18 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) (y5@@3 T@U) (y6@@3 T@U) (y7@@3 T@U) (y8@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@47 x0@@26 x1@@23 x2@@15 x3@@10 x4@@4 x5@@4 x6@@4 x7@@4 x8@@4 val@@27) y0@@20 y1@@18 y2@@12 y3@@8 y4@@3 y5@@3 y6@@3 y7@@3 y8@@3) (MapType5Select m@@47 y0@@20 y1@@18 y2@@12 y3@@8 y4@@3 y5@@3 y6@@3 y7@@3 y8@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@28 T@U) (m@@48 T@U) (x0@@27 T@U) (x1@@24 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (x5@@5 T@U) (x6@@5 T@U) (x7@@5 T@U) (x8@@5 T@U) (y0@@21 T@U) (y1@@19 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) (y5@@4 T@U) (y6@@4 T@U) (y7@@4 T@U) (y8@@4 T@U) ) (!  (or (= x5@@5 y5@@4) (= (MapType5Select (MapType5Store m@@48 x0@@27 x1@@24 x2@@16 x3@@11 x4@@5 x5@@5 x6@@5 x7@@5 x8@@5 val@@28) y0@@21 y1@@19 y2@@13 y3@@9 y4@@4 y5@@4 y6@@4 y7@@4 y8@@4) (MapType5Select m@@48 y0@@21 y1@@19 y2@@13 y3@@9 y4@@4 y5@@4 y6@@4 y7@@4 y8@@4))) :qid |mapAx1:MapType5Select:5| :weight 0 ))) (forall ((val@@29 T@U) (m@@49 T@U) (x0@@28 T@U) (x1@@25 T@U) (x2@@17 T@U) (x3@@12 T@U) (x4@@6 T@U) (x5@@6 T@U) (x6@@6 T@U) (x7@@6 T@U) (x8@@6 T@U) (y0@@22 T@U) (y1@@20 T@U) (y2@@14 T@U) (y3@@10 T@U) (y4@@5 T@U) (y5@@5 T@U) (y6@@5 T@U) (y7@@5 T@U) (y8@@5 T@U) ) (!  (or (= x6@@6 y6@@5) (= (MapType5Select (MapType5Store m@@49 x0@@28 x1@@25 x2@@17 x3@@12 x4@@6 x5@@6 x6@@6 x7@@6 x8@@6 val@@29) y0@@22 y1@@20 y2@@14 y3@@10 y4@@5 y5@@5 y6@@5 y7@@5 y8@@5) (MapType5Select m@@49 y0@@22 y1@@20 y2@@14 y3@@10 y4@@5 y5@@5 y6@@5 y7@@5 y8@@5))) :qid |mapAx1:MapType5Select:6| :weight 0 ))) (forall ((val@@30 T@U) (m@@50 T@U) (x0@@29 T@U) (x1@@26 T@U) (x2@@18 T@U) (x3@@13 T@U) (x4@@7 T@U) (x5@@7 T@U) (x6@@7 T@U) (x7@@7 T@U) (x8@@7 T@U) (y0@@23 T@U) (y1@@21 T@U) (y2@@15 T@U) (y3@@11 T@U) (y4@@6 T@U) (y5@@6 T@U) (y6@@6 T@U) (y7@@6 T@U) (y8@@6 T@U) ) (!  (or (= x7@@7 y7@@6) (= (MapType5Select (MapType5Store m@@50 x0@@29 x1@@26 x2@@18 x3@@13 x4@@7 x5@@7 x6@@7 x7@@7 x8@@7 val@@30) y0@@23 y1@@21 y2@@15 y3@@11 y4@@6 y5@@6 y6@@6 y7@@6 y8@@6) (MapType5Select m@@50 y0@@23 y1@@21 y2@@15 y3@@11 y4@@6 y5@@6 y6@@6 y7@@6 y8@@6))) :qid |mapAx1:MapType5Select:7| :weight 0 ))) (forall ((val@@31 T@U) (m@@51 T@U) (x0@@30 T@U) (x1@@27 T@U) (x2@@19 T@U) (x3@@14 T@U) (x4@@8 T@U) (x5@@8 T@U) (x6@@8 T@U) (x7@@8 T@U) (x8@@8 T@U) (y0@@24 T@U) (y1@@22 T@U) (y2@@16 T@U) (y3@@12 T@U) (y4@@7 T@U) (y5@@7 T@U) (y6@@7 T@U) (y7@@7 T@U) (y8@@7 T@U) ) (!  (or (= x8@@8 y8@@7) (= (MapType5Select (MapType5Store m@@51 x0@@30 x1@@27 x2@@19 x3@@14 x4@@8 x5@@8 x6@@8 x7@@8 x8@@8 val@@31) y0@@24 y1@@22 y2@@16 y3@@12 y4@@7 y5@@7 y6@@7 y7@@7 y8@@7) (MapType5Select m@@51 y0@@24 y1@@22 y2@@16 y3@@12 y4@@7 y5@@7 y6@@7 y7@@7 y8@@7))) :qid |mapAx1:MapType5Select:8| :weight 0 ))) (forall ((val@@32 T@U) (m@@52 T@U) (x0@@31 T@U) (x1@@28 T@U) (x2@@20 T@U) (x3@@15 T@U) (x4@@9 T@U) (x5@@9 T@U) (x6@@9 T@U) (x7@@9 T@U) (x8@@9 T@U) (y0@@25 T@U) (y1@@23 T@U) (y2@@17 T@U) (y3@@13 T@U) (y4@@8 T@U) (y5@@8 T@U) (y6@@8 T@U) (y7@@8 T@U) (y8@@8 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@52 x0@@31 x1@@28 x2@@20 x3@@15 x4@@9 x5@@9 x6@@9 x7@@9 x8@@9 val@@32) y0@@25 y1@@23 y2@@17 y3@@13 y4@@8 y5@@8 y6@@8 y7@@8 y8@@8) (MapType5Select m@@52 y0@@25 y1@@23 y2@@17 y3@@13 y4@@8 y5@@8 y6@@8 y7@@8 y8@@8))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@168 T@U) (arg1@@91 T@U) (arg2@@56 T@U) (arg3@@37 T@U) (arg4@@28 T@U) (arg5@@18 T@U) (arg6@@17 T@U) (arg7@@15 T@U) (arg8@@15 T@U) (arg9@@12 T@U) (arg10@@0 T@U) (arg11 T@U) (arg12 T@U) (arg13 T@U) (arg14 T@U) (arg15 T@U) (arg16 T@U) (arg17 T@U) (arg18 T@U) ) (! (= (type (Apply8 arg0@@168 arg1@@91 arg2@@56 arg3@@37 arg4@@28 arg5@@18 arg6@@17 arg7@@15 arg8@@15 arg9@@12 arg10@@0 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18)) BoxType) :qid |funType:Apply8| :pattern ( (Apply8 arg0@@168 arg1@@91 arg2@@56 arg3@@37 arg4@@28 arg5@@18 arg6@@17 arg7@@15 arg8@@15 arg9@@12 arg10@@0 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18)) ))) (forall ((arg0@@169 T@U) (arg1@@92 T@U) (arg2@@57 T@U) ) (! (= (type (Handle8 arg0@@169 arg1@@92 arg2@@57)) HandleTypeType) :qid |funType:Handle8| :pattern ( (Handle8 arg0@@169 arg1@@92 arg2@@57)) ))))
(assert (forall ((t0@@60 T@U) (t1@@39 T@U) (t2@@23 T@U) (t3@@11 T@U) (t4 T@U) (t5 T@U) (t6 T@U) (t7 T@U) (t8 T@U) (heap@@11 T@U) (h@@43 T@U) (r@@17 T@U) (rd@@11 T@U) (bx0@@32 T@U) (bx1@@21 T@U) (bx2@@10 T@U) (bx3 T@U) (bx4 T@U) (bx5 T@U) (bx6 T@U) (bx7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@39) TyType)) (= (type t2@@23) TyType)) (= (type t3@@11) TyType)) (= (type t4) TyType)) (= (type t5) TyType)) (= (type t6) TyType)) (= (type t7) TyType)) (= (type t8) TyType)) (= (type heap@@11) (MapType1Type refType))) (= (type h@@43) (MapType5Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@17) (MapType5Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@10) BoxType)) (= (type bx3) BoxType)) (= (type bx4) BoxType)) (= (type bx5) BoxType)) (= (type bx6) BoxType)) (= (type bx7) BoxType)) (= (Apply8 t0@@60 t1@@39 t2@@23 t3@@11 t4 t5 t6 t7 t8 (Handle8 h@@43 r@@17 rd@@11) heap@@11 bx0@@32 bx1@@21 bx2@@10 bx3 bx4 bx5 bx6 bx7) (MapType5Select h@@43 heap@@11 bx0@@32 bx1@@21 bx2@@10 bx3 bx4 bx5 bx6 bx7))) :qid |unknown.0:0| :skolemid |717| :pattern ( (Apply8 t0@@60 t1@@39 t2@@23 t3@@11 t4 t5 t6 t7 t8 (Handle8 h@@43 r@@17 rd@@11) heap@@11 bx0@@32 bx1@@21 bx2@@10 bx3 bx4 bx5 bx6 bx7)) )))
(assert (forall ((t0@@61 T@U) (t1@@40 T@U) (t2@@24 T@U) (t3@@12 T@U) (t4@@0 T@U) (t5@@0 T@U) (t6@@0 T@U) (t7@@0 T@U) (t8@@0 T@U) (heap@@12 T@U) (h@@44 T@U) (r@@18 T@U) (rd@@12 T@U) (bx0@@33 T@U) (bx1@@22 T@U) (bx2@@11 T@U) (bx3@@0 T@U) (bx4@@0 T@U) (bx5@@0 T@U) (bx6@@0 T@U) (bx7@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@40) TyType)) (= (type t2@@24) TyType)) (= (type t3@@12) TyType)) (= (type t4@@0) TyType)) (= (type t5@@0) TyType)) (= (type t6@@0) TyType)) (= (type t7@@0) TyType)) (= (type t8@@0) TyType)) (= (type heap@@12) (MapType1Type refType))) (= (type h@@44) (MapType5Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType5Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@11) BoxType)) (= (type bx3@@0) BoxType)) (= (type bx4@@0) BoxType)) (= (type bx5@@0) BoxType)) (= (type bx6@@0) BoxType)) (= (type bx7@@0) BoxType)) (U_2_bool (MapType5Select r@@18 heap@@12 bx0@@33 bx1@@22 bx2@@11 bx3@@0 bx4@@0 bx5@@0 bx6@@0 bx7@@0))) (Requires8 t0@@61 t1@@40 t2@@24 t3@@12 t4@@0 t5@@0 t6@@0 t7@@0 t8@@0 (Handle8 h@@44 r@@18 rd@@12) heap@@12 bx0@@33 bx1@@22 bx2@@11 bx3@@0 bx4@@0 bx5@@0 bx6@@0 bx7@@0)) :qid |unknown.0:0| :skolemid |718| :pattern ( (Requires8 t0@@61 t1@@40 t2@@24 t3@@12 t4@@0 t5@@0 t6@@0 t7@@0 t8@@0 (Handle8 h@@44 r@@18 rd@@12) heap@@12 bx0@@33 bx1@@22 bx2@@11 bx3@@0 bx4@@0 bx5@@0 bx6@@0 bx7@@0)) )))
(assert (forall ((arg0@@170 T@U) (arg1@@93 T@U) (arg2@@58 T@U) (arg3@@38 T@U) (arg4@@29 T@U) (arg5@@19 T@U) (arg6@@18 T@U) (arg7@@16 T@U) (arg8@@16 T@U) (arg9@@13 T@U) (arg10@@1 T@U) (arg11@@0 T@U) (arg12@@0 T@U) (arg13@@0 T@U) (arg14@@0 T@U) (arg15@@0 T@U) (arg16@@0 T@U) (arg17@@0 T@U) (arg18@@0 T@U) ) (! (= (type (Reads8 arg0@@170 arg1@@93 arg2@@58 arg3@@38 arg4@@29 arg5@@19 arg6@@18 arg7@@16 arg8@@16 arg9@@13 arg10@@1 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15@@0 arg16@@0 arg17@@0 arg18@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads8| :pattern ( (Reads8 arg0@@170 arg1@@93 arg2@@58 arg3@@38 arg4@@29 arg5@@19 arg6@@18 arg7@@16 arg8@@16 arg9@@13 arg10@@1 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15@@0 arg16@@0 arg17@@0 arg18@@0)) )))
(assert (forall ((t0@@62 T@U) (t1@@41 T@U) (t2@@25 T@U) (t3@@13 T@U) (t4@@1 T@U) (t5@@1 T@U) (t6@@1 T@U) (t7@@1 T@U) (t8@@1 T@U) (heap@@13 T@U) (h@@45 T@U) (r@@19 T@U) (rd@@13 T@U) (bx0@@34 T@U) (bx1@@23 T@U) (bx2@@12 T@U) (bx3@@1 T@U) (bx4@@1 T@U) (bx5@@1 T@U) (bx6@@1 T@U) (bx7@@1 T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@41) TyType)) (= (type t2@@25) TyType)) (= (type t3@@13) TyType)) (= (type t4@@1) TyType)) (= (type t5@@1) TyType)) (= (type t6@@1) TyType)) (= (type t7@@1) TyType)) (= (type t8@@1) TyType)) (= (type heap@@13) (MapType1Type refType))) (= (type h@@45) (MapType5Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType5Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@34) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@12) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx4@@1) BoxType)) (= (type bx5@@1) BoxType)) (= (type bx6@@1) BoxType)) (= (type bx7@@1) BoxType)) (= (type bx@@56) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads8 t0@@62 t1@@41 t2@@25 t3@@13 t4@@1 t5@@1 t6@@1 t7@@1 t8@@1 (Handle8 h@@45 r@@19 rd@@13) heap@@13 bx0@@34 bx1@@23 bx2@@12 bx3@@1 bx4@@1 bx5@@1 bx6@@1 bx7@@1) bx@@56)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@13 bx0@@34 bx1@@23 bx2@@12 bx3@@1 bx4@@1 bx5@@1 bx6@@1 bx7@@1) bx@@56))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@13 bx0@@34 bx1@@23 bx2@@12 bx3@@1 bx4@@1 bx5@@1 bx6@@1 bx7@@1) bx@@56)) (U_2_bool (MapType0Select (Reads8 t0@@62 t1@@41 t2@@25 t3@@13 t4@@1 t5@@1 t6@@1 t7@@1 t8@@1 (Handle8 h@@45 r@@19 rd@@13) heap@@13 bx0@@34 bx1@@23 bx2@@12 bx3@@1 bx4@@1 bx5@@1 bx6@@1 bx7@@1) bx@@56))))) :qid |unknown.0:0| :skolemid |719| :pattern ( (MapType0Select (Reads8 t0@@62 t1@@41 t2@@25 t3@@13 t4@@1 t5@@1 t6@@1 t7@@1 t8@@1 (Handle8 h@@45 r@@19 rd@@13) heap@@13 bx0@@34 bx1@@23 bx2@@12 bx3@@1 bx4@@1 bx5@@1 bx6@@1 bx7@@1) bx@@56)) )))
(assert (forall ((t0@@63 T@U) (t1@@42 T@U) (t2@@26 T@U) (t3@@14 T@U) (t4@@2 T@U) (t5@@2 T@U) (t6@@2 T@U) (t7@@2 T@U) (t8@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@41 T@U) (bx0@@35 T@U) (bx1@@24 T@U) (bx2@@13 T@U) (bx3@@2 T@U) (bx4@@2 T@U) (bx5@@2 T@U) (bx6@@2 T@U) (bx7@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@42) TyType)) (= (type t2@@26) TyType)) (= (type t3@@14) TyType)) (= (type t4@@2) TyType)) (= (type t5@@2) TyType)) (= (type t6@@2) TyType)) (= (type t7@@2) TyType)) (= (type t8@@2) TyType)) (= (type h0@@24) (MapType1Type refType))) (= (type h1@@24) (MapType1Type refType))) (= (type f@@41) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3@@2) BoxType)) (= (type bx4@@2) BoxType)) (= (type bx5@@2) BoxType)) (= (type bx6@@2) BoxType)) (= (type bx7@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and (and (and (and (and ($IsBox bx0@@35 t0@@63) ($IsBox bx1@@24 t1@@42)) ($IsBox bx2@@13 t2@@26)) ($IsBox bx3@@2 t3@@14)) ($IsBox bx4@@2 t4@@2)) ($IsBox bx5@@2 t5@@2)) ($IsBox bx6@@2 t6@@2)) ($IsBox bx7@@2 t7@@2)) ($Is f@@41 (Tclass._System.___hFunc8 t0@@63 t1@@42 t2@@26 t3@@14 t4@@2 t5@@2 t6@@2 t7@@2 t8@@2)))) (forall ((o@@63 T@U) (fld@@23 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@23) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads8 t0@@63 t1@@42 t2@@26 t3@@14 t4@@2 t5@@2 t6@@2 t7@@2 t8@@2 f@@41 h0@@24 bx0@@35 bx1@@24 bx2@@13 bx3@@2 bx4@@2 bx5@@2 bx6@@2 bx7@@2) ($Box o@@63))))) (= (MapType1Select h0@@24 o@@63 fld@@23) (MapType1Select h1@@24 o@@63 fld@@23)))) :qid |unknown.0:0| :skolemid |720| :no-pattern (type o@@63) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads8 t0@@63 t1@@42 t2@@26 t3@@14 t4@@2 t5@@2 t6@@2 t7@@2 t8@@2 f@@41 h0@@24 bx0@@35 bx1@@24 bx2@@13 bx3@@2 bx4@@2 bx5@@2 bx6@@2 bx7@@2) (Reads8 t0@@63 t1@@42 t2@@26 t3@@14 t4@@2 t5@@2 t6@@2 t7@@2 t8@@2 f@@41 h1@@24 bx0@@35 bx1@@24 bx2@@13 bx3@@2 bx4@@2 bx5@@2 bx6@@2 bx7@@2))) :qid |unknown.0:0| :skolemid |721| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads8 t0@@63 t1@@42 t2@@26 t3@@14 t4@@2 t5@@2 t6@@2 t7@@2 t8@@2 f@@41 h1@@24 bx0@@35 bx1@@24 bx2@@13 bx3@@2 bx4@@2 bx5@@2 bx6@@2 bx7@@2)) )))
(assert (forall ((t0@@64 T@U) (t1@@43 T@U) (t2@@27 T@U) (t3@@15 T@U) (t4@@3 T@U) (t5@@3 T@U) (t6@@3 T@U) (t7@@3 T@U) (t8@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@42 T@U) (bx0@@36 T@U) (bx1@@25 T@U) (bx2@@14 T@U) (bx3@@3 T@U) (bx4@@3 T@U) (bx5@@3 T@U) (bx6@@3 T@U) (bx7@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@43) TyType)) (= (type t2@@27) TyType)) (= (type t3@@15) TyType)) (= (type t4@@3) TyType)) (= (type t5@@3) TyType)) (= (type t6@@3) TyType)) (= (type t7@@3) TyType)) (= (type t8@@3) TyType)) (= (type h0@@25) (MapType1Type refType))) (= (type h1@@25) (MapType1Type refType))) (= (type f@@42) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@3) BoxType)) (= (type bx4@@3) BoxType)) (= (type bx5@@3) BoxType)) (= (type bx6@@3) BoxType)) (= (type bx7@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and (and (and (and (and ($IsBox bx0@@36 t0@@64) ($IsBox bx1@@25 t1@@43)) ($IsBox bx2@@14 t2@@27)) ($IsBox bx3@@3 t3@@15)) ($IsBox bx4@@3 t4@@3)) ($IsBox bx5@@3 t5@@3)) ($IsBox bx6@@3 t6@@3)) ($IsBox bx7@@3 t7@@3)) ($Is f@@42 (Tclass._System.___hFunc8 t0@@64 t1@@43 t2@@27 t3@@15 t4@@3 t5@@3 t6@@3 t7@@3 t8@@3)))) (forall ((o@@64 T@U) (fld@@24 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@24) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads8 t0@@64 t1@@43 t2@@27 t3@@15 t4@@3 t5@@3 t6@@3 t7@@3 t8@@3 f@@42 h1@@25 bx0@@36 bx1@@25 bx2@@14 bx3@@3 bx4@@3 bx5@@3 bx6@@3 bx7@@3) ($Box o@@64))))) (= (MapType1Select h0@@25 o@@64 fld@@24) (MapType1Select h1@@25 o@@64 fld@@24)))) :qid |unknown.0:0| :skolemid |722| :no-pattern (type o@@64) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads8 t0@@64 t1@@43 t2@@27 t3@@15 t4@@3 t5@@3 t6@@3 t7@@3 t8@@3 f@@42 h0@@25 bx0@@36 bx1@@25 bx2@@14 bx3@@3 bx4@@3 bx5@@3 bx6@@3 bx7@@3) (Reads8 t0@@64 t1@@43 t2@@27 t3@@15 t4@@3 t5@@3 t6@@3 t7@@3 t8@@3 f@@42 h1@@25 bx0@@36 bx1@@25 bx2@@14 bx3@@3 bx4@@3 bx5@@3 bx6@@3 bx7@@3))) :qid |unknown.0:0| :skolemid |723| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads8 t0@@64 t1@@43 t2@@27 t3@@15 t4@@3 t5@@3 t6@@3 t7@@3 t8@@3 f@@42 h1@@25 bx0@@36 bx1@@25 bx2@@14 bx3@@3 bx4@@3 bx5@@3 bx6@@3 bx7@@3)) )))
(assert (forall ((t0@@65 T@U) (t1@@44 T@U) (t2@@28 T@U) (t3@@16 T@U) (t4@@4 T@U) (t5@@4 T@U) (t6@@4 T@U) (t7@@4 T@U) (t8@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@43 T@U) (bx0@@37 T@U) (bx1@@26 T@U) (bx2@@15 T@U) (bx3@@4 T@U) (bx4@@4 T@U) (bx5@@4 T@U) (bx6@@4 T@U) (bx7@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@44) TyType)) (= (type t2@@28) TyType)) (= (type t3@@16) TyType)) (= (type t4@@4) TyType)) (= (type t5@@4) TyType)) (= (type t6@@4) TyType)) (= (type t7@@4) TyType)) (= (type t8@@4) TyType)) (= (type h0@@26) (MapType1Type refType))) (= (type h1@@26) (MapType1Type refType))) (= (type f@@43) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3@@4) BoxType)) (= (type bx4@@4) BoxType)) (= (type bx5@@4) BoxType)) (= (type bx6@@4) BoxType)) (= (type bx7@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and (and (and (and (and ($IsBox bx0@@37 t0@@65) ($IsBox bx1@@26 t1@@44)) ($IsBox bx2@@15 t2@@28)) ($IsBox bx3@@4 t3@@16)) ($IsBox bx4@@4 t4@@4)) ($IsBox bx5@@4 t5@@4)) ($IsBox bx6@@4 t6@@4)) ($IsBox bx7@@4 t7@@4)) ($Is f@@43 (Tclass._System.___hFunc8 t0@@65 t1@@44 t2@@28 t3@@16 t4@@4 t5@@4 t6@@4 t7@@4 t8@@4)))) (forall ((o@@65 T@U) (fld@@25 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@25) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads8 t0@@65 t1@@44 t2@@28 t3@@16 t4@@4 t5@@4 t6@@4 t7@@4 t8@@4 f@@43 h0@@26 bx0@@37 bx1@@26 bx2@@15 bx3@@4 bx4@@4 bx5@@4 bx6@@4 bx7@@4) ($Box o@@65))))) (= (MapType1Select h0@@26 o@@65 fld@@25) (MapType1Select h1@@26 o@@65 fld@@25)))) :qid |unknown.0:0| :skolemid |724| :no-pattern (type o@@65) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires8 t0@@65 t1@@44 t2@@28 t3@@16 t4@@4 t5@@4 t6@@4 t7@@4 t8@@4 f@@43 h0@@26 bx0@@37 bx1@@26 bx2@@15 bx3@@4 bx4@@4 bx5@@4 bx6@@4 bx7@@4) (Requires8 t0@@65 t1@@44 t2@@28 t3@@16 t4@@4 t5@@4 t6@@4 t7@@4 t8@@4 f@@43 h1@@26 bx0@@37 bx1@@26 bx2@@15 bx3@@4 bx4@@4 bx5@@4 bx6@@4 bx7@@4)) (=> (Requires8 t0@@65 t1@@44 t2@@28 t3@@16 t4@@4 t5@@4 t6@@4 t7@@4 t8@@4 f@@43 h1@@26 bx0@@37 bx1@@26 bx2@@15 bx3@@4 bx4@@4 bx5@@4 bx6@@4 bx7@@4) (Requires8 t0@@65 t1@@44 t2@@28 t3@@16 t4@@4 t5@@4 t6@@4 t7@@4 t8@@4 f@@43 h0@@26 bx0@@37 bx1@@26 bx2@@15 bx3@@4 bx4@@4 bx5@@4 bx6@@4 bx7@@4)))) :qid |unknown.0:0| :skolemid |725| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires8 t0@@65 t1@@44 t2@@28 t3@@16 t4@@4 t5@@4 t6@@4 t7@@4 t8@@4 f@@43 h1@@26 bx0@@37 bx1@@26 bx2@@15 bx3@@4 bx4@@4 bx5@@4 bx6@@4 bx7@@4)) )))
(assert (forall ((t0@@66 T@U) (t1@@45 T@U) (t2@@29 T@U) (t3@@17 T@U) (t4@@5 T@U) (t5@@5 T@U) (t6@@5 T@U) (t7@@5 T@U) (t8@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@44 T@U) (bx0@@38 T@U) (bx1@@27 T@U) (bx2@@16 T@U) (bx3@@5 T@U) (bx4@@5 T@U) (bx5@@5 T@U) (bx6@@5 T@U) (bx7@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@45) TyType)) (= (type t2@@29) TyType)) (= (type t3@@17) TyType)) (= (type t4@@5) TyType)) (= (type t5@@5) TyType)) (= (type t6@@5) TyType)) (= (type t7@@5) TyType)) (= (type t8@@5) TyType)) (= (type h0@@27) (MapType1Type refType))) (= (type h1@@27) (MapType1Type refType))) (= (type f@@44) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@5) BoxType)) (= (type bx4@@5) BoxType)) (= (type bx5@@5) BoxType)) (= (type bx6@@5) BoxType)) (= (type bx7@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and (and (and (and (and ($IsBox bx0@@38 t0@@66) ($IsBox bx1@@27 t1@@45)) ($IsBox bx2@@16 t2@@29)) ($IsBox bx3@@5 t3@@17)) ($IsBox bx4@@5 t4@@5)) ($IsBox bx5@@5 t5@@5)) ($IsBox bx6@@5 t6@@5)) ($IsBox bx7@@5 t7@@5)) ($Is f@@44 (Tclass._System.___hFunc8 t0@@66 t1@@45 t2@@29 t3@@17 t4@@5 t5@@5 t6@@5 t7@@5 t8@@5)))) (forall ((o@@66 T@U) (fld@@26 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@26) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads8 t0@@66 t1@@45 t2@@29 t3@@17 t4@@5 t5@@5 t6@@5 t7@@5 t8@@5 f@@44 h1@@27 bx0@@38 bx1@@27 bx2@@16 bx3@@5 bx4@@5 bx5@@5 bx6@@5 bx7@@5) ($Box o@@66))))) (= (MapType1Select h0@@27 o@@66 fld@@26) (MapType1Select h1@@27 o@@66 fld@@26)))) :qid |unknown.0:0| :skolemid |726| :no-pattern (type o@@66) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires8 t0@@66 t1@@45 t2@@29 t3@@17 t4@@5 t5@@5 t6@@5 t7@@5 t8@@5 f@@44 h0@@27 bx0@@38 bx1@@27 bx2@@16 bx3@@5 bx4@@5 bx5@@5 bx6@@5 bx7@@5) (Requires8 t0@@66 t1@@45 t2@@29 t3@@17 t4@@5 t5@@5 t6@@5 t7@@5 t8@@5 f@@44 h1@@27 bx0@@38 bx1@@27 bx2@@16 bx3@@5 bx4@@5 bx5@@5 bx6@@5 bx7@@5)) (=> (Requires8 t0@@66 t1@@45 t2@@29 t3@@17 t4@@5 t5@@5 t6@@5 t7@@5 t8@@5 f@@44 h1@@27 bx0@@38 bx1@@27 bx2@@16 bx3@@5 bx4@@5 bx5@@5 bx6@@5 bx7@@5) (Requires8 t0@@66 t1@@45 t2@@29 t3@@17 t4@@5 t5@@5 t6@@5 t7@@5 t8@@5 f@@44 h0@@27 bx0@@38 bx1@@27 bx2@@16 bx3@@5 bx4@@5 bx5@@5 bx6@@5 bx7@@5)))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires8 t0@@66 t1@@45 t2@@29 t3@@17 t4@@5 t5@@5 t6@@5 t7@@5 t8@@5 f@@44 h1@@27 bx0@@38 bx1@@27 bx2@@16 bx3@@5 bx4@@5 bx5@@5 bx6@@5 bx7@@5)) )))
(assert (forall ((t0@@67 T@U) (t1@@46 T@U) (t2@@30 T@U) (t3@@18 T@U) (t4@@6 T@U) (t5@@6 T@U) (t6@@6 T@U) (t7@@6 T@U) (t8@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@45 T@U) (bx0@@39 T@U) (bx1@@28 T@U) (bx2@@17 T@U) (bx3@@6 T@U) (bx4@@6 T@U) (bx5@@6 T@U) (bx6@@6 T@U) (bx7@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@46) TyType)) (= (type t2@@30) TyType)) (= (type t3@@18) TyType)) (= (type t4@@6) TyType)) (= (type t5@@6) TyType)) (= (type t6@@6) TyType)) (= (type t7@@6) TyType)) (= (type t8@@6) TyType)) (= (type h0@@28) (MapType1Type refType))) (= (type h1@@28) (MapType1Type refType))) (= (type f@@45) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@6) BoxType)) (= (type bx4@@6) BoxType)) (= (type bx5@@6) BoxType)) (= (type bx6@@6) BoxType)) (= (type bx7@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and (and (and (and (and ($IsBox bx0@@39 t0@@67) ($IsBox bx1@@28 t1@@46)) ($IsBox bx2@@17 t2@@30)) ($IsBox bx3@@6 t3@@18)) ($IsBox bx4@@6 t4@@6)) ($IsBox bx5@@6 t5@@6)) ($IsBox bx6@@6 t6@@6)) ($IsBox bx7@@6 t7@@6)) ($Is f@@45 (Tclass._System.___hFunc8 t0@@67 t1@@46 t2@@30 t3@@18 t4@@6 t5@@6 t6@@6 t7@@6 t8@@6)))) (forall ((o@@67 T@U) (fld@@27 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@27) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads8 t0@@67 t1@@46 t2@@30 t3@@18 t4@@6 t5@@6 t6@@6 t7@@6 t8@@6 f@@45 h0@@28 bx0@@39 bx1@@28 bx2@@17 bx3@@6 bx4@@6 bx5@@6 bx6@@6 bx7@@6) ($Box o@@67))))) (= (MapType1Select h0@@28 o@@67 fld@@27) (MapType1Select h1@@28 o@@67 fld@@27)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@67) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply8 t0@@67 t1@@46 t2@@30 t3@@18 t4@@6 t5@@6 t6@@6 t7@@6 t8@@6 f@@45 h0@@28 bx0@@39 bx1@@28 bx2@@17 bx3@@6 bx4@@6 bx5@@6 bx6@@6 bx7@@6) (Apply8 t0@@67 t1@@46 t2@@30 t3@@18 t4@@6 t5@@6 t6@@6 t7@@6 t8@@6 f@@45 h1@@28 bx0@@39 bx1@@28 bx2@@17 bx3@@6 bx4@@6 bx5@@6 bx6@@6 bx7@@6))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply8 t0@@67 t1@@46 t2@@30 t3@@18 t4@@6 t5@@6 t6@@6 t7@@6 t8@@6 f@@45 h1@@28 bx0@@39 bx1@@28 bx2@@17 bx3@@6 bx4@@6 bx5@@6 bx6@@6 bx7@@6)) )))
(assert (forall ((t0@@68 T@U) (t1@@47 T@U) (t2@@31 T@U) (t3@@19 T@U) (t4@@7 T@U) (t5@@7 T@U) (t6@@7 T@U) (t7@@7 T@U) (t8@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@46 T@U) (bx0@@40 T@U) (bx1@@29 T@U) (bx2@@18 T@U) (bx3@@7 T@U) (bx4@@7 T@U) (bx5@@7 T@U) (bx6@@7 T@U) (bx7@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@47) TyType)) (= (type t2@@31) TyType)) (= (type t3@@19) TyType)) (= (type t4@@7) TyType)) (= (type t5@@7) TyType)) (= (type t6@@7) TyType)) (= (type t7@@7) TyType)) (= (type t8@@7) TyType)) (= (type h0@@29) (MapType1Type refType))) (= (type h1@@29) (MapType1Type refType))) (= (type f@@46) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@7) BoxType)) (= (type bx4@@7) BoxType)) (= (type bx5@@7) BoxType)) (= (type bx6@@7) BoxType)) (= (type bx7@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and (and (and (and (and ($IsBox bx0@@40 t0@@68) ($IsBox bx1@@29 t1@@47)) ($IsBox bx2@@18 t2@@31)) ($IsBox bx3@@7 t3@@19)) ($IsBox bx4@@7 t4@@7)) ($IsBox bx5@@7 t5@@7)) ($IsBox bx6@@7 t6@@7)) ($IsBox bx7@@7 t7@@7)) ($Is f@@46 (Tclass._System.___hFunc8 t0@@68 t1@@47 t2@@31 t3@@19 t4@@7 t5@@7 t6@@7 t7@@7 t8@@7)))) (forall ((o@@68 T@U) (fld@@28 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@28) (FieldType a@@106))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads8 t0@@68 t1@@47 t2@@31 t3@@19 t4@@7 t5@@7 t6@@7 t7@@7 t8@@7 f@@46 h1@@29 bx0@@40 bx1@@29 bx2@@18 bx3@@7 bx4@@7 bx5@@7 bx6@@7 bx7@@7) ($Box o@@68))))) (= (MapType1Select h0@@29 o@@68 fld@@28) (MapType1Select h1@@29 o@@68 fld@@28)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@68) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply8 t0@@68 t1@@47 t2@@31 t3@@19 t4@@7 t5@@7 t6@@7 t7@@7 t8@@7 f@@46 h0@@29 bx0@@40 bx1@@29 bx2@@18 bx3@@7 bx4@@7 bx5@@7 bx6@@7 bx7@@7) (Apply8 t0@@68 t1@@47 t2@@31 t3@@19 t4@@7 t5@@7 t6@@7 t7@@7 t8@@7 f@@46 h1@@29 bx0@@40 bx1@@29 bx2@@18 bx3@@7 bx4@@7 bx5@@7 bx6@@7 bx7@@7))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply8 t0@@68 t1@@47 t2@@31 t3@@19 t4@@7 t5@@7 t6@@7 t7@@7 t8@@7 f@@46 h1@@29 bx0@@40 bx1@@29 bx2@@18 bx3@@7 bx4@@7 bx5@@7 bx6@@7 bx7@@7)) )))
(assert (forall ((f@@47 T@U) (t0@@69 T@U) (t1@@48 T@U) (t2@@32 T@U) (t3@@20 T@U) (t4@@8 T@U) (t5@@8 T@U) (t6@@8 T@U) (t7@@8 T@U) (t8@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@47) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@48) TyType)) (= (type t2@@32) TyType)) (= (type t3@@20) TyType)) (= (type t4@@8) TyType)) (= (type t5@@8) TyType)) (= (type t6@@8) TyType)) (= (type t7@@8) TyType)) (= (type t8@@8) TyType)) (and (=> ($Is f@@47 (Tclass._System.___hFunc8 t0@@69 t1@@48 t2@@32 t3@@20 t4@@8 t5@@8 t6@@8 t7@@8 t8@@8)) (forall ((h@@46 T@U) (bx0@@41 T@U) (bx1@@30 T@U) (bx2@@19 T@U) (bx3@@8 T@U) (bx4@@8 T@U) (bx5@@8 T@U) (bx6@@8 T@U) (bx7@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type h@@46) (MapType1Type refType)) (= (type bx0@@41) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@8) BoxType)) (= (type bx4@@8) BoxType)) (= (type bx5@@8) BoxType)) (= (type bx6@@8) BoxType)) (= (type bx7@@8) BoxType)) (and (and ($IsGoodHeap h@@46) (and (and (and (and (and (and (and ($IsBox bx0@@41 t0@@69) ($IsBox bx1@@30 t1@@48)) ($IsBox bx2@@19 t2@@32)) ($IsBox bx3@@8 t3@@20)) ($IsBox bx4@@8 t4@@8)) ($IsBox bx5@@8 t5@@8)) ($IsBox bx6@@8 t6@@8)) ($IsBox bx7@@8 t7@@8))) (Requires8 t0@@69 t1@@48 t2@@32 t3@@20 t4@@8 t5@@8 t6@@8 t7@@8 t8@@8 f@@47 h@@46 bx0@@41 bx1@@30 bx2@@19 bx3@@8 bx4@@8 bx5@@8 bx6@@8 bx7@@8))) ($IsBox (Apply8 t0@@69 t1@@48 t2@@32 t3@@20 t4@@8 t5@@8 t6@@8 t7@@8 t8@@8 f@@47 h@@46 bx0@@41 bx1@@30 bx2@@19 bx3@@8 bx4@@8 bx5@@8 bx6@@8 bx7@@8) t8@@8)) :qid |DafnyPre.405:12| :skolemid |732| :pattern ( (Apply8 t0@@69 t1@@48 t2@@32 t3@@20 t4@@8 t5@@8 t6@@8 t7@@8 t8@@8 f@@47 h@@46 bx0@@41 bx1@@30 bx2@@19 bx3@@8 bx4@@8 bx5@@8 bx6@@8 bx7@@8)) ))) (=> (forall ((h@@47 T@U) (bx0@@42 T@U) (bx1@@31 T@U) (bx2@@20 T@U) (bx3@@9 T@U) (bx4@@9 T@U) (bx5@@9 T@U) (bx6@@9 T@U) (bx7@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type h@@47) (MapType1Type refType)) (= (type bx0@@42) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@9) BoxType)) (= (type bx4@@9) BoxType)) (= (type bx5@@9) BoxType)) (= (type bx6@@9) BoxType)) (= (type bx7@@9) BoxType)) (and (and ($IsGoodHeap h@@47) (and (and (and (and (and (and (and ($IsBox bx0@@42 t0@@69) ($IsBox bx1@@31 t1@@48)) ($IsBox bx2@@20 t2@@32)) ($IsBox bx3@@9 t3@@20)) ($IsBox bx4@@9 t4@@8)) ($IsBox bx5@@9 t5@@8)) ($IsBox bx6@@9 t6@@8)) ($IsBox bx7@@9 t7@@8))) (Requires8 t0@@69 t1@@48 t2@@32 t3@@20 t4@@8 t5@@8 t6@@8 t7@@8 t8@@8 f@@47 h@@47 bx0@@42 bx1@@31 bx2@@20 bx3@@9 bx4@@9 bx5@@9 bx6@@9 bx7@@9))) ($IsBox (Apply8 t0@@69 t1@@48 t2@@32 t3@@20 t4@@8 t5@@8 t6@@8 t7@@8 t8@@8 f@@47 h@@47 bx0@@42 bx1@@31 bx2@@20 bx3@@9 bx4@@9 bx5@@9 bx6@@9 bx7@@9) t8@@8)) :qid |DafnyPre.405:12| :skolemid |732| :pattern ( (Apply8 t0@@69 t1@@48 t2@@32 t3@@20 t4@@8 t5@@8 t6@@8 t7@@8 t8@@8 f@@47 h@@47 bx0@@42 bx1@@31 bx2@@20 bx3@@9 bx4@@9 bx5@@9 bx6@@9 bx7@@9)) )) ($Is f@@47 (Tclass._System.___hFunc8 t0@@69 t1@@48 t2@@32 t3@@20 t4@@8 t5@@8 t6@@8 t7@@8 t8@@8))))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($Is f@@47 (Tclass._System.___hFunc8 t0@@69 t1@@48 t2@@32 t3@@20 t4@@8 t5@@8 t6@@8 t7@@8 t8@@8))) )))
(assert (forall ((f@@48 T@U) (t0@@70 T@U) (t1@@49 T@U) (t2@@33 T@U) (t3@@21 T@U) (t4@@9 T@U) (t5@@9 T@U) (t6@@9 T@U) (t7@@9 T@U) (t8@@9 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) (u5 T@U) (u6 T@U) (u7 T@U) (u8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@48) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@49) TyType)) (= (type t2@@33) TyType)) (= (type t3@@21) TyType)) (= (type t4@@9) TyType)) (= (type t5@@9) TyType)) (= (type t6@@9) TyType)) (= (type t7@@9) TyType)) (= (type t8@@9) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (= (type u5) TyType)) (= (type u6) TyType)) (= (type u7) TyType)) (= (type u8) TyType)) (and (and (and (and (and (and (and (and (and ($Is f@@48 (Tclass._System.___hFunc8 t0@@70 t1@@49 t2@@33 t3@@21 t4@@9 t5@@9 t6@@9 t7@@9 t8@@9)) (forall ((bx@@57 T@U) ) (!  (=> (and (= (type bx@@57) BoxType) ($IsBox bx@@57 u0@@3)) ($IsBox bx@@57 t0@@70)) :qid |unknown.0:0| :skolemid |734| :pattern ( ($IsBox bx@@57 u0@@3)) :pattern ( ($IsBox bx@@57 t0@@70)) ))) (forall ((bx@@58 T@U) ) (!  (=> (and (= (type bx@@58) BoxType) ($IsBox bx@@58 u1@@2)) ($IsBox bx@@58 t1@@49)) :qid |unknown.0:0| :skolemid |735| :pattern ( ($IsBox bx@@58 u1@@2)) :pattern ( ($IsBox bx@@58 t1@@49)) ))) (forall ((bx@@59 T@U) ) (!  (=> (and (= (type bx@@59) BoxType) ($IsBox bx@@59 u2@@1)) ($IsBox bx@@59 t2@@33)) :qid |unknown.0:0| :skolemid |736| :pattern ( ($IsBox bx@@59 u2@@1)) :pattern ( ($IsBox bx@@59 t2@@33)) ))) (forall ((bx@@60 T@U) ) (!  (=> (and (= (type bx@@60) BoxType) ($IsBox bx@@60 u3@@0)) ($IsBox bx@@60 t3@@21)) :qid |unknown.0:0| :skolemid |737| :pattern ( ($IsBox bx@@60 u3@@0)) :pattern ( ($IsBox bx@@60 t3@@21)) ))) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u4)) ($IsBox bx@@61 t4@@9)) :qid |unknown.0:0| :skolemid |738| :pattern ( ($IsBox bx@@61 u4)) :pattern ( ($IsBox bx@@61 t4@@9)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u5)) ($IsBox bx@@62 t5@@9)) :qid |unknown.0:0| :skolemid |739| :pattern ( ($IsBox bx@@62 u5)) :pattern ( ($IsBox bx@@62 t5@@9)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u6)) ($IsBox bx@@63 t6@@9)) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@63 u6)) :pattern ( ($IsBox bx@@63 t6@@9)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 u7)) ($IsBox bx@@64 t7@@9)) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@64 u7)) :pattern ( ($IsBox bx@@64 t7@@9)) ))) (forall ((bx@@65 T@U) ) (!  (=> (and (= (type bx@@65) BoxType) ($IsBox bx@@65 t8@@9)) ($IsBox bx@@65 u8)) :qid |unknown.0:0| :skolemid |742| :pattern ( ($IsBox bx@@65 t8@@9)) :pattern ( ($IsBox bx@@65 u8)) )))) ($Is f@@48 (Tclass._System.___hFunc8 u0@@3 u1@@2 u2@@1 u3@@0 u4 u5 u6 u7 u8))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($Is f@@48 (Tclass._System.___hFunc8 t0@@70 t1@@49 t2@@33 t3@@21 t4@@9 t5@@9 t6@@9 t7@@9 t8@@9)) ($Is f@@48 (Tclass._System.___hFunc8 u0@@3 u1@@2 u2@@1 u3@@0 u4 u5 u6 u7 u8))) )))
(assert (forall ((f@@49 T@U) (t0@@71 T@U) (t1@@50 T@U) (t2@@34 T@U) (t3@@22 T@U) (t4@@10 T@U) (t5@@10 T@U) (t6@@10 T@U) (t7@@10 T@U) (t8@@10 T@U) (h@@48 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@50) TyType)) (= (type t2@@34) TyType)) (= (type t3@@22) TyType)) (= (type t4@@10) TyType)) (= (type t5@@10) TyType)) (= (type t6@@10) TyType)) (= (type t7@@10) TyType)) (= (type t8@@10) TyType)) (= (type h@@48) (MapType1Type refType))) ($IsGoodHeap h@@48)) ($IsAlloc f@@49 (Tclass._System.___hFunc8 t0@@71 t1@@50 t2@@34 t3@@22 t4@@10 t5@@10 t6@@10 t7@@10 t8@@10) h@@48)) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsAlloc f@@49 (Tclass._System.___hFunc8 t0@@71 t1@@50 t2@@34 t3@@22 t4@@10 t5@@10 t6@@10 t7@@10 t8@@10) h@@48)) )))
(assert (forall ((arg0@@171 T@U) (arg1@@94 T@U) (arg2@@59 T@U) (arg3@@39 T@U) (arg4@@30 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@171 arg1@@94 arg2@@59 arg3@@39 arg4@@30)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@171 arg1@@94 arg2@@59 arg3@@39 arg4@@30)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@25| T@U) (|#$T2@@21| T@U) (|#$T3@@16| T@U) (|#$T4@@10| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$T4@@10|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@28| |#$T1@@25| |#$T2@@21| |#$T3@@16| |#$T4@@10|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |746| :pattern ( (Tclass._System.___hFunc4 |#$T0@@28| |#$T1@@25| |#$T2@@21| |#$T3@@16| |#$T4@@10|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@172)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@26| T@U) (|#$T2@@22| T@U) (|#$T3@@17| T@U) (|#$T4@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$T4@@11|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@29| |#$T1@@26| |#$T2@@22| |#$T3@@17| |#$T4@@11|)) |#$T0@@29|)) :qid |unknown.0:0| :skolemid |747| :pattern ( (Tclass._System.___hFunc4 |#$T0@@29| |#$T1@@26| |#$T2@@22| |#$T3@@17| |#$T4@@11|)) )))
(assert (forall ((arg0@@173 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@173)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@173)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@27| T@U) (|#$T2@@23| T@U) (|#$T3@@18| T@U) (|#$T4@@12| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$T4@@12|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@30| |#$T1@@27| |#$T2@@23| |#$T3@@18| |#$T4@@12|)) |#$T1@@27|)) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hFunc4 |#$T0@@30| |#$T1@@27| |#$T2@@23| |#$T3@@18| |#$T4@@12|)) )))
(assert (forall ((arg0@@174 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@174)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@174)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@28| T@U) (|#$T2@@24| T@U) (|#$T3@@19| T@U) (|#$T4@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$T4@@13|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@31| |#$T1@@28| |#$T2@@24| |#$T3@@19| |#$T4@@13|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |749| :pattern ( (Tclass._System.___hFunc4 |#$T0@@31| |#$T1@@28| |#$T2@@24| |#$T3@@19| |#$T4@@13|)) )))
(assert (forall ((arg0@@175 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@175)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@175)) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@29| T@U) (|#$T2@@25| T@U) (|#$T3@@20| T@U) (|#$T4@@14| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$T4@@14|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@32| |#$T1@@29| |#$T2@@25| |#$T3@@20| |#$T4@@14|)) |#$T3@@20|)) :qid |unknown.0:0| :skolemid |750| :pattern ( (Tclass._System.___hFunc4 |#$T0@@32| |#$T1@@29| |#$T2@@25| |#$T3@@20| |#$T4@@14|)) )))
(assert (forall ((arg0@@176 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@176)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@176)) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@30| T@U) (|#$T2@@26| T@U) (|#$T3@@21| T@U) (|#$T4@@15| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$T4@@15|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@33| |#$T1@@30| |#$T2@@26| |#$T3@@21| |#$T4@@15|)) |#$T4@@15|)) :qid |unknown.0:0| :skolemid |751| :pattern ( (Tclass._System.___hFunc4 |#$T0@@33| |#$T1@@30| |#$T2@@26| |#$T3@@21| |#$T4@@15|)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@31| T@U) (|#$T2@@27| T@U) (|#$T3@@22| T@U) (|#$T4@@16| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$T4@@16|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@31| |#$T2@@27| |#$T3@@22| |#$T4@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@31| |#$T2@@27| |#$T3@@22| |#$T4@@16|)))) :qid |unknown.0:0| :skolemid |752| :pattern ( ($IsBox bx@@66 (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@31| |#$T2@@27| |#$T3@@22| |#$T4@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@177 T@T) (arg1@@95 T@T) (arg2@@60 T@T) (arg3@@40 T@T) (arg4@@31 T@T) (arg5@@20 T@T) ) (! (= (Ctor (MapType6Type arg0@@177 arg1@@95 arg2@@60 arg3@@40 arg4@@31 arg5@@20)) 24) :qid |ctor:MapType6Type| )) (forall ((arg0@@178 T@T) (arg1@@96 T@T) (arg2@@61 T@T) (arg3@@41 T@T) (arg4@@32 T@T) (arg5@@21 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@178 arg1@@96 arg2@@61 arg3@@41 arg4@@32 arg5@@21)) arg0@@178) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@178 arg1@@96 arg2@@61 arg3@@41 arg4@@32 arg5@@21)) ))) (forall ((arg0@@179 T@T) (arg1@@97 T@T) (arg2@@62 T@T) (arg3@@42 T@T) (arg4@@33 T@T) (arg5@@22 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@179 arg1@@97 arg2@@62 arg3@@42 arg4@@33 arg5@@22)) arg1@@97) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@179 arg1@@97 arg2@@62 arg3@@42 arg4@@33 arg5@@22)) ))) (forall ((arg0@@180 T@T) (arg1@@98 T@T) (arg2@@63 T@T) (arg3@@43 T@T) (arg4@@34 T@T) (arg5@@23 T@T) ) (! (= (MapType6TypeInv2 (MapType6Type arg0@@180 arg1@@98 arg2@@63 arg3@@43 arg4@@34 arg5@@23)) arg2@@63) :qid |typeInv:MapType6TypeInv2| :pattern ( (MapType6Type arg0@@180 arg1@@98 arg2@@63 arg3@@43 arg4@@34 arg5@@23)) ))) (forall ((arg0@@181 T@T) (arg1@@99 T@T) (arg2@@64 T@T) (arg3@@44 T@T) (arg4@@35 T@T) (arg5@@24 T@T) ) (! (= (MapType6TypeInv3 (MapType6Type arg0@@181 arg1@@99 arg2@@64 arg3@@44 arg4@@35 arg5@@24)) arg3@@44) :qid |typeInv:MapType6TypeInv3| :pattern ( (MapType6Type arg0@@181 arg1@@99 arg2@@64 arg3@@44 arg4@@35 arg5@@24)) ))) (forall ((arg0@@182 T@T) (arg1@@100 T@T) (arg2@@65 T@T) (arg3@@45 T@T) (arg4@@36 T@T) (arg5@@25 T@T) ) (! (= (MapType6TypeInv4 (MapType6Type arg0@@182 arg1@@100 arg2@@65 arg3@@45 arg4@@36 arg5@@25)) arg4@@36) :qid |typeInv:MapType6TypeInv4| :pattern ( (MapType6Type arg0@@182 arg1@@100 arg2@@65 arg3@@45 arg4@@36 arg5@@25)) ))) (forall ((arg0@@183 T@T) (arg1@@101 T@T) (arg2@@66 T@T) (arg3@@46 T@T) (arg4@@37 T@T) (arg5@@26 T@T) ) (! (= (MapType6TypeInv5 (MapType6Type arg0@@183 arg1@@101 arg2@@66 arg3@@46 arg4@@37 arg5@@26)) arg5@@26) :qid |typeInv:MapType6TypeInv5| :pattern ( (MapType6Type arg0@@183 arg1@@101 arg2@@66 arg3@@46 arg4@@37 arg5@@26)) ))) (forall ((arg0@@184 T@U) (arg1@@102 T@U) (arg2@@67 T@U) (arg3@@47 T@U) (arg4@@38 T@U) (arg5@@27 T@U) ) (! (let ((aVar5@@0 (MapType6TypeInv5 (type arg0@@184)))) (= (type (MapType6Select arg0@@184 arg1@@102 arg2@@67 arg3@@47 arg4@@38 arg5@@27)) aVar5@@0)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@184 arg1@@102 arg2@@67 arg3@@47 arg4@@38 arg5@@27)) ))) (forall ((arg0@@185 T@U) (arg1@@103 T@U) (arg2@@68 T@U) (arg3@@48 T@U) (arg4@@39 T@U) (arg5@@28 T@U) (arg6@@19 T@U) ) (! (let ((aVar5@@1 (type arg6@@19))) (let ((aVar4@@3 (type arg5@@28))) (let ((aVar3@@4 (type arg4@@39))) (let ((aVar2@@5 (type arg3@@48))) (let ((aVar1@@6 (type arg2@@68))) (let ((aVar0@@5 (type arg1@@103))) (= (type (MapType6Store arg0@@185 arg1@@103 arg2@@68 arg3@@48 arg4@@39 arg5@@28 arg6@@19)) (MapType6Type aVar0@@5 aVar1@@6 aVar2@@5 aVar3@@4 aVar4@@3 aVar5@@1)))))))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@185 arg1@@103 arg2@@68 arg3@@48 arg4@@39 arg5@@28 arg6@@19)) ))) (forall ((m@@53 T@U) (x0@@32 T@U) (x1@@29 T@U) (x2@@21 T@U) (x3@@16 T@U) (x4@@10 T@U) (val@@33 T@U) ) (! (let ((aVar5@@2 (MapType6TypeInv5 (type m@@53)))) (=> (= (type val@@33) aVar5@@2) (= (MapType6Select (MapType6Store m@@53 x0@@32 x1@@29 x2@@21 x3@@16 x4@@10 val@@33) x0@@32 x1@@29 x2@@21 x3@@16 x4@@10) val@@33))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@34 T@U) (m@@54 T@U) (x0@@33 T@U) (x1@@30 T@U) (x2@@22 T@U) (x3@@17 T@U) (x4@@11 T@U) (y0@@26 T@U) (y1@@24 T@U) (y2@@18 T@U) (y3@@14 T@U) (y4@@9 T@U) ) (!  (or (= x0@@33 y0@@26) (= (MapType6Select (MapType6Store m@@54 x0@@33 x1@@30 x2@@22 x3@@17 x4@@11 val@@34) y0@@26 y1@@24 y2@@18 y3@@14 y4@@9) (MapType6Select m@@54 y0@@26 y1@@24 y2@@18 y3@@14 y4@@9))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@35 T@U) (m@@55 T@U) (x0@@34 T@U) (x1@@31 T@U) (x2@@23 T@U) (x3@@18 T@U) (x4@@12 T@U) (y0@@27 T@U) (y1@@25 T@U) (y2@@19 T@U) (y3@@15 T@U) (y4@@10 T@U) ) (!  (or (= x1@@31 y1@@25) (= (MapType6Select (MapType6Store m@@55 x0@@34 x1@@31 x2@@23 x3@@18 x4@@12 val@@35) y0@@27 y1@@25 y2@@19 y3@@15 y4@@10) (MapType6Select m@@55 y0@@27 y1@@25 y2@@19 y3@@15 y4@@10))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@36 T@U) (m@@56 T@U) (x0@@35 T@U) (x1@@32 T@U) (x2@@24 T@U) (x3@@19 T@U) (x4@@13 T@U) (y0@@28 T@U) (y1@@26 T@U) (y2@@20 T@U) (y3@@16 T@U) (y4@@11 T@U) ) (!  (or (= x2@@24 y2@@20) (= (MapType6Select (MapType6Store m@@56 x0@@35 x1@@32 x2@@24 x3@@19 x4@@13 val@@36) y0@@28 y1@@26 y2@@20 y3@@16 y4@@11) (MapType6Select m@@56 y0@@28 y1@@26 y2@@20 y3@@16 y4@@11))) :qid |mapAx1:MapType6Select:2| :weight 0 ))) (forall ((val@@37 T@U) (m@@57 T@U) (x0@@36 T@U) (x1@@33 T@U) (x2@@25 T@U) (x3@@20 T@U) (x4@@14 T@U) (y0@@29 T@U) (y1@@27 T@U) (y2@@21 T@U) (y3@@17 T@U) (y4@@12 T@U) ) (!  (or (= x3@@20 y3@@17) (= (MapType6Select (MapType6Store m@@57 x0@@36 x1@@33 x2@@25 x3@@20 x4@@14 val@@37) y0@@29 y1@@27 y2@@21 y3@@17 y4@@12) (MapType6Select m@@57 y0@@29 y1@@27 y2@@21 y3@@17 y4@@12))) :qid |mapAx1:MapType6Select:3| :weight 0 ))) (forall ((val@@38 T@U) (m@@58 T@U) (x0@@37 T@U) (x1@@34 T@U) (x2@@26 T@U) (x3@@21 T@U) (x4@@15 T@U) (y0@@30 T@U) (y1@@28 T@U) (y2@@22 T@U) (y3@@18 T@U) (y4@@13 T@U) ) (!  (or (= x4@@15 y4@@13) (= (MapType6Select (MapType6Store m@@58 x0@@37 x1@@34 x2@@26 x3@@21 x4@@15 val@@38) y0@@30 y1@@28 y2@@22 y3@@18 y4@@13) (MapType6Select m@@58 y0@@30 y1@@28 y2@@22 y3@@18 y4@@13))) :qid |mapAx1:MapType6Select:4| :weight 0 ))) (forall ((val@@39 T@U) (m@@59 T@U) (x0@@38 T@U) (x1@@35 T@U) (x2@@27 T@U) (x3@@22 T@U) (x4@@16 T@U) (y0@@31 T@U) (y1@@29 T@U) (y2@@23 T@U) (y3@@19 T@U) (y4@@14 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@59 x0@@38 x1@@35 x2@@27 x3@@22 x4@@16 val@@39) y0@@31 y1@@29 y2@@23 y3@@19 y4@@14) (MapType6Select m@@59 y0@@31 y1@@29 y2@@23 y3@@19 y4@@14))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@186 T@U) (arg1@@104 T@U) (arg2@@69 T@U) (arg3@@49 T@U) (arg4@@40 T@U) (arg5@@29 T@U) (arg6@@20 T@U) (arg7@@17 T@U) (arg8@@17 T@U) (arg9@@14 T@U) (arg10@@2 T@U) ) (! (= (type (Apply4 arg0@@186 arg1@@104 arg2@@69 arg3@@49 arg4@@40 arg5@@29 arg6@@20 arg7@@17 arg8@@17 arg9@@14 arg10@@2)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@186 arg1@@104 arg2@@69 arg3@@49 arg4@@40 arg5@@29 arg6@@20 arg7@@17 arg8@@17 arg9@@14 arg10@@2)) ))) (forall ((arg0@@187 T@U) (arg1@@105 T@U) (arg2@@70 T@U) ) (! (= (type (Handle4 arg0@@187 arg1@@105 arg2@@70)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@187 arg1@@105 arg2@@70)) ))))
(assert (forall ((t0@@72 T@U) (t1@@51 T@U) (t2@@35 T@U) (t3@@23 T@U) (t4@@11 T@U) (heap@@14 T@U) (h@@49 T@U) (r@@20 T@U) (rd@@14 T@U) (bx0@@43 T@U) (bx1@@32 T@U) (bx2@@21 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@51) TyType)) (= (type t2@@35) TyType)) (= (type t3@@23) TyType)) (= (type t4@@11) TyType)) (= (type heap@@14) (MapType1Type refType))) (= (type h@@49) (MapType6Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType6Type (MapType1Type refType) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@14) (MapType6Type (MapType1Type refType) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@10) BoxType)) (= (Apply4 t0@@72 t1@@51 t2@@35 t3@@23 t4@@11 (Handle4 h@@49 r@@20 rd@@14) heap@@14 bx0@@43 bx1@@32 bx2@@21 bx3@@10) (MapType6Select h@@49 heap@@14 bx0@@43 bx1@@32 bx2@@21 bx3@@10))) :qid |unknown.0:0| :skolemid |753| :pattern ( (Apply4 t0@@72 t1@@51 t2@@35 t3@@23 t4@@11 (Handle4 h@@49 r@@20 rd@@14) heap@@14 bx0@@43 bx1@@32 bx2@@21 bx3@@10)) )))
(assert (forall ((t0@@73 T@U) (t1@@52 T@U) (t2@@36 T@U) (t3@@24 T@U) (t4@@12 T@U) (heap@@15 T@U) (h@@50 T@U) (r@@21 T@U) (rd@@15 T@U) (bx0@@44 T@U) (bx1@@33 T@U) (bx2@@22 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@52) TyType)) (= (type t2@@36) TyType)) (= (type t3@@24) TyType)) (= (type t4@@12) TyType)) (= (type heap@@15) (MapType1Type refType))) (= (type h@@50) (MapType6Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType6Type (MapType1Type refType) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@15) (MapType6Type (MapType1Type refType) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@44) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@11) BoxType)) (U_2_bool (MapType6Select r@@21 heap@@15 bx0@@44 bx1@@33 bx2@@22 bx3@@11))) (Requires4 t0@@73 t1@@52 t2@@36 t3@@24 t4@@12 (Handle4 h@@50 r@@21 rd@@15) heap@@15 bx0@@44 bx1@@33 bx2@@22 bx3@@11)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Requires4 t0@@73 t1@@52 t2@@36 t3@@24 t4@@12 (Handle4 h@@50 r@@21 rd@@15) heap@@15 bx0@@44 bx1@@33 bx2@@22 bx3@@11)) )))
(assert (forall ((arg0@@188 T@U) (arg1@@106 T@U) (arg2@@71 T@U) (arg3@@50 T@U) (arg4@@41 T@U) (arg5@@30 T@U) (arg6@@21 T@U) (arg7@@18 T@U) (arg8@@18 T@U) (arg9@@15 T@U) (arg10@@3 T@U) ) (! (= (type (Reads4 arg0@@188 arg1@@106 arg2@@71 arg3@@50 arg4@@41 arg5@@30 arg6@@21 arg7@@18 arg8@@18 arg9@@15 arg10@@3)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@188 arg1@@106 arg2@@71 arg3@@50 arg4@@41 arg5@@30 arg6@@21 arg7@@18 arg8@@18 arg9@@15 arg10@@3)) )))
(assert (forall ((t0@@74 T@U) (t1@@53 T@U) (t2@@37 T@U) (t3@@25 T@U) (t4@@13 T@U) (heap@@16 T@U) (h@@51 T@U) (r@@22 T@U) (rd@@16 T@U) (bx0@@45 T@U) (bx1@@34 T@U) (bx2@@23 T@U) (bx3@@12 T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@53) TyType)) (= (type t2@@37) TyType)) (= (type t3@@25) TyType)) (= (type t4@@13) TyType)) (= (type heap@@16) (MapType1Type refType))) (= (type h@@51) (MapType6Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType6Type (MapType1Type refType) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@16) (MapType6Type (MapType1Type refType) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@45) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@12) BoxType)) (= (type bx@@67) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@53 t2@@37 t3@@25 t4@@13 (Handle4 h@@51 r@@22 rd@@16) heap@@16 bx0@@45 bx1@@34 bx2@@23 bx3@@12) bx@@67)) (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@16 bx0@@45 bx1@@34 bx2@@23 bx3@@12) bx@@67))) (=> (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@16 bx0@@45 bx1@@34 bx2@@23 bx3@@12) bx@@67)) (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@53 t2@@37 t3@@25 t4@@13 (Handle4 h@@51 r@@22 rd@@16) heap@@16 bx0@@45 bx1@@34 bx2@@23 bx3@@12) bx@@67))))) :qid |unknown.0:0| :skolemid |755| :pattern ( (MapType0Select (Reads4 t0@@74 t1@@53 t2@@37 t3@@25 t4@@13 (Handle4 h@@51 r@@22 rd@@16) heap@@16 bx0@@45 bx1@@34 bx2@@23 bx3@@12) bx@@67)) )))
(assert (forall ((t0@@75 T@U) (t1@@54 T@U) (t2@@38 T@U) (t3@@26 T@U) (t4@@14 T@U) (h0@@30 T@U) (h1@@30 T@U) (f@@50 T@U) (bx0@@46 T@U) (bx1@@35 T@U) (bx2@@24 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@54) TyType)) (= (type t2@@38) TyType)) (= (type t3@@26) TyType)) (= (type t4@@14) TyType)) (= (type h0@@30) (MapType1Type refType))) (= (type h1@@30) (MapType1Type refType))) (= (type f@@50) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@13) BoxType)) (and (and (and ($HeapSucc h0@@30 h1@@30) (and ($IsGoodHeap h0@@30) ($IsGoodHeap h1@@30))) (and (and (and (and ($IsBox bx0@@46 t0@@75) ($IsBox bx1@@35 t1@@54)) ($IsBox bx2@@24 t2@@38)) ($IsBox bx3@@13 t3@@26)) ($Is f@@50 (Tclass._System.___hFunc4 t0@@75 t1@@54 t2@@38 t3@@26 t4@@14)))) (forall ((o@@69 T@U) (fld@@29 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@29)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@29) (FieldType a@@107))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads4 t0@@75 t1@@54 t2@@38 t3@@26 t4@@14 f@@50 h0@@30 bx0@@46 bx1@@35 bx2@@24 bx3@@13) ($Box o@@69))))) (= (MapType1Select h0@@30 o@@69 fld@@29) (MapType1Select h1@@30 o@@69 fld@@29)))) :qid |unknown.0:0| :skolemid |756| :no-pattern (type o@@69) :no-pattern (type fld@@29) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@29) :no-pattern (U_2_bool fld@@29) )))) (= (Reads4 t0@@75 t1@@54 t2@@38 t3@@26 t4@@14 f@@50 h0@@30 bx0@@46 bx1@@35 bx2@@24 bx3@@13) (Reads4 t0@@75 t1@@54 t2@@38 t3@@26 t4@@14 f@@50 h1@@30 bx0@@46 bx1@@35 bx2@@24 bx3@@13))) :qid |unknown.0:0| :skolemid |757| :pattern ( ($HeapSucc h0@@30 h1@@30) (Reads4 t0@@75 t1@@54 t2@@38 t3@@26 t4@@14 f@@50 h1@@30 bx0@@46 bx1@@35 bx2@@24 bx3@@13)) )))
(assert (forall ((t0@@76 T@U) (t1@@55 T@U) (t2@@39 T@U) (t3@@27 T@U) (t4@@15 T@U) (h0@@31 T@U) (h1@@31 T@U) (f@@51 T@U) (bx0@@47 T@U) (bx1@@36 T@U) (bx2@@25 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@55) TyType)) (= (type t2@@39) TyType)) (= (type t3@@27) TyType)) (= (type t4@@15) TyType)) (= (type h0@@31) (MapType1Type refType))) (= (type h1@@31) (MapType1Type refType))) (= (type f@@51) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@14) BoxType)) (and (and (and ($HeapSucc h0@@31 h1@@31) (and ($IsGoodHeap h0@@31) ($IsGoodHeap h1@@31))) (and (and (and (and ($IsBox bx0@@47 t0@@76) ($IsBox bx1@@36 t1@@55)) ($IsBox bx2@@25 t2@@39)) ($IsBox bx3@@14 t3@@27)) ($Is f@@51 (Tclass._System.___hFunc4 t0@@76 t1@@55 t2@@39 t3@@27 t4@@15)))) (forall ((o@@70 T@U) (fld@@30 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@30)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@30) (FieldType a@@108))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads4 t0@@76 t1@@55 t2@@39 t3@@27 t4@@15 f@@51 h1@@31 bx0@@47 bx1@@36 bx2@@25 bx3@@14) ($Box o@@70))))) (= (MapType1Select h0@@31 o@@70 fld@@30) (MapType1Select h1@@31 o@@70 fld@@30)))) :qid |unknown.0:0| :skolemid |758| :no-pattern (type o@@70) :no-pattern (type fld@@30) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@30) :no-pattern (U_2_bool fld@@30) )))) (= (Reads4 t0@@76 t1@@55 t2@@39 t3@@27 t4@@15 f@@51 h0@@31 bx0@@47 bx1@@36 bx2@@25 bx3@@14) (Reads4 t0@@76 t1@@55 t2@@39 t3@@27 t4@@15 f@@51 h1@@31 bx0@@47 bx1@@36 bx2@@25 bx3@@14))) :qid |unknown.0:0| :skolemid |759| :pattern ( ($HeapSucc h0@@31 h1@@31) (Reads4 t0@@76 t1@@55 t2@@39 t3@@27 t4@@15 f@@51 h1@@31 bx0@@47 bx1@@36 bx2@@25 bx3@@14)) )))
(assert (forall ((t0@@77 T@U) (t1@@56 T@U) (t2@@40 T@U) (t3@@28 T@U) (t4@@16 T@U) (h0@@32 T@U) (h1@@32 T@U) (f@@52 T@U) (bx0@@48 T@U) (bx1@@37 T@U) (bx2@@26 T@U) (bx3@@15 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@56) TyType)) (= (type t2@@40) TyType)) (= (type t3@@28) TyType)) (= (type t4@@16) TyType)) (= (type h0@@32) (MapType1Type refType))) (= (type h1@@32) (MapType1Type refType))) (= (type f@@52) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@15) BoxType)) (and (and (and ($HeapSucc h0@@32 h1@@32) (and ($IsGoodHeap h0@@32) ($IsGoodHeap h1@@32))) (and (and (and (and ($IsBox bx0@@48 t0@@77) ($IsBox bx1@@37 t1@@56)) ($IsBox bx2@@26 t2@@40)) ($IsBox bx3@@15 t3@@28)) ($Is f@@52 (Tclass._System.___hFunc4 t0@@77 t1@@56 t2@@40 t3@@28 t4@@16)))) (forall ((o@@71 T@U) (fld@@31 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@31)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@31) (FieldType a@@109))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads4 t0@@77 t1@@56 t2@@40 t3@@28 t4@@16 f@@52 h0@@32 bx0@@48 bx1@@37 bx2@@26 bx3@@15) ($Box o@@71))))) (= (MapType1Select h0@@32 o@@71 fld@@31) (MapType1Select h1@@32 o@@71 fld@@31)))) :qid |unknown.0:0| :skolemid |760| :no-pattern (type o@@71) :no-pattern (type fld@@31) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@31) :no-pattern (U_2_bool fld@@31) )))) (and (=> (Requires4 t0@@77 t1@@56 t2@@40 t3@@28 t4@@16 f@@52 h0@@32 bx0@@48 bx1@@37 bx2@@26 bx3@@15) (Requires4 t0@@77 t1@@56 t2@@40 t3@@28 t4@@16 f@@52 h1@@32 bx0@@48 bx1@@37 bx2@@26 bx3@@15)) (=> (Requires4 t0@@77 t1@@56 t2@@40 t3@@28 t4@@16 f@@52 h1@@32 bx0@@48 bx1@@37 bx2@@26 bx3@@15) (Requires4 t0@@77 t1@@56 t2@@40 t3@@28 t4@@16 f@@52 h0@@32 bx0@@48 bx1@@37 bx2@@26 bx3@@15)))) :qid |unknown.0:0| :skolemid |761| :pattern ( ($HeapSucc h0@@32 h1@@32) (Requires4 t0@@77 t1@@56 t2@@40 t3@@28 t4@@16 f@@52 h1@@32 bx0@@48 bx1@@37 bx2@@26 bx3@@15)) )))
(assert (forall ((t0@@78 T@U) (t1@@57 T@U) (t2@@41 T@U) (t3@@29 T@U) (t4@@17 T@U) (h0@@33 T@U) (h1@@33 T@U) (f@@53 T@U) (bx0@@49 T@U) (bx1@@38 T@U) (bx2@@27 T@U) (bx3@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@57) TyType)) (= (type t2@@41) TyType)) (= (type t3@@29) TyType)) (= (type t4@@17) TyType)) (= (type h0@@33) (MapType1Type refType))) (= (type h1@@33) (MapType1Type refType))) (= (type f@@53) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@16) BoxType)) (and (and (and ($HeapSucc h0@@33 h1@@33) (and ($IsGoodHeap h0@@33) ($IsGoodHeap h1@@33))) (and (and (and (and ($IsBox bx0@@49 t0@@78) ($IsBox bx1@@38 t1@@57)) ($IsBox bx2@@27 t2@@41)) ($IsBox bx3@@16 t3@@29)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@78 t1@@57 t2@@41 t3@@29 t4@@17)))) (forall ((o@@72 T@U) (fld@@32 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@32)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@32) (FieldType a@@110))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@57 t2@@41 t3@@29 t4@@17 f@@53 h1@@33 bx0@@49 bx1@@38 bx2@@27 bx3@@16) ($Box o@@72))))) (= (MapType1Select h0@@33 o@@72 fld@@32) (MapType1Select h1@@33 o@@72 fld@@32)))) :qid |unknown.0:0| :skolemid |762| :no-pattern (type o@@72) :no-pattern (type fld@@32) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@32) :no-pattern (U_2_bool fld@@32) )))) (and (=> (Requires4 t0@@78 t1@@57 t2@@41 t3@@29 t4@@17 f@@53 h0@@33 bx0@@49 bx1@@38 bx2@@27 bx3@@16) (Requires4 t0@@78 t1@@57 t2@@41 t3@@29 t4@@17 f@@53 h1@@33 bx0@@49 bx1@@38 bx2@@27 bx3@@16)) (=> (Requires4 t0@@78 t1@@57 t2@@41 t3@@29 t4@@17 f@@53 h1@@33 bx0@@49 bx1@@38 bx2@@27 bx3@@16) (Requires4 t0@@78 t1@@57 t2@@41 t3@@29 t4@@17 f@@53 h0@@33 bx0@@49 bx1@@38 bx2@@27 bx3@@16)))) :qid |unknown.0:0| :skolemid |763| :pattern ( ($HeapSucc h0@@33 h1@@33) (Requires4 t0@@78 t1@@57 t2@@41 t3@@29 t4@@17 f@@53 h1@@33 bx0@@49 bx1@@38 bx2@@27 bx3@@16)) )))
(assert (forall ((t0@@79 T@U) (t1@@58 T@U) (t2@@42 T@U) (t3@@30 T@U) (t4@@18 T@U) (h0@@34 T@U) (h1@@34 T@U) (f@@54 T@U) (bx0@@50 T@U) (bx1@@39 T@U) (bx2@@28 T@U) (bx3@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@58) TyType)) (= (type t2@@42) TyType)) (= (type t3@@30) TyType)) (= (type t4@@18) TyType)) (= (type h0@@34) (MapType1Type refType))) (= (type h1@@34) (MapType1Type refType))) (= (type f@@54) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@17) BoxType)) (and (and (and ($HeapSucc h0@@34 h1@@34) (and ($IsGoodHeap h0@@34) ($IsGoodHeap h1@@34))) (and (and (and (and ($IsBox bx0@@50 t0@@79) ($IsBox bx1@@39 t1@@58)) ($IsBox bx2@@28 t2@@42)) ($IsBox bx3@@17 t3@@30)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@79 t1@@58 t2@@42 t3@@30 t4@@18)))) (forall ((o@@73 T@U) (fld@@33 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@33)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@33) (FieldType a@@111))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@58 t2@@42 t3@@30 t4@@18 f@@54 h0@@34 bx0@@50 bx1@@39 bx2@@28 bx3@@17) ($Box o@@73))))) (= (MapType1Select h0@@34 o@@73 fld@@33) (MapType1Select h1@@34 o@@73 fld@@33)))) :qid |unknown.0:0| :skolemid |764| :no-pattern (type o@@73) :no-pattern (type fld@@33) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@33) :no-pattern (U_2_bool fld@@33) )))) (= (Apply4 t0@@79 t1@@58 t2@@42 t3@@30 t4@@18 f@@54 h0@@34 bx0@@50 bx1@@39 bx2@@28 bx3@@17) (Apply4 t0@@79 t1@@58 t2@@42 t3@@30 t4@@18 f@@54 h1@@34 bx0@@50 bx1@@39 bx2@@28 bx3@@17))) :qid |unknown.0:0| :skolemid |765| :pattern ( ($HeapSucc h0@@34 h1@@34) (Apply4 t0@@79 t1@@58 t2@@42 t3@@30 t4@@18 f@@54 h1@@34 bx0@@50 bx1@@39 bx2@@28 bx3@@17)) )))
(assert (forall ((t0@@80 T@U) (t1@@59 T@U) (t2@@43 T@U) (t3@@31 T@U) (t4@@19 T@U) (h0@@35 T@U) (h1@@35 T@U) (f@@55 T@U) (bx0@@51 T@U) (bx1@@40 T@U) (bx2@@29 T@U) (bx3@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@59) TyType)) (= (type t2@@43) TyType)) (= (type t3@@31) TyType)) (= (type t4@@19) TyType)) (= (type h0@@35) (MapType1Type refType))) (= (type h1@@35) (MapType1Type refType))) (= (type f@@55) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@18) BoxType)) (and (and (and ($HeapSucc h0@@35 h1@@35) (and ($IsGoodHeap h0@@35) ($IsGoodHeap h1@@35))) (and (and (and (and ($IsBox bx0@@51 t0@@80) ($IsBox bx1@@40 t1@@59)) ($IsBox bx2@@29 t2@@43)) ($IsBox bx3@@18 t3@@31)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@80 t1@@59 t2@@43 t3@@31 t4@@19)))) (forall ((o@@74 T@U) (fld@@34 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@34)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@34) (FieldType a@@112))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@59 t2@@43 t3@@31 t4@@19 f@@55 h1@@35 bx0@@51 bx1@@40 bx2@@29 bx3@@18) ($Box o@@74))))) (= (MapType1Select h0@@35 o@@74 fld@@34) (MapType1Select h1@@35 o@@74 fld@@34)))) :qid |unknown.0:0| :skolemid |766| :no-pattern (type o@@74) :no-pattern (type fld@@34) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@34) :no-pattern (U_2_bool fld@@34) )))) (= (Apply4 t0@@80 t1@@59 t2@@43 t3@@31 t4@@19 f@@55 h0@@35 bx0@@51 bx1@@40 bx2@@29 bx3@@18) (Apply4 t0@@80 t1@@59 t2@@43 t3@@31 t4@@19 f@@55 h1@@35 bx0@@51 bx1@@40 bx2@@29 bx3@@18))) :qid |unknown.0:0| :skolemid |767| :pattern ( ($HeapSucc h0@@35 h1@@35) (Apply4 t0@@80 t1@@59 t2@@43 t3@@31 t4@@19 f@@55 h1@@35 bx0@@51 bx1@@40 bx2@@29 bx3@@18)) )))
(assert (forall ((f@@56 T@U) (t0@@81 T@U) (t1@@60 T@U) (t2@@44 T@U) (t3@@32 T@U) (t4@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@56) HandleTypeType) (= (type t0@@81) TyType)) (= (type t1@@60) TyType)) (= (type t2@@44) TyType)) (= (type t3@@32) TyType)) (= (type t4@@20) TyType)) (and (=> ($Is f@@56 (Tclass._System.___hFunc4 t0@@81 t1@@60 t2@@44 t3@@32 t4@@20)) (forall ((h@@52 T@U) (bx0@@52 T@U) (bx1@@41 T@U) (bx2@@30 T@U) (bx3@@19 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@52) (MapType1Type refType)) (= (type bx0@@52) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@19) BoxType)) (and (and ($IsGoodHeap h@@52) (and (and (and ($IsBox bx0@@52 t0@@81) ($IsBox bx1@@41 t1@@60)) ($IsBox bx2@@30 t2@@44)) ($IsBox bx3@@19 t3@@32))) (Requires4 t0@@81 t1@@60 t2@@44 t3@@32 t4@@20 f@@56 h@@52 bx0@@52 bx1@@41 bx2@@30 bx3@@19))) ($IsBox (Apply4 t0@@81 t1@@60 t2@@44 t3@@32 t4@@20 f@@56 h@@52 bx0@@52 bx1@@41 bx2@@30 bx3@@19) t4@@20)) :qid |DafnyPre.405:12| :skolemid |768| :pattern ( (Apply4 t0@@81 t1@@60 t2@@44 t3@@32 t4@@20 f@@56 h@@52 bx0@@52 bx1@@41 bx2@@30 bx3@@19)) ))) (=> (forall ((h@@53 T@U) (bx0@@53 T@U) (bx1@@42 T@U) (bx2@@31 T@U) (bx3@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@53) (MapType1Type refType)) (= (type bx0@@53) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@31) BoxType)) (= (type bx3@@20) BoxType)) (and (and ($IsGoodHeap h@@53) (and (and (and ($IsBox bx0@@53 t0@@81) ($IsBox bx1@@42 t1@@60)) ($IsBox bx2@@31 t2@@44)) ($IsBox bx3@@20 t3@@32))) (Requires4 t0@@81 t1@@60 t2@@44 t3@@32 t4@@20 f@@56 h@@53 bx0@@53 bx1@@42 bx2@@31 bx3@@20))) ($IsBox (Apply4 t0@@81 t1@@60 t2@@44 t3@@32 t4@@20 f@@56 h@@53 bx0@@53 bx1@@42 bx2@@31 bx3@@20) t4@@20)) :qid |DafnyPre.405:12| :skolemid |768| :pattern ( (Apply4 t0@@81 t1@@60 t2@@44 t3@@32 t4@@20 f@@56 h@@53 bx0@@53 bx1@@42 bx2@@31 bx3@@20)) )) ($Is f@@56 (Tclass._System.___hFunc4 t0@@81 t1@@60 t2@@44 t3@@32 t4@@20))))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($Is f@@56 (Tclass._System.___hFunc4 t0@@81 t1@@60 t2@@44 t3@@32 t4@@20))) )))
(assert (forall ((f@@57 T@U) (t0@@82 T@U) (t1@@61 T@U) (t2@@45 T@U) (t3@@33 T@U) (t4@@21 T@U) (u0@@4 T@U) (u1@@3 T@U) (u2@@2 T@U) (u3@@1 T@U) (u4@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@57) HandleTypeType) (= (type t0@@82) TyType)) (= (type t1@@61) TyType)) (= (type t2@@45) TyType)) (= (type t3@@33) TyType)) (= (type t4@@21) TyType)) (= (type u0@@4) TyType)) (= (type u1@@3) TyType)) (= (type u2@@2) TyType)) (= (type u3@@1) TyType)) (= (type u4@@0) TyType)) (and (and (and (and (and ($Is f@@57 (Tclass._System.___hFunc4 t0@@82 t1@@61 t2@@45 t3@@33 t4@@21)) (forall ((bx@@68 T@U) ) (!  (=> (and (= (type bx@@68) BoxType) ($IsBox bx@@68 u0@@4)) ($IsBox bx@@68 t0@@82)) :qid |unknown.0:0| :skolemid |770| :pattern ( ($IsBox bx@@68 u0@@4)) :pattern ( ($IsBox bx@@68 t0@@82)) ))) (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 u1@@3)) ($IsBox bx@@69 t1@@61)) :qid |unknown.0:0| :skolemid |771| :pattern ( ($IsBox bx@@69 u1@@3)) :pattern ( ($IsBox bx@@69 t1@@61)) ))) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u2@@2)) ($IsBox bx@@70 t2@@45)) :qid |unknown.0:0| :skolemid |772| :pattern ( ($IsBox bx@@70 u2@@2)) :pattern ( ($IsBox bx@@70 t2@@45)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u3@@1)) ($IsBox bx@@71 t3@@33)) :qid |unknown.0:0| :skolemid |773| :pattern ( ($IsBox bx@@71 u3@@1)) :pattern ( ($IsBox bx@@71 t3@@33)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 t4@@21)) ($IsBox bx@@72 u4@@0)) :qid |unknown.0:0| :skolemid |774| :pattern ( ($IsBox bx@@72 t4@@21)) :pattern ( ($IsBox bx@@72 u4@@0)) )))) ($Is f@@57 (Tclass._System.___hFunc4 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($Is f@@57 (Tclass._System.___hFunc4 t0@@82 t1@@61 t2@@45 t3@@33 t4@@21)) ($Is f@@57 (Tclass._System.___hFunc4 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0))) )))
(assert (forall ((f@@58 T@U) (t0@@83 T@U) (t1@@62 T@U) (t2@@46 T@U) (t3@@34 T@U) (t4@@22 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@58) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@62) TyType)) (= (type t2@@46) TyType)) (= (type t3@@34) TyType)) (= (type t4@@22) TyType)) (= (type h@@54) (MapType1Type refType))) ($IsGoodHeap h@@54)) ($IsAlloc f@@58 (Tclass._System.___hFunc4 t0@@83 t1@@62 t2@@46 t3@@34 t4@@22) h@@54)) :qid |unknown.0:0| :skolemid |777| :pattern ( ($IsAlloc f@@58 (Tclass._System.___hFunc4 t0@@83 t1@@62 t2@@46 t3@@34 t4@@22) h@@54)) )))
(assert  (and (forall ((arg0@@189 T@U) (arg1@@107 T@U) (arg2@@72 T@U) ) (! (= (type (|#_System._tuple#3._#Make3| arg0@@189 arg1@@107 arg2@@72)) DatatypeTypeType) :qid |funType:#_System._tuple#3._#Make3| :pattern ( (|#_System._tuple#3._#Make3| arg0@@189 arg1@@107 arg2@@72)) )) (forall ((arg0@@190 T@U) ) (! (= (type (DatatypeCtorId arg0@@190)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@190)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) (|a#0#2#0| T@U) ) (!  (=> (and (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (type |a#0#2#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#3._#Make3| |a#0#0#0| |a#0#1#0| |a#0#2#0|)) |##_System._tuple#3._#Make3|)) :qid |unknown.0:0| :skolemid |778| :pattern ( (|#_System._tuple#3._#Make3| |a#0#0#0| |a#0#1#0| |a#0#2#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.__tuple_h3.___hMake3_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#3._#Make3|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#3._#Make3|) (_System.__tuple_h3.___hMake3_q d@@0)))) :qid |unknown.0:0| :skolemid |779| :pattern ( (_System.__tuple_h3.___hMake3_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.__tuple_h3.___hMake3_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) (|a#1#2#0| T@U) ) (!  (and (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= (type |a#1#2#0|) BoxType)) (= d@@1 (|#_System._tuple#3._#Make3| |a#1#0#0| |a#1#1#0| |a#1#2#0|))) :qid |unknown.0:0| :skolemid |780| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (type |a#1#2#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) :no-pattern (U_2_int |a#1#2#0|) :no-pattern (U_2_bool |a#1#2#0|) ))) :qid |unknown.0:0| :skolemid |781| :pattern ( (_System.__tuple_h3.___hMake3_q d@@1)) )))
(assert (forall ((arg0@@191 T@U) (arg1@@108 T@U) (arg2@@73 T@U) ) (! (= (type (Tclass._System.__tuple_h3 arg0@@191 arg1@@108 arg2@@73)) TyType) :qid |funType:Tclass._System.__tuple_h3| :pattern ( (Tclass._System.__tuple_h3 arg0@@191 arg1@@108 arg2@@73)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@32| T@U) (|#$T2@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@28|) TyType)) (= (Tag (Tclass._System.__tuple_h3 |#$T0@@35| |#$T1@@32| |#$T2@@28|)) Tagclass._System.__tuple_h3)) :qid |unknown.0:0| :skolemid |782| :pattern ( (Tclass._System.__tuple_h3 |#$T0@@35| |#$T1@@32| |#$T2@@28|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.__tuple_h3_0 arg0@@192)) TyType) :qid |funType:Tclass._System.__tuple_h3_0| :pattern ( (Tclass._System.__tuple_h3_0 arg0@@192)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@33| T@U) (|#$T2@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@29|) TyType)) (= (Tclass._System.__tuple_h3_0 (Tclass._System.__tuple_h3 |#$T0@@36| |#$T1@@33| |#$T2@@29|)) |#$T0@@36|)) :qid |unknown.0:0| :skolemid |783| :pattern ( (Tclass._System.__tuple_h3 |#$T0@@36| |#$T1@@33| |#$T2@@29|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.__tuple_h3_1 arg0@@193)) TyType) :qid |funType:Tclass._System.__tuple_h3_1| :pattern ( (Tclass._System.__tuple_h3_1 arg0@@193)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@34| T@U) (|#$T2@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@30|) TyType)) (= (Tclass._System.__tuple_h3_1 (Tclass._System.__tuple_h3 |#$T0@@37| |#$T1@@34| |#$T2@@30|)) |#$T1@@34|)) :qid |unknown.0:0| :skolemid |784| :pattern ( (Tclass._System.__tuple_h3 |#$T0@@37| |#$T1@@34| |#$T2@@30|)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.__tuple_h3_2 arg0@@194)) TyType) :qid |funType:Tclass._System.__tuple_h3_2| :pattern ( (Tclass._System.__tuple_h3_2 arg0@@194)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@35| T@U) (|#$T2@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@31|) TyType)) (= (Tclass._System.__tuple_h3_2 (Tclass._System.__tuple_h3 |#$T0@@38| |#$T1@@35| |#$T2@@31|)) |#$T2@@31|)) :qid |unknown.0:0| :skolemid |785| :pattern ( (Tclass._System.__tuple_h3 |#$T0@@38| |#$T1@@35| |#$T2@@31|)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@36| T@U) (|#$T2@@32| T@U) (bx@@73 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type bx@@73) BoxType)) ($IsBox bx@@73 (Tclass._System.__tuple_h3 |#$T0@@39| |#$T1@@36| |#$T2@@32|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@73)) bx@@73) ($Is ($Unbox DatatypeTypeType bx@@73) (Tclass._System.__tuple_h3 |#$T0@@39| |#$T1@@36| |#$T2@@32|)))) :qid |unknown.0:0| :skolemid |786| :pattern ( ($IsBox bx@@73 (Tclass._System.__tuple_h3 |#$T0@@39| |#$T1@@36| |#$T2@@32|))) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@37| T@U) (|#$T2@@33| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) (|a#2#2#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (= (type |a#2#2#0|) BoxType)) (and (=> ($Is (|#_System._tuple#3._#Make3| |a#2#0#0| |a#2#1#0| |a#2#2#0|) (Tclass._System.__tuple_h3 |#$T0@@40| |#$T1@@37| |#$T2@@33|)) (and (and ($IsBox |a#2#0#0| |#$T0@@40|) ($IsBox |a#2#1#0| |#$T1@@37|)) ($IsBox |a#2#2#0| |#$T2@@33|))) (=> (and (and ($IsBox |a#2#0#0| |#$T0@@40|) ($IsBox |a#2#1#0| |#$T1@@37|)) ($IsBox |a#2#2#0| |#$T2@@33|)) ($Is (|#_System._tuple#3._#Make3| |a#2#0#0| |a#2#1#0| |a#2#2#0|) (Tclass._System.__tuple_h3 |#$T0@@40| |#$T1@@37| |#$T2@@33|))))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($Is (|#_System._tuple#3._#Make3| |a#2#0#0| |a#2#1#0| |a#2#2#0|) (Tclass._System.__tuple_h3 |#$T0@@40| |#$T1@@37| |#$T2@@33|))) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@38| T@U) (|#$T2@@34| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) (|a#3#2#0| T@U) ($h@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type |a#3#2#0|) BoxType)) (= (type $h@@4) (MapType1Type refType))) ($IsGoodHeap $h@@4)) (and (=> ($IsAlloc (|#_System._tuple#3._#Make3| |a#3#0#0| |a#3#1#0| |a#3#2#0|) (Tclass._System.__tuple_h3 |#$T0@@41| |#$T1@@38| |#$T2@@34|) $h@@4) (and (and ($IsAllocBox |a#3#0#0| |#$T0@@41| $h@@4) ($IsAllocBox |a#3#1#0| |#$T1@@38| $h@@4)) ($IsAllocBox |a#3#2#0| |#$T2@@34| $h@@4))) (=> (and (and ($IsAllocBox |a#3#0#0| |#$T0@@41| $h@@4) ($IsAllocBox |a#3#1#0| |#$T1@@38| $h@@4)) ($IsAllocBox |a#3#2#0| |#$T2@@34| $h@@4)) ($IsAlloc (|#_System._tuple#3._#Make3| |a#3#0#0| |a#3#1#0| |a#3#2#0|) (Tclass._System.__tuple_h3 |#$T0@@41| |#$T1@@38| |#$T2@@34|) $h@@4)))) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsAlloc (|#_System._tuple#3._#Make3| |a#3#0#0| |a#3#1#0| |a#3#2#0|) (Tclass._System.__tuple_h3 |#$T0@@41| |#$T1@@38| |#$T2@@34|) $h@@4)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) (|a#4#2#0| T@U) ) (!  (=> (and (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (type |a#4#2#0|) BoxType)) (= (|#_System._tuple#3._#Make3| (Lit |a#4#0#0|) (Lit |a#4#1#0|) (Lit |a#4#2#0|)) (Lit (|#_System._tuple#3._#Make3| |a#4#0#0| |a#4#1#0| |a#4#2#0|)))) :qid |unknown.0:0| :skolemid |789| :pattern ( (|#_System._tuple#3._#Make3| (Lit |a#4#0#0|) (Lit |a#4#1#0|) (Lit |a#4#2#0|))) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (_System.__tuple_h3._0 arg0@@195)) BoxType) :qid |funType:_System.__tuple_h3._0| :pattern ( (_System.__tuple_h3._0 arg0@@195)) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) (|a#5#2#0| T@U) ) (!  (=> (and (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (type |a#5#2#0|) BoxType)) (= (_System.__tuple_h3._0 (|#_System._tuple#3._#Make3| |a#5#0#0| |a#5#1#0| |a#5#2#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (|#_System._tuple#3._#Make3| |a#5#0#0| |a#5#1#0| |a#5#2#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) (|a#6#2#0| T@U) ) (!  (=> (and (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (= (type |a#6#2#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#3._#Make3| |a#6#0#0| |a#6#1#0| |a#6#2#0|)))) :qid |unknown.0:0| :skolemid |791| :pattern ( (|#_System._tuple#3._#Make3| |a#6#0#0| |a#6#1#0| |a#6#2#0|)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (_System.__tuple_h3._1 arg0@@196)) BoxType) :qid |funType:_System.__tuple_h3._1| :pattern ( (_System.__tuple_h3._1 arg0@@196)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) (|a#7#2#0| T@U) ) (!  (=> (and (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (type |a#7#2#0|) BoxType)) (= (_System.__tuple_h3._1 (|#_System._tuple#3._#Make3| |a#7#0#0| |a#7#1#0| |a#7#2#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |792| :pattern ( (|#_System._tuple#3._#Make3| |a#7#0#0| |a#7#1#0| |a#7#2#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) (|a#8#2#0| T@U) ) (!  (=> (and (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (= (type |a#8#2#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#3._#Make3| |a#8#0#0| |a#8#1#0| |a#8#2#0|)))) :qid |unknown.0:0| :skolemid |793| :pattern ( (|#_System._tuple#3._#Make3| |a#8#0#0| |a#8#1#0| |a#8#2#0|)) )))
(assert (forall ((arg0@@197 T@U) ) (! (= (type (_System.__tuple_h3._2 arg0@@197)) BoxType) :qid |funType:_System.__tuple_h3._2| :pattern ( (_System.__tuple_h3._2 arg0@@197)) )))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) (|a#9#2#0| T@U) ) (!  (=> (and (and (= (type |a#9#0#0|) BoxType) (= (type |a#9#1#0|) BoxType)) (= (type |a#9#2#0|) BoxType)) (= (_System.__tuple_h3._2 (|#_System._tuple#3._#Make3| |a#9#0#0| |a#9#1#0| |a#9#2#0|)) |a#9#2#0|)) :qid |unknown.0:0| :skolemid |794| :pattern ( (|#_System._tuple#3._#Make3| |a#9#0#0| |a#9#1#0| |a#9#2#0|)) )))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) (|a#10#2#0| T@U) ) (!  (=> (and (and (= (type |a#10#0#0|) BoxType) (= (type |a#10#1#0|) BoxType)) (= (type |a#10#2#0|) BoxType)) (< (BoxRank |a#10#2#0|) (DtRank (|#_System._tuple#3._#Make3| |a#10#0#0| |a#10#1#0| |a#10#2#0|)))) :qid |unknown.0:0| :skolemid |795| :pattern ( (|#_System._tuple#3._#Make3| |a#10#0#0| |a#10#1#0| |a#10#2#0|)) )))
(assert (forall ((d@@2 T@U) ) (!  (=> (and (= (type d@@2) DatatypeTypeType) (|$IsA#_System.__tuple_h3| d@@2)) (_System.__tuple_h3.___hMake3_q d@@2)) :qid |unknown.0:0| :skolemid |796| :pattern ( (|$IsA#_System.__tuple_h3| d@@2)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@39| T@U) (|#$T2@@35| T@U) (d@@3 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type d@@3) DatatypeTypeType)) ($Is d@@3 (Tclass._System.__tuple_h3 |#$T0@@42| |#$T1@@39| |#$T2@@35|))) (_System.__tuple_h3.___hMake3_q d@@3)) :qid |unknown.0:0| :skolemid |797| :pattern ( (_System.__tuple_h3.___hMake3_q d@@3) ($Is d@@3 (Tclass._System.__tuple_h3 |#$T0@@42| |#$T1@@39| |#$T2@@35|))) )))
(assert (forall ((arg0@@198 T@U) (arg1@@109 T@U) (arg2@@74 T@U) (arg3@@51 T@U) (arg4@@42 T@U) (arg5@@31 T@U) ) (! (= (type (Tclass._System.___hFunc5 arg0@@198 arg1@@109 arg2@@74 arg3@@51 arg4@@42 arg5@@31)) TyType) :qid |funType:Tclass._System.___hFunc5| :pattern ( (Tclass._System.___hFunc5 arg0@@198 arg1@@109 arg2@@74 arg3@@51 arg4@@42 arg5@@31)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@40| T@U) (|#$T2@@36| T@U) (|#$T3@@23| T@U) (|#$T4@@17| T@U) (|#$T5@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$T4@@17|) TyType)) (= (type |#$T5@@10|) TyType)) (= (Tag (Tclass._System.___hFunc5 |#$T0@@43| |#$T1@@40| |#$T2@@36| |#$T3@@23| |#$T4@@17| |#$T5@@10|)) Tagclass._System.___hFunc5)) :qid |unknown.0:0| :skolemid |798| :pattern ( (Tclass._System.___hFunc5 |#$T0@@43| |#$T1@@40| |#$T2@@36| |#$T3@@23| |#$T4@@17| |#$T5@@10|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hFunc5_0 arg0@@199)) TyType) :qid |funType:Tclass._System.___hFunc5_0| :pattern ( (Tclass._System.___hFunc5_0 arg0@@199)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@41| T@U) (|#$T2@@37| T@U) (|#$T3@@24| T@U) (|#$T4@@18| T@U) (|#$T5@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$T4@@18|) TyType)) (= (type |#$T5@@11|) TyType)) (= (Tclass._System.___hFunc5_0 (Tclass._System.___hFunc5 |#$T0@@44| |#$T1@@41| |#$T2@@37| |#$T3@@24| |#$T4@@18| |#$T5@@11|)) |#$T0@@44|)) :qid |unknown.0:0| :skolemid |799| :pattern ( (Tclass._System.___hFunc5 |#$T0@@44| |#$T1@@41| |#$T2@@37| |#$T3@@24| |#$T4@@18| |#$T5@@11|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hFunc5_1 arg0@@200)) TyType) :qid |funType:Tclass._System.___hFunc5_1| :pattern ( (Tclass._System.___hFunc5_1 arg0@@200)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@42| T@U) (|#$T2@@38| T@U) (|#$T3@@25| T@U) (|#$T4@@19| T@U) (|#$T5@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$T4@@19|) TyType)) (= (type |#$T5@@12|) TyType)) (= (Tclass._System.___hFunc5_1 (Tclass._System.___hFunc5 |#$T0@@45| |#$T1@@42| |#$T2@@38| |#$T3@@25| |#$T4@@19| |#$T5@@12|)) |#$T1@@42|)) :qid |unknown.0:0| :skolemid |800| :pattern ( (Tclass._System.___hFunc5 |#$T0@@45| |#$T1@@42| |#$T2@@38| |#$T3@@25| |#$T4@@19| |#$T5@@12|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hFunc5_2 arg0@@201)) TyType) :qid |funType:Tclass._System.___hFunc5_2| :pattern ( (Tclass._System.___hFunc5_2 arg0@@201)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@43| T@U) (|#$T2@@39| T@U) (|#$T3@@26| T@U) (|#$T4@@20| T@U) (|#$T5@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$T4@@20|) TyType)) (= (type |#$T5@@13|) TyType)) (= (Tclass._System.___hFunc5_2 (Tclass._System.___hFunc5 |#$T0@@46| |#$T1@@43| |#$T2@@39| |#$T3@@26| |#$T4@@20| |#$T5@@13|)) |#$T2@@39|)) :qid |unknown.0:0| :skolemid |801| :pattern ( (Tclass._System.___hFunc5 |#$T0@@46| |#$T1@@43| |#$T2@@39| |#$T3@@26| |#$T4@@20| |#$T5@@13|)) )))
(assert (forall ((arg0@@202 T@U) ) (! (= (type (Tclass._System.___hFunc5_3 arg0@@202)) TyType) :qid |funType:Tclass._System.___hFunc5_3| :pattern ( (Tclass._System.___hFunc5_3 arg0@@202)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@44| T@U) (|#$T2@@40| T@U) (|#$T3@@27| T@U) (|#$T4@@21| T@U) (|#$T5@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$T4@@21|) TyType)) (= (type |#$T5@@14|) TyType)) (= (Tclass._System.___hFunc5_3 (Tclass._System.___hFunc5 |#$T0@@47| |#$T1@@44| |#$T2@@40| |#$T3@@27| |#$T4@@21| |#$T5@@14|)) |#$T3@@27|)) :qid |unknown.0:0| :skolemid |802| :pattern ( (Tclass._System.___hFunc5 |#$T0@@47| |#$T1@@44| |#$T2@@40| |#$T3@@27| |#$T4@@21| |#$T5@@14|)) )))
(assert (forall ((arg0@@203 T@U) ) (! (= (type (Tclass._System.___hFunc5_4 arg0@@203)) TyType) :qid |funType:Tclass._System.___hFunc5_4| :pattern ( (Tclass._System.___hFunc5_4 arg0@@203)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@45| T@U) (|#$T2@@41| T@U) (|#$T3@@28| T@U) (|#$T4@@22| T@U) (|#$T5@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$T4@@22|) TyType)) (= (type |#$T5@@15|) TyType)) (= (Tclass._System.___hFunc5_4 (Tclass._System.___hFunc5 |#$T0@@48| |#$T1@@45| |#$T2@@41| |#$T3@@28| |#$T4@@22| |#$T5@@15|)) |#$T4@@22|)) :qid |unknown.0:0| :skolemid |803| :pattern ( (Tclass._System.___hFunc5 |#$T0@@48| |#$T1@@45| |#$T2@@41| |#$T3@@28| |#$T4@@22| |#$T5@@15|)) )))
(assert (forall ((arg0@@204 T@U) ) (! (= (type (Tclass._System.___hFunc5_5 arg0@@204)) TyType) :qid |funType:Tclass._System.___hFunc5_5| :pattern ( (Tclass._System.___hFunc5_5 arg0@@204)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@46| T@U) (|#$T2@@42| T@U) (|#$T3@@29| T@U) (|#$T4@@23| T@U) (|#$T5@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$T4@@23|) TyType)) (= (type |#$T5@@16|) TyType)) (= (Tclass._System.___hFunc5_5 (Tclass._System.___hFunc5 |#$T0@@49| |#$T1@@46| |#$T2@@42| |#$T3@@29| |#$T4@@23| |#$T5@@16|)) |#$T5@@16|)) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.___hFunc5 |#$T0@@49| |#$T1@@46| |#$T2@@42| |#$T3@@29| |#$T4@@23| |#$T5@@16|)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@47| T@U) (|#$T2@@43| T@U) (|#$T3@@30| T@U) (|#$T4@@24| T@U) (|#$T5@@17| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$T4@@24|) TyType)) (= (type |#$T5@@17|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hFunc5 |#$T0@@50| |#$T1@@47| |#$T2@@43| |#$T3@@30| |#$T4@@24| |#$T5@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hFunc5 |#$T0@@50| |#$T1@@47| |#$T2@@43| |#$T3@@30| |#$T4@@24| |#$T5@@17|)))) :qid |unknown.0:0| :skolemid |805| :pattern ( ($IsBox bx@@74 (Tclass._System.___hFunc5 |#$T0@@50| |#$T1@@47| |#$T2@@43| |#$T3@@30| |#$T4@@24| |#$T5@@17|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@205 T@T) (arg1@@110 T@T) (arg2@@75 T@T) (arg3@@52 T@T) (arg4@@43 T@T) (arg5@@32 T@T) (arg6@@22 T@T) ) (! (= (Ctor (MapType7Type arg0@@205 arg1@@110 arg2@@75 arg3@@52 arg4@@43 arg5@@32 arg6@@22)) 25) :qid |ctor:MapType7Type| )) (forall ((arg0@@206 T@T) (arg1@@111 T@T) (arg2@@76 T@T) (arg3@@53 T@T) (arg4@@44 T@T) (arg5@@33 T@T) (arg6@@23 T@T) ) (! (= (MapType7TypeInv0 (MapType7Type arg0@@206 arg1@@111 arg2@@76 arg3@@53 arg4@@44 arg5@@33 arg6@@23)) arg0@@206) :qid |typeInv:MapType7TypeInv0| :pattern ( (MapType7Type arg0@@206 arg1@@111 arg2@@76 arg3@@53 arg4@@44 arg5@@33 arg6@@23)) ))) (forall ((arg0@@207 T@T) (arg1@@112 T@T) (arg2@@77 T@T) (arg3@@54 T@T) (arg4@@45 T@T) (arg5@@34 T@T) (arg6@@24 T@T) ) (! (= (MapType7TypeInv1 (MapType7Type arg0@@207 arg1@@112 arg2@@77 arg3@@54 arg4@@45 arg5@@34 arg6@@24)) arg1@@112) :qid |typeInv:MapType7TypeInv1| :pattern ( (MapType7Type arg0@@207 arg1@@112 arg2@@77 arg3@@54 arg4@@45 arg5@@34 arg6@@24)) ))) (forall ((arg0@@208 T@T) (arg1@@113 T@T) (arg2@@78 T@T) (arg3@@55 T@T) (arg4@@46 T@T) (arg5@@35 T@T) (arg6@@25 T@T) ) (! (= (MapType7TypeInv2 (MapType7Type arg0@@208 arg1@@113 arg2@@78 arg3@@55 arg4@@46 arg5@@35 arg6@@25)) arg2@@78) :qid |typeInv:MapType7TypeInv2| :pattern ( (MapType7Type arg0@@208 arg1@@113 arg2@@78 arg3@@55 arg4@@46 arg5@@35 arg6@@25)) ))) (forall ((arg0@@209 T@T) (arg1@@114 T@T) (arg2@@79 T@T) (arg3@@56 T@T) (arg4@@47 T@T) (arg5@@36 T@T) (arg6@@26 T@T) ) (! (= (MapType7TypeInv3 (MapType7Type arg0@@209 arg1@@114 arg2@@79 arg3@@56 arg4@@47 arg5@@36 arg6@@26)) arg3@@56) :qid |typeInv:MapType7TypeInv3| :pattern ( (MapType7Type arg0@@209 arg1@@114 arg2@@79 arg3@@56 arg4@@47 arg5@@36 arg6@@26)) ))) (forall ((arg0@@210 T@T) (arg1@@115 T@T) (arg2@@80 T@T) (arg3@@57 T@T) (arg4@@48 T@T) (arg5@@37 T@T) (arg6@@27 T@T) ) (! (= (MapType7TypeInv4 (MapType7Type arg0@@210 arg1@@115 arg2@@80 arg3@@57 arg4@@48 arg5@@37 arg6@@27)) arg4@@48) :qid |typeInv:MapType7TypeInv4| :pattern ( (MapType7Type arg0@@210 arg1@@115 arg2@@80 arg3@@57 arg4@@48 arg5@@37 arg6@@27)) ))) (forall ((arg0@@211 T@T) (arg1@@116 T@T) (arg2@@81 T@T) (arg3@@58 T@T) (arg4@@49 T@T) (arg5@@38 T@T) (arg6@@28 T@T) ) (! (= (MapType7TypeInv5 (MapType7Type arg0@@211 arg1@@116 arg2@@81 arg3@@58 arg4@@49 arg5@@38 arg6@@28)) arg5@@38) :qid |typeInv:MapType7TypeInv5| :pattern ( (MapType7Type arg0@@211 arg1@@116 arg2@@81 arg3@@58 arg4@@49 arg5@@38 arg6@@28)) ))) (forall ((arg0@@212 T@T) (arg1@@117 T@T) (arg2@@82 T@T) (arg3@@59 T@T) (arg4@@50 T@T) (arg5@@39 T@T) (arg6@@29 T@T) ) (! (= (MapType7TypeInv6 (MapType7Type arg0@@212 arg1@@117 arg2@@82 arg3@@59 arg4@@50 arg5@@39 arg6@@29)) arg6@@29) :qid |typeInv:MapType7TypeInv6| :pattern ( (MapType7Type arg0@@212 arg1@@117 arg2@@82 arg3@@59 arg4@@50 arg5@@39 arg6@@29)) ))) (forall ((arg0@@213 T@U) (arg1@@118 T@U) (arg2@@83 T@U) (arg3@@60 T@U) (arg4@@51 T@U) (arg5@@40 T@U) (arg6@@30 T@U) ) (! (let ((aVar6@@0 (MapType7TypeInv6 (type arg0@@213)))) (= (type (MapType7Select arg0@@213 arg1@@118 arg2@@83 arg3@@60 arg4@@51 arg5@@40 arg6@@30)) aVar6@@0)) :qid |funType:MapType7Select| :pattern ( (MapType7Select arg0@@213 arg1@@118 arg2@@83 arg3@@60 arg4@@51 arg5@@40 arg6@@30)) ))) (forall ((arg0@@214 T@U) (arg1@@119 T@U) (arg2@@84 T@U) (arg3@@61 T@U) (arg4@@52 T@U) (arg5@@41 T@U) (arg6@@31 T@U) (arg7@@19 T@U) ) (! (let ((aVar6@@1 (type arg7@@19))) (let ((aVar5@@3 (type arg6@@31))) (let ((aVar4@@4 (type arg5@@41))) (let ((aVar3@@5 (type arg4@@52))) (let ((aVar2@@6 (type arg3@@61))) (let ((aVar1@@7 (type arg2@@84))) (let ((aVar0@@6 (type arg1@@119))) (= (type (MapType7Store arg0@@214 arg1@@119 arg2@@84 arg3@@61 arg4@@52 arg5@@41 arg6@@31 arg7@@19)) (MapType7Type aVar0@@6 aVar1@@7 aVar2@@6 aVar3@@5 aVar4@@4 aVar5@@3 aVar6@@1))))))))) :qid |funType:MapType7Store| :pattern ( (MapType7Store arg0@@214 arg1@@119 arg2@@84 arg3@@61 arg4@@52 arg5@@41 arg6@@31 arg7@@19)) ))) (forall ((m@@60 T@U) (x0@@39 T@U) (x1@@36 T@U) (x2@@28 T@U) (x3@@23 T@U) (x4@@17 T@U) (x5@@10 T@U) (val@@40 T@U) ) (! (let ((aVar6@@2 (MapType7TypeInv6 (type m@@60)))) (=> (= (type val@@40) aVar6@@2) (= (MapType7Select (MapType7Store m@@60 x0@@39 x1@@36 x2@@28 x3@@23 x4@@17 x5@@10 val@@40) x0@@39 x1@@36 x2@@28 x3@@23 x4@@17 x5@@10) val@@40))) :qid |mapAx0:MapType7Select| :weight 0 ))) (and (and (and (and (and (and (forall ((val@@41 T@U) (m@@61 T@U) (x0@@40 T@U) (x1@@37 T@U) (x2@@29 T@U) (x3@@24 T@U) (x4@@18 T@U) (x5@@11 T@U) (y0@@32 T@U) (y1@@30 T@U) (y2@@24 T@U) (y3@@20 T@U) (y4@@15 T@U) (y5@@9 T@U) ) (!  (or (= x0@@40 y0@@32) (= (MapType7Select (MapType7Store m@@61 x0@@40 x1@@37 x2@@29 x3@@24 x4@@18 x5@@11 val@@41) y0@@32 y1@@30 y2@@24 y3@@20 y4@@15 y5@@9) (MapType7Select m@@61 y0@@32 y1@@30 y2@@24 y3@@20 y4@@15 y5@@9))) :qid |mapAx1:MapType7Select:0| :weight 0 )) (forall ((val@@42 T@U) (m@@62 T@U) (x0@@41 T@U) (x1@@38 T@U) (x2@@30 T@U) (x3@@25 T@U) (x4@@19 T@U) (x5@@12 T@U) (y0@@33 T@U) (y1@@31 T@U) (y2@@25 T@U) (y3@@21 T@U) (y4@@16 T@U) (y5@@10 T@U) ) (!  (or (= x1@@38 y1@@31) (= (MapType7Select (MapType7Store m@@62 x0@@41 x1@@38 x2@@30 x3@@25 x4@@19 x5@@12 val@@42) y0@@33 y1@@31 y2@@25 y3@@21 y4@@16 y5@@10) (MapType7Select m@@62 y0@@33 y1@@31 y2@@25 y3@@21 y4@@16 y5@@10))) :qid |mapAx1:MapType7Select:1| :weight 0 ))) (forall ((val@@43 T@U) (m@@63 T@U) (x0@@42 T@U) (x1@@39 T@U) (x2@@31 T@U) (x3@@26 T@U) (x4@@20 T@U) (x5@@13 T@U) (y0@@34 T@U) (y1@@32 T@U) (y2@@26 T@U) (y3@@22 T@U) (y4@@17 T@U) (y5@@11 T@U) ) (!  (or (= x2@@31 y2@@26) (= (MapType7Select (MapType7Store m@@63 x0@@42 x1@@39 x2@@31 x3@@26 x4@@20 x5@@13 val@@43) y0@@34 y1@@32 y2@@26 y3@@22 y4@@17 y5@@11) (MapType7Select m@@63 y0@@34 y1@@32 y2@@26 y3@@22 y4@@17 y5@@11))) :qid |mapAx1:MapType7Select:2| :weight 0 ))) (forall ((val@@44 T@U) (m@@64 T@U) (x0@@43 T@U) (x1@@40 T@U) (x2@@32 T@U) (x3@@27 T@U) (x4@@21 T@U) (x5@@14 T@U) (y0@@35 T@U) (y1@@33 T@U) (y2@@27 T@U) (y3@@23 T@U) (y4@@18 T@U) (y5@@12 T@U) ) (!  (or (= x3@@27 y3@@23) (= (MapType7Select (MapType7Store m@@64 x0@@43 x1@@40 x2@@32 x3@@27 x4@@21 x5@@14 val@@44) y0@@35 y1@@33 y2@@27 y3@@23 y4@@18 y5@@12) (MapType7Select m@@64 y0@@35 y1@@33 y2@@27 y3@@23 y4@@18 y5@@12))) :qid |mapAx1:MapType7Select:3| :weight 0 ))) (forall ((val@@45 T@U) (m@@65 T@U) (x0@@44 T@U) (x1@@41 T@U) (x2@@33 T@U) (x3@@28 T@U) (x4@@22 T@U) (x5@@15 T@U) (y0@@36 T@U) (y1@@34 T@U) (y2@@28 T@U) (y3@@24 T@U) (y4@@19 T@U) (y5@@13 T@U) ) (!  (or (= x4@@22 y4@@19) (= (MapType7Select (MapType7Store m@@65 x0@@44 x1@@41 x2@@33 x3@@28 x4@@22 x5@@15 val@@45) y0@@36 y1@@34 y2@@28 y3@@24 y4@@19 y5@@13) (MapType7Select m@@65 y0@@36 y1@@34 y2@@28 y3@@24 y4@@19 y5@@13))) :qid |mapAx1:MapType7Select:4| :weight 0 ))) (forall ((val@@46 T@U) (m@@66 T@U) (x0@@45 T@U) (x1@@42 T@U) (x2@@34 T@U) (x3@@29 T@U) (x4@@23 T@U) (x5@@16 T@U) (y0@@37 T@U) (y1@@35 T@U) (y2@@29 T@U) (y3@@25 T@U) (y4@@20 T@U) (y5@@14 T@U) ) (!  (or (= x5@@16 y5@@14) (= (MapType7Select (MapType7Store m@@66 x0@@45 x1@@42 x2@@34 x3@@29 x4@@23 x5@@16 val@@46) y0@@37 y1@@35 y2@@29 y3@@25 y4@@20 y5@@14) (MapType7Select m@@66 y0@@37 y1@@35 y2@@29 y3@@25 y4@@20 y5@@14))) :qid |mapAx1:MapType7Select:5| :weight 0 ))) (forall ((val@@47 T@U) (m@@67 T@U) (x0@@46 T@U) (x1@@43 T@U) (x2@@35 T@U) (x3@@30 T@U) (x4@@24 T@U) (x5@@17 T@U) (y0@@38 T@U) (y1@@36 T@U) (y2@@30 T@U) (y3@@26 T@U) (y4@@21 T@U) (y5@@15 T@U) ) (!  (or true (= (MapType7Select (MapType7Store m@@67 x0@@46 x1@@43 x2@@35 x3@@30 x4@@24 x5@@17 val@@47) y0@@38 y1@@36 y2@@30 y3@@26 y4@@21 y5@@15) (MapType7Select m@@67 y0@@38 y1@@36 y2@@30 y3@@26 y4@@21 y5@@15))) :qid |mapAx2:MapType7Select| :weight 0 )))) (forall ((arg0@@215 T@U) (arg1@@120 T@U) (arg2@@85 T@U) (arg3@@62 T@U) (arg4@@53 T@U) (arg5@@42 T@U) (arg6@@32 T@U) (arg7@@20 T@U) (arg8@@19 T@U) (arg9@@16 T@U) (arg10@@4 T@U) (arg11@@1 T@U) (arg12@@1 T@U) ) (! (= (type (Apply5 arg0@@215 arg1@@120 arg2@@85 arg3@@62 arg4@@53 arg5@@42 arg6@@32 arg7@@20 arg8@@19 arg9@@16 arg10@@4 arg11@@1 arg12@@1)) BoxType) :qid |funType:Apply5| :pattern ( (Apply5 arg0@@215 arg1@@120 arg2@@85 arg3@@62 arg4@@53 arg5@@42 arg6@@32 arg7@@20 arg8@@19 arg9@@16 arg10@@4 arg11@@1 arg12@@1)) ))) (forall ((arg0@@216 T@U) (arg1@@121 T@U) (arg2@@86 T@U) ) (! (= (type (Handle5 arg0@@216 arg1@@121 arg2@@86)) HandleTypeType) :qid |funType:Handle5| :pattern ( (Handle5 arg0@@216 arg1@@121 arg2@@86)) ))))
(assert (forall ((t0@@84 T@U) (t1@@63 T@U) (t2@@47 T@U) (t3@@35 T@U) (t4@@23 T@U) (t5@@11 T@U) (heap@@17 T@U) (h@@55 T@U) (r@@23 T@U) (rd@@17 T@U) (bx0@@54 T@U) (bx1@@43 T@U) (bx2@@32 T@U) (bx3@@21 T@U) (bx4@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@63) TyType)) (= (type t2@@47) TyType)) (= (type t3@@35) TyType)) (= (type t4@@23) TyType)) (= (type t5@@11) TyType)) (= (type heap@@17) (MapType1Type refType))) (= (type h@@55) (MapType7Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType7Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@17) (MapType7Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@54) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@32) BoxType)) (= (type bx3@@21) BoxType)) (= (type bx4@@10) BoxType)) (= (Apply5 t0@@84 t1@@63 t2@@47 t3@@35 t4@@23 t5@@11 (Handle5 h@@55 r@@23 rd@@17) heap@@17 bx0@@54 bx1@@43 bx2@@32 bx3@@21 bx4@@10) (MapType7Select h@@55 heap@@17 bx0@@54 bx1@@43 bx2@@32 bx3@@21 bx4@@10))) :qid |unknown.0:0| :skolemid |806| :pattern ( (Apply5 t0@@84 t1@@63 t2@@47 t3@@35 t4@@23 t5@@11 (Handle5 h@@55 r@@23 rd@@17) heap@@17 bx0@@54 bx1@@43 bx2@@32 bx3@@21 bx4@@10)) )))
(assert (forall ((t0@@85 T@U) (t1@@64 T@U) (t2@@48 T@U) (t3@@36 T@U) (t4@@24 T@U) (t5@@12 T@U) (heap@@18 T@U) (h@@56 T@U) (r@@24 T@U) (rd@@18 T@U) (bx0@@55 T@U) (bx1@@44 T@U) (bx2@@33 T@U) (bx3@@22 T@U) (bx4@@11 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@64) TyType)) (= (type t2@@48) TyType)) (= (type t3@@36) TyType)) (= (type t4@@24) TyType)) (= (type t5@@12) TyType)) (= (type heap@@18) (MapType1Type refType))) (= (type h@@56) (MapType7Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType7Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@18) (MapType7Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@55) BoxType)) (= (type bx1@@44) BoxType)) (= (type bx2@@33) BoxType)) (= (type bx3@@22) BoxType)) (= (type bx4@@11) BoxType)) (U_2_bool (MapType7Select r@@24 heap@@18 bx0@@55 bx1@@44 bx2@@33 bx3@@22 bx4@@11))) (Requires5 t0@@85 t1@@64 t2@@48 t3@@36 t4@@24 t5@@12 (Handle5 h@@56 r@@24 rd@@18) heap@@18 bx0@@55 bx1@@44 bx2@@33 bx3@@22 bx4@@11)) :qid |unknown.0:0| :skolemid |807| :pattern ( (Requires5 t0@@85 t1@@64 t2@@48 t3@@36 t4@@24 t5@@12 (Handle5 h@@56 r@@24 rd@@18) heap@@18 bx0@@55 bx1@@44 bx2@@33 bx3@@22 bx4@@11)) )))
(assert (forall ((arg0@@217 T@U) (arg1@@122 T@U) (arg2@@87 T@U) (arg3@@63 T@U) (arg4@@54 T@U) (arg5@@43 T@U) (arg6@@33 T@U) (arg7@@21 T@U) (arg8@@20 T@U) (arg9@@17 T@U) (arg10@@5 T@U) (arg11@@2 T@U) (arg12@@2 T@U) ) (! (= (type (Reads5 arg0@@217 arg1@@122 arg2@@87 arg3@@63 arg4@@54 arg5@@43 arg6@@33 arg7@@21 arg8@@20 arg9@@17 arg10@@5 arg11@@2 arg12@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads5| :pattern ( (Reads5 arg0@@217 arg1@@122 arg2@@87 arg3@@63 arg4@@54 arg5@@43 arg6@@33 arg7@@21 arg8@@20 arg9@@17 arg10@@5 arg11@@2 arg12@@2)) )))
(assert (forall ((t0@@86 T@U) (t1@@65 T@U) (t2@@49 T@U) (t3@@37 T@U) (t4@@25 T@U) (t5@@13 T@U) (heap@@19 T@U) (h@@57 T@U) (r@@25 T@U) (rd@@19 T@U) (bx0@@56 T@U) (bx1@@45 T@U) (bx2@@34 T@U) (bx3@@23 T@U) (bx4@@12 T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@65) TyType)) (= (type t2@@49) TyType)) (= (type t3@@37) TyType)) (= (type t4@@25) TyType)) (= (type t5@@13) TyType)) (= (type heap@@19) (MapType1Type refType))) (= (type h@@57) (MapType7Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@25) (MapType7Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@19) (MapType7Type (MapType1Type refType) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@56) BoxType)) (= (type bx1@@45) BoxType)) (= (type bx2@@34) BoxType)) (= (type bx3@@23) BoxType)) (= (type bx4@@12) BoxType)) (= (type bx@@75) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads5 t0@@86 t1@@65 t2@@49 t3@@37 t4@@25 t5@@13 (Handle5 h@@57 r@@25 rd@@19) heap@@19 bx0@@56 bx1@@45 bx2@@34 bx3@@23 bx4@@12) bx@@75)) (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@19 bx0@@56 bx1@@45 bx2@@34 bx3@@23 bx4@@12) bx@@75))) (=> (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@19 bx0@@56 bx1@@45 bx2@@34 bx3@@23 bx4@@12) bx@@75)) (U_2_bool (MapType0Select (Reads5 t0@@86 t1@@65 t2@@49 t3@@37 t4@@25 t5@@13 (Handle5 h@@57 r@@25 rd@@19) heap@@19 bx0@@56 bx1@@45 bx2@@34 bx3@@23 bx4@@12) bx@@75))))) :qid |unknown.0:0| :skolemid |808| :pattern ( (MapType0Select (Reads5 t0@@86 t1@@65 t2@@49 t3@@37 t4@@25 t5@@13 (Handle5 h@@57 r@@25 rd@@19) heap@@19 bx0@@56 bx1@@45 bx2@@34 bx3@@23 bx4@@12) bx@@75)) )))
(assert (forall ((t0@@87 T@U) (t1@@66 T@U) (t2@@50 T@U) (t3@@38 T@U) (t4@@26 T@U) (t5@@14 T@U) (h0@@36 T@U) (h1@@36 T@U) (f@@59 T@U) (bx0@@57 T@U) (bx1@@46 T@U) (bx2@@35 T@U) (bx3@@24 T@U) (bx4@@13 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@87) TyType) (= (type t1@@66) TyType)) (= (type t2@@50) TyType)) (= (type t3@@38) TyType)) (= (type t4@@26) TyType)) (= (type t5@@14) TyType)) (= (type h0@@36) (MapType1Type refType))) (= (type h1@@36) (MapType1Type refType))) (= (type f@@59) HandleTypeType)) (= (type bx0@@57) BoxType)) (= (type bx1@@46) BoxType)) (= (type bx2@@35) BoxType)) (= (type bx3@@24) BoxType)) (= (type bx4@@13) BoxType)) (and (and (and ($HeapSucc h0@@36 h1@@36) (and ($IsGoodHeap h0@@36) ($IsGoodHeap h1@@36))) (and (and (and (and (and ($IsBox bx0@@57 t0@@87) ($IsBox bx1@@46 t1@@66)) ($IsBox bx2@@35 t2@@50)) ($IsBox bx3@@24 t3@@38)) ($IsBox bx4@@13 t4@@26)) ($Is f@@59 (Tclass._System.___hFunc5 t0@@87 t1@@66 t2@@50 t3@@38 t4@@26 t5@@14)))) (forall ((o@@75 T@U) (fld@@35 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@35)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@35) (FieldType a@@113))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads5 t0@@87 t1@@66 t2@@50 t3@@38 t4@@26 t5@@14 f@@59 h0@@36 bx0@@57 bx1@@46 bx2@@35 bx3@@24 bx4@@13) ($Box o@@75))))) (= (MapType1Select h0@@36 o@@75 fld@@35) (MapType1Select h1@@36 o@@75 fld@@35)))) :qid |unknown.0:0| :skolemid |809| :no-pattern (type o@@75) :no-pattern (type fld@@35) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@35) :no-pattern (U_2_bool fld@@35) )))) (= (Reads5 t0@@87 t1@@66 t2@@50 t3@@38 t4@@26 t5@@14 f@@59 h0@@36 bx0@@57 bx1@@46 bx2@@35 bx3@@24 bx4@@13) (Reads5 t0@@87 t1@@66 t2@@50 t3@@38 t4@@26 t5@@14 f@@59 h1@@36 bx0@@57 bx1@@46 bx2@@35 bx3@@24 bx4@@13))) :qid |unknown.0:0| :skolemid |810| :pattern ( ($HeapSucc h0@@36 h1@@36) (Reads5 t0@@87 t1@@66 t2@@50 t3@@38 t4@@26 t5@@14 f@@59 h1@@36 bx0@@57 bx1@@46 bx2@@35 bx3@@24 bx4@@13)) )))
(assert (forall ((t0@@88 T@U) (t1@@67 T@U) (t2@@51 T@U) (t3@@39 T@U) (t4@@27 T@U) (t5@@15 T@U) (h0@@37 T@U) (h1@@37 T@U) (f@@60 T@U) (bx0@@58 T@U) (bx1@@47 T@U) (bx2@@36 T@U) (bx3@@25 T@U) (bx4@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@88) TyType) (= (type t1@@67) TyType)) (= (type t2@@51) TyType)) (= (type t3@@39) TyType)) (= (type t4@@27) TyType)) (= (type t5@@15) TyType)) (= (type h0@@37) (MapType1Type refType))) (= (type h1@@37) (MapType1Type refType))) (= (type f@@60) HandleTypeType)) (= (type bx0@@58) BoxType)) (= (type bx1@@47) BoxType)) (= (type bx2@@36) BoxType)) (= (type bx3@@25) BoxType)) (= (type bx4@@14) BoxType)) (and (and (and ($HeapSucc h0@@37 h1@@37) (and ($IsGoodHeap h0@@37) ($IsGoodHeap h1@@37))) (and (and (and (and (and ($IsBox bx0@@58 t0@@88) ($IsBox bx1@@47 t1@@67)) ($IsBox bx2@@36 t2@@51)) ($IsBox bx3@@25 t3@@39)) ($IsBox bx4@@14 t4@@27)) ($Is f@@60 (Tclass._System.___hFunc5 t0@@88 t1@@67 t2@@51 t3@@39 t4@@27 t5@@15)))) (forall ((o@@76 T@U) (fld@@36 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@36)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@36) (FieldType a@@114))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads5 t0@@88 t1@@67 t2@@51 t3@@39 t4@@27 t5@@15 f@@60 h1@@37 bx0@@58 bx1@@47 bx2@@36 bx3@@25 bx4@@14) ($Box o@@76))))) (= (MapType1Select h0@@37 o@@76 fld@@36) (MapType1Select h1@@37 o@@76 fld@@36)))) :qid |unknown.0:0| :skolemid |811| :no-pattern (type o@@76) :no-pattern (type fld@@36) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@36) :no-pattern (U_2_bool fld@@36) )))) (= (Reads5 t0@@88 t1@@67 t2@@51 t3@@39 t4@@27 t5@@15 f@@60 h0@@37 bx0@@58 bx1@@47 bx2@@36 bx3@@25 bx4@@14) (Reads5 t0@@88 t1@@67 t2@@51 t3@@39 t4@@27 t5@@15 f@@60 h1@@37 bx0@@58 bx1@@47 bx2@@36 bx3@@25 bx4@@14))) :qid |unknown.0:0| :skolemid |812| :pattern ( ($HeapSucc h0@@37 h1@@37) (Reads5 t0@@88 t1@@67 t2@@51 t3@@39 t4@@27 t5@@15 f@@60 h1@@37 bx0@@58 bx1@@47 bx2@@36 bx3@@25 bx4@@14)) )))
(assert (forall ((t0@@89 T@U) (t1@@68 T@U) (t2@@52 T@U) (t3@@40 T@U) (t4@@28 T@U) (t5@@16 T@U) (h0@@38 T@U) (h1@@38 T@U) (f@@61 T@U) (bx0@@59 T@U) (bx1@@48 T@U) (bx2@@37 T@U) (bx3@@26 T@U) (bx4@@15 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@89) TyType) (= (type t1@@68) TyType)) (= (type t2@@52) TyType)) (= (type t3@@40) TyType)) (= (type t4@@28) TyType)) (= (type t5@@16) TyType)) (= (type h0@@38) (MapType1Type refType))) (= (type h1@@38) (MapType1Type refType))) (= (type f@@61) HandleTypeType)) (= (type bx0@@59) BoxType)) (= (type bx1@@48) BoxType)) (= (type bx2@@37) BoxType)) (= (type bx3@@26) BoxType)) (= (type bx4@@15) BoxType)) (and (and (and ($HeapSucc h0@@38 h1@@38) (and ($IsGoodHeap h0@@38) ($IsGoodHeap h1@@38))) (and (and (and (and (and ($IsBox bx0@@59 t0@@89) ($IsBox bx1@@48 t1@@68)) ($IsBox bx2@@37 t2@@52)) ($IsBox bx3@@26 t3@@40)) ($IsBox bx4@@15 t4@@28)) ($Is f@@61 (Tclass._System.___hFunc5 t0@@89 t1@@68 t2@@52 t3@@40 t4@@28 t5@@16)))) (forall ((o@@77 T@U) (fld@@37 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@37)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@37) (FieldType a@@115))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads5 t0@@89 t1@@68 t2@@52 t3@@40 t4@@28 t5@@16 f@@61 h0@@38 bx0@@59 bx1@@48 bx2@@37 bx3@@26 bx4@@15) ($Box o@@77))))) (= (MapType1Select h0@@38 o@@77 fld@@37) (MapType1Select h1@@38 o@@77 fld@@37)))) :qid |unknown.0:0| :skolemid |813| :no-pattern (type o@@77) :no-pattern (type fld@@37) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@37) :no-pattern (U_2_bool fld@@37) )))) (and (=> (Requires5 t0@@89 t1@@68 t2@@52 t3@@40 t4@@28 t5@@16 f@@61 h0@@38 bx0@@59 bx1@@48 bx2@@37 bx3@@26 bx4@@15) (Requires5 t0@@89 t1@@68 t2@@52 t3@@40 t4@@28 t5@@16 f@@61 h1@@38 bx0@@59 bx1@@48 bx2@@37 bx3@@26 bx4@@15)) (=> (Requires5 t0@@89 t1@@68 t2@@52 t3@@40 t4@@28 t5@@16 f@@61 h1@@38 bx0@@59 bx1@@48 bx2@@37 bx3@@26 bx4@@15) (Requires5 t0@@89 t1@@68 t2@@52 t3@@40 t4@@28 t5@@16 f@@61 h0@@38 bx0@@59 bx1@@48 bx2@@37 bx3@@26 bx4@@15)))) :qid |unknown.0:0| :skolemid |814| :pattern ( ($HeapSucc h0@@38 h1@@38) (Requires5 t0@@89 t1@@68 t2@@52 t3@@40 t4@@28 t5@@16 f@@61 h1@@38 bx0@@59 bx1@@48 bx2@@37 bx3@@26 bx4@@15)) )))
(assert (forall ((t0@@90 T@U) (t1@@69 T@U) (t2@@53 T@U) (t3@@41 T@U) (t4@@29 T@U) (t5@@17 T@U) (h0@@39 T@U) (h1@@39 T@U) (f@@62 T@U) (bx0@@60 T@U) (bx1@@49 T@U) (bx2@@38 T@U) (bx3@@27 T@U) (bx4@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@90) TyType) (= (type t1@@69) TyType)) (= (type t2@@53) TyType)) (= (type t3@@41) TyType)) (= (type t4@@29) TyType)) (= (type t5@@17) TyType)) (= (type h0@@39) (MapType1Type refType))) (= (type h1@@39) (MapType1Type refType))) (= (type f@@62) HandleTypeType)) (= (type bx0@@60) BoxType)) (= (type bx1@@49) BoxType)) (= (type bx2@@38) BoxType)) (= (type bx3@@27) BoxType)) (= (type bx4@@16) BoxType)) (and (and (and ($HeapSucc h0@@39 h1@@39) (and ($IsGoodHeap h0@@39) ($IsGoodHeap h1@@39))) (and (and (and (and (and ($IsBox bx0@@60 t0@@90) ($IsBox bx1@@49 t1@@69)) ($IsBox bx2@@38 t2@@53)) ($IsBox bx3@@27 t3@@41)) ($IsBox bx4@@16 t4@@29)) ($Is f@@62 (Tclass._System.___hFunc5 t0@@90 t1@@69 t2@@53 t3@@41 t4@@29 t5@@17)))) (forall ((o@@78 T@U) (fld@@38 T@U) ) (! (let ((a@@116 (FieldTypeInv0 (type fld@@38)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@38) (FieldType a@@116))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads5 t0@@90 t1@@69 t2@@53 t3@@41 t4@@29 t5@@17 f@@62 h1@@39 bx0@@60 bx1@@49 bx2@@38 bx3@@27 bx4@@16) ($Box o@@78))))) (= (MapType1Select h0@@39 o@@78 fld@@38) (MapType1Select h1@@39 o@@78 fld@@38)))) :qid |unknown.0:0| :skolemid |815| :no-pattern (type o@@78) :no-pattern (type fld@@38) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@38) :no-pattern (U_2_bool fld@@38) )))) (and (=> (Requires5 t0@@90 t1@@69 t2@@53 t3@@41 t4@@29 t5@@17 f@@62 h0@@39 bx0@@60 bx1@@49 bx2@@38 bx3@@27 bx4@@16) (Requires5 t0@@90 t1@@69 t2@@53 t3@@41 t4@@29 t5@@17 f@@62 h1@@39 bx0@@60 bx1@@49 bx2@@38 bx3@@27 bx4@@16)) (=> (Requires5 t0@@90 t1@@69 t2@@53 t3@@41 t4@@29 t5@@17 f@@62 h1@@39 bx0@@60 bx1@@49 bx2@@38 bx3@@27 bx4@@16) (Requires5 t0@@90 t1@@69 t2@@53 t3@@41 t4@@29 t5@@17 f@@62 h0@@39 bx0@@60 bx1@@49 bx2@@38 bx3@@27 bx4@@16)))) :qid |unknown.0:0| :skolemid |816| :pattern ( ($HeapSucc h0@@39 h1@@39) (Requires5 t0@@90 t1@@69 t2@@53 t3@@41 t4@@29 t5@@17 f@@62 h1@@39 bx0@@60 bx1@@49 bx2@@38 bx3@@27 bx4@@16)) )))
(assert (forall ((t0@@91 T@U) (t1@@70 T@U) (t2@@54 T@U) (t3@@42 T@U) (t4@@30 T@U) (t5@@18 T@U) (h0@@40 T@U) (h1@@40 T@U) (f@@63 T@U) (bx0@@61 T@U) (bx1@@50 T@U) (bx2@@39 T@U) (bx3@@28 T@U) (bx4@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@91) TyType) (= (type t1@@70) TyType)) (= (type t2@@54) TyType)) (= (type t3@@42) TyType)) (= (type t4@@30) TyType)) (= (type t5@@18) TyType)) (= (type h0@@40) (MapType1Type refType))) (= (type h1@@40) (MapType1Type refType))) (= (type f@@63) HandleTypeType)) (= (type bx0@@61) BoxType)) (= (type bx1@@50) BoxType)) (= (type bx2@@39) BoxType)) (= (type bx3@@28) BoxType)) (= (type bx4@@17) BoxType)) (and (and (and ($HeapSucc h0@@40 h1@@40) (and ($IsGoodHeap h0@@40) ($IsGoodHeap h1@@40))) (and (and (and (and (and ($IsBox bx0@@61 t0@@91) ($IsBox bx1@@50 t1@@70)) ($IsBox bx2@@39 t2@@54)) ($IsBox bx3@@28 t3@@42)) ($IsBox bx4@@17 t4@@30)) ($Is f@@63 (Tclass._System.___hFunc5 t0@@91 t1@@70 t2@@54 t3@@42 t4@@30 t5@@18)))) (forall ((o@@79 T@U) (fld@@39 T@U) ) (! (let ((a@@117 (FieldTypeInv0 (type fld@@39)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@39) (FieldType a@@117))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads5 t0@@91 t1@@70 t2@@54 t3@@42 t4@@30 t5@@18 f@@63 h0@@40 bx0@@61 bx1@@50 bx2@@39 bx3@@28 bx4@@17) ($Box o@@79))))) (= (MapType1Select h0@@40 o@@79 fld@@39) (MapType1Select h1@@40 o@@79 fld@@39)))) :qid |unknown.0:0| :skolemid |817| :no-pattern (type o@@79) :no-pattern (type fld@@39) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@39) :no-pattern (U_2_bool fld@@39) )))) (= (Apply5 t0@@91 t1@@70 t2@@54 t3@@42 t4@@30 t5@@18 f@@63 h0@@40 bx0@@61 bx1@@50 bx2@@39 bx3@@28 bx4@@17) (Apply5 t0@@91 t1@@70 t2@@54 t3@@42 t4@@30 t5@@18 f@@63 h1@@40 bx0@@61 bx1@@50 bx2@@39 bx3@@28 bx4@@17))) :qid |unknown.0:0| :skolemid |818| :pattern ( ($HeapSucc h0@@40 h1@@40) (Apply5 t0@@91 t1@@70 t2@@54 t3@@42 t4@@30 t5@@18 f@@63 h1@@40 bx0@@61 bx1@@50 bx2@@39 bx3@@28 bx4@@17)) )))
(assert (forall ((t0@@92 T@U) (t1@@71 T@U) (t2@@55 T@U) (t3@@43 T@U) (t4@@31 T@U) (t5@@19 T@U) (h0@@41 T@U) (h1@@41 T@U) (f@@64 T@U) (bx0@@62 T@U) (bx1@@51 T@U) (bx2@@40 T@U) (bx3@@29 T@U) (bx4@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@92) TyType) (= (type t1@@71) TyType)) (= (type t2@@55) TyType)) (= (type t3@@43) TyType)) (= (type t4@@31) TyType)) (= (type t5@@19) TyType)) (= (type h0@@41) (MapType1Type refType))) (= (type h1@@41) (MapType1Type refType))) (= (type f@@64) HandleTypeType)) (= (type bx0@@62) BoxType)) (= (type bx1@@51) BoxType)) (= (type bx2@@40) BoxType)) (= (type bx3@@29) BoxType)) (= (type bx4@@18) BoxType)) (and (and (and ($HeapSucc h0@@41 h1@@41) (and ($IsGoodHeap h0@@41) ($IsGoodHeap h1@@41))) (and (and (and (and (and ($IsBox bx0@@62 t0@@92) ($IsBox bx1@@51 t1@@71)) ($IsBox bx2@@40 t2@@55)) ($IsBox bx3@@29 t3@@43)) ($IsBox bx4@@18 t4@@31)) ($Is f@@64 (Tclass._System.___hFunc5 t0@@92 t1@@71 t2@@55 t3@@43 t4@@31 t5@@19)))) (forall ((o@@80 T@U) (fld@@40 T@U) ) (! (let ((a@@118 (FieldTypeInv0 (type fld@@40)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@40) (FieldType a@@118))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads5 t0@@92 t1@@71 t2@@55 t3@@43 t4@@31 t5@@19 f@@64 h1@@41 bx0@@62 bx1@@51 bx2@@40 bx3@@29 bx4@@18) ($Box o@@80))))) (= (MapType1Select h0@@41 o@@80 fld@@40) (MapType1Select h1@@41 o@@80 fld@@40)))) :qid |unknown.0:0| :skolemid |819| :no-pattern (type o@@80) :no-pattern (type fld@@40) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@40) :no-pattern (U_2_bool fld@@40) )))) (= (Apply5 t0@@92 t1@@71 t2@@55 t3@@43 t4@@31 t5@@19 f@@64 h0@@41 bx0@@62 bx1@@51 bx2@@40 bx3@@29 bx4@@18) (Apply5 t0@@92 t1@@71 t2@@55 t3@@43 t4@@31 t5@@19 f@@64 h1@@41 bx0@@62 bx1@@51 bx2@@40 bx3@@29 bx4@@18))) :qid |unknown.0:0| :skolemid |820| :pattern ( ($HeapSucc h0@@41 h1@@41) (Apply5 t0@@92 t1@@71 t2@@55 t3@@43 t4@@31 t5@@19 f@@64 h1@@41 bx0@@62 bx1@@51 bx2@@40 bx3@@29 bx4@@18)) )))
(assert (forall ((f@@65 T@U) (t0@@93 T@U) (t1@@72 T@U) (t2@@56 T@U) (t3@@44 T@U) (t4@@32 T@U) (t5@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@65) HandleTypeType) (= (type t0@@93) TyType)) (= (type t1@@72) TyType)) (= (type t2@@56) TyType)) (= (type t3@@44) TyType)) (= (type t4@@32) TyType)) (= (type t5@@20) TyType)) (and (=> ($Is f@@65 (Tclass._System.___hFunc5 t0@@93 t1@@72 t2@@56 t3@@44 t4@@32 t5@@20)) (forall ((h@@58 T@U) (bx0@@63 T@U) (bx1@@52 T@U) (bx2@@41 T@U) (bx3@@30 T@U) (bx4@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@58) (MapType1Type refType)) (= (type bx0@@63) BoxType)) (= (type bx1@@52) BoxType)) (= (type bx2@@41) BoxType)) (= (type bx3@@30) BoxType)) (= (type bx4@@19) BoxType)) (and (and ($IsGoodHeap h@@58) (and (and (and (and ($IsBox bx0@@63 t0@@93) ($IsBox bx1@@52 t1@@72)) ($IsBox bx2@@41 t2@@56)) ($IsBox bx3@@30 t3@@44)) ($IsBox bx4@@19 t4@@32))) (Requires5 t0@@93 t1@@72 t2@@56 t3@@44 t4@@32 t5@@20 f@@65 h@@58 bx0@@63 bx1@@52 bx2@@41 bx3@@30 bx4@@19))) ($IsBox (Apply5 t0@@93 t1@@72 t2@@56 t3@@44 t4@@32 t5@@20 f@@65 h@@58 bx0@@63 bx1@@52 bx2@@41 bx3@@30 bx4@@19) t5@@20)) :qid |DafnyPre.405:12| :skolemid |821| :pattern ( (Apply5 t0@@93 t1@@72 t2@@56 t3@@44 t4@@32 t5@@20 f@@65 h@@58 bx0@@63 bx1@@52 bx2@@41 bx3@@30 bx4@@19)) ))) (=> (forall ((h@@59 T@U) (bx0@@64 T@U) (bx1@@53 T@U) (bx2@@42 T@U) (bx3@@31 T@U) (bx4@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@59) (MapType1Type refType)) (= (type bx0@@64) BoxType)) (= (type bx1@@53) BoxType)) (= (type bx2@@42) BoxType)) (= (type bx3@@31) BoxType)) (= (type bx4@@20) BoxType)) (and (and ($IsGoodHeap h@@59) (and (and (and (and ($IsBox bx0@@64 t0@@93) ($IsBox bx1@@53 t1@@72)) ($IsBox bx2@@42 t2@@56)) ($IsBox bx3@@31 t3@@44)) ($IsBox bx4@@20 t4@@32))) (Requires5 t0@@93 t1@@72 t2@@56 t3@@44 t4@@32 t5@@20 f@@65 h@@59 bx0@@64 bx1@@53 bx2@@42 bx3@@31 bx4@@20))) ($IsBox (Apply5 t0@@93 t1@@72 t2@@56 t3@@44 t4@@32 t5@@20 f@@65 h@@59 bx0@@64 bx1@@53 bx2@@42 bx3@@31 bx4@@20) t5@@20)) :qid |DafnyPre.405:12| :skolemid |821| :pattern ( (Apply5 t0@@93 t1@@72 t2@@56 t3@@44 t4@@32 t5@@20 f@@65 h@@59 bx0@@64 bx1@@53 bx2@@42 bx3@@31 bx4@@20)) )) ($Is f@@65 (Tclass._System.___hFunc5 t0@@93 t1@@72 t2@@56 t3@@44 t4@@32 t5@@20))))) :qid |unknown.0:0| :skolemid |822| :pattern ( ($Is f@@65 (Tclass._System.___hFunc5 t0@@93 t1@@72 t2@@56 t3@@44 t4@@32 t5@@20))) )))
(assert (forall ((f@@66 T@U) (t0@@94 T@U) (t1@@73 T@U) (t2@@57 T@U) (t3@@45 T@U) (t4@@33 T@U) (t5@@21 T@U) (u0@@5 T@U) (u1@@4 T@U) (u2@@3 T@U) (u3@@2 T@U) (u4@@1 T@U) (u5@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@66) HandleTypeType) (= (type t0@@94) TyType)) (= (type t1@@73) TyType)) (= (type t2@@57) TyType)) (= (type t3@@45) TyType)) (= (type t4@@33) TyType)) (= (type t5@@21) TyType)) (= (type u0@@5) TyType)) (= (type u1@@4) TyType)) (= (type u2@@3) TyType)) (= (type u3@@2) TyType)) (= (type u4@@1) TyType)) (= (type u5@@0) TyType)) (and (and (and (and (and (and ($Is f@@66 (Tclass._System.___hFunc5 t0@@94 t1@@73 t2@@57 t3@@45 t4@@33 t5@@21)) (forall ((bx@@76 T@U) ) (!  (=> (and (= (type bx@@76) BoxType) ($IsBox bx@@76 u0@@5)) ($IsBox bx@@76 t0@@94)) :qid |unknown.0:0| :skolemid |823| :pattern ( ($IsBox bx@@76 u0@@5)) :pattern ( ($IsBox bx@@76 t0@@94)) ))) (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 u1@@4)) ($IsBox bx@@77 t1@@73)) :qid |unknown.0:0| :skolemid |824| :pattern ( ($IsBox bx@@77 u1@@4)) :pattern ( ($IsBox bx@@77 t1@@73)) ))) (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 u2@@3)) ($IsBox bx@@78 t2@@57)) :qid |unknown.0:0| :skolemid |825| :pattern ( ($IsBox bx@@78 u2@@3)) :pattern ( ($IsBox bx@@78 t2@@57)) ))) (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 u3@@2)) ($IsBox bx@@79 t3@@45)) :qid |unknown.0:0| :skolemid |826| :pattern ( ($IsBox bx@@79 u3@@2)) :pattern ( ($IsBox bx@@79 t3@@45)) ))) (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 u4@@1)) ($IsBox bx@@80 t4@@33)) :qid |unknown.0:0| :skolemid |827| :pattern ( ($IsBox bx@@80 u4@@1)) :pattern ( ($IsBox bx@@80 t4@@33)) ))) (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 t5@@21)) ($IsBox bx@@81 u5@@0)) :qid |unknown.0:0| :skolemid |828| :pattern ( ($IsBox bx@@81 t5@@21)) :pattern ( ($IsBox bx@@81 u5@@0)) )))) ($Is f@@66 (Tclass._System.___hFunc5 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0))) :qid |unknown.0:0| :skolemid |829| :pattern ( ($Is f@@66 (Tclass._System.___hFunc5 t0@@94 t1@@73 t2@@57 t3@@45 t4@@33 t5@@21)) ($Is f@@66 (Tclass._System.___hFunc5 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0))) )))
(assert (forall ((f@@67 T@U) (t0@@95 T@U) (t1@@74 T@U) (t2@@58 T@U) (t3@@46 T@U) (t4@@34 T@U) (t5@@22 T@U) (h@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@67) HandleTypeType) (= (type t0@@95) TyType)) (= (type t1@@74) TyType)) (= (type t2@@58) TyType)) (= (type t3@@46) TyType)) (= (type t4@@34) TyType)) (= (type t5@@22) TyType)) (= (type h@@60) (MapType1Type refType))) ($IsGoodHeap h@@60)) ($IsAlloc f@@67 (Tclass._System.___hFunc5 t0@@95 t1@@74 t2@@58 t3@@46 t4@@34 t5@@22) h@@60)) :qid |unknown.0:0| :skolemid |831| :pattern ( ($IsAlloc f@@67 (Tclass._System.___hFunc5 t0@@95 t1@@74 t2@@58 t3@@46 t4@@34 t5@@22) h@@60)) )))
(assert (forall ((arg0@@218 T@U) (arg1@@123 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@218 arg1@@123)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@218 arg1@@123)) )))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (!  (=> (and (= (type |a#11#0#0|) BoxType) (= (type |a#11#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#11#0#0| |a#11#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |832| :pattern ( (|#_System._tuple#2._#Make2| |a#11#0#0| |a#11#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (= (type d@@4) DatatypeTypeType) (and (=> (_System.__tuple_h2.___hMake2_q d@@4) (= (DatatypeCtorId d@@4) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@4) |##_System._tuple#2._#Make2|) (_System.__tuple_h2.___hMake2_q d@@4)))) :qid |unknown.0:0| :skolemid |833| :pattern ( (_System.__tuple_h2.___hMake2_q d@@4)) )))
(assert (forall ((d@@5 T@U) ) (!  (=> (and (= (type d@@5) DatatypeTypeType) (_System.__tuple_h2.___hMake2_q d@@5)) (exists ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (!  (and (and (= (type |a#12#0#0|) BoxType) (= (type |a#12#1#0|) BoxType)) (= d@@5 (|#_System._tuple#2._#Make2| |a#12#0#0| |a#12#1#0|))) :qid |unknown.0:0| :skolemid |834| :no-pattern (type |a#12#0#0|) :no-pattern (type |a#12#1#0|) :no-pattern (U_2_int |a#12#0#0|) :no-pattern (U_2_bool |a#12#0#0|) :no-pattern (U_2_int |a#12#1#0|) :no-pattern (U_2_bool |a#12#1#0|) ))) :qid |unknown.0:0| :skolemid |835| :pattern ( (_System.__tuple_h2.___hMake2_q d@@5)) )))
(assert (forall ((arg0@@219 T@U) (arg1@@124 T@U) ) (! (= (type (Tclass._System.__tuple_h2 arg0@@219 arg1@@124)) TyType) :qid |funType:Tclass._System.__tuple_h2| :pattern ( (Tclass._System.__tuple_h2 arg0@@219 arg1@@124)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@48| T@U) ) (!  (=> (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@48|) TyType)) (= (Tag (Tclass._System.__tuple_h2 |#$T0@@51| |#$T1@@48|)) Tagclass._System.__tuple_h2)) :qid |unknown.0:0| :skolemid |836| :pattern ( (Tclass._System.__tuple_h2 |#$T0@@51| |#$T1@@48|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.__tuple_h2_0 arg0@@220)) TyType) :qid |funType:Tclass._System.__tuple_h2_0| :pattern ( (Tclass._System.__tuple_h2_0 arg0@@220)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@49| T@U) ) (!  (=> (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@49|) TyType)) (= (Tclass._System.__tuple_h2_0 (Tclass._System.__tuple_h2 |#$T0@@52| |#$T1@@49|)) |#$T0@@52|)) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.__tuple_h2 |#$T0@@52| |#$T1@@49|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.__tuple_h2_1 arg0@@221)) TyType) :qid |funType:Tclass._System.__tuple_h2_1| :pattern ( (Tclass._System.__tuple_h2_1 arg0@@221)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@50| T@U) ) (!  (=> (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@50|) TyType)) (= (Tclass._System.__tuple_h2_1 (Tclass._System.__tuple_h2 |#$T0@@53| |#$T1@@50|)) |#$T1@@50|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.__tuple_h2 |#$T0@@53| |#$T1@@50|)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@51| T@U) (bx@@82 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@51|) TyType)) (= (type bx@@82) BoxType)) ($IsBox bx@@82 (Tclass._System.__tuple_h2 |#$T0@@54| |#$T1@@51|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@82)) bx@@82) ($Is ($Unbox DatatypeTypeType bx@@82) (Tclass._System.__tuple_h2 |#$T0@@54| |#$T1@@51|)))) :qid |unknown.0:0| :skolemid |839| :pattern ( ($IsBox bx@@82 (Tclass._System.__tuple_h2 |#$T0@@54| |#$T1@@51|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@52| T@U) (|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |a#13#0#0|) BoxType)) (= (type |a#13#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#13#0#0| |a#13#1#0|) (Tclass._System.__tuple_h2 |#$T0@@55| |#$T1@@52|)) (and ($IsBox |a#13#0#0| |#$T0@@55|) ($IsBox |a#13#1#0| |#$T1@@52|))) (=> (and ($IsBox |a#13#0#0| |#$T0@@55|) ($IsBox |a#13#1#0| |#$T1@@52|)) ($Is (|#_System._tuple#2._#Make2| |a#13#0#0| |a#13#1#0|) (Tclass._System.__tuple_h2 |#$T0@@55| |#$T1@@52|))))) :qid |unknown.0:0| :skolemid |840| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#13#0#0| |a#13#1#0|) (Tclass._System.__tuple_h2 |#$T0@@55| |#$T1@@52|))) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@53| T@U) (|a#14#0#0| T@U) (|a#14#1#0| T@U) ($h@@5 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |a#14#0#0|) BoxType)) (= (type |a#14#1#0|) BoxType)) (= (type $h@@5) (MapType1Type refType))) ($IsGoodHeap $h@@5)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#14#0#0| |a#14#1#0|) (Tclass._System.__tuple_h2 |#$T0@@56| |#$T1@@53|) $h@@5) (and ($IsAllocBox |a#14#0#0| |#$T0@@56| $h@@5) ($IsAllocBox |a#14#1#0| |#$T1@@53| $h@@5))) (=> (and ($IsAllocBox |a#14#0#0| |#$T0@@56| $h@@5) ($IsAllocBox |a#14#1#0| |#$T1@@53| $h@@5)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#14#0#0| |a#14#1#0|) (Tclass._System.__tuple_h2 |#$T0@@56| |#$T1@@53|) $h@@5)))) :qid |unknown.0:0| :skolemid |841| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#14#0#0| |a#14#1#0|) (Tclass._System.__tuple_h2 |#$T0@@56| |#$T1@@53|) $h@@5)) )))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (!  (=> (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#15#0#0|) (Lit |a#15#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#15#0#0| |a#15#1#0|)))) :qid |unknown.0:0| :skolemid |842| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#15#0#0|) (Lit |a#15#1#0|))) )))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (!  (=> (and (= (type |a#16#0#0|) BoxType) (= (type |a#16#1#0|) BoxType)) (= (_System.__tuple_h2._0 (|#_System._tuple#2._#Make2| |a#16#0#0| |a#16#1#0|)) |a#16#0#0|)) :qid |unknown.0:0| :skolemid |843| :pattern ( (|#_System._tuple#2._#Make2| |a#16#0#0| |a#16#1#0|)) )))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) ) (!  (=> (and (= (type |a#17#0#0|) BoxType) (= (type |a#17#1#0|) BoxType)) (< (BoxRank |a#17#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#17#0#0| |a#17#1#0|)))) :qid |unknown.0:0| :skolemid |844| :pattern ( (|#_System._tuple#2._#Make2| |a#17#0#0| |a#17#1#0|)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (!  (=> (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (_System.__tuple_h2._1 (|#_System._tuple#2._#Make2| |a#18#0#0| |a#18#1#0|)) |a#18#1#0|)) :qid |unknown.0:0| :skolemid |845| :pattern ( (|#_System._tuple#2._#Make2| |a#18#0#0| |a#18#1#0|)) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (!  (=> (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (< (BoxRank |a#19#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#19#0#0| |a#19#1#0|)))) :qid |unknown.0:0| :skolemid |846| :pattern ( (|#_System._tuple#2._#Make2| |a#19#0#0| |a#19#1#0|)) )))
(assert (forall ((d@@6 T@U) ) (!  (=> (and (= (type d@@6) DatatypeTypeType) (|$IsA#_System.__tuple_h2| d@@6)) (_System.__tuple_h2.___hMake2_q d@@6)) :qid |unknown.0:0| :skolemid |847| :pattern ( (|$IsA#_System.__tuple_h2| d@@6)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@54| T@U) (d@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@54|) TyType)) (= (type d@@7) DatatypeTypeType)) ($Is d@@7 (Tclass._System.__tuple_h2 |#$T0@@57| |#$T1@@54|))) (_System.__tuple_h2.___hMake2_q d@@7)) :qid |unknown.0:0| :skolemid |848| :pattern ( (_System.__tuple_h2.___hMake2_q d@@7) ($Is d@@7 (Tclass._System.__tuple_h2 |#$T0@@57| |#$T1@@54|))) )))
(assert (forall ((arg0@@222 T@U) (arg1@@125 T@U) (arg2@@88 T@U) ) (! (= (type (|#_module.SHA256_state.SHA256_state_c| arg0@@222 arg1@@125 arg2@@88)) DatatypeTypeType) :qid |funType:#_module.SHA256_state.SHA256_state_c| :pattern ( (|#_module.SHA256_state.SHA256_state_c| arg0@@222 arg1@@125 arg2@@88)) )))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) (|a#20#2#0| T@U) ) (!  (=> (and (and (= (type |a#20#0#0|) (SeqType BoxType)) (= (type |a#20#1#0|) (SeqType BoxType))) (= (type |a#20#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.SHA256_state.SHA256_state_c| |a#20#0#0| |a#20#1#0| |a#20#2#0|)) |##_module.SHA256_state.SHA256_state_c|)) :qid |sha256id.8:40| :skolemid |849| :pattern ( (|#_module.SHA256_state.SHA256_state_c| |a#20#0#0| |a#20#1#0| |a#20#2#0|)) )))
(assert (forall ((d@@8 T@U) ) (!  (=> (= (type d@@8) DatatypeTypeType) (and (=> (_module.SHA256__state.SHA256__state__c_q d@@8) (= (DatatypeCtorId d@@8) |##_module.SHA256_state.SHA256_state_c|)) (=> (= (DatatypeCtorId d@@8) |##_module.SHA256_state.SHA256_state_c|) (_module.SHA256__state.SHA256__state__c_q d@@8)))) :qid |unknown.0:0| :skolemid |850| :pattern ( (_module.SHA256__state.SHA256__state__c_q d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) (_module.SHA256__state.SHA256__state__c_q d@@9)) (exists ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) ) (!  (and (and (and (= (type |a#21#0#0|) (SeqType BoxType)) (= (type |a#21#1#0|) (SeqType BoxType))) (= (type |a#21#2#0|) DatatypeTypeType)) (= d@@9 (|#_module.SHA256_state.SHA256_state_c| |a#21#0#0| |a#21#1#0| |a#21#2#0|))) :qid |sha256id.8:40| :skolemid |851| :no-pattern (type |a#21#0#0|) :no-pattern (type |a#21#1#0|) :no-pattern (type |a#21#2#0|) :no-pattern (U_2_int |a#21#0#0|) :no-pattern (U_2_bool |a#21#0#0|) :no-pattern (U_2_int |a#21#1#0|) :no-pattern (U_2_bool |a#21#1#0|) :no-pattern (U_2_int |a#21#2#0|) :no-pattern (U_2_bool |a#21#2#0|) ))) :qid |unknown.0:0| :skolemid |852| :pattern ( (_module.SHA256__state.SHA256__state__c_q d@@9)) )))
(assert (= (type Tclass._module.word) TyType))
(assert (= (Tag Tclass._module.word) Tagclass._module.word))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass._module.word)) (and (= ($Box ($Unbox intType bx@@83)) bx@@83) ($Is ($Unbox intType bx@@83) Tclass._module.word))) :qid |unknown.0:0| :skolemid |853| :pattern ( ($IsBox bx@@83 Tclass._module.word)) )))
(assert (= (type Tclass._module.atoh__Type) TyType))
(assert (= (Tag Tclass._module.atoh__Type) Tagclass._module.atoh__Type))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass._module.atoh__Type)) (and (= ($Box ($Unbox DatatypeTypeType bx@@84)) bx@@84) ($Is ($Unbox DatatypeTypeType bx@@84) Tclass._module.atoh__Type))) :qid |unknown.0:0| :skolemid |854| :pattern ( ($IsBox bx@@84 Tclass._module.atoh__Type)) )))
(assert (= (type Tclass._module.SHA256__state) TyType))
(assert (= (Tag Tclass._module.SHA256__state) Tagclass._module.SHA256__state))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass._module.SHA256__state)) (and (= ($Box ($Unbox DatatypeTypeType bx@@85)) bx@@85) ($Is ($Unbox DatatypeTypeType bx@@85) Tclass._module.SHA256__state))) :qid |unknown.0:0| :skolemid |855| :pattern ( ($IsBox bx@@85 Tclass._module.SHA256__state)) )))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) (|a#22#2#0| T@U) ) (!  (=> (and (and (= (type |a#22#0#0|) (SeqType BoxType)) (= (type |a#22#1#0|) (SeqType BoxType))) (= (type |a#22#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.SHA256_state.SHA256_state_c| |a#22#0#0| |a#22#1#0| |a#22#2#0|) Tclass._module.SHA256__state) (and (and ($Is |a#22#0#0| (TSeq Tclass._module.word)) ($Is |a#22#1#0| (TSeq Tclass._module.word))) ($Is |a#22#2#0| Tclass._module.atoh__Type))) (=> (and (and ($Is |a#22#0#0| (TSeq Tclass._module.word)) ($Is |a#22#1#0| (TSeq Tclass._module.word))) ($Is |a#22#2#0| Tclass._module.atoh__Type)) ($Is (|#_module.SHA256_state.SHA256_state_c| |a#22#0#0| |a#22#1#0| |a#22#2#0|) Tclass._module.SHA256__state)))) :qid |sha256id.8:40| :skolemid |856| :pattern ( ($Is (|#_module.SHA256_state.SHA256_state_c| |a#22#0#0| |a#22#1#0| |a#22#2#0|) Tclass._module.SHA256__state)) )))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| T@U) (|a#23#2#0| T@U) ($h@@6 T@U) ) (!  (=> (and (and (and (and (= (type |a#23#0#0|) (SeqType BoxType)) (= (type |a#23#1#0|) (SeqType BoxType))) (= (type |a#23#2#0|) DatatypeTypeType)) (= (type $h@@6) (MapType1Type refType))) ($IsGoodHeap $h@@6)) (and (=> ($IsAlloc (|#_module.SHA256_state.SHA256_state_c| |a#23#0#0| |a#23#1#0| |a#23#2#0|) Tclass._module.SHA256__state $h@@6) (and (and ($IsAlloc |a#23#0#0| (TSeq Tclass._module.word) $h@@6) ($IsAlloc |a#23#1#0| (TSeq Tclass._module.word) $h@@6)) ($IsAlloc |a#23#2#0| Tclass._module.atoh__Type $h@@6))) (=> (and (and ($IsAlloc |a#23#0#0| (TSeq Tclass._module.word) $h@@6) ($IsAlloc |a#23#1#0| (TSeq Tclass._module.word) $h@@6)) ($IsAlloc |a#23#2#0| Tclass._module.atoh__Type $h@@6)) ($IsAlloc (|#_module.SHA256_state.SHA256_state_c| |a#23#0#0| |a#23#1#0| |a#23#2#0|) Tclass._module.SHA256__state $h@@6)))) :qid |sha256id.8:40| :skolemid |857| :pattern ( ($IsAlloc (|#_module.SHA256_state.SHA256_state_c| |a#23#0#0| |a#23#1#0| |a#23#2#0|) Tclass._module.SHA256__state $h@@6)) )))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| T@U) (|a#24#2#0| T@U) ) (!  (=> (and (and (= (type |a#24#0#0|) (SeqType BoxType)) (= (type |a#24#1#0|) (SeqType BoxType))) (= (type |a#24#2#0|) DatatypeTypeType)) (= (|#_module.SHA256_state.SHA256_state_c| (Lit |a#24#0#0|) (Lit |a#24#1#0|) (Lit |a#24#2#0|)) (Lit (|#_module.SHA256_state.SHA256_state_c| |a#24#0#0| |a#24#1#0| |a#24#2#0|)))) :qid |sha256id.8:40| :skolemid |858| :pattern ( (|#_module.SHA256_state.SHA256_state_c| (Lit |a#24#0#0|) (Lit |a#24#1#0|) (Lit |a#24#2#0|))) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (_module.SHA256__state.H arg0@@223)) (SeqType BoxType)) :qid |funType:_module.SHA256__state.H| :pattern ( (_module.SHA256__state.H arg0@@223)) )))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| T@U) (|a#25#2#0| T@U) ) (!  (=> (and (and (= (type |a#25#0#0|) (SeqType BoxType)) (= (type |a#25#1#0|) (SeqType BoxType))) (= (type |a#25#2#0|) DatatypeTypeType)) (= (_module.SHA256__state.H (|#_module.SHA256_state.SHA256_state_c| |a#25#0#0| |a#25#1#0| |a#25#2#0|)) |a#25#0#0|)) :qid |sha256id.8:40| :skolemid |859| :pattern ( (|#_module.SHA256_state.SHA256_state_c| |a#25#0#0| |a#25#1#0| |a#25#2#0|)) )))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) (|a#26#2#0| T@U) (i@@31 Int) ) (!  (=> (and (and (and (= (type |a#26#0#0|) (SeqType BoxType)) (= (type |a#26#1#0|) (SeqType BoxType))) (= (type |a#26#2#0|) DatatypeTypeType)) (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#26#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#26#0#0| i@@31))) (DtRank (|#_module.SHA256_state.SHA256_state_c| |a#26#0#0| |a#26#1#0| |a#26#2#0|)))) :qid |sha256id.8:40| :skolemid |860| :pattern ( (|Seq#Index| |a#26#0#0| i@@31) (|#_module.SHA256_state.SHA256_state_c| |a#26#0#0| |a#26#1#0| |a#26#2#0|)) )))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| T@U) (|a#27#2#0| T@U) ) (!  (=> (and (and (= (type |a#27#0#0|) (SeqType BoxType)) (= (type |a#27#1#0|) (SeqType BoxType))) (= (type |a#27#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#27#0#0|) (DtRank (|#_module.SHA256_state.SHA256_state_c| |a#27#0#0| |a#27#1#0| |a#27#2#0|)))) :qid |sha256id.8:40| :skolemid |861| :pattern ( (|#_module.SHA256_state.SHA256_state_c| |a#27#0#0| |a#27#1#0| |a#27#2#0|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (_module.SHA256__state.W arg0@@224)) (SeqType BoxType)) :qid |funType:_module.SHA256__state.W| :pattern ( (_module.SHA256__state.W arg0@@224)) )))
(assert (forall ((|a#28#0#0| T@U) (|a#28#1#0| T@U) (|a#28#2#0| T@U) ) (!  (=> (and (and (= (type |a#28#0#0|) (SeqType BoxType)) (= (type |a#28#1#0|) (SeqType BoxType))) (= (type |a#28#2#0|) DatatypeTypeType)) (= (_module.SHA256__state.W (|#_module.SHA256_state.SHA256_state_c| |a#28#0#0| |a#28#1#0| |a#28#2#0|)) |a#28#1#0|)) :qid |sha256id.8:40| :skolemid |862| :pattern ( (|#_module.SHA256_state.SHA256_state_c| |a#28#0#0| |a#28#1#0| |a#28#2#0|)) )))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) (|a#29#2#0| T@U) (i@@32 Int) ) (!  (=> (and (and (and (= (type |a#29#0#0|) (SeqType BoxType)) (= (type |a#29#1#0|) (SeqType BoxType))) (= (type |a#29#2#0|) DatatypeTypeType)) (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#29#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#29#1#0| i@@32))) (DtRank (|#_module.SHA256_state.SHA256_state_c| |a#29#0#0| |a#29#1#0| |a#29#2#0|)))) :qid |sha256id.8:40| :skolemid |863| :pattern ( (|Seq#Index| |a#29#1#0| i@@32) (|#_module.SHA256_state.SHA256_state_c| |a#29#0#0| |a#29#1#0| |a#29#2#0|)) )))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| T@U) (|a#30#2#0| T@U) ) (!  (=> (and (and (= (type |a#30#0#0|) (SeqType BoxType)) (= (type |a#30#1#0|) (SeqType BoxType))) (= (type |a#30#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#30#1#0|) (DtRank (|#_module.SHA256_state.SHA256_state_c| |a#30#0#0| |a#30#1#0| |a#30#2#0|)))) :qid |sha256id.8:40| :skolemid |864| :pattern ( (|#_module.SHA256_state.SHA256_state_c| |a#30#0#0| |a#30#1#0| |a#30#2#0|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (_module.SHA256__state.atoh arg0@@225)) DatatypeTypeType) :qid |funType:_module.SHA256__state.atoh| :pattern ( (_module.SHA256__state.atoh arg0@@225)) )))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| T@U) (|a#31#2#0| T@U) ) (!  (=> (and (and (= (type |a#31#0#0|) (SeqType BoxType)) (= (type |a#31#1#0|) (SeqType BoxType))) (= (type |a#31#2#0|) DatatypeTypeType)) (= (_module.SHA256__state.atoh (|#_module.SHA256_state.SHA256_state_c| |a#31#0#0| |a#31#1#0| |a#31#2#0|)) |a#31#2#0|)) :qid |sha256id.8:40| :skolemid |865| :pattern ( (|#_module.SHA256_state.SHA256_state_c| |a#31#0#0| |a#31#1#0| |a#31#2#0|)) )))
(assert (forall ((|a#32#0#0| T@U) (|a#32#1#0| T@U) (|a#32#2#0| T@U) ) (!  (=> (and (and (= (type |a#32#0#0|) (SeqType BoxType)) (= (type |a#32#1#0|) (SeqType BoxType))) (= (type |a#32#2#0|) DatatypeTypeType)) (< (DtRank |a#32#2#0|) (DtRank (|#_module.SHA256_state.SHA256_state_c| |a#32#0#0| |a#32#1#0| |a#32#2#0|)))) :qid |sha256id.8:40| :skolemid |866| :pattern ( (|#_module.SHA256_state.SHA256_state_c| |a#32#0#0| |a#32#1#0| |a#32#2#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (and (= (type d@@10) DatatypeTypeType) (|$IsA#_module.SHA256__state| d@@10)) (_module.SHA256__state.SHA256__state__c_q d@@10)) :qid |unknown.0:0| :skolemid |867| :pattern ( (|$IsA#_module.SHA256__state| d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) ($Is d@@11 Tclass._module.SHA256__state)) (_module.SHA256__state.SHA256__state__c_q d@@11)) :qid |unknown.0:0| :skolemid |868| :pattern ( (_module.SHA256__state.SHA256__state__c_q d@@11) ($Is d@@11 Tclass._module.SHA256__state)) )))
(assert (= (type Tclass._module.__default) TyType))
(assert (= (Tag Tclass._module.__default) Tagclass._module.__default))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass._module.__default)) (and (= ($Box ($Unbox refType bx@@86)) bx@@86) ($Is ($Unbox refType bx@@86) Tclass._module.__default))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($IsBox bx@@86 Tclass._module.__default)) )))
(assert (forall (($o@@5 T@U) ) (!  (=> (= (type $o@@5) refType) (and (=> ($Is $o@@5 Tclass._module.__default) (or (= $o@@5 null) (= (dtype $o@@5) Tclass._module.__default))) (=> (or (= $o@@5 null) (= (dtype $o@@5) Tclass._module.__default)) ($Is $o@@5 Tclass._module.__default)))) :qid |unknown.0:0| :skolemid |870| :pattern ( ($Is $o@@5 Tclass._module.__default)) )))
(assert (forall (($o@@6 T@U) ($h@@7 T@U) ) (!  (=> (and (= (type $o@@6) refType) (= (type $h@@7) (MapType1Type refType))) (and (=> ($IsAlloc $o@@6 Tclass._module.__default $h@@7) (or (= $o@@6 null) (U_2_bool (MapType1Select $h@@7 $o@@6 alloc)))) (=> (or (= $o@@6 null) (U_2_bool (MapType1Select $h@@7 $o@@6 alloc))) ($IsAlloc $o@@6 Tclass._module.__default $h@@7)))) :qid |unknown.0:0| :skolemid |871| :pattern ( ($IsAlloc $o@@6 Tclass._module.__default $h@@7)) )))
(assert (= (type Tclass._module.SHA256Trace) TyType))
(assert (= (Tag Tclass._module.SHA256Trace) Tagclass._module.SHA256Trace))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass._module.SHA256Trace)) (and (= ($Box ($Unbox DatatypeTypeType bx@@87)) bx@@87) ($Is ($Unbox DatatypeTypeType bx@@87) Tclass._module.SHA256Trace))) :qid |unknown.0:0| :skolemid |872| :pattern ( ($IsBox bx@@87 Tclass._module.SHA256Trace)) )))
(assert  (=> (<= 38 $FunctionContextHeight) (forall ((|z#0| T@U) ) (!  (=> (and (= (type |z#0|) DatatypeTypeType) (or (|_module.__default.PartialSHA256TraceHasCorrectWs#canCall| |z#0|) (and (not (= 38 $FunctionContextHeight)) ($Is |z#0| Tclass._module.SHA256Trace)))) true) :qid |sha256id.10:42| :skolemid |873| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectWs |z#0|)) ))))
(assert (forall (($Heap T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (= (type $Heap) (MapType1Type refType)) (= (type |z#0@@0|) DatatypeTypeType)) (and ($IsGoodHeap $Heap) ($Is |z#0@@0| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.PartialSHA256TraceHasCorrectWs#requires| |z#0@@0|) true) (=> true (|_module.__default.PartialSHA256TraceHasCorrectWs#requires| |z#0@@0|)))) :qid |sha256id.10:11| :skolemid |874| :pattern ( (|_module.__default.PartialSHA256TraceHasCorrectWs#requires| |z#0@@0|) ($IsGoodHeap $Heap)) )))
(assert  (and (and (and (forall ((arg0@@226 T@U) ) (! (= (type (_module.SHA256Trace.W arg0@@226)) (SeqType BoxType)) :qid |funType:_module.SHA256Trace.W| :pattern ( (_module.SHA256Trace.W arg0@@226)) )) (forall ((arg0@@227 T@U) ) (! (= (type (_module.SHA256Trace.M arg0@@227)) (SeqType BoxType)) :qid |funType:_module.SHA256Trace.M| :pattern ( (_module.SHA256Trace.M arg0@@227)) ))) (= (type StartFuel__module._default.SSIG1) LayerTypeType)) (= (type StartFuel__module._default.SSIG0) LayerTypeType)))
(assert  (=> (<= 38 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (= (type $Heap@@0) (MapType1Type refType)) (= (type |z#0@@1|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceHasCorrectWs#canCall| |z#0@@1|) (and (not (= 38 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@0) ($Is |z#0@@1| Tclass._module.SHA256Trace))))) (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|)) (=> (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)) (|Seq#Length| (_module.SHA256Trace.M |z#0@@1|))) (forall ((|blk#0| Int) ) (!  (and (and (and (=> (INTERNAL_le_boogie 0 |blk#0|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (INTERNAL_lt_boogie |blk#0| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|))) (LitInt 64))) (and (=> (INTERNAL_le_boogie 0 |blk#0|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (INTERNAL_lt_boogie |blk#0| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|))))) (=> (and (and (=> (INTERNAL_le_boogie 0 |blk#0|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (INTERNAL_lt_boogie |blk#0| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|))) (=> (and (INTERNAL_le_boogie 0 |blk#0|) (INTERNAL_lt_boogie |blk#0| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@1|) |blk#0|))) (LitInt 16)))) (and (=> (INTERNAL_le_boogie 0 |blk#0|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (INTERNAL_lt_boogie |blk#0| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (and (forall ((|t#0| Int) ) (!  (=> (_module.__default.isUInt32 |t#0|) (and (|_module.__default.TStep#canCall| |t#0|) (=> (and (INTERNAL_le_boogie 0 |t#0|) (INTERNAL_lt_boogie |t#0| 64)) (=> (INTERNAL_le_boogie |t#0| 15) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|)))))) :qid |sha256id.16:22| :skolemid |875| :pattern ( (_module.__default.TStep |t#0|)) )) (=> (forall ((|t#0@@0| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@0|) (=> (and (_module.__default.TStep |t#0@@0|) (and (INTERNAL_le_boogie 0 |t#0@@0|) (INTERNAL_lt_boogie |t#0@@0| 64))) (=> (and (INTERNAL_le_boogie 0 |t#0@@0|) (INTERNAL_le_boogie |t#0@@0| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) |t#0@@0|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@1|) |blk#0|)) |t#0@@0|))))))) :qid |sha256id.16:22| :skolemid |877| :pattern ( (_module.__default.TStep |t#0@@0|)) )) (forall ((|t#1| Int) ) (!  (=> (_module.__default.isUInt32 |t#1|) (and (|_module.__default.TStep#canCall| |t#1|) (=> (and (INTERNAL_le_boogie 0 |t#1|) (INTERNAL_lt_boogie |t#1| 64)) (=> (INTERNAL_le_boogie |t#1| 63) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (|_module.__default.SSIG1#canCall| (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 2)))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 7)))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|) (|_module.__default.SSIG0#canCall| (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 15))))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 15))))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@1|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|)) (INTERNAL_sub_boogie |t#1| 16))))))))))) :qid |sha256id.16:22| :skolemid |876| :pattern ( (_module.__default.TStep |t#1|)) )))))))) :qid |sha256id.13:15| :skolemid |878| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@1|) |blk#0|))) )))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectWs |z#0@@1|) (and (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)) (|Seq#Length| (_module.SHA256Trace.M |z#0@@1|))) (forall ((|blk#0@@0| Int) ) (!  (=> true (and (and (=> (and (INTERNAL_le_boogie 0 |blk#0@@0|) (INTERNAL_lt_boogie |blk#0@@0| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@0|))) (LitInt 64))) (=> (and (INTERNAL_le_boogie 0 |blk#0@@0|) (INTERNAL_lt_boogie |blk#0@@0| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@1|) |blk#0@@0|))) (LitInt 16)))) (=> (and (INTERNAL_le_boogie 0 |blk#0@@0|) (INTERNAL_lt_boogie |blk#0@@0| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (and (forall ((|t#0@@1| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@1|) (=> (and (_module.__default.TStep |t#0@@1|) (and (INTERNAL_le_boogie 0 |t#0@@1|) (INTERNAL_lt_boogie |t#0@@1| 64))) (=> (and (INTERNAL_le_boogie 0 |t#0@@1|) (INTERNAL_le_boogie |t#0@@1| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@0|)) |t#0@@1|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@1|) |blk#0@@0|)) |t#0@@1|))))))) :qid |sha256id.16:22| :skolemid |879| :pattern ( (_module.__default.TStep |t#0@@1|)) )) (forall ((|t#1@@0| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@0|) (=> (and (_module.__default.TStep |t#1@@0|) (and (INTERNAL_le_boogie 0 |t#1@@0|) (INTERNAL_lt_boogie |t#1@@0| 64))) (=> (and (INTERNAL_le_boogie 16 |t#1@@0|) (INTERNAL_le_boogie |t#1@@0| 63)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@0|)) |t#1@@0|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@0|)) (INTERNAL_sub_boogie |t#1@@0| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@0|)) (INTERNAL_sub_boogie |t#1@@0| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@0|)) (INTERNAL_sub_boogie |t#1@@0| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@0|)) (INTERNAL_sub_boogie |t#1@@0| 16))))))))) :qid |sha256id.16:22| :skolemid |880| :pattern ( (_module.__default.TStep |t#1@@0|)) )))))) :qid |sha256id.13:15| :skolemid |881| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@0|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@1|) |blk#0@@0|))) )))) (=> (and (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)) (|Seq#Length| (_module.SHA256Trace.M |z#0@@1|))) (forall ((|blk#0@@1| Int) ) (!  (=> true (and (and (=> (and (INTERNAL_le_boogie 0 |blk#0@@1|) (INTERNAL_lt_boogie |blk#0@@1| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@1|))) (LitInt 64))) (=> (and (INTERNAL_le_boogie 0 |blk#0@@1|) (INTERNAL_lt_boogie |blk#0@@1| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@1|) |blk#0@@1|))) (LitInt 16)))) (=> (and (INTERNAL_le_boogie 0 |blk#0@@1|) (INTERNAL_lt_boogie |blk#0@@1| (|Seq#Length| (_module.SHA256Trace.W |z#0@@1|)))) (and (forall ((|t#0@@2| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@2|) (=> (and (_module.__default.TStep |t#0@@2|) (and (INTERNAL_le_boogie 0 |t#0@@2|) (INTERNAL_lt_boogie |t#0@@2| 64))) (=> (and (INTERNAL_le_boogie 0 |t#0@@2|) (INTERNAL_le_boogie |t#0@@2| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@1|)) |t#0@@2|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@1|) |blk#0@@1|)) |t#0@@2|))))))) :qid |sha256id.16:22| :skolemid |879| :pattern ( (_module.__default.TStep |t#0@@2|)) )) (forall ((|t#1@@1| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@1|) (=> (and (_module.__default.TStep |t#1@@1|) (and (INTERNAL_le_boogie 0 |t#1@@1|) (INTERNAL_lt_boogie |t#1@@1| 64))) (=> (and (INTERNAL_le_boogie 16 |t#1@@1|) (INTERNAL_le_boogie |t#1@@1| 63)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@1|)) |t#1@@1|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@1|)) (INTERNAL_sub_boogie |t#1@@1| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@1|)) (INTERNAL_sub_boogie |t#1@@1| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@1|)) (INTERNAL_sub_boogie |t#1@@1| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@1|)) (INTERNAL_sub_boogie |t#1@@1| 16))))))))) :qid |sha256id.16:22| :skolemid |880| :pattern ( (_module.__default.TStep |t#1@@1|)) )))))) :qid |sha256id.13:15| :skolemid |881| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@1|) |blk#0@@1|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@1|) |blk#0@@1|))) ))) (_module.__default.PartialSHA256TraceHasCorrectWs |z#0@@1|))))) :qid |sha256id.10:11| :skolemid |882| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectWs |z#0@@1|) ($IsGoodHeap $Heap@@0)) ))))
(assert  (=> (<= 38 $FunctionContextHeight) (forall (($Heap@@1 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (= (type $Heap@@1) (MapType1Type refType)) (= (type |z#0@@2|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceHasCorrectWs#canCall| (Lit |z#0@@2|)) (and (not (= 38 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@1) ($Is |z#0@@2| Tclass._module.SHA256Trace))))) (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|))) (=> (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))) (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@2|))))) (forall ((|blk#1| Int) ) (!  (and (and (and (=> (INTERNAL_le_boogie 0 |blk#1|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (INTERNAL_lt_boogie |blk#1| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|))) (LitInt 64))) (and (=> (INTERNAL_le_boogie 0 |blk#1|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (INTERNAL_lt_boogie |blk#1| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)))))) (=> (and (and (=> (INTERNAL_le_boogie 0 |blk#1|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (INTERNAL_lt_boogie |blk#1| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)))) (=> (and (INTERNAL_le_boogie 0 |blk#1|) (INTERNAL_lt_boogie |blk#1| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@2|))) |blk#1|))) (LitInt 16)))) (and (=> (INTERNAL_le_boogie 0 |blk#1|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (INTERNAL_lt_boogie |blk#1| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (and (forall ((|t#2| Int) ) (!  (=> (_module.__default.isUInt32 |t#2|) (and (|_module.__default.TStep#canCall| |t#2|) (=> (and (INTERNAL_le_boogie 0 |t#2|) (INTERNAL_lt_boogie |t#2| 64)) (=> (INTERNAL_le_boogie |t#2| 15) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|))))))) :qid |sha256id.16:22| :skolemid |883| :pattern ( (_module.__default.TStep |t#2|)) )) (=> (forall ((|t#2@@0| Int) ) (!  (=> (_module.__default.isUInt32 |t#2@@0|) (=> (and (_module.__default.TStep |t#2@@0|) (and (INTERNAL_le_boogie 0 |t#2@@0|) (INTERNAL_lt_boogie |t#2@@0| 64))) (=> (and (INTERNAL_le_boogie 0 |t#2@@0|) (INTERNAL_le_boogie |t#2@@0| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) |t#2@@0|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@2|))) |blk#1|)) |t#2@@0|))))))) :qid |sha256id.16:22| :skolemid |885| :pattern ( (_module.__default.TStep |t#2@@0|)) )) (forall ((|t#3| Int) ) (!  (=> (_module.__default.isUInt32 |t#3|) (and (|_module.__default.TStep#canCall| |t#3|) (=> (and (INTERNAL_le_boogie 0 |t#3|) (INTERNAL_lt_boogie |t#3| 64)) (=> (INTERNAL_le_boogie |t#3| 63) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (|_module.__default.SSIG1#canCall| (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 2)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 7)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|)) (|_module.__default.SSIG0#canCall| (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 15))))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 15))))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@2|))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1|)) (INTERNAL_sub_boogie |t#3| 16))))))))))) :qid |sha256id.16:22| :skolemid |884| :pattern ( (_module.__default.TStep |t#3|)) )))))))) :qid |sha256id.13:15| :skolemid |886| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@2|) |blk#1|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@2|) |blk#1|))) )))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectWs (Lit |z#0@@2|)) (and (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))) (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@2|))))) (forall ((|blk#1@@0| Int) ) (!  (=> true (and (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@0|) (INTERNAL_lt_boogie |blk#1@@0| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@0|))) (LitInt 64))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@0|) (INTERNAL_lt_boogie |blk#1@@0| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@2|))) |blk#1@@0|))) (LitInt 16)))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@0|) (INTERNAL_lt_boogie |blk#1@@0| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (and (forall ((|t#2@@1| Int) ) (!  (=> (_module.__default.isUInt32 |t#2@@1|) (=> (and (_module.__default.TStep |t#2@@1|) (and (INTERNAL_le_boogie 0 |t#2@@1|) (INTERNAL_lt_boogie |t#2@@1| 64))) (=> (and (INTERNAL_le_boogie 0 |t#2@@1|) (INTERNAL_le_boogie |t#2@@1| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@0|)) |t#2@@1|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@2|))) |blk#1@@0|)) |t#2@@1|))))))) :qid |sha256id.16:22| :skolemid |887| :pattern ( (_module.__default.TStep |t#2@@1|)) )) (forall ((|t#3@@0| Int) ) (!  (=> (_module.__default.isUInt32 |t#3@@0|) (=> (and (_module.__default.TStep |t#3@@0|) (and (INTERNAL_le_boogie 0 |t#3@@0|) (INTERNAL_lt_boogie |t#3@@0| 64))) (=> (and (INTERNAL_le_boogie 16 |t#3@@0|) (INTERNAL_le_boogie |t#3@@0| 63)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@0|)) |t#3@@0|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@0|)) (INTERNAL_sub_boogie |t#3@@0| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@0|)) (INTERNAL_sub_boogie |t#3@@0| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@0|)) (INTERNAL_sub_boogie |t#3@@0| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@0|)) (INTERNAL_sub_boogie |t#3@@0| 16))))))))) :qid |sha256id.16:22| :skolemid |888| :pattern ( (_module.__default.TStep |t#3@@0|)) )))))) :qid |sha256id.13:15| :skolemid |889| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@2|) |blk#1@@0|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@2|) |blk#1@@0|))) )))) (=> (and (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))) (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@2|))))) (forall ((|blk#1@@1| Int) ) (!  (=> true (and (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@1|) (INTERNAL_lt_boogie |blk#1@@1| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@1|))) (LitInt 64))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@1|) (INTERNAL_lt_boogie |blk#1@@1| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@2|))) |blk#1@@1|))) (LitInt 16)))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@1|) (INTERNAL_lt_boogie |blk#1@@1| (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|)))))) (and (forall ((|t#2@@2| Int) ) (!  (=> (_module.__default.isUInt32 |t#2@@2|) (=> (and (_module.__default.TStep |t#2@@2|) (and (INTERNAL_le_boogie 0 |t#2@@2|) (INTERNAL_lt_boogie |t#2@@2| 64))) (=> (and (INTERNAL_le_boogie 0 |t#2@@2|) (INTERNAL_le_boogie |t#2@@2| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@1|)) |t#2@@2|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@2|))) |blk#1@@1|)) |t#2@@2|))))))) :qid |sha256id.16:22| :skolemid |887| :pattern ( (_module.__default.TStep |t#2@@2|)) )) (forall ((|t#3@@1| Int) ) (!  (=> (_module.__default.isUInt32 |t#3@@1|) (=> (and (_module.__default.TStep |t#3@@1|) (and (INTERNAL_le_boogie 0 |t#3@@1|) (INTERNAL_lt_boogie |t#3@@1| 64))) (=> (and (INTERNAL_le_boogie 16 |t#3@@1|) (INTERNAL_le_boogie |t#3@@1| 63)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@1|)) |t#3@@1|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@1|)) (INTERNAL_sub_boogie |t#3@@1| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@1|)) (INTERNAL_sub_boogie |t#3@@1| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@1|)) (INTERNAL_sub_boogie |t#3@@1| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@2|))) |blk#1@@1|)) (INTERNAL_sub_boogie |t#3@@1| 16))))))))) :qid |sha256id.16:22| :skolemid |888| :pattern ( (_module.__default.TStep |t#3@@1|)) )))))) :qid |sha256id.13:15| :skolemid |889| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@2|) |blk#1@@1|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@2|) |blk#1@@1|))) ))) (_module.__default.PartialSHA256TraceHasCorrectWs (Lit |z#0@@2|)))))) :qid |sha256id.10:11| :weight 3 :skolemid |890| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectWs (Lit |z#0@@2|)) ($IsGoodHeap $Heap@@1)) ))))
(assert  (and (forall ((arg0@@228 T@U) ) (! (= (type (_module.SHA256Trace.atoh arg0@@228)) (SeqType BoxType)) :qid |funType:_module.SHA256Trace.atoh| :pattern ( (_module.SHA256Trace.atoh arg0@@228)) )) (forall ((arg0@@229 T@U) ) (! (= (type (_module.SHA256Trace.H arg0@@229)) (SeqType BoxType)) :qid |funType:_module.SHA256Trace.H| :pattern ( (_module.SHA256Trace.H arg0@@229)) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall (($Heap@@2 T@U) (|z#0@@3| T@U) (|blk#0@@2| Int) ) (!  (=> (and (and (= (type $Heap@@2) (MapType1Type refType)) (= (type |z#0@@3|) DatatypeTypeType)) (or (|_module.__default.CorrectlyAccumulatedHsForBlock#canCall| |z#0@@3| |blk#0@@2|) (and (not (= 40 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@2) ($Is |z#0@@3| Tclass._module.SHA256Trace)) (and (and (and (INTERNAL_le_boogie 0 |blk#0@@2|) (INTERNAL_lt_boogie |blk#0@@2| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@3|)))) (INTERNAL_lt_boogie 64 (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@3|) |blk#0@@2|))))) (INTERNAL_lt_boogie (INTERNAL_add_boogie |blk#0@@2| 1) (|Seq#Length| (_module.SHA256Trace.H |z#0@@3|)))))))) true) :qid |sha256id.21:11| :skolemid |906| :pattern ( (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@3| |blk#0@@2|) ($IsGoodHeap $Heap@@2)) ))))
(assert (forall (($Heap@@3 T@U) (|z#0@@4| T@U) (|blk#0@@3| Int) ) (!  (=> (and (and (= (type $Heap@@3) (MapType1Type refType)) (= (type |z#0@@4|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@3) ($Is |z#0@@4| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.CorrectlyAccumulatedHsForBlock#requires| |z#0@@4| |blk#0@@3|) (and (and (and (INTERNAL_le_boogie 0 |blk#0@@3|) (INTERNAL_lt_boogie |blk#0@@3| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@4|)))) (INTERNAL_lt_boogie 64 (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@4|) |blk#0@@3|))))) (INTERNAL_lt_boogie (INTERNAL_add_boogie |blk#0@@3| 1) (|Seq#Length| (_module.SHA256Trace.H |z#0@@4|))))) (=> (and (and (and (INTERNAL_le_boogie 0 |blk#0@@3|) (INTERNAL_lt_boogie |blk#0@@3| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@4|)))) (INTERNAL_lt_boogie 64 (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@4|) |blk#0@@3|))))) (INTERNAL_lt_boogie (INTERNAL_add_boogie |blk#0@@3| 1) (|Seq#Length| (_module.SHA256Trace.H |z#0@@4|)))) (|_module.__default.CorrectlyAccumulatedHsForBlock#requires| |z#0@@4| |blk#0@@3|)))) :qid |sha256id.21:11| :skolemid |907| :pattern ( (|_module.__default.CorrectlyAccumulatedHsForBlock#requires| |z#0@@4| |blk#0@@3|) ($IsGoodHeap $Heap@@3)) )))
(assert (forall ((arg0@@230 T@U) ) (! (= (type (_module.__default.ConvertAtoHToSeq arg0@@230)) (SeqType BoxType)) :qid |funType:_module.__default.ConvertAtoHToSeq| :pattern ( (_module.__default.ConvertAtoHToSeq arg0@@230)) )))
(assert  (=> (<= 40 $FunctionContextHeight) (forall (($Heap@@4 T@U) (|z#0@@5| T@U) (|blk#0@@4| Int) ) (!  (=> (and (and (= (type $Heap@@4) (MapType1Type refType)) (= (type |z#0@@5|) DatatypeTypeType)) (or (|_module.__default.CorrectlyAccumulatedHsForBlock#canCall| |z#0@@5| |blk#0@@4|) (and (not (= 40 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@4) ($Is |z#0@@5| Tclass._module.SHA256Trace)) (and (and (and (INTERNAL_le_boogie 0 |blk#0@@4|) (INTERNAL_lt_boogie |blk#0@@4| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@5|)))) (INTERNAL_lt_boogie 64 (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@5|) |blk#0@@4|))))) (INTERNAL_lt_boogie (INTERNAL_add_boogie |blk#0@@4| 1) (|Seq#Length| (_module.SHA256Trace.H |z#0@@5|)))))))) (and (forall ((|j#0| Int) ) (!  (and (=> (INTERNAL_lt_boogie |j#0| 8) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@5|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@5|)) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) |blk#0@@4|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@5|)))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@5|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@5|)) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) |blk#0@@4|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@5|))) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) |blk#0@@4|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1)))) (LitInt 8)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@5|) (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@5|) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@5|) |blk#0@@4|)) (LitInt 64))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@5|)) (|_module.__default.BitwiseAdd32#canCall| (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@5|) |blk#0@@4|)) (LitInt 64)))) |j#0|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) |blk#0@@4|)) |j#0|)))))))) :qid |sha256id.24:12| :skolemid |908| :pattern ( (_module.__default.TStep |j#0|)) )) (and (=> (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@5| |blk#0@@4|) (forall ((|j#0@@0| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |j#0@@0|) (INTERNAL_lt_boogie |j#0@@0| 8)) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) |blk#0@@4|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1)))) (LitInt 8)))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1))) |j#0@@0|))) (_module.__default.BitwiseAdd32 (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@5|) |blk#0@@4|)) (LitInt 64)))) |j#0@@0|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) |blk#0@@4|)) |j#0@@0|))))))) :qid |sha256id.24:12| :skolemid |909| :pattern ( (_module.__default.TStep |j#0@@0|)) ))) (=> (forall ((|j#0@@1| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |j#0@@1|) (INTERNAL_lt_boogie |j#0@@1| 8)) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) |blk#0@@4|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1)))) (LitInt 8)))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) (INTERNAL_add_boogie |blk#0@@4| 1))) |j#0@@1|))) (_module.__default.BitwiseAdd32 (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@5|) |blk#0@@4|)) (LitInt 64)))) |j#0@@1|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@5|) |blk#0@@4|)) |j#0@@1|))))))) :qid |sha256id.24:12| :skolemid |909| :pattern ( (_module.__default.TStep |j#0@@1|)) )) (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@5| |blk#0@@4|))))) :qid |sha256id.21:11| :skolemid |910| :pattern ( (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@5| |blk#0@@4|) ($IsGoodHeap $Heap@@4)) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall (($Heap@@5 T@U) (|z#0@@6| T@U) (|blk#0@@5| Int) ) (!  (=> (and (and (= (type $Heap@@5) (MapType1Type refType)) (= (type |z#0@@6|) DatatypeTypeType)) (or (|_module.__default.CorrectlyAccumulatedHsForBlock#canCall| (Lit |z#0@@6|) (LitInt |blk#0@@5|)) (and (not (= 40 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@5) ($Is |z#0@@6| Tclass._module.SHA256Trace)) (and (and (and (INTERNAL_le_boogie 0 |blk#0@@5|) (INTERNAL_lt_boogie |blk#0@@5| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@6|)))))) (INTERNAL_lt_boogie 64 (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@6|))) (LitInt |blk#0@@5|)))))) (INTERNAL_lt_boogie (INTERNAL_add_boogie |blk#0@@5| 1) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|)))))))))) (and (forall ((|j#1| Int) ) (!  (and (=> (INTERNAL_lt_boogie |j#1| 8) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@6|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@6|))) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt |blk#0@@5|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@6|))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@6|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@6|))) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt |blk#0@@5|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@6|)))) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt |blk#0@@5|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1))))) (LitInt 8)))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@6|)) (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@6|)) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@6|))) (LitInt |blk#0@@5|))) (LitInt 64))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@6|))) (|_module.__default.BitwiseAdd32#canCall| (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@6|))) (LitInt |blk#0@@5|))) (LitInt 64)))) |j#1|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt |blk#0@@5|))) |j#1|)))))))) :qid |sha256id.24:12| :skolemid |911| :pattern ( (_module.__default.TStep |j#1|)) )) (and (=> (_module.__default.CorrectlyAccumulatedHsForBlock (Lit |z#0@@6|) (LitInt |blk#0@@5|)) (forall ((|j#1@@0| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |j#1@@0|) (INTERNAL_lt_boogie |j#1@@0| 8)) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt |blk#0@@5|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1))))) (LitInt 8)))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1)))) |j#1@@0|))) (_module.__default.BitwiseAdd32 (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@6|))) (LitInt |blk#0@@5|))) (LitInt 64)))) |j#1@@0|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt |blk#0@@5|))) |j#1@@0|))))))) :qid |sha256id.24:12| :skolemid |912| :pattern ( (_module.__default.TStep |j#1@@0|)) ))) (=> (forall ((|j#1@@1| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |j#1@@1|) (INTERNAL_lt_boogie |j#1@@1| 8)) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt |blk#0@@5|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1))))) (LitInt 8)))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt (INTERNAL_add_boogie |blk#0@@5| 1)))) |j#1@@1|))) (_module.__default.BitwiseAdd32 (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@6|))) (LitInt |blk#0@@5|))) (LitInt 64)))) |j#1@@1|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@6|))) (LitInt |blk#0@@5|))) |j#1@@1|))))))) :qid |sha256id.24:12| :skolemid |912| :pattern ( (_module.__default.TStep |j#1@@1|)) )) (_module.__default.CorrectlyAccumulatedHsForBlock (Lit |z#0@@6|) (LitInt |blk#0@@5|)))))) :qid |sha256id.21:11| :weight 3 :skolemid |913| :pattern ( (_module.__default.CorrectlyAccumulatedHsForBlock (Lit |z#0@@6|) (LitInt |blk#0@@5|)) ($IsGoodHeap $Heap@@5)) ))))
(assert  (=> (<= 41 $FunctionContextHeight) (forall (($Heap@@6 T@U) (|z#0@@7| T@U) ) (!  (=> (and (and (= (type $Heap@@6) (MapType1Type refType)) (= (type |z#0@@7|) DatatypeTypeType)) (or (|_module.__default.CorrectlyAccumulatedHsForAllBlocks#canCall| |z#0@@7|) (and (not (= 41 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@6) ($Is |z#0@@7| Tclass._module.SHA256Trace)) (INTERNAL_le_boogie (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@7|)) 1) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@7|))))))) true) :qid |sha256id.28:11| :skolemid |918| :pattern ( (_module.__default.CorrectlyAccumulatedHsForAllBlocks |z#0@@7|) ($IsGoodHeap $Heap@@6)) ))))
(assert (forall (($Heap@@7 T@U) (|z#0@@8| T@U) ) (!  (=> (and (and (= (type $Heap@@7) (MapType1Type refType)) (= (type |z#0@@8|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@7) ($Is |z#0@@8| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.CorrectlyAccumulatedHsForAllBlocks#requires| |z#0@@8|) (INTERNAL_le_boogie (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@8|)) 1) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@8|)))) (=> (INTERNAL_le_boogie (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@8|)) 1) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@8|))) (|_module.__default.CorrectlyAccumulatedHsForAllBlocks#requires| |z#0@@8|)))) :qid |sha256id.28:11| :skolemid |919| :pattern ( (|_module.__default.CorrectlyAccumulatedHsForAllBlocks#requires| |z#0@@8|) ($IsGoodHeap $Heap@@7)) )))
(assert  (=> (<= 41 $FunctionContextHeight) (forall (($Heap@@8 T@U) (|z#0@@9| T@U) ) (!  (=> (and (and (= (type $Heap@@8) (MapType1Type refType)) (= (type |z#0@@9|) DatatypeTypeType)) (or (|_module.__default.CorrectlyAccumulatedHsForAllBlocks#canCall| |z#0@@9|) (and (not (= 41 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@8) ($Is |z#0@@9| Tclass._module.SHA256Trace)) (INTERNAL_le_boogie (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@9|)) 1) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@9|))))))) (and (forall ((|blk#0@@6| Int) ) (!  (and (and (=> (INTERNAL_le_boogie 0 |blk#0@@6|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@9|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@9|) (INTERNAL_lt_boogie |blk#0@@6| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@9|)) 1))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@9|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@9|) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@9|) |blk#0@@6|))) (LitInt 65))) (and (=> (INTERNAL_le_boogie 0 |blk#0@@6|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@9|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@9|) (INTERNAL_lt_boogie |blk#0@@6| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@9|)) 1))) (|_module.__default.CorrectlyAccumulatedHsForBlock#canCall| |z#0@@9| |blk#0@@6|))))) :qid |sha256id.31:12| :skolemid |920| :pattern ( (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@9| |blk#0@@6|)) )) (and (=> (_module.__default.CorrectlyAccumulatedHsForAllBlocks |z#0@@9|) (forall ((|blk#0@@7| Int) ) (!  (=> true (and (=> (and (INTERNAL_le_boogie 0 |blk#0@@7|) (INTERNAL_lt_boogie |blk#0@@7| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@9|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@9|) |blk#0@@7|))) (LitInt 65))) (=> (and (INTERNAL_le_boogie 0 |blk#0@@7|) (INTERNAL_lt_boogie |blk#0@@7| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@9|)) 1))) (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@9| |blk#0@@7|)))) :qid |sha256id.31:12| :skolemid |921| :pattern ( (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@9| |blk#0@@7|)) ))) (=> (forall ((|blk#0@@8| Int) ) (!  (=> true (and (=> (and (INTERNAL_le_boogie 0 |blk#0@@8|) (INTERNAL_lt_boogie |blk#0@@8| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@9|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@9|) |blk#0@@8|))) (LitInt 65))) (=> (and (INTERNAL_le_boogie 0 |blk#0@@8|) (INTERNAL_lt_boogie |blk#0@@8| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@9|)) 1))) (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@9| |blk#0@@8|)))) :qid |sha256id.31:12| :skolemid |921| :pattern ( (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@9| |blk#0@@8|)) )) (_module.__default.CorrectlyAccumulatedHsForAllBlocks |z#0@@9|))))) :qid |sha256id.28:11| :skolemid |922| :pattern ( (_module.__default.CorrectlyAccumulatedHsForAllBlocks |z#0@@9|) ($IsGoodHeap $Heap@@8)) ))))
(assert  (=> (<= 41 $FunctionContextHeight) (forall (($Heap@@9 T@U) (|z#0@@10| T@U) ) (!  (=> (and (and (= (type $Heap@@9) (MapType1Type refType)) (= (type |z#0@@10|) DatatypeTypeType)) (or (|_module.__default.CorrectlyAccumulatedHsForAllBlocks#canCall| (Lit |z#0@@10|)) (and (not (= 41 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@9) ($Is |z#0@@10| Tclass._module.SHA256Trace)) (INTERNAL_le_boogie (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@10|)))) 1) (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@10|))))))))) (and (forall ((|blk#1@@2| Int) ) (!  (and (and (=> (INTERNAL_le_boogie 0 |blk#1@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@10|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@10|)) (INTERNAL_lt_boogie |blk#1@@2| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@10|)))) 1))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@10|)))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@10|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@10|))) |blk#1@@2|))) (LitInt 65))) (and (=> (INTERNAL_le_boogie 0 |blk#1@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@10|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@10|)) (INTERNAL_lt_boogie |blk#1@@2| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@10|)))) 1))) (|_module.__default.CorrectlyAccumulatedHsForBlock#canCall| (Lit |z#0@@10|) |blk#1@@2|))))) :qid |sha256id.31:12| :skolemid |923| :pattern ( (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@10| |blk#1@@2|)) )) (and (=> (_module.__default.CorrectlyAccumulatedHsForAllBlocks (Lit |z#0@@10|)) (forall ((|blk#1@@3| Int) ) (!  (=> true (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@3|) (INTERNAL_lt_boogie |blk#1@@3| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@10|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@10|))) |blk#1@@3|))) (LitInt 65))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@3|) (INTERNAL_lt_boogie |blk#1@@3| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@10|)))) 1))) (_module.__default.CorrectlyAccumulatedHsForBlock (Lit |z#0@@10|) |blk#1@@3|)))) :qid |sha256id.31:12| :skolemid |924| :pattern ( (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@10| |blk#1@@3|)) ))) (=> (forall ((|blk#1@@4| Int) ) (!  (=> true (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@4|) (INTERNAL_lt_boogie |blk#1@@4| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@10|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@10|))) |blk#1@@4|))) (LitInt 65))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@4|) (INTERNAL_lt_boogie |blk#1@@4| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@10|)))) 1))) (_module.__default.CorrectlyAccumulatedHsForBlock (Lit |z#0@@10|) |blk#1@@4|)))) :qid |sha256id.31:12| :skolemid |924| :pattern ( (_module.__default.CorrectlyAccumulatedHsForBlock |z#0@@10| |blk#1@@4|)) )) (_module.__default.CorrectlyAccumulatedHsForAllBlocks (Lit |z#0@@10|)))))) :qid |sha256id.28:11| :weight 3 :skolemid |925| :pattern ( (_module.__default.CorrectlyAccumulatedHsForAllBlocks (Lit |z#0@@10|)) ($IsGoodHeap $Heap@@9)) ))))
(assert  (=> (<= 42 $FunctionContextHeight) (forall ((|z#0@@11| T@U) ) (!  (=> (and (= (type |z#0@@11|) DatatypeTypeType) (or (|_module.__default.PartialSHA256TraceHasCorrectHs#canCall| |z#0@@11|) (and (not (= 42 $FunctionContextHeight)) ($Is |z#0@@11| Tclass._module.SHA256Trace)))) true) :qid |sha256id.35:42| :skolemid |929| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectHs |z#0@@11|)) ))))
(assert (forall (($Heap@@10 T@U) (|z#0@@12| T@U) ) (!  (=> (and (and (= (type $Heap@@10) (MapType1Type refType)) (= (type |z#0@@12|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@10) ($Is |z#0@@12| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.PartialSHA256TraceHasCorrectHs#requires| |z#0@@12|) true) (=> true (|_module.__default.PartialSHA256TraceHasCorrectHs#requires| |z#0@@12|)))) :qid |sha256id.35:11| :skolemid |930| :pattern ( (|_module.__default.PartialSHA256TraceHasCorrectHs#requires| |z#0@@12|) ($IsGoodHeap $Heap@@10)) )))
(assert (= (type StartFuel__module._default.InitialH_SHA256) LayerTypeType))
(assert  (=> (<= 42 $FunctionContextHeight) (forall (($Heap@@11 T@U) (|z#0@@13| T@U) ) (!  (=> (and (and (= (type $Heap@@11) (MapType1Type refType)) (= (type |z#0@@13|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceHasCorrectHs#canCall| |z#0@@13|) (and (not (= 42 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@11) ($Is |z#0@@13| Tclass._module.SHA256Trace))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|) (=> (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)) 0) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|)))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|)) (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)) (INTERNAL_add_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@13|)) 1))) (forall ((|blk#0@@9| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@9|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|) (INTERNAL_lt_boogie |blk#0@@9| (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|))) :qid |sha256id.39:13| :skolemid |931| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) |blk#0@@9|))) )))) (=> (and (forall ((|blk#0@@10| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@10|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|) (INTERNAL_lt_boogie |blk#0@@10| (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|))) :qid |sha256id.39:13| :skolemid |933| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) |blk#0@@10|))) )) (forall ((|blk#0@@11| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@11|) (INTERNAL_lt_boogie |blk#0@@11| (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) |blk#0@@11|))) (LitInt 8)))) :qid |sha256id.39:13| :skolemid |934| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) |blk#0@@11|))) ))) (forall ((|j#0@@2| Int) ) (!  (=> (INTERNAL_lt_boogie |j#0@@2| 8) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|) (|_module.__default.InitialH__SHA256#canCall| |j#0@@2|))) :qid |sha256id.40:13| :skolemid |932| :pattern ( (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#0@@2|)) )))) (=> (and (forall ((|j#0@@3| Int) ) (!  (=> (INTERNAL_lt_boogie |j#0@@3| 8) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@13|) (|_module.__default.InitialH__SHA256#canCall| |j#0@@3|))) :qid |sha256id.40:13| :skolemid |935| :pattern ( (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#0@@3|)) )) (forall ((|j#0@@4| Int) (|tr$ly#0| T@U) ) (!  (=> (and (and (= (type |tr$ly#0|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#0@@4|) (INTERNAL_lt_boogie |j#0@@4| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) (LitInt 0))) |j#0@@4|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#0@@4|))) :qid |sha256id.40:13| :skolemid |936| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#0| |j#0@@4|)) ))) (|_module.__default.CorrectlyAccumulatedHsForAllBlocks#canCall| |z#0@@13|))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectHs |z#0@@13|) (and (and (and (and (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)) 0) (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)) (INTERNAL_add_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@13|)) 1))) (forall ((|blk#0@@12| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@12|) (INTERNAL_lt_boogie |blk#0@@12| (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) |blk#0@@12|))) (LitInt 8)))) :qid |sha256id.39:13| :skolemid |937| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) |blk#0@@12|))) ))) (forall ((|j#0@@5| Int) (|tr$ly#1| T@U) ) (!  (=> (and (and (= (type |tr$ly#1|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#0@@5|) (INTERNAL_lt_boogie |j#0@@5| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) (LitInt 0))) |j#0@@5|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#0@@5|))) :qid |sha256id.40:13| :skolemid |938| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#1| |j#0@@5|)) ))) (_module.__default.CorrectlyAccumulatedHsForAllBlocks |z#0@@13|))) (=> (and (and (and (and (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)) 0) (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)) (INTERNAL_add_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@13|)) 1))) (forall ((|blk#0@@13| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@13|) (INTERNAL_lt_boogie |blk#0@@13| (|Seq#Length| (_module.SHA256Trace.H |z#0@@13|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) |blk#0@@13|))) (LitInt 8)))) :qid |sha256id.39:13| :skolemid |937| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) |blk#0@@13|))) ))) (forall ((|j#0@@6| Int) (|tr$ly#1@@0| T@U) ) (!  (=> (and (and (= (type |tr$ly#1@@0|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#0@@6|) (INTERNAL_lt_boogie |j#0@@6| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@13|) (LitInt 0))) |j#0@@6|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#0@@6|))) :qid |sha256id.40:13| :skolemid |938| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#1@@0| |j#0@@6|)) ))) (_module.__default.CorrectlyAccumulatedHsForAllBlocks |z#0@@13|)) (_module.__default.PartialSHA256TraceHasCorrectHs |z#0@@13|))))) :qid |sha256id.35:11| :skolemid |939| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectHs |z#0@@13|) ($IsGoodHeap $Heap@@11)) ))))
(assert  (=> (<= 42 $FunctionContextHeight) (forall (($Heap@@12 T@U) (|z#0@@14| T@U) ) (!  (=> (and (and (= (type $Heap@@12) (MapType1Type refType)) (= (type |z#0@@14|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceHasCorrectHs#canCall| (Lit |z#0@@14|)) (and (not (= 42 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@12) ($Is |z#0@@14| Tclass._module.SHA256Trace))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|)) (=> (INTERNAL_gt_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))) 0) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|))))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|))) (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))) (INTERNAL_add_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@14|)))) 1))) (forall ((|blk#1@@5| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@5|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|)) (INTERNAL_lt_boogie |blk#1@@5| (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|)))) :qid |sha256id.39:13| :skolemid |940| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@14|) |blk#1@@5|))) )))) (=> (and (forall ((|blk#1@@6| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@6|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|)) (INTERNAL_lt_boogie |blk#1@@6| (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|)))) :qid |sha256id.39:13| :skolemid |942| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@14|) |blk#1@@6|))) )) (forall ((|blk#1@@7| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@7|) (INTERNAL_lt_boogie |blk#1@@7| (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|))) |blk#1@@7|))) (LitInt 8)))) :qid |sha256id.39:13| :skolemid |943| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@14|) |blk#1@@7|))) ))) (forall ((|j#1@@2| Int) ) (!  (=> (INTERNAL_lt_boogie |j#1@@2| 8) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|)) (|_module.__default.InitialH__SHA256#canCall| |j#1@@2|))) :qid |sha256id.40:13| :skolemid |941| :pattern ( (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#1@@2|)) )))) (=> (and (forall ((|j#1@@3| Int) ) (!  (=> (INTERNAL_lt_boogie |j#1@@3| 8) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@14|)) (|_module.__default.InitialH__SHA256#canCall| |j#1@@3|))) :qid |sha256id.40:13| :skolemid |944| :pattern ( (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#1@@3|)) )) (forall ((|j#1@@4| Int) (|tr$ly#2| T@U) ) (!  (=> (and (and (= (type |tr$ly#2|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#1@@4|) (INTERNAL_lt_boogie |j#1@@4| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|))) (LitInt 0))) |j#1@@4|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#1@@4|))) :qid |sha256id.40:13| :skolemid |945| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#2| |j#1@@4|)) ))) (|_module.__default.CorrectlyAccumulatedHsForAllBlocks#canCall| (Lit |z#0@@14|)))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectHs (Lit |z#0@@14|)) (and (and (and (and (INTERNAL_gt_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))) 0) (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))) (INTERNAL_add_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@14|)))) 1))) (forall ((|blk#1@@8| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@8|) (INTERNAL_lt_boogie |blk#1@@8| (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|))) |blk#1@@8|))) (LitInt 8)))) :qid |sha256id.39:13| :skolemid |946| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@14|) |blk#1@@8|))) ))) (forall ((|j#1@@5| Int) (|tr$ly#3| T@U) ) (!  (=> (and (and (= (type |tr$ly#3|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#1@@5|) (INTERNAL_lt_boogie |j#1@@5| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|))) (LitInt 0))) |j#1@@5|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#1@@5|))) :qid |sha256id.40:13| :skolemid |947| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#3| |j#1@@5|)) ))) (_module.__default.CorrectlyAccumulatedHsForAllBlocks (Lit |z#0@@14|)))) (=> (and (and (and (and (INTERNAL_gt_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))) 0) (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))) (INTERNAL_add_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@14|)))) 1))) (forall ((|blk#1@@9| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@9|) (INTERNAL_lt_boogie |blk#1@@9| (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|))) |blk#1@@9|))) (LitInt 8)))) :qid |sha256id.39:13| :skolemid |946| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@14|) |blk#1@@9|))) ))) (forall ((|j#1@@6| Int) (|tr$ly#3@@0| T@U) ) (!  (=> (and (and (= (type |tr$ly#3@@0|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#1@@6|) (INTERNAL_lt_boogie |j#1@@6| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@14|))) (LitInt 0))) |j#1@@6|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#1@@6|))) :qid |sha256id.40:13| :skolemid |947| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#3@@0| |j#1@@6|)) ))) (_module.__default.CorrectlyAccumulatedHsForAllBlocks (Lit |z#0@@14|))) (_module.__default.PartialSHA256TraceHasCorrectHs (Lit |z#0@@14|)))))) :qid |sha256id.35:11| :weight 3 :skolemid |948| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectHs (Lit |z#0@@14|)) ($IsGoodHeap $Heap@@12)) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((|z#0@@15| T@U) ) (!  (=> (and (= (type |z#0@@15|) DatatypeTypeType) (or (|_module.__default.PartialSHA256TraceHasCorrectatohsWf#canCall| |z#0@@15|) (and (not (= 26 $FunctionContextHeight)) ($Is |z#0@@15| Tclass._module.SHA256Trace)))) true) :qid |sha256id.44:47| :skolemid |962| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohsWf |z#0@@15|)) ))))
(assert (forall (($Heap@@13 T@U) (|z#0@@16| T@U) ) (!  (=> (and (and (= (type $Heap@@13) (MapType1Type refType)) (= (type |z#0@@16|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@13) ($Is |z#0@@16| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.PartialSHA256TraceHasCorrectatohsWf#requires| |z#0@@16|) true) (=> true (|_module.__default.PartialSHA256TraceHasCorrectatohsWf#requires| |z#0@@16|)))) :qid |sha256id.44:11| :skolemid |963| :pattern ( (|_module.__default.PartialSHA256TraceHasCorrectatohsWf#requires| |z#0@@16|) ($IsGoodHeap $Heap@@13)) )))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($Heap@@14 T@U) (|z#0@@17| T@U) ) (!  (=> (and (and (= (type $Heap@@14) (MapType1Type refType)) (= (type |z#0@@17|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceHasCorrectatohsWf#canCall| |z#0@@17|) (and (not (= 26 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@14) ($Is |z#0@@17| Tclass._module.SHA256Trace))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)) (=> (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@17|))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)) (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) (|Seq#Length| (_module.SHA256Trace.W |z#0@@17|)))) (forall ((|blk#0@@14| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@14|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (INTERNAL_lt_boogie |blk#0@@14| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) 1))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|))) :qid |sha256id.48:13| :skolemid |964| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#0@@14|))) )))) (=> (and (forall ((|blk#0@@15| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@15|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (INTERNAL_lt_boogie |blk#0@@15| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) 1))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|))) :qid |sha256id.48:13| :skolemid |966| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#0@@15|))) )) (forall ((|blk#0@@16| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@16|) (INTERNAL_lt_boogie |blk#0@@16| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#0@@16|))) (LitInt 65)))) :qid |sha256id.48:13| :skolemid |967| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#0@@16|))) ))) (forall ((|blk#1@@10| Int) ) (!  (and (and (and (=> (INTERNAL_le_boogie 0 |blk#1@@10|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (INTERNAL_lt_boogie |blk#1@@10| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#1@@10|))) 65)) (and (=> (INTERNAL_le_boogie 0 |blk#1@@10|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (INTERNAL_lt_boogie |blk#1@@10| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|))))) (=> (and (and (=> (INTERNAL_le_boogie 0 |blk#1@@10|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (INTERNAL_lt_boogie |blk#1@@10| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@10|) (INTERNAL_lt_boogie |blk#1@@10| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@17|) |blk#1@@10|))) (LitInt 64)))) (and (=> (INTERNAL_le_boogie 0 |blk#1@@10|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (INTERNAL_lt_boogie |blk#1@@10| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#1@@10|))) 0) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@17|) |blk#1@@10|))) (LitInt 8)) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#1@@10|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@17|)))))))))) :qid |sha256id.49:12| :skolemid |965| :pattern ( (_module.__default.TBlk |blk#1@@10|)) )))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectatohsWf |z#0@@17|) (and (and (and (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@17|))) (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) (|Seq#Length| (_module.SHA256Trace.W |z#0@@17|)))) (forall ((|blk#0@@17| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@17|) (INTERNAL_lt_boogie |blk#0@@17| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#0@@17|))) (LitInt 65)))) :qid |sha256id.48:13| :skolemid |968| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#0@@17|))) ))) (forall ((|blk#1@@11| Int) ) (!  (=> true (and (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@11|) (INTERNAL_lt_boogie |blk#1@@11| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#1@@11|))) 65)) (=> (and (INTERNAL_le_boogie 0 |blk#1@@11|) (INTERNAL_lt_boogie |blk#1@@11| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@17|) |blk#1@@11|))) (LitInt 64)))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@11|) (INTERNAL_lt_boogie |blk#1@@11| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#1@@11|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@17|) |blk#1@@11|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#1@@11|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@17|) |blk#1@@11|)))))))) :qid |sha256id.49:12| :skolemid |969| :pattern ( (_module.__default.TBlk |blk#1@@11|)) )))) (=> (and (and (and (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@17|))) (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) (|Seq#Length| (_module.SHA256Trace.W |z#0@@17|)))) (forall ((|blk#0@@18| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@18|) (INTERNAL_lt_boogie |blk#0@@18| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#0@@18|))) (LitInt 65)))) :qid |sha256id.48:13| :skolemid |968| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#0@@18|))) ))) (forall ((|blk#1@@12| Int) ) (!  (=> true (and (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@12|) (INTERNAL_lt_boogie |blk#1@@12| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#1@@12|))) 65)) (=> (and (INTERNAL_le_boogie 0 |blk#1@@12|) (INTERNAL_lt_boogie |blk#1@@12| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@17|) |blk#1@@12|))) (LitInt 64)))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@12|) (INTERNAL_lt_boogie |blk#1@@12| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@17|)))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#1@@12|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@17|) |blk#1@@12|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@17|) |blk#1@@12|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@17|) |blk#1@@12|)))))))) :qid |sha256id.49:12| :skolemid |969| :pattern ( (_module.__default.TBlk |blk#1@@12|)) ))) (_module.__default.PartialSHA256TraceHasCorrectatohsWf |z#0@@17|))))) :qid |sha256id.44:11| :skolemid |970| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohsWf |z#0@@17|) ($IsGoodHeap $Heap@@14)) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($Heap@@15 T@U) (|z#0@@18| T@U) ) (!  (=> (and (and (= (type $Heap@@15) (MapType1Type refType)) (= (type |z#0@@18|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceHasCorrectatohsWf#canCall| (Lit |z#0@@18|)) (and (not (= 26 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@15) ($Is |z#0@@18| Tclass._module.SHA256Trace))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))) (=> (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@18|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))) (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@18|)))))) (forall ((|blk#2| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (INTERNAL_lt_boogie |blk#2| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) 1))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)))) :qid |sha256id.48:13| :skolemid |971| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@18|) |blk#2|))) )))) (=> (and (forall ((|blk#2@@0| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#2@@0|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (INTERNAL_lt_boogie |blk#2@@0| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) 1))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)))) :qid |sha256id.48:13| :skolemid |973| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@18|) |blk#2@@0|))) )) (forall ((|blk#2@@1| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#2@@1|) (INTERNAL_lt_boogie |blk#2@@1| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#2@@1|))) (LitInt 65)))) :qid |sha256id.48:13| :skolemid |974| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@18|) |blk#2@@1|))) ))) (forall ((|blk#3| Int) ) (!  (and (and (and (=> (INTERNAL_le_boogie 0 |blk#3|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (INTERNAL_lt_boogie |blk#3| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#3|))) 65)) (and (=> (INTERNAL_le_boogie 0 |blk#3|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (INTERNAL_lt_boogie |blk#3| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)))))) (=> (and (and (=> (INTERNAL_le_boogie 0 |blk#3|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (INTERNAL_lt_boogie |blk#3| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)))) (=> (and (INTERNAL_le_boogie 0 |blk#3|) (INTERNAL_lt_boogie |blk#3| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@18|))) |blk#3|))) (LitInt 64)))) (and (=> (INTERNAL_le_boogie 0 |blk#3|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (INTERNAL_lt_boogie |blk#3| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#3|))) 0) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@18|))) |blk#3|))) (LitInt 8)) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|)) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#3|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@18|))))))))))) :qid |sha256id.49:12| :skolemid |972| :pattern ( (_module.__default.TBlk |blk#3|)) )))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectatohsWf (Lit |z#0@@18|)) (and (and (and (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@18|))))) (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@18|)))))) (forall ((|blk#2@@2| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#2@@2|) (INTERNAL_lt_boogie |blk#2@@2| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#2@@2|))) (LitInt 65)))) :qid |sha256id.48:13| :skolemid |975| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@18|) |blk#2@@2|))) ))) (forall ((|blk#3@@0| Int) ) (!  (=> true (and (and (=> (and (INTERNAL_le_boogie 0 |blk#3@@0|) (INTERNAL_lt_boogie |blk#3@@0| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#3@@0|))) 65)) (=> (and (INTERNAL_le_boogie 0 |blk#3@@0|) (INTERNAL_lt_boogie |blk#3@@0| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@18|))) |blk#3@@0|))) (LitInt 64)))) (=> (and (INTERNAL_le_boogie 0 |blk#3@@0|) (INTERNAL_lt_boogie |blk#3@@0| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#3@@0|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@18|))) |blk#3@@0|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#3@@0|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@18|))) |blk#3@@0|)))))))) :qid |sha256id.49:12| :skolemid |976| :pattern ( (_module.__default.TBlk |blk#3@@0|)) )))) (=> (and (and (and (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@18|))))) (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@18|)))))) (forall ((|blk#2@@3| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#2@@3|) (INTERNAL_lt_boogie |blk#2@@3| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#2@@3|))) (LitInt 65)))) :qid |sha256id.48:13| :skolemid |975| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@18|) |blk#2@@3|))) ))) (forall ((|blk#3@@1| Int) ) (!  (=> true (and (and (=> (and (INTERNAL_le_boogie 0 |blk#3@@1|) (INTERNAL_lt_boogie |blk#3@@1| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#3@@1|))) 65)) (=> (and (INTERNAL_le_boogie 0 |blk#3@@1|) (INTERNAL_lt_boogie |blk#3@@1| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@18|))) |blk#3@@1|))) (LitInt 64)))) (=> (and (INTERNAL_le_boogie 0 |blk#3@@1|) (INTERNAL_lt_boogie |blk#3@@1| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|)))))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#3@@1|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@18|))) |blk#3@@1|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@18|))) |blk#3@@1|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@18|))) |blk#3@@1|)))))))) :qid |sha256id.49:12| :skolemid |976| :pattern ( (_module.__default.TBlk |blk#3@@1|)) ))) (_module.__default.PartialSHA256TraceHasCorrectatohsWf (Lit |z#0@@18|)))))) :qid |sha256id.44:11| :weight 3 :skolemid |977| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohsWf (Lit |z#0@@18|)) ($IsGoodHeap $Heap@@15)) ))))
(assert (forall (($ly T@U) (|z#0@@19| T@U) ) (!  (=> (and (= (type $ly) LayerTypeType) (= (type |z#0@@19|) DatatypeTypeType)) (and (=> (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque ($LS $ly) |z#0@@19|) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque $ly |z#0@@19|)) (=> (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque $ly |z#0@@19|) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque ($LS $ly) |z#0@@19|)))) :qid |sha256id.55:20| :skolemid |986| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque ($LS $ly) |z#0@@19|)) )))
(assert  (and (forall ((arg0@@231 T@U) ) (! (= (type (AsFuelBottom arg0@@231)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@231)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|z#0@@20| T@U) ) (!  (=> (and (= (type $ly@@0) LayerTypeType) (= (type |z#0@@20|) DatatypeTypeType)) (and (=> (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque $ly@@0 |z#0@@20|) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque $LZ |z#0@@20|)) (=> (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque $LZ |z#0@@20|) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque $ly@@0 |z#0@@20|)))) :qid |sha256id.55:20| :skolemid |987| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque (AsFuelBottom $ly@@0) |z#0@@20|)) )))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@1 T@U) (|z#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@1) LayerTypeType) (= (type |z#0@@21|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#canCall| |z#0@@21|) (and (not (= 28 $FunctionContextHeight)) ($Is |z#0@@21| Tclass._module.SHA256Trace)))) true) :qid |sha256id.55:20| :skolemid |988| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque $ly@@1 |z#0@@21|)) ))))
(assert (forall (($ly@@2 T@U) ($Heap@@16 T@U) (|z#0@@22| T@U) ) (!  (=> (and (and (and (= (type $ly@@2) LayerTypeType) (= (type $Heap@@16) (MapType1Type refType))) (= (type |z#0@@22|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@16) ($Is |z#0@@22| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#requires| $ly@@2 |z#0@@22|) true) (=> true (|_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#requires| $ly@@2 |z#0@@22|)))) :qid |sha256id.55:20| :skolemid |989| :pattern ( (|_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#requires| $ly@@2 |z#0@@22|) ($IsGoodHeap $Heap@@16)) )))
(assert  (and (and (and (and (= (type StartFuel__module._default.BSIG1) LayerTypeType) (= (type StartFuel__module._default.Ch) LayerTypeType)) (= (type StartFuel__module._default.K_SHA256) LayerTypeType)) (= (type StartFuel__module._default.BSIG0) LayerTypeType)) (= (type StartFuel__module._default.Maj) LayerTypeType)))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@3 T@U) ($Heap@@17 T@U) (|z#0@@23| T@U) ) (!  (=> (and (and (and (= (type $ly@@3) LayerTypeType) (= (type $Heap@@17) (MapType1Type refType))) (= (type |z#0@@23|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#canCall| |z#0@@23|) (and (not (= 28 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@17) ($Is |z#0@@23| Tclass._module.SHA256Trace))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (=> (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@23|))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) (|Seq#Length| (_module.SHA256Trace.W |z#0@@23|)))) (forall ((|blk#0@@19| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@19|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (INTERNAL_lt_boogie |blk#0@@19| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) 1))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|))) :qid |sha256id.59:13| :skolemid |990| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#0@@19|))) )))) (=> (and (forall ((|blk#0@@20| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@20|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (INTERNAL_lt_boogie |blk#0@@20| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) 1))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|))) :qid |sha256id.59:13| :skolemid |993| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#0@@20|))) )) (forall ((|blk#0@@21| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@21|) (INTERNAL_lt_boogie |blk#0@@21| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#0@@21|))) (LitInt 65)))) :qid |sha256id.59:13| :skolemid |994| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#0@@21|))) ))) (forall ((|blk#1@@13| Int) ) (!  (and (and (and (and (=> (INTERNAL_le_boogie 0 |blk#1@@13|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (INTERNAL_lt_boogie |blk#1@@13| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|))) 65)) (and (=> (INTERNAL_le_boogie 0 |blk#1@@13|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (INTERNAL_lt_boogie |blk#1@@13| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|))))) (=> (and (and (=> (INTERNAL_le_boogie 0 |blk#1@@13|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (INTERNAL_lt_boogie |blk#1@@13| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@13|) (INTERNAL_lt_boogie |blk#1@@13| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@13|))) (LitInt 64)))) (and (=> (INTERNAL_le_boogie 0 |blk#1@@13|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (INTERNAL_lt_boogie |blk#1@@13| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|))) 0) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@13|))) (LitInt 8)) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)))))))))) (=> (and (and (=> (INTERNAL_le_boogie 0 |blk#1@@13|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (INTERNAL_lt_boogie |blk#1@@13| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|))) 0) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@13|))) (LitInt 8)) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)))))))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@13|) (INTERNAL_lt_boogie |blk#1@@13| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@13|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@13|))))))) (and (=> (INTERNAL_le_boogie 0 |blk#1@@13|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (INTERNAL_lt_boogie |blk#1@@13| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (forall ((|t#0@@3| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@3|) (and (and (|_module.__default.TStep#canCall| |t#0@@3|) (=> (_module.__default.TStep |t#0@@3|) (=> (INTERNAL_le_boogie 0 |t#0@@3|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)))) (=> (and (=> (INTERNAL_le_boogie 0 |t#0@@3|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (and (INTERNAL_le_boogie 0 |t#0@@3|) (INTERNAL_lt_boogie |t#0@@3| (INTERNAL_sub_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|))) 1)))) (and (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (|_module.__default.BSIG1#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (|_module.__default.Ch#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))))) (|_module.__default.K__SHA256#canCall| |t#0@@3|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@3|))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@3|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (|_module.__default.BSIG0#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (|_module.__default.Maj#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))))) (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (=> (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@3|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@3|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@3|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@23|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) (INTERNAL_add_boogie |t#0@@3| 1))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@3|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|)) |t#0@@3|)))))))))))))) :qid |sha256id.64:16| :skolemid |991| :pattern ( (_module.__default.TStep |t#0@@3|)) )))))) :qid |sha256id.60:12| :skolemid |992| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@13|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@13|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@13|))) )))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque ($LS $ly@@3) |z#0@@23|) (and (and (and (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@23|))) (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) (|Seq#Length| (_module.SHA256Trace.W |z#0@@23|)))) (forall ((|blk#0@@22| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@22|) (INTERNAL_lt_boogie |blk#0@@22| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#0@@22|))) (LitInt 65)))) :qid |sha256id.59:13| :skolemid |995| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#0@@22|))) ))) (forall ((|blk#1@@14| Int) ) (!  (=> true (and (and (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@14|) (INTERNAL_lt_boogie |blk#1@@14| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|))) 65)) (=> (and (INTERNAL_le_boogie 0 |blk#1@@14|) (INTERNAL_lt_boogie |blk#1@@14| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@14|))) (LitInt 64)))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@14|) (INTERNAL_lt_boogie |blk#1@@14| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@14|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@14|))))))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@14|) (INTERNAL_lt_boogie |blk#1@@14| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (forall ((|t#0@@4| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@4|) (=> (and (_module.__default.TStep |t#0@@4|) (and (INTERNAL_le_boogie 0 |t#0@@4|) (INTERNAL_lt_boogie |t#0@@4| (INTERNAL_sub_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|))) 1)))) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) (INTERNAL_add_boogie |t#0@@4| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) (INTERNAL_add_boogie |t#0@@4| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) (INTERNAL_add_boogie |t#0@@4| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) (INTERNAL_add_boogie |t#0@@4| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@4|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) (INTERNAL_add_boogie |t#0@@4| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) (INTERNAL_add_boogie |t#0@@4| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) (INTERNAL_add_boogie |t#0@@4| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) (INTERNAL_add_boogie |t#0@@4| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@4|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@14|)) |t#0@@4|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|)) |t#0@@4|)))))))))) :qid |sha256id.64:16| :skolemid |996| :pattern ( (_module.__default.TStep |t#0@@4|)) ))))) :qid |sha256id.60:12| :skolemid |997| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@14|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@14|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@14|))) )))) (=> (and (and (and (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@23|))) (INTERNAL_le_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) (|Seq#Length| (_module.SHA256Trace.W |z#0@@23|)))) (forall ((|blk#0@@23| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@23|) (INTERNAL_lt_boogie |blk#0@@23| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#0@@23|))) (LitInt 65)))) :qid |sha256id.59:13| :skolemid |995| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#0@@23|))) ))) (forall ((|blk#1@@15| Int) ) (!  (=> true (and (and (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@15|) (INTERNAL_lt_boogie |blk#1@@15| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|))) 65)) (=> (and (INTERNAL_le_boogie 0 |blk#1@@15|) (INTERNAL_lt_boogie |blk#1@@15| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@15|))) (LitInt 64)))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@15|) (INTERNAL_lt_boogie |blk#1@@15| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@15|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@15|))))))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@15|) (INTERNAL_lt_boogie |blk#1@@15| (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@23|)))) (forall ((|t#0@@5| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@5|) (=> (and (_module.__default.TStep |t#0@@5|) (and (INTERNAL_le_boogie 0 |t#0@@5|) (INTERNAL_lt_boogie |t#0@@5| (INTERNAL_sub_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|))) 1)))) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) (INTERNAL_add_boogie |t#0@@5| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) (INTERNAL_add_boogie |t#0@@5| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) (INTERNAL_add_boogie |t#0@@5| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) (INTERNAL_add_boogie |t#0@@5| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@5|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) (INTERNAL_add_boogie |t#0@@5| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) (INTERNAL_add_boogie |t#0@@5| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) (INTERNAL_add_boogie |t#0@@5| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) (INTERNAL_add_boogie |t#0@@5| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@5|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@15|)) |t#0@@5|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|)) |t#0@@5|)))))))))) :qid |sha256id.64:16| :skolemid |996| :pattern ( (_module.__default.TStep |t#0@@5|)) ))))) :qid |sha256id.60:12| :skolemid |997| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@23|) |blk#1@@15|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@23|) |blk#1@@15|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@23|) |blk#1@@15|))) ))) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque ($LS $ly@@3) |z#0@@23|))))) :qid |sha256id.55:20| :skolemid |998| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque ($LS $ly@@3) |z#0@@23|) ($IsGoodHeap $Heap@@17)) ))))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@4 T@U) ($Heap@@18 T@U) (|z#0@@24| T@U) ) (!  (=> (and (and (and (= (type $ly@@4) LayerTypeType) (= (type $Heap@@18) (MapType1Type refType))) (= (type |z#0@@24|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#canCall| (Lit |z#0@@24|)) (and (not (= 28 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@18) ($Is |z#0@@24| Tclass._module.SHA256Trace))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (=> (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|)))))) (forall ((|blk#2@@4| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#2@@4|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (INTERNAL_lt_boogie |blk#2@@4| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) 1))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)))) :qid |sha256id.59:13| :skolemid |999| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@24|) |blk#2@@4|))) )))) (=> (and (forall ((|blk#2@@5| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#2@@5|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (INTERNAL_lt_boogie |blk#2@@5| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) 1))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)))) :qid |sha256id.59:13| :skolemid |1002| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@24|) |blk#2@@5|))) )) (forall ((|blk#2@@6| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#2@@6|) (INTERNAL_lt_boogie |blk#2@@6| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#2@@6|))) (LitInt 65)))) :qid |sha256id.59:13| :skolemid |1003| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@24|) |blk#2@@6|))) ))) (forall ((|blk#3@@2| Int) ) (!  (and (and (and (and (=> (INTERNAL_le_boogie 0 |blk#3@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (INTERNAL_lt_boogie |blk#3@@2| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|))) 65)) (and (=> (INTERNAL_le_boogie 0 |blk#3@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (INTERNAL_lt_boogie |blk#3@@2| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)))))) (=> (and (and (=> (INTERNAL_le_boogie 0 |blk#3@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (INTERNAL_lt_boogie |blk#3@@2| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)))) (=> (and (INTERNAL_le_boogie 0 |blk#3@@2|) (INTERNAL_lt_boogie |blk#3@@2| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@2|))) (LitInt 64)))) (and (=> (INTERNAL_le_boogie 0 |blk#3@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (INTERNAL_lt_boogie |blk#3@@2| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|))) 0) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))) |blk#3@@2|))) (LitInt 8)) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))))))))))) (=> (and (and (=> (INTERNAL_le_boogie 0 |blk#3@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (INTERNAL_lt_boogie |blk#3@@2| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|))) 0) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (=> (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))) |blk#3@@2|))) (LitInt 8)) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))))))))) (=> (and (INTERNAL_le_boogie 0 |blk#3@@2|) (INTERNAL_lt_boogie |blk#3@@2| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))) |blk#3@@2|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))) |blk#3@@2|))))))) (and (=> (INTERNAL_le_boogie 0 |blk#3@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (INTERNAL_lt_boogie |blk#3@@2| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (forall ((|t#1@@2| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@2|) (and (and (|_module.__default.TStep#canCall| |t#1@@2|) (=> (_module.__default.TStep |t#1@@2|) (=> (INTERNAL_le_boogie 0 |t#1@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))))) (=> (and (=> (INTERNAL_le_boogie 0 |t#1@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (and (INTERNAL_le_boogie 0 |t#1@@2|) (INTERNAL_lt_boogie |t#1@@2| (INTERNAL_sub_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|))) 1)))) (and (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (|_module.__default.BSIG1#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (|_module.__default.Ch#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))))) (|_module.__default.K__SHA256#canCall| |t#1@@2|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@2|))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@2|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (|_module.__default.BSIG0#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (|_module.__default.Maj#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))))) (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (=> (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@2|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@2|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@2|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@24|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) (INTERNAL_add_boogie |t#1@@2| 1))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@2|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@2|)) |t#1@@2|)))))))))))))) :qid |sha256id.64:16| :skolemid |1000| :pattern ( (_module.__default.TStep |t#1@@2|)) )))))) :qid |sha256id.60:12| :skolemid |1001| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@24|) |blk#3@@2|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@24|) |blk#3@@2|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@24|) |blk#3@@2|))) )))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque ($LS $ly@@4) (Lit |z#0@@24|)) (and (and (and (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))))) (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|)))))) (forall ((|blk#2@@7| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#2@@7|) (INTERNAL_lt_boogie |blk#2@@7| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#2@@7|))) (LitInt 65)))) :qid |sha256id.59:13| :skolemid |1004| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@24|) |blk#2@@7|))) ))) (forall ((|blk#3@@3| Int) ) (!  (=> true (and (and (and (=> (and (INTERNAL_le_boogie 0 |blk#3@@3|) (INTERNAL_lt_boogie |blk#3@@3| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|))) 65)) (=> (and (INTERNAL_le_boogie 0 |blk#3@@3|) (INTERNAL_lt_boogie |blk#3@@3| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@3|))) (LitInt 64)))) (=> (and (INTERNAL_le_boogie 0 |blk#3@@3|) (INTERNAL_lt_boogie |blk#3@@3| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))) |blk#3@@3|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))) |blk#3@@3|))))))) (=> (and (INTERNAL_le_boogie 0 |blk#3@@3|) (INTERNAL_lt_boogie |blk#3@@3| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (forall ((|t#1@@3| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@3|) (=> (and (_module.__default.TStep |t#1@@3|) (and (INTERNAL_le_boogie 0 |t#1@@3|) (INTERNAL_lt_boogie |t#1@@3| (INTERNAL_sub_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|))) 1)))) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) (INTERNAL_add_boogie |t#1@@3| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) (INTERNAL_add_boogie |t#1@@3| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) (INTERNAL_add_boogie |t#1@@3| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) (INTERNAL_add_boogie |t#1@@3| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@3|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) (INTERNAL_add_boogie |t#1@@3| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) (INTERNAL_add_boogie |t#1@@3| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) (INTERNAL_add_boogie |t#1@@3| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) (INTERNAL_add_boogie |t#1@@3| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@3|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@3|)) |t#1@@3|)))))))))) :qid |sha256id.64:16| :skolemid |1005| :pattern ( (_module.__default.TStep |t#1@@3|)) ))))) :qid |sha256id.60:12| :skolemid |1006| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@24|) |blk#3@@3|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@24|) |blk#3@@3|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@24|) |blk#3@@3|))) )))) (=> (and (and (and (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))))) (INTERNAL_le_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|)))))) (forall ((|blk#2@@8| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#2@@8|) (INTERNAL_lt_boogie |blk#2@@8| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#2@@8|))) (LitInt 65)))) :qid |sha256id.59:13| :skolemid |1004| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@24|) |blk#2@@8|))) ))) (forall ((|blk#3@@4| Int) ) (!  (=> true (and (and (and (=> (and (INTERNAL_le_boogie 0 |blk#3@@4|) (INTERNAL_lt_boogie |blk#3@@4| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (INTERNAL_le_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|))) 65)) (=> (and (INTERNAL_le_boogie 0 |blk#3@@4|) (INTERNAL_lt_boogie |blk#3@@4| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@4|))) (LitInt 64)))) (=> (and (INTERNAL_le_boogie 0 |blk#3@@4|) (INTERNAL_lt_boogie |blk#3@@4| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (=> (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|))) 0) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))) |blk#3@@4|))) (LitInt 8)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@24|))) |blk#3@@4|))))))) (=> (and (INTERNAL_le_boogie 0 |blk#3@@4|) (INTERNAL_lt_boogie |blk#3@@4| (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|)))))) (forall ((|t#1@@4| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@4|) (=> (and (_module.__default.TStep |t#1@@4|) (and (INTERNAL_le_boogie 0 |t#1@@4|) (INTERNAL_lt_boogie |t#1@@4| (INTERNAL_sub_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|))) 1)))) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) (INTERNAL_add_boogie |t#1@@4| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) (INTERNAL_add_boogie |t#1@@4| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) (INTERNAL_add_boogie |t#1@@4| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) (INTERNAL_add_boogie |t#1@@4| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@4|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) (INTERNAL_add_boogie |t#1@@4| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) (INTERNAL_add_boogie |t#1@@4| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) (INTERNAL_add_boogie |t#1@@4| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) (INTERNAL_add_boogie |t#1@@4| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@4|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@24|))) |blk#3@@4|)) |t#1@@4|)))))))))) :qid |sha256id.64:16| :skolemid |1005| :pattern ( (_module.__default.TStep |t#1@@4|)) ))))) :qid |sha256id.60:12| :skolemid |1006| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@24|) |blk#3@@4|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@24|) |blk#3@@4|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@24|) |blk#3@@4|))) ))) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque ($LS $ly@@4) (Lit |z#0@@24|)))))) :qid |sha256id.55:20| :weight 3 :skolemid |1007| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque ($LS $ly@@4) (Lit |z#0@@24|)) ($IsGoodHeap $Heap@@18)) ))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|z#0@@25| T@U) ) (!  (=> (and (= (type |z#0@@25|) DatatypeTypeType) (or (|_module.__default.PartialSHA256TraceHasCorrectatohs#canCall| |z#0@@25|) (and (not (= 29 $FunctionContextHeight)) ($Is |z#0@@25| Tclass._module.SHA256Trace)))) true) :qid |sha256id.80:45| :skolemid |1031| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohs |z#0@@25|)) ))))
(assert (forall ((|z#0@@26| T@U) ) (!  (=> (and (= (type |z#0@@26|) DatatypeTypeType) ($Is |z#0@@26| Tclass._module.SHA256Trace)) (and (=> (|_module.__default.PartialSHA256TraceHasCorrectatohs#requires| |z#0@@26|) true) (=> true (|_module.__default.PartialSHA256TraceHasCorrectatohs#requires| |z#0@@26|)))) :qid |sha256id.80:45| :skolemid |1032| :pattern ( (|_module.__default.PartialSHA256TraceHasCorrectatohs#requires| |z#0@@26|)) )))
(assert (= (type StartFuel__module._default.PartialSHA256TraceHasCorrectatohsOpaque) LayerTypeType))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|z#0@@27| T@U) ) (!  (=> (and (= (type |z#0@@27|) DatatypeTypeType) (or (|_module.__default.PartialSHA256TraceHasCorrectatohs#canCall| |z#0@@27|) (and (not (= 29 $FunctionContextHeight)) ($Is |z#0@@27| Tclass._module.SHA256Trace)))) (and (and (|_module.__default.PartialSHA256TraceHasCorrectatohsWf#canCall| |z#0@@27|) (=> (_module.__default.PartialSHA256TraceHasCorrectatohsWf |z#0@@27|) (|_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#canCall| |z#0@@27|))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectatohs |z#0@@27|) (and (_module.__default.PartialSHA256TraceHasCorrectatohsWf |z#0@@27|) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque StartFuel__module._default.PartialSHA256TraceHasCorrectatohsOpaque |z#0@@27|))) (=> (and (_module.__default.PartialSHA256TraceHasCorrectatohsWf |z#0@@27|) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque StartFuel__module._default.PartialSHA256TraceHasCorrectatohsOpaque |z#0@@27|)) (_module.__default.PartialSHA256TraceHasCorrectatohs |z#0@@27|))))) :qid |sha256id.80:45| :skolemid |1033| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohs |z#0@@27|)) ))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|z#0@@28| T@U) ) (!  (=> (and (= (type |z#0@@28|) DatatypeTypeType) (or (|_module.__default.PartialSHA256TraceHasCorrectatohs#canCall| (Lit |z#0@@28|)) (and (not (= 29 $FunctionContextHeight)) ($Is |z#0@@28| Tclass._module.SHA256Trace)))) (and (and (|_module.__default.PartialSHA256TraceHasCorrectatohsWf#canCall| (Lit |z#0@@28|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.PartialSHA256TraceHasCorrectatohsWf (Lit |z#0@@28|))))) (|_module.__default.PartialSHA256TraceHasCorrectatohsOpaque#canCall| (Lit |z#0@@28|)))) (and (=> (_module.__default.PartialSHA256TraceHasCorrectatohs (Lit |z#0@@28|)) (and (_module.__default.PartialSHA256TraceHasCorrectatohsWf (Lit |z#0@@28|)) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque StartFuel__module._default.PartialSHA256TraceHasCorrectatohsOpaque (Lit |z#0@@28|)))) (=> (and (_module.__default.PartialSHA256TraceHasCorrectatohsWf (Lit |z#0@@28|)) (_module.__default.PartialSHA256TraceHasCorrectatohsOpaque StartFuel__module._default.PartialSHA256TraceHasCorrectatohsOpaque (Lit |z#0@@28|))) (_module.__default.PartialSHA256TraceHasCorrectatohs (Lit |z#0@@28|)))))) :qid |sha256id.80:45| :weight 3 :skolemid |1034| :pattern ( (_module.__default.PartialSHA256TraceHasCorrectatohs (Lit |z#0@@28|))) ))))
(assert  (=> (<= 43 $FunctionContextHeight) (forall ((|z#0@@29| T@U) ) (!  (=> (and (= (type |z#0@@29|) DatatypeTypeType) (or (|_module.__default.PartialSHA256TraceIsCorrect#canCall| |z#0@@29|) (and (not (= 43 $FunctionContextHeight)) ($Is |z#0@@29| Tclass._module.SHA256Trace)))) true) :qid |sha256id.86:39| :skolemid |1037| :pattern ( (_module.__default.PartialSHA256TraceIsCorrect |z#0@@29|)) ))))
(assert (forall (($Heap@@19 T@U) (|z#0@@30| T@U) ) (!  (=> (and (and (= (type $Heap@@19) (MapType1Type refType)) (= (type |z#0@@30|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@19) ($Is |z#0@@30| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.PartialSHA256TraceIsCorrect#requires| |z#0@@30|) true) (=> true (|_module.__default.PartialSHA256TraceIsCorrect#requires| |z#0@@30|)))) :qid |sha256id.86:11| :skolemid |1038| :pattern ( (|_module.__default.PartialSHA256TraceIsCorrect#requires| |z#0@@30|) ($IsGoodHeap $Heap@@19)) )))
(assert  (=> (<= 43 $FunctionContextHeight) (forall (($Heap@@20 T@U) (|z#0@@31| T@U) ) (!  (=> (and (and (= (type $Heap@@20) (MapType1Type refType)) (= (type |z#0@@31|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceIsCorrect#canCall| |z#0@@31|) (and (not (= 43 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@20) ($Is |z#0@@31| Tclass._module.SHA256Trace))))) (and (and (and (and (|_module.__default.PartialSHA256TraceHasCorrectWs#canCall| |z#0@@31|) (=> (_module.__default.PartialSHA256TraceHasCorrectWs |z#0@@31|) (|_module.__default.PartialSHA256TraceHasCorrectHs#canCall| |z#0@@31|))) (=> (and (|_module.__default.PartialSHA256TraceHasCorrectHs#canCall| |z#0@@31|) (_module.__default.PartialSHA256TraceHasCorrectHs |z#0@@31|)) (|_module.__default.PartialSHA256TraceHasCorrectatohs#canCall| |z#0@@31|))) (=> (and (|_module.__default.PartialSHA256TraceHasCorrectatohs#canCall| |z#0@@31|) (_module.__default.PartialSHA256TraceHasCorrectatohs |z#0@@31|)) (forall ((|i#0| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |i#0|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@31|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@31|) (INTERNAL_lt_boogie |i#0| (|Seq#Length| (_module.SHA256Trace.M |z#0@@31|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@31|))) :qid |sha256id.91:16| :skolemid |1039| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@31|) |i#0|)))) )))) (and (=> (_module.__default.PartialSHA256TraceIsCorrect |z#0@@31|) (and (and (and (_module.__default.PartialSHA256TraceHasCorrectWs |z#0@@31|) (_module.__default.PartialSHA256TraceHasCorrectHs |z#0@@31|)) (_module.__default.PartialSHA256TraceHasCorrectatohs |z#0@@31|)) (forall ((|i#0@@0| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@0|) (INTERNAL_lt_boogie |i#0@@0| (|Seq#Length| (_module.SHA256Trace.M |z#0@@31|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@31|) |i#0@@0|))) (LitInt 16)))) :qid |sha256id.91:16| :skolemid |1040| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@31|) |i#0@@0|)))) )))) (=> (and (and (and (_module.__default.PartialSHA256TraceHasCorrectWs |z#0@@31|) (_module.__default.PartialSHA256TraceHasCorrectHs |z#0@@31|)) (_module.__default.PartialSHA256TraceHasCorrectatohs |z#0@@31|)) (forall ((|i#0@@1| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@1|) (INTERNAL_lt_boogie |i#0@@1| (|Seq#Length| (_module.SHA256Trace.M |z#0@@31|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@31|) |i#0@@1|))) (LitInt 16)))) :qid |sha256id.91:16| :skolemid |1040| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@31|) |i#0@@1|)))) ))) (_module.__default.PartialSHA256TraceIsCorrect |z#0@@31|))))) :qid |sha256id.86:11| :skolemid |1041| :pattern ( (_module.__default.PartialSHA256TraceIsCorrect |z#0@@31|) ($IsGoodHeap $Heap@@20)) ))))
(assert  (=> (<= 43 $FunctionContextHeight) (forall (($Heap@@21 T@U) (|z#0@@32| T@U) ) (!  (=> (and (and (= (type $Heap@@21) (MapType1Type refType)) (= (type |z#0@@32|) DatatypeTypeType)) (or (|_module.__default.PartialSHA256TraceIsCorrect#canCall| (Lit |z#0@@32|)) (and (not (= 43 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@21) ($Is |z#0@@32| Tclass._module.SHA256Trace))))) (and (and (and (and (|_module.__default.PartialSHA256TraceHasCorrectWs#canCall| (Lit |z#0@@32|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.PartialSHA256TraceHasCorrectWs (Lit |z#0@@32|))))) (|_module.__default.PartialSHA256TraceHasCorrectHs#canCall| (Lit |z#0@@32|)))) (=> (and (|_module.__default.PartialSHA256TraceHasCorrectHs#canCall| (Lit |z#0@@32|)) (U_2_bool (Lit (bool_2_U (_module.__default.PartialSHA256TraceHasCorrectHs (Lit |z#0@@32|)))))) (|_module.__default.PartialSHA256TraceHasCorrectatohs#canCall| (Lit |z#0@@32|)))) (=> (and (|_module.__default.PartialSHA256TraceHasCorrectatohs#canCall| (Lit |z#0@@32|)) (U_2_bool (Lit (bool_2_U (_module.__default.PartialSHA256TraceHasCorrectatohs (Lit |z#0@@32|)))))) (forall ((|i#1| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |i#1|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@32|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@32|)) (INTERNAL_lt_boogie |i#1| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@32|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@32|)))) :qid |sha256id.91:16| :skolemid |1042| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@32|) |i#1|)))) )))) (and (=> (_module.__default.PartialSHA256TraceIsCorrect (Lit |z#0@@32|)) (and (and (and (_module.__default.PartialSHA256TraceHasCorrectWs (Lit |z#0@@32|)) (_module.__default.PartialSHA256TraceHasCorrectHs (Lit |z#0@@32|))) (_module.__default.PartialSHA256TraceHasCorrectatohs (Lit |z#0@@32|))) (forall ((|i#1@@0| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@0|) (INTERNAL_lt_boogie |i#1@@0| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@32|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@32|))) |i#1@@0|))) (LitInt 16)))) :qid |sha256id.91:16| :skolemid |1043| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@32|) |i#1@@0|)))) )))) (=> (and (and (and (_module.__default.PartialSHA256TraceHasCorrectWs (Lit |z#0@@32|)) (_module.__default.PartialSHA256TraceHasCorrectHs (Lit |z#0@@32|))) (_module.__default.PartialSHA256TraceHasCorrectatohs (Lit |z#0@@32|))) (forall ((|i#1@@1| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@1|) (INTERNAL_lt_boogie |i#1@@1| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@32|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@32|))) |i#1@@1|))) (LitInt 16)))) :qid |sha256id.91:16| :skolemid |1043| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@32|) |i#1@@1|)))) ))) (_module.__default.PartialSHA256TraceIsCorrect (Lit |z#0@@32|)))))) :qid |sha256id.86:11| :weight 3 :skolemid |1044| :pattern ( (_module.__default.PartialSHA256TraceIsCorrect (Lit |z#0@@32|)) ($IsGoodHeap $Heap@@21)) ))))
(assert  (=> (<= 54 $FunctionContextHeight) (forall ((|z#0@@33| T@U) (|nextStep#0| Int) ) (!  (=> (and (= (type |z#0@@33|) DatatypeTypeType) (or (|_module.__default.IsSHA256TraceReadyForStep#canCall| |z#0@@33| |nextStep#0|) (and (not (= 54 $FunctionContextHeight)) (and ($Is |z#0@@33| Tclass._module.SHA256Trace) (and (INTERNAL_le_boogie 0 |nextStep#0|) (INTERNAL_le_boogie |nextStep#0| 64)))))) true) :qid |sha256id.94:37| :skolemid |1050| :pattern ( (_module.__default.IsSHA256TraceReadyForStep |z#0@@33| |nextStep#0|)) ))))
(assert (forall (($Heap@@22 T@U) (|z#0@@34| T@U) (|nextStep#0@@0| Int) ) (!  (=> (and (and (= (type $Heap@@22) (MapType1Type refType)) (= (type |z#0@@34|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@22) ($Is |z#0@@34| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.IsSHA256TraceReadyForStep#requires| |z#0@@34| |nextStep#0@@0|) (and (INTERNAL_le_boogie 0 |nextStep#0@@0|) (INTERNAL_le_boogie |nextStep#0@@0| 64))) (=> (and (INTERNAL_le_boogie 0 |nextStep#0@@0|) (INTERNAL_le_boogie |nextStep#0@@0| 64)) (|_module.__default.IsSHA256TraceReadyForStep#requires| |z#0@@34| |nextStep#0@@0|)))) :qid |sha256id.94:11| :skolemid |1051| :pattern ( (|_module.__default.IsSHA256TraceReadyForStep#requires| |z#0@@34| |nextStep#0@@0|) ($IsGoodHeap $Heap@@22)) )))
(assert  (=> (<= 54 $FunctionContextHeight) (forall (($Heap@@23 T@U) (|z#0@@35| T@U) (|nextStep#0@@1| Int) ) (!  (=> (and (and (= (type $Heap@@23) (MapType1Type refType)) (= (type |z#0@@35|) DatatypeTypeType)) (or (|_module.__default.IsSHA256TraceReadyForStep#canCall| |z#0@@35| |nextStep#0@@1|) (and (not (= 54 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@23) ($Is |z#0@@35| Tclass._module.SHA256Trace)) (and (INTERNAL_le_boogie 0 |nextStep#0@@1|) (INTERNAL_le_boogie |nextStep#0@@1| 64)))))) (and (and (and (and (|_module.__default.PartialSHA256TraceIsCorrect#canCall| |z#0@@35|) (=> (_module.__default.PartialSHA256TraceIsCorrect |z#0@@35|) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|)) (=> (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@35|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|)))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|)) (=> (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@35|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|)))) (and (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@35|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|))) (= (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@35|))))) (forall ((|blk#0@@24| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@24|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|) (INTERNAL_lt_boogie |blk#0@@24| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) 1))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|))) :qid |sha256id.99:16| :skolemid |1052| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) |blk#0@@24|)))) )))) (=> (and (forall ((|blk#0@@25| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@25|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|) (INTERNAL_lt_boogie |blk#0@@25| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) 1))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|))) :qid |sha256id.99:16| :skolemid |1053| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) |blk#0@@25|)))) )) (forall ((|blk#0@@26| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@26|) (INTERNAL_lt_boogie |blk#0@@26| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) |blk#0@@26|))) (LitInt 65)))) :qid |sha256id.99:16| :skolemid |1054| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) |blk#0@@26|)))) ))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@35|)))) (and (=> (_module.__default.IsSHA256TraceReadyForStep |z#0@@35| |nextStep#0@@1|) (and (and (and (_module.__default.PartialSHA256TraceIsCorrect |z#0@@35|) (and (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@35|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|))) (= (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@35|))))) (forall ((|blk#0@@27| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@27|) (INTERNAL_lt_boogie |blk#0@@27| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) |blk#0@@27|))) (LitInt 65)))) :qid |sha256id.99:16| :skolemid |1055| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) |blk#0@@27|)))) ))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) 1)))) (INTERNAL_add_boogie |nextStep#0@@1| 1)))) (=> (and (and (and (_module.__default.PartialSHA256TraceIsCorrect |z#0@@35|) (and (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@35|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|))) (= (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@35|))))) (forall ((|blk#0@@28| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@28|) (INTERNAL_lt_boogie |blk#0@@28| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) |blk#0@@28|))) (LitInt 65)))) :qid |sha256id.99:16| :skolemid |1055| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) |blk#0@@28|)))) ))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@35|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@35|)) 1)))) (INTERNAL_add_boogie |nextStep#0@@1| 1))) (_module.__default.IsSHA256TraceReadyForStep |z#0@@35| |nextStep#0@@1|))))) :qid |sha256id.94:11| :skolemid |1056| :pattern ( (_module.__default.IsSHA256TraceReadyForStep |z#0@@35| |nextStep#0@@1|) ($IsGoodHeap $Heap@@23)) ))))
(assert  (=> (<= 54 $FunctionContextHeight) (forall (($Heap@@24 T@U) (|z#0@@36| T@U) (|nextStep#0@@2| Int) ) (!  (=> (and (and (= (type $Heap@@24) (MapType1Type refType)) (= (type |z#0@@36|) DatatypeTypeType)) (or (|_module.__default.IsSHA256TraceReadyForStep#canCall| (Lit |z#0@@36|) (LitInt |nextStep#0@@2|)) (and (not (= 54 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@24) ($Is |z#0@@36| Tclass._module.SHA256Trace)) (and (INTERNAL_le_boogie 0 |nextStep#0@@2|) (INTERNAL_le_boogie |nextStep#0@@2| 64)))))) (and (and (and (and (|_module.__default.PartialSHA256TraceIsCorrect#canCall| (Lit |z#0@@36|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.PartialSHA256TraceIsCorrect (Lit |z#0@@36|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|))) (=> (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@36|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|))) (=> (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@36|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|))))) (and (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@36|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|))))) (= (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@36|))))))) (forall ((|blk#1@@16| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@16|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|)) (INTERNAL_lt_boogie |blk#1@@16| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) 1))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|)))) :qid |sha256id.99:16| :skolemid |1057| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@36|) |blk#1@@16|)))) )))) (=> (and (forall ((|blk#1@@17| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@17|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|)) (INTERNAL_lt_boogie |blk#1@@17| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) 1))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|)))) :qid |sha256id.99:16| :skolemid |1058| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@36|) |blk#1@@17|)))) )) (forall ((|blk#1@@18| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@18|) (INTERNAL_lt_boogie |blk#1@@18| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@36|))) |blk#1@@18|))) (LitInt 65)))) :qid |sha256id.99:16| :skolemid |1059| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@36|) |blk#1@@18|)))) ))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@36|))))) (and (=> (_module.__default.IsSHA256TraceReadyForStep (Lit |z#0@@36|) (LitInt |nextStep#0@@2|)) (and (and (and (_module.__default.PartialSHA256TraceIsCorrect (Lit |z#0@@36|)) (and (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@36|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|))))) (= (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@36|))))))) (forall ((|blk#1@@19| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@19|) (INTERNAL_lt_boogie |blk#1@@19| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@36|))) |blk#1@@19|))) (LitInt 65)))) :qid |sha256id.99:16| :skolemid |1060| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@36|) |blk#1@@19|)))) ))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@36|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) 1)))) (LitInt (INTERNAL_add_boogie |nextStep#0@@2| 1))))) (=> (and (and (and (_module.__default.PartialSHA256TraceIsCorrect (Lit |z#0@@36|)) (and (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@36|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|))))) (= (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@36|))))))) (forall ((|blk#1@@20| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@20|) (INTERNAL_lt_boogie |blk#1@@20| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@36|))) |blk#1@@20|))) (LitInt 65)))) :qid |sha256id.99:16| :skolemid |1060| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@36|) |blk#1@@20|)))) ))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@36|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@36|)))) 1)))) (LitInt (INTERNAL_add_boogie |nextStep#0@@2| 1)))) (_module.__default.IsSHA256TraceReadyForStep (Lit |z#0@@36|) (LitInt |nextStep#0@@2|)))))) :qid |sha256id.94:11| :weight 3 :skolemid |1061| :pattern ( (_module.__default.IsSHA256TraceReadyForStep (Lit |z#0@@36|) (LitInt |nextStep#0@@2|)) ($IsGoodHeap $Heap@@24)) ))))
(assert  (=> (<= 45 $FunctionContextHeight) (forall ((|z#0@@37| T@U) (|s#0| T@U) (|nextStep#0@@3| Int) ) (!  (=> (and (and (= (type |z#0@@37|) DatatypeTypeType) (= (type |s#0|) DatatypeTypeType)) (or (|_module.__default.IsSHA256ReadyForStep#canCall| |z#0@@37| |s#0| |nextStep#0@@3|) (and (not (= 45 $FunctionContextHeight)) (and (and ($Is |z#0@@37| Tclass._module.SHA256Trace) ($Is |s#0| Tclass._module.SHA256__state)) (and (INTERNAL_le_boogie 0 |nextStep#0@@3|) (INTERNAL_le_boogie |nextStep#0@@3| 64)))))) true) :qid |sha256id.103:32| :skolemid |1068| :pattern ( (_module.__default.IsSHA256ReadyForStep |z#0@@37| |s#0| |nextStep#0@@3|)) ))))
(assert (forall (($Heap@@25 T@U) (|z#0@@38| T@U) (|s#0@@0| T@U) (|nextStep#0@@4| Int) ) (!  (=> (and (and (and (= (type $Heap@@25) (MapType1Type refType)) (= (type |z#0@@38|) DatatypeTypeType)) (= (type |s#0@@0|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@25) ($Is |z#0@@38| Tclass._module.SHA256Trace)) ($Is |s#0@@0| Tclass._module.SHA256__state))) (and (=> (|_module.__default.IsSHA256ReadyForStep#requires| |z#0@@38| |s#0@@0| |nextStep#0@@4|) (and (INTERNAL_le_boogie 0 |nextStep#0@@4|) (INTERNAL_le_boogie |nextStep#0@@4| 64))) (=> (and (INTERNAL_le_boogie 0 |nextStep#0@@4|) (INTERNAL_le_boogie |nextStep#0@@4| 64)) (|_module.__default.IsSHA256ReadyForStep#requires| |z#0@@38| |s#0@@0| |nextStep#0@@4|)))) :qid |sha256id.103:11| :skolemid |1069| :pattern ( (|_module.__default.IsSHA256ReadyForStep#requires| |z#0@@38| |s#0@@0| |nextStep#0@@4|) ($IsGoodHeap $Heap@@25)) )))
(assert (forall ((arg0@@232 T@U) (arg1@@126 T@U) ) (! (= (type (_module.__default.last arg0@@232 arg1@@126)) BoxType) :qid |funType:_module.__default.last| :pattern ( (_module.__default.last arg0@@232 arg1@@126)) )))
(assert  (=> (<= 45 $FunctionContextHeight) (forall (($Heap@@26 T@U) (|z#0@@39| T@U) (|s#0@@1| T@U) (|nextStep#0@@5| Int) ) (!  (=> (and (and (and (= (type $Heap@@26) (MapType1Type refType)) (= (type |z#0@@39|) DatatypeTypeType)) (= (type |s#0@@1|) DatatypeTypeType)) (or (|_module.__default.IsSHA256ReadyForStep#canCall| |z#0@@39| |s#0@@1| |nextStep#0@@5|) (and (not (= 45 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |z#0@@39| Tclass._module.SHA256Trace)) ($Is |s#0@@1| Tclass._module.SHA256__state)) (and (INTERNAL_le_boogie 0 |nextStep#0@@5|) (INTERNAL_le_boogie |nextStep#0@@5| 64)))))) (and (and (and (and (and (and (and (and (|_module.__default.PartialSHA256TraceIsCorrect#canCall| |z#0@@39|) (=> (_module.__default.PartialSHA256TraceIsCorrect |z#0@@39|) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|)))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|)) (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@39|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|)))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|)) (= (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@39|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)))) (forall ((|blk#0@@29| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@29|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (INTERNAL_lt_boogie |blk#0@@29| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|))) :qid |sha256id.109:16| :skolemid |1070| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) |blk#0@@29|)))) )))) (=> (and (forall ((|blk#0@@30| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@30|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (INTERNAL_lt_boogie |blk#0@@30| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|))) :qid |sha256id.109:16| :skolemid |1071| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) |blk#0@@30|)))) )) (forall ((|blk#0@@31| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@31|) (INTERNAL_lt_boogie |blk#0@@31| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) |blk#0@@31|))) (LitInt 65)))) :qid |sha256id.109:16| :skolemid |1072| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) |blk#0@@31|)))) ))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|)))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1)))) (INTERNAL_add_boogie |nextStep#0@@5| 1))) (and (_module.SHA256__state.SHA256__state__c_q |s#0@@1|) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (|_module.__default.last#canCall| (TSeq Tclass._module.word) (_module.SHA256Trace.H |z#0@@39|)))))) (=> (and (and (_module.SHA256__state.SHA256__state__c_q |s#0@@1|) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (|_module.__default.last#canCall| (TSeq Tclass._module.word) (_module.SHA256Trace.H |z#0@@39|)))) (|Seq#Equal| (_module.SHA256__state.H |s#0@@1|) ($Unbox (SeqType BoxType) (_module.__default.last (TSeq Tclass._module.word) (_module.SHA256Trace.H |z#0@@39|))))) (and (_module.SHA256__state.SHA256__state__c_q |s#0@@1|) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|))))) (=> (and (and (_module.SHA256__state.SHA256__state__c_q |s#0@@1|) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|))) (|Seq#Equal| (_module.SHA256__state.W |s#0@@1|) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@39|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))))) (and (_module.SHA256__state.SHA256__state__c_q |s#0@@1|) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@39|))))) (and (=> (_module.__default.IsSHA256ReadyForStep |z#0@@39| |s#0@@1| |nextStep#0@@5|) (and (and (and (and (and (and (and (_module.__default.PartialSHA256TraceIsCorrect |z#0@@39|) (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@39|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)))) (= (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@39|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)))) (forall ((|blk#0@@32| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@32|) (INTERNAL_lt_boogie |blk#0@@32| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) |blk#0@@32|))) (LitInt 65)))) :qid |sha256id.109:16| :skolemid |1073| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) |blk#0@@32|)))) ))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1)))) (INTERNAL_add_boogie |nextStep#0@@5| 1))) (|Seq#Equal| (_module.SHA256__state.H |s#0@@1|) ($Unbox (SeqType BoxType) (_module.__default.last (TSeq Tclass._module.word) (_module.SHA256Trace.H |z#0@@39|))))) (|Seq#Equal| (_module.SHA256__state.W |s#0@@1|) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@39|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))))) (= (_module.SHA256__state.atoh |s#0@@1|) ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))) |nextStep#0@@5|))))) (=> (and (and (and (and (and (and (and (_module.__default.PartialSHA256TraceIsCorrect |z#0@@39|) (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@39|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)))) (= (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@39|)) (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)))) (forall ((|blk#0@@33| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@33|) (INTERNAL_lt_boogie |blk#0@@33| (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) |blk#0@@33|))) (LitInt 65)))) :qid |sha256id.109:16| :skolemid |1073| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) |blk#0@@33|)))) ))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1)))) (INTERNAL_add_boogie |nextStep#0@@5| 1))) (|Seq#Equal| (_module.SHA256__state.H |s#0@@1|) ($Unbox (SeqType BoxType) (_module.__default.last (TSeq Tclass._module.word) (_module.SHA256Trace.H |z#0@@39|))))) (|Seq#Equal| (_module.SHA256__state.W |s#0@@1|) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@39|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))))) (= (_module.SHA256__state.atoh |s#0@@1|) ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@39|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@39|)) 1))) |nextStep#0@@5|)))) (_module.__default.IsSHA256ReadyForStep |z#0@@39| |s#0@@1| |nextStep#0@@5|))))) :qid |sha256id.103:11| :skolemid |1074| :pattern ( (_module.__default.IsSHA256ReadyForStep |z#0@@39| |s#0@@1| |nextStep#0@@5|) ($IsGoodHeap $Heap@@26)) ))))
(assert  (=> (<= 45 $FunctionContextHeight) (forall (($Heap@@27 T@U) (|z#0@@40| T@U) (|s#0@@2| T@U) (|nextStep#0@@6| Int) ) (!  (=> (and (and (and (= (type $Heap@@27) (MapType1Type refType)) (= (type |z#0@@40|) DatatypeTypeType)) (= (type |s#0@@2|) DatatypeTypeType)) (or (|_module.__default.IsSHA256ReadyForStep#canCall| (Lit |z#0@@40|) (Lit |s#0@@2|) (LitInt |nextStep#0@@6|)) (and (not (= 45 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |z#0@@40| Tclass._module.SHA256Trace)) ($Is |s#0@@2| Tclass._module.SHA256__state)) (and (INTERNAL_le_boogie 0 |nextStep#0@@6|) (INTERNAL_le_boogie |nextStep#0@@6| 64)))))) (and (and (and (and (and (and (and (and (|_module.__default.PartialSHA256TraceIsCorrect#canCall| (Lit |z#0@@40|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.PartialSHA256TraceIsCorrect (Lit |z#0@@40|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|))))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|))) (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@40|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|))))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|))) (= (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))))) (forall ((|blk#1@@21| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@21|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (INTERNAL_lt_boogie |blk#1@@21| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)))) :qid |sha256id.109:16| :skolemid |1075| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@40|) |blk#1@@21|)))) )))) (=> (and (forall ((|blk#1@@22| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@22|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (INTERNAL_lt_boogie |blk#1@@22| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)))) :qid |sha256id.109:16| :skolemid |1076| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@40|) |blk#1@@22|)))) )) (forall ((|blk#1@@23| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@23|) (INTERNAL_lt_boogie |blk#1@@23| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|))) |blk#1@@23|))) (LitInt 65)))) :qid |sha256id.109:16| :skolemid |1077| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@40|) |blk#1@@23|)))) ))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|))))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1)))) (LitInt (INTERNAL_add_boogie |nextStep#0@@6| 1)))) (and (_module.SHA256__state.SHA256__state__c_q (Lit |s#0@@2|)) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (|_module.__default.last#canCall| (TSeq Tclass._module.word) (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))))))) (=> (and (and (_module.SHA256__state.SHA256__state__c_q (Lit |s#0@@2|)) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (|_module.__default.last#canCall| (TSeq Tclass._module.word) (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))))) (|Seq#Equal| (_module.SHA256__state.H (Lit |s#0@@2|)) ($Unbox (SeqType BoxType) (_module.__default.last (TSeq Tclass._module.word) (Lit (_module.SHA256Trace.H (Lit |z#0@@40|))))))) (and (_module.SHA256__state.SHA256__state__c_q (Lit |s#0@@2|)) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)))))) (=> (and (and (_module.SHA256__state.SHA256__state__c_q (Lit |s#0@@2|)) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)))) (|Seq#Equal| (_module.SHA256__state.W (Lit |s#0@@2|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@40|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))))) (and (_module.SHA256__state.SHA256__state__c_q (Lit |s#0@@2|)) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@40|)))))) (and (=> (_module.__default.IsSHA256ReadyForStep (Lit |z#0@@40|) (Lit |s#0@@2|) (LitInt |nextStep#0@@6|)) (and (and (and (and (and (and (and (_module.__default.PartialSHA256TraceIsCorrect (Lit |z#0@@40|)) (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@40|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))))) (= (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))))) (forall ((|blk#1@@24| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@24|) (INTERNAL_lt_boogie |blk#1@@24| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|))) |blk#1@@24|))) (LitInt 65)))) :qid |sha256id.109:16| :skolemid |1078| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@40|) |blk#1@@24|)))) ))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1)))) (LitInt (INTERNAL_add_boogie |nextStep#0@@6| 1)))) (|Seq#Equal| (_module.SHA256__state.H (Lit |s#0@@2|)) ($Unbox (SeqType BoxType) (_module.__default.last (TSeq Tclass._module.word) (Lit (_module.SHA256Trace.H (Lit |z#0@@40|))))))) (|Seq#Equal| (_module.SHA256__state.W (Lit |s#0@@2|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@40|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))))) (= (Lit (_module.SHA256__state.atoh (Lit |s#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))) (LitInt |nextStep#0@@6|)))))) (=> (and (and (and (and (and (and (and (_module.__default.PartialSHA256TraceIsCorrect (Lit |z#0@@40|)) (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@40|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))))) (= (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|)))) (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))))) (forall ((|blk#1@@25| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@25|) (INTERNAL_lt_boogie |blk#1@@25| (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|))) |blk#1@@25|))) (LitInt 65)))) :qid |sha256id.109:16| :skolemid |1078| :pattern ( (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@40|) |blk#1@@25|)))) ))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1)))) (LitInt (INTERNAL_add_boogie |nextStep#0@@6| 1)))) (|Seq#Equal| (_module.SHA256__state.H (Lit |s#0@@2|)) ($Unbox (SeqType BoxType) (_module.__default.last (TSeq Tclass._module.word) (Lit (_module.SHA256Trace.H (Lit |z#0@@40|))))))) (|Seq#Equal| (_module.SHA256__state.W (Lit |s#0@@2|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@40|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))))) (= (Lit (_module.SHA256__state.atoh (Lit |s#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@40|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@40|)))) 1))) (LitInt |nextStep#0@@6|))))) (_module.__default.IsSHA256ReadyForStep (Lit |z#0@@40|) (Lit |s#0@@2|) (LitInt |nextStep#0@@6|)))))) :qid |sha256id.103:11| :weight 3 :skolemid |1079| :pattern ( (_module.__default.IsSHA256ReadyForStep (Lit |z#0@@40|) (Lit |s#0@@2|) (LitInt |nextStep#0@@6|)) ($IsGoodHeap $Heap@@27)) ))))
(assert (forall (($ly@@5 T@U) (|z#0@@41| T@U) (|blk#0@@34| Int) (|t#0@@6| Int) ) (!  (=> (and (= (type $ly@@5) LayerTypeType) (= (type |z#0@@41|) DatatypeTypeType)) (and (=> (_module.__default.TheAToHsAreOK ($LS $ly@@5) |z#0@@41| |blk#0@@34| |t#0@@6|) (_module.__default.TheAToHsAreOK $ly@@5 |z#0@@41| |blk#0@@34| |t#0@@6|)) (=> (_module.__default.TheAToHsAreOK $ly@@5 |z#0@@41| |blk#0@@34| |t#0@@6|) (_module.__default.TheAToHsAreOK ($LS $ly@@5) |z#0@@41| |blk#0@@34| |t#0@@6|)))) :qid |sha256id.116:20| :skolemid |1090| :pattern ( (_module.__default.TheAToHsAreOK ($LS $ly@@5) |z#0@@41| |blk#0@@34| |t#0@@6|)) )))
(assert (forall (($ly@@6 T@U) (|z#0@@42| T@U) (|blk#0@@35| Int) (|t#0@@7| Int) ) (!  (=> (and (= (type $ly@@6) LayerTypeType) (= (type |z#0@@42|) DatatypeTypeType)) (and (=> (_module.__default.TheAToHsAreOK $ly@@6 |z#0@@42| |blk#0@@35| |t#0@@7|) (_module.__default.TheAToHsAreOK $LZ |z#0@@42| |blk#0@@35| |t#0@@7|)) (=> (_module.__default.TheAToHsAreOK $LZ |z#0@@42| |blk#0@@35| |t#0@@7|) (_module.__default.TheAToHsAreOK $ly@@6 |z#0@@42| |blk#0@@35| |t#0@@7|)))) :qid |sha256id.116:20| :skolemid |1091| :pattern ( (_module.__default.TheAToHsAreOK (AsFuelBottom $ly@@6) |z#0@@42| |blk#0@@35| |t#0@@7|)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($ly@@7 T@U) ($Heap@@28 T@U) (|z#0@@43| T@U) (|blk#0@@36| Int) (|t#0@@8| Int) ) (!  (=> (and (and (and (= (type $ly@@7) LayerTypeType) (= (type $Heap@@28) (MapType1Type refType))) (= (type |z#0@@43|) DatatypeTypeType)) (or (|_module.__default.TheAToHsAreOK#canCall| |z#0@@43| |blk#0@@36| |t#0@@8|) (and (not (= 23 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |z#0@@43| Tclass._module.SHA256Trace)) (_module.__default.isUInt32 |t#0@@8|)) (and (and (and (and (and (and (INTERNAL_le_boogie 0 |t#0@@8|) (INTERNAL_le_boogie |t#0@@8| 63)) (INTERNAL_le_boogie 0 |blk#0@@36|)) (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@43|)) |blk#0@@36|)) (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@43|) |blk#0@@36|))) (INTERNAL_add_boogie |t#0@@8| 1))) (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.W |z#0@@43|)) |blk#0@@36|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@43|) |blk#0@@36|))) (LitInt 64))))))) true) :qid |sha256id.116:20| :skolemid |1092| :pattern ( (_module.__default.TheAToHsAreOK $ly@@7 |z#0@@43| |blk#0@@36| |t#0@@8|) ($IsGoodHeap $Heap@@28)) ))))
(assert (forall (($ly@@8 T@U) ($Heap@@29 T@U) (|z#0@@44| T@U) (|blk#0@@37| Int) (|t#0@@9| Int) ) (!  (=> (and (and (and (= (type $ly@@8) LayerTypeType) (= (type $Heap@@29) (MapType1Type refType))) (= (type |z#0@@44|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@29) ($Is |z#0@@44| Tclass._module.SHA256Trace)) (_module.__default.isUInt32 |t#0@@9|))) (and (=> (|_module.__default.TheAToHsAreOK#requires| $ly@@8 |z#0@@44| |blk#0@@37| |t#0@@9|) (and (and (and (and (and (and (INTERNAL_le_boogie 0 |t#0@@9|) (INTERNAL_le_boogie |t#0@@9| 63)) (INTERNAL_le_boogie 0 |blk#0@@37|)) (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@44|)) |blk#0@@37|)) (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@44|) |blk#0@@37|))) (INTERNAL_add_boogie |t#0@@9| 1))) (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.W |z#0@@44|)) |blk#0@@37|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@44|) |blk#0@@37|))) (LitInt 64)))) (=> (and (and (and (and (and (and (INTERNAL_le_boogie 0 |t#0@@9|) (INTERNAL_le_boogie |t#0@@9| 63)) (INTERNAL_le_boogie 0 |blk#0@@37|)) (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@44|)) |blk#0@@37|)) (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@44|) |blk#0@@37|))) (INTERNAL_add_boogie |t#0@@9| 1))) (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.W |z#0@@44|)) |blk#0@@37|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@44|) |blk#0@@37|))) (LitInt 64))) (|_module.__default.TheAToHsAreOK#requires| $ly@@8 |z#0@@44| |blk#0@@37| |t#0@@9|)))) :qid |sha256id.116:20| :skolemid |1093| :pattern ( (|_module.__default.TheAToHsAreOK#requires| $ly@@8 |z#0@@44| |blk#0@@37| |t#0@@9|) ($IsGoodHeap $Heap@@29)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($ly@@9 T@U) ($Heap@@30 T@U) (|z#0@@45| T@U) (|blk#0@@38| Int) (|t#0@@10| Int) ) (!  (=> (and (and (and (= (type $ly@@9) LayerTypeType) (= (type $Heap@@30) (MapType1Type refType))) (= (type |z#0@@45|) DatatypeTypeType)) (or (|_module.__default.TheAToHsAreOK#canCall| |z#0@@45| |blk#0@@38| |t#0@@10|) (and (not (= 23 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |z#0@@45| Tclass._module.SHA256Trace)) (_module.__default.isUInt32 |t#0@@10|)) (and (and (and (and (and (and (INTERNAL_le_boogie 0 |t#0@@10|) (INTERNAL_le_boogie |t#0@@10| 63)) (INTERNAL_le_boogie 0 |blk#0@@38|)) (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@45|)) |blk#0@@38|)) (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|))) (INTERNAL_add_boogie |t#0@@10| 1))) (INTERNAL_gt_boogie (|Seq#Length| (_module.SHA256Trace.W |z#0@@45|)) |blk#0@@38|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|))) (LitInt 64))))))) (and (and (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (|_module.__default.BSIG1#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (|_module.__default.Ch#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))))) (|_module.__default.K__SHA256#canCall| |t#0@@10|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (|_module.__default.BSIG0#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (|_module.__default.Maj#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))))) (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (=> (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@45|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))))))) (and (=> (_module.__default.TheAToHsAreOK ($LS $ly@@9) |z#0@@45| |blk#0@@38| |t#0@@10|) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))))) (=> (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) (INTERNAL_add_boogie |t#0@@10| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@45|) |blk#0@@38|)) |t#0@@10|)))))))) (_module.__default.TheAToHsAreOK ($LS $ly@@9) |z#0@@45| |blk#0@@38| |t#0@@10|))))) :qid |sha256id.116:20| :skolemid |1094| :pattern ( (_module.__default.TheAToHsAreOK ($LS $ly@@9) |z#0@@45| |blk#0@@38| |t#0@@10|) ($IsGoodHeap $Heap@@30)) ))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($ly@@10 T@U) ($Heap@@31 T@U) (|z#0@@46| T@U) (|blk#0@@39| Int) (|t#0@@11| Int) ) (!  (=> (and (and (and (= (type $ly@@10) LayerTypeType) (= (type $Heap@@31) (MapType1Type refType))) (= (type |z#0@@46|) DatatypeTypeType)) (or (|_module.__default.TheAToHsAreOK#canCall| (Lit |z#0@@46|) (LitInt |blk#0@@39|) (LitInt |t#0@@11|)) (and (not (= 23 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |z#0@@46| Tclass._module.SHA256Trace)) (_module.__default.isUInt32 |t#0@@11|)) (and (and (and (and (and (and (INTERNAL_le_boogie 0 |t#0@@11|) (INTERNAL_le_boogie |t#0@@11| 63)) (INTERNAL_le_boogie 0 |blk#0@@39|)) (INTERNAL_gt_boogie (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|)))) |blk#0@@39|)) (INTERNAL_gt_boogie (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|)))) (INTERNAL_add_boogie |t#0@@11| 1))) (INTERNAL_gt_boogie (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|)))) |blk#0@@39|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|)))) (LitInt 64))))))) (and (and (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (|_module.__default.BSIG1#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (|_module.__default.Ch#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))))) (|_module.__default.K__SHA256#canCall| (LitInt |t#0@@11|))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|)))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (|_module.__default.BSIG0#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (|_module.__default.Maj#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))))) (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (=> (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@46|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))))))) (and (=> (_module.__default.TheAToHsAreOK ($LS $ly@@10) (Lit |z#0@@46|) (LitInt |blk#0@@39|) (LitInt |t#0@@11|)) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))))) (=> (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt (INTERNAL_add_boogie |t#0@@11| 1))))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 (LitInt |t#0@@11|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@46|))) (LitInt |blk#0@@39|))) (LitInt |t#0@@11|))))))))) (_module.__default.TheAToHsAreOK ($LS $ly@@10) (Lit |z#0@@46|) (LitInt |blk#0@@39|) (LitInt |t#0@@11|)))))) :qid |sha256id.116:20| :weight 3 :skolemid |1095| :pattern ( (_module.__default.TheAToHsAreOK ($LS $ly@@10) (Lit |z#0@@46|) (LitInt |blk#0@@39|) (LitInt |t#0@@11|)) ($IsGoodHeap $Heap@@31)) ))))
(assert (= (type Tclass._module.byte) TyType))
(assert (= (Tag Tclass._module.byte) Tagclass._module.byte))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass._module.byte)) (and (= ($Box ($Unbox intType bx@@88)) bx@@88) ($Is ($Unbox intType bx@@88) Tclass._module.byte))) :qid |unknown.0:0| :skolemid |1730| :pattern ( ($IsBox bx@@88 Tclass._module.byte)) )))
(assert (= (type Tclass._module.uint64) TyType))
(assert (= (Tag Tclass._module.uint64) Tagclass._module.uint64))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass._module.uint64)) (and (= ($Box ($Unbox intType bx@@89)) bx@@89) ($Is ($Unbox intType bx@@89) Tclass._module.uint64))) :qid |unknown.0:0| :skolemid |1755| :pattern ( ($IsBox bx@@89 Tclass._module.uint64)) )))
(assert (forall (($ly@@11 T@U) (|t#0@@12| Int) ) (!  (=> (= (type $ly@@11) LayerTypeType) (= (_module.__default.K__SHA256 ($LS $ly@@11) |t#0@@12|) (_module.__default.K__SHA256 $ly@@11 |t#0@@12|))) :qid |sha256sd.9:26| :skolemid |2084| :pattern ( (_module.__default.K__SHA256 ($LS $ly@@11) |t#0@@12|)) )))
(assert (forall (($ly@@12 T@U) (|t#0@@13| Int) ) (!  (=> (= (type $ly@@12) LayerTypeType) (= (_module.__default.K__SHA256 $ly@@12 |t#0@@13|) (_module.__default.K__SHA256 $LZ |t#0@@13|))) :qid |sha256sd.9:26| :skolemid |2085| :pattern ( (_module.__default.K__SHA256 (AsFuelBottom $ly@@12) |t#0@@13|)) )))
(assert  (=> true (forall (($ly@@13 T@U) (|t#0@@14| Int) ) (!  (=> (and (= (type $ly@@13) LayerTypeType) (or (|_module.__default.K__SHA256#canCall| |t#0@@14|) (and (_module.__default.isUInt32 |t#0@@14|) (and (INTERNAL_le_boogie 0 |t#0@@14|) (INTERNAL_le_boogie |t#0@@14| 63))))) (_module.__default.isUInt32 (_module.__default.K__SHA256 $ly@@13 |t#0@@14|))) :qid |sha256sd.9:26| :skolemid |2086| :pattern ( (_module.__default.K__SHA256 $ly@@13 |t#0@@14|)) ))))
(assert (forall (($ly@@14 T@U) (|t#0@@15| Int) ) (!  (=> (and (= (type $ly@@14) LayerTypeType) (_module.__default.isUInt32 |t#0@@15|)) (and (=> (|_module.__default.K__SHA256#requires| $ly@@14 |t#0@@15|) (and (INTERNAL_le_boogie 0 |t#0@@15|) (INTERNAL_le_boogie |t#0@@15| 63))) (=> (and (INTERNAL_le_boogie 0 |t#0@@15|) (INTERNAL_le_boogie |t#0@@15| 63)) (|_module.__default.K__SHA256#requires| $ly@@14 |t#0@@15|)))) :qid |sha256sd.9:26| :skolemid |2087| :pattern ( (|_module.__default.K__SHA256#requires| $ly@@14 |t#0@@15|)) )))
(assert  (=> true (forall (($ly@@15 T@U) (|t#0@@16| Int) ) (!  (=> (and (= (type $ly@@15) LayerTypeType) (or (|_module.__default.K__SHA256#canCall| |t#0@@16|) (and (_module.__default.isUInt32 |t#0@@16|) (and (INTERNAL_le_boogie 0 |t#0@@16|) (INTERNAL_le_boogie |t#0@@16| 63))))) (= (_module.__default.K__SHA256 ($LS $ly@@15) |t#0@@16|) (U_2_int ($Unbox intType (|Seq#Index| (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 1116352408)))) ($Box (int_2_U (LitInt 1899447441)))) ($Box (int_2_U (LitInt 3049323471)))) ($Box (int_2_U (LitInt 3921009573)))) ($Box (int_2_U (LitInt 961987163)))) ($Box (int_2_U (LitInt 1508970993)))) ($Box (int_2_U (LitInt 2453635748)))) ($Box (int_2_U (LitInt 2870763221)))) ($Box (int_2_U (LitInt 3624381080)))) ($Box (int_2_U (LitInt 310598401)))) ($Box (int_2_U (LitInt 607225278)))) ($Box (int_2_U (LitInt 1426881987)))) ($Box (int_2_U (LitInt 1925078388)))) ($Box (int_2_U (LitInt 2162078206)))) ($Box (int_2_U (LitInt 2614888103)))) ($Box (int_2_U (LitInt 3248222580)))) ($Box (int_2_U (LitInt 3835390401)))) ($Box (int_2_U (LitInt 4022224774)))) ($Box (int_2_U (LitInt 264347078)))) ($Box (int_2_U (LitInt 604807628)))) ($Box (int_2_U (LitInt 770255983)))) ($Box (int_2_U (LitInt 1249150122)))) ($Box (int_2_U (LitInt 1555081692)))) ($Box (int_2_U (LitInt 1996064986)))) ($Box (int_2_U (LitInt 2554220882)))) ($Box (int_2_U (LitInt 2821834349)))) ($Box (int_2_U (LitInt 2952996808)))) ($Box (int_2_U (LitInt 3210313671)))) ($Box (int_2_U (LitInt 3336571891)))) ($Box (int_2_U (LitInt 3584528711)))) ($Box (int_2_U (LitInt 113926993)))) ($Box (int_2_U (LitInt 338241895)))) ($Box (int_2_U (LitInt 666307205)))) ($Box (int_2_U (LitInt 773529912)))) ($Box (int_2_U (LitInt 1294757372)))) ($Box (int_2_U (LitInt 1396182291)))) ($Box (int_2_U (LitInt 1695183700)))) ($Box (int_2_U (LitInt 1986661051)))) ($Box (int_2_U (LitInt 2177026350)))) ($Box (int_2_U (LitInt 2456956037)))) ($Box (int_2_U (LitInt 2730485921)))) ($Box (int_2_U (LitInt 2820302411)))) ($Box (int_2_U (LitInt 3259730800)))) ($Box (int_2_U (LitInt 3345764771)))) ($Box (int_2_U (LitInt 3516065817)))) ($Box (int_2_U (LitInt 3600352804)))) ($Box (int_2_U (LitInt 4094571909)))) ($Box (int_2_U (LitInt 275423344)))) ($Box (int_2_U (LitInt 430227734)))) ($Box (int_2_U (LitInt 506948616)))) ($Box (int_2_U (LitInt 659060556)))) ($Box (int_2_U (LitInt 883997877)))) ($Box (int_2_U (LitInt 958139571)))) ($Box (int_2_U (LitInt 1322822218)))) ($Box (int_2_U (LitInt 1537002063)))) ($Box (int_2_U (LitInt 1747873779)))) ($Box (int_2_U (LitInt 1955562222)))) ($Box (int_2_U (LitInt 2024104815)))) ($Box (int_2_U (LitInt 2227730452)))) ($Box (int_2_U (LitInt 2361852424)))) ($Box (int_2_U (LitInt 2428436474)))) ($Box (int_2_U (LitInt 2756734187)))) ($Box (int_2_U (LitInt 3204031479)))) ($Box (int_2_U (LitInt 3329325298))))) |t#0@@16|))))) :qid |sha256sd.9:26| :skolemid |2088| :pattern ( (_module.__default.K__SHA256 ($LS $ly@@15) |t#0@@16|)) ))))
(assert  (=> true (forall (($ly@@16 T@U) (|t#0@@17| Int) ) (!  (=> (and (= (type $ly@@16) LayerTypeType) (or (|_module.__default.K__SHA256#canCall| (LitInt |t#0@@17|)) (and (_module.__default.isUInt32 |t#0@@17|) (and (INTERNAL_le_boogie 0 |t#0@@17|) (INTERNAL_le_boogie |t#0@@17| 63))))) (= (_module.__default.K__SHA256 ($LS $ly@@16) (LitInt |t#0@@17|)) (U_2_int ($Unbox intType (|Seq#Index| (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 1116352408)))) ($Box (int_2_U (LitInt 1899447441)))) ($Box (int_2_U (LitInt 3049323471)))) ($Box (int_2_U (LitInt 3921009573)))) ($Box (int_2_U (LitInt 961987163)))) ($Box (int_2_U (LitInt 1508970993)))) ($Box (int_2_U (LitInt 2453635748)))) ($Box (int_2_U (LitInt 2870763221)))) ($Box (int_2_U (LitInt 3624381080)))) ($Box (int_2_U (LitInt 310598401)))) ($Box (int_2_U (LitInt 607225278)))) ($Box (int_2_U (LitInt 1426881987)))) ($Box (int_2_U (LitInt 1925078388)))) ($Box (int_2_U (LitInt 2162078206)))) ($Box (int_2_U (LitInt 2614888103)))) ($Box (int_2_U (LitInt 3248222580)))) ($Box (int_2_U (LitInt 3835390401)))) ($Box (int_2_U (LitInt 4022224774)))) ($Box (int_2_U (LitInt 264347078)))) ($Box (int_2_U (LitInt 604807628)))) ($Box (int_2_U (LitInt 770255983)))) ($Box (int_2_U (LitInt 1249150122)))) ($Box (int_2_U (LitInt 1555081692)))) ($Box (int_2_U (LitInt 1996064986)))) ($Box (int_2_U (LitInt 2554220882)))) ($Box (int_2_U (LitInt 2821834349)))) ($Box (int_2_U (LitInt 2952996808)))) ($Box (int_2_U (LitInt 3210313671)))) ($Box (int_2_U (LitInt 3336571891)))) ($Box (int_2_U (LitInt 3584528711)))) ($Box (int_2_U (LitInt 113926993)))) ($Box (int_2_U (LitInt 338241895)))) ($Box (int_2_U (LitInt 666307205)))) ($Box (int_2_U (LitInt 773529912)))) ($Box (int_2_U (LitInt 1294757372)))) ($Box (int_2_U (LitInt 1396182291)))) ($Box (int_2_U (LitInt 1695183700)))) ($Box (int_2_U (LitInt 1986661051)))) ($Box (int_2_U (LitInt 2177026350)))) ($Box (int_2_U (LitInt 2456956037)))) ($Box (int_2_U (LitInt 2730485921)))) ($Box (int_2_U (LitInt 2820302411)))) ($Box (int_2_U (LitInt 3259730800)))) ($Box (int_2_U (LitInt 3345764771)))) ($Box (int_2_U (LitInt 3516065817)))) ($Box (int_2_U (LitInt 3600352804)))) ($Box (int_2_U (LitInt 4094571909)))) ($Box (int_2_U (LitInt 275423344)))) ($Box (int_2_U (LitInt 430227734)))) ($Box (int_2_U (LitInt 506948616)))) ($Box (int_2_U (LitInt 659060556)))) ($Box (int_2_U (LitInt 883997877)))) ($Box (int_2_U (LitInt 958139571)))) ($Box (int_2_U (LitInt 1322822218)))) ($Box (int_2_U (LitInt 1537002063)))) ($Box (int_2_U (LitInt 1747873779)))) ($Box (int_2_U (LitInt 1955562222)))) ($Box (int_2_U (LitInt 2024104815)))) ($Box (int_2_U (LitInt 2227730452)))) ($Box (int_2_U (LitInt 2361852424)))) ($Box (int_2_U (LitInt 2428436474)))) ($Box (int_2_U (LitInt 2756734187)))) ($Box (int_2_U (LitInt 3204031479)))) ($Box (int_2_U (LitInt 3329325298))))) (LitInt |t#0@@17|)))))) :qid |sha256sd.9:26| :weight 3 :skolemid |2089| :pattern ( (_module.__default.K__SHA256 ($LS $ly@@16) (LitInt |t#0@@17|))) ))))
(assert (forall (($ly@@17 T@U) (|j#0@@7| Int) ) (!  (=> (= (type $ly@@17) LayerTypeType) (= (_module.__default.InitialH__SHA256 ($LS $ly@@17) |j#0@@7|) (_module.__default.InitialH__SHA256 $ly@@17 |j#0@@7|))) :qid |sha256sd.33:26| :skolemid |2090| :pattern ( (_module.__default.InitialH__SHA256 ($LS $ly@@17) |j#0@@7|)) )))
(assert (forall (($ly@@18 T@U) (|j#0@@8| Int) ) (!  (=> (= (type $ly@@18) LayerTypeType) (= (_module.__default.InitialH__SHA256 $ly@@18 |j#0@@8|) (_module.__default.InitialH__SHA256 $LZ |j#0@@8|))) :qid |sha256sd.33:26| :skolemid |2091| :pattern ( (_module.__default.InitialH__SHA256 (AsFuelBottom $ly@@18) |j#0@@8|)) )))
(assert  (=> true (forall (($ly@@19 T@U) (|j#0@@9| Int) ) (!  (=> (and (= (type $ly@@19) LayerTypeType) (or (|_module.__default.InitialH__SHA256#canCall| |j#0@@9|) (and (_module.__default.isUInt32 |j#0@@9|) (and (INTERNAL_le_boogie 0 |j#0@@9|) (INTERNAL_le_boogie |j#0@@9| 7))))) (_module.__default.isUInt32 (_module.__default.InitialH__SHA256 $ly@@19 |j#0@@9|))) :qid |sha256sd.33:26| :skolemid |2092| :pattern ( (_module.__default.InitialH__SHA256 $ly@@19 |j#0@@9|)) ))))
(assert (forall (($ly@@20 T@U) (|j#0@@10| Int) ) (!  (=> (and (= (type $ly@@20) LayerTypeType) (_module.__default.isUInt32 |j#0@@10|)) (and (=> (|_module.__default.InitialH__SHA256#requires| $ly@@20 |j#0@@10|) (and (INTERNAL_le_boogie 0 |j#0@@10|) (INTERNAL_le_boogie |j#0@@10| 7))) (=> (and (INTERNAL_le_boogie 0 |j#0@@10|) (INTERNAL_le_boogie |j#0@@10| 7)) (|_module.__default.InitialH__SHA256#requires| $ly@@20 |j#0@@10|)))) :qid |sha256sd.33:26| :skolemid |2093| :pattern ( (|_module.__default.InitialH__SHA256#requires| $ly@@20 |j#0@@10|)) )))
(assert  (=> true (forall (($ly@@21 T@U) (|j#0@@11| Int) ) (!  (=> (and (= (type $ly@@21) LayerTypeType) (or (|_module.__default.InitialH__SHA256#canCall| |j#0@@11|) (and (_module.__default.isUInt32 |j#0@@11|) (and (INTERNAL_le_boogie 0 |j#0@@11|) (INTERNAL_le_boogie |j#0@@11| 7))))) (= (_module.__default.InitialH__SHA256 ($LS $ly@@21) |j#0@@11|) (U_2_int ($Unbox intType (|Seq#Index| (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 1779033703)))) ($Box (int_2_U (LitInt 3144134277)))) ($Box (int_2_U (LitInt 1013904242)))) ($Box (int_2_U (LitInt 2773480762)))) ($Box (int_2_U (LitInt 1359893119)))) ($Box (int_2_U (LitInt 2600822924)))) ($Box (int_2_U (LitInt 528734635)))) ($Box (int_2_U (LitInt 1541459225))))) |j#0@@11|))))) :qid |sha256sd.33:26| :skolemid |2094| :pattern ( (_module.__default.InitialH__SHA256 ($LS $ly@@21) |j#0@@11|)) ))))
(assert  (=> true (forall (($ly@@22 T@U) (|j#0@@12| Int) ) (!  (=> (and (= (type $ly@@22) LayerTypeType) (or (|_module.__default.InitialH__SHA256#canCall| (LitInt |j#0@@12|)) (and (_module.__default.isUInt32 |j#0@@12|) (and (INTERNAL_le_boogie 0 |j#0@@12|) (INTERNAL_le_boogie |j#0@@12| 7))))) (= (_module.__default.InitialH__SHA256 ($LS $ly@@22) (LitInt |j#0@@12|)) (U_2_int ($Unbox intType (|Seq#Index| (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 1779033703)))) ($Box (int_2_U (LitInt 3144134277)))) ($Box (int_2_U (LitInt 1013904242)))) ($Box (int_2_U (LitInt 2773480762)))) ($Box (int_2_U (LitInt 1359893119)))) ($Box (int_2_U (LitInt 2600822924)))) ($Box (int_2_U (LitInt 528734635)))) ($Box (int_2_U (LitInt 1541459225))))) (LitInt |j#0@@12|)))))) :qid |sha256sd.33:26| :weight 3 :skolemid |2095| :pattern ( (_module.__default.InitialH__SHA256 ($LS $ly@@22) (LitInt |j#0@@12|))) ))))
(assert  (=> true (forall ((|v#0| T@U) ) (!  (=> (and (= (type |v#0|) DatatypeTypeType) (or (|_module.__default.ConvertAtoHToSeq#canCall| |v#0|) ($Is |v#0| Tclass._module.atoh__Type))) ($Is (_module.__default.ConvertAtoHToSeq |v#0|) (TSeq Tclass._module.word))) :qid |sha256sd.52:27| :skolemid |2096| :pattern ( (_module.__default.ConvertAtoHToSeq |v#0|)) ))))
(assert (forall (($Heap@@32 T@U) (|v#0@@0| T@U) ) (!  (=> (and (and (= (type $Heap@@32) (MapType1Type refType)) (= (type |v#0@@0|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@32) ($Is |v#0@@0| Tclass._module.atoh__Type))) (and (=> (|_module.__default.ConvertAtoHToSeq#requires| |v#0@@0|) true) (=> true (|_module.__default.ConvertAtoHToSeq#requires| |v#0@@0|)))) :qid |sha256sd.52:10| :skolemid |2097| :pattern ( (|_module.__default.ConvertAtoHToSeq#requires| |v#0@@0|) ($IsGoodHeap $Heap@@32)) )))
(assert  (=> true (forall (($Heap@@33 T@U) (|v#0@@1| T@U) ) (!  (=> (and (and (= (type $Heap@@33) (MapType1Type refType)) (= (type |v#0@@1|) DatatypeTypeType)) (or (|_module.__default.ConvertAtoHToSeq#canCall| |v#0@@1|) (and ($IsGoodHeap $Heap@@33) ($Is |v#0@@1| Tclass._module.atoh__Type)))) (and (and (and (and (and (and (and (and (_module.atoh__Type.atoh__c_q |v#0@@1|) (_module.atoh__Type.atoh__c_q |v#0@@1|)) (_module.atoh__Type.atoh__c_q |v#0@@1|)) (_module.atoh__Type.atoh__c_q |v#0@@1|)) (_module.atoh__Type.atoh__c_q |v#0@@1|)) (_module.atoh__Type.atoh__c_q |v#0@@1|)) (_module.atoh__Type.atoh__c_q |v#0@@1|)) (_module.atoh__Type.atoh__c_q |v#0@@1|)) (= (_module.__default.ConvertAtoHToSeq |v#0@@1|) (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (_module.atoh__Type.a |v#0@@1|)))) ($Box (int_2_U (_module.atoh__Type.b |v#0@@1|)))) ($Box (int_2_U (_module.atoh__Type.c |v#0@@1|)))) ($Box (int_2_U (_module.atoh__Type.d |v#0@@1|)))) ($Box (int_2_U (_module.atoh__Type.e |v#0@@1|)))) ($Box (int_2_U (_module.atoh__Type.f |v#0@@1|)))) ($Box (int_2_U (_module.atoh__Type.g |v#0@@1|)))) ($Box (int_2_U (_module.atoh__Type.h |v#0@@1|))))))) :qid |sha256sd.52:10| :skolemid |2098| :pattern ( (_module.__default.ConvertAtoHToSeq |v#0@@1|) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall (($Heap@@34 T@U) (|v#0@@2| T@U) ) (!  (=> (and (and (= (type $Heap@@34) (MapType1Type refType)) (= (type |v#0@@2|) DatatypeTypeType)) (or (|_module.__default.ConvertAtoHToSeq#canCall| (Lit |v#0@@2|)) (and ($IsGoodHeap $Heap@@34) ($Is |v#0@@2| Tclass._module.atoh__Type)))) (and (and (and (and (and (and (and (and (_module.atoh__Type.atoh__c_q (Lit |v#0@@2|)) (_module.atoh__Type.atoh__c_q (Lit |v#0@@2|))) (_module.atoh__Type.atoh__c_q (Lit |v#0@@2|))) (_module.atoh__Type.atoh__c_q (Lit |v#0@@2|))) (_module.atoh__Type.atoh__c_q (Lit |v#0@@2|))) (_module.atoh__Type.atoh__c_q (Lit |v#0@@2|))) (_module.atoh__Type.atoh__c_q (Lit |v#0@@2|))) (_module.atoh__Type.atoh__c_q (Lit |v#0@@2|))) (= (_module.__default.ConvertAtoHToSeq (Lit |v#0@@2|)) (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (_module.atoh__Type.a (Lit |v#0@@2|)))))) ($Box (int_2_U (LitInt (_module.atoh__Type.b (Lit |v#0@@2|)))))) ($Box (int_2_U (LitInt (_module.atoh__Type.c (Lit |v#0@@2|)))))) ($Box (int_2_U (LitInt (_module.atoh__Type.d (Lit |v#0@@2|)))))) ($Box (int_2_U (LitInt (_module.atoh__Type.e (Lit |v#0@@2|)))))) ($Box (int_2_U (LitInt (_module.atoh__Type.f (Lit |v#0@@2|)))))) ($Box (int_2_U (LitInt (_module.atoh__Type.g (Lit |v#0@@2|)))))) ($Box (int_2_U (LitInt (_module.atoh__Type.h (Lit |v#0@@2|)))))))))) :qid |sha256sd.52:10| :weight 3 :skolemid |2099| :pattern ( (_module.__default.ConvertAtoHToSeq (Lit |v#0@@2|)) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((|z#0@@47| T@U) ) (!  (=> (and (= (type |z#0@@47|) DatatypeTypeType) (or (|_module.__default.IsCompleteSHA256Trace#canCall| |z#0@@47|) ($Is |z#0@@47| Tclass._module.SHA256Trace))) true) :qid |sha256sd.57:33| :skolemid |2100| :pattern ( (_module.__default.IsCompleteSHA256Trace |z#0@@47|)) ))))
(assert (forall (($Heap@@35 T@U) (|z#0@@48| T@U) ) (!  (=> (and (and (= (type $Heap@@35) (MapType1Type refType)) (= (type |z#0@@48|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@35) ($Is |z#0@@48| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.IsCompleteSHA256Trace#requires| |z#0@@48|) true) (=> true (|_module.__default.IsCompleteSHA256Trace#requires| |z#0@@48|)))) :qid |sha256sd.57:11| :skolemid |2101| :pattern ( (|_module.__default.IsCompleteSHA256Trace#requires| |z#0@@48|) ($IsGoodHeap $Heap@@35)) )))
(assert  (=> true (forall (($Heap@@36 T@U) (|z#0@@49| T@U) ) (!  (=> (and (and (= (type $Heap@@36) (MapType1Type refType)) (= (type |z#0@@49|) DatatypeTypeType)) (or (|_module.__default.IsCompleteSHA256Trace#canCall| |z#0@@49|) (and ($IsGoodHeap $Heap@@36) ($Is |z#0@@49| Tclass._module.SHA256Trace)))) (and (and (and (and (and (and (forall ((|i#0@@2| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |i#0@@2|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (INTERNAL_lt_boogie |i#0@@2| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|))) :qid |sha256sd.59:13| :skolemid |2102| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@49|) |i#0@@2|))) )) (=> (forall ((|i#0@@3| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@3|) (INTERNAL_lt_boogie |i#0@@3| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@49|) |i#0@@3|))) (LitInt 16)))) :qid |sha256sd.59:13| :skolemid |2103| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@49|) |i#0@@3|))) )) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)) (= (|Seq#Length| (_module.SHA256Trace.H |z#0@@49|)) (INTERNAL_add_boogie (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)) 1))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)) (=> (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@49|)) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@49|))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)) (=> (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@49|)) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@49|))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)))) (and (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@49|)) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@49|))) (= (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@49|)) (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|))))) (forall ((|blk#0@@40| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@40|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (INTERNAL_lt_boogie |blk#0@@40| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|))) :qid |sha256sd.62:13| :skolemid |2104| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@49|) |blk#0@@40|))) )))) (=> (and (forall ((|blk#0@@41| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@41|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (INTERNAL_lt_boogie |blk#0@@41| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|))) :qid |sha256sd.62:13| :skolemid |2106| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@49|) |blk#0@@41|))) )) (forall ((|blk#0@@42| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@42|) (INTERNAL_lt_boogie |blk#0@@42| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@49|) |blk#0@@42|))) (LitInt 64)))) :qid |sha256sd.62:13| :skolemid |2107| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@49|) |blk#0@@42|))) ))) (forall ((|blk#1@@26| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@26|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (INTERNAL_lt_boogie |blk#1@@26| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|))) :qid |sha256sd.63:13| :skolemid |2105| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@49|) |blk#1@@26|))) )))) (=> (and (forall ((|blk#1@@27| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@27|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (INTERNAL_lt_boogie |blk#1@@27| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|))) :qid |sha256sd.63:13| :skolemid |2109| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@49|) |blk#1@@27|))) )) (forall ((|blk#1@@28| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@28|) (INTERNAL_lt_boogie |blk#1@@28| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@49|) |blk#1@@28|))) (LitInt 65)))) :qid |sha256sd.63:13| :skolemid |2110| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@49|) |blk#1@@28|))) ))) (forall ((|blk#2@@9| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#2@@9|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|) (INTERNAL_le_boogie |blk#2@@9| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@49|))) :qid |sha256sd.64:13| :skolemid |2108| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@49|) |blk#2@@9|))) )))) (and (=> (_module.__default.IsCompleteSHA256Trace |z#0@@49|) (and (and (and (and (and (forall ((|i#0@@4| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@4|) (INTERNAL_lt_boogie |i#0@@4| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@49|) |i#0@@4|))) (LitInt 16)))) :qid |sha256sd.59:13| :skolemid |2111| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@49|) |i#0@@4|))) )) (= (|Seq#Length| (_module.SHA256Trace.H |z#0@@49|)) (INTERNAL_add_boogie (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)) 1))) (and (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@49|)) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@49|))) (= (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@49|)) (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|))))) (forall ((|blk#0@@43| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@43|) (INTERNAL_lt_boogie |blk#0@@43| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@49|) |blk#0@@43|))) (LitInt 64)))) :qid |sha256sd.62:13| :skolemid |2112| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@49|) |blk#0@@43|))) ))) (forall ((|blk#1@@29| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@29|) (INTERNAL_lt_boogie |blk#1@@29| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@49|) |blk#1@@29|))) (LitInt 65)))) :qid |sha256sd.63:13| :skolemid |2113| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@49|) |blk#1@@29|))) ))) (forall ((|blk#2@@10| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#2@@10|) (INTERNAL_le_boogie |blk#2@@10| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@49|) |blk#2@@10|))) (LitInt 8)))) :qid |sha256sd.64:13| :skolemid |2114| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@49|) |blk#2@@10|))) )))) (=> (and (and (and (and (and (forall ((|i#0@@5| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@5|) (INTERNAL_lt_boogie |i#0@@5| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@49|) |i#0@@5|))) (LitInt 16)))) :qid |sha256sd.59:13| :skolemid |2111| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@49|) |i#0@@5|))) )) (= (|Seq#Length| (_module.SHA256Trace.H |z#0@@49|)) (INTERNAL_add_boogie (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)) 1))) (and (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@49|)) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@49|))) (= (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@49|)) (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|))))) (forall ((|blk#0@@44| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@44|) (INTERNAL_lt_boogie |blk#0@@44| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@49|) |blk#0@@44|))) (LitInt 64)))) :qid |sha256sd.62:13| :skolemid |2112| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@49|) |blk#0@@44|))) ))) (forall ((|blk#1@@30| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@30|) (INTERNAL_lt_boogie |blk#1@@30| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@49|) |blk#1@@30|))) (LitInt 65)))) :qid |sha256sd.63:13| :skolemid |2113| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@49|) |blk#1@@30|))) ))) (forall ((|blk#2@@11| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#2@@11|) (INTERNAL_le_boogie |blk#2@@11| (|Seq#Length| (_module.SHA256Trace.M |z#0@@49|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@49|) |blk#2@@11|))) (LitInt 8)))) :qid |sha256sd.64:13| :skolemid |2114| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@49|) |blk#2@@11|))) ))) (_module.__default.IsCompleteSHA256Trace |z#0@@49|))))) :qid |sha256sd.57:11| :skolemid |2115| :pattern ( (_module.__default.IsCompleteSHA256Trace |z#0@@49|) ($IsGoodHeap $Heap@@36)) ))))
(assert  (=> true (forall (($Heap@@37 T@U) (|z#0@@50| T@U) ) (!  (=> (and (and (= (type $Heap@@37) (MapType1Type refType)) (= (type |z#0@@50|) DatatypeTypeType)) (or (|_module.__default.IsCompleteSHA256Trace#canCall| (Lit |z#0@@50|)) (and ($IsGoodHeap $Heap@@37) ($Is |z#0@@50| Tclass._module.SHA256Trace)))) (and (and (and (and (and (and (forall ((|i#1@@2| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |i#1@@2|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (INTERNAL_lt_boogie |i#1@@2| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)))) :qid |sha256sd.59:13| :skolemid |2116| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@50|) |i#1@@2|))) )) (=> (forall ((|i#1@@3| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@3|) (INTERNAL_lt_boogie |i#1@@3| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|))) |i#1@@3|))) (LitInt 16)))) :qid |sha256sd.59:13| :skolemid |2117| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@50|) |i#1@@3|))) )) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))))) (=> (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))) (= (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@50|)))) (INTERNAL_add_boogie (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))) 1))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))) (=> (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@50|)))) (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))) (=> (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@50|)))) (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))))) (and (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@50|)))) (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|))))) (= (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|)))) (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|))))))) (forall ((|blk#3@@5| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#3@@5|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (INTERNAL_lt_boogie |blk#3@@5| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)))) :qid |sha256sd.62:13| :skolemid |2118| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@50|) |blk#3@@5|))) )))) (=> (and (forall ((|blk#3@@6| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#3@@6|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (INTERNAL_lt_boogie |blk#3@@6| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)))) :qid |sha256sd.62:13| :skolemid |2120| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@50|) |blk#3@@6|))) )) (forall ((|blk#3@@7| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#3@@7|) (INTERNAL_lt_boogie |blk#3@@7| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@50|))) |blk#3@@7|))) (LitInt 64)))) :qid |sha256sd.62:13| :skolemid |2121| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@50|) |blk#3@@7|))) ))) (forall ((|blk#4| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#4|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (INTERNAL_lt_boogie |blk#4| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)))) :qid |sha256sd.63:13| :skolemid |2119| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@50|) |blk#4|))) )))) (=> (and (forall ((|blk#4@@0| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#4@@0|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (INTERNAL_lt_boogie |blk#4@@0| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)))) :qid |sha256sd.63:13| :skolemid |2123| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@50|) |blk#4@@0|))) )) (forall ((|blk#4@@1| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#4@@1|) (INTERNAL_lt_boogie |blk#4@@1| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|))) |blk#4@@1|))) (LitInt 65)))) :qid |sha256sd.63:13| :skolemid |2124| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@50|) |blk#4@@1|))) ))) (forall ((|blk#5| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#5|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)) (INTERNAL_le_boogie |blk#5| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@50|)))) :qid |sha256sd.64:13| :skolemid |2122| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@50|) |blk#5|))) )))) (and (=> (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@50|)) (and (and (and (and (and (forall ((|i#1@@4| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@4|) (INTERNAL_lt_boogie |i#1@@4| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|))) |i#1@@4|))) (LitInt 16)))) :qid |sha256sd.59:13| :skolemid |2125| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@50|) |i#1@@4|))) )) (= (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@50|)))) (INTERNAL_add_boogie (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))) 1))) (and (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@50|)))) (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|))))) (= (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|)))) (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|))))))) (forall ((|blk#3@@8| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#3@@8|) (INTERNAL_lt_boogie |blk#3@@8| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@50|))) |blk#3@@8|))) (LitInt 64)))) :qid |sha256sd.62:13| :skolemid |2126| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@50|) |blk#3@@8|))) ))) (forall ((|blk#4@@2| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#4@@2|) (INTERNAL_lt_boogie |blk#4@@2| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|))) |blk#4@@2|))) (LitInt 65)))) :qid |sha256sd.63:13| :skolemid |2127| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@50|) |blk#4@@2|))) ))) (forall ((|blk#5@@0| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#5@@0|) (INTERNAL_le_boogie |blk#5@@0| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@50|))) |blk#5@@0|))) (LitInt 8)))) :qid |sha256sd.64:13| :skolemid |2128| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@50|) |blk#5@@0|))) )))) (=> (and (and (and (and (and (forall ((|i#1@@5| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@5|) (INTERNAL_lt_boogie |i#1@@5| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|))) |i#1@@5|))) (LitInt 16)))) :qid |sha256sd.59:13| :skolemid |2125| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@50|) |i#1@@5|))) )) (= (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@50|)))) (INTERNAL_add_boogie (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))) 1))) (and (= (|Seq#Length| (Lit (_module.SHA256Trace.W (Lit |z#0@@50|)))) (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|))))) (= (|Seq#Length| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|)))) (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|))))))) (forall ((|blk#3@@9| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#3@@9|) (INTERNAL_lt_boogie |blk#3@@9| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@50|))) |blk#3@@9|))) (LitInt 64)))) :qid |sha256sd.62:13| :skolemid |2126| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@50|) |blk#3@@9|))) ))) (forall ((|blk#4@@3| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#4@@3|) (INTERNAL_lt_boogie |blk#4@@3| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@50|))) |blk#4@@3|))) (LitInt 65)))) :qid |sha256sd.63:13| :skolemid |2127| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@50|) |blk#4@@3|))) ))) (forall ((|blk#5@@1| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#5@@1|) (INTERNAL_le_boogie |blk#5@@1| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@50|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@50|))) |blk#5@@1|))) (LitInt 8)))) :qid |sha256sd.64:13| :skolemid |2128| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@50|) |blk#5@@1|))) ))) (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@50|)))))) :qid |sha256sd.57:11| :weight 3 :skolemid |2129| :pattern ( (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@50|)) ($IsGoodHeap $Heap@@37)) ))))
(assert  (=> true (forall ((|z#0@@51| T@U) ) (!  (=> (and (= (type |z#0@@51|) DatatypeTypeType) (or (|_module.__default.SHA256TraceHasCorrectHs#canCall| |z#0@@51|) (and ($Is |z#0@@51| Tclass._module.SHA256Trace) (_module.__default.IsCompleteSHA256Trace |z#0@@51|)))) true) :qid |sha256sd.67:35| :skolemid |2130| :pattern ( (_module.__default.SHA256TraceHasCorrectHs |z#0@@51|)) ))))
(assert (forall (($Heap@@38 T@U) (|z#0@@52| T@U) ) (!  (=> (and (and (= (type $Heap@@38) (MapType1Type refType)) (= (type |z#0@@52|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@38) ($Is |z#0@@52| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.SHA256TraceHasCorrectHs#requires| |z#0@@52|) (_module.__default.IsCompleteSHA256Trace |z#0@@52|)) (=> (_module.__default.IsCompleteSHA256Trace |z#0@@52|) (|_module.__default.SHA256TraceHasCorrectHs#requires| |z#0@@52|)))) :qid |sha256sd.67:11| :skolemid |2131| :pattern ( (|_module.__default.SHA256TraceHasCorrectHs#requires| |z#0@@52|) ($IsGoodHeap $Heap@@38)) )))
(assert  (=> true (forall (($Heap@@39 T@U) (|z#0@@53| T@U) ) (!  (=> (and (and (= (type $Heap@@39) (MapType1Type refType)) (= (type |z#0@@53|) DatatypeTypeType)) (or (|_module.__default.SHA256TraceHasCorrectHs#canCall| |z#0@@53|) (and (and ($IsGoodHeap $Heap@@39) ($Is |z#0@@53| Tclass._module.SHA256Trace)) (_module.__default.IsCompleteSHA256Trace |z#0@@53|)))) (and (and (forall ((|j#0@@13| Int) ) (!  (=> (INTERNAL_lt_boogie |j#0@@13| 8) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@53|) (|_module.__default.InitialH__SHA256#canCall| |j#0@@13|))) :qid |sha256sd.70:13| :skolemid |2132| :pattern ( (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#0@@13|)) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) 0)) |j#0@@13|))) )) (=> (forall ((|j#0@@14| Int) (|tr$ly#0@@0| T@U) ) (!  (=> (and (and (= (type |tr$ly#0@@0|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#0@@14|) (INTERNAL_lt_boogie |j#0@@14| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) (LitInt 0))) |j#0@@14|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#0@@14|))) :qid |sha256sd.70:13| :skolemid |2135| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#0@@0| |j#0@@14|)) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) 0)) |j#0@@14|)) (AsFuelBottom |tr$ly#0@@0|)) )) (forall ((|blk#0@@45| Int) ) (!  (and (|_module.__default.TBlk#canCall| |blk#0@@45|) (=> (_module.__default.TBlk |blk#0@@45|) (forall ((|j#1@@7| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@45|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@53|)) (=> (and (INTERNAL_le_boogie 0 |j#1@@7|) (INTERNAL_lt_boogie |j#1@@7| 8)) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@53|) (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@53|) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@53|) |blk#0@@45|)) (LitInt 64))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@53|)) (|_module.__default.BitwiseAdd32#canCall| (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@53|) |blk#0@@45|)) (LitInt 64)))) |j#1@@7|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) |blk#0@@45|)) |j#1@@7|)))))))) :qid |sha256sd.71:66| :skolemid |2133| :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) |blk#0@@45|)) |j#1@@7|))) :pattern ( ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@53|) |blk#0@@45|)) 64))) |j#1@@7|))) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) (INTERNAL_add_boogie |blk#0@@45| 1))) |j#1@@7|))) )))) :qid |sha256sd.71:13| :skolemid |2134| :pattern ( (_module.__default.TBlk |blk#0@@45|)) )))) (and (=> (_module.__default.SHA256TraceHasCorrectHs |z#0@@53|) (and (forall ((|j#0@@15| Int) (|tr$ly#1@@1| T@U) ) (!  (=> (and (and (= (type |tr$ly#1@@1|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#0@@15|) (INTERNAL_lt_boogie |j#0@@15| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) (LitInt 0))) |j#0@@15|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#0@@15|))) :qid |sha256sd.70:13| :skolemid |2136| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#1@@1| |j#0@@15|)) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) 0)) |j#0@@15|)) (AsFuelBottom |tr$ly#1@@1|)) )) (forall ((|blk#0@@46| Int) ) (!  (=> true (=> (_module.__default.TBlk |blk#0@@46|) (forall ((|j#1@@8| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |blk#0@@46|) (INTERNAL_lt_boogie |blk#0@@46| (|Seq#Length| (_module.SHA256Trace.M |z#0@@53|)))) (and (INTERNAL_le_boogie 0 |j#1@@8|) (INTERNAL_lt_boogie |j#1@@8| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) (INTERNAL_add_boogie |blk#0@@46| 1))) |j#1@@8|))) (_module.__default.BitwiseAdd32 (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@53|) |blk#0@@46|)) (LitInt 64)))) |j#1@@8|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) |blk#0@@46|)) |j#1@@8|))))))) :qid |sha256sd.71:66| :skolemid |2137| :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) |blk#0@@46|)) |j#1@@8|))) :pattern ( ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@53|) |blk#0@@46|)) 64))) |j#1@@8|))) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) (INTERNAL_add_boogie |blk#0@@46| 1))) |j#1@@8|))) )))) :qid |sha256sd.71:13| :skolemid |2138| :pattern ( (_module.__default.TBlk |blk#0@@46|)) )))) (=> (and (forall ((|j#0@@16| Int) (|tr$ly#1@@2| T@U) ) (!  (=> (and (and (= (type |tr$ly#1@@2|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#0@@16|) (INTERNAL_lt_boogie |j#0@@16| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) (LitInt 0))) |j#0@@16|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#0@@16|))) :qid |sha256sd.70:13| :skolemid |2136| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#1@@2| |j#0@@16|)) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) 0)) |j#0@@16|)) (AsFuelBottom |tr$ly#1@@2|)) )) (forall ((|blk#0@@47| Int) ) (!  (=> true (=> (_module.__default.TBlk |blk#0@@47|) (forall ((|j#1@@9| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |blk#0@@47|) (INTERNAL_lt_boogie |blk#0@@47| (|Seq#Length| (_module.SHA256Trace.M |z#0@@53|)))) (and (INTERNAL_le_boogie 0 |j#1@@9|) (INTERNAL_lt_boogie |j#1@@9| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) (INTERNAL_add_boogie |blk#0@@47| 1))) |j#1@@9|))) (_module.__default.BitwiseAdd32 (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@53|) |blk#0@@47|)) (LitInt 64)))) |j#1@@9|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) |blk#0@@47|)) |j#1@@9|))))))) :qid |sha256sd.71:66| :skolemid |2137| :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) |blk#0@@47|)) |j#1@@9|))) :pattern ( ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@53|) |blk#0@@47|)) 64))) |j#1@@9|))) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@53|) (INTERNAL_add_boogie |blk#0@@47| 1))) |j#1@@9|))) )))) :qid |sha256sd.71:13| :skolemid |2138| :pattern ( (_module.__default.TBlk |blk#0@@47|)) ))) (_module.__default.SHA256TraceHasCorrectHs |z#0@@53|))))) :qid |sha256sd.67:11| :skolemid |2139| :pattern ( (_module.__default.SHA256TraceHasCorrectHs |z#0@@53|) ($IsGoodHeap $Heap@@39)) ))))
(assert  (=> true (forall (($Heap@@40 T@U) (|z#0@@54| T@U) ) (!  (=> (and (and (= (type $Heap@@40) (MapType1Type refType)) (= (type |z#0@@54|) DatatypeTypeType)) (or (|_module.__default.SHA256TraceHasCorrectHs#canCall| (Lit |z#0@@54|)) (and (and ($IsGoodHeap $Heap@@40) ($Is |z#0@@54| Tclass._module.SHA256Trace)) (U_2_bool (Lit (bool_2_U (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@54|)))))))) (and (and (forall ((|j#2| Int) ) (!  (=> (INTERNAL_lt_boogie |j#2| 8) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@54|)) (|_module.__default.InitialH__SHA256#canCall| |j#2|))) :qid |sha256sd.70:13| :skolemid |2140| :pattern ( (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#2|)) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) 0)) |j#2|))) )) (=> (forall ((|j#2@@0| Int) (|tr$ly#2@@0| T@U) ) (!  (=> (and (and (= (type |tr$ly#2@@0|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#2@@0|) (INTERNAL_lt_boogie |j#2@@0| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@54|))) (LitInt 0))) |j#2@@0|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#2@@0|))) :qid |sha256sd.70:13| :skolemid |2143| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#2@@0| |j#2@@0|)) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) 0)) |j#2@@0|)) (AsFuelBottom |tr$ly#2@@0|)) )) (forall ((|blk#1@@31| Int) ) (!  (and (|_module.__default.TBlk#canCall| |blk#1@@31|) (=> (_module.__default.TBlk |blk#1@@31|) (forall ((|j#3| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@31|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@54|))) (=> (and (INTERNAL_le_boogie 0 |j#3|) (INTERNAL_lt_boogie |j#3| 8)) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@54|)) (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@54|)) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@54|))) |blk#1@@31|)) (LitInt 64))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@54|))) (|_module.__default.BitwiseAdd32#canCall| (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@54|))) |blk#1@@31|)) (LitInt 64)))) |j#3|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@54|))) |blk#1@@31|)) |j#3|)))))))) :qid |sha256sd.71:66| :skolemid |2141| :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) |blk#1@@31|)) |j#3|))) :pattern ( ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@54|) |blk#1@@31|)) 64))) |j#3|))) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) (INTERNAL_add_boogie |blk#1@@31| 1))) |j#3|))) )))) :qid |sha256sd.71:13| :skolemid |2142| :pattern ( (_module.__default.TBlk |blk#1@@31|)) )))) (and (=> (_module.__default.SHA256TraceHasCorrectHs (Lit |z#0@@54|)) (and (forall ((|j#2@@1| Int) (|tr$ly#3@@1| T@U) ) (!  (=> (and (and (= (type |tr$ly#3@@1|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#2@@1|) (INTERNAL_lt_boogie |j#2@@1| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@54|))) (LitInt 0))) |j#2@@1|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#2@@1|))) :qid |sha256sd.70:13| :skolemid |2144| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#3@@1| |j#2@@1|)) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) 0)) |j#2@@1|)) (AsFuelBottom |tr$ly#3@@1|)) )) (forall ((|blk#1@@32| Int) ) (!  (=> true (=> (_module.__default.TBlk |blk#1@@32|) (forall ((|j#3@@0| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |blk#1@@32|) (INTERNAL_lt_boogie |blk#1@@32| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@54|)))))) (and (INTERNAL_le_boogie 0 |j#3@@0|) (INTERNAL_lt_boogie |j#3@@0| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@54|))) (INTERNAL_add_boogie |blk#1@@32| 1))) |j#3@@0|))) (_module.__default.BitwiseAdd32 (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@54|))) |blk#1@@32|)) (LitInt 64)))) |j#3@@0|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@54|))) |blk#1@@32|)) |j#3@@0|))))))) :qid |sha256sd.71:66| :skolemid |2145| :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) |blk#1@@32|)) |j#3@@0|))) :pattern ( ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@54|) |blk#1@@32|)) 64))) |j#3@@0|))) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) (INTERNAL_add_boogie |blk#1@@32| 1))) |j#3@@0|))) )))) :qid |sha256sd.71:13| :skolemid |2146| :pattern ( (_module.__default.TBlk |blk#1@@32|)) )))) (=> (and (forall ((|j#2@@2| Int) (|tr$ly#3@@2| T@U) ) (!  (=> (and (and (= (type |tr$ly#3@@2|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |j#2@@2|) (INTERNAL_lt_boogie |j#2@@2| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@54|))) (LitInt 0))) |j#2@@2|))) (_module.__default.InitialH__SHA256 StartFuel__module._default.InitialH_SHA256 |j#2@@2|))) :qid |sha256sd.70:13| :skolemid |2144| :pattern ( (_module.__default.InitialH__SHA256 |tr$ly#3@@2| |j#2@@2|)) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) 0)) |j#2@@2|)) (AsFuelBottom |tr$ly#3@@2|)) )) (forall ((|blk#1@@33| Int) ) (!  (=> true (=> (_module.__default.TBlk |blk#1@@33|) (forall ((|j#3@@1| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |blk#1@@33|) (INTERNAL_lt_boogie |blk#1@@33| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@54|)))))) (and (INTERNAL_le_boogie 0 |j#3@@1|) (INTERNAL_lt_boogie |j#3@@1| 8))) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@54|))) (INTERNAL_add_boogie |blk#1@@33| 1))) |j#3@@1|))) (_module.__default.BitwiseAdd32 (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@54|))) |blk#1@@33|)) (LitInt 64)))) |j#3@@1|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@54|))) |blk#1@@33|)) |j#3@@1|))))))) :qid |sha256sd.71:66| :skolemid |2145| :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) |blk#1@@33|)) |j#3@@1|))) :pattern ( ($Unbox intType (|Seq#Index| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@54|) |blk#1@@33|)) 64))) |j#3@@1|))) :pattern ( ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@54|) (INTERNAL_add_boogie |blk#1@@33| 1))) |j#3@@1|))) )))) :qid |sha256sd.71:13| :skolemid |2146| :pattern ( (_module.__default.TBlk |blk#1@@33|)) ))) (_module.__default.SHA256TraceHasCorrectHs (Lit |z#0@@54|)))))) :qid |sha256sd.67:11| :weight 3 :skolemid |2147| :pattern ( (_module.__default.SHA256TraceHasCorrectHs (Lit |z#0@@54|)) ($IsGoodHeap $Heap@@40)) ))))
(assert  (=> true (forall ((|z#0@@55| T@U) ) (!  (=> (and (= (type |z#0@@55|) DatatypeTypeType) (or (|_module.__default.SHA256TraceHasCorrectWs#canCall| |z#0@@55|) (and ($Is |z#0@@55| Tclass._module.SHA256Trace) (_module.__default.IsCompleteSHA256Trace |z#0@@55|)))) true) :qid |sha256sd.75:35| :skolemid |2148| :pattern ( (_module.__default.SHA256TraceHasCorrectWs |z#0@@55|)) ))))
(assert (forall (($Heap@@41 T@U) (|z#0@@56| T@U) ) (!  (=> (and (and (= (type $Heap@@41) (MapType1Type refType)) (= (type |z#0@@56|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@41) ($Is |z#0@@56| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.SHA256TraceHasCorrectWs#requires| |z#0@@56|) (_module.__default.IsCompleteSHA256Trace |z#0@@56|)) (=> (_module.__default.IsCompleteSHA256Trace |z#0@@56|) (|_module.__default.SHA256TraceHasCorrectWs#requires| |z#0@@56|)))) :qid |sha256sd.75:11| :skolemid |2149| :pattern ( (|_module.__default.SHA256TraceHasCorrectWs#requires| |z#0@@56|) ($IsGoodHeap $Heap@@41)) )))
(assert  (=> true (forall (($Heap@@42 T@U) (|z#0@@57| T@U) ) (!  (=> (and (and (= (type $Heap@@42) (MapType1Type refType)) (= (type |z#0@@57|) DatatypeTypeType)) (or (|_module.__default.SHA256TraceHasCorrectWs#canCall| |z#0@@57|) (and (and ($IsGoodHeap $Heap@@42) ($Is |z#0@@57| Tclass._module.SHA256Trace)) (_module.__default.IsCompleteSHA256Trace |z#0@@57|)))) (and (forall ((|blk#0@@48| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#0@@48|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@57|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@57|) (INTERNAL_lt_boogie |blk#0@@48| (|Seq#Length| (_module.SHA256Trace.M |z#0@@57|)))) (and (forall ((|t#0@@18| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@18|) (and (|_module.__default.TStep#canCall| |t#0@@18|) (=> (_module.__default.TStep |t#0@@18|) (=> (INTERNAL_le_boogie |t#0@@18| 15) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@57|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@57|)))))) :qid |sha256sd.80:16| :skolemid |2150| :pattern ( (_module.__default.TStep |t#0@@18|)) )) (=> (forall ((|t#0@@19| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@19|) (=> (_module.__default.TStep |t#0@@19|) (=> (and (INTERNAL_le_boogie 0 |t#0@@19|) (INTERNAL_le_boogie |t#0@@19| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) |t#0@@19|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@57|) |blk#0@@48|)) |t#0@@19|))))))) :qid |sha256sd.80:16| :skolemid |2152| :pattern ( (_module.__default.TStep |t#0@@19|)) )) (forall ((|t#1@@5| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@5|) (and (|_module.__default.TStep#canCall| |t#1@@5|) (=> (_module.__default.TStep |t#1@@5|) (=> (INTERNAL_le_boogie |t#1@@5| 63) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@57|) (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@57|) (|_module.__default.SSIG1#canCall| (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 2)))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@57|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 7)))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@57|) (|_module.__default.SSIG0#canCall| (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 15))))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 15))))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@57|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|)) (INTERNAL_sub_boogie |t#1@@5| 16))))))))))) :qid |sha256sd.80:16| :skolemid |2151| :pattern ( (_module.__default.TStep |t#1@@5|)) )))))) :qid |sha256sd.78:12| :skolemid |2153| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@57|) |blk#0@@48|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@48|))) )) (and (=> (_module.__default.SHA256TraceHasCorrectWs |z#0@@57|) (forall ((|blk#0@@49| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@49|) (INTERNAL_lt_boogie |blk#0@@49| (|Seq#Length| (_module.SHA256Trace.M |z#0@@57|)))) (and (forall ((|t#0@@20| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@20|) (=> (_module.__default.TStep |t#0@@20|) (=> (and (INTERNAL_le_boogie 0 |t#0@@20|) (INTERNAL_le_boogie |t#0@@20| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@49|)) |t#0@@20|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@57|) |blk#0@@49|)) |t#0@@20|))))))) :qid |sha256sd.80:16| :skolemid |2154| :pattern ( (_module.__default.TStep |t#0@@20|)) )) (forall ((|t#1@@6| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@6|) (=> (_module.__default.TStep |t#1@@6|) (=> (and (INTERNAL_le_boogie 16 |t#1@@6|) (INTERNAL_le_boogie |t#1@@6| 63)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@49|)) |t#1@@6|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@49|)) (INTERNAL_sub_boogie |t#1@@6| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@49|)) (INTERNAL_sub_boogie |t#1@@6| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@49|)) (INTERNAL_sub_boogie |t#1@@6| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@49|)) (INTERNAL_sub_boogie |t#1@@6| 16))))))))) :qid |sha256sd.80:16| :skolemid |2155| :pattern ( (_module.__default.TStep |t#1@@6|)) ))))) :qid |sha256sd.78:12| :skolemid |2156| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@57|) |blk#0@@49|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@49|))) ))) (=> (forall ((|blk#0@@50| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#0@@50|) (INTERNAL_lt_boogie |blk#0@@50| (|Seq#Length| (_module.SHA256Trace.M |z#0@@57|)))) (and (forall ((|t#0@@21| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@21|) (=> (_module.__default.TStep |t#0@@21|) (=> (and (INTERNAL_le_boogie 0 |t#0@@21|) (INTERNAL_le_boogie |t#0@@21| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@50|)) |t#0@@21|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@57|) |blk#0@@50|)) |t#0@@21|))))))) :qid |sha256sd.80:16| :skolemid |2154| :pattern ( (_module.__default.TStep |t#0@@21|)) )) (forall ((|t#1@@7| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@7|) (=> (_module.__default.TStep |t#1@@7|) (=> (and (INTERNAL_le_boogie 16 |t#1@@7|) (INTERNAL_le_boogie |t#1@@7| 63)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@50|)) |t#1@@7|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@50|)) (INTERNAL_sub_boogie |t#1@@7| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@50|)) (INTERNAL_sub_boogie |t#1@@7| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@50|)) (INTERNAL_sub_boogie |t#1@@7| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@50|)) (INTERNAL_sub_boogie |t#1@@7| 16))))))))) :qid |sha256sd.80:16| :skolemid |2155| :pattern ( (_module.__default.TStep |t#1@@7|)) ))))) :qid |sha256sd.78:12| :skolemid |2156| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@57|) |blk#0@@50|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@57|) |blk#0@@50|))) )) (_module.__default.SHA256TraceHasCorrectWs |z#0@@57|))))) :qid |sha256sd.75:11| :skolemid |2157| :pattern ( (_module.__default.SHA256TraceHasCorrectWs |z#0@@57|) ($IsGoodHeap $Heap@@42)) ))))
(assert  (=> true (forall (($Heap@@43 T@U) (|z#0@@58| T@U) ) (!  (=> (and (and (= (type $Heap@@43) (MapType1Type refType)) (= (type |z#0@@58|) DatatypeTypeType)) (or (|_module.__default.SHA256TraceHasCorrectWs#canCall| (Lit |z#0@@58|)) (and (and ($IsGoodHeap $Heap@@43) ($Is |z#0@@58| Tclass._module.SHA256Trace)) (U_2_bool (Lit (bool_2_U (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@58|)))))))) (and (forall ((|blk#1@@34| Int) ) (!  (and (=> (INTERNAL_le_boogie 0 |blk#1@@34|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@58|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@58|)) (INTERNAL_lt_boogie |blk#1@@34| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@58|)))))) (and (forall ((|t#2@@3| Int) ) (!  (=> (_module.__default.isUInt32 |t#2@@3|) (and (|_module.__default.TStep#canCall| |t#2@@3|) (=> (_module.__default.TStep |t#2@@3|) (=> (INTERNAL_le_boogie |t#2@@3| 15) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@58|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@58|))))))) :qid |sha256sd.80:16| :skolemid |2158| :pattern ( (_module.__default.TStep |t#2@@3|)) )) (=> (forall ((|t#2@@4| Int) ) (!  (=> (_module.__default.isUInt32 |t#2@@4|) (=> (_module.__default.TStep |t#2@@4|) (=> (and (INTERNAL_le_boogie 0 |t#2@@4|) (INTERNAL_le_boogie |t#2@@4| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) |t#2@@4|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@58|))) |blk#1@@34|)) |t#2@@4|))))))) :qid |sha256sd.80:16| :skolemid |2160| :pattern ( (_module.__default.TStep |t#2@@4|)) )) (forall ((|t#3@@2| Int) ) (!  (=> (_module.__default.isUInt32 |t#3@@2|) (and (|_module.__default.TStep#canCall| |t#3@@2|) (=> (_module.__default.TStep |t#3@@2|) (=> (INTERNAL_le_boogie |t#3@@2| 63) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@58|)) (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@58|)) (|_module.__default.SSIG1#canCall| (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 2)))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@58|))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 7)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@58|)) (|_module.__default.SSIG0#canCall| (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 15))))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 15))))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@58|))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@34|)) (INTERNAL_sub_boogie |t#3@@2| 16))))))))))) :qid |sha256sd.80:16| :skolemid |2159| :pattern ( (_module.__default.TStep |t#3@@2|)) )))))) :qid |sha256sd.78:12| :skolemid |2161| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@58|) |blk#1@@34|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@58|) |blk#1@@34|))) )) (and (=> (_module.__default.SHA256TraceHasCorrectWs (Lit |z#0@@58|)) (forall ((|blk#1@@35| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@35|) (INTERNAL_lt_boogie |blk#1@@35| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@58|)))))) (and (forall ((|t#2@@5| Int) ) (!  (=> (_module.__default.isUInt32 |t#2@@5|) (=> (_module.__default.TStep |t#2@@5|) (=> (and (INTERNAL_le_boogie 0 |t#2@@5|) (INTERNAL_le_boogie |t#2@@5| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@35|)) |t#2@@5|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@58|))) |blk#1@@35|)) |t#2@@5|))))))) :qid |sha256sd.80:16| :skolemid |2162| :pattern ( (_module.__default.TStep |t#2@@5|)) )) (forall ((|t#3@@3| Int) ) (!  (=> (_module.__default.isUInt32 |t#3@@3|) (=> (_module.__default.TStep |t#3@@3|) (=> (and (INTERNAL_le_boogie 16 |t#3@@3|) (INTERNAL_le_boogie |t#3@@3| 63)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@35|)) |t#3@@3|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@35|)) (INTERNAL_sub_boogie |t#3@@3| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@35|)) (INTERNAL_sub_boogie |t#3@@3| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@35|)) (INTERNAL_sub_boogie |t#3@@3| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@35|)) (INTERNAL_sub_boogie |t#3@@3| 16))))))))) :qid |sha256sd.80:16| :skolemid |2163| :pattern ( (_module.__default.TStep |t#3@@3|)) ))))) :qid |sha256sd.78:12| :skolemid |2164| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@58|) |blk#1@@35|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@58|) |blk#1@@35|))) ))) (=> (forall ((|blk#1@@36| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#1@@36|) (INTERNAL_lt_boogie |blk#1@@36| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@58|)))))) (and (forall ((|t#2@@6| Int) ) (!  (=> (_module.__default.isUInt32 |t#2@@6|) (=> (_module.__default.TStep |t#2@@6|) (=> (and (INTERNAL_le_boogie 0 |t#2@@6|) (INTERNAL_le_boogie |t#2@@6| 15)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@36|)) |t#2@@6|))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.M (Lit |z#0@@58|))) |blk#1@@36|)) |t#2@@6|))))))) :qid |sha256sd.80:16| :skolemid |2162| :pattern ( (_module.__default.TStep |t#2@@6|)) )) (forall ((|t#3@@4| Int) ) (!  (=> (_module.__default.isUInt32 |t#3@@4|) (=> (_module.__default.TStep |t#3@@4|) (=> (and (INTERNAL_le_boogie 16 |t#3@@4|) (INTERNAL_le_boogie |t#3@@4| 63)) (= (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@36|)) |t#3@@4|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.SSIG1 StartFuel__module._default.SSIG1 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@36|)) (INTERNAL_sub_boogie |t#3@@4| 2))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@36|)) (INTERNAL_sub_boogie |t#3@@4| 7))))) (_module.__default.SSIG0 StartFuel__module._default.SSIG0 (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@36|)) (INTERNAL_sub_boogie |t#3@@4| 15)))))) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@58|))) |blk#1@@36|)) (INTERNAL_sub_boogie |t#3@@4| 16))))))))) :qid |sha256sd.80:16| :skolemid |2163| :pattern ( (_module.__default.TStep |t#3@@4|)) ))))) :qid |sha256sd.78:12| :skolemid |2164| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@58|) |blk#1@@36|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@58|) |blk#1@@36|))) )) (_module.__default.SHA256TraceHasCorrectWs (Lit |z#0@@58|)))))) :qid |sha256sd.75:11| :weight 3 :skolemid |2165| :pattern ( (_module.__default.SHA256TraceHasCorrectWs (Lit |z#0@@58|)) ($IsGoodHeap $Heap@@43)) ))))
(assert  (=> true (forall ((|z#0@@59| T@U) ) (!  (=> (and (= (type |z#0@@59|) DatatypeTypeType) (or (|_module.__default.SHA256TraceHasCorrectatohs#canCall| |z#0@@59|) (and ($Is |z#0@@59| Tclass._module.SHA256Trace) (_module.__default.IsCompleteSHA256Trace |z#0@@59|)))) true) :qid |sha256sd.86:38| :skolemid |2166| :pattern ( (_module.__default.SHA256TraceHasCorrectatohs |z#0@@59|)) ))))
(assert (forall (($Heap@@44 T@U) (|z#0@@60| T@U) ) (!  (=> (and (and (= (type $Heap@@44) (MapType1Type refType)) (= (type |z#0@@60|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@44) ($Is |z#0@@60| Tclass._module.SHA256Trace))) (and (=> (|_module.__default.SHA256TraceHasCorrectatohs#requires| |z#0@@60|) (_module.__default.IsCompleteSHA256Trace |z#0@@60|)) (=> (_module.__default.IsCompleteSHA256Trace |z#0@@60|) (|_module.__default.SHA256TraceHasCorrectatohs#requires| |z#0@@60|)))) :qid |sha256sd.86:11| :skolemid |2167| :pattern ( (|_module.__default.SHA256TraceHasCorrectatohs#requires| |z#0@@60|) ($IsGoodHeap $Heap@@44)) )))
(assert  (=> true (forall (($Heap@@45 T@U) (|z#0@@61| T@U) ) (!  (=> (and (and (= (type $Heap@@45) (MapType1Type refType)) (= (type |z#0@@61|) DatatypeTypeType)) (or (|_module.__default.SHA256TraceHasCorrectatohs#canCall| |z#0@@61|) (and (and ($IsGoodHeap $Heap@@45) ($Is |z#0@@61| Tclass._module.SHA256Trace)) (_module.__default.IsCompleteSHA256Trace |z#0@@61|)))) (and (forall ((|blk#0@@51| Int) ) (!  (and (and (=> (INTERNAL_le_boogie 0 |blk#0@@51|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (INTERNAL_lt_boogie |blk#0@@51| (|Seq#Length| (_module.SHA256Trace.M |z#0@@61|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|)))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|)) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@61|) |blk#0@@51|)))) (and (=> (INTERNAL_le_boogie 0 |blk#0@@51|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|)) (=> (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (INTERNAL_lt_boogie |blk#0@@51| (|Seq#Length| (_module.SHA256Trace.M |z#0@@61|)))) (forall ((|t#0@@22| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@22|) (and (|_module.__default.TStep#canCall| |t#0@@22|) (=> (and (INTERNAL_le_boogie 0 |t#0@@22|) (INTERNAL_le_boogie |t#0@@22| 63)) (and (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (|_module.__default.BSIG1#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (|_module.__default.Ch#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))))) (|_module.__default.K__SHA256#canCall| |t#0@@22|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@22|))) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@22|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (|_module.__default.BSIG0#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (|_module.__default.Maj#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))))) (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (=> (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@22|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@22|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@22|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@61|) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) (INTERNAL_add_boogie |t#0@@22| 1))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@22|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|)) |t#0@@22|)))))))))))))) :qid |sha256sd.91:16| :skolemid |2168| :pattern ( (_module.__default.TStep |t#0@@22|)) )))))) :qid |sha256sd.89:12| :skolemid |2169| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@51|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@61|) |blk#0@@51|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@51|))) )) (and (=> (_module.__default.SHA256TraceHasCorrectatohs |z#0@@61|) (forall ((|blk#0@@52| Int) ) (!  (=> true (and (=> (and (INTERNAL_le_boogie 0 |blk#0@@52|) (INTERNAL_lt_boogie |blk#0@@52| (|Seq#Length| (_module.SHA256Trace.M |z#0@@61|)))) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@61|) |blk#0@@52|)))) (=> (and (INTERNAL_le_boogie 0 |blk#0@@52|) (INTERNAL_lt_boogie |blk#0@@52| (|Seq#Length| (_module.SHA256Trace.M |z#0@@61|)))) (forall ((|t#0@@23| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@23|) (=> (and (_module.__default.TStep |t#0@@23|) (and (INTERNAL_le_boogie 0 |t#0@@23|) (INTERNAL_le_boogie |t#0@@23| 63))) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) (INTERNAL_add_boogie |t#0@@23| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) (INTERNAL_add_boogie |t#0@@23| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) (INTERNAL_add_boogie |t#0@@23| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) (INTERNAL_add_boogie |t#0@@23| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@23|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) (INTERNAL_add_boogie |t#0@@23| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) (INTERNAL_add_boogie |t#0@@23| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) (INTERNAL_add_boogie |t#0@@23| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) (INTERNAL_add_boogie |t#0@@23| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@23|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@52|)) |t#0@@23|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|)) |t#0@@23|)))))))))) :qid |sha256sd.91:16| :skolemid |2170| :pattern ( (_module.__default.TStep |t#0@@23|)) ))))) :qid |sha256sd.89:12| :skolemid |2171| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@52|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@61|) |blk#0@@52|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@52|))) ))) (=> (forall ((|blk#0@@53| Int) ) (!  (=> true (and (=> (and (INTERNAL_le_boogie 0 |blk#0@@53|) (INTERNAL_lt_boogie |blk#0@@53| (|Seq#Length| (_module.SHA256Trace.M |z#0@@61|)))) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@61|) |blk#0@@53|)))) (=> (and (INTERNAL_le_boogie 0 |blk#0@@53|) (INTERNAL_lt_boogie |blk#0@@53| (|Seq#Length| (_module.SHA256Trace.M |z#0@@61|)))) (forall ((|t#0@@24| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@24|) (=> (and (_module.__default.TStep |t#0@@24|) (and (INTERNAL_le_boogie 0 |t#0@@24|) (INTERNAL_le_boogie |t#0@@24| 63))) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) (INTERNAL_add_boogie |t#0@@24| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) (INTERNAL_add_boogie |t#0@@24| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) (INTERNAL_add_boogie |t#0@@24| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) (INTERNAL_add_boogie |t#0@@24| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@24|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) (INTERNAL_add_boogie |t#0@@24| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) (INTERNAL_add_boogie |t#0@@24| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) (INTERNAL_add_boogie |t#0@@24| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) (INTERNAL_add_boogie |t#0@@24| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#0@@24|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@53|)) |t#0@@24|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|)) |t#0@@24|)))))))))) :qid |sha256sd.91:16| :skolemid |2170| :pattern ( (_module.__default.TStep |t#0@@24|)) ))))) :qid |sha256sd.89:12| :skolemid |2171| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@61|) |blk#0@@53|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@61|) |blk#0@@53|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@61|) |blk#0@@53|))) )) (_module.__default.SHA256TraceHasCorrectatohs |z#0@@61|))))) :qid |sha256sd.86:11| :skolemid |2172| :pattern ( (_module.__default.SHA256TraceHasCorrectatohs |z#0@@61|) ($IsGoodHeap $Heap@@45)) ))))
(assert  (=> true (forall (($Heap@@46 T@U) (|z#0@@62| T@U) ) (!  (=> (and (and (= (type $Heap@@46) (MapType1Type refType)) (= (type |z#0@@62|) DatatypeTypeType)) (or (|_module.__default.SHA256TraceHasCorrectatohs#canCall| (Lit |z#0@@62|)) (and (and ($IsGoodHeap $Heap@@46) ($Is |z#0@@62| Tclass._module.SHA256Trace)) (U_2_bool (Lit (bool_2_U (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@62|)))))))) (and (forall ((|blk#1@@37| Int) ) (!  (and (and (=> (INTERNAL_le_boogie 0 |blk#1@@37|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (INTERNAL_lt_boogie |blk#1@@37| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@62|)))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (|_module.__default.ConvertAtoHToSeq#canCall| ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (LitInt 0))))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|))) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@62|))) |blk#1@@37|)))) (and (=> (INTERNAL_le_boogie 0 |blk#1@@37|) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|))) (=> (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (INTERNAL_lt_boogie |blk#1@@37| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@62|)))))) (forall ((|t#1@@8| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@8|) (and (|_module.__default.TStep#canCall| |t#1@@8|) (=> (and (INTERNAL_le_boogie 0 |t#1@@8|) (INTERNAL_le_boogie |t#1@@8| 63)) (and (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (|_module.__default.BSIG1#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (|_module.__default.Ch#canCall| (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))))) (|_module.__default.K__SHA256#canCall| |t#1@@8|)) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@8|))) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@8|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (|_module.__default.BSIG0#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (|_module.__default.Maj#canCall| (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))))) (and (and (and (and (and (and (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (=> (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@8|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (|_module.__default.BitwiseAdd32#canCall| (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@8|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@8|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@62|)) (_module.atoh__Type.atoh__c_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) (INTERNAL_add_boogie |t#1@@8| 1))))) (|_module.__default.BitwiseAdd32#canCall| (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@8|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@37|)) |t#1@@8|)))))))))))))) :qid |sha256sd.91:16| :skolemid |2173| :pattern ( (_module.__default.TStep |t#1@@8|)) )))))) :qid |sha256sd.89:12| :skolemid |2174| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@62|) |blk#1@@37|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@62|) |blk#1@@37|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@62|) |blk#1@@37|))) )) (and (=> (_module.__default.SHA256TraceHasCorrectatohs (Lit |z#0@@62|)) (forall ((|blk#1@@38| Int) ) (!  (=> true (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@38|) (INTERNAL_lt_boogie |blk#1@@38| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@62|)))))) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@62|))) |blk#1@@38|)))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@38|) (INTERNAL_lt_boogie |blk#1@@38| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@62|)))))) (forall ((|t#1@@9| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@9|) (=> (and (_module.__default.TStep |t#1@@9|) (and (INTERNAL_le_boogie 0 |t#1@@9|) (INTERNAL_le_boogie |t#1@@9| 63))) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) (INTERNAL_add_boogie |t#1@@9| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) (INTERNAL_add_boogie |t#1@@9| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) (INTERNAL_add_boogie |t#1@@9| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) (INTERNAL_add_boogie |t#1@@9| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@9|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) (INTERNAL_add_boogie |t#1@@9| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) (INTERNAL_add_boogie |t#1@@9| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) (INTERNAL_add_boogie |t#1@@9| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) (INTERNAL_add_boogie |t#1@@9| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@9|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@38|)) |t#1@@9|)))))))))) :qid |sha256sd.91:16| :skolemid |2175| :pattern ( (_module.__default.TStep |t#1@@9|)) ))))) :qid |sha256sd.89:12| :skolemid |2176| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@62|) |blk#1@@38|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@62|) |blk#1@@38|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@62|) |blk#1@@38|))) ))) (=> (forall ((|blk#1@@39| Int) ) (!  (=> true (and (=> (and (INTERNAL_le_boogie 0 |blk#1@@39|) (INTERNAL_lt_boogie |blk#1@@39| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@62|)))))) (|Seq#Equal| (_module.__default.ConvertAtoHToSeq ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@62|))) |blk#1@@39|)))) (=> (and (INTERNAL_le_boogie 0 |blk#1@@39|) (INTERNAL_lt_boogie |blk#1@@39| (|Seq#Length| (Lit (_module.SHA256Trace.M (Lit |z#0@@62|)))))) (forall ((|t#1@@10| Int) ) (!  (=> (_module.__default.isUInt32 |t#1@@10|) (=> (and (_module.__default.TStep |t#1@@10|) (and (INTERNAL_le_boogie 0 |t#1@@10|) (INTERNAL_le_boogie |t#1@@10| 63))) (and (and (and (and (and (and (and (= (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) (INTERNAL_add_boogie |t#1@@10| 1)))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|)))) (= (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) (INTERNAL_add_boogie |t#1@@10| 1)))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))) (= (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) (INTERNAL_add_boogie |t#1@@10| 1)))) (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))) (= (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) (INTERNAL_add_boogie |t#1@@10| 1)))) (_module.__default.BitwiseAdd32 (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))))) (= (_module.atoh__Type.d ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) (INTERNAL_add_boogie |t#1@@10| 1)))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))) (= (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) (INTERNAL_add_boogie |t#1@@10| 1)))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))) (= (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) (INTERNAL_add_boogie |t#1@@10| 1)))) (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))) (= (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) (INTERNAL_add_boogie |t#1@@10| 1)))) (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.__default.BitwiseAdd32 (_module.atoh__Type.h ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))) (_module.__default.BSIG1 StartFuel__module._default.BSIG1 (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))) (_module.__default.Ch StartFuel__module._default.Ch (_module.atoh__Type.e ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))) (_module.atoh__Type.f ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))) (_module.atoh__Type.g ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))))) (_module.__default.K__SHA256 StartFuel__module._default.K_SHA256 |t#1@@10|)) (U_2_int ($Unbox intType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.W (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|)))) (_module.__default.BitwiseAdd32 (_module.__default.BSIG0 StartFuel__module._default.BSIG0 (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|)))) (_module.__default.Maj StartFuel__module._default.Maj (_module.atoh__Type.a ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))) (_module.atoh__Type.b ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|))) (_module.atoh__Type.c ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.atoh (Lit |z#0@@62|))) |blk#1@@39|)) |t#1@@10|)))))))))) :qid |sha256sd.91:16| :skolemid |2175| :pattern ( (_module.__default.TStep |t#1@@10|)) ))))) :qid |sha256sd.89:12| :skolemid |2176| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@62|) |blk#1@@39|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@62|) |blk#1@@39|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@62|) |blk#1@@39|))) )) (_module.__default.SHA256TraceHasCorrectatohs (Lit |z#0@@62|)))))) :qid |sha256sd.86:11| :weight 3 :skolemid |2177| :pattern ( (_module.__default.SHA256TraceHasCorrectatohs (Lit |z#0@@62|)) ($IsGoodHeap $Heap@@46)) ))))
(assert  (=> true (forall ((|z#0@@63| T@U) ) (!  (=> (and (= (type |z#0@@63|) DatatypeTypeType) (or (|_module.__default.SHA256TraceIsCorrect#canCall| |z#0@@63|) (and ($Is |z#0@@63| Tclass._module.SHA256Trace) (and (and (_module.__default.IsCompleteSHA256Trace |z#0@@63|) (=> (_module.__default.SHA256TraceHasCorrectHs |z#0@@63|) (_module.__default.IsCompleteSHA256Trace |z#0@@63|))) (=> (and (_module.__default.SHA256TraceHasCorrectHs |z#0@@63|) (_module.__default.SHA256TraceHasCorrectWs |z#0@@63|)) (_module.__default.IsCompleteSHA256Trace |z#0@@63|)))))) true) :qid |sha256sd.106:43| :skolemid |2178| :pattern ( (_module.__default.SHA256TraceIsCorrect |z#0@@63|)) ))))
(assert (forall ((|z#0@@64| T@U) ) (!  (=> (and (= (type |z#0@@64|) DatatypeTypeType) ($Is |z#0@@64| Tclass._module.SHA256Trace)) (and (=> (|_module.__default.SHA256TraceIsCorrect#requires| |z#0@@64|) (and (and (_module.__default.IsCompleteSHA256Trace |z#0@@64|) (=> (_module.__default.SHA256TraceHasCorrectHs |z#0@@64|) (_module.__default.IsCompleteSHA256Trace |z#0@@64|))) (=> (and (_module.__default.SHA256TraceHasCorrectHs |z#0@@64|) (_module.__default.SHA256TraceHasCorrectWs |z#0@@64|)) (_module.__default.IsCompleteSHA256Trace |z#0@@64|)))) (=> (and (and (_module.__default.IsCompleteSHA256Trace |z#0@@64|) (=> (_module.__default.SHA256TraceHasCorrectHs |z#0@@64|) (_module.__default.IsCompleteSHA256Trace |z#0@@64|))) (=> (and (_module.__default.SHA256TraceHasCorrectHs |z#0@@64|) (_module.__default.SHA256TraceHasCorrectWs |z#0@@64|)) (_module.__default.IsCompleteSHA256Trace |z#0@@64|))) (|_module.__default.SHA256TraceIsCorrect#requires| |z#0@@64|)))) :qid |sha256sd.106:43| :skolemid |2179| :pattern ( (|_module.__default.SHA256TraceIsCorrect#requires| |z#0@@64|)) )))
(assert  (=> true (forall ((|z#0@@65| T@U) ) (!  (=> (and (= (type |z#0@@65|) DatatypeTypeType) (or (|_module.__default.SHA256TraceIsCorrect#canCall| |z#0@@65|) (and ($Is |z#0@@65| Tclass._module.SHA256Trace) (and (and (_module.__default.IsCompleteSHA256Trace |z#0@@65|) (=> (_module.__default.SHA256TraceHasCorrectHs |z#0@@65|) (_module.__default.IsCompleteSHA256Trace |z#0@@65|))) (=> (and (_module.__default.SHA256TraceHasCorrectHs |z#0@@65|) (_module.__default.SHA256TraceHasCorrectWs |z#0@@65|)) (_module.__default.IsCompleteSHA256Trace |z#0@@65|)))))) (and (and (and (|_module.__default.SHA256TraceHasCorrectHs#canCall| |z#0@@65|) (=> (_module.__default.SHA256TraceHasCorrectHs |z#0@@65|) (|_module.__default.SHA256TraceHasCorrectWs#canCall| |z#0@@65|))) (=> (and (|_module.__default.SHA256TraceHasCorrectWs#canCall| |z#0@@65|) (_module.__default.SHA256TraceHasCorrectWs |z#0@@65|)) (|_module.__default.SHA256TraceHasCorrectatohs#canCall| |z#0@@65|))) (and (=> (_module.__default.SHA256TraceIsCorrect |z#0@@65|) (and (and (_module.__default.SHA256TraceHasCorrectHs |z#0@@65|) (_module.__default.SHA256TraceHasCorrectWs |z#0@@65|)) (_module.__default.SHA256TraceHasCorrectatohs |z#0@@65|))) (=> (and (and (_module.__default.SHA256TraceHasCorrectHs |z#0@@65|) (_module.__default.SHA256TraceHasCorrectWs |z#0@@65|)) (_module.__default.SHA256TraceHasCorrectatohs |z#0@@65|)) (_module.__default.SHA256TraceIsCorrect |z#0@@65|))))) :qid |sha256sd.106:43| :skolemid |2180| :pattern ( (_module.__default.SHA256TraceIsCorrect |z#0@@65|)) ))))
(assert  (=> true (forall ((|z#0@@66| T@U) ) (!  (=> (and (= (type |z#0@@66|) DatatypeTypeType) (or (|_module.__default.SHA256TraceIsCorrect#canCall| (Lit |z#0@@66|)) (and ($Is |z#0@@66| Tclass._module.SHA256Trace) (and (and (U_2_bool (Lit (bool_2_U (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@66|))))) (U_2_bool (Lit (bool_2_U  (=> (_module.__default.SHA256TraceHasCorrectHs (Lit |z#0@@66|)) (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@66|))))))) (U_2_bool (Lit (bool_2_U  (=> (and (_module.__default.SHA256TraceHasCorrectHs (Lit |z#0@@66|)) (_module.__default.SHA256TraceHasCorrectWs (Lit |z#0@@66|))) (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@66|)))))))))) (and (and (and (|_module.__default.SHA256TraceHasCorrectHs#canCall| (Lit |z#0@@66|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.SHA256TraceHasCorrectHs (Lit |z#0@@66|))))) (|_module.__default.SHA256TraceHasCorrectWs#canCall| (Lit |z#0@@66|)))) (=> (and (|_module.__default.SHA256TraceHasCorrectWs#canCall| (Lit |z#0@@66|)) (U_2_bool (Lit (bool_2_U (_module.__default.SHA256TraceHasCorrectWs (Lit |z#0@@66|)))))) (|_module.__default.SHA256TraceHasCorrectatohs#canCall| (Lit |z#0@@66|)))) (and (=> (_module.__default.SHA256TraceIsCorrect (Lit |z#0@@66|)) (U_2_bool (Lit (bool_2_U  (and (and (_module.__default.SHA256TraceHasCorrectHs (Lit |z#0@@66|)) (_module.__default.SHA256TraceHasCorrectWs (Lit |z#0@@66|))) (_module.__default.SHA256TraceHasCorrectatohs (Lit |z#0@@66|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (and (_module.__default.SHA256TraceHasCorrectHs (Lit |z#0@@66|)) (_module.__default.SHA256TraceHasCorrectWs (Lit |z#0@@66|))) (_module.__default.SHA256TraceHasCorrectatohs (Lit |z#0@@66|)))))) (_module.__default.SHA256TraceIsCorrect (Lit |z#0@@66|)))))) :qid |sha256sd.106:43| :weight 3 :skolemid |2181| :pattern ( (_module.__default.SHA256TraceIsCorrect (Lit |z#0@@66|))) ))))
(assert  (=> true (forall ((|z#0@@67| T@U) (|message#0| T@U) (|hash#0| T@U) ) (!  (=> (and (and (and (= (type |z#0@@67|) DatatypeTypeType) (= (type |message#0|) (SeqType BoxType))) (= (type |hash#0|) (SeqType BoxType))) (or (|_module.__default.DoesTraceDemonstrateSHA256#canCall| |z#0@@67| |message#0| |hash#0|) (and (and ($Is |z#0@@67| Tclass._module.SHA256Trace) ($Is |message#0| (TSeq Tclass._module.byte))) ($Is |hash#0| (TSeq Tclass._module.word))))) true) :qid |sha256sd.111:38| :skolemid |2182| :pattern ( (_module.__default.DoesTraceDemonstrateSHA256 |z#0@@67| |message#0| |hash#0|)) ))))
(assert (forall (($Heap@@47 T@U) (|z#0@@68| T@U) (|message#0@@0| T@U) (|hash#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@47) (MapType1Type refType)) (= (type |z#0@@68|) DatatypeTypeType)) (= (type |message#0@@0|) (SeqType BoxType))) (= (type |hash#0@@0|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@47) ($Is |z#0@@68| Tclass._module.SHA256Trace)) ($Is |message#0@@0| (TSeq Tclass._module.byte))) ($Is |hash#0@@0| (TSeq Tclass._module.word)))) (and (=> (|_module.__default.DoesTraceDemonstrateSHA256#requires| |z#0@@68| |message#0@@0| |hash#0@@0|) true) (=> true (|_module.__default.DoesTraceDemonstrateSHA256#requires| |z#0@@68| |message#0@@0| |hash#0@@0|)))) :qid |sha256sd.111:11| :skolemid |2183| :pattern ( (|_module.__default.DoesTraceDemonstrateSHA256#requires| |z#0@@68| |message#0@@0| |hash#0@@0|) ($IsGoodHeap $Heap@@47)) )))
(assert (forall ((arg0@@233 T@U) (arg1@@127 T@U) (arg2@@89 T@U) ) (! (= (type (_module.__default.ConcatenateSeqs arg0@@233 arg1@@127 arg2@@89)) (SeqType BoxType)) :qid |funType:_module.__default.ConcatenateSeqs| :pattern ( (_module.__default.ConcatenateSeqs arg0@@233 arg1@@127 arg2@@89)) )))
(assert  (=> true (forall (($Heap@@48 T@U) (|z#0@@69| T@U) (|message#0@@1| T@U) (|hash#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@48) (MapType1Type refType)) (= (type |z#0@@69|) DatatypeTypeType)) (= (type |message#0@@1|) (SeqType BoxType))) (= (type |hash#0@@1|) (SeqType BoxType))) (or (|_module.__default.DoesTraceDemonstrateSHA256#canCall| |z#0@@69| |message#0@@1| |hash#0@@1|) (and (and (and ($IsGoodHeap $Heap@@48) ($Is |z#0@@69| Tclass._module.SHA256Trace)) ($Is |message#0@@1| (TSeq Tclass._module.byte))) ($Is |hash#0@@1| (TSeq Tclass._module.word))))) (and (and (and (and (and (|_module.__default.IsCompleteSHA256Trace#canCall| |z#0@@69|) (=> (_module.__default.IsCompleteSHA256Trace |z#0@@69|) (|_module.__default.SHA256TraceIsCorrect#canCall| |z#0@@69|))) (=> (and (|_module.__default.SHA256TraceIsCorrect#canCall| |z#0@@69|) (_module.__default.SHA256TraceIsCorrect |z#0@@69|)) |_module.__default.MaxBytesForSHA#canCall|)) (=> (and |_module.__default.MaxBytesForSHA#canCall| (INTERNAL_le_boogie (|Seq#Length| |message#0@@1|) _module.__default.MaxBytesForSHA)) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@69|) (|_module.__default.ConcatenateSeqs#canCall| Tclass._module.word (_module.SHA256Trace.M |z#0@@69|))) (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#canCall| (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (_module.SHA256Trace.M |z#0@@69|)) |message#0@@1|)))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@69|) (|_module.__default.ConcatenateSeqs#canCall| Tclass._module.word (_module.SHA256Trace.M |z#0@@69|))) (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#canCall| (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (_module.SHA256Trace.M |z#0@@69|)) |message#0@@1|)) (_module.__default.WordSeqIsProperlySHAPaddedByteSeq (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (_module.SHA256Trace.M |z#0@@69|)) |message#0@@1|)) (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@69|) (_module.SHA256Trace.SHA256Trace__c_q |z#0@@69|)))) (and (=> (_module.__default.DoesTraceDemonstrateSHA256 |z#0@@69| |message#0@@1| |hash#0@@1|) (and (and (and (and (_module.__default.IsCompleteSHA256Trace |z#0@@69|) (_module.__default.SHA256TraceIsCorrect |z#0@@69|)) (INTERNAL_le_boogie (|Seq#Length| |message#0@@1|) _module.__default.MaxBytesForSHA)) (_module.__default.WordSeqIsProperlySHAPaddedByteSeq (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (_module.SHA256Trace.M |z#0@@69|)) |message#0@@1|)) (|Seq#Equal| |hash#0@@1| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@69|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@69|)) 1)))))) (=> (and (and (and (and (_module.__default.IsCompleteSHA256Trace |z#0@@69|) (_module.__default.SHA256TraceIsCorrect |z#0@@69|)) (INTERNAL_le_boogie (|Seq#Length| |message#0@@1|) _module.__default.MaxBytesForSHA)) (_module.__default.WordSeqIsProperlySHAPaddedByteSeq (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (_module.SHA256Trace.M |z#0@@69|)) |message#0@@1|)) (|Seq#Equal| |hash#0@@1| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@69|) (INTERNAL_sub_boogie (|Seq#Length| (_module.SHA256Trace.H |z#0@@69|)) 1))))) (_module.__default.DoesTraceDemonstrateSHA256 |z#0@@69| |message#0@@1| |hash#0@@1|))))) :qid |sha256sd.111:11| :skolemid |2184| :pattern ( (_module.__default.DoesTraceDemonstrateSHA256 |z#0@@69| |message#0@@1| |hash#0@@1|) ($IsGoodHeap $Heap@@48)) ))))
(assert  (=> true (forall (($Heap@@49 T@U) (|z#0@@70| T@U) (|message#0@@2| T@U) (|hash#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@49) (MapType1Type refType)) (= (type |z#0@@70|) DatatypeTypeType)) (= (type |message#0@@2|) (SeqType BoxType))) (= (type |hash#0@@2|) (SeqType BoxType))) (or (|_module.__default.DoesTraceDemonstrateSHA256#canCall| (Lit |z#0@@70|) (Lit |message#0@@2|) (Lit |hash#0@@2|)) (and (and (and ($IsGoodHeap $Heap@@49) ($Is |z#0@@70| Tclass._module.SHA256Trace)) ($Is |message#0@@2| (TSeq Tclass._module.byte))) ($Is |hash#0@@2| (TSeq Tclass._module.word))))) (and (and (and (and (and (|_module.__default.IsCompleteSHA256Trace#canCall| (Lit |z#0@@70|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@70|))))) (|_module.__default.SHA256TraceIsCorrect#canCall| (Lit |z#0@@70|)))) (=> (and (|_module.__default.SHA256TraceIsCorrect#canCall| (Lit |z#0@@70|)) (U_2_bool (Lit (bool_2_U (_module.__default.SHA256TraceIsCorrect (Lit |z#0@@70|)))))) |_module.__default.MaxBytesForSHA#canCall|)) (=> (and |_module.__default.MaxBytesForSHA#canCall| (INTERNAL_le_boogie (|Seq#Length| (Lit |message#0@@2|)) _module.__default.MaxBytesForSHA)) (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@70|)) (|_module.__default.ConcatenateSeqs#canCall| Tclass._module.word (Lit (_module.SHA256Trace.M (Lit |z#0@@70|))))) (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#canCall| (Lit (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (Lit (_module.SHA256Trace.M (Lit |z#0@@70|))))) (Lit |message#0@@2|))))) (=> (and (and (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@70|)) (|_module.__default.ConcatenateSeqs#canCall| Tclass._module.word (Lit (_module.SHA256Trace.M (Lit |z#0@@70|))))) (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#canCall| (Lit (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (Lit (_module.SHA256Trace.M (Lit |z#0@@70|))))) (Lit |message#0@@2|))) (U_2_bool (Lit (bool_2_U (_module.__default.WordSeqIsProperlySHAPaddedByteSeq (Lit (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (Lit (_module.SHA256Trace.M (Lit |z#0@@70|))))) (Lit |message#0@@2|)))))) (and (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@70|)) (_module.SHA256Trace.SHA256Trace__c_q (Lit |z#0@@70|))))) (and (=> (_module.__default.DoesTraceDemonstrateSHA256 (Lit |z#0@@70|) (Lit |message#0@@2|) (Lit |hash#0@@2|)) (and (and (and (and (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@70|)) (_module.__default.SHA256TraceIsCorrect (Lit |z#0@@70|))) (INTERNAL_le_boogie (|Seq#Length| (Lit |message#0@@2|)) _module.__default.MaxBytesForSHA)) (_module.__default.WordSeqIsProperlySHAPaddedByteSeq (Lit (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (Lit (_module.SHA256Trace.M (Lit |z#0@@70|))))) (Lit |message#0@@2|))) (|Seq#Equal| |hash#0@@2| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@70|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@70|)))) 1)))))) (=> (and (and (and (and (_module.__default.IsCompleteSHA256Trace (Lit |z#0@@70|)) (_module.__default.SHA256TraceIsCorrect (Lit |z#0@@70|))) (INTERNAL_le_boogie (|Seq#Length| (Lit |message#0@@2|)) _module.__default.MaxBytesForSHA)) (_module.__default.WordSeqIsProperlySHAPaddedByteSeq (Lit (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (Lit (_module.SHA256Trace.M (Lit |z#0@@70|))))) (Lit |message#0@@2|))) (|Seq#Equal| |hash#0@@2| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (_module.SHA256Trace.H (Lit |z#0@@70|))) (INTERNAL_sub_boogie (|Seq#Length| (Lit (_module.SHA256Trace.H (Lit |z#0@@70|)))) 1))))) (_module.__default.DoesTraceDemonstrateSHA256 (Lit |z#0@@70|) (Lit |message#0@@2|) (Lit |hash#0@@2|)))))) :qid |sha256sd.111:11| :weight 3 :skolemid |2185| :pattern ( (_module.__default.DoesTraceDemonstrateSHA256 (Lit |z#0@@70|) (Lit |message#0@@2|) (Lit |hash#0@@2|)) ($IsGoodHeap $Heap@@49)) ))))
(assert (= (type _module.__default.InitialSHA256Trace) DatatypeTypeType))
(assert  (=> true (=> true ($Is _module.__default.InitialSHA256Trace Tclass._module.SHA256Trace))))
(assert  (=> |_module.__default.InitialSHA256Trace#requires| true))
(assert  (=> true |_module.__default.InitialSHA256Trace#requires|))
(assert  (and (and (= (type MoreFuel__module._default.InitialH_SHA2560) LayerTypeType) (= (type StartFuelAssert__module._default.InitialH_SHA256) LayerTypeType)) (forall ((arg0@@234 T@U) (arg1@@128 T@U) (arg2@@90 T@U) (arg3@@64 T@U) ) (! (= (type (|#_module.SHA256Trace.SHA256Trace_c| arg0@@234 arg1@@128 arg2@@90 arg3@@64)) DatatypeTypeType) :qid |funType:#_module.SHA256Trace.SHA256Trace_c| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| arg0@@234 arg1@@128 arg2@@90 arg3@@64)) ))))
(assert  (=> true (=> true (and (and (and (= StartFuel__module._default.InitialH_SHA256 ($LS MoreFuel__module._default.InitialH_SHA2560)) (= StartFuelAssert__module._default.InitialH_SHA256 ($LS ($LS MoreFuel__module._default.InitialH_SHA2560)))) (= (AsFuelBottom MoreFuel__module._default.InitialH_SHA2560) MoreFuel__module._default.InitialH_SHA2560)) (= _module.__default.InitialSHA256Trace (Lit (|#_module.SHA256Trace.SHA256Trace_c| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 1779033703)))) ($Box (int_2_U (LitInt 3144134277)))) ($Box (int_2_U (LitInt 1013904242)))) ($Box (int_2_U (LitInt 2773480762)))) ($Box (int_2_U (LitInt 1359893119)))) ($Box (int_2_U (LitInt 2600822924)))) ($Box (int_2_U (LitInt 528734635)))) ($Box (int_2_U (LitInt 1541459225)))))))) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)))))))))
(assert (= (type MoreFuel__module._default.InitialH_SHA2561) LayerTypeType))
(assert  (=> true (=> true (and (and (and (= StartFuel__module._default.InitialH_SHA256 ($LS MoreFuel__module._default.InitialH_SHA2561)) (= StartFuelAssert__module._default.InitialH_SHA256 ($LS ($LS MoreFuel__module._default.InitialH_SHA2561)))) (= (AsFuelBottom MoreFuel__module._default.InitialH_SHA2561) MoreFuel__module._default.InitialH_SHA2561)) (= _module.__default.InitialSHA256Trace (Lit (|#_module.SHA256Trace.SHA256Trace_c| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 1779033703)))) ($Box (int_2_U (LitInt 3144134277)))) ($Box (int_2_U (LitInt 1013904242)))) ($Box (int_2_U (LitInt 2773480762)))) ($Box (int_2_U (LitInt 1359893119)))) ($Box (int_2_U (LitInt 2600822924)))) ($Box (int_2_U (LitInt 528734635)))) ($Box (int_2_U (LitInt 1541459225)))))))) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)))))))))
(assert  (=> true (forall ((|message#0@@3| T@U) (|hash#0@@3| T@U) ) (!  (=> (and (and (= (type |message#0@@3|) (SeqType BoxType)) (= (type |hash#0@@3|) (SeqType BoxType))) (or (|_module.__default.IsSHA256#canCall| |message#0@@3| |hash#0@@3|) (and ($Is |message#0@@3| (TSeq Tclass._module.byte)) ($Is |hash#0@@3| (TSeq Tclass._module.word))))) true) :qid |sha256sd.131:20| :skolemid |2186| :pattern ( (_module.__default.IsSHA256 |message#0@@3| |hash#0@@3|)) ))))
(assert (forall ((|message#0@@4| T@U) (|hash#0@@4| T@U) ) (!  (=> (and (and (= (type |message#0@@4|) (SeqType BoxType)) (= (type |hash#0@@4|) (SeqType BoxType))) (and ($Is |message#0@@4| (TSeq Tclass._module.byte)) ($Is |hash#0@@4| (TSeq Tclass._module.word)))) (and (=> (|_module.__default.IsSHA256#requires| |message#0@@4| |hash#0@@4|) true) (=> true (|_module.__default.IsSHA256#requires| |message#0@@4| |hash#0@@4|)))) :qid |sha256sd.131:20| :skolemid |2187| :pattern ( (|_module.__default.IsSHA256#requires| |message#0@@4| |hash#0@@4|)) )))
(assert  (=> true (forall ((|message#0@@5| T@U) (|hash#0@@5| T@U) ) (!  (=> (and (and (= (type |message#0@@5|) (SeqType BoxType)) (= (type |hash#0@@5|) (SeqType BoxType))) (or (|_module.__default.IsSHA256#canCall| |message#0@@5| |hash#0@@5|) (and ($Is |message#0@@5| (TSeq Tclass._module.byte)) ($Is |hash#0@@5| (TSeq Tclass._module.word))))) (and (forall ((|z#0@@71| T@U) ) (!  (=> (and (= (type |z#0@@71|) DatatypeTypeType) ($Is |z#0@@71| Tclass._module.SHA256Trace)) (|_module.__default.DoesTraceDemonstrateSHA256#canCall| |z#0@@71| |message#0@@5| |hash#0@@5|)) :qid |sha256sd.133:12| :skolemid |2188| :pattern ( (_module.__default.DoesTraceDemonstrateSHA256 |z#0@@71| |message#0@@5| |hash#0@@5|)) )) (and (=> (_module.__default.IsSHA256 |message#0@@5| |hash#0@@5|) (exists ((|z#0@@72| T@U) ) (!  (and (= (type |z#0@@72|) DatatypeTypeType) (and ($Is |z#0@@72| Tclass._module.SHA256Trace) (_module.__default.DoesTraceDemonstrateSHA256 |z#0@@72| |message#0@@5| |hash#0@@5|))) :qid |sha256sd.133:12| :skolemid |2189| :pattern ( (_module.__default.DoesTraceDemonstrateSHA256 |z#0@@72| |message#0@@5| |hash#0@@5|)) ))) (=> (exists ((|z#0@@73| T@U) ) (!  (and (= (type |z#0@@73|) DatatypeTypeType) (and ($Is |z#0@@73| Tclass._module.SHA256Trace) (_module.__default.DoesTraceDemonstrateSHA256 |z#0@@73| |message#0@@5| |hash#0@@5|))) :qid |sha256sd.133:12| :skolemid |2189| :pattern ( (_module.__default.DoesTraceDemonstrateSHA256 |z#0@@73| |message#0@@5| |hash#0@@5|)) )) (_module.__default.IsSHA256 |message#0@@5| |hash#0@@5|))))) :qid |sha256sd.131:20| :skolemid |2190| :pattern ( (_module.__default.IsSHA256 |message#0@@5| |hash#0@@5|)) ))))
(assert  (=> true (forall ((|message#0@@6| T@U) (|hash#0@@6| T@U) ) (!  (=> (and (and (= (type |message#0@@6|) (SeqType BoxType)) (= (type |hash#0@@6|) (SeqType BoxType))) (or (|_module.__default.IsSHA256#canCall| (Lit |message#0@@6|) (Lit |hash#0@@6|)) (and ($Is |message#0@@6| (TSeq Tclass._module.byte)) ($Is |hash#0@@6| (TSeq Tclass._module.word))))) (and (forall ((|z#1| T@U) ) (!  (=> (and (= (type |z#1|) DatatypeTypeType) ($Is |z#1| Tclass._module.SHA256Trace)) (|_module.__default.DoesTraceDemonstrateSHA256#canCall| |z#1| (Lit |message#0@@6|) (Lit |hash#0@@6|))) :qid |sha256sd.133:12| :skolemid |2191| :pattern ( (_module.__default.DoesTraceDemonstrateSHA256 |z#1| |message#0@@6| |hash#0@@6|)) )) (and (=> (_module.__default.IsSHA256 (Lit |message#0@@6|) (Lit |hash#0@@6|)) (exists ((|z#1@@0| T@U) ) (!  (and (= (type |z#1@@0|) DatatypeTypeType) (and ($Is |z#1@@0| Tclass._module.SHA256Trace) (_module.__default.DoesTraceDemonstrateSHA256 |z#1@@0| (Lit |message#0@@6|) (Lit |hash#0@@6|)))) :qid |sha256sd.133:12| :skolemid |2192| :pattern ( (_module.__default.DoesTraceDemonstrateSHA256 |z#1@@0| |message#0@@6| |hash#0@@6|)) ))) (=> (exists ((|z#1@@1| T@U) ) (!  (and (= (type |z#1@@1|) DatatypeTypeType) (and ($Is |z#1@@1| Tclass._module.SHA256Trace) (_module.__default.DoesTraceDemonstrateSHA256 |z#1@@1| (Lit |message#0@@6|) (Lit |hash#0@@6|)))) :qid |sha256sd.133:12| :skolemid |2192| :pattern ( (_module.__default.DoesTraceDemonstrateSHA256 |z#1@@1| |message#0@@6| |hash#0@@6|)) )) (_module.__default.IsSHA256 (Lit |message#0@@6|) (Lit |hash#0@@6|)))))) :qid |sha256sd.131:20| :weight 3 :skolemid |2193| :pattern ( (_module.__default.IsSHA256 (Lit |message#0@@6|) (Lit |hash#0@@6|))) ))))
(assert (forall ((arg0@@235 T@U) ) (! (= (type (_module.__default.SHA256 arg0@@235)) (SeqType BoxType)) :qid |funType:_module.__default.SHA256| :pattern ( (_module.__default.SHA256 arg0@@235)) )))
(assert  (=> true (forall ((|message#0@@7| T@U) ) (!  (=> (and (= (type |message#0@@7|) (SeqType BoxType)) (or (|_module.__default.SHA256#canCall| |message#0@@7|) (and ($Is |message#0@@7| (TSeq Tclass._module.byte)) (INTERNAL_le_boogie (|Seq#Length| |message#0@@7|) _module.__default.MaxBytesForSHA)))) (and (_module.__default.IsSHA256 |message#0@@7| (_module.__default.SHA256 |message#0@@7|)) ($Is (_module.__default.SHA256 |message#0@@7|) (TSeq Tclass._module.word)))) :qid |sha256sd.136:26| :skolemid |2194| :pattern ( (_module.__default.SHA256 |message#0@@7|)) ))))
(assert (forall ((|message#0@@8| T@U) ) (!  (=> (and (= (type |message#0@@8|) (SeqType BoxType)) ($Is |message#0@@8| (TSeq Tclass._module.byte))) (and (=> (|_module.__default.SHA256#requires| |message#0@@8|) (INTERNAL_le_boogie (|Seq#Length| |message#0@@8|) _module.__default.MaxBytesForSHA)) (=> (INTERNAL_le_boogie (|Seq#Length| |message#0@@8|) _module.__default.MaxBytesForSHA) (|_module.__default.SHA256#requires| |message#0@@8|)))) :qid |sha256sd.136:26| :skolemid |2195| :pattern ( (|_module.__default.SHA256#requires| |message#0@@8|)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@236 T@U) (arg1@@129 T@U) ) (! (= (type (_module.__default.HMAC__SHA256 arg0@@236 arg1@@129)) (SeqType BoxType)) :qid |funType:_module.__default.HMAC__SHA256| :pattern ( (_module.__default.HMAC__SHA256 arg0@@236 arg1@@129)) )) (forall ((arg0@@237 Int) ) (! (= (type (_module.__default.Opad arg0@@237)) (SeqType BoxType)) :qid |funType:_module.__default.Opad| :pattern ( (_module.__default.Opad arg0@@237)) ))) (forall ((arg0@@238 Int) ) (! (= (type (_module.__default.Ipad arg0@@238)) (SeqType BoxType)) :qid |funType:_module.__default.Ipad| :pattern ( (_module.__default.Ipad arg0@@238)) ))) (forall ((arg0@@239 T@U) (arg1@@130 T@U) ) (! (= (type (_module.__default.WordSeqToBytes arg0@@239 arg1@@130)) (SeqType BoxType)) :qid |funType:_module.__default.WordSeqToBytes| :pattern ( (_module.__default.WordSeqToBytes arg0@@239 arg1@@130)) ))) (= (type StartFuel__module._default.WordSeqToBytes) LayerTypeType)) (forall ((arg0@@240 T@U) (arg1@@131 T@U) (arg2@@91 T@U) ) (! (= (type (_module.__default.SeqXor arg0@@240 arg1@@131 arg2@@91)) (SeqType BoxType)) :qid |funType:_module.__default.SeqXor| :pattern ( (_module.__default.SeqXor arg0@@240 arg1@@131 arg2@@91)) ))) (= (type StartFuel__module._default.SeqXor) LayerTypeType)))
(assert  (=> true (forall ((|key#0| T@U) (|message#0@@9| T@U) ) (!  (=> (and (and (= (type |key#0|) (SeqType BoxType)) (= (type |message#0@@9|) (SeqType BoxType))) (or (|_module.__default.HMAC__SHA256#canCall| |key#0| |message#0@@9|) (and (and ($Is |key#0| (TSeq Tclass._module.word)) ($Is |message#0@@9| (TSeq Tclass._module.byte))) (and (and (and (and (and (INTERNAL_ge_boogie 8 0) (= (|Seq#Length| |key#0|) (|Seq#Length| (Lit (_module.__default.Opad (LitInt 8)))))) (INTERNAL_ge_boogie 8 0)) (= (|Seq#Length| |key#0|) (|Seq#Length| (Lit (_module.__default.Ipad (LitInt 8)))))) (INTERNAL_le_boogie (|Seq#Length| (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@9|)) _module.__default.MaxBytesForSHA)) (INTERNAL_le_boogie (|Seq#Length| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0| (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@9|))))) _module.__default.MaxBytesForSHA))))) ($Is (_module.__default.HMAC__SHA256 |key#0| |message#0@@9|) (TSeq Tclass._module.word))) :qid |sha256sd.140:33| :skolemid |2196| :pattern ( (_module.__default.HMAC__SHA256 |key#0| |message#0@@9|)) ))))
(assert (forall ((|key#0@@0| T@U) (|message#0@@10| T@U) ) (!  (=> (and (and (= (type |key#0@@0|) (SeqType BoxType)) (= (type |message#0@@10|) (SeqType BoxType))) (and ($Is |key#0@@0| (TSeq Tclass._module.word)) ($Is |message#0@@10| (TSeq Tclass._module.byte)))) (and (=> (|_module.__default.HMAC__SHA256#requires| |key#0@@0| |message#0@@10|) (and (and (and (and (and (INTERNAL_ge_boogie 8 0) (= (|Seq#Length| |key#0@@0|) (|Seq#Length| (Lit (_module.__default.Opad (LitInt 8)))))) (INTERNAL_ge_boogie 8 0)) (= (|Seq#Length| |key#0@@0|) (|Seq#Length| (Lit (_module.__default.Ipad (LitInt 8)))))) (INTERNAL_le_boogie (|Seq#Length| (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@0| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@10|)) _module.__default.MaxBytesForSHA)) (INTERNAL_le_boogie (|Seq#Length| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@0| (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@0| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@10|))))) _module.__default.MaxBytesForSHA))) (=> (and (and (and (and (and (INTERNAL_ge_boogie 8 0) (= (|Seq#Length| |key#0@@0|) (|Seq#Length| (Lit (_module.__default.Opad (LitInt 8)))))) (INTERNAL_ge_boogie 8 0)) (= (|Seq#Length| |key#0@@0|) (|Seq#Length| (Lit (_module.__default.Ipad (LitInt 8)))))) (INTERNAL_le_boogie (|Seq#Length| (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@0| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@10|)) _module.__default.MaxBytesForSHA)) (INTERNAL_le_boogie (|Seq#Length| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@0| (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@0| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@10|))))) _module.__default.MaxBytesForSHA)) (|_module.__default.HMAC__SHA256#requires| |key#0@@0| |message#0@@10|)))) :qid |sha256sd.140:33| :skolemid |2197| :pattern ( (|_module.__default.HMAC__SHA256#requires| |key#0@@0| |message#0@@10|)) )))
(assert  (=> true (forall ((|key#0@@1| T@U) (|message#0@@11| T@U) ) (!  (=> (and (and (= (type |key#0@@1|) (SeqType BoxType)) (= (type |message#0@@11|) (SeqType BoxType))) (or (|_module.__default.HMAC__SHA256#canCall| |key#0@@1| |message#0@@11|) (and (and ($Is |key#0@@1| (TSeq Tclass._module.word)) ($Is |message#0@@11| (TSeq Tclass._module.byte))) (and (and (and (and (and (INTERNAL_ge_boogie 8 0) (= (|Seq#Length| |key#0@@1|) (|Seq#Length| (Lit (_module.__default.Opad (LitInt 8)))))) (INTERNAL_ge_boogie 8 0)) (= (|Seq#Length| |key#0@@1|) (|Seq#Length| (Lit (_module.__default.Ipad (LitInt 8)))))) (INTERNAL_le_boogie (|Seq#Length| (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@11|)) _module.__default.MaxBytesForSHA)) (INTERNAL_le_boogie (|Seq#Length| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@11|))))) _module.__default.MaxBytesForSHA))))) (and (and (and (and (and (|_module.__default.Opad#canCall| (LitInt 8)) (|_module.__default.SeqXor#canCall| |key#0@@1| (Lit (_module.__default.Opad (LitInt 8))))) (and (and (and (|_module.__default.Ipad#canCall| (LitInt 8)) (|_module.__default.SeqXor#canCall| |key#0@@1| (Lit (_module.__default.Ipad (LitInt 8))))) (|_module.__default.WordSeqToBytes#canCall| (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Ipad (LitInt 8)))))) (|_module.__default.SHA256#canCall| (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@11|)))) (|_module.__default.WordSeqToBytes#canCall| (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@11|))))) (|_module.__default.SHA256#canCall| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@11|)))))) (= (_module.__default.HMAC__SHA256 |key#0@@1| |message#0@@11|) (_module.__default.SHA256 (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor |key#0@@1| (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@11|)))))))) :qid |sha256sd.140:33| :skolemid |2198| :pattern ( (_module.__default.HMAC__SHA256 |key#0@@1| |message#0@@11|)) ))))
(assert  (=> true (forall ((|key#0@@2| T@U) (|message#0@@12| T@U) ) (!  (=> (and (and (= (type |key#0@@2|) (SeqType BoxType)) (= (type |message#0@@12|) (SeqType BoxType))) (or (|_module.__default.HMAC__SHA256#canCall| (Lit |key#0@@2|) (Lit |message#0@@12|)) (and (and ($Is |key#0@@2| (TSeq Tclass._module.word)) ($Is |message#0@@12| (TSeq Tclass._module.byte))) (and (and (and (and (and (INTERNAL_ge_boogie 8 0) (= (|Seq#Length| (Lit |key#0@@2|)) (|Seq#Length| (Lit (_module.__default.Opad (LitInt 8)))))) (INTERNAL_ge_boogie 8 0)) (= (|Seq#Length| (Lit |key#0@@2|)) (|Seq#Length| (Lit (_module.__default.Ipad (LitInt 8)))))) (INTERNAL_le_boogie (|Seq#Length| (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@12|)) _module.__default.MaxBytesForSHA)) (INTERNAL_le_boogie (|Seq#Length| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@12|))))) _module.__default.MaxBytesForSHA))))) (and (and (and (and (and (|_module.__default.Opad#canCall| (LitInt 8)) (|_module.__default.SeqXor#canCall| (Lit |key#0@@2|) (Lit (_module.__default.Opad (LitInt 8))))) (and (and (and (|_module.__default.Ipad#canCall| (LitInt 8)) (|_module.__default.SeqXor#canCall| (Lit |key#0@@2|) (Lit (_module.__default.Ipad (LitInt 8))))) (|_module.__default.WordSeqToBytes#canCall| (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Ipad (LitInt 8)))))) (|_module.__default.SHA256#canCall| (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@12|)))) (|_module.__default.WordSeqToBytes#canCall| (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@12|))))) (|_module.__default.SHA256#canCall| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@12|)))))) (= (_module.__default.HMAC__SHA256 (Lit |key#0@@2|) (Lit |message#0@@12|)) (_module.__default.SHA256 (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (|Seq#Append| (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Opad (LitInt 8)))) (_module.__default.SHA256 (|Seq#Append| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.SeqXor StartFuel__module._default.SeqXor (Lit |key#0@@2|) (Lit (_module.__default.Ipad (LitInt 8))))) |message#0@@12|)))))))) :qid |sha256sd.140:33| :weight 3 :skolemid |2199| :pattern ( (_module.__default.HMAC__SHA256 (Lit |key#0@@2|) (Lit |message#0@@12|))) ))))
(assert  (=> true (forall ((_module._default.last$T T@U) (|s#0@@3| T@U) ) (!  (=> (and (and (= (type _module._default.last$T) TyType) (= (type |s#0@@3|) (SeqType BoxType))) (or (|_module.__default.last#canCall| _module._default.last$T |s#0@@3|) (and ($Is |s#0@@3| (TSeq _module._default.last$T)) (INTERNAL_gt_boogie (|Seq#Length| |s#0@@3|) 0)))) ($IsBox (_module.__default.last _module._default.last$T |s#0@@3|) _module._default.last$T)) :qid |unknown.0:0| :skolemid |2200| :pattern ( (_module.__default.last _module._default.last$T |s#0@@3|)) ))))
(assert (forall ((_module._default.last$T@@0 T@U) (|s#0@@4| T@U) ) (!  (=> (and (and (= (type _module._default.last$T@@0) TyType) (= (type |s#0@@4|) (SeqType BoxType))) ($Is |s#0@@4| (TSeq _module._default.last$T@@0))) (and (=> (|_module.__default.last#requires| _module._default.last$T@@0 |s#0@@4|) (INTERNAL_gt_boogie (|Seq#Length| |s#0@@4|) 0)) (=> (INTERNAL_gt_boogie (|Seq#Length| |s#0@@4|) 0) (|_module.__default.last#requires| _module._default.last$T@@0 |s#0@@4|)))) :qid |unknown.0:0| :skolemid |2201| :pattern ( (|_module.__default.last#requires| _module._default.last$T@@0 |s#0@@4|)) )))
(assert  (=> true (forall ((_module._default.last$T@@1 T@U) (|s#0@@5| T@U) ) (!  (=> (and (and (= (type _module._default.last$T@@1) TyType) (= (type |s#0@@5|) (SeqType BoxType))) (or (|_module.__default.last#canCall| _module._default.last$T@@1 |s#0@@5|) (and ($Is |s#0@@5| (TSeq _module._default.last$T@@1)) (INTERNAL_gt_boogie (|Seq#Length| |s#0@@5|) 0)))) (= (_module.__default.last _module._default.last$T@@1 |s#0@@5|) (|Seq#Index| |s#0@@5| (INTERNAL_sub_boogie (|Seq#Length| |s#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |2202| :pattern ( (_module.__default.last _module._default.last$T@@1 |s#0@@5|)) ))))
(assert  (=> true (forall ((_module._default.last$T@@2 T@U) (|s#0@@6| T@U) ) (!  (=> (and (and (= (type _module._default.last$T@@2) TyType) (= (type |s#0@@6|) (SeqType BoxType))) (or (|_module.__default.last#canCall| _module._default.last$T@@2 (Lit |s#0@@6|)) (and ($Is |s#0@@6| (TSeq _module._default.last$T@@2)) (INTERNAL_gt_boogie (|Seq#Length| (Lit |s#0@@6|)) 0)))) (= (_module.__default.last _module._default.last$T@@2 (Lit |s#0@@6|)) (|Seq#Index| (Lit |s#0@@6|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |s#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2203| :pattern ( (_module.__default.last _module._default.last$T@@2 (Lit |s#0@@6|))) ))))
(assert (forall ((arg0@@241 T@U) (arg1@@132 T@U) ) (! (= (type (_module.__default.all__but__last arg0@@241 arg1@@132)) (SeqType BoxType)) :qid |funType:_module.__default.all__but__last| :pattern ( (_module.__default.all__but__last arg0@@241 arg1@@132)) )))
(assert  (=> true (forall ((_module._default.all_but_last$T T@U) (|s#0@@7| T@U) ) (!  (=> (and (and (= (type _module._default.all_but_last$T) TyType) (= (type |s#0@@7|) (SeqType BoxType))) (or (|_module.__default.all__but__last#canCall| _module._default.all_but_last$T |s#0@@7|) (and ($Is |s#0@@7| (TSeq _module._default.all_but_last$T)) (INTERNAL_gt_boogie (|Seq#Length| |s#0@@7|) 0)))) (and (= (|Seq#Length| (_module.__default.all__but__last _module._default.all_but_last$T |s#0@@7|)) (INTERNAL_sub_boogie (|Seq#Length| |s#0@@7|) 1)) ($Is (_module.__default.all__but__last _module._default.all_but_last$T |s#0@@7|) (TSeq _module._default.all_but_last$T)))) :qid |unknown.0:0| :skolemid |2204| :pattern ( (_module.__default.all__but__last _module._default.all_but_last$T |s#0@@7|)) ))))
(assert (forall ((_module._default.all_but_last$T@@0 T@U) (|s#0@@8| T@U) ) (!  (=> (and (and (= (type _module._default.all_but_last$T@@0) TyType) (= (type |s#0@@8|) (SeqType BoxType))) ($Is |s#0@@8| (TSeq _module._default.all_but_last$T@@0))) (and (=> (|_module.__default.all__but__last#requires| _module._default.all_but_last$T@@0 |s#0@@8|) (INTERNAL_gt_boogie (|Seq#Length| |s#0@@8|) 0)) (=> (INTERNAL_gt_boogie (|Seq#Length| |s#0@@8|) 0) (|_module.__default.all__but__last#requires| _module._default.all_but_last$T@@0 |s#0@@8|)))) :qid |unknown.0:0| :skolemid |2205| :pattern ( (|_module.__default.all__but__last#requires| _module._default.all_but_last$T@@0 |s#0@@8|)) )))
(assert  (=> true (forall ((_module._default.all_but_last$T@@1 T@U) (|s#0@@9| T@U) ) (!  (=> (and (and (= (type _module._default.all_but_last$T@@1) TyType) (= (type |s#0@@9|) (SeqType BoxType))) (or (|_module.__default.all__but__last#canCall| _module._default.all_but_last$T@@1 |s#0@@9|) (and ($Is |s#0@@9| (TSeq _module._default.all_but_last$T@@1)) (INTERNAL_gt_boogie (|Seq#Length| |s#0@@9|) 0)))) (= (_module.__default.all__but__last _module._default.all_but_last$T@@1 |s#0@@9|) (|Seq#Take| |s#0@@9| (INTERNAL_sub_boogie (|Seq#Length| |s#0@@9|) 1)))) :qid |unknown.0:0| :skolemid |2206| :pattern ( (_module.__default.all__but__last _module._default.all_but_last$T@@1 |s#0@@9|)) ))))
(assert  (=> true (forall ((_module._default.all_but_last$T@@2 T@U) (|s#0@@10| T@U) ) (!  (=> (and (and (= (type _module._default.all_but_last$T@@2) TyType) (= (type |s#0@@10|) (SeqType BoxType))) (or (|_module.__default.all__but__last#canCall| _module._default.all_but_last$T@@2 (Lit |s#0@@10|)) (and ($Is |s#0@@10| (TSeq _module._default.all_but_last$T@@2)) (INTERNAL_gt_boogie (|Seq#Length| (Lit |s#0@@10|)) 0)))) (= (_module.__default.all__but__last _module._default.all_but_last$T@@2 (Lit |s#0@@10|)) (|Seq#Take| (Lit |s#0@@10|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |s#0@@10|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2207| :pattern ( (_module.__default.all__but__last _module._default.all_but_last$T@@2 (Lit |s#0@@10|))) ))))
(assert (forall (($ly@@23 T@U) (|b0#0| Int) (|b1#0| Int) (|b2#0| Int) (|b3#0| Int) (|b4#0| Int) (|b5#0| Int) (|b6#0| Int) (|b7#0| Int) ) (!  (=> (= (type $ly@@23) LayerTypeType) (= (_module.__default.BytesToUint64 ($LS $ly@@23) |b0#0| |b1#0| |b2#0| |b3#0| |b4#0| |b5#0| |b6#0| |b7#0|) (_module.__default.BytesToUint64 $ly@@23 |b0#0| |b1#0| |b2#0| |b3#0| |b4#0| |b5#0| |b6#0| |b7#0|))) :qid |wordsand.4:20| :skolemid |2208| :pattern ( (_module.__default.BytesToUint64 ($LS $ly@@23) |b0#0| |b1#0| |b2#0| |b3#0| |b4#0| |b5#0| |b6#0| |b7#0|)) )))
(assert (forall (($ly@@24 T@U) (|b0#0@@0| Int) (|b1#0@@0| Int) (|b2#0@@0| Int) (|b3#0@@0| Int) (|b4#0@@0| Int) (|b5#0@@0| Int) (|b6#0@@0| Int) (|b7#0@@0| Int) ) (!  (=> (= (type $ly@@24) LayerTypeType) (= (_module.__default.BytesToUint64 $ly@@24 |b0#0@@0| |b1#0@@0| |b2#0@@0| |b3#0@@0| |b4#0@@0| |b5#0@@0| |b6#0@@0| |b7#0@@0|) (_module.__default.BytesToUint64 $LZ |b0#0@@0| |b1#0@@0| |b2#0@@0| |b3#0@@0| |b4#0@@0| |b5#0@@0| |b6#0@@0| |b7#0@@0|))) :qid |wordsand.4:20| :skolemid |2209| :pattern ( (_module.__default.BytesToUint64 (AsFuelBottom $ly@@24) |b0#0@@0| |b1#0@@0| |b2#0@@0| |b3#0@@0| |b4#0@@0| |b5#0@@0| |b6#0@@0| |b7#0@@0|)) )))
(assert  (=> true (forall (($ly@@25 T@U) (|b0#0@@1| Int) (|b1#0@@1| Int) (|b2#0@@1| Int) (|b3#0@@1| Int) (|b4#0@@1| Int) (|b5#0@@1| Int) (|b6#0@@1| Int) (|b7#0@@1| Int) ) (!  (=> (and (= (type $ly@@25) LayerTypeType) (or (|_module.__default.BytesToUint64#canCall| |b0#0@@1| |b1#0@@1| |b2#0@@1| |b3#0@@1| |b4#0@@1| |b5#0@@1| |b6#0@@1| |b7#0@@1|) (and (and (and (and (and (and (and (and (INTERNAL_le_boogie 0 |b0#0@@1|) (INTERNAL_lt_boogie |b0#0@@1| 256)) (and (INTERNAL_le_boogie 0 |b1#0@@1|) (INTERNAL_lt_boogie |b1#0@@1| 256))) (and (INTERNAL_le_boogie 0 |b2#0@@1|) (INTERNAL_lt_boogie |b2#0@@1| 256))) (and (INTERNAL_le_boogie 0 |b3#0@@1|) (INTERNAL_lt_boogie |b3#0@@1| 256))) (and (INTERNAL_le_boogie 0 |b4#0@@1|) (INTERNAL_lt_boogie |b4#0@@1| 256))) (and (INTERNAL_le_boogie 0 |b5#0@@1|) (INTERNAL_lt_boogie |b5#0@@1| 256))) (and (INTERNAL_le_boogie 0 |b6#0@@1|) (INTERNAL_lt_boogie |b6#0@@1| 256))) (and (INTERNAL_le_boogie 0 |b7#0@@1|) (INTERNAL_lt_boogie |b7#0@@1| 256))))) (and (INTERNAL_le_boogie 0 (_module.__default.BytesToUint64 $ly@@25 |b0#0@@1| |b1#0@@1| |b2#0@@1| |b3#0@@1| |b4#0@@1| |b5#0@@1| |b6#0@@1| |b7#0@@1|)) (INTERNAL_lt_boogie (_module.__default.BytesToUint64 $ly@@25 |b0#0@@1| |b1#0@@1| |b2#0@@1| |b3#0@@1| |b4#0@@1| |b5#0@@1| |b6#0@@1| |b7#0@@1|) 18446744073709551616))) :qid |wordsand.4:20| :skolemid |2210| :pattern ( (_module.__default.BytesToUint64 $ly@@25 |b0#0@@1| |b1#0@@1| |b2#0@@1| |b3#0@@1| |b4#0@@1| |b5#0@@1| |b6#0@@1| |b7#0@@1|)) ))))
(assert (forall (($ly@@26 T@U) (|b0#0@@2| Int) (|b1#0@@2| Int) (|b2#0@@2| Int) (|b3#0@@2| Int) (|b4#0@@2| Int) (|b5#0@@2| Int) (|b6#0@@2| Int) (|b7#0@@2| Int) ) (!  (=> (= (type $ly@@26) LayerTypeType) (=> (and (and (and (and (and (and (and (and (INTERNAL_le_boogie 0 |b0#0@@2|) (INTERNAL_lt_boogie |b0#0@@2| 256)) (and (INTERNAL_le_boogie 0 |b1#0@@2|) (INTERNAL_lt_boogie |b1#0@@2| 256))) (and (INTERNAL_le_boogie 0 |b2#0@@2|) (INTERNAL_lt_boogie |b2#0@@2| 256))) (and (INTERNAL_le_boogie 0 |b3#0@@2|) (INTERNAL_lt_boogie |b3#0@@2| 256))) (and (INTERNAL_le_boogie 0 |b4#0@@2|) (INTERNAL_lt_boogie |b4#0@@2| 256))) (and (INTERNAL_le_boogie 0 |b5#0@@2|) (INTERNAL_lt_boogie |b5#0@@2| 256))) (and (INTERNAL_le_boogie 0 |b6#0@@2|) (INTERNAL_lt_boogie |b6#0@@2| 256))) (and (INTERNAL_le_boogie 0 |b7#0@@2|) (INTERNAL_lt_boogie |b7#0@@2| 256))) (and (=> (|_module.__default.BytesToUint64#requires| $ly@@26 |b0#0@@2| |b1#0@@2| |b2#0@@2| |b3#0@@2| |b4#0@@2| |b5#0@@2| |b6#0@@2| |b7#0@@2|) true) (=> true (|_module.__default.BytesToUint64#requires| $ly@@26 |b0#0@@2| |b1#0@@2| |b2#0@@2| |b3#0@@2| |b4#0@@2| |b5#0@@2| |b6#0@@2| |b7#0@@2|))))) :qid |wordsand.4:20| :skolemid |2211| :pattern ( (|_module.__default.BytesToUint64#requires| $ly@@26 |b0#0@@2| |b1#0@@2| |b2#0@@2| |b3#0@@2| |b4#0@@2| |b5#0@@2| |b6#0@@2| |b7#0@@2|)) )))
(assert (= (type StartFuel__module._default.BEByteSeqToInt) LayerTypeType))
(assert  (=> true (forall (($ly@@27 T@U) (|b0#0@@3| Int) (|b1#0@@3| Int) (|b2#0@@3| Int) (|b3#0@@3| Int) (|b4#0@@3| Int) (|b5#0@@3| Int) (|b6#0@@3| Int) (|b7#0@@3| Int) ) (!  (=> (and (= (type $ly@@27) LayerTypeType) (or (|_module.__default.BytesToUint64#canCall| |b0#0@@3| |b1#0@@3| |b2#0@@3| |b3#0@@3| |b4#0@@3| |b5#0@@3| |b6#0@@3| |b7#0@@3|) (and (and (and (and (and (and (and (and (INTERNAL_le_boogie 0 |b0#0@@3|) (INTERNAL_lt_boogie |b0#0@@3| 256)) (and (INTERNAL_le_boogie 0 |b1#0@@3|) (INTERNAL_lt_boogie |b1#0@@3| 256))) (and (INTERNAL_le_boogie 0 |b2#0@@3|) (INTERNAL_lt_boogie |b2#0@@3| 256))) (and (INTERNAL_le_boogie 0 |b3#0@@3|) (INTERNAL_lt_boogie |b3#0@@3| 256))) (and (INTERNAL_le_boogie 0 |b4#0@@3|) (INTERNAL_lt_boogie |b4#0@@3| 256))) (and (INTERNAL_le_boogie 0 |b5#0@@3|) (INTERNAL_lt_boogie |b5#0@@3| 256))) (and (INTERNAL_le_boogie 0 |b6#0@@3|) (INTERNAL_lt_boogie |b6#0@@3| 256))) (and (INTERNAL_le_boogie 0 |b7#0@@3|) (INTERNAL_lt_boogie |b7#0@@3| 256))))) (and (|_module.__default.BEByteSeqToInt#canCall| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |b0#0@@3|))) ($Box (int_2_U |b1#0@@3|))) ($Box (int_2_U |b2#0@@3|))) ($Box (int_2_U |b3#0@@3|))) ($Box (int_2_U |b4#0@@3|))) ($Box (int_2_U |b5#0@@3|))) ($Box (int_2_U |b6#0@@3|))) ($Box (int_2_U |b7#0@@3|)))) (= (_module.__default.BytesToUint64 ($LS $ly@@27) |b0#0@@3| |b1#0@@3| |b2#0@@3| |b3#0@@3| |b4#0@@3| |b5#0@@3| |b6#0@@3| |b7#0@@3|) (_module.__default.BEByteSeqToInt StartFuel__module._default.BEByteSeqToInt (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |b0#0@@3|))) ($Box (int_2_U |b1#0@@3|))) ($Box (int_2_U |b2#0@@3|))) ($Box (int_2_U |b3#0@@3|))) ($Box (int_2_U |b4#0@@3|))) ($Box (int_2_U |b5#0@@3|))) ($Box (int_2_U |b6#0@@3|))) ($Box (int_2_U |b7#0@@3|))))))) :qid |wordsand.4:20| :skolemid |2212| :pattern ( (_module.__default.BytesToUint64 ($LS $ly@@27) |b0#0@@3| |b1#0@@3| |b2#0@@3| |b3#0@@3| |b4#0@@3| |b5#0@@3| |b6#0@@3| |b7#0@@3|)) ))))
(assert  (=> true (forall (($ly@@28 T@U) (|b0#0@@4| Int) (|b1#0@@4| Int) (|b2#0@@4| Int) (|b3#0@@4| Int) (|b4#0@@4| Int) (|b5#0@@4| Int) (|b6#0@@4| Int) (|b7#0@@4| Int) ) (!  (=> (and (= (type $ly@@28) LayerTypeType) (or (|_module.__default.BytesToUint64#canCall| (LitInt |b0#0@@4|) (LitInt |b1#0@@4|) (LitInt |b2#0@@4|) (LitInt |b3#0@@4|) (LitInt |b4#0@@4|) (LitInt |b5#0@@4|) (LitInt |b6#0@@4|) (LitInt |b7#0@@4|)) (and (and (and (and (and (and (and (and (INTERNAL_le_boogie 0 |b0#0@@4|) (INTERNAL_lt_boogie |b0#0@@4| 256)) (and (INTERNAL_le_boogie 0 |b1#0@@4|) (INTERNAL_lt_boogie |b1#0@@4| 256))) (and (INTERNAL_le_boogie 0 |b2#0@@4|) (INTERNAL_lt_boogie |b2#0@@4| 256))) (and (INTERNAL_le_boogie 0 |b3#0@@4|) (INTERNAL_lt_boogie |b3#0@@4| 256))) (and (INTERNAL_le_boogie 0 |b4#0@@4|) (INTERNAL_lt_boogie |b4#0@@4| 256))) (and (INTERNAL_le_boogie 0 |b5#0@@4|) (INTERNAL_lt_boogie |b5#0@@4| 256))) (and (INTERNAL_le_boogie 0 |b6#0@@4|) (INTERNAL_lt_boogie |b6#0@@4| 256))) (and (INTERNAL_le_boogie 0 |b7#0@@4|) (INTERNAL_lt_boogie |b7#0@@4| 256))))) (and (|_module.__default.BEByteSeqToInt#canCall| (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt |b0#0@@4|)))) ($Box (int_2_U (LitInt |b1#0@@4|)))) ($Box (int_2_U (LitInt |b2#0@@4|)))) ($Box (int_2_U (LitInt |b3#0@@4|)))) ($Box (int_2_U (LitInt |b4#0@@4|)))) ($Box (int_2_U (LitInt |b5#0@@4|)))) ($Box (int_2_U (LitInt |b6#0@@4|)))) ($Box (int_2_U (LitInt |b7#0@@4|)))))) (= (_module.__default.BytesToUint64 ($LS $ly@@28) (LitInt |b0#0@@4|) (LitInt |b1#0@@4|) (LitInt |b2#0@@4|) (LitInt |b3#0@@4|) (LitInt |b4#0@@4|) (LitInt |b5#0@@4|) (LitInt |b6#0@@4|) (LitInt |b7#0@@4|)) (LitInt (_module.__default.BEByteSeqToInt StartFuel__module._default.BEByteSeqToInt (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt |b0#0@@4|)))) ($Box (int_2_U (LitInt |b1#0@@4|)))) ($Box (int_2_U (LitInt |b2#0@@4|)))) ($Box (int_2_U (LitInt |b3#0@@4|)))) ($Box (int_2_U (LitInt |b4#0@@4|)))) ($Box (int_2_U (LitInt |b5#0@@4|)))) ($Box (int_2_U (LitInt |b6#0@@4|)))) ($Box (int_2_U (LitInt |b7#0@@4|)))))))))) :qid |wordsand.4:20| :weight 3 :skolemid |2213| :pattern ( (_module.__default.BytesToUint64 ($LS $ly@@28) (LitInt |b0#0@@4|) (LitInt |b1#0@@4|) (LitInt |b2#0@@4|) (LitInt |b3#0@@4|) (LitInt |b4#0@@4|) (LitInt |b5#0@@4|) (LitInt |b6#0@@4|) (LitInt |b7#0@@4|))) ))))
(assert (forall ((arg0@@242 T@U) (arg1@@133 T@U) ) (! (= (type (_module.__default.bswap32__seq arg0@@242 arg1@@133)) (SeqType BoxType)) :qid |funType:_module.__default.bswap32__seq| :pattern ( (_module.__default.bswap32__seq arg0@@242 arg1@@133)) )))
(assert (forall (($ly@@29 T@U) (|input#0| T@U) ) (!  (=> (and (= (type $ly@@29) LayerTypeType) (= (type |input#0|) (SeqType BoxType))) (= (_module.__default.bswap32__seq ($LS $ly@@29) |input#0|) (_module.__default.bswap32__seq $ly@@29 |input#0|))) :qid |wordsand.114:20| :skolemid |2214| :pattern ( (_module.__default.bswap32__seq ($LS $ly@@29) |input#0|)) )))
(assert (forall (($ly@@30 T@U) (|input#0@@0| T@U) ) (!  (=> (and (= (type $ly@@30) LayerTypeType) (= (type |input#0@@0|) (SeqType BoxType))) (= (_module.__default.bswap32__seq $ly@@30 |input#0@@0|) (_module.__default.bswap32__seq $LZ |input#0@@0|))) :qid |wordsand.114:20| :skolemid |2215| :pattern ( (_module.__default.bswap32__seq (AsFuelBottom $ly@@30) |input#0@@0|)) )))
(assert  (=> true (forall (($ly@@31 T@U) (|input#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@31) LayerTypeType) (= (type |input#0@@1|) (SeqType BoxType))) (or (|_module.__default.bswap32__seq#canCall| |input#0@@1|) ($Is |input#0@@1| (TSeq Tclass._module.word)))) (and (and (= (|Seq#Length| (_module.__default.bswap32__seq $ly@@31 |input#0@@1|)) (|Seq#Length| |input#0@@1|)) (forall ((|i#0@@6| Int) (|tr$ly#0@@1| T@U) ) (!  (=> (and (and (= (type |tr$ly#0@@1|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |i#0@@6|) (INTERNAL_lt_boogie |i#0@@6| (|Seq#Length| (_module.__default.bswap32__seq $ly@@31 |input#0@@1|))))) (= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.bswap32__seq $ly@@31 |input#0@@1|) |i#0@@6|))) (_module.__default.bswap32 (U_2_int ($Unbox intType (|Seq#Index| |input#0@@1| |i#0@@6|)))))) :qid |wordsand.116:20| :skolemid |2216| :pattern ( ($Unbox intType (|Seq#Index| |input#0@@1| |i#0@@6|)) (AsFuelBottom |tr$ly#0@@1|)) :pattern ( ($Unbox intType (|Seq#Index| (_module.__default.bswap32__seq |tr$ly#0@@1| |input#0@@1|) |i#0@@6|))) ))) ($Is (_module.__default.bswap32__seq $ly@@31 |input#0@@1|) (TSeq Tclass._module.word)))) :qid |wordsand.114:20| :skolemid |2217| :pattern ( (_module.__default.bswap32__seq $ly@@31 |input#0@@1|)) ))))
(assert (forall (($ly@@32 T@U) (|input#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@32) LayerTypeType) (= (type |input#0@@2|) (SeqType BoxType))) ($Is |input#0@@2| (TSeq Tclass._module.word))) (and (=> (|_module.__default.bswap32__seq#requires| $ly@@32 |input#0@@2|) true) (=> true (|_module.__default.bswap32__seq#requires| $ly@@32 |input#0@@2|)))) :qid |wordsand.114:20| :skolemid |2218| :pattern ( (|_module.__default.bswap32__seq#requires| $ly@@32 |input#0@@2|)) )))
(assert  (=> true (forall (($ly@@33 T@U) (|input#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@33) LayerTypeType) (= (type |input#0@@3|) (SeqType BoxType))) (or (|_module.__default.bswap32__seq#canCall| |input#0@@3|) ($Is |input#0@@3| (TSeq Tclass._module.word)))) (and (=> (not (|Seq#Equal| |input#0@@3| (|Seq#Empty| BoxType))) (and (|_module.__default.bswap32#canCall| (U_2_int ($Unbox intType (|Seq#Index| |input#0@@3| (LitInt 0))))) (|_module.__default.bswap32__seq#canCall| (|Seq#Drop| |input#0@@3| (LitInt 1))))) (= (_module.__default.bswap32__seq ($LS $ly@@33) |input#0@@3|) (ite (|Seq#Equal| |input#0@@3| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (_module.__default.bswap32 (U_2_int ($Unbox intType (|Seq#Index| |input#0@@3| (LitInt 0)))))))) (_module.__default.bswap32__seq $ly@@33 (|Seq#Drop| |input#0@@3| (LitInt 1)))))))) :qid |wordsand.114:20| :skolemid |2219| :pattern ( (_module.__default.bswap32__seq ($LS $ly@@33) |input#0@@3|)) ))))
(assert  (=> true (forall (($ly@@34 T@U) (|input#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@34) LayerTypeType) (= (type |input#0@@4|) (SeqType BoxType))) (or (|_module.__default.bswap32__seq#canCall| (Lit |input#0@@4|)) ($Is |input#0@@4| (TSeq Tclass._module.word)))) (and (=> (not (|Seq#Equal| |input#0@@4| (|Seq#Empty| BoxType))) (and (|_module.__default.bswap32#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |input#0@@4|) (LitInt 0))))) (|_module.__default.bswap32__seq#canCall| (Lit (|Seq#Drop| (Lit |input#0@@4|) (LitInt 1)))))) (= (_module.__default.bswap32__seq ($LS $ly@@34) (Lit |input#0@@4|)) (ite (|Seq#Equal| |input#0@@4| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (_module.__default.bswap32 (U_2_int ($Unbox intType (|Seq#Index| (Lit |input#0@@4|) (LitInt 0)))))))) (_module.__default.bswap32__seq ($LS $ly@@34) (Lit (|Seq#Drop| (Lit |input#0@@4|) (LitInt 1))))))))) :qid |wordsand.114:20| :weight 3 :skolemid |2220| :pattern ( (_module.__default.bswap32__seq ($LS $ly@@34) (Lit |input#0@@4|))) ))))
(assert (= (type StartFuel__module._default.TruncateWord) LayerTypeType))
(assert  (=> true (forall ((|x#0@@1| Int) (|y#0| Int) ) (!  (=> (or (|_module.__default.BitwiseAdd32#canCall| |x#0@@1| |y#0|) (and (_module.__default.isUInt32 |x#0@@1|) (_module.__default.isUInt32 |y#0|))) (and (= (_module.__default.BitwiseAdd32 |x#0@@1| |y#0|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_add_boogie |x#0@@1| |y#0|))) (_module.__default.isUInt32 (_module.__default.BitwiseAdd32 |x#0@@1| |y#0|)))) :qid |shacommo.8:38| :skolemid |2222| :pattern ( (_module.__default.BitwiseAdd32 |x#0@@1| |y#0|)) ))))
(assert (forall ((|x#0@@2| Int) (|y#0@@0| Int) ) (!  (=> (and (_module.__default.isUInt32 |x#0@@2|) (_module.__default.isUInt32 |y#0@@0|)) (and (=> (|_module.__default.BitwiseAdd32#requires| |x#0@@2| |y#0@@0|) true) (=> true (|_module.__default.BitwiseAdd32#requires| |x#0@@2| |y#0@@0|)))) :qid |shacommo.8:38| :skolemid |2223| :pattern ( (|_module.__default.BitwiseAdd32#requires| |x#0@@2| |y#0@@0|)) )))
(assert (forall (($ly@@35 T@U) (|x#0@@3| Int) (|y#0@@1| Int) (|z#0@@74| Int) ) (!  (=> (= (type $ly@@35) LayerTypeType) (= (_module.__default.Ch ($LS $ly@@35) |x#0@@3| |y#0@@1| |z#0@@74|) (_module.__default.Ch $ly@@35 |x#0@@3| |y#0@@1| |z#0@@74|))) :qid |shacommo.15:20| :skolemid |2224| :pattern ( (_module.__default.Ch ($LS $ly@@35) |x#0@@3| |y#0@@1| |z#0@@74|)) )))
(assert (forall (($ly@@36 T@U) (|x#0@@4| Int) (|y#0@@2| Int) (|z#0@@75| Int) ) (!  (=> (= (type $ly@@36) LayerTypeType) (= (_module.__default.Ch $ly@@36 |x#0@@4| |y#0@@2| |z#0@@75|) (_module.__default.Ch $LZ |x#0@@4| |y#0@@2| |z#0@@75|))) :qid |shacommo.15:20| :skolemid |2225| :pattern ( (_module.__default.Ch (AsFuelBottom $ly@@36) |x#0@@4| |y#0@@2| |z#0@@75|)) )))
(assert  (=> true (forall (($ly@@37 T@U) (|x#0@@5| Int) (|y#0@@3| Int) (|z#0@@76| Int) ) (!  (=> (and (= (type $ly@@37) LayerTypeType) (or (|_module.__default.Ch#canCall| |x#0@@5| |y#0@@3| |z#0@@76|) (and (and (_module.__default.isUInt32 |x#0@@5|) (_module.__default.isUInt32 |y#0@@3|)) (_module.__default.isUInt32 |z#0@@76|)))) (_module.__default.isUInt32 (_module.__default.Ch $ly@@37 |x#0@@5| |y#0@@3| |z#0@@76|))) :qid |shacommo.15:20| :skolemid |2226| :pattern ( (_module.__default.Ch $ly@@37 |x#0@@5| |y#0@@3| |z#0@@76|)) ))))
(assert (forall (($ly@@38 T@U) (|x#0@@6| Int) (|y#0@@4| Int) (|z#0@@77| Int) ) (!  (=> (= (type $ly@@38) LayerTypeType) (=> (and (and (_module.__default.isUInt32 |x#0@@6|) (_module.__default.isUInt32 |y#0@@4|)) (_module.__default.isUInt32 |z#0@@77|)) (and (=> (|_module.__default.Ch#requires| $ly@@38 |x#0@@6| |y#0@@4| |z#0@@77|) true) (=> true (|_module.__default.Ch#requires| $ly@@38 |x#0@@6| |y#0@@4| |z#0@@77|))))) :qid |shacommo.15:20| :skolemid |2227| :pattern ( (|_module.__default.Ch#requires| $ly@@38 |x#0@@6| |y#0@@4| |z#0@@77|)) )))
(assert  (=> true (forall (($ly@@39 T@U) (|x#0@@7| Int) (|y#0@@5| Int) (|z#0@@78| Int) ) (!  (=> (and (= (type $ly@@39) LayerTypeType) (or (|_module.__default.Ch#canCall| |x#0@@7| |y#0@@5| |z#0@@78|) (and (and (_module.__default.isUInt32 |x#0@@7|) (_module.__default.isUInt32 |y#0@@5|)) (_module.__default.isUInt32 |z#0@@78|)))) (and (and (and (|_module.__default.BitwiseAnd#canCall| |x#0@@7| |y#0@@5|) (and (|_module.__default.BitwiseNot#canCall| |x#0@@7|) (|_module.__default.BitwiseAnd#canCall| (_module.__default.BitwiseNot |x#0@@7|) |z#0@@78|))) (|_module.__default.BitwiseXor#canCall| (_module.__default.BitwiseAnd |x#0@@7| |y#0@@5|) (_module.__default.BitwiseAnd (_module.__default.BitwiseNot |x#0@@7|) |z#0@@78|))) (= (_module.__default.Ch ($LS $ly@@39) |x#0@@7| |y#0@@5| |z#0@@78|) (_module.__default.BitwiseXor (_module.__default.BitwiseAnd |x#0@@7| |y#0@@5|) (_module.__default.BitwiseAnd (_module.__default.BitwiseNot |x#0@@7|) |z#0@@78|))))) :qid |shacommo.15:20| :skolemid |2228| :pattern ( (_module.__default.Ch ($LS $ly@@39) |x#0@@7| |y#0@@5| |z#0@@78|)) ))))
(assert  (=> true (forall (($ly@@40 T@U) (|x#0@@8| Int) (|y#0@@6| Int) (|z#0@@79| Int) ) (!  (=> (and (= (type $ly@@40) LayerTypeType) (or (|_module.__default.Ch#canCall| (LitInt |x#0@@8|) (LitInt |y#0@@6|) (LitInt |z#0@@79|)) (and (and (_module.__default.isUInt32 |x#0@@8|) (_module.__default.isUInt32 |y#0@@6|)) (_module.__default.isUInt32 |z#0@@79|)))) (and (and (and (|_module.__default.BitwiseAnd#canCall| (LitInt |x#0@@8|) (LitInt |y#0@@6|)) (and (|_module.__default.BitwiseNot#canCall| (LitInt |x#0@@8|)) (|_module.__default.BitwiseAnd#canCall| (LitInt (_module.__default.BitwiseNot (LitInt |x#0@@8|))) (LitInt |z#0@@79|)))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.BitwiseAnd (LitInt |x#0@@8|) (LitInt |y#0@@6|))) (LitInt (_module.__default.BitwiseAnd (LitInt (_module.__default.BitwiseNot (LitInt |x#0@@8|))) (LitInt |z#0@@79|))))) (= (_module.__default.Ch ($LS $ly@@40) (LitInt |x#0@@8|) (LitInt |y#0@@6|) (LitInt |z#0@@79|)) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.BitwiseAnd (LitInt |x#0@@8|) (LitInt |y#0@@6|))) (LitInt (_module.__default.BitwiseAnd (LitInt (_module.__default.BitwiseNot (LitInt |x#0@@8|))) (LitInt |z#0@@79|)))))))) :qid |shacommo.15:20| :weight 3 :skolemid |2229| :pattern ( (_module.__default.Ch ($LS $ly@@40) (LitInt |x#0@@8|) (LitInt |y#0@@6|) (LitInt |z#0@@79|))) ))))
(assert (forall (($ly@@41 T@U) (|x#0@@9| Int) (|y#0@@7| Int) (|z#0@@80| Int) ) (!  (=> (= (type $ly@@41) LayerTypeType) (= (_module.__default.Maj ($LS $ly@@41) |x#0@@9| |y#0@@7| |z#0@@80|) (_module.__default.Maj $ly@@41 |x#0@@9| |y#0@@7| |z#0@@80|))) :qid |shacommo.20:20| :skolemid |2230| :pattern ( (_module.__default.Maj ($LS $ly@@41) |x#0@@9| |y#0@@7| |z#0@@80|)) )))
(assert (forall (($ly@@42 T@U) (|x#0@@10| Int) (|y#0@@8| Int) (|z#0@@81| Int) ) (!  (=> (= (type $ly@@42) LayerTypeType) (= (_module.__default.Maj $ly@@42 |x#0@@10| |y#0@@8| |z#0@@81|) (_module.__default.Maj $LZ |x#0@@10| |y#0@@8| |z#0@@81|))) :qid |shacommo.20:20| :skolemid |2231| :pattern ( (_module.__default.Maj (AsFuelBottom $ly@@42) |x#0@@10| |y#0@@8| |z#0@@81|)) )))
(assert  (=> true (forall (($ly@@43 T@U) (|x#0@@11| Int) (|y#0@@9| Int) (|z#0@@82| Int) ) (!  (=> (and (= (type $ly@@43) LayerTypeType) (or (|_module.__default.Maj#canCall| |x#0@@11| |y#0@@9| |z#0@@82|) (and (and (_module.__default.isUInt32 |x#0@@11|) (_module.__default.isUInt32 |y#0@@9|)) (_module.__default.isUInt32 |z#0@@82|)))) (_module.__default.isUInt32 (_module.__default.Maj $ly@@43 |x#0@@11| |y#0@@9| |z#0@@82|))) :qid |shacommo.20:20| :skolemid |2232| :pattern ( (_module.__default.Maj $ly@@43 |x#0@@11| |y#0@@9| |z#0@@82|)) ))))
(assert (forall (($ly@@44 T@U) (|x#0@@12| Int) (|y#0@@10| Int) (|z#0@@83| Int) ) (!  (=> (= (type $ly@@44) LayerTypeType) (=> (and (and (_module.__default.isUInt32 |x#0@@12|) (_module.__default.isUInt32 |y#0@@10|)) (_module.__default.isUInt32 |z#0@@83|)) (and (=> (|_module.__default.Maj#requires| $ly@@44 |x#0@@12| |y#0@@10| |z#0@@83|) true) (=> true (|_module.__default.Maj#requires| $ly@@44 |x#0@@12| |y#0@@10| |z#0@@83|))))) :qid |shacommo.20:20| :skolemid |2233| :pattern ( (|_module.__default.Maj#requires| $ly@@44 |x#0@@12| |y#0@@10| |z#0@@83|)) )))
(assert  (=> true (forall (($ly@@45 T@U) (|x#0@@13| Int) (|y#0@@11| Int) (|z#0@@84| Int) ) (!  (=> (and (= (type $ly@@45) LayerTypeType) (or (|_module.__default.Maj#canCall| |x#0@@13| |y#0@@11| |z#0@@84|) (and (and (_module.__default.isUInt32 |x#0@@13|) (_module.__default.isUInt32 |y#0@@11|)) (_module.__default.isUInt32 |z#0@@84|)))) (and (and (and (and (and (|_module.__default.BitwiseAnd#canCall| |x#0@@13| |y#0@@11|) (|_module.__default.BitwiseAnd#canCall| |x#0@@13| |z#0@@84|)) (|_module.__default.BitwiseXor#canCall| (_module.__default.BitwiseAnd |x#0@@13| |y#0@@11|) (_module.__default.BitwiseAnd |x#0@@13| |z#0@@84|))) (|_module.__default.BitwiseAnd#canCall| |y#0@@11| |z#0@@84|)) (|_module.__default.BitwiseXor#canCall| (_module.__default.BitwiseXor (_module.__default.BitwiseAnd |x#0@@13| |y#0@@11|) (_module.__default.BitwiseAnd |x#0@@13| |z#0@@84|)) (_module.__default.BitwiseAnd |y#0@@11| |z#0@@84|))) (= (_module.__default.Maj ($LS $ly@@45) |x#0@@13| |y#0@@11| |z#0@@84|) (_module.__default.BitwiseXor (_module.__default.BitwiseXor (_module.__default.BitwiseAnd |x#0@@13| |y#0@@11|) (_module.__default.BitwiseAnd |x#0@@13| |z#0@@84|)) (_module.__default.BitwiseAnd |y#0@@11| |z#0@@84|))))) :qid |shacommo.20:20| :skolemid |2234| :pattern ( (_module.__default.Maj ($LS $ly@@45) |x#0@@13| |y#0@@11| |z#0@@84|)) ))))
(assert  (=> true (forall (($ly@@46 T@U) (|x#0@@14| Int) (|y#0@@12| Int) (|z#0@@85| Int) ) (!  (=> (and (= (type $ly@@46) LayerTypeType) (or (|_module.__default.Maj#canCall| (LitInt |x#0@@14|) (LitInt |y#0@@12|) (LitInt |z#0@@85|)) (and (and (_module.__default.isUInt32 |x#0@@14|) (_module.__default.isUInt32 |y#0@@12|)) (_module.__default.isUInt32 |z#0@@85|)))) (and (and (and (and (and (|_module.__default.BitwiseAnd#canCall| (LitInt |x#0@@14|) (LitInt |y#0@@12|)) (|_module.__default.BitwiseAnd#canCall| (LitInt |x#0@@14|) (LitInt |z#0@@85|))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.BitwiseAnd (LitInt |x#0@@14|) (LitInt |y#0@@12|))) (LitInt (_module.__default.BitwiseAnd (LitInt |x#0@@14|) (LitInt |z#0@@85|))))) (|_module.__default.BitwiseAnd#canCall| (LitInt |y#0@@12|) (LitInt |z#0@@85|))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.BitwiseAnd (LitInt |x#0@@14|) (LitInt |y#0@@12|))) (LitInt (_module.__default.BitwiseAnd (LitInt |x#0@@14|) (LitInt |z#0@@85|))))) (LitInt (_module.__default.BitwiseAnd (LitInt |y#0@@12|) (LitInt |z#0@@85|))))) (= (_module.__default.Maj ($LS $ly@@46) (LitInt |x#0@@14|) (LitInt |y#0@@12|) (LitInt |z#0@@85|)) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.BitwiseAnd (LitInt |x#0@@14|) (LitInt |y#0@@12|))) (LitInt (_module.__default.BitwiseAnd (LitInt |x#0@@14|) (LitInt |z#0@@85|))))) (LitInt (_module.__default.BitwiseAnd (LitInt |y#0@@12|) (LitInt |z#0@@85|)))))))) :qid |shacommo.20:20| :weight 3 :skolemid |2235| :pattern ( (_module.__default.Maj ($LS $ly@@46) (LitInt |x#0@@14|) (LitInt |y#0@@12|) (LitInt |z#0@@85|))) ))))
(assert (forall (($ly@@47 T@U) (|x#0@@15| Int) (|y#0@@13| Int) (|z#0@@86| Int) ) (!  (=> (= (type $ly@@47) LayerTypeType) (= (_module.__default.Parity ($LS $ly@@47) |x#0@@15| |y#0@@13| |z#0@@86|) (_module.__default.Parity $ly@@47 |x#0@@15| |y#0@@13| |z#0@@86|))) :qid |shacommo.25:20| :skolemid |2236| :pattern ( (_module.__default.Parity ($LS $ly@@47) |x#0@@15| |y#0@@13| |z#0@@86|)) )))
(assert (forall (($ly@@48 T@U) (|x#0@@16| Int) (|y#0@@14| Int) (|z#0@@87| Int) ) (!  (=> (= (type $ly@@48) LayerTypeType) (= (_module.__default.Parity $ly@@48 |x#0@@16| |y#0@@14| |z#0@@87|) (_module.__default.Parity $LZ |x#0@@16| |y#0@@14| |z#0@@87|))) :qid |shacommo.25:20| :skolemid |2237| :pattern ( (_module.__default.Parity (AsFuelBottom $ly@@48) |x#0@@16| |y#0@@14| |z#0@@87|)) )))
(assert  (=> true (forall (($ly@@49 T@U) (|x#0@@17| Int) (|y#0@@15| Int) (|z#0@@88| Int) ) (!  (=> (and (= (type $ly@@49) LayerTypeType) (or (|_module.__default.Parity#canCall| |x#0@@17| |y#0@@15| |z#0@@88|) (and (and (_module.__default.isUInt32 |x#0@@17|) (_module.__default.isUInt32 |y#0@@15|)) (_module.__default.isUInt32 |z#0@@88|)))) (_module.__default.isUInt32 (_module.__default.Parity $ly@@49 |x#0@@17| |y#0@@15| |z#0@@88|))) :qid |shacommo.25:20| :skolemid |2238| :pattern ( (_module.__default.Parity $ly@@49 |x#0@@17| |y#0@@15| |z#0@@88|)) ))))
(assert (forall (($ly@@50 T@U) (|x#0@@18| Int) (|y#0@@16| Int) (|z#0@@89| Int) ) (!  (=> (= (type $ly@@50) LayerTypeType) (=> (and (and (_module.__default.isUInt32 |x#0@@18|) (_module.__default.isUInt32 |y#0@@16|)) (_module.__default.isUInt32 |z#0@@89|)) (and (=> (|_module.__default.Parity#requires| $ly@@50 |x#0@@18| |y#0@@16| |z#0@@89|) true) (=> true (|_module.__default.Parity#requires| $ly@@50 |x#0@@18| |y#0@@16| |z#0@@89|))))) :qid |shacommo.25:20| :skolemid |2239| :pattern ( (|_module.__default.Parity#requires| $ly@@50 |x#0@@18| |y#0@@16| |z#0@@89|)) )))
(assert  (=> true (forall (($ly@@51 T@U) (|x#0@@19| Int) (|y#0@@17| Int) (|z#0@@90| Int) ) (!  (=> (and (= (type $ly@@51) LayerTypeType) (or (|_module.__default.Parity#canCall| |x#0@@19| |y#0@@17| |z#0@@90|) (and (and (_module.__default.isUInt32 |x#0@@19|) (_module.__default.isUInt32 |y#0@@17|)) (_module.__default.isUInt32 |z#0@@90|)))) (and (and (|_module.__default.BitwiseXor#canCall| |x#0@@19| |y#0@@17|) (|_module.__default.BitwiseXor#canCall| (_module.__default.BitwiseXor |x#0@@19| |y#0@@17|) |z#0@@90|)) (= (_module.__default.Parity ($LS $ly@@51) |x#0@@19| |y#0@@17| |z#0@@90|) (_module.__default.BitwiseXor (_module.__default.BitwiseXor |x#0@@19| |y#0@@17|) |z#0@@90|)))) :qid |shacommo.25:20| :skolemid |2240| :pattern ( (_module.__default.Parity ($LS $ly@@51) |x#0@@19| |y#0@@17| |z#0@@90|)) ))))
(assert  (=> true (forall (($ly@@52 T@U) (|x#0@@20| Int) (|y#0@@18| Int) (|z#0@@91| Int) ) (!  (=> (and (= (type $ly@@52) LayerTypeType) (or (|_module.__default.Parity#canCall| (LitInt |x#0@@20|) (LitInt |y#0@@18|) (LitInt |z#0@@91|)) (and (and (_module.__default.isUInt32 |x#0@@20|) (_module.__default.isUInt32 |y#0@@18|)) (_module.__default.isUInt32 |z#0@@91|)))) (and (and (|_module.__default.BitwiseXor#canCall| (LitInt |x#0@@20|) (LitInt |y#0@@18|)) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.BitwiseXor (LitInt |x#0@@20|) (LitInt |y#0@@18|))) (LitInt |z#0@@91|))) (= (_module.__default.Parity ($LS $ly@@52) (LitInt |x#0@@20|) (LitInt |y#0@@18|) (LitInt |z#0@@91|)) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.BitwiseXor (LitInt |x#0@@20|) (LitInt |y#0@@18|))) (LitInt |z#0@@91|)))))) :qid |shacommo.25:20| :weight 3 :skolemid |2241| :pattern ( (_module.__default.Parity ($LS $ly@@52) (LitInt |x#0@@20|) (LitInt |y#0@@18|) (LitInt |z#0@@91|))) ))))
(assert (forall (($ly@@53 T@U) (|t#0@@25| Int) (|x#0@@21| Int) (|y#0@@19| Int) (|z#0@@92| Int) ) (!  (=> (= (type $ly@@53) LayerTypeType) (= (_module.__default.ft ($LS $ly@@53) |t#0@@25| |x#0@@21| |y#0@@19| |z#0@@92|) (_module.__default.ft $ly@@53 |t#0@@25| |x#0@@21| |y#0@@19| |z#0@@92|))) :qid |shacommo.30:20| :skolemid |2242| :pattern ( (_module.__default.ft ($LS $ly@@53) |t#0@@25| |x#0@@21| |y#0@@19| |z#0@@92|)) )))
(assert (forall (($ly@@54 T@U) (|t#0@@26| Int) (|x#0@@22| Int) (|y#0@@20| Int) (|z#0@@93| Int) ) (!  (=> (= (type $ly@@54) LayerTypeType) (= (_module.__default.ft $ly@@54 |t#0@@26| |x#0@@22| |y#0@@20| |z#0@@93|) (_module.__default.ft $LZ |t#0@@26| |x#0@@22| |y#0@@20| |z#0@@93|))) :qid |shacommo.30:20| :skolemid |2243| :pattern ( (_module.__default.ft (AsFuelBottom $ly@@54) |t#0@@26| |x#0@@22| |y#0@@20| |z#0@@93|)) )))
(assert  (=> true (forall (($ly@@55 T@U) (|t#0@@27| Int) (|x#0@@23| Int) (|y#0@@21| Int) (|z#0@@94| Int) ) (!  (=> (and (= (type $ly@@55) LayerTypeType) (or (|_module.__default.ft#canCall| |t#0@@27| |x#0@@23| |y#0@@21| |z#0@@94|) (and (and (and (and (_module.__default.isUInt32 |t#0@@27|) (_module.__default.isUInt32 |x#0@@23|)) (_module.__default.isUInt32 |y#0@@21|)) (_module.__default.isUInt32 |z#0@@94|)) (and (INTERNAL_le_boogie 0 |t#0@@27|) (INTERNAL_le_boogie |t#0@@27| 79))))) (_module.__default.isUInt32 (_module.__default.ft $ly@@55 |t#0@@27| |x#0@@23| |y#0@@21| |z#0@@94|))) :qid |shacommo.30:20| :skolemid |2244| :pattern ( (_module.__default.ft $ly@@55 |t#0@@27| |x#0@@23| |y#0@@21| |z#0@@94|)) ))))
(assert (forall (($ly@@56 T@U) (|t#0@@28| Int) (|x#0@@24| Int) (|y#0@@22| Int) (|z#0@@95| Int) ) (!  (=> (= (type $ly@@56) LayerTypeType) (=> (and (and (and (_module.__default.isUInt32 |t#0@@28|) (_module.__default.isUInt32 |x#0@@24|)) (_module.__default.isUInt32 |y#0@@22|)) (_module.__default.isUInt32 |z#0@@95|)) (and (=> (|_module.__default.ft#requires| $ly@@56 |t#0@@28| |x#0@@24| |y#0@@22| |z#0@@95|) (and (INTERNAL_le_boogie 0 |t#0@@28|) (INTERNAL_le_boogie |t#0@@28| 79))) (=> (and (INTERNAL_le_boogie 0 |t#0@@28|) (INTERNAL_le_boogie |t#0@@28| 79)) (|_module.__default.ft#requires| $ly@@56 |t#0@@28| |x#0@@24| |y#0@@22| |z#0@@95|))))) :qid |shacommo.30:20| :skolemid |2245| :pattern ( (|_module.__default.ft#requires| $ly@@56 |t#0@@28| |x#0@@24| |y#0@@22| |z#0@@95|)) )))
(assert (= (type StartFuel__module._default.Parity) LayerTypeType))
(assert  (=> true (forall (($ly@@57 T@U) (|t#0@@29| Int) (|x#0@@25| Int) (|y#0@@23| Int) (|z#0@@96| Int) ) (!  (=> (and (= (type $ly@@57) LayerTypeType) (or (|_module.__default.ft#canCall| |t#0@@29| |x#0@@25| |y#0@@23| |z#0@@96|) (and (and (and (and (_module.__default.isUInt32 |t#0@@29|) (_module.__default.isUInt32 |x#0@@25|)) (_module.__default.isUInt32 |y#0@@23|)) (_module.__default.isUInt32 |z#0@@96|)) (and (INTERNAL_le_boogie 0 |t#0@@29|) (INTERNAL_le_boogie |t#0@@29| 79))))) (and (and (=> (and (INTERNAL_ge_boogie |t#0@@29| 0) (INTERNAL_le_boogie |t#0@@29| 19)) (|_module.__default.Ch#canCall| |x#0@@25| |y#0@@23| |z#0@@96|)) (=> (not (and (INTERNAL_ge_boogie |t#0@@29| 0) (INTERNAL_le_boogie |t#0@@29| 19))) (and (=> (and (INTERNAL_ge_boogie |t#0@@29| 40) (INTERNAL_le_boogie |t#0@@29| 59)) (|_module.__default.Maj#canCall| |x#0@@25| |y#0@@23| |z#0@@96|)) (=> (not (and (INTERNAL_ge_boogie |t#0@@29| 40) (INTERNAL_le_boogie |t#0@@29| 59))) (|_module.__default.Parity#canCall| |x#0@@25| |y#0@@23| |z#0@@96|))))) (= (_module.__default.ft ($LS $ly@@57) |t#0@@29| |x#0@@25| |y#0@@23| |z#0@@96|) (ite  (and (INTERNAL_ge_boogie |t#0@@29| 0) (INTERNAL_le_boogie |t#0@@29| 19)) (_module.__default.Ch StartFuel__module._default.Ch |x#0@@25| |y#0@@23| |z#0@@96|) (ite  (and (INTERNAL_ge_boogie |t#0@@29| 40) (INTERNAL_le_boogie |t#0@@29| 59)) (_module.__default.Maj StartFuel__module._default.Maj |x#0@@25| |y#0@@23| |z#0@@96|) (_module.__default.Parity StartFuel__module._default.Parity |x#0@@25| |y#0@@23| |z#0@@96|)))))) :qid |shacommo.30:20| :skolemid |2246| :pattern ( (_module.__default.ft ($LS $ly@@57) |t#0@@29| |x#0@@25| |y#0@@23| |z#0@@96|)) ))))
(assert  (=> true (forall (($ly@@58 T@U) (|t#0@@30| Int) (|x#0@@26| Int) (|y#0@@24| Int) (|z#0@@97| Int) ) (!  (=> (and (= (type $ly@@58) LayerTypeType) (or (|_module.__default.ft#canCall| (LitInt |t#0@@30|) (LitInt |x#0@@26|) (LitInt |y#0@@24|) (LitInt |z#0@@97|)) (and (and (and (and (_module.__default.isUInt32 |t#0@@30|) (_module.__default.isUInt32 |x#0@@26|)) (_module.__default.isUInt32 |y#0@@24|)) (_module.__default.isUInt32 |z#0@@97|)) (and (INTERNAL_le_boogie 0 |t#0@@30|) (INTERNAL_le_boogie |t#0@@30| 79))))) (and (and (=> (and (INTERNAL_ge_boogie |t#0@@30| 0) (INTERNAL_le_boogie |t#0@@30| 19)) (|_module.__default.Ch#canCall| (LitInt |x#0@@26|) (LitInt |y#0@@24|) (LitInt |z#0@@97|))) (=> (not (and (INTERNAL_ge_boogie |t#0@@30| 0) (INTERNAL_le_boogie |t#0@@30| 19))) (and (=> (and (INTERNAL_ge_boogie |t#0@@30| 40) (INTERNAL_le_boogie |t#0@@30| 59)) (|_module.__default.Maj#canCall| (LitInt |x#0@@26|) (LitInt |y#0@@24|) (LitInt |z#0@@97|))) (=> (not (and (INTERNAL_ge_boogie |t#0@@30| 40) (INTERNAL_le_boogie |t#0@@30| 59))) (|_module.__default.Parity#canCall| (LitInt |x#0@@26|) (LitInt |y#0@@24|) (LitInt |z#0@@97|)))))) (= (_module.__default.ft ($LS $ly@@58) (LitInt |t#0@@30|) (LitInt |x#0@@26|) (LitInt |y#0@@24|) (LitInt |z#0@@97|)) (ite  (and (INTERNAL_ge_boogie |t#0@@30| 0) (INTERNAL_le_boogie |t#0@@30| 19)) (_module.__default.Ch StartFuel__module._default.Ch (LitInt |x#0@@26|) (LitInt |y#0@@24|) (LitInt |z#0@@97|)) (ite  (and (INTERNAL_ge_boogie |t#0@@30| 40) (INTERNAL_le_boogie |t#0@@30| 59)) (_module.__default.Maj StartFuel__module._default.Maj (LitInt |x#0@@26|) (LitInt |y#0@@24|) (LitInt |z#0@@97|)) (_module.__default.Parity StartFuel__module._default.Parity (LitInt |x#0@@26|) (LitInt |y#0@@24|) (LitInt |z#0@@97|))))))) :qid |shacommo.30:20| :weight 3 :skolemid |2247| :pattern ( (_module.__default.ft ($LS $ly@@58) (LitInt |t#0@@30|) (LitInt |x#0@@26|) (LitInt |y#0@@24|) (LitInt |z#0@@97|))) ))))
(assert (forall (($ly@@59 T@U) (|x#0@@27| Int) ) (!  (=> (= (type $ly@@59) LayerTypeType) (= (_module.__default.BSIG0 ($LS $ly@@59) |x#0@@27|) (_module.__default.BSIG0 $ly@@59 |x#0@@27|))) :qid |shacommo.43:20| :skolemid |2248| :pattern ( (_module.__default.BSIG0 ($LS $ly@@59) |x#0@@27|)) )))
(assert (forall (($ly@@60 T@U) (|x#0@@28| Int) ) (!  (=> (= (type $ly@@60) LayerTypeType) (= (_module.__default.BSIG0 $ly@@60 |x#0@@28|) (_module.__default.BSIG0 $LZ |x#0@@28|))) :qid |shacommo.43:20| :skolemid |2249| :pattern ( (_module.__default.BSIG0 (AsFuelBottom $ly@@60) |x#0@@28|)) )))
(assert  (=> true (forall (($ly@@61 T@U) (|x#0@@29| Int) ) (!  (=> (and (= (type $ly@@61) LayerTypeType) (or (|_module.__default.BSIG0#canCall| |x#0@@29|) (_module.__default.isUInt32 |x#0@@29|))) (_module.__default.isUInt32 (_module.__default.BSIG0 $ly@@61 |x#0@@29|))) :qid |shacommo.43:20| :skolemid |2250| :pattern ( (_module.__default.BSIG0 $ly@@61 |x#0@@29|)) ))))
(assert (forall (($ly@@62 T@U) (|x#0@@30| Int) ) (!  (=> (and (= (type $ly@@62) LayerTypeType) (_module.__default.isUInt32 |x#0@@30|)) (and (=> (|_module.__default.BSIG0#requires| $ly@@62 |x#0@@30|) true) (=> true (|_module.__default.BSIG0#requires| $ly@@62 |x#0@@30|)))) :qid |shacommo.43:20| :skolemid |2251| :pattern ( (|_module.__default.BSIG0#requires| $ly@@62 |x#0@@30|)) )))
(assert  (=> true (forall (($ly@@63 T@U) (|x#0@@31| Int) ) (!  (=> (and (= (type $ly@@63) LayerTypeType) (or (|_module.__default.BSIG0#canCall| |x#0@@31|) (_module.__default.isUInt32 |x#0@@31|))) (and (and (and (and (and (|_module.__default.RotateRight#canCall| |x#0@@31| (LitInt 2)) (|_module.__default.RotateRight#canCall| |x#0@@31| (LitInt 13))) (|_module.__default.BitwiseXor#canCall| (_module.__default.RotateRight |x#0@@31| (LitInt 2)) (_module.__default.RotateRight |x#0@@31| (LitInt 13)))) (|_module.__default.RotateRight#canCall| |x#0@@31| (LitInt 22))) (|_module.__default.BitwiseXor#canCall| (_module.__default.BitwiseXor (_module.__default.RotateRight |x#0@@31| (LitInt 2)) (_module.__default.RotateRight |x#0@@31| (LitInt 13))) (_module.__default.RotateRight |x#0@@31| (LitInt 22)))) (= (_module.__default.BSIG0 ($LS $ly@@63) |x#0@@31|) (_module.__default.BitwiseXor (_module.__default.BitwiseXor (_module.__default.RotateRight |x#0@@31| (LitInt 2)) (_module.__default.RotateRight |x#0@@31| (LitInt 13))) (_module.__default.RotateRight |x#0@@31| (LitInt 22)))))) :qid |shacommo.43:20| :skolemid |2252| :pattern ( (_module.__default.BSIG0 ($LS $ly@@63) |x#0@@31|)) ))))
(assert  (=> true (forall (($ly@@64 T@U) (|x#0@@32| Int) ) (!  (=> (and (= (type $ly@@64) LayerTypeType) (or (|_module.__default.BSIG0#canCall| (LitInt |x#0@@32|)) (_module.__default.isUInt32 |x#0@@32|))) (and (and (and (and (and (|_module.__default.RotateRight#canCall| (LitInt |x#0@@32|) (LitInt 2)) (|_module.__default.RotateRight#canCall| (LitInt |x#0@@32|) (LitInt 13))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.RotateRight (LitInt |x#0@@32|) (LitInt 2))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@32|) (LitInt 13))))) (|_module.__default.RotateRight#canCall| (LitInt |x#0@@32|) (LitInt 22))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.RotateRight (LitInt |x#0@@32|) (LitInt 2))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@32|) (LitInt 13))))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@32|) (LitInt 22))))) (= (_module.__default.BSIG0 ($LS $ly@@64) (LitInt |x#0@@32|)) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.RotateRight (LitInt |x#0@@32|) (LitInt 2))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@32|) (LitInt 13))))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@32|) (LitInt 22)))))))) :qid |shacommo.43:20| :weight 3 :skolemid |2253| :pattern ( (_module.__default.BSIG0 ($LS $ly@@64) (LitInt |x#0@@32|))) ))))
(assert (forall (($ly@@65 T@U) (|x#0@@33| Int) ) (!  (=> (= (type $ly@@65) LayerTypeType) (= (_module.__default.BSIG1 ($LS $ly@@65) |x#0@@33|) (_module.__default.BSIG1 $ly@@65 |x#0@@33|))) :qid |shacommo.48:20| :skolemid |2254| :pattern ( (_module.__default.BSIG1 ($LS $ly@@65) |x#0@@33|)) )))
(assert (forall (($ly@@66 T@U) (|x#0@@34| Int) ) (!  (=> (= (type $ly@@66) LayerTypeType) (= (_module.__default.BSIG1 $ly@@66 |x#0@@34|) (_module.__default.BSIG1 $LZ |x#0@@34|))) :qid |shacommo.48:20| :skolemid |2255| :pattern ( (_module.__default.BSIG1 (AsFuelBottom $ly@@66) |x#0@@34|)) )))
(assert  (=> true (forall (($ly@@67 T@U) (|x#0@@35| Int) ) (!  (=> (and (= (type $ly@@67) LayerTypeType) (or (|_module.__default.BSIG1#canCall| |x#0@@35|) (_module.__default.isUInt32 |x#0@@35|))) (_module.__default.isUInt32 (_module.__default.BSIG1 $ly@@67 |x#0@@35|))) :qid |shacommo.48:20| :skolemid |2256| :pattern ( (_module.__default.BSIG1 $ly@@67 |x#0@@35|)) ))))
(assert (forall (($ly@@68 T@U) (|x#0@@36| Int) ) (!  (=> (and (= (type $ly@@68) LayerTypeType) (_module.__default.isUInt32 |x#0@@36|)) (and (=> (|_module.__default.BSIG1#requires| $ly@@68 |x#0@@36|) true) (=> true (|_module.__default.BSIG1#requires| $ly@@68 |x#0@@36|)))) :qid |shacommo.48:20| :skolemid |2257| :pattern ( (|_module.__default.BSIG1#requires| $ly@@68 |x#0@@36|)) )))
(assert  (=> true (forall (($ly@@69 T@U) (|x#0@@37| Int) ) (!  (=> (and (= (type $ly@@69) LayerTypeType) (or (|_module.__default.BSIG1#canCall| |x#0@@37|) (_module.__default.isUInt32 |x#0@@37|))) (and (and (and (and (and (|_module.__default.RotateRight#canCall| |x#0@@37| (LitInt 6)) (|_module.__default.RotateRight#canCall| |x#0@@37| (LitInt 11))) (|_module.__default.BitwiseXor#canCall| (_module.__default.RotateRight |x#0@@37| (LitInt 6)) (_module.__default.RotateRight |x#0@@37| (LitInt 11)))) (|_module.__default.RotateRight#canCall| |x#0@@37| (LitInt 25))) (|_module.__default.BitwiseXor#canCall| (_module.__default.BitwiseXor (_module.__default.RotateRight |x#0@@37| (LitInt 6)) (_module.__default.RotateRight |x#0@@37| (LitInt 11))) (_module.__default.RotateRight |x#0@@37| (LitInt 25)))) (= (_module.__default.BSIG1 ($LS $ly@@69) |x#0@@37|) (_module.__default.BitwiseXor (_module.__default.BitwiseXor (_module.__default.RotateRight |x#0@@37| (LitInt 6)) (_module.__default.RotateRight |x#0@@37| (LitInt 11))) (_module.__default.RotateRight |x#0@@37| (LitInt 25)))))) :qid |shacommo.48:20| :skolemid |2258| :pattern ( (_module.__default.BSIG1 ($LS $ly@@69) |x#0@@37|)) ))))
(assert  (=> true (forall (($ly@@70 T@U) (|x#0@@38| Int) ) (!  (=> (and (= (type $ly@@70) LayerTypeType) (or (|_module.__default.BSIG1#canCall| (LitInt |x#0@@38|)) (_module.__default.isUInt32 |x#0@@38|))) (and (and (and (and (and (|_module.__default.RotateRight#canCall| (LitInt |x#0@@38|) (LitInt 6)) (|_module.__default.RotateRight#canCall| (LitInt |x#0@@38|) (LitInt 11))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.RotateRight (LitInt |x#0@@38|) (LitInt 6))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@38|) (LitInt 11))))) (|_module.__default.RotateRight#canCall| (LitInt |x#0@@38|) (LitInt 25))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.RotateRight (LitInt |x#0@@38|) (LitInt 6))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@38|) (LitInt 11))))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@38|) (LitInt 25))))) (= (_module.__default.BSIG1 ($LS $ly@@70) (LitInt |x#0@@38|)) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.RotateRight (LitInt |x#0@@38|) (LitInt 6))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@38|) (LitInt 11))))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@38|) (LitInt 25)))))))) :qid |shacommo.48:20| :weight 3 :skolemid |2259| :pattern ( (_module.__default.BSIG1 ($LS $ly@@70) (LitInt |x#0@@38|))) ))))
(assert (forall (($ly@@71 T@U) (|x#0@@39| Int) ) (!  (=> (= (type $ly@@71) LayerTypeType) (= (_module.__default.SSIG0 ($LS $ly@@71) |x#0@@39|) (_module.__default.SSIG0 $ly@@71 |x#0@@39|))) :qid |shacommo.53:20| :skolemid |2260| :pattern ( (_module.__default.SSIG0 ($LS $ly@@71) |x#0@@39|)) )))
(assert (forall (($ly@@72 T@U) (|x#0@@40| Int) ) (!  (=> (= (type $ly@@72) LayerTypeType) (= (_module.__default.SSIG0 $ly@@72 |x#0@@40|) (_module.__default.SSIG0 $LZ |x#0@@40|))) :qid |shacommo.53:20| :skolemid |2261| :pattern ( (_module.__default.SSIG0 (AsFuelBottom $ly@@72) |x#0@@40|)) )))
(assert  (=> true (forall (($ly@@73 T@U) (|x#0@@41| Int) ) (!  (=> (and (= (type $ly@@73) LayerTypeType) (or (|_module.__default.SSIG0#canCall| |x#0@@41|) (_module.__default.isUInt32 |x#0@@41|))) (_module.__default.isUInt32 (_module.__default.SSIG0 $ly@@73 |x#0@@41|))) :qid |shacommo.53:20| :skolemid |2262| :pattern ( (_module.__default.SSIG0 $ly@@73 |x#0@@41|)) ))))
(assert (forall (($ly@@74 T@U) (|x#0@@42| Int) ) (!  (=> (and (= (type $ly@@74) LayerTypeType) (_module.__default.isUInt32 |x#0@@42|)) (and (=> (|_module.__default.SSIG0#requires| $ly@@74 |x#0@@42|) true) (=> true (|_module.__default.SSIG0#requires| $ly@@74 |x#0@@42|)))) :qid |shacommo.53:20| :skolemid |2263| :pattern ( (|_module.__default.SSIG0#requires| $ly@@74 |x#0@@42|)) )))
(assert  (=> true (forall (($ly@@75 T@U) (|x#0@@43| Int) ) (!  (=> (and (= (type $ly@@75) LayerTypeType) (or (|_module.__default.SSIG0#canCall| |x#0@@43|) (_module.__default.isUInt32 |x#0@@43|))) (and (and (and (and (and (|_module.__default.RotateRight#canCall| |x#0@@43| (LitInt 7)) (|_module.__default.RotateRight#canCall| |x#0@@43| (LitInt 18))) (|_module.__default.BitwiseXor#canCall| (_module.__default.RotateRight |x#0@@43| (LitInt 7)) (_module.__default.RotateRight |x#0@@43| (LitInt 18)))) (|_module.__default.RightShift#canCall| |x#0@@43| (LitInt 3))) (|_module.__default.BitwiseXor#canCall| (_module.__default.BitwiseXor (_module.__default.RotateRight |x#0@@43| (LitInt 7)) (_module.__default.RotateRight |x#0@@43| (LitInt 18))) (_module.__default.RightShift |x#0@@43| (LitInt 3)))) (= (_module.__default.SSIG0 ($LS $ly@@75) |x#0@@43|) (_module.__default.BitwiseXor (_module.__default.BitwiseXor (_module.__default.RotateRight |x#0@@43| (LitInt 7)) (_module.__default.RotateRight |x#0@@43| (LitInt 18))) (_module.__default.RightShift |x#0@@43| (LitInt 3)))))) :qid |shacommo.53:20| :skolemid |2264| :pattern ( (_module.__default.SSIG0 ($LS $ly@@75) |x#0@@43|)) ))))
(assert  (=> true (forall (($ly@@76 T@U) (|x#0@@44| Int) ) (!  (=> (and (= (type $ly@@76) LayerTypeType) (or (|_module.__default.SSIG0#canCall| (LitInt |x#0@@44|)) (_module.__default.isUInt32 |x#0@@44|))) (and (and (and (and (and (|_module.__default.RotateRight#canCall| (LitInt |x#0@@44|) (LitInt 7)) (|_module.__default.RotateRight#canCall| (LitInt |x#0@@44|) (LitInt 18))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.RotateRight (LitInt |x#0@@44|) (LitInt 7))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@44|) (LitInt 18))))) (|_module.__default.RightShift#canCall| (LitInt |x#0@@44|) (LitInt 3))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.RotateRight (LitInt |x#0@@44|) (LitInt 7))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@44|) (LitInt 18))))) (LitInt (_module.__default.RightShift (LitInt |x#0@@44|) (LitInt 3))))) (= (_module.__default.SSIG0 ($LS $ly@@76) (LitInt |x#0@@44|)) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.RotateRight (LitInt |x#0@@44|) (LitInt 7))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@44|) (LitInt 18))))) (LitInt (_module.__default.RightShift (LitInt |x#0@@44|) (LitInt 3)))))))) :qid |shacommo.53:20| :weight 3 :skolemid |2265| :pattern ( (_module.__default.SSIG0 ($LS $ly@@76) (LitInt |x#0@@44|))) ))))
(assert (forall (($ly@@77 T@U) (|x#0@@45| Int) ) (!  (=> (= (type $ly@@77) LayerTypeType) (= (_module.__default.SSIG1 ($LS $ly@@77) |x#0@@45|) (_module.__default.SSIG1 $ly@@77 |x#0@@45|))) :qid |shacommo.58:20| :skolemid |2266| :pattern ( (_module.__default.SSIG1 ($LS $ly@@77) |x#0@@45|)) )))
(assert (forall (($ly@@78 T@U) (|x#0@@46| Int) ) (!  (=> (= (type $ly@@78) LayerTypeType) (= (_module.__default.SSIG1 $ly@@78 |x#0@@46|) (_module.__default.SSIG1 $LZ |x#0@@46|))) :qid |shacommo.58:20| :skolemid |2267| :pattern ( (_module.__default.SSIG1 (AsFuelBottom $ly@@78) |x#0@@46|)) )))
(assert  (=> true (forall (($ly@@79 T@U) (|x#0@@47| Int) ) (!  (=> (and (= (type $ly@@79) LayerTypeType) (or (|_module.__default.SSIG1#canCall| |x#0@@47|) (_module.__default.isUInt32 |x#0@@47|))) (_module.__default.isUInt32 (_module.__default.SSIG1 $ly@@79 |x#0@@47|))) :qid |shacommo.58:20| :skolemid |2268| :pattern ( (_module.__default.SSIG1 $ly@@79 |x#0@@47|)) ))))
(assert (forall (($ly@@80 T@U) (|x#0@@48| Int) ) (!  (=> (and (= (type $ly@@80) LayerTypeType) (_module.__default.isUInt32 |x#0@@48|)) (and (=> (|_module.__default.SSIG1#requires| $ly@@80 |x#0@@48|) true) (=> true (|_module.__default.SSIG1#requires| $ly@@80 |x#0@@48|)))) :qid |shacommo.58:20| :skolemid |2269| :pattern ( (|_module.__default.SSIG1#requires| $ly@@80 |x#0@@48|)) )))
(assert  (=> true (forall (($ly@@81 T@U) (|x#0@@49| Int) ) (!  (=> (and (= (type $ly@@81) LayerTypeType) (or (|_module.__default.SSIG1#canCall| |x#0@@49|) (_module.__default.isUInt32 |x#0@@49|))) (and (and (and (and (and (|_module.__default.RotateRight#canCall| |x#0@@49| (LitInt 17)) (|_module.__default.RotateRight#canCall| |x#0@@49| (LitInt 19))) (|_module.__default.BitwiseXor#canCall| (_module.__default.RotateRight |x#0@@49| (LitInt 17)) (_module.__default.RotateRight |x#0@@49| (LitInt 19)))) (|_module.__default.RightShift#canCall| |x#0@@49| (LitInt 10))) (|_module.__default.BitwiseXor#canCall| (_module.__default.BitwiseXor (_module.__default.RotateRight |x#0@@49| (LitInt 17)) (_module.__default.RotateRight |x#0@@49| (LitInt 19))) (_module.__default.RightShift |x#0@@49| (LitInt 10)))) (= (_module.__default.SSIG1 ($LS $ly@@81) |x#0@@49|) (_module.__default.BitwiseXor (_module.__default.BitwiseXor (_module.__default.RotateRight |x#0@@49| (LitInt 17)) (_module.__default.RotateRight |x#0@@49| (LitInt 19))) (_module.__default.RightShift |x#0@@49| (LitInt 10)))))) :qid |shacommo.58:20| :skolemid |2270| :pattern ( (_module.__default.SSIG1 ($LS $ly@@81) |x#0@@49|)) ))))
(assert  (=> true (forall (($ly@@82 T@U) (|x#0@@50| Int) ) (!  (=> (and (= (type $ly@@82) LayerTypeType) (or (|_module.__default.SSIG1#canCall| (LitInt |x#0@@50|)) (_module.__default.isUInt32 |x#0@@50|))) (and (and (and (and (and (|_module.__default.RotateRight#canCall| (LitInt |x#0@@50|) (LitInt 17)) (|_module.__default.RotateRight#canCall| (LitInt |x#0@@50|) (LitInt 19))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.RotateRight (LitInt |x#0@@50|) (LitInt 17))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@50|) (LitInt 19))))) (|_module.__default.RightShift#canCall| (LitInt |x#0@@50|) (LitInt 10))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.RotateRight (LitInt |x#0@@50|) (LitInt 17))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@50|) (LitInt 19))))) (LitInt (_module.__default.RightShift (LitInt |x#0@@50|) (LitInt 10))))) (= (_module.__default.SSIG1 ($LS $ly@@82) (LitInt |x#0@@50|)) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.RotateRight (LitInt |x#0@@50|) (LitInt 17))) (LitInt (_module.__default.RotateRight (LitInt |x#0@@50|) (LitInt 19))))) (LitInt (_module.__default.RightShift (LitInt |x#0@@50|) (LitInt 10)))))))) :qid |shacommo.58:20| :weight 3 :skolemid |2271| :pattern ( (_module.__default.SSIG1 ($LS $ly@@82) (LitInt |x#0@@50|))) ))))
(assert (forall ((arg0@@243 T@U) (arg1@@134 T@U) (arg2@@92 T@U) (arg3@@65 Int) ) (! (= (type (_module.__default.BreakIntoBlocks arg0@@243 arg1@@134 arg2@@92 arg3@@65)) (SeqType BoxType)) :qid |funType:_module.__default.BreakIntoBlocks| :pattern ( (_module.__default.BreakIntoBlocks arg0@@243 arg1@@134 arg2@@92 arg3@@65)) )))
(assert (forall ((_module._default.BreakIntoBlocks$T T@U) ($ly@@83 T@U) (|os#0| T@U) (|block_size#0| Int) ) (!  (=> (and (and (= (type _module._default.BreakIntoBlocks$T) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |os#0|) (SeqType BoxType))) (= (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T ($LS $ly@@83) |os#0| |block_size#0|) (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T $ly@@83 |os#0| |block_size#0|))) :qid |unknown.0:0| :skolemid |2272| :pattern ( (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T ($LS $ly@@83) |os#0| |block_size#0|)) )))
(assert (forall ((_module._default.BreakIntoBlocks$T@@0 T@U) ($ly@@84 T@U) (|os#0@@0| T@U) (|block_size#0@@0| Int) ) (!  (=> (and (and (= (type _module._default.BreakIntoBlocks$T@@0) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |os#0@@0|) (SeqType BoxType))) (= (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@0 $ly@@84 |os#0@@0| |block_size#0@@0|) (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@0 $LZ |os#0@@0| |block_size#0@@0|))) :qid |unknown.0:0| :skolemid |2273| :pattern ( (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@0 (AsFuelBottom $ly@@84) |os#0@@0| |block_size#0@@0|)) )))
(assert  (=> true (forall ((_module._default.BreakIntoBlocks$T@@1 T@U) ($ly@@85 T@U) (|os#0@@1| T@U) (|block_size#0@@1| Int) ) (!  (=> (and (and (and (= (type _module._default.BreakIntoBlocks$T@@1) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |os#0@@1|) (SeqType BoxType))) (or (|_module.__default.BreakIntoBlocks#canCall| _module._default.BreakIntoBlocks$T@@1 |os#0@@1| |block_size#0@@1|) (and ($Is |os#0@@1| (TSeq _module._default.BreakIntoBlocks$T@@1)) (INTERNAL_lt_boogie 0 |block_size#0@@1|)))) ($Is (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@1 $ly@@85 |os#0@@1| |block_size#0@@1|) (TSeq (TSeq _module._default.BreakIntoBlocks$T@@1)))) :qid |unknown.0:0| :skolemid |2274| :pattern ( (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@1 $ly@@85 |os#0@@1| |block_size#0@@1|)) ))))
(assert (forall ((_module._default.BreakIntoBlocks$T@@2 T@U) ($ly@@86 T@U) (|os#0@@2| T@U) (|block_size#0@@2| Int) ) (!  (=> (and (and (and (= (type _module._default.BreakIntoBlocks$T@@2) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |os#0@@2|) (SeqType BoxType))) ($Is |os#0@@2| (TSeq _module._default.BreakIntoBlocks$T@@2))) (and (=> (|_module.__default.BreakIntoBlocks#requires| _module._default.BreakIntoBlocks$T@@2 $ly@@86 |os#0@@2| |block_size#0@@2|) (INTERNAL_lt_boogie 0 |block_size#0@@2|)) (=> (INTERNAL_lt_boogie 0 |block_size#0@@2|) (|_module.__default.BreakIntoBlocks#requires| _module._default.BreakIntoBlocks$T@@2 $ly@@86 |os#0@@2| |block_size#0@@2|)))) :qid |unknown.0:0| :skolemid |2275| :pattern ( (|_module.__default.BreakIntoBlocks#requires| _module._default.BreakIntoBlocks$T@@2 $ly@@86 |os#0@@2| |block_size#0@@2|)) )))
(assert  (=> true (forall ((_module._default.BreakIntoBlocks$T@@3 T@U) ($ly@@87 T@U) (|os#0@@3| T@U) (|block_size#0@@3| Int) ) (!  (=> (and (and (and (= (type _module._default.BreakIntoBlocks$T@@3) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |os#0@@3|) (SeqType BoxType))) (or (|_module.__default.BreakIntoBlocks#canCall| _module._default.BreakIntoBlocks$T@@3 |os#0@@3| |block_size#0@@3|) (and ($Is |os#0@@3| (TSeq _module._default.BreakIntoBlocks$T@@3)) (INTERNAL_lt_boogie 0 |block_size#0@@3|)))) (and (=> (not (= (|Seq#Length| |os#0@@3|) (LitInt 0))) (=> (not (INTERNAL_lt_boogie (|Seq#Length| |os#0@@3|) |block_size#0@@3|)) (|_module.__default.BreakIntoBlocks#canCall| _module._default.BreakIntoBlocks$T@@3 (|Seq#Drop| |os#0@@3| |block_size#0@@3|) |block_size#0@@3|))) (= (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@3 ($LS $ly@@87) |os#0@@3| |block_size#0@@3|) (ite (= (|Seq#Length| |os#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (ite (INTERNAL_lt_boogie (|Seq#Length| |os#0@@3|) |block_size#0@@3|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |os#0@@3|)) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|Seq#Take| |os#0@@3| |block_size#0@@3|))) (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@3 $ly@@87 (|Seq#Drop| |os#0@@3| |block_size#0@@3|) |block_size#0@@3|))))))) :qid |unknown.0:0| :skolemid |2276| :pattern ( (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@3 ($LS $ly@@87) |os#0@@3| |block_size#0@@3|)) ))))
(assert  (=> true (forall ((_module._default.BreakIntoBlocks$T@@4 T@U) ($ly@@88 T@U) (|os#0@@4| T@U) (|block_size#0@@4| Int) ) (!  (=> (and (and (and (= (type _module._default.BreakIntoBlocks$T@@4) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |os#0@@4|) (SeqType BoxType))) (or (|_module.__default.BreakIntoBlocks#canCall| _module._default.BreakIntoBlocks$T@@4 (Lit |os#0@@4|) |block_size#0@@4|) (and ($Is |os#0@@4| (TSeq _module._default.BreakIntoBlocks$T@@4)) (INTERNAL_lt_boogie 0 |block_size#0@@4|)))) (and (=> (not (= (|Seq#Length| (Lit |os#0@@4|)) (LitInt 0))) (=> (not (INTERNAL_lt_boogie (|Seq#Length| (Lit |os#0@@4|)) |block_size#0@@4|)) (|_module.__default.BreakIntoBlocks#canCall| _module._default.BreakIntoBlocks$T@@4 (|Seq#Drop| (Lit |os#0@@4|) |block_size#0@@4|) |block_size#0@@4|))) (= (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@4 ($LS $ly@@88) (Lit |os#0@@4|) |block_size#0@@4|) (ite (= (|Seq#Length| (Lit |os#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (ite (INTERNAL_lt_boogie (|Seq#Length| (Lit |os#0@@4|)) |block_size#0@@4|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |os#0@@4|))) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|Seq#Take| (Lit |os#0@@4|) |block_size#0@@4|))) (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@4 ($LS $ly@@88) (|Seq#Drop| (Lit |os#0@@4|) |block_size#0@@4|) |block_size#0@@4|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2277| :pattern ( (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@4 ($LS $ly@@88) (Lit |os#0@@4|) |block_size#0@@4|)) ))))
(assert  (=> true (forall ((_module._default.BreakIntoBlocks$T@@5 T@U) ($ly@@89 T@U) (|os#0@@5| T@U) (|block_size#0@@5| Int) ) (!  (=> (and (and (and (= (type _module._default.BreakIntoBlocks$T@@5) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |os#0@@5|) (SeqType BoxType))) (or (|_module.__default.BreakIntoBlocks#canCall| _module._default.BreakIntoBlocks$T@@5 (Lit |os#0@@5|) (LitInt |block_size#0@@5|)) (and ($Is |os#0@@5| (TSeq _module._default.BreakIntoBlocks$T@@5)) (U_2_bool (Lit (bool_2_U (INTERNAL_lt_boogie 0 |block_size#0@@5|))))))) (and (=> (not (= (|Seq#Length| (Lit |os#0@@5|)) (LitInt 0))) (=> (not (INTERNAL_lt_boogie (|Seq#Length| (Lit |os#0@@5|)) |block_size#0@@5|)) (|_module.__default.BreakIntoBlocks#canCall| _module._default.BreakIntoBlocks$T@@5 (Lit (|Seq#Drop| (Lit |os#0@@5|) (LitInt |block_size#0@@5|))) (LitInt |block_size#0@@5|)))) (= (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@5 ($LS $ly@@89) (Lit |os#0@@5|) (LitInt |block_size#0@@5|)) (ite (= (|Seq#Length| (Lit |os#0@@5|)) (LitInt 0)) (|Seq#Empty| BoxType) (ite (INTERNAL_lt_boogie (|Seq#Length| (Lit |os#0@@5|)) |block_size#0@@5|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |os#0@@5|))) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|Seq#Take| (Lit |os#0@@5|) (LitInt |block_size#0@@5|))))) (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@5 ($LS $ly@@89) (Lit (|Seq#Drop| (Lit |os#0@@5|) (LitInt |block_size#0@@5|))) (LitInt |block_size#0@@5|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2278| :pattern ( (_module.__default.BreakIntoBlocks _module._default.BreakIntoBlocks$T@@5 ($LS $ly@@89) (Lit |os#0@@5|) (LitInt |block_size#0@@5|))) ))))
(assert  (=> true (=> true true)))
(assert  (=> |_module.__default.MaxBytesForSHA#requires| true))
(assert  (=> true |_module.__default.MaxBytesForSHA#requires|))
(assert  (=> true (=> true (= _module.__default.MaxBytesForSHA (LitInt 2305843009213693951)))))
(assert  (=> true (=> true (= _module.__default.MaxBytesForSHA (LitInt 2305843009213693951)))))
(assert  (=> true (forall ((|ws#0| T@U) (|bytes#0| T@U) ) (!  (=> (and (and (= (type |ws#0|) (SeqType BoxType)) (= (type |bytes#0|) (SeqType BoxType))) (or (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#canCall| |ws#0| |bytes#0|) (and ($Is |ws#0| (TSeq Tclass._module.word)) ($Is |bytes#0| (TSeq Tclass._module.byte))))) true) :qid |shacommo.74:45| :skolemid |2279| :pattern ( (_module.__default.WordSeqIsProperlySHAPaddedByteSeq |ws#0| |bytes#0|)) ))))
(assert (forall ((|ws#0@@0| T@U) (|bytes#0@@0| T@U) ) (!  (=> (and (and (= (type |ws#0@@0|) (SeqType BoxType)) (= (type |bytes#0@@0|) (SeqType BoxType))) (and ($Is |ws#0@@0| (TSeq Tclass._module.word)) ($Is |bytes#0@@0| (TSeq Tclass._module.byte)))) (and (=> (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#requires| |ws#0@@0| |bytes#0@@0|) true) (=> true (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#requires| |ws#0@@0| |bytes#0@@0|)))) :qid |shacommo.74:45| :skolemid |2280| :pattern ( (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#requires| |ws#0@@0| |bytes#0@@0|)) )))
(assert  (and (and (and (forall ((arg0@@244 T@U) (arg1@@135 Int) (arg2@@93 Int) ) (! (= (type (_module.__default.RepeatByte arg0@@244 arg1@@135 arg2@@93)) (SeqType BoxType)) :qid |funType:_module.__default.RepeatByte| :pattern ( (_module.__default.RepeatByte arg0@@244 arg1@@135 arg2@@93)) )) (= (type StartFuel__module._default.RepeatByte) LayerTypeType)) (forall ((arg0@@245 T@U) (arg1@@136 Int) ) (! (= (type (_module.__default.Uint64ToBytes arg0@@245 arg1@@136)) (SeqType BoxType)) :qid |funType:_module.__default.Uint64ToBytes| :pattern ( (_module.__default.Uint64ToBytes arg0@@245 arg1@@136)) ))) (= (type StartFuel__module._default.Uint64ToBytes) LayerTypeType)))
(assert  (=> true (forall ((|ws#0@@1| T@U) (|bytes#0@@1| T@U) ) (!  (=> (and (and (= (type |ws#0@@1|) (SeqType BoxType)) (= (type |bytes#0@@1|) (SeqType BoxType))) (or (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#canCall| |ws#0@@1| |bytes#0@@1|) (and ($Is |ws#0@@1| (TSeq Tclass._module.word)) ($Is |bytes#0@@1| (TSeq Tclass._module.byte))))) (and (and |_module.__default.MaxBytesForSHA#canCall| (=> (INTERNAL_le_boogie (|Seq#Length| |bytes#0@@1|) _module.__default.MaxBytesForSHA) (and (|_module.__default.WordSeqToBytes#canCall| |ws#0@@1|) (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |bytes#0@@1|) 64)) 64)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |bytes#0@@1|) 8)))))) (and (=> (_module.__default.WordSeqIsProperlySHAPaddedByteSeq |ws#0@@1| |bytes#0@@1|) (and (INTERNAL_le_boogie (|Seq#Length| |bytes#0@@1|) _module.__default.MaxBytesForSHA) (|Seq#Equal| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes |ws#0@@1|) (|Seq#Append| (|Seq#Append| (|Seq#Append| |bytes#0@@1| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuel__module._default.RepeatByte (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |bytes#0@@1|) 64)) 64))) (_module.__default.Uint64ToBytes StartFuel__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |bytes#0@@1|) 8)))))) (=> (and (INTERNAL_le_boogie (|Seq#Length| |bytes#0@@1|) _module.__default.MaxBytesForSHA) (|Seq#Equal| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes |ws#0@@1|) (|Seq#Append| (|Seq#Append| (|Seq#Append| |bytes#0@@1| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuel__module._default.RepeatByte (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |bytes#0@@1|) 64)) 64))) (_module.__default.Uint64ToBytes StartFuel__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |bytes#0@@1|) 8))))) (_module.__default.WordSeqIsProperlySHAPaddedByteSeq |ws#0@@1| |bytes#0@@1|))))) :qid |shacommo.74:45| :skolemid |2281| :pattern ( (_module.__default.WordSeqIsProperlySHAPaddedByteSeq |ws#0@@1| |bytes#0@@1|)) ))))
(assert  (=> true (forall ((|ws#0@@2| T@U) (|bytes#0@@2| T@U) ) (!  (=> (and (and (= (type |ws#0@@2|) (SeqType BoxType)) (= (type |bytes#0@@2|) (SeqType BoxType))) (or (|_module.__default.WordSeqIsProperlySHAPaddedByteSeq#canCall| (Lit |ws#0@@2|) (Lit |bytes#0@@2|)) (and ($Is |ws#0@@2| (TSeq Tclass._module.word)) ($Is |bytes#0@@2| (TSeq Tclass._module.byte))))) (and (and |_module.__default.MaxBytesForSHA#canCall| (=> (INTERNAL_le_boogie (|Seq#Length| (Lit |bytes#0@@2|)) _module.__default.MaxBytesForSHA) (and (|_module.__default.WordSeqToBytes#canCall| (Lit |ws#0@@2|)) (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| (Lit |bytes#0@@2|)) 64)) 64)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| (Lit |bytes#0@@2|)) 8)))))) (and (=> (_module.__default.WordSeqIsProperlySHAPaddedByteSeq (Lit |ws#0@@2|) (Lit |bytes#0@@2|)) (and (INTERNAL_le_boogie (|Seq#Length| (Lit |bytes#0@@2|)) _module.__default.MaxBytesForSHA) (|Seq#Equal| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (Lit |ws#0@@2|)) (|Seq#Append| (|Seq#Append| (|Seq#Append| |bytes#0@@2| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuel__module._default.RepeatByte (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| (Lit |bytes#0@@2|)) 64)) 64))) (_module.__default.Uint64ToBytes StartFuel__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| (Lit |bytes#0@@2|)) 8)))))) (=> (and (INTERNAL_le_boogie (|Seq#Length| (Lit |bytes#0@@2|)) _module.__default.MaxBytesForSHA) (|Seq#Equal| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (Lit |ws#0@@2|)) (|Seq#Append| (|Seq#Append| (|Seq#Append| |bytes#0@@2| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuel__module._default.RepeatByte (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| (Lit |bytes#0@@2|)) 64)) 64))) (_module.__default.Uint64ToBytes StartFuel__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| (Lit |bytes#0@@2|)) 8))))) (_module.__default.WordSeqIsProperlySHAPaddedByteSeq (Lit |ws#0@@2|) (Lit |bytes#0@@2|)))))) :qid |shacommo.74:45| :weight 3 :skolemid |2282| :pattern ( (_module.__default.WordSeqIsProperlySHAPaddedByteSeq (Lit |ws#0@@2|) (Lit |bytes#0@@2|))) ))))
(assert  (=> true (forall ((|blk#0@@54| Int) ) (!  (=> true true) :qid |shacommo.83:15| :skolemid |2283| :pattern ( (_module.__default.TBlk |blk#0@@54|)) ))))
(assert (forall ((|blk#0@@55| Int) ) (!  (and (=> (|_module.__default.TBlk#requires| |blk#0@@55|) true) (=> true (|_module.__default.TBlk#requires| |blk#0@@55|))) :qid |shacommo.83:15| :skolemid |2284| :pattern ( (|_module.__default.TBlk#requires| |blk#0@@55|)) )))
(assert  (=> true (forall ((|blk#0@@56| Int) ) (!  (=> true (and (=> (_module.__default.TBlk |blk#0@@56|) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (_module.__default.TBlk |blk#0@@56|)))) :qid |shacommo.83:15| :skolemid |2285| :pattern ( (_module.__default.TBlk |blk#0@@56|)) ))))
(assert  (=> true (forall ((|blk#0@@57| Int) ) (!  (=> true (and (=> (_module.__default.TBlk (LitInt |blk#0@@57|)) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (_module.__default.TBlk (LitInt |blk#0@@57|))))) :qid |shacommo.83:15| :weight 3 :skolemid |2286| :pattern ( (_module.__default.TBlk (LitInt |blk#0@@57|))) ))))
(assert  (=> true (forall ((|t#0@@31| Int) ) (!  (=> (or (|_module.__default.TStep#canCall| |t#0@@31|) (_module.__default.isUInt32 |t#0@@31|)) true) :qid |shacommo.84:16| :skolemid |2287| :pattern ( (_module.__default.TStep |t#0@@31|)) ))))
(assert (forall ((|t#0@@32| Int) ) (!  (=> (_module.__default.isUInt32 |t#0@@32|) (and (=> (|_module.__default.TStep#requires| |t#0@@32|) true) (=> true (|_module.__default.TStep#requires| |t#0@@32|)))) :qid |shacommo.84:16| :skolemid |2288| :pattern ( (|_module.__default.TStep#requires| |t#0@@32|)) )))
(assert  (=> true (forall ((|t#0@@33| Int) ) (!  (=> (or (|_module.__default.TStep#canCall| |t#0@@33|) (_module.__default.isUInt32 |t#0@@33|)) (and (=> (_module.__default.TStep |t#0@@33|) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (_module.__default.TStep |t#0@@33|)))) :qid |shacommo.84:16| :skolemid |2289| :pattern ( (_module.__default.TStep |t#0@@33|)) ))))
(assert  (=> true (forall ((|t#0@@34| Int) ) (!  (=> (or (|_module.__default.TStep#canCall| (LitInt |t#0@@34|)) (_module.__default.isUInt32 |t#0@@34|)) (and (=> (_module.__default.TStep (LitInt |t#0@@34|)) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (_module.__default.TStep (LitInt |t#0@@34|))))) :qid |shacommo.84:16| :weight 3 :skolemid |2290| :pattern ( (_module.__default.TStep (LitInt |t#0@@34|))) ))))
(assert (forall (($ly@@90 T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (= (type $ly@@90) LayerTypeType) (= (type |a#0|) (SeqType BoxType))) (= (type |b#0|) (SeqType BoxType))) (= (_module.__default.SeqXor ($LS $ly@@90) |a#0| |b#0|) (_module.__default.SeqXor $ly@@90 |a#0| |b#0|))) :qid |hmaccomm.12:20| :skolemid |2291| :pattern ( (_module.__default.SeqXor ($LS $ly@@90) |a#0| |b#0|)) )))
(assert (forall (($ly@@91 T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@91) LayerTypeType) (= (type |a#0@@0|) (SeqType BoxType))) (= (type |b#0@@0|) (SeqType BoxType))) (= (_module.__default.SeqXor $ly@@91 |a#0@@0| |b#0@@0|) (_module.__default.SeqXor $LZ |a#0@@0| |b#0@@0|))) :qid |hmaccomm.12:20| :skolemid |2292| :pattern ( (_module.__default.SeqXor (AsFuelBottom $ly@@91) |a#0@@0| |b#0@@0|)) )))
(assert  (=> true (forall (($ly@@92 T@U) (|a#0@@1| T@U) (|b#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@92) LayerTypeType) (= (type |a#0@@1|) (SeqType BoxType))) (= (type |b#0@@1|) (SeqType BoxType))) (or (|_module.__default.SeqXor#canCall| |a#0@@1| |b#0@@1|) (and (and ($Is |a#0@@1| (TSeq Tclass._module.word)) ($Is |b#0@@1| (TSeq Tclass._module.word))) (= (|Seq#Length| |a#0@@1|) (|Seq#Length| |b#0@@1|))))) (and (and (= (|Seq#Length| (_module.__default.SeqXor $ly@@92 |a#0@@1| |b#0@@1|)) (|Seq#Length| |a#0@@1|)) (forall ((|i#0@@7| Int) (|tr$ly#0@@2| T@U) ) (!  (=> (and (and (= (type |tr$ly#0@@2|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |i#0@@7|) (INTERNAL_lt_boogie |i#0@@7| (|Seq#Length| |a#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.SeqXor $ly@@92 |a#0@@1| |b#0@@1|) |i#0@@7|))) (_module.__default.BitwiseXor (U_2_int ($Unbox intType (|Seq#Index| |a#0@@1| |i#0@@7|))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@1| |i#0@@7|)))))) :qid |hmaccomm.15:21| :skolemid |2293| :pattern ( ($Unbox intType (|Seq#Index| |b#0@@1| |i#0@@7|)) (AsFuelBottom |tr$ly#0@@2|)) :pattern ( ($Unbox intType (|Seq#Index| |a#0@@1| |i#0@@7|)) (AsFuelBottom |tr$ly#0@@2|)) :pattern ( ($Unbox intType (|Seq#Index| (_module.__default.SeqXor |tr$ly#0@@2| |a#0@@1| |b#0@@1|) |i#0@@7|))) ))) ($Is (_module.__default.SeqXor $ly@@92 |a#0@@1| |b#0@@1|) (TSeq Tclass._module.word)))) :qid |hmaccomm.12:20| :skolemid |2294| :pattern ( (_module.__default.SeqXor $ly@@92 |a#0@@1| |b#0@@1|)) ))))
(assert (forall (($ly@@93 T@U) (|a#0@@2| T@U) (|b#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@93) LayerTypeType) (= (type |a#0@@2|) (SeqType BoxType))) (= (type |b#0@@2|) (SeqType BoxType))) (and ($Is |a#0@@2| (TSeq Tclass._module.word)) ($Is |b#0@@2| (TSeq Tclass._module.word)))) (and (=> (|_module.__default.SeqXor#requires| $ly@@93 |a#0@@2| |b#0@@2|) (= (|Seq#Length| |a#0@@2|) (|Seq#Length| |b#0@@2|))) (=> (= (|Seq#Length| |a#0@@2|) (|Seq#Length| |b#0@@2|)) (|_module.__default.SeqXor#requires| $ly@@93 |a#0@@2| |b#0@@2|)))) :qid |hmaccomm.12:20| :skolemid |2295| :pattern ( (|_module.__default.SeqXor#requires| $ly@@93 |a#0@@2| |b#0@@2|)) )))
(assert  (=> true (forall (($ly@@94 T@U) (|a#0@@3| T@U) (|b#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@94) LayerTypeType) (= (type |a#0@@3|) (SeqType BoxType))) (= (type |b#0@@3|) (SeqType BoxType))) (or (|_module.__default.SeqXor#canCall| |a#0@@3| |b#0@@3|) (and (and ($Is |a#0@@3| (TSeq Tclass._module.word)) ($Is |b#0@@3| (TSeq Tclass._module.word))) (= (|Seq#Length| |a#0@@3|) (|Seq#Length| |b#0@@3|))))) (and (=> (not (= (|Seq#Length| |a#0@@3|) (LitInt 0))) (and (|_module.__default.BitwiseXor#canCall| (U_2_int ($Unbox intType (|Seq#Index| |a#0@@3| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@3| (LitInt 0))))) (|_module.__default.SeqXor#canCall| (|Seq#Drop| |a#0@@3| (LitInt 1)) (|Seq#Drop| |b#0@@3| (LitInt 1))))) (= (_module.__default.SeqXor ($LS $ly@@94) |a#0@@3| |b#0@@3|) (ite (= (|Seq#Length| |a#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (_module.__default.BitwiseXor (U_2_int ($Unbox intType (|Seq#Index| |a#0@@3| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@3| (LitInt 0)))))))) (_module.__default.SeqXor $ly@@94 (|Seq#Drop| |a#0@@3| (LitInt 1)) (|Seq#Drop| |b#0@@3| (LitInt 1)))))))) :qid |hmaccomm.12:20| :skolemid |2296| :pattern ( (_module.__default.SeqXor ($LS $ly@@94) |a#0@@3| |b#0@@3|)) ))))
(assert  (=> true (forall (($ly@@95 T@U) (|a#0@@4| T@U) (|b#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@95) LayerTypeType) (= (type |a#0@@4|) (SeqType BoxType))) (= (type |b#0@@4|) (SeqType BoxType))) (or (|_module.__default.SeqXor#canCall| (Lit |a#0@@4|) (Lit |b#0@@4|)) (and (and ($Is |a#0@@4| (TSeq Tclass._module.word)) ($Is |b#0@@4| (TSeq Tclass._module.word))) (= (|Seq#Length| (Lit |a#0@@4|)) (|Seq#Length| (Lit |b#0@@4|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@4|)) (LitInt 0))) (and (|_module.__default.BitwiseXor#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@4|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@4|) (LitInt 0))))) (|_module.__default.SeqXor#canCall| (Lit (|Seq#Drop| (Lit |a#0@@4|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@4|) (LitInt 1)))))) (= (_module.__default.SeqXor ($LS $ly@@95) (Lit |a#0@@4|) (Lit |b#0@@4|)) (ite (= (|Seq#Length| (Lit |a#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (_module.__default.BitwiseXor (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@4|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@4|) (LitInt 0)))))))) (_module.__default.SeqXor ($LS $ly@@95) (Lit (|Seq#Drop| (Lit |a#0@@4|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@4|) (LitInt 1))))))))) :qid |hmaccomm.12:20| :weight 3 :skolemid |2297| :pattern ( (_module.__default.SeqXor ($LS $ly@@95) (Lit |a#0@@4|) (Lit |b#0@@4|))) ))))
(assert  (=> true (forall ((|len#0| Int) ) (!  (=> (or (|_module.__default.Opad#canCall| |len#0|) (INTERNAL_ge_boogie |len#0| 0)) ($Is (_module.__default.Opad |len#0|) (TSeq Tclass._module.word))) :qid |hmaccomm.20:26| :skolemid |2298| :pattern ( (_module.__default.Opad |len#0|)) ))))
(assert (forall ((|len#0@@0| Int) ) (!  (and (=> (|_module.__default.Opad#requires| |len#0@@0|) (INTERNAL_ge_boogie |len#0@@0| 0)) (=> (INTERNAL_ge_boogie |len#0@@0| 0) (|_module.__default.Opad#requires| |len#0@@0|))) :qid |hmaccomm.20:26| :skolemid |2299| :pattern ( (|_module.__default.Opad#requires| |len#0@@0|)) )))
(assert (forall ((arg0@@246 T@U) (arg1@@137 T@U) (arg2@@94 T@U) (arg3@@66 Int) ) (! (= (type (_module.__default.RepeatValue arg0@@246 arg1@@137 arg2@@94 arg3@@66)) (SeqType BoxType)) :qid |funType:_module.__default.RepeatValue| :pattern ( (_module.__default.RepeatValue arg0@@246 arg1@@137 arg2@@94 arg3@@66)) )))
(assert  (=> true (forall ((|len#0@@1| Int) ) (!  (=> (or (|_module.__default.Opad#canCall| |len#0@@1|) (INTERNAL_ge_boogie |len#0@@1| 0)) (and (|_module.__default.RepeatValue#canCall| Tclass._module.word ($Box (int_2_U (LitInt 1549556828))) |len#0@@1|) (= (_module.__default.Opad |len#0@@1|) (_module.__default.RepeatValue Tclass._module.word ($LS $LZ) ($Box (int_2_U (LitInt 1549556828))) |len#0@@1|)))) :qid |hmaccomm.20:26| :skolemid |2300| :pattern ( (_module.__default.Opad |len#0@@1|)) ))))
(assert  (=> true (forall ((|len#0@@2| Int) ) (!  (=> (or (|_module.__default.Opad#canCall| (LitInt |len#0@@2|)) (INTERNAL_ge_boogie |len#0@@2| 0)) (and (|_module.__default.RepeatValue#canCall| Tclass._module.word ($Box (int_2_U (LitInt 1549556828))) (LitInt |len#0@@2|)) (= (_module.__default.Opad (LitInt |len#0@@2|)) (Lit (_module.__default.RepeatValue Tclass._module.word ($LS $LZ) ($Box (int_2_U (LitInt 1549556828))) (LitInt |len#0@@2|)))))) :qid |hmaccomm.20:26| :weight 3 :skolemid |2301| :pattern ( (_module.__default.Opad (LitInt |len#0@@2|))) ))))
(assert  (=> true (forall ((|len#0@@3| Int) ) (!  (=> (or (|_module.__default.Ipad#canCall| |len#0@@3|) (INTERNAL_ge_boogie |len#0@@3| 0)) ($Is (_module.__default.Ipad |len#0@@3|) (TSeq Tclass._module.word))) :qid |hmaccomm.25:26| :skolemid |2302| :pattern ( (_module.__default.Ipad |len#0@@3|)) ))))
(assert (forall ((|len#0@@4| Int) ) (!  (and (=> (|_module.__default.Ipad#requires| |len#0@@4|) (INTERNAL_ge_boogie |len#0@@4| 0)) (=> (INTERNAL_ge_boogie |len#0@@4| 0) (|_module.__default.Ipad#requires| |len#0@@4|))) :qid |hmaccomm.25:26| :skolemid |2303| :pattern ( (|_module.__default.Ipad#requires| |len#0@@4|)) )))
(assert  (=> true (forall ((|len#0@@5| Int) ) (!  (=> (or (|_module.__default.Ipad#canCall| |len#0@@5|) (INTERNAL_ge_boogie |len#0@@5| 0)) (and (|_module.__default.RepeatValue#canCall| Tclass._module.word ($Box (int_2_U (LitInt 909522486))) |len#0@@5|) (= (_module.__default.Ipad |len#0@@5|) (_module.__default.RepeatValue Tclass._module.word ($LS $LZ) ($Box (int_2_U (LitInt 909522486))) |len#0@@5|)))) :qid |hmaccomm.25:26| :skolemid |2304| :pattern ( (_module.__default.Ipad |len#0@@5|)) ))))
(assert  (=> true (forall ((|len#0@@6| Int) ) (!  (=> (or (|_module.__default.Ipad#canCall| (LitInt |len#0@@6|)) (INTERNAL_ge_boogie |len#0@@6| 0)) (and (|_module.__default.RepeatValue#canCall| Tclass._module.word ($Box (int_2_U (LitInt 909522486))) (LitInt |len#0@@6|)) (= (_module.__default.Ipad (LitInt |len#0@@6|)) (Lit (_module.__default.RepeatValue Tclass._module.word ($LS $LZ) ($Box (int_2_U (LitInt 909522486))) (LitInt |len#0@@6|)))))) :qid |hmaccomm.25:26| :weight 3 :skolemid |2305| :pattern ( (_module.__default.Ipad (LitInt |len#0@@6|))) ))))
(assert (forall (($ly@@96 T@U) (|bytes#0@@3| T@U) ) (!  (=> (and (= (type $ly@@96) LayerTypeType) (= (type |bytes#0@@3|) (SeqType BoxType))) (= (_module.__default.BEByteSeqToInt ($LS $ly@@96) |bytes#0@@3|) (_module.__default.BEByteSeqToInt $ly@@96 |bytes#0@@3|))) :qid |wordsand.9:10| :skolemid |2306| :pattern ( (_module.__default.BEByteSeqToInt ($LS $ly@@96) |bytes#0@@3|)) )))
(assert (forall (($ly@@97 T@U) (|bytes#0@@4| T@U) ) (!  (=> (and (= (type $ly@@97) LayerTypeType) (= (type |bytes#0@@4|) (SeqType BoxType))) (= (_module.__default.BEByteSeqToInt $ly@@97 |bytes#0@@4|) (_module.__default.BEByteSeqToInt $LZ |bytes#0@@4|))) :qid |wordsand.9:10| :skolemid |2307| :pattern ( (_module.__default.BEByteSeqToInt (AsFuelBottom $ly@@97) |bytes#0@@4|)) )))
(assert  (=> true (forall (($ly@@98 T@U) (|bytes#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@98) LayerTypeType) (= (type |bytes#0@@5|) (SeqType BoxType))) (or (|_module.__default.BEByteSeqToInt#canCall| |bytes#0@@5|) ($Is |bytes#0@@5| (TSeq Tclass._module.byte)))) true) :qid |wordsand.9:10| :skolemid |2308| :pattern ( (_module.__default.BEByteSeqToInt $ly@@98 |bytes#0@@5|)) ))))
(assert (forall (($ly@@99 T@U) (|bytes#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@99) LayerTypeType) (= (type |bytes#0@@6|) (SeqType BoxType))) ($Is |bytes#0@@6| (TSeq Tclass._module.byte))) (and (=> (|_module.__default.BEByteSeqToInt#requires| $ly@@99 |bytes#0@@6|) true) (=> true (|_module.__default.BEByteSeqToInt#requires| $ly@@99 |bytes#0@@6|)))) :qid |wordsand.9:10| :skolemid |2309| :pattern ( (|_module.__default.BEByteSeqToInt#requires| $ly@@99 |bytes#0@@6|)) )))
(assert  (=> true (forall (($ly@@100 T@U) (|bytes#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@100) LayerTypeType) (= (type |bytes#0@@7|) (SeqType BoxType))) (or (|_module.__default.BEByteSeqToInt#canCall| |bytes#0@@7|) ($Is |bytes#0@@7| (TSeq Tclass._module.byte)))) (and (=> (not (|Seq#Equal| |bytes#0@@7| (|Seq#Empty| BoxType))) (|_module.__default.BEByteSeqToInt#canCall| (|Seq#Take| |bytes#0@@7| (INTERNAL_sub_boogie (|Seq#Length| |bytes#0@@7|) 1)))) (= (_module.__default.BEByteSeqToInt ($LS $ly@@100) |bytes#0@@7|) (ite (|Seq#Equal| |bytes#0@@7| (|Seq#Empty| BoxType)) 0 (INTERNAL_add_boogie (INTERNAL_mul_boogie (_module.__default.BEByteSeqToInt $ly@@100 (|Seq#Take| |bytes#0@@7| (INTERNAL_sub_boogie (|Seq#Length| |bytes#0@@7|) 1))) 256) (U_2_int ($Unbox intType (|Seq#Index| |bytes#0@@7| (INTERNAL_sub_boogie (|Seq#Length| |bytes#0@@7|) 1))))))))) :qid |wordsand.9:10| :skolemid |2310| :pattern ( (_module.__default.BEByteSeqToInt ($LS $ly@@100) |bytes#0@@7|)) ))))
(assert  (=> true (forall (($ly@@101 T@U) (|bytes#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@101) LayerTypeType) (= (type |bytes#0@@8|) (SeqType BoxType))) (or (|_module.__default.BEByteSeqToInt#canCall| (Lit |bytes#0@@8|)) ($Is |bytes#0@@8| (TSeq Tclass._module.byte)))) (and (=> (not (|Seq#Equal| |bytes#0@@8| (|Seq#Empty| BoxType))) (|_module.__default.BEByteSeqToInt#canCall| (|Seq#Take| (Lit |bytes#0@@8|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |bytes#0@@8|)) 1)))) (= (_module.__default.BEByteSeqToInt ($LS $ly@@101) (Lit |bytes#0@@8|)) (ite (|Seq#Equal| |bytes#0@@8| (|Seq#Empty| BoxType)) 0 (INTERNAL_add_boogie (INTERNAL_mul_boogie (_module.__default.BEByteSeqToInt ($LS $ly@@101) (|Seq#Take| (Lit |bytes#0@@8|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |bytes#0@@8|)) 1))) 256) (U_2_int ($Unbox intType (|Seq#Index| (Lit |bytes#0@@8|) (INTERNAL_sub_boogie (|Seq#Length| (Lit |bytes#0@@8|)) 1))))))))) :qid |wordsand.9:10| :weight 3 :skolemid |2311| :pattern ( (_module.__default.BEByteSeqToInt ($LS $ly@@101) (Lit |bytes#0@@8|))) ))))
(assert (forall ((arg0@@247 T@U) (arg1@@138 Int) (arg2@@95 Int) ) (! (= (type (_module.__default.BEUintToSeqByte arg0@@247 arg1@@138 arg2@@95)) (SeqType BoxType)) :qid |funType:_module.__default.BEUintToSeqByte| :pattern ( (_module.__default.BEUintToSeqByte arg0@@247 arg1@@138 arg2@@95)) )))
(assert (forall (($ly@@102 T@U) (|v#0@@3| Int) (|width#0| Int) ) (!  (=> (= (type $ly@@102) LayerTypeType) (= (_module.__default.BEUintToSeqByte ($LS $ly@@102) |v#0@@3| |width#0|) (_module.__default.BEUintToSeqByte $ly@@102 |v#0@@3| |width#0|))) :qid |wordsand.17:10| :skolemid |2312| :pattern ( (_module.__default.BEUintToSeqByte ($LS $ly@@102) |v#0@@3| |width#0|)) )))
(assert (forall (($ly@@103 T@U) (|v#0@@4| Int) (|width#0@@0| Int) ) (!  (=> (= (type $ly@@103) LayerTypeType) (= (_module.__default.BEUintToSeqByte $ly@@103 |v#0@@4| |width#0@@0|) (_module.__default.BEUintToSeqByte $LZ |v#0@@4| |width#0@@0|))) :qid |wordsand.17:10| :skolemid |2313| :pattern ( (_module.__default.BEUintToSeqByte (AsFuelBottom $ly@@103) |v#0@@4| |width#0@@0|)) )))
(assert  (=> true (forall (($ly@@104 T@U) (|v#0@@5| Int) (|width#0@@1| Int) ) (!  (=> (and (= (type $ly@@104) LayerTypeType) true) (and (=> (and (INTERNAL_ge_boogie |width#0@@1| 0) (INTERNAL_ge_boogie |v#0@@5| 0)) (= (|Seq#Length| (_module.__default.BEUintToSeqByte $ly@@104 |v#0@@5| |width#0@@1|)) |width#0@@1|)) ($Is (_module.__default.BEUintToSeqByte $ly@@104 |v#0@@5| |width#0@@1|) (TSeq Tclass._module.byte)))) :qid |wordsand.17:10| :skolemid |2314| :pattern ( (_module.__default.BEUintToSeqByte $ly@@104 |v#0@@5| |width#0@@1|)) ))))
(assert (forall (($ly@@105 T@U) (|v#0@@6| Int) (|width#0@@2| Int) ) (!  (=> (= (type $ly@@105) LayerTypeType) (and (=> (|_module.__default.BEUintToSeqByte#requires| $ly@@105 |v#0@@6| |width#0@@2|) true) (=> true (|_module.__default.BEUintToSeqByte#requires| $ly@@105 |v#0@@6| |width#0@@2|)))) :qid |wordsand.17:10| :skolemid |2315| :pattern ( (|_module.__default.BEUintToSeqByte#requires| $ly@@105 |v#0@@6| |width#0@@2|)) )))
(assert  (=> true (forall (($ly@@106 T@U) (|v#0@@7| Int) (|width#0@@3| Int) ) (!  (=> (and (= (type $ly@@106) LayerTypeType) true) (and (=> (and (INTERNAL_gt_boogie |width#0@@3| 0) (INTERNAL_ge_boogie |v#0@@7| 0)) (|_module.__default.BEUintToSeqByte#canCall| (INTERNAL_div_boogie |v#0@@7| 256) (INTERNAL_sub_boogie |width#0@@3| 1))) (= (_module.__default.BEUintToSeqByte ($LS $ly@@106) |v#0@@7| |width#0@@3|) (ite  (and (INTERNAL_gt_boogie |width#0@@3| 0) (INTERNAL_ge_boogie |v#0@@7| 0)) (|Seq#Append| (_module.__default.BEUintToSeqByte $ly@@106 (INTERNAL_div_boogie |v#0@@7| 256) (INTERNAL_sub_boogie |width#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (INTERNAL_mod_boogie |v#0@@7| 256))))) (|Seq#Empty| BoxType))))) :qid |wordsand.17:10| :skolemid |2316| :pattern ( (_module.__default.BEUintToSeqByte ($LS $ly@@106) |v#0@@7| |width#0@@3|)) ))))
(assert  (=> true (forall (($ly@@107 T@U) (|v#0@@8| Int) (|width#0@@4| Int) ) (!  (=> (and (= (type $ly@@107) LayerTypeType) true) (and (=> (and (INTERNAL_gt_boogie |width#0@@4| 0) (INTERNAL_ge_boogie |v#0@@8| 0)) (|_module.__default.BEUintToSeqByte#canCall| (LitInt (INTERNAL_div_boogie |v#0@@8| 256)) (LitInt (INTERNAL_sub_boogie |width#0@@4| 1)))) (= (_module.__default.BEUintToSeqByte ($LS $ly@@107) (LitInt |v#0@@8|) (LitInt |width#0@@4|)) (ite  (and (INTERNAL_gt_boogie |width#0@@4| 0) (INTERNAL_ge_boogie |v#0@@8| 0)) (|Seq#Append| (_module.__default.BEUintToSeqByte ($LS $ly@@107) (LitInt (INTERNAL_div_boogie |v#0@@8| 256)) (LitInt (INTERNAL_sub_boogie |width#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (INTERNAL_mod_boogie |v#0@@8| 256)))))) (|Seq#Empty| BoxType))))) :qid |wordsand.17:10| :weight 3 :skolemid |2317| :pattern ( (_module.__default.BEUintToSeqByte ($LS $ly@@107) (LitInt |v#0@@8|) (LitInt |width#0@@4|))) ))))
(assert (forall (($ly@@108 T@U) (|b0#0@@5| Int) (|b1#0@@5| Int) (|b2#0@@5| Int) (|b3#0@@5| Int) ) (!  (=> (= (type $ly@@108) LayerTypeType) (= (_module.__default.BytesToWord ($LS $ly@@108) |b0#0@@5| |b1#0@@5| |b2#0@@5| |b3#0@@5|) (_module.__default.BytesToWord $ly@@108 |b0#0@@5| |b1#0@@5| |b2#0@@5| |b3#0@@5|))) :qid |wordsand.26:20| :skolemid |2318| :pattern ( (_module.__default.BytesToWord ($LS $ly@@108) |b0#0@@5| |b1#0@@5| |b2#0@@5| |b3#0@@5|)) )))
(assert (forall (($ly@@109 T@U) (|b0#0@@6| Int) (|b1#0@@6| Int) (|b2#0@@6| Int) (|b3#0@@6| Int) ) (!  (=> (= (type $ly@@109) LayerTypeType) (= (_module.__default.BytesToWord $ly@@109 |b0#0@@6| |b1#0@@6| |b2#0@@6| |b3#0@@6|) (_module.__default.BytesToWord $LZ |b0#0@@6| |b1#0@@6| |b2#0@@6| |b3#0@@6|))) :qid |wordsand.26:20| :skolemid |2319| :pattern ( (_module.__default.BytesToWord (AsFuelBottom $ly@@109) |b0#0@@6| |b1#0@@6| |b2#0@@6| |b3#0@@6|)) )))
(assert  (=> true (forall (($ly@@110 T@U) (|b0#0@@7| Int) (|b1#0@@7| Int) (|b2#0@@7| Int) (|b3#0@@7| Int) ) (!  (=> (and (= (type $ly@@110) LayerTypeType) (or (|_module.__default.BytesToWord#canCall| |b0#0@@7| |b1#0@@7| |b2#0@@7| |b3#0@@7|) (and (and (and (and (INTERNAL_le_boogie 0 |b0#0@@7|) (INTERNAL_lt_boogie |b0#0@@7| 256)) (and (INTERNAL_le_boogie 0 |b1#0@@7|) (INTERNAL_lt_boogie |b1#0@@7| 256))) (and (INTERNAL_le_boogie 0 |b2#0@@7|) (INTERNAL_lt_boogie |b2#0@@7| 256))) (and (INTERNAL_le_boogie 0 |b3#0@@7|) (INTERNAL_lt_boogie |b3#0@@7| 256))))) (_module.__default.isUInt32 (_module.__default.BytesToWord $ly@@110 |b0#0@@7| |b1#0@@7| |b2#0@@7| |b3#0@@7|))) :qid |wordsand.26:20| :skolemid |2320| :pattern ( (_module.__default.BytesToWord $ly@@110 |b0#0@@7| |b1#0@@7| |b2#0@@7| |b3#0@@7|)) ))))
(assert (forall (($ly@@111 T@U) (|b0#0@@8| Int) (|b1#0@@8| Int) (|b2#0@@8| Int) (|b3#0@@8| Int) ) (!  (=> (= (type $ly@@111) LayerTypeType) (=> (and (and (and (and (INTERNAL_le_boogie 0 |b0#0@@8|) (INTERNAL_lt_boogie |b0#0@@8| 256)) (and (INTERNAL_le_boogie 0 |b1#0@@8|) (INTERNAL_lt_boogie |b1#0@@8| 256))) (and (INTERNAL_le_boogie 0 |b2#0@@8|) (INTERNAL_lt_boogie |b2#0@@8| 256))) (and (INTERNAL_le_boogie 0 |b3#0@@8|) (INTERNAL_lt_boogie |b3#0@@8| 256))) (and (=> (|_module.__default.BytesToWord#requires| $ly@@111 |b0#0@@8| |b1#0@@8| |b2#0@@8| |b3#0@@8|) true) (=> true (|_module.__default.BytesToWord#requires| $ly@@111 |b0#0@@8| |b1#0@@8| |b2#0@@8| |b3#0@@8|))))) :qid |wordsand.26:20| :skolemid |2321| :pattern ( (|_module.__default.BytesToWord#requires| $ly@@111 |b0#0@@8| |b1#0@@8| |b2#0@@8| |b3#0@@8|)) )))
(assert  (=> true (forall (($ly@@112 T@U) (|b0#0@@9| Int) (|b1#0@@9| Int) (|b2#0@@9| Int) (|b3#0@@9| Int) ) (!  (=> (and (= (type $ly@@112) LayerTypeType) (or (|_module.__default.BytesToWord#canCall| |b0#0@@9| |b1#0@@9| |b2#0@@9| |b3#0@@9|) (and (and (and (and (INTERNAL_le_boogie 0 |b0#0@@9|) (INTERNAL_lt_boogie |b0#0@@9| 256)) (and (INTERNAL_le_boogie 0 |b1#0@@9|) (INTERNAL_lt_boogie |b1#0@@9| 256))) (and (INTERNAL_le_boogie 0 |b2#0@@9|) (INTERNAL_lt_boogie |b2#0@@9| 256))) (and (INTERNAL_le_boogie 0 |b3#0@@9|) (INTERNAL_lt_boogie |b3#0@@9| 256))))) (and (|_module.__default.BEByteSeqToInt#canCall| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |b0#0@@9|))) ($Box (int_2_U |b1#0@@9|))) ($Box (int_2_U |b2#0@@9|))) ($Box (int_2_U |b3#0@@9|)))) (= (_module.__default.BytesToWord ($LS $ly@@112) |b0#0@@9| |b1#0@@9| |b2#0@@9| |b3#0@@9|) (_module.__default.BEByteSeqToInt StartFuel__module._default.BEByteSeqToInt (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |b0#0@@9|))) ($Box (int_2_U |b1#0@@9|))) ($Box (int_2_U |b2#0@@9|))) ($Box (int_2_U |b3#0@@9|))))))) :qid |wordsand.26:20| :skolemid |2322| :pattern ( (_module.__default.BytesToWord ($LS $ly@@112) |b0#0@@9| |b1#0@@9| |b2#0@@9| |b3#0@@9|)) ))))
(assert  (=> true (forall (($ly@@113 T@U) (|b0#0@@10| Int) (|b1#0@@10| Int) (|b2#0@@10| Int) (|b3#0@@10| Int) ) (!  (=> (and (= (type $ly@@113) LayerTypeType) (or (|_module.__default.BytesToWord#canCall| (LitInt |b0#0@@10|) (LitInt |b1#0@@10|) (LitInt |b2#0@@10|) (LitInt |b3#0@@10|)) (and (and (and (and (INTERNAL_le_boogie 0 |b0#0@@10|) (INTERNAL_lt_boogie |b0#0@@10| 256)) (and (INTERNAL_le_boogie 0 |b1#0@@10|) (INTERNAL_lt_boogie |b1#0@@10| 256))) (and (INTERNAL_le_boogie 0 |b2#0@@10|) (INTERNAL_lt_boogie |b2#0@@10| 256))) (and (INTERNAL_le_boogie 0 |b3#0@@10|) (INTERNAL_lt_boogie |b3#0@@10| 256))))) (and (|_module.__default.BEByteSeqToInt#canCall| (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt |b0#0@@10|)))) ($Box (int_2_U (LitInt |b1#0@@10|)))) ($Box (int_2_U (LitInt |b2#0@@10|)))) ($Box (int_2_U (LitInt |b3#0@@10|)))))) (= (_module.__default.BytesToWord ($LS $ly@@113) (LitInt |b0#0@@10|) (LitInt |b1#0@@10|) (LitInt |b2#0@@10|) (LitInt |b3#0@@10|)) (LitInt (_module.__default.BEByteSeqToInt StartFuel__module._default.BEByteSeqToInt (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt |b0#0@@10|)))) ($Box (int_2_U (LitInt |b1#0@@10|)))) ($Box (int_2_U (LitInt |b2#0@@10|)))) ($Box (int_2_U (LitInt |b3#0@@10|)))))))))) :qid |wordsand.26:20| :weight 3 :skolemid |2323| :pattern ( (_module.__default.BytesToWord ($LS $ly@@113) (LitInt |b0#0@@10|) (LitInt |b1#0@@10|) (LitInt |b2#0@@10|) (LitInt |b3#0@@10|))) ))))
(assert (forall ((arg0@@248 T@U) (arg1@@139 Int) ) (! (= (type (_module.__default.WordToBytes arg0@@248 arg1@@139)) (SeqType BoxType)) :qid |funType:_module.__default.WordToBytes| :pattern ( (_module.__default.WordToBytes arg0@@248 arg1@@139)) )))
(assert (forall (($ly@@114 T@U) (|w#0| Int) ) (!  (=> (= (type $ly@@114) LayerTypeType) (= (_module.__default.WordToBytes ($LS $ly@@114) |w#0|) (_module.__default.WordToBytes $ly@@114 |w#0|))) :qid |wordsand.32:19| :skolemid |2324| :pattern ( (_module.__default.WordToBytes ($LS $ly@@114) |w#0|)) )))
(assert (forall (($ly@@115 T@U) (|w#0@@0| Int) ) (!  (=> (= (type $ly@@115) LayerTypeType) (= (_module.__default.WordToBytes $ly@@115 |w#0@@0|) (_module.__default.WordToBytes $LZ |w#0@@0|))) :qid |wordsand.32:19| :skolemid |2325| :pattern ( (_module.__default.WordToBytes (AsFuelBottom $ly@@115) |w#0@@0|)) )))
(assert  (=> true (forall (($ly@@116 T@U) (|w#0@@1| Int) ) (!  (=> (and (= (type $ly@@116) LayerTypeType) (or (|_module.__default.WordToBytes#canCall| |w#0@@1|) (_module.__default.isUInt32 |w#0@@1|))) (and (= (|Seq#Length| (_module.__default.WordToBytes $ly@@116 |w#0@@1|)) (LitInt 4)) ($Is (_module.__default.WordToBytes $ly@@116 |w#0@@1|) (TSeq Tclass._module.byte)))) :qid |wordsand.32:19| :skolemid |2326| :pattern ( (_module.__default.WordToBytes $ly@@116 |w#0@@1|)) ))))
(assert (forall (($ly@@117 T@U) (|w#0@@2| Int) ) (!  (=> (and (= (type $ly@@117) LayerTypeType) (_module.__default.isUInt32 |w#0@@2|)) (and (=> (|_module.__default.WordToBytes#requires| $ly@@117 |w#0@@2|) true) (=> true (|_module.__default.WordToBytes#requires| $ly@@117 |w#0@@2|)))) :qid |wordsand.32:19| :skolemid |2327| :pattern ( (|_module.__default.WordToBytes#requires| $ly@@117 |w#0@@2|)) )))
(assert (= (type StartFuel__module._default.BEUintToSeqByte) LayerTypeType))
(assert  (=> true (forall (($ly@@118 T@U) (|w#0@@3| Int) ) (!  (=> (and (= (type $ly@@118) LayerTypeType) (or (|_module.__default.WordToBytes#canCall| |w#0@@3|) (_module.__default.isUInt32 |w#0@@3|))) (and (|_module.__default.BEUintToSeqByte#canCall| |w#0@@3| (LitInt 4)) (= (_module.__default.WordToBytes ($LS $ly@@118) |w#0@@3|) (_module.__default.BEUintToSeqByte StartFuel__module._default.BEUintToSeqByte |w#0@@3| (LitInt 4))))) :qid |wordsand.32:19| :skolemid |2328| :pattern ( (_module.__default.WordToBytes ($LS $ly@@118) |w#0@@3|)) ))))
(assert  (=> true (forall (($ly@@119 T@U) (|w#0@@4| Int) ) (!  (=> (and (= (type $ly@@119) LayerTypeType) (or (|_module.__default.WordToBytes#canCall| (LitInt |w#0@@4|)) (_module.__default.isUInt32 |w#0@@4|))) (and (|_module.__default.BEUintToSeqByte#canCall| (LitInt |w#0@@4|) (LitInt 4)) (= (_module.__default.WordToBytes ($LS $ly@@119) (LitInt |w#0@@4|)) (Lit (_module.__default.BEUintToSeqByte StartFuel__module._default.BEUintToSeqByte (LitInt |w#0@@4|) (LitInt 4)))))) :qid |wordsand.32:19| :weight 3 :skolemid |2329| :pattern ( (_module.__default.WordToBytes ($LS $ly@@119) (LitInt |w#0@@4|))) ))))
(assert (forall (($ly@@120 T@U) (|u#0| Int) ) (!  (=> (= (type $ly@@120) LayerTypeType) (= (_module.__default.Uint64ToBytes ($LS $ly@@120) |u#0|) (_module.__default.Uint64ToBytes $ly@@120 |u#0|))) :qid |wordsand.42:20| :skolemid |2330| :pattern ( (_module.__default.Uint64ToBytes ($LS $ly@@120) |u#0|)) )))
(assert (forall (($ly@@121 T@U) (|u#0@@0| Int) ) (!  (=> (= (type $ly@@121) LayerTypeType) (= (_module.__default.Uint64ToBytes $ly@@121 |u#0@@0|) (_module.__default.Uint64ToBytes $LZ |u#0@@0|))) :qid |wordsand.42:20| :skolemid |2331| :pattern ( (_module.__default.Uint64ToBytes (AsFuelBottom $ly@@121) |u#0@@0|)) )))
(assert  (=> true (forall (($ly@@122 T@U) (|u#0@@1| Int) ) (!  (=> (and (= (type $ly@@122) LayerTypeType) (or (|_module.__default.Uint64ToBytes#canCall| |u#0@@1|) (and (INTERNAL_le_boogie 0 |u#0@@1|) (INTERNAL_lt_boogie |u#0@@1| 18446744073709551616)))) (and (= (|Seq#Length| (_module.__default.Uint64ToBytes $ly@@122 |u#0@@1|)) (LitInt 8)) ($Is (_module.__default.Uint64ToBytes $ly@@122 |u#0@@1|) (TSeq Tclass._module.byte)))) :qid |wordsand.42:20| :skolemid |2332| :pattern ( (_module.__default.Uint64ToBytes $ly@@122 |u#0@@1|)) ))))
(assert (forall (($ly@@123 T@U) (|u#0@@2| Int) ) (!  (=> (= (type $ly@@123) LayerTypeType) (=> (and (INTERNAL_le_boogie 0 |u#0@@2|) (INTERNAL_lt_boogie |u#0@@2| 18446744073709551616)) (and (=> (|_module.__default.Uint64ToBytes#requires| $ly@@123 |u#0@@2|) true) (=> true (|_module.__default.Uint64ToBytes#requires| $ly@@123 |u#0@@2|))))) :qid |wordsand.42:20| :skolemid |2333| :pattern ( (|_module.__default.Uint64ToBytes#requires| $ly@@123 |u#0@@2|)) )))
(assert  (=> true (forall (($ly@@124 T@U) (|u#0@@3| Int) ) (!  (=> (and (= (type $ly@@124) LayerTypeType) (or (|_module.__default.Uint64ToBytes#canCall| |u#0@@3|) (and (INTERNAL_le_boogie 0 |u#0@@3|) (INTERNAL_lt_boogie |u#0@@3| 18446744073709551616)))) (and (|_module.__default.BEUintToSeqByte#canCall| |u#0@@3| (LitInt 8)) (= (_module.__default.Uint64ToBytes ($LS $ly@@124) |u#0@@3|) (_module.__default.BEUintToSeqByte StartFuel__module._default.BEUintToSeqByte |u#0@@3| (LitInt 8))))) :qid |wordsand.42:20| :skolemid |2334| :pattern ( (_module.__default.Uint64ToBytes ($LS $ly@@124) |u#0@@3|)) ))))
(assert  (=> true (forall (($ly@@125 T@U) (|u#0@@4| Int) ) (!  (=> (and (= (type $ly@@125) LayerTypeType) (or (|_module.__default.Uint64ToBytes#canCall| (LitInt |u#0@@4|)) (and (INTERNAL_le_boogie 0 |u#0@@4|) (INTERNAL_lt_boogie |u#0@@4| 18446744073709551616)))) (and (|_module.__default.BEUintToSeqByte#canCall| (LitInt |u#0@@4|) (LitInt 8)) (= (_module.__default.Uint64ToBytes ($LS $ly@@125) (LitInt |u#0@@4|)) (Lit (_module.__default.BEUintToSeqByte StartFuel__module._default.BEUintToSeqByte (LitInt |u#0@@4|) (LitInt 8)))))) :qid |wordsand.42:20| :weight 3 :skolemid |2335| :pattern ( (_module.__default.Uint64ToBytes ($LS $ly@@125) (LitInt |u#0@@4|))) ))))
(assert (forall (($ly@@126 T@U) (|ws#0@@3| T@U) ) (!  (=> (and (= (type $ly@@126) LayerTypeType) (= (type |ws#0@@3|) (SeqType BoxType))) (= (_module.__default.WordSeqToBytes ($LS $ly@@126) |ws#0@@3|) (_module.__default.WordSeqToBytes $ly@@126 |ws#0@@3|))) :qid |wordsand.56:10| :skolemid |2336| :pattern ( (_module.__default.WordSeqToBytes ($LS $ly@@126) |ws#0@@3|)) )))
(assert (forall (($ly@@127 T@U) (|ws#0@@4| T@U) ) (!  (=> (and (= (type $ly@@127) LayerTypeType) (= (type |ws#0@@4|) (SeqType BoxType))) (= (_module.__default.WordSeqToBytes $ly@@127 |ws#0@@4|) (_module.__default.WordSeqToBytes $LZ |ws#0@@4|))) :qid |wordsand.56:10| :skolemid |2337| :pattern ( (_module.__default.WordSeqToBytes (AsFuelBottom $ly@@127) |ws#0@@4|)) )))
(assert  (=> true (forall (($ly@@128 T@U) (|ws#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@128) LayerTypeType) (= (type |ws#0@@5|) (SeqType BoxType))) (or (|_module.__default.WordSeqToBytes#canCall| |ws#0@@5|) ($Is |ws#0@@5| (TSeq Tclass._module.word)))) (and (= (|Seq#Length| (_module.__default.WordSeqToBytes $ly@@128 |ws#0@@5|)) (INTERNAL_mul_boogie (|Seq#Length| |ws#0@@5|) 4)) ($Is (_module.__default.WordSeqToBytes $ly@@128 |ws#0@@5|) (TSeq Tclass._module.byte)))) :qid |wordsand.56:10| :skolemid |2338| :pattern ( (_module.__default.WordSeqToBytes $ly@@128 |ws#0@@5|)) ))))
(assert (forall (($ly@@129 T@U) (|ws#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@129) LayerTypeType) (= (type |ws#0@@6|) (SeqType BoxType))) ($Is |ws#0@@6| (TSeq Tclass._module.word))) (and (=> (|_module.__default.WordSeqToBytes#requires| $ly@@129 |ws#0@@6|) true) (=> true (|_module.__default.WordSeqToBytes#requires| $ly@@129 |ws#0@@6|)))) :qid |wordsand.56:10| :skolemid |2339| :pattern ( (|_module.__default.WordSeqToBytes#requires| $ly@@129 |ws#0@@6|)) )))
(assert (= (type StartFuel__module._default.WordToBytes) LayerTypeType))
(assert  (=> true (forall (($ly@@130 T@U) (|ws#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@130) LayerTypeType) (= (type |ws#0@@7|) (SeqType BoxType))) (or (|_module.__default.WordSeqToBytes#canCall| |ws#0@@7|) ($Is |ws#0@@7| (TSeq Tclass._module.word)))) (and (=> (not (= (|Seq#Length| |ws#0@@7|) (LitInt 0))) (and (|_module.__default.WordToBytes#canCall| (U_2_int ($Unbox intType (|Seq#Index| |ws#0@@7| (LitInt 0))))) (|_module.__default.WordSeqToBytes#canCall| (|Seq#Drop| |ws#0@@7| (LitInt 1))))) (= (_module.__default.WordSeqToBytes ($LS $ly@@130) |ws#0@@7|) (ite (= (|Seq#Length| |ws#0@@7|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (U_2_int ($Unbox intType (|Seq#Index| |ws#0@@7| (LitInt 0))))) (_module.__default.WordSeqToBytes $ly@@130 (|Seq#Drop| |ws#0@@7| (LitInt 1)))))))) :qid |wordsand.56:10| :skolemid |2340| :pattern ( (_module.__default.WordSeqToBytes ($LS $ly@@130) |ws#0@@7|)) ))))
(assert  (=> true (forall (($ly@@131 T@U) (|ws#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@131) LayerTypeType) (= (type |ws#0@@8|) (SeqType BoxType))) (or (|_module.__default.WordSeqToBytes#canCall| (Lit |ws#0@@8|)) ($Is |ws#0@@8| (TSeq Tclass._module.word)))) (and (=> (not (= (|Seq#Length| (Lit |ws#0@@8|)) (LitInt 0))) (and (|_module.__default.WordToBytes#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |ws#0@@8|) (LitInt 0))))) (|_module.__default.WordSeqToBytes#canCall| (Lit (|Seq#Drop| (Lit |ws#0@@8|) (LitInt 1)))))) (= (_module.__default.WordSeqToBytes ($LS $ly@@131) (Lit |ws#0@@8|)) (ite (= (|Seq#Length| (Lit |ws#0@@8|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (U_2_int ($Unbox intType (|Seq#Index| (Lit |ws#0@@8|) (LitInt 0))))) (_module.__default.WordSeqToBytes ($LS $ly@@131) (Lit (|Seq#Drop| (Lit |ws#0@@8|) (LitInt 1))))))))) :qid |wordsand.56:10| :weight 3 :skolemid |2341| :pattern ( (_module.__default.WordSeqToBytes ($LS $ly@@131) (Lit |ws#0@@8|))) ))))
(assert (forall (($ly@@132 T@U) (|b#0@@5| Int) (|count#0| Int) ) (!  (=> (= (type $ly@@132) LayerTypeType) (= (_module.__default.RepeatByte ($LS $ly@@132) |b#0@@5| |count#0|) (_module.__default.RepeatByte $ly@@132 |b#0@@5| |count#0|))) :qid |wordsand.63:10| :skolemid |2342| :pattern ( (_module.__default.RepeatByte ($LS $ly@@132) |b#0@@5| |count#0|)) )))
(assert (forall (($ly@@133 T@U) (|b#0@@6| Int) (|count#0@@0| Int) ) (!  (=> (= (type $ly@@133) LayerTypeType) (= (_module.__default.RepeatByte $ly@@133 |b#0@@6| |count#0@@0|) (_module.__default.RepeatByte $LZ |b#0@@6| |count#0@@0|))) :qid |wordsand.63:10| :skolemid |2343| :pattern ( (_module.__default.RepeatByte (AsFuelBottom $ly@@133) |b#0@@6| |count#0@@0|)) )))
(assert  (=> true (forall (($ly@@134 T@U) (|b#0@@7| Int) (|count#0@@1| Int) ) (!  (=> (and (= (type $ly@@134) LayerTypeType) (or (|_module.__default.RepeatByte#canCall| |b#0@@7| |count#0@@1|) (and (and (INTERNAL_le_boogie 0 |b#0@@7|) (INTERNAL_lt_boogie |b#0@@7| 256)) (INTERNAL_ge_boogie |count#0@@1| 0)))) (and (and (= (|Seq#Length| (_module.__default.RepeatByte $ly@@134 |b#0@@7| |count#0@@1|)) |count#0@@1|) (forall ((|x#0@@51| T@U) (|tr$ly#0@@3| T@U) ) (!  (=> (and (and (and (= (type |x#0@@51|) intType) (= (type |tr$ly#0@@3|) LayerTypeType)) true) (|Seq#Contains| (_module.__default.RepeatByte $ly@@134 |b#0@@7| |count#0@@1|) ($Box |x#0@@51|))) (= (U_2_int |x#0@@51|) |b#0@@7|)) :qid |wordsand.66:21| :skolemid |2344| :pattern ( (|Seq#Contains| (_module.__default.RepeatByte |tr$ly#0@@3| |b#0@@7| |count#0@@1|) ($Box |x#0@@51|))) ))) ($Is (_module.__default.RepeatByte $ly@@134 |b#0@@7| |count#0@@1|) (TSeq Tclass._module.byte)))) :qid |wordsand.63:10| :skolemid |2345| :pattern ( (_module.__default.RepeatByte $ly@@134 |b#0@@7| |count#0@@1|)) ))))
(assert (forall (($ly@@135 T@U) (|b#0@@8| Int) (|count#0@@2| Int) ) (!  (=> (= (type $ly@@135) LayerTypeType) (=> (and (INTERNAL_le_boogie 0 |b#0@@8|) (INTERNAL_lt_boogie |b#0@@8| 256)) (and (=> (|_module.__default.RepeatByte#requires| $ly@@135 |b#0@@8| |count#0@@2|) (INTERNAL_ge_boogie |count#0@@2| 0)) (=> (INTERNAL_ge_boogie |count#0@@2| 0) (|_module.__default.RepeatByte#requires| $ly@@135 |b#0@@8| |count#0@@2|))))) :qid |wordsand.63:10| :skolemid |2346| :pattern ( (|_module.__default.RepeatByte#requires| $ly@@135 |b#0@@8| |count#0@@2|)) )))
(assert  (=> true (forall (($ly@@136 T@U) (|b#0@@9| Int) (|count#0@@3| Int) ) (!  (=> (and (= (type $ly@@136) LayerTypeType) (or (|_module.__default.RepeatByte#canCall| |b#0@@9| |count#0@@3|) (and (and (INTERNAL_le_boogie 0 |b#0@@9|) (INTERNAL_lt_boogie |b#0@@9| 256)) (INTERNAL_ge_boogie |count#0@@3| 0)))) (and (=> (not (= |count#0@@3| (LitInt 0))) (|_module.__default.RepeatByte#canCall| |b#0@@9| (INTERNAL_sub_boogie |count#0@@3| 1))) (= (_module.__default.RepeatByte ($LS $ly@@136) |b#0@@9| |count#0@@3|) (ite (= |count#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (_module.__default.RepeatByte $ly@@136 |b#0@@9| (INTERNAL_sub_boogie |count#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |b#0@@9|)))))))) :qid |wordsand.63:10| :skolemid |2347| :pattern ( (_module.__default.RepeatByte ($LS $ly@@136) |b#0@@9| |count#0@@3|)) ))))
(assert  (=> true (forall (($ly@@137 T@U) (|b#0@@10| Int) (|count#0@@4| Int) ) (!  (=> (and (= (type $ly@@137) LayerTypeType) (or (|_module.__default.RepeatByte#canCall| (LitInt |b#0@@10|) (LitInt |count#0@@4|)) (and (and (INTERNAL_le_boogie 0 |b#0@@10|) (INTERNAL_lt_boogie |b#0@@10| 256)) (INTERNAL_ge_boogie |count#0@@4| 0)))) (and (=> (not (= (LitInt |count#0@@4|) (LitInt 0))) (|_module.__default.RepeatByte#canCall| (LitInt |b#0@@10|) (LitInt (INTERNAL_sub_boogie |count#0@@4| 1)))) (= (_module.__default.RepeatByte ($LS $ly@@137) (LitInt |b#0@@10|) (LitInt |count#0@@4|)) (ite (= (LitInt |count#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (_module.__default.RepeatByte ($LS $ly@@137) (LitInt |b#0@@10|) (LitInt (INTERNAL_sub_boogie |count#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt |b#0@@10|))))))))) :qid |wordsand.63:10| :weight 3 :skolemid |2348| :pattern ( (_module.__default.RepeatByte ($LS $ly@@137) (LitInt |b#0@@10|) (LitInt |count#0@@4|))) ))))
(assert (forall ((_module._default.RepeatValue$T T@U) ($ly@@138 T@U) (|n#0| T@U) (|count#0@@5| Int) ) (!  (=> (and (and (= (type _module._default.RepeatValue$T) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |n#0|) BoxType)) (= (_module.__default.RepeatValue _module._default.RepeatValue$T ($LS $ly@@138) |n#0| |count#0@@5|) (_module.__default.RepeatValue _module._default.RepeatValue$T $ly@@138 |n#0| |count#0@@5|))) :qid |unknown.0:0| :skolemid |2349| :pattern ( (_module.__default.RepeatValue _module._default.RepeatValue$T ($LS $ly@@138) |n#0| |count#0@@5|)) )))
(assert (forall ((_module._default.RepeatValue$T@@0 T@U) ($ly@@139 T@U) (|n#0@@0| T@U) (|count#0@@6| Int) ) (!  (=> (and (and (= (type _module._default.RepeatValue$T@@0) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |n#0@@0|) BoxType)) (= (_module.__default.RepeatValue _module._default.RepeatValue$T@@0 $ly@@139 |n#0@@0| |count#0@@6|) (_module.__default.RepeatValue _module._default.RepeatValue$T@@0 $LZ |n#0@@0| |count#0@@6|))) :qid |unknown.0:0| :skolemid |2350| :pattern ( (_module.__default.RepeatValue _module._default.RepeatValue$T@@0 (AsFuelBottom $ly@@139) |n#0@@0| |count#0@@6|)) )))
(assert  (=> true (forall ((_module._default.RepeatValue$T@@1 T@U) ($ly@@140 T@U) (|n#0@@1| T@U) (|count#0@@7| Int) ) (!  (=> (and (and (and (= (type _module._default.RepeatValue$T@@1) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |n#0@@1|) BoxType)) (or (|_module.__default.RepeatValue#canCall| _module._default.RepeatValue$T@@1 |n#0@@1| |count#0@@7|) (and ($IsBox |n#0@@1| _module._default.RepeatValue$T@@1) (INTERNAL_ge_boogie |count#0@@7| 0)))) (and (and (= (|Seq#Length| (_module.__default.RepeatValue _module._default.RepeatValue$T@@1 $ly@@140 |n#0@@1| |count#0@@7|)) |count#0@@7|) (forall ((|x#0@@52| T@U) (|tr$ly#0@@4| T@U) ) (!  (=> (and (and (and (= (type |x#0@@52|) BoxType) (= (type |tr$ly#0@@4|) LayerTypeType)) ($IsBox |x#0@@52| _module._default.RepeatValue$T@@1)) (|Seq#Contains| (_module.__default.RepeatValue _module._default.RepeatValue$T@@1 $ly@@140 |n#0@@1| |count#0@@7|) |x#0@@52|)) (= |x#0@@52| |n#0@@1|)) :qid |wordsand.74:21| :skolemid |2351| :pattern ( (|Seq#Contains| (_module.__default.RepeatValue _module._default.RepeatValue$T@@1 |tr$ly#0@@4| |n#0@@1| |count#0@@7|) |x#0@@52|)) ))) ($Is (_module.__default.RepeatValue _module._default.RepeatValue$T@@1 $ly@@140 |n#0@@1| |count#0@@7|) (TSeq _module._default.RepeatValue$T@@1)))) :qid |unknown.0:0| :skolemid |2352| :pattern ( (_module.__default.RepeatValue _module._default.RepeatValue$T@@1 $ly@@140 |n#0@@1| |count#0@@7|)) ))))
(assert (forall ((_module._default.RepeatValue$T@@2 T@U) ($ly@@141 T@U) (|n#0@@2| T@U) (|count#0@@8| Int) ) (!  (=> (and (and (and (= (type _module._default.RepeatValue$T@@2) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |n#0@@2|) BoxType)) ($IsBox |n#0@@2| _module._default.RepeatValue$T@@2)) (and (=> (|_module.__default.RepeatValue#requires| _module._default.RepeatValue$T@@2 $ly@@141 |n#0@@2| |count#0@@8|) (INTERNAL_ge_boogie |count#0@@8| 0)) (=> (INTERNAL_ge_boogie |count#0@@8| 0) (|_module.__default.RepeatValue#requires| _module._default.RepeatValue$T@@2 $ly@@141 |n#0@@2| |count#0@@8|)))) :qid |unknown.0:0| :skolemid |2353| :pattern ( (|_module.__default.RepeatValue#requires| _module._default.RepeatValue$T@@2 $ly@@141 |n#0@@2| |count#0@@8|)) )))
(assert  (=> true (forall ((_module._default.RepeatValue$T@@3 T@U) ($ly@@142 T@U) (|n#0@@3| T@U) (|count#0@@9| Int) ) (!  (=> (and (and (and (= (type _module._default.RepeatValue$T@@3) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |n#0@@3|) BoxType)) (or (|_module.__default.RepeatValue#canCall| _module._default.RepeatValue$T@@3 |n#0@@3| |count#0@@9|) (and ($IsBox |n#0@@3| _module._default.RepeatValue$T@@3) (INTERNAL_ge_boogie |count#0@@9| 0)))) (and (=> (not (= |count#0@@9| (LitInt 0))) (|_module.__default.RepeatValue#canCall| _module._default.RepeatValue$T@@3 |n#0@@3| (INTERNAL_sub_boogie |count#0@@9| 1))) (= (_module.__default.RepeatValue _module._default.RepeatValue$T@@3 ($LS $ly@@142) |n#0@@3| |count#0@@9|) (ite (= |count#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (_module.__default.RepeatValue _module._default.RepeatValue$T@@3 $ly@@142 |n#0@@3| (INTERNAL_sub_boogie |count#0@@9| 1)) (|Seq#Build| (|Seq#Empty| BoxType) |n#0@@3|)))))) :qid |unknown.0:0| :skolemid |2354| :pattern ( (_module.__default.RepeatValue _module._default.RepeatValue$T@@3 ($LS $ly@@142) |n#0@@3| |count#0@@9|)) ))))
(assert  (=> true (forall ((_module._default.RepeatValue$T@@4 T@U) ($ly@@143 T@U) (|n#0@@4| T@U) (|count#0@@10| Int) ) (!  (=> (and (and (and (= (type _module._default.RepeatValue$T@@4) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |n#0@@4|) BoxType)) (or (|_module.__default.RepeatValue#canCall| _module._default.RepeatValue$T@@4 |n#0@@4| (LitInt |count#0@@10|)) (and ($IsBox |n#0@@4| _module._default.RepeatValue$T@@4) (INTERNAL_ge_boogie |count#0@@10| 0)))) (and (=> (not (= (LitInt |count#0@@10|) (LitInt 0))) (|_module.__default.RepeatValue#canCall| _module._default.RepeatValue$T@@4 |n#0@@4| (LitInt (INTERNAL_sub_boogie |count#0@@10| 1)))) (= (_module.__default.RepeatValue _module._default.RepeatValue$T@@4 ($LS $ly@@143) |n#0@@4| (LitInt |count#0@@10|)) (ite (= (LitInt |count#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (_module.__default.RepeatValue _module._default.RepeatValue$T@@4 ($LS $ly@@143) |n#0@@4| (LitInt (INTERNAL_sub_boogie |count#0@@10| 1))) (|Seq#Build| (|Seq#Empty| BoxType) |n#0@@4|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2355| :pattern ( (_module.__default.RepeatValue _module._default.RepeatValue$T@@4 ($LS $ly@@143) |n#0@@4| (LitInt |count#0@@10|))) ))))
(assert  (=> true (forall ((_module._default.RepeatValue$T@@5 T@U) ($ly@@144 T@U) (|n#0@@5| T@U) (|count#0@@11| Int) ) (!  (=> (and (and (and (= (type _module._default.RepeatValue$T@@5) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |n#0@@5|) BoxType)) (or (|_module.__default.RepeatValue#canCall| _module._default.RepeatValue$T@@5 (Lit |n#0@@5|) (LitInt |count#0@@11|)) (and ($IsBox |n#0@@5| _module._default.RepeatValue$T@@5) (INTERNAL_ge_boogie |count#0@@11| 0)))) (and (=> (not (= (LitInt |count#0@@11|) (LitInt 0))) (|_module.__default.RepeatValue#canCall| _module._default.RepeatValue$T@@5 (Lit |n#0@@5|) (LitInt (INTERNAL_sub_boogie |count#0@@11| 1)))) (= (_module.__default.RepeatValue _module._default.RepeatValue$T@@5 ($LS $ly@@144) (Lit |n#0@@5|) (LitInt |count#0@@11|)) (ite (= (LitInt |count#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (_module.__default.RepeatValue _module._default.RepeatValue$T@@5 ($LS $ly@@144) (Lit |n#0@@5|) (LitInt (INTERNAL_sub_boogie |count#0@@11| 1))) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |n#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2356| :pattern ( (_module.__default.RepeatValue _module._default.RepeatValue$T@@5 ($LS $ly@@144) (Lit |n#0@@5|) (LitInt |count#0@@11|))) ))))
(assert (forall ((_module._default.ConcatenateSeqs$T T@U) ($ly@@145 T@U) (|ss#0| T@U) ) (!  (=> (and (and (= (type _module._default.ConcatenateSeqs$T) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |ss#0|) (SeqType BoxType))) (= (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T ($LS $ly@@145) |ss#0|) (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T $ly@@145 |ss#0|))) :qid |unknown.0:0| :skolemid |2357| :pattern ( (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T ($LS $ly@@145) |ss#0|)) )))
(assert (forall ((_module._default.ConcatenateSeqs$T@@0 T@U) ($ly@@146 T@U) (|ss#0@@0| T@U) ) (!  (=> (and (and (= (type _module._default.ConcatenateSeqs$T@@0) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |ss#0@@0|) (SeqType BoxType))) (= (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@0 $ly@@146 |ss#0@@0|) (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@0 $LZ |ss#0@@0|))) :qid |unknown.0:0| :skolemid |2358| :pattern ( (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@0 (AsFuelBottom $ly@@146) |ss#0@@0|)) )))
(assert  (=> true (forall ((_module._default.ConcatenateSeqs$T@@1 T@U) ($ly@@147 T@U) (|ss#0@@1| T@U) ) (!  (=> (and (and (and (= (type _module._default.ConcatenateSeqs$T@@1) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |ss#0@@1|) (SeqType BoxType))) (or (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@1 |ss#0@@1|) ($Is |ss#0@@1| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@1))))) ($Is (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@1 $ly@@147 |ss#0@@1|) (TSeq _module._default.ConcatenateSeqs$T@@1))) :qid |unknown.0:0| :skolemid |2359| :pattern ( (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@1 $ly@@147 |ss#0@@1|)) ))))
(assert (forall ((_module._default.ConcatenateSeqs$T@@2 T@U) ($ly@@148 T@U) (|ss#0@@2| T@U) ) (!  (=> (and (and (and (= (type _module._default.ConcatenateSeqs$T@@2) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |ss#0@@2|) (SeqType BoxType))) ($Is |ss#0@@2| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@2)))) (and (=> (|_module.__default.ConcatenateSeqs#requires| _module._default.ConcatenateSeqs$T@@2 $ly@@148 |ss#0@@2|) true) (=> true (|_module.__default.ConcatenateSeqs#requires| _module._default.ConcatenateSeqs$T@@2 $ly@@148 |ss#0@@2|)))) :qid |unknown.0:0| :skolemid |2360| :pattern ( (|_module.__default.ConcatenateSeqs#requires| _module._default.ConcatenateSeqs$T@@2 $ly@@148 |ss#0@@2|)) )))
(assert  (=> true (forall ((_module._default.ConcatenateSeqs$T@@3 T@U) ($ly@@149 T@U) (|ss#0@@3| T@U) ) (!  (=> (and (and (and (= (type _module._default.ConcatenateSeqs$T@@3) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |ss#0@@3|) (SeqType BoxType))) (or (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@3 |ss#0@@3|) ($Is |ss#0@@3| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@3))))) (and (=> (not (= (|Seq#Length| |ss#0@@3|) (LitInt 0))) (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@3 (|Seq#Drop| |ss#0@@3| (LitInt 1)))) (= (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@3 ($LS $ly@@149) |ss#0@@3|) (ite (= (|Seq#Length| |ss#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| ($Unbox (SeqType BoxType) (|Seq#Index| |ss#0@@3| (LitInt 0))) (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@3 $ly@@149 (|Seq#Drop| |ss#0@@3| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2361| :pattern ( (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@3 ($LS $ly@@149) |ss#0@@3|)) ))))
(assert  (=> true (forall ((_module._default.ConcatenateSeqs$T@@4 T@U) ($ly@@150 T@U) (|ss#0@@4| T@U) ) (!  (=> (and (and (and (= (type _module._default.ConcatenateSeqs$T@@4) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |ss#0@@4|) (SeqType BoxType))) (or (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@4 (Lit |ss#0@@4|)) ($Is |ss#0@@4| (TSeq (TSeq _module._default.ConcatenateSeqs$T@@4))))) (and (=> (not (= (|Seq#Length| (Lit |ss#0@@4|)) (LitInt 0))) (|_module.__default.ConcatenateSeqs#canCall| _module._default.ConcatenateSeqs$T@@4 (Lit (|Seq#Drop| (Lit |ss#0@@4|) (LitInt 1))))) (= (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@4 ($LS $ly@@150) (Lit |ss#0@@4|)) (ite (= (|Seq#Length| (Lit |ss#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |ss#0@@4|) (LitInt 0))) (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@4 ($LS $ly@@150) (Lit (|Seq#Drop| (Lit |ss#0@@4|) (LitInt 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2362| :pattern ( (_module.__default.ConcatenateSeqs _module._default.ConcatenateSeqs$T@@4 ($LS $ly@@150) (Lit |ss#0@@4|))) ))))
(assert  (=> true (forall ((|x#0@@53| Int) ) (!  (=> (or (|_module.__default.bswap32#canCall| |x#0@@53|) (_module.__default.isUInt32 |x#0@@53|)) (_module.__default.isUInt32 (_module.__default.bswap32 |x#0@@53|))) :qid |wordsand.84:18| :skolemid |2363| :pattern ( (_module.__default.bswap32 |x#0@@53|)) ))))
(assert (forall ((|x#0@@54| Int) ) (!  (=> (_module.__default.isUInt32 |x#0@@54|) (and (=> (|_module.__default.bswap32#requires| |x#0@@54|) true) (=> true (|_module.__default.bswap32#requires| |x#0@@54|)))) :qid |wordsand.84:18| :skolemid |2364| :pattern ( (|_module.__default.bswap32#requires| |x#0@@54|)) )))
(assert (= (type StartFuel__module._default.BytesToWord) LayerTypeType))
(assert  (=> true (forall ((|x#0@@55| Int) ) (!  (=> (or (|_module.__default.bswap32#canCall| |x#0@@55|) (_module.__default.isUInt32 |x#0@@55|)) (and (and (|_module.__default.WordToBytes#canCall| |x#0@@55|) (|_module.__default.BytesToWord#canCall| (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes |x#0@@55|) (LitInt 3)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes |x#0@@55|) (LitInt 2)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes |x#0@@55|) (LitInt 1)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes |x#0@@55|) (LitInt 0)))))) (= (_module.__default.bswap32 |x#0@@55|) (_module.__default.BytesToWord StartFuel__module._default.BytesToWord (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes |x#0@@55|) (LitInt 3)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes |x#0@@55|) (LitInt 2)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes |x#0@@55|) (LitInt 1)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes |x#0@@55|) (LitInt 0)))))))) :qid |wordsand.84:18| :skolemid |2365| :pattern ( (_module.__default.bswap32 |x#0@@55|)) ))))
(assert  (=> true (forall ((|x#0@@56| Int) ) (!  (=> (or (|_module.__default.bswap32#canCall| (LitInt |x#0@@56|)) (_module.__default.isUInt32 |x#0@@56|)) (and (and (|_module.__default.WordToBytes#canCall| (LitInt |x#0@@56|)) (|_module.__default.BytesToWord#canCall| (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (LitInt |x#0@@56|)) (LitInt 3)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (LitInt |x#0@@56|)) (LitInt 2)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (LitInt |x#0@@56|)) (LitInt 1)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (LitInt |x#0@@56|)) (LitInt 0)))))) (= (_module.__default.bswap32 (LitInt |x#0@@56|)) (_module.__default.BytesToWord StartFuel__module._default.BytesToWord (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (LitInt |x#0@@56|)) (LitInt 3)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (LitInt |x#0@@56|)) (LitInt 2)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (LitInt |x#0@@56|)) (LitInt 1)))) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.WordToBytes StartFuel__module._default.WordToBytes (LitInt |x#0@@56|)) (LitInt 0)))))))) :qid |wordsand.84:18| :weight 3 :skolemid |2366| :pattern ( (_module.__default.bswap32 (LitInt |x#0@@56|))) ))))
(assert (= (type Tclass._module.state) TyType))
(assert (= (Tag Tclass._module.state) Tagclass._module.state))
(assert (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 Tclass._module.state)) (and (= ($Box ($Unbox DatatypeTypeType bx@@90)) bx@@90) ($Is ($Unbox DatatypeTypeType bx@@90) Tclass._module.state))) :qid |unknown.0:0| :skolemid |2367| :pattern ( ($IsBox bx@@90 Tclass._module.state)) )))
(assert (= (type Tclass._module.world) TyType))
(assert (= (Tag Tclass._module.world) Tagclass._module.world))
(assert (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 Tclass._module.world)) (and (= ($Box ($Unbox DatatypeTypeType bx@@91)) bx@@91) ($Is ($Unbox DatatypeTypeType bx@@91) Tclass._module.world))) :qid |unknown.0:0| :skolemid |2368| :pattern ( ($IsBox bx@@91 Tclass._module.world)) )))
(assert (forall ((arg0@@249 T@U) ) (! (= (type (_module.__default.world__of__state arg0@@249)) DatatypeTypeType) :qid |funType:_module.__default.world__of__state| :pattern ( (_module.__default.world__of__state arg0@@249)) )))
(assert  (=> true (forall ((|s#0@@11| T@U) ) (!  (=> (and (= (type |s#0@@11|) DatatypeTypeType) (or (|_module.__default.world__of__state#canCall| |s#0@@11|) ($Is |s#0@@11| Tclass._module.state))) ($Is (_module.__default.world__of__state |s#0@@11|) Tclass._module.world)) :qid |ARMdefsd.69:25| :skolemid |2369| :pattern ( (_module.__default.world__of__state |s#0@@11|)) ))))
(assert (forall (($Heap@@50 T@U) (|s#0@@12| T@U) ) (!  (=> (and (and (= (type $Heap@@50) (MapType1Type refType)) (= (type |s#0@@12|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@50) ($Is |s#0@@12| Tclass._module.state))) (and (=> (|_module.__default.world__of__state#requires| |s#0@@12|) true) (=> true (|_module.__default.world__of__state#requires| |s#0@@12|)))) :qid |ARMdefsd.69:10| :skolemid |2370| :pattern ( (|_module.__default.world__of__state#requires| |s#0@@12|) ($IsGoodHeap $Heap@@50)) )))
(assert  (and (and (and (and (and (forall ((arg0@@250 T@U) ) (! (= (type (_module.__default.mode__of__state arg0@@250)) DatatypeTypeType) :qid |funType:_module.__default.mode__of__state| :pattern ( (_module.__default.mode__of__state arg0@@250)) )) (= (type |#_module.mode.Monitor|) DatatypeTypeType)) (forall ((arg0@@251 T@U) ) (! (= (type (_module.state.conf arg0@@251)) DatatypeTypeType) :qid |funType:_module.state.conf| :pattern ( (_module.state.conf arg0@@251)) ))) (forall ((arg0@@252 T@U) ) (! (= (type (_module.config.scr arg0@@252)) DatatypeTypeType) :qid |funType:_module.config.scr| :pattern ( (_module.config.scr arg0@@252)) ))) (= (type |#_module.world.Secure|) DatatypeTypeType)) (forall ((arg0@@253 T@U) ) (! (= (type (_module.SCR.ns arg0@@253)) DatatypeTypeType) :qid |funType:_module.SCR.ns| :pattern ( (_module.SCR.ns arg0@@253)) ))))
(assert  (=> true (forall (($Heap@@51 T@U) (|s#0@@13| T@U) ) (!  (=> (and (and (= (type $Heap@@51) (MapType1Type refType)) (= (type |s#0@@13|) DatatypeTypeType)) (or (|_module.__default.world__of__state#canCall| |s#0@@13|) (and ($IsGoodHeap $Heap@@51) ($Is |s#0@@13| Tclass._module.state)))) (and (and (|_module.__default.mode__of__state#canCall| |s#0@@13|) (=> (not (= (_module.__default.mode__of__state |s#0@@13|) (Lit |#_module.mode.Monitor|))) (and (and (_module.state.State_q |s#0@@13|) (_module.config.Config_q (_module.state.conf |s#0@@13|))) (_module.SCR.SCRT_q (_module.config.scr (_module.state.conf |s#0@@13|)))))) (= (_module.__default.world__of__state |s#0@@13|) (ite (= (_module.__default.mode__of__state |s#0@@13|) (Lit |#_module.mode.Monitor|)) |#_module.world.Secure| (_module.SCR.ns (_module.config.scr (_module.state.conf |s#0@@13|))))))) :qid |ARMdefsd.69:10| :skolemid |2371| :pattern ( (_module.__default.world__of__state |s#0@@13|) ($IsGoodHeap $Heap@@51)) ))))
(assert  (=> true (forall (($Heap@@52 T@U) (|s#0@@14| T@U) ) (!  (=> (and (and (= (type $Heap@@52) (MapType1Type refType)) (= (type |s#0@@14|) DatatypeTypeType)) (or (|_module.__default.world__of__state#canCall| (Lit |s#0@@14|)) (and ($IsGoodHeap $Heap@@52) ($Is |s#0@@14| Tclass._module.state)))) (and (and (|_module.__default.mode__of__state#canCall| (Lit |s#0@@14|)) (=> (not (= (Lit (_module.__default.mode__of__state (Lit |s#0@@14|))) (Lit |#_module.mode.Monitor|))) (and (and (_module.state.State_q (Lit |s#0@@14|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@14|))))) (_module.SCR.SCRT_q (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@14|))))))))) (= (_module.__default.world__of__state (Lit |s#0@@14|)) (ite (= (Lit (_module.__default.mode__of__state (Lit |s#0@@14|))) (Lit |#_module.mode.Monitor|)) |#_module.world.Secure| (_module.SCR.ns (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@14|)))))))))) :qid |ARMdefsd.69:10| :weight 3 :skolemid |2372| :pattern ( (_module.__default.world__of__state (Lit |s#0@@14|)) ($IsGoodHeap $Heap@@52)) ))))
(assert (= (type Tclass._module.mode) TyType))
(assert (= (Tag Tclass._module.mode) Tagclass._module.mode))
(assert (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 Tclass._module.mode)) (and (= ($Box ($Unbox DatatypeTypeType bx@@92)) bx@@92) ($Is ($Unbox DatatypeTypeType bx@@92) Tclass._module.mode))) :qid |unknown.0:0| :skolemid |2373| :pattern ( ($IsBox bx@@92 Tclass._module.mode)) )))
(assert  (=> true (forall ((|s#0@@15| T@U) ) (!  (=> (and (= (type |s#0@@15|) DatatypeTypeType) (or (|_module.__default.mode__of__state#canCall| |s#0@@15|) ($Is |s#0@@15| Tclass._module.state))) ($Is (_module.__default.mode__of__state |s#0@@15|) Tclass._module.mode)) :qid |ARMdefsd.75:24| :skolemid |2374| :pattern ( (_module.__default.mode__of__state |s#0@@15|)) ))))
(assert (forall (($Heap@@53 T@U) (|s#0@@16| T@U) ) (!  (=> (and (and (= (type $Heap@@53) (MapType1Type refType)) (= (type |s#0@@16|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@53) ($Is |s#0@@16| Tclass._module.state))) (and (=> (|_module.__default.mode__of__state#requires| |s#0@@16|) true) (=> true (|_module.__default.mode__of__state#requires| |s#0@@16|)))) :qid |ARMdefsd.75:10| :skolemid |2375| :pattern ( (|_module.__default.mode__of__state#requires| |s#0@@16|) ($IsGoodHeap $Heap@@53)) )))
(assert  (and (forall ((arg0@@254 T@U) ) (! (= (type (_module.config.cpsr arg0@@254)) DatatypeTypeType) :qid |funType:_module.config.cpsr| :pattern ( (_module.config.cpsr arg0@@254)) )) (forall ((arg0@@255 T@U) ) (! (= (type (_module.PSR.m arg0@@255)) DatatypeTypeType) :qid |funType:_module.PSR.m| :pattern ( (_module.PSR.m arg0@@255)) ))))
(assert  (=> true (forall (($Heap@@54 T@U) (|s#0@@17| T@U) ) (!  (=> (and (and (= (type $Heap@@54) (MapType1Type refType)) (= (type |s#0@@17|) DatatypeTypeType)) (or (|_module.__default.mode__of__state#canCall| |s#0@@17|) (and ($IsGoodHeap $Heap@@54) ($Is |s#0@@17| Tclass._module.state)))) (and (and (and (_module.state.State_q |s#0@@17|) (_module.config.Config_q (_module.state.conf |s#0@@17|))) (_module.PSR.PSR_q (_module.config.cpsr (_module.state.conf |s#0@@17|)))) (= (_module.__default.mode__of__state |s#0@@17|) (_module.PSR.m (_module.config.cpsr (_module.state.conf |s#0@@17|)))))) :qid |ARMdefsd.75:10| :skolemid |2376| :pattern ( (_module.__default.mode__of__state |s#0@@17|) ($IsGoodHeap $Heap@@54)) ))))
(assert  (=> true (forall (($Heap@@55 T@U) (|s#0@@18| T@U) ) (!  (=> (and (and (= (type $Heap@@55) (MapType1Type refType)) (= (type |s#0@@18|) DatatypeTypeType)) (or (|_module.__default.mode__of__state#canCall| (Lit |s#0@@18|)) (and ($IsGoodHeap $Heap@@55) ($Is |s#0@@18| Tclass._module.state)))) (and (and (and (_module.state.State_q (Lit |s#0@@18|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@18|))))) (_module.PSR.PSR_q (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@18|))))))) (= (_module.__default.mode__of__state (Lit |s#0@@18|)) (Lit (_module.PSR.m (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@18|)))))))))) :qid |ARMdefsd.75:10| :weight 3 :skolemid |2377| :pattern ( (_module.__default.mode__of__state (Lit |s#0@@18|)) ($IsGoodHeap $Heap@@55)) ))))
(assert (= (type Tclass._module.priv) TyType))
(assert (= (Tag Tclass._module.priv) Tagclass._module.priv))
(assert (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 Tclass._module.priv)) (and (= ($Box ($Unbox DatatypeTypeType bx@@93)) bx@@93) ($Is ($Unbox DatatypeTypeType bx@@93) Tclass._module.priv))) :qid |unknown.0:0| :skolemid |2378| :pattern ( ($IsBox bx@@93 Tclass._module.priv)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (_module.__default.priv__of__mode arg0@@256)) DatatypeTypeType) :qid |funType:_module.__default.priv__of__mode| :pattern ( (_module.__default.priv__of__mode arg0@@256)) )))
(assert  (=> true (forall ((|m#0| T@U) ) (!  (=> (and (= (type |m#0|) DatatypeTypeType) (or (|_module.__default.priv__of__mode#canCall| |m#0|) ($Is |m#0| Tclass._module.mode))) ($Is (_module.__default.priv__of__mode |m#0|) Tclass._module.priv)) :qid |ARMdefsd.80:23| :skolemid |2379| :pattern ( (_module.__default.priv__of__mode |m#0|)) ))))
(assert (forall ((|m#0@@0| T@U) ) (!  (=> (and (= (type |m#0@@0|) DatatypeTypeType) ($Is |m#0@@0| Tclass._module.mode)) (and (=> (|_module.__default.priv__of__mode#requires| |m#0@@0|) true) (=> true (|_module.__default.priv__of__mode#requires| |m#0@@0|)))) :qid |ARMdefsd.80:23| :skolemid |2380| :pattern ( (|_module.__default.priv__of__mode#requires| |m#0@@0|)) )))
(assert  (and (and (= (type |#_module.mode.User|) DatatypeTypeType) (= (type |#_module.priv.PL0|) DatatypeTypeType)) (= (type |#_module.priv.PL1|) DatatypeTypeType)))
(assert  (=> true (forall ((|m#0@@1| T@U) ) (!  (=> (and (= (type |m#0@@1|) DatatypeTypeType) (or (|_module.__default.priv__of__mode#canCall| |m#0@@1|) ($Is |m#0@@1| Tclass._module.mode))) (= (_module.__default.priv__of__mode |m#0@@1|) (ite (= |m#0@@1| (Lit |#_module.mode.User|)) |#_module.priv.PL0| |#_module.priv.PL1|))) :qid |ARMdefsd.80:23| :skolemid |2381| :pattern ( (_module.__default.priv__of__mode |m#0@@1|)) ))))
(assert  (=> true (forall ((|m#0@@2| T@U) ) (!  (=> (and (= (type |m#0@@2|) DatatypeTypeType) (or (|_module.__default.priv__of__mode#canCall| (Lit |m#0@@2|)) ($Is |m#0@@2| Tclass._module.mode))) (= (_module.__default.priv__of__mode (Lit |m#0@@2|)) (ite (= (Lit |m#0@@2|) (Lit |#_module.mode.User|)) |#_module.priv.PL0| |#_module.priv.PL1|))) :qid |ARMdefsd.80:23| :weight 3 :skolemid |2382| :pattern ( (_module.__default.priv__of__mode (Lit |m#0@@2|))) ))))
(assert (forall ((arg0@@257 T@U) ) (! (= (type (_module.__default.priv__of__state arg0@@257)) DatatypeTypeType) :qid |funType:_module.__default.priv__of__state| :pattern ( (_module.__default.priv__of__state arg0@@257)) )))
(assert  (=> true (forall ((|s#0@@19| T@U) ) (!  (=> (and (= (type |s#0@@19|) DatatypeTypeType) (or (|_module.__default.priv__of__state#canCall| |s#0@@19|) ($Is |s#0@@19| Tclass._module.state))) ($Is (_module.__default.priv__of__state |s#0@@19|) Tclass._module.priv)) :qid |ARMdefsd.85:24| :skolemid |2383| :pattern ( (_module.__default.priv__of__state |s#0@@19|)) ))))
(assert (forall ((|s#0@@20| T@U) ) (!  (=> (and (= (type |s#0@@20|) DatatypeTypeType) ($Is |s#0@@20| Tclass._module.state)) (and (=> (|_module.__default.priv__of__state#requires| |s#0@@20|) true) (=> true (|_module.__default.priv__of__state#requires| |s#0@@20|)))) :qid |ARMdefsd.85:24| :skolemid |2384| :pattern ( (|_module.__default.priv__of__state#requires| |s#0@@20|)) )))
(assert  (=> true (forall ((|s#0@@21| T@U) ) (!  (=> (and (= (type |s#0@@21|) DatatypeTypeType) (or (|_module.__default.priv__of__state#canCall| |s#0@@21|) ($Is |s#0@@21| Tclass._module.state))) (and (and (|_module.__default.mode__of__state#canCall| |s#0@@21|) (|_module.__default.priv__of__mode#canCall| (_module.__default.mode__of__state |s#0@@21|))) (= (_module.__default.priv__of__state |s#0@@21|) (_module.__default.priv__of__mode (_module.__default.mode__of__state |s#0@@21|))))) :qid |ARMdefsd.85:24| :skolemid |2385| :pattern ( (_module.__default.priv__of__state |s#0@@21|)) ))))
(assert  (=> true (forall ((|s#0@@22| T@U) ) (!  (=> (and (= (type |s#0@@22|) DatatypeTypeType) (or (|_module.__default.priv__of__state#canCall| (Lit |s#0@@22|)) ($Is |s#0@@22| Tclass._module.state))) (and (and (|_module.__default.mode__of__state#canCall| (Lit |s#0@@22|)) (|_module.__default.priv__of__mode#canCall| (Lit (_module.__default.mode__of__state (Lit |s#0@@22|))))) (= (_module.__default.priv__of__state (Lit |s#0@@22|)) (Lit (_module.__default.priv__of__mode (Lit (_module.__default.mode__of__state (Lit |s#0@@22|)))))))) :qid |ARMdefsd.85:24| :weight 3 :skolemid |2386| :pattern ( (_module.__default.priv__of__state (Lit |s#0@@22|))) ))))
(assert (= (type Tclass._module.PSR) TyType))
(assert (= (Tag Tclass._module.PSR) Tagclass._module.PSR))
(assert (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 Tclass._module.PSR)) (and (= ($Box ($Unbox DatatypeTypeType bx@@94)) bx@@94) ($Is ($Unbox DatatypeTypeType bx@@94) Tclass._module.PSR))) :qid |unknown.0:0| :skolemid |2387| :pattern ( ($IsBox bx@@94 Tclass._module.PSR)) )))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (_module.__default.spsr__of__state arg0@@258)) DatatypeTypeType) :qid |funType:_module.__default.spsr__of__state| :pattern ( (_module.__default.spsr__of__state arg0@@258)) )))
(assert  (=> true (forall ((|s#0@@23| T@U) ) (!  (=> (and (= (type |s#0@@23|) DatatypeTypeType) (or (|_module.__default.spsr__of__state#canCall| |s#0@@23|) (and ($Is |s#0@@23| Tclass._module.state) (and (_module.__default.ValidState |s#0@@23|) (not (= (_module.__default.mode__of__state |s#0@@23|) |#_module.mode.User|)))))) ($Is (_module.__default.spsr__of__state |s#0@@23|) Tclass._module.PSR)) :qid |ARMdefsd.88:24| :skolemid |2388| :pattern ( (_module.__default.spsr__of__state |s#0@@23|)) ))))
(assert (forall (($Heap@@56 T@U) (|s#0@@24| T@U) ) (!  (=> (and (and (= (type $Heap@@56) (MapType1Type refType)) (= (type |s#0@@24|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@56) ($Is |s#0@@24| Tclass._module.state))) (and (=> (|_module.__default.spsr__of__state#requires| |s#0@@24|) (and (_module.__default.ValidState |s#0@@24|) (not (= (_module.__default.mode__of__state |s#0@@24|) |#_module.mode.User|)))) (=> (and (_module.__default.ValidState |s#0@@24|) (not (= (_module.__default.mode__of__state |s#0@@24|) |#_module.mode.User|))) (|_module.__default.spsr__of__state#requires| |s#0@@24|)))) :qid |ARMdefsd.88:10| :skolemid |2389| :pattern ( (|_module.__default.spsr__of__state#requires| |s#0@@24|) ($IsGoodHeap $Heap@@56)) )))
(assert  (and (and (and (and (and (forall ((arg0@@259 T@U) ) (! (= (type (_module.state.sregs arg0@@259)) (MapType BoxType BoxType)) :qid |funType:_module.state.sregs| :pattern ( (_module.state.sregs arg0@@259)) )) (forall ((arg0@@260 T@U) ) (! (= (type (|#_module.SReg.spsr| arg0@@260)) DatatypeTypeType) :qid |funType:#_module.SReg.spsr| :pattern ( (|#_module.SReg.spsr| arg0@@260)) ))) (= (type StartFuel__module._default.ValidSRegState) LayerTypeType)) (= (type MoreFuel__module._default.ValidSRegState0) LayerTypeType)) (= (type StartFuelAssert__module._default.ValidSRegState) LayerTypeType)) (forall ((arg0@@261 Int) ) (! (= (type (_module.__default.decode__psr arg0@@261)) DatatypeTypeType) :qid |funType:_module.__default.decode__psr| :pattern ( (_module.__default.decode__psr arg0@@261)) ))))
(assert  (=> true (forall (($Heap@@57 T@U) (|s#0@@25| T@U) ) (!  (=> (and (and (= (type $Heap@@57) (MapType1Type refType)) (= (type |s#0@@25|) DatatypeTypeType)) (or (|_module.__default.spsr__of__state#canCall| |s#0@@25|) (and (and ($IsGoodHeap $Heap@@57) ($Is |s#0@@25| Tclass._module.state)) (and (_module.__default.ValidState |s#0@@25|) (not (= (_module.__default.mode__of__state |s#0@@25|) |#_module.mode.User|)))))) (and (and (and (_module.state.State_q |s#0@@25|) (|_module.__default.mode__of__state#canCall| |s#0@@25|)) (|_module.__default.decode__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@25|)) ($Box (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@25|)))))))) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState0)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState0)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState0) MoreFuel__module._default.ValidSRegState0)) (= (_module.__default.spsr__of__state |s#0@@25|) (_module.__default.decode__psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@25|)) ($Box (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@25|))))))))))) :qid |ARMdefsd.88:10| :skolemid |2390| :pattern ( (_module.__default.spsr__of__state |s#0@@25|) ($IsGoodHeap $Heap@@57)) ))))
(assert (= (type MoreFuel__module._default.ValidSRegState1) LayerTypeType))
(assert  (=> true (forall (($Heap@@58 T@U) (|s#0@@26| T@U) ) (!  (=> (and (and (= (type $Heap@@58) (MapType1Type refType)) (= (type |s#0@@26|) DatatypeTypeType)) (or (|_module.__default.spsr__of__state#canCall| (Lit |s#0@@26|)) (and (and ($IsGoodHeap $Heap@@58) ($Is |s#0@@26| Tclass._module.state)) (and (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@26|))))) (U_2_bool (Lit (bool_2_U (not (= (_module.__default.mode__of__state (Lit |s#0@@26|)) |#_module.mode.User|))))))))) (and (and (and (_module.state.State_q (Lit |s#0@@26|)) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@26|))) (|_module.__default.decode__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@26|)))) ($Box (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@26|))))))))))) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState1)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState1)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState1) MoreFuel__module._default.ValidSRegState1)) (= (_module.__default.spsr__of__state (Lit |s#0@@26|)) (_module.__default.decode__psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@26|)))) ($Box (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@26|)))))))))))))) :qid |ARMdefsd.88:10| :weight 3 :skolemid |2391| :pattern ( (_module.__default.spsr__of__state (Lit |s#0@@26|)) ($IsGoodHeap $Heap@@58)) ))))
(assert  (=> true (forall ((|s#0@@27| T@U) ) (!  (=> (and (= (type |s#0@@27|) DatatypeTypeType) (or (|_module.__default.interrupts__enabled#canCall| |s#0@@27|) ($Is |s#0@@27| Tclass._module.state))) true) :qid |ARMdefsd.96:30| :skolemid |2392| :pattern ( (_module.__default.interrupts__enabled |s#0@@27|)) ))))
(assert (forall (($Heap@@59 T@U) (|s#0@@28| T@U) ) (!  (=> (and (and (= (type $Heap@@59) (MapType1Type refType)) (= (type |s#0@@28|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@59) ($Is |s#0@@28| Tclass._module.state))) (and (=> (|_module.__default.interrupts__enabled#requires| |s#0@@28|) true) (=> true (|_module.__default.interrupts__enabled#requires| |s#0@@28|)))) :qid |ARMdefsd.96:11| :skolemid |2393| :pattern ( (|_module.__default.interrupts__enabled#requires| |s#0@@28|) ($IsGoodHeap $Heap@@59)) )))
(assert  (=> true (forall (($Heap@@60 T@U) (|s#0@@29| T@U) ) (!  (=> (and (and (= (type $Heap@@60) (MapType1Type refType)) (= (type |s#0@@29|) DatatypeTypeType)) (or (|_module.__default.interrupts__enabled#canCall| |s#0@@29|) (and ($IsGoodHeap $Heap@@60) ($Is |s#0@@29| Tclass._module.state)))) (and (and (and (and (_module.state.State_q |s#0@@29|) (_module.config.Config_q (_module.state.conf |s#0@@29|))) (_module.PSR.PSR_q (_module.config.cpsr (_module.state.conf |s#0@@29|)))) (=> (_module.PSR.f (_module.config.cpsr (_module.state.conf |s#0@@29|))) (and (and (_module.state.State_q |s#0@@29|) (_module.config.Config_q (_module.state.conf |s#0@@29|))) (_module.PSR.PSR_q (_module.config.cpsr (_module.state.conf |s#0@@29|)))))) (and (=> (_module.__default.interrupts__enabled |s#0@@29|) (or (not (_module.PSR.f (_module.config.cpsr (_module.state.conf |s#0@@29|)))) (not (_module.PSR.i (_module.config.cpsr (_module.state.conf |s#0@@29|)))))) (=> (or (not (_module.PSR.f (_module.config.cpsr (_module.state.conf |s#0@@29|)))) (not (_module.PSR.i (_module.config.cpsr (_module.state.conf |s#0@@29|))))) (_module.__default.interrupts__enabled |s#0@@29|))))) :qid |ARMdefsd.96:11| :skolemid |2394| :pattern ( (_module.__default.interrupts__enabled |s#0@@29|) ($IsGoodHeap $Heap@@60)) ))))
(assert  (=> true (forall (($Heap@@61 T@U) (|s#0@@30| T@U) ) (!  (=> (and (and (= (type $Heap@@61) (MapType1Type refType)) (= (type |s#0@@30|) DatatypeTypeType)) (or (|_module.__default.interrupts__enabled#canCall| (Lit |s#0@@30|)) (and ($IsGoodHeap $Heap@@61) ($Is |s#0@@30| Tclass._module.state)))) (and (and (and (and (_module.state.State_q (Lit |s#0@@30|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@30|))))) (_module.PSR.PSR_q (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@30|))))))) (=> (U_2_bool (Lit (bool_2_U (_module.PSR.f (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@30|))))))))) (and (and (_module.state.State_q (Lit |s#0@@30|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@30|))))) (_module.PSR.PSR_q (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@30|))))))))) (and (=> (_module.__default.interrupts__enabled (Lit |s#0@@30|)) (or (not (U_2_bool (Lit (bool_2_U (_module.PSR.f (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@30|)))))))))) (not (U_2_bool (Lit (bool_2_U (_module.PSR.i (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@30|)))))))))))) (=> (or (not (U_2_bool (Lit (bool_2_U (_module.PSR.f (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@30|)))))))))) (not (U_2_bool (Lit (bool_2_U (_module.PSR.i (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@30|))))))))))) (_module.__default.interrupts__enabled (Lit |s#0@@30|)))))) :qid |ARMdefsd.96:11| :weight 3 :skolemid |2395| :pattern ( (_module.__default.interrupts__enabled (Lit |s#0@@30|)) ($IsGoodHeap $Heap@@61)) ))))
(assert  (=> true (forall ((|x#0@@57| Int) (|y#0@@25| Int) ) (!  (=> true true) :qid |ARMdefsd.105:30| :skolemid |2396| :pattern ( (_module.__default.nondet__int |x#0@@57| |y#0@@25|)) ))))
(assert (forall ((|x#0@@58| Int) (|y#0@@26| Int) ) (!  (and (=> (|_module.__default.nondet__int#requires| |x#0@@58| |y#0@@26|) true) (=> true (|_module.__default.nondet__int#requires| |x#0@@58| |y#0@@26|))) :qid |ARMdefsd.105:30| :skolemid |2397| :pattern ( (|_module.__default.nondet__int#requires| |x#0@@58| |y#0@@26|)) )))
(assert  (=> true (forall ((|x#0@@59| Int) (|y#0@@27| Int) ) (!  (=> true (_module.__default.isUInt32 (_module.__default.nondet__word |x#0@@59| |y#0@@27|))) :qid |ARMdefsd.106:31| :skolemid |2398| :pattern ( (_module.__default.nondet__word |x#0@@59| |y#0@@27|)) ))))
(assert (forall ((|x#0@@60| Int) (|y#0@@28| Int) ) (!  (and (=> (|_module.__default.nondet__word#requires| |x#0@@60| |y#0@@28|) true) (=> true (|_module.__default.nondet__word#requires| |x#0@@60| |y#0@@28|))) :qid |ARMdefsd.106:31| :skolemid |2399| :pattern ( (|_module.__default.nondet__word#requires| |x#0@@60| |y#0@@28|)) )))
(assert (= (type Tclass._module.UserState) TyType))
(assert (= (Tag Tclass._module.UserState) Tagclass._module.UserState))
(assert (forall ((bx@@95 T@U) ) (!  (=> (and (= (type bx@@95) BoxType) ($IsBox bx@@95 Tclass._module.UserState)) (and (= ($Box ($Unbox DatatypeTypeType bx@@95)) bx@@95) ($Is ($Unbox DatatypeTypeType bx@@95) Tclass._module.UserState))) :qid |unknown.0:0| :skolemid |2400| :pattern ( ($IsBox bx@@95 Tclass._module.UserState)) )))
(assert  (=> true (forall ((|x#0@@61| Int) (|s#0@@31| T@U) (|y#0@@29| Int) ) (!  (=> (and (= (type |s#0@@31|) DatatypeTypeType) (or (|_module.__default.nondet__private__word#canCall| |x#0@@61| |s#0@@31| |y#0@@29|) ($Is |s#0@@31| Tclass._module.UserState))) (_module.__default.isUInt32 (_module.__default.nondet__private__word |x#0@@61| |s#0@@31| |y#0@@29|))) :qid |ARMdefsd.107:39| :skolemid |2401| :pattern ( (_module.__default.nondet__private__word |x#0@@61| |s#0@@31| |y#0@@29|)) ))))
(assert (forall ((|x#0@@62| Int) (|s#0@@32| T@U) (|y#0@@30| Int) ) (!  (=> (and (= (type |s#0@@32|) DatatypeTypeType) ($Is |s#0@@32| Tclass._module.UserState)) (and (=> (|_module.__default.nondet__private__word#requires| |x#0@@62| |s#0@@32| |y#0@@30|) true) (=> true (|_module.__default.nondet__private__word#requires| |x#0@@62| |s#0@@32| |y#0@@30|)))) :qid |ARMdefsd.107:39| :skolemid |2402| :pattern ( (|_module.__default.nondet__private__word#requires| |x#0@@62| |s#0@@32| |y#0@@30|)) )))
(assert  (=> true (forall ((|x#0@@63| Int) (|s#0@@33| T@U) (|y#0@@31| Int) ) (!  (=> (and (= (type |s#0@@33|) DatatypeTypeType) (or (|_module.__default.nondet__private__nat#canCall| |x#0@@63| |s#0@@33| |y#0@@31|) ($Is |s#0@@33| Tclass._module.UserState))) (INTERNAL_le_boogie 0 (_module.__default.nondet__private__nat |x#0@@63| |s#0@@33| |y#0@@31|))) :qid |ARMdefsd.108:38| :skolemid |2403| :pattern ( (_module.__default.nondet__private__nat |x#0@@63| |s#0@@33| |y#0@@31|)) ))))
(assert (forall ((|x#0@@64| Int) (|s#0@@34| T@U) (|y#0@@32| Int) ) (!  (=> (and (= (type |s#0@@34|) DatatypeTypeType) ($Is |s#0@@34| Tclass._module.UserState)) (and (=> (|_module.__default.nondet__private__nat#requires| |x#0@@64| |s#0@@34| |y#0@@32|) true) (=> true (|_module.__default.nondet__private__nat#requires| |x#0@@64| |s#0@@34| |y#0@@32|)))) :qid |ARMdefsd.108:38| :skolemid |2404| :pattern ( (|_module.__default.nondet__private__nat#requires| |x#0@@64| |s#0@@34| |y#0@@32|)) )))
(assert (= (type Tclass._module.exception) TyType))
(assert (= (Tag Tclass._module.exception) Tagclass._module.exception))
(assert (forall ((bx@@96 T@U) ) (!  (=> (and (= (type bx@@96) BoxType) ($IsBox bx@@96 Tclass._module.exception)) (and (= ($Box ($Unbox DatatypeTypeType bx@@96)) bx@@96) ($Is ($Unbox DatatypeTypeType bx@@96) Tclass._module.exception))) :qid |unknown.0:0| :skolemid |2405| :pattern ( ($IsBox bx@@96 Tclass._module.exception)) )))
(assert  (and (and (forall ((arg0@@262 Int) (arg1@@140 T@U) (arg2@@96 Bool) (arg3@@67 Bool) ) (! (= (type (_module.__default.nondet__exception arg0@@262 arg1@@140 arg2@@96 arg3@@67)) DatatypeTypeType) :qid |funType:_module.__default.nondet__exception| :pattern ( (_module.__default.nondet__exception arg0@@262 arg1@@140 arg2@@96 arg3@@67)) )) (= (type |#_module.exception.ExFIQ|) DatatypeTypeType)) (= (type |#_module.exception.ExIRQ|) DatatypeTypeType)))
(assert  (=> true (forall ((|x#0@@65| Int) (|s#0@@35| T@U) (|maskf#0| Bool) (|maski#0| Bool) ) (!  (=> (and (= (type |s#0@@35|) DatatypeTypeType) (or (|_module.__default.nondet__exception#canCall| |x#0@@65| |s#0@@35| |maskf#0| |maski#0|) ($Is |s#0@@35| Tclass._module.UserState))) (and (and (=> |maskf#0| (not (= (_module.__default.nondet__exception |x#0@@65| |s#0@@35| |maskf#0| |maski#0|) |#_module.exception.ExFIQ|))) (=> |maski#0| (not (= (_module.__default.nondet__exception |x#0@@65| |s#0@@35| |maskf#0| |maski#0|) |#_module.exception.ExIRQ|)))) ($Is (_module.__default.nondet__exception |x#0@@65| |s#0@@35| |maskf#0| |maski#0|) Tclass._module.exception))) :qid |ARMdefsd.109:36| :skolemid |2406| :pattern ( (_module.__default.nondet__exception |x#0@@65| |s#0@@35| |maskf#0| |maski#0|)) ))))
(assert (forall ((|x#0@@66| Int) (|s#0@@36| T@U) (|maskf#0@@0| Bool) (|maski#0@@0| Bool) ) (!  (=> (and (= (type |s#0@@36|) DatatypeTypeType) ($Is |s#0@@36| Tclass._module.UserState)) (and (=> (|_module.__default.nondet__exception#requires| |x#0@@66| |s#0@@36| |maskf#0@@0| |maski#0@@0|) true) (=> true (|_module.__default.nondet__exception#requires| |x#0@@66| |s#0@@36| |maskf#0@@0| |maski#0@@0|)))) :qid |ARMdefsd.109:36| :skolemid |2407| :pattern ( (|_module.__default.nondet__exception#requires| |x#0@@66| |s#0@@36| |maskf#0@@0| |maski#0@@0|)) )))
(assert  (=> true (forall ((|x#0@@67| Int) (|s#0@@37| T@U) (|p#0| T@U) ) (!  (=> (and (and (= (type |s#0@@37|) DatatypeTypeType) (= (type |p#0|) DatatypeTypeType)) (or (|_module.__default.nondet__psr#canCall| |x#0@@67| |s#0@@37| |p#0|) (and ($Is |s#0@@37| Tclass._module.UserState) ($Is |p#0| Tclass._module.PSR)))) (and (and (_module.__default.ValidPsrWord (_module.__default.nondet__psr |x#0@@67| |s#0@@37| |p#0|)) (= (_module.__default.decode__psr (_module.__default.nondet__psr |x#0@@67| |s#0@@37| |p#0|)) |p#0|)) (_module.__default.isUInt32 (_module.__default.nondet__psr |x#0@@67| |s#0@@37| |p#0|)))) :qid |ARMdefsd.112:30| :skolemid |2408| :pattern ( (_module.__default.nondet__psr |x#0@@67| |s#0@@37| |p#0|)) ))))
(assert (forall ((|x#0@@68| Int) (|s#0@@38| T@U) (|p#0@@0| T@U) ) (!  (=> (and (and (= (type |s#0@@38|) DatatypeTypeType) (= (type |p#0@@0|) DatatypeTypeType)) (and ($Is |s#0@@38| Tclass._module.UserState) ($Is |p#0@@0| Tclass._module.PSR))) (and (=> (|_module.__default.nondet__psr#requires| |x#0@@68| |s#0@@38| |p#0@@0|) true) (=> true (|_module.__default.nondet__psr#requires| |x#0@@68| |s#0@@38| |p#0@@0|)))) :qid |ARMdefsd.112:30| :skolemid |2409| :pattern ( (|_module.__default.nondet__psr#requires| |x#0@@68| |s#0@@38| |p#0@@0|)) )))
(assert  (=> true (=> true true)))
(assert  (=> |_module.__default.NONDET__GENERATOR#requires| true))
(assert  (=> true |_module.__default.NONDET__GENERATOR#requires|))
(assert  (=> true (=> true true)))
(assert  (=> |_module.__default.NONDET__PC#requires| true))
(assert  (=> true |_module.__default.NONDET__PC#requires|))
(assert  (=> true (=> true true)))
(assert  (=> |_module.__default.NONDET__EX#requires| true))
(assert  (=> true |_module.__default.NONDET__EX#requires|))
(assert (= (type Tclass._module.ARMReg) TyType))
(assert (= (Tag Tclass._module.ARMReg) Tagclass._module.ARMReg))
(assert (forall ((bx@@97 T@U) ) (!  (=> (and (= (type bx@@97) BoxType) ($IsBox bx@@97 Tclass._module.ARMReg)) (and (= ($Box ($Unbox DatatypeTypeType bx@@97)) bx@@97) ($Is ($Unbox DatatypeTypeType bx@@97) Tclass._module.ARMReg))) :qid |unknown.0:0| :skolemid |2410| :pattern ( ($IsBox bx@@97 Tclass._module.ARMReg)) )))
(assert  (=> true (forall ((|r#0| T@U) ) (!  (=> (and (= (type |r#0|) DatatypeTypeType) (or (|_module.__default.NONDET__REG#canCall| |r#0|) ($Is |r#0| Tclass._module.ARMReg))) true) :qid |ARMdefsd.118:30| :skolemid |2411| :pattern ( (_module.__default.NONDET__REG |r#0|)) ))))
(assert (forall ((|r#0@@0| T@U) ) (!  (=> (and (= (type |r#0@@0|) DatatypeTypeType) ($Is |r#0@@0| Tclass._module.ARMReg)) (and (=> (|_module.__default.NONDET__REG#requires| |r#0@@0|) true) (=> true (|_module.__default.NONDET__REG#requires| |r#0@@0|)))) :qid |ARMdefsd.118:30| :skolemid |2412| :pattern ( (|_module.__default.NONDET__REG#requires| |r#0@@0|)) )))
(assert  (=> true (=> true true)))
(assert  (=> |_module.__default.NONDET__STEPS#requires| true))
(assert  (=> true |_module.__default.NONDET__STEPS#requires|))
(assert  (=> true (forall ((|o#0| Int) ) (!  (=> true true) :qid |ARMdefsd.120:30| :skolemid |2413| :pattern ( (_module.__default.NONDET__RNG |o#0|)) ))))
(assert (forall ((|o#0@@0| Int) ) (!  (and (=> (|_module.__default.NONDET__RNG#requires| |o#0@@0|) true) (=> true (|_module.__default.NONDET__RNG#requires| |o#0@@0|))) :qid |ARMdefsd.120:30| :skolemid |2414| :pattern ( (|_module.__default.NONDET__RNG#requires| |o#0@@0|)) )))
(assert (= (type Tclass._module.AbsPTE) TyType))
(assert (= (Tag Tclass._module.AbsPTE) Tagclass._module.AbsPTE))
(assert (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 Tclass._module.AbsPTE)) (and (= ($Box ($Unbox DatatypeTypeType bx@@98)) bx@@98) ($Is ($Unbox DatatypeTypeType bx@@98) Tclass._module.AbsPTE))) :qid |unknown.0:0| :skolemid |2415| :pattern ( ($IsBox bx@@98 Tclass._module.AbsPTE)) )))
(assert (forall ((arg0@@263 T@U) ) (! (= (type (Tclass._module.Maybe arg0@@263)) TyType) :qid |funType:Tclass._module.Maybe| :pattern ( (Tclass._module.Maybe arg0@@263)) )))
(assert (forall ((_module.Maybe$T T@U) ) (!  (=> (= (type _module.Maybe$T) TyType) (= (Tag (Tclass._module.Maybe _module.Maybe$T)) Tagclass._module.Maybe)) :qid |unknown.0:0| :skolemid |2416| :pattern ( (Tclass._module.Maybe _module.Maybe$T)) )))
(assert (forall ((arg0@@264 T@U) ) (! (= (type (Tclass._module.Maybe_0 arg0@@264)) TyType) :qid |funType:Tclass._module.Maybe_0| :pattern ( (Tclass._module.Maybe_0 arg0@@264)) )))
(assert (forall ((_module.Maybe$T@@0 T@U) ) (!  (=> (= (type _module.Maybe$T@@0) TyType) (= (Tclass._module.Maybe_0 (Tclass._module.Maybe _module.Maybe$T@@0)) _module.Maybe$T@@0)) :qid |unknown.0:0| :skolemid |2417| :pattern ( (Tclass._module.Maybe _module.Maybe$T@@0)) )))
(assert (forall ((_module.Maybe$T@@1 T@U) (bx@@99 T@U) ) (!  (=> (and (and (= (type _module.Maybe$T@@1) TyType) (= (type bx@@99) BoxType)) ($IsBox bx@@99 (Tclass._module.Maybe _module.Maybe$T@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@99)) bx@@99) ($Is ($Unbox DatatypeTypeType bx@@99) (Tclass._module.Maybe _module.Maybe$T@@1)))) :qid |unknown.0:0| :skolemid |2418| :pattern ( ($IsBox bx@@99 (Tclass._module.Maybe _module.Maybe$T@@1))) )))
(assert (forall ((arg0@@265 T@U) (arg1@@141 Int) (arg2@@97 T@U) ) (! (= (type (_module.__default.user__visible__state arg0@@265 arg1@@141 arg2@@97)) DatatypeTypeType) :qid |funType:_module.__default.user__visible__state| :pattern ( (_module.__default.user__visible__state arg0@@265 arg1@@141 arg2@@97)) )))
(assert  (=> true (forall ((|s#0@@39| T@U) (|initialpc#0| Int) (|pt#0| T@U) ) (!  (=> (and (and (= (type |s#0@@39|) DatatypeTypeType) (= (type |pt#0|) (SeqType BoxType))) (or (|_module.__default.user__visible__state#canCall| |s#0@@39| |initialpc#0| |pt#0|) (and (and (and ($Is |s#0@@39| Tclass._module.state) (_module.__default.isUInt32 |initialpc#0|)) ($Is |pt#0| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (and (_module.__default.ValidState |s#0@@39|) (_module.__default.WellformedAbsPTable |pt#0|))))) ($Is (_module.__default.user__visible__state |s#0@@39| |initialpc#0| |pt#0|) Tclass._module.UserState)) :qid |ARMdefsd.125:29| :skolemid |2419| :pattern ( (_module.__default.user__visible__state |s#0@@39| |initialpc#0| |pt#0|)) ))))
(assert (forall (($Heap@@62 T@U) (|s#0@@40| T@U) (|initialpc#0@@0| Int) (|pt#0@@0| T@U) ) (!  (=> (and (and (= (type $Heap@@62) (MapType1Type refType)) (= (type |s#0@@40|) DatatypeTypeType)) (= (type |pt#0@@0|) (SeqType BoxType))) (=> (and (and (and ($IsGoodHeap $Heap@@62) ($Is |s#0@@40| Tclass._module.state)) (_module.__default.isUInt32 |initialpc#0@@0|)) ($Is |pt#0@@0| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (and (=> (|_module.__default.user__visible__state#requires| |s#0@@40| |initialpc#0@@0| |pt#0@@0|) (and (_module.__default.ValidState |s#0@@40|) (_module.__default.WellformedAbsPTable |pt#0@@0|))) (=> (and (_module.__default.ValidState |s#0@@40|) (_module.__default.WellformedAbsPTable |pt#0@@0|)) (|_module.__default.user__visible__state#requires| |s#0@@40| |initialpc#0@@0| |pt#0@@0|))))) :qid |ARMdefsd.125:10| :skolemid |2420| :pattern ( (|_module.__default.user__visible__state#requires| |s#0@@40| |initialpc#0@@0| |pt#0@@0|) ($IsGoodHeap $Heap@@62)) )))
(assert  (and (and (and (and (forall ((arg0@@266 T@U) ) (! (= (type (_module.state.regs arg0@@266)) (MapType BoxType BoxType)) :qid |funType:_module.state.regs| :pattern ( (_module.state.regs arg0@@266)) )) (forall ((arg0@@267 T@U) ) (! (= (type (_module.state.m arg0@@267)) DatatypeTypeType) :qid |funType:_module.state.m| :pattern ( (_module.state.m arg0@@267)) ))) (forall ((arg0@@268 T@U) (arg1@@142 Int) (arg2@@98 T@U) ) (! (= (type (|#_module.UserState.UserState| arg0@@268 arg1@@142 arg2@@98)) DatatypeTypeType) :qid |funType:#_module.UserState.UserState| :pattern ( (|#_module.UserState.UserState| arg0@@268 arg1@@142 arg2@@98)) ))) (forall ((arg0@@269 T@U) ) (! (= (type (_module.__default.user__regs arg0@@269)) (MapType BoxType BoxType)) :qid |funType:_module.__default.user__regs| :pattern ( (_module.__default.user__regs arg0@@269)) ))) (forall ((arg0@@270 T@U) (arg1@@143 T@U) ) (! (= (type (_module.__default.user__mem arg0@@270 arg1@@143)) (MapType BoxType BoxType)) :qid |funType:_module.__default.user__mem| :pattern ( (_module.__default.user__mem arg0@@270 arg1@@143)) ))))
(assert  (=> true (forall (($Heap@@63 T@U) (|s#0@@41| T@U) (|initialpc#0@@1| Int) (|pt#0@@1| T@U) ) (!  (=> (and (and (and (= (type $Heap@@63) (MapType1Type refType)) (= (type |s#0@@41|) DatatypeTypeType)) (= (type |pt#0@@1|) (SeqType BoxType))) (or (|_module.__default.user__visible__state#canCall| |s#0@@41| |initialpc#0@@1| |pt#0@@1|) (and (and (and (and ($IsGoodHeap $Heap@@63) ($Is |s#0@@41| Tclass._module.state)) (_module.__default.isUInt32 |initialpc#0@@1|)) ($Is |pt#0@@1| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (and (_module.__default.ValidState |s#0@@41|) (_module.__default.WellformedAbsPTable |pt#0@@1|))))) (and (and (and (_module.state.State_q |s#0@@41|) (|_module.__default.user__regs#canCall| (_module.state.regs |s#0@@41|))) (and (_module.state.State_q |s#0@@41|) (|_module.__default.user__mem#canCall| |pt#0@@1| (_module.state.m |s#0@@41|)))) (= (_module.__default.user__visible__state |s#0@@41| |initialpc#0@@1| |pt#0@@1|) (|#_module.UserState.UserState| (_module.__default.user__regs (_module.state.regs |s#0@@41|)) |initialpc#0@@1| (_module.__default.user__mem |pt#0@@1| (_module.state.m |s#0@@41|)))))) :qid |ARMdefsd.125:10| :skolemid |2421| :pattern ( (_module.__default.user__visible__state |s#0@@41| |initialpc#0@@1| |pt#0@@1|) ($IsGoodHeap $Heap@@63)) ))))
(assert  (=> true (forall (($Heap@@64 T@U) (|s#0@@42| T@U) (|initialpc#0@@2| Int) (|pt#0@@2| T@U) ) (!  (=> (and (and (and (= (type $Heap@@64) (MapType1Type refType)) (= (type |s#0@@42|) DatatypeTypeType)) (= (type |pt#0@@2|) (SeqType BoxType))) (or (|_module.__default.user__visible__state#canCall| (Lit |s#0@@42|) (LitInt |initialpc#0@@2|) (Lit |pt#0@@2|)) (and (and (and (and ($IsGoodHeap $Heap@@64) ($Is |s#0@@42| Tclass._module.state)) (_module.__default.isUInt32 |initialpc#0@@2|)) ($Is |pt#0@@2| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (and (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@42|))))) (U_2_bool (Lit (bool_2_U (_module.__default.WellformedAbsPTable (Lit |pt#0@@2|))))))))) (and (and (and (_module.state.State_q (Lit |s#0@@42|)) (|_module.__default.user__regs#canCall| (Lit (_module.state.regs (Lit |s#0@@42|))))) (and (_module.state.State_q (Lit |s#0@@42|)) (|_module.__default.user__mem#canCall| (Lit |pt#0@@2|) (Lit (_module.state.m (Lit |s#0@@42|)))))) (= (_module.__default.user__visible__state (Lit |s#0@@42|) (LitInt |initialpc#0@@2|) (Lit |pt#0@@2|)) (Lit (|#_module.UserState.UserState| (Lit (_module.__default.user__regs (Lit (_module.state.regs (Lit |s#0@@42|))))) (LitInt |initialpc#0@@2|) (Lit (_module.__default.user__mem (Lit |pt#0@@2|) (Lit (_module.state.m (Lit |s#0@@42|)))))))))) :qid |ARMdefsd.125:10| :weight 3 :skolemid |2422| :pattern ( (_module.__default.user__visible__state (Lit |s#0@@42|) (LitInt |initialpc#0@@2|) (Lit |pt#0@@2|)) ($IsGoodHeap $Heap@@64)) ))))
(assert (= (type _module.__default.USER__REGS) (MapType0Type BoxType boolType)))
(assert  (=> true (=> true ($Is _module.__default.USER__REGS (TSet Tclass._module.ARMReg)))))
(assert  (=> |_module.__default.USER__REGS#requires| true))
(assert  (=> true |_module.__default.USER__REGS#requires|))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type |#_module.ARMReg.R0|) DatatypeTypeType) (= (type |#_module.ARMReg.R1|) DatatypeTypeType)) (= (type |#_module.ARMReg.R2|) DatatypeTypeType)) (= (type |#_module.ARMReg.R3|) DatatypeTypeType)) (= (type |#_module.ARMReg.R4|) DatatypeTypeType)) (= (type |#_module.ARMReg.R5|) DatatypeTypeType)) (= (type |#_module.ARMReg.R6|) DatatypeTypeType)) (= (type |#_module.ARMReg.R7|) DatatypeTypeType)) (= (type |#_module.ARMReg.R8|) DatatypeTypeType)) (= (type |#_module.ARMReg.R9|) DatatypeTypeType)) (= (type |#_module.ARMReg.R10|) DatatypeTypeType)) (= (type |#_module.ARMReg.R11|) DatatypeTypeType)) (= (type |#_module.ARMReg.R12|) DatatypeTypeType)) (forall ((arg0@@271 T@U) ) (! (= (type (|#_module.ARMReg.SP| arg0@@271)) DatatypeTypeType) :qid |funType:#_module.ARMReg.SP| :pattern ( (|#_module.ARMReg.SP| arg0@@271)) ))) (forall ((arg0@@272 T@U) ) (! (= (type (|#_module.ARMReg.LR| arg0@@272)) DatatypeTypeType) :qid |funType:#_module.ARMReg.LR| :pattern ( (|#_module.ARMReg.LR| arg0@@272)) ))))
(assert  (=> true (=> true (= _module.__default.USER__REGS (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit |#_module.ARMReg.R0|))) ($Box (Lit |#_module.ARMReg.R1|))) ($Box (Lit |#_module.ARMReg.R2|))) ($Box (Lit |#_module.ARMReg.R3|))) ($Box (Lit |#_module.ARMReg.R4|))) ($Box (Lit |#_module.ARMReg.R5|))) ($Box (Lit |#_module.ARMReg.R6|))) ($Box (Lit |#_module.ARMReg.R7|))) ($Box (Lit |#_module.ARMReg.R8|))) ($Box (Lit |#_module.ARMReg.R9|))) ($Box (Lit |#_module.ARMReg.R10|))) ($Box (Lit |#_module.ARMReg.R11|))) ($Box (Lit |#_module.ARMReg.R12|))) ($Box (Lit (|#_module.ARMReg.SP| (Lit |#_module.mode.User|))))) ($Box (Lit (|#_module.ARMReg.LR| (Lit |#_module.mode.User|)))))))))
(assert  (=> true (=> true (= _module.__default.USER__REGS (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (Lit |#_module.ARMReg.R0|))) ($Box (Lit |#_module.ARMReg.R1|))) ($Box (Lit |#_module.ARMReg.R2|))) ($Box (Lit |#_module.ARMReg.R3|))) ($Box (Lit |#_module.ARMReg.R4|))) ($Box (Lit |#_module.ARMReg.R5|))) ($Box (Lit |#_module.ARMReg.R6|))) ($Box (Lit |#_module.ARMReg.R7|))) ($Box (Lit |#_module.ARMReg.R8|))) ($Box (Lit |#_module.ARMReg.R9|))) ($Box (Lit |#_module.ARMReg.R10|))) ($Box (Lit |#_module.ARMReg.R11|))) ($Box (Lit |#_module.ARMReg.R12|))) ($Box (Lit (|#_module.ARMReg.SP| (Lit |#_module.mode.User|))))) ($Box (Lit (|#_module.ARMReg.LR| (Lit |#_module.mode.User|)))))))))
(assert (= (type StartFuel__module._default.ValidRegState) LayerTypeType))
(assert  (=> true (forall ((|regs#0| T@U) ) (!  (=> (and (= (type |regs#0|) (MapType BoxType BoxType)) (or (|_module.__default.user__regs#canCall| |regs#0|) (and ($Is |regs#0| (TMap Tclass._module.ARMReg Tclass._module.word)) (_module.__default.ValidRegState StartFuel__module._default.ValidRegState |regs#0|)))) ($Is (_module.__default.user__regs |regs#0|) (TMap Tclass._module.ARMReg Tclass._module.word))) :qid |ARMdefsd.137:20| :skolemid |2423| :pattern ( (_module.__default.user__regs |regs#0|)) ))))
(assert (forall ((|regs#0@@0| T@U) ) (!  (=> (and (= (type |regs#0@@0|) (MapType BoxType BoxType)) ($Is |regs#0@@0| (TMap Tclass._module.ARMReg Tclass._module.word))) (and (=> (|_module.__default.user__regs#requires| |regs#0@@0|) (_module.__default.ValidRegState StartFuel__module._default.ValidRegState |regs#0@@0|)) (=> (_module.__default.ValidRegState StartFuel__module._default.ValidRegState |regs#0@@0|) (|_module.__default.user__regs#requires| |regs#0@@0|)))) :qid |ARMdefsd.137:20| :skolemid |2424| :pattern ( (|_module.__default.user__regs#requires| |regs#0@@0|)) )))
(assert  (and (and (and (= (type MoreFuel__module._default.ValidRegState0) LayerTypeType) (= (type StartFuelAssert__module._default.ValidRegState) LayerTypeType)) (= (type |lambda#56|) (MapType0Type BoxType boolType))) (forall ((arg0@@273 T@U) ) (! (= (type (|lambda#57| arg0@@273)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#57| :pattern ( (|lambda#57| arg0@@273)) ))))
(assert  (=> true (forall ((|regs#0@@1| T@U) ) (!  (=> (and (= (type |regs#0@@1|) (MapType BoxType BoxType)) (or (|_module.__default.user__regs#canCall| |regs#0@@1|) (and ($Is |regs#0@@1| (TMap Tclass._module.ARMReg Tclass._module.word)) (_module.__default.ValidRegState StartFuel__module._default.ValidRegState |regs#0@@1|)))) (and (forall ((|r#0@@1| T@U) ) (!  (=> (and (= (type |r#0@@1|) DatatypeTypeType) ($Is |r#0@@1| Tclass._module.ARMReg)) |_module.__default.USER__REGS#canCall|) :qid |ARMdefsd.141:9| :skolemid |2425| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |regs#0@@1|) ($Box |r#0@@1|)))) :pattern ( (MapType0Select _module.__default.USER__REGS ($Box |r#0@@1|))) )) (and (and (and (= StartFuel__module._default.ValidRegState ($LS MoreFuel__module._default.ValidRegState0)) (= StartFuelAssert__module._default.ValidRegState ($LS ($LS MoreFuel__module._default.ValidRegState0)))) (= (AsFuelBottom MoreFuel__module._default.ValidRegState0) MoreFuel__module._default.ValidRegState0)) (= (_module.__default.user__regs |regs#0@@1|) (|Map#Glue| |lambda#56| (|lambda#57| |regs#0@@1|) (TMap Tclass._module.ARMReg Tclass._module.word)))))) :qid |ARMdefsd.137:20| :skolemid |2426| :pattern ( (_module.__default.user__regs |regs#0@@1|)) ))))
(assert  (and (= (type MoreFuel__module._default.ValidRegState1) LayerTypeType) (forall ((arg0@@274 T@U) ) (! (= (type (|lambda#58| arg0@@274)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@274)) ))))
(assert  (=> true (forall ((|regs#0@@2| T@U) ) (!  (=> (and (= (type |regs#0@@2|) (MapType BoxType BoxType)) (or (|_module.__default.user__regs#canCall| (Lit |regs#0@@2|)) (and ($Is |regs#0@@2| (TMap Tclass._module.ARMReg Tclass._module.word)) (_module.__default.ValidRegState StartFuel__module._default.ValidRegState (Lit |regs#0@@2|))))) (and (forall ((|r#0@@2| T@U) ) (!  (=> (and (= (type |r#0@@2|) DatatypeTypeType) ($Is |r#0@@2| Tclass._module.ARMReg)) |_module.__default.USER__REGS#canCall|) :qid |ARMdefsd.141:9| :skolemid |2427| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |regs#0@@2|) ($Box |r#0@@2|)))) :pattern ( (MapType0Select _module.__default.USER__REGS ($Box |r#0@@2|))) )) (and (and (and (= StartFuel__module._default.ValidRegState ($LS MoreFuel__module._default.ValidRegState1)) (= StartFuelAssert__module._default.ValidRegState ($LS ($LS MoreFuel__module._default.ValidRegState1)))) (= (AsFuelBottom MoreFuel__module._default.ValidRegState1) MoreFuel__module._default.ValidRegState1)) (= (_module.__default.user__regs (Lit |regs#0@@2|)) (|Map#Glue| |lambda#56| (|lambda#58| |regs#0@@2|) (TMap Tclass._module.ARMReg Tclass._module.word)))))) :qid |ARMdefsd.137:20| :weight 3 :skolemid |2428| :pattern ( (_module.__default.user__regs (Lit |regs#0@@2|))) ))))
(assert (= (type Tclass._module.memstate) TyType))
(assert (= (Tag Tclass._module.memstate) Tagclass._module.memstate))
(assert (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 Tclass._module.memstate)) (and (= ($Box ($Unbox DatatypeTypeType bx@@100)) bx@@100) ($Is ($Unbox DatatypeTypeType bx@@100) Tclass._module.memstate))) :qid |unknown.0:0| :skolemid |2429| :pattern ( ($IsBox bx@@100 Tclass._module.memstate)) )))
(assert (= (type Tclass._module.addr) TyType))
(assert (= (Tag Tclass._module.addr) Tagclass._module.addr))
(assert (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 Tclass._module.addr)) (and (= ($Box ($Unbox intType bx@@101)) bx@@101) ($Is ($Unbox intType bx@@101) Tclass._module.addr))) :qid |unknown.0:0| :skolemid |2430| :pattern ( ($IsBox bx@@101 Tclass._module.addr)) )))
(assert (= (type StartFuel__module._default.ValidMemState) LayerTypeType))
(assert  (=> true (forall ((|pt#0@@3| T@U) (|m#0@@3| T@U) ) (!  (=> (and (and (= (type |pt#0@@3|) (SeqType BoxType)) (= (type |m#0@@3|) DatatypeTypeType)) (or (|_module.__default.user__mem#canCall| |pt#0@@3| |m#0@@3|) (and (and ($Is |pt#0@@3| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))) ($Is |m#0@@3| Tclass._module.memstate)) (and (_module.__default.WellformedAbsPTable |pt#0@@3|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@3|))))) ($Is (_module.__default.user__mem |pt#0@@3| |m#0@@3|) (TMap Tclass._module.addr Tclass._module.word))) :qid |ARMdefsd.144:19| :skolemid |2431| :pattern ( (_module.__default.user__mem |pt#0@@3| |m#0@@3|)) ))))
(assert (forall (($Heap@@65 T@U) (|pt#0@@4| T@U) (|m#0@@4| T@U) ) (!  (=> (and (and (and (= (type $Heap@@65) (MapType1Type refType)) (= (type |pt#0@@4|) (SeqType BoxType))) (= (type |m#0@@4|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@65) ($Is |pt#0@@4| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) ($Is |m#0@@4| Tclass._module.memstate))) (and (=> (|_module.__default.user__mem#requires| |pt#0@@4| |m#0@@4|) (and (_module.__default.WellformedAbsPTable |pt#0@@4|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@4|))) (=> (and (_module.__default.WellformedAbsPTable |pt#0@@4|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@4|)) (|_module.__default.user__mem#requires| |pt#0@@4| |m#0@@4|)))) :qid |ARMdefsd.144:10| :skolemid |2432| :pattern ( (|_module.__default.user__mem#requires| |pt#0@@4| |m#0@@4|) ($IsGoodHeap $Heap@@65)) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@275 T@U) ) (! (= (type (_module.memstate.addresses arg0@@275)) (MapType BoxType BoxType)) :qid |funType:_module.memstate.addresses| :pattern ( (_module.memstate.addresses arg0@@275)) )) (= (type StartFuel__module._default.PageBase) LayerTypeType)) (= (type _module.__default.TheValidAddressesRW) (MapType0Type BoxType boolType))) (= (type StartFuel__module._default.WordAligned) LayerTypeType)) (forall ((arg0@@276 T@U) ) (! (= (type (_module.__default.AllPagesInTable arg0@@276)) (MapType0Type BoxType boolType)) :qid |funType:_module.__default.AllPagesInTable| :pattern ( (_module.__default.AllPagesInTable arg0@@276)) ))) (= (type MoreFuel__module._default.ValidMemState0) LayerTypeType)) (= (type StartFuelAssert__module._default.ValidMemState) LayerTypeType)) (forall ((arg0@@277 T@U) (arg1@@144 T@U) (arg2@@99 T@U) ) (! (= (type (|lambda#59| arg0@@277 arg1@@144 arg2@@99)) (MapType0Type BoxType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@277 arg1@@144 arg2@@99)) ))) (forall ((arg0@@278 T@U) ) (! (= (type (|lambda#60| arg0@@278)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@278)) ))))
(assert  (=> true (forall (($Heap@@66 T@U) (|pt#0@@5| T@U) (|m#0@@5| T@U) ) (!  (=> (and (and (and (= (type $Heap@@66) (MapType1Type refType)) (= (type |pt#0@@5|) (SeqType BoxType))) (= (type |m#0@@5|) DatatypeTypeType)) (or (|_module.__default.user__mem#canCall| |pt#0@@5| |m#0@@5|) (and (and (and ($IsGoodHeap $Heap@@66) ($Is |pt#0@@5| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) ($Is |m#0@@5| Tclass._module.memstate)) (and (_module.__default.WellformedAbsPTable |pt#0@@5|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@5|))))) (and (forall ((|a#0@@5| Int) ) (!  (=> (and (_module.__default.isUInt32 |a#0@@5|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@5|)) (and (and (and (and (|_module.__default.ValidMem#canCall| |a#0@@5|) (=> (_module.__default.ValidMem |a#0@@5|) |_module.__default.TheValidAddressesRW#canCall|)) (=> (and |_module.__default.TheValidAddressesRW#canCall| (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U |a#0@@5|))))) (|_module.__default.addrIsSecure#canCall| |a#0@@5|))) (=> (and (|_module.__default.addrIsSecure#canCall| |a#0@@5|) (_module.__default.addrIsSecure |a#0@@5|)) (and (|_module.__default.PageBase#canCall| |a#0@@5|) (|_module.__default.AllPagesInTable#canCall| |pt#0@@5|)))) (=> (and (and (and (_module.__default.ValidMem |a#0@@5|) (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U |a#0@@5|))))) (_module.__default.addrIsSecure |a#0@@5|)) (U_2_bool (MapType0Select (_module.__default.AllPagesInTable |pt#0@@5|) ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@5|)))))) (_module.memstate.MemState_q |m#0@@5|)))) :qid |ARMdefsd.151:10| :skolemid |2433| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| (_module.memstate.addresses |m#0@@5|)) ($Box (int_2_U |a#0@@5|))))) :pattern ( (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@5|)) :pattern ( (_module.__default.addrIsSecure |a#0@@5|)) :pattern ( (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U |a#0@@5|)))) :pattern ( (_module.__default.ValidMem |a#0@@5|)) )) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState0)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState0)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState0) MoreFuel__module._default.ValidMemState0)) (= (_module.__default.user__mem |pt#0@@5| |m#0@@5|) (|Map#Glue| (|lambda#59| StartFuel__module._default.PageBase StartFuel__module._default.WordAligned |pt#0@@5|) (|lambda#60| |m#0@@5|) (TMap Tclass._module.addr Tclass._module.word)))))) :qid |ARMdefsd.144:10| :skolemid |2434| :pattern ( (_module.__default.user__mem |pt#0@@5| |m#0@@5|) ($IsGoodHeap $Heap@@66)) ))))
(assert  (and (and (= (type MoreFuel__module._default.ValidMemState1) LayerTypeType) (forall ((arg0@@279 T@U) (arg1@@145 T@U) (arg2@@100 T@U) ) (! (= (type (|lambda#61| arg0@@279 arg1@@145 arg2@@100)) (MapType0Type BoxType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@279 arg1@@145 arg2@@100)) ))) (forall ((arg0@@280 T@U) ) (! (= (type (|lambda#62| arg0@@280)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@280)) ))))
(assert  (=> true (forall (($Heap@@67 T@U) (|pt#0@@6| T@U) (|m#0@@6| T@U) ) (!  (=> (and (and (and (= (type $Heap@@67) (MapType1Type refType)) (= (type |pt#0@@6|) (SeqType BoxType))) (= (type |m#0@@6|) DatatypeTypeType)) (or (|_module.__default.user__mem#canCall| (Lit |pt#0@@6|) (Lit |m#0@@6|)) (and (and (and ($IsGoodHeap $Heap@@67) ($Is |pt#0@@6| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) ($Is |m#0@@6| Tclass._module.memstate)) (and (U_2_bool (Lit (bool_2_U (_module.__default.WellformedAbsPTable (Lit |pt#0@@6|))))) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |m#0@@6|)))))) (and (forall ((|a#0@@6| Int) ) (!  (=> (and (_module.__default.isUInt32 |a#0@@6|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@6|)) (and (and (and (and (|_module.__default.ValidMem#canCall| |a#0@@6|) (=> (_module.__default.ValidMem |a#0@@6|) |_module.__default.TheValidAddressesRW#canCall|)) (=> (and |_module.__default.TheValidAddressesRW#canCall| (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U |a#0@@6|))))) (|_module.__default.addrIsSecure#canCall| |a#0@@6|))) (=> (and (|_module.__default.addrIsSecure#canCall| |a#0@@6|) (_module.__default.addrIsSecure |a#0@@6|)) (and (|_module.__default.PageBase#canCall| |a#0@@6|) (|_module.__default.AllPagesInTable#canCall| (Lit |pt#0@@6|))))) (=> (and (and (and (_module.__default.ValidMem |a#0@@6|) (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U |a#0@@6|))))) (_module.__default.addrIsSecure |a#0@@6|)) (U_2_bool (MapType0Select (Lit (_module.__default.AllPagesInTable (Lit |pt#0@@6|))) ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@6|)))))) (_module.memstate.MemState_q (Lit |m#0@@6|))))) :qid |ARMdefsd.151:10| :skolemid |2435| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| (_module.memstate.addresses |m#0@@6|)) ($Box (int_2_U |a#0@@6|))))) :pattern ( (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@6|)) :pattern ( (_module.__default.addrIsSecure |a#0@@6|)) :pattern ( (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U |a#0@@6|)))) :pattern ( (_module.__default.ValidMem |a#0@@6|)) )) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState1)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState1)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState1) MoreFuel__module._default.ValidMemState1)) (= (_module.__default.user__mem (Lit |pt#0@@6|) (Lit |m#0@@6|)) (|Map#Glue| (|lambda#61| StartFuel__module._default.PageBase StartFuel__module._default.WordAligned |pt#0@@6|) (|lambda#62| |m#0@@6|) (TMap Tclass._module.addr Tclass._module.word)))))) :qid |ARMdefsd.144:10| :weight 3 :skolemid |2436| :pattern ( (_module.__default.user__mem (Lit |pt#0@@6|) (Lit |m#0@@6|)) ($IsGoodHeap $Heap@@67)) ))))
(assert  (=> true (forall ((|v#0@@9| Int) ) (!  (=> (or (|_module.__default.psr__mask__mode#canCall| |v#0@@9|) (_module.__default.isUInt32 |v#0@@9|)) (_module.__default.isUInt32 (_module.__default.psr__mask__mode |v#0@@9|))) :qid |ARMdefsd.168:24| :skolemid |2437| :pattern ( (_module.__default.psr__mask__mode |v#0@@9|)) ))))
(assert (forall ((|v#0@@10| Int) ) (!  (=> (_module.__default.isUInt32 |v#0@@10|) (and (=> (|_module.__default.psr__mask__mode#requires| |v#0@@10|) true) (=> true (|_module.__default.psr__mask__mode#requires| |v#0@@10|)))) :qid |ARMdefsd.168:24| :skolemid |2438| :pattern ( (|_module.__default.psr__mask__mode#requires| |v#0@@10|)) )))
(assert  (=> true (forall ((|v#0@@11| Int) ) (!  (=> (or (|_module.__default.psr__mask__mode#canCall| |v#0@@11|) (_module.__default.isUInt32 |v#0@@11|)) (and (|_module.__default.BitwiseAnd#canCall| |v#0@@11| (LitInt 31)) (= (_module.__default.psr__mask__mode |v#0@@11|) (_module.__default.BitwiseAnd |v#0@@11| (LitInt 31))))) :qid |ARMdefsd.168:24| :skolemid |2439| :pattern ( (_module.__default.psr__mask__mode |v#0@@11|)) ))))
(assert  (=> true (forall ((|v#0@@12| Int) ) (!  (=> (or (|_module.__default.psr__mask__mode#canCall| (LitInt |v#0@@12|)) (_module.__default.isUInt32 |v#0@@12|)) (and (|_module.__default.BitwiseAnd#canCall| (LitInt |v#0@@12|) (LitInt 31)) (= (_module.__default.psr__mask__mode (LitInt |v#0@@12|)) (_module.__default.BitwiseAnd (LitInt |v#0@@12|) (LitInt 31))))) :qid |ARMdefsd.168:24| :weight 3 :skolemid |2440| :pattern ( (_module.__default.psr__mask__mode (LitInt |v#0@@12|))) ))))
(assert  (=> true (forall ((|v#0@@13| Int) ) (!  (=> (or (|_module.__default.psr__mask__fiq#canCall| |v#0@@13|) (_module.__default.isUInt32 |v#0@@13|)) (_module.__default.isUInt32 (_module.__default.psr__mask__fiq |v#0@@13|))) :qid |ARMdefsd.173:23| :skolemid |2441| :pattern ( (_module.__default.psr__mask__fiq |v#0@@13|)) ))))
(assert (forall ((|v#0@@14| Int) ) (!  (=> (_module.__default.isUInt32 |v#0@@14|) (and (=> (|_module.__default.psr__mask__fiq#requires| |v#0@@14|) true) (=> true (|_module.__default.psr__mask__fiq#requires| |v#0@@14|)))) :qid |ARMdefsd.173:23| :skolemid |2442| :pattern ( (|_module.__default.psr__mask__fiq#requires| |v#0@@14|)) )))
(assert  (=> true (forall ((|v#0@@15| Int) ) (!  (=> (or (|_module.__default.psr__mask__fiq#canCall| |v#0@@15|) (_module.__default.isUInt32 |v#0@@15|)) (and (|_module.__default.BitwiseAnd#canCall| |v#0@@15| (LitInt 64)) (= (_module.__default.psr__mask__fiq |v#0@@15|) (_module.__default.BitwiseAnd |v#0@@15| (LitInt 64))))) :qid |ARMdefsd.173:23| :skolemid |2443| :pattern ( (_module.__default.psr__mask__fiq |v#0@@15|)) ))))
(assert  (=> true (forall ((|v#0@@16| Int) ) (!  (=> (or (|_module.__default.psr__mask__fiq#canCall| (LitInt |v#0@@16|)) (_module.__default.isUInt32 |v#0@@16|)) (and (|_module.__default.BitwiseAnd#canCall| (LitInt |v#0@@16|) (LitInt 64)) (= (_module.__default.psr__mask__fiq (LitInt |v#0@@16|)) (_module.__default.BitwiseAnd (LitInt |v#0@@16|) (LitInt 64))))) :qid |ARMdefsd.173:23| :weight 3 :skolemid |2444| :pattern ( (_module.__default.psr__mask__fiq (LitInt |v#0@@16|))) ))))
(assert  (=> true (forall ((|v#0@@17| Int) ) (!  (=> (or (|_module.__default.psr__mask__irq#canCall| |v#0@@17|) (_module.__default.isUInt32 |v#0@@17|)) (_module.__default.isUInt32 (_module.__default.psr__mask__irq |v#0@@17|))) :qid |ARMdefsd.178:23| :skolemid |2445| :pattern ( (_module.__default.psr__mask__irq |v#0@@17|)) ))))
(assert (forall ((|v#0@@18| Int) ) (!  (=> (_module.__default.isUInt32 |v#0@@18|) (and (=> (|_module.__default.psr__mask__irq#requires| |v#0@@18|) true) (=> true (|_module.__default.psr__mask__irq#requires| |v#0@@18|)))) :qid |ARMdefsd.178:23| :skolemid |2446| :pattern ( (|_module.__default.psr__mask__irq#requires| |v#0@@18|)) )))
(assert  (=> true (forall ((|v#0@@19| Int) ) (!  (=> (or (|_module.__default.psr__mask__irq#canCall| |v#0@@19|) (_module.__default.isUInt32 |v#0@@19|)) (and (|_module.__default.BitwiseAnd#canCall| |v#0@@19| (LitInt 128)) (= (_module.__default.psr__mask__irq |v#0@@19|) (_module.__default.BitwiseAnd |v#0@@19| (LitInt 128))))) :qid |ARMdefsd.178:23| :skolemid |2447| :pattern ( (_module.__default.psr__mask__irq |v#0@@19|)) ))))
(assert  (=> true (forall ((|v#0@@20| Int) ) (!  (=> (or (|_module.__default.psr__mask__irq#canCall| (LitInt |v#0@@20|)) (_module.__default.isUInt32 |v#0@@20|)) (and (|_module.__default.BitwiseAnd#canCall| (LitInt |v#0@@20|) (LitInt 128)) (= (_module.__default.psr__mask__irq (LitInt |v#0@@20|)) (_module.__default.BitwiseAnd (LitInt |v#0@@20|) (LitInt 128))))) :qid |ARMdefsd.178:23| :weight 3 :skolemid |2448| :pattern ( (_module.__default.psr__mask__irq (LitInt |v#0@@20|))) ))))
(assert  (=> true (forall ((|v#0@@21| Int) ) (!  (=> (or (|_module.__default.ValidPsrWord#canCall| |v#0@@21|) (_module.__default.isUInt32 |v#0@@21|)) true) :qid |ARMdefsd.183:24| :skolemid |2449| :pattern ( (_module.__default.ValidPsrWord |v#0@@21|)) ))))
(assert (forall ((|v#0@@22| Int) ) (!  (=> (_module.__default.isUInt32 |v#0@@22|) (and (=> (|_module.__default.ValidPsrWord#requires| |v#0@@22|) true) (=> true (|_module.__default.ValidPsrWord#requires| |v#0@@22|)))) :qid |ARMdefsd.183:24| :skolemid |2450| :pattern ( (|_module.__default.ValidPsrWord#requires| |v#0@@22|)) )))
(assert  (=> true (forall ((|v#0@@23| Int) ) (!  (=> (or (|_module.__default.ValidPsrWord#canCall| |v#0@@23|) (_module.__default.isUInt32 |v#0@@23|)) (and (and (|_module.__default.psr__mask__mode#canCall| |v#0@@23|) (|_module.__default.ValidModeEncoding#canCall| (_module.__default.psr__mask__mode |v#0@@23|))) (and (=> (_module.__default.ValidPsrWord |v#0@@23|) (_module.__default.ValidModeEncoding (_module.__default.psr__mask__mode |v#0@@23|))) (=> (_module.__default.ValidModeEncoding (_module.__default.psr__mask__mode |v#0@@23|)) (_module.__default.ValidPsrWord |v#0@@23|))))) :qid |ARMdefsd.183:24| :skolemid |2451| :pattern ( (_module.__default.ValidPsrWord |v#0@@23|)) ))))
(assert  (=> true (forall ((|v#0@@24| Int) ) (!  (=> (or (|_module.__default.ValidPsrWord#canCall| (LitInt |v#0@@24|)) (_module.__default.isUInt32 |v#0@@24|)) (and (and (|_module.__default.psr__mask__mode#canCall| (LitInt |v#0@@24|)) (|_module.__default.ValidModeEncoding#canCall| (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@24|))))) (and (=> (_module.__default.ValidPsrWord (LitInt |v#0@@24|)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidModeEncoding (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@24|)))))))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidModeEncoding (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@24|))))))) (_module.__default.ValidPsrWord (LitInt |v#0@@24|)))))) :qid |ARMdefsd.183:24| :weight 3 :skolemid |2452| :pattern ( (_module.__default.ValidPsrWord (LitInt |v#0@@24|))) ))))
(assert  (=> true (forall ((|v#0@@25| Int) ) (!  (=> (or (|_module.__default.decode__psr#canCall| |v#0@@25|) (and (_module.__default.isUInt32 |v#0@@25|) (_module.__default.ValidPsrWord |v#0@@25|))) ($Is (_module.__default.decode__psr |v#0@@25|) Tclass._module.PSR)) :qid |ARMdefsd.189:21| :skolemid |2453| :pattern ( (_module.__default.decode__psr |v#0@@25|)) ))))
(assert (forall ((|v#0@@26| Int) ) (!  (=> (_module.__default.isUInt32 |v#0@@26|) (and (=> (|_module.__default.decode__psr#requires| |v#0@@26|) (_module.__default.ValidPsrWord |v#0@@26|)) (=> (_module.__default.ValidPsrWord |v#0@@26|) (|_module.__default.decode__psr#requires| |v#0@@26|)))) :qid |ARMdefsd.189:21| :skolemid |2454| :pattern ( (|_module.__default.decode__psr#requires| |v#0@@26|)) )))
(assert  (and (forall ((arg0@@281 T@U) (arg1@@146 Bool) (arg2@@101 Bool) ) (! (= (type (|#_module.PSR.PSR| arg0@@281 arg1@@146 arg2@@101)) DatatypeTypeType) :qid |funType:#_module.PSR.PSR| :pattern ( (|#_module.PSR.PSR| arg0@@281 arg1@@146 arg2@@101)) )) (forall ((arg0@@282 Int) ) (! (= (type (_module.__default.decode__mode arg0@@282)) DatatypeTypeType) :qid |funType:_module.__default.decode__mode| :pattern ( (_module.__default.decode__mode arg0@@282)) ))))
(assert  (=> true (forall ((|v#0@@27| Int) ) (!  (=> (or (|_module.__default.decode__psr#canCall| |v#0@@27|) (and (_module.__default.isUInt32 |v#0@@27|) (_module.__default.ValidPsrWord |v#0@@27|))) (and (and (and (and (|_module.__default.psr__mask__mode#canCall| |v#0@@27|) (|_module.__default.decode__mode#canCall| (_module.__default.psr__mask__mode |v#0@@27|))) (|_module.__default.BitwiseAnd#canCall| |v#0@@27| (LitInt 64))) (|_module.__default.BitwiseAnd#canCall| |v#0@@27| (LitInt 128))) (= (_module.__default.decode__psr |v#0@@27|) (|#_module.PSR.PSR| (_module.__default.decode__mode (_module.__default.psr__mask__mode |v#0@@27|)) (not (= (_module.__default.BitwiseAnd |v#0@@27| (LitInt 64)) 0)) (not (= (_module.__default.BitwiseAnd |v#0@@27| (LitInt 128)) 0)))))) :qid |ARMdefsd.189:21| :skolemid |2455| :pattern ( (_module.__default.decode__psr |v#0@@27|)) ))))
(assert  (=> true (forall ((|v#0@@28| Int) ) (!  (=> (or (|_module.__default.decode__psr#canCall| (LitInt |v#0@@28|)) (and (_module.__default.isUInt32 |v#0@@28|) (U_2_bool (Lit (bool_2_U (_module.__default.ValidPsrWord (LitInt |v#0@@28|))))))) (and (and (and (and (|_module.__default.psr__mask__mode#canCall| (LitInt |v#0@@28|)) (|_module.__default.decode__mode#canCall| (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@28|))))) (|_module.__default.BitwiseAnd#canCall| (LitInt |v#0@@28|) (LitInt 64))) (|_module.__default.BitwiseAnd#canCall| (LitInt |v#0@@28|) (LitInt 128))) (= (_module.__default.decode__psr (LitInt |v#0@@28|)) (|#_module.PSR.PSR| (Lit (_module.__default.decode__mode (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@28|))))) (not (= (_module.__default.BitwiseAnd (LitInt |v#0@@28|) (LitInt 64)) 0)) (not (= (_module.__default.BitwiseAnd (LitInt |v#0@@28|) (LitInt 128)) 0)))))) :qid |ARMdefsd.189:21| :weight 3 :skolemid |2456| :pattern ( (_module.__default.decode__psr (LitInt |v#0@@28|))) ))))
(assert (= (type Tclass._module.SCR) TyType))
(assert (= (Tag Tclass._module.SCR) Tagclass._module.SCR))
(assert (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 Tclass._module.SCR)) (and (= ($Box ($Unbox DatatypeTypeType bx@@102)) bx@@102) ($Is ($Unbox DatatypeTypeType bx@@102) Tclass._module.SCR))) :qid |unknown.0:0| :skolemid |2457| :pattern ( ($IsBox bx@@102 Tclass._module.SCR)) )))
(assert (forall ((arg0@@283 Int) ) (! (= (type (_module.__default.decode__scr arg0@@283)) DatatypeTypeType) :qid |funType:_module.__default.decode__scr| :pattern ( (_module.__default.decode__scr arg0@@283)) )))
(assert  (=> true (forall ((|v#0@@29| Int) ) (!  (=> (or (|_module.__default.decode__scr#canCall| |v#0@@29|) (_module.__default.isUInt32 |v#0@@29|)) ($Is (_module.__default.decode__scr |v#0@@29|) Tclass._module.SCR)) :qid |ARMdefsd.199:21| :skolemid |2458| :pattern ( (_module.__default.decode__scr |v#0@@29|)) ))))
(assert (forall ((|v#0@@30| Int) ) (!  (=> (_module.__default.isUInt32 |v#0@@30|) (and (=> (|_module.__default.decode__scr#requires| |v#0@@30|) true) (=> true (|_module.__default.decode__scr#requires| |v#0@@30|)))) :qid |ARMdefsd.199:21| :skolemid |2459| :pattern ( (|_module.__default.decode__scr#requires| |v#0@@30|)) )))
(assert  (and (forall ((arg0@@284 T@U) (arg1@@147 Bool) (arg2@@102 Bool) ) (! (= (type (|#_module.SCR.SCRT| arg0@@284 arg1@@147 arg2@@102)) DatatypeTypeType) :qid |funType:#_module.SCR.SCRT| :pattern ( (|#_module.SCR.SCRT| arg0@@284 arg1@@147 arg2@@102)) )) (= (type |#_module.world.NotSecure|) DatatypeTypeType)))
(assert  (=> true (forall ((|v#0@@31| Int) ) (!  (=> (or (|_module.__default.decode__scr#canCall| |v#0@@31|) (_module.__default.isUInt32 |v#0@@31|)) (and (and (and (|_module.__default.BitwiseAnd#canCall| |v#0@@31| (LitInt 1)) (|_module.__default.BitwiseAnd#canCall| |v#0@@31| (LitInt 2))) (|_module.__default.BitwiseAnd#canCall| |v#0@@31| (LitInt 4))) (= (_module.__default.decode__scr |v#0@@31|) (|#_module.SCR.SCRT| (ite (not (= (_module.__default.BitwiseAnd |v#0@@31| (LitInt 1)) 0)) |#_module.world.NotSecure| |#_module.world.Secure|) (not (= (_module.__default.BitwiseAnd |v#0@@31| (LitInt 2)) 0)) (not (= (_module.__default.BitwiseAnd |v#0@@31| (LitInt 4)) 0)))))) :qid |ARMdefsd.199:21| :skolemid |2460| :pattern ( (_module.__default.decode__scr |v#0@@31|)) ))))
(assert  (=> true (forall ((|v#0@@32| Int) ) (!  (=> (or (|_module.__default.decode__scr#canCall| (LitInt |v#0@@32|)) (_module.__default.isUInt32 |v#0@@32|)) (and (and (and (|_module.__default.BitwiseAnd#canCall| (LitInt |v#0@@32|) (LitInt 1)) (|_module.__default.BitwiseAnd#canCall| (LitInt |v#0@@32|) (LitInt 2))) (|_module.__default.BitwiseAnd#canCall| (LitInt |v#0@@32|) (LitInt 4))) (= (_module.__default.decode__scr (LitInt |v#0@@32|)) (|#_module.SCR.SCRT| (ite (not (= (_module.__default.BitwiseAnd (LitInt |v#0@@32|) (LitInt 1)) 0)) |#_module.world.NotSecure| |#_module.world.Secure|) (not (= (_module.__default.BitwiseAnd (LitInt |v#0@@32|) (LitInt 2)) 0)) (not (= (_module.__default.BitwiseAnd (LitInt |v#0@@32|) (LitInt 4)) 0)))))) :qid |ARMdefsd.199:21| :weight 3 :skolemid |2461| :pattern ( (_module.__default.decode__scr (LitInt |v#0@@32|))) ))))
(assert (forall ((arg0@@285 T@U) (arg1@@148 Int) ) (! (= (type (_module.__default.decode__ttbr arg0@@285 arg1@@148)) DatatypeTypeType) :qid |funType:_module.__default.decode__ttbr| :pattern ( (_module.__default.decode__ttbr arg0@@285 arg1@@148)) )))
(assert (forall (($ly@@151 T@U) (|v#0@@33| Int) ) (!  (=> (= (type $ly@@151) LayerTypeType) (= (_module.__default.decode__ttbr ($LS $ly@@151) |v#0@@33|) (_module.__default.decode__ttbr $ly@@151 |v#0@@33|))) :qid |ARMdefsd.208:10| :skolemid |2462| :pattern ( (_module.__default.decode__ttbr ($LS $ly@@151) |v#0@@33|)) )))
(assert (forall (($ly@@152 T@U) (|v#0@@34| Int) ) (!  (=> (= (type $ly@@152) LayerTypeType) (= (_module.__default.decode__ttbr $ly@@152 |v#0@@34|) (_module.__default.decode__ttbr $LZ |v#0@@34|))) :qid |ARMdefsd.208:10| :skolemid |2463| :pattern ( (_module.__default.decode__ttbr (AsFuelBottom $ly@@152) |v#0@@34|)) )))
(assert (= (type Tclass._module.TTBR) TyType))
(assert (= (Tag Tclass._module.TTBR) Tagclass._module.TTBR))
(assert (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 Tclass._module.TTBR)) (and (= ($Box ($Unbox DatatypeTypeType bx@@103)) bx@@103) ($Is ($Unbox DatatypeTypeType bx@@103) Tclass._module.TTBR))) :qid |unknown.0:0| :skolemid |2464| :pattern ( ($IsBox bx@@103 Tclass._module.TTBR)) )))
(assert (= (type StartFuel__module._default.PageAligned) LayerTypeType))
(assert  (=> true (forall (($ly@@153 T@U) ($Heap@@68 T@U) (|v#0@@35| Int) ) (!  (=> (and (and (= (type $ly@@153) LayerTypeType) (= (type $Heap@@68) (MapType1Type refType))) (or (|_module.__default.decode__ttbr#canCall| |v#0@@35|) (and ($IsGoodHeap $Heap@@68) (_module.__default.isUInt32 |v#0@@35|)))) (and (_module.__default.PageAligned StartFuel__module._default.PageAligned (_module.TTBR.ptbase (_module.__default.decode__ttbr $ly@@153 |v#0@@35|))) ($Is (_module.__default.decode__ttbr $ly@@153 |v#0@@35|) Tclass._module.TTBR))) :qid |ARMdefsd.208:10| :skolemid |2465| :pattern ( (_module.__default.decode__ttbr $ly@@153 |v#0@@35|) ($IsGoodHeap $Heap@@68)) ))))
(assert (forall (($ly@@154 T@U) (|v#0@@36| Int) ) (!  (=> (and (= (type $ly@@154) LayerTypeType) (_module.__default.isUInt32 |v#0@@36|)) (and (=> (|_module.__default.decode__ttbr#requires| $ly@@154 |v#0@@36|) true) (=> true (|_module.__default.decode__ttbr#requires| $ly@@154 |v#0@@36|)))) :qid |ARMdefsd.208:10| :skolemid |2466| :pattern ( (|_module.__default.decode__ttbr#requires| $ly@@154 |v#0@@36|)) )))
(assert (forall ((arg0@@286 Int) ) (! (= (type (|#_module.TTBR.TTBR| arg0@@286)) DatatypeTypeType) :qid |funType:#_module.TTBR.TTBR| :pattern ( (|#_module.TTBR.TTBR| arg0@@286)) )))
(assert  (=> true (forall (($ly@@155 T@U) (|v#0@@37| Int) ) (!  (=> (and (= (type $ly@@155) LayerTypeType) (or (|_module.__default.decode__ttbr#canCall| |v#0@@37|) (_module.__default.isUInt32 |v#0@@37|))) (and (|_module.__default.PageBase#canCall| |v#0@@37|) (= (_module.__default.decode__ttbr ($LS $ly@@155) |v#0@@37|) (|#_module.TTBR.TTBR| (_module.__default.PageBase StartFuel__module._default.PageBase |v#0@@37|))))) :qid |ARMdefsd.208:10| :skolemid |2467| :pattern ( (_module.__default.decode__ttbr ($LS $ly@@155) |v#0@@37|)) ))))
(assert  (=> true (forall (($ly@@156 T@U) (|v#0@@38| Int) ) (!  (=> (and (= (type $ly@@156) LayerTypeType) (or (|_module.__default.decode__ttbr#canCall| (LitInt |v#0@@38|)) (_module.__default.isUInt32 |v#0@@38|))) (and (|_module.__default.PageBase#canCall| (LitInt |v#0@@38|)) (= (_module.__default.decode__ttbr ($LS $ly@@156) (LitInt |v#0@@38|)) (|#_module.TTBR.TTBR| (_module.__default.PageBase StartFuel__module._default.PageBase (LitInt |v#0@@38|)))))) :qid |ARMdefsd.208:10| :weight 3 :skolemid |2468| :pattern ( (_module.__default.decode__ttbr ($LS $ly@@156) (LitInt |v#0@@38|))) ))))
(assert (= (type Tclass._module.SReg) TyType))
(assert (= (Tag Tclass._module.SReg) Tagclass._module.SReg))
(assert (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 Tclass._module.SReg)) (and (= ($Box ($Unbox DatatypeTypeType bx@@104)) bx@@104) ($Is ($Unbox DatatypeTypeType bx@@104) Tclass._module.SReg))) :qid |unknown.0:0| :skolemid |2469| :pattern ( ($IsBox bx@@104 Tclass._module.SReg)) )))
(assert  (=> true (forall ((|sr#0| T@U) ) (!  (=> (and (= (type |sr#0|) DatatypeTypeType) (or (|_module.__default.ValidSReg#canCall| |sr#0|) ($Is |sr#0| Tclass._module.SReg))) true) :qid |ARMdefsd.215:21| :skolemid |2470| :pattern ( (_module.__default.ValidSReg |sr#0|)) ))))
(assert (forall (($Heap@@69 T@U) (|sr#0@@0| T@U) ) (!  (=> (and (and (= (type $Heap@@69) (MapType1Type refType)) (= (type |sr#0@@0|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@69) ($Is |sr#0@@0| Tclass._module.SReg))) (and (=> (|_module.__default.ValidSReg#requires| |sr#0@@0|) true) (=> true (|_module.__default.ValidSReg#requires| |sr#0@@0|)))) :qid |ARMdefsd.215:11| :skolemid |2471| :pattern ( (|_module.__default.ValidSReg#requires| |sr#0@@0|) ($IsGoodHeap $Heap@@69)) )))
(assert (forall ((arg0@@287 T@U) ) (! (= (type (_module.SReg.m arg0@@287)) DatatypeTypeType) :qid |funType:_module.SReg.m| :pattern ( (_module.SReg.m arg0@@287)) )))
(assert  (=> true (forall (($Heap@@70 T@U) (|sr#0@@1| T@U) ) (!  (=> (and (and (= (type $Heap@@70) (MapType1Type refType)) (= (type |sr#0@@1|) DatatypeTypeType)) (or (|_module.__default.ValidSReg#canCall| |sr#0@@1|) (and ($IsGoodHeap $Heap@@70) ($Is |sr#0@@1| Tclass._module.SReg)))) (and (=> (_module.__default.ValidSReg |sr#0@@1|) (=> (_module.SReg.spsr_q |sr#0@@1|) (not (= (_module.SReg.m |sr#0@@1|) |#_module.mode.User|)))) (=> (=> (_module.SReg.spsr_q |sr#0@@1|) (not (= (_module.SReg.m |sr#0@@1|) |#_module.mode.User|))) (_module.__default.ValidSReg |sr#0@@1|)))) :qid |ARMdefsd.215:11| :skolemid |2472| :pattern ( (_module.__default.ValidSReg |sr#0@@1|) ($IsGoodHeap $Heap@@70)) ))))
(assert  (=> true (forall (($Heap@@71 T@U) (|sr#0@@2| T@U) ) (!  (=> (and (and (= (type $Heap@@71) (MapType1Type refType)) (= (type |sr#0@@2|) DatatypeTypeType)) (or (|_module.__default.ValidSReg#canCall| (Lit |sr#0@@2|)) (and ($IsGoodHeap $Heap@@71) ($Is |sr#0@@2| Tclass._module.SReg)))) (and (=> (_module.__default.ValidSReg (Lit |sr#0@@2|)) (U_2_bool (Lit (bool_2_U  (=> (_module.SReg.spsr_q (Lit |sr#0@@2|)) (not (= (_module.SReg.m (Lit |sr#0@@2|)) |#_module.mode.User|))))))) (=> (U_2_bool (Lit (bool_2_U  (=> (_module.SReg.spsr_q (Lit |sr#0@@2|)) (not (= (_module.SReg.m (Lit |sr#0@@2|)) |#_module.mode.User|)))))) (_module.__default.ValidSReg (Lit |sr#0@@2|))))) :qid |ARMdefsd.215:11| :weight 3 :skolemid |2473| :pattern ( (_module.__default.ValidSReg (Lit |sr#0@@2|)) ($IsGoodHeap $Heap@@71)) ))))
(assert (= (type Tclass._module.config) TyType))
(assert (= (Tag Tclass._module.config) Tagclass._module.config))
(assert (forall ((bx@@105 T@U) ) (!  (=> (and (= (type bx@@105) BoxType) ($IsBox bx@@105 Tclass._module.config)) (and (= ($Box ($Unbox DatatypeTypeType bx@@105)) bx@@105) ($Is ($Unbox DatatypeTypeType bx@@105) Tclass._module.config))) :qid |unknown.0:0| :skolemid |2474| :pattern ( ($IsBox bx@@105 Tclass._module.config)) )))
(assert (forall ((arg0@@288 T@U) (arg1@@149 T@U) (arg2@@103 Int) ) (! (= (type (_module.__default.update__config__from__sreg arg0@@288 arg1@@149 arg2@@103)) DatatypeTypeType) :qid |funType:_module.__default.update__config__from__sreg| :pattern ( (_module.__default.update__config__from__sreg arg0@@288 arg1@@149 arg2@@103)) )))
(assert  (=> true (forall (($Heap@@72 T@U) (|s#0@@43| T@U) (|sr#0@@3| T@U) (|v#0@@39| Int) ) (!  (=> (and (and (and (= (type $Heap@@72) (MapType1Type refType)) (= (type |s#0@@43|) DatatypeTypeType)) (= (type |sr#0@@3|) DatatypeTypeType)) (or (|_module.__default.update__config__from__sreg#canCall| |s#0@@43| |sr#0@@3| |v#0@@39|) (and (and (and (and ($IsGoodHeap $Heap@@72) ($Is |s#0@@43| Tclass._module.state)) ($Is |sr#0@@3| Tclass._module.SReg)) (_module.__default.isUInt32 |v#0@@39|)) (and (and (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (_module.state.sregs |s#0@@43|) (_module.state.conf |s#0@@43|)) (_module.__default.ValidSReg |sr#0@@3|)) (=> (or (_module.SReg.cpsr_q |sr#0@@3|) (_module.SReg.spsr_q |sr#0@@3|)) (_module.__default.ValidPsrWord |v#0@@39|)))))) (and (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (|Map#Build| (_module.state.sregs |s#0@@43|) ($Box |sr#0@@3|) ($Box (int_2_U |v#0@@39|))) (_module.__default.update__config__from__sreg |s#0@@43| |sr#0@@3| |v#0@@39|)) ($Is (_module.__default.update__config__from__sreg |s#0@@43| |sr#0@@3| |v#0@@39|) Tclass._module.config))) :qid |ARMdefsd.220:10| :skolemid |2475| :pattern ( (_module.__default.update__config__from__sreg |s#0@@43| |sr#0@@3| |v#0@@39|) ($IsGoodHeap $Heap@@72)) ))))
(assert (forall (($Heap@@73 T@U) (|s#0@@44| T@U) (|sr#0@@4| T@U) (|v#0@@40| Int) ) (!  (=> (and (and (= (type $Heap@@73) (MapType1Type refType)) (= (type |s#0@@44|) DatatypeTypeType)) (= (type |sr#0@@4|) DatatypeTypeType)) (=> (and (and (and ($IsGoodHeap $Heap@@73) ($Is |s#0@@44| Tclass._module.state)) ($Is |sr#0@@4| Tclass._module.SReg)) (_module.__default.isUInt32 |v#0@@40|)) (and (=> (|_module.__default.update__config__from__sreg#requires| |s#0@@44| |sr#0@@4| |v#0@@40|) (and (and (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (_module.state.sregs |s#0@@44|) (_module.state.conf |s#0@@44|)) (_module.__default.ValidSReg |sr#0@@4|)) (=> (or (_module.SReg.cpsr_q |sr#0@@4|) (_module.SReg.spsr_q |sr#0@@4|)) (_module.__default.ValidPsrWord |v#0@@40|)))) (=> (and (and (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (_module.state.sregs |s#0@@44|) (_module.state.conf |s#0@@44|)) (_module.__default.ValidSReg |sr#0@@4|)) (=> (or (_module.SReg.cpsr_q |sr#0@@4|) (_module.SReg.spsr_q |sr#0@@4|)) (_module.__default.ValidPsrWord |v#0@@40|))) (|_module.__default.update__config__from__sreg#requires| |s#0@@44| |sr#0@@4| |v#0@@40|))))) :qid |ARMdefsd.220:10| :skolemid |2476| :pattern ( (|_module.__default.update__config__from__sreg#requires| |s#0@@44| |sr#0@@4| |v#0@@40|) ($IsGoodHeap $Heap@@73)) )))
(assert  (and (and (and (and (and (and (and (= (type |#_module.SReg.cpsr|) DatatypeTypeType) (= (type |#_module.SReg.SCR|) DatatypeTypeType)) (= (type |#_module.SReg.ttbr0|) DatatypeTypeType)) (= (type |#_module.SReg.TLBIALL|) DatatypeTypeType)) (= (type MoreFuel__module._default.ValidSRegState2) LayerTypeType)) (forall ((arg0@@289 T@U) (arg1@@150 T@U) (arg2@@104 T@U) (arg3@@68 Bool) (arg4@@55 T@U) (arg5@@44 Int) (arg6@@34 Int) ) (! (= (type (|#_module.config.Config| arg0@@289 arg1@@150 arg2@@104 arg3@@68 arg4@@55 arg5@@44 arg6@@34)) DatatypeTypeType) :qid |funType:#_module.config.Config| :pattern ( (|#_module.config.Config| arg0@@289 arg1@@150 arg2@@104 arg3@@68 arg4@@55 arg5@@44 arg6@@34)) ))) (forall ((arg0@@290 T@U) ) (! (= (type (_module.config.ttbr0 arg0@@290)) DatatypeTypeType) :qid |funType:_module.config.ttbr0| :pattern ( (_module.config.ttbr0 arg0@@290)) ))) (forall ((arg0@@291 T@U) ) (! (= (type (_module.config.ex arg0@@291)) DatatypeTypeType) :qid |funType:_module.config.ex| :pattern ( (_module.config.ex arg0@@291)) ))))
(assert  (=> true (forall (($Heap@@74 T@U) (|s#0@@45| T@U) (|sr#0@@5| T@U) (|v#0@@41| Int) ) (!  (=> (and (and (and (= (type $Heap@@74) (MapType1Type refType)) (= (type |s#0@@45|) DatatypeTypeType)) (= (type |sr#0@@5|) DatatypeTypeType)) (or (|_module.__default.update__config__from__sreg#canCall| |s#0@@45| |sr#0@@5| |v#0@@41|) (and (and (and (and ($IsGoodHeap $Heap@@74) ($Is |s#0@@45| Tclass._module.state)) ($Is |sr#0@@5| Tclass._module.SReg)) (_module.__default.isUInt32 |v#0@@41|)) (and (and (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (_module.state.sregs |s#0@@45|) (_module.state.conf |s#0@@45|)) (_module.__default.ValidSReg |sr#0@@5|)) (=> (or (_module.SReg.cpsr_q |sr#0@@5|) (_module.SReg.spsr_q |sr#0@@5|)) (_module.__default.ValidPsrWord |v#0@@41|)))))) (and (and (=> (= |sr#0@@5| (Lit |#_module.SReg.cpsr|)) (and (_module.state.State_q |s#0@@45|) (and (and (and (and (and (and (|_module.__default.decode__psr#canCall| |v#0@@41|) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))))) (=> (not (= |sr#0@@5| (Lit |#_module.SReg.cpsr|))) (and (=> (= |sr#0@@5| (Lit |#_module.SReg.SCR|)) (and (_module.state.State_q |s#0@@45|) (and (and (and (and (and (and (_module.config.Config_q (_module.state.conf |s#0@@45|)) (|_module.__default.decode__scr#canCall| |v#0@@41|)) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))))) (=> (not (= |sr#0@@5| (Lit |#_module.SReg.SCR|))) (and (=> (= |sr#0@@5| (Lit |#_module.SReg.ttbr0|)) (and (_module.state.State_q |s#0@@45|) (and (and (and (and (and (_module.config.Config_q (_module.state.conf |s#0@@45|)) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (|_module.__default.decode__ttbr#canCall| |v#0@@41|)) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))))) (=> (not (= |sr#0@@5| (Lit |#_module.SReg.ttbr0|))) (and (=> (= |sr#0@@5| (Lit |#_module.SReg.TLBIALL|)) (and (_module.state.State_q |s#0@@45|) (and (and (and (and (and (_module.config.Config_q (_module.state.conf |s#0@@45|)) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))) (_module.config.Config_q (_module.state.conf |s#0@@45|))))) (=> (not (= |sr#0@@5| (Lit |#_module.SReg.TLBIALL|))) (_module.state.State_q |s#0@@45|))))))))) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState2)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState2)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState2) MoreFuel__module._default.ValidSRegState2)) (= (_module.__default.update__config__from__sreg |s#0@@45| |sr#0@@5| |v#0@@41|) (ite (= |sr#0@@5| (Lit |#_module.SReg.cpsr|)) (|#_module.config.Config| (_module.__default.decode__psr |v#0@@41|) (_module.config.scr (_module.state.conf |s#0@@45|)) (_module.config.ttbr0 (_module.state.conf |s#0@@45|)) (_module.config.tlb__consistent (_module.state.conf |s#0@@45|)) (_module.config.ex (_module.state.conf |s#0@@45|)) (_module.config.exstep (_module.state.conf |s#0@@45|)) (_module.config.nondet (_module.state.conf |s#0@@45|))) (ite (= |sr#0@@5| (Lit |#_module.SReg.SCR|)) (|#_module.config.Config| (_module.config.cpsr (_module.state.conf |s#0@@45|)) (_module.__default.decode__scr |v#0@@41|) (_module.config.ttbr0 (_module.state.conf |s#0@@45|)) (_module.config.tlb__consistent (_module.state.conf |s#0@@45|)) (_module.config.ex (_module.state.conf |s#0@@45|)) (_module.config.exstep (_module.state.conf |s#0@@45|)) (_module.config.nondet (_module.state.conf |s#0@@45|))) (ite (= |sr#0@@5| (Lit |#_module.SReg.ttbr0|)) (|#_module.config.Config| (_module.config.cpsr (_module.state.conf |s#0@@45|)) (_module.config.scr (_module.state.conf |s#0@@45|)) (_module.__default.decode__ttbr ($LS $LZ) |v#0@@41|) (U_2_bool (Lit (bool_2_U false))) (_module.config.ex (_module.state.conf |s#0@@45|)) (_module.config.exstep (_module.state.conf |s#0@@45|)) (_module.config.nondet (_module.state.conf |s#0@@45|))) (ite (= |sr#0@@5| (Lit |#_module.SReg.TLBIALL|)) (|#_module.config.Config| (_module.config.cpsr (_module.state.conf |s#0@@45|)) (_module.config.scr (_module.state.conf |s#0@@45|)) (_module.config.ttbr0 (_module.state.conf |s#0@@45|)) (U_2_bool (Lit (bool_2_U true))) (_module.config.ex (_module.state.conf |s#0@@45|)) (_module.config.exstep (_module.state.conf |s#0@@45|)) (_module.config.nondet (_module.state.conf |s#0@@45|))) (_module.state.conf |s#0@@45|))))))))) :qid |ARMdefsd.220:10| :skolemid |2477| :pattern ( (_module.__default.update__config__from__sreg |s#0@@45| |sr#0@@5| |v#0@@41|) ($IsGoodHeap $Heap@@74)) ))))
(assert (= (type MoreFuel__module._default.ValidSRegState3) LayerTypeType))
(assert  (=> true (forall (($Heap@@75 T@U) (|s#0@@46| T@U) (|sr#0@@6| T@U) (|v#0@@42| Int) ) (!  (=> (and (and (and (= (type $Heap@@75) (MapType1Type refType)) (= (type |s#0@@46|) DatatypeTypeType)) (= (type |sr#0@@6|) DatatypeTypeType)) (or (|_module.__default.update__config__from__sreg#canCall| (Lit |s#0@@46|) (Lit |sr#0@@6|) (LitInt |v#0@@42|)) (and (and (and (and ($IsGoodHeap $Heap@@75) ($Is |s#0@@46| Tclass._module.state)) ($Is |sr#0@@6| Tclass._module.SReg)) (_module.__default.isUInt32 |v#0@@42|)) (and (and (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (Lit (_module.state.sregs (Lit |s#0@@46|))) (Lit (_module.state.conf (Lit |s#0@@46|)))) (_module.__default.ValidSReg (Lit |sr#0@@6|))) (U_2_bool (Lit (bool_2_U  (=> (or (_module.SReg.cpsr_q (Lit |sr#0@@6|)) (_module.SReg.spsr_q (Lit |sr#0@@6|))) (_module.__default.ValidPsrWord (LitInt |v#0@@42|)))))))))) (and (and (=> (= (Lit |sr#0@@6|) (Lit |#_module.SReg.cpsr|)) (and (_module.state.State_q (Lit |s#0@@46|)) (and (and (and (and (and (and (|_module.__default.decode__psr#canCall| (LitInt |v#0@@42|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))))) (=> (not (= (Lit |sr#0@@6|) (Lit |#_module.SReg.cpsr|))) (and (=> (= (Lit |sr#0@@6|) (Lit |#_module.SReg.SCR|)) (and (_module.state.State_q (Lit |s#0@@46|)) (and (and (and (and (and (and (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|)))) (|_module.__default.decode__scr#canCall| (LitInt |v#0@@42|))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))))) (=> (not (= (Lit |sr#0@@6|) (Lit |#_module.SReg.SCR|))) (and (=> (= (Lit |sr#0@@6|) (Lit |#_module.SReg.ttbr0|)) (and (_module.state.State_q (Lit |s#0@@46|)) (and (and (and (and (and (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|)))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (|_module.__default.decode__ttbr#canCall| (LitInt |v#0@@42|))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))))) (=> (not (= (Lit |sr#0@@6|) (Lit |#_module.SReg.ttbr0|))) (and (=> (= (Lit |sr#0@@6|) (Lit |#_module.SReg.TLBIALL|)) (and (_module.state.State_q (Lit |s#0@@46|)) (and (and (and (and (and (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|)))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@46|))))))) (=> (not (= (Lit |sr#0@@6|) (Lit |#_module.SReg.TLBIALL|))) (_module.state.State_q (Lit |s#0@@46|)))))))))) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState3)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState3)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState3) MoreFuel__module._default.ValidSRegState3)) (= (_module.__default.update__config__from__sreg (Lit |s#0@@46|) (Lit |sr#0@@6|) (LitInt |v#0@@42|)) (ite (= (Lit |sr#0@@6|) (Lit |#_module.SReg.cpsr|)) (|#_module.config.Config| (Lit (_module.__default.decode__psr (LitInt |v#0@@42|))) (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@46|))))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@46|))))) (U_2_bool (Lit (bool_2_U (_module.config.tlb__consistent (Lit (_module.state.conf (Lit |s#0@@46|))))))) (Lit (_module.config.ex (Lit (_module.state.conf (Lit |s#0@@46|))))) (LitInt (_module.config.exstep (Lit (_module.state.conf (Lit |s#0@@46|))))) (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@46|)))))) (ite (= (Lit |sr#0@@6|) (Lit |#_module.SReg.SCR|)) (|#_module.config.Config| (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@46|))))) (Lit (_module.__default.decode__scr (LitInt |v#0@@42|))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@46|))))) (U_2_bool (Lit (bool_2_U (_module.config.tlb__consistent (Lit (_module.state.conf (Lit |s#0@@46|))))))) (Lit (_module.config.ex (Lit (_module.state.conf (Lit |s#0@@46|))))) (LitInt (_module.config.exstep (Lit (_module.state.conf (Lit |s#0@@46|))))) (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@46|)))))) (ite (= (Lit |sr#0@@6|) (Lit |#_module.SReg.ttbr0|)) (|#_module.config.Config| (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@46|))))) (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@46|))))) (Lit (_module.__default.decode__ttbr ($LS $LZ) (LitInt |v#0@@42|))) (U_2_bool (Lit (bool_2_U false))) (Lit (_module.config.ex (Lit (_module.state.conf (Lit |s#0@@46|))))) (LitInt (_module.config.exstep (Lit (_module.state.conf (Lit |s#0@@46|))))) (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@46|)))))) (ite (= (Lit |sr#0@@6|) (Lit |#_module.SReg.TLBIALL|)) (|#_module.config.Config| (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@46|))))) (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@46|))))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@46|))))) (U_2_bool (Lit (bool_2_U true))) (Lit (_module.config.ex (Lit (_module.state.conf (Lit |s#0@@46|))))) (LitInt (_module.config.exstep (Lit (_module.state.conf (Lit |s#0@@46|))))) (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@46|)))))) (_module.state.conf (Lit |s#0@@46|)))))))))) :qid |ARMdefsd.220:10| :weight 3 :skolemid |2478| :pattern ( (_module.__default.update__config__from__sreg (Lit |s#0@@46|) (Lit |sr#0@@6|) (LitInt |v#0@@42|)) ($IsGoodHeap $Heap@@75)) ))))
(assert  (=> true (forall ((|m#0@@7| T@U) ) (!  (=> (and (= (type |m#0@@7|) DatatypeTypeType) (or (|_module.__default.encode__mode#canCall| |m#0@@7|) ($Is |m#0@@7| Tclass._module.mode))) (_module.__default.isUInt32 (_module.__default.encode__mode |m#0@@7|))) :qid |ARMdefsd.236:29| :skolemid |2479| :pattern ( (_module.__default.encode__mode |m#0@@7|)) ))))
(assert (forall ((|m#0@@8| T@U) ) (!  (=> (and (= (type |m#0@@8|) DatatypeTypeType) ($Is |m#0@@8| Tclass._module.mode)) (and (=> (|_module.__default.encode__mode#requires| |m#0@@8|) true) (=> true (|_module.__default.encode__mode#requires| |m#0@@8|)))) :qid |ARMdefsd.236:29| :skolemid |2480| :pattern ( (|_module.__default.encode__mode#requires| |m#0@@8|)) )))
(assert  (=> true (forall ((|m#0@@9| T@U) ) (!  (=> (and (= (type |m#0@@9|) DatatypeTypeType) (or (|_module.__default.encode__mode#canCall| |m#0@@9|) ($Is |m#0@@9| Tclass._module.mode))) (= (_module.__default.encode__mode |m#0@@9|) (ite (_module.mode.User_q |m#0@@9|) 16 (ite (_module.mode.FIQ_q |m#0@@9|) 17 (ite (_module.mode.IRQ_q |m#0@@9|) 18 (ite (_module.mode.Supervisor_q |m#0@@9|) 19 (ite (_module.mode.Abort_q |m#0@@9|) 23 (ite (_module.mode.Undefined_q |m#0@@9|) 27 22)))))))) :qid |ARMdefsd.236:29| :skolemid |2481| :pattern ( (_module.__default.encode__mode |m#0@@9|)) ))))
(assert  (=> true (forall ((|m#0@@10| T@U) ) (!  (=> (and (= (type |m#0@@10|) DatatypeTypeType) (or (|_module.__default.encode__mode#canCall| (Lit |m#0@@10|)) ($Is |m#0@@10| Tclass._module.mode))) (= (_module.__default.encode__mode (Lit |m#0@@10|)) (ite (_module.mode.User_q (Lit |m#0@@10|)) 16 (ite (_module.mode.FIQ_q (Lit |m#0@@10|)) 17 (ite (_module.mode.IRQ_q (Lit |m#0@@10|)) 18 (ite (_module.mode.Supervisor_q (Lit |m#0@@10|)) 19 (ite (_module.mode.Abort_q (Lit |m#0@@10|)) 23 (ite (_module.mode.Undefined_q (Lit |m#0@@10|)) 27 22)))))))) :qid |ARMdefsd.236:29| :weight 3 :skolemid |2482| :pattern ( (_module.__default.encode__mode (Lit |m#0@@10|))) ))))
(assert (forall ((arg0@@292 Int) ) (! (= (type (_module.__default.decode__mode_k arg0@@292)) DatatypeTypeType) :qid |funType:_module.__default.decode__mode_k| :pattern ( (_module.__default.decode__mode_k arg0@@292)) )))
(assert  (=> true (forall ((|e#0| Int) ) (!  (=> (or (|_module.__default.decode__mode_k#canCall| |e#0|) (_module.__default.isUInt32 |e#0|)) ($Is (_module.__default.decode__mode_k |e#0|) (Tclass._module.Maybe Tclass._module.mode))) :qid |ARMdefsd.248:30| :skolemid |2483| :pattern ( (_module.__default.decode__mode_k |e#0|)) ))))
(assert (forall ((|e#0@@0| Int) ) (!  (=> (_module.__default.isUInt32 |e#0@@0|) (and (=> (|_module.__default.decode__mode_k#requires| |e#0@@0|) true) (=> true (|_module.__default.decode__mode_k#requires| |e#0@@0|)))) :qid |ARMdefsd.248:30| :skolemid |2484| :pattern ( (|_module.__default.decode__mode_k#requires| |e#0@@0|)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@293 T@U) ) (! (= (type (|#_module.Maybe.Just| arg0@@293)) DatatypeTypeType) :qid |funType:#_module.Maybe.Just| :pattern ( (|#_module.Maybe.Just| arg0@@293)) )) (= (type |#_module.mode.FIQ|) DatatypeTypeType)) (= (type |#_module.mode.IRQ|) DatatypeTypeType)) (= (type |#_module.mode.Supervisor|) DatatypeTypeType)) (= (type |#_module.mode.Abort|) DatatypeTypeType)) (= (type |#_module.mode.Undefined|) DatatypeTypeType)) (= (type |#_module.Maybe.Nothing|) DatatypeTypeType)))
(assert  (=> true (forall ((|e#0@@1| Int) ) (!  (=> (or (|_module.__default.decode__mode_k#canCall| |e#0@@1|) (_module.__default.isUInt32 |e#0@@1|)) (= (_module.__default.decode__mode_k |e#0@@1|) (ite (= |e#0@@1| (LitInt 16)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.User|))) (ite (= |e#0@@1| (LitInt 17)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.FIQ|))) (ite (= |e#0@@1| (LitInt 18)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.IRQ|))) (ite (= |e#0@@1| (LitInt 19)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.Supervisor|))) (ite (= |e#0@@1| (LitInt 23)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.Abort|))) (ite (= |e#0@@1| (LitInt 27)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.Undefined|))) (ite (= |e#0@@1| (LitInt 22)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.Monitor|))) |#_module.Maybe.Nothing|))))))))) :qid |ARMdefsd.248:30| :skolemid |2485| :pattern ( (_module.__default.decode__mode_k |e#0@@1|)) ))))
(assert  (=> true (forall ((|e#0@@2| Int) ) (!  (=> (or (|_module.__default.decode__mode_k#canCall| (LitInt |e#0@@2|)) (_module.__default.isUInt32 |e#0@@2|)) (= (_module.__default.decode__mode_k (LitInt |e#0@@2|)) (ite (= (LitInt |e#0@@2|) (LitInt 16)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.User|))) (ite (= (LitInt |e#0@@2|) (LitInt 17)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.FIQ|))) (ite (= (LitInt |e#0@@2|) (LitInt 18)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.IRQ|))) (ite (= (LitInt |e#0@@2|) (LitInt 19)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.Supervisor|))) (ite (= (LitInt |e#0@@2|) (LitInt 23)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.Abort|))) (ite (= (LitInt |e#0@@2|) (LitInt 27)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.Undefined|))) (ite (= (LitInt |e#0@@2|) (LitInt 22)) (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.Monitor|))) |#_module.Maybe.Nothing|))))))))) :qid |ARMdefsd.248:30| :weight 3 :skolemid |2486| :pattern ( (_module.__default.decode__mode_k (LitInt |e#0@@2|))) ))))
(assert  (=> true (forall ((|e#0@@3| Int) ) (!  (=> (or (|_module.__default.ValidModeEncoding#canCall| |e#0@@3|) (_module.__default.isUInt32 |e#0@@3|)) true) :qid |ARMdefsd.265:29| :skolemid |2487| :pattern ( (_module.__default.ValidModeEncoding |e#0@@3|)) ))))
(assert (forall (($Heap@@76 T@U) (|e#0@@4| Int) ) (!  (=> (= (type $Heap@@76) (MapType1Type refType)) (=> (and ($IsGoodHeap $Heap@@76) (_module.__default.isUInt32 |e#0@@4|)) (and (=> (|_module.__default.ValidModeEncoding#requires| |e#0@@4|) true) (=> true (|_module.__default.ValidModeEncoding#requires| |e#0@@4|))))) :qid |ARMdefsd.265:11| :skolemid |2488| :pattern ( (|_module.__default.ValidModeEncoding#requires| |e#0@@4|) ($IsGoodHeap $Heap@@76)) )))
(assert  (=> true (forall (($Heap@@77 T@U) (|e#0@@5| Int) ) (!  (=> (and (= (type $Heap@@77) (MapType1Type refType)) (or (|_module.__default.ValidModeEncoding#canCall| |e#0@@5|) (and ($IsGoodHeap $Heap@@77) (_module.__default.isUInt32 |e#0@@5|)))) (and (|_module.__default.decode__mode_k#canCall| |e#0@@5|) (and (=> (_module.__default.ValidModeEncoding |e#0@@5|) (_module.Maybe.Just_q (_module.__default.decode__mode_k |e#0@@5|))) (=> (_module.Maybe.Just_q (_module.__default.decode__mode_k |e#0@@5|)) (_module.__default.ValidModeEncoding |e#0@@5|))))) :qid |ARMdefsd.265:11| :skolemid |2489| :pattern ( (_module.__default.ValidModeEncoding |e#0@@5|) ($IsGoodHeap $Heap@@77)) ))))
(assert  (=> true (forall (($Heap@@78 T@U) (|e#0@@6| Int) ) (!  (=> (and (= (type $Heap@@78) (MapType1Type refType)) (or (|_module.__default.ValidModeEncoding#canCall| (LitInt |e#0@@6|)) (and ($IsGoodHeap $Heap@@78) (_module.__default.isUInt32 |e#0@@6|)))) (and (|_module.__default.decode__mode_k#canCall| (LitInt |e#0@@6|)) (and (=> (_module.__default.ValidModeEncoding (LitInt |e#0@@6|)) (U_2_bool (Lit (bool_2_U (_module.Maybe.Just_q (Lit (_module.__default.decode__mode_k (LitInt |e#0@@6|)))))))) (=> (U_2_bool (Lit (bool_2_U (_module.Maybe.Just_q (Lit (_module.__default.decode__mode_k (LitInt |e#0@@6|))))))) (_module.__default.ValidModeEncoding (LitInt |e#0@@6|)))))) :qid |ARMdefsd.265:11| :weight 3 :skolemid |2490| :pattern ( (_module.__default.ValidModeEncoding (LitInt |e#0@@6|)) ($IsGoodHeap $Heap@@78)) ))))
(assert  (=> true (forall ((|e#0@@7| Int) ) (!  (=> (or (|_module.__default.decode__mode#canCall| |e#0@@7|) (and (_module.__default.isUInt32 |e#0@@7|) (_module.__default.ValidModeEncoding |e#0@@7|))) ($Is (_module.__default.decode__mode |e#0@@7|) Tclass._module.mode)) :qid |ARMdefsd.270:29| :skolemid |2491| :pattern ( (_module.__default.decode__mode |e#0@@7|)) ))))
(assert (forall ((|e#0@@8| Int) ) (!  (=> (_module.__default.isUInt32 |e#0@@8|) (and (=> (|_module.__default.decode__mode#requires| |e#0@@8|) (_module.__default.ValidModeEncoding |e#0@@8|)) (=> (_module.__default.ValidModeEncoding |e#0@@8|) (|_module.__default.decode__mode#requires| |e#0@@8|)))) :qid |ARMdefsd.270:29| :skolemid |2492| :pattern ( (|_module.__default.decode__mode#requires| |e#0@@8|)) )))
(assert (forall ((arg0@@294 T@U) (arg1@@151 T@U) ) (! (= (type (_module.__default.fromJust arg0@@294 arg1@@151)) BoxType) :qid |funType:_module.__default.fromJust| :pattern ( (_module.__default.fromJust arg0@@294 arg1@@151)) )))
(assert  (=> true (forall ((|e#0@@9| Int) ) (!  (=> (or (|_module.__default.decode__mode#canCall| |e#0@@9|) (and (_module.__default.isUInt32 |e#0@@9|) (_module.__default.ValidModeEncoding |e#0@@9|))) (and (and (|_module.__default.decode__mode_k#canCall| |e#0@@9|) (|_module.__default.fromJust#canCall| Tclass._module.mode (_module.__default.decode__mode_k |e#0@@9|))) (= (_module.__default.decode__mode |e#0@@9|) ($Unbox DatatypeTypeType (_module.__default.fromJust Tclass._module.mode (_module.__default.decode__mode_k |e#0@@9|)))))) :qid |ARMdefsd.270:29| :skolemid |2493| :pattern ( (_module.__default.decode__mode |e#0@@9|)) ))))
(assert  (=> true (forall ((|e#0@@10| Int) ) (!  (=> (or (|_module.__default.decode__mode#canCall| (LitInt |e#0@@10|)) (and (_module.__default.isUInt32 |e#0@@10|) (U_2_bool (Lit (bool_2_U (_module.__default.ValidModeEncoding (LitInt |e#0@@10|))))))) (and (and (|_module.__default.decode__mode_k#canCall| (LitInt |e#0@@10|)) (|_module.__default.fromJust#canCall| Tclass._module.mode (Lit (_module.__default.decode__mode_k (LitInt |e#0@@10|))))) (= (_module.__default.decode__mode (LitInt |e#0@@10|)) (Lit ($Unbox DatatypeTypeType (_module.__default.fromJust Tclass._module.mode (Lit (_module.__default.decode__mode_k (LitInt |e#0@@10|))))))))) :qid |ARMdefsd.270:29| :weight 3 :skolemid |2494| :pattern ( (_module.__default.decode__mode (LitInt |e#0@@10|))) ))))
(assert  (=> true (forall ((|s#0@@47| T@U) ) (!  (=> (and (= (type |s#0@@47|) DatatypeTypeType) (or (|_module.__default.ValidState#canCall| |s#0@@47|) ($Is |s#0@@47| Tclass._module.state))) true) :qid |ARMdefsd.332:22| :skolemid |2495| :pattern ( (_module.__default.ValidState |s#0@@47|)) ))))
(assert (forall (($Heap@@79 T@U) (|s#0@@48| T@U) ) (!  (=> (and (and (= (type $Heap@@79) (MapType1Type refType)) (= (type |s#0@@48|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@79) ($Is |s#0@@48| Tclass._module.state))) (and (=> (|_module.__default.ValidState#requires| |s#0@@48|) true) (=> true (|_module.__default.ValidState#requires| |s#0@@48|)))) :qid |ARMdefsd.332:11| :skolemid |2496| :pattern ( (|_module.__default.ValidState#requires| |s#0@@48|) ($IsGoodHeap $Heap@@79)) )))
(assert  (=> true (forall (($Heap@@80 T@U) (|s#0@@49| T@U) ) (!  (=> (and (and (= (type $Heap@@80) (MapType1Type refType)) (= (type |s#0@@49|) DatatypeTypeType)) (or (|_module.__default.ValidState#canCall| |s#0@@49|) (and ($IsGoodHeap $Heap@@80) ($Is |s#0@@49| Tclass._module.state)))) (and (and (and (and (_module.state.State_q |s#0@@49|) (|_module.__default.ValidRegState#canCall| (_module.state.regs |s#0@@49|))) (=> (_module.__default.ValidRegState StartFuel__module._default.ValidRegState (_module.state.regs |s#0@@49|)) (and (_module.state.State_q |s#0@@49|) (|_module.__default.ValidMemState#canCall| (_module.state.m |s#0@@49|))))) (=> (and (and (_module.state.State_q |s#0@@49|) (|_module.__default.ValidMemState#canCall| (_module.state.m |s#0@@49|))) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (_module.state.m |s#0@@49|))) (and (and (_module.state.State_q |s#0@@49|) (_module.state.State_q |s#0@@49|)) (|_module.__default.ValidSRegState#canCall| (_module.state.sregs |s#0@@49|) (_module.state.conf |s#0@@49|))))) (and (=> (_module.__default.ValidState |s#0@@49|) (and (and (_module.__default.ValidRegState StartFuel__module._default.ValidRegState (_module.state.regs |s#0@@49|)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (_module.state.m |s#0@@49|))) (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (_module.state.sregs |s#0@@49|) (_module.state.conf |s#0@@49|)))) (=> (and (and (_module.__default.ValidRegState StartFuel__module._default.ValidRegState (_module.state.regs |s#0@@49|)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (_module.state.m |s#0@@49|))) (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (_module.state.sregs |s#0@@49|) (_module.state.conf |s#0@@49|))) (_module.__default.ValidState |s#0@@49|))))) :qid |ARMdefsd.332:11| :skolemid |2497| :pattern ( (_module.__default.ValidState |s#0@@49|) ($IsGoodHeap $Heap@@80)) ))))
(assert  (=> true (forall (($Heap@@81 T@U) (|s#0@@50| T@U) ) (!  (=> (and (and (= (type $Heap@@81) (MapType1Type refType)) (= (type |s#0@@50|) DatatypeTypeType)) (or (|_module.__default.ValidState#canCall| (Lit |s#0@@50|)) (and ($IsGoodHeap $Heap@@81) ($Is |s#0@@50| Tclass._module.state)))) (and (and (and (and (_module.state.State_q (Lit |s#0@@50|)) (|_module.__default.ValidRegState#canCall| (Lit (_module.state.regs (Lit |s#0@@50|))))) (=> (_module.__default.ValidRegState StartFuel__module._default.ValidRegState (Lit (_module.state.regs (Lit |s#0@@50|)))) (and (_module.state.State_q (Lit |s#0@@50|)) (|_module.__default.ValidMemState#canCall| (Lit (_module.state.m (Lit |s#0@@50|))))))) (=> (and (and (_module.state.State_q (Lit |s#0@@50|)) (|_module.__default.ValidMemState#canCall| (Lit (_module.state.m (Lit |s#0@@50|))))) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit (_module.state.m (Lit |s#0@@50|))))) (and (and (_module.state.State_q (Lit |s#0@@50|)) (_module.state.State_q (Lit |s#0@@50|))) (|_module.__default.ValidSRegState#canCall| (Lit (_module.state.sregs (Lit |s#0@@50|))) (Lit (_module.state.conf (Lit |s#0@@50|))))))) (and (=> (_module.__default.ValidState (Lit |s#0@@50|)) (and (and (_module.__default.ValidRegState StartFuel__module._default.ValidRegState (Lit (_module.state.regs (Lit |s#0@@50|)))) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit (_module.state.m (Lit |s#0@@50|))))) (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (Lit (_module.state.sregs (Lit |s#0@@50|))) (Lit (_module.state.conf (Lit |s#0@@50|)))))) (=> (and (and (_module.__default.ValidRegState StartFuel__module._default.ValidRegState (Lit (_module.state.regs (Lit |s#0@@50|)))) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit (_module.state.m (Lit |s#0@@50|))))) (_module.__default.ValidSRegState StartFuel__module._default.ValidSRegState (Lit (_module.state.sregs (Lit |s#0@@50|))) (Lit (_module.state.conf (Lit |s#0@@50|))))) (_module.__default.ValidState (Lit |s#0@@50|)))))) :qid |ARMdefsd.332:11| :weight 3 :skolemid |2498| :pattern ( (_module.__default.ValidState (Lit |s#0@@50|)) ($IsGoodHeap $Heap@@81)) ))))
(assert (forall (($ly@@157 T@U) (|regs#0@@3| T@U) ) (!  (=> (and (= (type $ly@@157) LayerTypeType) (= (type |regs#0@@3|) (MapType BoxType BoxType))) (and (=> (_module.__default.ValidRegState ($LS $ly@@157) |regs#0@@3|) (_module.__default.ValidRegState $ly@@157 |regs#0@@3|)) (=> (_module.__default.ValidRegState $ly@@157 |regs#0@@3|) (_module.__default.ValidRegState ($LS $ly@@157) |regs#0@@3|)))) :qid |ARMdefsd.337:21| :skolemid |2499| :pattern ( (_module.__default.ValidRegState ($LS $ly@@157) |regs#0@@3|)) )))
(assert (forall (($ly@@158 T@U) (|regs#0@@4| T@U) ) (!  (=> (and (= (type $ly@@158) LayerTypeType) (= (type |regs#0@@4|) (MapType BoxType BoxType))) (and (=> (_module.__default.ValidRegState $ly@@158 |regs#0@@4|) (_module.__default.ValidRegState $LZ |regs#0@@4|)) (=> (_module.__default.ValidRegState $LZ |regs#0@@4|) (_module.__default.ValidRegState $ly@@158 |regs#0@@4|)))) :qid |ARMdefsd.337:21| :skolemid |2500| :pattern ( (_module.__default.ValidRegState (AsFuelBottom $ly@@158) |regs#0@@4|)) )))
(assert  (=> true (forall (($ly@@159 T@U) (|regs#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@159) LayerTypeType) (= (type |regs#0@@5|) (MapType BoxType BoxType))) (or (|_module.__default.ValidRegState#canCall| |regs#0@@5|) ($Is |regs#0@@5| (TMap Tclass._module.ARMReg Tclass._module.word)))) true) :qid |ARMdefsd.337:21| :skolemid |2501| :pattern ( (_module.__default.ValidRegState $ly@@159 |regs#0@@5|)) ))))
(assert (forall (($ly@@160 T@U) (|regs#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@160) LayerTypeType) (= (type |regs#0@@6|) (MapType BoxType BoxType))) ($Is |regs#0@@6| (TMap Tclass._module.ARMReg Tclass._module.word))) (and (=> (|_module.__default.ValidRegState#requires| $ly@@160 |regs#0@@6|) true) (=> true (|_module.__default.ValidRegState#requires| $ly@@160 |regs#0@@6|)))) :qid |ARMdefsd.337:21| :skolemid |2502| :pattern ( (|_module.__default.ValidRegState#requires| $ly@@160 |regs#0@@6|)) )))
(assert  (=> true (forall (($ly@@161 T@U) (|regs#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@161) LayerTypeType) (= (type |regs#0@@7|) (MapType BoxType BoxType))) (or (|_module.__default.ValidRegState#canCall| |regs#0@@7|) ($Is |regs#0@@7| (TMap Tclass._module.ARMReg Tclass._module.word)))) (and (forall ((|r#0@@3| T@U) ) (! true :qid |ARMdefsd.339:12| :skolemid |2503| :pattern ( (MapType0Select (|Map#Domain| |regs#0@@7|) ($Box |r#0@@3|))) )) (and (=> (_module.__default.ValidRegState ($LS $ly@@161) |regs#0@@7|) (forall ((|r#0@@4| T@U) ) (!  (=> (and (= (type |r#0@@4|) DatatypeTypeType) ($Is |r#0@@4| Tclass._module.ARMReg)) (U_2_bool (MapType0Select (|Map#Domain| |regs#0@@7|) ($Box |r#0@@4|)))) :qid |ARMdefsd.339:12| :skolemid |2504| :pattern ( (MapType0Select (|Map#Domain| |regs#0@@7|) ($Box |r#0@@4|))) ))) (=> (forall ((|r#0@@5| T@U) ) (!  (=> (and (= (type |r#0@@5|) DatatypeTypeType) ($Is |r#0@@5| Tclass._module.ARMReg)) (U_2_bool (MapType0Select (|Map#Domain| |regs#0@@7|) ($Box |r#0@@5|)))) :qid |ARMdefsd.339:12| :skolemid |2504| :pattern ( (MapType0Select (|Map#Domain| |regs#0@@7|) ($Box |r#0@@5|))) )) (_module.__default.ValidRegState ($LS $ly@@161) |regs#0@@7|))))) :qid |ARMdefsd.337:21| :skolemid |2505| :pattern ( (_module.__default.ValidRegState ($LS $ly@@161) |regs#0@@7|)) ))))
(assert  (=> true (forall (($ly@@162 T@U) (|regs#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@162) LayerTypeType) (= (type |regs#0@@8|) (MapType BoxType BoxType))) (or (|_module.__default.ValidRegState#canCall| (Lit |regs#0@@8|)) ($Is |regs#0@@8| (TMap Tclass._module.ARMReg Tclass._module.word)))) (and (forall ((|r#1| T@U) ) (! true :qid |ARMdefsd.339:12| :skolemid |2506| :pattern ( (MapType0Select (|Map#Domain| |regs#0@@8|) ($Box |r#1|))) )) (and (=> (_module.__default.ValidRegState ($LS $ly@@162) (Lit |regs#0@@8|)) (forall ((|r#1@@0| T@U) ) (!  (=> (and (= (type |r#1@@0|) DatatypeTypeType) ($Is |r#1@@0| Tclass._module.ARMReg)) (U_2_bool (MapType0Select (|Map#Domain| |regs#0@@8|) ($Box |r#1@@0|)))) :qid |ARMdefsd.339:12| :skolemid |2507| :pattern ( (MapType0Select (|Map#Domain| |regs#0@@8|) ($Box |r#1@@0|))) ))) (=> (forall ((|r#1@@1| T@U) ) (!  (=> (and (= (type |r#1@@1|) DatatypeTypeType) ($Is |r#1@@1| Tclass._module.ARMReg)) (U_2_bool (MapType0Select (|Map#Domain| |regs#0@@8|) ($Box |r#1@@1|)))) :qid |ARMdefsd.339:12| :skolemid |2507| :pattern ( (MapType0Select (|Map#Domain| |regs#0@@8|) ($Box |r#1@@1|))) )) (_module.__default.ValidRegState ($LS $ly@@162) (Lit |regs#0@@8|)))))) :qid |ARMdefsd.337:21| :weight 3 :skolemid |2508| :pattern ( (_module.__default.ValidRegState ($LS $ly@@162) (Lit |regs#0@@8|))) ))))
(assert (forall (($ly@@163 T@U) (|sregs#0| T@U) (|c#0| T@U) ) (!  (=> (and (and (= (type $ly@@163) LayerTypeType) (= (type |sregs#0|) (MapType BoxType BoxType))) (= (type |c#0|) DatatypeTypeType)) (and (=> (_module.__default.ValidSRegState ($LS $ly@@163) |sregs#0| |c#0|) (_module.__default.ValidSRegState $ly@@163 |sregs#0| |c#0|)) (=> (_module.__default.ValidSRegState $ly@@163 |sregs#0| |c#0|) (_module.__default.ValidSRegState ($LS $ly@@163) |sregs#0| |c#0|)))) :qid |ARMdefsd.342:21| :skolemid |2509| :pattern ( (_module.__default.ValidSRegState ($LS $ly@@163) |sregs#0| |c#0|)) )))
(assert (forall (($ly@@164 T@U) (|sregs#0@@0| T@U) (|c#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@164) LayerTypeType) (= (type |sregs#0@@0|) (MapType BoxType BoxType))) (= (type |c#0@@0|) DatatypeTypeType)) (and (=> (_module.__default.ValidSRegState $ly@@164 |sregs#0@@0| |c#0@@0|) (_module.__default.ValidSRegState $LZ |sregs#0@@0| |c#0@@0|)) (=> (_module.__default.ValidSRegState $LZ |sregs#0@@0| |c#0@@0|) (_module.__default.ValidSRegState $ly@@164 |sregs#0@@0| |c#0@@0|)))) :qid |ARMdefsd.342:21| :skolemid |2510| :pattern ( (_module.__default.ValidSRegState (AsFuelBottom $ly@@164) |sregs#0@@0| |c#0@@0|)) )))
(assert  (=> true (forall (($ly@@165 T@U) (|sregs#0@@1| T@U) (|c#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@165) LayerTypeType) (= (type |sregs#0@@1|) (MapType BoxType BoxType))) (= (type |c#0@@1|) DatatypeTypeType)) (or (|_module.__default.ValidSRegState#canCall| |sregs#0@@1| |c#0@@1|) (and ($Is |sregs#0@@1| (TMap Tclass._module.SReg Tclass._module.word)) ($Is |c#0@@1| Tclass._module.config)))) true) :qid |ARMdefsd.342:21| :skolemid |2511| :pattern ( (_module.__default.ValidSRegState $ly@@165 |sregs#0@@1| |c#0@@1|)) ))))
(assert (forall (($ly@@166 T@U) ($Heap@@82 T@U) (|sregs#0@@2| T@U) (|c#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@166) LayerTypeType) (= (type $Heap@@82) (MapType1Type refType))) (= (type |sregs#0@@2|) (MapType BoxType BoxType))) (= (type |c#0@@2|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@82) ($Is |sregs#0@@2| (TMap Tclass._module.SReg Tclass._module.word))) ($Is |c#0@@2| Tclass._module.config))) (and (=> (|_module.__default.ValidSRegState#requires| $ly@@166 |sregs#0@@2| |c#0@@2|) true) (=> true (|_module.__default.ValidSRegState#requires| $ly@@166 |sregs#0@@2| |c#0@@2|)))) :qid |ARMdefsd.342:21| :skolemid |2512| :pattern ( (|_module.__default.ValidSRegState#requires| $ly@@166 |sregs#0@@2| |c#0@@2|) ($IsGoodHeap $Heap@@82)) )))
(assert  (=> true (forall (($ly@@167 T@U) ($Heap@@83 T@U) (|sregs#0@@3| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@167) LayerTypeType) (= (type $Heap@@83) (MapType1Type refType))) (= (type |sregs#0@@3|) (MapType BoxType BoxType))) (= (type |c#0@@3|) DatatypeTypeType)) (or (|_module.__default.ValidSRegState#canCall| |sregs#0@@3| |c#0@@3|) (and (and ($IsGoodHeap $Heap@@83) ($Is |sregs#0@@3| (TMap Tclass._module.SReg Tclass._module.word))) ($Is |c#0@@3| Tclass._module.config)))) (and (and (and (and (and (and (forall ((|sr#0@@7| T@U) ) (!  (=> (and (= (type |sr#0@@7|) DatatypeTypeType) ($Is |sr#0@@7| Tclass._module.SReg)) (|_module.__default.ValidSReg#canCall| |sr#0@@7|)) :qid |ARMdefsd.345:13| :skolemid |2513| :pattern ( (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@7|))) :pattern ( (_module.__default.ValidSReg |sr#0@@7|)) )) (=> (forall ((|sr#0@@8| T@U) ) (!  (=> (and (= (type |sr#0@@8|) DatatypeTypeType) ($Is |sr#0@@8| Tclass._module.SReg)) (and (=> (_module.__default.ValidSReg |sr#0@@8|) (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@8|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@8|))) (_module.__default.ValidSReg |sr#0@@8|)))) :qid |ARMdefsd.345:13| :skolemid |2514| :pattern ( (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@8|))) :pattern ( (_module.__default.ValidSReg |sr#0@@8|)) )) (|_module.__default.ValidPsrWord#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|)))))))) (=> (and (|_module.__default.ValidPsrWord#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|)))))) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|))))))) (and (_module.config.Config_q |c#0@@3|) (|_module.__default.decode__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|))))))))) (=> (and (and (_module.config.Config_q |c#0@@3|) (|_module.__default.decode__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|))))))) (= (_module.config.cpsr |c#0@@3|) (_module.__default.decode__psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|)))))))) (forall ((|m#0@@11| T@U) ) (!  (=> (and (= (type |m#0@@11|) DatatypeTypeType) ($Is |m#0@@11| Tclass._module.mode)) (and (|_module.__default.ValidSReg#canCall| (|#_module.SReg.spsr| |m#0@@11|)) (=> (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#0@@11|)) (|_module.__default.ValidPsrWord#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (|#_module.SReg.spsr| |m#0@@11|))))))))) :qid |ARMdefsd.347:16| :skolemid |2515| :pattern ( (|#_module.SReg.spsr| |m#0@@11|)) )))) (=> (and (forall ((|m#0@@12| T@U) ) (!  (=> (and (= (type |m#0@@12|) DatatypeTypeType) ($Is |m#0@@12| Tclass._module.mode)) (and (|_module.__default.ValidSReg#canCall| (|#_module.SReg.spsr| |m#0@@12|)) (=> (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#0@@12|)) (|_module.__default.ValidPsrWord#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (|#_module.SReg.spsr| |m#0@@12|))))))))) :qid |ARMdefsd.347:16| :skolemid |2516| :pattern ( (|#_module.SReg.spsr| |m#0@@12|)) )) (forall ((|m#0@@13| T@U) ) (!  (=> (= (type |m#0@@13|) DatatypeTypeType) (=> (and ($Is |m#0@@13| Tclass._module.mode) (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#0@@13|))) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (|#_module.SReg.spsr| |m#0@@13|)))))))) :qid |ARMdefsd.347:16| :skolemid |2517| :pattern ( (|#_module.SReg.spsr| |m#0@@13|)) ))) (and (_module.config.Config_q |c#0@@3|) (|_module.__default.decode__ttbr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.ttbr0|))))))))) (=> (and (and (_module.config.Config_q |c#0@@3|) (|_module.__default.decode__ttbr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.ttbr0|))))))) (= (_module.config.ttbr0 |c#0@@3|) (_module.__default.decode__ttbr ($LS $LZ) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.ttbr0|)))))))) (and (_module.config.Config_q |c#0@@3|) (|_module.__default.decode__scr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.SCR|))))))))) (and (=> (_module.__default.ValidSRegState ($LS $ly@@167) |sregs#0@@3| |c#0@@3|) (and (and (and (and (and (forall ((|sr#0@@9| T@U) ) (!  (=> (and (= (type |sr#0@@9|) DatatypeTypeType) ($Is |sr#0@@9| Tclass._module.SReg)) (and (=> (_module.__default.ValidSReg |sr#0@@9|) (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@9|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@9|))) (_module.__default.ValidSReg |sr#0@@9|)))) :qid |ARMdefsd.345:13| :skolemid |2518| :pattern ( (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@9|))) :pattern ( (_module.__default.ValidSReg |sr#0@@9|)) )) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|))))))) (= (_module.config.cpsr |c#0@@3|) (_module.__default.decode__psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|)))))))) (forall ((|m#0@@14| T@U) ) (!  (=> (= (type |m#0@@14|) DatatypeTypeType) (=> (and ($Is |m#0@@14| Tclass._module.mode) (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#0@@14|))) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (|#_module.SReg.spsr| |m#0@@14|)))))))) :qid |ARMdefsd.347:16| :skolemid |2519| :pattern ( (|#_module.SReg.spsr| |m#0@@14|)) ))) (= (_module.config.ttbr0 |c#0@@3|) (_module.__default.decode__ttbr ($LS $LZ) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.ttbr0|)))))))) (= (_module.config.scr |c#0@@3|) (_module.__default.decode__scr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.SCR|))))))))) (=> (and (and (and (and (and (forall ((|sr#0@@10| T@U) ) (!  (=> (and (= (type |sr#0@@10|) DatatypeTypeType) ($Is |sr#0@@10| Tclass._module.SReg)) (and (=> (_module.__default.ValidSReg |sr#0@@10|) (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@10|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@10|))) (_module.__default.ValidSReg |sr#0@@10|)))) :qid |ARMdefsd.345:13| :skolemid |2518| :pattern ( (MapType0Select (|Map#Domain| |sregs#0@@3|) ($Box |sr#0@@10|))) :pattern ( (_module.__default.ValidSReg |sr#0@@10|)) )) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|))))))) (= (_module.config.cpsr |c#0@@3|) (_module.__default.decode__psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.cpsr|)))))))) (forall ((|m#0@@15| T@U) ) (!  (=> (= (type |m#0@@15|) DatatypeTypeType) (=> (and ($Is |m#0@@15| Tclass._module.mode) (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#0@@15|))) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (|#_module.SReg.spsr| |m#0@@15|)))))))) :qid |ARMdefsd.347:16| :skolemid |2519| :pattern ( (|#_module.SReg.spsr| |m#0@@15|)) ))) (= (_module.config.ttbr0 |c#0@@3|) (_module.__default.decode__ttbr ($LS $LZ) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.ttbr0|)))))))) (= (_module.config.scr |c#0@@3|) (_module.__default.decode__scr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |sregs#0@@3|) ($Box (Lit |#_module.SReg.SCR|)))))))) (_module.__default.ValidSRegState ($LS $ly@@167) |sregs#0@@3| |c#0@@3|))))) :qid |ARMdefsd.342:21| :skolemid |2520| :pattern ( (_module.__default.ValidSRegState ($LS $ly@@167) |sregs#0@@3| |c#0@@3|) ($IsGoodHeap $Heap@@83)) ))))
(assert  (=> true (forall (($ly@@168 T@U) ($Heap@@84 T@U) (|sregs#0@@4| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@168) LayerTypeType) (= (type $Heap@@84) (MapType1Type refType))) (= (type |sregs#0@@4|) (MapType BoxType BoxType))) (= (type |c#0@@4|) DatatypeTypeType)) (or (|_module.__default.ValidSRegState#canCall| (Lit |sregs#0@@4|) (Lit |c#0@@4|)) (and (and ($IsGoodHeap $Heap@@84) ($Is |sregs#0@@4| (TMap Tclass._module.SReg Tclass._module.word))) ($Is |c#0@@4| Tclass._module.config)))) (and (and (and (and (and (and (forall ((|sr#1| T@U) ) (!  (=> (and (= (type |sr#1|) DatatypeTypeType) ($Is |sr#1| Tclass._module.SReg)) (|_module.__default.ValidSReg#canCall| |sr#1|)) :qid |ARMdefsd.345:13| :skolemid |2521| :pattern ( (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1|))) :pattern ( (_module.__default.ValidSReg |sr#1|)) )) (=> (forall ((|sr#1@@0| T@U) ) (!  (=> (and (= (type |sr#1@@0|) DatatypeTypeType) ($Is |sr#1@@0| Tclass._module.SReg)) (and (=> (_module.__default.ValidSReg |sr#1@@0|) (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1@@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1@@0|))) (_module.__default.ValidSReg |sr#1@@0|)))) :qid |ARMdefsd.345:13| :skolemid |2522| :pattern ( (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1@@0|))) :pattern ( (_module.__default.ValidSReg |sr#1@@0|)) )) (|_module.__default.ValidPsrWord#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|)))))))) (=> (and (|_module.__default.ValidPsrWord#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|)))))) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|))))))) (and (_module.config.Config_q (Lit |c#0@@4|)) (|_module.__default.decode__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|))))))))) (=> (and (and (_module.config.Config_q (Lit |c#0@@4|)) (|_module.__default.decode__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|))))))) (= (Lit (_module.config.cpsr (Lit |c#0@@4|))) (_module.__default.decode__psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|)))))))) (forall ((|m#1| T@U) ) (!  (=> (and (= (type |m#1|) DatatypeTypeType) ($Is |m#1| Tclass._module.mode)) (and (|_module.__default.ValidSReg#canCall| (|#_module.SReg.spsr| |m#1|)) (=> (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#1|)) (|_module.__default.ValidPsrWord#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (|#_module.SReg.spsr| |m#1|))))))))) :qid |ARMdefsd.347:16| :skolemid |2523| :pattern ( (|#_module.SReg.spsr| |m#1|)) )))) (=> (and (forall ((|m#1@@0| T@U) ) (!  (=> (and (= (type |m#1@@0|) DatatypeTypeType) ($Is |m#1@@0| Tclass._module.mode)) (and (|_module.__default.ValidSReg#canCall| (|#_module.SReg.spsr| |m#1@@0|)) (=> (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#1@@0|)) (|_module.__default.ValidPsrWord#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (|#_module.SReg.spsr| |m#1@@0|))))))))) :qid |ARMdefsd.347:16| :skolemid |2524| :pattern ( (|#_module.SReg.spsr| |m#1@@0|)) )) (forall ((|m#1@@1| T@U) ) (!  (=> (= (type |m#1@@1|) DatatypeTypeType) (=> (and ($Is |m#1@@1| Tclass._module.mode) (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#1@@1|))) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (|#_module.SReg.spsr| |m#1@@1|)))))))) :qid |ARMdefsd.347:16| :skolemid |2525| :pattern ( (|#_module.SReg.spsr| |m#1@@1|)) ))) (and (_module.config.Config_q (Lit |c#0@@4|)) (|_module.__default.decode__ttbr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.ttbr0|))))))))) (=> (and (and (_module.config.Config_q (Lit |c#0@@4|)) (|_module.__default.decode__ttbr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.ttbr0|))))))) (= (Lit (_module.config.ttbr0 (Lit |c#0@@4|))) (_module.__default.decode__ttbr ($LS $LZ) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.ttbr0|)))))))) (and (_module.config.Config_q (Lit |c#0@@4|)) (|_module.__default.decode__scr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.SCR|))))))))) (and (=> (_module.__default.ValidSRegState ($LS $ly@@168) (Lit |sregs#0@@4|) (Lit |c#0@@4|)) (and (and (and (and (and (forall ((|sr#1@@1| T@U) ) (!  (=> (and (= (type |sr#1@@1|) DatatypeTypeType) ($Is |sr#1@@1| Tclass._module.SReg)) (and (=> (_module.__default.ValidSReg |sr#1@@1|) (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1@@1|))) (_module.__default.ValidSReg |sr#1@@1|)))) :qid |ARMdefsd.345:13| :skolemid |2526| :pattern ( (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1@@1|))) :pattern ( (_module.__default.ValidSReg |sr#1@@1|)) )) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|))))))) (= (Lit (_module.config.cpsr (Lit |c#0@@4|))) (_module.__default.decode__psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|)))))))) (forall ((|m#1@@2| T@U) ) (!  (=> (= (type |m#1@@2|) DatatypeTypeType) (=> (and ($Is |m#1@@2| Tclass._module.mode) (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#1@@2|))) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (|#_module.SReg.spsr| |m#1@@2|)))))))) :qid |ARMdefsd.347:16| :skolemid |2527| :pattern ( (|#_module.SReg.spsr| |m#1@@2|)) ))) (= (Lit (_module.config.ttbr0 (Lit |c#0@@4|))) (_module.__default.decode__ttbr ($LS $LZ) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.ttbr0|)))))))) (= (Lit (_module.config.scr (Lit |c#0@@4|))) (_module.__default.decode__scr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.SCR|))))))))) (=> (and (and (and (and (and (forall ((|sr#1@@2| T@U) ) (!  (=> (and (= (type |sr#1@@2|) DatatypeTypeType) ($Is |sr#1@@2| Tclass._module.SReg)) (and (=> (_module.__default.ValidSReg |sr#1@@2|) (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1@@2|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1@@2|))) (_module.__default.ValidSReg |sr#1@@2|)))) :qid |ARMdefsd.345:13| :skolemid |2526| :pattern ( (MapType0Select (|Map#Domain| |sregs#0@@4|) ($Box |sr#1@@2|))) :pattern ( (_module.__default.ValidSReg |sr#1@@2|)) )) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|))))))) (= (Lit (_module.config.cpsr (Lit |c#0@@4|))) (_module.__default.decode__psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.cpsr|)))))))) (forall ((|m#1@@3| T@U) ) (!  (=> (= (type |m#1@@3|) DatatypeTypeType) (=> (and ($Is |m#1@@3| Tclass._module.mode) (_module.__default.ValidSReg (|#_module.SReg.spsr| |m#1@@3|))) (_module.__default.ValidPsrWord (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (|#_module.SReg.spsr| |m#1@@3|)))))))) :qid |ARMdefsd.347:16| :skolemid |2527| :pattern ( (|#_module.SReg.spsr| |m#1@@3|)) ))) (= (Lit (_module.config.ttbr0 (Lit |c#0@@4|))) (_module.__default.decode__ttbr ($LS $LZ) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.ttbr0|)))))))) (= (Lit (_module.config.scr (Lit |c#0@@4|))) (_module.__default.decode__scr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |sregs#0@@4|)) ($Box (Lit |#_module.SReg.SCR|)))))))) (_module.__default.ValidSRegState ($LS $ly@@168) (Lit |sregs#0@@4|) (Lit |c#0@@4|)))))) :qid |ARMdefsd.342:21| :weight 3 :skolemid |2528| :pattern ( (_module.__default.ValidSRegState ($LS $ly@@168) (Lit |sregs#0@@4|) (Lit |c#0@@4|)) ($IsGoodHeap $Heap@@84)) ))))
(assert (= (type _module.__default.TheValidAddressesRO) (MapType0Type BoxType boolType)))
(assert  (=> true (=> true ($Is _module.__default.TheValidAddressesRO (TSet Tclass._module.addr)))))
(assert  (=> |_module.__default.TheValidAddressesRO#requires| true))
(assert  (=> true |_module.__default.TheValidAddressesRO#requires|))
(assert  (=> true (=> true ($Is _module.__default.TheValidAddressesRW (TSet Tclass._module.addr)))))
(assert  (=> |_module.__default.TheValidAddressesRW#requires| true))
(assert  (=> true |_module.__default.TheValidAddressesRW#requires|))
(assert (= (type _module.__default.TheValidAddresses) (MapType0Type BoxType boolType)))
(assert  (=> true (=> true ($Is _module.__default.TheValidAddresses (TSet Tclass._module.addr)))))
(assert  (=> |_module.__default.TheValidAddresses#requires| true))
(assert  (=> true |_module.__default.TheValidAddresses#requires|))
(assert  (=> true (=> true (and (and |_module.__default.TheValidAddressesRO#canCall| |_module.__default.TheValidAddressesRW#canCall|) (= _module.__default.TheValidAddresses (|Set#Union| _module.__default.TheValidAddressesRO _module.__default.TheValidAddressesRW))))))
(assert  (=> true (=> true (and (and |_module.__default.TheValidAddressesRO#canCall| |_module.__default.TheValidAddressesRW#canCall|) (= _module.__default.TheValidAddresses (|Set#Union| _module.__default.TheValidAddressesRO _module.__default.TheValidAddressesRW))))))
(assert (forall (($ly@@169 T@U) (|s#0@@51| T@U) ) (!  (=> (and (= (type $ly@@169) LayerTypeType) (= (type |s#0@@51|) DatatypeTypeType)) (and (=> (_module.__default.ValidMemState ($LS $ly@@169) |s#0@@51|) (_module.__default.ValidMemState $ly@@169 |s#0@@51|)) (=> (_module.__default.ValidMemState $ly@@169 |s#0@@51|) (_module.__default.ValidMemState ($LS $ly@@169) |s#0@@51|)))) :qid |ARMdefsd.360:21| :skolemid |2529| :pattern ( (_module.__default.ValidMemState ($LS $ly@@169) |s#0@@51|)) )))
(assert (forall (($ly@@170 T@U) (|s#0@@52| T@U) ) (!  (=> (and (= (type $ly@@170) LayerTypeType) (= (type |s#0@@52|) DatatypeTypeType)) (and (=> (_module.__default.ValidMemState $ly@@170 |s#0@@52|) (_module.__default.ValidMemState $LZ |s#0@@52|)) (=> (_module.__default.ValidMemState $LZ |s#0@@52|) (_module.__default.ValidMemState $ly@@170 |s#0@@52|)))) :qid |ARMdefsd.360:21| :skolemid |2530| :pattern ( (_module.__default.ValidMemState (AsFuelBottom $ly@@170) |s#0@@52|)) )))
(assert  (=> true (forall (($ly@@171 T@U) (|s#0@@53| T@U) ) (!  (=> (and (and (= (type $ly@@171) LayerTypeType) (= (type |s#0@@53|) DatatypeTypeType)) (or (|_module.__default.ValidMemState#canCall| |s#0@@53|) ($Is |s#0@@53| Tclass._module.memstate))) true) :qid |ARMdefsd.360:21| :skolemid |2531| :pattern ( (_module.__default.ValidMemState $ly@@171 |s#0@@53|)) ))))
(assert (forall (($ly@@172 T@U) ($Heap@@85 T@U) (|s#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@172) LayerTypeType) (= (type $Heap@@85) (MapType1Type refType))) (= (type |s#0@@54|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@85) ($Is |s#0@@54| Tclass._module.memstate))) (and (=> (|_module.__default.ValidMemState#requires| $ly@@172 |s#0@@54|) true) (=> true (|_module.__default.ValidMemState#requires| $ly@@172 |s#0@@54|)))) :qid |ARMdefsd.360:21| :skolemid |2532| :pattern ( (|_module.__default.ValidMemState#requires| $ly@@172 |s#0@@54|) ($IsGoodHeap $Heap@@85)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (_module.memstate.globals arg0@@295)) (MapType BoxType BoxType)) :qid |funType:_module.memstate.globals| :pattern ( (_module.memstate.globals arg0@@295)) )))
(assert  (=> true (forall (($ly@@173 T@U) ($Heap@@86 T@U) (|s#0@@55| T@U) ) (!  (=> (and (and (and (= (type $ly@@173) LayerTypeType) (= (type $Heap@@86) (MapType1Type refType))) (= (type |s#0@@55|) DatatypeTypeType)) (or (|_module.__default.ValidMemState#canCall| |s#0@@55|) (and ($IsGoodHeap $Heap@@86) ($Is |s#0@@55| Tclass._module.memstate)))) (and (and (and (_module.memstate.MemState_q |s#0@@55|) (|_module.__default.ValidAddrMemState#canCall| (_module.memstate.addresses |s#0@@55|))) (=> (_module.__default.ValidAddrMemState (_module.memstate.addresses |s#0@@55|)) (and (_module.memstate.MemState_q |s#0@@55|) (|_module.__default.ValidGlobalState#canCall| (_module.memstate.globals |s#0@@55|))))) (and (=> (_module.__default.ValidMemState ($LS $ly@@173) |s#0@@55|) (and (_module.__default.ValidAddrMemState (_module.memstate.addresses |s#0@@55|)) (_module.__default.ValidGlobalState (_module.memstate.globals |s#0@@55|)))) (=> (and (_module.__default.ValidAddrMemState (_module.memstate.addresses |s#0@@55|)) (_module.__default.ValidGlobalState (_module.memstate.globals |s#0@@55|))) (_module.__default.ValidMemState ($LS $ly@@173) |s#0@@55|))))) :qid |ARMdefsd.360:21| :skolemid |2533| :pattern ( (_module.__default.ValidMemState ($LS $ly@@173) |s#0@@55|) ($IsGoodHeap $Heap@@86)) ))))
(assert  (=> true (forall (($ly@@174 T@U) ($Heap@@87 T@U) (|s#0@@56| T@U) ) (!  (=> (and (and (and (= (type $ly@@174) LayerTypeType) (= (type $Heap@@87) (MapType1Type refType))) (= (type |s#0@@56|) DatatypeTypeType)) (or (|_module.__default.ValidMemState#canCall| (Lit |s#0@@56|)) (and ($IsGoodHeap $Heap@@87) ($Is |s#0@@56| Tclass._module.memstate)))) (and (and (and (_module.memstate.MemState_q (Lit |s#0@@56|)) (|_module.__default.ValidAddrMemState#canCall| (Lit (_module.memstate.addresses (Lit |s#0@@56|))))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidAddrMemState (Lit (_module.memstate.addresses (Lit |s#0@@56|))))))) (and (_module.memstate.MemState_q (Lit |s#0@@56|)) (|_module.__default.ValidGlobalState#canCall| (Lit (_module.memstate.globals (Lit |s#0@@56|))))))) (and (=> (_module.__default.ValidMemState ($LS $ly@@174) (Lit |s#0@@56|)) (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidAddrMemState (Lit (_module.memstate.addresses (Lit |s#0@@56|)))) (_module.__default.ValidGlobalState (Lit (_module.memstate.globals (Lit |s#0@@56|))))))))) (=> (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidAddrMemState (Lit (_module.memstate.addresses (Lit |s#0@@56|)))) (_module.__default.ValidGlobalState (Lit (_module.memstate.globals (Lit |s#0@@56|)))))))) (_module.__default.ValidMemState ($LS $ly@@174) (Lit |s#0@@56|)))))) :qid |ARMdefsd.360:21| :weight 3 :skolemid |2534| :pattern ( (_module.__default.ValidMemState ($LS $ly@@174) (Lit |s#0@@56|)) ($IsGoodHeap $Heap@@87)) ))))
(assert  (=> true (forall ((|mem#0| T@U) ) (!  (=> (and (= (type |mem#0|) (MapType BoxType BoxType)) (or (|_module.__default.ValidAddrMemState#canCall| |mem#0|) ($Is |mem#0| (TMap Tclass._module.addr Tclass._module.word)))) true) :qid |ARMdefsd.365:29| :skolemid |2535| :pattern ( (_module.__default.ValidAddrMemState |mem#0|)) ))))
(assert (forall ((|mem#0@@0| T@U) ) (!  (=> (and (= (type |mem#0@@0|) (MapType BoxType BoxType)) ($Is |mem#0@@0| (TMap Tclass._module.addr Tclass._module.word))) (and (=> (|_module.__default.ValidAddrMemState#requires| |mem#0@@0|) true) (=> true (|_module.__default.ValidAddrMemState#requires| |mem#0@@0|)))) :qid |ARMdefsd.365:29| :skolemid |2536| :pattern ( (|_module.__default.ValidAddrMemState#requires| |mem#0@@0|)) )))
(assert  (=> true (forall ((|mem#0@@1| T@U) ) (!  (=> (and (= (type |mem#0@@1|) (MapType BoxType BoxType)) (or (|_module.__default.ValidAddrMemState#canCall| |mem#0@@1|) ($Is |mem#0@@1| (TMap Tclass._module.addr Tclass._module.word)))) (and (forall ((|a#0@@7| T@U) ) (!  (=> (= (type |a#0@@7|) intType) (=> (and (_module.__default.isUInt32 (U_2_int |a#0@@7|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (U_2_int |a#0@@7|))) |_module.__default.TheValidAddresses#canCall|)) :qid |ARMdefsd.367:13| :skolemid |2537| :pattern ( (MapType0Select (|Map#Domain| |mem#0@@1|) ($Box |a#0@@7|))) :pattern ( (MapType0Select _module.__default.TheValidAddresses ($Box |a#0@@7|))) )) (and (=> (_module.__default.ValidAddrMemState |mem#0@@1|) (forall ((|a#0@@8| T@U) ) (!  (=> (= (type |a#0@@8|) intType) (=> (and (_module.__default.isUInt32 (U_2_int |a#0@@8|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (U_2_int |a#0@@8|))) (and (=> (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box |a#0@@8|))) (U_2_bool (MapType0Select (|Map#Domain| |mem#0@@1|) ($Box |a#0@@8|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |mem#0@@1|) ($Box |a#0@@8|))) (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box |a#0@@8|))))))) :qid |ARMdefsd.367:13| :skolemid |2538| :pattern ( (MapType0Select (|Map#Domain| |mem#0@@1|) ($Box |a#0@@8|))) :pattern ( (MapType0Select _module.__default.TheValidAddresses ($Box |a#0@@8|))) ))) (=> (forall ((|a#0@@9| Int) ) (!  (=> (and (_module.__default.isUInt32 |a#0@@9|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@9|)) (and (=> (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U |a#0@@9|)))) (U_2_bool (MapType0Select (|Map#Domain| |mem#0@@1|) ($Box (int_2_U |a#0@@9|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |mem#0@@1|) ($Box (int_2_U |a#0@@9|)))) (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U |a#0@@9|))))))) :qid |ARMdefsd.367:13| :skolemid |2538| :pattern ( (MapType0Select (|Map#Domain| |mem#0@@1|) ($Box (int_2_U |a#0@@9|)))) :pattern ( (MapType0Select _module.__default.TheValidAddresses ($Box (int_2_U |a#0@@9|)))) )) (_module.__default.ValidAddrMemState |mem#0@@1|))))) :qid |ARMdefsd.365:29| :skolemid |2539| :pattern ( (_module.__default.ValidAddrMemState |mem#0@@1|)) ))))
(assert  (=> true (forall ((|mem#0@@2| T@U) ) (!  (=> (and (= (type |mem#0@@2|) (MapType BoxType BoxType)) (or (|_module.__default.ValidAddrMemState#canCall| (Lit |mem#0@@2|)) ($Is |mem#0@@2| (TMap Tclass._module.addr Tclass._module.word)))) (and (forall ((|a#1| T@U) ) (!  (=> (= (type |a#1|) intType) (=> (and (_module.__default.isUInt32 (U_2_int |a#1|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (U_2_int |a#1|))) |_module.__default.TheValidAddresses#canCall|)) :qid |ARMdefsd.367:13| :skolemid |2540| :pattern ( (MapType0Select (|Map#Domain| |mem#0@@2|) ($Box |a#1|))) :pattern ( (MapType0Select _module.__default.TheValidAddresses ($Box |a#1|))) )) (and (=> (_module.__default.ValidAddrMemState (Lit |mem#0@@2|)) (forall ((|a#1@@0| T@U) ) (!  (=> (= (type |a#1@@0|) intType) (=> (and (_module.__default.isUInt32 (U_2_int |a#1@@0|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (U_2_int |a#1@@0|))) (and (=> (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box |a#1@@0|))) (U_2_bool (MapType0Select (|Map#Domain| |mem#0@@2|) ($Box |a#1@@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |mem#0@@2|) ($Box |a#1@@0|))) (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box |a#1@@0|))))))) :qid |ARMdefsd.367:13| :skolemid |2541| :pattern ( (MapType0Select (|Map#Domain| |mem#0@@2|) ($Box |a#1@@0|))) :pattern ( (MapType0Select _module.__default.TheValidAddresses ($Box |a#1@@0|))) ))) (=> (forall ((|a#1@@1| Int) ) (!  (=> (and (_module.__default.isUInt32 |a#1@@1|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#1@@1|)) (and (=> (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U |a#1@@1|)))) (U_2_bool (MapType0Select (|Map#Domain| |mem#0@@2|) ($Box (int_2_U |a#1@@1|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |mem#0@@2|) ($Box (int_2_U |a#1@@1|)))) (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U |a#1@@1|))))))) :qid |ARMdefsd.367:13| :skolemid |2541| :pattern ( (MapType0Select (|Map#Domain| |mem#0@@2|) ($Box (int_2_U |a#1@@1|)))) :pattern ( (MapType0Select _module.__default.TheValidAddresses ($Box (int_2_U |a#1@@1|)))) )) (_module.__default.ValidAddrMemState (Lit |mem#0@@2|)))))) :qid |ARMdefsd.365:29| :weight 3 :skolemid |2542| :pattern ( (_module.__default.ValidAddrMemState (Lit |mem#0@@2|))) ))))
(assert  (=> true (forall ((|globals#0| T@U) ) (!  (=> (and (= (type |globals#0|) (MapType BoxType BoxType)) (or (|_module.__default.ValidGlobalState#canCall| |globals#0|) ($Is |globals#0| (TMap (TSeq TChar) (TSeq Tclass._module.word))))) true) :qid |ARMdefsd.370:28| :skolemid |2543| :pattern ( (_module.__default.ValidGlobalState |globals#0|)) ))))
(assert (forall ((|globals#0@@0| T@U) ) (!  (=> (and (= (type |globals#0@@0|) (MapType BoxType BoxType)) ($Is |globals#0@@0| (TMap (TSeq TChar) (TSeq Tclass._module.word)))) (and (=> (|_module.__default.ValidGlobalState#requires| |globals#0@@0|) true) (=> true (|_module.__default.ValidGlobalState#requires| |globals#0@@0|)))) :qid |ARMdefsd.370:28| :skolemid |2544| :pattern ( (|_module.__default.ValidGlobalState#requires| |globals#0@@0|)) )))
(assert (= (type _module.__default.TheGlobalDecls) (MapType BoxType BoxType)))
(assert  (=> true (forall ((|globals#0@@1| T@U) ) (!  (=> (and (= (type |globals#0@@1|) (MapType BoxType BoxType)) (or (|_module.__default.ValidGlobalState#canCall| |globals#0@@1|) ($Is |globals#0@@1| (TMap (TSeq TChar) (TSeq Tclass._module.word))))) (and (and (forall ((|g#0| T@U) ) (!  (=> (and (= (type |g#0|) (SeqType BoxType)) ($Is |g#0| (TSeq TChar))) |_module.__default.TheGlobalDecls#canCall|) :qid |ARMdefsd.373:13| :skolemid |2545| :pattern ( (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0|))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0|))) )) (=> (forall ((|g#0@@0| T@U) ) (!  (=> (and (= (type |g#0@@0|) (SeqType BoxType)) ($Is |g#0@@0| (TSeq TChar))) (and (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@0|))) (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0@@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0@@0|))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@0|)))))) :qid |ARMdefsd.373:13| :skolemid |2547| :pattern ( (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0@@0|))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@0|))) )) (forall ((|g#1| T@U) ) (!  (=> (and (= (type |g#1|) (SeqType BoxType)) ($Is |g#1| (TSeq TChar))) (and |_module.__default.TheGlobalDecls#canCall| (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#1|))) (and |_module.__default.TheGlobalDecls#canCall| (|_module.__default.BytesToWords#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#1|))))))))) :qid |ARMdefsd.374:16| :skolemid |2546| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#1|)))) :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |globals#0@@1|) ($Box |g#1|)))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#1|))) )))) (and (=> (_module.__default.ValidGlobalState |globals#0@@1|) (and (forall ((|g#0@@1| T@U) ) (!  (=> (and (= (type |g#0@@1|) (SeqType BoxType)) ($Is |g#0@@1| (TSeq TChar))) (and (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@1|))) (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0@@1|))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@1|)))))) :qid |ARMdefsd.373:13| :skolemid |2548| :pattern ( (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0@@1|))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@1|))) )) (forall ((|g#1@@0| T@U) ) (!  (=> (and (and (= (type |g#1@@0|) (SeqType BoxType)) ($Is |g#1@@0| (TSeq TChar))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#1@@0|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |globals#0@@1|) ($Box |g#1@@0|)))) (_module.__default.BytesToWords (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#1@@0|))))))) :qid |ARMdefsd.374:16| :skolemid |2549| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#1@@0|)))) :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |globals#0@@1|) ($Box |g#1@@0|)))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#1@@0|))) )))) (=> (and (forall ((|g#0@@2| T@U) ) (!  (=> (and (= (type |g#0@@2|) (SeqType BoxType)) ($Is |g#0@@2| (TSeq TChar))) (and (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@2|))) (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0@@2|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0@@2|))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@2|)))))) :qid |ARMdefsd.373:13| :skolemid |2548| :pattern ( (MapType0Select (|Map#Domain| |globals#0@@1|) ($Box |g#0@@2|))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@2|))) )) (forall ((|g#1@@1| T@U) ) (!  (=> (and (and (= (type |g#1@@1|) (SeqType BoxType)) ($Is |g#1@@1| (TSeq TChar))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#1@@1|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |globals#0@@1|) ($Box |g#1@@1|)))) (_module.__default.BytesToWords (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#1@@1|))))))) :qid |ARMdefsd.374:16| :skolemid |2549| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#1@@1|)))) :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |globals#0@@1|) ($Box |g#1@@1|)))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#1@@1|))) ))) (_module.__default.ValidGlobalState |globals#0@@1|))))) :qid |ARMdefsd.370:28| :skolemid |2550| :pattern ( (_module.__default.ValidGlobalState |globals#0@@1|)) ))))
(assert  (=> true (forall ((|globals#0@@2| T@U) ) (!  (=> (and (= (type |globals#0@@2|) (MapType BoxType BoxType)) (or (|_module.__default.ValidGlobalState#canCall| (Lit |globals#0@@2|)) ($Is |globals#0@@2| (TMap (TSeq TChar) (TSeq Tclass._module.word))))) (and (and (forall ((|g#2| T@U) ) (!  (=> (and (= (type |g#2|) (SeqType BoxType)) ($Is |g#2| (TSeq TChar))) |_module.__default.TheGlobalDecls#canCall|) :qid |ARMdefsd.373:13| :skolemid |2551| :pattern ( (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2|))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2|))) )) (=> (forall ((|g#2@@0| T@U) ) (!  (=> (and (= (type |g#2@@0|) (SeqType BoxType)) ($Is |g#2@@0| (TSeq TChar))) (and (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2@@0|))) (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2@@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2@@0|))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2@@0|)))))) :qid |ARMdefsd.373:13| :skolemid |2553| :pattern ( (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2@@0|))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2@@0|))) )) (forall ((|g#3| T@U) ) (!  (=> (and (= (type |g#3|) (SeqType BoxType)) ($Is |g#3| (TSeq TChar))) (and |_module.__default.TheGlobalDecls#canCall| (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#3|))) (and |_module.__default.TheGlobalDecls#canCall| (|_module.__default.BytesToWords#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#3|))))))))) :qid |ARMdefsd.374:16| :skolemid |2552| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#3|)))) :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |globals#0@@2|) ($Box |g#3|)))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#3|))) )))) (and (=> (_module.__default.ValidGlobalState (Lit |globals#0@@2|)) (and (forall ((|g#2@@1| T@U) ) (!  (=> (and (= (type |g#2@@1|) (SeqType BoxType)) ($Is |g#2@@1| (TSeq TChar))) (and (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2@@1|))) (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2@@1|))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2@@1|)))))) :qid |ARMdefsd.373:13| :skolemid |2554| :pattern ( (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2@@1|))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2@@1|))) )) (forall ((|g#3@@0| T@U) ) (!  (=> (and (and (= (type |g#3@@0|) (SeqType BoxType)) ($Is |g#3@@0| (TSeq TChar))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#3@@0|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit |globals#0@@2|)) ($Box |g#3@@0|)))) (_module.__default.BytesToWords (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#3@@0|))))))) :qid |ARMdefsd.374:16| :skolemid |2555| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#3@@0|)))) :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |globals#0@@2|) ($Box |g#3@@0|)))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#3@@0|))) )))) (=> (and (forall ((|g#2@@2| T@U) ) (!  (=> (and (= (type |g#2@@2|) (SeqType BoxType)) ($Is |g#2@@2| (TSeq TChar))) (and (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2@@2|))) (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2@@2|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2@@2|))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2@@2|)))))) :qid |ARMdefsd.373:13| :skolemid |2554| :pattern ( (MapType0Select (|Map#Domain| |globals#0@@2|) ($Box |g#2@@2|))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#2@@2|))) )) (forall ((|g#3@@1| T@U) ) (!  (=> (and (and (= (type |g#3@@1|) (SeqType BoxType)) ($Is |g#3@@1| (TSeq TChar))) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#3@@1|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit |globals#0@@2|)) ($Box |g#3@@1|)))) (_module.__default.BytesToWords (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#3@@1|))))))) :qid |ARMdefsd.374:16| :skolemid |2555| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#3@@1|)))) :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |globals#0@@2|) ($Box |g#3@@1|)))) :pattern ( (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#3@@1|))) ))) (_module.__default.ValidGlobalState (Lit |globals#0@@2|)))))) :qid |ARMdefsd.370:28| :weight 3 :skolemid |2556| :pattern ( (_module.__default.ValidGlobalState (Lit |globals#0@@2|))) ))))
(assert  (=> true (=> true (and (_module.__default.isUInt32 _module.__default.RngBase) (_module.__default.WordAligned StartFuel__module._default.WordAligned _module.__default.RngBase)))))
(assert  (=> |_module.__default.RngBase#requires| true))
(assert  (=> true |_module.__default.RngBase#requires|))
(assert  (=> true (forall ((|s#0@@57| T@U) (|o#0@@1| Int) ) (!  (=> (and (= (type |s#0@@57|) DatatypeTypeType) (or (|_module.__default.ValidRngOffset#canCall| |s#0@@57| |o#0@@1|) ($Is |s#0@@57| Tclass._module.state))) true) :qid |ARMdefsd.385:26| :skolemid |2557| :pattern ( (_module.__default.ValidRngOffset |s#0@@57| |o#0@@1|)) ))))
(assert (forall (($Heap@@88 T@U) (|s#0@@58| T@U) (|o#0@@2| Int) ) (!  (=> (and (and (= (type $Heap@@88) (MapType1Type refType)) (= (type |s#0@@58|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@88) ($Is |s#0@@58| Tclass._module.state))) (and (=> (|_module.__default.ValidRngOffset#requires| |s#0@@58| |o#0@@2|) true) (=> true (|_module.__default.ValidRngOffset#requires| |s#0@@58| |o#0@@2|)))) :qid |ARMdefsd.385:11| :skolemid |2558| :pattern ( (|_module.__default.ValidRngOffset#requires| |s#0@@58| |o#0@@2|) ($IsGoodHeap $Heap@@88)) )))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (_module.state.rng arg0@@296)) DatatypeTypeType) :qid |funType:_module.state.rng| :pattern ( (_module.state.rng arg0@@296)) )))
(assert  (=> true (forall (($Heap@@89 T@U) (|s#0@@59| T@U) (|o#0@@3| Int) ) (!  (=> (and (and (= (type $Heap@@89) (MapType1Type refType)) (= (type |s#0@@59|) DatatypeTypeType)) (or (|_module.__default.ValidRngOffset#canCall| |s#0@@59| |o#0@@3|) (and ($IsGoodHeap $Heap@@89) ($Is |s#0@@59| Tclass._module.state)))) (and (and (and (|_module.__default.WordAligned#canCall| |o#0@@3|) (=> (_module.__default.WordAligned StartFuel__module._default.WordAligned |o#0@@3|) (=> (INTERNAL_le_boogie 0 |o#0@@3|) (|_module.__default.WordsToBytes#canCall| (LitInt 2))))) (=> (and (=> (INTERNAL_le_boogie 0 |o#0@@3|) (|_module.__default.WordsToBytes#canCall| (LitInt 2))) (and (INTERNAL_le_boogie 0 |o#0@@3|) (INTERNAL_le_boogie |o#0@@3| (_module.__default.WordsToBytes (LitInt 2))))) (and (|_module.__default.WordsToBytes#canCall| (LitInt 2)) (=> (= |o#0@@3| (_module.__default.WordsToBytes (LitInt 2))) (and (and (_module.state.State_q |s#0@@59|) (_module.RNG.RNG_q (_module.state.rng |s#0@@59|))) (=> (not (_module.RNG.consumed (_module.state.rng |s#0@@59|))) (and (_module.state.State_q |s#0@@59|) (_module.RNG.RNG_q (_module.state.rng |s#0@@59|))))))))) (and (=> (_module.__default.ValidRngOffset |s#0@@59| |o#0@@3|) (and (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |o#0@@3|) (and (INTERNAL_le_boogie 0 |o#0@@3|) (INTERNAL_le_boogie |o#0@@3| (_module.__default.WordsToBytes (LitInt 2))))) (=> (= |o#0@@3| (_module.__default.WordsToBytes (LitInt 2))) (and (not (_module.RNG.consumed (_module.state.rng |s#0@@59|))) (_module.RNG.ready (_module.state.rng |s#0@@59|)))))) (=> (and (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |o#0@@3|) (and (INTERNAL_le_boogie 0 |o#0@@3|) (INTERNAL_le_boogie |o#0@@3| (_module.__default.WordsToBytes (LitInt 2))))) (=> (= |o#0@@3| (_module.__default.WordsToBytes (LitInt 2))) (and (not (_module.RNG.consumed (_module.state.rng |s#0@@59|))) (_module.RNG.ready (_module.state.rng |s#0@@59|))))) (_module.__default.ValidRngOffset |s#0@@59| |o#0@@3|))))) :qid |ARMdefsd.385:11| :skolemid |2559| :pattern ( (_module.__default.ValidRngOffset |s#0@@59| |o#0@@3|) ($IsGoodHeap $Heap@@89)) ))))
(assert  (=> true (forall (($Heap@@90 T@U) (|s#0@@60| T@U) (|o#0@@4| Int) ) (!  (=> (and (and (= (type $Heap@@90) (MapType1Type refType)) (= (type |s#0@@60|) DatatypeTypeType)) (or (|_module.__default.ValidRngOffset#canCall| (Lit |s#0@@60|) (LitInt |o#0@@4|)) (and ($IsGoodHeap $Heap@@90) ($Is |s#0@@60| Tclass._module.state)))) (and (and (and (|_module.__default.WordAligned#canCall| (LitInt |o#0@@4|)) (=> (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |o#0@@4|)) (=> (INTERNAL_le_boogie 0 |o#0@@4|) (|_module.__default.WordsToBytes#canCall| (LitInt 2))))) (=> (and (=> (INTERNAL_le_boogie 0 |o#0@@4|) (|_module.__default.WordsToBytes#canCall| (LitInt 2))) (and (INTERNAL_le_boogie 0 |o#0@@4|) (INTERNAL_le_boogie |o#0@@4| (_module.__default.WordsToBytes (LitInt 2))))) (and (|_module.__default.WordsToBytes#canCall| (LitInt 2)) (=> (= (LitInt |o#0@@4|) (_module.__default.WordsToBytes (LitInt 2))) (and (and (_module.state.State_q (Lit |s#0@@60|)) (_module.RNG.RNG_q (Lit (_module.state.rng (Lit |s#0@@60|))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.RNG.consumed (Lit (_module.state.rng (Lit |s#0@@60|)))))))) (and (_module.state.State_q (Lit |s#0@@60|)) (_module.RNG.RNG_q (Lit (_module.state.rng (Lit |s#0@@60|))))))))))) (and (=> (_module.__default.ValidRngOffset (Lit |s#0@@60|) (LitInt |o#0@@4|)) (and (and (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |o#0@@4|)) (and (INTERNAL_le_boogie 0 |o#0@@4|) (INTERNAL_le_boogie |o#0@@4| (_module.__default.WordsToBytes (LitInt 2))))) (=> (= (LitInt |o#0@@4|) (_module.__default.WordsToBytes (LitInt 2))) (and (not (U_2_bool (Lit (bool_2_U (_module.RNG.consumed (Lit (_module.state.rng (Lit |s#0@@60|)))))))) (_module.RNG.ready (Lit (_module.state.rng (Lit |s#0@@60|)))))))) (=> (and (and (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |o#0@@4|)) (and (INTERNAL_le_boogie 0 |o#0@@4|) (INTERNAL_le_boogie |o#0@@4| (_module.__default.WordsToBytes (LitInt 2))))) (=> (= (LitInt |o#0@@4|) (_module.__default.WordsToBytes (LitInt 2))) (and (not (U_2_bool (Lit (bool_2_U (_module.RNG.consumed (Lit (_module.state.rng (Lit |s#0@@60|)))))))) (_module.RNG.ready (Lit (_module.state.rng (Lit |s#0@@60|))))))) (_module.__default.ValidRngOffset (Lit |s#0@@60|) (LitInt |o#0@@4|)))))) :qid |ARMdefsd.385:11| :weight 3 :skolemid |2560| :pattern ( (_module.__default.ValidRngOffset (Lit |s#0@@60|) (LitInt |o#0@@4|)) ($IsGoodHeap $Heap@@90)) ))))
(assert  (=> true (forall ((|s#0@@61| T@U) (|offset#0| Int) ) (!  (=> (and (= (type |s#0@@61|) DatatypeTypeType) (or (|_module.__default.RngReadData#canCall| |s#0@@61| |offset#0|) (and (and ($Is |s#0@@61| Tclass._module.state) (_module.__default.isUInt32 |offset#0|)) (and (_module.__default.ValidState |s#0@@61|) (_module.__default.ValidRngOffset |s#0@@61| |offset#0|))))) (_module.__default.isUInt32 (_module.__default.RngReadData |s#0@@61| |offset#0|))) :qid |ARMdefsd.393:22| :skolemid |2561| :pattern ( (_module.__default.RngReadData |s#0@@61| |offset#0|)) ))))
(assert (forall (($Heap@@91 T@U) (|s#0@@62| T@U) (|offset#0@@0| Int) ) (!  (=> (and (= (type $Heap@@91) (MapType1Type refType)) (= (type |s#0@@62|) DatatypeTypeType)) (=> (and (and ($IsGoodHeap $Heap@@91) ($Is |s#0@@62| Tclass._module.state)) (_module.__default.isUInt32 |offset#0@@0|)) (and (=> (|_module.__default.RngReadData#requires| |s#0@@62| |offset#0@@0|) (and (_module.__default.ValidState |s#0@@62|) (_module.__default.ValidRngOffset |s#0@@62| |offset#0@@0|))) (=> (and (_module.__default.ValidState |s#0@@62|) (_module.__default.ValidRngOffset |s#0@@62| |offset#0@@0|)) (|_module.__default.RngReadData#requires| |s#0@@62| |offset#0@@0|))))) :qid |ARMdefsd.393:10| :skolemid |2562| :pattern ( (|_module.__default.RngReadData#requires| |s#0@@62| |offset#0@@0|) ($IsGoodHeap $Heap@@91)) )))
(assert  (=> true (forall (($Heap@@92 T@U) (|s#0@@63| T@U) (|offset#0@@1| Int) ) (!  (=> (and (and (= (type $Heap@@92) (MapType1Type refType)) (= (type |s#0@@63|) DatatypeTypeType)) (or (|_module.__default.RngReadData#canCall| |s#0@@63| |offset#0@@1|) (and (and (and ($IsGoodHeap $Heap@@92) ($Is |s#0@@63| Tclass._module.state)) (_module.__default.isUInt32 |offset#0@@1|)) (and (_module.__default.ValidState |s#0@@63|) (_module.__default.ValidRngOffset |s#0@@63| |offset#0@@1|))))) (and (and (and (|_module.__default.WordsToBytes#canCall| (LitInt 2)) (=> (= |offset#0@@1| (_module.__default.WordsToBytes (LitInt 2))) (and (_module.state.State_q |s#0@@63|) (_module.RNG.RNG_q (_module.state.rng |s#0@@63|))))) (=> (not (= |offset#0@@1| (_module.__default.WordsToBytes (LitInt 2)))) (and (and (and (_module.state.State_q |s#0@@63|) (_module.config.Config_q (_module.state.conf |s#0@@63|))) (|_module.__default.NONDET__RNG#canCall| |offset#0@@1|)) (|_module.__default.nondet__word#canCall| (_module.config.nondet (_module.state.conf |s#0@@63|)) (_module.__default.NONDET__RNG |offset#0@@1|))))) (= (_module.__default.RngReadData |s#0@@63| |offset#0@@1|) (ite (= |offset#0@@1| (_module.__default.WordsToBytes (LitInt 2))) (_module.RNG.entropy (_module.state.rng |s#0@@63|)) (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@63|)) (_module.__default.NONDET__RNG |offset#0@@1|)))))) :qid |ARMdefsd.393:10| :skolemid |2563| :pattern ( (_module.__default.RngReadData |s#0@@63| |offset#0@@1|) ($IsGoodHeap $Heap@@92)) ))))
(assert  (=> true (forall (($Heap@@93 T@U) (|s#0@@64| T@U) (|offset#0@@2| Int) ) (!  (=> (and (and (= (type $Heap@@93) (MapType1Type refType)) (= (type |s#0@@64|) DatatypeTypeType)) (or (|_module.__default.RngReadData#canCall| (Lit |s#0@@64|) (LitInt |offset#0@@2|)) (and (and (and ($IsGoodHeap $Heap@@93) ($Is |s#0@@64| Tclass._module.state)) (_module.__default.isUInt32 |offset#0@@2|)) (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidState (Lit |s#0@@64|)) (_module.__default.ValidRngOffset (Lit |s#0@@64|) (LitInt |offset#0@@2|))))))))) (and (and (and (|_module.__default.WordsToBytes#canCall| (LitInt 2)) (=> (= (LitInt |offset#0@@2|) (_module.__default.WordsToBytes (LitInt 2))) (and (_module.state.State_q (Lit |s#0@@64|)) (_module.RNG.RNG_q (Lit (_module.state.rng (Lit |s#0@@64|))))))) (=> (not (= (LitInt |offset#0@@2|) (_module.__default.WordsToBytes (LitInt 2)))) (and (and (and (_module.state.State_q (Lit |s#0@@64|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@64|))))) (|_module.__default.NONDET__RNG#canCall| (LitInt |offset#0@@2|))) (|_module.__default.nondet__word#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@64|))))) (_module.__default.NONDET__RNG (LitInt |offset#0@@2|)))))) (= (_module.__default.RngReadData (Lit |s#0@@64|) (LitInt |offset#0@@2|)) (ite (= (LitInt |offset#0@@2|) (_module.__default.WordsToBytes (LitInt 2))) (_module.RNG.entropy (Lit (_module.state.rng (Lit |s#0@@64|)))) (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@64|))))) (_module.__default.NONDET__RNG (LitInt |offset#0@@2|))))))) :qid |ARMdefsd.393:10| :weight 3 :skolemid |2564| :pattern ( (_module.__default.RngReadData (Lit |s#0@@64|) (LitInt |offset#0@@2|)) ($IsGoodHeap $Heap@@93)) ))))
(assert (forall ((arg0@@297 T@U) (arg1@@152 Int) ) (! (= (type (_module.__default.RngReadState arg0@@297 arg1@@152)) DatatypeTypeType) :qid |funType:_module.__default.RngReadState| :pattern ( (_module.__default.RngReadState arg0@@297 arg1@@152)) )))
(assert  (=> true (forall ((|s#0@@65| T@U) (|offset#0@@3| Int) ) (!  (=> (and (= (type |s#0@@65|) DatatypeTypeType) (or (|_module.__default.RngReadState#canCall| |s#0@@65| |offset#0@@3|) (and (and ($Is |s#0@@65| Tclass._module.state) (_module.__default.isUInt32 |offset#0@@3|)) (and (_module.__default.ValidState |s#0@@65|) (_module.__default.ValidRngOffset |s#0@@65| |offset#0@@3|))))) ($Is (_module.__default.RngReadState |s#0@@65| |offset#0@@3|) Tclass._module.state)) :qid |ARMdefsd.402:23| :skolemid |2565| :pattern ( (_module.__default.RngReadState |s#0@@65| |offset#0@@3|)) ))))
(assert (forall (($Heap@@94 T@U) (|s#0@@66| T@U) (|offset#0@@4| Int) ) (!  (=> (and (= (type $Heap@@94) (MapType1Type refType)) (= (type |s#0@@66|) DatatypeTypeType)) (=> (and (and ($IsGoodHeap $Heap@@94) ($Is |s#0@@66| Tclass._module.state)) (_module.__default.isUInt32 |offset#0@@4|)) (and (=> (|_module.__default.RngReadState#requires| |s#0@@66| |offset#0@@4|) (and (_module.__default.ValidState |s#0@@66|) (_module.__default.ValidRngOffset |s#0@@66| |offset#0@@4|))) (=> (and (_module.__default.ValidState |s#0@@66|) (_module.__default.ValidRngOffset |s#0@@66| |offset#0@@4|)) (|_module.__default.RngReadState#requires| |s#0@@66| |offset#0@@4|))))) :qid |ARMdefsd.402:10| :skolemid |2566| :pattern ( (|_module.__default.RngReadState#requires| |s#0@@66| |offset#0@@4|) ($IsGoodHeap $Heap@@94)) )))
(assert  (and (forall ((arg0@@298 T@U) (arg1@@153 T@U) (arg2@@105 T@U) (arg3@@69 T@U) (arg4@@56 T@U) (arg5@@45 Bool) (arg6@@35 Int) ) (! (= (type (|#_module.state.State| arg0@@298 arg1@@153 arg2@@105 arg3@@69 arg4@@56 arg5@@45 arg6@@35)) DatatypeTypeType) :qid |funType:#_module.state.State| :pattern ( (|#_module.state.State| arg0@@298 arg1@@153 arg2@@105 arg3@@69 arg4@@56 arg5@@45 arg6@@35)) )) (forall ((arg0@@299 Int) (arg1@@154 Bool) (arg2@@106 Bool) ) (! (= (type (|#_module.RNG.RNG| arg0@@299 arg1@@154 arg2@@106)) DatatypeTypeType) :qid |funType:#_module.RNG.RNG| :pattern ( (|#_module.RNG.RNG| arg0@@299 arg1@@154 arg2@@106)) ))))
(assert  (=> true (forall (($Heap@@95 T@U) (|s#0@@67| T@U) (|offset#0@@5| Int) ) (!  (=> (and (and (= (type $Heap@@95) (MapType1Type refType)) (= (type |s#0@@67|) DatatypeTypeType)) (or (|_module.__default.RngReadState#canCall| |s#0@@67| |offset#0@@5|) (and (and (and ($IsGoodHeap $Heap@@95) ($Is |s#0@@67| Tclass._module.state)) (_module.__default.isUInt32 |offset#0@@5|)) (and (_module.__default.ValidState |s#0@@67|) (_module.__default.ValidRngOffset |s#0@@67| |offset#0@@5|))))) (and (and (and (|_module.__default.WordsToBytes#canCall| (LitInt 2)) (=> (= |offset#0@@5| (_module.__default.WordsToBytes (LitInt 2))) (and (and (and (and (and (and (_module.state.State_q |s#0@@67|) (_module.state.State_q |s#0@@67|)) (_module.state.State_q |s#0@@67|)) (_module.state.State_q |s#0@@67|)) (and (_module.state.State_q |s#0@@67|) (_module.RNG.RNG_q (_module.state.rng |s#0@@67|)))) (_module.state.State_q |s#0@@67|)) (_module.state.State_q |s#0@@67|)))) (=> (not (= |offset#0@@5| (_module.__default.WordsToBytes (LitInt 2)))) (and (|_module.__default.WordsToBytes#canCall| (LitInt 1)) (=> (= |offset#0@@5| (_module.__default.WordsToBytes (LitInt 1))) (and (|_module.__default.RngReadData#canCall| |s#0@@67| |offset#0@@5|) (and (and (and (and (and (and (_module.state.State_q |s#0@@67|) (_module.state.State_q |s#0@@67|)) (_module.state.State_q |s#0@@67|)) (_module.state.State_q |s#0@@67|)) (and (_module.state.State_q |s#0@@67|) (and (and (_module.RNG.RNG_q (_module.state.rng |s#0@@67|)) (_module.RNG.RNG_q (_module.state.rng |s#0@@67|))) (|_module.__default.RightShift#canCall| (_module.__default.RngReadData |s#0@@67| |offset#0@@5|) (LitInt 24))))) (_module.state.State_q |s#0@@67|)) (_module.state.State_q |s#0@@67|))))))) (= (_module.__default.RngReadState |s#0@@67| |offset#0@@5|) (ite (= |offset#0@@5| (_module.__default.WordsToBytes (LitInt 2))) (|#_module.state.State| (_module.state.regs |s#0@@67|) (_module.state.sregs |s#0@@67|) (_module.state.m |s#0@@67|) (_module.state.conf |s#0@@67|) (|#_module.RNG.RNG| (_module.RNG.entropy (_module.state.rng |s#0@@67|)) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U false)))) (_module.state.ok |s#0@@67|) (_module.state.steps |s#0@@67|)) (ite (= |offset#0@@5| (_module.__default.WordsToBytes (LitInt 1))) (|#_module.state.State| (_module.state.regs |s#0@@67|) (_module.state.sregs |s#0@@67|) (_module.state.m |s#0@@67|) (_module.state.conf |s#0@@67|) (|#_module.RNG.RNG| (_module.RNG.entropy (_module.state.rng |s#0@@67|)) (_module.RNG.consumed (_module.state.rng |s#0@@67|)) (not (= (_module.__default.RightShift (_module.__default.RngReadData |s#0@@67| |offset#0@@5|) (LitInt 24)) 0))) (_module.state.ok |s#0@@67|) (_module.state.steps |s#0@@67|)) |s#0@@67|))))) :qid |ARMdefsd.402:10| :skolemid |2567| :pattern ( (_module.__default.RngReadState |s#0@@67| |offset#0@@5|) ($IsGoodHeap $Heap@@95)) ))))
(assert  (=> true (forall (($Heap@@96 T@U) (|s#0@@68| T@U) (|offset#0@@6| Int) ) (!  (=> (and (and (= (type $Heap@@96) (MapType1Type refType)) (= (type |s#0@@68|) DatatypeTypeType)) (or (|_module.__default.RngReadState#canCall| (Lit |s#0@@68|) (LitInt |offset#0@@6|)) (and (and (and ($IsGoodHeap $Heap@@96) ($Is |s#0@@68| Tclass._module.state)) (_module.__default.isUInt32 |offset#0@@6|)) (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidState (Lit |s#0@@68|)) (_module.__default.ValidRngOffset (Lit |s#0@@68|) (LitInt |offset#0@@6|))))))))) (and (and (and (|_module.__default.WordsToBytes#canCall| (LitInt 2)) (=> (= (LitInt |offset#0@@6|) (_module.__default.WordsToBytes (LitInt 2))) (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@68|)) (_module.state.State_q (Lit |s#0@@68|))) (_module.state.State_q (Lit |s#0@@68|))) (_module.state.State_q (Lit |s#0@@68|))) (and (_module.state.State_q (Lit |s#0@@68|)) (_module.RNG.RNG_q (Lit (_module.state.rng (Lit |s#0@@68|)))))) (_module.state.State_q (Lit |s#0@@68|))) (_module.state.State_q (Lit |s#0@@68|))))) (=> (not (= (LitInt |offset#0@@6|) (_module.__default.WordsToBytes (LitInt 2)))) (and (|_module.__default.WordsToBytes#canCall| (LitInt 1)) (=> (= (LitInt |offset#0@@6|) (_module.__default.WordsToBytes (LitInt 1))) (and (|_module.__default.RngReadData#canCall| (Lit |s#0@@68|) (LitInt |offset#0@@6|)) (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@68|)) (_module.state.State_q (Lit |s#0@@68|))) (_module.state.State_q (Lit |s#0@@68|))) (_module.state.State_q (Lit |s#0@@68|))) (and (_module.state.State_q (Lit |s#0@@68|)) (and (and (_module.RNG.RNG_q (Lit (_module.state.rng (Lit |s#0@@68|)))) (_module.RNG.RNG_q (Lit (_module.state.rng (Lit |s#0@@68|))))) (|_module.__default.RightShift#canCall| (LitInt (_module.__default.RngReadData (Lit |s#0@@68|) (LitInt |offset#0@@6|))) (LitInt 24))))) (_module.state.State_q (Lit |s#0@@68|))) (_module.state.State_q (Lit |s#0@@68|)))))))) (= (_module.__default.RngReadState (Lit |s#0@@68|) (LitInt |offset#0@@6|)) (ite (= (LitInt |offset#0@@6|) (_module.__default.WordsToBytes (LitInt 2))) (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@68|))) (Lit (_module.state.sregs (Lit |s#0@@68|))) (Lit (_module.state.m (Lit |s#0@@68|))) (Lit (_module.state.conf (Lit |s#0@@68|))) (Lit (|#_module.RNG.RNG| (LitInt (_module.RNG.entropy (Lit (_module.state.rng (Lit |s#0@@68|))))) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U false))))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@68|))))) (LitInt (_module.state.steps (Lit |s#0@@68|)))) (ite (= (LitInt |offset#0@@6|) (_module.__default.WordsToBytes (LitInt 1))) (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@68|))) (Lit (_module.state.sregs (Lit |s#0@@68|))) (Lit (_module.state.m (Lit |s#0@@68|))) (Lit (_module.state.conf (Lit |s#0@@68|))) (|#_module.RNG.RNG| (LitInt (_module.RNG.entropy (Lit (_module.state.rng (Lit |s#0@@68|))))) (U_2_bool (Lit (bool_2_U (_module.RNG.consumed (Lit (_module.state.rng (Lit |s#0@@68|))))))) (not (= (_module.__default.RightShift (LitInt (_module.__default.RngReadData (Lit |s#0@@68|) (LitInt |offset#0@@6|))) (LitInt 24)) 0))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@68|))))) (LitInt (_module.state.steps (Lit |s#0@@68|)))) |s#0@@68|))))) :qid |ARMdefsd.402:10| :weight 3 :skolemid |2568| :pattern ( (_module.__default.RngReadState (Lit |s#0@@68|) (LitInt |offset#0@@6|)) ($IsGoodHeap $Heap@@96)) ))))
(assert (= (type Tclass._module.operand) TyType))
(assert (= (Tag Tclass._module.operand) Tagclass._module.operand))
(assert (forall ((bx@@106 T@U) ) (!  (=> (and (= (type bx@@106) BoxType) ($IsBox bx@@106 Tclass._module.operand)) (and (= ($Box ($Unbox DatatypeTypeType bx@@106)) bx@@106) ($Is ($Unbox DatatypeTypeType bx@@106) Tclass._module.operand))) :qid |unknown.0:0| :skolemid |2569| :pattern ( ($IsBox bx@@106 Tclass._module.operand)) )))
(assert  (=> true (forall ((|o#0@@5| T@U) ) (!  (=> (and (= (type |o#0@@5|) DatatypeTypeType) (or (|_module.__default.ValidOperand#canCall| |o#0@@5|) ($Is |o#0@@5| Tclass._module.operand))) true) :qid |ARMdefsd.417:24| :skolemid |2570| :pattern ( (_module.__default.ValidOperand |o#0@@5|)) ))))
(assert (forall (($Heap@@97 T@U) (|o#0@@6| T@U) ) (!  (=> (and (and (= (type $Heap@@97) (MapType1Type refType)) (= (type |o#0@@6|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@97) ($Is |o#0@@6| Tclass._module.operand))) (and (=> (|_module.__default.ValidOperand#requires| |o#0@@6|) true) (=> true (|_module.__default.ValidOperand#requires| |o#0@@6|)))) :qid |ARMdefsd.417:11| :skolemid |2571| :pattern ( (|_module.__default.ValidOperand#requires| |o#0@@6|) ($IsGoodHeap $Heap@@97)) )))
(assert  (=> true (forall (($Heap@@98 T@U) (|o#0@@7| T@U) ) (!  (=> (and (and (= (type $Heap@@98) (MapType1Type refType)) (= (type |o#0@@7|) DatatypeTypeType)) (or (|_module.__default.ValidOperand#canCall| |o#0@@7|) (and ($IsGoodHeap $Heap@@98) ($Is |o#0@@7| Tclass._module.operand)))) (and (|_module.__default.ValidRegOperand#canCall| |o#0@@7|) (and (=> (_module.__default.ValidOperand |o#0@@7|) (or (_module.__default.ValidRegOperand |o#0@@7|) (_module.operand.OConst_q |o#0@@7|))) (=> (or (_module.__default.ValidRegOperand |o#0@@7|) (_module.operand.OConst_q |o#0@@7|)) (_module.__default.ValidOperand |o#0@@7|))))) :qid |ARMdefsd.417:11| :skolemid |2572| :pattern ( (_module.__default.ValidOperand |o#0@@7|) ($IsGoodHeap $Heap@@98)) ))))
(assert  (=> true (forall (($Heap@@99 T@U) (|o#0@@8| T@U) ) (!  (=> (and (and (= (type $Heap@@99) (MapType1Type refType)) (= (type |o#0@@8|) DatatypeTypeType)) (or (|_module.__default.ValidOperand#canCall| (Lit |o#0@@8|)) (and ($IsGoodHeap $Heap@@99) ($Is |o#0@@8| Tclass._module.operand)))) (and (|_module.__default.ValidRegOperand#canCall| (Lit |o#0@@8|)) (and (=> (_module.__default.ValidOperand (Lit |o#0@@8|)) (U_2_bool (Lit (bool_2_U  (or (_module.__default.ValidRegOperand (Lit |o#0@@8|)) (_module.operand.OConst_q (Lit |o#0@@8|))))))) (=> (U_2_bool (Lit (bool_2_U  (or (_module.__default.ValidRegOperand (Lit |o#0@@8|)) (_module.operand.OConst_q (Lit |o#0@@8|)))))) (_module.__default.ValidOperand (Lit |o#0@@8|)))))) :qid |ARMdefsd.417:11| :weight 3 :skolemid |2573| :pattern ( (_module.__default.ValidOperand (Lit |o#0@@8|)) ($IsGoodHeap $Heap@@99)) ))))
(assert  (=> true (forall ((|o#0@@9| T@U) ) (!  (=> (and (= (type |o#0@@9|) DatatypeTypeType) (or (|_module.__default.ValidSecondOperand#canCall| |o#0@@9|) ($Is |o#0@@9| Tclass._module.operand))) true) :qid |ARMdefsd.422:30| :skolemid |2574| :pattern ( (_module.__default.ValidSecondOperand |o#0@@9|)) ))))
(assert (forall (($Heap@@100 T@U) (|o#0@@10| T@U) ) (!  (=> (and (and (= (type $Heap@@100) (MapType1Type refType)) (= (type |o#0@@10|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@100) ($Is |o#0@@10| Tclass._module.operand))) (and (=> (|_module.__default.ValidSecondOperand#requires| |o#0@@10|) true) (=> true (|_module.__default.ValidSecondOperand#requires| |o#0@@10|)))) :qid |ARMdefsd.422:11| :skolemid |2575| :pattern ( (|_module.__default.ValidSecondOperand#requires| |o#0@@10|) ($IsGoodHeap $Heap@@100)) )))
(assert (forall ((arg0@@300 T@U) ) (! (= (type (_module.operand.reg arg0@@300)) DatatypeTypeType) :qid |funType:_module.operand.reg| :pattern ( (_module.operand.reg arg0@@300)) )))
(assert  (=> true (forall (($Heap@@101 T@U) (|o#0@@11| T@U) ) (!  (=> (and (and (= (type $Heap@@101) (MapType1Type refType)) (= (type |o#0@@11|) DatatypeTypeType)) (or (|_module.__default.ValidSecondOperand#canCall| |o#0@@11|) (and ($IsGoodHeap $Heap@@101) ($Is |o#0@@11| Tclass._module.operand)))) (and (|_module.__default.ValidOperand#canCall| |o#0@@11|) (and (=> (_module.__default.ValidSecondOperand |o#0@@11|) (or (_module.__default.ValidOperand |o#0@@11|) (and (_module.operand.OShift_q |o#0@@11|) (not (or (_module.ARMReg.SP_q (_module.operand.reg |o#0@@11|)) (_module.ARMReg.LR_q (_module.operand.reg |o#0@@11|))))))) (=> (or (_module.__default.ValidOperand |o#0@@11|) (and (_module.operand.OShift_q |o#0@@11|) (not (or (_module.ARMReg.SP_q (_module.operand.reg |o#0@@11|)) (_module.ARMReg.LR_q (_module.operand.reg |o#0@@11|)))))) (_module.__default.ValidSecondOperand |o#0@@11|))))) :qid |ARMdefsd.422:11| :skolemid |2576| :pattern ( (_module.__default.ValidSecondOperand |o#0@@11|) ($IsGoodHeap $Heap@@101)) ))))
(assert  (=> true (forall (($Heap@@102 T@U) (|o#0@@12| T@U) ) (!  (=> (and (and (= (type $Heap@@102) (MapType1Type refType)) (= (type |o#0@@12|) DatatypeTypeType)) (or (|_module.__default.ValidSecondOperand#canCall| (Lit |o#0@@12|)) (and ($IsGoodHeap $Heap@@102) ($Is |o#0@@12| Tclass._module.operand)))) (and (|_module.__default.ValidOperand#canCall| (Lit |o#0@@12|)) (and (=> (_module.__default.ValidSecondOperand (Lit |o#0@@12|)) (or (_module.__default.ValidOperand (Lit |o#0@@12|)) (and (_module.operand.OShift_q (Lit |o#0@@12|)) (not (U_2_bool (Lit (bool_2_U  (or (_module.ARMReg.SP_q (Lit (_module.operand.reg (Lit |o#0@@12|)))) (_module.ARMReg.LR_q (Lit (_module.operand.reg (Lit |o#0@@12|)))))))))))) (=> (or (_module.__default.ValidOperand (Lit |o#0@@12|)) (and (_module.operand.OShift_q (Lit |o#0@@12|)) (not (U_2_bool (Lit (bool_2_U  (or (_module.ARMReg.SP_q (Lit (_module.operand.reg (Lit |o#0@@12|)))) (_module.ARMReg.LR_q (Lit (_module.operand.reg (Lit |o#0@@12|))))))))))) (_module.__default.ValidSecondOperand (Lit |o#0@@12|)))))) :qid |ARMdefsd.422:11| :weight 3 :skolemid |2577| :pattern ( (_module.__default.ValidSecondOperand (Lit |o#0@@12|)) ($IsGoodHeap $Heap@@102)) ))))
(assert  (=> true (forall ((|s#0@@69| T@U) (|o#0@@13| T@U) ) (!  (=> (and (and (= (type |s#0@@69|) DatatypeTypeType) (= (type |o#0@@13|) DatatypeTypeType)) (or (|_module.__default.ValidBankedRegOperand#canCall| |s#0@@69| |o#0@@13|) (and ($Is |s#0@@69| Tclass._module.state) ($Is |o#0@@13| Tclass._module.operand)))) true) :qid |ARMdefsd.428:33| :skolemid |2578| :pattern ( (_module.__default.ValidBankedRegOperand |s#0@@69| |o#0@@13|)) ))))
(assert (forall (($Heap@@103 T@U) (|s#0@@70| T@U) (|o#0@@14| T@U) ) (!  (=> (and (and (and (= (type $Heap@@103) (MapType1Type refType)) (= (type |s#0@@70|) DatatypeTypeType)) (= (type |o#0@@14|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@103) ($Is |s#0@@70| Tclass._module.state)) ($Is |o#0@@14| Tclass._module.operand))) (and (=> (|_module.__default.ValidBankedRegOperand#requires| |s#0@@70| |o#0@@14|) true) (=> true (|_module.__default.ValidBankedRegOperand#requires| |s#0@@70| |o#0@@14|)))) :qid |ARMdefsd.428:11| :skolemid |2579| :pattern ( (|_module.__default.ValidBankedRegOperand#requires| |s#0@@70| |o#0@@14|) ($IsGoodHeap $Heap@@103)) )))
(assert  (and (and (and (forall ((arg0@@301 T@U) ) (! (= (type (_module.operand.r arg0@@301)) DatatypeTypeType) :qid |funType:_module.operand.r| :pattern ( (_module.operand.r arg0@@301)) )) (forall ((arg0@@302 T@U) ) (! (= (type (_module.ARMReg.spm arg0@@302)) DatatypeTypeType) :qid |funType:_module.ARMReg.spm| :pattern ( (_module.ARMReg.spm arg0@@302)) ))) (forall ((arg0@@303 T@U) ) (! (= (type (_module.ARMReg.lrm arg0@@303)) DatatypeTypeType) :qid |funType:_module.ARMReg.lrm| :pattern ( (_module.ARMReg.lrm arg0@@303)) ))) (forall ((arg0@@304 T@U) ) (! (= (type (_module.operand.sr arg0@@304)) DatatypeTypeType) :qid |funType:_module.operand.sr| :pattern ( (_module.operand.sr arg0@@304)) ))))
(assert  (=> true (forall (($Heap@@104 T@U) (|s#0@@71| T@U) (|o#0@@15| T@U) ) (!  (=> (and (and (and (= (type $Heap@@104) (MapType1Type refType)) (= (type |s#0@@71|) DatatypeTypeType)) (= (type |o#0@@15|) DatatypeTypeType)) (or (|_module.__default.ValidBankedRegOperand#canCall| |s#0@@71| |o#0@@15|) (and (and ($IsGoodHeap $Heap@@104) ($Is |s#0@@71| Tclass._module.state)) ($Is |o#0@@15| Tclass._module.operand)))) (and (and (and (|_module.__default.priv__of__state#canCall| |s#0@@71|) (=> (= (_module.__default.priv__of__state |s#0@@71|) (Lit |#_module.priv.PL1|)) (|_module.__default.world__of__state#canCall| |s#0@@71|))) (=> (and (|_module.__default.world__of__state#canCall| |s#0@@71|) (= (_module.__default.world__of__state |s#0@@71|) (Lit |#_module.world.Secure|))) (and (=> (_module.operand.OReg_q |o#0@@15|) (and (=> (_module.ARMReg.SP_q (_module.operand.r |o#0@@15|)) (|_module.__default.mode__of__state#canCall| |s#0@@71|)) (=> (and (|_module.__default.mode__of__state#canCall| |s#0@@71|) (= (_module.ARMReg.spm (_module.operand.r |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|))) (=> (_module.ARMReg.LR_q (_module.operand.r |o#0@@15|)) (|_module.__default.mode__of__state#canCall| |s#0@@71|))))) (=> (and (and (=> (_module.ARMReg.SP_q (_module.operand.r |o#0@@15|)) (|_module.__default.mode__of__state#canCall| |s#0@@71|)) (=> (and (|_module.__default.mode__of__state#canCall| |s#0@@71|) (= (_module.ARMReg.spm (_module.operand.r |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|))) (=> (_module.ARMReg.LR_q (_module.operand.r |o#0@@15|)) (|_module.__default.mode__of__state#canCall| |s#0@@71|)))) (not (or (and (_module.ARMReg.SP_q (_module.operand.r |o#0@@15|)) (not (= (_module.ARMReg.spm (_module.operand.r |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|)))) (and (_module.ARMReg.LR_q (_module.operand.r |o#0@@15|)) (not (= (_module.ARMReg.lrm (_module.operand.r |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|))))))) (and (=> (_module.operand.OSReg_q |o#0@@15|) (|_module.__default.ValidSReg#canCall| (_module.operand.sr |o#0@@15|))) (=> (_module.SReg.spsr_q (_module.operand.sr |o#0@@15|)) (|_module.__default.mode__of__state#canCall| |s#0@@71|))))))) (and (=> (_module.__default.ValidBankedRegOperand |s#0@@71| |o#0@@15|) (and (and (= (_module.__default.priv__of__state |s#0@@71|) (Lit |#_module.priv.PL1|)) (= (_module.__default.world__of__state |s#0@@71|) (Lit |#_module.world.Secure|))) (or (and (_module.operand.OReg_q |o#0@@15|) (or (and (_module.ARMReg.SP_q (_module.operand.r |o#0@@15|)) (not (= (_module.ARMReg.spm (_module.operand.r |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|)))) (and (_module.ARMReg.LR_q (_module.operand.r |o#0@@15|)) (not (= (_module.ARMReg.lrm (_module.operand.r |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|)))))) (and (and (and (_module.operand.OSReg_q |o#0@@15|) (_module.__default.ValidSReg (_module.operand.sr |o#0@@15|))) (_module.SReg.spsr_q (_module.operand.sr |o#0@@15|))) (not (= (_module.SReg.m (_module.operand.sr |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|))))))) (=> (and (and (= (_module.__default.priv__of__state |s#0@@71|) (Lit |#_module.priv.PL1|)) (= (_module.__default.world__of__state |s#0@@71|) (Lit |#_module.world.Secure|))) (or (and (_module.operand.OReg_q |o#0@@15|) (or (and (_module.ARMReg.SP_q (_module.operand.r |o#0@@15|)) (not (= (_module.ARMReg.spm (_module.operand.r |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|)))) (and (_module.ARMReg.LR_q (_module.operand.r |o#0@@15|)) (not (= (_module.ARMReg.lrm (_module.operand.r |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|)))))) (and (and (and (_module.operand.OSReg_q |o#0@@15|) (_module.__default.ValidSReg (_module.operand.sr |o#0@@15|))) (_module.SReg.spsr_q (_module.operand.sr |o#0@@15|))) (not (= (_module.SReg.m (_module.operand.sr |o#0@@15|)) (_module.__default.mode__of__state |s#0@@71|)))))) (_module.__default.ValidBankedRegOperand |s#0@@71| |o#0@@15|))))) :qid |ARMdefsd.428:11| :skolemid |2580| :pattern ( (_module.__default.ValidBankedRegOperand |s#0@@71| |o#0@@15|) ($IsGoodHeap $Heap@@104)) ))))
(assert  (=> true (forall (($Heap@@105 T@U) (|s#0@@72| T@U) (|o#0@@16| T@U) ) (!  (=> (and (and (and (= (type $Heap@@105) (MapType1Type refType)) (= (type |s#0@@72|) DatatypeTypeType)) (= (type |o#0@@16|) DatatypeTypeType)) (or (|_module.__default.ValidBankedRegOperand#canCall| (Lit |s#0@@72|) (Lit |o#0@@16|)) (and (and ($IsGoodHeap $Heap@@105) ($Is |s#0@@72| Tclass._module.state)) ($Is |o#0@@16| Tclass._module.operand)))) (and (and (and (|_module.__default.priv__of__state#canCall| (Lit |s#0@@72|)) (=> (= (Lit (_module.__default.priv__of__state (Lit |s#0@@72|))) (Lit |#_module.priv.PL1|)) (|_module.__default.world__of__state#canCall| (Lit |s#0@@72|)))) (=> (and (|_module.__default.world__of__state#canCall| (Lit |s#0@@72|)) (= (Lit (_module.__default.world__of__state (Lit |s#0@@72|))) (Lit |#_module.world.Secure|))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OReg_q (Lit |o#0@@16|))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ARMReg.SP_q (Lit (_module.operand.r (Lit |o#0@@16|))))))) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@72|))) (=> (and (|_module.__default.mode__of__state#canCall| (Lit |s#0@@72|)) (not (U_2_bool (Lit (bool_2_U (not (= (_module.ARMReg.spm (Lit (_module.operand.r (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|))))))))) (=> (U_2_bool (Lit (bool_2_U (_module.ARMReg.LR_q (Lit (_module.operand.r (Lit |o#0@@16|))))))) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@72|)))))) (=> (and (and (=> (U_2_bool (Lit (bool_2_U (_module.ARMReg.SP_q (Lit (_module.operand.r (Lit |o#0@@16|))))))) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@72|))) (=> (and (|_module.__default.mode__of__state#canCall| (Lit |s#0@@72|)) (not (U_2_bool (Lit (bool_2_U (not (= (_module.ARMReg.spm (Lit (_module.operand.r (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|))))))))) (=> (U_2_bool (Lit (bool_2_U (_module.ARMReg.LR_q (Lit (_module.operand.r (Lit |o#0@@16|))))))) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@72|))))) (not (U_2_bool (Lit (bool_2_U  (or (and (_module.ARMReg.SP_q (Lit (_module.operand.r (Lit |o#0@@16|)))) (not (= (_module.ARMReg.spm (Lit (_module.operand.r (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|))))) (and (_module.ARMReg.LR_q (Lit (_module.operand.r (Lit |o#0@@16|)))) (not (= (_module.ARMReg.lrm (Lit (_module.operand.r (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OSReg_q (Lit |o#0@@16|))))) (|_module.__default.ValidSReg#canCall| (Lit (_module.operand.sr (Lit |o#0@@16|))))) (=> (U_2_bool (Lit (bool_2_U (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@16|))))))) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@72|)))))))) (and (=> (_module.__default.ValidBankedRegOperand (Lit |s#0@@72|) (Lit |o#0@@16|)) (and (and (= (Lit (_module.__default.priv__of__state (Lit |s#0@@72|))) (Lit |#_module.priv.PL1|)) (= (Lit (_module.__default.world__of__state (Lit |s#0@@72|))) (Lit |#_module.world.Secure|))) (or (and (_module.operand.OReg_q (Lit |o#0@@16|)) (or (and (_module.ARMReg.SP_q (Lit (_module.operand.r (Lit |o#0@@16|)))) (not (= (_module.ARMReg.spm (Lit (_module.operand.r (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|))))) (and (_module.ARMReg.LR_q (Lit (_module.operand.r (Lit |o#0@@16|)))) (not (= (_module.ARMReg.lrm (Lit (_module.operand.r (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|))))))) (and (and (and (_module.operand.OSReg_q (Lit |o#0@@16|)) (_module.__default.ValidSReg (Lit (_module.operand.sr (Lit |o#0@@16|))))) (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@16|))))) (not (= (_module.SReg.m (Lit (_module.operand.sr (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|)))))))) (=> (and (and (= (Lit (_module.__default.priv__of__state (Lit |s#0@@72|))) (Lit |#_module.priv.PL1|)) (= (Lit (_module.__default.world__of__state (Lit |s#0@@72|))) (Lit |#_module.world.Secure|))) (or (and (_module.operand.OReg_q (Lit |o#0@@16|)) (or (and (_module.ARMReg.SP_q (Lit (_module.operand.r (Lit |o#0@@16|)))) (not (= (_module.ARMReg.spm (Lit (_module.operand.r (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|))))) (and (_module.ARMReg.LR_q (Lit (_module.operand.r (Lit |o#0@@16|)))) (not (= (_module.ARMReg.lrm (Lit (_module.operand.r (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|))))))) (and (and (and (_module.operand.OSReg_q (Lit |o#0@@16|)) (_module.__default.ValidSReg (Lit (_module.operand.sr (Lit |o#0@@16|))))) (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@16|))))) (not (= (_module.SReg.m (Lit (_module.operand.sr (Lit |o#0@@16|)))) (_module.__default.mode__of__state (Lit |s#0@@72|))))))) (_module.__default.ValidBankedRegOperand (Lit |s#0@@72|) (Lit |o#0@@16|)))))) :qid |ARMdefsd.428:11| :weight 3 :skolemid |2581| :pattern ( (_module.__default.ValidBankedRegOperand (Lit |s#0@@72|) (Lit |o#0@@16|)) ($IsGoodHeap $Heap@@105)) ))))
(assert  (=> true (forall ((|s#0@@73| T@U) (|o#0@@17| T@U) ) (!  (=> (and (and (= (type |s#0@@73|) DatatypeTypeType) (= (type |o#0@@17|) DatatypeTypeType)) (or (|_module.__default.ValidMrsMsrOperand#canCall| |s#0@@73| |o#0@@17|) (and ($Is |s#0@@73| Tclass._module.state) ($Is |o#0@@17| Tclass._module.operand)))) true) :qid |ARMdefsd.441:30| :skolemid |2582| :pattern ( (_module.__default.ValidMrsMsrOperand |s#0@@73| |o#0@@17|)) ))))
(assert (forall (($Heap@@106 T@U) (|s#0@@74| T@U) (|o#0@@18| T@U) ) (!  (=> (and (and (and (= (type $Heap@@106) (MapType1Type refType)) (= (type |s#0@@74|) DatatypeTypeType)) (= (type |o#0@@18|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@106) ($Is |s#0@@74| Tclass._module.state)) ($Is |o#0@@18| Tclass._module.operand))) (and (=> (|_module.__default.ValidMrsMsrOperand#requires| |s#0@@74| |o#0@@18|) true) (=> true (|_module.__default.ValidMrsMsrOperand#requires| |s#0@@74| |o#0@@18|)))) :qid |ARMdefsd.441:11| :skolemid |2583| :pattern ( (|_module.__default.ValidMrsMsrOperand#requires| |s#0@@74| |o#0@@18|) ($IsGoodHeap $Heap@@106)) )))
(assert  (=> true (forall (($Heap@@107 T@U) (|s#0@@75| T@U) (|o#0@@19| T@U) ) (!  (=> (and (and (and (= (type $Heap@@107) (MapType1Type refType)) (= (type |s#0@@75|) DatatypeTypeType)) (= (type |o#0@@19|) DatatypeTypeType)) (or (|_module.__default.ValidMrsMsrOperand#canCall| |s#0@@75| |o#0@@19|) (and (and ($IsGoodHeap $Heap@@107) ($Is |s#0@@75| Tclass._module.state)) ($Is |o#0@@19| Tclass._module.operand)))) (and (and (|_module.__default.ValidBankedRegOperand#canCall| |s#0@@75| |o#0@@19|) (=> (not (_module.__default.ValidBankedRegOperand |s#0@@75| |o#0@@19|)) (and (=> (_module.operand.OSReg_q |o#0@@19|) (|_module.__default.ValidSReg#canCall| (_module.operand.sr |o#0@@19|))) (=> (and (|_module.__default.ValidSReg#canCall| (_module.operand.sr |o#0@@19|)) (_module.__default.ValidSReg (_module.operand.sr |o#0@@19|))) (=> (not (_module.SReg.cpsr_q (_module.operand.sr |o#0@@19|))) (=> (_module.SReg.spsr_q (_module.operand.sr |o#0@@19|)) (|_module.__default.mode__of__state#canCall| |s#0@@75|))))))) (and (=> (_module.__default.ValidMrsMsrOperand |s#0@@75| |o#0@@19|) (or (_module.__default.ValidBankedRegOperand |s#0@@75| |o#0@@19|) (and (and (_module.operand.OSReg_q |o#0@@19|) (_module.__default.ValidSReg (_module.operand.sr |o#0@@19|))) (or (_module.SReg.cpsr_q (_module.operand.sr |o#0@@19|)) (and (_module.SReg.spsr_q (_module.operand.sr |o#0@@19|)) (= (_module.__default.mode__of__state |s#0@@75|) (_module.SReg.m (_module.operand.sr |o#0@@19|)))))))) (=> (or (_module.__default.ValidBankedRegOperand |s#0@@75| |o#0@@19|) (and (and (_module.operand.OSReg_q |o#0@@19|) (_module.__default.ValidSReg (_module.operand.sr |o#0@@19|))) (or (_module.SReg.cpsr_q (_module.operand.sr |o#0@@19|)) (and (_module.SReg.spsr_q (_module.operand.sr |o#0@@19|)) (= (_module.__default.mode__of__state |s#0@@75|) (_module.SReg.m (_module.operand.sr |o#0@@19|))))))) (_module.__default.ValidMrsMsrOperand |s#0@@75| |o#0@@19|))))) :qid |ARMdefsd.441:11| :skolemid |2584| :pattern ( (_module.__default.ValidMrsMsrOperand |s#0@@75| |o#0@@19|) ($IsGoodHeap $Heap@@107)) ))))
(assert  (=> true (forall (($Heap@@108 T@U) (|s#0@@76| T@U) (|o#0@@20| T@U) ) (!  (=> (and (and (and (= (type $Heap@@108) (MapType1Type refType)) (= (type |s#0@@76|) DatatypeTypeType)) (= (type |o#0@@20|) DatatypeTypeType)) (or (|_module.__default.ValidMrsMsrOperand#canCall| (Lit |s#0@@76|) (Lit |o#0@@20|)) (and (and ($IsGoodHeap $Heap@@108) ($Is |s#0@@76| Tclass._module.state)) ($Is |o#0@@20| Tclass._module.operand)))) (and (and (|_module.__default.ValidBankedRegOperand#canCall| (Lit |s#0@@76|) (Lit |o#0@@20|)) (=> (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidBankedRegOperand (Lit |s#0@@76|) (Lit |o#0@@20|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OSReg_q (Lit |o#0@@20|))))) (|_module.__default.ValidSReg#canCall| (Lit (_module.operand.sr (Lit |o#0@@20|))))) (=> (and (|_module.__default.ValidSReg#canCall| (Lit (_module.operand.sr (Lit |o#0@@20|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidSReg (Lit (_module.operand.sr (Lit |o#0@@20|)))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit |o#0@@20|)))))))) (=> (U_2_bool (Lit (bool_2_U (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@20|))))))) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@76|)))))))) (and (=> (_module.__default.ValidMrsMsrOperand (Lit |s#0@@76|) (Lit |o#0@@20|)) (or (_module.__default.ValidBankedRegOperand (Lit |s#0@@76|) (Lit |o#0@@20|)) (and (and (_module.operand.OSReg_q (Lit |o#0@@20|)) (_module.__default.ValidSReg (Lit (_module.operand.sr (Lit |o#0@@20|))))) (or (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit |o#0@@20|)))) (and (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@20|)))) (= (Lit (_module.__default.mode__of__state (Lit |s#0@@76|))) (Lit (_module.SReg.m (Lit (_module.operand.sr (Lit |o#0@@20|))))))))))) (=> (or (_module.__default.ValidBankedRegOperand (Lit |s#0@@76|) (Lit |o#0@@20|)) (and (and (_module.operand.OSReg_q (Lit |o#0@@20|)) (_module.__default.ValidSReg (Lit (_module.operand.sr (Lit |o#0@@20|))))) (or (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit |o#0@@20|)))) (and (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@20|)))) (= (Lit (_module.__default.mode__of__state (Lit |s#0@@76|))) (Lit (_module.SReg.m (Lit (_module.operand.sr (Lit |o#0@@20|)))))))))) (_module.__default.ValidMrsMsrOperand (Lit |s#0@@76|) (Lit |o#0@@20|)))))) :qid |ARMdefsd.441:11| :weight 3 :skolemid |2585| :pattern ( (_module.__default.ValidMrsMsrOperand (Lit |s#0@@76|) (Lit |o#0@@20|)) ($IsGoodHeap $Heap@@108)) ))))
(assert  (=> true (forall ((|s#0@@77| T@U) (|o#0@@21| T@U) ) (!  (=> (and (and (= (type |s#0@@77|) DatatypeTypeType) (= (type |o#0@@21|) DatatypeTypeType)) (or (|_module.__default.ValidMcrMrcOperand#canCall| |s#0@@77| |o#0@@21|) (and ($Is |s#0@@77| Tclass._module.state) ($Is |o#0@@21| Tclass._module.operand)))) true) :qid |ARMdefsd.448:30| :skolemid |2586| :pattern ( (_module.__default.ValidMcrMrcOperand |s#0@@77| |o#0@@21|)) ))))
(assert (forall (($Heap@@109 T@U) (|s#0@@78| T@U) (|o#0@@22| T@U) ) (!  (=> (and (and (and (= (type $Heap@@109) (MapType1Type refType)) (= (type |s#0@@78|) DatatypeTypeType)) (= (type |o#0@@22|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@109) ($Is |s#0@@78| Tclass._module.state)) ($Is |o#0@@22| Tclass._module.operand))) (and (=> (|_module.__default.ValidMcrMrcOperand#requires| |s#0@@78| |o#0@@22|) true) (=> true (|_module.__default.ValidMcrMrcOperand#requires| |s#0@@78| |o#0@@22|)))) :qid |ARMdefsd.448:11| :skolemid |2587| :pattern ( (|_module.__default.ValidMcrMrcOperand#requires| |s#0@@78| |o#0@@22|) ($IsGoodHeap $Heap@@109)) )))
(assert  (=> true (forall (($Heap@@110 T@U) (|s#0@@79| T@U) (|o#0@@23| T@U) ) (!  (=> (and (and (and (= (type $Heap@@110) (MapType1Type refType)) (= (type |s#0@@79|) DatatypeTypeType)) (= (type |o#0@@23|) DatatypeTypeType)) (or (|_module.__default.ValidMcrMrcOperand#canCall| |s#0@@79| |o#0@@23|) (and (and ($IsGoodHeap $Heap@@110) ($Is |s#0@@79| Tclass._module.state)) ($Is |o#0@@23| Tclass._module.operand)))) (and (and (and (=> (_module.operand.OSReg_q |o#0@@23|) (|_module.__default.priv__of__state#canCall| |s#0@@79|)) (=> (and (|_module.__default.priv__of__state#canCall| |s#0@@79|) (= (_module.__default.priv__of__state |s#0@@79|) (Lit |#_module.priv.PL1|))) (|_module.__default.world__of__state#canCall| |s#0@@79|))) (=> (not (or (_module.SReg.cpsr_q (_module.operand.sr |o#0@@23|)) (_module.SReg.spsr_q (_module.operand.sr |o#0@@23|)))) (=> (_module.SReg.ttbr0_q (_module.operand.sr |o#0@@23|)) (and (and (_module.state.State_q |s#0@@79|) (_module.config.Config_q (_module.state.conf |s#0@@79|))) (_module.SCR.SCRT_q (_module.config.scr (_module.state.conf |s#0@@79|))))))) (and (=> (_module.__default.ValidMcrMrcOperand |s#0@@79| |o#0@@23|) (and (and (and (and (_module.operand.OSReg_q |o#0@@23|) (= (_module.__default.priv__of__state |s#0@@79|) (Lit |#_module.priv.PL1|))) (= (_module.__default.world__of__state |s#0@@79|) (Lit |#_module.world.Secure|))) (not (or (_module.SReg.cpsr_q (_module.operand.sr |o#0@@23|)) (_module.SReg.spsr_q (_module.operand.sr |o#0@@23|))))) (=> (_module.SReg.ttbr0_q (_module.operand.sr |o#0@@23|)) (_module.world.Secure_q (_module.SCR.ns (_module.config.scr (_module.state.conf |s#0@@79|))))))) (=> (and (and (and (and (_module.operand.OSReg_q |o#0@@23|) (= (_module.__default.priv__of__state |s#0@@79|) (Lit |#_module.priv.PL1|))) (= (_module.__default.world__of__state |s#0@@79|) (Lit |#_module.world.Secure|))) (not (or (_module.SReg.cpsr_q (_module.operand.sr |o#0@@23|)) (_module.SReg.spsr_q (_module.operand.sr |o#0@@23|))))) (=> (_module.SReg.ttbr0_q (_module.operand.sr |o#0@@23|)) (_module.world.Secure_q (_module.SCR.ns (_module.config.scr (_module.state.conf |s#0@@79|)))))) (_module.__default.ValidMcrMrcOperand |s#0@@79| |o#0@@23|))))) :qid |ARMdefsd.448:11| :skolemid |2588| :pattern ( (_module.__default.ValidMcrMrcOperand |s#0@@79| |o#0@@23|) ($IsGoodHeap $Heap@@110)) ))))
(assert  (=> true (forall (($Heap@@111 T@U) (|s#0@@80| T@U) (|o#0@@24| T@U) ) (!  (=> (and (and (and (= (type $Heap@@111) (MapType1Type refType)) (= (type |s#0@@80|) DatatypeTypeType)) (= (type |o#0@@24|) DatatypeTypeType)) (or (|_module.__default.ValidMcrMrcOperand#canCall| (Lit |s#0@@80|) (Lit |o#0@@24|)) (and (and ($IsGoodHeap $Heap@@111) ($Is |s#0@@80| Tclass._module.state)) ($Is |o#0@@24| Tclass._module.operand)))) (and (and (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OSReg_q (Lit |o#0@@24|))))) (|_module.__default.priv__of__state#canCall| (Lit |s#0@@80|))) (=> (and (|_module.__default.priv__of__state#canCall| (Lit |s#0@@80|)) (= (Lit (_module.__default.priv__of__state (Lit |s#0@@80|))) (Lit |#_module.priv.PL1|))) (|_module.__default.world__of__state#canCall| (Lit |s#0@@80|)))) (=> (not (U_2_bool (Lit (bool_2_U  (or (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit |o#0@@24|)))) (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@24|))))))))) (=> (U_2_bool (Lit (bool_2_U (_module.SReg.ttbr0_q (Lit (_module.operand.sr (Lit |o#0@@24|))))))) (and (and (_module.state.State_q (Lit |s#0@@80|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@80|))))) (_module.SCR.SCRT_q (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@80|)))))))))) (and (=> (_module.__default.ValidMcrMrcOperand (Lit |s#0@@80|) (Lit |o#0@@24|)) (and (and (and (and (_module.operand.OSReg_q (Lit |o#0@@24|)) (= (Lit (_module.__default.priv__of__state (Lit |s#0@@80|))) (Lit |#_module.priv.PL1|))) (= (Lit (_module.__default.world__of__state (Lit |s#0@@80|))) (Lit |#_module.world.Secure|))) (not (U_2_bool (Lit (bool_2_U  (or (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit |o#0@@24|)))) (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@24|)))))))))) (=> (_module.SReg.ttbr0_q (Lit (_module.operand.sr (Lit |o#0@@24|)))) (_module.world.Secure_q (Lit (_module.SCR.ns (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@80|))))))))))) (=> (and (and (and (and (_module.operand.OSReg_q (Lit |o#0@@24|)) (= (Lit (_module.__default.priv__of__state (Lit |s#0@@80|))) (Lit |#_module.priv.PL1|))) (= (Lit (_module.__default.world__of__state (Lit |s#0@@80|))) (Lit |#_module.world.Secure|))) (not (U_2_bool (Lit (bool_2_U  (or (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit |o#0@@24|)))) (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@24|)))))))))) (=> (_module.SReg.ttbr0_q (Lit (_module.operand.sr (Lit |o#0@@24|)))) (_module.world.Secure_q (Lit (_module.SCR.ns (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@80|)))))))))) (_module.__default.ValidMcrMrcOperand (Lit |s#0@@80|) (Lit |o#0@@24|)))))) :qid |ARMdefsd.448:11| :weight 3 :skolemid |2589| :pattern ( (_module.__default.ValidMcrMrcOperand (Lit |s#0@@80|) (Lit |o#0@@24|)) ($IsGoodHeap $Heap@@111)) ))))
(assert  (=> true (forall ((|s#0@@81| T@U) (|o#0@@25| T@U) ) (!  (=> (and (and (= (type |s#0@@81|) DatatypeTypeType) (= (type |o#0@@25|) DatatypeTypeType)) (or (|_module.__default.ValidAnySrcOperand#canCall| |s#0@@81| |o#0@@25|) (and ($Is |s#0@@81| Tclass._module.state) ($Is |o#0@@25| Tclass._module.operand)))) true) :qid |ARMdefsd.458:30| :skolemid |2590| :pattern ( (_module.__default.ValidAnySrcOperand |s#0@@81| |o#0@@25|)) ))))
(assert (forall ((|s#0@@82| T@U) (|o#0@@26| T@U) ) (!  (=> (and (and (= (type |s#0@@82|) DatatypeTypeType) (= (type |o#0@@26|) DatatypeTypeType)) (and ($Is |s#0@@82| Tclass._module.state) ($Is |o#0@@26| Tclass._module.operand))) (and (=> (|_module.__default.ValidAnySrcOperand#requires| |s#0@@82| |o#0@@26|) true) (=> true (|_module.__default.ValidAnySrcOperand#requires| |s#0@@82| |o#0@@26|)))) :qid |ARMdefsd.458:30| :skolemid |2591| :pattern ( (|_module.__default.ValidAnySrcOperand#requires| |s#0@@82| |o#0@@26|)) )))
(assert  (=> true (forall ((|s#0@@83| T@U) (|o#0@@27| T@U) ) (!  (=> (and (and (= (type |s#0@@83|) DatatypeTypeType) (= (type |o#0@@27|) DatatypeTypeType)) (or (|_module.__default.ValidAnySrcOperand#canCall| |s#0@@83| |o#0@@27|) (and ($Is |s#0@@83| Tclass._module.state) ($Is |o#0@@27| Tclass._module.operand)))) (and (and (and (and (and (|_module.__default.ValidOperand#canCall| |o#0@@27|) (=> (not (_module.__default.ValidOperand |o#0@@27|)) (|_module.__default.ValidSecondOperand#canCall| |o#0@@27|))) (=> (and (|_module.__default.ValidSecondOperand#canCall| |o#0@@27|) (not (_module.__default.ValidSecondOperand |o#0@@27|))) (|_module.__default.ValidBankedRegOperand#canCall| |s#0@@83| |o#0@@27|))) (=> (and (|_module.__default.ValidBankedRegOperand#canCall| |s#0@@83| |o#0@@27|) (not (_module.__default.ValidBankedRegOperand |s#0@@83| |o#0@@27|))) (|_module.__default.ValidMrsMsrOperand#canCall| |s#0@@83| |o#0@@27|))) (=> (and (|_module.__default.ValidMrsMsrOperand#canCall| |s#0@@83| |o#0@@27|) (not (_module.__default.ValidMrsMsrOperand |s#0@@83| |o#0@@27|))) (|_module.__default.ValidMcrMrcOperand#canCall| |s#0@@83| |o#0@@27|))) (and (=> (_module.__default.ValidAnySrcOperand |s#0@@83| |o#0@@27|) (or (or (or (or (_module.__default.ValidOperand |o#0@@27|) (_module.__default.ValidSecondOperand |o#0@@27|)) (_module.__default.ValidBankedRegOperand |s#0@@83| |o#0@@27|)) (_module.__default.ValidMrsMsrOperand |s#0@@83| |o#0@@27|)) (_module.__default.ValidMcrMrcOperand |s#0@@83| |o#0@@27|))) (=> (or (or (or (or (_module.__default.ValidOperand |o#0@@27|) (_module.__default.ValidSecondOperand |o#0@@27|)) (_module.__default.ValidBankedRegOperand |s#0@@83| |o#0@@27|)) (_module.__default.ValidMrsMsrOperand |s#0@@83| |o#0@@27|)) (_module.__default.ValidMcrMrcOperand |s#0@@83| |o#0@@27|)) (_module.__default.ValidAnySrcOperand |s#0@@83| |o#0@@27|))))) :qid |ARMdefsd.458:30| :skolemid |2592| :pattern ( (_module.__default.ValidAnySrcOperand |s#0@@83| |o#0@@27|)) ))))
(assert  (=> true (forall ((|s#0@@84| T@U) (|o#0@@28| T@U) ) (!  (=> (and (and (= (type |s#0@@84|) DatatypeTypeType) (= (type |o#0@@28|) DatatypeTypeType)) (or (|_module.__default.ValidAnySrcOperand#canCall| (Lit |s#0@@84|) (Lit |o#0@@28|)) (and ($Is |s#0@@84| Tclass._module.state) ($Is |o#0@@28| Tclass._module.operand)))) (and (and (and (and (and (|_module.__default.ValidOperand#canCall| (Lit |o#0@@28|)) (=> (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit |o#0@@28|)))))) (|_module.__default.ValidSecondOperand#canCall| (Lit |o#0@@28|)))) (=> (and (|_module.__default.ValidSecondOperand#canCall| (Lit |o#0@@28|)) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidSecondOperand (Lit |o#0@@28|))))))) (|_module.__default.ValidBankedRegOperand#canCall| (Lit |s#0@@84|) (Lit |o#0@@28|)))) (=> (and (|_module.__default.ValidBankedRegOperand#canCall| (Lit |s#0@@84|) (Lit |o#0@@28|)) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidBankedRegOperand (Lit |s#0@@84|) (Lit |o#0@@28|))))))) (|_module.__default.ValidMrsMsrOperand#canCall| (Lit |s#0@@84|) (Lit |o#0@@28|)))) (=> (and (|_module.__default.ValidMrsMsrOperand#canCall| (Lit |s#0@@84|) (Lit |o#0@@28|)) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidMrsMsrOperand (Lit |s#0@@84|) (Lit |o#0@@28|))))))) (|_module.__default.ValidMcrMrcOperand#canCall| (Lit |s#0@@84|) (Lit |o#0@@28|)))) (and (=> (_module.__default.ValidAnySrcOperand (Lit |s#0@@84|) (Lit |o#0@@28|)) (U_2_bool (Lit (bool_2_U  (or (or (or (or (_module.__default.ValidOperand (Lit |o#0@@28|)) (_module.__default.ValidSecondOperand (Lit |o#0@@28|))) (_module.__default.ValidBankedRegOperand (Lit |s#0@@84|) (Lit |o#0@@28|))) (_module.__default.ValidMrsMsrOperand (Lit |s#0@@84|) (Lit |o#0@@28|))) (_module.__default.ValidMcrMrcOperand (Lit |s#0@@84|) (Lit |o#0@@28|))))))) (=> (U_2_bool (Lit (bool_2_U  (or (or (or (or (_module.__default.ValidOperand (Lit |o#0@@28|)) (_module.__default.ValidSecondOperand (Lit |o#0@@28|))) (_module.__default.ValidBankedRegOperand (Lit |s#0@@84|) (Lit |o#0@@28|))) (_module.__default.ValidMrsMsrOperand (Lit |s#0@@84|) (Lit |o#0@@28|))) (_module.__default.ValidMcrMrcOperand (Lit |s#0@@84|) (Lit |o#0@@28|)))))) (_module.__default.ValidAnySrcOperand (Lit |s#0@@84|) (Lit |o#0@@28|)))))) :qid |ARMdefsd.458:30| :weight 3 :skolemid |2593| :pattern ( (_module.__default.ValidAnySrcOperand (Lit |s#0@@84|) (Lit |o#0@@28|))) ))))
(assert  (=> true (forall ((|addr#0| Int) ) (!  (=> true true) :qid |ARMdefsd.464:21| :skolemid |2594| :pattern ( (_module.__default.ValidAddr |addr#0|)) ))))
(assert (forall ((|addr#0@@0| Int) ) (!  (and (=> (|_module.__default.ValidAddr#requires| |addr#0@@0|) true) (=> true (|_module.__default.ValidAddr#requires| |addr#0@@0|))) :qid |ARMdefsd.464:21| :skolemid |2595| :pattern ( (|_module.__default.ValidAddr#requires| |addr#0@@0|)) )))
(assert  (=> true (forall ((|addr#0@@1| Int) ) (!  (=> true (and (and (|_module.__default.isUInt32#canCall| |addr#0@@1|) (=> (_module.__default.isUInt32 |addr#0@@1|) (|_module.__default.WordAligned#canCall| |addr#0@@1|))) (and (=> (_module.__default.ValidAddr |addr#0@@1|) (and (_module.__default.isUInt32 |addr#0@@1|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |addr#0@@1|))) (=> (and (_module.__default.isUInt32 |addr#0@@1|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |addr#0@@1|)) (_module.__default.ValidAddr |addr#0@@1|))))) :qid |ARMdefsd.464:21| :skolemid |2596| :pattern ( (_module.__default.ValidAddr |addr#0@@1|)) ))))
(assert  (=> true (forall ((|addr#0@@2| Int) ) (!  (=> true (and (and (|_module.__default.isUInt32#canCall| (LitInt |addr#0@@2|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.isUInt32 (LitInt |addr#0@@2|))))) (|_module.__default.WordAligned#canCall| (LitInt |addr#0@@2|)))) (and (=> (_module.__default.ValidAddr (LitInt |addr#0@@2|)) (and (_module.__default.isUInt32 (LitInt |addr#0@@2|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |addr#0@@2|)))) (=> (and (_module.__default.isUInt32 (LitInt |addr#0@@2|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |addr#0@@2|))) (_module.__default.ValidAddr (LitInt |addr#0@@2|)))))) :qid |ARMdefsd.464:21| :weight 3 :skolemid |2597| :pattern ( (_module.__default.ValidAddr (LitInt |addr#0@@2|))) ))))
(assert  (=> true (forall ((|addr#0@@3| Int) ) (!  (=> true true) :qid |ARMdefsd.469:27| :skolemid |2598| :pattern ( (_module.__default.ValidMemForRead |addr#0@@3|)) ))))
(assert (forall ((|addr#0@@4| Int) ) (!  (and (=> (|_module.__default.ValidMemForRead#requires| |addr#0@@4|) true) (=> true (|_module.__default.ValidMemForRead#requires| |addr#0@@4|))) :qid |ARMdefsd.469:27| :skolemid |2599| :pattern ( (|_module.__default.ValidMemForRead#requires| |addr#0@@4|)) )))
(assert  (=> true (forall ((|addr#0@@5| Int) ) (!  (=> true (and (and (|_module.__default.ValidAddr#canCall| |addr#0@@5|) (=> (_module.__default.ValidAddr |addr#0@@5|) |_module.__default.TheValidAddresses#canCall|)) (and (=> (_module.__default.ValidMemForRead |addr#0@@5|) (and (_module.__default.ValidAddr |addr#0@@5|) (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U |addr#0@@5|)))))) (=> (and (_module.__default.ValidAddr |addr#0@@5|) (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U |addr#0@@5|))))) (_module.__default.ValidMemForRead |addr#0@@5|))))) :qid |ARMdefsd.469:27| :skolemid |2600| :pattern ( (_module.__default.ValidMemForRead |addr#0@@5|)) ))))
(assert  (=> true (forall ((|addr#0@@6| Int) ) (!  (=> true (and (and (|_module.__default.ValidAddr#canCall| (LitInt |addr#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidAddr (LitInt |addr#0@@6|))))) |_module.__default.TheValidAddresses#canCall|)) (and (=> (_module.__default.ValidMemForRead (LitInt |addr#0@@6|)) (and (_module.__default.ValidAddr (LitInt |addr#0@@6|)) (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U (LitInt |addr#0@@6|))))))) (=> (and (_module.__default.ValidAddr (LitInt |addr#0@@6|)) (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U (LitInt |addr#0@@6|)))))) (_module.__default.ValidMemForRead (LitInt |addr#0@@6|)))))) :qid |ARMdefsd.469:27| :weight 3 :skolemid |2601| :pattern ( (_module.__default.ValidMemForRead (LitInt |addr#0@@6|))) ))))
(assert  (=> true (forall ((|addr#0@@7| Int) ) (!  (=> true (=> (_module.__default.ValidMem |addr#0@@7|) (_module.__default.ValidMemForRead |addr#0@@7|))) :qid |ARMdefsd.474:20| :skolemid |2602| :pattern ( (_module.__default.ValidMem |addr#0@@7|)) ))))
(assert (forall ((|addr#0@@8| Int) ) (!  (and (=> (|_module.__default.ValidMem#requires| |addr#0@@8|) true) (=> true (|_module.__default.ValidMem#requires| |addr#0@@8|))) :qid |ARMdefsd.474:20| :skolemid |2603| :pattern ( (|_module.__default.ValidMem#requires| |addr#0@@8|)) )))
(assert  (=> true (forall ((|addr#0@@9| Int) ) (!  (=> true (and (and (|_module.__default.ValidAddr#canCall| |addr#0@@9|) (=> (_module.__default.ValidAddr |addr#0@@9|) |_module.__default.TheValidAddressesRW#canCall|)) (and (=> (_module.__default.ValidMem |addr#0@@9|) (and (_module.__default.ValidAddr |addr#0@@9|) (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U |addr#0@@9|)))))) (=> (and (_module.__default.ValidAddr |addr#0@@9|) (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U |addr#0@@9|))))) (_module.__default.ValidMem |addr#0@@9|))))) :qid |ARMdefsd.474:20| :skolemid |2604| :pattern ( (_module.__default.ValidMem |addr#0@@9|)) ))))
(assert  (=> true (forall ((|addr#0@@10| Int) ) (!  (=> true (and (and (|_module.__default.ValidAddr#canCall| (LitInt |addr#0@@10|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidAddr (LitInt |addr#0@@10|))))) |_module.__default.TheValidAddressesRW#canCall|)) (and (=> (_module.__default.ValidMem (LitInt |addr#0@@10|)) (and (_module.__default.ValidAddr (LitInt |addr#0@@10|)) (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U (LitInt |addr#0@@10|))))))) (=> (and (_module.__default.ValidAddr (LitInt |addr#0@@10|)) (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW ($Box (int_2_U (LitInt |addr#0@@10|)))))) (_module.__default.ValidMem (LitInt |addr#0@@10|)))))) :qid |ARMdefsd.474:20| :weight 3 :skolemid |2605| :pattern ( (_module.__default.ValidMem (LitInt |addr#0@@10|))) ))))
(assert  (=> true (forall ((|base#0| Int) (|limit#0| Int) ) (!  (=> true true) :qid |ARMdefsd.480:32| :skolemid |2606| :pattern ( (_module.__default.ValidMemRangeForRead |base#0| |limit#0|)) ))))
(assert (forall ((|base#0@@0| Int) (|limit#0@@0| Int) ) (!  (and (=> (|_module.__default.ValidMemRangeForRead#requires| |base#0@@0| |limit#0@@0|) true) (=> true (|_module.__default.ValidMemRangeForRead#requires| |base#0@@0| |limit#0@@0|))) :qid |ARMdefsd.480:32| :skolemid |2607| :pattern ( (|_module.__default.ValidMemRangeForRead#requires| |base#0@@0| |limit#0@@0|)) )))
(assert  (=> true (forall ((|base#0@@1| Int) (|limit#0@@1| Int) ) (!  (=> true (and (and (and (|_module.__default.ValidMemForRead#canCall| |base#0@@1|) (=> (_module.__default.ValidMemForRead |base#0@@1|) (|_module.__default.WordAligned#canCall| |limit#0@@1|))) (=> (and (|_module.__default.WordAligned#canCall| |limit#0@@1|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |limit#0@@1|)) (forall ((|a#0@@10| Int) ) (!  (and (=> (INTERNAL_lt_boogie |a#0@@10| |limit#0@@1|) (|_module.__default.WordAligned#canCall| |a#0@@10|)) (=> (and (|_module.__default.WordAligned#canCall| |a#0@@10|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@10|)) (|_module.__default.ValidMemForRead#canCall| |a#0@@10|))) :qid |ARMdefsd.483:15| :skolemid |2608| :pattern ( (_module.__default.ValidMemForRead |a#0@@10|)) :pattern ( (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@10|)) )))) (and (=> (_module.__default.ValidMemRangeForRead |base#0@@1| |limit#0@@1|) (and (and (_module.__default.ValidMemForRead |base#0@@1|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |limit#0@@1|)) (forall ((|a#0@@11| Int) (|tr$ly#0@@5| T@U) ) (!  (=> (and (= (type |tr$ly#0@@5|) LayerTypeType) true) (=> (and (and (INTERNAL_le_boogie |base#0@@1| |a#0@@11|) (INTERNAL_lt_boogie |a#0@@11| |limit#0@@1|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@11|)) (_module.__default.ValidMemForRead |a#0@@11|))) :qid |ARMdefsd.483:15| :skolemid |2609| :pattern ( (_module.__default.ValidMemForRead |a#0@@11|) (AsFuelBottom |tr$ly#0@@5|)) :pattern ( (_module.__default.WordAligned |tr$ly#0@@5| |a#0@@11|)) )))) (=> (and (and (_module.__default.ValidMemForRead |base#0@@1|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |limit#0@@1|)) (forall ((|a#0@@12| Int) (|tr$ly#0@@6| T@U) ) (!  (=> (and (= (type |tr$ly#0@@6|) LayerTypeType) true) (=> (and (and (INTERNAL_le_boogie |base#0@@1| |a#0@@12|) (INTERNAL_lt_boogie |a#0@@12| |limit#0@@1|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@12|)) (_module.__default.ValidMemForRead |a#0@@12|))) :qid |ARMdefsd.483:15| :skolemid |2609| :pattern ( (_module.__default.ValidMemForRead |a#0@@12|) (AsFuelBottom |tr$ly#0@@6|)) :pattern ( (_module.__default.WordAligned |tr$ly#0@@6| |a#0@@12|)) ))) (_module.__default.ValidMemRangeForRead |base#0@@1| |limit#0@@1|))))) :qid |ARMdefsd.480:32| :skolemid |2610| :pattern ( (_module.__default.ValidMemRangeForRead |base#0@@1| |limit#0@@1|)) ))))
(assert  (=> true (forall ((|base#0@@2| Int) (|limit#0@@2| Int) ) (!  (=> true (and (and (and (|_module.__default.ValidMemForRead#canCall| (LitInt |base#0@@2|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidMemForRead (LitInt |base#0@@2|))))) (|_module.__default.WordAligned#canCall| (LitInt |limit#0@@2|)))) (=> (and (|_module.__default.WordAligned#canCall| (LitInt |limit#0@@2|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |limit#0@@2|))) (forall ((|a#1@@2| Int) ) (!  (and (=> (INTERNAL_lt_boogie |a#1@@2| |limit#0@@2|) (|_module.__default.WordAligned#canCall| |a#1@@2|)) (=> (and (|_module.__default.WordAligned#canCall| |a#1@@2|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#1@@2|)) (|_module.__default.ValidMemForRead#canCall| |a#1@@2|))) :qid |ARMdefsd.483:15| :skolemid |2611| :pattern ( (_module.__default.ValidMemForRead |a#1@@2|)) :pattern ( (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#1@@2|)) )))) (and (=> (_module.__default.ValidMemRangeForRead (LitInt |base#0@@2|) (LitInt |limit#0@@2|)) (and (and (_module.__default.ValidMemForRead (LitInt |base#0@@2|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |limit#0@@2|))) (forall ((|a#1@@3| Int) (|tr$ly#1@@3| T@U) ) (!  (=> (and (= (type |tr$ly#1@@3|) LayerTypeType) true) (=> (and (and (INTERNAL_le_boogie |base#0@@2| |a#1@@3|) (INTERNAL_lt_boogie |a#1@@3| |limit#0@@2|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#1@@3|)) (_module.__default.ValidMemForRead |a#1@@3|))) :qid |ARMdefsd.483:15| :skolemid |2612| :pattern ( (_module.__default.ValidMemForRead |a#1@@3|) (AsFuelBottom |tr$ly#1@@3|)) :pattern ( (_module.__default.WordAligned |tr$ly#1@@3| |a#1@@3|)) )))) (=> (and (and (_module.__default.ValidMemForRead (LitInt |base#0@@2|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |limit#0@@2|))) (forall ((|a#1@@4| Int) (|tr$ly#1@@4| T@U) ) (!  (=> (and (= (type |tr$ly#1@@4|) LayerTypeType) true) (=> (and (and (INTERNAL_le_boogie |base#0@@2| |a#1@@4|) (INTERNAL_lt_boogie |a#1@@4| |limit#0@@2|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#1@@4|)) (_module.__default.ValidMemForRead |a#1@@4|))) :qid |ARMdefsd.483:15| :skolemid |2612| :pattern ( (_module.__default.ValidMemForRead |a#1@@4|) (AsFuelBottom |tr$ly#1@@4|)) :pattern ( (_module.__default.WordAligned |tr$ly#1@@4| |a#1@@4|)) ))) (_module.__default.ValidMemRangeForRead (LitInt |base#0@@2|) (LitInt |limit#0@@2|)))))) :qid |ARMdefsd.480:32| :weight 3 :skolemid |2613| :pattern ( (_module.__default.ValidMemRangeForRead (LitInt |base#0@@2|) (LitInt |limit#0@@2|))) ))))
(assert  (=> true (forall ((|base#0@@3| Int) (|limit#0@@3| Int) ) (!  (=> true true) :qid |ARMdefsd.486:25| :skolemid |2614| :pattern ( (_module.__default.ValidMemRange |base#0@@3| |limit#0@@3|)) ))))
(assert (forall ((|base#0@@4| Int) (|limit#0@@4| Int) ) (!  (and (=> (|_module.__default.ValidMemRange#requires| |base#0@@4| |limit#0@@4|) true) (=> true (|_module.__default.ValidMemRange#requires| |base#0@@4| |limit#0@@4|))) :qid |ARMdefsd.486:25| :skolemid |2615| :pattern ( (|_module.__default.ValidMemRange#requires| |base#0@@4| |limit#0@@4|)) )))
(assert  (=> true (forall ((|base#0@@5| Int) (|limit#0@@5| Int) ) (!  (=> true (and (and (and (|_module.__default.ValidMem#canCall| |base#0@@5|) (=> (_module.__default.ValidMem |base#0@@5|) (|_module.__default.WordAligned#canCall| |limit#0@@5|))) (=> (and (|_module.__default.WordAligned#canCall| |limit#0@@5|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |limit#0@@5|)) (forall ((|a#0@@13| Int) ) (!  (and (=> (INTERNAL_lt_boogie |a#0@@13| |limit#0@@5|) (|_module.__default.WordAligned#canCall| |a#0@@13|)) (=> (and (|_module.__default.WordAligned#canCall| |a#0@@13|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@13|)) (|_module.__default.ValidMem#canCall| |a#0@@13|))) :qid |ARMdefsd.489:15| :skolemid |2616| :pattern ( (_module.__default.ValidMem |a#0@@13|)) :pattern ( (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@13|)) )))) (and (=> (_module.__default.ValidMemRange |base#0@@5| |limit#0@@5|) (and (and (_module.__default.ValidMem |base#0@@5|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |limit#0@@5|)) (forall ((|a#0@@14| Int) (|tr$ly#0@@7| T@U) ) (!  (=> (and (= (type |tr$ly#0@@7|) LayerTypeType) true) (=> (and (and (INTERNAL_le_boogie |base#0@@5| |a#0@@14|) (INTERNAL_lt_boogie |a#0@@14| |limit#0@@5|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@14|)) (_module.__default.ValidMem |a#0@@14|))) :qid |ARMdefsd.489:15| :skolemid |2617| :pattern ( (_module.__default.ValidMem |a#0@@14|) (AsFuelBottom |tr$ly#0@@7|)) :pattern ( (_module.__default.WordAligned |tr$ly#0@@7| |a#0@@14|)) )))) (=> (and (and (_module.__default.ValidMem |base#0@@5|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |limit#0@@5|)) (forall ((|a#0@@15| Int) (|tr$ly#0@@8| T@U) ) (!  (=> (and (= (type |tr$ly#0@@8|) LayerTypeType) true) (=> (and (and (INTERNAL_le_boogie |base#0@@5| |a#0@@15|) (INTERNAL_lt_boogie |a#0@@15| |limit#0@@5|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@15|)) (_module.__default.ValidMem |a#0@@15|))) :qid |ARMdefsd.489:15| :skolemid |2617| :pattern ( (_module.__default.ValidMem |a#0@@15|) (AsFuelBottom |tr$ly#0@@8|)) :pattern ( (_module.__default.WordAligned |tr$ly#0@@8| |a#0@@15|)) ))) (_module.__default.ValidMemRange |base#0@@5| |limit#0@@5|))))) :qid |ARMdefsd.486:25| :skolemid |2618| :pattern ( (_module.__default.ValidMemRange |base#0@@5| |limit#0@@5|)) ))))
(assert  (=> true (forall ((|base#0@@6| Int) (|limit#0@@6| Int) ) (!  (=> true (and (and (and (|_module.__default.ValidMem#canCall| (LitInt |base#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidMem (LitInt |base#0@@6|))))) (|_module.__default.WordAligned#canCall| (LitInt |limit#0@@6|)))) (=> (and (|_module.__default.WordAligned#canCall| (LitInt |limit#0@@6|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |limit#0@@6|))) (forall ((|a#1@@5| Int) ) (!  (and (=> (INTERNAL_lt_boogie |a#1@@5| |limit#0@@6|) (|_module.__default.WordAligned#canCall| |a#1@@5|)) (=> (and (|_module.__default.WordAligned#canCall| |a#1@@5|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#1@@5|)) (|_module.__default.ValidMem#canCall| |a#1@@5|))) :qid |ARMdefsd.489:15| :skolemid |2619| :pattern ( (_module.__default.ValidMem |a#1@@5|)) :pattern ( (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#1@@5|)) )))) (and (=> (_module.__default.ValidMemRange (LitInt |base#0@@6|) (LitInt |limit#0@@6|)) (and (and (_module.__default.ValidMem (LitInt |base#0@@6|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |limit#0@@6|))) (forall ((|a#1@@6| Int) (|tr$ly#1@@5| T@U) ) (!  (=> (and (= (type |tr$ly#1@@5|) LayerTypeType) true) (=> (and (and (INTERNAL_le_boogie |base#0@@6| |a#1@@6|) (INTERNAL_lt_boogie |a#1@@6| |limit#0@@6|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#1@@6|)) (_module.__default.ValidMem |a#1@@6|))) :qid |ARMdefsd.489:15| :skolemid |2620| :pattern ( (_module.__default.ValidMem |a#1@@6|) (AsFuelBottom |tr$ly#1@@5|)) :pattern ( (_module.__default.WordAligned |tr$ly#1@@5| |a#1@@6|)) )))) (=> (and (and (_module.__default.ValidMem (LitInt |base#0@@6|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |limit#0@@6|))) (forall ((|a#1@@7| Int) (|tr$ly#1@@6| T@U) ) (!  (=> (and (= (type |tr$ly#1@@6|) LayerTypeType) true) (=> (and (and (INTERNAL_le_boogie |base#0@@6| |a#1@@7|) (INTERNAL_lt_boogie |a#1@@7| |limit#0@@6|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#1@@7|)) (_module.__default.ValidMem |a#1@@7|))) :qid |ARMdefsd.489:15| :skolemid |2620| :pattern ( (_module.__default.ValidMem |a#1@@7|) (AsFuelBottom |tr$ly#1@@6|)) :pattern ( (_module.__default.WordAligned |tr$ly#1@@6| |a#1@@7|)) ))) (_module.__default.ValidMemRange (LitInt |base#0@@6|) (LitInt |limit#0@@6|)))))) :qid |ARMdefsd.486:25| :weight 3 :skolemid |2621| :pattern ( (_module.__default.ValidMemRange (LitInt |base#0@@6|) (LitInt |limit#0@@6|))) ))))
(assert  (=> true (forall ((|base#0@@7| Int) (|nwords#0| Int) ) (!  (=> true true) :qid |ARMdefsd.492:25| :skolemid |2622| :pattern ( (_module.__default.ValidMemWords |base#0@@7| |nwords#0|)) ))))
(assert (forall ((|base#0@@8| Int) (|nwords#0@@0| Int) ) (!  (and (=> (|_module.__default.ValidMemWords#requires| |base#0@@8| |nwords#0@@0|) true) (=> true (|_module.__default.ValidMemWords#requires| |base#0@@8| |nwords#0@@0|))) :qid |ARMdefsd.492:25| :skolemid |2623| :pattern ( (|_module.__default.ValidMemWords#requires| |base#0@@8| |nwords#0@@0|)) )))
(assert  (=> true (forall ((|base#0@@9| Int) (|nwords#0@@1| Int) ) (!  (=> true (and (and (and (|_module.__default.isUInt32#canCall| |base#0@@9|) (=> (_module.__default.isUInt32 |base#0@@9|) (|_module.__default.ValidWordOffset#canCall| |base#0@@9| |nwords#0@@1|))) (=> (and (|_module.__default.ValidWordOffset#canCall| |base#0@@9| |nwords#0@@1|) (_module.__default.ValidWordOffset |base#0@@9| |nwords#0@@1|)) (and (|_module.__default.WordOffset#canCall| |base#0@@9| |nwords#0@@1|) (|_module.__default.ValidMemRange#canCall| |base#0@@9| (_module.__default.WordOffset |base#0@@9| |nwords#0@@1|))))) (and (=> (_module.__default.ValidMemWords |base#0@@9| |nwords#0@@1|) (and (and (_module.__default.isUInt32 |base#0@@9|) (_module.__default.ValidWordOffset |base#0@@9| |nwords#0@@1|)) (_module.__default.ValidMemRange |base#0@@9| (_module.__default.WordOffset |base#0@@9| |nwords#0@@1|)))) (=> (and (and (_module.__default.isUInt32 |base#0@@9|) (_module.__default.ValidWordOffset |base#0@@9| |nwords#0@@1|)) (_module.__default.ValidMemRange |base#0@@9| (_module.__default.WordOffset |base#0@@9| |nwords#0@@1|))) (_module.__default.ValidMemWords |base#0@@9| |nwords#0@@1|))))) :qid |ARMdefsd.492:25| :skolemid |2624| :pattern ( (_module.__default.ValidMemWords |base#0@@9| |nwords#0@@1|)) ))))
(assert  (=> true (forall ((|base#0@@10| Int) (|nwords#0@@2| Int) ) (!  (=> true (and (and (and (|_module.__default.isUInt32#canCall| (LitInt |base#0@@10|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.isUInt32 (LitInt |base#0@@10|))))) (|_module.__default.ValidWordOffset#canCall| (LitInt |base#0@@10|) (LitInt |nwords#0@@2|)))) (=> (and (|_module.__default.ValidWordOffset#canCall| (LitInt |base#0@@10|) (LitInt |nwords#0@@2|)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidWordOffset (LitInt |base#0@@10|) (LitInt |nwords#0@@2|)))))) (and (|_module.__default.WordOffset#canCall| (LitInt |base#0@@10|) (LitInt |nwords#0@@2|)) (|_module.__default.ValidMemRange#canCall| (LitInt |base#0@@10|) (LitInt (_module.__default.WordOffset (LitInt |base#0@@10|) (LitInt |nwords#0@@2|))))))) (and (=> (_module.__default.ValidMemWords (LitInt |base#0@@10|) (LitInt |nwords#0@@2|)) (U_2_bool (Lit (bool_2_U  (and (and (_module.__default.isUInt32 (LitInt |base#0@@10|)) (_module.__default.ValidWordOffset (LitInt |base#0@@10|) (LitInt |nwords#0@@2|))) (_module.__default.ValidMemRange (LitInt |base#0@@10|) (LitInt (_module.__default.WordOffset (LitInt |base#0@@10|) (LitInt |nwords#0@@2|))))))))) (=> (U_2_bool (Lit (bool_2_U  (and (and (_module.__default.isUInt32 (LitInt |base#0@@10|)) (_module.__default.ValidWordOffset (LitInt |base#0@@10|) (LitInt |nwords#0@@2|))) (_module.__default.ValidMemRange (LitInt |base#0@@10|) (LitInt (_module.__default.WordOffset (LitInt |base#0@@10|) (LitInt |nwords#0@@2|)))))))) (_module.__default.ValidMemWords (LitInt |base#0@@10|) (LitInt |nwords#0@@2|)))))) :qid |ARMdefsd.492:25| :weight 3 :skolemid |2625| :pattern ( (_module.__default.ValidMemWords (LitInt |base#0@@10|) (LitInt |nwords#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@85| T@U) (|o#0@@29| T@U) ) (!  (=> (and (and (= (type |s#0@@85|) DatatypeTypeType) (= (type |o#0@@29|) DatatypeTypeType)) (or (|_module.__default.ValidShiftOperand#canCall| |s#0@@85| |o#0@@29|) (and (and ($Is |s#0@@85| Tclass._module.state) ($Is |o#0@@29| Tclass._module.operand)) (_module.__default.ValidState |s#0@@85|)))) true) :qid |ARMdefsd.498:29| :skolemid |2626| :pattern ( (_module.__default.ValidShiftOperand |s#0@@85| |o#0@@29|)) ))))
(assert (forall ((|s#0@@86| T@U) (|o#0@@30| T@U) ) (!  (=> (and (and (= (type |s#0@@86|) DatatypeTypeType) (= (type |o#0@@30|) DatatypeTypeType)) (and ($Is |s#0@@86| Tclass._module.state) ($Is |o#0@@30| Tclass._module.operand))) (and (=> (|_module.__default.ValidShiftOperand#requires| |s#0@@86| |o#0@@30|) (_module.__default.ValidState |s#0@@86|)) (=> (_module.__default.ValidState |s#0@@86|) (|_module.__default.ValidShiftOperand#requires| |s#0@@86| |o#0@@30|)))) :qid |ARMdefsd.498:29| :skolemid |2627| :pattern ( (|_module.__default.ValidShiftOperand#requires| |s#0@@86| |o#0@@30|)) )))
(assert  (=> true (forall ((|s#0@@87| T@U) (|o#0@@31| T@U) ) (!  (=> (and (and (= (type |s#0@@87|) DatatypeTypeType) (= (type |o#0@@31|) DatatypeTypeType)) (or (|_module.__default.ValidShiftOperand#canCall| |s#0@@87| |o#0@@31|) (and (and ($Is |s#0@@87| Tclass._module.state) ($Is |o#0@@31| Tclass._module.operand)) (_module.__default.ValidState |s#0@@87|)))) (and (and (|_module.__default.ValidOperand#canCall| |o#0@@31|) (=> (_module.__default.ValidOperand |o#0@@31|) (|_module.__default.OperandContents#canCall| |s#0@@87| |o#0@@31|))) (and (=> (_module.__default.ValidShiftOperand |s#0@@87| |o#0@@31|) (and (_module.__default.ValidOperand |o#0@@31|) (INTERNAL_lt_boogie (_module.__default.OperandContents |s#0@@87| |o#0@@31|) 32))) (=> (and (_module.__default.ValidOperand |o#0@@31|) (INTERNAL_lt_boogie (_module.__default.OperandContents |s#0@@87| |o#0@@31|) 32)) (_module.__default.ValidShiftOperand |s#0@@87| |o#0@@31|))))) :qid |ARMdefsd.498:29| :skolemid |2628| :pattern ( (_module.__default.ValidShiftOperand |s#0@@87| |o#0@@31|)) ))))
(assert  (=> true (forall ((|s#0@@88| T@U) (|o#0@@32| T@U) ) (!  (=> (and (and (= (type |s#0@@88|) DatatypeTypeType) (= (type |o#0@@32|) DatatypeTypeType)) (or (|_module.__default.ValidShiftOperand#canCall| (Lit |s#0@@88|) (Lit |o#0@@32|)) (and (and ($Is |s#0@@88| Tclass._module.state) ($Is |o#0@@32| Tclass._module.operand)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@88|)))))))) (and (and (|_module.__default.ValidOperand#canCall| (Lit |o#0@@32|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit |o#0@@32|))))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@88|) (Lit |o#0@@32|)))) (and (=> (_module.__default.ValidShiftOperand (Lit |s#0@@88|) (Lit |o#0@@32|)) (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidOperand (Lit |o#0@@32|)) (INTERNAL_lt_boogie (_module.__default.OperandContents (Lit |s#0@@88|) (Lit |o#0@@32|)) 32)))))) (=> (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidOperand (Lit |o#0@@32|)) (INTERNAL_lt_boogie (_module.__default.OperandContents (Lit |s#0@@88|) (Lit |o#0@@32|)) 32))))) (_module.__default.ValidShiftOperand (Lit |s#0@@88|) (Lit |o#0@@32|)))))) :qid |ARMdefsd.498:29| :weight 3 :skolemid |2629| :pattern ( (_module.__default.ValidShiftOperand (Lit |s#0@@88|) (Lit |o#0@@32|))) ))))
(assert  (=> true (forall ((|o#0@@33| T@U) ) (!  (=> (and (= (type |o#0@@33|) DatatypeTypeType) (or (|_module.__default.ValidRegOperand#canCall| |o#0@@33|) ($Is |o#0@@33| Tclass._module.operand))) true) :qid |ARMdefsd.502:27| :skolemid |2630| :pattern ( (_module.__default.ValidRegOperand |o#0@@33|)) ))))
(assert (forall (($Heap@@112 T@U) (|o#0@@34| T@U) ) (!  (=> (and (and (= (type $Heap@@112) (MapType1Type refType)) (= (type |o#0@@34|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@112) ($Is |o#0@@34| Tclass._module.operand))) (and (=> (|_module.__default.ValidRegOperand#requires| |o#0@@34|) true) (=> true (|_module.__default.ValidRegOperand#requires| |o#0@@34|)))) :qid |ARMdefsd.502:11| :skolemid |2631| :pattern ( (|_module.__default.ValidRegOperand#requires| |o#0@@34|) ($IsGoodHeap $Heap@@112)) )))
(assert  (=> true (forall (($Heap@@113 T@U) (|o#0@@35| T@U) ) (!  (=> (and (and (= (type $Heap@@113) (MapType1Type refType)) (= (type |o#0@@35|) DatatypeTypeType)) (or (|_module.__default.ValidRegOperand#canCall| |o#0@@35|) (and ($IsGoodHeap $Heap@@113) ($Is |o#0@@35| Tclass._module.operand)))) (and (=> (_module.__default.ValidRegOperand |o#0@@35|) (or (or (_module.operand.OSP_q |o#0@@35|) (_module.operand.OLR_q |o#0@@35|)) (and (_module.operand.OReg_q |o#0@@35|) (not (or (_module.ARMReg.SP_q (_module.operand.r |o#0@@35|)) (_module.ARMReg.LR_q (_module.operand.r |o#0@@35|))))))) (=> (or (or (_module.operand.OSP_q |o#0@@35|) (_module.operand.OLR_q |o#0@@35|)) (and (_module.operand.OReg_q |o#0@@35|) (not (or (_module.ARMReg.SP_q (_module.operand.r |o#0@@35|)) (_module.ARMReg.LR_q (_module.operand.r |o#0@@35|)))))) (_module.__default.ValidRegOperand |o#0@@35|)))) :qid |ARMdefsd.502:11| :skolemid |2632| :pattern ( (_module.__default.ValidRegOperand |o#0@@35|) ($IsGoodHeap $Heap@@113)) ))))
(assert  (=> true (forall (($Heap@@114 T@U) (|o#0@@36| T@U) ) (!  (=> (and (and (= (type $Heap@@114) (MapType1Type refType)) (= (type |o#0@@36|) DatatypeTypeType)) (or (|_module.__default.ValidRegOperand#canCall| (Lit |o#0@@36|)) (and ($IsGoodHeap $Heap@@114) ($Is |o#0@@36| Tclass._module.operand)))) (and (=> (_module.__default.ValidRegOperand (Lit |o#0@@36|)) (or (or (_module.operand.OSP_q (Lit |o#0@@36|)) (_module.operand.OLR_q (Lit |o#0@@36|))) (and (_module.operand.OReg_q (Lit |o#0@@36|)) (not (U_2_bool (Lit (bool_2_U  (or (_module.ARMReg.SP_q (Lit (_module.operand.r (Lit |o#0@@36|)))) (_module.ARMReg.LR_q (Lit (_module.operand.r (Lit |o#0@@36|)))))))))))) (=> (or (or (_module.operand.OSP_q (Lit |o#0@@36|)) (_module.operand.OLR_q (Lit |o#0@@36|))) (and (_module.operand.OReg_q (Lit |o#0@@36|)) (not (U_2_bool (Lit (bool_2_U  (or (_module.ARMReg.SP_q (Lit (_module.operand.r (Lit |o#0@@36|)))) (_module.ARMReg.LR_q (Lit (_module.operand.r (Lit |o#0@@36|))))))))))) (_module.__default.ValidRegOperand (Lit |o#0@@36|))))) :qid |ARMdefsd.502:11| :weight 3 :skolemid |2633| :pattern ( (_module.__default.ValidRegOperand (Lit |o#0@@36|)) ($IsGoodHeap $Heap@@114)) ))))
(assert  (=> true (forall ((|g#0@@3| T@U) ) (!  (=> (and (= (type |g#0@@3|) (SeqType BoxType)) (or (|_module.__default.ValidGlobal#canCall| |g#0@@3|) ($Is |g#0@@3| (TSeq TChar)))) true) :qid |ARMdefsd.510:23| :skolemid |2634| :pattern ( (_module.__default.ValidGlobal |g#0@@3|)) ))))
(assert (forall ((|g#0@@4| T@U) ) (!  (=> (and (= (type |g#0@@4|) (SeqType BoxType)) ($Is |g#0@@4| (TSeq TChar))) (and (=> (|_module.__default.ValidGlobal#requires| |g#0@@4|) true) (=> true (|_module.__default.ValidGlobal#requires| |g#0@@4|)))) :qid |ARMdefsd.510:23| :skolemid |2635| :pattern ( (|_module.__default.ValidGlobal#requires| |g#0@@4|)) )))
(assert  (=> true (forall ((|g#0@@5| T@U) ) (!  (=> (and (= (type |g#0@@5|) (SeqType BoxType)) (or (|_module.__default.ValidGlobal#canCall| |g#0@@5|) ($Is |g#0@@5| (TSeq TChar)))) (and |_module.__default.TheGlobalDecls#canCall| (and (=> (_module.__default.ValidGlobal |g#0@@5|) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@5|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@5|))) (_module.__default.ValidGlobal |g#0@@5|))))) :qid |ARMdefsd.510:23| :skolemid |2636| :pattern ( (_module.__default.ValidGlobal |g#0@@5|)) ))))
(assert  (=> true (forall ((|g#0@@6| T@U) ) (!  (=> (and (= (type |g#0@@6|) (SeqType BoxType)) (or (|_module.__default.ValidGlobal#canCall| (Lit |g#0@@6|)) ($Is |g#0@@6| (TSeq TChar)))) (and |_module.__default.TheGlobalDecls#canCall| (and (=> (_module.__default.ValidGlobal (Lit |g#0@@6|)) (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@6|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| _module.__default.TheGlobalDecls) ($Box |g#0@@6|))) (_module.__default.ValidGlobal (Lit |g#0@@6|)))))) :qid |ARMdefsd.510:23| :weight 3 :skolemid |2637| :pattern ( (_module.__default.ValidGlobal (Lit |g#0@@6|))) ))))
(assert  (=> true (forall ((|decls#0| T@U) ) (!  (=> (and (= (type |decls#0|) (MapType BoxType BoxType)) (or (|_module.__default.ValidGlobalDecls#canCall| |decls#0|) ($Is |decls#0| (TMap (TSeq TChar) Tclass._module.addr)))) true) :qid |ARMdefsd.515:28| :skolemid |2638| :pattern ( (_module.__default.ValidGlobalDecls |decls#0|)) ))))
(assert (forall ((|decls#0@@0| T@U) ) (!  (=> (and (= (type |decls#0@@0|) (MapType BoxType BoxType)) ($Is |decls#0@@0| (TMap (TSeq TChar) Tclass._module.addr))) (and (=> (|_module.__default.ValidGlobalDecls#requires| |decls#0@@0|) true) (=> true (|_module.__default.ValidGlobalDecls#requires| |decls#0@@0|)))) :qid |ARMdefsd.515:28| :skolemid |2639| :pattern ( (|_module.__default.ValidGlobalDecls#requires| |decls#0@@0|)) )))
(assert  (=> true (forall ((|decls#0@@1| T@U) ) (!  (=> (and (= (type |decls#0@@1|) (MapType BoxType BoxType)) (or (|_module.__default.ValidGlobalDecls#canCall| |decls#0@@1|) ($Is |decls#0@@1| (TMap (TSeq TChar) Tclass._module.addr)))) (and (forall ((|d#0| T@U) ) (! true :qid |ARMdefsd.517:12| :skolemid |2640| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |decls#0@@1|) ($Box |d#0|)))) :pattern ( (MapType0Select (|Map#Domain| |decls#0@@1|) ($Box |d#0|))) )) (and (=> (_module.__default.ValidGlobalDecls |decls#0@@1|) (forall ((|d#0@@0| T@U) ) (!  (=> (and (and (= (type |d#0@@0|) (SeqType BoxType)) ($Is |d#0@@0| (TSeq TChar))) (U_2_bool (MapType0Select (|Map#Domain| |decls#0@@1|) ($Box |d#0@@0|)))) (not (= (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |decls#0@@1|) ($Box |d#0@@0|)))) 0))) :qid |ARMdefsd.517:12| :skolemid |2641| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |decls#0@@1|) ($Box |d#0@@0|)))) :pattern ( (MapType0Select (|Map#Domain| |decls#0@@1|) ($Box |d#0@@0|))) ))) (=> (forall ((|d#0@@1| T@U) ) (!  (=> (and (and (= (type |d#0@@1|) (SeqType BoxType)) ($Is |d#0@@1| (TSeq TChar))) (U_2_bool (MapType0Select (|Map#Domain| |decls#0@@1|) ($Box |d#0@@1|)))) (not (= (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |decls#0@@1|) ($Box |d#0@@1|)))) 0))) :qid |ARMdefsd.517:12| :skolemid |2641| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |decls#0@@1|) ($Box |d#0@@1|)))) :pattern ( (MapType0Select (|Map#Domain| |decls#0@@1|) ($Box |d#0@@1|))) )) (_module.__default.ValidGlobalDecls |decls#0@@1|))))) :qid |ARMdefsd.515:28| :skolemid |2642| :pattern ( (_module.__default.ValidGlobalDecls |decls#0@@1|)) ))))
(assert  (=> true (forall ((|decls#0@@2| T@U) ) (!  (=> (and (= (type |decls#0@@2|) (MapType BoxType BoxType)) (or (|_module.__default.ValidGlobalDecls#canCall| (Lit |decls#0@@2|)) ($Is |decls#0@@2| (TMap (TSeq TChar) Tclass._module.addr)))) (and (forall ((|d#1| T@U) ) (! true :qid |ARMdefsd.517:12| :skolemid |2643| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |decls#0@@2|) ($Box |d#1|)))) :pattern ( (MapType0Select (|Map#Domain| |decls#0@@2|) ($Box |d#1|))) )) (and (=> (_module.__default.ValidGlobalDecls (Lit |decls#0@@2|)) (forall ((|d#1@@0| T@U) ) (!  (=> (and (and (= (type |d#1@@0|) (SeqType BoxType)) ($Is |d#1@@0| (TSeq TChar))) (U_2_bool (MapType0Select (|Map#Domain| |decls#0@@2|) ($Box |d#1@@0|)))) (not (= (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |decls#0@@2|)) ($Box |d#1@@0|)))) 0))) :qid |ARMdefsd.517:12| :skolemid |2644| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |decls#0@@2|) ($Box |d#1@@0|)))) :pattern ( (MapType0Select (|Map#Domain| |decls#0@@2|) ($Box |d#1@@0|))) ))) (=> (forall ((|d#1@@1| T@U) ) (!  (=> (and (and (= (type |d#1@@1|) (SeqType BoxType)) ($Is |d#1@@1| (TSeq TChar))) (U_2_bool (MapType0Select (|Map#Domain| |decls#0@@2|) ($Box |d#1@@1|)))) (not (= (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |decls#0@@2|)) ($Box |d#1@@1|)))) 0))) :qid |ARMdefsd.517:12| :skolemid |2644| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |decls#0@@2|) ($Box |d#1@@1|)))) :pattern ( (MapType0Select (|Map#Domain| |decls#0@@2|) ($Box |d#1@@1|))) )) (_module.__default.ValidGlobalDecls (Lit |decls#0@@2|)))))) :qid |ARMdefsd.515:28| :weight 3 :skolemid |2645| :pattern ( (_module.__default.ValidGlobalDecls (Lit |decls#0@@2|))) ))))
(assert  (=> true (forall ((|g#0@@7| T@U) (|addr#0@@11| Int) ) (!  (=> (and (= (type |g#0@@7|) (SeqType BoxType)) (or (|_module.__default.ValidGlobalAddr#canCall| |g#0@@7| |addr#0@@11|) ($Is |g#0@@7| (TSeq TChar)))) true) :qid |ARMdefsd.520:27| :skolemid |2646| :pattern ( (_module.__default.ValidGlobalAddr |g#0@@7| |addr#0@@11|)) ))))
(assert (forall ((|g#0@@8| T@U) (|addr#0@@12| Int) ) (!  (=> (and (= (type |g#0@@8|) (SeqType BoxType)) ($Is |g#0@@8| (TSeq TChar))) (and (=> (|_module.__default.ValidGlobalAddr#requires| |g#0@@8| |addr#0@@12|) true) (=> true (|_module.__default.ValidGlobalAddr#requires| |g#0@@8| |addr#0@@12|)))) :qid |ARMdefsd.520:27| :skolemid |2647| :pattern ( (|_module.__default.ValidGlobalAddr#requires| |g#0@@8| |addr#0@@12|)) )))
(assert  (=> true (forall ((|g#0@@9| T@U) (|addr#0@@13| Int) ) (!  (=> (and (= (type |g#0@@9|) (SeqType BoxType)) (or (|_module.__default.ValidGlobalAddr#canCall| |g#0@@9| |addr#0@@13|) ($Is |g#0@@9| (TSeq TChar)))) (and (and (and (|_module.__default.ValidGlobal#canCall| |g#0@@9|) (=> (_module.__default.ValidGlobal |g#0@@9|) (|_module.__default.WordAligned#canCall| |addr#0@@13|))) (=> (and (|_module.__default.WordAligned#canCall| |addr#0@@13|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |addr#0@@13|)) (and (|_module.__default.AddressOfGlobal#canCall| |g#0@@9|) (=> (INTERNAL_le_boogie (_module.__default.AddressOfGlobal |g#0@@9|) |addr#0@@13|) (and (|_module.__default.AddressOfGlobal#canCall| |g#0@@9|) (|_module.__default.SizeOfGlobal#canCall| |g#0@@9|)))))) (and (=> (_module.__default.ValidGlobalAddr |g#0@@9| |addr#0@@13|) (and (and (_module.__default.ValidGlobal |g#0@@9|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |addr#0@@13|)) (and (INTERNAL_le_boogie (_module.__default.AddressOfGlobal |g#0@@9|) |addr#0@@13|) (INTERNAL_lt_boogie |addr#0@@13| (INTERNAL_add_boogie (_module.__default.AddressOfGlobal |g#0@@9|) (_module.__default.SizeOfGlobal |g#0@@9|)))))) (=> (and (and (_module.__default.ValidGlobal |g#0@@9|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |addr#0@@13|)) (and (INTERNAL_le_boogie (_module.__default.AddressOfGlobal |g#0@@9|) |addr#0@@13|) (INTERNAL_lt_boogie |addr#0@@13| (INTERNAL_add_boogie (_module.__default.AddressOfGlobal |g#0@@9|) (_module.__default.SizeOfGlobal |g#0@@9|))))) (_module.__default.ValidGlobalAddr |g#0@@9| |addr#0@@13|))))) :qid |ARMdefsd.520:27| :skolemid |2648| :pattern ( (_module.__default.ValidGlobalAddr |g#0@@9| |addr#0@@13|)) ))))
(assert  (=> true (forall ((|g#0@@10| T@U) (|addr#0@@14| Int) ) (!  (=> (and (= (type |g#0@@10|) (SeqType BoxType)) (or (|_module.__default.ValidGlobalAddr#canCall| (Lit |g#0@@10|) (LitInt |addr#0@@14|)) ($Is |g#0@@10| (TSeq TChar)))) (and (and (and (|_module.__default.ValidGlobal#canCall| (Lit |g#0@@10|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidGlobal (Lit |g#0@@10|))))) (|_module.__default.WordAligned#canCall| (LitInt |addr#0@@14|)))) (=> (and (|_module.__default.WordAligned#canCall| (LitInt |addr#0@@14|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |addr#0@@14|))) (and (|_module.__default.AddressOfGlobal#canCall| (Lit |g#0@@10|)) (=> (INTERNAL_le_boogie (_module.__default.AddressOfGlobal (Lit |g#0@@10|)) |addr#0@@14|) (and (|_module.__default.AddressOfGlobal#canCall| (Lit |g#0@@10|)) (|_module.__default.SizeOfGlobal#canCall| (Lit |g#0@@10|))))))) (and (=> (_module.__default.ValidGlobalAddr (Lit |g#0@@10|) (LitInt |addr#0@@14|)) (and (and (_module.__default.ValidGlobal (Lit |g#0@@10|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |addr#0@@14|))) (and (INTERNAL_le_boogie (_module.__default.AddressOfGlobal (Lit |g#0@@10|)) |addr#0@@14|) (INTERNAL_lt_boogie |addr#0@@14| (INTERNAL_add_boogie (_module.__default.AddressOfGlobal (Lit |g#0@@10|)) (_module.__default.SizeOfGlobal (Lit |g#0@@10|))))))) (=> (and (and (_module.__default.ValidGlobal (Lit |g#0@@10|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |addr#0@@14|))) (and (INTERNAL_le_boogie (_module.__default.AddressOfGlobal (Lit |g#0@@10|)) |addr#0@@14|) (INTERNAL_lt_boogie |addr#0@@14| (INTERNAL_add_boogie (_module.__default.AddressOfGlobal (Lit |g#0@@10|)) (_module.__default.SizeOfGlobal (Lit |g#0@@10|)))))) (_module.__default.ValidGlobalAddr (Lit |g#0@@10|) (LitInt |addr#0@@14|)))))) :qid |ARMdefsd.520:27| :weight 3 :skolemid |2649| :pattern ( (_module.__default.ValidGlobalAddr (Lit |g#0@@10|) (LitInt |addr#0@@14|))) ))))
(assert  (=> true (forall ((|g#0@@11| T@U) (|offset#0@@7| Int) ) (!  (=> (and (= (type |g#0@@11|) (SeqType BoxType)) (or (|_module.__default.ValidGlobalOffset#canCall| |g#0@@11| |offset#0@@7|) ($Is |g#0@@11| (TSeq TChar)))) true) :qid |ARMdefsd.526:29| :skolemid |2650| :pattern ( (_module.__default.ValidGlobalOffset |g#0@@11| |offset#0@@7|)) ))))
(assert (forall ((|g#0@@12| T@U) (|offset#0@@8| Int) ) (!  (=> (and (= (type |g#0@@12|) (SeqType BoxType)) ($Is |g#0@@12| (TSeq TChar))) (and (=> (|_module.__default.ValidGlobalOffset#requires| |g#0@@12| |offset#0@@8|) true) (=> true (|_module.__default.ValidGlobalOffset#requires| |g#0@@12| |offset#0@@8|)))) :qid |ARMdefsd.526:29| :skolemid |2651| :pattern ( (|_module.__default.ValidGlobalOffset#requires| |g#0@@12| |offset#0@@8|)) )))
(assert  (=> true (forall ((|g#0@@13| T@U) (|offset#0@@9| Int) ) (!  (=> (and (= (type |g#0@@13|) (SeqType BoxType)) (or (|_module.__default.ValidGlobalOffset#canCall| |g#0@@13| |offset#0@@9|) ($Is |g#0@@13| (TSeq TChar)))) (and (and (and (|_module.__default.ValidGlobal#canCall| |g#0@@13|) (=> (_module.__default.ValidGlobal |g#0@@13|) (|_module.__default.WordAligned#canCall| |offset#0@@9|))) (=> (and (|_module.__default.WordAligned#canCall| |offset#0@@9|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |offset#0@@9|)) (=> (INTERNAL_le_boogie 0 |offset#0@@9|) (|_module.__default.SizeOfGlobal#canCall| |g#0@@13|)))) (and (=> (_module.__default.ValidGlobalOffset |g#0@@13| |offset#0@@9|) (and (and (_module.__default.ValidGlobal |g#0@@13|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |offset#0@@9|)) (and (INTERNAL_le_boogie 0 |offset#0@@9|) (INTERNAL_lt_boogie |offset#0@@9| (_module.__default.SizeOfGlobal |g#0@@13|))))) (=> (and (and (_module.__default.ValidGlobal |g#0@@13|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |offset#0@@9|)) (and (INTERNAL_le_boogie 0 |offset#0@@9|) (INTERNAL_lt_boogie |offset#0@@9| (_module.__default.SizeOfGlobal |g#0@@13|)))) (_module.__default.ValidGlobalOffset |g#0@@13| |offset#0@@9|))))) :qid |ARMdefsd.526:29| :skolemid |2652| :pattern ( (_module.__default.ValidGlobalOffset |g#0@@13| |offset#0@@9|)) ))))
(assert  (=> true (forall ((|g#0@@14| T@U) (|offset#0@@10| Int) ) (!  (=> (and (= (type |g#0@@14|) (SeqType BoxType)) (or (|_module.__default.ValidGlobalOffset#canCall| (Lit |g#0@@14|) (LitInt |offset#0@@10|)) ($Is |g#0@@14| (TSeq TChar)))) (and (and (and (|_module.__default.ValidGlobal#canCall| (Lit |g#0@@14|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidGlobal (Lit |g#0@@14|))))) (|_module.__default.WordAligned#canCall| (LitInt |offset#0@@10|)))) (=> (and (|_module.__default.WordAligned#canCall| (LitInt |offset#0@@10|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |offset#0@@10|))) (=> (INTERNAL_le_boogie 0 |offset#0@@10|) (|_module.__default.SizeOfGlobal#canCall| (Lit |g#0@@14|))))) (and (=> (_module.__default.ValidGlobalOffset (Lit |g#0@@14|) (LitInt |offset#0@@10|)) (and (and (_module.__default.ValidGlobal (Lit |g#0@@14|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |offset#0@@10|))) (and (INTERNAL_le_boogie 0 |offset#0@@10|) (INTERNAL_lt_boogie |offset#0@@10| (_module.__default.SizeOfGlobal (Lit |g#0@@14|)))))) (=> (and (and (_module.__default.ValidGlobal (Lit |g#0@@14|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |offset#0@@10|))) (and (INTERNAL_le_boogie 0 |offset#0@@10|) (INTERNAL_lt_boogie |offset#0@@10| (_module.__default.SizeOfGlobal (Lit |g#0@@14|))))) (_module.__default.ValidGlobalOffset (Lit |g#0@@14|) (LitInt |offset#0@@10|)))))) :qid |ARMdefsd.526:29| :weight 3 :skolemid |2653| :pattern ( (_module.__default.ValidGlobalOffset (Lit |g#0@@14|) (LitInt |offset#0@@10|))) ))))
(assert  (=> true (forall ((|g#0@@15| T@U) ) (!  (=> (and (= (type |g#0@@15|) (SeqType BoxType)) (or (|_module.__default.AddressOfGlobal#canCall| |g#0@@15|) (and ($Is |g#0@@15| (TSeq TChar)) (_module.__default.ValidGlobal |g#0@@15|)))) (and (INTERNAL_le_boogie (INTERNAL_add_boogie (_module.__default.AddressOfGlobal |g#0@@15|) (_module.__default.SizeOfGlobal |g#0@@15|)) (LitInt 4294967296)) (and (_module.__default.isUInt32 (_module.__default.AddressOfGlobal |g#0@@15|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (_module.__default.AddressOfGlobal |g#0@@15|))))) :qid |ARMdefsd.533:35| :skolemid |2654| :pattern ( (_module.__default.AddressOfGlobal |g#0@@15|)) ))))
(assert (forall ((|g#0@@16| T@U) ) (!  (=> (and (= (type |g#0@@16|) (SeqType BoxType)) ($Is |g#0@@16| (TSeq TChar))) (and (=> (|_module.__default.AddressOfGlobal#requires| |g#0@@16|) (_module.__default.ValidGlobal |g#0@@16|)) (=> (_module.__default.ValidGlobal |g#0@@16|) (|_module.__default.AddressOfGlobal#requires| |g#0@@16|)))) :qid |ARMdefsd.533:35| :skolemid |2655| :pattern ( (|_module.__default.AddressOfGlobal#requires| |g#0@@16|)) )))
(assert  (=> true (forall ((|g#0@@17| T@U) ) (!  (=> (and (= (type |g#0@@17|) (SeqType BoxType)) (or (|_module.__default.SizeOfGlobal#canCall| |g#0@@17|) (and ($Is |g#0@@17| (TSeq TChar)) (_module.__default.ValidGlobal |g#0@@17|)))) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned (_module.__default.SizeOfGlobal |g#0@@17|)) (_module.__default.isUInt32 (_module.__default.SizeOfGlobal |g#0@@17|)))) :qid |ARMdefsd.537:23| :skolemid |2656| :pattern ( (_module.__default.SizeOfGlobal |g#0@@17|)) ))))
(assert (forall ((|g#0@@18| T@U) ) (!  (=> (and (= (type |g#0@@18|) (SeqType BoxType)) ($Is |g#0@@18| (TSeq TChar))) (and (=> (|_module.__default.SizeOfGlobal#requires| |g#0@@18|) (_module.__default.ValidGlobal |g#0@@18|)) (=> (_module.__default.ValidGlobal |g#0@@18|) (|_module.__default.SizeOfGlobal#requires| |g#0@@18|)))) :qid |ARMdefsd.537:23| :skolemid |2657| :pattern ( (|_module.__default.SizeOfGlobal#requires| |g#0@@18|)) )))
(assert  (=> true (forall ((|g#0@@19| T@U) ) (!  (=> (and (= (type |g#0@@19|) (SeqType BoxType)) (or (|_module.__default.SizeOfGlobal#canCall| |g#0@@19|) (and ($Is |g#0@@19| (TSeq TChar)) (_module.__default.ValidGlobal |g#0@@19|)))) (and |_module.__default.TheGlobalDecls#canCall| (= (_module.__default.SizeOfGlobal |g#0@@19|) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box |g#0@@19|))))))) :qid |ARMdefsd.537:23| :skolemid |2658| :pattern ( (_module.__default.SizeOfGlobal |g#0@@19|)) ))))
(assert  (=> true (forall ((|g#0@@20| T@U) ) (!  (=> (and (= (type |g#0@@20|) (SeqType BoxType)) (or (|_module.__default.SizeOfGlobal#canCall| (Lit |g#0@@20|)) (and ($Is |g#0@@20| (TSeq TChar)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidGlobal (Lit |g#0@@20|)))))))) (and |_module.__default.TheGlobalDecls#canCall| (= (_module.__default.SizeOfGlobal (Lit |g#0@@20|)) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| _module.__default.TheGlobalDecls) ($Box (Lit |g#0@@20|)))))))) :qid |ARMdefsd.537:23| :weight 3 :skolemid |2659| :pattern ( (_module.__default.SizeOfGlobal (Lit |g#0@@20|))) ))))
(assert  (=> true (=> true (and (_module.__default.ValidGlobalDecls _module.__default.TheGlobalDecls) ($Is _module.__default.TheGlobalDecls (TMap (TSeq TChar) Tclass._module.addr))))))
(assert  (=> |_module.__default.TheGlobalDecls#requires| true))
(assert  (=> true |_module.__default.TheGlobalDecls#requires|))
(assert (forall ((arg0@@305 T@U) (arg1@@155 T@U) ) (! (= (type (_module.__default.mode__of__exception arg0@@305 arg1@@155)) DatatypeTypeType) :qid |funType:_module.__default.mode__of__exception| :pattern ( (_module.__default.mode__of__exception arg0@@305 arg1@@155)) )))
(assert  (=> true (forall ((|conf#0| T@U) (|e#0@@11| T@U) ) (!  (=> (and (and (= (type |conf#0|) DatatypeTypeType) (= (type |e#0@@11|) DatatypeTypeType)) (or (|_module.__default.mode__of__exception#canCall| |conf#0| |e#0@@11|) (and ($Is |conf#0| Tclass._module.config) ($Is |e#0@@11| Tclass._module.exception)))) ($Is (_module.__default.mode__of__exception |conf#0| |e#0@@11|) Tclass._module.mode)) :qid |ARMdefsd.551:28| :skolemid |2660| :pattern ( (_module.__default.mode__of__exception |conf#0| |e#0@@11|)) ))))
(assert (forall (($Heap@@115 T@U) (|conf#0@@0| T@U) (|e#0@@12| T@U) ) (!  (=> (and (and (and (= (type $Heap@@115) (MapType1Type refType)) (= (type |conf#0@@0|) DatatypeTypeType)) (= (type |e#0@@12|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@115) ($Is |conf#0@@0| Tclass._module.config)) ($Is |e#0@@12| Tclass._module.exception))) (and (=> (|_module.__default.mode__of__exception#requires| |conf#0@@0| |e#0@@12|) true) (=> true (|_module.__default.mode__of__exception#requires| |conf#0@@0| |e#0@@12|)))) :qid |ARMdefsd.551:10| :skolemid |2661| :pattern ( (|_module.__default.mode__of__exception#requires| |conf#0@@0| |e#0@@12|) ($IsGoodHeap $Heap@@115)) )))
(assert  (=> true (forall (($Heap@@116 T@U) (|conf#0@@1| T@U) (|e#0@@13| T@U) ) (!  (=> (and (and (and (= (type $Heap@@116) (MapType1Type refType)) (= (type |conf#0@@1|) DatatypeTypeType)) (= (type |e#0@@13|) DatatypeTypeType)) (or (|_module.__default.mode__of__exception#canCall| |conf#0@@1| |e#0@@13|) (and (and ($IsGoodHeap $Heap@@116) ($Is |conf#0@@1| Tclass._module.config)) ($Is |e#0@@13| Tclass._module.exception)))) (and (=> (not (_module.exception.ExAbt_q |e#0@@13|)) (=> (not (_module.exception.ExUnd_q |e#0@@13|)) (and (=> (_module.exception.ExIRQ_q |e#0@@13|) (and (_module.config.Config_q |conf#0@@1|) (_module.SCR.SCRT_q (_module.config.scr |conf#0@@1|)))) (=> (not (_module.exception.ExIRQ_q |e#0@@13|)) (=> (_module.exception.ExFIQ_q |e#0@@13|) (and (_module.config.Config_q |conf#0@@1|) (_module.SCR.SCRT_q (_module.config.scr |conf#0@@1|)))))))) (= (_module.__default.mode__of__exception |conf#0@@1| |e#0@@13|) (ite (_module.exception.ExAbt_q |e#0@@13|) |#_module.mode.Abort| (ite (_module.exception.ExUnd_q |e#0@@13|) |#_module.mode.Undefined| (ite (_module.exception.ExIRQ_q |e#0@@13|) (ite (_module.SCR.irq (_module.config.scr |conf#0@@1|)) |#_module.mode.Monitor| |#_module.mode.IRQ|) (ite (_module.exception.ExFIQ_q |e#0@@13|) (ite (_module.SCR.fiq (_module.config.scr |conf#0@@1|)) |#_module.mode.Monitor| |#_module.mode.FIQ|) |#_module.mode.Supervisor|))))))) :qid |ARMdefsd.551:10| :skolemid |2662| :pattern ( (_module.__default.mode__of__exception |conf#0@@1| |e#0@@13|) ($IsGoodHeap $Heap@@116)) ))))
(assert  (=> true (forall (($Heap@@117 T@U) (|conf#0@@2| T@U) (|e#0@@14| T@U) ) (!  (=> (and (and (and (= (type $Heap@@117) (MapType1Type refType)) (= (type |conf#0@@2|) DatatypeTypeType)) (= (type |e#0@@14|) DatatypeTypeType)) (or (|_module.__default.mode__of__exception#canCall| (Lit |conf#0@@2|) (Lit |e#0@@14|)) (and (and ($IsGoodHeap $Heap@@117) ($Is |conf#0@@2| Tclass._module.config)) ($Is |e#0@@14| Tclass._module.exception)))) (and (=> (not (U_2_bool (Lit (bool_2_U (_module.exception.ExAbt_q (Lit |e#0@@14|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.exception.ExUnd_q (Lit |e#0@@14|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.exception.ExIRQ_q (Lit |e#0@@14|))))) (and (_module.config.Config_q (Lit |conf#0@@2|)) (_module.SCR.SCRT_q (Lit (_module.config.scr (Lit |conf#0@@2|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.exception.ExIRQ_q (Lit |e#0@@14|)))))) (=> (U_2_bool (Lit (bool_2_U (_module.exception.ExFIQ_q (Lit |e#0@@14|))))) (and (_module.config.Config_q (Lit |conf#0@@2|)) (_module.SCR.SCRT_q (Lit (_module.config.scr (Lit |conf#0@@2|)))))))))) (= (_module.__default.mode__of__exception (Lit |conf#0@@2|) (Lit |e#0@@14|)) (ite (_module.exception.ExAbt_q (Lit |e#0@@14|)) |#_module.mode.Abort| (ite (_module.exception.ExUnd_q (Lit |e#0@@14|)) |#_module.mode.Undefined| (ite (_module.exception.ExIRQ_q (Lit |e#0@@14|)) (ite (_module.SCR.irq (Lit (_module.config.scr (Lit |conf#0@@2|)))) |#_module.mode.Monitor| |#_module.mode.IRQ|) (ite (_module.exception.ExFIQ_q (Lit |e#0@@14|)) (ite (_module.SCR.fiq (Lit (_module.config.scr (Lit |conf#0@@2|)))) |#_module.mode.Monitor| |#_module.mode.FIQ|) |#_module.mode.Supervisor|))))))) :qid |ARMdefsd.551:10| :weight 3 :skolemid |2663| :pattern ( (_module.__default.mode__of__exception (Lit |conf#0@@2|) (Lit |e#0@@14|)) ($IsGoodHeap $Heap@@117)) ))))
(assert (forall (($ly@@175 T@U) (|oldpsr#0| Int) (|newmode#0| Int) (|maskfiq#0| Bool) (|maskirq#0| Bool) ) (!  (=> (= (type $ly@@175) LayerTypeType) (= (_module.__default.update__psr ($LS $ly@@175) |oldpsr#0| |newmode#0| |maskfiq#0| |maskirq#0|) (_module.__default.update__psr $ly@@175 |oldpsr#0| |newmode#0| |maskfiq#0| |maskirq#0|))) :qid |ARMdefsd.561:20| :skolemid |2664| :pattern ( (_module.__default.update__psr ($LS $ly@@175) |oldpsr#0| |newmode#0| |maskfiq#0| |maskirq#0|)) )))
(assert (forall (($ly@@176 T@U) (|oldpsr#0@@0| Int) (|newmode#0@@0| Int) (|maskfiq#0@@0| Bool) (|maskirq#0@@0| Bool) ) (!  (=> (= (type $ly@@176) LayerTypeType) (= (_module.__default.update__psr $ly@@176 |oldpsr#0@@0| |newmode#0@@0| |maskfiq#0@@0| |maskirq#0@@0|) (_module.__default.update__psr $LZ |oldpsr#0@@0| |newmode#0@@0| |maskfiq#0@@0| |maskirq#0@@0|))) :qid |ARMdefsd.561:20| :skolemid |2665| :pattern ( (_module.__default.update__psr (AsFuelBottom $ly@@176) |oldpsr#0@@0| |newmode#0@@0| |maskfiq#0@@0| |maskirq#0@@0|)) )))
(assert  (=> true (forall (($ly@@177 T@U) (|oldpsr#0@@1| Int) (|newmode#0@@1| Int) (|maskfiq#0@@1| Bool) (|maskirq#0@@1| Bool) ) (!  (=> (and (= (type $ly@@177) LayerTypeType) (or (|_module.__default.update__psr#canCall| |oldpsr#0@@1| |newmode#0@@1| |maskfiq#0@@1| |maskirq#0@@1|) (and (and (_module.__default.isUInt32 |oldpsr#0@@1|) (_module.__default.isUInt32 |newmode#0@@1|)) (and (_module.__default.ValidPsrWord |oldpsr#0@@1|) (_module.__default.ValidModeEncoding |newmode#0@@1|))))) (_module.__default.isUInt32 (_module.__default.update__psr $ly@@177 |oldpsr#0@@1| |newmode#0@@1| |maskfiq#0@@1| |maskirq#0@@1|))) :qid |ARMdefsd.561:20| :skolemid |2666| :pattern ( (_module.__default.update__psr $ly@@177 |oldpsr#0@@1| |newmode#0@@1| |maskfiq#0@@1| |maskirq#0@@1|)) ))))
(assert (forall (($ly@@178 T@U) (|oldpsr#0@@2| Int) (|newmode#0@@2| Int) (|maskfiq#0@@2| Bool) (|maskirq#0@@2| Bool) ) (!  (=> (= (type $ly@@178) LayerTypeType) (=> (and (_module.__default.isUInt32 |oldpsr#0@@2|) (_module.__default.isUInt32 |newmode#0@@2|)) (and (=> (|_module.__default.update__psr#requires| $ly@@178 |oldpsr#0@@2| |newmode#0@@2| |maskfiq#0@@2| |maskirq#0@@2|) (and (_module.__default.ValidPsrWord |oldpsr#0@@2|) (_module.__default.ValidModeEncoding |newmode#0@@2|))) (=> (and (_module.__default.ValidPsrWord |oldpsr#0@@2|) (_module.__default.ValidModeEncoding |newmode#0@@2|)) (|_module.__default.update__psr#requires| $ly@@178 |oldpsr#0@@2| |newmode#0@@2| |maskfiq#0@@2| |maskirq#0@@2|))))) :qid |ARMdefsd.561:20| :skolemid |2667| :pattern ( (|_module.__default.update__psr#requires| $ly@@178 |oldpsr#0@@2| |newmode#0@@2| |maskfiq#0@@2| |maskirq#0@@2|)) )))
(assert  (and (= (type StartFuel__module._default.BitOr) LayerTypeType) (= (type StartFuel__module._default.BitsAsWord) LayerTypeType)))
(assert  (=> true (forall (($ly@@179 T@U) (|oldpsr#0@@3| Int) (|newmode#0@@3| Int) (|maskfiq#0@@3| Bool) (|maskirq#0@@3| Bool) ) (!  (=> (and (= (type $ly@@179) LayerTypeType) (or (|_module.__default.update__psr#canCall| |oldpsr#0@@3| |newmode#0@@3| |maskfiq#0@@3| |maskirq#0@@3|) (and (and (_module.__default.isUInt32 |oldpsr#0@@3|) (_module.__default.isUInt32 |newmode#0@@3|)) (and (_module.__default.ValidPsrWord |oldpsr#0@@3|) (_module.__default.ValidModeEncoding |newmode#0@@3|))))) (and (and (and (|_module.__default.BitOr#canCall| (ite |maskfiq#0@@3| #x00000040 #x00000000) (ite |maskirq#0@@3| #x00000080 #x00000000)) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitOr StartFuel__module._default.BitOr (ite |maskfiq#0@@3| #x00000040 #x00000000) (ite |maskirq#0@@3| #x00000080 #x00000000)))) (and (and (|_module.__default.BitwiseAnd#canCall| |oldpsr#0@@3| (LitInt 4294967264)) (|_module.__default.BitwiseOr#canCall| |newmode#0@@3| (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitOr StartFuel__module._default.BitOr (ite |maskfiq#0@@3| #x00000040 #x00000000) (ite |maskirq#0@@3| #x00000080 #x00000000))))) (|_module.__default.BitwiseOr#canCall| (_module.__default.BitwiseAnd |oldpsr#0@@3| (LitInt 4294967264)) (_module.__default.BitwiseOr |newmode#0@@3| (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitOr StartFuel__module._default.BitOr (ite |maskfiq#0@@3| #x00000040 #x00000000) (ite |maskirq#0@@3| #x00000080 #x00000000))))))) (= (_module.__default.update__psr ($LS $ly@@179) |oldpsr#0@@3| |newmode#0@@3| |maskfiq#0@@3| |maskirq#0@@3|) (_module.__default.BitwiseOr (_module.__default.BitwiseAnd |oldpsr#0@@3| (LitInt 4294967264)) (_module.__default.BitwiseOr |newmode#0@@3| (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitOr StartFuel__module._default.BitOr (ite |maskfiq#0@@3| #x00000040 #x00000000) (ite |maskirq#0@@3| #x00000080 #x00000000)))))))) :qid |ARMdefsd.561:20| :skolemid |2668| :pattern ( (_module.__default.update__psr ($LS $ly@@179) |oldpsr#0@@3| |newmode#0@@3| |maskfiq#0@@3| |maskirq#0@@3|)) ))))
(assert  (=> true (forall (($ly@@180 T@U) (|oldpsr#0@@4| Int) (|newmode#0@@4| Int) (|maskfiq#0@@4| T@U) (|maskirq#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@180) LayerTypeType) (= (type |maskfiq#0@@4|) boolType)) (= (type |maskirq#0@@4|) boolType)) (or (|_module.__default.update__psr#canCall| (LitInt |oldpsr#0@@4|) (LitInt |newmode#0@@4|) (U_2_bool (Lit |maskfiq#0@@4|)) (U_2_bool (Lit |maskirq#0@@4|))) (and (and (_module.__default.isUInt32 |oldpsr#0@@4|) (_module.__default.isUInt32 |newmode#0@@4|)) (and (U_2_bool (Lit (bool_2_U (_module.__default.ValidPsrWord (LitInt |oldpsr#0@@4|))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidModeEncoding (LitInt |newmode#0@@4|))))))))) (and (and (and (|_module.__default.BitOr#canCall| (ite (U_2_bool |maskfiq#0@@4|) #x00000040 #x00000000) (ite (U_2_bool |maskirq#0@@4|) #x00000080 #x00000000)) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitOr StartFuel__module._default.BitOr (ite (U_2_bool |maskfiq#0@@4|) #x00000040 #x00000000) (ite (U_2_bool |maskirq#0@@4|) #x00000080 #x00000000)))) (and (and (|_module.__default.BitwiseAnd#canCall| (LitInt |oldpsr#0@@4|) (LitInt 4294967264)) (|_module.__default.BitwiseOr#canCall| (LitInt |newmode#0@@4|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitOr StartFuel__module._default.BitOr (ite (U_2_bool |maskfiq#0@@4|) #x00000040 #x00000000) (ite (U_2_bool |maskirq#0@@4|) #x00000080 #x00000000))))) (|_module.__default.BitwiseOr#canCall| (LitInt (_module.__default.BitwiseAnd (LitInt |oldpsr#0@@4|) (LitInt 4294967264))) (_module.__default.BitwiseOr (LitInt |newmode#0@@4|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitOr StartFuel__module._default.BitOr (ite (U_2_bool |maskfiq#0@@4|) #x00000040 #x00000000) (ite (U_2_bool |maskirq#0@@4|) #x00000080 #x00000000))))))) (= (_module.__default.update__psr ($LS $ly@@180) (LitInt |oldpsr#0@@4|) (LitInt |newmode#0@@4|) (U_2_bool (Lit |maskfiq#0@@4|)) (U_2_bool (Lit |maskirq#0@@4|))) (_module.__default.BitwiseOr (LitInt (_module.__default.BitwiseAnd (LitInt |oldpsr#0@@4|) (LitInt 4294967264))) (_module.__default.BitwiseOr (LitInt |newmode#0@@4|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitOr StartFuel__module._default.BitOr (ite (U_2_bool |maskfiq#0@@4|) #x00000040 #x00000000) (ite (U_2_bool |maskirq#0@@4|) #x00000080 #x00000000)))))))) :qid |ARMdefsd.561:20| :weight 3 :skolemid |2669| :pattern ( (_module.__default.update__psr ($LS $ly@@180) (LitInt |oldpsr#0@@4|) (LitInt |newmode#0@@4|) (U_2_bool (Lit |maskfiq#0@@4|)) (U_2_bool (Lit |maskirq#0@@4|)))) ))))
(assert  (=> true (forall ((|s#0@@89| T@U) (|e#0@@15| T@U) ) (!  (=> (and (and (= (type |s#0@@89|) DatatypeTypeType) (= (type |e#0@@15|) DatatypeTypeType)) (or (|_module.__default.psr__of__exception#canCall| |s#0@@89| |e#0@@15|) (and (and ($Is |s#0@@89| Tclass._module.state) ($Is |e#0@@15| Tclass._module.exception)) (_module.__default.ValidState |s#0@@89|)))) (_module.__default.isUInt32 (_module.__default.psr__of__exception |s#0@@89| |e#0@@15|))) :qid |ARMdefsd.571:27| :skolemid |2670| :pattern ( (_module.__default.psr__of__exception |s#0@@89| |e#0@@15|)) ))))
(assert (forall (($Heap@@118 T@U) (|s#0@@90| T@U) (|e#0@@16| T@U) ) (!  (=> (and (and (and (= (type $Heap@@118) (MapType1Type refType)) (= (type |s#0@@90|) DatatypeTypeType)) (= (type |e#0@@16|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@118) ($Is |s#0@@90| Tclass._module.state)) ($Is |e#0@@16| Tclass._module.exception))) (and (=> (|_module.__default.psr__of__exception#requires| |s#0@@90| |e#0@@16|) (_module.__default.ValidState |s#0@@90|)) (=> (_module.__default.ValidState |s#0@@90|) (|_module.__default.psr__of__exception#requires| |s#0@@90| |e#0@@16|)))) :qid |ARMdefsd.571:10| :skolemid |2671| :pattern ( (|_module.__default.psr__of__exception#requires| |s#0@@90| |e#0@@16|) ($IsGoodHeap $Heap@@118)) )))
(assert  (and (= (type MoreFuel__module._default.ValidSRegState4) LayerTypeType) (= (type StartFuel__module._default.update_psr) LayerTypeType)))
(assert  (=> true (forall (($Heap@@119 T@U) (|s#0@@91| T@U) (|e#0@@17| T@U) ) (!  (=> (and (and (and (= (type $Heap@@119) (MapType1Type refType)) (= (type |s#0@@91|) DatatypeTypeType)) (= (type |e#0@@17|) DatatypeTypeType)) (or (|_module.__default.psr__of__exception#canCall| |s#0@@91| |e#0@@17|) (and (and (and ($IsGoodHeap $Heap@@119) ($Is |s#0@@91| Tclass._module.state)) ($Is |e#0@@17| Tclass._module.exception)) (_module.__default.ValidState |s#0@@91|)))) (and (and (and (_module.state.State_q |s#0@@91|) (|_module.__default.mode__of__exception#canCall| (_module.state.conf |s#0@@91|) |e#0@@17|)) (and (_module.state.State_q |s#0@@91|) (and (and (_module.state.State_q |s#0@@91|) (|_module.__default.encode__mode#canCall| (_module.__default.mode__of__exception (_module.state.conf |s#0@@91|) |e#0@@17|))) (|_module.__default.update__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@91|)) ($Box (Lit |#_module.SReg.cpsr|))))) (_module.__default.encode__mode (_module.__default.mode__of__exception (_module.state.conf |s#0@@91|) |e#0@@17|))  (or (= |e#0@@17| (Lit |#_module.exception.ExFIQ|)) (= (_module.__default.mode__of__exception (_module.state.conf |s#0@@91|) |e#0@@17|) (Lit |#_module.mode.Monitor|))) (U_2_bool (Lit (bool_2_U true))))))) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState4)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState4)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState4) MoreFuel__module._default.ValidSRegState4)) (= (_module.__default.psr__of__exception |s#0@@91| |e#0@@17|) (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@91|)) ($Box (Lit |#_module.SReg.cpsr|))))) (_module.__default.encode__mode (_module.__default.mode__of__exception (_module.state.conf |s#0@@91|) |e#0@@17|))  (or (= |e#0@@17| (Lit |#_module.exception.ExFIQ|)) (= (_module.__default.mode__of__exception (_module.state.conf |s#0@@91|) |e#0@@17|) (Lit |#_module.mode.Monitor|))) (U_2_bool (Lit (bool_2_U true)))))))) :qid |ARMdefsd.571:10| :skolemid |2672| :pattern ( (_module.__default.psr__of__exception |s#0@@91| |e#0@@17|) ($IsGoodHeap $Heap@@119)) ))))
(assert (= (type MoreFuel__module._default.ValidSRegState5) LayerTypeType))
(assert  (=> true (forall (($Heap@@120 T@U) (|s#0@@92| T@U) (|e#0@@18| T@U) ) (!  (=> (and (and (and (= (type $Heap@@120) (MapType1Type refType)) (= (type |s#0@@92|) DatatypeTypeType)) (= (type |e#0@@18|) DatatypeTypeType)) (or (|_module.__default.psr__of__exception#canCall| (Lit |s#0@@92|) (Lit |e#0@@18|)) (and (and (and ($IsGoodHeap $Heap@@120) ($Is |s#0@@92| Tclass._module.state)) ($Is |e#0@@18| Tclass._module.exception)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@92|)))))))) (and (and (and (_module.state.State_q (Lit |s#0@@92|)) (|_module.__default.mode__of__exception#canCall| (Lit (_module.state.conf (Lit |s#0@@92|))) (Lit |e#0@@18|))) (and (_module.state.State_q (Lit |s#0@@92|)) (and (and (_module.state.State_q (Lit |s#0@@92|)) (|_module.__default.encode__mode#canCall| (Lit (_module.__default.mode__of__exception (Lit (_module.state.conf (Lit |s#0@@92|))) (Lit |e#0@@18|))))) (|_module.__default.update__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@92|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt (_module.__default.encode__mode (Lit (_module.__default.mode__of__exception (Lit (_module.state.conf (Lit |s#0@@92|))) (Lit |e#0@@18|)))))  (or (= (Lit |e#0@@18|) (Lit |#_module.exception.ExFIQ|)) (= (Lit (_module.__default.mode__of__exception (Lit (_module.state.conf (Lit |s#0@@92|))) (Lit |e#0@@18|))) (Lit |#_module.mode.Monitor|))) (U_2_bool (Lit (bool_2_U true))))))) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState5)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState5)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState5) MoreFuel__module._default.ValidSRegState5)) (= (_module.__default.psr__of__exception (Lit |s#0@@92|) (Lit |e#0@@18|)) (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@92|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt (_module.__default.encode__mode (Lit (_module.__default.mode__of__exception (Lit (_module.state.conf (Lit |s#0@@92|))) (Lit |e#0@@18|)))))  (or (= (Lit |e#0@@18|) (Lit |#_module.exception.ExFIQ|)) (= (Lit (_module.__default.mode__of__exception (Lit (_module.state.conf (Lit |s#0@@92|))) (Lit |e#0@@18|))) (Lit |#_module.mode.Monitor|))) (U_2_bool (Lit (bool_2_U true)))))))) :qid |ARMdefsd.571:10| :weight 3 :skolemid |2673| :pattern ( (_module.__default.psr__of__exception (Lit |s#0@@92|) (Lit |e#0@@18|)) ($IsGoodHeap $Heap@@120)) ))))
(assert (forall ((arg0@@306 T@U) (arg1@@156 T@U) (arg2@@107 Int) ) (! (= (type (_module.__default.exceptionTakenFn arg0@@306 arg1@@156 arg2@@107)) DatatypeTypeType) :qid |funType:_module.__default.exceptionTakenFn| :pattern ( (_module.__default.exceptionTakenFn arg0@@306 arg1@@156 arg2@@107)) )))
(assert  (=> true (forall ((|s#0@@93| T@U) (|e#0@@19| T@U) (|pc#0| Int) ) (!  (=> (and (and (= (type |s#0@@93|) DatatypeTypeType) (= (type |e#0@@19|) DatatypeTypeType)) (or (|_module.__default.exceptionTakenFn#canCall| |s#0@@93| |e#0@@19| |pc#0|) (and (and (and ($Is |s#0@@93| Tclass._module.state) ($Is |e#0@@19| Tclass._module.exception)) (_module.__default.isUInt32 |pc#0|)) (and (_module.__default.ValidState |s#0@@93|) (_module.__default.ValidPsrWord (_module.__default.psr__of__exception |s#0@@93| |e#0@@19|)))))) (and (_module.__default.ValidState (_module.__default.exceptionTakenFn |s#0@@93| |e#0@@19| |pc#0|)) ($Is (_module.__default.exceptionTakenFn |s#0@@93| |e#0@@19| |pc#0|) Tclass._module.state))) :qid |ARMdefsd.586:27| :skolemid |2674| :pattern ( (_module.__default.exceptionTakenFn |s#0@@93| |e#0@@19| |pc#0|)) ))))
(assert (forall (($Heap@@121 T@U) (|s#0@@94| T@U) (|e#0@@20| T@U) (|pc#0@@0| Int) ) (!  (=> (and (and (= (type $Heap@@121) (MapType1Type refType)) (= (type |s#0@@94|) DatatypeTypeType)) (= (type |e#0@@20|) DatatypeTypeType)) (=> (and (and (and ($IsGoodHeap $Heap@@121) ($Is |s#0@@94| Tclass._module.state)) ($Is |e#0@@20| Tclass._module.exception)) (_module.__default.isUInt32 |pc#0@@0|)) (and (=> (|_module.__default.exceptionTakenFn#requires| |s#0@@94| |e#0@@20| |pc#0@@0|) (and (_module.__default.ValidState |s#0@@94|) (_module.__default.ValidPsrWord (_module.__default.psr__of__exception |s#0@@94| |e#0@@20|)))) (=> (and (_module.__default.ValidState |s#0@@94|) (_module.__default.ValidPsrWord (_module.__default.psr__of__exception |s#0@@94| |e#0@@20|))) (|_module.__default.exceptionTakenFn#requires| |s#0@@94| |e#0@@20| |pc#0@@0|))))) :qid |ARMdefsd.586:10| :skolemid |2675| :pattern ( (|_module.__default.exceptionTakenFn#requires| |s#0@@94| |e#0@@20| |pc#0@@0|) ($IsGoodHeap $Heap@@121)) )))
(assert (forall ((arg0@@307 T@U) ) (! (= (type (_module.__default.takestep arg0@@307)) DatatypeTypeType) :qid |funType:_module.__default.takestep| :pattern ( (_module.__default.takestep arg0@@307)) )))
(assert  (=> true (forall (($Heap@@122 T@U) (|s#0@@95| T@U) (|e#0@@21| T@U) (|pc#0@@1| Int) ) (!  (=> (and (and (and (= (type $Heap@@122) (MapType1Type refType)) (= (type |s#0@@95|) DatatypeTypeType)) (= (type |e#0@@21|) DatatypeTypeType)) (or (|_module.__default.exceptionTakenFn#canCall| |s#0@@95| |e#0@@21| |pc#0@@1|) (and (and (and (and ($IsGoodHeap $Heap@@122) ($Is |s#0@@95| Tclass._module.state)) ($Is |e#0@@21| Tclass._module.exception)) (_module.__default.isUInt32 |pc#0@@1|)) (and (_module.__default.ValidState |s#0@@95|) (_module.__default.ValidPsrWord (_module.__default.psr__of__exception |s#0@@95| |e#0@@21|)))))) (and (and (|_module.__default.mode__of__state#canCall| |s#0@@95|) (and (and (_module.state.State_q |s#0@@95|) (|_module.__default.mode__of__exception#canCall| (_module.state.conf |s#0@@95|) |e#0@@21|)) (and (|_module.__default.psr__of__exception#canCall| |s#0@@95| |e#0@@21|) (and (_module.state.State_q |s#0@@95|) (and (and (_module.state.State_q |s#0@@95|) (_module.state.State_q |s#0@@95|)) (and (|_module.__default.decode__psr#canCall| (_module.__default.psr__of__exception |s#0@@95| |e#0@@21|)) (and (and (_module.state.State_q |s#0@@95|) (and (and (and (and (_module.config.Config_q (_module.state.conf |s#0@@95|)) (_module.config.Config_q (_module.state.conf |s#0@@95|))) (_module.config.Config_q (_module.state.conf |s#0@@95|))) (_module.state.State_q |s#0@@95|)) (_module.config.Config_q (_module.state.conf |s#0@@95|)))) (and (|_module.__default.takestep#canCall| |s#0@@95|) (and (and (and (_module.state.State_q (_module.__default.takestep |s#0@@95|)) (_module.state.State_q (_module.__default.takestep |s#0@@95|))) (_module.state.State_q (_module.__default.takestep |s#0@@95|))) (_module.state.State_q (_module.__default.takestep |s#0@@95|))))))))))) (= (_module.__default.exceptionTakenFn |s#0@@95| |e#0@@21| |pc#0@@1|) (|#_module.state.State| (|Map#Build| (_module.state.regs |s#0@@95|) ($Box (|#_module.ARMReg.LR| (_module.__default.mode__of__exception (_module.state.conf |s#0@@95|) |e#0@@21|))) ($Box (int_2_U |pc#0@@1|))) (|Map#Build| (|Map#Build| (_module.state.sregs |s#0@@95|) ($Box (Lit |#_module.SReg.cpsr|)) ($Box (int_2_U (_module.__default.psr__of__exception |s#0@@95| |e#0@@21|)))) ($Box (|#_module.SReg.spsr| (_module.__default.mode__of__exception (_module.state.conf |s#0@@95|) |e#0@@21|))) (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@95|)) ($Box (Lit |#_module.SReg.cpsr|)))) (_module.state.m (_module.__default.takestep |s#0@@95|)) (|#_module.config.Config| (_module.__default.decode__psr (_module.__default.psr__of__exception |s#0@@95| |e#0@@21|)) (_module.config.scr (_module.state.conf |s#0@@95|)) (_module.config.ttbr0 (_module.state.conf |s#0@@95|)) (_module.config.tlb__consistent (_module.state.conf |s#0@@95|)) |e#0@@21| (_module.state.steps |s#0@@95|) (_module.config.nondet (_module.state.conf |s#0@@95|))) (_module.state.rng (_module.__default.takestep |s#0@@95|)) (_module.state.ok (_module.__default.takestep |s#0@@95|)) (_module.state.steps (_module.__default.takestep |s#0@@95|)))))) :qid |ARMdefsd.586:10| :skolemid |2676| :pattern ( (_module.__default.exceptionTakenFn |s#0@@95| |e#0@@21| |pc#0@@1|) ($IsGoodHeap $Heap@@122)) ))))
(assert  (=> true (forall (($Heap@@123 T@U) (|s#0@@96| T@U) (|e#0@@22| T@U) (|pc#0@@2| Int) ) (!  (=> (and (and (and (= (type $Heap@@123) (MapType1Type refType)) (= (type |s#0@@96|) DatatypeTypeType)) (= (type |e#0@@22|) DatatypeTypeType)) (or (|_module.__default.exceptionTakenFn#canCall| (Lit |s#0@@96|) (Lit |e#0@@22|) (LitInt |pc#0@@2|)) (and (and (and (and ($IsGoodHeap $Heap@@123) ($Is |s#0@@96| Tclass._module.state)) ($Is |e#0@@22| Tclass._module.exception)) (_module.__default.isUInt32 |pc#0@@2|)) (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidState (Lit |s#0@@96|)) (_module.__default.ValidPsrWord (LitInt (_module.__default.psr__of__exception (Lit |s#0@@96|) (Lit |e#0@@22|))))))))))) (and (and (|_module.__default.mode__of__state#canCall| (Lit |s#0@@96|)) (and (and (_module.state.State_q (Lit |s#0@@96|)) (|_module.__default.mode__of__exception#canCall| (Lit (_module.state.conf (Lit |s#0@@96|))) (Lit |e#0@@22|))) (and (|_module.__default.psr__of__exception#canCall| (Lit |s#0@@96|) (Lit |e#0@@22|)) (and (_module.state.State_q (Lit |s#0@@96|)) (and (and (_module.state.State_q (Lit |s#0@@96|)) (_module.state.State_q (Lit |s#0@@96|))) (and (|_module.__default.decode__psr#canCall| (LitInt (_module.__default.psr__of__exception (Lit |s#0@@96|) (Lit |e#0@@22|)))) (and (and (_module.state.State_q (Lit |s#0@@96|)) (and (and (and (and (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@96|)))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@96|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@96|))))) (_module.state.State_q (Lit |s#0@@96|))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@96|)))))) (and (|_module.__default.takestep#canCall| (Lit |s#0@@96|)) (and (and (and (_module.state.State_q (Lit (_module.__default.takestep (Lit |s#0@@96|)))) (_module.state.State_q (Lit (_module.__default.takestep (Lit |s#0@@96|))))) (_module.state.State_q (Lit (_module.__default.takestep (Lit |s#0@@96|))))) (_module.state.State_q (Lit (_module.__default.takestep (Lit |s#0@@96|))))))))))))) (= (_module.__default.exceptionTakenFn (Lit |s#0@@96|) (Lit |e#0@@22|) (LitInt |pc#0@@2|)) (|#_module.state.State| (|Map#Build| (Lit (_module.state.regs (Lit |s#0@@96|))) ($Box (Lit (|#_module.ARMReg.LR| (Lit (_module.__default.mode__of__exception (Lit (_module.state.conf (Lit |s#0@@96|))) (Lit |e#0@@22|)))))) ($Box (int_2_U (LitInt |pc#0@@2|)))) (|Map#Build| (|Map#Build| (Lit (_module.state.sregs (Lit |s#0@@96|))) ($Box (Lit |#_module.SReg.cpsr|)) ($Box (int_2_U (LitInt (_module.__default.psr__of__exception (Lit |s#0@@96|) (Lit |e#0@@22|)))))) ($Box (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__exception (Lit (_module.state.conf (Lit |s#0@@96|))) (Lit |e#0@@22|)))))) (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@96|)))) ($Box (Lit |#_module.SReg.cpsr|)))) (Lit (_module.state.m (Lit (_module.__default.takestep (Lit |s#0@@96|))))) (Lit (|#_module.config.Config| (Lit (_module.__default.decode__psr (LitInt (_module.__default.psr__of__exception (Lit |s#0@@96|) (Lit |e#0@@22|))))) (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@96|))))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@96|))))) (U_2_bool (Lit (bool_2_U (_module.config.tlb__consistent (Lit (_module.state.conf (Lit |s#0@@96|))))))) (Lit |e#0@@22|) (LitInt (_module.state.steps (Lit |s#0@@96|))) (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@96|))))))) (Lit (_module.state.rng (Lit (_module.__default.takestep (Lit |s#0@@96|))))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit (_module.__default.takestep (Lit |s#0@@96|))))))) (LitInt (_module.state.steps (Lit (_module.__default.takestep (Lit |s#0@@96|))))))))) :qid |ARMdefsd.586:10| :weight 3 :skolemid |2677| :pattern ( (_module.__default.exceptionTakenFn (Lit |s#0@@96|) (Lit |e#0@@22|) (LitInt |pc#0@@2|)) ($IsGoodHeap $Heap@@123)) ))))
(assert  (=> true (forall ((|s#0@@97| T@U) (|e#0@@23| T@U) (|pc#0@@3| Int) (|r#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@97|) DatatypeTypeType) (= (type |e#0@@23|) DatatypeTypeType)) (= (type |r#0@@6|) DatatypeTypeType)) (or (|_module.__default.evalExceptionTaken#canCall| |s#0@@97| |e#0@@23| |pc#0@@3| |r#0@@6|) (and (and (and (and ($Is |s#0@@97| Tclass._module.state) ($Is |e#0@@23| Tclass._module.exception)) (_module.__default.isUInt32 |pc#0@@3|)) ($Is |r#0@@6| Tclass._module.state)) (_module.__default.ValidState |s#0@@97|)))) (_module.__default.evalExceptionTaken |s#0@@97| |e#0@@23| |pc#0@@3| |r#0@@6|)) (_module.__default.ValidState |r#0@@6|)) :qid |ARMdefsd.605:30| :skolemid |2678| :pattern ( (_module.__default.evalExceptionTaken |s#0@@97| |e#0@@23| |pc#0@@3| |r#0@@6|)) ))))
(assert (forall ((|s#0@@98| T@U) (|e#0@@24| T@U) (|pc#0@@4| Int) (|r#0@@7| T@U) ) (!  (=> (and (and (= (type |s#0@@98|) DatatypeTypeType) (= (type |e#0@@24|) DatatypeTypeType)) (= (type |r#0@@7|) DatatypeTypeType)) (=> (and (and (and ($Is |s#0@@98| Tclass._module.state) ($Is |e#0@@24| Tclass._module.exception)) (_module.__default.isUInt32 |pc#0@@4|)) ($Is |r#0@@7| Tclass._module.state)) (and (=> (|_module.__default.evalExceptionTaken#requires| |s#0@@98| |e#0@@24| |pc#0@@4| |r#0@@7|) (_module.__default.ValidState |s#0@@98|)) (=> (_module.__default.ValidState |s#0@@98|) (|_module.__default.evalExceptionTaken#requires| |s#0@@98| |e#0@@24| |pc#0@@4| |r#0@@7|))))) :qid |ARMdefsd.605:30| :skolemid |2679| :pattern ( (|_module.__default.evalExceptionTaken#requires| |s#0@@98| |e#0@@24| |pc#0@@4| |r#0@@7|)) )))
(assert  (=> true (forall ((|s#0@@99| T@U) (|e#0@@25| T@U) (|pc#0@@5| Int) (|r#0@@8| T@U) ) (!  (=> (and (and (and (= (type |s#0@@99|) DatatypeTypeType) (= (type |e#0@@25|) DatatypeTypeType)) (= (type |r#0@@8|) DatatypeTypeType)) (or (|_module.__default.evalExceptionTaken#canCall| |s#0@@99| |e#0@@25| |pc#0@@5| |r#0@@8|) (and (and (and (and ($Is |s#0@@99| Tclass._module.state) ($Is |e#0@@25| Tclass._module.exception)) (_module.__default.isUInt32 |pc#0@@5|)) ($Is |r#0@@8| Tclass._module.state)) (_module.__default.ValidState |s#0@@99|)))) (and (and (and (|_module.__default.psr__of__exception#canCall| |s#0@@99| |e#0@@25|) (|_module.__default.ValidPsrWord#canCall| (_module.__default.psr__of__exception |s#0@@99| |e#0@@25|))) (=> (_module.__default.ValidPsrWord (_module.__default.psr__of__exception |s#0@@99| |e#0@@25|)) (|_module.__default.exceptionTakenFn#canCall| |s#0@@99| |e#0@@25| |pc#0@@5|))) (and (=> (_module.__default.evalExceptionTaken |s#0@@99| |e#0@@25| |pc#0@@5| |r#0@@8|) (and (_module.__default.ValidPsrWord (_module.__default.psr__of__exception |s#0@@99| |e#0@@25|)) (= |r#0@@8| (_module.__default.exceptionTakenFn |s#0@@99| |e#0@@25| |pc#0@@5|)))) (=> (and (_module.__default.ValidPsrWord (_module.__default.psr__of__exception |s#0@@99| |e#0@@25|)) (= |r#0@@8| (_module.__default.exceptionTakenFn |s#0@@99| |e#0@@25| |pc#0@@5|))) (_module.__default.evalExceptionTaken |s#0@@99| |e#0@@25| |pc#0@@5| |r#0@@8|))))) :qid |ARMdefsd.605:30| :skolemid |2680| :pattern ( (_module.__default.evalExceptionTaken |s#0@@99| |e#0@@25| |pc#0@@5| |r#0@@8|)) ))))
(assert  (=> true (forall ((|s#0@@100| T@U) (|e#0@@26| T@U) (|pc#0@@6| Int) (|r#0@@9| T@U) ) (!  (=> (and (and (and (= (type |s#0@@100|) DatatypeTypeType) (= (type |e#0@@26|) DatatypeTypeType)) (= (type |r#0@@9|) DatatypeTypeType)) (or (|_module.__default.evalExceptionTaken#canCall| (Lit |s#0@@100|) (Lit |e#0@@26|) (LitInt |pc#0@@6|) (Lit |r#0@@9|)) (and (and (and (and ($Is |s#0@@100| Tclass._module.state) ($Is |e#0@@26| Tclass._module.exception)) (_module.__default.isUInt32 |pc#0@@6|)) ($Is |r#0@@9| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@100|)))))))) (and (and (and (|_module.__default.psr__of__exception#canCall| (Lit |s#0@@100|) (Lit |e#0@@26|)) (|_module.__default.ValidPsrWord#canCall| (LitInt (_module.__default.psr__of__exception (Lit |s#0@@100|) (Lit |e#0@@26|))))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidPsrWord (LitInt (_module.__default.psr__of__exception (Lit |s#0@@100|) (Lit |e#0@@26|))))))) (|_module.__default.exceptionTakenFn#canCall| (Lit |s#0@@100|) (Lit |e#0@@26|) (LitInt |pc#0@@6|)))) (and (=> (_module.__default.evalExceptionTaken (Lit |s#0@@100|) (Lit |e#0@@26|) (LitInt |pc#0@@6|) (Lit |r#0@@9|)) (and (_module.__default.ValidPsrWord (LitInt (_module.__default.psr__of__exception (Lit |s#0@@100|) (Lit |e#0@@26|)))) (= (Lit |r#0@@9|) (Lit (_module.__default.exceptionTakenFn (Lit |s#0@@100|) (Lit |e#0@@26|) (LitInt |pc#0@@6|)))))) (=> (and (_module.__default.ValidPsrWord (LitInt (_module.__default.psr__of__exception (Lit |s#0@@100|) (Lit |e#0@@26|)))) (= (Lit |r#0@@9|) (Lit (_module.__default.exceptionTakenFn (Lit |s#0@@100|) (Lit |e#0@@26|) (LitInt |pc#0@@6|))))) (_module.__default.evalExceptionTaken (Lit |s#0@@100|) (Lit |e#0@@26|) (LitInt |pc#0@@6|) (Lit |r#0@@9|)))))) :qid |ARMdefsd.605:30| :weight 3 :skolemid |2681| :pattern ( (_module.__default.evalExceptionTaken (Lit |s#0@@100|) (Lit |e#0@@26|) (LitInt |pc#0@@6|) (Lit |r#0@@9|))) ))))
(assert  (=> true (forall ((|s#0@@101| T@U) (|r#0@@10| T@U) ) (!  (=> (and (and (and (= (type |s#0@@101|) DatatypeTypeType) (= (type |r#0@@10|) DatatypeTypeType)) (or (|_module.__default.evalEnterUserspace#canCall| |s#0@@101| |r#0@@10|) (and (and ($Is |s#0@@101| Tclass._module.state) ($Is |r#0@@10| Tclass._module.state)) (_module.__default.ValidState |s#0@@101|)))) (_module.__default.evalEnterUserspace |s#0@@101| |r#0@@10|)) (and (_module.__default.ValidState |r#0@@10|) (= (_module.__default.mode__of__state |r#0@@10|) (Lit |#_module.mode.User|)))) :qid |ARMdefsd.617:30| :skolemid |2682| :pattern ( (_module.__default.evalEnterUserspace |s#0@@101| |r#0@@10|)) ))))
(assert (forall ((|s#0@@102| T@U) (|r#0@@11| T@U) ) (!  (=> (and (and (= (type |s#0@@102|) DatatypeTypeType) (= (type |r#0@@11|) DatatypeTypeType)) (and ($Is |s#0@@102| Tclass._module.state) ($Is |r#0@@11| Tclass._module.state))) (and (=> (|_module.__default.evalEnterUserspace#requires| |s#0@@102| |r#0@@11|) (_module.__default.ValidState |s#0@@102|)) (=> (_module.__default.ValidState |s#0@@102|) (|_module.__default.evalEnterUserspace#requires| |s#0@@102| |r#0@@11|)))) :qid |ARMdefsd.617:30| :skolemid |2683| :pattern ( (|_module.__default.evalEnterUserspace#requires| |s#0@@102| |r#0@@11|)) )))
(assert (forall ((arg0@@308 T@U) ) (! (= (type (|#_module.operand.OSReg| arg0@@308)) DatatypeTypeType) :qid |funType:#_module.operand.OSReg| :pattern ( (|#_module.operand.OSReg| arg0@@308)) )))
(assert  (=> true (forall ((|s#0@@103| T@U) (|r#0@@12| T@U) ) (!  (=> (and (and (= (type |s#0@@103|) DatatypeTypeType) (= (type |r#0@@12|) DatatypeTypeType)) (or (|_module.__default.evalEnterUserspace#canCall| |s#0@@103| |r#0@@12|) (and (and ($Is |s#0@@103| Tclass._module.state) ($Is |r#0@@12| Tclass._module.state)) (_module.__default.ValidState |s#0@@103|)))) (and (and (|_module.__default.mode__of__state#canCall| |s#0@@103|) (and (and (|_module.__default.mode__of__state#canCall| |s#0@@103|) (=> (not (= (_module.__default.mode__of__state |s#0@@103|) |#_module.mode.User|)) (and (and (|_module.__default.OperandContents#canCall| |s#0@@103| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@103|)))) (|_module.__default.psr__mask__mode#canCall| (_module.__default.OperandContents |s#0@@103| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@103|)))))) (|_module.__default.decode__mode_k#canCall| (_module.__default.psr__mask__mode (_module.__default.OperandContents |s#0@@103| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@103|))))))))) (=> (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@103| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@103|)))) (|_module.__default.psr__mask__mode#canCall| (_module.__default.OperandContents |s#0@@103| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@103|)))))) (|_module.__default.decode__mode_k#canCall| (_module.__default.psr__mask__mode (_module.__default.OperandContents |s#0@@103| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@103|))))))) (= (_module.__default.decode__mode_k (_module.__default.psr__mask__mode (_module.__default.OperandContents |s#0@@103| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@103|)))))) (Lit (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.User|)))))) (|_module.__default.evalMOVSPCLR#canCall| |s#0@@103| |r#0@@12|)))) (and (=> (_module.__default.evalEnterUserspace |s#0@@103| |r#0@@12|) (and (and (not (= (_module.__default.mode__of__state |s#0@@103|) |#_module.mode.User|)) (= (_module.__default.decode__mode_k (_module.__default.psr__mask__mode (_module.__default.OperandContents |s#0@@103| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@103|)))))) (Lit (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.User|)))))) (_module.__default.evalMOVSPCLR |s#0@@103| |r#0@@12|))) (=> (and (and (not (= (_module.__default.mode__of__state |s#0@@103|) |#_module.mode.User|)) (= (_module.__default.decode__mode_k (_module.__default.psr__mask__mode (_module.__default.OperandContents |s#0@@103| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@103|)))))) (Lit (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.User|)))))) (_module.__default.evalMOVSPCLR |s#0@@103| |r#0@@12|)) (_module.__default.evalEnterUserspace |s#0@@103| |r#0@@12|))))) :qid |ARMdefsd.617:30| :skolemid |2684| :pattern ( (_module.__default.evalEnterUserspace |s#0@@103| |r#0@@12|)) ))))
(assert  (=> true (forall ((|s#0@@104| T@U) (|r#0@@13| T@U) ) (!  (=> (and (and (= (type |s#0@@104|) DatatypeTypeType) (= (type |r#0@@13|) DatatypeTypeType)) (or (|_module.__default.evalEnterUserspace#canCall| (Lit |s#0@@104|) (Lit |r#0@@13|)) (and (and ($Is |s#0@@104| Tclass._module.state) ($Is |r#0@@13| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@104|)))))))) (and (and (|_module.__default.mode__of__state#canCall| (Lit |s#0@@104|)) (and (and (|_module.__default.mode__of__state#canCall| (Lit |s#0@@104|)) (=> (U_2_bool (Lit (bool_2_U (not (= (_module.__default.mode__of__state (Lit |s#0@@104|)) |#_module.mode.User|))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@104|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@104|)))))))) (|_module.__default.psr__mask__mode#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@104|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@104|))))))))))) (|_module.__default.decode__mode_k#canCall| (LitInt (_module.__default.psr__mask__mode (LitInt (_module.__default.OperandContents (Lit |s#0@@104|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@104|))))))))))))))) (=> (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@104|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@104|)))))))) (|_module.__default.psr__mask__mode#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@104|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@104|))))))))))) (|_module.__default.decode__mode_k#canCall| (LitInt (_module.__default.psr__mask__mode (LitInt (_module.__default.OperandContents (Lit |s#0@@104|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@104|))))))))))))) (= (Lit (_module.__default.decode__mode_k (LitInt (_module.__default.psr__mask__mode (LitInt (_module.__default.OperandContents (Lit |s#0@@104|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@104|))))))))))))) (Lit (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.User|)))))) (|_module.__default.evalMOVSPCLR#canCall| (Lit |s#0@@104|) (Lit |r#0@@13|))))) (and (=> (_module.__default.evalEnterUserspace (Lit |s#0@@104|) (Lit |r#0@@13|)) (and (and (not (= (_module.__default.mode__of__state (Lit |s#0@@104|)) |#_module.mode.User|)) (= (Lit (_module.__default.decode__mode_k (LitInt (_module.__default.psr__mask__mode (LitInt (_module.__default.OperandContents (Lit |s#0@@104|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@104|))))))))))))) (Lit (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.User|)))))) (_module.__default.evalMOVSPCLR (Lit |s#0@@104|) (Lit |r#0@@13|)))) (=> (and (and (not (= (_module.__default.mode__of__state (Lit |s#0@@104|)) |#_module.mode.User|)) (= (Lit (_module.__default.decode__mode_k (LitInt (_module.__default.psr__mask__mode (LitInt (_module.__default.OperandContents (Lit |s#0@@104|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@104|))))))))))))) (Lit (|#_module.Maybe.Just| ($Box (Lit |#_module.mode.User|)))))) (_module.__default.evalMOVSPCLR (Lit |s#0@@104|) (Lit |r#0@@13|))) (_module.__default.evalEnterUserspace (Lit |s#0@@104|) (Lit |r#0@@13|)))))) :qid |ARMdefsd.617:30| :weight 3 :skolemid |2685| :pattern ( (_module.__default.evalEnterUserspace (Lit |s#0@@104|) (Lit |r#0@@13|))) ))))
(assert  (=> true (forall ((|s#0@@105| T@U) (|r#0@@14| T@U) ) (!  (=> (and (and (= (type |s#0@@105|) DatatypeTypeType) (= (type |r#0@@14|) DatatypeTypeType)) (or (|_module.__default.evalMOVSPCLR#canCall| |s#0@@105| |r#0@@14|) (and (and ($Is |s#0@@105| Tclass._module.state) ($Is |r#0@@14| Tclass._module.state)) (_module.__default.ValidState |s#0@@105|)))) true) :qid |ARMdefsd.627:24| :skolemid |2686| :pattern ( (_module.__default.evalMOVSPCLR |s#0@@105| |r#0@@14|)) ))))
(assert (forall ((|s#0@@106| T@U) (|r#0@@15| T@U) ) (!  (=> (and (and (= (type |s#0@@106|) DatatypeTypeType) (= (type |r#0@@15|) DatatypeTypeType)) (and ($Is |s#0@@106| Tclass._module.state) ($Is |r#0@@15| Tclass._module.state))) (and (=> (|_module.__default.evalMOVSPCLR#requires| |s#0@@106| |r#0@@15|) (_module.__default.ValidState |s#0@@106|)) (=> (_module.__default.ValidState |s#0@@106|) (|_module.__default.evalMOVSPCLR#requires| |s#0@@106| |r#0@@15|)))) :qid |ARMdefsd.627:24| :skolemid |2687| :pattern ( (|_module.__default.evalMOVSPCLR#requires| |s#0@@106| |r#0@@15|)) )))
(assert  (=> true (forall ((|s#0@@107| T@U) (|r#0@@16| T@U) ) (!  (=> (and (and (= (type |s#0@@107|) DatatypeTypeType) (= (type |r#0@@16|) DatatypeTypeType)) (or (|_module.__default.evalMOVSPCLR#canCall| |s#0@@107| |r#0@@16|) (and (and ($Is |s#0@@107| Tclass._module.state) ($Is |r#0@@16| Tclass._module.state)) (_module.__default.ValidState |s#0@@107|)))) (and (and (|_module.__default.priv__of__state#canCall| |s#0@@107|) (=> (= (_module.__default.priv__of__state |s#0@@107|) (Lit |#_module.priv.PL1|)) (and (|_module.__default.mode__of__state#canCall| |s#0@@107|) (and (|_module.__default.OperandContents#canCall| |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|)))) (and (and (|_module.__default.ValidPsrWord#canCall| (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|))))) (=> (_module.__default.ValidPsrWord (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|))))) (|_module.__default.ValidModeChange#canCall| |s#0@@107| (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|))))))) (=> (and (|_module.__default.ValidModeChange#canCall| |s#0@@107| (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|))))) (_module.__default.ValidModeChange |s#0@@107| (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|)))))) (and (|_module.__default.takestep#canCall| |s#0@@107|) (|_module.__default.evalUpdate#canCall| (_module.__default.takestep |s#0@@107|) (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|)))) |r#0@@16|)))))))) (and (=> (_module.__default.evalMOVSPCLR |s#0@@107| |r#0@@16|) (and (= (_module.__default.priv__of__state |s#0@@107|) (Lit |#_module.priv.PL1|)) (and (and (_module.__default.ValidPsrWord (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|))))) (_module.__default.ValidModeChange |s#0@@107| (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|)))))) (_module.__default.evalUpdate (_module.__default.takestep |s#0@@107|) (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|)))) |r#0@@16|)))) (=> (and (= (_module.__default.priv__of__state |s#0@@107|) (Lit |#_module.priv.PL1|)) (and (and (_module.__default.ValidPsrWord (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|))))) (_module.__default.ValidModeChange |s#0@@107| (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|)))))) (_module.__default.evalUpdate (_module.__default.takestep |s#0@@107|) (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (_module.__default.OperandContents |s#0@@107| (|#_module.operand.OSReg| (|#_module.SReg.spsr| (_module.__default.mode__of__state |s#0@@107|)))) |r#0@@16|))) (_module.__default.evalMOVSPCLR |s#0@@107| |r#0@@16|))))) :qid |ARMdefsd.627:24| :skolemid |2688| :pattern ( (_module.__default.evalMOVSPCLR |s#0@@107| |r#0@@16|)) ))))
(assert  (=> true (forall ((|s#0@@108| T@U) (|r#0@@17| T@U) ) (!  (=> (and (and (= (type |s#0@@108|) DatatypeTypeType) (= (type |r#0@@17|) DatatypeTypeType)) (or (|_module.__default.evalMOVSPCLR#canCall| (Lit |s#0@@108|) (Lit |r#0@@17|)) (and (and ($Is |s#0@@108| Tclass._module.state) ($Is |r#0@@17| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@108|)))))))) (and (and (|_module.__default.priv__of__state#canCall| (Lit |s#0@@108|)) (=> (= (Lit (_module.__default.priv__of__state (Lit |s#0@@108|))) (Lit |#_module.priv.PL1|)) (and (|_module.__default.mode__of__state#canCall| (Lit |s#0@@108|)) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|)))))))) (and (and (|_module.__default.ValidPsrWord#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|)))))))))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidPsrWord (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|))))))))))))) (|_module.__default.ValidModeChange#canCall| (Lit |s#0@@108|) (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|)))))))))))) (=> (and (|_module.__default.ValidModeChange#canCall| (Lit |s#0@@108|) (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|)))))))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidModeChange (Lit |s#0@@108|) (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|)))))))))))))) (and (|_module.__default.takestep#canCall| (Lit |s#0@@108|)) (|_module.__default.evalUpdate#canCall| (Lit (_module.__default.takestep (Lit |s#0@@108|))) (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|))))))))) (Lit |r#0@@17|))))))))) (and (=> (_module.__default.evalMOVSPCLR (Lit |s#0@@108|) (Lit |r#0@@17|)) (and (= (Lit (_module.__default.priv__of__state (Lit |s#0@@108|))) (Lit |#_module.priv.PL1|)) (and (and (_module.__default.ValidPsrWord (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|)))))))))) (_module.__default.ValidModeChange (Lit |s#0@@108|) (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|))))))))))) (_module.__default.evalUpdate (Lit (_module.__default.takestep (Lit |s#0@@108|))) (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|))))))))) (Lit |r#0@@17|))))) (=> (and (= (Lit (_module.__default.priv__of__state (Lit |s#0@@108|))) (Lit |#_module.priv.PL1|)) (and (and (_module.__default.ValidPsrWord (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|)))))))))) (_module.__default.ValidModeChange (Lit |s#0@@108|) (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|))))))))))) (_module.__default.evalUpdate (Lit (_module.__default.takestep (Lit |s#0@@108|))) (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@108|) (Lit (|#_module.operand.OSReg| (Lit (|#_module.SReg.spsr| (Lit (_module.__default.mode__of__state (Lit |s#0@@108|))))))))) (Lit |r#0@@17|)))) (_module.__default.evalMOVSPCLR (Lit |s#0@@108|) (Lit |r#0@@17|)))))) :qid |ARMdefsd.627:24| :weight 3 :skolemid |2689| :pattern ( (_module.__default.evalMOVSPCLR (Lit |s#0@@108|) (Lit |r#0@@17|))) ))))
(assert (forall ((arg0@@309 T@U) (arg1@@157 T@U) (arg2@@108 Int) ) (! (= (type (_module.__default.userspaceExecutionFn arg0@@309 arg1@@157 arg2@@108)) DatatypeTypeType) :qid |funType:_module.__default.userspaceExecutionFn| :pattern ( (_module.__default.userspaceExecutionFn arg0@@309 arg1@@157 arg2@@108)) )))
(assert (forall (($ly@@181 T@U) (|s#0@@109| T@U) (|pc#0@@7| Int) ) (!  (=> (and (= (type $ly@@181) LayerTypeType) (= (type |s#0@@109|) DatatypeTypeType)) (= (_module.__default.userspaceExecutionFn ($LS $ly@@181) |s#0@@109| |pc#0@@7|) (_module.__default.userspaceExecutionFn $ly@@181 |s#0@@109| |pc#0@@7|))) :qid |ARMdefsd.639:20| :skolemid |2690| :pattern ( (_module.__default.userspaceExecutionFn ($LS $ly@@181) |s#0@@109| |pc#0@@7|)) )))
(assert (forall (($ly@@182 T@U) (|s#0@@110| T@U) (|pc#0@@8| Int) ) (!  (=> (and (= (type $ly@@182) LayerTypeType) (= (type |s#0@@110|) DatatypeTypeType)) (= (_module.__default.userspaceExecutionFn $ly@@182 |s#0@@110| |pc#0@@8|) (_module.__default.userspaceExecutionFn $LZ |s#0@@110| |pc#0@@8|))) :qid |ARMdefsd.639:20| :skolemid |2691| :pattern ( (_module.__default.userspaceExecutionFn (AsFuelBottom $ly@@182) |s#0@@110| |pc#0@@8|)) )))
(assert (forall ((arg0@@310 T@U) ) (! (= (type (_module.__default.ExtractAbsPageTable arg0@@310)) DatatypeTypeType) :qid |funType:_module.__default.ExtractAbsPageTable| :pattern ( (_module.__default.ExtractAbsPageTable arg0@@310)) )))
(assert  (=> true (forall (($ly@@183 T@U) ($Heap@@124 T@U) (|s#0@@111| T@U) (|pc#0@@9| Int) ) (!  (=> (and (and (and (= (type $ly@@183) LayerTypeType) (= (type $Heap@@124) (MapType1Type refType))) (= (type |s#0@@111|) DatatypeTypeType)) (or (|_module.__default.userspaceExecutionFn#canCall| |s#0@@111| |pc#0@@9|) (and (and (and ($IsGoodHeap $Heap@@124) ($Is |s#0@@111| Tclass._module.state)) (_module.__default.isUInt32 |pc#0@@9|)) (and (and (_module.__default.ValidState |s#0@@111|) (= (_module.__default.mode__of__state |s#0@@111|) (Lit |#_module.mode.User|))) (_module.Maybe.Just_q (_module.__default.ExtractAbsPageTable |s#0@@111|)))))) (and (_module.__default.ValidState ($Unbox DatatypeTypeType (_System.__tuple_h3._0 (_module.__default.userspaceExecutionFn $ly@@183 |s#0@@111| |pc#0@@9|)))) ($Is (_module.__default.userspaceExecutionFn $ly@@183 |s#0@@111| |pc#0@@9|) (Tclass._System.__tuple_h3 Tclass._module.state Tclass._module.word Tclass._module.exception)))) :qid |ARMdefsd.639:20| :skolemid |2692| :pattern ( (_module.__default.userspaceExecutionFn $ly@@183 |s#0@@111| |pc#0@@9|) ($IsGoodHeap $Heap@@124)) ))))
(assert (forall (($ly@@184 T@U) ($Heap@@125 T@U) (|s#0@@112| T@U) (|pc#0@@10| Int) ) (!  (=> (and (and (and (= (type $ly@@184) LayerTypeType) (= (type $Heap@@125) (MapType1Type refType))) (= (type |s#0@@112|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@125) ($Is |s#0@@112| Tclass._module.state)) (_module.__default.isUInt32 |pc#0@@10|))) (and (=> (|_module.__default.userspaceExecutionFn#requires| $ly@@184 |s#0@@112| |pc#0@@10|) (and (and (_module.__default.ValidState |s#0@@112|) (= (_module.__default.mode__of__state |s#0@@112|) (Lit |#_module.mode.User|))) (_module.Maybe.Just_q (_module.__default.ExtractAbsPageTable |s#0@@112|)))) (=> (and (and (_module.__default.ValidState |s#0@@112|) (= (_module.__default.mode__of__state |s#0@@112|) (Lit |#_module.mode.User|))) (_module.Maybe.Just_q (_module.__default.ExtractAbsPageTable |s#0@@112|))) (|_module.__default.userspaceExecutionFn#requires| $ly@@184 |s#0@@112| |pc#0@@10|)))) :qid |ARMdefsd.639:20| :skolemid |2693| :pattern ( (|_module.__default.userspaceExecutionFn#requires| $ly@@184 |s#0@@112| |pc#0@@10|) ($IsGoodHeap $Heap@@125)) )))
(assert  (and (and (and (and (and (forall ((arg0@@311 T@U) ) (! (= (type (_module.Maybe.v arg0@@311)) BoxType) :qid |funType:_module.Maybe.v| :pattern ( (_module.Maybe.v arg0@@311)) )) (forall ((arg0@@312 T@U) ) (! (= (type (_module.__default.WritablePagesInTable arg0@@312)) (MapType0Type BoxType boolType)) :qid |funType:_module.__default.WritablePagesInTable| :pattern ( (_module.__default.WritablePagesInTable arg0@@312)) ))) (forall ((arg0@@313 T@U) ) (! (= (type (_module.__default.reseed__nondet__state arg0@@313)) DatatypeTypeType) :qid |funType:_module.__default.reseed__nondet__state| :pattern ( (_module.__default.reseed__nondet__state arg0@@313)) ))) (forall ((arg0@@314 Int) (arg1@@158 T@U) (arg2@@109 T@U) ) (! (= (type (_module.__default.havocUserRegs arg0@@314 arg1@@158 arg2@@109)) (MapType BoxType BoxType)) :qid |funType:_module.__default.havocUserRegs| :pattern ( (_module.__default.havocUserRegs arg0@@314 arg1@@158 arg2@@109)) ))) (forall ((arg0@@315 T@U) (arg1@@159 T@U) ) (! (= (type (|#_module.memstate.MemState| arg0@@315 arg1@@159)) DatatypeTypeType) :qid |funType:#_module.memstate.MemState| :pattern ( (|#_module.memstate.MemState| arg0@@315 arg1@@159)) ))) (forall ((arg0@@316 T@U) (arg1@@160 T@U) (arg2@@110 T@U) ) (! (= (type (_module.__default.havocPages arg0@@316 arg1@@160 arg2@@110)) (MapType BoxType BoxType)) :qid |funType:_module.__default.havocPages| :pattern ( (_module.__default.havocPages arg0@@316 arg1@@160 arg2@@110)) ))))
(assert  (=> true (forall (($ly@@185 T@U) ($Heap@@126 T@U) (|s#0@@113| T@U) (|pc#0@@11| Int) ) (!  (=> (and (and (and (= (type $ly@@185) LayerTypeType) (= (type $Heap@@126) (MapType1Type refType))) (= (type |s#0@@113|) DatatypeTypeType)) (or (|_module.__default.userspaceExecutionFn#canCall| |s#0@@113| |pc#0@@11|) (and (and (and ($IsGoodHeap $Heap@@126) ($Is |s#0@@113| Tclass._module.state)) (_module.__default.isUInt32 |pc#0@@11|)) (and (and (_module.__default.ValidState |s#0@@113|) (= (_module.__default.mode__of__state |s#0@@113|) (Lit |#_module.mode.User|))) (_module.Maybe.Just_q (_module.__default.ExtractAbsPageTable |s#0@@113|)))))) (and (and (|_module.__default.ExtractAbsPageTable#canCall| |s#0@@113|) (and (|_module.__default.user__visible__state#canCall| |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (and (|_module.__default.WritablePagesInTable#canCall| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (and (and (and (and (_module.state.State_q |s#0@@113|) (_module.config.Config_q (_module.state.conf |s#0@@113|))) (and (_module.state.State_q |s#0@@113|) (_module.config.Config_q (_module.state.conf |s#0@@113|)))) (|_module.__default.nondet__psr#canCall| (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (_module.config.cpsr (_module.state.conf |s#0@@113|)))) (and (|_module.__default.reseed__nondet__state#canCall| |s#0@@113|) (and (and (and (and (and (and (and (and (and (and (_module.state.State_q |s#0@@113|) (_module.config.Config_q (_module.state.conf |s#0@@113|))) (_module.state.State_q |s#0@@113|)) (|_module.__default.havocUserRegs#canCall| (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (_module.state.regs |s#0@@113|))) (_module.state.State_q |s#0@@113|)) (and (_module.state.State_q |s#0@@113|) (and (|_module.__default.havocPages#canCall| (_module.__default.WritablePagesInTable ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) |s#0@@113| (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|))))) (_module.memstate.MemState_q (_module.state.m |s#0@@113|))))) (_module.state.State_q (_module.__default.reseed__nondet__state |s#0@@113|))) (and (and (and (_module.state.State_q |s#0@@113|) (_module.config.Config_q (_module.state.conf |s#0@@113|))) (|_module.__default.NONDET__RNG#canCall| (LitInt 0))) (|_module.__default.nondet__private__word#canCall| (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (_module.__default.NONDET__RNG (LitInt 0))))) (_module.state.State_q (_module.__default.reseed__nondet__state |s#0@@113|))) (and (_module.state.State_q |s#0@@113|) (and (and (and (_module.state.State_q |s#0@@113|) (_module.config.Config_q (_module.state.conf |s#0@@113|))) |_module.__default.NONDET__STEPS#canCall|) (|_module.__default.nondet__private__nat#canCall| (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) _module.__default.NONDET__STEPS)))) (and (and (and (and (_module.state.State_q |s#0@@113|) (_module.config.Config_q (_module.state.conf |s#0@@113|))) |_module.__default.NONDET__PC#canCall|) (|_module.__default.nondet__private__word#canCall| (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) _module.__default.NONDET__PC)) (and (and (and (and (_module.state.State_q |s#0@@113|) (_module.config.Config_q (_module.state.conf |s#0@@113|))) (and (and (_module.state.State_q |s#0@@113|) (_module.config.Config_q (_module.state.conf |s#0@@113|))) (_module.PSR.PSR_q (_module.config.cpsr (_module.state.conf |s#0@@113|))))) (and (and (_module.state.State_q |s#0@@113|) (_module.config.Config_q (_module.state.conf |s#0@@113|))) (_module.PSR.PSR_q (_module.config.cpsr (_module.state.conf |s#0@@113|))))) (|_module.__default.nondet__exception#canCall| (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (_module.PSR.f (_module.config.cpsr (_module.state.conf |s#0@@113|))) (_module.PSR.i (_module.config.cpsr (_module.state.conf |s#0@@113|)))))))))))) (= (_module.__default.userspaceExecutionFn ($LS $ly@@185) |s#0@@113| |pc#0@@11|) (|#_System._tuple#3._#Make3| ($Box (|#_module.state.State| (_module.__default.havocUserRegs (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (_module.state.regs |s#0@@113|)) (|Map#Build| (_module.state.sregs |s#0@@113|) ($Box (Lit |#_module.SReg.cpsr|)) ($Box (int_2_U (_module.__default.nondet__psr (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (_module.config.cpsr (_module.state.conf |s#0@@113|)))))) (|#_module.memstate.MemState| (_module.__default.havocPages (_module.__default.WritablePagesInTable ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) |s#0@@113| (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|))))) (_module.memstate.globals (_module.state.m |s#0@@113|))) (_module.state.conf (_module.__default.reseed__nondet__state |s#0@@113|)) (|#_module.RNG.RNG| (_module.__default.nondet__private__word (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (_module.__default.NONDET__RNG (LitInt 0))) (U_2_bool (Lit (bool_2_U false))) (U_2_bool (Lit (bool_2_U false)))) (_module.state.ok (_module.__default.reseed__nondet__state |s#0@@113|)) (INTERNAL_add_boogie (_module.state.steps |s#0@@113|) (_module.__default.nondet__private__nat (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) _module.__default.NONDET__STEPS)))) ($Box (int_2_U (_module.__default.nondet__private__word (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) _module.__default.NONDET__PC))) ($Box (_module.__default.nondet__exception (_module.config.nondet (_module.state.conf |s#0@@113|)) (_module.__default.user__visible__state |s#0@@113| |pc#0@@11| ($Unbox (SeqType BoxType) (_module.Maybe.v (_module.__default.ExtractAbsPageTable |s#0@@113|)))) (_module.PSR.f (_module.config.cpsr (_module.state.conf |s#0@@113|))) (_module.PSR.i (_module.config.cpsr (_module.state.conf |s#0@@113|))))))))) :qid |ARMdefsd.639:20| :skolemid |2694| :pattern ( (_module.__default.userspaceExecutionFn ($LS $ly@@185) |s#0@@113| |pc#0@@11|) ($IsGoodHeap $Heap@@126)) ))))
(assert  (=> true (forall (($ly@@186 T@U) ($Heap@@127 T@U) (|s#0@@114| T@U) (|pc#0@@12| Int) ) (!  (=> (and (and (and (= (type $ly@@186) LayerTypeType) (= (type $Heap@@127) (MapType1Type refType))) (= (type |s#0@@114|) DatatypeTypeType)) (or (|_module.__default.userspaceExecutionFn#canCall| (Lit |s#0@@114|) (LitInt |pc#0@@12|)) (and (and (and ($IsGoodHeap $Heap@@127) ($Is |s#0@@114| Tclass._module.state)) (_module.__default.isUInt32 |pc#0@@12|)) (and (and (_module.__default.ValidState (Lit |s#0@@114|)) (= (Lit (_module.__default.mode__of__state (Lit |s#0@@114|))) (Lit |#_module.mode.User|))) (U_2_bool (Lit (bool_2_U (_module.Maybe.Just_q (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|))))))))))) (and (and (|_module.__default.ExtractAbsPageTable#canCall| (Lit |s#0@@114|)) (and (|_module.__default.user__visible__state#canCall| (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|))))))) (and (|_module.__default.WritablePagesInTable#canCall| (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|))))))) (and (and (and (and (_module.state.State_q (Lit |s#0@@114|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@114|))))) (and (_module.state.State_q (Lit |s#0@@114|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@114|)))))) (|_module.__default.nondet__psr#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@114|))))))) (and (|_module.__default.reseed__nondet__state#canCall| (Lit |s#0@@114|)) (and (and (and (and (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@114|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@114|))))) (_module.state.State_q (Lit |s#0@@114|))) (|_module.__default.havocUserRegs#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (Lit (_module.state.regs (Lit |s#0@@114|))))) (_module.state.State_q (Lit |s#0@@114|))) (and (_module.state.State_q (Lit |s#0@@114|)) (and (|_module.__default.havocPages#canCall| (Lit (_module.__default.WritablePagesInTable (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (Lit |s#0@@114|) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|))))))))) (_module.memstate.MemState_q (Lit (_module.state.m (Lit |s#0@@114|))))))) (_module.state.State_q (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@114|))))) (and (and (and (_module.state.State_q (Lit |s#0@@114|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@114|))))) (|_module.__default.NONDET__RNG#canCall| (LitInt 0))) (|_module.__default.nondet__private__word#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (_module.__default.NONDET__RNG (LitInt 0))))) (_module.state.State_q (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@114|))))) (and (_module.state.State_q (Lit |s#0@@114|)) (and (and (and (_module.state.State_q (Lit |s#0@@114|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@114|))))) |_module.__default.NONDET__STEPS#canCall|) (|_module.__default.nondet__private__nat#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) _module.__default.NONDET__STEPS)))) (and (and (and (and (_module.state.State_q (Lit |s#0@@114|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@114|))))) |_module.__default.NONDET__PC#canCall|) (|_module.__default.nondet__private__word#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) _module.__default.NONDET__PC)) (and (and (and (and (_module.state.State_q (Lit |s#0@@114|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@114|))))) (and (and (_module.state.State_q (Lit |s#0@@114|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@114|))))) (_module.PSR.PSR_q (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@114|)))))))) (and (and (_module.state.State_q (Lit |s#0@@114|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@114|))))) (_module.PSR.PSR_q (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@114|)))))))) (|_module.__default.nondet__exception#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (U_2_bool (Lit (bool_2_U (_module.PSR.f (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@114|))))))))) (U_2_bool (Lit (bool_2_U (_module.PSR.i (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@114|)))))))))))))))))) (= (_module.__default.userspaceExecutionFn ($LS $ly@@186) (Lit |s#0@@114|) (LitInt |pc#0@@12|)) (|#_System._tuple#3._#Make3| ($Box (|#_module.state.State| (Lit (_module.__default.havocUserRegs (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (Lit (_module.state.regs (Lit |s#0@@114|))))) (|Map#Build| (Lit (_module.state.sregs (Lit |s#0@@114|))) ($Box (Lit |#_module.SReg.cpsr|)) ($Box (int_2_U (_module.__default.nondet__psr (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@114|))))))))) (Lit (|#_module.memstate.MemState| (Lit (_module.__default.havocPages (Lit (_module.__default.WritablePagesInTable (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (Lit |s#0@@114|) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))))) (Lit (_module.memstate.globals (Lit (_module.state.m (Lit |s#0@@114|))))))) (Lit (_module.state.conf (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@114|))))) (|#_module.RNG.RNG| (_module.__default.nondet__private__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (_module.__default.NONDET__RNG (LitInt 0))) (U_2_bool (Lit (bool_2_U false))) (U_2_bool (Lit (bool_2_U false)))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@114|))))))) (INTERNAL_add_boogie (_module.state.steps (Lit |s#0@@114|)) (_module.__default.nondet__private__nat (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) _module.__default.NONDET__STEPS)))) ($Box (int_2_U (_module.__default.nondet__private__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) _module.__default.NONDET__PC))) ($Box (_module.__default.nondet__exception (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@114|))))) (Lit (_module.__default.user__visible__state (Lit |s#0@@114|) (LitInt |pc#0@@12|) (Lit ($Unbox (SeqType BoxType) (_module.Maybe.v (Lit (_module.__default.ExtractAbsPageTable (Lit |s#0@@114|)))))))) (U_2_bool (Lit (bool_2_U (_module.PSR.f (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@114|))))))))) (U_2_bool (Lit (bool_2_U (_module.PSR.i (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@114|))))))))))))))) :qid |ARMdefsd.639:20| :weight 3 :skolemid |2695| :pattern ( (_module.__default.userspaceExecutionFn ($LS $ly@@186) (Lit |s#0@@114|) (LitInt |pc#0@@12|)) ($IsGoodHeap $Heap@@127)) ))))
(assert  (=> true (forall ((|pages#0| T@U) (|s#0@@115| T@U) (|us#0| T@U) ) (!  (=> (and (and (and (= (type |pages#0|) (MapType0Type BoxType boolType)) (= (type |s#0@@115|) DatatypeTypeType)) (= (type |us#0|) DatatypeTypeType)) (or (|_module.__default.havocPages#canCall| |pages#0| |s#0@@115| |us#0|) (and (and (and ($Is |pages#0| (TSet Tclass._module.addr)) ($Is |s#0@@115| Tclass._module.state)) ($Is |us#0| Tclass._module.UserState)) (_module.__default.ValidState |s#0@@115|)))) ($Is (_module.__default.havocPages |pages#0| |s#0@@115| |us#0|) (TMap Tclass._module.addr Tclass._module.word))) :qid |ARMdefsd.666:21| :skolemid |2696| :pattern ( (_module.__default.havocPages |pages#0| |s#0@@115| |us#0|)) ))))
(assert (forall (($Heap@@128 T@U) (|pages#0@@0| T@U) (|s#0@@116| T@U) (|us#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@128) (MapType1Type refType)) (= (type |pages#0@@0|) (MapType0Type BoxType boolType))) (= (type |s#0@@116|) DatatypeTypeType)) (= (type |us#0@@0|) DatatypeTypeType)) (and (and (and ($IsGoodHeap $Heap@@128) ($Is |pages#0@@0| (TSet Tclass._module.addr))) ($Is |s#0@@116| Tclass._module.state)) ($Is |us#0@@0| Tclass._module.UserState))) (and (=> (|_module.__default.havocPages#requires| |pages#0@@0| |s#0@@116| |us#0@@0|) (_module.__default.ValidState |s#0@@116|)) (=> (_module.__default.ValidState |s#0@@116|) (|_module.__default.havocPages#requires| |pages#0@@0| |s#0@@116| |us#0@@0|)))) :qid |ARMdefsd.666:10| :skolemid |2697| :pattern ( (|_module.__default.havocPages#requires| |pages#0@@0| |s#0@@116| |us#0@@0|) ($IsGoodHeap $Heap@@128)) )))
(assert  (and (forall ((arg0@@317 T@U) ) (! (= (type (|lambda#63| arg0@@317)) (MapType0Type BoxType boolType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@317)) )) (forall ((arg0@@318 T@U) (arg1@@161 T@U) (arg2@@111 T@U) (arg3@@70 T@U) ) (! (= (type (|lambda#64| arg0@@318 arg1@@161 arg2@@111 arg3@@70)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@318 arg1@@161 arg2@@111 arg3@@70)) ))))
(assert  (=> true (forall (($Heap@@129 T@U) (|pages#0@@1| T@U) (|s#0@@117| T@U) (|us#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@129) (MapType1Type refType)) (= (type |pages#0@@1|) (MapType0Type BoxType boolType))) (= (type |s#0@@117|) DatatypeTypeType)) (= (type |us#0@@1|) DatatypeTypeType)) (or (|_module.__default.havocPages#canCall| |pages#0@@1| |s#0@@117| |us#0@@1|) (and (and (and (and ($IsGoodHeap $Heap@@129) ($Is |pages#0@@1| (TSet Tclass._module.addr))) ($Is |s#0@@117| Tclass._module.state)) ($Is |us#0@@1| Tclass._module.UserState)) (_module.__default.ValidState |s#0@@117|)))) (and (forall ((|a#0@@16| Int) ) (!  (=> (and (_module.__default.isUInt32 |a#0@@16|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@16|)) (and |_module.__default.TheValidAddresses#canCall| (=> (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U |a#0@@16|)))) (and (and (|_module.__default.PageBase#canCall| |a#0@@16|) (=> (U_2_bool (MapType0Select |pages#0@@1| ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@16|))))) (and (and (|_module.__default.addrIsSecure#canCall| |a#0@@16|) (=> (_module.__default.addrIsSecure |a#0@@16|) (and (and (_module.state.State_q |s#0@@117|) (_module.config.Config_q (_module.state.conf |s#0@@117|))) (|_module.__default.nondet__private__word#canCall| (_module.config.nondet (_module.state.conf |s#0@@117|)) |us#0@@1| |a#0@@16|)))) (=> (not (_module.__default.addrIsSecure |a#0@@16|)) (and (and (_module.state.State_q |s#0@@117|) (_module.config.Config_q (_module.state.conf |s#0@@117|))) (|_module.__default.nondet__word#canCall| (_module.config.nondet (_module.state.conf |s#0@@117|)) |a#0@@16|)))))) (=> (not (U_2_bool (MapType0Select |pages#0@@1| ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@16|)))))) (and (_module.state.State_q |s#0@@117|) (|_module.__default.MemContents#canCall| (_module.state.m |s#0@@117|) |a#0@@16|))))))) :qid |ARMdefsd.669:10| :skolemid |2698| :pattern ( (_module.__default.MemContents (_module.state.m |s#0@@117|) |a#0@@16|)) :pattern ( (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@117|)) |a#0@@16|)) :pattern ( (_module.__default.nondet__private__word (_module.config.nondet (_module.state.conf |s#0@@117|)) |us#0@@1| |a#0@@16|)) :pattern ( (_module.__default.addrIsSecure |a#0@@16|)) :pattern ( (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@16|)) :pattern ( (MapType0Select _module.__default.TheValidAddresses ($Box (int_2_U |a#0@@16|)))) )) (= (_module.__default.havocPages |pages#0@@1| |s#0@@117| |us#0@@1|) (|Map#Glue| (|lambda#63| StartFuel__module._default.WordAligned) (|lambda#64| |pages#0@@1| StartFuel__module._default.PageBase |us#0@@1| |s#0@@117|) (TMap Tclass._module.addr TInt))))) :qid |ARMdefsd.666:10| :skolemid |2699| :pattern ( (_module.__default.havocPages |pages#0@@1| |s#0@@117| |us#0@@1|) ($IsGoodHeap $Heap@@129)) ))))
(assert (forall ((arg0@@319 T@U) (arg1@@162 T@U) (arg2@@112 T@U) (arg3@@71 T@U) ) (! (= (type (|lambda#65| arg0@@319 arg1@@162 arg2@@112 arg3@@71)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@319 arg1@@162 arg2@@112 arg3@@71)) )))
(assert  (=> true (forall (($Heap@@130 T@U) (|pages#0@@2| T@U) (|s#0@@118| T@U) (|us#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@130) (MapType1Type refType)) (= (type |pages#0@@2|) (MapType0Type BoxType boolType))) (= (type |s#0@@118|) DatatypeTypeType)) (= (type |us#0@@2|) DatatypeTypeType)) (or (|_module.__default.havocPages#canCall| (Lit |pages#0@@2|) (Lit |s#0@@118|) (Lit |us#0@@2|)) (and (and (and (and ($IsGoodHeap $Heap@@130) ($Is |pages#0@@2| (TSet Tclass._module.addr))) ($Is |s#0@@118| Tclass._module.state)) ($Is |us#0@@2| Tclass._module.UserState)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@118|)))))))) (and (forall ((|a#0@@17| Int) ) (!  (=> (and (_module.__default.isUInt32 |a#0@@17|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@17|)) (and |_module.__default.TheValidAddresses#canCall| (=> (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) ($Box (int_2_U |a#0@@17|)))) (and (and (|_module.__default.PageBase#canCall| |a#0@@17|) (=> (U_2_bool (MapType0Select (Lit |pages#0@@2|) ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@17|))))) (and (and (|_module.__default.addrIsSecure#canCall| |a#0@@17|) (=> (_module.__default.addrIsSecure |a#0@@17|) (and (and (_module.state.State_q (Lit |s#0@@118|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@118|))))) (|_module.__default.nondet__private__word#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@118|))))) (Lit |us#0@@2|) |a#0@@17|)))) (=> (not (_module.__default.addrIsSecure |a#0@@17|)) (and (and (_module.state.State_q (Lit |s#0@@118|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@118|))))) (|_module.__default.nondet__word#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@118|))))) |a#0@@17|)))))) (=> (not (U_2_bool (MapType0Select (Lit |pages#0@@2|) ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@17|)))))) (and (_module.state.State_q (Lit |s#0@@118|)) (|_module.__default.MemContents#canCall| (Lit (_module.state.m (Lit |s#0@@118|))) |a#0@@17|))))))) :qid |ARMdefsd.669:10| :skolemid |2700| :pattern ( (_module.__default.MemContents (_module.state.m |s#0@@118|) |a#0@@17|)) :pattern ( (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@118|)) |a#0@@17|)) :pattern ( (_module.__default.nondet__private__word (_module.config.nondet (_module.state.conf |s#0@@118|)) |us#0@@2| |a#0@@17|)) :pattern ( (_module.__default.addrIsSecure |a#0@@17|)) :pattern ( (_module.__default.PageBase StartFuel__module._default.PageBase |a#0@@17|)) :pattern ( (MapType0Select _module.__default.TheValidAddresses ($Box (int_2_U |a#0@@17|)))) )) (= (_module.__default.havocPages (Lit |pages#0@@2|) (Lit |s#0@@118|) (Lit |us#0@@2|)) (|Map#Glue| (|lambda#63| StartFuel__module._default.WordAligned) (|lambda#65| |pages#0@@2| StartFuel__module._default.PageBase |us#0@@2| |s#0@@118|) (TMap Tclass._module.addr TInt))))) :qid |ARMdefsd.666:10| :weight 3 :skolemid |2701| :pattern ( (_module.__default.havocPages (Lit |pages#0@@2|) (Lit |s#0@@118|) (Lit |us#0@@2|)) ($IsGoodHeap $Heap@@130)) ))))
(assert  (=> true (forall ((|nondet#0| Int) (|us#0@@3| T@U) (|regs#0@@9| T@U) ) (!  (=> (and (and (= (type |us#0@@3|) DatatypeTypeType) (= (type |regs#0@@9|) (MapType BoxType BoxType))) (or (|_module.__default.havocUserRegs#canCall| |nondet#0| |us#0@@3| |regs#0@@9|) (and (and ($Is |us#0@@3| Tclass._module.UserState) ($Is |regs#0@@9| (TMap Tclass._module.ARMReg Tclass._module.word))) (_module.__default.ValidRegState StartFuel__module._default.ValidRegState |regs#0@@9|)))) (and (_module.__default.ValidRegState StartFuel__module._default.ValidRegState (_module.__default.havocUserRegs |nondet#0| |us#0@@3| |regs#0@@9|)) ($Is (_module.__default.havocUserRegs |nondet#0| |us#0@@3| |regs#0@@9|) (TMap Tclass._module.ARMReg Tclass._module.word)))) :qid |ARMdefsd.676:24| :skolemid |2702| :pattern ( (_module.__default.havocUserRegs |nondet#0| |us#0@@3| |regs#0@@9|)) ))))
(assert (forall ((|nondet#0@@0| Int) (|us#0@@4| T@U) (|regs#0@@10| T@U) ) (!  (=> (and (and (= (type |us#0@@4|) DatatypeTypeType) (= (type |regs#0@@10|) (MapType BoxType BoxType))) (and ($Is |us#0@@4| Tclass._module.UserState) ($Is |regs#0@@10| (TMap Tclass._module.ARMReg Tclass._module.word)))) (and (=> (|_module.__default.havocUserRegs#requires| |nondet#0@@0| |us#0@@4| |regs#0@@10|) (_module.__default.ValidRegState StartFuel__module._default.ValidRegState |regs#0@@10|)) (=> (_module.__default.ValidRegState StartFuel__module._default.ValidRegState |regs#0@@10|) (|_module.__default.havocUserRegs#requires| |nondet#0@@0| |us#0@@4| |regs#0@@10|)))) :qid |ARMdefsd.676:24| :skolemid |2703| :pattern ( (|_module.__default.havocUserRegs#requires| |nondet#0@@0| |us#0@@4| |regs#0@@10|)) )))
(assert  (and (and (= (type MoreFuel__module._default.ValidRegState2) LayerTypeType) (forall ((arg0@@320 T@U) ) (! (= (type (|lambda#66| arg0@@320)) (MapType0Type BoxType boolType)) :qid |funType:lambda#66| :pattern ( (|lambda#66| arg0@@320)) ))) (forall ((arg0@@321 T@U) (arg1@@163 Int) (arg2@@113 T@U) ) (! (= (type (|lambda#67| arg0@@321 arg1@@163 arg2@@113)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#67| :pattern ( (|lambda#67| arg0@@321 arg1@@163 arg2@@113)) ))))
(assert  (=> true (forall ((|nondet#0@@1| Int) (|us#0@@5| T@U) (|regs#0@@11| T@U) ) (!  (=> (and (and (= (type |us#0@@5|) DatatypeTypeType) (= (type |regs#0@@11|) (MapType BoxType BoxType))) (or (|_module.__default.havocUserRegs#canCall| |nondet#0@@1| |us#0@@5| |regs#0@@11|) (and (and ($Is |us#0@@5| Tclass._module.UserState) ($Is |regs#0@@11| (TMap Tclass._module.ARMReg Tclass._module.word))) (_module.__default.ValidRegState StartFuel__module._default.ValidRegState |regs#0@@11|)))) (and (forall ((|r#0@@18| T@U) ) (!  (=> (and (and (= (type |r#0@@18|) DatatypeTypeType) ($Is |r#0@@18| Tclass._module.ARMReg)) (U_2_bool (MapType0Select (|Map#Domain| |regs#0@@11|) ($Box |r#0@@18|)))) (and |_module.__default.USER__REGS#canCall| (=> (U_2_bool (MapType0Select (Lit _module.__default.USER__REGS) ($Box |r#0@@18|))) (and (|_module.__default.NONDET__REG#canCall| |r#0@@18|) (|_module.__default.nondet__private__word#canCall| |nondet#0@@1| |us#0@@5| (_module.__default.NONDET__REG |r#0@@18|)))))) :qid |ARMdefsd.681:9| :skolemid |2704| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |regs#0@@11|) ($Box |r#0@@18|)))) :pattern ( (_module.__default.NONDET__REG |r#0@@18|)) :pattern ( (MapType0Select _module.__default.USER__REGS ($Box |r#0@@18|))) :pattern ( (MapType0Select (|Map#Domain| |regs#0@@11|) ($Box |r#0@@18|))) )) (and (and (and (= StartFuel__module._default.ValidRegState ($LS MoreFuel__module._default.ValidRegState2)) (= StartFuelAssert__module._default.ValidRegState ($LS ($LS MoreFuel__module._default.ValidRegState2)))) (= (AsFuelBottom MoreFuel__module._default.ValidRegState2) MoreFuel__module._default.ValidRegState2)) (= (_module.__default.havocUserRegs |nondet#0@@1| |us#0@@5| |regs#0@@11|) (|Map#Glue| (|lambda#66| |regs#0@@11|) (|lambda#67| |regs#0@@11| |nondet#0@@1| |us#0@@5|) (TMap Tclass._module.ARMReg TInt)))))) :qid |ARMdefsd.676:24| :skolemid |2705| :pattern ( (_module.__default.havocUserRegs |nondet#0@@1| |us#0@@5| |regs#0@@11|)) ))))
(assert  (and (= (type MoreFuel__module._default.ValidRegState3) LayerTypeType) (forall ((arg0@@322 T@U) (arg1@@164 Int) (arg2@@114 T@U) ) (! (= (type (|lambda#68| arg0@@322 arg1@@164 arg2@@114)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@322 arg1@@164 arg2@@114)) ))))
(assert  (=> true (forall ((|nondet#0@@2| Int) (|us#0@@6| T@U) (|regs#0@@12| T@U) ) (!  (=> (and (and (= (type |us#0@@6|) DatatypeTypeType) (= (type |regs#0@@12|) (MapType BoxType BoxType))) (or (|_module.__default.havocUserRegs#canCall| (LitInt |nondet#0@@2|) (Lit |us#0@@6|) (Lit |regs#0@@12|)) (and (and ($Is |us#0@@6| Tclass._module.UserState) ($Is |regs#0@@12| (TMap Tclass._module.ARMReg Tclass._module.word))) (_module.__default.ValidRegState StartFuel__module._default.ValidRegState (Lit |regs#0@@12|))))) (and (forall ((|r#0@@19| T@U) ) (!  (=> (and (and (= (type |r#0@@19|) DatatypeTypeType) ($Is |r#0@@19| Tclass._module.ARMReg)) (U_2_bool (MapType0Select (|Map#Domain| |regs#0@@12|) ($Box |r#0@@19|)))) (and |_module.__default.USER__REGS#canCall| (=> (U_2_bool (MapType0Select (Lit _module.__default.USER__REGS) ($Box |r#0@@19|))) (and (|_module.__default.NONDET__REG#canCall| |r#0@@19|) (|_module.__default.nondet__private__word#canCall| (LitInt |nondet#0@@2|) (Lit |us#0@@6|) (_module.__default.NONDET__REG |r#0@@19|)))))) :qid |ARMdefsd.681:9| :skolemid |2706| :pattern ( ($Unbox intType (MapType0Select (|Map#Elements| |regs#0@@12|) ($Box |r#0@@19|)))) :pattern ( (_module.__default.NONDET__REG |r#0@@19|)) :pattern ( (MapType0Select _module.__default.USER__REGS ($Box |r#0@@19|))) :pattern ( (MapType0Select (|Map#Domain| |regs#0@@12|) ($Box |r#0@@19|))) )) (and (and (and (= StartFuel__module._default.ValidRegState ($LS MoreFuel__module._default.ValidRegState3)) (= StartFuelAssert__module._default.ValidRegState ($LS ($LS MoreFuel__module._default.ValidRegState3)))) (= (AsFuelBottom MoreFuel__module._default.ValidRegState3) MoreFuel__module._default.ValidRegState3)) (= (_module.__default.havocUserRegs (LitInt |nondet#0@@2|) (Lit |us#0@@6|) (Lit |regs#0@@12|)) (|Map#Glue| (|lambda#66| |regs#0@@12|) (|lambda#68| |regs#0@@12| |nondet#0@@2| |us#0@@6|) (TMap Tclass._module.ARMReg TInt)))))) :qid |ARMdefsd.676:24| :weight 3 :skolemid |2707| :pattern ( (_module.__default.havocUserRegs (LitInt |nondet#0@@2|) (Lit |us#0@@6|) (Lit |regs#0@@12|))) ))))
(assert  (=> true (forall ((|s#0@@119| T@U) (|r#0@@20| T@U) ) (!  (=> (and (and (= (type |s#0@@119|) DatatypeTypeType) (= (type |r#0@@20|) DatatypeTypeType)) (or (|_module.__default.EssentialContinuationInvariantProperties#canCall| |s#0@@119| |r#0@@20|) (and ($Is |s#0@@119| Tclass._module.state) ($Is |r#0@@20| Tclass._module.state)))) true) :qid |ARMdefsd.690:52| :skolemid |2708| :pattern ( (_module.__default.EssentialContinuationInvariantProperties |s#0@@119| |r#0@@20|)) ))))
(assert (forall (($Heap@@131 T@U) (|s#0@@120| T@U) (|r#0@@21| T@U) ) (!  (=> (and (and (and (= (type $Heap@@131) (MapType1Type refType)) (= (type |s#0@@120|) DatatypeTypeType)) (= (type |r#0@@21|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@131) ($Is |s#0@@120| Tclass._module.state)) ($Is |r#0@@21| Tclass._module.state))) (and (=> (|_module.__default.EssentialContinuationInvariantProperties#requires| |s#0@@120| |r#0@@21|) true) (=> true (|_module.__default.EssentialContinuationInvariantProperties#requires| |s#0@@120| |r#0@@21|)))) :qid |ARMdefsd.690:11| :skolemid |2709| :pattern ( (|_module.__default.EssentialContinuationInvariantProperties#requires| |s#0@@120| |r#0@@21|) ($IsGoodHeap $Heap@@131)) )))
(assert  (=> true (forall (($Heap@@132 T@U) (|s#0@@121| T@U) (|r#0@@22| T@U) ) (!  (=> (and (and (and (= (type $Heap@@132) (MapType1Type refType)) (= (type |s#0@@121|) DatatypeTypeType)) (= (type |r#0@@22|) DatatypeTypeType)) (or (|_module.__default.EssentialContinuationInvariantProperties#canCall| |s#0@@121| |r#0@@22|) (and (and ($IsGoodHeap $Heap@@132) ($Is |s#0@@121| Tclass._module.state)) ($Is |r#0@@22| Tclass._module.state)))) (and (and (and (|_module.__default.ValidState#canCall| |s#0@@121|) (=> (_module.__default.ValidState |s#0@@121|) (|_module.__default.ValidState#canCall| |r#0@@22|))) (=> (and (|_module.__default.ValidState#canCall| |r#0@@22|) (_module.__default.ValidState |r#0@@22|)) (and (_module.state.State_q |s#0@@121|) (=> (_module.state.ok |s#0@@121|) (_module.state.State_q |r#0@@22|))))) (and (=> (_module.__default.EssentialContinuationInvariantProperties |s#0@@121| |r#0@@22|) (and (=> (_module.__default.ValidState |s#0@@121|) (_module.__default.ValidState |r#0@@22|)) (=> (_module.state.ok |s#0@@121|) (_module.state.ok |r#0@@22|)))) (=> (and (=> (_module.__default.ValidState |s#0@@121|) (_module.__default.ValidState |r#0@@22|)) (=> (_module.state.ok |s#0@@121|) (_module.state.ok |r#0@@22|))) (_module.__default.EssentialContinuationInvariantProperties |s#0@@121| |r#0@@22|))))) :qid |ARMdefsd.690:11| :skolemid |2710| :pattern ( (_module.__default.EssentialContinuationInvariantProperties |s#0@@121| |r#0@@22|) ($IsGoodHeap $Heap@@132)) ))))
(assert  (=> true (forall (($Heap@@133 T@U) (|s#0@@122| T@U) (|r#0@@23| T@U) ) (!  (=> (and (and (and (= (type $Heap@@133) (MapType1Type refType)) (= (type |s#0@@122|) DatatypeTypeType)) (= (type |r#0@@23|) DatatypeTypeType)) (or (|_module.__default.EssentialContinuationInvariantProperties#canCall| (Lit |s#0@@122|) (Lit |r#0@@23|)) (and (and ($IsGoodHeap $Heap@@133) ($Is |s#0@@122| Tclass._module.state)) ($Is |r#0@@23| Tclass._module.state)))) (and (and (and (|_module.__default.ValidState#canCall| (Lit |s#0@@122|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@122|))))) (|_module.__default.ValidState#canCall| (Lit |r#0@@23|)))) (=> (and (|_module.__default.ValidState#canCall| (Lit |r#0@@23|)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |r#0@@23|)))))) (and (_module.state.State_q (Lit |s#0@@122|)) (=> (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@122|))))) (_module.state.State_q (Lit |r#0@@23|)))))) (and (=> (_module.__default.EssentialContinuationInvariantProperties (Lit |s#0@@122|) (Lit |r#0@@23|)) (U_2_bool (Lit (bool_2_U  (and (=> (_module.__default.ValidState (Lit |s#0@@122|)) (_module.__default.ValidState (Lit |r#0@@23|))) (=> (_module.state.ok (Lit |s#0@@122|)) (_module.state.ok (Lit |r#0@@23|)))))))) (=> (U_2_bool (Lit (bool_2_U  (and (=> (_module.__default.ValidState (Lit |s#0@@122|)) (_module.__default.ValidState (Lit |r#0@@23|))) (=> (_module.state.ok (Lit |s#0@@122|)) (_module.state.ok (Lit |r#0@@23|))))))) (_module.__default.EssentialContinuationInvariantProperties (Lit |s#0@@122|) (Lit |r#0@@23|)))))) :qid |ARMdefsd.690:11| :weight 3 :skolemid |2711| :pattern ( (_module.__default.EssentialContinuationInvariantProperties (Lit |s#0@@122|) (Lit |r#0@@23|)) ($IsGoodHeap $Heap@@133)) ))))
(assert  (=> true (forall ((|s#0@@123| T@U) (|r#0@@24| T@U) ) (!  (=> (and (and (= (type |s#0@@123|) DatatypeTypeType) (= (type |r#0@@24|) DatatypeTypeType)) (or (|_module.__default.EssentialInterruptContinuationInvariantProperties#canCall| |s#0@@123| |r#0@@24|) (and ($Is |s#0@@123| Tclass._module.state) ($Is |r#0@@24| Tclass._module.state)))) true) :qid |ARMdefsd.696:61| :skolemid |2712| :pattern ( (_module.__default.EssentialInterruptContinuationInvariantProperties |s#0@@123| |r#0@@24|)) ))))
(assert (forall (($Heap@@134 T@U) (|s#0@@124| T@U) (|r#0@@25| T@U) ) (!  (=> (and (and (and (= (type $Heap@@134) (MapType1Type refType)) (= (type |s#0@@124|) DatatypeTypeType)) (= (type |r#0@@25|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@134) ($Is |s#0@@124| Tclass._module.state)) ($Is |r#0@@25| Tclass._module.state))) (and (=> (|_module.__default.EssentialInterruptContinuationInvariantProperties#requires| |s#0@@124| |r#0@@25|) true) (=> true (|_module.__default.EssentialInterruptContinuationInvariantProperties#requires| |s#0@@124| |r#0@@25|)))) :qid |ARMdefsd.696:11| :skolemid |2713| :pattern ( (|_module.__default.EssentialInterruptContinuationInvariantProperties#requires| |s#0@@124| |r#0@@25|) ($IsGoodHeap $Heap@@134)) )))
(assert  (and (and (and (forall ((arg0@@323 T@U) (arg1@@165 T@U) (arg2@@115 T@U) ) (! (= (type (|#_module.obool.OCmp| arg0@@323 arg1@@165 arg2@@115)) DatatypeTypeType) :qid |funType:#_module.obool.OCmp| :pattern ( (|#_module.obool.OCmp| arg0@@323 arg1@@165 arg2@@115)) )) (= (type |#_module.ocmp.OTstEq|) DatatypeTypeType)) (= (type |#_module.operand.OSP|) DatatypeTypeType)) (forall ((arg0@@324 Int) ) (! (= (type (|#_module.operand.OConst| arg0@@324)) DatatypeTypeType) :qid |funType:#_module.operand.OConst| :pattern ( (|#_module.operand.OConst| arg0@@324)) ))))
(assert  (=> true (forall (($Heap@@135 T@U) (|s#0@@125| T@U) (|r#0@@26| T@U) ) (!  (=> (and (and (and (= (type $Heap@@135) (MapType1Type refType)) (= (type |s#0@@125|) DatatypeTypeType)) (= (type |r#0@@26|) DatatypeTypeType)) (or (|_module.__default.EssentialInterruptContinuationInvariantProperties#canCall| |s#0@@125| |r#0@@26|) (and (and ($IsGoodHeap $Heap@@135) ($Is |s#0@@125| Tclass._module.state)) ($Is |r#0@@26| Tclass._module.state)))) (and (and (and (|_module.__default.EssentialContinuationInvariantProperties#canCall| |s#0@@125| |r#0@@26|) (=> (_module.__default.EssentialContinuationInvariantProperties |s#0@@125| |r#0@@26|) (|_module.__default.interrupts__enabled#canCall| |r#0@@26|))) (=> (and (|_module.__default.interrupts__enabled#canCall| |r#0@@26|) (not (_module.__default.interrupts__enabled |r#0@@26|))) (and (and (|_module.__default.ValidState#canCall| |r#0@@26|) (=> (_module.__default.ValidState |r#0@@26|) (_module.state.State_q |r#0@@26|))) (=> (and (_module.state.State_q |r#0@@26|) (_module.state.ok |r#0@@26|)) (|_module.__default.evalOBool#canCall| |r#0@@26| (Lit (|#_module.obool.OCmp| (Lit |#_module.ocmp.OTstEq|) (Lit |#_module.operand.OSP|) (Lit (|#_module.operand.OConst| (LitInt 1)))))))))) (and (=> (_module.__default.EssentialInterruptContinuationInvariantProperties |s#0@@125| |r#0@@26|) (and (and (_module.__default.EssentialContinuationInvariantProperties |s#0@@125| |r#0@@26|) (not (_module.__default.interrupts__enabled |r#0@@26|))) (=> (and (_module.__default.ValidState |r#0@@26|) (_module.state.ok |r#0@@26|)) (_module.__default.evalOBool |r#0@@26| (Lit (|#_module.obool.OCmp| (Lit |#_module.ocmp.OTstEq|) (Lit |#_module.operand.OSP|) (Lit (|#_module.operand.OConst| (LitInt 1))))))))) (=> (and (and (_module.__default.EssentialContinuationInvariantProperties |s#0@@125| |r#0@@26|) (not (_module.__default.interrupts__enabled |r#0@@26|))) (=> (and (_module.__default.ValidState |r#0@@26|) (_module.state.ok |r#0@@26|)) (_module.__default.evalOBool |r#0@@26| (Lit (|#_module.obool.OCmp| (Lit |#_module.ocmp.OTstEq|) (Lit |#_module.operand.OSP|) (Lit (|#_module.operand.OConst| (LitInt 1)))))))) (_module.__default.EssentialInterruptContinuationInvariantProperties |s#0@@125| |r#0@@26|))))) :qid |ARMdefsd.696:11| :skolemid |2714| :pattern ( (_module.__default.EssentialInterruptContinuationInvariantProperties |s#0@@125| |r#0@@26|) ($IsGoodHeap $Heap@@135)) ))))
(assert  (=> true (forall (($Heap@@136 T@U) (|s#0@@126| T@U) (|r#0@@27| T@U) ) (!  (=> (and (and (and (= (type $Heap@@136) (MapType1Type refType)) (= (type |s#0@@126|) DatatypeTypeType)) (= (type |r#0@@27|) DatatypeTypeType)) (or (|_module.__default.EssentialInterruptContinuationInvariantProperties#canCall| (Lit |s#0@@126|) (Lit |r#0@@27|)) (and (and ($IsGoodHeap $Heap@@136) ($Is |s#0@@126| Tclass._module.state)) ($Is |r#0@@27| Tclass._module.state)))) (and (and (and (|_module.__default.EssentialContinuationInvariantProperties#canCall| (Lit |s#0@@126|) (Lit |r#0@@27|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.EssentialContinuationInvariantProperties (Lit |s#0@@126|) (Lit |r#0@@27|))))) (|_module.__default.interrupts__enabled#canCall| (Lit |r#0@@27|)))) (=> (and (|_module.__default.interrupts__enabled#canCall| (Lit |r#0@@27|)) (not (U_2_bool (Lit (bool_2_U (_module.__default.interrupts__enabled (Lit |r#0@@27|))))))) (and (and (|_module.__default.ValidState#canCall| (Lit |r#0@@27|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |r#0@@27|))))) (_module.state.State_q (Lit |r#0@@27|)))) (=> (and (_module.state.State_q (Lit |r#0@@27|)) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@27|)))))) (|_module.__default.evalOBool#canCall| (Lit |r#0@@27|) (Lit (|#_module.obool.OCmp| (Lit |#_module.ocmp.OTstEq|) (Lit |#_module.operand.OSP|) (Lit (|#_module.operand.OConst| (LitInt 1)))))))))) (and (=> (_module.__default.EssentialInterruptContinuationInvariantProperties (Lit |s#0@@126|) (Lit |r#0@@27|)) (and (and (_module.__default.EssentialContinuationInvariantProperties (Lit |s#0@@126|) (Lit |r#0@@27|)) (not (U_2_bool (Lit (bool_2_U (_module.__default.interrupts__enabled (Lit |r#0@@27|))))))) (=> (and (_module.__default.ValidState (Lit |r#0@@27|)) (_module.state.ok (Lit |r#0@@27|))) (_module.__default.evalOBool (Lit |r#0@@27|) (Lit (|#_module.obool.OCmp| (Lit |#_module.ocmp.OTstEq|) (Lit |#_module.operand.OSP|) (Lit (|#_module.operand.OConst| (LitInt 1))))))))) (=> (and (and (_module.__default.EssentialContinuationInvariantProperties (Lit |s#0@@126|) (Lit |r#0@@27|)) (not (U_2_bool (Lit (bool_2_U (_module.__default.interrupts__enabled (Lit |r#0@@27|))))))) (=> (and (_module.__default.ValidState (Lit |r#0@@27|)) (_module.state.ok (Lit |r#0@@27|))) (_module.__default.evalOBool (Lit |r#0@@27|) (Lit (|#_module.obool.OCmp| (Lit |#_module.ocmp.OTstEq|) (Lit |#_module.operand.OSP|) (Lit (|#_module.operand.OConst| (LitInt 1)))))))) (_module.__default.EssentialInterruptContinuationInvariantProperties (Lit |s#0@@126|) (Lit |r#0@@27|)))))) :qid |ARMdefsd.696:11| :weight 3 :skolemid |2715| :pattern ( (_module.__default.EssentialInterruptContinuationInvariantProperties (Lit |s#0@@126|) (Lit |r#0@@27|)) ($IsGoodHeap $Heap@@136)) ))))
(assert  (=> true (forall ((|s#0@@127| T@U) ) (!  (=> (and (= (type |s#0@@127|) DatatypeTypeType) (or (|_module.__default.UsermodeContinuationPrecondition#canCall| |s#0@@127|) (and ($Is |s#0@@127| Tclass._module.state) (_module.__default.ValidState |s#0@@127|)))) true) :qid |ARMdefsd.704:53| :skolemid |2716| :pattern ( (_module.__default.UsermodeContinuationPrecondition |s#0@@127|)) ))))
(assert (forall ((|s#0@@128| T@U) ) (!  (=> (and (= (type |s#0@@128|) DatatypeTypeType) ($Is |s#0@@128| Tclass._module.state)) (and (=> (|_module.__default.UsermodeContinuationPrecondition#requires| |s#0@@128|) (_module.__default.ValidState |s#0@@128|)) (=> (_module.__default.ValidState |s#0@@128|) (|_module.__default.UsermodeContinuationPrecondition#requires| |s#0@@128|)))) :qid |ARMdefsd.704:53| :skolemid |2717| :pattern ( (|_module.__default.UsermodeContinuationPrecondition#requires| |s#0@@128|)) )))
(assert  (=> true (forall ((|s#0@@129| T@U) (|r#0@@28| T@U) ) (!  (=> (and (and (and (= (type |s#0@@129|) DatatypeTypeType) (= (type |r#0@@28|) DatatypeTypeType)) (or (|_module.__default.UsermodeContinuationInvariant#canCall| |s#0@@129| |r#0@@28|) (and (and ($Is |s#0@@129| Tclass._module.state) ($Is |r#0@@28| Tclass._module.state)) (_module.__default.ValidState |s#0@@129|)))) (_module.__default.UsermodeContinuationInvariant |s#0@@129| |r#0@@28|)) (_module.__default.EssentialContinuationInvariantProperties |s#0@@129| |r#0@@28|)) :qid |ARMdefsd.707:50| :skolemid |2718| :pattern ( (_module.__default.UsermodeContinuationInvariant |s#0@@129| |r#0@@28|)) ))))
(assert (forall ((|s#0@@130| T@U) (|r#0@@29| T@U) ) (!  (=> (and (and (= (type |s#0@@130|) DatatypeTypeType) (= (type |r#0@@29|) DatatypeTypeType)) (and ($Is |s#0@@130| Tclass._module.state) ($Is |r#0@@29| Tclass._module.state))) (and (=> (|_module.__default.UsermodeContinuationInvariant#requires| |s#0@@130| |r#0@@29|) (_module.__default.ValidState |s#0@@130|)) (=> (_module.__default.ValidState |s#0@@130|) (|_module.__default.UsermodeContinuationInvariant#requires| |s#0@@130| |r#0@@29|)))) :qid |ARMdefsd.707:50| :skolemid |2719| :pattern ( (|_module.__default.UsermodeContinuationInvariant#requires| |s#0@@130| |r#0@@29|)) )))
(assert  (=> true (forall ((|s#0@@131| T@U) ) (!  (=> (and (= (type |s#0@@131|) DatatypeTypeType) (or (|_module.__default.InterruptContinuationPrecondition#canCall| |s#0@@131|) (and ($Is |s#0@@131| Tclass._module.state) (_module.__default.ValidState |s#0@@131|)))) true) :qid |ARMdefsd.712:54| :skolemid |2720| :pattern ( (_module.__default.InterruptContinuationPrecondition |s#0@@131|)) ))))
(assert (forall ((|s#0@@132| T@U) ) (!  (=> (and (= (type |s#0@@132|) DatatypeTypeType) ($Is |s#0@@132| Tclass._module.state)) (and (=> (|_module.__default.InterruptContinuationPrecondition#requires| |s#0@@132|) (_module.__default.ValidState |s#0@@132|)) (=> (_module.__default.ValidState |s#0@@132|) (|_module.__default.InterruptContinuationPrecondition#requires| |s#0@@132|)))) :qid |ARMdefsd.712:54| :skolemid |2721| :pattern ( (|_module.__default.InterruptContinuationPrecondition#requires| |s#0@@132|)) )))
(assert (= (type |#_module.operand.OLR|) DatatypeTypeType))
(assert  (=> true (forall ((|s#0@@133| T@U) (|r#0@@30| T@U) ) (!  (=> (and (and (and (= (type |s#0@@133|) DatatypeTypeType) (= (type |r#0@@30|) DatatypeTypeType)) (or (|_module.__default.InterruptContinuationInvariant#canCall| |s#0@@133| |r#0@@30|) (and (and ($Is |s#0@@133| Tclass._module.state) ($Is |r#0@@30| Tclass._module.state)) (_module.__default.ValidState |s#0@@133|)))) (_module.__default.InterruptContinuationInvariant |s#0@@133| |r#0@@30|)) (and (_module.__default.EssentialInterruptContinuationInvariantProperties |s#0@@133| |r#0@@30|) (=> (_module.__default.ValidState |r#0@@30|) (= (_module.__default.OperandContents |r#0@@30| (Lit |#_module.operand.OLR|)) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_sub_boogie (_module.__default.OperandContents |s#0@@133| (Lit |#_module.operand.OLR|)) 4)))))) :qid |ARMdefsd.715:51| :skolemid |2722| :pattern ( (_module.__default.InterruptContinuationInvariant |s#0@@133| |r#0@@30|)) ))))
(assert (forall ((|s#0@@134| T@U) (|r#0@@31| T@U) ) (!  (=> (and (and (= (type |s#0@@134|) DatatypeTypeType) (= (type |r#0@@31|) DatatypeTypeType)) (and ($Is |s#0@@134| Tclass._module.state) ($Is |r#0@@31| Tclass._module.state))) (and (=> (|_module.__default.InterruptContinuationInvariant#requires| |s#0@@134| |r#0@@31|) (_module.__default.ValidState |s#0@@134|)) (=> (_module.__default.ValidState |s#0@@134|) (|_module.__default.InterruptContinuationInvariant#requires| |s#0@@134| |r#0@@31|)))) :qid |ARMdefsd.715:51| :skolemid |2723| :pattern ( (|_module.__default.InterruptContinuationInvariant#requires| |s#0@@134| |r#0@@31|)) )))
(assert (forall (($ly@@187 T@U) (|addr#0@@15| Int) ) (!  (=> (= (type $ly@@187) LayerTypeType) (= (_module.__default.PageBase ($LS $ly@@187) |addr#0@@15|) (_module.__default.PageBase $ly@@187 |addr#0@@15|))) :qid |ARMdefsd.728:20| :skolemid |2724| :pattern ( (_module.__default.PageBase ($LS $ly@@187) |addr#0@@15|)) )))
(assert (forall (($ly@@188 T@U) (|addr#0@@16| Int) ) (!  (=> (= (type $ly@@188) LayerTypeType) (= (_module.__default.PageBase $ly@@188 |addr#0@@16|) (_module.__default.PageBase $LZ |addr#0@@16|))) :qid |ARMdefsd.728:20| :skolemid |2725| :pattern ( (_module.__default.PageBase (AsFuelBottom $ly@@188) |addr#0@@16|)) )))
(assert  (=> true (forall (($ly@@189 T@U) (|addr#0@@17| Int) ) (!  (=> (and (= (type $ly@@189) LayerTypeType) (or (|_module.__default.PageBase#canCall| |addr#0@@17|) (_module.__default.isUInt32 |addr#0@@17|))) (and (_module.__default.PageAligned StartFuel__module._default.PageAligned (_module.__default.PageBase $ly@@189 |addr#0@@17|)) (_module.__default.isUInt32 (_module.__default.PageBase $ly@@189 |addr#0@@17|)))) :qid |ARMdefsd.728:20| :skolemid |2726| :pattern ( (_module.__default.PageBase $ly@@189 |addr#0@@17|)) ))))
(assert (forall (($ly@@190 T@U) (|addr#0@@18| Int) ) (!  (=> (and (= (type $ly@@190) LayerTypeType) (_module.__default.isUInt32 |addr#0@@18|)) (and (=> (|_module.__default.PageBase#requires| $ly@@190 |addr#0@@18|) true) (=> true (|_module.__default.PageBase#requires| $ly@@190 |addr#0@@18|)))) :qid |ARMdefsd.728:20| :skolemid |2727| :pattern ( (|_module.__default.PageBase#requires| $ly@@190 |addr#0@@18|)) )))
(assert  (and (and (= (type MoreFuel__module._default.PageAligned0) LayerTypeType) (= (type StartFuelAssert__module._default.PageAligned) LayerTypeType)) (= (type StartFuel__module._default.BitwiseMaskHigh) LayerTypeType)))
(assert  (=> true (forall (($ly@@191 T@U) (|addr#0@@19| Int) ) (!  (=> (and (= (type $ly@@191) LayerTypeType) (or (|_module.__default.PageBase#canCall| |addr#0@@19|) (_module.__default.isUInt32 |addr#0@@19|))) (and (|_module.__default.BitwiseMaskHigh#canCall| |addr#0@@19| (LitInt 12)) (and (and (and (= StartFuel__module._default.PageAligned ($LS MoreFuel__module._default.PageAligned0)) (= StartFuelAssert__module._default.PageAligned ($LS ($LS MoreFuel__module._default.PageAligned0)))) (= (AsFuelBottom MoreFuel__module._default.PageAligned0) MoreFuel__module._default.PageAligned0)) (= (_module.__default.PageBase ($LS $ly@@191) |addr#0@@19|) (_module.__default.BitwiseMaskHigh StartFuel__module._default.BitwiseMaskHigh |addr#0@@19| (LitInt 12)))))) :qid |ARMdefsd.728:20| :skolemid |2728| :pattern ( (_module.__default.PageBase ($LS $ly@@191) |addr#0@@19|)) ))))
(assert (= (type MoreFuel__module._default.PageAligned1) LayerTypeType))
(assert  (=> true (forall (($ly@@192 T@U) (|addr#0@@20| Int) ) (!  (=> (and (= (type $ly@@192) LayerTypeType) (or (|_module.__default.PageBase#canCall| (LitInt |addr#0@@20|)) (_module.__default.isUInt32 |addr#0@@20|))) (and (|_module.__default.BitwiseMaskHigh#canCall| (LitInt |addr#0@@20|) (LitInt 12)) (and (and (and (= StartFuel__module._default.PageAligned ($LS MoreFuel__module._default.PageAligned1)) (= StartFuelAssert__module._default.PageAligned ($LS ($LS MoreFuel__module._default.PageAligned1)))) (= (AsFuelBottom MoreFuel__module._default.PageAligned1) MoreFuel__module._default.PageAligned1)) (= (_module.__default.PageBase ($LS $ly@@192) (LitInt |addr#0@@20|)) (_module.__default.BitwiseMaskHigh StartFuel__module._default.BitwiseMaskHigh (LitInt |addr#0@@20|) (LitInt 12)))))) :qid |ARMdefsd.728:20| :weight 3 :skolemid |2729| :pattern ( (_module.__default.PageBase ($LS $ly@@192) (LitInt |addr#0@@20|))) ))))
(assert  (=> true (=> true (and (_module.__default.PageAligned StartFuel__module._default.PageAligned _module.__default.PhysBase) (and (_module.__default.isUInt32 _module.__default.PhysBase) (_module.__default.WordAligned StartFuel__module._default.WordAligned _module.__default.PhysBase))))))
(assert  (=> |_module.__default.PhysBase#requires| true))
(assert  (=> true |_module.__default.PhysBase#requires|))
(assert  (=> true (forall ((|a#0@@18| Int) ) (!  (=> (or (|_module.__default.addrIsSecure#canCall| |a#0@@18|) (and (_module.__default.isUInt32 |a#0@@18|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@18|))) true) :qid |ARMdefsd.742:32| :skolemid |2730| :pattern ( (_module.__default.addrIsSecure |a#0@@18|)) ))))
(assert (forall ((|a#0@@19| Int) ) (!  (=> (and (_module.__default.isUInt32 |a#0@@19|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@19|)) (and (=> (|_module.__default.addrIsSecure#requires| |a#0@@19|) true) (=> true (|_module.__default.addrIsSecure#requires| |a#0@@19|)))) :qid |ARMdefsd.742:32| :skolemid |2731| :pattern ( (|_module.__default.addrIsSecure#requires| |a#0@@19|)) )))
(assert  (=> true (forall ((|pt#0@@7| T@U) ) (!  (=> (and (= (type |pt#0@@7|) (SeqType BoxType)) (or (|_module.__default.WellformedAbsPTable#canCall| |pt#0@@7|) ($Is |pt#0@@7| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))))) true) :qid |ARMdefsd.755:31| :skolemid |2732| :pattern ( (_module.__default.WellformedAbsPTable |pt#0@@7|)) ))))
(assert (forall (($Heap@@137 T@U) (|pt#0@@8| T@U) ) (!  (=> (and (and (= (type $Heap@@137) (MapType1Type refType)) (= (type |pt#0@@8|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@137) ($Is |pt#0@@8| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))))) (and (=> (|_module.__default.WellformedAbsPTable#requires| |pt#0@@8|) true) (=> true (|_module.__default.WellformedAbsPTable#requires| |pt#0@@8|)))) :qid |ARMdefsd.755:11| :skolemid |2733| :pattern ( (|_module.__default.WellformedAbsPTable#requires| |pt#0@@8|) ($IsGoodHeap $Heap@@137)) )))
(assert  (=> true (forall (($Heap@@138 T@U) (|pt#0@@9| T@U) ) (!  (=> (and (and (= (type $Heap@@138) (MapType1Type refType)) (= (type |pt#0@@9|) (SeqType BoxType))) (or (|_module.__default.WellformedAbsPTable#canCall| |pt#0@@9|) (and ($IsGoodHeap $Heap@@138) ($Is |pt#0@@9| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))))) (and (=> (= (|Seq#Length| |pt#0@@9|) (LitInt 1024)) (forall ((|i#0@@8| Int) ) (!  (=> (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@8|))) (and (|_module.__default.fromJust#canCall| (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@8|))) (|_module.__default.WellformedAbsL2PTable#canCall| ($Unbox (SeqType BoxType) (_module.__default.fromJust (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@8|))))))) :qid |ARMdefsd.758:19| :skolemid |2734| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@8|))) ))) (and (=> (_module.__default.WellformedAbsPTable |pt#0@@9|) (and (= (|Seq#Length| |pt#0@@9|) (LitInt 1024)) (forall ((|i#0@@9| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |i#0@@9|) (INTERNAL_lt_boogie |i#0@@9| (|Seq#Length| |pt#0@@9|))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@9|)))) (_module.__default.WellformedAbsL2PTable ($Unbox (SeqType BoxType) (_module.__default.fromJust (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@9|))))))) :qid |ARMdefsd.758:19| :skolemid |2735| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@9|))) )))) (=> (and (= (|Seq#Length| |pt#0@@9|) (LitInt 1024)) (forall ((|i#0@@10| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |i#0@@10|) (INTERNAL_lt_boogie |i#0@@10| (|Seq#Length| |pt#0@@9|))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@10|)))) (_module.__default.WellformedAbsL2PTable ($Unbox (SeqType BoxType) (_module.__default.fromJust (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@10|))))))) :qid |ARMdefsd.758:19| :skolemid |2735| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| |i#0@@10|))) ))) (_module.__default.WellformedAbsPTable |pt#0@@9|))))) :qid |ARMdefsd.755:11| :skolemid |2736| :pattern ( (_module.__default.WellformedAbsPTable |pt#0@@9|) ($IsGoodHeap $Heap@@138)) ))))
(assert  (=> true (forall (($Heap@@139 T@U) (|pt#0@@10| T@U) ) (!  (=> (and (and (= (type $Heap@@139) (MapType1Type refType)) (= (type |pt#0@@10|) (SeqType BoxType))) (or (|_module.__default.WellformedAbsPTable#canCall| (Lit |pt#0@@10|)) (and ($IsGoodHeap $Heap@@139) ($Is |pt#0@@10| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))))) (and (=> (= (|Seq#Length| (Lit |pt#0@@10|)) (LitInt 1024)) (forall ((|i#1@@6| Int) ) (!  (=> (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) |i#1@@6|))) (and (|_module.__default.fromJust#canCall| (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) |i#1@@6|))) (|_module.__default.WellformedAbsL2PTable#canCall| ($Unbox (SeqType BoxType) (_module.__default.fromJust (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) |i#1@@6|))))))) :qid |ARMdefsd.758:19| :skolemid |2737| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@10| |i#1@@6|))) ))) (and (=> (_module.__default.WellformedAbsPTable (Lit |pt#0@@10|)) (and (= (|Seq#Length| (Lit |pt#0@@10|)) (LitInt 1024)) (forall ((|i#1@@7| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |i#1@@7|) (INTERNAL_lt_boogie |i#1@@7| (|Seq#Length| (Lit |pt#0@@10|)))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) |i#1@@7|)))) (_module.__default.WellformedAbsL2PTable ($Unbox (SeqType BoxType) (_module.__default.fromJust (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) |i#1@@7|))))))) :qid |ARMdefsd.758:19| :skolemid |2738| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@10| |i#1@@7|))) )))) (=> (and (= (|Seq#Length| (Lit |pt#0@@10|)) (LitInt 1024)) (forall ((|i#1@@8| Int) ) (!  (=> true (=> (and (and (INTERNAL_le_boogie 0 |i#1@@8|) (INTERNAL_lt_boogie |i#1@@8| (|Seq#Length| (Lit |pt#0@@10|)))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) |i#1@@8|)))) (_module.__default.WellformedAbsL2PTable ($Unbox (SeqType BoxType) (_module.__default.fromJust (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) |i#1@@8|))))))) :qid |ARMdefsd.758:19| :skolemid |2738| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@10| |i#1@@8|))) ))) (_module.__default.WellformedAbsPTable (Lit |pt#0@@10|)))))) :qid |ARMdefsd.755:11| :weight 3 :skolemid |2739| :pattern ( (_module.__default.WellformedAbsPTable (Lit |pt#0@@10|)) ($IsGoodHeap $Heap@@139)) ))))
(assert  (=> true (forall ((|pt#0@@11| T@U) ) (!  (=> (and (= (type |pt#0@@11|) (SeqType BoxType)) (or (|_module.__default.WellformedAbsL2PTable#canCall| |pt#0@@11|) ($Is |pt#0@@11| (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))) true) :qid |ARMdefsd.761:33| :skolemid |2740| :pattern ( (_module.__default.WellformedAbsL2PTable |pt#0@@11|)) ))))
(assert (forall ((|pt#0@@12| T@U) ) (!  (=> (and (= (type |pt#0@@12|) (SeqType BoxType)) ($Is |pt#0@@12| (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))) (and (=> (|_module.__default.WellformedAbsL2PTable#requires| |pt#0@@12|) true) (=> true (|_module.__default.WellformedAbsL2PTable#requires| |pt#0@@12|)))) :qid |ARMdefsd.761:33| :skolemid |2741| :pattern ( (|_module.__default.WellformedAbsL2PTable#requires| |pt#0@@12|)) )))
(assert  (=> true (forall ((|pt#0@@13| T@U) ) (!  (=> (and (= (type |pt#0@@13|) (SeqType BoxType)) (or (|_module.__default.WellformedAbsL2PTable#canCall| |pt#0@@13|) ($Is |pt#0@@13| (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))) (and (=> (= (|Seq#Length| |pt#0@@13|) (LitInt 256)) (forall ((|i#0@@11| Int) ) (!  (=> (INTERNAL_lt_boogie |i#0@@11| (|Seq#Length| |pt#0@@13|)) (|_module.__default.WellformedAbsPTE#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| |i#0@@11|)))) :qid |ARMdefsd.763:34| :skolemid |2742| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| |i#0@@11|))) ))) (and (=> (_module.__default.WellformedAbsL2PTable |pt#0@@13|) (and (= (|Seq#Length| |pt#0@@13|) (LitInt 256)) (forall ((|i#0@@12| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@12|) (INTERNAL_lt_boogie |i#0@@12| (|Seq#Length| |pt#0@@13|))) (_module.__default.WellformedAbsPTE ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| |i#0@@12|))))) :qid |ARMdefsd.763:34| :skolemid |2743| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| |i#0@@12|))) )))) (=> (and (= (|Seq#Length| |pt#0@@13|) (LitInt 256)) (forall ((|i#0@@13| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@13|) (INTERNAL_lt_boogie |i#0@@13| (|Seq#Length| |pt#0@@13|))) (_module.__default.WellformedAbsPTE ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| |i#0@@13|))))) :qid |ARMdefsd.763:34| :skolemid |2743| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| |i#0@@13|))) ))) (_module.__default.WellformedAbsL2PTable |pt#0@@13|))))) :qid |ARMdefsd.761:33| :skolemid |2744| :pattern ( (_module.__default.WellformedAbsL2PTable |pt#0@@13|)) ))))
(assert  (=> true (forall ((|pt#0@@14| T@U) ) (!  (=> (and (= (type |pt#0@@14|) (SeqType BoxType)) (or (|_module.__default.WellformedAbsL2PTable#canCall| (Lit |pt#0@@14|)) ($Is |pt#0@@14| (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))) (and (=> (= (|Seq#Length| (Lit |pt#0@@14|)) (LitInt 256)) (forall ((|i#1@@9| Int) ) (!  (=> (INTERNAL_lt_boogie |i#1@@9| (|Seq#Length| (Lit |pt#0@@14|))) (|_module.__default.WellformedAbsPTE#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@14|) |i#1@@9|)))) :qid |ARMdefsd.763:34| :skolemid |2745| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@14| |i#1@@9|))) ))) (and (=> (_module.__default.WellformedAbsL2PTable (Lit |pt#0@@14|)) (and (= (|Seq#Length| (Lit |pt#0@@14|)) (LitInt 256)) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@10|) (INTERNAL_lt_boogie |i#1@@10| (|Seq#Length| (Lit |pt#0@@14|)))) (_module.__default.WellformedAbsPTE ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@14|) |i#1@@10|))))) :qid |ARMdefsd.763:34| :skolemid |2746| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@14| |i#1@@10|))) )))) (=> (and (= (|Seq#Length| (Lit |pt#0@@14|)) (LitInt 256)) (forall ((|i#1@@11| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@11|) (INTERNAL_lt_boogie |i#1@@11| (|Seq#Length| (Lit |pt#0@@14|)))) (_module.__default.WellformedAbsPTE ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@14|) |i#1@@11|))))) :qid |ARMdefsd.763:34| :skolemid |2746| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@14| |i#1@@11|))) ))) (_module.__default.WellformedAbsL2PTable (Lit |pt#0@@14|)))))) :qid |ARMdefsd.761:33| :weight 3 :skolemid |2747| :pattern ( (_module.__default.WellformedAbsL2PTable (Lit |pt#0@@14|))) ))))
(assert  (=> true (forall ((|pte#0| T@U) ) (!  (=> (and (= (type |pte#0|) DatatypeTypeType) (or (|_module.__default.WellformedAbsPTE#canCall| |pte#0|) ($Is |pte#0| (Tclass._module.Maybe Tclass._module.AbsPTE)))) true) :qid |ARMdefsd.766:28| :skolemid |2748| :pattern ( (_module.__default.WellformedAbsPTE |pte#0|)) ))))
(assert (forall (($Heap@@140 T@U) (|pte#0@@0| T@U) ) (!  (=> (and (and (= (type $Heap@@140) (MapType1Type refType)) (= (type |pte#0@@0|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@140) ($Is |pte#0@@0| (Tclass._module.Maybe Tclass._module.AbsPTE)))) (and (=> (|_module.__default.WellformedAbsPTE#requires| |pte#0@@0|) true) (=> true (|_module.__default.WellformedAbsPTE#requires| |pte#0@@0|)))) :qid |ARMdefsd.766:11| :skolemid |2749| :pattern ( (|_module.__default.WellformedAbsPTE#requires| |pte#0@@0|) ($IsGoodHeap $Heap@@140)) )))
(assert  (=> true (forall (($Heap@@141 T@U) (|pte#0@@1| T@U) ) (!  (=> (and (and (= (type $Heap@@141) (MapType1Type refType)) (= (type |pte#0@@1|) DatatypeTypeType)) (or (|_module.__default.WellformedAbsPTE#canCall| |pte#0@@1|) (and ($IsGoodHeap $Heap@@141) ($Is |pte#0@@1| (Tclass._module.Maybe Tclass._module.AbsPTE))))) (and (=> (_module.Maybe.Just_q |pte#0@@1|) (and (and (_module.AbsPTE.AbsPTE_q ($Unbox DatatypeTypeType (_module.Maybe.v |pte#0@@1|))) (|_module.__default.PageAligned#canCall| (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v |pte#0@@1|))))) (=> (_module.__default.PageAligned StartFuel__module._default.PageAligned (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v |pte#0@@1|)))) (and (and (_module.AbsPTE.AbsPTE_q ($Unbox DatatypeTypeType (_module.Maybe.v |pte#0@@1|))) |_module.__default.PhysBase#canCall|) (|_module.__default.isUInt32#canCall| (INTERNAL_add_boogie (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v |pte#0@@1|))) _module.__default.PhysBase)))))) (and (=> (_module.__default.WellformedAbsPTE |pte#0@@1|) (=> (_module.Maybe.Just_q |pte#0@@1|) (and (_module.__default.PageAligned StartFuel__module._default.PageAligned (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v |pte#0@@1|)))) (_module.__default.isUInt32 (INTERNAL_add_boogie (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v |pte#0@@1|))) _module.__default.PhysBase))))) (=> (=> (_module.Maybe.Just_q |pte#0@@1|) (and (_module.__default.PageAligned StartFuel__module._default.PageAligned (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v |pte#0@@1|)))) (_module.__default.isUInt32 (INTERNAL_add_boogie (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v |pte#0@@1|))) _module.__default.PhysBase)))) (_module.__default.WellformedAbsPTE |pte#0@@1|))))) :qid |ARMdefsd.766:11| :skolemid |2750| :pattern ( (_module.__default.WellformedAbsPTE |pte#0@@1|) ($IsGoodHeap $Heap@@141)) ))))
(assert  (=> true (forall (($Heap@@142 T@U) (|pte#0@@2| T@U) ) (!  (=> (and (and (= (type $Heap@@142) (MapType1Type refType)) (= (type |pte#0@@2|) DatatypeTypeType)) (or (|_module.__default.WellformedAbsPTE#canCall| (Lit |pte#0@@2|)) (and ($IsGoodHeap $Heap@@142) ($Is |pte#0@@2| (Tclass._module.Maybe Tclass._module.AbsPTE))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.Maybe.Just_q (Lit |pte#0@@2|))))) (and (and (_module.AbsPTE.AbsPTE_q (Lit ($Unbox DatatypeTypeType (_module.Maybe.v (Lit |pte#0@@2|))))) (|_module.__default.PageAligned#canCall| (LitInt (_module.AbsPTE.phys (Lit ($Unbox DatatypeTypeType (_module.Maybe.v (Lit |pte#0@@2|)))))))) (=> (_module.__default.PageAligned StartFuel__module._default.PageAligned (LitInt (_module.AbsPTE.phys (Lit ($Unbox DatatypeTypeType (_module.Maybe.v (Lit |pte#0@@2|))))))) (and (and (_module.AbsPTE.AbsPTE_q (Lit ($Unbox DatatypeTypeType (_module.Maybe.v (Lit |pte#0@@2|))))) |_module.__default.PhysBase#canCall|) (|_module.__default.isUInt32#canCall| (INTERNAL_add_boogie (_module.AbsPTE.phys (Lit ($Unbox DatatypeTypeType (_module.Maybe.v (Lit |pte#0@@2|))))) _module.__default.PhysBase)))))) (and (=> (_module.__default.WellformedAbsPTE (Lit |pte#0@@2|)) (=> (_module.Maybe.Just_q (Lit |pte#0@@2|)) (and (_module.__default.PageAligned StartFuel__module._default.PageAligned (LitInt (_module.AbsPTE.phys (Lit ($Unbox DatatypeTypeType (_module.Maybe.v (Lit |pte#0@@2|))))))) (_module.__default.isUInt32 (INTERNAL_add_boogie (_module.AbsPTE.phys (Lit ($Unbox DatatypeTypeType (_module.Maybe.v (Lit |pte#0@@2|))))) _module.__default.PhysBase))))) (=> (=> (_module.Maybe.Just_q (Lit |pte#0@@2|)) (and (_module.__default.PageAligned StartFuel__module._default.PageAligned (LitInt (_module.AbsPTE.phys (Lit ($Unbox DatatypeTypeType (_module.Maybe.v (Lit |pte#0@@2|))))))) (_module.__default.isUInt32 (INTERNAL_add_boogie (_module.AbsPTE.phys (Lit ($Unbox DatatypeTypeType (_module.Maybe.v (Lit |pte#0@@2|))))) _module.__default.PhysBase)))) (_module.__default.WellformedAbsPTE (Lit |pte#0@@2|)))))) :qid |ARMdefsd.766:11| :weight 3 :skolemid |2751| :pattern ( (_module.__default.WellformedAbsPTE (Lit |pte#0@@2|)) ($IsGoodHeap $Heap@@142)) ))))
(assert (forall ((arg0@@325 T@U) (arg1@@166 T@U) ) (! (= (type (_module.__default.ExtractAbsPageTable_k arg0@@325 arg1@@166)) DatatypeTypeType) :qid |funType:_module.__default.ExtractAbsPageTable_k| :pattern ( (_module.__default.ExtractAbsPageTable_k arg0@@325 arg1@@166)) )))
(assert  (=> true (forall (($Heap@@143 T@U) (|m#0@@16| T@U) (|ttbr#0| T@U) ) (!  (=> (and (and (and (= (type $Heap@@143) (MapType1Type refType)) (= (type |m#0@@16|) DatatypeTypeType)) (= (type |ttbr#0|) DatatypeTypeType)) (or (|_module.__default.ExtractAbsPageTable_k#canCall| |m#0@@16| |ttbr#0|) (and (and (and ($IsGoodHeap $Heap@@143) ($Is |m#0@@16| Tclass._module.memstate)) ($Is |ttbr#0| Tclass._module.TTBR)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@16|)))) (and (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsPageTable_k |m#0@@16| |ttbr#0|)) (_module.__default.WellformedAbsPTable ($Unbox (SeqType BoxType) (_module.__default.fromJust (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))) (_module.__default.ExtractAbsPageTable_k |m#0@@16| |ttbr#0|))))) ($Is (_module.__default.ExtractAbsPageTable_k |m#0@@16| |ttbr#0|) (Tclass._module.Maybe (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))))) :qid |ARMdefsd.771:10| :skolemid |2752| :pattern ( (_module.__default.ExtractAbsPageTable_k |m#0@@16| |ttbr#0|) ($IsGoodHeap $Heap@@143)) ))))
(assert (forall (($Heap@@144 T@U) (|m#0@@17| T@U) (|ttbr#0@@0| T@U) ) (!  (=> (and (and (and (= (type $Heap@@144) (MapType1Type refType)) (= (type |m#0@@17|) DatatypeTypeType)) (= (type |ttbr#0@@0|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@144) ($Is |m#0@@17| Tclass._module.memstate)) ($Is |ttbr#0@@0| Tclass._module.TTBR))) (and (=> (|_module.__default.ExtractAbsPageTable_k#requires| |m#0@@17| |ttbr#0@@0|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@17|)) (=> (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@17|) (|_module.__default.ExtractAbsPageTable_k#requires| |m#0@@17| |ttbr#0@@0|)))) :qid |ARMdefsd.771:10| :skolemid |2753| :pattern ( (|_module.__default.ExtractAbsPageTable_k#requires| |m#0@@17| |ttbr#0@@0|) ($IsGoodHeap $Heap@@144)) )))
(assert  (and (forall ((arg0@@326 T@U) (arg1@@167 T@U) (arg2@@116 Int) ) (! (= (type (_module.__default.ExtractAbsL1PTable arg0@@326 arg1@@167 arg2@@116)) (SeqType BoxType)) :qid |funType:_module.__default.ExtractAbsL1PTable| :pattern ( (_module.__default.ExtractAbsL1PTable arg0@@326 arg1@@167 arg2@@116)) )) (= (type StartFuel__module._default.ExtractAbsL1PTable) LayerTypeType)))
(assert  (=> true (forall (($Heap@@145 T@U) (|m#0@@18| T@U) (|ttbr#0@@1| T@U) ) (!  (=> (and (and (and (= (type $Heap@@145) (MapType1Type refType)) (= (type |m#0@@18|) DatatypeTypeType)) (= (type |ttbr#0@@1|) DatatypeTypeType)) (or (|_module.__default.ExtractAbsPageTable_k#canCall| |m#0@@18| |ttbr#0@@1|) (and (and (and ($IsGoodHeap $Heap@@145) ($Is |m#0@@18| Tclass._module.memstate)) ($Is |ttbr#0@@1| Tclass._module.TTBR)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@18|)))) (and (and (and (_module.TTBR.TTBR_q |ttbr#0@@1|) |_module.__default.PhysBase#canCall|) (and (|_module.__default.ValidAbsL1PTable#canCall| |m#0@@18| (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@1|) _module.__default.PhysBase)) (=> (_module.__default.ValidAbsL1PTable |m#0@@18| (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@1|) _module.__default.PhysBase)) (|_module.__default.ExtractAbsL1PTable#canCall| |m#0@@18| (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@1|) _module.__default.PhysBase))))) (= (_module.__default.ExtractAbsPageTable_k |m#0@@18| |ttbr#0@@1|) (ite (_module.__default.ValidAbsL1PTable |m#0@@18| (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@1|) _module.__default.PhysBase)) (|#_module.Maybe.Just| ($Box (_module.__default.ExtractAbsL1PTable StartFuel__module._default.ExtractAbsL1PTable |m#0@@18| (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@1|) _module.__default.PhysBase)))) |#_module.Maybe.Nothing|)))) :qid |ARMdefsd.771:10| :skolemid |2754| :pattern ( (_module.__default.ExtractAbsPageTable_k |m#0@@18| |ttbr#0@@1|) ($IsGoodHeap $Heap@@145)) ))))
(assert  (=> true (forall (($Heap@@146 T@U) (|m#0@@19| T@U) (|ttbr#0@@2| T@U) ) (!  (=> (and (and (and (= (type $Heap@@146) (MapType1Type refType)) (= (type |m#0@@19|) DatatypeTypeType)) (= (type |ttbr#0@@2|) DatatypeTypeType)) (or (|_module.__default.ExtractAbsPageTable_k#canCall| (Lit |m#0@@19|) (Lit |ttbr#0@@2|)) (and (and (and ($IsGoodHeap $Heap@@146) ($Is |m#0@@19| Tclass._module.memstate)) ($Is |ttbr#0@@2| Tclass._module.TTBR)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |m#0@@19|))))) (and (and (and (_module.TTBR.TTBR_q (Lit |ttbr#0@@2|)) |_module.__default.PhysBase#canCall|) (and (|_module.__default.ValidAbsL1PTable#canCall| (Lit |m#0@@19|) (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@2|)) _module.__default.PhysBase)) (=> (_module.__default.ValidAbsL1PTable (Lit |m#0@@19|) (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@2|)) _module.__default.PhysBase)) (|_module.__default.ExtractAbsL1PTable#canCall| (Lit |m#0@@19|) (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@2|)) _module.__default.PhysBase))))) (= (_module.__default.ExtractAbsPageTable_k (Lit |m#0@@19|) (Lit |ttbr#0@@2|)) (ite (_module.__default.ValidAbsL1PTable (Lit |m#0@@19|) (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@2|)) _module.__default.PhysBase)) (|#_module.Maybe.Just| ($Box (_module.__default.ExtractAbsL1PTable StartFuel__module._default.ExtractAbsL1PTable (Lit |m#0@@19|) (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@2|)) _module.__default.PhysBase)))) |#_module.Maybe.Nothing|)))) :qid |ARMdefsd.771:10| :weight 3 :skolemid |2755| :pattern ( (_module.__default.ExtractAbsPageTable_k (Lit |m#0@@19|) (Lit |ttbr#0@@2|)) ($IsGoodHeap $Heap@@146)) ))))
(assert  (=> true (forall (($Heap@@147 T@U) (|s#0@@135| T@U) ) (!  (=> (and (and (= (type $Heap@@147) (MapType1Type refType)) (= (type |s#0@@135|) DatatypeTypeType)) (or (|_module.__default.ExtractAbsPageTable#canCall| |s#0@@135|) (and (and ($IsGoodHeap $Heap@@147) ($Is |s#0@@135| Tclass._module.state)) (_module.__default.ValidState |s#0@@135|)))) (and (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsPageTable |s#0@@135|)) (_module.__default.WellformedAbsPTable ($Unbox (SeqType BoxType) (_module.__default.fromJust (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))) (_module.__default.ExtractAbsPageTable |s#0@@135|))))) ($Is (_module.__default.ExtractAbsPageTable |s#0@@135|) (Tclass._module.Maybe (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))))) :qid |ARMdefsd.783:10| :skolemid |2756| :pattern ( (_module.__default.ExtractAbsPageTable |s#0@@135|) ($IsGoodHeap $Heap@@147)) ))))
(assert (forall (($Heap@@148 T@U) (|s#0@@136| T@U) ) (!  (=> (and (and (= (type $Heap@@148) (MapType1Type refType)) (= (type |s#0@@136|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@148) ($Is |s#0@@136| Tclass._module.state))) (and (=> (|_module.__default.ExtractAbsPageTable#requires| |s#0@@136|) (_module.__default.ValidState |s#0@@136|)) (=> (_module.__default.ValidState |s#0@@136|) (|_module.__default.ExtractAbsPageTable#requires| |s#0@@136|)))) :qid |ARMdefsd.783:10| :skolemid |2757| :pattern ( (|_module.__default.ExtractAbsPageTable#requires| |s#0@@136|) ($IsGoodHeap $Heap@@148)) )))
(assert  (=> true (forall (($Heap@@149 T@U) (|s#0@@137| T@U) ) (!  (=> (and (and (= (type $Heap@@149) (MapType1Type refType)) (= (type |s#0@@137|) DatatypeTypeType)) (or (|_module.__default.ExtractAbsPageTable#canCall| |s#0@@137|) (and (and ($IsGoodHeap $Heap@@149) ($Is |s#0@@137| Tclass._module.state)) (_module.__default.ValidState |s#0@@137|)))) (and (and (and (_module.state.State_q |s#0@@137|) (and (_module.state.State_q |s#0@@137|) (_module.config.Config_q (_module.state.conf |s#0@@137|)))) (|_module.__default.ExtractAbsPageTable_k#canCall| (_module.state.m |s#0@@137|) (_module.config.ttbr0 (_module.state.conf |s#0@@137|)))) (= (_module.__default.ExtractAbsPageTable |s#0@@137|) (_module.__default.ExtractAbsPageTable_k (_module.state.m |s#0@@137|) (_module.config.ttbr0 (_module.state.conf |s#0@@137|)))))) :qid |ARMdefsd.783:10| :skolemid |2758| :pattern ( (_module.__default.ExtractAbsPageTable |s#0@@137|) ($IsGoodHeap $Heap@@149)) ))))
(assert  (=> true (forall (($Heap@@150 T@U) (|s#0@@138| T@U) ) (!  (=> (and (and (= (type $Heap@@150) (MapType1Type refType)) (= (type |s#0@@138|) DatatypeTypeType)) (or (|_module.__default.ExtractAbsPageTable#canCall| (Lit |s#0@@138|)) (and (and ($IsGoodHeap $Heap@@150) ($Is |s#0@@138| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@138|)))))))) (and (and (and (_module.state.State_q (Lit |s#0@@138|)) (and (_module.state.State_q (Lit |s#0@@138|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@138|)))))) (|_module.__default.ExtractAbsPageTable_k#canCall| (Lit (_module.state.m (Lit |s#0@@138|))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@138|))))))) (= (_module.__default.ExtractAbsPageTable (Lit |s#0@@138|)) (Lit (_module.__default.ExtractAbsPageTable_k (Lit (_module.state.m (Lit |s#0@@138|))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@138|)))))))))) :qid |ARMdefsd.783:10| :weight 3 :skolemid |2759| :pattern ( (_module.__default.ExtractAbsPageTable (Lit |s#0@@138|)) ($IsGoodHeap $Heap@@150)) ))))
(assert  (=> true (forall ((|m#0@@20| T@U) (|ttbr#0@@3| T@U) (|a#0@@20| Int) ) (!  (=> (and (and (= (type |m#0@@20|) DatatypeTypeType) (= (type |ttbr#0@@3|) DatatypeTypeType)) (or (|_module.__default.AddrInPageTable_k#canCall| |m#0@@20| |ttbr#0@@3| |a#0@@20|) (and (and ($Is |m#0@@20| Tclass._module.memstate) ($Is |ttbr#0@@3| Tclass._module.TTBR)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@20|)))) true) :qid |ARMdefsd.793:28| :skolemid |2760| :pattern ( (_module.__default.AddrInPageTable_k |m#0@@20| |ttbr#0@@3| |a#0@@20|)) ))))
(assert (forall (($Heap@@151 T@U) (|m#0@@21| T@U) (|ttbr#0@@4| T@U) (|a#0@@21| Int) ) (!  (=> (and (and (and (= (type $Heap@@151) (MapType1Type refType)) (= (type |m#0@@21|) DatatypeTypeType)) (= (type |ttbr#0@@4|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@151) ($Is |m#0@@21| Tclass._module.memstate)) ($Is |ttbr#0@@4| Tclass._module.TTBR))) (and (=> (|_module.__default.AddrInPageTable_k#requires| |m#0@@21| |ttbr#0@@4| |a#0@@21|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@21|)) (=> (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@21|) (|_module.__default.AddrInPageTable_k#requires| |m#0@@21| |ttbr#0@@4| |a#0@@21|)))) :qid |ARMdefsd.793:11| :skolemid |2761| :pattern ( (|_module.__default.AddrInPageTable_k#requires| |m#0@@21| |ttbr#0@@4| |a#0@@21|) ($IsGoodHeap $Heap@@151)) )))
(assert  (=> true (forall (($Heap@@152 T@U) (|m#0@@22| T@U) (|ttbr#0@@5| T@U) (|a#0@@22| Int) ) (!  (=> (and (and (and (= (type $Heap@@152) (MapType1Type refType)) (= (type |m#0@@22|) DatatypeTypeType)) (= (type |ttbr#0@@5|) DatatypeTypeType)) (or (|_module.__default.AddrInPageTable_k#canCall| |m#0@@22| |ttbr#0@@5| |a#0@@22|) (and (and (and ($IsGoodHeap $Heap@@152) ($Is |m#0@@22| Tclass._module.memstate)) ($Is |ttbr#0@@5| Tclass._module.TTBR)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@22|)))) (and (and (|_module.__default.ExtractAbsPageTable_k#canCall| |m#0@@22| |ttbr#0@@5|) (=> (not (_module.Maybe.Nothing_q (_module.__default.ExtractAbsPageTable_k |m#0@@22| |ttbr#0@@5|))) (and (and (_module.TTBR.TTBR_q |ttbr#0@@5|) |_module.__default.PhysBase#canCall|) (=> (not (INTERNAL_lt_boogie |a#0@@22| (INTERNAL_add_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@5|) _module.__default.PhysBase) (LitInt 4096)))) (|_module.__default.AddrInL2PageTable#canCall| |m#0@@22| (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@5|) _module.__default.PhysBase) |a#0@@22|))))) (and (=> (_module.__default.AddrInPageTable_k |m#0@@22| |ttbr#0@@5| |a#0@@22|) (ite (_module.Maybe.Nothing_q (_module.__default.ExtractAbsPageTable_k |m#0@@22| |ttbr#0@@5|)) true  (or (and (INTERNAL_le_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@5|) _module.__default.PhysBase) |a#0@@22|) (INTERNAL_lt_boogie |a#0@@22| (INTERNAL_add_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@5|) _module.__default.PhysBase) (LitInt 4096)))) (_module.__default.AddrInL2PageTable |m#0@@22| (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@5|) _module.__default.PhysBase) |a#0@@22|)))) (=> (ite (_module.Maybe.Nothing_q (_module.__default.ExtractAbsPageTable_k |m#0@@22| |ttbr#0@@5|)) true  (or (and (INTERNAL_le_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@5|) _module.__default.PhysBase) |a#0@@22|) (INTERNAL_lt_boogie |a#0@@22| (INTERNAL_add_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@5|) _module.__default.PhysBase) (LitInt 4096)))) (_module.__default.AddrInL2PageTable |m#0@@22| (INTERNAL_add_boogie (_module.TTBR.ptbase |ttbr#0@@5|) _module.__default.PhysBase) |a#0@@22|))) (_module.__default.AddrInPageTable_k |m#0@@22| |ttbr#0@@5| |a#0@@22|))))) :qid |ARMdefsd.793:11| :skolemid |2762| :pattern ( (_module.__default.AddrInPageTable_k |m#0@@22| |ttbr#0@@5| |a#0@@22|) ($IsGoodHeap $Heap@@152)) ))))
(assert  (=> true (forall (($Heap@@153 T@U) (|m#0@@23| T@U) (|ttbr#0@@6| T@U) (|a#0@@23| Int) ) (!  (=> (and (and (and (= (type $Heap@@153) (MapType1Type refType)) (= (type |m#0@@23|) DatatypeTypeType)) (= (type |ttbr#0@@6|) DatatypeTypeType)) (or (|_module.__default.AddrInPageTable_k#canCall| (Lit |m#0@@23|) (Lit |ttbr#0@@6|) (LitInt |a#0@@23|)) (and (and (and ($IsGoodHeap $Heap@@153) ($Is |m#0@@23| Tclass._module.memstate)) ($Is |ttbr#0@@6| Tclass._module.TTBR)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |m#0@@23|))))) (and (and (|_module.__default.ExtractAbsPageTable_k#canCall| (Lit |m#0@@23|) (Lit |ttbr#0@@6|)) (=> (not (U_2_bool (Lit (bool_2_U (_module.Maybe.Nothing_q (Lit (_module.__default.ExtractAbsPageTable_k (Lit |m#0@@23|) (Lit |ttbr#0@@6|)))))))) (and (and (_module.TTBR.TTBR_q (Lit |ttbr#0@@6|)) |_module.__default.PhysBase#canCall|) (=> (not (INTERNAL_lt_boogie |a#0@@23| (INTERNAL_add_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@6|)) _module.__default.PhysBase) (LitInt 4096)))) (|_module.__default.AddrInL2PageTable#canCall| (Lit |m#0@@23|) (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@6|)) _module.__default.PhysBase) (LitInt |a#0@@23|)))))) (and (=> (_module.__default.AddrInPageTable_k (Lit |m#0@@23|) (Lit |ttbr#0@@6|) (LitInt |a#0@@23|)) (ite (_module.Maybe.Nothing_q (Lit (_module.__default.ExtractAbsPageTable_k (Lit |m#0@@23|) (Lit |ttbr#0@@6|)))) true  (or (and (INTERNAL_le_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@6|)) _module.__default.PhysBase) |a#0@@23|) (INTERNAL_lt_boogie |a#0@@23| (INTERNAL_add_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@6|)) _module.__default.PhysBase) (LitInt 4096)))) (_module.__default.AddrInL2PageTable (Lit |m#0@@23|) (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@6|)) _module.__default.PhysBase) (LitInt |a#0@@23|))))) (=> (ite (_module.Maybe.Nothing_q (Lit (_module.__default.ExtractAbsPageTable_k (Lit |m#0@@23|) (Lit |ttbr#0@@6|)))) true  (or (and (INTERNAL_le_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@6|)) _module.__default.PhysBase) |a#0@@23|) (INTERNAL_lt_boogie |a#0@@23| (INTERNAL_add_boogie (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@6|)) _module.__default.PhysBase) (LitInt 4096)))) (_module.__default.AddrInL2PageTable (Lit |m#0@@23|) (INTERNAL_add_boogie (_module.TTBR.ptbase (Lit |ttbr#0@@6|)) _module.__default.PhysBase) (LitInt |a#0@@23|)))) (_module.__default.AddrInPageTable_k (Lit |m#0@@23|) (Lit |ttbr#0@@6|) (LitInt |a#0@@23|)))))) :qid |ARMdefsd.793:11| :weight 3 :skolemid |2763| :pattern ( (_module.__default.AddrInPageTable_k (Lit |m#0@@23|) (Lit |ttbr#0@@6|) (LitInt |a#0@@23|)) ($IsGoodHeap $Heap@@153)) ))))
(assert  (=> true (forall ((|s#0@@139| T@U) (|a#0@@24| Int) ) (!  (=> (and (= (type |s#0@@139|) DatatypeTypeType) (or (|_module.__default.AddrInPageTable#canCall| |s#0@@139| |a#0@@24|) (and ($Is |s#0@@139| Tclass._module.state) (_module.__default.ValidState |s#0@@139|)))) true) :qid |ARMdefsd.804:27| :skolemid |2764| :pattern ( (_module.__default.AddrInPageTable |s#0@@139| |a#0@@24|)) ))))
(assert (forall (($Heap@@154 T@U) (|s#0@@140| T@U) (|a#0@@25| Int) ) (!  (=> (and (and (= (type $Heap@@154) (MapType1Type refType)) (= (type |s#0@@140|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@154) ($Is |s#0@@140| Tclass._module.state))) (and (=> (|_module.__default.AddrInPageTable#requires| |s#0@@140| |a#0@@25|) (_module.__default.ValidState |s#0@@140|)) (=> (_module.__default.ValidState |s#0@@140|) (|_module.__default.AddrInPageTable#requires| |s#0@@140| |a#0@@25|)))) :qid |ARMdefsd.804:11| :skolemid |2765| :pattern ( (|_module.__default.AddrInPageTable#requires| |s#0@@140| |a#0@@25|) ($IsGoodHeap $Heap@@154)) )))
(assert  (=> true (forall (($Heap@@155 T@U) (|s#0@@141| T@U) (|a#0@@26| Int) ) (!  (=> (and (and (= (type $Heap@@155) (MapType1Type refType)) (= (type |s#0@@141|) DatatypeTypeType)) (or (|_module.__default.AddrInPageTable#canCall| |s#0@@141| |a#0@@26|) (and (and ($IsGoodHeap $Heap@@155) ($Is |s#0@@141| Tclass._module.state)) (_module.__default.ValidState |s#0@@141|)))) (and (and (and (_module.state.State_q |s#0@@141|) (and (_module.state.State_q |s#0@@141|) (_module.config.Config_q (_module.state.conf |s#0@@141|)))) (|_module.__default.AddrInPageTable_k#canCall| (_module.state.m |s#0@@141|) (_module.config.ttbr0 (_module.state.conf |s#0@@141|)) |a#0@@26|)) (and (=> (_module.__default.AddrInPageTable |s#0@@141| |a#0@@26|) (_module.__default.AddrInPageTable_k (_module.state.m |s#0@@141|) (_module.config.ttbr0 (_module.state.conf |s#0@@141|)) |a#0@@26|)) (=> (_module.__default.AddrInPageTable_k (_module.state.m |s#0@@141|) (_module.config.ttbr0 (_module.state.conf |s#0@@141|)) |a#0@@26|) (_module.__default.AddrInPageTable |s#0@@141| |a#0@@26|))))) :qid |ARMdefsd.804:11| :skolemid |2766| :pattern ( (_module.__default.AddrInPageTable |s#0@@141| |a#0@@26|) ($IsGoodHeap $Heap@@155)) ))))
(assert  (=> true (forall (($Heap@@156 T@U) (|s#0@@142| T@U) (|a#0@@27| Int) ) (!  (=> (and (and (= (type $Heap@@156) (MapType1Type refType)) (= (type |s#0@@142|) DatatypeTypeType)) (or (|_module.__default.AddrInPageTable#canCall| (Lit |s#0@@142|) (LitInt |a#0@@27|)) (and (and ($IsGoodHeap $Heap@@156) ($Is |s#0@@142| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@142|)))))))) (and (and (and (_module.state.State_q (Lit |s#0@@142|)) (and (_module.state.State_q (Lit |s#0@@142|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@142|)))))) (|_module.__default.AddrInPageTable_k#canCall| (Lit (_module.state.m (Lit |s#0@@142|))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@142|))))) (LitInt |a#0@@27|))) (and (=> (_module.__default.AddrInPageTable (Lit |s#0@@142|) (LitInt |a#0@@27|)) (U_2_bool (Lit (bool_2_U (_module.__default.AddrInPageTable_k (Lit (_module.state.m (Lit |s#0@@142|))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@142|))))) (LitInt |a#0@@27|)))))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.AddrInPageTable_k (Lit (_module.state.m (Lit |s#0@@142|))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@142|))))) (LitInt |a#0@@27|))))) (_module.__default.AddrInPageTable (Lit |s#0@@142|) (LitInt |a#0@@27|)))))) :qid |ARMdefsd.804:11| :weight 3 :skolemid |2767| :pattern ( (_module.__default.AddrInPageTable (Lit |s#0@@142|) (LitInt |a#0@@27|)) ($IsGoodHeap $Heap@@156)) ))))
(assert  (=> true (forall ((|m#0@@24| T@U) (|vbase#0| Int) (|a#0@@28| Int) ) (!  (=> (and (= (type |m#0@@24|) DatatypeTypeType) (or (|_module.__default.AddrInL2PageTable#canCall| |m#0@@24| |vbase#0| |a#0@@28|) (and ($Is |m#0@@24| Tclass._module.memstate) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@24|) (_module.__default.ValidAbsL1PTable |m#0@@24| |vbase#0|))))) true) :qid |ARMdefsd.810:29| :skolemid |2768| :pattern ( (_module.__default.AddrInL2PageTable |m#0@@24| |vbase#0| |a#0@@28|)) ))))
(assert (forall (($Heap@@157 T@U) (|m#0@@25| T@U) (|vbase#0@@0| Int) (|a#0@@29| Int) ) (!  (=> (and (and (= (type $Heap@@157) (MapType1Type refType)) (= (type |m#0@@25|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@157) ($Is |m#0@@25| Tclass._module.memstate))) (and (=> (|_module.__default.AddrInL2PageTable#requires| |m#0@@25| |vbase#0@@0| |a#0@@29|) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@25|) (_module.__default.ValidAbsL1PTable |m#0@@25| |vbase#0@@0|))) (=> (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@25|) (_module.__default.ValidAbsL1PTable |m#0@@25| |vbase#0@@0|)) (|_module.__default.AddrInL2PageTable#requires| |m#0@@25| |vbase#0@@0| |a#0@@29|)))) :qid |ARMdefsd.810:11| :skolemid |2769| :pattern ( (|_module.__default.AddrInL2PageTable#requires| |m#0@@25| |vbase#0@@0| |a#0@@29|) ($IsGoodHeap $Heap@@157)) )))
(assert (forall ((arg0@@327 Int) ) (! (= (type (_module.__default.ExtractAbsL1PTE arg0@@327)) DatatypeTypeType) :qid |funType:_module.__default.ExtractAbsL1PTE| :pattern ( (_module.__default.ExtractAbsL1PTE arg0@@327)) )))
(assert  (=> true (forall (($Heap@@158 T@U) (|m#0@@26| T@U) (|vbase#0@@1| Int) (|a#0@@30| Int) ) (!  (=> (and (and (= (type $Heap@@158) (MapType1Type refType)) (= (type |m#0@@26|) DatatypeTypeType)) (or (|_module.__default.AddrInL2PageTable#canCall| |m#0@@26| |vbase#0@@1| |a#0@@30|) (and (and ($IsGoodHeap $Heap@@158) ($Is |m#0@@26| Tclass._module.memstate)) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@26|) (_module.__default.ValidAbsL1PTable |m#0@@26| |vbase#0@@1|))))) (and (forall ((|i#0@@14| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@14|) (INTERNAL_lt_boogie |i#0@@14| (LitInt 1024))) (and (and (|_module.__default.WordOffset#canCall| |vbase#0@@1| |i#0@@14|) (|_module.__default.MemContents#canCall| |m#0@@26| (_module.__default.WordOffset |vbase#0@@1| |i#0@@14|))) (and (|_module.__default.ExtractAbsL1PTE#canCall| (_module.__default.MemContents |m#0@@26| (_module.__default.WordOffset |vbase#0@@1| |i#0@@14|))) (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@26| (_module.__default.WordOffset |vbase#0@@1| |i#0@@14|)))) |_module.__default.PhysBase#canCall|)))) :qid |ARMdefsd.813:12| :skolemid |2770| :pattern ( (_module.__default.WordOffset |vbase#0@@1| |i#0@@14|)) )) (and (=> (_module.__default.AddrInL2PageTable |m#0@@26| |vbase#0@@1| |a#0@@30|) (exists ((|i#0@@15| Int) ) (!  (and (and (INTERNAL_le_boogie 0 |i#0@@15|) (INTERNAL_lt_boogie |i#0@@15| (LitInt 1024))) (and (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@26| (_module.__default.WordOffset |vbase#0@@1| |i#0@@15|)))) (and (INTERNAL_le_boogie (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@26| (_module.__default.WordOffset |vbase#0@@1| |i#0@@15|)))))) _module.__default.PhysBase) |a#0@@30|) (INTERNAL_lt_boogie |a#0@@30| (INTERNAL_add_boogie (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@26| (_module.__default.WordOffset |vbase#0@@1| |i#0@@15|)))))) _module.__default.PhysBase) (LitInt 1024)))))) :qid |ARMdefsd.813:12| :skolemid |2771| :pattern ( (_module.__default.WordOffset |vbase#0@@1| |i#0@@15|)) ))) (=> (exists ((|i#0@@16| Int) ) (!  (and (and (INTERNAL_le_boogie 0 |i#0@@16|) (INTERNAL_lt_boogie |i#0@@16| (LitInt 1024))) (and (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@26| (_module.__default.WordOffset |vbase#0@@1| |i#0@@16|)))) (and (INTERNAL_le_boogie (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@26| (_module.__default.WordOffset |vbase#0@@1| |i#0@@16|)))))) _module.__default.PhysBase) |a#0@@30|) (INTERNAL_lt_boogie |a#0@@30| (INTERNAL_add_boogie (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@26| (_module.__default.WordOffset |vbase#0@@1| |i#0@@16|)))))) _module.__default.PhysBase) (LitInt 1024)))))) :qid |ARMdefsd.813:12| :skolemid |2771| :pattern ( (_module.__default.WordOffset |vbase#0@@1| |i#0@@16|)) )) (_module.__default.AddrInL2PageTable |m#0@@26| |vbase#0@@1| |a#0@@30|))))) :qid |ARMdefsd.810:11| :skolemid |2772| :pattern ( (_module.__default.AddrInL2PageTable |m#0@@26| |vbase#0@@1| |a#0@@30|) ($IsGoodHeap $Heap@@158)) ))))
(assert  (=> true (forall (($Heap@@159 T@U) (|m#0@@27| T@U) (|vbase#0@@2| Int) (|a#0@@31| Int) ) (!  (=> (and (and (= (type $Heap@@159) (MapType1Type refType)) (= (type |m#0@@27|) DatatypeTypeType)) (or (|_module.__default.AddrInL2PageTable#canCall| (Lit |m#0@@27|) (LitInt |vbase#0@@2|) (LitInt |a#0@@31|)) (and (and ($IsGoodHeap $Heap@@159) ($Is |m#0@@27| Tclass._module.memstate)) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |m#0@@27|)) (_module.__default.ValidAbsL1PTable (Lit |m#0@@27|) (LitInt |vbase#0@@2|)))))) (and (forall ((|i#1@@12| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@12|) (INTERNAL_lt_boogie |i#1@@12| (LitInt 1024))) (and (and (|_module.__default.WordOffset#canCall| (LitInt |vbase#0@@2|) |i#1@@12|) (|_module.__default.MemContents#canCall| (Lit |m#0@@27|) (_module.__default.WordOffset (LitInt |vbase#0@@2|) |i#1@@12|))) (and (|_module.__default.ExtractAbsL1PTE#canCall| (_module.__default.MemContents (Lit |m#0@@27|) (_module.__default.WordOffset (LitInt |vbase#0@@2|) |i#1@@12|))) (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@27|) (_module.__default.WordOffset (LitInt |vbase#0@@2|) |i#1@@12|)))) |_module.__default.PhysBase#canCall|)))) :qid |ARMdefsd.813:12| :skolemid |2773| :pattern ( (_module.__default.WordOffset |vbase#0@@2| |i#1@@12|)) )) (and (=> (_module.__default.AddrInL2PageTable (Lit |m#0@@27|) (LitInt |vbase#0@@2|) (LitInt |a#0@@31|)) (exists ((|i#1@@13| Int) ) (!  (and (and (INTERNAL_le_boogie 0 |i#1@@13|) (INTERNAL_lt_boogie |i#1@@13| (LitInt 1024))) (and (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@27|) (_module.__default.WordOffset (LitInt |vbase#0@@2|) |i#1@@13|)))) (and (INTERNAL_le_boogie (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@27|) (_module.__default.WordOffset (LitInt |vbase#0@@2|) |i#1@@13|)))))) _module.__default.PhysBase) |a#0@@31|) (INTERNAL_lt_boogie |a#0@@31| (INTERNAL_add_boogie (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@27|) (_module.__default.WordOffset (LitInt |vbase#0@@2|) |i#1@@13|)))))) _module.__default.PhysBase) (LitInt 1024)))))) :qid |ARMdefsd.813:12| :skolemid |2774| :pattern ( (_module.__default.WordOffset |vbase#0@@2| |i#1@@13|)) ))) (=> (exists ((|i#1@@14| Int) ) (!  (and (and (INTERNAL_le_boogie 0 |i#1@@14|) (INTERNAL_lt_boogie |i#1@@14| (LitInt 1024))) (and (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@27|) (_module.__default.WordOffset (LitInt |vbase#0@@2|) |i#1@@14|)))) (and (INTERNAL_le_boogie (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@27|) (_module.__default.WordOffset (LitInt |vbase#0@@2|) |i#1@@14|)))))) _module.__default.PhysBase) |a#0@@31|) (INTERNAL_lt_boogie |a#0@@31| (INTERNAL_add_boogie (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@27|) (_module.__default.WordOffset (LitInt |vbase#0@@2|) |i#1@@14|)))))) _module.__default.PhysBase) (LitInt 1024)))))) :qid |ARMdefsd.813:12| :skolemid |2774| :pattern ( (_module.__default.WordOffset |vbase#0@@2| |i#1@@14|)) )) (_module.__default.AddrInL2PageTable (Lit |m#0@@27|) (LitInt |vbase#0@@2|) (LitInt |a#0@@31|)))))) :qid |ARMdefsd.810:11| :weight 3 :skolemid |2775| :pattern ( (_module.__default.AddrInL2PageTable (Lit |m#0@@27|) (LitInt |vbase#0@@2|) (LitInt |a#0@@31|)) ($IsGoodHeap $Heap@@159)) ))))
(assert  (=> true (forall ((|pt#0@@15| T@U) ) (!  (=> (and (= (type |pt#0@@15|) (SeqType BoxType)) (or (|_module.__default.AllPagesInTable#canCall| |pt#0@@15|) (and ($Is |pt#0@@15| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))) (_module.__default.WellformedAbsPTable |pt#0@@15|)))) ($Is (_module.__default.AllPagesInTable |pt#0@@15|) (TSet Tclass._module.addr))) :qid |ARMdefsd.820:26| :skolemid |2776| :pattern ( (_module.__default.AllPagesInTable |pt#0@@15|)) ))))
(assert (forall (($Heap@@160 T@U) (|pt#0@@16| T@U) ) (!  (=> (and (and (= (type $Heap@@160) (MapType1Type refType)) (= (type |pt#0@@16|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@160) ($Is |pt#0@@16| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))))) (and (=> (|_module.__default.AllPagesInTable#requires| |pt#0@@16|) (_module.__default.WellformedAbsPTable |pt#0@@16|)) (=> (_module.__default.WellformedAbsPTable |pt#0@@16|) (|_module.__default.AllPagesInTable#requires| |pt#0@@16|)))) :qid |ARMdefsd.820:10| :skolemid |2777| :pattern ( (|_module.__default.AllPagesInTable#requires| |pt#0@@16|) ($IsGoodHeap $Heap@@160)) )))
(assert (forall ((arg0@@328 T@U) ) (! (= (type (|lambda#69| arg0@@328)) (MapType0Type BoxType boolType)) :qid |funType:lambda#69| :pattern ( (|lambda#69| arg0@@328)) )))
(assert  (=> true (forall (($Heap@@161 T@U) (|pt#0@@17| T@U) ) (!  (=> (and (and (= (type $Heap@@161) (MapType1Type refType)) (= (type |pt#0@@17|) (SeqType BoxType))) (or (|_module.__default.AllPagesInTable#canCall| |pt#0@@17|) (and (and ($IsGoodHeap $Heap@@161) ($Is |pt#0@@17| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (_module.__default.WellformedAbsPTable |pt#0@@17|)))) (and (forall ((|i#0@@17| Int) (|j#0@@17| Int) ) (!  (=> (and (and (and (and (INTERNAL_le_boogie 0 |i#0@@17|) (INTERNAL_lt_boogie |i#0@@17| (|Seq#Length| |pt#0@@17|))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| |i#0@@17|)))) (and (INTERNAL_le_boogie 0 |j#0@@17|) (INTERNAL_lt_boogie |j#0@@17| (|Seq#Length| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| |i#0@@17|)))))))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| |i#0@@17|)))) |j#0@@17|)))) (and (and (_module.AbsPTE.AbsPTE_q ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| |i#0@@17|)))) |j#0@@17|))))) |_module.__default.PhysBase#canCall|) (|_module.__default.WordAlignedAdd#canCall| (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| |i#0@@17|)))) |j#0@@17|))))) _module.__default.PhysBase))) :qid |ARMdefsd.823:10| :skolemid |2778| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| |i#0@@17|)))) |j#0@@17|))) )) (= (_module.__default.AllPagesInTable |pt#0@@17|) (|lambda#69| |pt#0@@17|)))) :qid |ARMdefsd.820:10| :skolemid |2780| :pattern ( (_module.__default.AllPagesInTable |pt#0@@17|) ($IsGoodHeap $Heap@@161)) ))))
(assert (forall ((arg0@@329 T@U) ) (! (= (type (|lambda#70| arg0@@329)) (MapType0Type BoxType boolType)) :qid |funType:lambda#70| :pattern ( (|lambda#70| arg0@@329)) )))
(assert  (=> true (forall (($Heap@@162 T@U) (|pt#0@@18| T@U) ) (!  (=> (and (and (= (type $Heap@@162) (MapType1Type refType)) (= (type |pt#0@@18|) (SeqType BoxType))) (or (|_module.__default.AllPagesInTable#canCall| (Lit |pt#0@@18|)) (and (and ($IsGoodHeap $Heap@@162) ($Is |pt#0@@18| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (U_2_bool (Lit (bool_2_U (_module.__default.WellformedAbsPTable (Lit |pt#0@@18|)))))))) (and (forall ((|i#1@@15| Int) (|j#1@@10| Int) ) (!  (=> (and (and (and (and (INTERNAL_le_boogie 0 |i#1@@15|) (INTERNAL_lt_boogie |i#1@@15| (|Seq#Length| (Lit |pt#0@@18|)))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) |i#1@@15|)))) (and (INTERNAL_le_boogie 0 |j#1@@10|) (INTERNAL_lt_boogie |j#1@@10| (|Seq#Length| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) |i#1@@15|)))))))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) |i#1@@15|)))) |j#1@@10|)))) (and (and (_module.AbsPTE.AbsPTE_q ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) |i#1@@15|)))) |j#1@@10|))))) |_module.__default.PhysBase#canCall|) (|_module.__default.WordAlignedAdd#canCall| (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) |i#1@@15|)))) |j#1@@10|))))) _module.__default.PhysBase))) :qid |ARMdefsd.823:10| :skolemid |2781| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@18| |i#1@@15|)))) |j#1@@10|))) )) (= (_module.__default.AllPagesInTable (Lit |pt#0@@18|)) (|lambda#70| |pt#0@@18|)))) :qid |ARMdefsd.820:10| :weight 3 :skolemid |2783| :pattern ( (_module.__default.AllPagesInTable (Lit |pt#0@@18|)) ($IsGoodHeap $Heap@@162)) ))))
(assert  (=> true (forall ((|pt#0@@19| T@U) ) (!  (=> (and (= (type |pt#0@@19|) (SeqType BoxType)) (or (|_module.__default.WritablePagesInTable#canCall| |pt#0@@19|) (and ($Is |pt#0@@19| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))) (_module.__default.WellformedAbsPTable |pt#0@@19|)))) ($Is (_module.__default.WritablePagesInTable |pt#0@@19|) (TSet Tclass._module.addr))) :qid |ARMdefsd.827:31| :skolemid |2784| :pattern ( (_module.__default.WritablePagesInTable |pt#0@@19|)) ))))
(assert (forall (($Heap@@163 T@U) (|pt#0@@20| T@U) ) (!  (=> (and (and (= (type $Heap@@163) (MapType1Type refType)) (= (type |pt#0@@20|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@163) ($Is |pt#0@@20| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))))) (and (=> (|_module.__default.WritablePagesInTable#requires| |pt#0@@20|) (_module.__default.WellformedAbsPTable |pt#0@@20|)) (=> (_module.__default.WellformedAbsPTable |pt#0@@20|) (|_module.__default.WritablePagesInTable#requires| |pt#0@@20|)))) :qid |ARMdefsd.827:10| :skolemid |2785| :pattern ( (|_module.__default.WritablePagesInTable#requires| |pt#0@@20|) ($IsGoodHeap $Heap@@163)) )))
(assert (forall ((arg0@@330 T@U) ) (! (= (type (|lambda#71| arg0@@330)) (MapType0Type BoxType boolType)) :qid |funType:lambda#71| :pattern ( (|lambda#71| arg0@@330)) )))
(assert  (=> true (forall (($Heap@@164 T@U) (|pt#0@@21| T@U) ) (!  (=> (and (and (= (type $Heap@@164) (MapType1Type refType)) (= (type |pt#0@@21|) (SeqType BoxType))) (or (|_module.__default.WritablePagesInTable#canCall| |pt#0@@21|) (and (and ($IsGoodHeap $Heap@@164) ($Is |pt#0@@21| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (_module.__default.WellformedAbsPTable |pt#0@@21|)))) (and (forall ((|i#0@@18| Int) (|j#0@@18| Int) ) (!  (and (=> (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@21| |i#0@@18|)))) |j#0@@18|))) (_module.AbsPTE.AbsPTE_q ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@21| |i#0@@18|)))) |j#0@@18|)))))) (=> (and (and (and (and (and (INTERNAL_le_boogie 0 |i#0@@18|) (INTERNAL_lt_boogie |i#0@@18| (|Seq#Length| |pt#0@@21|))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@21| |i#0@@18|)))) (and (INTERNAL_le_boogie 0 |j#0@@18|) (INTERNAL_lt_boogie |j#0@@18| (|Seq#Length| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@21| |i#0@@18|)))))))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@21| |i#0@@18|)))) |j#0@@18|)))) (_module.AbsPTE.write ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@21| |i#0@@18|)))) |j#0@@18|)))))) (and (and (_module.AbsPTE.AbsPTE_q ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@21| |i#0@@18|)))) |j#0@@18|))))) |_module.__default.PhysBase#canCall|) (|_module.__default.WordAlignedAdd#canCall| (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@21| |i#0@@18|)))) |j#0@@18|))))) _module.__default.PhysBase)))) :qid |ARMdefsd.831:10| :skolemid |2786| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@21| |i#0@@18|)))) |j#0@@18|))) )) (= (_module.__default.WritablePagesInTable |pt#0@@21|) (|lambda#71| |pt#0@@21|)))) :qid |ARMdefsd.827:10| :skolemid |2788| :pattern ( (_module.__default.WritablePagesInTable |pt#0@@21|) ($IsGoodHeap $Heap@@164)) ))))
(assert (forall ((arg0@@331 T@U) ) (! (= (type (|lambda#72| arg0@@331)) (MapType0Type BoxType boolType)) :qid |funType:lambda#72| :pattern ( (|lambda#72| arg0@@331)) )))
(assert  (=> true (forall (($Heap@@165 T@U) (|pt#0@@22| T@U) ) (!  (=> (and (and (= (type $Heap@@165) (MapType1Type refType)) (= (type |pt#0@@22|) (SeqType BoxType))) (or (|_module.__default.WritablePagesInTable#canCall| (Lit |pt#0@@22|)) (and (and ($IsGoodHeap $Heap@@165) ($Is |pt#0@@22| (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (U_2_bool (Lit (bool_2_U (_module.__default.WellformedAbsPTable (Lit |pt#0@@22|)))))))) (and (forall ((|i#1@@16| Int) (|j#1@@11| Int) ) (!  (and (=> (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@22|) |i#1@@16|)))) |j#1@@11|))) (_module.AbsPTE.AbsPTE_q ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@22|) |i#1@@16|)))) |j#1@@11|)))))) (=> (and (and (and (and (and (INTERNAL_le_boogie 0 |i#1@@16|) (INTERNAL_lt_boogie |i#1@@16| (|Seq#Length| (Lit |pt#0@@22|)))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@22|) |i#1@@16|)))) (and (INTERNAL_le_boogie 0 |j#1@@11|) (INTERNAL_lt_boogie |j#1@@11| (|Seq#Length| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@22|) |i#1@@16|)))))))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@22|) |i#1@@16|)))) |j#1@@11|)))) (_module.AbsPTE.write ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@22|) |i#1@@16|)))) |j#1@@11|)))))) (and (and (_module.AbsPTE.AbsPTE_q ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@22|) |i#1@@16|)))) |j#1@@11|))))) |_module.__default.PhysBase#canCall|) (|_module.__default.WordAlignedAdd#canCall| (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@22|) |i#1@@16|)))) |j#1@@11|))))) _module.__default.PhysBase)))) :qid |ARMdefsd.831:10| :skolemid |2789| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@22| |i#1@@16|)))) |j#1@@11|))) )) (= (_module.__default.WritablePagesInTable (Lit |pt#0@@22|)) (|lambda#72| |pt#0@@22|)))) :qid |ARMdefsd.827:10| :weight 3 :skolemid |2791| :pattern ( (_module.__default.WritablePagesInTable (Lit |pt#0@@22|)) ($IsGoodHeap $Heap@@165)) ))))
(assert  (=> true (forall ((|m#0@@28| T@U) (|vbase#0@@3| Int) ) (!  (=> (and (= (type |m#0@@28|) DatatypeTypeType) (or (|_module.__default.ValidAbsL1PTable#canCall| |m#0@@28| |vbase#0@@3|) (and ($Is |m#0@@28| Tclass._module.memstate) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@28|)))) true) :qid |ARMdefsd.836:28| :skolemid |2792| :pattern ( (_module.__default.ValidAbsL1PTable |m#0@@28| |vbase#0@@3|)) ))))
(assert (forall (($Heap@@166 T@U) (|m#0@@29| T@U) (|vbase#0@@4| Int) ) (!  (=> (and (and (= (type $Heap@@166) (MapType1Type refType)) (= (type |m#0@@29|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@166) ($Is |m#0@@29| Tclass._module.memstate))) (and (=> (|_module.__default.ValidAbsL1PTable#requires| |m#0@@29| |vbase#0@@4|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@29|)) (=> (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@29|) (|_module.__default.ValidAbsL1PTable#requires| |m#0@@29| |vbase#0@@4|)))) :qid |ARMdefsd.836:11| :skolemid |2793| :pattern ( (|_module.__default.ValidAbsL1PTable#requires| |m#0@@29| |vbase#0@@4|) ($IsGoodHeap $Heap@@166)) )))
(assert  (=> true (forall (($Heap@@167 T@U) (|m#0@@30| T@U) (|vbase#0@@5| Int) ) (!  (=> (and (and (= (type $Heap@@167) (MapType1Type refType)) (= (type |m#0@@30|) DatatypeTypeType)) (or (|_module.__default.ValidAbsL1PTable#canCall| |m#0@@30| |vbase#0@@5|) (and (and ($IsGoodHeap $Heap@@167) ($Is |m#0@@30| Tclass._module.memstate)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@30|)))) (and (and (|_module.__default.ValidMemWords#canCall| |vbase#0@@5| (LitInt 1024)) (=> (_module.__default.ValidMemWords |vbase#0@@5| (LitInt 1024)) (forall ((|i#0@@19| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@19|) (INTERNAL_lt_boogie |i#0@@19| (LitInt 1024))) (and (and (|_module.__default.WordOffset#canCall| |vbase#0@@5| |i#0@@19|) (|_module.__default.MemContents#canCall| |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|))) (and (|_module.__default.ValidAbsL1PTEWord#canCall| (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|))) (=> (_module.__default.ValidAbsL1PTEWord (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|))) (and (|_module.__default.ExtractAbsL1PTE#canCall| (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|))) (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|)))) (and |_module.__default.PhysBase#canCall| (and (and (|_module.__default.isUInt32#canCall| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|)))))) _module.__default.PhysBase)) (=> (_module.__default.isUInt32 (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|)))))) _module.__default.PhysBase)) (|_module.__default.WordAligned#canCall| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|)))))) _module.__default.PhysBase)))) (=> (and (|_module.__default.WordAligned#canCall| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|)))))) _module.__default.PhysBase)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|)))))) _module.__default.PhysBase))) (|_module.__default.ValidAbsL2PTable#canCall| |m#0@@30| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|)))))) _module.__default.PhysBase))))))))))) :qid |ARMdefsd.841:15| :skolemid |2794| :pattern ( (_module.__default.WordOffset |vbase#0@@5| |i#0@@19|)) )))) (and (=> (_module.__default.ValidAbsL1PTable |m#0@@30| |vbase#0@@5|) (and (_module.__default.ValidMemWords |vbase#0@@5| (LitInt 1024)) (forall ((|i#0@@20| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@20|) (INTERNAL_lt_boogie |i#0@@20| (LitInt 1024))) (and (_module.__default.ValidAbsL1PTEWord (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@20|))) (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@20|)))) (and (and (_module.__default.isUInt32 (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@20|)))))) _module.__default.PhysBase)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@20|)))))) _module.__default.PhysBase))) (_module.__default.ValidAbsL2PTable |m#0@@30| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@20|)))))) _module.__default.PhysBase)))))) :qid |ARMdefsd.841:15| :skolemid |2795| :pattern ( (_module.__default.WordOffset |vbase#0@@5| |i#0@@20|)) )))) (=> (and (_module.__default.ValidMemWords |vbase#0@@5| (LitInt 1024)) (forall ((|i#0@@21| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@21|) (INTERNAL_lt_boogie |i#0@@21| (LitInt 1024))) (and (_module.__default.ValidAbsL1PTEWord (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@21|))) (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@21|)))) (and (and (_module.__default.isUInt32 (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@21|)))))) _module.__default.PhysBase)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@21|)))))) _module.__default.PhysBase))) (_module.__default.ValidAbsL2PTable |m#0@@30| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@30| (_module.__default.WordOffset |vbase#0@@5| |i#0@@21|)))))) _module.__default.PhysBase)))))) :qid |ARMdefsd.841:15| :skolemid |2795| :pattern ( (_module.__default.WordOffset |vbase#0@@5| |i#0@@21|)) ))) (_module.__default.ValidAbsL1PTable |m#0@@30| |vbase#0@@5|))))) :qid |ARMdefsd.836:11| :skolemid |2796| :pattern ( (_module.__default.ValidAbsL1PTable |m#0@@30| |vbase#0@@5|) ($IsGoodHeap $Heap@@167)) ))))
(assert  (=> true (forall (($Heap@@168 T@U) (|m#0@@31| T@U) (|vbase#0@@6| Int) ) (!  (=> (and (and (= (type $Heap@@168) (MapType1Type refType)) (= (type |m#0@@31|) DatatypeTypeType)) (or (|_module.__default.ValidAbsL1PTable#canCall| (Lit |m#0@@31|) (LitInt |vbase#0@@6|)) (and (and ($IsGoodHeap $Heap@@168) ($Is |m#0@@31| Tclass._module.memstate)) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |m#0@@31|))))) (and (and (|_module.__default.ValidMemWords#canCall| (LitInt |vbase#0@@6|) (LitInt 1024)) (=> (_module.__default.ValidMemWords (LitInt |vbase#0@@6|) (LitInt 1024)) (forall ((|i#1@@17| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@17|) (INTERNAL_lt_boogie |i#1@@17| (LitInt 1024))) (and (and (|_module.__default.WordOffset#canCall| (LitInt |vbase#0@@6|) |i#1@@17|) (|_module.__default.MemContents#canCall| (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|))) (and (|_module.__default.ValidAbsL1PTEWord#canCall| (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|))) (=> (_module.__default.ValidAbsL1PTEWord (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|))) (and (|_module.__default.ExtractAbsL1PTE#canCall| (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|))) (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|)))) (and |_module.__default.PhysBase#canCall| (and (and (|_module.__default.isUInt32#canCall| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|)))))) _module.__default.PhysBase)) (=> (_module.__default.isUInt32 (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|)))))) _module.__default.PhysBase)) (|_module.__default.WordAligned#canCall| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|)))))) _module.__default.PhysBase)))) (=> (and (|_module.__default.WordAligned#canCall| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|)))))) _module.__default.PhysBase)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|)))))) _module.__default.PhysBase))) (|_module.__default.ValidAbsL2PTable#canCall| (Lit |m#0@@31|) (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@17|)))))) _module.__default.PhysBase))))))))))) :qid |ARMdefsd.841:15| :skolemid |2797| :pattern ( (_module.__default.WordOffset |vbase#0@@6| |i#1@@17|)) )))) (and (=> (_module.__default.ValidAbsL1PTable (Lit |m#0@@31|) (LitInt |vbase#0@@6|)) (and (_module.__default.ValidMemWords (LitInt |vbase#0@@6|) (LitInt 1024)) (forall ((|i#1@@18| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@18|) (INTERNAL_lt_boogie |i#1@@18| (LitInt 1024))) (and (_module.__default.ValidAbsL1PTEWord (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@18|))) (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@18|)))) (and (and (_module.__default.isUInt32 (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@18|)))))) _module.__default.PhysBase)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@18|)))))) _module.__default.PhysBase))) (_module.__default.ValidAbsL2PTable (Lit |m#0@@31|) (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@18|)))))) _module.__default.PhysBase)))))) :qid |ARMdefsd.841:15| :skolemid |2798| :pattern ( (_module.__default.WordOffset |vbase#0@@6| |i#1@@18|)) )))) (=> (and (_module.__default.ValidMemWords (LitInt |vbase#0@@6|) (LitInt 1024)) (forall ((|i#1@@19| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@19|) (INTERNAL_lt_boogie |i#1@@19| (LitInt 1024))) (and (_module.__default.ValidAbsL1PTEWord (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@19|))) (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@19|)))) (and (and (_module.__default.isUInt32 (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@19|)))))) _module.__default.PhysBase)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@19|)))))) _module.__default.PhysBase))) (_module.__default.ValidAbsL2PTable (Lit |m#0@@31|) (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@31|) (_module.__default.WordOffset (LitInt |vbase#0@@6|) |i#1@@19|)))))) _module.__default.PhysBase)))))) :qid |ARMdefsd.841:15| :skolemid |2798| :pattern ( (_module.__default.WordOffset |vbase#0@@6| |i#1@@19|)) ))) (_module.__default.ValidAbsL1PTable (Lit |m#0@@31|) (LitInt |vbase#0@@6|)))))) :qid |ARMdefsd.836:11| :weight 3 :skolemid |2799| :pattern ( (_module.__default.ValidAbsL1PTable (Lit |m#0@@31|) (LitInt |vbase#0@@6|)) ($IsGoodHeap $Heap@@168)) ))))
(assert (forall (($ly@@193 T@U) (|m#0@@32| T@U) (|vbase#0@@7| Int) ) (!  (=> (and (= (type $ly@@193) LayerTypeType) (= (type |m#0@@32|) DatatypeTypeType)) (= (_module.__default.ExtractAbsL1PTable ($LS $ly@@193) |m#0@@32| |vbase#0@@7|) (_module.__default.ExtractAbsL1PTable $ly@@193 |m#0@@32| |vbase#0@@7|))) :qid |ARMdefsd.850:20| :skolemid |2800| :pattern ( (_module.__default.ExtractAbsL1PTable ($LS $ly@@193) |m#0@@32| |vbase#0@@7|)) )))
(assert (forall (($ly@@194 T@U) (|m#0@@33| T@U) (|vbase#0@@8| Int) ) (!  (=> (and (= (type $ly@@194) LayerTypeType) (= (type |m#0@@33|) DatatypeTypeType)) (= (_module.__default.ExtractAbsL1PTable $ly@@194 |m#0@@33| |vbase#0@@8|) (_module.__default.ExtractAbsL1PTable $LZ |m#0@@33| |vbase#0@@8|))) :qid |ARMdefsd.850:20| :skolemid |2801| :pattern ( (_module.__default.ExtractAbsL1PTable (AsFuelBottom $ly@@194) |m#0@@33| |vbase#0@@8|)) )))
(assert  (=> true (forall (($ly@@195 T@U) (|m#0@@34| T@U) (|vbase#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@195) LayerTypeType) (= (type |m#0@@34|) DatatypeTypeType)) (or (|_module.__default.ExtractAbsL1PTable#canCall| |m#0@@34| |vbase#0@@9|) (and (and ($Is |m#0@@34| Tclass._module.memstate) (and (_module.__default.isUInt32 |vbase#0@@9|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@9|))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@34|) (_module.__default.ValidAbsL1PTable |m#0@@34| |vbase#0@@9|))))) (and (_module.__default.WellformedAbsPTable (_module.__default.ExtractAbsL1PTable $ly@@195 |m#0@@34| |vbase#0@@9|)) ($Is (_module.__default.ExtractAbsL1PTable $ly@@195 |m#0@@34| |vbase#0@@9|) (TSeq (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))))) :qid |ARMdefsd.850:20| :skolemid |2802| :pattern ( (_module.__default.ExtractAbsL1PTable $ly@@195 |m#0@@34| |vbase#0@@9|)) ))))
(assert (forall (($ly@@196 T@U) ($Heap@@169 T@U) (|m#0@@35| T@U) (|vbase#0@@10| Int) ) (!  (=> (and (and (and (= (type $ly@@196) LayerTypeType) (= (type $Heap@@169) (MapType1Type refType))) (= (type |m#0@@35|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@169) ($Is |m#0@@35| Tclass._module.memstate)) (and (_module.__default.isUInt32 |vbase#0@@10|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@10|)))) (and (=> (|_module.__default.ExtractAbsL1PTable#requires| $ly@@196 |m#0@@35| |vbase#0@@10|) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@35|) (_module.__default.ValidAbsL1PTable |m#0@@35| |vbase#0@@10|))) (=> (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@35|) (_module.__default.ValidAbsL1PTable |m#0@@35| |vbase#0@@10|)) (|_module.__default.ExtractAbsL1PTable#requires| $ly@@196 |m#0@@35| |vbase#0@@10|)))) :qid |ARMdefsd.850:20| :skolemid |2803| :pattern ( (|_module.__default.ExtractAbsL1PTable#requires| $ly@@196 |m#0@@35| |vbase#0@@10|) ($IsGoodHeap $Heap@@169)) )))
(assert  (and (and (and (and (and (forall ((arg0@@332 T@U) (arg1@@168 Int) (arg2@@117 Int) ) (! (= (type (_module.__default.SeqOfNumbersInRightExclusiveRange arg0@@332 arg1@@168 arg2@@117)) (SeqType BoxType)) :qid |funType:_module.__default.SeqOfNumbersInRightExclusiveRange| :pattern ( (_module.__default.SeqOfNumbersInRightExclusiveRange arg0@@332 arg1@@168 arg2@@117)) )) (= (type StartFuel__module._default.SeqOfNumbersInRightExclusiveRange) LayerTypeType)) (= (type |lambda#73|) (MapType0Type BoxType boolType))) (forall ((arg0@@333 T@U) (arg1@@169 Int) ) (! (= (type (|lambda#74| arg0@@333 arg1@@169)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#74| :pattern ( (|lambda#74| arg0@@333 arg1@@169)) ))) (forall ((arg0@@334 T@U) (arg1@@170 T@U) (arg2@@118 T@U) (arg3@@72 T@U) (arg4@@57 T@U) ) (! (= (type (_module.__default.IMapSeqToSeq arg0@@334 arg1@@170 arg2@@118 arg3@@72 arg4@@57)) (SeqType BoxType)) :qid |funType:_module.__default.IMapSeqToSeq| :pattern ( (_module.__default.IMapSeqToSeq arg0@@334 arg1@@170 arg2@@118 arg3@@72 arg4@@57)) ))) (= (type StartFuel__module._default.IMapSeqToSeq) LayerTypeType)))
(assert  (=> true (forall (($ly@@197 T@U) ($Heap@@170 T@U) (|m#0@@36| T@U) (|vbase#0@@11| Int) ) (!  (=> (and (and (and (= (type $ly@@197) LayerTypeType) (= (type $Heap@@170) (MapType1Type refType))) (= (type |m#0@@36|) DatatypeTypeType)) (or (|_module.__default.ExtractAbsL1PTable#canCall| |m#0@@36| |vbase#0@@11|) (and (and (and ($IsGoodHeap $Heap@@170) ($Is |m#0@@36| Tclass._module.memstate)) (and (_module.__default.isUInt32 |vbase#0@@11|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@11|))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@36|) (_module.__default.ValidAbsL1PTable |m#0@@36| |vbase#0@@11|))))) (and (and (forall ((|i#0@@22| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@22|) (INTERNAL_lt_boogie |i#0@@22| (LitInt 1024))) (and (and (and (|_module.__default.WordOffset#canCall| |vbase#0@@11| |i#0@@22|) (|_module.__default.MemContents#canCall| |m#0@@36| (_module.__default.WordOffset |vbase#0@@11| |i#0@@22|))) (|_module.__default.ExtractAbsL1PTE#canCall| (_module.__default.MemContents |m#0@@36| (_module.__default.WordOffset |vbase#0@@11| |i#0@@22|)))) (=> (not (_module.Maybe.Nothing_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@36| (_module.__default.WordOffset |vbase#0@@11| |i#0@@22|))))) (and |_module.__default.PhysBase#canCall| (|_module.__default.ExtractAbsL2PTable#canCall| |m#0@@36| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@36| (_module.__default.WordOffset |vbase#0@@11| |i#0@@22|)))))) _module.__default.PhysBase)))))) :qid |ARMdefsd.855:19| :skolemid |2804| :pattern ( (_module.__default.WordOffset |vbase#0@@11| |i#0@@22|)) )) (and (|_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| (LitInt 0) (LitInt 1024)) (|_module.__default.IMapSeqToSeq#canCall| TInt (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))) (_module.__default.SeqOfNumbersInRightExclusiveRange StartFuel__module._default.SeqOfNumbersInRightExclusiveRange (LitInt 0) (LitInt 1024)) (|IMap#Glue| |lambda#73| (|lambda#74| |m#0@@36| |vbase#0@@11|) (TIMap TInt (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))))) (= (_module.__default.ExtractAbsL1PTable ($LS $ly@@197) |m#0@@36| |vbase#0@@11|) (_module.__default.IMapSeqToSeq TInt (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))) StartFuel__module._default.IMapSeqToSeq (_module.__default.SeqOfNumbersInRightExclusiveRange StartFuel__module._default.SeqOfNumbersInRightExclusiveRange (LitInt 0) (LitInt 1024)) (|IMap#Glue| |lambda#73| (|lambda#74| |m#0@@36| |vbase#0@@11|) (TIMap TInt (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))))))) :qid |ARMdefsd.850:20| :skolemid |2805| :pattern ( (_module.__default.ExtractAbsL1PTable ($LS $ly@@197) |m#0@@36| |vbase#0@@11|) ($IsGoodHeap $Heap@@170)) ))))
(assert (forall ((arg0@@335 T@U) (arg1@@171 Int) ) (! (= (type (|lambda#75| arg0@@335 arg1@@171)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#75| :pattern ( (|lambda#75| arg0@@335 arg1@@171)) )))
(assert  (=> true (forall (($ly@@198 T@U) ($Heap@@171 T@U) (|m#0@@37| T@U) (|vbase#0@@12| Int) ) (!  (=> (and (and (and (= (type $ly@@198) LayerTypeType) (= (type $Heap@@171) (MapType1Type refType))) (= (type |m#0@@37|) DatatypeTypeType)) (or (|_module.__default.ExtractAbsL1PTable#canCall| (Lit |m#0@@37|) (LitInt |vbase#0@@12|)) (and (and (and ($IsGoodHeap $Heap@@171) ($Is |m#0@@37| Tclass._module.memstate)) (and (_module.__default.isUInt32 |vbase#0@@12|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@12|))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |m#0@@37|)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidAbsL1PTable (Lit |m#0@@37|) (LitInt |vbase#0@@12|))))))))) (and (and (forall ((|i#0@@23| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@23|) (INTERNAL_lt_boogie |i#0@@23| (LitInt 1024))) (and (and (and (|_module.__default.WordOffset#canCall| (LitInt |vbase#0@@12|) |i#0@@23|) (|_module.__default.MemContents#canCall| (Lit |m#0@@37|) (_module.__default.WordOffset (LitInt |vbase#0@@12|) |i#0@@23|))) (|_module.__default.ExtractAbsL1PTE#canCall| (_module.__default.MemContents (Lit |m#0@@37|) (_module.__default.WordOffset (LitInt |vbase#0@@12|) |i#0@@23|)))) (=> (not (_module.Maybe.Nothing_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@37|) (_module.__default.WordOffset (LitInt |vbase#0@@12|) |i#0@@23|))))) (and |_module.__default.PhysBase#canCall| (|_module.__default.ExtractAbsL2PTable#canCall| (Lit |m#0@@37|) (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@37|) (_module.__default.WordOffset (LitInt |vbase#0@@12|) |i#0@@23|)))))) _module.__default.PhysBase)))))) :qid |ARMdefsd.855:19| :skolemid |2806| :pattern ( (_module.__default.WordOffset |vbase#0@@12| |i#0@@23|)) )) (and (|_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| (LitInt 0) (LitInt 1024)) (|_module.__default.IMapSeqToSeq#canCall| TInt (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))) (_module.__default.SeqOfNumbersInRightExclusiveRange StartFuel__module._default.SeqOfNumbersInRightExclusiveRange (LitInt 0) (LitInt 1024)) (|IMap#Glue| |lambda#73| (|lambda#75| |m#0@@37| |vbase#0@@12|) (TIMap TInt (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE)))))))) (= (_module.__default.ExtractAbsL1PTable ($LS $ly@@198) (Lit |m#0@@37|) (LitInt |vbase#0@@12|)) (_module.__default.IMapSeqToSeq TInt (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))) StartFuel__module._default.IMapSeqToSeq (_module.__default.SeqOfNumbersInRightExclusiveRange StartFuel__module._default.SeqOfNumbersInRightExclusiveRange (LitInt 0) (LitInt 1024)) (|IMap#Glue| |lambda#73| (|lambda#75| |m#0@@37| |vbase#0@@12|) (TIMap TInt (Tclass._module.Maybe (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))))))) :qid |ARMdefsd.850:20| :weight 3 :skolemid |2807| :pattern ( (_module.__default.ExtractAbsL1PTable ($LS $ly@@198) (Lit |m#0@@37|) (LitInt |vbase#0@@12|)) ($IsGoodHeap $Heap@@171)) ))))
(assert  (=> true (forall ((|pte#0@@3| Int) ) (!  (=> (or (|_module.__default.ValidAbsL1PTEWord#canCall| |pte#0@@3|) (_module.__default.isUInt32 |pte#0@@3|)) true) :qid |ARMdefsd.867:29| :skolemid |2808| :pattern ( (_module.__default.ValidAbsL1PTEWord |pte#0@@3|)) ))))
(assert (forall ((|pte#0@@4| Int) ) (!  (=> (_module.__default.isUInt32 |pte#0@@4|) (and (=> (|_module.__default.ValidAbsL1PTEWord#requires| |pte#0@@4|) true) (=> true (|_module.__default.ValidAbsL1PTEWord#requires| |pte#0@@4|)))) :qid |ARMdefsd.867:29| :skolemid |2809| :pattern ( (|_module.__default.ValidAbsL1PTEWord#requires| |pte#0@@4|)) )))
(assert  (and (and (and (and (and (= (type StartFuel__module._default.WordAsBits) LayerTypeType) (forall ((arg0@@336 (_ BitVec 32)) ) (! (= (U_2_bv32 (bv32_2_U arg0@@336)) arg0@@336) :qid |typeInv:U_2_bv32| :pattern ( (bv32_2_U arg0@@336)) ))) (= (Ctor bv32Type) 26)) (forall ((x@@49 T@U) ) (!  (=> (= (type x@@49) bv32Type) (= (bv32_2_U (U_2_bv32 x@@49)) x@@49)) :qid |cast:U_2_bv32| :pattern ( (U_2_bv32 x@@49)) ))) (forall ((arg0@@337 (_ BitVec 32)) ) (! (= (type (bv32_2_U arg0@@337)) bv32Type) :qid |funType:bv32_2_U| :pattern ( (bv32_2_U arg0@@337)) ))) (= (type StartFuel__module._default.BitAnd) LayerTypeType)))
(assert  (=> true (forall ((|pte#0@@5| Int) ) (!  (=> (or (|_module.__default.ValidAbsL1PTEWord#canCall| |pte#0@@5|) (_module.__default.isUInt32 |pte#0@@5|)) (and (and (|_module.__default.BitwiseAnd#canCall| |pte#0@@5| (LitInt 3)) (and (|_module.__default.WordAsBits#canCall| |pte#0@@5|) (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pte#0@@5|) (U_2_bv32 (Lit (bv32_2_U #x000003fc)))))) (and (=> (_module.__default.ValidAbsL1PTEWord |pte#0@@5|) (or (= (_module.__default.BitwiseAnd |pte#0@@5| (LitInt 3)) (LitInt 0)) (and (= (_module.__default.BitwiseAnd |pte#0@@5| (LitInt 3)) (LitInt 1)) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pte#0@@5|) (U_2_bv32 (Lit (bv32_2_U #x000003fc)))) (U_2_bv32 (Lit (bv32_2_U #x00000008))))))) (=> (or (= (_module.__default.BitwiseAnd |pte#0@@5| (LitInt 3)) (LitInt 0)) (and (= (_module.__default.BitwiseAnd |pte#0@@5| (LitInt 3)) (LitInt 1)) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pte#0@@5|) (U_2_bv32 (Lit (bv32_2_U #x000003fc)))) (U_2_bv32 (Lit (bv32_2_U #x00000008)))))) (_module.__default.ValidAbsL1PTEWord |pte#0@@5|))))) :qid |ARMdefsd.867:29| :skolemid |2810| :pattern ( (_module.__default.ValidAbsL1PTEWord |pte#0@@5|)) ))))
(assert  (=> true (forall ((|pte#0@@6| Int) ) (!  (=> (or (|_module.__default.ValidAbsL1PTEWord#canCall| (LitInt |pte#0@@6|)) (_module.__default.isUInt32 |pte#0@@6|)) (and (and (|_module.__default.BitwiseAnd#canCall| (LitInt |pte#0@@6|) (LitInt 3)) (and (|_module.__default.WordAsBits#canCall| (LitInt |pte#0@@6|)) (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pte#0@@6|)) (U_2_bv32 (Lit (bv32_2_U #x000003fc)))))) (and (=> (_module.__default.ValidAbsL1PTEWord (LitInt |pte#0@@6|)) (or (= (LitInt (_module.__default.BitwiseAnd (LitInt |pte#0@@6|) (LitInt 3))) (LitInt 0)) (and (= (LitInt (_module.__default.BitwiseAnd (LitInt |pte#0@@6|) (LitInt 3))) (LitInt 1)) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pte#0@@6|)) (U_2_bv32 (Lit (bv32_2_U #x000003fc)))) (U_2_bv32 (Lit (bv32_2_U #x00000008))))))) (=> (or (= (LitInt (_module.__default.BitwiseAnd (LitInt |pte#0@@6|) (LitInt 3))) (LitInt 0)) (and (= (LitInt (_module.__default.BitwiseAnd (LitInt |pte#0@@6|) (LitInt 3))) (LitInt 1)) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pte#0@@6|)) (U_2_bv32 (Lit (bv32_2_U #x000003fc)))) (U_2_bv32 (Lit (bv32_2_U #x00000008)))))) (_module.__default.ValidAbsL1PTEWord (LitInt |pte#0@@6|)))))) :qid |ARMdefsd.867:29| :weight 3 :skolemid |2811| :pattern ( (_module.__default.ValidAbsL1PTEWord (LitInt |pte#0@@6|))) ))))
(assert  (=> true (forall (($Heap@@172 T@U) (|pte#0@@7| Int) ) (!  (=> (and (= (type $Heap@@172) (MapType1Type refType)) (or (|_module.__default.ExtractAbsL1PTE#canCall| |pte#0@@7|) (and (and ($IsGoodHeap $Heap@@172) (_module.__default.isUInt32 |pte#0@@7|)) (_module.__default.ValidAbsL1PTEWord |pte#0@@7|)))) (and (=> (_module.Maybe.Just_q (_module.__default.ExtractAbsL1PTE |pte#0@@7|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE |pte#0@@7|)))))) ($Is (_module.__default.ExtractAbsL1PTE |pte#0@@7|) (Tclass._module.Maybe Tclass._module.addr)))) :qid |ARMdefsd.875:10| :skolemid |2812| :pattern ( (_module.__default.ExtractAbsL1PTE |pte#0@@7|) ($IsGoodHeap $Heap@@172)) ))))
(assert (forall ((|pte#0@@8| Int) ) (!  (=> (_module.__default.isUInt32 |pte#0@@8|) (and (=> (|_module.__default.ExtractAbsL1PTE#requires| |pte#0@@8|) (_module.__default.ValidAbsL1PTEWord |pte#0@@8|)) (=> (_module.__default.ValidAbsL1PTEWord |pte#0@@8|) (|_module.__default.ExtractAbsL1PTE#requires| |pte#0@@8|)))) :qid |ARMdefsd.875:26| :skolemid |2813| :pattern ( (|_module.__default.ExtractAbsL1PTE#requires| |pte#0@@8|)) )))
(assert  (=> true (forall ((|pte#0@@9| Int) ) (!  (=> (or (|_module.__default.ExtractAbsL1PTE#canCall| |pte#0@@9|) (and (_module.__default.isUInt32 |pte#0@@9|) (_module.__default.ValidAbsL1PTEWord |pte#0@@9|))) (and (and (|_module.__default.BitwiseAnd#canCall| |pte#0@@9| (LitInt 3)) (=> (not (= (_module.__default.BitwiseAnd |pte#0@@9| (LitInt 3)) (LitInt 0))) (|_module.__default.BitwiseMaskHigh#canCall| |pte#0@@9| (LitInt 10)))) (= (_module.__default.ExtractAbsL1PTE |pte#0@@9|) (ite (= (_module.__default.BitwiseAnd |pte#0@@9| (LitInt 3)) (LitInt 0)) |#_module.Maybe.Nothing| (|#_module.Maybe.Just| ($Box (int_2_U (_module.__default.BitwiseMaskHigh StartFuel__module._default.BitwiseMaskHigh |pte#0@@9| (LitInt 10))))))))) :qid |ARMdefsd.875:26| :skolemid |2814| :pattern ( (_module.__default.ExtractAbsL1PTE |pte#0@@9|)) ))))
(assert  (=> true (forall ((|pte#0@@10| Int) ) (!  (=> (or (|_module.__default.ExtractAbsL1PTE#canCall| (LitInt |pte#0@@10|)) (and (_module.__default.isUInt32 |pte#0@@10|) (U_2_bool (Lit (bool_2_U (_module.__default.ValidAbsL1PTEWord (LitInt |pte#0@@10|))))))) (and (and (|_module.__default.BitwiseAnd#canCall| (LitInt |pte#0@@10|) (LitInt 3)) (=> (not (= (LitInt (_module.__default.BitwiseAnd (LitInt |pte#0@@10|) (LitInt 3))) (LitInt 0))) (|_module.__default.BitwiseMaskHigh#canCall| (LitInt |pte#0@@10|) (LitInt 10)))) (= (_module.__default.ExtractAbsL1PTE (LitInt |pte#0@@10|)) (ite (= (LitInt (_module.__default.BitwiseAnd (LitInt |pte#0@@10|) (LitInt 3))) (LitInt 0)) |#_module.Maybe.Nothing| (|#_module.Maybe.Just| ($Box (int_2_U (_module.__default.BitwiseMaskHigh StartFuel__module._default.BitwiseMaskHigh (LitInt |pte#0@@10|) (LitInt 10))))))))) :qid |ARMdefsd.875:26| :weight 3 :skolemid |2815| :pattern ( (_module.__default.ExtractAbsL1PTE (LitInt |pte#0@@10|))) ))))
(assert  (=> true (forall ((|m#0@@38| T@U) (|vbase#0@@13| Int) ) (!  (=> (and (= (type |m#0@@38|) DatatypeTypeType) (or (|_module.__default.ValidAbsL2PTable#canCall| |m#0@@38| |vbase#0@@13|) (and (and ($Is |m#0@@38| Tclass._module.memstate) (and (_module.__default.isUInt32 |vbase#0@@13|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@13|))) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@38|)))) true) :qid |ARMdefsd.888:28| :skolemid |2816| :pattern ( (_module.__default.ValidAbsL2PTable |m#0@@38| |vbase#0@@13|)) ))))
(assert (forall ((|m#0@@39| T@U) (|vbase#0@@14| Int) ) (!  (=> (= (type |m#0@@39|) DatatypeTypeType) (=> (and ($Is |m#0@@39| Tclass._module.memstate) (and (_module.__default.isUInt32 |vbase#0@@14|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@14|))) (and (=> (|_module.__default.ValidAbsL2PTable#requires| |m#0@@39| |vbase#0@@14|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@39|)) (=> (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@39|) (|_module.__default.ValidAbsL2PTable#requires| |m#0@@39| |vbase#0@@14|))))) :qid |ARMdefsd.888:28| :skolemid |2817| :pattern ( (|_module.__default.ValidAbsL2PTable#requires| |m#0@@39| |vbase#0@@14|)) )))
(assert  (=> true (forall ((|m#0@@40| T@U) (|vbase#0@@15| Int) ) (!  (=> (and (= (type |m#0@@40|) DatatypeTypeType) (or (|_module.__default.ValidAbsL2PTable#canCall| |m#0@@40| |vbase#0@@15|) (and (and ($Is |m#0@@40| Tclass._module.memstate) (and (_module.__default.isUInt32 |vbase#0@@15|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@15|))) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@40|)))) (and (and (|_module.__default.ValidMemWords#canCall| |vbase#0@@15| (LitInt 256)) (=> (_module.__default.ValidMemWords |vbase#0@@15| (LitInt 256)) (forall ((|i#0@@24| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@24|) (INTERNAL_lt_boogie |i#0@@24| (LitInt 256))) (and (and (|_module.__default.WordOffset#canCall| |vbase#0@@15| |i#0@@24|) (|_module.__default.MemContents#canCall| |m#0@@40| (_module.__default.WordOffset |vbase#0@@15| |i#0@@24|))) (|_module.__default.ValidAbsL2PTEWord#canCall| (_module.__default.MemContents |m#0@@40| (_module.__default.WordOffset |vbase#0@@15| |i#0@@24|))))) :qid |ARMdefsd.892:15| :skolemid |2818| :pattern ( (_module.__default.WordOffset |vbase#0@@15| |i#0@@24|)) )))) (and (=> (_module.__default.ValidAbsL2PTable |m#0@@40| |vbase#0@@15|) (and (_module.__default.ValidMemWords |vbase#0@@15| (LitInt 256)) (forall ((|i#0@@25| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@25|) (INTERNAL_lt_boogie |i#0@@25| (LitInt 256))) (_module.__default.ValidAbsL2PTEWord (_module.__default.MemContents |m#0@@40| (_module.__default.WordOffset |vbase#0@@15| |i#0@@25|)))) :qid |ARMdefsd.892:15| :skolemid |2819| :pattern ( (_module.__default.WordOffset |vbase#0@@15| |i#0@@25|)) )))) (=> (and (_module.__default.ValidMemWords |vbase#0@@15| (LitInt 256)) (forall ((|i#0@@26| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@26|) (INTERNAL_lt_boogie |i#0@@26| (LitInt 256))) (_module.__default.ValidAbsL2PTEWord (_module.__default.MemContents |m#0@@40| (_module.__default.WordOffset |vbase#0@@15| |i#0@@26|)))) :qid |ARMdefsd.892:15| :skolemid |2819| :pattern ( (_module.__default.WordOffset |vbase#0@@15| |i#0@@26|)) ))) (_module.__default.ValidAbsL2PTable |m#0@@40| |vbase#0@@15|))))) :qid |ARMdefsd.888:28| :skolemid |2820| :pattern ( (_module.__default.ValidAbsL2PTable |m#0@@40| |vbase#0@@15|)) ))))
(assert  (=> true (forall ((|m#0@@41| T@U) (|vbase#0@@16| Int) ) (!  (=> (and (= (type |m#0@@41|) DatatypeTypeType) (or (|_module.__default.ValidAbsL2PTable#canCall| (Lit |m#0@@41|) (LitInt |vbase#0@@16|)) (and (and ($Is |m#0@@41| Tclass._module.memstate) (and (_module.__default.isUInt32 |vbase#0@@16|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@16|))) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |m#0@@41|))))) (and (and (|_module.__default.ValidMemWords#canCall| (LitInt |vbase#0@@16|) (LitInt 256)) (=> (_module.__default.ValidMemWords (LitInt |vbase#0@@16|) (LitInt 256)) (forall ((|i#1@@20| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@20|) (INTERNAL_lt_boogie |i#1@@20| (LitInt 256))) (and (and (|_module.__default.WordOffset#canCall| (LitInt |vbase#0@@16|) |i#1@@20|) (|_module.__default.MemContents#canCall| (Lit |m#0@@41|) (_module.__default.WordOffset (LitInt |vbase#0@@16|) |i#1@@20|))) (|_module.__default.ValidAbsL2PTEWord#canCall| (_module.__default.MemContents (Lit |m#0@@41|) (_module.__default.WordOffset (LitInt |vbase#0@@16|) |i#1@@20|))))) :qid |ARMdefsd.892:15| :skolemid |2821| :pattern ( (_module.__default.WordOffset |vbase#0@@16| |i#1@@20|)) )))) (and (=> (_module.__default.ValidAbsL2PTable (Lit |m#0@@41|) (LitInt |vbase#0@@16|)) (and (_module.__default.ValidMemWords (LitInt |vbase#0@@16|) (LitInt 256)) (forall ((|i#1@@21| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@21|) (INTERNAL_lt_boogie |i#1@@21| (LitInt 256))) (_module.__default.ValidAbsL2PTEWord (_module.__default.MemContents (Lit |m#0@@41|) (_module.__default.WordOffset (LitInt |vbase#0@@16|) |i#1@@21|)))) :qid |ARMdefsd.892:15| :skolemid |2822| :pattern ( (_module.__default.WordOffset |vbase#0@@16| |i#1@@21|)) )))) (=> (and (_module.__default.ValidMemWords (LitInt |vbase#0@@16|) (LitInt 256)) (forall ((|i#1@@22| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#1@@22|) (INTERNAL_lt_boogie |i#1@@22| (LitInt 256))) (_module.__default.ValidAbsL2PTEWord (_module.__default.MemContents (Lit |m#0@@41|) (_module.__default.WordOffset (LitInt |vbase#0@@16|) |i#1@@22|)))) :qid |ARMdefsd.892:15| :skolemid |2822| :pattern ( (_module.__default.WordOffset |vbase#0@@16| |i#1@@22|)) ))) (_module.__default.ValidAbsL2PTable (Lit |m#0@@41|) (LitInt |vbase#0@@16|)))))) :qid |ARMdefsd.888:28| :weight 3 :skolemid |2823| :pattern ( (_module.__default.ValidAbsL2PTable (Lit |m#0@@41|) (LitInt |vbase#0@@16|))) ))))
(assert (forall ((arg0@@338 T@U) (arg1@@172 Int) ) (! (= (type (_module.__default.ExtractAbsL2PTable arg0@@338 arg1@@172)) (SeqType BoxType)) :qid |funType:_module.__default.ExtractAbsL2PTable| :pattern ( (_module.__default.ExtractAbsL2PTable arg0@@338 arg1@@172)) )))
(assert  (=> true (forall ((|m#0@@42| T@U) (|vbase#0@@17| Int) ) (!  (=> (and (= (type |m#0@@42|) DatatypeTypeType) (or (|_module.__default.ExtractAbsL2PTable#canCall| |m#0@@42| |vbase#0@@17|) (and (and ($Is |m#0@@42| Tclass._module.memstate) (and (_module.__default.isUInt32 |vbase#0@@17|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@17|))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@42|) (_module.__default.ValidAbsL2PTable |m#0@@42| |vbase#0@@17|))))) (and (_module.__default.WellformedAbsL2PTable (_module.__default.ExtractAbsL2PTable |m#0@@42| |vbase#0@@17|)) ($Is (_module.__default.ExtractAbsL2PTable |m#0@@42| |vbase#0@@17|) (TSeq (Tclass._module.Maybe Tclass._module.AbsPTE))))) :qid |ARMdefsd.895:29| :skolemid |2824| :pattern ( (_module.__default.ExtractAbsL2PTable |m#0@@42| |vbase#0@@17|)) ))))
(assert (forall ((|m#0@@43| T@U) (|vbase#0@@18| Int) ) (!  (=> (= (type |m#0@@43|) DatatypeTypeType) (=> (and ($Is |m#0@@43| Tclass._module.memstate) (and (_module.__default.isUInt32 |vbase#0@@18|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@18|))) (and (=> (|_module.__default.ExtractAbsL2PTable#requires| |m#0@@43| |vbase#0@@18|) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@43|) (_module.__default.ValidAbsL2PTable |m#0@@43| |vbase#0@@18|))) (=> (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@43|) (_module.__default.ValidAbsL2PTable |m#0@@43| |vbase#0@@18|)) (|_module.__default.ExtractAbsL2PTable#requires| |m#0@@43| |vbase#0@@18|))))) :qid |ARMdefsd.895:29| :skolemid |2825| :pattern ( (|_module.__default.ExtractAbsL2PTable#requires| |m#0@@43| |vbase#0@@18|)) )))
(assert  (and (= (type |lambda#76|) (MapType0Type BoxType boolType)) (forall ((arg0@@339 T@U) (arg1@@173 Int) ) (! (= (type (|lambda#77| arg0@@339 arg1@@173)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#77| :pattern ( (|lambda#77| arg0@@339 arg1@@173)) ))))
(assert  (=> true (forall ((|m#0@@44| T@U) (|vbase#0@@19| Int) ) (!  (=> (and (= (type |m#0@@44|) DatatypeTypeType) (or (|_module.__default.ExtractAbsL2PTable#canCall| |m#0@@44| |vbase#0@@19|) (and (and ($Is |m#0@@44| Tclass._module.memstate) (and (_module.__default.isUInt32 |vbase#0@@19|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@19|))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |m#0@@44|) (_module.__default.ValidAbsL2PTable |m#0@@44| |vbase#0@@19|))))) (and (and (forall ((|i#0@@27| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@27|) (INTERNAL_lt_boogie |i#0@@27| (LitInt 256))) (and (and (|_module.__default.WordOffset#canCall| |vbase#0@@19| |i#0@@27|) (|_module.__default.MemContents#canCall| |m#0@@44| (_module.__default.WordOffset |vbase#0@@19| |i#0@@27|))) (|_module.__default.ExtractAbsL2PTE#canCall| (_module.__default.MemContents |m#0@@44| (_module.__default.WordOffset |vbase#0@@19| |i#0@@27|))))) :qid |ARMdefsd.900:19| :skolemid |2826| :pattern ( (_module.__default.WordOffset |vbase#0@@19| |i#0@@27|)) )) (and (|_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| (LitInt 0) (LitInt 256)) (|_module.__default.IMapSeqToSeq#canCall| TInt (Tclass._module.Maybe Tclass._module.AbsPTE) (_module.__default.SeqOfNumbersInRightExclusiveRange StartFuel__module._default.SeqOfNumbersInRightExclusiveRange (LitInt 0) (LitInt 256)) (|IMap#Glue| |lambda#76| (|lambda#77| |m#0@@44| |vbase#0@@19|) (TIMap TInt (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (= (_module.__default.ExtractAbsL2PTable |m#0@@44| |vbase#0@@19|) (_module.__default.IMapSeqToSeq TInt (Tclass._module.Maybe Tclass._module.AbsPTE) StartFuel__module._default.IMapSeqToSeq (_module.__default.SeqOfNumbersInRightExclusiveRange StartFuel__module._default.SeqOfNumbersInRightExclusiveRange (LitInt 0) (LitInt 256)) (|IMap#Glue| |lambda#76| (|lambda#77| |m#0@@44| |vbase#0@@19|) (TIMap TInt (Tclass._module.Maybe Tclass._module.AbsPTE))))))) :qid |ARMdefsd.895:29| :skolemid |2827| :pattern ( (_module.__default.ExtractAbsL2PTable |m#0@@44| |vbase#0@@19|)) ))))
(assert (forall ((arg0@@340 T@U) (arg1@@174 Int) ) (! (= (type (|lambda#78| arg0@@340 arg1@@174)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#78| :pattern ( (|lambda#78| arg0@@340 arg1@@174)) )))
(assert  (=> true (forall ((|m#0@@45| T@U) (|vbase#0@@20| Int) ) (!  (=> (and (= (type |m#0@@45|) DatatypeTypeType) (or (|_module.__default.ExtractAbsL2PTable#canCall| (Lit |m#0@@45|) (LitInt |vbase#0@@20|)) (and (and ($Is |m#0@@45| Tclass._module.memstate) (and (_module.__default.isUInt32 |vbase#0@@20|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |vbase#0@@20|))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |m#0@@45|)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidAbsL2PTable (Lit |m#0@@45|) (LitInt |vbase#0@@20|))))))))) (and (and (forall ((|i#0@@28| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@28|) (INTERNAL_lt_boogie |i#0@@28| (LitInt 256))) (and (and (|_module.__default.WordOffset#canCall| (LitInt |vbase#0@@20|) |i#0@@28|) (|_module.__default.MemContents#canCall| (Lit |m#0@@45|) (_module.__default.WordOffset (LitInt |vbase#0@@20|) |i#0@@28|))) (|_module.__default.ExtractAbsL2PTE#canCall| (_module.__default.MemContents (Lit |m#0@@45|) (_module.__default.WordOffset (LitInt |vbase#0@@20|) |i#0@@28|))))) :qid |ARMdefsd.900:19| :skolemid |2828| :pattern ( (_module.__default.WordOffset |vbase#0@@20| |i#0@@28|)) )) (and (|_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| (LitInt 0) (LitInt 256)) (|_module.__default.IMapSeqToSeq#canCall| TInt (Tclass._module.Maybe Tclass._module.AbsPTE) (_module.__default.SeqOfNumbersInRightExclusiveRange StartFuel__module._default.SeqOfNumbersInRightExclusiveRange (LitInt 0) (LitInt 256)) (|IMap#Glue| |lambda#76| (|lambda#78| |m#0@@45| |vbase#0@@20|) (TIMap TInt (Tclass._module.Maybe Tclass._module.AbsPTE)))))) (= (_module.__default.ExtractAbsL2PTable (Lit |m#0@@45|) (LitInt |vbase#0@@20|)) (_module.__default.IMapSeqToSeq TInt (Tclass._module.Maybe Tclass._module.AbsPTE) StartFuel__module._default.IMapSeqToSeq (_module.__default.SeqOfNumbersInRightExclusiveRange StartFuel__module._default.SeqOfNumbersInRightExclusiveRange (LitInt 0) (LitInt 256)) (|IMap#Glue| |lambda#76| (|lambda#78| |m#0@@45| |vbase#0@@20|) (TIMap TInt (Tclass._module.Maybe Tclass._module.AbsPTE))))))) :qid |ARMdefsd.895:29| :weight 3 :skolemid |2829| :pattern ( (_module.__default.ExtractAbsL2PTable (Lit |m#0@@45|) (LitInt |vbase#0@@20|))) ))))
(assert  (=> true (forall ((|pteword#0| Int) ) (!  (=> (or (|_module.__default.ValidAbsL2PTEWord#canCall| |pteword#0|) (_module.__default.isUInt32 |pteword#0|)) true) :qid |ARMdefsd.909:29| :skolemid |2830| :pattern ( (_module.__default.ValidAbsL2PTEWord |pteword#0|)) ))))
(assert (forall ((|pteword#0@@0| Int) ) (!  (=> (_module.__default.isUInt32 |pteword#0@@0|) (and (=> (|_module.__default.ValidAbsL2PTEWord#requires| |pteword#0@@0|) true) (=> true (|_module.__default.ValidAbsL2PTEWord#requires| |pteword#0@@0|)))) :qid |ARMdefsd.909:29| :skolemid |2831| :pattern ( (|_module.__default.ValidAbsL2PTEWord#requires| |pteword#0@@0|)) )))
(assert  (=> true (forall ((|pteword#0@@1| Int) ) (!  (=> (or (|_module.__default.ValidAbsL2PTEWord#canCall| |pteword#0@@1|) (_module.__default.isUInt32 |pteword#0@@1|)) (and (and (|_module.__default.WordAsBits#canCall| |pteword#0@@1|) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000dfc)))) (and (|_module.__default.PageBase#canCall| |pteword#0@@1|) (=> (not (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (U_2_bv32 (Lit (bv32_2_U #x00000000))))) (=> (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000dfc)))) (U_2_bv32 (Lit (bv32_2_U #x0000007c)))) (and |_module.__default.PhysBase#canCall| (|_module.__default.isUInt32#canCall| (INTERNAL_add_boogie (_module.__default.PageBase StartFuel__module._default.PageBase |pteword#0@@1|) _module.__default.PhysBase))))))))) (and (=> (_module.__default.ValidAbsL2PTEWord |pteword#0@@1|) (or (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (U_2_bv32 (Lit (bv32_2_U #x00000000)))) (and (and (not (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) #x00000001)) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000dfc)))) (U_2_bv32 (Lit (bv32_2_U #x0000007c))))) (_module.__default.isUInt32 (INTERNAL_add_boogie (_module.__default.PageBase StartFuel__module._default.PageBase |pteword#0@@1|) _module.__default.PhysBase))))) (=> (or (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (U_2_bv32 (Lit (bv32_2_U #x00000000)))) (and (and (not (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) #x00000001)) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@1|) (U_2_bv32 (Lit (bv32_2_U #x00000dfc)))) (U_2_bv32 (Lit (bv32_2_U #x0000007c))))) (_module.__default.isUInt32 (INTERNAL_add_boogie (_module.__default.PageBase StartFuel__module._default.PageBase |pteword#0@@1|) _module.__default.PhysBase)))) (_module.__default.ValidAbsL2PTEWord |pteword#0@@1|))))) :qid |ARMdefsd.909:29| :skolemid |2832| :pattern ( (_module.__default.ValidAbsL2PTEWord |pteword#0@@1|)) ))))
(assert  (=> true (forall ((|pteword#0@@2| Int) ) (!  (=> (or (|_module.__default.ValidAbsL2PTEWord#canCall| (LitInt |pteword#0@@2|)) (_module.__default.isUInt32 |pteword#0@@2|)) (and (and (|_module.__default.WordAsBits#canCall| (LitInt |pteword#0@@2|)) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000dfc)))) (and (|_module.__default.PageBase#canCall| (LitInt |pteword#0@@2|)) (=> (not (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (U_2_bv32 (Lit (bv32_2_U #x00000000))))) (=> (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000dfc)))) (U_2_bv32 (Lit (bv32_2_U #x0000007c)))) (and |_module.__default.PhysBase#canCall| (|_module.__default.isUInt32#canCall| (INTERNAL_add_boogie (_module.__default.PageBase StartFuel__module._default.PageBase (LitInt |pteword#0@@2|)) _module.__default.PhysBase))))))))) (and (=> (_module.__default.ValidAbsL2PTEWord (LitInt |pteword#0@@2|)) (or (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (U_2_bv32 (Lit (bv32_2_U #x00000000)))) (and (and (not (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) #x00000001)) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000dfc)))) (U_2_bv32 (Lit (bv32_2_U #x0000007c))))) (_module.__default.isUInt32 (INTERNAL_add_boogie (_module.__default.PageBase StartFuel__module._default.PageBase (LitInt |pteword#0@@2|)) _module.__default.PhysBase))))) (=> (or (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (U_2_bv32 (Lit (bv32_2_U #x00000000)))) (and (and (not (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) #x00000001)) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@2|)) (U_2_bv32 (Lit (bv32_2_U #x00000dfc)))) (U_2_bv32 (Lit (bv32_2_U #x0000007c))))) (_module.__default.isUInt32 (INTERNAL_add_boogie (_module.__default.PageBase StartFuel__module._default.PageBase (LitInt |pteword#0@@2|)) _module.__default.PhysBase)))) (_module.__default.ValidAbsL2PTEWord (LitInt |pteword#0@@2|)))))) :qid |ARMdefsd.909:29| :weight 3 :skolemid |2833| :pattern ( (_module.__default.ValidAbsL2PTEWord (LitInt |pteword#0@@2|))) ))))
(assert (forall ((arg0@@341 Int) ) (! (= (type (_module.__default.ExtractAbsL2PTE arg0@@341)) DatatypeTypeType) :qid |funType:_module.__default.ExtractAbsL2PTE| :pattern ( (_module.__default.ExtractAbsL2PTE arg0@@341)) )))
(assert  (=> true (forall ((|pteword#0@@3| Int) ) (!  (=> (or (|_module.__default.ExtractAbsL2PTE#canCall| |pteword#0@@3|) (and (_module.__default.isUInt32 |pteword#0@@3|) (_module.__default.ValidAbsL2PTEWord |pteword#0@@3|))) (and (_module.__default.WellformedAbsPTE (_module.__default.ExtractAbsL2PTE |pteword#0@@3|)) ($Is (_module.__default.ExtractAbsL2PTE |pteword#0@@3|) (Tclass._module.Maybe Tclass._module.AbsPTE)))) :qid |ARMdefsd.918:26| :skolemid |2834| :pattern ( (_module.__default.ExtractAbsL2PTE |pteword#0@@3|)) ))))
(assert (forall ((|pteword#0@@4| Int) ) (!  (=> (_module.__default.isUInt32 |pteword#0@@4|) (and (=> (|_module.__default.ExtractAbsL2PTE#requires| |pteword#0@@4|) (_module.__default.ValidAbsL2PTEWord |pteword#0@@4|)) (=> (_module.__default.ValidAbsL2PTEWord |pteword#0@@4|) (|_module.__default.ExtractAbsL2PTE#requires| |pteword#0@@4|)))) :qid |ARMdefsd.918:26| :skolemid |2835| :pattern ( (|_module.__default.ExtractAbsL2PTE#requires| |pteword#0@@4|)) )))
(assert (forall ((arg0@@342 Int) (arg1@@175 Bool) (arg2@@119 Bool) ) (! (= (type (|#_module.AbsPTE.AbsPTE| arg0@@342 arg1@@175 arg2@@119)) DatatypeTypeType) :qid |funType:#_module.AbsPTE.AbsPTE| :pattern ( (|#_module.AbsPTE.AbsPTE| arg0@@342 arg1@@175 arg2@@119)) )))
(assert  (=> true (forall ((|pteword#0@@5| Int) ) (!  (=> (or (|_module.__default.ExtractAbsL2PTE#canCall| |pteword#0@@5|) (and (_module.__default.isUInt32 |pteword#0@@5|) (_module.__default.ValidAbsL2PTEWord |pteword#0@@5|))) (and (and (|_module.__default.WordAsBits#canCall| |pteword#0@@5|) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@5|) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@5|) (U_2_bv32 (Lit (bv32_2_U #x00000001)))) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@5|) (U_2_bv32 (Lit (bv32_2_U #x00000200)))) (|_module.__default.PageBase#canCall| |pteword#0@@5|))))) (= (_module.__default.ExtractAbsL2PTE |pteword#0@@5|) (ite (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@5|) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (U_2_bv32 (Lit (bv32_2_U #x00000000)))) |#_module.Maybe.Nothing| (|#_module.Maybe.Just| ($Box (|#_module.AbsPTE.AbsPTE| (_module.__default.PageBase StartFuel__module._default.PageBase |pteword#0@@5|) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@5|) (U_2_bv32 (Lit (bv32_2_U #x00000200)))) (U_2_bv32 (Lit (bv32_2_U #x00000000)))) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |pteword#0@@5|) (U_2_bv32 (Lit (bv32_2_U #x00000001)))) (U_2_bv32 (Lit (bv32_2_U #x00000000))))))))))) :qid |ARMdefsd.918:26| :skolemid |2836| :pattern ( (_module.__default.ExtractAbsL2PTE |pteword#0@@5|)) ))))
(assert  (=> true (forall ((|pteword#0@@6| Int) ) (!  (=> (or (|_module.__default.ExtractAbsL2PTE#canCall| (LitInt |pteword#0@@6|)) (and (_module.__default.isUInt32 |pteword#0@@6|) (U_2_bool (Lit (bool_2_U (_module.__default.ValidAbsL2PTEWord (LitInt |pteword#0@@6|))))))) (and (and (|_module.__default.WordAsBits#canCall| (LitInt |pteword#0@@6|)) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@6|)) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@6|)) (U_2_bv32 (Lit (bv32_2_U #x00000001)))) (and (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@6|)) (U_2_bv32 (Lit (bv32_2_U #x00000200)))) (|_module.__default.PageBase#canCall| (LitInt |pteword#0@@6|)))))) (= (_module.__default.ExtractAbsL2PTE (LitInt |pteword#0@@6|)) (ite (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@6|)) (U_2_bv32 (Lit (bv32_2_U #x00000003)))) (U_2_bv32 (Lit (bv32_2_U #x00000000)))) |#_module.Maybe.Nothing| (|#_module.Maybe.Just| ($Box (|#_module.AbsPTE.AbsPTE| (_module.__default.PageBase StartFuel__module._default.PageBase (LitInt |pteword#0@@6|)) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@6|)) (U_2_bv32 (Lit (bv32_2_U #x00000200)))) (U_2_bv32 (Lit (bv32_2_U #x00000000)))) (= (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |pteword#0@@6|)) (U_2_bv32 (Lit (bv32_2_U #x00000001)))) (U_2_bv32 (Lit (bv32_2_U #x00000000))))))))))) :qid |ARMdefsd.918:26| :weight 3 :skolemid |2837| :pattern ( (_module.__default.ExtractAbsL2PTE (LitInt |pteword#0@@6|))) ))))
(assert (= (type Tclass._module.Shift) TyType))
(assert (= (Tag Tclass._module.Shift) Tagclass._module.Shift))
(assert (forall ((bx@@107 T@U) ) (!  (=> (and (= (type bx@@107) BoxType) ($IsBox bx@@107 Tclass._module.Shift)) (and (= ($Box ($Unbox DatatypeTypeType bx@@107)) bx@@107) ($Is ($Unbox DatatypeTypeType bx@@107) Tclass._module.Shift))) :qid |unknown.0:0| :skolemid |2838| :pattern ( ($IsBox bx@@107 Tclass._module.Shift)) )))
(assert  (=> true (forall ((|w#0@@5| Int) (|shift#0| T@U) ) (!  (=> (and (= (type |shift#0|) DatatypeTypeType) (or (|_module.__default.EvalShift#canCall| |w#0@@5| |shift#0|) (and (_module.__default.isUInt32 |w#0@@5|) ($Is |shift#0| Tclass._module.Shift)))) (_module.__default.isUInt32 (_module.__default.EvalShift |w#0@@5| |shift#0|))) :qid |ARMdefsd.936:20| :skolemid |2839| :pattern ( (_module.__default.EvalShift |w#0@@5| |shift#0|)) ))))
(assert (forall ((|w#0@@6| Int) (|shift#0@@0| T@U) ) (!  (=> (= (type |shift#0@@0|) DatatypeTypeType) (=> (and (_module.__default.isUInt32 |w#0@@6|) ($Is |shift#0@@0| Tclass._module.Shift)) (and (=> (|_module.__default.EvalShift#requires| |w#0@@6| |shift#0@@0|) true) (=> true (|_module.__default.EvalShift#requires| |w#0@@6| |shift#0@@0|))))) :qid |ARMdefsd.936:20| :skolemid |2840| :pattern ( (|_module.__default.EvalShift#requires| |w#0@@6| |shift#0@@0|)) )))
(assert  (=> true (forall ((|w#0@@7| Int) (|shift#0@@1| T@U) ) (!  (=> (and (= (type |shift#0@@1|) DatatypeTypeType) (or (|_module.__default.EvalShift#canCall| |w#0@@7| |shift#0@@1|) (and (_module.__default.isUInt32 |w#0@@7|) ($Is |shift#0@@1| Tclass._module.Shift)))) (and (and (=> (_module.Shift.LSLShift_q |shift#0@@1|) (|_module.__default.LeftShift#canCall| |w#0@@7| (_module.Shift.amount__lsl |shift#0@@1|))) (=> (not (_module.Shift.LSLShift_q |shift#0@@1|)) (and (=> (_module.Shift.LSRShift_q |shift#0@@1|) (|_module.__default.RightShift#canCall| |w#0@@7| (_module.Shift.amount__lsr |shift#0@@1|))) (=> (not (_module.Shift.LSRShift_q |shift#0@@1|)) (|_module.__default.RotateRight#canCall| |w#0@@7| (_module.Shift.amount__ror |shift#0@@1|)))))) (= (_module.__default.EvalShift |w#0@@7| |shift#0@@1|) (ite (_module.Shift.LSLShift_q |shift#0@@1|) (_module.__default.LeftShift |w#0@@7| (_module.Shift.amount__lsl |shift#0@@1|)) (ite (_module.Shift.LSRShift_q |shift#0@@1|) (_module.__default.RightShift |w#0@@7| (_module.Shift.amount__lsr |shift#0@@1|)) (_module.__default.RotateRight |w#0@@7| (_module.Shift.amount__ror |shift#0@@1|))))))) :qid |ARMdefsd.936:20| :skolemid |2841| :pattern ( (_module.__default.EvalShift |w#0@@7| |shift#0@@1|)) ))))
(assert  (=> true (forall ((|w#0@@8| Int) (|shift#0@@2| T@U) ) (!  (=> (and (= (type |shift#0@@2|) DatatypeTypeType) (or (|_module.__default.EvalShift#canCall| (LitInt |w#0@@8|) (Lit |shift#0@@2|)) (and (_module.__default.isUInt32 |w#0@@8|) ($Is |shift#0@@2| Tclass._module.Shift)))) (and (and (=> (U_2_bool (Lit (bool_2_U (_module.Shift.LSLShift_q (Lit |shift#0@@2|))))) (|_module.__default.LeftShift#canCall| (LitInt |w#0@@8|) (LitInt (_module.Shift.amount__lsl (Lit |shift#0@@2|))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.Shift.LSLShift_q (Lit |shift#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.Shift.LSRShift_q (Lit |shift#0@@2|))))) (|_module.__default.RightShift#canCall| (LitInt |w#0@@8|) (LitInt (_module.Shift.amount__lsr (Lit |shift#0@@2|))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.Shift.LSRShift_q (Lit |shift#0@@2|)))))) (|_module.__default.RotateRight#canCall| (LitInt |w#0@@8|) (LitInt (_module.Shift.amount__ror (Lit |shift#0@@2|)))))))) (= (_module.__default.EvalShift (LitInt |w#0@@8|) (Lit |shift#0@@2|)) (ite (_module.Shift.LSLShift_q (Lit |shift#0@@2|)) (_module.__default.LeftShift (LitInt |w#0@@8|) (LitInt (_module.Shift.amount__lsl (Lit |shift#0@@2|)))) (ite (_module.Shift.LSRShift_q (Lit |shift#0@@2|)) (_module.__default.RightShift (LitInt |w#0@@8|) (LitInt (_module.Shift.amount__lsr (Lit |shift#0@@2|)))) (_module.__default.RotateRight (LitInt |w#0@@8|) (LitInt (_module.Shift.amount__ror (Lit |shift#0@@2|))))))))) :qid |ARMdefsd.936:20| :weight 3 :skolemid |2842| :pattern ( (_module.__default.EvalShift (LitInt |w#0@@8|) (Lit |shift#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@143| T@U) (|o#0@@37| T@U) ) (!  (=> (and (and (= (type |s#0@@143|) DatatypeTypeType) (= (type |o#0@@37|) DatatypeTypeType)) (or (|_module.__default.OperandContents#canCall| |s#0@@143| |o#0@@37|) (and (and ($Is |s#0@@143| Tclass._module.state) ($Is |o#0@@37| Tclass._module.operand)) (and (_module.__default.ValidState |s#0@@143|) (_module.__default.ValidAnySrcOperand |s#0@@143| |o#0@@37|))))) (_module.__default.isUInt32 (_module.__default.OperandContents |s#0@@143| |o#0@@37|))) :qid |ARMdefsd.944:26| :skolemid |2843| :pattern ( (_module.__default.OperandContents |s#0@@143| |o#0@@37|)) ))))
(assert (forall (($Heap@@173 T@U) (|s#0@@144| T@U) (|o#0@@38| T@U) ) (!  (=> (and (and (and (= (type $Heap@@173) (MapType1Type refType)) (= (type |s#0@@144|) DatatypeTypeType)) (= (type |o#0@@38|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@173) ($Is |s#0@@144| Tclass._module.state)) ($Is |o#0@@38| Tclass._module.operand))) (and (=> (|_module.__default.OperandContents#requires| |s#0@@144| |o#0@@38|) (and (_module.__default.ValidState |s#0@@144|) (_module.__default.ValidAnySrcOperand |s#0@@144| |o#0@@38|))) (=> (and (_module.__default.ValidState |s#0@@144|) (_module.__default.ValidAnySrcOperand |s#0@@144| |o#0@@38|)) (|_module.__default.OperandContents#requires| |s#0@@144| |o#0@@38|)))) :qid |ARMdefsd.944:10| :skolemid |2844| :pattern ( (|_module.__default.OperandContents#requires| |s#0@@144| |o#0@@38|) ($IsGoodHeap $Heap@@173)) )))
(assert  (and (forall ((arg0@@343 T@U) ) (! (= (type (_module.operand.s arg0@@343)) DatatypeTypeType) :qid |funType:_module.operand.s| :pattern ( (_module.operand.s arg0@@343)) )) (= (type MoreFuel__module._default.ValidRegState4) LayerTypeType)))
(assert  (=> true (forall (($Heap@@174 T@U) (|s#0@@145| T@U) (|o#0@@39| T@U) ) (!  (=> (and (and (and (= (type $Heap@@174) (MapType1Type refType)) (= (type |s#0@@145|) DatatypeTypeType)) (= (type |o#0@@39|) DatatypeTypeType)) (or (|_module.__default.OperandContents#canCall| |s#0@@145| |o#0@@39|) (and (and (and ($IsGoodHeap $Heap@@174) ($Is |s#0@@145| Tclass._module.state)) ($Is |o#0@@39| Tclass._module.operand)) (and (_module.__default.ValidState |s#0@@145|) (_module.__default.ValidAnySrcOperand |s#0@@145| |o#0@@39|))))) (and (=> (not (_module.operand.OConst_q |o#0@@39|)) (and (=> (_module.operand.OReg_q |o#0@@39|) (_module.state.State_q |s#0@@145|)) (=> (not (_module.operand.OReg_q |o#0@@39|)) (and (=> (_module.operand.OSReg_q |o#0@@39|) (_module.state.State_q |s#0@@145|)) (=> (not (_module.operand.OSReg_q |o#0@@39|)) (and (=> (_module.operand.OShift_q |o#0@@39|) (and (_module.state.State_q |s#0@@145|) (|_module.__default.EvalShift#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.regs |s#0@@145|)) ($Box (_module.operand.reg |o#0@@39|))))) (_module.operand.s |o#0@@39|)))) (=> (not (_module.operand.OShift_q |o#0@@39|)) (and (=> (_module.operand.OSP_q |o#0@@39|) (and (_module.state.State_q |s#0@@145|) (|_module.__default.mode__of__state#canCall| |s#0@@145|))) (=> (not (_module.operand.OSP_q |o#0@@39|)) (and (_module.state.State_q |s#0@@145|) (|_module.__default.mode__of__state#canCall| |s#0@@145|))))))))))) (and (and (and (= StartFuel__module._default.ValidRegState ($LS MoreFuel__module._default.ValidRegState4)) (= StartFuelAssert__module._default.ValidRegState ($LS ($LS MoreFuel__module._default.ValidRegState4)))) (= (AsFuelBottom MoreFuel__module._default.ValidRegState4) MoreFuel__module._default.ValidRegState4)) (= (_module.__default.OperandContents |s#0@@145| |o#0@@39|) (ite (_module.operand.OConst_q |o#0@@39|) (_module.operand.n |o#0@@39|) (ite (_module.operand.OReg_q |o#0@@39|) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.regs |s#0@@145|)) ($Box (_module.operand.r |o#0@@39|))))) (ite (_module.operand.OSReg_q |o#0@@39|) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@145|)) ($Box (_module.operand.sr |o#0@@39|))))) (ite (_module.operand.OShift_q |o#0@@39|) (_module.__default.EvalShift (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.regs |s#0@@145|)) ($Box (_module.operand.reg |o#0@@39|))))) (_module.operand.s |o#0@@39|)) (ite (_module.operand.OSP_q |o#0@@39|) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.regs |s#0@@145|)) ($Box (|#_module.ARMReg.SP| (_module.__default.mode__of__state |s#0@@145|)))))) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.regs |s#0@@145|)) ($Box (|#_module.ARMReg.LR| (_module.__default.mode__of__state |s#0@@145|))))))))))))))) :qid |ARMdefsd.944:10| :skolemid |2845| :pattern ( (_module.__default.OperandContents |s#0@@145| |o#0@@39|) ($IsGoodHeap $Heap@@174)) ))))
(assert (= (type MoreFuel__module._default.ValidRegState5) LayerTypeType))
(assert  (=> true (forall (($Heap@@175 T@U) (|s#0@@146| T@U) (|o#0@@40| T@U) ) (!  (=> (and (and (and (= (type $Heap@@175) (MapType1Type refType)) (= (type |s#0@@146|) DatatypeTypeType)) (= (type |o#0@@40|) DatatypeTypeType)) (or (|_module.__default.OperandContents#canCall| (Lit |s#0@@146|) (Lit |o#0@@40|)) (and (and (and ($IsGoodHeap $Heap@@175) ($Is |s#0@@146| Tclass._module.state)) ($Is |o#0@@40| Tclass._module.operand)) (and (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@146|))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidAnySrcOperand (Lit |s#0@@146|) (Lit |o#0@@40|))))))))) (and (=> (not (U_2_bool (Lit (bool_2_U (_module.operand.OConst_q (Lit |o#0@@40|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OReg_q (Lit |o#0@@40|))))) (_module.state.State_q (Lit |s#0@@146|))) (=> (not (U_2_bool (Lit (bool_2_U (_module.operand.OReg_q (Lit |o#0@@40|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OSReg_q (Lit |o#0@@40|))))) (_module.state.State_q (Lit |s#0@@146|))) (=> (not (U_2_bool (Lit (bool_2_U (_module.operand.OSReg_q (Lit |o#0@@40|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OShift_q (Lit |o#0@@40|))))) (and (_module.state.State_q (Lit |s#0@@146|)) (|_module.__default.EvalShift#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.regs (Lit |s#0@@146|)))) ($Box (Lit (_module.operand.reg (Lit |o#0@@40|))))))) (Lit (_module.operand.s (Lit |o#0@@40|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.operand.OShift_q (Lit |o#0@@40|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OSP_q (Lit |o#0@@40|))))) (and (_module.state.State_q (Lit |s#0@@146|)) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@146|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.operand.OSP_q (Lit |o#0@@40|)))))) (and (_module.state.State_q (Lit |s#0@@146|)) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@146|)))))))))))) (and (and (and (= StartFuel__module._default.ValidRegState ($LS MoreFuel__module._default.ValidRegState5)) (= StartFuelAssert__module._default.ValidRegState ($LS ($LS MoreFuel__module._default.ValidRegState5)))) (= (AsFuelBottom MoreFuel__module._default.ValidRegState5) MoreFuel__module._default.ValidRegState5)) (= (_module.__default.OperandContents (Lit |s#0@@146|) (Lit |o#0@@40|)) (ite (_module.operand.OConst_q (Lit |o#0@@40|)) (_module.operand.n (Lit |o#0@@40|)) (ite (_module.operand.OReg_q (Lit |o#0@@40|)) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.regs (Lit |s#0@@146|)))) ($Box (Lit (_module.operand.r (Lit |o#0@@40|))))))) (ite (_module.operand.OSReg_q (Lit |o#0@@40|)) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@146|)))) ($Box (Lit (_module.operand.sr (Lit |o#0@@40|))))))) (ite (_module.operand.OShift_q (Lit |o#0@@40|)) (_module.__default.EvalShift (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.regs (Lit |s#0@@146|)))) ($Box (Lit (_module.operand.reg (Lit |o#0@@40|))))))) (Lit (_module.operand.s (Lit |o#0@@40|)))) (ite (_module.operand.OSP_q (Lit |o#0@@40|)) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.regs (Lit |s#0@@146|)))) ($Box (Lit (|#_module.ARMReg.SP| (Lit (_module.__default.mode__of__state (Lit |s#0@@146|))))))))) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.regs (Lit |s#0@@146|)))) ($Box (Lit (|#_module.ARMReg.LR| (Lit (_module.__default.mode__of__state (Lit |s#0@@146|)))))))))))))))))) :qid |ARMdefsd.944:10| :weight 3 :skolemid |2846| :pattern ( (_module.__default.OperandContents (Lit |s#0@@146|) (Lit |o#0@@40|)) ($IsGoodHeap $Heap@@175)) ))))
(assert  (=> true (forall ((|s#0@@147| T@U) (|m#0@@46| Int) ) (!  (=> (and (= (type |s#0@@147|) DatatypeTypeType) (or (|_module.__default.MemContents#canCall| |s#0@@147| |m#0@@46|) (and (and ($Is |s#0@@147| Tclass._module.memstate) (and (_module.__default.isUInt32 |m#0@@46|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |m#0@@46|))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@147|) (_module.__default.ValidMemForRead |m#0@@46|))))) (_module.__default.isUInt32 (_module.__default.MemContents |s#0@@147| |m#0@@46|))) :qid |ARMdefsd.959:22| :skolemid |2847| :pattern ( (_module.__default.MemContents |s#0@@147| |m#0@@46|)) ))))
(assert (forall (($Heap@@176 T@U) (|s#0@@148| T@U) (|m#0@@47| Int) ) (!  (=> (and (= (type $Heap@@176) (MapType1Type refType)) (= (type |s#0@@148|) DatatypeTypeType)) (=> (and (and ($IsGoodHeap $Heap@@176) ($Is |s#0@@148| Tclass._module.memstate)) (and (_module.__default.isUInt32 |m#0@@47|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |m#0@@47|))) (and (=> (|_module.__default.MemContents#requires| |s#0@@148| |m#0@@47|) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@148|) (_module.__default.ValidMemForRead |m#0@@47|))) (=> (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@148|) (_module.__default.ValidMemForRead |m#0@@47|)) (|_module.__default.MemContents#requires| |s#0@@148| |m#0@@47|))))) :qid |ARMdefsd.959:10| :skolemid |2848| :pattern ( (|_module.__default.MemContents#requires| |s#0@@148| |m#0@@47|) ($IsGoodHeap $Heap@@176)) )))
(assert (= (type MoreFuel__module._default.ValidMemState2) LayerTypeType))
(assert  (=> true (forall (($Heap@@177 T@U) (|s#0@@149| T@U) (|m#0@@48| Int) ) (!  (=> (and (and (= (type $Heap@@177) (MapType1Type refType)) (= (type |s#0@@149|) DatatypeTypeType)) (or (|_module.__default.MemContents#canCall| |s#0@@149| |m#0@@48|) (and (and (and ($IsGoodHeap $Heap@@177) ($Is |s#0@@149| Tclass._module.memstate)) (and (_module.__default.isUInt32 |m#0@@48|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |m#0@@48|))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@149|) (_module.__default.ValidMemForRead |m#0@@48|))))) (and (_module.memstate.MemState_q |s#0@@149|) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState2)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState2)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState2) MoreFuel__module._default.ValidMemState2)) (= (_module.__default.MemContents |s#0@@149| |m#0@@48|) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.memstate.addresses |s#0@@149|)) ($Box (int_2_U |m#0@@48|))))))))) :qid |ARMdefsd.959:10| :skolemid |2849| :pattern ( (_module.__default.MemContents |s#0@@149| |m#0@@48|) ($IsGoodHeap $Heap@@177)) ))))
(assert (= (type MoreFuel__module._default.ValidMemState3) LayerTypeType))
(assert  (=> true (forall (($Heap@@178 T@U) (|s#0@@150| T@U) (|m#0@@49| Int) ) (!  (=> (and (and (= (type $Heap@@178) (MapType1Type refType)) (= (type |s#0@@150|) DatatypeTypeType)) (or (|_module.__default.MemContents#canCall| (Lit |s#0@@150|) (LitInt |m#0@@49|)) (and (and (and ($IsGoodHeap $Heap@@178) ($Is |s#0@@150| Tclass._module.memstate)) (and (_module.__default.isUInt32 |m#0@@49|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |m#0@@49|))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |s#0@@150|)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidMemForRead (LitInt |m#0@@49|))))))))) (and (_module.memstate.MemState_q (Lit |s#0@@150|)) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState3)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState3)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState3) MoreFuel__module._default.ValidMemState3)) (= (_module.__default.MemContents (Lit |s#0@@150|) (LitInt |m#0@@49|)) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.memstate.addresses (Lit |s#0@@150|)))) ($Box (int_2_U (LitInt |m#0@@49|)))))))))) :qid |ARMdefsd.959:10| :weight 3 :skolemid |2850| :pattern ( (_module.__default.MemContents (Lit |s#0@@150|) (LitInt |m#0@@49|)) ($IsGoodHeap $Heap@@178)) ))))
(assert (forall ((arg0@@344 T@U) (arg1@@176 T@U) ) (! (= (type (_module.__default.GlobalFullContents arg0@@344 arg1@@176)) (SeqType BoxType)) :qid |funType:_module.__default.GlobalFullContents| :pattern ( (_module.__default.GlobalFullContents arg0@@344 arg1@@176)) )))
(assert  (=> true (forall ((|s#0@@151| T@U) (|g#0@@21| T@U) ) (!  (=> (and (and (= (type |s#0@@151|) DatatypeTypeType) (= (type |g#0@@21|) (SeqType BoxType))) (or (|_module.__default.GlobalFullContents#canCall| |s#0@@151| |g#0@@21|) (and (and ($Is |s#0@@151| Tclass._module.memstate) ($Is |g#0@@21| (TSeq TChar))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@151|) (_module.__default.ValidGlobal |g#0@@21|))))) (and (= (_module.__default.WordsToBytes (|Seq#Length| (_module.__default.GlobalFullContents |s#0@@151| |g#0@@21|))) (_module.__default.SizeOfGlobal |g#0@@21|)) ($Is (_module.__default.GlobalFullContents |s#0@@151| |g#0@@21|) (TSeq Tclass._module.word)))) :qid |ARMdefsd.967:29| :skolemid |2851| :pattern ( (_module.__default.GlobalFullContents |s#0@@151| |g#0@@21|)) ))))
(assert (forall (($Heap@@179 T@U) (|s#0@@152| T@U) (|g#0@@22| T@U) ) (!  (=> (and (and (and (= (type $Heap@@179) (MapType1Type refType)) (= (type |s#0@@152|) DatatypeTypeType)) (= (type |g#0@@22|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@179) ($Is |s#0@@152| Tclass._module.memstate)) ($Is |g#0@@22| (TSeq TChar)))) (and (=> (|_module.__default.GlobalFullContents#requires| |s#0@@152| |g#0@@22|) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@152|) (_module.__default.ValidGlobal |g#0@@22|))) (=> (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@152|) (_module.__default.ValidGlobal |g#0@@22|)) (|_module.__default.GlobalFullContents#requires| |s#0@@152| |g#0@@22|)))) :qid |ARMdefsd.967:10| :skolemid |2852| :pattern ( (|_module.__default.GlobalFullContents#requires| |s#0@@152| |g#0@@22|) ($IsGoodHeap $Heap@@179)) )))
(assert (= (type MoreFuel__module._default.ValidMemState4) LayerTypeType))
(assert  (=> true (forall (($Heap@@180 T@U) (|s#0@@153| T@U) (|g#0@@23| T@U) ) (!  (=> (and (and (and (= (type $Heap@@180) (MapType1Type refType)) (= (type |s#0@@153|) DatatypeTypeType)) (= (type |g#0@@23|) (SeqType BoxType))) (or (|_module.__default.GlobalFullContents#canCall| |s#0@@153| |g#0@@23|) (and (and (and ($IsGoodHeap $Heap@@180) ($Is |s#0@@153| Tclass._module.memstate)) ($Is |g#0@@23| (TSeq TChar))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@153|) (_module.__default.ValidGlobal |g#0@@23|))))) (and (_module.memstate.MemState_q |s#0@@153|) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState4)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState4)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState4) MoreFuel__module._default.ValidMemState4)) (= (_module.__default.GlobalFullContents |s#0@@153| |g#0@@23|) ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (_module.memstate.globals |s#0@@153|)) ($Box |g#0@@23|))))))) :qid |ARMdefsd.967:10| :skolemid |2853| :pattern ( (_module.__default.GlobalFullContents |s#0@@153| |g#0@@23|) ($IsGoodHeap $Heap@@180)) ))))
(assert (= (type MoreFuel__module._default.ValidMemState5) LayerTypeType))
(assert  (=> true (forall (($Heap@@181 T@U) (|s#0@@154| T@U) (|g#0@@24| T@U) ) (!  (=> (and (and (and (= (type $Heap@@181) (MapType1Type refType)) (= (type |s#0@@154|) DatatypeTypeType)) (= (type |g#0@@24|) (SeqType BoxType))) (or (|_module.__default.GlobalFullContents#canCall| (Lit |s#0@@154|) (Lit |g#0@@24|)) (and (and (and ($IsGoodHeap $Heap@@181) ($Is |s#0@@154| Tclass._module.memstate)) ($Is |g#0@@24| (TSeq TChar))) (and (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |s#0@@154|)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidGlobal (Lit |g#0@@24|))))))))) (and (_module.memstate.MemState_q (Lit |s#0@@154|)) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState5)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState5)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState5) MoreFuel__module._default.ValidMemState5)) (= (_module.__default.GlobalFullContents (Lit |s#0@@154|) (Lit |g#0@@24|)) ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit (_module.memstate.globals (Lit |s#0@@154|)))) ($Box (Lit |g#0@@24|)))))))) :qid |ARMdefsd.967:10| :weight 3 :skolemid |2854| :pattern ( (_module.__default.GlobalFullContents (Lit |s#0@@154|) (Lit |g#0@@24|)) ($IsGoodHeap $Heap@@181)) ))))
(assert  (=> true (forall ((|s#0@@155| T@U) (|g#0@@25| T@U) (|offset#0@@11| Int) ) (!  (=> (and (and (= (type |s#0@@155|) DatatypeTypeType) (= (type |g#0@@25|) (SeqType BoxType))) (or (|_module.__default.GlobalWord#canCall| |s#0@@155| |g#0@@25| |offset#0@@11|) (and (and (and ($Is |s#0@@155| Tclass._module.memstate) ($Is |g#0@@25| (TSeq TChar))) (_module.__default.isUInt32 |offset#0@@11|)) (and (_module.__default.ValidGlobalOffset |g#0@@25| |offset#0@@11|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@155|))))) (_module.__default.isUInt32 (_module.__default.GlobalWord |s#0@@155| |g#0@@25| |offset#0@@11|))) :qid |ARMdefsd.976:21| :skolemid |2855| :pattern ( (_module.__default.GlobalWord |s#0@@155| |g#0@@25| |offset#0@@11|)) ))))
(assert (forall ((|s#0@@156| T@U) (|g#0@@26| T@U) (|offset#0@@12| Int) ) (!  (=> (and (= (type |s#0@@156|) DatatypeTypeType) (= (type |g#0@@26|) (SeqType BoxType))) (=> (and (and ($Is |s#0@@156| Tclass._module.memstate) ($Is |g#0@@26| (TSeq TChar))) (_module.__default.isUInt32 |offset#0@@12|)) (and (=> (|_module.__default.GlobalWord#requires| |s#0@@156| |g#0@@26| |offset#0@@12|) (and (_module.__default.ValidGlobalOffset |g#0@@26| |offset#0@@12|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@156|))) (=> (and (_module.__default.ValidGlobalOffset |g#0@@26| |offset#0@@12|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@156|)) (|_module.__default.GlobalWord#requires| |s#0@@156| |g#0@@26| |offset#0@@12|))))) :qid |ARMdefsd.976:21| :skolemid |2856| :pattern ( (|_module.__default.GlobalWord#requires| |s#0@@156| |g#0@@26| |offset#0@@12|)) )))
(assert (= (type MoreFuel__module._default.ValidMemState6) LayerTypeType))
(assert  (=> true (forall ((|s#0@@157| T@U) (|g#0@@27| T@U) (|offset#0@@13| Int) ) (!  (=> (and (and (= (type |s#0@@157|) DatatypeTypeType) (= (type |g#0@@27|) (SeqType BoxType))) (or (|_module.__default.GlobalWord#canCall| |s#0@@157| |g#0@@27| |offset#0@@13|) (and (and (and ($Is |s#0@@157| Tclass._module.memstate) ($Is |g#0@@27| (TSeq TChar))) (_module.__default.isUInt32 |offset#0@@13|)) (and (_module.__default.ValidGlobalOffset |g#0@@27| |offset#0@@13|) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState |s#0@@157|))))) (and (and (|_module.__default.GlobalFullContents#canCall| |s#0@@157| |g#0@@27|) (|_module.__default.BytesToWords#canCall| |offset#0@@13|)) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState6)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState6)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState6) MoreFuel__module._default.ValidMemState6)) (= (_module.__default.GlobalWord |s#0@@157| |g#0@@27| |offset#0@@13|) (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.GlobalFullContents |s#0@@157| |g#0@@27|) (_module.__default.BytesToWords |offset#0@@13|)))))))) :qid |ARMdefsd.976:21| :skolemid |2857| :pattern ( (_module.__default.GlobalWord |s#0@@157| |g#0@@27| |offset#0@@13|)) ))))
(assert (= (type MoreFuel__module._default.ValidMemState7) LayerTypeType))
(assert  (=> true (forall ((|s#0@@158| T@U) (|g#0@@28| T@U) (|offset#0@@14| Int) ) (!  (=> (and (and (= (type |s#0@@158|) DatatypeTypeType) (= (type |g#0@@28|) (SeqType BoxType))) (or (|_module.__default.GlobalWord#canCall| (Lit |s#0@@158|) (Lit |g#0@@28|) (LitInt |offset#0@@14|)) (and (and (and ($Is |s#0@@158| Tclass._module.memstate) ($Is |g#0@@28| (TSeq TChar))) (_module.__default.isUInt32 |offset#0@@14|)) (and (U_2_bool (Lit (bool_2_U (_module.__default.ValidGlobalOffset (Lit |g#0@@28|) (LitInt |offset#0@@14|))))) (_module.__default.ValidMemState StartFuel__module._default.ValidMemState (Lit |s#0@@158|)))))) (and (and (|_module.__default.GlobalFullContents#canCall| (Lit |s#0@@158|) (Lit |g#0@@28|)) (|_module.__default.BytesToWords#canCall| (LitInt |offset#0@@14|))) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState7)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState7)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState7) MoreFuel__module._default.ValidMemState7)) (= (_module.__default.GlobalWord (Lit |s#0@@158|) (Lit |g#0@@28|) (LitInt |offset#0@@14|)) (U_2_int ($Unbox intType (|Seq#Index| (Lit (_module.__default.GlobalFullContents (Lit |s#0@@158|) (Lit |g#0@@28|))) (LitInt (_module.__default.BytesToWords (LitInt |offset#0@@14|)))))))))) :qid |ARMdefsd.976:21| :weight 3 :skolemid |2858| :pattern ( (_module.__default.GlobalWord (Lit |s#0@@158|) (Lit |g#0@@28|) (LitInt |offset#0@@14|))) ))))
(assert  (=> true (forall ((|s#0@@159| T@U) ) (!  (=> (and (= (type |s#0@@159|) DatatypeTypeType) (or (|_module.__default.reseed__nondet__state#canCall| |s#0@@159|) (and ($Is |s#0@@159| Tclass._module.state) (_module.__default.ValidState |s#0@@159|)))) (and (_module.__default.ValidState |s#0@@159|) ($Is (_module.__default.reseed__nondet__state |s#0@@159|) Tclass._module.state))) :qid |ARMdefsd.984:30| :skolemid |2859| :pattern ( (_module.__default.reseed__nondet__state |s#0@@159|)) ))))
(assert (forall (($Heap@@182 T@U) (|s#0@@160| T@U) ) (!  (=> (and (and (= (type $Heap@@182) (MapType1Type refType)) (= (type |s#0@@160|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@182) ($Is |s#0@@160| Tclass._module.state))) (and (=> (|_module.__default.reseed__nondet__state#requires| |s#0@@160|) (_module.__default.ValidState |s#0@@160|)) (=> (_module.__default.ValidState |s#0@@160|) (|_module.__default.reseed__nondet__state#requires| |s#0@@160|)))) :qid |ARMdefsd.984:10| :skolemid |2860| :pattern ( (|_module.__default.reseed__nondet__state#requires| |s#0@@160|) ($IsGoodHeap $Heap@@182)) )))
(assert (= (type MoreFuel__module._default.ValidSRegState6) LayerTypeType))
(assert  (=> true (forall (($Heap@@183 T@U) (|s#0@@161| T@U) ) (!  (=> (and (and (= (type $Heap@@183) (MapType1Type refType)) (= (type |s#0@@161|) DatatypeTypeType)) (or (|_module.__default.reseed__nondet__state#canCall| |s#0@@161|) (and (and ($IsGoodHeap $Heap@@183) ($Is |s#0@@161| Tclass._module.state)) (_module.__default.ValidState |s#0@@161|)))) (and (and (and (and (and (and (and (_module.state.State_q |s#0@@161|) (_module.state.State_q |s#0@@161|)) (_module.state.State_q |s#0@@161|)) (and (_module.state.State_q |s#0@@161|) (and (and (and (and (and (and (_module.config.Config_q (_module.state.conf |s#0@@161|)) (_module.config.Config_q (_module.state.conf |s#0@@161|))) (_module.config.Config_q (_module.state.conf |s#0@@161|))) (_module.config.Config_q (_module.state.conf |s#0@@161|))) (_module.config.Config_q (_module.state.conf |s#0@@161|))) (_module.config.Config_q (_module.state.conf |s#0@@161|))) (and (and (and (_module.state.State_q |s#0@@161|) (_module.config.Config_q (_module.state.conf |s#0@@161|))) |_module.__default.NONDET__GENERATOR#canCall|) (|_module.__default.nondet__int#canCall| (_module.config.nondet (_module.state.conf |s#0@@161|)) _module.__default.NONDET__GENERATOR))))) (_module.state.State_q |s#0@@161|)) (_module.state.State_q |s#0@@161|)) (_module.state.State_q |s#0@@161|)) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState6)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState6)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState6) MoreFuel__module._default.ValidSRegState6)) (= (_module.__default.reseed__nondet__state |s#0@@161|) (|#_module.state.State| (_module.state.regs |s#0@@161|) (_module.state.sregs |s#0@@161|) (_module.state.m |s#0@@161|) (|#_module.config.Config| (_module.config.cpsr (_module.state.conf |s#0@@161|)) (_module.config.scr (_module.state.conf |s#0@@161|)) (_module.config.ttbr0 (_module.state.conf |s#0@@161|)) (_module.config.tlb__consistent (_module.state.conf |s#0@@161|)) (_module.config.ex (_module.state.conf |s#0@@161|)) (_module.config.exstep (_module.state.conf |s#0@@161|)) (_module.__default.nondet__int (_module.config.nondet (_module.state.conf |s#0@@161|)) _module.__default.NONDET__GENERATOR)) (_module.state.rng |s#0@@161|) (_module.state.ok |s#0@@161|) (_module.state.steps |s#0@@161|)))))) :qid |ARMdefsd.984:10| :skolemid |2861| :pattern ( (_module.__default.reseed__nondet__state |s#0@@161|) ($IsGoodHeap $Heap@@183)) ))))
(assert (= (type MoreFuel__module._default.ValidSRegState7) LayerTypeType))
(assert  (=> true (forall (($Heap@@184 T@U) (|s#0@@162| T@U) ) (!  (=> (and (and (= (type $Heap@@184) (MapType1Type refType)) (= (type |s#0@@162|) DatatypeTypeType)) (or (|_module.__default.reseed__nondet__state#canCall| (Lit |s#0@@162|)) (and (and ($IsGoodHeap $Heap@@184) ($Is |s#0@@162| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@162|)))))))) (and (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@162|)) (_module.state.State_q (Lit |s#0@@162|))) (_module.state.State_q (Lit |s#0@@162|))) (and (_module.state.State_q (Lit |s#0@@162|)) (and (and (and (and (and (and (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@162|)))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@162|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@162|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@162|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@162|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@162|))))) (and (and (and (_module.state.State_q (Lit |s#0@@162|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@162|))))) |_module.__default.NONDET__GENERATOR#canCall|) (|_module.__default.nondet__int#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@162|))))) _module.__default.NONDET__GENERATOR))))) (_module.state.State_q (Lit |s#0@@162|))) (_module.state.State_q (Lit |s#0@@162|))) (_module.state.State_q (Lit |s#0@@162|))) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState7)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState7)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState7) MoreFuel__module._default.ValidSRegState7)) (= (_module.__default.reseed__nondet__state (Lit |s#0@@162|)) (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@162|))) (Lit (_module.state.sregs (Lit |s#0@@162|))) (Lit (_module.state.m (Lit |s#0@@162|))) (|#_module.config.Config| (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@162|))))) (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@162|))))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@162|))))) (U_2_bool (Lit (bool_2_U (_module.config.tlb__consistent (Lit (_module.state.conf (Lit |s#0@@162|))))))) (Lit (_module.config.ex (Lit (_module.state.conf (Lit |s#0@@162|))))) (LitInt (_module.config.exstep (Lit (_module.state.conf (Lit |s#0@@162|))))) (_module.__default.nondet__int (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@162|))))) _module.__default.NONDET__GENERATOR)) (Lit (_module.state.rng (Lit |s#0@@162|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@162|))))) (LitInt (_module.state.steps (Lit |s#0@@162|)))))))) :qid |ARMdefsd.984:10| :weight 3 :skolemid |2862| :pattern ( (_module.__default.reseed__nondet__state (Lit |s#0@@162|)) ($IsGoodHeap $Heap@@184)) ))))
(assert  (=> true (forall ((|s#0@@163| T@U) ) (!  (=> (and (= (type |s#0@@163|) DatatypeTypeType) (or (|_module.__default.takestep#canCall| |s#0@@163|) ($Is |s#0@@163| Tclass._module.state))) ($Is (_module.__default.takestep |s#0@@163|) Tclass._module.state)) :qid |ARMdefsd.992:19| :skolemid |2863| :pattern ( (_module.__default.takestep |s#0@@163|)) ))))
(assert (forall (($Heap@@185 T@U) (|s#0@@164| T@U) ) (!  (=> (and (and (= (type $Heap@@185) (MapType1Type refType)) (= (type |s#0@@164|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@185) ($Is |s#0@@164| Tclass._module.state))) (and (=> (|_module.__default.takestep#requires| |s#0@@164|) true) (=> true (|_module.__default.takestep#requires| |s#0@@164|)))) :qid |ARMdefsd.992:10| :skolemid |2864| :pattern ( (|_module.__default.takestep#requires| |s#0@@164|) ($IsGoodHeap $Heap@@185)) )))
(assert  (=> true (forall (($Heap@@186 T@U) (|s#0@@165| T@U) ) (!  (=> (and (and (= (type $Heap@@186) (MapType1Type refType)) (= (type |s#0@@165|) DatatypeTypeType)) (or (|_module.__default.takestep#canCall| |s#0@@165|) (and ($IsGoodHeap $Heap@@186) ($Is |s#0@@165| Tclass._module.state)))) (and (and (and (and (and (and (and (_module.state.State_q |s#0@@165|) (_module.state.State_q |s#0@@165|)) (_module.state.State_q |s#0@@165|)) (_module.state.State_q |s#0@@165|)) (_module.state.State_q |s#0@@165|)) (_module.state.State_q |s#0@@165|)) (_module.state.State_q |s#0@@165|)) (= (_module.__default.takestep |s#0@@165|) (|#_module.state.State| (_module.state.regs |s#0@@165|) (_module.state.sregs |s#0@@165|) (_module.state.m |s#0@@165|) (_module.state.conf |s#0@@165|) (_module.state.rng |s#0@@165|) (_module.state.ok |s#0@@165|) (INTERNAL_add_boogie (_module.state.steps |s#0@@165|) 1))))) :qid |ARMdefsd.992:10| :skolemid |2865| :pattern ( (_module.__default.takestep |s#0@@165|) ($IsGoodHeap $Heap@@186)) ))))
(assert  (=> true (forall (($Heap@@187 T@U) (|s#0@@166| T@U) ) (!  (=> (and (and (= (type $Heap@@187) (MapType1Type refType)) (= (type |s#0@@166|) DatatypeTypeType)) (or (|_module.__default.takestep#canCall| (Lit |s#0@@166|)) (and ($IsGoodHeap $Heap@@187) ($Is |s#0@@166| Tclass._module.state)))) (and (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@166|)) (_module.state.State_q (Lit |s#0@@166|))) (_module.state.State_q (Lit |s#0@@166|))) (_module.state.State_q (Lit |s#0@@166|))) (_module.state.State_q (Lit |s#0@@166|))) (_module.state.State_q (Lit |s#0@@166|))) (_module.state.State_q (Lit |s#0@@166|))) (= (_module.__default.takestep (Lit |s#0@@166|)) (Lit (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@166|))) (Lit (_module.state.sregs (Lit |s#0@@166|))) (Lit (_module.state.m (Lit |s#0@@166|))) (Lit (_module.state.conf (Lit |s#0@@166|))) (Lit (_module.state.rng (Lit |s#0@@166|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@166|))))) (LitInt (INTERNAL_add_boogie (_module.state.steps (Lit |s#0@@166|)) 1))))))) :qid |ARMdefsd.992:10| :weight 3 :skolemid |2866| :pattern ( (_module.__default.takestep (Lit |s#0@@166|)) ($IsGoodHeap $Heap@@187)) ))))
(assert  (=> true (forall (($Heap@@188 T@U) (|s#0@@167| T@U) (|o#0@@41| T@U) (|v#0@@43| Int) (|r#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type $Heap@@188) (MapType1Type refType)) (= (type |s#0@@167|) DatatypeTypeType)) (= (type |o#0@@41|) DatatypeTypeType)) (= (type |r#0@@32|) DatatypeTypeType)) (or (|_module.__default.evalUpdate#canCall| |s#0@@167| |o#0@@41| |v#0@@43| |r#0@@32|) (and (and (and (and (and ($IsGoodHeap $Heap@@188) ($Is |s#0@@167| Tclass._module.state)) ($Is |o#0@@41| Tclass._module.operand)) (_module.__default.isUInt32 |v#0@@43|)) ($Is |r#0@@32| Tclass._module.state)) (and (and (_module.__default.ValidState |s#0@@167|) (or (or (or (_module.__default.ValidRegOperand |o#0@@41|) (_module.__default.ValidBankedRegOperand |s#0@@167| |o#0@@41|)) (_module.__default.ValidMrsMsrOperand |s#0@@167| |o#0@@41|)) (_module.__default.ValidMcrMrcOperand |s#0@@167| |o#0@@41|))) (=> (_module.operand.OSReg_q |o#0@@41|) (and (_module.__default.ValidSReg (_module.operand.sr |o#0@@41|)) (=> (or (_module.SReg.cpsr_q (_module.operand.sr |o#0@@41|)) (_module.SReg.spsr_q (_module.operand.sr |o#0@@41|))) (_module.__default.ValidPsrWord |v#0@@43|)))))))) (_module.__default.evalUpdate |s#0@@167| |o#0@@41| |v#0@@43| |r#0@@32|)) (_module.__default.ValidState |r#0@@32|)) :qid |ARMdefsd.997:11| :skolemid |2867| :pattern ( (_module.__default.evalUpdate |s#0@@167| |o#0@@41| |v#0@@43| |r#0@@32|) ($IsGoodHeap $Heap@@188)) ))))
(assert (forall (($Heap@@189 T@U) (|s#0@@168| T@U) (|o#0@@42| T@U) (|v#0@@44| Int) (|r#0@@33| T@U) ) (!  (=> (and (and (and (= (type $Heap@@189) (MapType1Type refType)) (= (type |s#0@@168|) DatatypeTypeType)) (= (type |o#0@@42|) DatatypeTypeType)) (= (type |r#0@@33|) DatatypeTypeType)) (=> (and (and (and (and ($IsGoodHeap $Heap@@189) ($Is |s#0@@168| Tclass._module.state)) ($Is |o#0@@42| Tclass._module.operand)) (_module.__default.isUInt32 |v#0@@44|)) ($Is |r#0@@33| Tclass._module.state)) (and (=> (|_module.__default.evalUpdate#requires| |s#0@@168| |o#0@@42| |v#0@@44| |r#0@@33|) (and (and (_module.__default.ValidState |s#0@@168|) (or (or (or (_module.__default.ValidRegOperand |o#0@@42|) (_module.__default.ValidBankedRegOperand |s#0@@168| |o#0@@42|)) (_module.__default.ValidMrsMsrOperand |s#0@@168| |o#0@@42|)) (_module.__default.ValidMcrMrcOperand |s#0@@168| |o#0@@42|))) (=> (_module.operand.OSReg_q |o#0@@42|) (and (_module.__default.ValidSReg (_module.operand.sr |o#0@@42|)) (=> (or (_module.SReg.cpsr_q (_module.operand.sr |o#0@@42|)) (_module.SReg.spsr_q (_module.operand.sr |o#0@@42|))) (_module.__default.ValidPsrWord |v#0@@44|)))))) (=> (and (and (_module.__default.ValidState |s#0@@168|) (or (or (or (_module.__default.ValidRegOperand |o#0@@42|) (_module.__default.ValidBankedRegOperand |s#0@@168| |o#0@@42|)) (_module.__default.ValidMrsMsrOperand |s#0@@168| |o#0@@42|)) (_module.__default.ValidMcrMrcOperand |s#0@@168| |o#0@@42|))) (=> (_module.operand.OSReg_q |o#0@@42|) (and (_module.__default.ValidSReg (_module.operand.sr |o#0@@42|)) (=> (or (_module.SReg.cpsr_q (_module.operand.sr |o#0@@42|)) (_module.SReg.spsr_q (_module.operand.sr |o#0@@42|))) (_module.__default.ValidPsrWord |v#0@@44|))))) (|_module.__default.evalUpdate#requires| |s#0@@168| |o#0@@42| |v#0@@44| |r#0@@33|))))) :qid |ARMdefsd.997:11| :skolemid |2868| :pattern ( (|_module.__default.evalUpdate#requires| |s#0@@168| |o#0@@42| |v#0@@44| |r#0@@33|) ($IsGoodHeap $Heap@@189)) )))
(assert (= (type MoreFuel__module._default.ValidRegState6) LayerTypeType))
(assert  (=> true (forall (($Heap@@190 T@U) (|s#0@@169| T@U) (|o#0@@43| T@U) (|v#0@@45| Int) (|r#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@190) (MapType1Type refType)) (= (type |s#0@@169|) DatatypeTypeType)) (= (type |o#0@@43|) DatatypeTypeType)) (= (type |r#0@@34|) DatatypeTypeType)) (or (|_module.__default.evalUpdate#canCall| |s#0@@169| |o#0@@43| |v#0@@45| |r#0@@34|) (and (and (and (and (and ($IsGoodHeap $Heap@@190) ($Is |s#0@@169| Tclass._module.state)) ($Is |o#0@@43| Tclass._module.operand)) (_module.__default.isUInt32 |v#0@@45|)) ($Is |r#0@@34| Tclass._module.state)) (and (and (_module.__default.ValidState |s#0@@169|) (or (or (or (_module.__default.ValidRegOperand |o#0@@43|) (_module.__default.ValidBankedRegOperand |s#0@@169| |o#0@@43|)) (_module.__default.ValidMrsMsrOperand |s#0@@169| |o#0@@43|)) (_module.__default.ValidMcrMrcOperand |s#0@@169| |o#0@@43|))) (=> (_module.operand.OSReg_q |o#0@@43|) (and (_module.__default.ValidSReg (_module.operand.sr |o#0@@43|)) (=> (or (_module.SReg.cpsr_q (_module.operand.sr |o#0@@43|)) (_module.SReg.spsr_q (_module.operand.sr |o#0@@43|))) (_module.__default.ValidPsrWord |v#0@@45|)))))))) (and (and (=> (_module.operand.OReg_q |o#0@@43|) (and (and (and (and (and (and (_module.state.State_q |s#0@@169|) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|))) (=> (not (_module.operand.OReg_q |o#0@@43|)) (and (=> (_module.operand.OLR_q |o#0@@43|) (and (and (and (and (and (and (and (_module.state.State_q |s#0@@169|) (|_module.__default.mode__of__state#canCall| |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|))) (=> (not (_module.operand.OLR_q |o#0@@43|)) (and (=> (_module.operand.OSP_q |o#0@@43|) (and (and (and (and (and (and (and (_module.state.State_q |s#0@@169|) (|_module.__default.mode__of__state#canCall| |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|))) (=> (not (_module.operand.OSP_q |o#0@@43|)) (and (and (and (and (and (and (_module.state.State_q |s#0@@169|) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (|_module.__default.update__config__from__sreg#canCall| |s#0@@169| (_module.operand.sr |o#0@@43|) |v#0@@45|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)) (_module.state.State_q |s#0@@169|)))))))) (and (and (and (= StartFuel__module._default.ValidRegState ($LS MoreFuel__module._default.ValidRegState6)) (= StartFuelAssert__module._default.ValidRegState ($LS ($LS MoreFuel__module._default.ValidRegState6)))) (= (AsFuelBottom MoreFuel__module._default.ValidRegState6) MoreFuel__module._default.ValidRegState6)) (and (=> (_module.__default.evalUpdate |s#0@@169| |o#0@@43| |v#0@@45| |r#0@@34|) (ite (_module.operand.OReg_q |o#0@@43|) (= |r#0@@34| (|#_module.state.State| (|Map#Build| (_module.state.regs |s#0@@169|) ($Box (_module.operand.r |o#0@@43|)) ($Box (int_2_U |v#0@@45|))) (_module.state.sregs |s#0@@169|) (_module.state.m |s#0@@169|) (_module.state.conf |s#0@@169|) (_module.state.rng |s#0@@169|) (_module.state.ok |s#0@@169|) (_module.state.steps |s#0@@169|))) (ite (_module.operand.OLR_q |o#0@@43|) (= |r#0@@34| (|#_module.state.State| (|Map#Build| (_module.state.regs |s#0@@169|) ($Box (|#_module.ARMReg.LR| (_module.__default.mode__of__state |s#0@@169|))) ($Box (int_2_U |v#0@@45|))) (_module.state.sregs |s#0@@169|) (_module.state.m |s#0@@169|) (_module.state.conf |s#0@@169|) (_module.state.rng |s#0@@169|) (_module.state.ok |s#0@@169|) (_module.state.steps |s#0@@169|))) (ite (_module.operand.OSP_q |o#0@@43|) (= |r#0@@34| (|#_module.state.State| (|Map#Build| (_module.state.regs |s#0@@169|) ($Box (|#_module.ARMReg.SP| (_module.__default.mode__of__state |s#0@@169|))) ($Box (int_2_U |v#0@@45|))) (_module.state.sregs |s#0@@169|) (_module.state.m |s#0@@169|) (_module.state.conf |s#0@@169|) (_module.state.rng |s#0@@169|) (_module.state.ok |s#0@@169|) (_module.state.steps |s#0@@169|))) (= |r#0@@34| (|#_module.state.State| (_module.state.regs |s#0@@169|) (|Map#Build| (_module.state.sregs |s#0@@169|) ($Box (_module.operand.sr |o#0@@43|)) ($Box (int_2_U |v#0@@45|))) (_module.state.m |s#0@@169|) (_module.__default.update__config__from__sreg |s#0@@169| (_module.operand.sr |o#0@@43|) |v#0@@45|) (_module.state.rng |s#0@@169|) (_module.state.ok |s#0@@169|) (_module.state.steps |s#0@@169|))))))) (=> (ite (_module.operand.OReg_q |o#0@@43|) (= |r#0@@34| (|#_module.state.State| (|Map#Build| (_module.state.regs |s#0@@169|) ($Box (_module.operand.r |o#0@@43|)) ($Box (int_2_U |v#0@@45|))) (_module.state.sregs |s#0@@169|) (_module.state.m |s#0@@169|) (_module.state.conf |s#0@@169|) (_module.state.rng |s#0@@169|) (_module.state.ok |s#0@@169|) (_module.state.steps |s#0@@169|))) (ite (_module.operand.OLR_q |o#0@@43|) (= |r#0@@34| (|#_module.state.State| (|Map#Build| (_module.state.regs |s#0@@169|) ($Box (|#_module.ARMReg.LR| (_module.__default.mode__of__state |s#0@@169|))) ($Box (int_2_U |v#0@@45|))) (_module.state.sregs |s#0@@169|) (_module.state.m |s#0@@169|) (_module.state.conf |s#0@@169|) (_module.state.rng |s#0@@169|) (_module.state.ok |s#0@@169|) (_module.state.steps |s#0@@169|))) (ite (_module.operand.OSP_q |o#0@@43|) (= |r#0@@34| (|#_module.state.State| (|Map#Build| (_module.state.regs |s#0@@169|) ($Box (|#_module.ARMReg.SP| (_module.__default.mode__of__state |s#0@@169|))) ($Box (int_2_U |v#0@@45|))) (_module.state.sregs |s#0@@169|) (_module.state.m |s#0@@169|) (_module.state.conf |s#0@@169|) (_module.state.rng |s#0@@169|) (_module.state.ok |s#0@@169|) (_module.state.steps |s#0@@169|))) (= |r#0@@34| (|#_module.state.State| (_module.state.regs |s#0@@169|) (|Map#Build| (_module.state.sregs |s#0@@169|) ($Box (_module.operand.sr |o#0@@43|)) ($Box (int_2_U |v#0@@45|))) (_module.state.m |s#0@@169|) (_module.__default.update__config__from__sreg |s#0@@169| (_module.operand.sr |o#0@@43|) |v#0@@45|) (_module.state.rng |s#0@@169|) (_module.state.ok |s#0@@169|) (_module.state.steps |s#0@@169|)))))) (_module.__default.evalUpdate |s#0@@169| |o#0@@43| |v#0@@45| |r#0@@34|)))))) :qid |ARMdefsd.997:11| :skolemid |2869| :pattern ( (_module.__default.evalUpdate |s#0@@169| |o#0@@43| |v#0@@45| |r#0@@34|) ($IsGoodHeap $Heap@@190)) ))))
(assert (= (type MoreFuel__module._default.ValidRegState7) LayerTypeType))
(assert  (=> true (forall (($Heap@@191 T@U) (|s#0@@170| T@U) (|o#0@@44| T@U) (|v#0@@46| Int) (|r#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@191) (MapType1Type refType)) (= (type |s#0@@170|) DatatypeTypeType)) (= (type |o#0@@44|) DatatypeTypeType)) (= (type |r#0@@35|) DatatypeTypeType)) (or (|_module.__default.evalUpdate#canCall| (Lit |s#0@@170|) (Lit |o#0@@44|) (LitInt |v#0@@46|) (Lit |r#0@@35|)) (and (and (and (and (and ($IsGoodHeap $Heap@@191) ($Is |s#0@@170| Tclass._module.state)) ($Is |o#0@@44| Tclass._module.operand)) (_module.__default.isUInt32 |v#0@@46|)) ($Is |r#0@@35| Tclass._module.state)) (and (and (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@170|))))) (U_2_bool (Lit (bool_2_U  (or (or (or (_module.__default.ValidRegOperand (Lit |o#0@@44|)) (_module.__default.ValidBankedRegOperand (Lit |s#0@@170|) (Lit |o#0@@44|))) (_module.__default.ValidMrsMsrOperand (Lit |s#0@@170|) (Lit |o#0@@44|))) (_module.__default.ValidMcrMrcOperand (Lit |s#0@@170|) (Lit |o#0@@44|))))))) (U_2_bool (Lit (bool_2_U  (=> (_module.operand.OSReg_q (Lit |o#0@@44|)) (and (_module.__default.ValidSReg (Lit (_module.operand.sr (Lit |o#0@@44|)))) (=> (or (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit |o#0@@44|)))) (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit |o#0@@44|))))) (_module.__default.ValidPsrWord (LitInt |v#0@@46|)))))))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OReg_q (Lit |o#0@@44|))))) (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@170|)) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.operand.OReg_q (Lit |o#0@@44|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OLR_q (Lit |o#0@@44|))))) (and (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@170|)) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.operand.OLR_q (Lit |o#0@@44|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OSP_q (Lit |o#0@@44|))))) (and (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@170|)) (|_module.__default.mode__of__state#canCall| (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.operand.OSP_q (Lit |o#0@@44|)))))) (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@170|)) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (|_module.__default.update__config__from__sreg#canCall| (Lit |s#0@@170|) (Lit (_module.operand.sr (Lit |o#0@@44|))) (LitInt |v#0@@46|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))) (_module.state.State_q (Lit |s#0@@170|))))))))) (and (and (and (= StartFuel__module._default.ValidRegState ($LS MoreFuel__module._default.ValidRegState7)) (= StartFuelAssert__module._default.ValidRegState ($LS ($LS MoreFuel__module._default.ValidRegState7)))) (= (AsFuelBottom MoreFuel__module._default.ValidRegState7) MoreFuel__module._default.ValidRegState7)) (and (=> (_module.__default.evalUpdate (Lit |s#0@@170|) (Lit |o#0@@44|) (LitInt |v#0@@46|) (Lit |r#0@@35|)) (ite (_module.operand.OReg_q (Lit |o#0@@44|)) (= (Lit |r#0@@35|) (|#_module.state.State| (|Map#Build| (Lit (_module.state.regs (Lit |s#0@@170|))) ($Box (Lit (_module.operand.r (Lit |o#0@@44|)))) ($Box (int_2_U (LitInt |v#0@@46|)))) (Lit (_module.state.sregs (Lit |s#0@@170|))) (Lit (_module.state.m (Lit |s#0@@170|))) (Lit (_module.state.conf (Lit |s#0@@170|))) (Lit (_module.state.rng (Lit |s#0@@170|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@170|))))) (LitInt (_module.state.steps (Lit |s#0@@170|))))) (ite (_module.operand.OLR_q (Lit |o#0@@44|)) (= (Lit |r#0@@35|) (|#_module.state.State| (|Map#Build| (Lit (_module.state.regs (Lit |s#0@@170|))) ($Box (Lit (|#_module.ARMReg.LR| (Lit (_module.__default.mode__of__state (Lit |s#0@@170|)))))) ($Box (int_2_U (LitInt |v#0@@46|)))) (Lit (_module.state.sregs (Lit |s#0@@170|))) (Lit (_module.state.m (Lit |s#0@@170|))) (Lit (_module.state.conf (Lit |s#0@@170|))) (Lit (_module.state.rng (Lit |s#0@@170|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@170|))))) (LitInt (_module.state.steps (Lit |s#0@@170|))))) (ite (_module.operand.OSP_q (Lit |o#0@@44|)) (= (Lit |r#0@@35|) (|#_module.state.State| (|Map#Build| (Lit (_module.state.regs (Lit |s#0@@170|))) ($Box (Lit (|#_module.ARMReg.SP| (Lit (_module.__default.mode__of__state (Lit |s#0@@170|)))))) ($Box (int_2_U (LitInt |v#0@@46|)))) (Lit (_module.state.sregs (Lit |s#0@@170|))) (Lit (_module.state.m (Lit |s#0@@170|))) (Lit (_module.state.conf (Lit |s#0@@170|))) (Lit (_module.state.rng (Lit |s#0@@170|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@170|))))) (LitInt (_module.state.steps (Lit |s#0@@170|))))) (= (Lit |r#0@@35|) (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@170|))) (|Map#Build| (Lit (_module.state.sregs (Lit |s#0@@170|))) ($Box (Lit (_module.operand.sr (Lit |o#0@@44|)))) ($Box (int_2_U (LitInt |v#0@@46|)))) (Lit (_module.state.m (Lit |s#0@@170|))) (Lit (_module.__default.update__config__from__sreg (Lit |s#0@@170|) (Lit (_module.operand.sr (Lit |o#0@@44|))) (LitInt |v#0@@46|))) (Lit (_module.state.rng (Lit |s#0@@170|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@170|))))) (LitInt (_module.state.steps (Lit |s#0@@170|))))))))) (=> (ite (_module.operand.OReg_q (Lit |o#0@@44|)) (= (Lit |r#0@@35|) (|#_module.state.State| (|Map#Build| (Lit (_module.state.regs (Lit |s#0@@170|))) ($Box (Lit (_module.operand.r (Lit |o#0@@44|)))) ($Box (int_2_U (LitInt |v#0@@46|)))) (Lit (_module.state.sregs (Lit |s#0@@170|))) (Lit (_module.state.m (Lit |s#0@@170|))) (Lit (_module.state.conf (Lit |s#0@@170|))) (Lit (_module.state.rng (Lit |s#0@@170|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@170|))))) (LitInt (_module.state.steps (Lit |s#0@@170|))))) (ite (_module.operand.OLR_q (Lit |o#0@@44|)) (= (Lit |r#0@@35|) (|#_module.state.State| (|Map#Build| (Lit (_module.state.regs (Lit |s#0@@170|))) ($Box (Lit (|#_module.ARMReg.LR| (Lit (_module.__default.mode__of__state (Lit |s#0@@170|)))))) ($Box (int_2_U (LitInt |v#0@@46|)))) (Lit (_module.state.sregs (Lit |s#0@@170|))) (Lit (_module.state.m (Lit |s#0@@170|))) (Lit (_module.state.conf (Lit |s#0@@170|))) (Lit (_module.state.rng (Lit |s#0@@170|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@170|))))) (LitInt (_module.state.steps (Lit |s#0@@170|))))) (ite (_module.operand.OSP_q (Lit |o#0@@44|)) (= (Lit |r#0@@35|) (|#_module.state.State| (|Map#Build| (Lit (_module.state.regs (Lit |s#0@@170|))) ($Box (Lit (|#_module.ARMReg.SP| (Lit (_module.__default.mode__of__state (Lit |s#0@@170|)))))) ($Box (int_2_U (LitInt |v#0@@46|)))) (Lit (_module.state.sregs (Lit |s#0@@170|))) (Lit (_module.state.m (Lit |s#0@@170|))) (Lit (_module.state.conf (Lit |s#0@@170|))) (Lit (_module.state.rng (Lit |s#0@@170|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@170|))))) (LitInt (_module.state.steps (Lit |s#0@@170|))))) (= (Lit |r#0@@35|) (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@170|))) (|Map#Build| (Lit (_module.state.sregs (Lit |s#0@@170|))) ($Box (Lit (_module.operand.sr (Lit |o#0@@44|)))) ($Box (int_2_U (LitInt |v#0@@46|)))) (Lit (_module.state.m (Lit |s#0@@170|))) (Lit (_module.__default.update__config__from__sreg (Lit |s#0@@170|) (Lit (_module.operand.sr (Lit |o#0@@44|))) (LitInt |v#0@@46|))) (Lit (_module.state.rng (Lit |s#0@@170|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@170|))))) (LitInt (_module.state.steps (Lit |s#0@@170|)))))))) (_module.__default.evalUpdate (Lit |s#0@@170|) (Lit |o#0@@44|) (LitInt |v#0@@46|) (Lit |r#0@@35|))))))) :qid |ARMdefsd.997:11| :weight 3 :skolemid |2870| :pattern ( (_module.__default.evalUpdate (Lit |s#0@@170|) (Lit |o#0@@44|) (LitInt |v#0@@46|) (Lit |r#0@@35|)) ($IsGoodHeap $Heap@@191)) ))))
(assert  (=> true (forall ((|s#0@@171| T@U) (|m#0@@50| Int) (|v#0@@47| Int) (|r#0@@36| T@U) ) (!  (=> (and (and (and (= (type |s#0@@171|) DatatypeTypeType) (= (type |r#0@@36|) DatatypeTypeType)) (or (|_module.__default.evalMemUpdate#canCall| |s#0@@171| |m#0@@50| |v#0@@47| |r#0@@36|) (and (and (and (and ($Is |s#0@@171| Tclass._module.state) (and (_module.__default.isUInt32 |m#0@@50|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |m#0@@50|))) (_module.__default.isUInt32 |v#0@@47|)) ($Is |r#0@@36| Tclass._module.state)) (and (_module.__default.ValidState |s#0@@171|) (_module.__default.ValidMem |m#0@@50|))))) (_module.__default.evalMemUpdate |s#0@@171| |m#0@@50| |v#0@@47| |r#0@@36|)) (_module.__default.ValidState |r#0@@36|)) :qid |ARMdefsd.1014:25| :skolemid |2871| :pattern ( (_module.__default.evalMemUpdate |s#0@@171| |m#0@@50| |v#0@@47| |r#0@@36|)) ))))
(assert (forall (($Heap@@192 T@U) (|s#0@@172| T@U) (|m#0@@51| Int) (|v#0@@48| Int) (|r#0@@37| T@U) ) (!  (=> (and (and (= (type $Heap@@192) (MapType1Type refType)) (= (type |s#0@@172|) DatatypeTypeType)) (= (type |r#0@@37|) DatatypeTypeType)) (=> (and (and (and (and ($IsGoodHeap $Heap@@192) ($Is |s#0@@172| Tclass._module.state)) (and (_module.__default.isUInt32 |m#0@@51|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |m#0@@51|))) (_module.__default.isUInt32 |v#0@@48|)) ($Is |r#0@@37| Tclass._module.state)) (and (=> (|_module.__default.evalMemUpdate#requires| |s#0@@172| |m#0@@51| |v#0@@48| |r#0@@37|) (and (_module.__default.ValidState |s#0@@172|) (_module.__default.ValidMem |m#0@@51|))) (=> (and (_module.__default.ValidState |s#0@@172|) (_module.__default.ValidMem |m#0@@51|)) (|_module.__default.evalMemUpdate#requires| |s#0@@172| |m#0@@51| |v#0@@48| |r#0@@37|))))) :qid |ARMdefsd.1014:11| :skolemid |2872| :pattern ( (|_module.__default.evalMemUpdate#requires| |s#0@@172| |m#0@@51| |v#0@@48| |r#0@@37|) ($IsGoodHeap $Heap@@192)) )))
(assert (= (type MoreFuel__module._default.ValidMemState8) LayerTypeType))
(assert  (=> true (forall (($Heap@@193 T@U) (|s#0@@173| T@U) (|m#0@@52| Int) (|v#0@@49| Int) (|r#0@@38| T@U) ) (!  (=> (and (and (and (= (type $Heap@@193) (MapType1Type refType)) (= (type |s#0@@173|) DatatypeTypeType)) (= (type |r#0@@38|) DatatypeTypeType)) (or (|_module.__default.evalMemUpdate#canCall| |s#0@@173| |m#0@@52| |v#0@@49| |r#0@@38|) (and (and (and (and (and ($IsGoodHeap $Heap@@193) ($Is |s#0@@173| Tclass._module.state)) (and (_module.__default.isUInt32 |m#0@@52|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |m#0@@52|))) (_module.__default.isUInt32 |v#0@@49|)) ($Is |r#0@@38| Tclass._module.state)) (and (_module.__default.ValidState |s#0@@173|) (_module.__default.ValidMem |m#0@@52|))))) (and (and (and (and (and (and (and (_module.state.State_q |s#0@@173|) (_module.state.State_q |s#0@@173|)) (and (_module.state.State_q |s#0@@173|) (and (and (_module.state.State_q |s#0@@173|) (_module.memstate.MemState_q (_module.state.m |s#0@@173|))) (_module.memstate.MemState_q (_module.state.m |s#0@@173|))))) (and (_module.state.State_q |s#0@@173|) (and (and (and (and (and (and (_module.config.Config_q (_module.state.conf |s#0@@173|)) (_module.config.Config_q (_module.state.conf |s#0@@173|))) (_module.config.Config_q (_module.state.conf |s#0@@173|))) (and (and (_module.state.State_q |s#0@@173|) (_module.config.Config_q (_module.state.conf |s#0@@173|))) (=> (_module.config.tlb__consistent (_module.state.conf |s#0@@173|)) (|_module.__default.AddrInPageTable#canCall| |s#0@@173| |m#0@@52|)))) (_module.config.Config_q (_module.state.conf |s#0@@173|))) (_module.config.Config_q (_module.state.conf |s#0@@173|))) (_module.config.Config_q (_module.state.conf |s#0@@173|))))) (_module.state.State_q |s#0@@173|)) (_module.state.State_q |s#0@@173|)) (_module.state.State_q |s#0@@173|)) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState8)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState8)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState8) MoreFuel__module._default.ValidMemState8)) (and (=> (_module.__default.evalMemUpdate |s#0@@173| |m#0@@52| |v#0@@49| |r#0@@38|) (= |r#0@@38| (|#_module.state.State| (_module.state.regs |s#0@@173|) (_module.state.sregs |s#0@@173|) (|#_module.memstate.MemState| (|Map#Build| (_module.memstate.addresses (_module.state.m |s#0@@173|)) ($Box (int_2_U |m#0@@52|)) ($Box (int_2_U |v#0@@49|))) (_module.memstate.globals (_module.state.m |s#0@@173|))) (|#_module.config.Config| (_module.config.cpsr (_module.state.conf |s#0@@173|)) (_module.config.scr (_module.state.conf |s#0@@173|)) (_module.config.ttbr0 (_module.state.conf |s#0@@173|))  (and (_module.config.tlb__consistent (_module.state.conf |s#0@@173|)) (not (_module.__default.AddrInPageTable |s#0@@173| |m#0@@52|))) (_module.config.ex (_module.state.conf |s#0@@173|)) (_module.config.exstep (_module.state.conf |s#0@@173|)) (_module.config.nondet (_module.state.conf |s#0@@173|))) (_module.state.rng |s#0@@173|) (_module.state.ok |s#0@@173|) (_module.state.steps |s#0@@173|)))) (=> (= |r#0@@38| (|#_module.state.State| (_module.state.regs |s#0@@173|) (_module.state.sregs |s#0@@173|) (|#_module.memstate.MemState| (|Map#Build| (_module.memstate.addresses (_module.state.m |s#0@@173|)) ($Box (int_2_U |m#0@@52|)) ($Box (int_2_U |v#0@@49|))) (_module.memstate.globals (_module.state.m |s#0@@173|))) (|#_module.config.Config| (_module.config.cpsr (_module.state.conf |s#0@@173|)) (_module.config.scr (_module.state.conf |s#0@@173|)) (_module.config.ttbr0 (_module.state.conf |s#0@@173|))  (and (_module.config.tlb__consistent (_module.state.conf |s#0@@173|)) (not (_module.__default.AddrInPageTable |s#0@@173| |m#0@@52|))) (_module.config.ex (_module.state.conf |s#0@@173|)) (_module.config.exstep (_module.state.conf |s#0@@173|)) (_module.config.nondet (_module.state.conf |s#0@@173|))) (_module.state.rng |s#0@@173|) (_module.state.ok |s#0@@173|) (_module.state.steps |s#0@@173|))) (_module.__default.evalMemUpdate |s#0@@173| |m#0@@52| |v#0@@49| |r#0@@38|)))))) :qid |ARMdefsd.1014:11| :skolemid |2873| :pattern ( (_module.__default.evalMemUpdate |s#0@@173| |m#0@@52| |v#0@@49| |r#0@@38|) ($IsGoodHeap $Heap@@193)) ))))
(assert (= (type MoreFuel__module._default.ValidMemState9) LayerTypeType))
(assert  (=> true (forall (($Heap@@194 T@U) (|s#0@@174| T@U) (|m#0@@53| Int) (|v#0@@50| Int) (|r#0@@39| T@U) ) (!  (=> (and (and (and (= (type $Heap@@194) (MapType1Type refType)) (= (type |s#0@@174|) DatatypeTypeType)) (= (type |r#0@@39|) DatatypeTypeType)) (or (|_module.__default.evalMemUpdate#canCall| (Lit |s#0@@174|) (LitInt |m#0@@53|) (LitInt |v#0@@50|) (Lit |r#0@@39|)) (and (and (and (and (and ($IsGoodHeap $Heap@@194) ($Is |s#0@@174| Tclass._module.state)) (and (_module.__default.isUInt32 |m#0@@53|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |m#0@@53|))) (_module.__default.isUInt32 |v#0@@50|)) ($Is |r#0@@39| Tclass._module.state)) (and (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@174|))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidMem (LitInt |m#0@@53|))))))))) (and (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@174|)) (_module.state.State_q (Lit |s#0@@174|))) (and (_module.state.State_q (Lit |s#0@@174|)) (and (and (_module.state.State_q (Lit |s#0@@174|)) (_module.memstate.MemState_q (Lit (_module.state.m (Lit |s#0@@174|))))) (_module.memstate.MemState_q (Lit (_module.state.m (Lit |s#0@@174|))))))) (and (_module.state.State_q (Lit |s#0@@174|)) (and (and (and (and (and (and (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@174|)))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@174|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@174|))))) (and (and (_module.state.State_q (Lit |s#0@@174|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@174|))))) (=> (U_2_bool (Lit (bool_2_U (_module.config.tlb__consistent (Lit (_module.state.conf (Lit |s#0@@174|))))))) (|_module.__default.AddrInPageTable#canCall| (Lit |s#0@@174|) (LitInt |m#0@@53|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@174|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@174|))))) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@174|))))))) (_module.state.State_q (Lit |s#0@@174|))) (_module.state.State_q (Lit |s#0@@174|))) (_module.state.State_q (Lit |s#0@@174|))) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState9)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState9)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState9) MoreFuel__module._default.ValidMemState9)) (and (=> (_module.__default.evalMemUpdate (Lit |s#0@@174|) (LitInt |m#0@@53|) (LitInt |v#0@@50|) (Lit |r#0@@39|)) (= (Lit |r#0@@39|) (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@174|))) (Lit (_module.state.sregs (Lit |s#0@@174|))) (|#_module.memstate.MemState| (|Map#Build| (Lit (_module.memstate.addresses (Lit (_module.state.m (Lit |s#0@@174|))))) ($Box (int_2_U (LitInt |m#0@@53|))) ($Box (int_2_U (LitInt |v#0@@50|)))) (Lit (_module.memstate.globals (Lit (_module.state.m (Lit |s#0@@174|)))))) (|#_module.config.Config| (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@174|))))) (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@174|))))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@174|)))))  (and (_module.config.tlb__consistent (Lit (_module.state.conf (Lit |s#0@@174|)))) (not (U_2_bool (Lit (bool_2_U (_module.__default.AddrInPageTable (Lit |s#0@@174|) (LitInt |m#0@@53|))))))) (Lit (_module.config.ex (Lit (_module.state.conf (Lit |s#0@@174|))))) (LitInt (_module.config.exstep (Lit (_module.state.conf (Lit |s#0@@174|))))) (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@174|)))))) (Lit (_module.state.rng (Lit |s#0@@174|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@174|))))) (LitInt (_module.state.steps (Lit |s#0@@174|)))))) (=> (= (Lit |r#0@@39|) (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@174|))) (Lit (_module.state.sregs (Lit |s#0@@174|))) (|#_module.memstate.MemState| (|Map#Build| (Lit (_module.memstate.addresses (Lit (_module.state.m (Lit |s#0@@174|))))) ($Box (int_2_U (LitInt |m#0@@53|))) ($Box (int_2_U (LitInt |v#0@@50|)))) (Lit (_module.memstate.globals (Lit (_module.state.m (Lit |s#0@@174|)))))) (|#_module.config.Config| (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@174|))))) (Lit (_module.config.scr (Lit (_module.state.conf (Lit |s#0@@174|))))) (Lit (_module.config.ttbr0 (Lit (_module.state.conf (Lit |s#0@@174|)))))  (and (_module.config.tlb__consistent (Lit (_module.state.conf (Lit |s#0@@174|)))) (not (U_2_bool (Lit (bool_2_U (_module.__default.AddrInPageTable (Lit |s#0@@174|) (LitInt |m#0@@53|))))))) (Lit (_module.config.ex (Lit (_module.state.conf (Lit |s#0@@174|))))) (LitInt (_module.config.exstep (Lit (_module.state.conf (Lit |s#0@@174|))))) (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@174|)))))) (Lit (_module.state.rng (Lit |s#0@@174|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@174|))))) (LitInt (_module.state.steps (Lit |s#0@@174|))))) (_module.__default.evalMemUpdate (Lit |s#0@@174|) (LitInt |m#0@@53|) (LitInt |v#0@@50|) (Lit |r#0@@39|))))))) :qid |ARMdefsd.1014:11| :weight 3 :skolemid |2874| :pattern ( (_module.__default.evalMemUpdate (Lit |s#0@@174|) (LitInt |m#0@@53|) (LitInt |v#0@@50|) (Lit |r#0@@39|)) ($IsGoodHeap $Heap@@194)) ))))
(assert  (=> true (forall (($Heap@@195 T@U) (|s#0@@175| T@U) (|g#0@@29| T@U) (|offset#0@@15| Int) (|v#0@@51| Int) (|r#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type $Heap@@195) (MapType1Type refType)) (= (type |s#0@@175|) DatatypeTypeType)) (= (type |g#0@@29|) (SeqType BoxType))) (= (type |r#0@@40|) DatatypeTypeType)) (or (|_module.__default.evalGlobalUpdate#canCall| |s#0@@175| |g#0@@29| |offset#0@@15| |v#0@@51| |r#0@@40|) (and (and (and (and (and (and ($IsGoodHeap $Heap@@195) ($Is |s#0@@175| Tclass._module.state)) ($Is |g#0@@29| (TSeq TChar))) (_module.__default.isUInt32 |offset#0@@15|)) (_module.__default.isUInt32 |v#0@@51|)) ($Is |r#0@@40| Tclass._module.state)) (and (_module.__default.ValidState |s#0@@175|) (_module.__default.ValidGlobalOffset |g#0@@29| |offset#0@@15|))))) (_module.__default.evalGlobalUpdate |s#0@@175| |g#0@@29| |offset#0@@15| |v#0@@51| |r#0@@40|)) (and (_module.__default.ValidState |r#0@@40|) (= (_module.__default.GlobalWord (_module.state.m |r#0@@40|) |g#0@@29| |offset#0@@15|) |v#0@@51|))) :qid |ARMdefsd.1027:11| :skolemid |2875| :pattern ( (_module.__default.evalGlobalUpdate |s#0@@175| |g#0@@29| |offset#0@@15| |v#0@@51| |r#0@@40|) ($IsGoodHeap $Heap@@195)) ))))
(assert (forall (($Heap@@196 T@U) (|s#0@@176| T@U) (|g#0@@30| T@U) (|offset#0@@16| Int) (|v#0@@52| Int) (|r#0@@41| T@U) ) (!  (=> (and (and (and (= (type $Heap@@196) (MapType1Type refType)) (= (type |s#0@@176|) DatatypeTypeType)) (= (type |g#0@@30|) (SeqType BoxType))) (= (type |r#0@@41|) DatatypeTypeType)) (=> (and (and (and (and (and ($IsGoodHeap $Heap@@196) ($Is |s#0@@176| Tclass._module.state)) ($Is |g#0@@30| (TSeq TChar))) (_module.__default.isUInt32 |offset#0@@16|)) (_module.__default.isUInt32 |v#0@@52|)) ($Is |r#0@@41| Tclass._module.state)) (and (=> (|_module.__default.evalGlobalUpdate#requires| |s#0@@176| |g#0@@30| |offset#0@@16| |v#0@@52| |r#0@@41|) (and (_module.__default.ValidState |s#0@@176|) (_module.__default.ValidGlobalOffset |g#0@@30| |offset#0@@16|))) (=> (and (_module.__default.ValidState |s#0@@176|) (_module.__default.ValidGlobalOffset |g#0@@30| |offset#0@@16|)) (|_module.__default.evalGlobalUpdate#requires| |s#0@@176| |g#0@@30| |offset#0@@16| |v#0@@52| |r#0@@41|))))) :qid |ARMdefsd.1027:11| :skolemid |2876| :pattern ( (|_module.__default.evalGlobalUpdate#requires| |s#0@@176| |g#0@@30| |offset#0@@16| |v#0@@52| |r#0@@41|) ($IsGoodHeap $Heap@@196)) )))
(assert (= (type MoreFuel__module._default.ValidMemState10) LayerTypeType))
(assert  (=> true (forall (($Heap@@197 T@U) (|s#0@@177| T@U) (|g#0@@31| T@U) (|offset#0@@17| Int) (|v#0@@53| Int) (|r#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@197) (MapType1Type refType)) (= (type |s#0@@177|) DatatypeTypeType)) (= (type |g#0@@31|) (SeqType BoxType))) (= (type |r#0@@42|) DatatypeTypeType)) (or (|_module.__default.evalGlobalUpdate#canCall| |s#0@@177| |g#0@@31| |offset#0@@17| |v#0@@53| |r#0@@42|) (and (and (and (and (and (and ($IsGoodHeap $Heap@@197) ($Is |s#0@@177| Tclass._module.state)) ($Is |g#0@@31| (TSeq TChar))) (_module.__default.isUInt32 |offset#0@@17|)) (_module.__default.isUInt32 |v#0@@53|)) ($Is |r#0@@42| Tclass._module.state)) (and (_module.__default.ValidState |s#0@@177|) (_module.__default.ValidGlobalOffset |g#0@@31| |offset#0@@17|))))) (and (and (and (_module.state.State_q |s#0@@177|) (_module.memstate.MemState_q (_module.state.m |s#0@@177|))) (and (|_module.__default.BytesToWords#canCall| |offset#0@@17|) (and (and (and (and (and (and (_module.state.State_q |s#0@@177|) (_module.state.State_q |s#0@@177|)) (and (_module.state.State_q |s#0@@177|) (and (_module.memstate.MemState_q (_module.state.m |s#0@@177|)) (and (_module.state.State_q |s#0@@177|) (_module.memstate.MemState_q (_module.state.m |s#0@@177|)))))) (_module.state.State_q |s#0@@177|)) (_module.state.State_q |s#0@@177|)) (_module.state.State_q |s#0@@177|)) (_module.state.State_q |s#0@@177|)))) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState10)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState10)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState10) MoreFuel__module._default.ValidMemState10)) (and (=> (_module.__default.evalGlobalUpdate |s#0@@177| |g#0@@31| |offset#0@@17| |v#0@@53| |r#0@@42|) (= |r#0@@42| (|#_module.state.State| (_module.state.regs |s#0@@177|) (_module.state.sregs |s#0@@177|) (|#_module.memstate.MemState| (_module.memstate.addresses (_module.state.m |s#0@@177|)) (|Map#Build| (_module.memstate.globals (_module.state.m |s#0@@177|)) ($Box |g#0@@31|) ($Box (|Seq#Update| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (_module.memstate.globals (_module.state.m |s#0@@177|))) ($Box |g#0@@31|))) (_module.__default.BytesToWords |offset#0@@17|) ($Box (int_2_U |v#0@@53|)))))) (_module.state.conf |s#0@@177|) (_module.state.rng |s#0@@177|) (_module.state.ok |s#0@@177|) (_module.state.steps |s#0@@177|)))) (=> (= |r#0@@42| (|#_module.state.State| (_module.state.regs |s#0@@177|) (_module.state.sregs |s#0@@177|) (|#_module.memstate.MemState| (_module.memstate.addresses (_module.state.m |s#0@@177|)) (|Map#Build| (_module.memstate.globals (_module.state.m |s#0@@177|)) ($Box |g#0@@31|) ($Box (|Seq#Update| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (_module.memstate.globals (_module.state.m |s#0@@177|))) ($Box |g#0@@31|))) (_module.__default.BytesToWords |offset#0@@17|) ($Box (int_2_U |v#0@@53|)))))) (_module.state.conf |s#0@@177|) (_module.state.rng |s#0@@177|) (_module.state.ok |s#0@@177|) (_module.state.steps |s#0@@177|))) (_module.__default.evalGlobalUpdate |s#0@@177| |g#0@@31| |offset#0@@17| |v#0@@53| |r#0@@42|)))))) :qid |ARMdefsd.1027:11| :skolemid |2877| :pattern ( (_module.__default.evalGlobalUpdate |s#0@@177| |g#0@@31| |offset#0@@17| |v#0@@53| |r#0@@42|) ($IsGoodHeap $Heap@@197)) ))))
(assert (= (type MoreFuel__module._default.ValidMemState11) LayerTypeType))
(assert  (=> true (forall (($Heap@@198 T@U) (|s#0@@178| T@U) (|g#0@@32| T@U) (|offset#0@@18| Int) (|v#0@@54| Int) (|r#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@198) (MapType1Type refType)) (= (type |s#0@@178|) DatatypeTypeType)) (= (type |g#0@@32|) (SeqType BoxType))) (= (type |r#0@@43|) DatatypeTypeType)) (or (|_module.__default.evalGlobalUpdate#canCall| (Lit |s#0@@178|) (Lit |g#0@@32|) (LitInt |offset#0@@18|) (LitInt |v#0@@54|) (Lit |r#0@@43|)) (and (and (and (and (and (and ($IsGoodHeap $Heap@@198) ($Is |s#0@@178| Tclass._module.state)) ($Is |g#0@@32| (TSeq TChar))) (_module.__default.isUInt32 |offset#0@@18|)) (_module.__default.isUInt32 |v#0@@54|)) ($Is |r#0@@43| Tclass._module.state)) (and (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@178|))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidGlobalOffset (Lit |g#0@@32|) (LitInt |offset#0@@18|))))))))) (and (and (and (_module.state.State_q (Lit |s#0@@178|)) (_module.memstate.MemState_q (Lit (_module.state.m (Lit |s#0@@178|))))) (and (|_module.__default.BytesToWords#canCall| (LitInt |offset#0@@18|)) (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@178|)) (_module.state.State_q (Lit |s#0@@178|))) (and (_module.state.State_q (Lit |s#0@@178|)) (and (_module.memstate.MemState_q (Lit (_module.state.m (Lit |s#0@@178|)))) (and (_module.state.State_q (Lit |s#0@@178|)) (_module.memstate.MemState_q (Lit (_module.state.m (Lit |s#0@@178|)))))))) (_module.state.State_q (Lit |s#0@@178|))) (_module.state.State_q (Lit |s#0@@178|))) (_module.state.State_q (Lit |s#0@@178|))) (_module.state.State_q (Lit |s#0@@178|))))) (and (and (and (= StartFuel__module._default.ValidMemState ($LS MoreFuel__module._default.ValidMemState11)) (= StartFuelAssert__module._default.ValidMemState ($LS ($LS MoreFuel__module._default.ValidMemState11)))) (= (AsFuelBottom MoreFuel__module._default.ValidMemState11) MoreFuel__module._default.ValidMemState11)) (and (=> (_module.__default.evalGlobalUpdate (Lit |s#0@@178|) (Lit |g#0@@32|) (LitInt |offset#0@@18|) (LitInt |v#0@@54|) (Lit |r#0@@43|)) (= (Lit |r#0@@43|) (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@178|))) (Lit (_module.state.sregs (Lit |s#0@@178|))) (|#_module.memstate.MemState| (Lit (_module.memstate.addresses (Lit (_module.state.m (Lit |s#0@@178|))))) (|Map#Build| (Lit (_module.memstate.globals (Lit (_module.state.m (Lit |s#0@@178|))))) ($Box (Lit |g#0@@32|)) ($Box (|Seq#Update| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit (_module.memstate.globals (Lit (_module.state.m (Lit |s#0@@178|)))))) ($Box (Lit |g#0@@32|)))) (LitInt (_module.__default.BytesToWords (LitInt |offset#0@@18|))) ($Box (int_2_U (LitInt |v#0@@54|))))))) (Lit (_module.state.conf (Lit |s#0@@178|))) (Lit (_module.state.rng (Lit |s#0@@178|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@178|))))) (LitInt (_module.state.steps (Lit |s#0@@178|)))))) (=> (= (Lit |r#0@@43|) (|#_module.state.State| (Lit (_module.state.regs (Lit |s#0@@178|))) (Lit (_module.state.sregs (Lit |s#0@@178|))) (|#_module.memstate.MemState| (Lit (_module.memstate.addresses (Lit (_module.state.m (Lit |s#0@@178|))))) (|Map#Build| (Lit (_module.memstate.globals (Lit (_module.state.m (Lit |s#0@@178|))))) ($Box (Lit |g#0@@32|)) ($Box (|Seq#Update| ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit (_module.memstate.globals (Lit (_module.state.m (Lit |s#0@@178|)))))) ($Box (Lit |g#0@@32|)))) (LitInt (_module.__default.BytesToWords (LitInt |offset#0@@18|))) ($Box (int_2_U (LitInt |v#0@@54|))))))) (Lit (_module.state.conf (Lit |s#0@@178|))) (Lit (_module.state.rng (Lit |s#0@@178|))) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@178|))))) (LitInt (_module.state.steps (Lit |s#0@@178|))))) (_module.__default.evalGlobalUpdate (Lit |s#0@@178|) (Lit |g#0@@32|) (LitInt |offset#0@@18|) (LitInt |v#0@@54|) (Lit |r#0@@43|))))))) :qid |ARMdefsd.1027:11| :weight 3 :skolemid |2878| :pattern ( (_module.__default.evalGlobalUpdate (Lit |s#0@@178|) (Lit |g#0@@32|) (LitInt |offset#0@@18|) (LitInt |v#0@@54|) (Lit |r#0@@43|)) ($IsGoodHeap $Heap@@198)) ))))
(assert (= (type Tclass._module.ocmp) TyType))
(assert (= (Tag Tclass._module.ocmp) Tagclass._module.ocmp))
(assert (forall ((bx@@108 T@U) ) (!  (=> (and (= (type bx@@108) BoxType) ($IsBox bx@@108 Tclass._module.ocmp)) (and (= ($Box ($Unbox DatatypeTypeType bx@@108)) bx@@108) ($Is ($Unbox DatatypeTypeType bx@@108) Tclass._module.ocmp))) :qid |unknown.0:0| :skolemid |2879| :pattern ( ($IsBox bx@@108 Tclass._module.ocmp)) )))
(assert  (=> true (forall ((|c#0@@5| T@U) (|i1#0| Int) (|i2#0| Int) ) (!  (=> (and (= (type |c#0@@5|) DatatypeTypeType) (or (|_module.__default.evalCmp#canCall| |c#0@@5| |i1#0| |i2#0|) (and (and ($Is |c#0@@5| Tclass._module.ocmp) (_module.__default.isUInt32 |i1#0|)) (_module.__default.isUInt32 |i2#0|)))) true) :qid |ARMdefsd.1039:18| :skolemid |2880| :pattern ( (_module.__default.evalCmp |c#0@@5| |i1#0| |i2#0|)) ))))
(assert (forall ((|c#0@@6| T@U) (|i1#0@@0| Int) (|i2#0@@0| Int) ) (!  (=> (= (type |c#0@@6|) DatatypeTypeType) (=> (and (and ($Is |c#0@@6| Tclass._module.ocmp) (_module.__default.isUInt32 |i1#0@@0|)) (_module.__default.isUInt32 |i2#0@@0|)) (and (=> (|_module.__default.evalCmp#requires| |c#0@@6| |i1#0@@0| |i2#0@@0|) true) (=> true (|_module.__default.evalCmp#requires| |c#0@@6| |i1#0@@0| |i2#0@@0|))))) :qid |ARMdefsd.1039:18| :skolemid |2881| :pattern ( (|_module.__default.evalCmp#requires| |c#0@@6| |i1#0@@0| |i2#0@@0|)) )))
(assert  (=> true (forall ((|c#0@@7| T@U) (|i1#0@@1| Int) (|i2#0@@1| Int) ) (!  (=> (and (= (type |c#0@@7|) DatatypeTypeType) (or (|_module.__default.evalCmp#canCall| |c#0@@7| |i1#0@@1| |i2#0@@1|) (and (and ($Is |c#0@@7| Tclass._module.ocmp) (_module.__default.isUInt32 |i1#0@@1|)) (_module.__default.isUInt32 |i2#0@@1|)))) (and (=> (not (_module.ocmp.OEq_q |c#0@@7|)) (=> (not (_module.ocmp.ONe_q |c#0@@7|)) (=> (not (_module.ocmp.OLe_q |c#0@@7|)) (=> (not (_module.ocmp.OGe_q |c#0@@7|)) (=> (not (_module.ocmp.OLt_q |c#0@@7|)) (=> (not (_module.ocmp.OGt_q |c#0@@7|)) (and (=> (_module.ocmp.OTstEq_q |c#0@@7|) (|_module.__default.BitwiseAnd#canCall| |i1#0@@1| |i2#0@@1|)) (=> (not (_module.ocmp.OTstEq_q |c#0@@7|)) (|_module.__default.BitwiseAnd#canCall| |i1#0@@1| |i2#0@@1|))))))))) (and (=> (_module.__default.evalCmp |c#0@@7| |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.OEq_q |c#0@@7|) (= |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.ONe_q |c#0@@7|) (not (= |i1#0@@1| |i2#0@@1|)) (ite (_module.ocmp.OLe_q |c#0@@7|) (INTERNAL_le_boogie |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.OGe_q |c#0@@7|) (INTERNAL_ge_boogie |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.OLt_q |c#0@@7|) (INTERNAL_lt_boogie |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.OGt_q |c#0@@7|) (INTERNAL_gt_boogie |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.OTstEq_q |c#0@@7|) (= (_module.__default.BitwiseAnd |i1#0@@1| |i2#0@@1|) (LitInt 0)) (not (= (_module.__default.BitwiseAnd |i1#0@@1| |i2#0@@1|) 0)))))))))) (=> (ite (_module.ocmp.OEq_q |c#0@@7|) (= |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.ONe_q |c#0@@7|) (not (= |i1#0@@1| |i2#0@@1|)) (ite (_module.ocmp.OLe_q |c#0@@7|) (INTERNAL_le_boogie |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.OGe_q |c#0@@7|) (INTERNAL_ge_boogie |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.OLt_q |c#0@@7|) (INTERNAL_lt_boogie |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.OGt_q |c#0@@7|) (INTERNAL_gt_boogie |i1#0@@1| |i2#0@@1|) (ite (_module.ocmp.OTstEq_q |c#0@@7|) (= (_module.__default.BitwiseAnd |i1#0@@1| |i2#0@@1|) (LitInt 0)) (not (= (_module.__default.BitwiseAnd |i1#0@@1| |i2#0@@1|) 0))))))))) (_module.__default.evalCmp |c#0@@7| |i1#0@@1| |i2#0@@1|))))) :qid |ARMdefsd.1039:18| :skolemid |2882| :pattern ( (_module.__default.evalCmp |c#0@@7| |i1#0@@1| |i2#0@@1|)) ))))
(assert  (=> true (forall ((|c#0@@8| T@U) (|i1#0@@2| Int) (|i2#0@@2| Int) ) (!  (=> (and (= (type |c#0@@8|) DatatypeTypeType) (or (|_module.__default.evalCmp#canCall| (Lit |c#0@@8|) (LitInt |i1#0@@2|) (LitInt |i2#0@@2|)) (and (and ($Is |c#0@@8| Tclass._module.ocmp) (_module.__default.isUInt32 |i1#0@@2|)) (_module.__default.isUInt32 |i2#0@@2|)))) (and (=> (not (U_2_bool (Lit (bool_2_U (_module.ocmp.OEq_q (Lit |c#0@@8|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ocmp.ONe_q (Lit |c#0@@8|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ocmp.OLe_q (Lit |c#0@@8|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ocmp.OGe_q (Lit |c#0@@8|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ocmp.OLt_q (Lit |c#0@@8|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ocmp.OGt_q (Lit |c#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ocmp.OTstEq_q (Lit |c#0@@8|))))) (|_module.__default.BitwiseAnd#canCall| (LitInt |i1#0@@2|) (LitInt |i2#0@@2|))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ocmp.OTstEq_q (Lit |c#0@@8|)))))) (|_module.__default.BitwiseAnd#canCall| (LitInt |i1#0@@2|) (LitInt |i2#0@@2|)))))))))) (and (=> (_module.__default.evalCmp (Lit |c#0@@8|) (LitInt |i1#0@@2|) (LitInt |i2#0@@2|)) (ite (_module.ocmp.OEq_q (Lit |c#0@@8|)) (= (LitInt |i1#0@@2|) (LitInt |i2#0@@2|)) (ite (_module.ocmp.ONe_q (Lit |c#0@@8|)) (not (= |i1#0@@2| |i2#0@@2|)) (ite (_module.ocmp.OLe_q (Lit |c#0@@8|)) (INTERNAL_le_boogie |i1#0@@2| |i2#0@@2|) (ite (_module.ocmp.OGe_q (Lit |c#0@@8|)) (INTERNAL_ge_boogie |i1#0@@2| |i2#0@@2|) (ite (_module.ocmp.OLt_q (Lit |c#0@@8|)) (INTERNAL_lt_boogie |i1#0@@2| |i2#0@@2|) (ite (_module.ocmp.OGt_q (Lit |c#0@@8|)) (INTERNAL_gt_boogie |i1#0@@2| |i2#0@@2|) (ite (_module.ocmp.OTstEq_q (Lit |c#0@@8|)) (= (LitInt (_module.__default.BitwiseAnd (LitInt |i1#0@@2|) (LitInt |i2#0@@2|))) (LitInt 0)) (not (= (_module.__default.BitwiseAnd (LitInt |i1#0@@2|) (LitInt |i2#0@@2|)) 0)))))))))) (=> (ite (_module.ocmp.OEq_q (Lit |c#0@@8|)) (= (LitInt |i1#0@@2|) (LitInt |i2#0@@2|)) (ite (_module.ocmp.ONe_q (Lit |c#0@@8|)) (not (= |i1#0@@2| |i2#0@@2|)) (ite (_module.ocmp.OLe_q (Lit |c#0@@8|)) (INTERNAL_le_boogie |i1#0@@2| |i2#0@@2|) (ite (_module.ocmp.OGe_q (Lit |c#0@@8|)) (INTERNAL_ge_boogie |i1#0@@2| |i2#0@@2|) (ite (_module.ocmp.OLt_q (Lit |c#0@@8|)) (INTERNAL_lt_boogie |i1#0@@2| |i2#0@@2|) (ite (_module.ocmp.OGt_q (Lit |c#0@@8|)) (INTERNAL_gt_boogie |i1#0@@2| |i2#0@@2|) (ite (_module.ocmp.OTstEq_q (Lit |c#0@@8|)) (= (LitInt (_module.__default.BitwiseAnd (LitInt |i1#0@@2|) (LitInt |i2#0@@2|))) (LitInt 0)) (not (= (_module.__default.BitwiseAnd (LitInt |i1#0@@2|) (LitInt |i2#0@@2|)) 0))))))))) (_module.__default.evalCmp (Lit |c#0@@8|) (LitInt |i1#0@@2|) (LitInt |i2#0@@2|)))))) :qid |ARMdefsd.1039:18| :weight 3 :skolemid |2883| :pattern ( (_module.__default.evalCmp (Lit |c#0@@8|) (LitInt |i1#0@@2|) (LitInt |i2#0@@2|))) ))))
(assert (= (type Tclass._module.obool) TyType))
(assert (= (Tag Tclass._module.obool) Tagclass._module.obool))
(assert (forall ((bx@@109 T@U) ) (!  (=> (and (= (type bx@@109) BoxType) ($IsBox bx@@109 Tclass._module.obool)) (and (= ($Box ($Unbox DatatypeTypeType bx@@109)) bx@@109) ($Is ($Unbox DatatypeTypeType bx@@109) Tclass._module.obool))) :qid |unknown.0:0| :skolemid |2884| :pattern ( ($IsBox bx@@109 Tclass._module.obool)) )))
(assert  (and (forall ((arg0@@345 T@U) ) (! (= (type (_module.obool.o1 arg0@@345)) DatatypeTypeType) :qid |funType:_module.obool.o1| :pattern ( (_module.obool.o1 arg0@@345)) )) (forall ((arg0@@346 T@U) ) (! (= (type (_module.obool.o2 arg0@@346)) DatatypeTypeType) :qid |funType:_module.obool.o2| :pattern ( (_module.obool.o2 arg0@@346)) ))))
(assert  (=> true (forall (($Heap@@199 T@U) (|s#0@@179| T@U) (|o#0@@45| T@U) ) (!  (=> (and (and (and (= (type $Heap@@199) (MapType1Type refType)) (= (type |s#0@@179|) DatatypeTypeType)) (= (type |o#0@@45|) DatatypeTypeType)) (or (|_module.__default.evalOBool#canCall| |s#0@@179| |o#0@@45|) (and (and (and ($IsGoodHeap $Heap@@199) ($Is |s#0@@179| Tclass._module.state)) ($Is |o#0@@45| Tclass._module.obool)) (and (and (_module.__default.ValidState |s#0@@179|) (_module.__default.ValidOperand (_module.obool.o1 |o#0@@45|))) (_module.__default.ValidOperand (_module.obool.o2 |o#0@@45|)))))) true) :qid |ARMdefsd.1052:10| :skolemid |2885| :pattern ( (_module.__default.evalOBool |s#0@@179| |o#0@@45|) ($IsGoodHeap $Heap@@199)) ))))
(assert (forall (($Heap@@200 T@U) (|s#0@@180| T@U) (|o#0@@46| T@U) ) (!  (=> (and (and (and (= (type $Heap@@200) (MapType1Type refType)) (= (type |s#0@@180|) DatatypeTypeType)) (= (type |o#0@@46|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@200) ($Is |s#0@@180| Tclass._module.state)) ($Is |o#0@@46| Tclass._module.obool))) (and (=> (|_module.__default.evalOBool#requires| |s#0@@180| |o#0@@46|) (and (and (_module.__default.ValidState |s#0@@180|) (_module.__default.ValidOperand (_module.obool.o1 |o#0@@46|))) (_module.__default.ValidOperand (_module.obool.o2 |o#0@@46|)))) (=> (and (and (_module.__default.ValidState |s#0@@180|) (_module.__default.ValidOperand (_module.obool.o1 |o#0@@46|))) (_module.__default.ValidOperand (_module.obool.o2 |o#0@@46|))) (|_module.__default.evalOBool#requires| |s#0@@180| |o#0@@46|)))) :qid |ARMdefsd.1052:10| :skolemid |2886| :pattern ( (|_module.__default.evalOBool#requires| |s#0@@180| |o#0@@46|) ($IsGoodHeap $Heap@@200)) )))
(assert (forall ((arg0@@347 T@U) ) (! (= (type (_module.obool.cmp arg0@@347)) DatatypeTypeType) :qid |funType:_module.obool.cmp| :pattern ( (_module.obool.cmp arg0@@347)) )))
(assert  (=> true (forall (($Heap@@201 T@U) (|s#0@@181| T@U) (|o#0@@47| T@U) ) (!  (=> (and (and (and (= (type $Heap@@201) (MapType1Type refType)) (= (type |s#0@@181|) DatatypeTypeType)) (= (type |o#0@@47|) DatatypeTypeType)) (or (|_module.__default.evalOBool#canCall| |s#0@@181| |o#0@@47|) (and (and (and ($IsGoodHeap $Heap@@201) ($Is |s#0@@181| Tclass._module.state)) ($Is |o#0@@47| Tclass._module.obool)) (and (and (_module.__default.ValidState |s#0@@181|) (_module.__default.ValidOperand (_module.obool.o1 |o#0@@47|))) (_module.__default.ValidOperand (_module.obool.o2 |o#0@@47|)))))) (and (and (and (and (_module.obool.OCmp_q |o#0@@47|) (and (_module.obool.OCmp_q |o#0@@47|) (|_module.__default.OperandContents#canCall| |s#0@@181| (_module.obool.o1 |o#0@@47|)))) (and (_module.obool.OCmp_q |o#0@@47|) (|_module.__default.OperandContents#canCall| |s#0@@181| (_module.obool.o2 |o#0@@47|)))) (|_module.__default.evalCmp#canCall| (_module.obool.cmp |o#0@@47|) (_module.__default.OperandContents |s#0@@181| (_module.obool.o1 |o#0@@47|)) (_module.__default.OperandContents |s#0@@181| (_module.obool.o2 |o#0@@47|)))) (and (=> (_module.__default.evalOBool |s#0@@181| |o#0@@47|) (_module.__default.evalCmp (_module.obool.cmp |o#0@@47|) (_module.__default.OperandContents |s#0@@181| (_module.obool.o1 |o#0@@47|)) (_module.__default.OperandContents |s#0@@181| (_module.obool.o2 |o#0@@47|)))) (=> (_module.__default.evalCmp (_module.obool.cmp |o#0@@47|) (_module.__default.OperandContents |s#0@@181| (_module.obool.o1 |o#0@@47|)) (_module.__default.OperandContents |s#0@@181| (_module.obool.o2 |o#0@@47|))) (_module.__default.evalOBool |s#0@@181| |o#0@@47|))))) :qid |ARMdefsd.1052:10| :skolemid |2887| :pattern ( (_module.__default.evalOBool |s#0@@181| |o#0@@47|) ($IsGoodHeap $Heap@@201)) ))))
(assert  (=> true (forall (($Heap@@202 T@U) (|s#0@@182| T@U) (|o#0@@48| T@U) ) (!  (=> (and (and (and (= (type $Heap@@202) (MapType1Type refType)) (= (type |s#0@@182|) DatatypeTypeType)) (= (type |o#0@@48|) DatatypeTypeType)) (or (|_module.__default.evalOBool#canCall| (Lit |s#0@@182|) (Lit |o#0@@48|)) (and (and (and ($IsGoodHeap $Heap@@202) ($Is |s#0@@182| Tclass._module.state)) ($Is |o#0@@48| Tclass._module.obool)) (and (and (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@182|))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |o#0@@48|)))))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |o#0@@48|))))))))))) (and (and (and (and (_module.obool.OCmp_q (Lit |o#0@@48|)) (and (_module.obool.OCmp_q (Lit |o#0@@48|)) (|_module.__default.OperandContents#canCall| (Lit |s#0@@182|) (Lit (_module.obool.o1 (Lit |o#0@@48|)))))) (and (_module.obool.OCmp_q (Lit |o#0@@48|)) (|_module.__default.OperandContents#canCall| (Lit |s#0@@182|) (Lit (_module.obool.o2 (Lit |o#0@@48|)))))) (|_module.__default.evalCmp#canCall| (Lit (_module.obool.cmp (Lit |o#0@@48|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@182|) (Lit (_module.obool.o1 (Lit |o#0@@48|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@182|) (Lit (_module.obool.o2 (Lit |o#0@@48|))))))) (and (=> (_module.__default.evalOBool (Lit |s#0@@182|) (Lit |o#0@@48|)) (U_2_bool (Lit (bool_2_U (_module.__default.evalCmp (Lit (_module.obool.cmp (Lit |o#0@@48|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@182|) (Lit (_module.obool.o1 (Lit |o#0@@48|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@182|) (Lit (_module.obool.o2 (Lit |o#0@@48|)))))))))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.evalCmp (Lit (_module.obool.cmp (Lit |o#0@@48|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@182|) (Lit (_module.obool.o1 (Lit |o#0@@48|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@182|) (Lit (_module.obool.o2 (Lit |o#0@@48|))))))))) (_module.__default.evalOBool (Lit |s#0@@182|) (Lit |o#0@@48|)))))) :qid |ARMdefsd.1052:10| :weight 3 :skolemid |2888| :pattern ( (_module.__default.evalOBool (Lit |s#0@@182|) (Lit |o#0@@48|)) ($IsGoodHeap $Heap@@202)) ))))
(assert  (=> true (forall (($Heap@@203 T@U) (|s#0@@183| T@U) (|o#0@@49| T@U) (|r#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@203) (MapType1Type refType)) (= (type |s#0@@183|) DatatypeTypeType)) (= (type |o#0@@49|) DatatypeTypeType)) (= (type |r#0@@44|) DatatypeTypeType)) (or (|_module.__default.evalGuard#canCall| |s#0@@183| |o#0@@49| |r#0@@44|) (and (and (and (and ($IsGoodHeap $Heap@@203) ($Is |s#0@@183| Tclass._module.state)) ($Is |o#0@@49| Tclass._module.obool)) ($Is |r#0@@44| Tclass._module.state)) (and (and (_module.__default.ValidState |s#0@@183|) (_module.__default.ValidOperand (_module.obool.o1 |o#0@@49|))) (_module.__default.ValidOperand (_module.obool.o2 |o#0@@49|)))))) true) :qid |ARMdefsd.1060:11| :skolemid |2889| :pattern ( (_module.__default.evalGuard |s#0@@183| |o#0@@49| |r#0@@44|) ($IsGoodHeap $Heap@@203)) ))))
(assert (forall (($Heap@@204 T@U) (|s#0@@184| T@U) (|o#0@@50| T@U) (|r#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@204) (MapType1Type refType)) (= (type |s#0@@184|) DatatypeTypeType)) (= (type |o#0@@50|) DatatypeTypeType)) (= (type |r#0@@45|) DatatypeTypeType)) (and (and (and ($IsGoodHeap $Heap@@204) ($Is |s#0@@184| Tclass._module.state)) ($Is |o#0@@50| Tclass._module.obool)) ($Is |r#0@@45| Tclass._module.state))) (and (=> (|_module.__default.evalGuard#requires| |s#0@@184| |o#0@@50| |r#0@@45|) (and (and (_module.__default.ValidState |s#0@@184|) (_module.__default.ValidOperand (_module.obool.o1 |o#0@@50|))) (_module.__default.ValidOperand (_module.obool.o2 |o#0@@50|)))) (=> (and (and (_module.__default.ValidState |s#0@@184|) (_module.__default.ValidOperand (_module.obool.o1 |o#0@@50|))) (_module.__default.ValidOperand (_module.obool.o2 |o#0@@50|))) (|_module.__default.evalGuard#requires| |s#0@@184| |o#0@@50| |r#0@@45|)))) :qid |ARMdefsd.1060:11| :skolemid |2890| :pattern ( (|_module.__default.evalGuard#requires| |s#0@@184| |o#0@@50| |r#0@@45|) ($IsGoodHeap $Heap@@204)) )))
(assert  (=> true (forall (($Heap@@205 T@U) (|s#0@@185| T@U) (|o#0@@51| T@U) (|r#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@205) (MapType1Type refType)) (= (type |s#0@@185|) DatatypeTypeType)) (= (type |o#0@@51|) DatatypeTypeType)) (= (type |r#0@@46|) DatatypeTypeType)) (or (|_module.__default.evalGuard#canCall| |s#0@@185| |o#0@@51| |r#0@@46|) (and (and (and (and ($IsGoodHeap $Heap@@205) ($Is |s#0@@185| Tclass._module.state)) ($Is |o#0@@51| Tclass._module.obool)) ($Is |r#0@@46| Tclass._module.state)) (and (and (_module.__default.ValidState |s#0@@185|) (_module.__default.ValidOperand (_module.obool.o1 |o#0@@51|))) (_module.__default.ValidOperand (_module.obool.o2 |o#0@@51|)))))) (and (|_module.__default.maybeHandleInterrupt#canCall| |s#0@@185| |r#0@@46|) (and (=> (_module.__default.evalGuard |s#0@@185| |o#0@@51| |r#0@@46|) (_module.__default.maybeHandleInterrupt |s#0@@185| |r#0@@46|)) (=> (_module.__default.maybeHandleInterrupt |s#0@@185| |r#0@@46|) (_module.__default.evalGuard |s#0@@185| |o#0@@51| |r#0@@46|))))) :qid |ARMdefsd.1060:11| :skolemid |2891| :pattern ( (_module.__default.evalGuard |s#0@@185| |o#0@@51| |r#0@@46|) ($IsGoodHeap $Heap@@205)) ))))
(assert  (=> true (forall (($Heap@@206 T@U) (|s#0@@186| T@U) (|o#0@@52| T@U) (|r#0@@47| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@206) (MapType1Type refType)) (= (type |s#0@@186|) DatatypeTypeType)) (= (type |o#0@@52|) DatatypeTypeType)) (= (type |r#0@@47|) DatatypeTypeType)) (or (|_module.__default.evalGuard#canCall| (Lit |s#0@@186|) (Lit |o#0@@52|) (Lit |r#0@@47|)) (and (and (and (and ($IsGoodHeap $Heap@@206) ($Is |s#0@@186| Tclass._module.state)) ($Is |o#0@@52| Tclass._module.obool)) ($Is |r#0@@47| Tclass._module.state)) (U_2_bool (Lit (bool_2_U  (and (and (_module.__default.ValidState (Lit |s#0@@186|)) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |o#0@@52|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |o#0@@52|))))))))))) (and (|_module.__default.maybeHandleInterrupt#canCall| (Lit |s#0@@186|) (Lit |r#0@@47|)) (and (=> (_module.__default.evalGuard (Lit |s#0@@186|) (Lit |o#0@@52|) (Lit |r#0@@47|)) (U_2_bool (Lit (bool_2_U (_module.__default.maybeHandleInterrupt (Lit |s#0@@186|) (Lit |r#0@@47|)))))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.maybeHandleInterrupt (Lit |s#0@@186|) (Lit |r#0@@47|))))) (_module.__default.evalGuard (Lit |s#0@@186|) (Lit |o#0@@52|) (Lit |r#0@@47|)))))) :qid |ARMdefsd.1060:11| :weight 3 :skolemid |2892| :pattern ( (_module.__default.evalGuard (Lit |s#0@@186|) (Lit |o#0@@52|) (Lit |r#0@@47|)) ($IsGoodHeap $Heap@@206)) ))))
(assert  (=> true (forall ((|s#0@@187| T@U) (|m#0@@54| T@U) ) (!  (=> (and (and (= (type |s#0@@187|) DatatypeTypeType) (= (type |m#0@@54|) DatatypeTypeType)) (or (|_module.__default.ValidModeChange_k#canCall| |s#0@@187| |m#0@@54|) (and ($Is |s#0@@187| Tclass._module.state) ($Is |m#0@@54| Tclass._module.mode)))) true) :qid |ARMdefsd.1067:28| :skolemid |2893| :pattern ( (_module.__default.ValidModeChange_k |s#0@@187| |m#0@@54|)) ))))
(assert (forall ((|s#0@@188| T@U) (|m#0@@55| T@U) ) (!  (=> (and (and (= (type |s#0@@188|) DatatypeTypeType) (= (type |m#0@@55|) DatatypeTypeType)) (and ($Is |s#0@@188| Tclass._module.state) ($Is |m#0@@55| Tclass._module.mode))) (and (=> (|_module.__default.ValidModeChange_k#requires| |s#0@@188| |m#0@@55|) true) (=> true (|_module.__default.ValidModeChange_k#requires| |s#0@@188| |m#0@@55|)))) :qid |ARMdefsd.1067:28| :skolemid |2894| :pattern ( (|_module.__default.ValidModeChange_k#requires| |s#0@@188| |m#0@@55|)) )))
(assert  (=> true (forall ((|s#0@@189| T@U) (|m#0@@56| T@U) ) (!  (=> (and (and (= (type |s#0@@189|) DatatypeTypeType) (= (type |m#0@@56|) DatatypeTypeType)) (or (|_module.__default.ValidModeChange_k#canCall| |s#0@@189| |m#0@@56|) (and ($Is |s#0@@189| Tclass._module.state) ($Is |m#0@@56| Tclass._module.mode)))) (and (and (|_module.__default.priv__of__state#canCall| |s#0@@189|) (=> (= (_module.__default.priv__of__state |s#0@@189|) (Lit |#_module.priv.PL1|)) (=> (= |m#0@@56| (Lit |#_module.mode.Monitor|)) (|_module.__default.world__of__state#canCall| |s#0@@189|)))) (and (=> (_module.__default.ValidModeChange_k |s#0@@189| |m#0@@56|) (and (= (_module.__default.priv__of__state |s#0@@189|) (Lit |#_module.priv.PL1|)) (not (and (= |m#0@@56| (Lit |#_module.mode.Monitor|)) (not (= (_module.__default.world__of__state |s#0@@189|) |#_module.world.Secure|)))))) (=> (and (= (_module.__default.priv__of__state |s#0@@189|) (Lit |#_module.priv.PL1|)) (not (and (= |m#0@@56| (Lit |#_module.mode.Monitor|)) (not (= (_module.__default.world__of__state |s#0@@189|) |#_module.world.Secure|))))) (_module.__default.ValidModeChange_k |s#0@@189| |m#0@@56|))))) :qid |ARMdefsd.1067:28| :skolemid |2895| :pattern ( (_module.__default.ValidModeChange_k |s#0@@189| |m#0@@56|)) ))))
(assert  (=> true (forall ((|s#0@@190| T@U) (|m#0@@57| T@U) ) (!  (=> (and (and (= (type |s#0@@190|) DatatypeTypeType) (= (type |m#0@@57|) DatatypeTypeType)) (or (|_module.__default.ValidModeChange_k#canCall| (Lit |s#0@@190|) (Lit |m#0@@57|)) (and ($Is |s#0@@190| Tclass._module.state) ($Is |m#0@@57| Tclass._module.mode)))) (and (and (|_module.__default.priv__of__state#canCall| (Lit |s#0@@190|)) (=> (= (Lit (_module.__default.priv__of__state (Lit |s#0@@190|))) (Lit |#_module.priv.PL1|)) (=> (= (Lit |m#0@@57|) (Lit |#_module.mode.Monitor|)) (|_module.__default.world__of__state#canCall| (Lit |s#0@@190|))))) (and (=> (_module.__default.ValidModeChange_k (Lit |s#0@@190|) (Lit |m#0@@57|)) (and (= (Lit (_module.__default.priv__of__state (Lit |s#0@@190|))) (Lit |#_module.priv.PL1|)) (not (and (= (Lit |m#0@@57|) (Lit |#_module.mode.Monitor|)) (not (= (_module.__default.world__of__state (Lit |s#0@@190|)) |#_module.world.Secure|)))))) (=> (and (= (Lit (_module.__default.priv__of__state (Lit |s#0@@190|))) (Lit |#_module.priv.PL1|)) (not (and (= (Lit |m#0@@57|) (Lit |#_module.mode.Monitor|)) (not (= (_module.__default.world__of__state (Lit |s#0@@190|)) |#_module.world.Secure|))))) (_module.__default.ValidModeChange_k (Lit |s#0@@190|) (Lit |m#0@@57|)))))) :qid |ARMdefsd.1067:28| :weight 3 :skolemid |2896| :pattern ( (_module.__default.ValidModeChange_k (Lit |s#0@@190|) (Lit |m#0@@57|))) ))))
(assert  (=> true (forall ((|s#0@@191| T@U) (|v#0@@55| Int) ) (!  (=> (and (= (type |s#0@@191|) DatatypeTypeType) (or (|_module.__default.ValidModeChange#canCall| |s#0@@191| |v#0@@55|) (and ($Is |s#0@@191| Tclass._module.state) (_module.__default.isUInt32 |v#0@@55|)))) true) :qid |ARMdefsd.1075:27| :skolemid |2897| :pattern ( (_module.__default.ValidModeChange |s#0@@191| |v#0@@55|)) ))))
(assert (forall ((|s#0@@192| T@U) (|v#0@@56| Int) ) (!  (=> (= (type |s#0@@192|) DatatypeTypeType) (=> (and ($Is |s#0@@192| Tclass._module.state) (_module.__default.isUInt32 |v#0@@56|)) (and (=> (|_module.__default.ValidModeChange#requires| |s#0@@192| |v#0@@56|) true) (=> true (|_module.__default.ValidModeChange#requires| |s#0@@192| |v#0@@56|))))) :qid |ARMdefsd.1075:27| :skolemid |2898| :pattern ( (|_module.__default.ValidModeChange#requires| |s#0@@192| |v#0@@56|)) )))
(assert  (=> true (forall ((|s#0@@193| T@U) (|v#0@@57| Int) ) (!  (=> (and (= (type |s#0@@193|) DatatypeTypeType) (or (|_module.__default.ValidModeChange#canCall| |s#0@@193| |v#0@@57|) (and ($Is |s#0@@193| Tclass._module.state) (_module.__default.isUInt32 |v#0@@57|)))) (and (and (|_module.__default.psr__mask__mode#canCall| |v#0@@57|) (and (|_module.__default.ValidModeEncoding#canCall| (_module.__default.psr__mask__mode |v#0@@57|)) (=> (_module.__default.ValidModeEncoding (_module.__default.psr__mask__mode |v#0@@57|)) (and (|_module.__default.decode__mode#canCall| (_module.__default.psr__mask__mode |v#0@@57|)) (|_module.__default.ValidModeChange_k#canCall| |s#0@@193| (_module.__default.decode__mode (_module.__default.psr__mask__mode |v#0@@57|))))))) (and (=> (_module.__default.ValidModeChange |s#0@@193| |v#0@@57|) (and (_module.__default.ValidModeEncoding (_module.__default.psr__mask__mode |v#0@@57|)) (_module.__default.ValidModeChange_k |s#0@@193| (_module.__default.decode__mode (_module.__default.psr__mask__mode |v#0@@57|))))) (=> (and (_module.__default.ValidModeEncoding (_module.__default.psr__mask__mode |v#0@@57|)) (_module.__default.ValidModeChange_k |s#0@@193| (_module.__default.decode__mode (_module.__default.psr__mask__mode |v#0@@57|)))) (_module.__default.ValidModeChange |s#0@@193| |v#0@@57|))))) :qid |ARMdefsd.1075:27| :skolemid |2899| :pattern ( (_module.__default.ValidModeChange |s#0@@193| |v#0@@57|)) ))))
(assert  (=> true (forall ((|s#0@@194| T@U) (|v#0@@58| Int) ) (!  (=> (and (= (type |s#0@@194|) DatatypeTypeType) (or (|_module.__default.ValidModeChange#canCall| (Lit |s#0@@194|) (LitInt |v#0@@58|)) (and ($Is |s#0@@194| Tclass._module.state) (_module.__default.isUInt32 |v#0@@58|)))) (and (and (|_module.__default.psr__mask__mode#canCall| (LitInt |v#0@@58|)) (and (|_module.__default.ValidModeEncoding#canCall| (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@58|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidModeEncoding (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@58|))))))) (and (|_module.__default.decode__mode#canCall| (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@58|)))) (|_module.__default.ValidModeChange_k#canCall| (Lit |s#0@@194|) (Lit (_module.__default.decode__mode (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@58|)))))))))) (and (=> (_module.__default.ValidModeChange (Lit |s#0@@194|) (LitInt |v#0@@58|)) (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidModeEncoding (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@58|)))) (_module.__default.ValidModeChange_k (Lit |s#0@@194|) (Lit (_module.__default.decode__mode (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@58|))))))))))) (=> (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidModeEncoding (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@58|)))) (_module.__default.ValidModeChange_k (Lit |s#0@@194|) (Lit (_module.__default.decode__mode (LitInt (_module.__default.psr__mask__mode (LitInt |v#0@@58|)))))))))) (_module.__default.ValidModeChange (Lit |s#0@@194|) (LitInt |v#0@@58|)))))) :qid |ARMdefsd.1075:27| :weight 3 :skolemid |2900| :pattern ( (_module.__default.ValidModeChange (Lit |s#0@@194|) (LitInt |v#0@@58|))) ))))
(assert (= (type Tclass._module.ins) TyType))
(assert (= (Tag Tclass._module.ins) Tagclass._module.ins))
(assert (forall ((bx@@110 T@U) ) (!  (=> (and (= (type bx@@110) BoxType) ($IsBox bx@@110 Tclass._module.ins)) (and (= ($Box ($Unbox DatatypeTypeType bx@@110)) bx@@110) ($Is ($Unbox DatatypeTypeType bx@@110) Tclass._module.ins))) :qid |unknown.0:0| :skolemid |2901| :pattern ( ($IsBox bx@@110 Tclass._module.ins)) )))
(assert  (=> true (forall ((|s#0@@195| T@U) (|ins#0| T@U) ) (!  (=> (and (and (= (type |s#0@@195|) DatatypeTypeType) (= (type |ins#0|) DatatypeTypeType)) (or (|_module.__default.ValidInstruction#canCall| |s#0@@195| |ins#0|) (and ($Is |s#0@@195| Tclass._module.state) ($Is |ins#0| Tclass._module.ins)))) true) :qid |ARMdefsd.1081:28| :skolemid |2902| :pattern ( (_module.__default.ValidInstruction |s#0@@195| |ins#0|)) ))))
(assert (forall (($Heap@@207 T@U) (|s#0@@196| T@U) (|ins#0@@0| T@U) ) (!  (=> (and (and (and (= (type $Heap@@207) (MapType1Type refType)) (= (type |s#0@@196|) DatatypeTypeType)) (= (type |ins#0@@0|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@207) ($Is |s#0@@196| Tclass._module.state)) ($Is |ins#0@@0| Tclass._module.ins))) (and (=> (|_module.__default.ValidInstruction#requires| |s#0@@196| |ins#0@@0|) true) (=> true (|_module.__default.ValidInstruction#requires| |s#0@@196| |ins#0@@0|)))) :qid |ARMdefsd.1081:11| :skolemid |2903| :pattern ( (|_module.__default.ValidInstruction#requires| |s#0@@196| |ins#0@@0|) ($IsGoodHeap $Heap@@207)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@348 T@U) ) (! (= (type (_module.ins.src1ADD arg0@@348)) DatatypeTypeType) :qid |funType:_module.ins.src1ADD| :pattern ( (_module.ins.src1ADD arg0@@348)) )) (forall ((arg0@@349 T@U) ) (! (= (type (_module.ins.src2ADD arg0@@349)) DatatypeTypeType) :qid |funType:_module.ins.src2ADD| :pattern ( (_module.ins.src2ADD arg0@@349)) ))) (forall ((arg0@@350 T@U) ) (! (= (type (_module.ins.dstADD arg0@@350)) DatatypeTypeType) :qid |funType:_module.ins.dstADD| :pattern ( (_module.ins.dstADD arg0@@350)) ))) (forall ((arg0@@351 T@U) ) (! (= (type (_module.ins.src1SUB arg0@@351)) DatatypeTypeType) :qid |funType:_module.ins.src1SUB| :pattern ( (_module.ins.src1SUB arg0@@351)) ))) (forall ((arg0@@352 T@U) ) (! (= (type (_module.ins.src2SUB arg0@@352)) DatatypeTypeType) :qid |funType:_module.ins.src2SUB| :pattern ( (_module.ins.src2SUB arg0@@352)) ))) (forall ((arg0@@353 T@U) ) (! (= (type (_module.ins.dstSUB arg0@@353)) DatatypeTypeType) :qid |funType:_module.ins.dstSUB| :pattern ( (_module.ins.dstSUB arg0@@353)) ))) (forall ((arg0@@354 T@U) ) (! (= (type (_module.ins.src1MUL arg0@@354)) DatatypeTypeType) :qid |funType:_module.ins.src1MUL| :pattern ( (_module.ins.src1MUL arg0@@354)) ))) (forall ((arg0@@355 T@U) ) (! (= (type (_module.ins.src2MUL arg0@@355)) DatatypeTypeType) :qid |funType:_module.ins.src2MUL| :pattern ( (_module.ins.src2MUL arg0@@355)) ))) (forall ((arg0@@356 T@U) ) (! (= (type (_module.ins.dstMUL arg0@@356)) DatatypeTypeType) :qid |funType:_module.ins.dstMUL| :pattern ( (_module.ins.dstMUL arg0@@356)) ))) (forall ((arg0@@357 T@U) ) (! (= (type (_module.ins.src1DIV arg0@@357)) DatatypeTypeType) :qid |funType:_module.ins.src1DIV| :pattern ( (_module.ins.src1DIV arg0@@357)) ))) (forall ((arg0@@358 T@U) ) (! (= (type (_module.ins.src2DIV arg0@@358)) DatatypeTypeType) :qid |funType:_module.ins.src2DIV| :pattern ( (_module.ins.src2DIV arg0@@358)) ))) (forall ((arg0@@359 T@U) ) (! (= (type (_module.ins.dstDIV arg0@@359)) DatatypeTypeType) :qid |funType:_module.ins.dstDIV| :pattern ( (_module.ins.dstDIV arg0@@359)) ))) (forall ((arg0@@360 T@U) ) (! (= (type (_module.ins.src1AND arg0@@360)) DatatypeTypeType) :qid |funType:_module.ins.src1AND| :pattern ( (_module.ins.src1AND arg0@@360)) ))) (forall ((arg0@@361 T@U) ) (! (= (type (_module.ins.src2AND arg0@@361)) DatatypeTypeType) :qid |funType:_module.ins.src2AND| :pattern ( (_module.ins.src2AND arg0@@361)) ))) (forall ((arg0@@362 T@U) ) (! (= (type (_module.ins.dstAND arg0@@362)) DatatypeTypeType) :qid |funType:_module.ins.dstAND| :pattern ( (_module.ins.dstAND arg0@@362)) ))) (forall ((arg0@@363 T@U) ) (! (= (type (_module.ins.src1OR arg0@@363)) DatatypeTypeType) :qid |funType:_module.ins.src1OR| :pattern ( (_module.ins.src1OR arg0@@363)) ))) (forall ((arg0@@364 T@U) ) (! (= (type (_module.ins.src2OR arg0@@364)) DatatypeTypeType) :qid |funType:_module.ins.src2OR| :pattern ( (_module.ins.src2OR arg0@@364)) ))) (forall ((arg0@@365 T@U) ) (! (= (type (_module.ins.dstOR arg0@@365)) DatatypeTypeType) :qid |funType:_module.ins.dstOR| :pattern ( (_module.ins.dstOR arg0@@365)) ))) (forall ((arg0@@366 T@U) ) (! (= (type (_module.ins.src1EOR arg0@@366)) DatatypeTypeType) :qid |funType:_module.ins.src1EOR| :pattern ( (_module.ins.src1EOR arg0@@366)) ))) (forall ((arg0@@367 T@U) ) (! (= (type (_module.ins.src2EOR arg0@@367)) DatatypeTypeType) :qid |funType:_module.ins.src2EOR| :pattern ( (_module.ins.src2EOR arg0@@367)) ))) (forall ((arg0@@368 T@U) ) (! (= (type (_module.ins.dstEOR arg0@@368)) DatatypeTypeType) :qid |funType:_module.ins.dstEOR| :pattern ( (_module.ins.dstEOR arg0@@368)) ))) (forall ((arg0@@369 T@U) ) (! (= (type (_module.ins.src1LSL arg0@@369)) DatatypeTypeType) :qid |funType:_module.ins.src1LSL| :pattern ( (_module.ins.src1LSL arg0@@369)) ))) (forall ((arg0@@370 T@U) ) (! (= (type (_module.ins.src2LSL arg0@@370)) DatatypeTypeType) :qid |funType:_module.ins.src2LSL| :pattern ( (_module.ins.src2LSL arg0@@370)) ))) (forall ((arg0@@371 T@U) ) (! (= (type (_module.ins.dstLSL arg0@@371)) DatatypeTypeType) :qid |funType:_module.ins.dstLSL| :pattern ( (_module.ins.dstLSL arg0@@371)) ))) (forall ((arg0@@372 T@U) ) (! (= (type (_module.ins.src1LSR arg0@@372)) DatatypeTypeType) :qid |funType:_module.ins.src1LSR| :pattern ( (_module.ins.src1LSR arg0@@372)) ))) (forall ((arg0@@373 T@U) ) (! (= (type (_module.ins.src2LSR arg0@@373)) DatatypeTypeType) :qid |funType:_module.ins.src2LSR| :pattern ( (_module.ins.src2LSR arg0@@373)) ))) (forall ((arg0@@374 T@U) ) (! (= (type (_module.ins.dstLSR arg0@@374)) DatatypeTypeType) :qid |funType:_module.ins.dstLSR| :pattern ( (_module.ins.dstLSR arg0@@374)) ))) (forall ((arg0@@375 T@U) ) (! (= (type (_module.ins.srcREV arg0@@375)) DatatypeTypeType) :qid |funType:_module.ins.srcREV| :pattern ( (_module.ins.srcREV arg0@@375)) ))) (forall ((arg0@@376 T@U) ) (! (= (type (_module.ins.dstREV arg0@@376)) DatatypeTypeType) :qid |funType:_module.ins.dstREV| :pattern ( (_module.ins.dstREV arg0@@376)) ))) (forall ((arg0@@377 T@U) ) (! (= (type (_module.ins.srcMVN arg0@@377)) DatatypeTypeType) :qid |funType:_module.ins.srcMVN| :pattern ( (_module.ins.srcMVN arg0@@377)) ))) (forall ((arg0@@378 T@U) ) (! (= (type (_module.ins.dstMVN arg0@@378)) DatatypeTypeType) :qid |funType:_module.ins.dstMVN| :pattern ( (_module.ins.dstMVN arg0@@378)) ))) (forall ((arg0@@379 T@U) ) (! (= (type (_module.ins.rdLDR arg0@@379)) DatatypeTypeType) :qid |funType:_module.ins.rdLDR| :pattern ( (_module.ins.rdLDR arg0@@379)) ))) (forall ((arg0@@380 T@U) ) (! (= (type (_module.ins.baseLDR arg0@@380)) DatatypeTypeType) :qid |funType:_module.ins.baseLDR| :pattern ( (_module.ins.baseLDR arg0@@380)) ))) (forall ((arg0@@381 T@U) ) (! (= (type (_module.ins.ofsLDR arg0@@381)) DatatypeTypeType) :qid |funType:_module.ins.ofsLDR| :pattern ( (_module.ins.ofsLDR arg0@@381)) ))) (forall ((arg0@@382 T@U) ) (! (= (type (_module.ins.rdLDR__global arg0@@382)) DatatypeTypeType) :qid |funType:_module.ins.rdLDR__global| :pattern ( (_module.ins.rdLDR__global arg0@@382)) ))) (forall ((arg0@@383 T@U) ) (! (= (type (_module.ins.baseLDR__global arg0@@383)) DatatypeTypeType) :qid |funType:_module.ins.baseLDR__global| :pattern ( (_module.ins.baseLDR__global arg0@@383)) ))) (forall ((arg0@@384 T@U) ) (! (= (type (_module.ins.ofsLDR__global arg0@@384)) DatatypeTypeType) :qid |funType:_module.ins.ofsLDR__global| :pattern ( (_module.ins.ofsLDR__global arg0@@384)) ))) (forall ((arg0@@385 T@U) ) (! (= (type (_module.ins.globalLDR arg0@@385)) (SeqType BoxType)) :qid |funType:_module.ins.globalLDR| :pattern ( (_module.ins.globalLDR arg0@@385)) ))) (forall ((arg0@@386 T@U) ) (! (= (type (_module.ins.rdLDR__reloc arg0@@386)) DatatypeTypeType) :qid |funType:_module.ins.rdLDR__reloc| :pattern ( (_module.ins.rdLDR__reloc arg0@@386)) ))) (forall ((arg0@@387 T@U) ) (! (= (type (_module.ins.symLDR__reloc arg0@@387)) (SeqType BoxType)) :qid |funType:_module.ins.symLDR__reloc| :pattern ( (_module.ins.symLDR__reloc arg0@@387)) ))) (forall ((arg0@@388 T@U) ) (! (= (type (_module.ins.rdLDR__rng arg0@@388)) DatatypeTypeType) :qid |funType:_module.ins.rdLDR__rng| :pattern ( (_module.ins.rdLDR__rng arg0@@388)) ))) (forall ((arg0@@389 T@U) ) (! (= (type (_module.ins.baseLDR__rng arg0@@389)) DatatypeTypeType) :qid |funType:_module.ins.baseLDR__rng| :pattern ( (_module.ins.baseLDR__rng arg0@@389)) ))) (forall ((arg0@@390 T@U) ) (! (= (type (_module.ins.ofsLDR__rng arg0@@390)) DatatypeTypeType) :qid |funType:_module.ins.ofsLDR__rng| :pattern ( (_module.ins.ofsLDR__rng arg0@@390)) ))) (forall ((arg0@@391 T@U) ) (! (= (type (_module.ins.rdSTR arg0@@391)) DatatypeTypeType) :qid |funType:_module.ins.rdSTR| :pattern ( (_module.ins.rdSTR arg0@@391)) ))) (forall ((arg0@@392 T@U) ) (! (= (type (_module.ins.ofsSTR arg0@@392)) DatatypeTypeType) :qid |funType:_module.ins.ofsSTR| :pattern ( (_module.ins.ofsSTR arg0@@392)) ))) (forall ((arg0@@393 T@U) ) (! (= (type (_module.ins.baseSTR arg0@@393)) DatatypeTypeType) :qid |funType:_module.ins.baseSTR| :pattern ( (_module.ins.baseSTR arg0@@393)) ))) (forall ((arg0@@394 T@U) ) (! (= (type (_module.ins.rdSTRR__global arg0@@394)) DatatypeTypeType) :qid |funType:_module.ins.rdSTRR__global| :pattern ( (_module.ins.rdSTRR__global arg0@@394)) ))) (forall ((arg0@@395 T@U) ) (! (= (type (_module.ins.baseSTR__global arg0@@395)) DatatypeTypeType) :qid |funType:_module.ins.baseSTR__global| :pattern ( (_module.ins.baseSTR__global arg0@@395)) ))) (forall ((arg0@@396 T@U) ) (! (= (type (_module.ins.ofsSTR__global arg0@@396)) DatatypeTypeType) :qid |funType:_module.ins.ofsSTR__global| :pattern ( (_module.ins.ofsSTR__global arg0@@396)) ))) (forall ((arg0@@397 T@U) ) (! (= (type (_module.ins.globalSTR arg0@@397)) (SeqType BoxType)) :qid |funType:_module.ins.globalSTR| :pattern ( (_module.ins.globalSTR arg0@@397)) ))) (forall ((arg0@@398 T@U) ) (! (= (type (_module.ins.dstMOV arg0@@398)) DatatypeTypeType) :qid |funType:_module.ins.dstMOV| :pattern ( (_module.ins.dstMOV arg0@@398)) ))) (forall ((arg0@@399 T@U) ) (! (= (type (_module.ins.srcMOV arg0@@399)) DatatypeTypeType) :qid |funType:_module.ins.srcMOV| :pattern ( (_module.ins.srcMOV arg0@@399)) ))) (forall ((arg0@@400 T@U) ) (! (= (type (_module.ins.dstMOVW arg0@@400)) DatatypeTypeType) :qid |funType:_module.ins.dstMOVW| :pattern ( (_module.ins.dstMOVW arg0@@400)) ))) (forall ((arg0@@401 T@U) ) (! (= (type (_module.ins.dstMOVT arg0@@401)) DatatypeTypeType) :qid |funType:_module.ins.dstMOVT| :pattern ( (_module.ins.dstMOVT arg0@@401)) ))) (forall ((arg0@@402 T@U) ) (! (= (type (_module.ins.dstMRS arg0@@402)) DatatypeTypeType) :qid |funType:_module.ins.dstMRS| :pattern ( (_module.ins.dstMRS arg0@@402)) ))) (forall ((arg0@@403 T@U) ) (! (= (type (_module.ins.srcMRS arg0@@403)) DatatypeTypeType) :qid |funType:_module.ins.srcMRS| :pattern ( (_module.ins.srcMRS arg0@@403)) ))) (forall ((arg0@@404 T@U) ) (! (= (type (_module.ins.srcMSR arg0@@404)) DatatypeTypeType) :qid |funType:_module.ins.srcMSR| :pattern ( (_module.ins.srcMSR arg0@@404)) ))) (forall ((arg0@@405 T@U) ) (! (= (type (_module.ins.dstMSR arg0@@405)) DatatypeTypeType) :qid |funType:_module.ins.dstMSR| :pattern ( (_module.ins.dstMSR arg0@@405)) ))) (forall ((arg0@@406 T@U) ) (! (= (type (_module.ins.srcMRC arg0@@406)) DatatypeTypeType) :qid |funType:_module.ins.srcMRC| :pattern ( (_module.ins.srcMRC arg0@@406)) ))) (forall ((arg0@@407 T@U) ) (! (= (type (_module.ins.dstMRC arg0@@407)) DatatypeTypeType) :qid |funType:_module.ins.dstMRC| :pattern ( (_module.ins.dstMRC arg0@@407)) ))) (forall ((arg0@@408 T@U) ) (! (= (type (_module.ins.dstMCR arg0@@408)) DatatypeTypeType) :qid |funType:_module.ins.dstMCR| :pattern ( (_module.ins.dstMCR arg0@@408)) ))) (forall ((arg0@@409 T@U) ) (! (= (type (_module.ins.srcMCR arg0@@409)) DatatypeTypeType) :qid |funType:_module.ins.srcMCR| :pattern ( (_module.ins.srcMCR arg0@@409)) ))) (forall ((arg0@@410 T@U) ) (! (= (type (_module.ins.mod arg0@@410)) DatatypeTypeType) :qid |funType:_module.ins.mod| :pattern ( (_module.ins.mod arg0@@410)) ))) (forall ((arg0@@411 T@U) ) (! (= (type (_module.ins.srcMOVW arg0@@411)) DatatypeTypeType) :qid |funType:_module.ins.srcMOVW| :pattern ( (_module.ins.srcMOVW arg0@@411)) ))) (forall ((arg0@@412 T@U) ) (! (= (type (_module.ins.srcMOVT arg0@@412)) DatatypeTypeType) :qid |funType:_module.ins.srcMOVT| :pattern ( (_module.ins.srcMOVT arg0@@412)) ))))
(assert  (=> true (forall (($Heap@@208 T@U) (|s#0@@197| T@U) (|ins#0@@1| T@U) ) (!  (=> (and (and (and (= (type $Heap@@208) (MapType1Type refType)) (= (type |s#0@@197|) DatatypeTypeType)) (= (type |ins#0@@1|) DatatypeTypeType)) (or (|_module.__default.ValidInstruction#canCall| |s#0@@197| |ins#0@@1|) (and (and ($IsGoodHeap $Heap@@208) ($Is |s#0@@197| Tclass._module.state)) ($Is |ins#0@@1| Tclass._module.ins)))) (and (and (|_module.__default.ValidState#canCall| |s#0@@197|) (=> (_module.__default.ValidState |s#0@@197|) (and (=> (_module.ins.ADD_q |ins#0@@1|) (and (and (|_module.__default.ValidOperand#canCall| (_module.ins.src1ADD |ins#0@@1|)) (=> (_module.__default.ValidOperand (_module.ins.src1ADD |ins#0@@1|)) (|_module.__default.ValidSecondOperand#canCall| (_module.ins.src2ADD |ins#0@@1|)))) (=> (and (|_module.__default.ValidSecondOperand#canCall| (_module.ins.src2ADD |ins#0@@1|)) (_module.__default.ValidSecondOperand (_module.ins.src2ADD |ins#0@@1|))) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstADD |ins#0@@1|))))) (=> (not (_module.ins.ADD_q |ins#0@@1|)) (and (=> (_module.ins.SUB_q |ins#0@@1|) (and (and (|_module.__default.ValidOperand#canCall| (_module.ins.src1SUB |ins#0@@1|)) (=> (_module.__default.ValidOperand (_module.ins.src1SUB |ins#0@@1|)) (|_module.__default.ValidOperand#canCall| (_module.ins.src2SUB |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.src2SUB |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2SUB |ins#0@@1|))) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstSUB |ins#0@@1|))))) (=> (not (_module.ins.SUB_q |ins#0@@1|)) (and (=> (_module.ins.MUL_q |ins#0@@1|) (and (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.src1MUL |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.src1MUL |ins#0@@1|)) (|_module.__default.ValidRegOperand#canCall| (_module.ins.src2MUL |ins#0@@1|)))) (=> (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.src2MUL |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.src2MUL |ins#0@@1|))) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstMUL |ins#0@@1|))))) (=> (not (_module.ins.MUL_q |ins#0@@1|)) (and (=> (_module.ins.UDIV_q |ins#0@@1|) (and (and (and (|_module.__default.ValidOperand#canCall| (_module.ins.src1DIV |ins#0@@1|)) (=> (_module.__default.ValidOperand (_module.ins.src1DIV |ins#0@@1|)) (|_module.__default.ValidOperand#canCall| (_module.ins.src2DIV |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.src2DIV |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2DIV |ins#0@@1|))) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstDIV |ins#0@@1|)))) (=> (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstDIV |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.dstDIV |ins#0@@1|))) (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.src2DIV |ins#0@@1|))))) (=> (not (_module.ins.UDIV_q |ins#0@@1|)) (and (=> (_module.ins.AND_q |ins#0@@1|) (and (and (|_module.__default.ValidOperand#canCall| (_module.ins.src1AND |ins#0@@1|)) (=> (_module.__default.ValidOperand (_module.ins.src1AND |ins#0@@1|)) (|_module.__default.ValidOperand#canCall| (_module.ins.src2AND |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.src2AND |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2AND |ins#0@@1|))) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstAND |ins#0@@1|))))) (=> (not (_module.ins.AND_q |ins#0@@1|)) (and (=> (_module.ins.ORR_q |ins#0@@1|) (and (and (|_module.__default.ValidOperand#canCall| (_module.ins.src1OR |ins#0@@1|)) (=> (_module.__default.ValidOperand (_module.ins.src1OR |ins#0@@1|)) (|_module.__default.ValidOperand#canCall| (_module.ins.src2OR |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.src2OR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2OR |ins#0@@1|))) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstOR |ins#0@@1|))))) (=> (not (_module.ins.ORR_q |ins#0@@1|)) (and (=> (_module.ins.EOR_q |ins#0@@1|) (and (and (|_module.__default.ValidOperand#canCall| (_module.ins.src1EOR |ins#0@@1|)) (=> (_module.__default.ValidOperand (_module.ins.src1EOR |ins#0@@1|)) (|_module.__default.ValidSecondOperand#canCall| (_module.ins.src2EOR |ins#0@@1|)))) (=> (and (|_module.__default.ValidSecondOperand#canCall| (_module.ins.src2EOR |ins#0@@1|)) (_module.__default.ValidSecondOperand (_module.ins.src2EOR |ins#0@@1|))) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstEOR |ins#0@@1|))))) (=> (not (_module.ins.EOR_q |ins#0@@1|)) (and (=> (_module.ins.LSL_q |ins#0@@1|) (and (and (|_module.__default.ValidOperand#canCall| (_module.ins.src1LSL |ins#0@@1|)) (=> (_module.__default.ValidOperand (_module.ins.src1LSL |ins#0@@1|)) (|_module.__default.ValidShiftOperand#canCall| |s#0@@197| (_module.ins.src2LSL |ins#0@@1|)))) (=> (and (|_module.__default.ValidShiftOperand#canCall| |s#0@@197| (_module.ins.src2LSL |ins#0@@1|)) (_module.__default.ValidShiftOperand |s#0@@197| (_module.ins.src2LSL |ins#0@@1|))) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstLSL |ins#0@@1|))))) (=> (not (_module.ins.LSL_q |ins#0@@1|)) (and (=> (_module.ins.LSR_q |ins#0@@1|) (and (and (|_module.__default.ValidOperand#canCall| (_module.ins.src1LSR |ins#0@@1|)) (=> (_module.__default.ValidOperand (_module.ins.src1LSR |ins#0@@1|)) (|_module.__default.ValidShiftOperand#canCall| |s#0@@197| (_module.ins.src2LSR |ins#0@@1|)))) (=> (and (|_module.__default.ValidShiftOperand#canCall| |s#0@@197| (_module.ins.src2LSR |ins#0@@1|)) (_module.__default.ValidShiftOperand |s#0@@197| (_module.ins.src2LSR |ins#0@@1|))) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstLSR |ins#0@@1|))))) (=> (not (_module.ins.LSR_q |ins#0@@1|)) (and (=> (_module.ins.REV_q |ins#0@@1|) (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.srcREV |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.srcREV |ins#0@@1|)) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstREV |ins#0@@1|))))) (=> (not (_module.ins.REV_q |ins#0@@1|)) (and (=> (_module.ins.MVN_q |ins#0@@1|) (and (|_module.__default.ValidOperand#canCall| (_module.ins.srcMVN |ins#0@@1|)) (=> (_module.__default.ValidOperand (_module.ins.srcMVN |ins#0@@1|)) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstMVN |ins#0@@1|))))) (=> (not (_module.ins.MVN_q |ins#0@@1|)) (and (=> (_module.ins.LDR_q |ins#0@@1|) (and (and (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.rdLDR |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.rdLDR |ins#0@@1|)) (|_module.__default.ValidOperand#canCall| (_module.ins.baseLDR |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.baseLDR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseLDR |ins#0@@1|))) (|_module.__default.ValidOperand#canCall| (_module.ins.ofsLDR |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.ofsLDR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.ofsLDR |ins#0@@1|))) (and (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.baseLDR |ins#0@@1|)) (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.ofsLDR |ins#0@@1|))) (|_module.__default.ValidMemForRead#canCall| (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseLDR |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsLDR |ins#0@@1|)))))))) (=> (not (_module.ins.LDR_q |ins#0@@1|)) (and (=> (_module.ins.LDR__global_q |ins#0@@1|) (and (and (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.rdLDR__global |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.rdLDR__global |ins#0@@1|)) (|_module.__default.ValidOperand#canCall| (_module.ins.baseLDR__global |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.baseLDR__global |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseLDR__global |ins#0@@1|))) (|_module.__default.ValidOperand#canCall| (_module.ins.ofsLDR__global |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.ofsLDR__global |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.ofsLDR__global |ins#0@@1|))) (and (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.baseLDR__global |ins#0@@1|)) (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.ofsLDR__global |ins#0@@1|))) (|_module.__default.ValidGlobalAddr#canCall| (_module.ins.globalLDR |ins#0@@1|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseLDR__global |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsLDR__global |ins#0@@1|)))))))) (=> (not (_module.ins.LDR__global_q |ins#0@@1|)) (and (=> (_module.ins.LDR__reloc_q |ins#0@@1|) (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.rdLDR__reloc |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.rdLDR__reloc |ins#0@@1|)) (|_module.__default.ValidGlobal#canCall| (_module.ins.symLDR__reloc |ins#0@@1|))))) (=> (not (_module.ins.LDR__reloc_q |ins#0@@1|)) (and (=> (_module.ins.LDR__rng_q |ins#0@@1|) (and (and (and (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.rdLDR__rng |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.rdLDR__rng |ins#0@@1|)) (|_module.__default.ValidOperand#canCall| (_module.ins.baseLDR__rng |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.baseLDR__rng |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseLDR__rng |ins#0@@1|))) (|_module.__default.ValidOperand#canCall| (_module.ins.ofsLDR__rng |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.ofsLDR__rng |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.ofsLDR__rng |ins#0@@1|))) (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.baseLDR__rng |ins#0@@1|)) |_module.__default.RngBase#canCall|))) (=> (and (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.baseLDR__rng |ins#0@@1|)) |_module.__default.RngBase#canCall|) (= (_module.__default.OperandContents |s#0@@197| (_module.ins.baseLDR__rng |ins#0@@1|)) _module.__default.RngBase)) (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.ofsLDR__rng |ins#0@@1|)) (|_module.__default.ValidRngOffset#canCall| |s#0@@197| (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsLDR__rng |ins#0@@1|))))))) (=> (not (_module.ins.LDR__rng_q |ins#0@@1|)) (and (=> (_module.ins.STR_q |ins#0@@1|) (and (and (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.rdSTR |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.rdSTR |ins#0@@1|)) (|_module.__default.ValidOperand#canCall| (_module.ins.ofsSTR |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.ofsSTR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.ofsSTR |ins#0@@1|))) (|_module.__default.ValidOperand#canCall| (_module.ins.baseSTR |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.baseSTR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseSTR |ins#0@@1|))) (and (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.baseSTR |ins#0@@1|)) (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.ofsSTR |ins#0@@1|))) (|_module.__default.ValidMem#canCall| (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseSTR |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsSTR |ins#0@@1|)))))))) (=> (not (_module.ins.STR_q |ins#0@@1|)) (and (=> (_module.ins.STR__global_q |ins#0@@1|) (and (and (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.rdSTRR__global |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.rdSTRR__global |ins#0@@1|)) (|_module.__default.ValidOperand#canCall| (_module.ins.baseSTR__global |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.baseSTR__global |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseSTR__global |ins#0@@1|))) (|_module.__default.ValidOperand#canCall| (_module.ins.ofsSTR__global |ins#0@@1|)))) (=> (and (|_module.__default.ValidOperand#canCall| (_module.ins.ofsSTR__global |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.ofsSTR__global |ins#0@@1|))) (and (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.baseSTR__global |ins#0@@1|)) (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.ofsSTR__global |ins#0@@1|))) (|_module.__default.ValidGlobalAddr#canCall| (_module.ins.globalSTR |ins#0@@1|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseSTR__global |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsSTR__global |ins#0@@1|)))))))) (=> (not (_module.ins.STR__global_q |ins#0@@1|)) (and (=> (_module.ins.MOV_q |ins#0@@1|) (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstMOV |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.dstMOV |ins#0@@1|)) (|_module.__default.ValidSecondOperand#canCall| (_module.ins.srcMOV |ins#0@@1|))))) (=> (not (_module.ins.MOV_q |ins#0@@1|)) (and (=> (_module.ins.MOVW_q |ins#0@@1|) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstMOVW |ins#0@@1|))) (=> (not (_module.ins.MOVW_q |ins#0@@1|)) (and (=> (_module.ins.MOVT_q |ins#0@@1|) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstMOVT |ins#0@@1|))) (=> (not (_module.ins.MOVT_q |ins#0@@1|)) (and (=> (_module.ins.MRS_q |ins#0@@1|) (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstMRS |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.dstMRS |ins#0@@1|)) (|_module.__default.ValidMrsMsrOperand#canCall| |s#0@@197| (_module.ins.srcMRS |ins#0@@1|))))) (=> (not (_module.ins.MRS_q |ins#0@@1|)) (and (=> (_module.ins.MSR_q |ins#0@@1|) (and (and (and (|_module.__default.ValidRegOperand#canCall| (_module.ins.srcMSR |ins#0@@1|)) (=> (_module.__default.ValidRegOperand (_module.ins.srcMSR |ins#0@@1|)) (|_module.__default.ValidMrsMsrOperand#canCall| |s#0@@197| (_module.ins.dstMSR |ins#0@@1|)))) (=> (and (|_module.__default.ValidMrsMsrOperand#canCall| |s#0@@197| (_module.ins.dstMSR |ins#0@@1|)) (_module.__default.ValidMrsMsrOperand |s#0@@197| (_module.ins.dstMSR |ins#0@@1|))) (=> (_module.SReg.spsr_q (_module.operand.sr (_module.ins.dstMSR |ins#0@@1|))) (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.srcMSR |ins#0@@1|)) (|_module.__default.ValidPsrWord#canCall| (_module.__default.OperandContents |s#0@@197| (_module.ins.srcMSR |ins#0@@1|))))))) (=> (and (=> (_module.SReg.spsr_q (_module.operand.sr (_module.ins.dstMSR |ins#0@@1|))) (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.srcMSR |ins#0@@1|)) (|_module.__default.ValidPsrWord#canCall| (_module.__default.OperandContents |s#0@@197| (_module.ins.srcMSR |ins#0@@1|))))) (=> (and (_module.operand.OSReg_q (_module.ins.dstMSR |ins#0@@1|)) (_module.SReg.spsr_q (_module.operand.sr (_module.ins.dstMSR |ins#0@@1|)))) (_module.__default.ValidPsrWord (_module.__default.OperandContents |s#0@@197| (_module.ins.srcMSR |ins#0@@1|))))) (=> (_module.SReg.cpsr_q (_module.operand.sr (_module.ins.dstMSR |ins#0@@1|))) (and (|_module.__default.OperandContents#canCall| |s#0@@197| (_module.ins.srcMSR |ins#0@@1|)) (|_module.__default.ValidModeChange#canCall| |s#0@@197| (_module.__default.OperandContents |s#0@@197| (_module.ins.srcMSR |ins#0@@1|)))))))) (=> (not (_module.ins.MSR_q |ins#0@@1|)) (and (=> (_module.ins.MRC_q |ins#0@@1|) (and (|_module.__default.ValidMcrMrcOperand#canCall| |s#0@@197| (_module.ins.srcMRC |ins#0@@1|)) (=> (_module.__default.ValidMcrMrcOperand |s#0@@197| (_module.ins.srcMRC |ins#0@@1|)) (|_module.__default.ValidRegOperand#canCall| (_module.ins.dstMRC |ins#0@@1|))))) (=> (not (_module.ins.MRC_q |ins#0@@1|)) (and (=> (_module.ins.MCR_q |ins#0@@1|) (and (|_module.__default.ValidMcrMrcOperand#canCall| |s#0@@197| (_module.ins.dstMCR |ins#0@@1|)) (=> (_module.__default.ValidMcrMrcOperand |s#0@@197| (_module.ins.dstMCR |ins#0@@1|)) (|_module.__default.ValidRegOperand#canCall| (_module.ins.srcMCR |ins#0@@1|))))) (=> (not (_module.ins.MCR_q |ins#0@@1|)) (and (=> (_module.ins.CPSID__IAF_q |ins#0@@1|) (and (=> (_module.operand.OConst_q (_module.ins.mod |ins#0@@1|)) (|_module.__default.ValidModeEncoding#canCall| (_module.operand.n (_module.ins.mod |ins#0@@1|)))) (=> (and (|_module.__default.ValidModeEncoding#canCall| (_module.operand.n (_module.ins.mod |ins#0@@1|))) (_module.__default.ValidModeEncoding (_module.operand.n (_module.ins.mod |ins#0@@1|)))) (and (|_module.__default.decode__mode#canCall| (_module.operand.n (_module.ins.mod |ins#0@@1|))) (|_module.__default.ValidModeChange_k#canCall| |s#0@@197| (_module.__default.decode__mode (_module.operand.n (_module.ins.mod |ins#0@@1|)))))))) (=> (not (_module.ins.CPSID__IAF_q |ins#0@@1|)) (and (|_module.__default.ValidModeChange_k#canCall| |s#0@@197| (Lit |#_module.mode.User|)) (=> (_module.__default.ValidModeChange_k |s#0@@197| (Lit |#_module.mode.User|)) (and (|_module.__default.spsr__of__state#canCall| |s#0@@197|) (_module.PSR.PSR_q (_module.__default.spsr__of__state |s#0@@197|))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (and (=> (_module.__default.ValidInstruction |s#0@@197| |ins#0@@1|) (and (_module.__default.ValidState |s#0@@197|) (ite (_module.ins.ADD_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1ADD |ins#0@@1|)) (_module.__default.ValidSecondOperand (_module.ins.src2ADD |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstADD |ins#0@@1|))) (ite (_module.ins.SUB_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1SUB |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2SUB |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstSUB |ins#0@@1|))) (ite (_module.ins.MUL_q |ins#0@@1|)  (and (and (_module.__default.ValidRegOperand (_module.ins.src1MUL |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.src2MUL |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstMUL |ins#0@@1|))) (ite (_module.ins.UDIV_q |ins#0@@1|)  (and (and (and (_module.__default.ValidOperand (_module.ins.src1DIV |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2DIV |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstDIV |ins#0@@1|))) (not (= (_module.__default.OperandContents |s#0@@197| (_module.ins.src2DIV |ins#0@@1|)) 0))) (ite (_module.ins.AND_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1AND |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2AND |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstAND |ins#0@@1|))) (ite (_module.ins.ORR_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1OR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2OR |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstOR |ins#0@@1|))) (ite (_module.ins.EOR_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1EOR |ins#0@@1|)) (_module.__default.ValidSecondOperand (_module.ins.src2EOR |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstEOR |ins#0@@1|))) (ite (_module.ins.LSL_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1LSL |ins#0@@1|)) (_module.__default.ValidShiftOperand |s#0@@197| (_module.ins.src2LSL |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstLSL |ins#0@@1|))) (ite (_module.ins.LSR_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1LSR |ins#0@@1|)) (_module.__default.ValidShiftOperand |s#0@@197| (_module.ins.src2LSR |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstLSR |ins#0@@1|))) (ite (_module.ins.REV_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.srcREV |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.dstREV |ins#0@@1|))) (ite (_module.ins.MVN_q |ins#0@@1|)  (and (_module.__default.ValidOperand (_module.ins.srcMVN |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.dstMVN |ins#0@@1|))) (ite (_module.ins.LDR_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdLDR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseLDR |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.ofsLDR |ins#0@@1|))) (_module.__default.ValidMemForRead (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseLDR |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsLDR |ins#0@@1|))))) (ite (_module.ins.LDR__global_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdLDR__global |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseLDR__global |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.ofsLDR__global |ins#0@@1|))) (_module.__default.ValidGlobalAddr (_module.ins.globalLDR |ins#0@@1|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseLDR__global |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsLDR__global |ins#0@@1|))))) (ite (_module.ins.LDR__reloc_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.rdLDR__reloc |ins#0@@1|)) (_module.__default.ValidGlobal (_module.ins.symLDR__reloc |ins#0@@1|))) (ite (_module.ins.LDR__rng_q |ins#0@@1|)  (and (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdLDR__rng |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseLDR__rng |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.ofsLDR__rng |ins#0@@1|))) (= (_module.__default.OperandContents |s#0@@197| (_module.ins.baseLDR__rng |ins#0@@1|)) _module.__default.RngBase)) (_module.__default.ValidRngOffset |s#0@@197| (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsLDR__rng |ins#0@@1|)))) (ite (_module.ins.STR_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdSTR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.ofsSTR |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.baseSTR |ins#0@@1|))) (_module.__default.ValidMem (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseSTR |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsSTR |ins#0@@1|))))) (ite (_module.ins.STR__global_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdSTRR__global |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseSTR__global |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.ofsSTR__global |ins#0@@1|))) (_module.__default.ValidGlobalAddr (_module.ins.globalSTR |ins#0@@1|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseSTR__global |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsSTR__global |ins#0@@1|))))) (ite (_module.ins.MOV_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.dstMOV |ins#0@@1|)) (_module.__default.ValidSecondOperand (_module.ins.srcMOV |ins#0@@1|))) (ite (_module.ins.MOVW_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.dstMOVW |ins#0@@1|)) (_module.operand.OConst_q (_module.ins.srcMOVW |ins#0@@1|))) (ite (_module.ins.MOVT_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.dstMOVT |ins#0@@1|)) (_module.operand.OConst_q (_module.ins.srcMOVT |ins#0@@1|))) (ite (_module.ins.MRS_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.dstMRS |ins#0@@1|)) (_module.__default.ValidMrsMsrOperand |s#0@@197| (_module.ins.srcMRS |ins#0@@1|))) (ite (_module.ins.MSR_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.srcMSR |ins#0@@1|)) (_module.__default.ValidMrsMsrOperand |s#0@@197| (_module.ins.dstMSR |ins#0@@1|))) (=> (and (_module.operand.OSReg_q (_module.ins.dstMSR |ins#0@@1|)) (_module.SReg.spsr_q (_module.operand.sr (_module.ins.dstMSR |ins#0@@1|)))) (_module.__default.ValidPsrWord (_module.__default.OperandContents |s#0@@197| (_module.ins.srcMSR |ins#0@@1|))))) (=> (and (_module.operand.OSReg_q (_module.ins.dstMSR |ins#0@@1|)) (_module.SReg.cpsr_q (_module.operand.sr (_module.ins.dstMSR |ins#0@@1|)))) (_module.__default.ValidModeChange |s#0@@197| (_module.__default.OperandContents |s#0@@197| (_module.ins.srcMSR |ins#0@@1|))))) (ite (_module.ins.MRC_q |ins#0@@1|)  (and (_module.__default.ValidMcrMrcOperand |s#0@@197| (_module.ins.srcMRC |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.dstMRC |ins#0@@1|))) (ite (_module.ins.MCR_q |ins#0@@1|)  (and (_module.__default.ValidMcrMrcOperand |s#0@@197| (_module.ins.dstMCR |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.srcMCR |ins#0@@1|))) (ite (_module.ins.CPSID__IAF_q |ins#0@@1|)  (and (and (_module.operand.OConst_q (_module.ins.mod |ins#0@@1|)) (_module.__default.ValidModeEncoding (_module.operand.n (_module.ins.mod |ins#0@@1|)))) (_module.__default.ValidModeChange_k |s#0@@197| (_module.__default.decode__mode (_module.operand.n (_module.ins.mod |ins#0@@1|)))))  (and (_module.__default.ValidModeChange_k |s#0@@197| (Lit |#_module.mode.User|)) (= (_module.PSR.m (_module.__default.spsr__of__state |s#0@@197|)) (Lit |#_module.mode.User|)))))))))))))))))))))))))))))) (=> (and (_module.__default.ValidState |s#0@@197|) (ite (_module.ins.ADD_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1ADD |ins#0@@1|)) (_module.__default.ValidSecondOperand (_module.ins.src2ADD |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstADD |ins#0@@1|))) (ite (_module.ins.SUB_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1SUB |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2SUB |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstSUB |ins#0@@1|))) (ite (_module.ins.MUL_q |ins#0@@1|)  (and (and (_module.__default.ValidRegOperand (_module.ins.src1MUL |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.src2MUL |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstMUL |ins#0@@1|))) (ite (_module.ins.UDIV_q |ins#0@@1|)  (and (and (and (_module.__default.ValidOperand (_module.ins.src1DIV |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2DIV |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstDIV |ins#0@@1|))) (not (= (_module.__default.OperandContents |s#0@@197| (_module.ins.src2DIV |ins#0@@1|)) 0))) (ite (_module.ins.AND_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1AND |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2AND |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstAND |ins#0@@1|))) (ite (_module.ins.ORR_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1OR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.src2OR |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstOR |ins#0@@1|))) (ite (_module.ins.EOR_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1EOR |ins#0@@1|)) (_module.__default.ValidSecondOperand (_module.ins.src2EOR |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstEOR |ins#0@@1|))) (ite (_module.ins.LSL_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1LSL |ins#0@@1|)) (_module.__default.ValidShiftOperand |s#0@@197| (_module.ins.src2LSL |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstLSL |ins#0@@1|))) (ite (_module.ins.LSR_q |ins#0@@1|)  (and (and (_module.__default.ValidOperand (_module.ins.src1LSR |ins#0@@1|)) (_module.__default.ValidShiftOperand |s#0@@197| (_module.ins.src2LSR |ins#0@@1|))) (_module.__default.ValidRegOperand (_module.ins.dstLSR |ins#0@@1|))) (ite (_module.ins.REV_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.srcREV |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.dstREV |ins#0@@1|))) (ite (_module.ins.MVN_q |ins#0@@1|)  (and (_module.__default.ValidOperand (_module.ins.srcMVN |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.dstMVN |ins#0@@1|))) (ite (_module.ins.LDR_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdLDR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseLDR |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.ofsLDR |ins#0@@1|))) (_module.__default.ValidMemForRead (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseLDR |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsLDR |ins#0@@1|))))) (ite (_module.ins.LDR__global_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdLDR__global |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseLDR__global |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.ofsLDR__global |ins#0@@1|))) (_module.__default.ValidGlobalAddr (_module.ins.globalLDR |ins#0@@1|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseLDR__global |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsLDR__global |ins#0@@1|))))) (ite (_module.ins.LDR__reloc_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.rdLDR__reloc |ins#0@@1|)) (_module.__default.ValidGlobal (_module.ins.symLDR__reloc |ins#0@@1|))) (ite (_module.ins.LDR__rng_q |ins#0@@1|)  (and (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdLDR__rng |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseLDR__rng |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.ofsLDR__rng |ins#0@@1|))) (= (_module.__default.OperandContents |s#0@@197| (_module.ins.baseLDR__rng |ins#0@@1|)) _module.__default.RngBase)) (_module.__default.ValidRngOffset |s#0@@197| (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsLDR__rng |ins#0@@1|)))) (ite (_module.ins.STR_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdSTR |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.ofsSTR |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.baseSTR |ins#0@@1|))) (_module.__default.ValidMem (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseSTR |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsSTR |ins#0@@1|))))) (ite (_module.ins.STR__global_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.rdSTRR__global |ins#0@@1|)) (_module.__default.ValidOperand (_module.ins.baseSTR__global |ins#0@@1|))) (_module.__default.ValidOperand (_module.ins.ofsSTR__global |ins#0@@1|))) (_module.__default.ValidGlobalAddr (_module.ins.globalSTR |ins#0@@1|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@197| (_module.ins.baseSTR__global |ins#0@@1|)) (_module.__default.OperandContents |s#0@@197| (_module.ins.ofsSTR__global |ins#0@@1|))))) (ite (_module.ins.MOV_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.dstMOV |ins#0@@1|)) (_module.__default.ValidSecondOperand (_module.ins.srcMOV |ins#0@@1|))) (ite (_module.ins.MOVW_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.dstMOVW |ins#0@@1|)) (_module.operand.OConst_q (_module.ins.srcMOVW |ins#0@@1|))) (ite (_module.ins.MOVT_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.dstMOVT |ins#0@@1|)) (_module.operand.OConst_q (_module.ins.srcMOVT |ins#0@@1|))) (ite (_module.ins.MRS_q |ins#0@@1|)  (and (_module.__default.ValidRegOperand (_module.ins.dstMRS |ins#0@@1|)) (_module.__default.ValidMrsMsrOperand |s#0@@197| (_module.ins.srcMRS |ins#0@@1|))) (ite (_module.ins.MSR_q |ins#0@@1|)  (and (and (and (_module.__default.ValidRegOperand (_module.ins.srcMSR |ins#0@@1|)) (_module.__default.ValidMrsMsrOperand |s#0@@197| (_module.ins.dstMSR |ins#0@@1|))) (=> (and (_module.operand.OSReg_q (_module.ins.dstMSR |ins#0@@1|)) (_module.SReg.spsr_q (_module.operand.sr (_module.ins.dstMSR |ins#0@@1|)))) (_module.__default.ValidPsrWord (_module.__default.OperandContents |s#0@@197| (_module.ins.srcMSR |ins#0@@1|))))) (=> (and (_module.operand.OSReg_q (_module.ins.dstMSR |ins#0@@1|)) (_module.SReg.cpsr_q (_module.operand.sr (_module.ins.dstMSR |ins#0@@1|)))) (_module.__default.ValidModeChange |s#0@@197| (_module.__default.OperandContents |s#0@@197| (_module.ins.srcMSR |ins#0@@1|))))) (ite (_module.ins.MRC_q |ins#0@@1|)  (and (_module.__default.ValidMcrMrcOperand |s#0@@197| (_module.ins.srcMRC |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.dstMRC |ins#0@@1|))) (ite (_module.ins.MCR_q |ins#0@@1|)  (and (_module.__default.ValidMcrMrcOperand |s#0@@197| (_module.ins.dstMCR |ins#0@@1|)) (_module.__default.ValidRegOperand (_module.ins.srcMCR |ins#0@@1|))) (ite (_module.ins.CPSID__IAF_q |ins#0@@1|)  (and (and (_module.operand.OConst_q (_module.ins.mod |ins#0@@1|)) (_module.__default.ValidModeEncoding (_module.operand.n (_module.ins.mod |ins#0@@1|)))) (_module.__default.ValidModeChange_k |s#0@@197| (_module.__default.decode__mode (_module.operand.n (_module.ins.mod |ins#0@@1|)))))  (and (_module.__default.ValidModeChange_k |s#0@@197| (Lit |#_module.mode.User|)) (= (_module.PSR.m (_module.__default.spsr__of__state |s#0@@197|)) (Lit |#_module.mode.User|))))))))))))))))))))))))))))) (_module.__default.ValidInstruction |s#0@@197| |ins#0@@1|))))) :qid |ARMdefsd.1081:11| :skolemid |2904| :pattern ( (_module.__default.ValidInstruction |s#0@@197| |ins#0@@1|) ($IsGoodHeap $Heap@@208)) ))))
(assert  (=> true (forall (($Heap@@209 T@U) (|s#0@@198| T@U) (|ins#0@@2| T@U) ) (!  (=> (and (and (and (= (type $Heap@@209) (MapType1Type refType)) (= (type |s#0@@198|) DatatypeTypeType)) (= (type |ins#0@@2|) DatatypeTypeType)) (or (|_module.__default.ValidInstruction#canCall| (Lit |s#0@@198|) (Lit |ins#0@@2|)) (and (and ($IsGoodHeap $Heap@@209) ($Is |s#0@@198| Tclass._module.state)) ($Is |ins#0@@2| Tclass._module.ins)))) (and (and (|_module.__default.ValidState#canCall| (Lit |s#0@@198|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@198|))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.ADD_q (Lit |ins#0@@2|))))) (and (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src1ADD (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src1ADD (Lit |ins#0@@2|))))))) (|_module.__default.ValidSecondOperand#canCall| (Lit (_module.ins.src2ADD (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidSecondOperand#canCall| (Lit (_module.ins.src2ADD (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidSecondOperand (Lit (_module.ins.src2ADD (Lit |ins#0@@2|)))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstADD (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.ADD_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.SUB_q (Lit |ins#0@@2|))))) (and (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src1SUB (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src1SUB (Lit |ins#0@@2|))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src2SUB (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src2SUB (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src2SUB (Lit |ins#0@@2|)))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstSUB (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.SUB_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MUL_q (Lit |ins#0@@2|))))) (and (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.src1MUL (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.src1MUL (Lit |ins#0@@2|))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.src2MUL (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.src2MUL (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.src2MUL (Lit |ins#0@@2|)))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstMUL (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MUL_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.UDIV_q (Lit |ins#0@@2|))))) (and (and (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src1DIV (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src1DIV (Lit |ins#0@@2|))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src2DIV (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src2DIV (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src2DIV (Lit |ins#0@@2|)))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstDIV (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstDIV (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.dstDIV (Lit |ins#0@@2|)))))))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.src2DIV (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.UDIV_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.AND_q (Lit |ins#0@@2|))))) (and (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src1AND (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src1AND (Lit |ins#0@@2|))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src2AND (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src2AND (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src2AND (Lit |ins#0@@2|)))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstAND (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.AND_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.ORR_q (Lit |ins#0@@2|))))) (and (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src1OR (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src1OR (Lit |ins#0@@2|))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src2OR (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src2OR (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src2OR (Lit |ins#0@@2|)))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstOR (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.ORR_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.EOR_q (Lit |ins#0@@2|))))) (and (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src1EOR (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src1EOR (Lit |ins#0@@2|))))))) (|_module.__default.ValidSecondOperand#canCall| (Lit (_module.ins.src2EOR (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidSecondOperand#canCall| (Lit (_module.ins.src2EOR (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidSecondOperand (Lit (_module.ins.src2EOR (Lit |ins#0@@2|)))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstEOR (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.EOR_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LSL_q (Lit |ins#0@@2|))))) (and (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src1LSL (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src1LSL (Lit |ins#0@@2|))))))) (|_module.__default.ValidShiftOperand#canCall| (Lit |s#0@@198|) (Lit (_module.ins.src2LSL (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidShiftOperand#canCall| (Lit |s#0@@198|) (Lit (_module.ins.src2LSL (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidShiftOperand (Lit |s#0@@198|) (Lit (_module.ins.src2LSL (Lit |ins#0@@2|)))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstLSL (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LSL_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LSR_q (Lit |ins#0@@2|))))) (and (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.src1LSR (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.src1LSR (Lit |ins#0@@2|))))))) (|_module.__default.ValidShiftOperand#canCall| (Lit |s#0@@198|) (Lit (_module.ins.src2LSR (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidShiftOperand#canCall| (Lit |s#0@@198|) (Lit (_module.ins.src2LSR (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidShiftOperand (Lit |s#0@@198|) (Lit (_module.ins.src2LSR (Lit |ins#0@@2|)))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstLSR (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LSR_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.REV_q (Lit |ins#0@@2|))))) (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.srcREV (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.srcREV (Lit |ins#0@@2|))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstREV (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.REV_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MVN_q (Lit |ins#0@@2|))))) (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.srcMVN (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.srcMVN (Lit |ins#0@@2|))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstMVN (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MVN_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LDR_q (Lit |ins#0@@2|))))) (and (and (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.rdLDR (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR (Lit |ins#0@@2|))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseLDR (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseLDR (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.baseLDR (Lit |ins#0@@2|)))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsLDR (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsLDR (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.ofsLDR (Lit |ins#0@@2|)))))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.baseLDR (Lit |ins#0@@2|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR (Lit |ins#0@@2|))))) (|_module.__default.ValidMemForRead#canCall| (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseLDR (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR (Lit |ins#0@@2|))))))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LDR_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LDR__global_q (Lit |ins#0@@2|))))) (and (and (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.rdLDR__global (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR__global (Lit |ins#0@@2|))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseLDR__global (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseLDR__global (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.baseLDR__global (Lit |ins#0@@2|)))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@2|)))))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@2|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@2|))))) (|_module.__default.ValidGlobalAddr#canCall| (Lit (_module.ins.globalLDR (Lit |ins#0@@2|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@2|))))))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LDR__global_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LDR__reloc_q (Lit |ins#0@@2|))))) (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.rdLDR__reloc (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR__reloc (Lit |ins#0@@2|))))))) (|_module.__default.ValidGlobal#canCall| (Lit (_module.ins.symLDR__reloc (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LDR__reloc_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LDR__rng_q (Lit |ins#0@@2|))))) (and (and (and (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.rdLDR__rng (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR__rng (Lit |ins#0@@2|))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|)))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@2|)))))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|)))) |_module.__default.RngBase#canCall|))) (=> (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|)))) |_module.__default.RngBase#canCall|) (= (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|))))) _module.__default.RngBase)) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@2|)))) (|_module.__default.ValidRngOffset#canCall| (Lit |s#0@@198|) (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@2|)))))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LDR__rng_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.STR_q (Lit |ins#0@@2|))))) (and (and (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.rdSTR (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.rdSTR (Lit |ins#0@@2|))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsSTR (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsSTR (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.ofsSTR (Lit |ins#0@@2|)))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseSTR (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseSTR (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.baseSTR (Lit |ins#0@@2|)))))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.baseSTR (Lit |ins#0@@2|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.ofsSTR (Lit |ins#0@@2|))))) (|_module.__default.ValidMem#canCall| (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseSTR (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsSTR (Lit |ins#0@@2|))))))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.STR_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.STR__global_q (Lit |ins#0@@2|))))) (and (and (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.rdSTRR__global (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.rdSTRR__global (Lit |ins#0@@2|))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseSTR__global (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.baseSTR__global (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.baseSTR__global (Lit |ins#0@@2|)))))))) (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidOperand#canCall| (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@2|)))))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.baseSTR__global (Lit |ins#0@@2|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@2|))))) (|_module.__default.ValidGlobalAddr#canCall| (Lit (_module.ins.globalSTR (Lit |ins#0@@2|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseSTR__global (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@2|))))))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.STR__global_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MOV_q (Lit |ins#0@@2|))))) (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstMOV (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.dstMOV (Lit |ins#0@@2|))))))) (|_module.__default.ValidSecondOperand#canCall| (Lit (_module.ins.srcMOV (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MOV_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MOVW_q (Lit |ins#0@@2|))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstMOVW (Lit |ins#0@@2|))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MOVW_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MOVT_q (Lit |ins#0@@2|))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstMOVT (Lit |ins#0@@2|))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MOVT_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MRS_q (Lit |ins#0@@2|))))) (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstMRS (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.dstMRS (Lit |ins#0@@2|))))))) (|_module.__default.ValidMrsMsrOperand#canCall| (Lit |s#0@@198|) (Lit (_module.ins.srcMRS (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MRS_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MSR_q (Lit |ins#0@@2|))))) (and (and (and (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidRegOperand (Lit (_module.ins.srcMSR (Lit |ins#0@@2|))))))) (|_module.__default.ValidMrsMsrOperand#canCall| (Lit |s#0@@198|) (Lit (_module.ins.dstMSR (Lit |ins#0@@2|)))))) (=> (and (|_module.__default.ValidMrsMsrOperand#canCall| (Lit |s#0@@198|) (Lit (_module.ins.dstMSR (Lit |ins#0@@2|)))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidMrsMsrOperand (Lit |s#0@@198|) (Lit (_module.ins.dstMSR (Lit |ins#0@@2|)))))))) (=> (U_2_bool (Lit (bool_2_U (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))) (|_module.__default.ValidPsrWord#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))))))))) (=> (and (=> (U_2_bool (Lit (bool_2_U (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))) (|_module.__default.ValidPsrWord#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))))))) (U_2_bool (Lit (bool_2_U  (=> (and (_module.operand.OSReg_q (Lit (_module.ins.dstMSR (Lit |ins#0@@2|)))) (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))))) (_module.__default.ValidPsrWord (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|))))))))))) (=> (U_2_bool (Lit (bool_2_U (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))) (|_module.__default.ValidModeChange#canCall| (Lit |s#0@@198|) (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|))))))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MSR_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MRC_q (Lit |ins#0@@2|))))) (and (|_module.__default.ValidMcrMrcOperand#canCall| (Lit |s#0@@198|) (Lit (_module.ins.srcMRC (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidMcrMrcOperand (Lit |s#0@@198|) (Lit (_module.ins.srcMRC (Lit |ins#0@@2|))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.dstMRC (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MRC_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MCR_q (Lit |ins#0@@2|))))) (and (|_module.__default.ValidMcrMrcOperand#canCall| (Lit |s#0@@198|) (Lit (_module.ins.dstMCR (Lit |ins#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidMcrMrcOperand (Lit |s#0@@198|) (Lit (_module.ins.dstMCR (Lit |ins#0@@2|))))))) (|_module.__default.ValidRegOperand#canCall| (Lit (_module.ins.srcMCR (Lit |ins#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MCR_q (Lit |ins#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.CPSID__IAF_q (Lit |ins#0@@2|))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.operand.OConst_q (Lit (_module.ins.mod (Lit |ins#0@@2|))))))) (|_module.__default.ValidModeEncoding#canCall| (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@2|))))))) (=> (and (|_module.__default.ValidModeEncoding#canCall| (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@2|)))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidModeEncoding (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@2|)))))))))) (and (|_module.__default.decode__mode#canCall| (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@2|)))))) (|_module.__default.ValidModeChange_k#canCall| (Lit |s#0@@198|) (Lit (_module.__default.decode__mode (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@2|)))))))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.CPSID__IAF_q (Lit |ins#0@@2|)))))) (and (|_module.__default.ValidModeChange_k#canCall| (Lit |s#0@@198|) (Lit |#_module.mode.User|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidModeChange_k (Lit |s#0@@198|) (Lit |#_module.mode.User|))))) (and (|_module.__default.spsr__of__state#canCall| (Lit |s#0@@198|)) (_module.PSR.PSR_q (Lit (_module.__default.spsr__of__state (Lit |s#0@@198|))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (and (=> (_module.__default.ValidInstruction (Lit |s#0@@198|) (Lit |ins#0@@2|)) (and (_module.__default.ValidState (Lit |s#0@@198|)) (ite (_module.ins.ADD_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1ADD (Lit |ins#0@@2|)))) (_module.__default.ValidSecondOperand (Lit (_module.ins.src2ADD (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstADD (Lit |ins#0@@2|))))) (ite (_module.ins.SUB_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1SUB (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.src2SUB (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstSUB (Lit |ins#0@@2|))))) (ite (_module.ins.MUL_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.src1MUL (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.src2MUL (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstMUL (Lit |ins#0@@2|))))) (ite (_module.ins.UDIV_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1DIV (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.src2DIV (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstDIV (Lit |ins#0@@2|))))) (not (= (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.src2DIV (Lit |ins#0@@2|)))) 0))) (ite (_module.ins.AND_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1AND (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.src2AND (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstAND (Lit |ins#0@@2|))))) (ite (_module.ins.ORR_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1OR (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.src2OR (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstOR (Lit |ins#0@@2|))))) (ite (_module.ins.EOR_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1EOR (Lit |ins#0@@2|)))) (_module.__default.ValidSecondOperand (Lit (_module.ins.src2EOR (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstEOR (Lit |ins#0@@2|))))) (ite (_module.ins.LSL_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1LSL (Lit |ins#0@@2|)))) (_module.__default.ValidShiftOperand (Lit |s#0@@198|) (Lit (_module.ins.src2LSL (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstLSL (Lit |ins#0@@2|))))) (ite (_module.ins.LSR_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1LSR (Lit |ins#0@@2|)))) (_module.__default.ValidShiftOperand (Lit |s#0@@198|) (Lit (_module.ins.src2LSR (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstLSR (Lit |ins#0@@2|))))) (ite (_module.ins.REV_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.srcREV (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstREV (Lit |ins#0@@2|))))) (ite (_module.ins.MVN_q (Lit |ins#0@@2|))  (and (_module.__default.ValidOperand (Lit (_module.ins.srcMVN (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstMVN (Lit |ins#0@@2|))))) (ite (_module.ins.LDR_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.baseLDR (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.ofsLDR (Lit |ins#0@@2|))))) (_module.__default.ValidMemForRead (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseLDR (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR (Lit |ins#0@@2|)))))))) (ite (_module.ins.LDR__global_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR__global (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.baseLDR__global (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@2|))))) (_module.__default.ValidGlobalAddr (Lit (_module.ins.globalLDR (Lit |ins#0@@2|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@2|)))))))) (ite (_module.ins.LDR__reloc_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR__reloc (Lit |ins#0@@2|)))) (_module.__default.ValidGlobal (Lit (_module.ins.symLDR__reloc (Lit |ins#0@@2|))))) (ite (_module.ins.LDR__rng_q (Lit |ins#0@@2|))  (and (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR__rng (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@2|))))) (= (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|))))) _module.__default.RngBase)) (_module.__default.ValidRngOffset (Lit |s#0@@198|) (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@2|))))))) (ite (_module.ins.STR_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdSTR (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.ofsSTR (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.baseSTR (Lit |ins#0@@2|))))) (_module.__default.ValidMem (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseSTR (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsSTR (Lit |ins#0@@2|)))))))) (ite (_module.ins.STR__global_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdSTRR__global (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.baseSTR__global (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@2|))))) (_module.__default.ValidGlobalAddr (Lit (_module.ins.globalSTR (Lit |ins#0@@2|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseSTR__global (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@2|)))))))) (ite (_module.ins.MOV_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.dstMOV (Lit |ins#0@@2|)))) (_module.__default.ValidSecondOperand (Lit (_module.ins.srcMOV (Lit |ins#0@@2|))))) (ite (_module.ins.MOVW_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.dstMOVW (Lit |ins#0@@2|)))) (_module.operand.OConst_q (Lit (_module.ins.srcMOVW (Lit |ins#0@@2|))))) (ite (_module.ins.MOVT_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.dstMOVT (Lit |ins#0@@2|)))) (_module.operand.OConst_q (Lit (_module.ins.srcMOVT (Lit |ins#0@@2|))))) (ite (_module.ins.MRS_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.dstMRS (Lit |ins#0@@2|)))) (_module.__default.ValidMrsMsrOperand (Lit |s#0@@198|) (Lit (_module.ins.srcMRS (Lit |ins#0@@2|))))) (ite (_module.ins.MSR_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))) (_module.__default.ValidMrsMsrOperand (Lit |s#0@@198|) (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))) (=> (and (_module.operand.OSReg_q (Lit (_module.ins.dstMSR (Lit |ins#0@@2|)))) (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))))) (_module.__default.ValidPsrWord (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))))))) (=> (and (_module.operand.OSReg_q (Lit (_module.ins.dstMSR (Lit |ins#0@@2|)))) (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))))) (_module.__default.ValidModeChange (Lit |s#0@@198|) (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))))))) (ite (_module.ins.MRC_q (Lit |ins#0@@2|))  (and (_module.__default.ValidMcrMrcOperand (Lit |s#0@@198|) (Lit (_module.ins.srcMRC (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstMRC (Lit |ins#0@@2|))))) (ite (_module.ins.MCR_q (Lit |ins#0@@2|))  (and (_module.__default.ValidMcrMrcOperand (Lit |s#0@@198|) (Lit (_module.ins.dstMCR (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.srcMCR (Lit |ins#0@@2|))))) (ite (_module.ins.CPSID__IAF_q (Lit |ins#0@@2|))  (and (and (_module.operand.OConst_q (Lit (_module.ins.mod (Lit |ins#0@@2|)))) (_module.__default.ValidModeEncoding (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@2|))))))) (_module.__default.ValidModeChange_k (Lit |s#0@@198|) (Lit (_module.__default.decode__mode (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@2|)))))))))  (and (_module.__default.ValidModeChange_k (Lit |s#0@@198|) (Lit |#_module.mode.User|)) (= (Lit (_module.PSR.m (Lit (_module.__default.spsr__of__state (Lit |s#0@@198|))))) (Lit |#_module.mode.User|)))))))))))))))))))))))))))))) (=> (and (_module.__default.ValidState (Lit |s#0@@198|)) (ite (_module.ins.ADD_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1ADD (Lit |ins#0@@2|)))) (_module.__default.ValidSecondOperand (Lit (_module.ins.src2ADD (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstADD (Lit |ins#0@@2|))))) (ite (_module.ins.SUB_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1SUB (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.src2SUB (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstSUB (Lit |ins#0@@2|))))) (ite (_module.ins.MUL_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.src1MUL (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.src2MUL (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstMUL (Lit |ins#0@@2|))))) (ite (_module.ins.UDIV_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1DIV (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.src2DIV (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstDIV (Lit |ins#0@@2|))))) (not (= (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.src2DIV (Lit |ins#0@@2|)))) 0))) (ite (_module.ins.AND_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1AND (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.src2AND (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstAND (Lit |ins#0@@2|))))) (ite (_module.ins.ORR_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1OR (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.src2OR (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstOR (Lit |ins#0@@2|))))) (ite (_module.ins.EOR_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1EOR (Lit |ins#0@@2|)))) (_module.__default.ValidSecondOperand (Lit (_module.ins.src2EOR (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstEOR (Lit |ins#0@@2|))))) (ite (_module.ins.LSL_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1LSL (Lit |ins#0@@2|)))) (_module.__default.ValidShiftOperand (Lit |s#0@@198|) (Lit (_module.ins.src2LSL (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstLSL (Lit |ins#0@@2|))))) (ite (_module.ins.LSR_q (Lit |ins#0@@2|))  (and (and (_module.__default.ValidOperand (Lit (_module.ins.src1LSR (Lit |ins#0@@2|)))) (_module.__default.ValidShiftOperand (Lit |s#0@@198|) (Lit (_module.ins.src2LSR (Lit |ins#0@@2|))))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstLSR (Lit |ins#0@@2|))))) (ite (_module.ins.REV_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.srcREV (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstREV (Lit |ins#0@@2|))))) (ite (_module.ins.MVN_q (Lit |ins#0@@2|))  (and (_module.__default.ValidOperand (Lit (_module.ins.srcMVN (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstMVN (Lit |ins#0@@2|))))) (ite (_module.ins.LDR_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.baseLDR (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.ofsLDR (Lit |ins#0@@2|))))) (_module.__default.ValidMemForRead (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseLDR (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR (Lit |ins#0@@2|)))))))) (ite (_module.ins.LDR__global_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR__global (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.baseLDR__global (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@2|))))) (_module.__default.ValidGlobalAddr (Lit (_module.ins.globalLDR (Lit |ins#0@@2|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@2|)))))))) (ite (_module.ins.LDR__reloc_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR__reloc (Lit |ins#0@@2|)))) (_module.__default.ValidGlobal (Lit (_module.ins.symLDR__reloc (Lit |ins#0@@2|))))) (ite (_module.ins.LDR__rng_q (Lit |ins#0@@2|))  (and (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdLDR__rng (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@2|))))) (= (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseLDR__rng (Lit |ins#0@@2|))))) _module.__default.RngBase)) (_module.__default.ValidRngOffset (Lit |s#0@@198|) (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@2|))))))) (ite (_module.ins.STR_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdSTR (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.ofsSTR (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.baseSTR (Lit |ins#0@@2|))))) (_module.__default.ValidMem (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseSTR (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsSTR (Lit |ins#0@@2|)))))))) (ite (_module.ins.STR__global_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.rdSTRR__global (Lit |ins#0@@2|)))) (_module.__default.ValidOperand (Lit (_module.ins.baseSTR__global (Lit |ins#0@@2|))))) (_module.__default.ValidOperand (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@2|))))) (_module.__default.ValidGlobalAddr (Lit (_module.ins.globalSTR (Lit |ins#0@@2|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.baseSTR__global (Lit |ins#0@@2|)))) (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@2|)))))))) (ite (_module.ins.MOV_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.dstMOV (Lit |ins#0@@2|)))) (_module.__default.ValidSecondOperand (Lit (_module.ins.srcMOV (Lit |ins#0@@2|))))) (ite (_module.ins.MOVW_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.dstMOVW (Lit |ins#0@@2|)))) (_module.operand.OConst_q (Lit (_module.ins.srcMOVW (Lit |ins#0@@2|))))) (ite (_module.ins.MOVT_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.dstMOVT (Lit |ins#0@@2|)))) (_module.operand.OConst_q (Lit (_module.ins.srcMOVT (Lit |ins#0@@2|))))) (ite (_module.ins.MRS_q (Lit |ins#0@@2|))  (and (_module.__default.ValidRegOperand (Lit (_module.ins.dstMRS (Lit |ins#0@@2|)))) (_module.__default.ValidMrsMsrOperand (Lit |s#0@@198|) (Lit (_module.ins.srcMRS (Lit |ins#0@@2|))))) (ite (_module.ins.MSR_q (Lit |ins#0@@2|))  (and (and (and (_module.__default.ValidRegOperand (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))) (_module.__default.ValidMrsMsrOperand (Lit |s#0@@198|) (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))) (=> (and (_module.operand.OSReg_q (Lit (_module.ins.dstMSR (Lit |ins#0@@2|)))) (_module.SReg.spsr_q (Lit (_module.operand.sr (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))))) (_module.__default.ValidPsrWord (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))))))) (=> (and (_module.operand.OSReg_q (Lit (_module.ins.dstMSR (Lit |ins#0@@2|)))) (_module.SReg.cpsr_q (Lit (_module.operand.sr (Lit (_module.ins.dstMSR (Lit |ins#0@@2|))))))) (_module.__default.ValidModeChange (Lit |s#0@@198|) (LitInt (_module.__default.OperandContents (Lit |s#0@@198|) (Lit (_module.ins.srcMSR (Lit |ins#0@@2|)))))))) (ite (_module.ins.MRC_q (Lit |ins#0@@2|))  (and (_module.__default.ValidMcrMrcOperand (Lit |s#0@@198|) (Lit (_module.ins.srcMRC (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.dstMRC (Lit |ins#0@@2|))))) (ite (_module.ins.MCR_q (Lit |ins#0@@2|))  (and (_module.__default.ValidMcrMrcOperand (Lit |s#0@@198|) (Lit (_module.ins.dstMCR (Lit |ins#0@@2|)))) (_module.__default.ValidRegOperand (Lit (_module.ins.srcMCR (Lit |ins#0@@2|))))) (ite (_module.ins.CPSID__IAF_q (Lit |ins#0@@2|))  (and (and (_module.operand.OConst_q (Lit (_module.ins.mod (Lit |ins#0@@2|)))) (_module.__default.ValidModeEncoding (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@2|))))))) (_module.__default.ValidModeChange_k (Lit |s#0@@198|) (Lit (_module.__default.decode__mode (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@2|)))))))))  (and (_module.__default.ValidModeChange_k (Lit |s#0@@198|) (Lit |#_module.mode.User|)) (= (Lit (_module.PSR.m (Lit (_module.__default.spsr__of__state (Lit |s#0@@198|))))) (Lit |#_module.mode.User|))))))))))))))))))))))))))))) (_module.__default.ValidInstruction (Lit |s#0@@198|) (Lit |ins#0@@2|)))))) :qid |ARMdefsd.1081:11| :weight 3 :skolemid |2905| :pattern ( (_module.__default.ValidInstruction (Lit |s#0@@198|) (Lit |ins#0@@2|)) ($IsGoodHeap $Heap@@209)) ))))
(assert  (=> true (forall ((|s#0@@199| T@U) (|ex#0| T@U) (|r#0@@48| T@U) ) (!  (=> (and (and (and (= (type |s#0@@199|) DatatypeTypeType) (= (type |ex#0|) DatatypeTypeType)) (= (type |r#0@@48|) DatatypeTypeType)) (or (|_module.__default.handleInterrupt#canCall| |s#0@@199| |ex#0| |r#0@@48|) (and (and (and ($Is |s#0@@199| Tclass._module.state) ($Is |ex#0| Tclass._module.exception)) ($Is |r#0@@48| Tclass._module.state)) (_module.__default.ValidState |s#0@@199|)))) true) :qid |ARMdefsd.1152:27| :skolemid |2906| :pattern ( (_module.__default.handleInterrupt |s#0@@199| |ex#0| |r#0@@48|)) ))))
(assert (forall (($Heap@@210 T@U) (|s#0@@200| T@U) (|ex#0@@0| T@U) (|r#0@@49| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@210) (MapType1Type refType)) (= (type |s#0@@200|) DatatypeTypeType)) (= (type |ex#0@@0|) DatatypeTypeType)) (= (type |r#0@@49|) DatatypeTypeType)) (and (and (and ($IsGoodHeap $Heap@@210) ($Is |s#0@@200| Tclass._module.state)) ($Is |ex#0@@0| Tclass._module.exception)) ($Is |r#0@@49| Tclass._module.state))) (and (=> (|_module.__default.handleInterrupt#requires| |s#0@@200| |ex#0@@0| |r#0@@49|) (_module.__default.ValidState |s#0@@200|)) (=> (_module.__default.ValidState |s#0@@200|) (|_module.__default.handleInterrupt#requires| |s#0@@200| |ex#0@@0| |r#0@@49|)))) :qid |ARMdefsd.1152:11| :skolemid |2907| :pattern ( (|_module.__default.handleInterrupt#requires| |s#0@@200| |ex#0@@0| |r#0@@49|) ($IsGoodHeap $Heap@@210)) )))
(assert  (=> true (forall (($Heap@@211 T@U) (|s#0@@201| T@U) (|ex#0@@1| T@U) (|r#0@@50| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@211) (MapType1Type refType)) (= (type |s#0@@201|) DatatypeTypeType)) (= (type |ex#0@@1|) DatatypeTypeType)) (= (type |r#0@@50|) DatatypeTypeType)) (or (|_module.__default.handleInterrupt#canCall| |s#0@@201| |ex#0@@1| |r#0@@50|) (and (and (and (and ($IsGoodHeap $Heap@@211) ($Is |s#0@@201| Tclass._module.state)) ($Is |ex#0@@1| Tclass._module.exception)) ($Is |r#0@@50| Tclass._module.state)) (_module.__default.ValidState |s#0@@201|)))) (and (and (|_module.__default.InterruptContinuationPrecondition#canCall| |s#0@@201|) (=> (_module.__default.InterruptContinuationPrecondition |s#0@@201|) (forall ((|s1#0| T@U) (|s2#0| T@U) ) (!  (=> (and (and (= (type |s1#0|) DatatypeTypeType) (= (type |s2#0|) DatatypeTypeType)) (and ($Is |s1#0| Tclass._module.state) ($Is |s2#0| Tclass._module.state))) (and (and (and (and (and (and (_module.state.State_q |s#0@@201|) (_module.config.Config_q (_module.state.conf |s#0@@201|))) |_module.__default.NONDET__PC#canCall|) (|_module.__default.nondet__word#canCall| (_module.config.nondet (_module.state.conf |s#0@@201|)) _module.__default.NONDET__PC)) (|_module.__default.evalExceptionTaken#canCall| |s#0@@201| |ex#0@@1| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@201|)) _module.__default.NONDET__PC) |s1#0|)) (=> (_module.__default.evalExceptionTaken |s#0@@201| |ex#0@@1| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@201|)) _module.__default.NONDET__PC) |s1#0|) (|_module.__default.InterruptContinuationInvariant#canCall| |s1#0| |s2#0|))) (=> (and (|_module.__default.InterruptContinuationInvariant#canCall| |s1#0| |s2#0|) (_module.__default.InterruptContinuationInvariant |s1#0| |s2#0|)) (|_module.__default.evalMOVSPCLR#canCall| |s2#0| |r#0@@50|)))) :qid |ARMdefsd.1156:15| :skolemid |2908| :pattern ( (_module.__default.evalMOVSPCLR |s2#0| |r#0@@50|) (_module.__default.evalExceptionTaken |s#0@@201| |ex#0@@1| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@201|)) _module.__default.NONDET__PC) |s1#0|)) :pattern ( (_module.__default.InterruptContinuationInvariant |s1#0| |s2#0|)) )))) (and (=> (_module.__default.handleInterrupt |s#0@@201| |ex#0@@1| |r#0@@50|) (and (_module.__default.InterruptContinuationPrecondition |s#0@@201|) (exists ((|s1#0@@0| T@U) (|s2#0@@0| T@U) ) (!  (and (and (= (type |s1#0@@0|) DatatypeTypeType) (= (type |s2#0@@0|) DatatypeTypeType)) (and (and ($Is |s1#0@@0| Tclass._module.state) ($Is |s2#0@@0| Tclass._module.state)) (and (and (_module.__default.evalExceptionTaken |s#0@@201| |ex#0@@1| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@201|)) _module.__default.NONDET__PC) |s1#0@@0|) (_module.__default.InterruptContinuationInvariant |s1#0@@0| |s2#0@@0|)) (_module.__default.evalMOVSPCLR |s2#0@@0| |r#0@@50|)))) :qid |ARMdefsd.1156:15| :skolemid |2909| :pattern ( (_module.__default.evalMOVSPCLR |s2#0@@0| |r#0@@50|) (_module.__default.evalExceptionTaken |s#0@@201| |ex#0@@1| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@201|)) _module.__default.NONDET__PC) |s1#0@@0|)) :pattern ( (_module.__default.InterruptContinuationInvariant |s1#0@@0| |s2#0@@0|)) )))) (=> (and (_module.__default.InterruptContinuationPrecondition |s#0@@201|) (exists ((|s1#0@@1| T@U) (|s2#0@@1| T@U) ) (!  (and (and (= (type |s1#0@@1|) DatatypeTypeType) (= (type |s2#0@@1|) DatatypeTypeType)) (and (and ($Is |s1#0@@1| Tclass._module.state) ($Is |s2#0@@1| Tclass._module.state)) (and (and (_module.__default.evalExceptionTaken |s#0@@201| |ex#0@@1| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@201|)) _module.__default.NONDET__PC) |s1#0@@1|) (_module.__default.InterruptContinuationInvariant |s1#0@@1| |s2#0@@1|)) (_module.__default.evalMOVSPCLR |s2#0@@1| |r#0@@50|)))) :qid |ARMdefsd.1156:15| :skolemid |2909| :pattern ( (_module.__default.evalMOVSPCLR |s2#0@@1| |r#0@@50|) (_module.__default.evalExceptionTaken |s#0@@201| |ex#0@@1| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@201|)) _module.__default.NONDET__PC) |s1#0@@1|)) :pattern ( (_module.__default.InterruptContinuationInvariant |s1#0@@1| |s2#0@@1|)) ))) (_module.__default.handleInterrupt |s#0@@201| |ex#0@@1| |r#0@@50|))))) :qid |ARMdefsd.1152:11| :skolemid |2910| :pattern ( (_module.__default.handleInterrupt |s#0@@201| |ex#0@@1| |r#0@@50|) ($IsGoodHeap $Heap@@211)) ))))
(assert  (=> true (forall (($Heap@@212 T@U) (|s#0@@202| T@U) (|ex#0@@2| T@U) (|r#0@@51| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@212) (MapType1Type refType)) (= (type |s#0@@202|) DatatypeTypeType)) (= (type |ex#0@@2|) DatatypeTypeType)) (= (type |r#0@@51|) DatatypeTypeType)) (or (|_module.__default.handleInterrupt#canCall| (Lit |s#0@@202|) (Lit |ex#0@@2|) (Lit |r#0@@51|)) (and (and (and (and ($IsGoodHeap $Heap@@212) ($Is |s#0@@202| Tclass._module.state)) ($Is |ex#0@@2| Tclass._module.exception)) ($Is |r#0@@51| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@202|)))))))) (and (and (|_module.__default.InterruptContinuationPrecondition#canCall| (Lit |s#0@@202|)) (=> (_module.__default.InterruptContinuationPrecondition (Lit |s#0@@202|)) (forall ((|s1#1| T@U) (|s2#1| T@U) ) (!  (=> (and (and (= (type |s1#1|) DatatypeTypeType) (= (type |s2#1|) DatatypeTypeType)) (and ($Is |s1#1| Tclass._module.state) ($Is |s2#1| Tclass._module.state))) (and (and (and (and (and (and (_module.state.State_q (Lit |s#0@@202|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@202|))))) |_module.__default.NONDET__PC#canCall|) (|_module.__default.nondet__word#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@202|))))) _module.__default.NONDET__PC)) (|_module.__default.evalExceptionTaken#canCall| (Lit |s#0@@202|) (Lit |ex#0@@2|) (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@202|))))) _module.__default.NONDET__PC) |s1#1|)) (=> (_module.__default.evalExceptionTaken (Lit |s#0@@202|) (Lit |ex#0@@2|) (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@202|))))) _module.__default.NONDET__PC) |s1#1|) (|_module.__default.InterruptContinuationInvariant#canCall| |s1#1| |s2#1|))) (=> (and (|_module.__default.InterruptContinuationInvariant#canCall| |s1#1| |s2#1|) (_module.__default.InterruptContinuationInvariant |s1#1| |s2#1|)) (|_module.__default.evalMOVSPCLR#canCall| |s2#1| (Lit |r#0@@51|))))) :qid |ARMdefsd.1156:15| :skolemid |2911| :pattern ( (_module.__default.evalMOVSPCLR |s2#1| |r#0@@51|) (_module.__default.evalExceptionTaken |s#0@@202| |ex#0@@2| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@202|)) _module.__default.NONDET__PC) |s1#1|)) :pattern ( (_module.__default.InterruptContinuationInvariant |s1#1| |s2#1|)) )))) (and (=> (_module.__default.handleInterrupt (Lit |s#0@@202|) (Lit |ex#0@@2|) (Lit |r#0@@51|)) (and (_module.__default.InterruptContinuationPrecondition (Lit |s#0@@202|)) (exists ((|s1#1@@0| T@U) (|s2#1@@0| T@U) ) (!  (and (and (= (type |s1#1@@0|) DatatypeTypeType) (= (type |s2#1@@0|) DatatypeTypeType)) (and (and ($Is |s1#1@@0| Tclass._module.state) ($Is |s2#1@@0| Tclass._module.state)) (and (and (_module.__default.evalExceptionTaken (Lit |s#0@@202|) (Lit |ex#0@@2|) (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@202|))))) _module.__default.NONDET__PC) |s1#1@@0|) (_module.__default.InterruptContinuationInvariant |s1#1@@0| |s2#1@@0|)) (_module.__default.evalMOVSPCLR |s2#1@@0| (Lit |r#0@@51|))))) :qid |ARMdefsd.1156:15| :skolemid |2912| :pattern ( (_module.__default.evalMOVSPCLR |s2#1@@0| |r#0@@51|) (_module.__default.evalExceptionTaken |s#0@@202| |ex#0@@2| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@202|)) _module.__default.NONDET__PC) |s1#1@@0|)) :pattern ( (_module.__default.InterruptContinuationInvariant |s1#1@@0| |s2#1@@0|)) )))) (=> (and (_module.__default.InterruptContinuationPrecondition (Lit |s#0@@202|)) (exists ((|s1#1@@1| T@U) (|s2#1@@1| T@U) ) (!  (and (and (= (type |s1#1@@1|) DatatypeTypeType) (= (type |s2#1@@1|) DatatypeTypeType)) (and (and ($Is |s1#1@@1| Tclass._module.state) ($Is |s2#1@@1| Tclass._module.state)) (and (and (_module.__default.evalExceptionTaken (Lit |s#0@@202|) (Lit |ex#0@@2|) (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@202|))))) _module.__default.NONDET__PC) |s1#1@@1|) (_module.__default.InterruptContinuationInvariant |s1#1@@1| |s2#1@@1|)) (_module.__default.evalMOVSPCLR |s2#1@@1| (Lit |r#0@@51|))))) :qid |ARMdefsd.1156:15| :skolemid |2912| :pattern ( (_module.__default.evalMOVSPCLR |s2#1@@1| |r#0@@51|) (_module.__default.evalExceptionTaken |s#0@@202| |ex#0@@2| (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@202|)) _module.__default.NONDET__PC) |s1#1@@1|)) :pattern ( (_module.__default.InterruptContinuationInvariant |s1#1@@1| |s2#1@@1|)) ))) (_module.__default.handleInterrupt (Lit |s#0@@202|) (Lit |ex#0@@2|) (Lit |r#0@@51|)))))) :qid |ARMdefsd.1152:11| :weight 3 :skolemid |2913| :pattern ( (_module.__default.handleInterrupt (Lit |s#0@@202|) (Lit |ex#0@@2|) (Lit |r#0@@51|)) ($IsGoodHeap $Heap@@212)) ))))
(assert  (=> true (forall ((|s#0@@203| T@U) ) (!  (=> (and (= (type |s#0@@203|) DatatypeTypeType) (or (|_module.__default.stateTakesFiq#canCall| |s#0@@203|) ($Is |s#0@@203| Tclass._module.state))) true) :qid |ARMdefsd.1161:25| :skolemid |2914| :pattern ( (_module.__default.stateTakesFiq |s#0@@203|)) ))))
(assert (forall (($Heap@@213 T@U) (|s#0@@204| T@U) ) (!  (=> (and (and (= (type $Heap@@213) (MapType1Type refType)) (= (type |s#0@@204|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@213) ($Is |s#0@@204| Tclass._module.state))) (and (=> (|_module.__default.stateTakesFiq#requires| |s#0@@204|) true) (=> true (|_module.__default.stateTakesFiq#requires| |s#0@@204|)))) :qid |ARMdefsd.1161:11| :skolemid |2915| :pattern ( (|_module.__default.stateTakesFiq#requires| |s#0@@204|) ($IsGoodHeap $Heap@@213)) )))
(assert  (=> true (forall (($Heap@@214 T@U) (|s#0@@205| T@U) ) (!  (=> (and (and (= (type $Heap@@214) (MapType1Type refType)) (= (type |s#0@@205|) DatatypeTypeType)) (or (|_module.__default.stateTakesFiq#canCall| |s#0@@205|) (and ($IsGoodHeap $Heap@@214) ($Is |s#0@@205| Tclass._module.state)))) (and (and (and (and (_module.state.State_q |s#0@@205|) (_module.config.Config_q (_module.state.conf |s#0@@205|))) (_module.PSR.PSR_q (_module.config.cpsr (_module.state.conf |s#0@@205|)))) (=> (not (_module.PSR.f (_module.config.cpsr (_module.state.conf |s#0@@205|)))) (and (and (and (_module.state.State_q |s#0@@205|) (_module.config.Config_q (_module.state.conf |s#0@@205|))) |_module.__default.NONDET__EX#canCall|) (|_module.__default.nondet__word#canCall| (_module.config.nondet (_module.state.conf |s#0@@205|)) _module.__default.NONDET__EX)))) (and (=> (_module.__default.stateTakesFiq |s#0@@205|) (and (not (_module.PSR.f (_module.config.cpsr (_module.state.conf |s#0@@205|)))) (= (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@205|)) _module.__default.NONDET__EX) (LitInt 0)))) (=> (and (not (_module.PSR.f (_module.config.cpsr (_module.state.conf |s#0@@205|)))) (= (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@205|)) _module.__default.NONDET__EX) (LitInt 0))) (_module.__default.stateTakesFiq |s#0@@205|))))) :qid |ARMdefsd.1161:11| :skolemid |2916| :pattern ( (_module.__default.stateTakesFiq |s#0@@205|) ($IsGoodHeap $Heap@@214)) ))))
(assert  (=> true (forall (($Heap@@215 T@U) (|s#0@@206| T@U) ) (!  (=> (and (and (= (type $Heap@@215) (MapType1Type refType)) (= (type |s#0@@206|) DatatypeTypeType)) (or (|_module.__default.stateTakesFiq#canCall| (Lit |s#0@@206|)) (and ($IsGoodHeap $Heap@@215) ($Is |s#0@@206| Tclass._module.state)))) (and (and (and (and (_module.state.State_q (Lit |s#0@@206|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@206|))))) (_module.PSR.PSR_q (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@206|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.PSR.f (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@206|)))))))))) (and (and (and (_module.state.State_q (Lit |s#0@@206|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@206|))))) |_module.__default.NONDET__EX#canCall|) (|_module.__default.nondet__word#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@206|))))) _module.__default.NONDET__EX)))) (and (=> (_module.__default.stateTakesFiq (Lit |s#0@@206|)) (and (not (U_2_bool (Lit (bool_2_U (_module.PSR.f (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@206|)))))))))) (= (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@206|))))) _module.__default.NONDET__EX) (LitInt 0)))) (=> (and (not (U_2_bool (Lit (bool_2_U (_module.PSR.f (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@206|)))))))))) (= (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@206|))))) _module.__default.NONDET__EX) (LitInt 0))) (_module.__default.stateTakesFiq (Lit |s#0@@206|)))))) :qid |ARMdefsd.1161:11| :weight 3 :skolemid |2917| :pattern ( (_module.__default.stateTakesFiq (Lit |s#0@@206|)) ($IsGoodHeap $Heap@@215)) ))))
(assert  (=> true (forall ((|s#0@@207| T@U) ) (!  (=> (and (= (type |s#0@@207|) DatatypeTypeType) (or (|_module.__default.stateTakesIrq#canCall| |s#0@@207|) ($Is |s#0@@207| Tclass._module.state))) true) :qid |ARMdefsd.1166:25| :skolemid |2918| :pattern ( (_module.__default.stateTakesIrq |s#0@@207|)) ))))
(assert (forall (($Heap@@216 T@U) (|s#0@@208| T@U) ) (!  (=> (and (and (= (type $Heap@@216) (MapType1Type refType)) (= (type |s#0@@208|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@216) ($Is |s#0@@208| Tclass._module.state))) (and (=> (|_module.__default.stateTakesIrq#requires| |s#0@@208|) true) (=> true (|_module.__default.stateTakesIrq#requires| |s#0@@208|)))) :qid |ARMdefsd.1166:11| :skolemid |2919| :pattern ( (|_module.__default.stateTakesIrq#requires| |s#0@@208|) ($IsGoodHeap $Heap@@216)) )))
(assert  (=> true (forall (($Heap@@217 T@U) (|s#0@@209| T@U) ) (!  (=> (and (and (= (type $Heap@@217) (MapType1Type refType)) (= (type |s#0@@209|) DatatypeTypeType)) (or (|_module.__default.stateTakesIrq#canCall| |s#0@@209|) (and ($IsGoodHeap $Heap@@217) ($Is |s#0@@209| Tclass._module.state)))) (and (and (and (and (_module.state.State_q |s#0@@209|) (_module.config.Config_q (_module.state.conf |s#0@@209|))) (_module.PSR.PSR_q (_module.config.cpsr (_module.state.conf |s#0@@209|)))) (=> (not (_module.PSR.i (_module.config.cpsr (_module.state.conf |s#0@@209|)))) (and (and (and (_module.state.State_q |s#0@@209|) (_module.config.Config_q (_module.state.conf |s#0@@209|))) |_module.__default.NONDET__EX#canCall|) (|_module.__default.nondet__word#canCall| (_module.config.nondet (_module.state.conf |s#0@@209|)) _module.__default.NONDET__EX)))) (and (=> (_module.__default.stateTakesIrq |s#0@@209|) (and (not (_module.PSR.i (_module.config.cpsr (_module.state.conf |s#0@@209|)))) (= (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@209|)) _module.__default.NONDET__EX) (LitInt 1)))) (=> (and (not (_module.PSR.i (_module.config.cpsr (_module.state.conf |s#0@@209|)))) (= (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@209|)) _module.__default.NONDET__EX) (LitInt 1))) (_module.__default.stateTakesIrq |s#0@@209|))))) :qid |ARMdefsd.1166:11| :skolemid |2920| :pattern ( (_module.__default.stateTakesIrq |s#0@@209|) ($IsGoodHeap $Heap@@217)) ))))
(assert  (=> true (forall (($Heap@@218 T@U) (|s#0@@210| T@U) ) (!  (=> (and (and (= (type $Heap@@218) (MapType1Type refType)) (= (type |s#0@@210|) DatatypeTypeType)) (or (|_module.__default.stateTakesIrq#canCall| (Lit |s#0@@210|)) (and ($IsGoodHeap $Heap@@218) ($Is |s#0@@210| Tclass._module.state)))) (and (and (and (and (_module.state.State_q (Lit |s#0@@210|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@210|))))) (_module.PSR.PSR_q (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@210|))))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.PSR.i (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@210|)))))))))) (and (and (and (_module.state.State_q (Lit |s#0@@210|)) (_module.config.Config_q (Lit (_module.state.conf (Lit |s#0@@210|))))) |_module.__default.NONDET__EX#canCall|) (|_module.__default.nondet__word#canCall| (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@210|))))) _module.__default.NONDET__EX)))) (and (=> (_module.__default.stateTakesIrq (Lit |s#0@@210|)) (and (not (U_2_bool (Lit (bool_2_U (_module.PSR.i (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@210|)))))))))) (= (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@210|))))) _module.__default.NONDET__EX) (LitInt 1)))) (=> (and (not (U_2_bool (Lit (bool_2_U (_module.PSR.i (Lit (_module.config.cpsr (Lit (_module.state.conf (Lit |s#0@@210|)))))))))) (= (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@210|))))) _module.__default.NONDET__EX) (LitInt 1))) (_module.__default.stateTakesIrq (Lit |s#0@@210|)))))) :qid |ARMdefsd.1166:11| :weight 3 :skolemid |2921| :pattern ( (_module.__default.stateTakesIrq (Lit |s#0@@210|)) ($IsGoodHeap $Heap@@218)) ))))
(assert  (=> true (forall ((|s#0@@211| T@U) (|r#0@@52| T@U) ) (!  (=> (and (and (and (= (type |s#0@@211|) DatatypeTypeType) (= (type |r#0@@52|) DatatypeTypeType)) (or (|_module.__default.maybeHandleInterrupt#canCall| |s#0@@211| |r#0@@52|) (and (and ($Is |s#0@@211| Tclass._module.state) ($Is |r#0@@52| Tclass._module.state)) (_module.__default.ValidState |s#0@@211|)))) (and (not (_module.__default.interrupts__enabled |s#0@@211|)) (_module.__default.maybeHandleInterrupt |s#0@@211| |r#0@@52|))) (= |r#0@@52| (_module.__default.takestep |s#0@@211|))) :qid |ARMdefsd.1171:32| :skolemid |2922| :pattern ( (_module.__default.maybeHandleInterrupt |s#0@@211| |r#0@@52|)) ))))
(assert (forall ((|s#0@@212| T@U) (|r#0@@53| T@U) ) (!  (=> (and (and (= (type |s#0@@212|) DatatypeTypeType) (= (type |r#0@@53|) DatatypeTypeType)) (and ($Is |s#0@@212| Tclass._module.state) ($Is |r#0@@53| Tclass._module.state))) (and (=> (|_module.__default.maybeHandleInterrupt#requires| |s#0@@212| |r#0@@53|) (_module.__default.ValidState |s#0@@212|)) (=> (_module.__default.ValidState |s#0@@212|) (|_module.__default.maybeHandleInterrupt#requires| |s#0@@212| |r#0@@53|)))) :qid |ARMdefsd.1171:32| :skolemid |2923| :pattern ( (|_module.__default.maybeHandleInterrupt#requires| |s#0@@212| |r#0@@53|)) )))
(assert  (=> true (forall ((|s#0@@213| T@U) (|r#0@@54| T@U) ) (!  (=> (and (and (= (type |s#0@@213|) DatatypeTypeType) (= (type |r#0@@54|) DatatypeTypeType)) (or (|_module.__default.maybeHandleInterrupt#canCall| |s#0@@213| |r#0@@54|) (and (and ($Is |s#0@@213| Tclass._module.state) ($Is |r#0@@54| Tclass._module.state)) (_module.__default.ValidState |s#0@@213|)))) (and (and (and (|_module.__default.interrupts__enabled#canCall| |s#0@@213|) (=> (not (_module.__default.interrupts__enabled |s#0@@213|)) (|_module.__default.takestep#canCall| |s#0@@213|))) (=> (_module.__default.interrupts__enabled |s#0@@213|) (and (and (|_module.__default.stateTakesFiq#canCall| |s#0@@213|) (=> (_module.__default.stateTakesFiq |s#0@@213|) (and (|_module.__default.reseed__nondet__state#canCall| |s#0@@213|) (|_module.__default.handleInterrupt#canCall| (_module.__default.reseed__nondet__state |s#0@@213|) (Lit |#_module.exception.ExFIQ|) |r#0@@54|)))) (=> (not (_module.__default.stateTakesFiq |s#0@@213|)) (and (and (|_module.__default.stateTakesIrq#canCall| |s#0@@213|) (=> (_module.__default.stateTakesIrq |s#0@@213|) (and (|_module.__default.reseed__nondet__state#canCall| |s#0@@213|) (|_module.__default.handleInterrupt#canCall| (_module.__default.reseed__nondet__state |s#0@@213|) (Lit |#_module.exception.ExIRQ|) |r#0@@54|)))) (=> (not (_module.__default.stateTakesIrq |s#0@@213|)) (and (|_module.__default.reseed__nondet__state#canCall| |s#0@@213|) (|_module.__default.takestep#canCall| (_module.__default.reseed__nondet__state |s#0@@213|))))))))) (and (=> (_module.__default.maybeHandleInterrupt |s#0@@213| |r#0@@54|) (ite  (not (_module.__default.interrupts__enabled |s#0@@213|)) (= |r#0@@54| (_module.__default.takestep |s#0@@213|)) (ite (_module.__default.stateTakesFiq |s#0@@213|) (_module.__default.handleInterrupt (_module.__default.reseed__nondet__state |s#0@@213|) (Lit |#_module.exception.ExFIQ|) |r#0@@54|) (ite (_module.__default.stateTakesIrq |s#0@@213|) (_module.__default.handleInterrupt (_module.__default.reseed__nondet__state |s#0@@213|) (Lit |#_module.exception.ExIRQ|) |r#0@@54|) (= |r#0@@54| (_module.__default.takestep (_module.__default.reseed__nondet__state |s#0@@213|))))))) (=> (ite  (not (_module.__default.interrupts__enabled |s#0@@213|)) (= |r#0@@54| (_module.__default.takestep |s#0@@213|)) (ite (_module.__default.stateTakesFiq |s#0@@213|) (_module.__default.handleInterrupt (_module.__default.reseed__nondet__state |s#0@@213|) (Lit |#_module.exception.ExFIQ|) |r#0@@54|) (ite (_module.__default.stateTakesIrq |s#0@@213|) (_module.__default.handleInterrupt (_module.__default.reseed__nondet__state |s#0@@213|) (Lit |#_module.exception.ExIRQ|) |r#0@@54|) (= |r#0@@54| (_module.__default.takestep (_module.__default.reseed__nondet__state |s#0@@213|)))))) (_module.__default.maybeHandleInterrupt |s#0@@213| |r#0@@54|))))) :qid |ARMdefsd.1171:32| :skolemid |2924| :pattern ( (_module.__default.maybeHandleInterrupt |s#0@@213| |r#0@@54|)) ))))
(assert  (=> true (forall ((|s#0@@214| T@U) (|r#0@@55| T@U) ) (!  (=> (and (and (= (type |s#0@@214|) DatatypeTypeType) (= (type |r#0@@55|) DatatypeTypeType)) (or (|_module.__default.maybeHandleInterrupt#canCall| (Lit |s#0@@214|) (Lit |r#0@@55|)) (and (and ($Is |s#0@@214| Tclass._module.state) ($Is |r#0@@55| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@214|)))))))) (and (and (and (|_module.__default.interrupts__enabled#canCall| (Lit |s#0@@214|)) (=> (not (U_2_bool (Lit (bool_2_U (_module.__default.interrupts__enabled (Lit |s#0@@214|)))))) (|_module.__default.takestep#canCall| (Lit |s#0@@214|)))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.interrupts__enabled (Lit |s#0@@214|))))) (and (and (|_module.__default.stateTakesFiq#canCall| (Lit |s#0@@214|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.stateTakesFiq (Lit |s#0@@214|))))) (and (|_module.__default.reseed__nondet__state#canCall| (Lit |s#0@@214|)) (|_module.__default.handleInterrupt#canCall| (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@214|))) (Lit |#_module.exception.ExFIQ|) (Lit |r#0@@55|))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.__default.stateTakesFiq (Lit |s#0@@214|)))))) (and (and (|_module.__default.stateTakesIrq#canCall| (Lit |s#0@@214|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.stateTakesIrq (Lit |s#0@@214|))))) (and (|_module.__default.reseed__nondet__state#canCall| (Lit |s#0@@214|)) (|_module.__default.handleInterrupt#canCall| (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@214|))) (Lit |#_module.exception.ExIRQ|) (Lit |r#0@@55|))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.__default.stateTakesIrq (Lit |s#0@@214|)))))) (and (|_module.__default.reseed__nondet__state#canCall| (Lit |s#0@@214|)) (|_module.__default.takestep#canCall| (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@214|))))))))))) (and (=> (_module.__default.maybeHandleInterrupt (Lit |s#0@@214|) (Lit |r#0@@55|)) (ite  (not (U_2_bool (Lit (bool_2_U (_module.__default.interrupts__enabled (Lit |s#0@@214|)))))) (= (Lit |r#0@@55|) (Lit (_module.__default.takestep (Lit |s#0@@214|)))) (ite (_module.__default.stateTakesFiq (Lit |s#0@@214|)) (_module.__default.handleInterrupt (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@214|))) (Lit |#_module.exception.ExFIQ|) (Lit |r#0@@55|)) (ite (_module.__default.stateTakesIrq (Lit |s#0@@214|)) (_module.__default.handleInterrupt (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@214|))) (Lit |#_module.exception.ExIRQ|) (Lit |r#0@@55|)) (= (Lit |r#0@@55|) (Lit (_module.__default.takestep (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@214|)))))))))) (=> (ite  (not (U_2_bool (Lit (bool_2_U (_module.__default.interrupts__enabled (Lit |s#0@@214|)))))) (= (Lit |r#0@@55|) (Lit (_module.__default.takestep (Lit |s#0@@214|)))) (ite (_module.__default.stateTakesFiq (Lit |s#0@@214|)) (_module.__default.handleInterrupt (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@214|))) (Lit |#_module.exception.ExFIQ|) (Lit |r#0@@55|)) (ite (_module.__default.stateTakesIrq (Lit |s#0@@214|)) (_module.__default.handleInterrupt (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@214|))) (Lit |#_module.exception.ExIRQ|) (Lit |r#0@@55|)) (= (Lit |r#0@@55|) (Lit (_module.__default.takestep (Lit (_module.__default.reseed__nondet__state (Lit |s#0@@214|))))))))) (_module.__default.maybeHandleInterrupt (Lit |s#0@@214|) (Lit |r#0@@55|)))))) :qid |ARMdefsd.1171:32| :weight 3 :skolemid |2925| :pattern ( (_module.__default.maybeHandleInterrupt (Lit |s#0@@214|) (Lit |r#0@@55|))) ))))
(assert  (=> true (forall ((|ins#0@@3| T@U) (|s#0@@215| T@U) (|r#0@@56| T@U) ) (!  (=> (and (and (and (= (type |ins#0@@3|) DatatypeTypeType) (= (type |s#0@@215|) DatatypeTypeType)) (= (type |r#0@@56|) DatatypeTypeType)) (or (|_module.__default.evalIns_k#canCall| |ins#0@@3| |s#0@@215| |r#0@@56|) (and (and ($Is |ins#0@@3| Tclass._module.ins) ($Is |s#0@@215| Tclass._module.state)) ($Is |r#0@@56| Tclass._module.state)))) true) :qid |ARMdefsd.1181:20| :skolemid |2926| :pattern ( (_module.__default.evalIns_k |ins#0@@3| |s#0@@215| |r#0@@56|)) ))))
(assert (forall (($Heap@@219 T@U) (|ins#0@@4| T@U) (|s#0@@216| T@U) (|r#0@@57| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@219) (MapType1Type refType)) (= (type |ins#0@@4|) DatatypeTypeType)) (= (type |s#0@@216|) DatatypeTypeType)) (= (type |r#0@@57|) DatatypeTypeType)) (and (and (and ($IsGoodHeap $Heap@@219) ($Is |ins#0@@4| Tclass._module.ins)) ($Is |s#0@@216| Tclass._module.state)) ($Is |r#0@@57| Tclass._module.state))) (and (=> (|_module.__default.evalIns_k#requires| |ins#0@@4| |s#0@@216| |r#0@@57|) true) (=> true (|_module.__default.evalIns_k#requires| |ins#0@@4| |s#0@@216| |r#0@@57|)))) :qid |ARMdefsd.1181:11| :skolemid |2927| :pattern ( (|_module.__default.evalIns_k#requires| |ins#0@@4| |s#0@@216| |r#0@@57|) ($IsGoodHeap $Heap@@219)) )))
(assert  (and (= (type StartFuel__module._default.UpdateTopBits) LayerTypeType) (= (type StartFuel__module._default.evalMOVSPCLRUC) LayerTypeType)))
(assert  (=> true (forall (($Heap@@220 T@U) (|ins#0@@5| T@U) (|s#0@@217| T@U) (|r#0@@58| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@220) (MapType1Type refType)) (= (type |ins#0@@5|) DatatypeTypeType)) (= (type |s#0@@217|) DatatypeTypeType)) (= (type |r#0@@58|) DatatypeTypeType)) (or (|_module.__default.evalIns_k#canCall| |ins#0@@5| |s#0@@217| |r#0@@58|) (and (and (and ($IsGoodHeap $Heap@@220) ($Is |ins#0@@5| Tclass._module.ins)) ($Is |s#0@@217| Tclass._module.state)) ($Is |r#0@@58| Tclass._module.state)))) (and (and (and (and (_module.state.State_q |s#0@@217|) (=> (_module.state.ok |s#0@@217|) (|_module.__default.ValidInstruction#canCall| |s#0@@217| |ins#0@@5|))) (=> (or (not (_module.state.ok |s#0@@217|)) (not (_module.__default.ValidInstruction |s#0@@217| |ins#0@@5|))) (_module.state.State_q |r#0@@58|))) (=> (not (or (not (_module.state.ok |s#0@@217|)) (not (_module.__default.ValidInstruction |s#0@@217| |ins#0@@5|)))) (and (=> (_module.ins.ADD_q |ins#0@@5|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src1ADD |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src2ADD |ins#0@@5|))) (|_module.__default.TruncateWord#canCall| (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1ADD |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2ADD |ins#0@@5|))))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstADD |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1ADD |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2ADD |ins#0@@5|)))) |r#0@@58|))) (=> (not (_module.ins.ADD_q |ins#0@@5|)) (and (=> (_module.ins.SUB_q |ins#0@@5|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src1SUB |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src2SUB |ins#0@@5|))) (|_module.__default.TruncateWord#canCall| (INTERNAL_sub_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1SUB |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2SUB |ins#0@@5|))))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstSUB |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_sub_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1SUB |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2SUB |ins#0@@5|)))) |r#0@@58|))) (=> (not (_module.ins.SUB_q |ins#0@@5|)) (and (=> (_module.ins.MUL_q |ins#0@@5|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src1MUL |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src2MUL |ins#0@@5|))) (|_module.__default.TruncateWord#canCall| (INTERNAL_mul_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1MUL |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2MUL |ins#0@@5|))))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstMUL |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_mul_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1MUL |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2MUL |ins#0@@5|)))) |r#0@@58|))) (=> (not (_module.ins.MUL_q |ins#0@@5|)) (and (=> (_module.ins.UDIV_q |ins#0@@5|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src1DIV |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src2DIV |ins#0@@5|))) (|_module.__default.TruncateWord#canCall| (INTERNAL_div_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1DIV |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2DIV |ins#0@@5|))))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstDIV |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_div_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1DIV |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2DIV |ins#0@@5|)))) |r#0@@58|))) (=> (not (_module.ins.UDIV_q |ins#0@@5|)) (and (=> (_module.ins.AND_q |ins#0@@5|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src1AND |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src2AND |ins#0@@5|))) (|_module.__default.BitwiseAnd#canCall| (_module.__default.OperandContents |s#0@@217| (_module.ins.src1AND |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2AND |ins#0@@5|)))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstAND |ins#0@@5|) (_module.__default.BitwiseAnd (_module.__default.OperandContents |s#0@@217| (_module.ins.src1AND |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2AND |ins#0@@5|))) |r#0@@58|))) (=> (not (_module.ins.AND_q |ins#0@@5|)) (and (=> (_module.ins.ORR_q |ins#0@@5|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src1OR |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src2OR |ins#0@@5|))) (|_module.__default.BitwiseOr#canCall| (_module.__default.OperandContents |s#0@@217| (_module.ins.src1OR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2OR |ins#0@@5|)))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstOR |ins#0@@5|) (_module.__default.BitwiseOr (_module.__default.OperandContents |s#0@@217| (_module.ins.src1OR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2OR |ins#0@@5|))) |r#0@@58|))) (=> (not (_module.ins.ORR_q |ins#0@@5|)) (and (=> (_module.ins.EOR_q |ins#0@@5|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src1EOR |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src2EOR |ins#0@@5|))) (|_module.__default.BitwiseXor#canCall| (_module.__default.OperandContents |s#0@@217| (_module.ins.src1EOR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2EOR |ins#0@@5|)))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstEOR |ins#0@@5|) (_module.__default.BitwiseXor (_module.__default.OperandContents |s#0@@217| (_module.ins.src1EOR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2EOR |ins#0@@5|))) |r#0@@58|))) (=> (not (_module.ins.EOR_q |ins#0@@5|)) (and (=> (_module.ins.LSL_q |ins#0@@5|) (and (=> (not (and (_module.operand.OConst_q (_module.ins.src2LSL |ins#0@@5|)) (and (INTERNAL_le_boogie 0 (_module.operand.n (_module.ins.src2LSL |ins#0@@5|))) (INTERNAL_lt_boogie (_module.operand.n (_module.ins.src2LSL |ins#0@@5|)) 32)))) (_module.state.State_q |r#0@@58|)) (=> (and (_module.operand.OConst_q (_module.ins.src2LSL |ins#0@@5|)) (and (INTERNAL_le_boogie 0 (_module.operand.n (_module.ins.src2LSL |ins#0@@5|))) (INTERNAL_lt_boogie (_module.operand.n (_module.ins.src2LSL |ins#0@@5|)) 32))) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src1LSL |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src2LSL |ins#0@@5|))) (|_module.__default.LeftShift#canCall| (_module.__default.OperandContents |s#0@@217| (_module.ins.src1LSL |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2LSL |ins#0@@5|)))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstLSL |ins#0@@5|) (_module.__default.LeftShift (_module.__default.OperandContents |s#0@@217| (_module.ins.src1LSL |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2LSL |ins#0@@5|))) |r#0@@58|))))) (=> (not (_module.ins.LSL_q |ins#0@@5|)) (and (=> (_module.ins.LSR_q |ins#0@@5|) (and (=> (not (and (_module.operand.OConst_q (_module.ins.src2LSR |ins#0@@5|)) (and (INTERNAL_le_boogie 0 (_module.operand.n (_module.ins.src2LSR |ins#0@@5|))) (INTERNAL_lt_boogie (_module.operand.n (_module.ins.src2LSR |ins#0@@5|)) 32)))) (_module.state.State_q |r#0@@58|)) (=> (and (_module.operand.OConst_q (_module.ins.src2LSR |ins#0@@5|)) (and (INTERNAL_le_boogie 0 (_module.operand.n (_module.ins.src2LSR |ins#0@@5|))) (INTERNAL_lt_boogie (_module.operand.n (_module.ins.src2LSR |ins#0@@5|)) 32))) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src1LSR |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.src2LSR |ins#0@@5|))) (|_module.__default.RightShift#canCall| (_module.__default.OperandContents |s#0@@217| (_module.ins.src1LSR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2LSR |ins#0@@5|)))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstLSR |ins#0@@5|) (_module.__default.RightShift (_module.__default.OperandContents |s#0@@217| (_module.ins.src1LSR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2LSR |ins#0@@5|))) |r#0@@58|))))) (=> (not (_module.ins.LSR_q |ins#0@@5|)) (and (=> (_module.ins.REV_q |ins#0@@5|) (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.srcREV |ins#0@@5|)) (|_module.__default.bswap32#canCall| (_module.__default.OperandContents |s#0@@217| (_module.ins.srcREV |ins#0@@5|)))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstREV |ins#0@@5|) (_module.__default.bswap32 (_module.__default.OperandContents |s#0@@217| (_module.ins.srcREV |ins#0@@5|))) |r#0@@58|))) (=> (not (_module.ins.REV_q |ins#0@@5|)) (and (=> (_module.ins.MVN_q |ins#0@@5|) (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.srcMVN |ins#0@@5|)) (|_module.__default.BitwiseNot#canCall| (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMVN |ins#0@@5|)))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstMVN |ins#0@@5|) (_module.__default.BitwiseNot (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMVN |ins#0@@5|))) |r#0@@58|))) (=> (not (_module.ins.MVN_q |ins#0@@5|)) (and (=> (_module.ins.LDR_q |ins#0@@5|) (and (and (and (_module.state.State_q |s#0@@217|) (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.baseLDR |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.ofsLDR |ins#0@@5|)))) (|_module.__default.MemContents#canCall| (_module.state.m |s#0@@217|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseLDR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR |ins#0@@5|))))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.rdLDR |ins#0@@5|) (_module.__default.MemContents (_module.state.m |s#0@@217|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseLDR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR |ins#0@@5|)))) |r#0@@58|))) (=> (not (_module.ins.LDR_q |ins#0@@5|)) (and (=> (_module.ins.LDR__global_q |ins#0@@5|) (and (and (and (_module.state.State_q |s#0@@217|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.baseLDR__global |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.ofsLDR__global |ins#0@@5|))) (|_module.__default.AddressOfGlobal#canCall| (_module.ins.globalLDR |ins#0@@5|))) (|_module.__default.WordAlignedSub#canCall| (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseLDR__global |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__global |ins#0@@5|))) (_module.__default.AddressOfGlobal (_module.ins.globalLDR |ins#0@@5|))))) (|_module.__default.GlobalWord#canCall| (_module.state.m |s#0@@217|) (_module.ins.globalLDR |ins#0@@5|) (_module.__default.WordAlignedSub (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseLDR__global |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__global |ins#0@@5|))) (_module.__default.AddressOfGlobal (_module.ins.globalLDR |ins#0@@5|))))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.rdLDR__global |ins#0@@5|) (_module.__default.GlobalWord (_module.state.m |s#0@@217|) (_module.ins.globalLDR |ins#0@@5|) (_module.__default.WordAlignedSub (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseLDR__global |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__global |ins#0@@5|))) (_module.__default.AddressOfGlobal (_module.ins.globalLDR |ins#0@@5|)))) |r#0@@58|))) (=> (not (_module.ins.LDR__global_q |ins#0@@5|)) (and (=> (_module.ins.LDR__reloc_q |ins#0@@5|) (and (|_module.__default.AddressOfGlobal#canCall| (_module.ins.symLDR__reloc |ins#0@@5|)) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.rdLDR__reloc |ins#0@@5|) (_module.__default.AddressOfGlobal (_module.ins.symLDR__reloc |ins#0@@5|)) |r#0@@58|))) (=> (not (_module.ins.LDR__reloc_q |ins#0@@5|)) (and (=> (_module.ins.LDR__rng_q |ins#0@@5|) (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|)) (|_module.__default.RngReadState#canCall| |s#0@@217| (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|)))) (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|)) (|_module.__default.RngReadData#canCall| |s#0@@217| (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|)))) (|_module.__default.evalUpdate#canCall| (_module.__default.RngReadState |s#0@@217| (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|))) (_module.ins.rdLDR__rng |ins#0@@5|) (_module.__default.RngReadData |s#0@@217| (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|))) |r#0@@58|)))) (=> (not (_module.ins.LDR__rng_q |ins#0@@5|)) (and (=> (_module.ins.STR_q |ins#0@@5|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.baseSTR |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.ofsSTR |ins#0@@5|))) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.rdSTR |ins#0@@5|))) (|_module.__default.evalMemUpdate#canCall| |s#0@@217| (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseSTR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsSTR |ins#0@@5|))) (_module.__default.OperandContents |s#0@@217| (_module.ins.rdSTR |ins#0@@5|)) |r#0@@58|))) (=> (not (_module.ins.STR_q |ins#0@@5|)) (and (=> (_module.ins.STR__global_q |ins#0@@5|) (and (and (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.baseSTR__global |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.ofsSTR__global |ins#0@@5|))) (|_module.__default.AddressOfGlobal#canCall| (_module.ins.globalSTR |ins#0@@5|))) (|_module.__default.WordAlignedSub#canCall| (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseSTR__global |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsSTR__global |ins#0@@5|))) (_module.__default.AddressOfGlobal (_module.ins.globalSTR |ins#0@@5|)))) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.rdSTRR__global |ins#0@@5|))) (|_module.__default.evalGlobalUpdate#canCall| |s#0@@217| (_module.ins.globalSTR |ins#0@@5|) (_module.__default.WordAlignedSub (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseSTR__global |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsSTR__global |ins#0@@5|))) (_module.__default.AddressOfGlobal (_module.ins.globalSTR |ins#0@@5|))) (_module.__default.OperandContents |s#0@@217| (_module.ins.rdSTRR__global |ins#0@@5|)) |r#0@@58|))) (=> (not (_module.ins.STR__global_q |ins#0@@5|)) (and (=> (_module.ins.MOV_q |ins#0@@5|) (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.srcMOV |ins#0@@5|)) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstMOV |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOV |ins#0@@5|)) |r#0@@58|))) (=> (not (_module.ins.MOV_q |ins#0@@5|)) (and (=> (_module.ins.MOVW_q |ins#0@@5|) (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.srcMOVW |ins#0@@5|)) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstMOVW |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOVW |ins#0@@5|)) |r#0@@58|))) (=> (not (_module.ins.MOVW_q |ins#0@@5|)) (and (=> (_module.ins.MOVT_q |ins#0@@5|) (and (and (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.dstMOVT |ins#0@@5|)) (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.srcMOVT |ins#0@@5|))) (|_module.__default.UpdateTopBits#canCall| (_module.__default.OperandContents |s#0@@217| (_module.ins.dstMOVT |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOVT |ins#0@@5|)))) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstMOVT |ins#0@@5|) (_module.__default.UpdateTopBits StartFuel__module._default.UpdateTopBits (_module.__default.OperandContents |s#0@@217| (_module.ins.dstMOVT |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOVT |ins#0@@5|))) |r#0@@58|))) (=> (not (_module.ins.MOVT_q |ins#0@@5|)) (and (=> (_module.ins.MRS_q |ins#0@@5|) (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.srcMRS |ins#0@@5|)) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstMRS |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMRS |ins#0@@5|)) |r#0@@58|))) (=> (not (_module.ins.MRS_q |ins#0@@5|)) (and (=> (_module.ins.MSR_q |ins#0@@5|) (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.srcMSR |ins#0@@5|)) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstMSR |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMSR |ins#0@@5|)) |r#0@@58|))) (=> (not (_module.ins.MSR_q |ins#0@@5|)) (and (=> (_module.ins.MRC_q |ins#0@@5|) (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.srcMRC |ins#0@@5|)) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstMRC |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMRC |ins#0@@5|)) |r#0@@58|))) (=> (not (_module.ins.MRC_q |ins#0@@5|)) (and (=> (_module.ins.MCR_q |ins#0@@5|) (and (|_module.__default.OperandContents#canCall| |s#0@@217| (_module.ins.srcMCR |ins#0@@5|)) (|_module.__default.evalUpdate#canCall| |s#0@@217| (_module.ins.dstMCR |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMCR |ins#0@@5|)) |r#0@@58|))) (=> (not (_module.ins.MCR_q |ins#0@@5|)) (and (=> (_module.ins.CPSID__IAF_q |ins#0@@5|) (|_module.__default.evalCPSID__IAF#canCall| |s#0@@217| (_module.operand.n (_module.ins.mod |ins#0@@5|)) |r#0@@58|)) (=> (not (_module.ins.CPSID__IAF_q |ins#0@@5|)) (|_module.__default.evalMOVSPCLRUC#canCall| |s#0@@217| |r#0@@58|))))))))))))))))))))))))))))))))))))))))))))))))))))) (and (=> (_module.__default.evalIns_k |ins#0@@5| |s#0@@217| |r#0@@58|) (ite  (or (not (_module.state.ok |s#0@@217|)) (not (_module.__default.ValidInstruction |s#0@@217| |ins#0@@5|)))  (not (_module.state.ok |r#0@@58|)) (ite (_module.ins.ADD_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstADD |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1ADD |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2ADD |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.SUB_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstSUB |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_sub_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1SUB |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2SUB |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.MUL_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMUL |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_mul_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1MUL |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2MUL |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.UDIV_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstDIV |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_div_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1DIV |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2DIV |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.AND_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstAND |ins#0@@5|) (_module.__default.BitwiseAnd (_module.__default.OperandContents |s#0@@217| (_module.ins.src1AND |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2AND |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.ORR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstOR |ins#0@@5|) (_module.__default.BitwiseOr (_module.__default.OperandContents |s#0@@217| (_module.ins.src1OR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2OR |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.EOR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstEOR |ins#0@@5|) (_module.__default.BitwiseXor (_module.__default.OperandContents |s#0@@217| (_module.ins.src1EOR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2EOR |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.LSL_q |ins#0@@5|) (ite  (not (and (_module.operand.OConst_q (_module.ins.src2LSL |ins#0@@5|)) (and (INTERNAL_le_boogie 0 (_module.operand.n (_module.ins.src2LSL |ins#0@@5|))) (INTERNAL_lt_boogie (_module.operand.n (_module.ins.src2LSL |ins#0@@5|)) 32))))  (not (_module.state.ok |r#0@@58|)) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstLSL |ins#0@@5|) (_module.__default.LeftShift (_module.__default.OperandContents |s#0@@217| (_module.ins.src1LSL |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2LSL |ins#0@@5|))) |r#0@@58|)) (ite (_module.ins.LSR_q |ins#0@@5|) (ite  (not (and (_module.operand.OConst_q (_module.ins.src2LSR |ins#0@@5|)) (and (INTERNAL_le_boogie 0 (_module.operand.n (_module.ins.src2LSR |ins#0@@5|))) (INTERNAL_lt_boogie (_module.operand.n (_module.ins.src2LSR |ins#0@@5|)) 32))))  (not (_module.state.ok |r#0@@58|)) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstLSR |ins#0@@5|) (_module.__default.RightShift (_module.__default.OperandContents |s#0@@217| (_module.ins.src1LSR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2LSR |ins#0@@5|))) |r#0@@58|)) (ite (_module.ins.REV_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstREV |ins#0@@5|) (_module.__default.bswap32 (_module.__default.OperandContents |s#0@@217| (_module.ins.srcREV |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.MVN_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMVN |ins#0@@5|) (_module.__default.BitwiseNot (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMVN |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.LDR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.rdLDR |ins#0@@5|) (_module.__default.MemContents (_module.state.m |s#0@@217|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseLDR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.LDR__global_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.rdLDR__global |ins#0@@5|) (_module.__default.GlobalWord (_module.state.m |s#0@@217|) (_module.ins.globalLDR |ins#0@@5|) (_module.__default.WordAlignedSub (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseLDR__global |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__global |ins#0@@5|))) (_module.__default.AddressOfGlobal (_module.ins.globalLDR |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.LDR__reloc_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.rdLDR__reloc |ins#0@@5|) (_module.__default.AddressOfGlobal (_module.ins.symLDR__reloc |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.LDR__rng_q |ins#0@@5|) (_module.__default.evalUpdate (_module.__default.RngReadState |s#0@@217| (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|))) (_module.ins.rdLDR__rng |ins#0@@5|) (_module.__default.RngReadData |s#0@@217| (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.STR_q |ins#0@@5|) (_module.__default.evalMemUpdate |s#0@@217| (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseSTR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsSTR |ins#0@@5|))) (_module.__default.OperandContents |s#0@@217| (_module.ins.rdSTR |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.STR__global_q |ins#0@@5|) (_module.__default.evalGlobalUpdate |s#0@@217| (_module.ins.globalSTR |ins#0@@5|) (_module.__default.WordAlignedSub (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseSTR__global |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsSTR__global |ins#0@@5|))) (_module.__default.AddressOfGlobal (_module.ins.globalSTR |ins#0@@5|))) (_module.__default.OperandContents |s#0@@217| (_module.ins.rdSTRR__global |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MOV_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMOV |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOV |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MOVW_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMOVW |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOVW |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MOVT_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMOVT |ins#0@@5|) (_module.__default.UpdateTopBits StartFuel__module._default.UpdateTopBits (_module.__default.OperandContents |s#0@@217| (_module.ins.dstMOVT |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOVT |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.MRS_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMRS |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMRS |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MSR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMSR |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMSR |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MRC_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMRC |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMRC |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MCR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMCR |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMCR |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.CPSID__IAF_q |ins#0@@5|) (_module.__default.evalCPSID__IAF |s#0@@217| (_module.operand.n (_module.ins.mod |ins#0@@5|)) |r#0@@58|) (_module.__default.evalMOVSPCLRUC StartFuel__module._default.evalMOVSPCLRUC |s#0@@217| |r#0@@58|)))))))))))))))))))))))))))) (=> (ite  (or (not (_module.state.ok |s#0@@217|)) (not (_module.__default.ValidInstruction |s#0@@217| |ins#0@@5|)))  (not (_module.state.ok |r#0@@58|)) (ite (_module.ins.ADD_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstADD |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1ADD |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2ADD |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.SUB_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstSUB |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_sub_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1SUB |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2SUB |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.MUL_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMUL |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_mul_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1MUL |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2MUL |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.UDIV_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstDIV |ins#0@@5|) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (INTERNAL_div_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.src1DIV |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2DIV |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.AND_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstAND |ins#0@@5|) (_module.__default.BitwiseAnd (_module.__default.OperandContents |s#0@@217| (_module.ins.src1AND |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2AND |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.ORR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstOR |ins#0@@5|) (_module.__default.BitwiseOr (_module.__default.OperandContents |s#0@@217| (_module.ins.src1OR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2OR |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.EOR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstEOR |ins#0@@5|) (_module.__default.BitwiseXor (_module.__default.OperandContents |s#0@@217| (_module.ins.src1EOR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2EOR |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.LSL_q |ins#0@@5|) (ite  (not (and (_module.operand.OConst_q (_module.ins.src2LSL |ins#0@@5|)) (and (INTERNAL_le_boogie 0 (_module.operand.n (_module.ins.src2LSL |ins#0@@5|))) (INTERNAL_lt_boogie (_module.operand.n (_module.ins.src2LSL |ins#0@@5|)) 32))))  (not (_module.state.ok |r#0@@58|)) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstLSL |ins#0@@5|) (_module.__default.LeftShift (_module.__default.OperandContents |s#0@@217| (_module.ins.src1LSL |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2LSL |ins#0@@5|))) |r#0@@58|)) (ite (_module.ins.LSR_q |ins#0@@5|) (ite  (not (and (_module.operand.OConst_q (_module.ins.src2LSR |ins#0@@5|)) (and (INTERNAL_le_boogie 0 (_module.operand.n (_module.ins.src2LSR |ins#0@@5|))) (INTERNAL_lt_boogie (_module.operand.n (_module.ins.src2LSR |ins#0@@5|)) 32))))  (not (_module.state.ok |r#0@@58|)) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstLSR |ins#0@@5|) (_module.__default.RightShift (_module.__default.OperandContents |s#0@@217| (_module.ins.src1LSR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.src2LSR |ins#0@@5|))) |r#0@@58|)) (ite (_module.ins.REV_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstREV |ins#0@@5|) (_module.__default.bswap32 (_module.__default.OperandContents |s#0@@217| (_module.ins.srcREV |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.MVN_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMVN |ins#0@@5|) (_module.__default.BitwiseNot (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMVN |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.LDR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.rdLDR |ins#0@@5|) (_module.__default.MemContents (_module.state.m |s#0@@217|) (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseLDR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.LDR__global_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.rdLDR__global |ins#0@@5|) (_module.__default.GlobalWord (_module.state.m |s#0@@217|) (_module.ins.globalLDR |ins#0@@5|) (_module.__default.WordAlignedSub (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseLDR__global |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__global |ins#0@@5|))) (_module.__default.AddressOfGlobal (_module.ins.globalLDR |ins#0@@5|)))) |r#0@@58|) (ite (_module.ins.LDR__reloc_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.rdLDR__reloc |ins#0@@5|) (_module.__default.AddressOfGlobal (_module.ins.symLDR__reloc |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.LDR__rng_q |ins#0@@5|) (_module.__default.evalUpdate (_module.__default.RngReadState |s#0@@217| (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|))) (_module.ins.rdLDR__rng |ins#0@@5|) (_module.__default.RngReadData |s#0@@217| (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsLDR__rng |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.STR_q |ins#0@@5|) (_module.__default.evalMemUpdate |s#0@@217| (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseSTR |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsSTR |ins#0@@5|))) (_module.__default.OperandContents |s#0@@217| (_module.ins.rdSTR |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.STR__global_q |ins#0@@5|) (_module.__default.evalGlobalUpdate |s#0@@217| (_module.ins.globalSTR |ins#0@@5|) (_module.__default.WordAlignedSub (INTERNAL_add_boogie (_module.__default.OperandContents |s#0@@217| (_module.ins.baseSTR__global |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.ofsSTR__global |ins#0@@5|))) (_module.__default.AddressOfGlobal (_module.ins.globalSTR |ins#0@@5|))) (_module.__default.OperandContents |s#0@@217| (_module.ins.rdSTRR__global |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MOV_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMOV |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOV |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MOVW_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMOVW |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOVW |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MOVT_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMOVT |ins#0@@5|) (_module.__default.UpdateTopBits StartFuel__module._default.UpdateTopBits (_module.__default.OperandContents |s#0@@217| (_module.ins.dstMOVT |ins#0@@5|)) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMOVT |ins#0@@5|))) |r#0@@58|) (ite (_module.ins.MRS_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMRS |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMRS |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MSR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMSR |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMSR |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MRC_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMRC |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMRC |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.MCR_q |ins#0@@5|) (_module.__default.evalUpdate |s#0@@217| (_module.ins.dstMCR |ins#0@@5|) (_module.__default.OperandContents |s#0@@217| (_module.ins.srcMCR |ins#0@@5|)) |r#0@@58|) (ite (_module.ins.CPSID__IAF_q |ins#0@@5|) (_module.__default.evalCPSID__IAF |s#0@@217| (_module.operand.n (_module.ins.mod |ins#0@@5|)) |r#0@@58|) (_module.__default.evalMOVSPCLRUC StartFuel__module._default.evalMOVSPCLRUC |s#0@@217| |r#0@@58|))))))))))))))))))))))))))) (_module.__default.evalIns_k |ins#0@@5| |s#0@@217| |r#0@@58|))))) :qid |ARMdefsd.1181:11| :skolemid |2928| :pattern ( (_module.__default.evalIns_k |ins#0@@5| |s#0@@217| |r#0@@58|) ($IsGoodHeap $Heap@@220)) ))))
(assert  (=> true (forall (($Heap@@221 T@U) (|ins#0@@6| T@U) (|s#0@@218| T@U) (|r#0@@59| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@221) (MapType1Type refType)) (= (type |ins#0@@6|) DatatypeTypeType)) (= (type |s#0@@218|) DatatypeTypeType)) (= (type |r#0@@59|) DatatypeTypeType)) (or (|_module.__default.evalIns_k#canCall| (Lit |ins#0@@6|) (Lit |s#0@@218|) (Lit |r#0@@59|)) (and (and (and ($IsGoodHeap $Heap@@221) ($Is |ins#0@@6| Tclass._module.ins)) ($Is |s#0@@218| Tclass._module.state)) ($Is |r#0@@59| Tclass._module.state)))) (and (and (and (and (_module.state.State_q (Lit |s#0@@218|)) (=> (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@218|))))) (|_module.__default.ValidInstruction#canCall| (Lit |s#0@@218|) (Lit |ins#0@@6|)))) (=> (or (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@218|)))))) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidInstruction (Lit |s#0@@218|) (Lit |ins#0@@6|))))))) (_module.state.State_q (Lit |r#0@@59|)))) (=> (not (or (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@218|)))))) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidInstruction (Lit |s#0@@218|) (Lit |ins#0@@6|)))))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.ADD_q (Lit |ins#0@@6|))))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src1ADD (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src2ADD (Lit |ins#0@@6|))))) (|_module.__default.TruncateWord#canCall| (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1ADD (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2ADD (Lit |ins#0@@6|)))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstADD (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1ADD (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2ADD (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.ADD_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.SUB_q (Lit |ins#0@@6|))))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src1SUB (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src2SUB (Lit |ins#0@@6|))))) (|_module.__default.TruncateWord#canCall| (LitInt (INTERNAL_sub_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1SUB (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2SUB (Lit |ins#0@@6|)))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstSUB (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_sub_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1SUB (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2SUB (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.SUB_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MUL_q (Lit |ins#0@@6|))))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src1MUL (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src2MUL (Lit |ins#0@@6|))))) (|_module.__default.TruncateWord#canCall| (LitInt (INTERNAL_mul_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1MUL (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2MUL (Lit |ins#0@@6|)))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMUL (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_mul_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1MUL (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2MUL (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MUL_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.UDIV_q (Lit |ins#0@@6|))))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src1DIV (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src2DIV (Lit |ins#0@@6|))))) (|_module.__default.TruncateWord#canCall| (LitInt (INTERNAL_div_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1DIV (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2DIV (Lit |ins#0@@6|)))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstDIV (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_div_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1DIV (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2DIV (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.UDIV_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.AND_q (Lit |ins#0@@6|))))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src1AND (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src2AND (Lit |ins#0@@6|))))) (|_module.__default.BitwiseAnd#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1AND (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2AND (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstAND (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseAnd (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1AND (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2AND (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.AND_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.ORR_q (Lit |ins#0@@6|))))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src1OR (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src2OR (Lit |ins#0@@6|))))) (|_module.__default.BitwiseOr#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1OR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2OR (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstOR (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseOr (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1OR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2OR (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.ORR_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.EOR_q (Lit |ins#0@@6|))))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src1EOR (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src2EOR (Lit |ins#0@@6|))))) (|_module.__default.BitwiseXor#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1EOR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2EOR (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstEOR (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1EOR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2EOR (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.EOR_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LSL_q (Lit |ins#0@@6|))))) (and (=> (not (and (_module.operand.OConst_q (Lit (_module.ins.src2LSL (Lit |ins#0@@6|)))) (and (INTERNAL_le_boogie 0 (_module.operand.n (Lit (_module.ins.src2LSL (Lit |ins#0@@6|))))) (INTERNAL_lt_boogie (_module.operand.n (Lit (_module.ins.src2LSL (Lit |ins#0@@6|)))) 32)))) (_module.state.State_q (Lit |r#0@@59|))) (=> (and (_module.operand.OConst_q (Lit (_module.ins.src2LSL (Lit |ins#0@@6|)))) (and (INTERNAL_le_boogie 0 (_module.operand.n (Lit (_module.ins.src2LSL (Lit |ins#0@@6|))))) (INTERNAL_lt_boogie (_module.operand.n (Lit (_module.ins.src2LSL (Lit |ins#0@@6|)))) 32))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src1LSL (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src2LSL (Lit |ins#0@@6|))))) (|_module.__default.LeftShift#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1LSL (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2LSL (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstLSL (Lit |ins#0@@6|))) (LitInt (_module.__default.LeftShift (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1LSL (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2LSL (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LSL_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LSR_q (Lit |ins#0@@6|))))) (and (=> (not (and (_module.operand.OConst_q (Lit (_module.ins.src2LSR (Lit |ins#0@@6|)))) (and (INTERNAL_le_boogie 0 (_module.operand.n (Lit (_module.ins.src2LSR (Lit |ins#0@@6|))))) (INTERNAL_lt_boogie (_module.operand.n (Lit (_module.ins.src2LSR (Lit |ins#0@@6|)))) 32)))) (_module.state.State_q (Lit |r#0@@59|))) (=> (and (_module.operand.OConst_q (Lit (_module.ins.src2LSR (Lit |ins#0@@6|)))) (and (INTERNAL_le_boogie 0 (_module.operand.n (Lit (_module.ins.src2LSR (Lit |ins#0@@6|))))) (INTERNAL_lt_boogie (_module.operand.n (Lit (_module.ins.src2LSR (Lit |ins#0@@6|)))) 32))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src1LSR (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.src2LSR (Lit |ins#0@@6|))))) (|_module.__default.RightShift#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1LSR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2LSR (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstLSR (Lit |ins#0@@6|))) (LitInt (_module.__default.RightShift (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1LSR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2LSR (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LSR_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.REV_q (Lit |ins#0@@6|))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.srcREV (Lit |ins#0@@6|)))) (|_module.__default.bswap32#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcREV (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstREV (Lit |ins#0@@6|))) (LitInt (_module.__default.bswap32 (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcREV (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.REV_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MVN_q (Lit |ins#0@@6|))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.srcMVN (Lit |ins#0@@6|)))) (|_module.__default.BitwiseNot#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMVN (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMVN (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseNot (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMVN (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MVN_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LDR_q (Lit |ins#0@@6|))))) (and (and (and (_module.state.State_q (Lit |s#0@@218|)) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.baseLDR (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR (Lit |ins#0@@6|)))))) (|_module.__default.MemContents#canCall| (Lit (_module.state.m (Lit |s#0@@218|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseLDR (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR (Lit |ins#0@@6|)))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.rdLDR (Lit |ins#0@@6|))) (LitInt (_module.__default.MemContents (Lit (_module.state.m (Lit |s#0@@218|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseLDR (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR (Lit |ins#0@@6|)))))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LDR_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LDR__global_q (Lit |ins#0@@6|))))) (and (and (and (_module.state.State_q (Lit |s#0@@218|)) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@6|))))) (|_module.__default.AddressOfGlobal#canCall| (Lit (_module.ins.globalLDR (Lit |ins#0@@6|))))) (|_module.__default.WordAlignedSub#canCall| (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@6|)))))) (_module.__default.AddressOfGlobal (Lit (_module.ins.globalLDR (Lit |ins#0@@6|))))))) (|_module.__default.GlobalWord#canCall| (Lit (_module.state.m (Lit |s#0@@218|))) (Lit (_module.ins.globalLDR (Lit |ins#0@@6|))) (_module.__default.WordAlignedSub (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@6|)))))) (_module.__default.AddressOfGlobal (Lit (_module.ins.globalLDR (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.rdLDR__global (Lit |ins#0@@6|))) (_module.__default.GlobalWord (Lit (_module.state.m (Lit |s#0@@218|))) (Lit (_module.ins.globalLDR (Lit |ins#0@@6|))) (_module.__default.WordAlignedSub (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@6|)))))) (_module.__default.AddressOfGlobal (Lit (_module.ins.globalLDR (Lit |ins#0@@6|)))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LDR__global_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LDR__reloc_q (Lit |ins#0@@6|))))) (and (|_module.__default.AddressOfGlobal#canCall| (Lit (_module.ins.symLDR__reloc (Lit |ins#0@@6|)))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.rdLDR__reloc (Lit |ins#0@@6|))) (_module.__default.AddressOfGlobal (Lit (_module.ins.symLDR__reloc (Lit |ins#0@@6|)))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LDR__reloc_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.LDR__rng_q (Lit |ins#0@@6|))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|)))) (|_module.__default.RngReadState#canCall| (Lit |s#0@@218|) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|))))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|)))) (|_module.__default.RngReadData#canCall| (Lit |s#0@@218|) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit (_module.__default.RngReadState (Lit |s#0@@218|) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|))))))) (Lit (_module.ins.rdLDR__rng (Lit |ins#0@@6|))) (LitInt (_module.__default.RngReadData (Lit |s#0@@218|) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|))))))) (Lit |r#0@@59|))))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.LDR__rng_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.STR_q (Lit |ins#0@@6|))))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.baseSTR (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.ofsSTR (Lit |ins#0@@6|))))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.rdSTR (Lit |ins#0@@6|))))) (|_module.__default.evalMemUpdate#canCall| (Lit |s#0@@218|) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseSTR (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsSTR (Lit |ins#0@@6|)))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.rdSTR (Lit |ins#0@@6|))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.STR_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.STR__global_q (Lit |ins#0@@6|))))) (and (and (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.baseSTR__global (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@6|))))) (|_module.__default.AddressOfGlobal#canCall| (Lit (_module.ins.globalSTR (Lit |ins#0@@6|))))) (|_module.__default.WordAlignedSub#canCall| (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseSTR__global (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@6|)))))) (_module.__default.AddressOfGlobal (Lit (_module.ins.globalSTR (Lit |ins#0@@6|)))))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.rdSTRR__global (Lit |ins#0@@6|))))) (|_module.__default.evalGlobalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.globalSTR (Lit |ins#0@@6|))) (_module.__default.WordAlignedSub (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseSTR__global (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@6|)))))) (_module.__default.AddressOfGlobal (Lit (_module.ins.globalSTR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.rdSTRR__global (Lit |ins#0@@6|))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.STR__global_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MOV_q (Lit |ins#0@@6|))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.srcMOV (Lit |ins#0@@6|)))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMOV (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOV (Lit |ins#0@@6|))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MOV_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MOVW_q (Lit |ins#0@@6|))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.srcMOVW (Lit |ins#0@@6|)))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMOVW (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOVW (Lit |ins#0@@6|))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MOVW_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MOVT_q (Lit |ins#0@@6|))))) (and (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMOVT (Lit |ins#0@@6|)))) (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.srcMOVT (Lit |ins#0@@6|))))) (|_module.__default.UpdateTopBits#canCall| (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.dstMOVT (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOVT (Lit |ins#0@@6|))))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMOVT (Lit |ins#0@@6|))) (_module.__default.UpdateTopBits StartFuel__module._default.UpdateTopBits (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.dstMOVT (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOVT (Lit |ins#0@@6|)))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MOVT_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MRS_q (Lit |ins#0@@6|))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.srcMRS (Lit |ins#0@@6|)))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMRS (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMRS (Lit |ins#0@@6|))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MRS_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MSR_q (Lit |ins#0@@6|))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.srcMSR (Lit |ins#0@@6|)))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMSR (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMSR (Lit |ins#0@@6|))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MSR_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MRC_q (Lit |ins#0@@6|))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.srcMRC (Lit |ins#0@@6|)))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMRC (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMRC (Lit |ins#0@@6|))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MRC_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.MCR_q (Lit |ins#0@@6|))))) (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@218|) (Lit (_module.ins.srcMCR (Lit |ins#0@@6|)))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@218|) (Lit (_module.ins.dstMCR (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMCR (Lit |ins#0@@6|))))) (Lit |r#0@@59|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.MCR_q (Lit |ins#0@@6|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.ins.CPSID__IAF_q (Lit |ins#0@@6|))))) (|_module.__default.evalCPSID__IAF#canCall| (Lit |s#0@@218|) (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@6|))))) (Lit |r#0@@59|))) (=> (not (U_2_bool (Lit (bool_2_U (_module.ins.CPSID__IAF_q (Lit |ins#0@@6|)))))) (|_module.__default.evalMOVSPCLRUC#canCall| (Lit |s#0@@218|) (Lit |r#0@@59|)))))))))))))))))))))))))))))))))))))))))))))))))))))) (and (=> (_module.__default.evalIns_k (Lit |ins#0@@6|) (Lit |s#0@@218|) (Lit |r#0@@59|)) (ite  (or (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@218|)))))) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidInstruction (Lit |s#0@@218|) (Lit |ins#0@@6|)))))))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@59|)))))) (ite (_module.ins.ADD_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstADD (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1ADD (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2ADD (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.SUB_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstSUB (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_sub_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1SUB (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2SUB (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.MUL_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMUL (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_mul_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1MUL (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2MUL (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.UDIV_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstDIV (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_div_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1DIV (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2DIV (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.AND_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstAND (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseAnd (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1AND (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2AND (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.ORR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstOR (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseOr (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1OR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2OR (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.EOR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstEOR (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1EOR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2EOR (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.LSL_q (Lit |ins#0@@6|)) (ite  (not (and (_module.operand.OConst_q (Lit (_module.ins.src2LSL (Lit |ins#0@@6|)))) (and (INTERNAL_le_boogie 0 (_module.operand.n (Lit (_module.ins.src2LSL (Lit |ins#0@@6|))))) (INTERNAL_lt_boogie (_module.operand.n (Lit (_module.ins.src2LSL (Lit |ins#0@@6|)))) 32))))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@59|)))))) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstLSL (Lit |ins#0@@6|))) (LitInt (_module.__default.LeftShift (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1LSL (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2LSL (Lit |ins#0@@6|))))))) (Lit |r#0@@59|))) (ite (_module.ins.LSR_q (Lit |ins#0@@6|)) (ite  (not (and (_module.operand.OConst_q (Lit (_module.ins.src2LSR (Lit |ins#0@@6|)))) (and (INTERNAL_le_boogie 0 (_module.operand.n (Lit (_module.ins.src2LSR (Lit |ins#0@@6|))))) (INTERNAL_lt_boogie (_module.operand.n (Lit (_module.ins.src2LSR (Lit |ins#0@@6|)))) 32))))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@59|)))))) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstLSR (Lit |ins#0@@6|))) (LitInt (_module.__default.RightShift (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1LSR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2LSR (Lit |ins#0@@6|))))))) (Lit |r#0@@59|))) (ite (_module.ins.REV_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstREV (Lit |ins#0@@6|))) (LitInt (_module.__default.bswap32 (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcREV (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.MVN_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMVN (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseNot (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMVN (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.LDR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.rdLDR (Lit |ins#0@@6|))) (LitInt (_module.__default.MemContents (Lit (_module.state.m (Lit |s#0@@218|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseLDR (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR (Lit |ins#0@@6|)))))))) (Lit |r#0@@59|)) (ite (_module.ins.LDR__global_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.rdLDR__global (Lit |ins#0@@6|))) (_module.__default.GlobalWord (Lit (_module.state.m (Lit |s#0@@218|))) (Lit (_module.ins.globalLDR (Lit |ins#0@@6|))) (_module.__default.WordAlignedSub (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@6|)))))) (_module.__default.AddressOfGlobal (Lit (_module.ins.globalLDR (Lit |ins#0@@6|)))))) (Lit |r#0@@59|)) (ite (_module.ins.LDR__reloc_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.rdLDR__reloc (Lit |ins#0@@6|))) (_module.__default.AddressOfGlobal (Lit (_module.ins.symLDR__reloc (Lit |ins#0@@6|)))) (Lit |r#0@@59|)) (ite (_module.ins.LDR__rng_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit (_module.__default.RngReadState (Lit |s#0@@218|) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|))))))) (Lit (_module.ins.rdLDR__rng (Lit |ins#0@@6|))) (LitInt (_module.__default.RngReadData (Lit |s#0@@218|) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.STR_q (Lit |ins#0@@6|)) (_module.__default.evalMemUpdate (Lit |s#0@@218|) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseSTR (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsSTR (Lit |ins#0@@6|)))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.rdSTR (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.STR__global_q (Lit |ins#0@@6|)) (_module.__default.evalGlobalUpdate (Lit |s#0@@218|) (Lit (_module.ins.globalSTR (Lit |ins#0@@6|))) (_module.__default.WordAlignedSub (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseSTR__global (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@6|)))))) (_module.__default.AddressOfGlobal (Lit (_module.ins.globalSTR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.rdSTRR__global (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MOV_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMOV (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOV (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MOVW_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMOVW (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOVW (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MOVT_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMOVT (Lit |ins#0@@6|))) (_module.__default.UpdateTopBits StartFuel__module._default.UpdateTopBits (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.dstMOVT (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOVT (Lit |ins#0@@6|)))))) (Lit |r#0@@59|)) (ite (_module.ins.MRS_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMRS (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMRS (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MSR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMSR (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMSR (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MRC_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMRC (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMRC (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MCR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMCR (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMCR (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.CPSID__IAF_q (Lit |ins#0@@6|)) (_module.__default.evalCPSID__IAF (Lit |s#0@@218|) (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (_module.__default.evalMOVSPCLRUC StartFuel__module._default.evalMOVSPCLRUC (Lit |s#0@@218|) (Lit |r#0@@59|))))))))))))))))))))))))))))) (=> (ite  (or (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@218|)))))) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidInstruction (Lit |s#0@@218|) (Lit |ins#0@@6|)))))))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@59|)))))) (ite (_module.ins.ADD_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstADD (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1ADD (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2ADD (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.SUB_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstSUB (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_sub_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1SUB (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2SUB (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.MUL_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMUL (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_mul_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1MUL (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2MUL (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.UDIV_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstDIV (Lit |ins#0@@6|))) (_module.__default.TruncateWord StartFuel__module._default.TruncateWord (LitInt (INTERNAL_div_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1DIV (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2DIV (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.AND_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstAND (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseAnd (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1AND (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2AND (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.ORR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstOR (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseOr (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1OR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2OR (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.EOR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstEOR (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseXor (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1EOR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2EOR (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.LSL_q (Lit |ins#0@@6|)) (ite  (not (and (_module.operand.OConst_q (Lit (_module.ins.src2LSL (Lit |ins#0@@6|)))) (and (INTERNAL_le_boogie 0 (_module.operand.n (Lit (_module.ins.src2LSL (Lit |ins#0@@6|))))) (INTERNAL_lt_boogie (_module.operand.n (Lit (_module.ins.src2LSL (Lit |ins#0@@6|)))) 32))))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@59|)))))) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstLSL (Lit |ins#0@@6|))) (LitInt (_module.__default.LeftShift (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1LSL (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2LSL (Lit |ins#0@@6|))))))) (Lit |r#0@@59|))) (ite (_module.ins.LSR_q (Lit |ins#0@@6|)) (ite  (not (and (_module.operand.OConst_q (Lit (_module.ins.src2LSR (Lit |ins#0@@6|)))) (and (INTERNAL_le_boogie 0 (_module.operand.n (Lit (_module.ins.src2LSR (Lit |ins#0@@6|))))) (INTERNAL_lt_boogie (_module.operand.n (Lit (_module.ins.src2LSR (Lit |ins#0@@6|)))) 32))))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@59|)))))) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstLSR (Lit |ins#0@@6|))) (LitInt (_module.__default.RightShift (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src1LSR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.src2LSR (Lit |ins#0@@6|))))))) (Lit |r#0@@59|))) (ite (_module.ins.REV_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstREV (Lit |ins#0@@6|))) (LitInt (_module.__default.bswap32 (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcREV (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.MVN_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMVN (Lit |ins#0@@6|))) (LitInt (_module.__default.BitwiseNot (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMVN (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.LDR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.rdLDR (Lit |ins#0@@6|))) (LitInt (_module.__default.MemContents (Lit (_module.state.m (Lit |s#0@@218|))) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseLDR (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR (Lit |ins#0@@6|)))))))) (Lit |r#0@@59|)) (ite (_module.ins.LDR__global_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.rdLDR__global (Lit |ins#0@@6|))) (_module.__default.GlobalWord (Lit (_module.state.m (Lit |s#0@@218|))) (Lit (_module.ins.globalLDR (Lit |ins#0@@6|))) (_module.__default.WordAlignedSub (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseLDR__global (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__global (Lit |ins#0@@6|)))))) (_module.__default.AddressOfGlobal (Lit (_module.ins.globalLDR (Lit |ins#0@@6|)))))) (Lit |r#0@@59|)) (ite (_module.ins.LDR__reloc_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.rdLDR__reloc (Lit |ins#0@@6|))) (_module.__default.AddressOfGlobal (Lit (_module.ins.symLDR__reloc (Lit |ins#0@@6|)))) (Lit |r#0@@59|)) (ite (_module.ins.LDR__rng_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit (_module.__default.RngReadState (Lit |s#0@@218|) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|))))))) (Lit (_module.ins.rdLDR__rng (Lit |ins#0@@6|))) (LitInt (_module.__default.RngReadData (Lit |s#0@@218|) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsLDR__rng (Lit |ins#0@@6|))))))) (Lit |r#0@@59|)) (ite (_module.ins.STR_q (Lit |ins#0@@6|)) (_module.__default.evalMemUpdate (Lit |s#0@@218|) (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseSTR (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsSTR (Lit |ins#0@@6|)))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.rdSTR (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.STR__global_q (Lit |ins#0@@6|)) (_module.__default.evalGlobalUpdate (Lit |s#0@@218|) (Lit (_module.ins.globalSTR (Lit |ins#0@@6|))) (_module.__default.WordAlignedSub (LitInt (INTERNAL_add_boogie (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.baseSTR__global (Lit |ins#0@@6|)))) (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.ofsSTR__global (Lit |ins#0@@6|)))))) (_module.__default.AddressOfGlobal (Lit (_module.ins.globalSTR (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.rdSTRR__global (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MOV_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMOV (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOV (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MOVW_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMOVW (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOVW (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MOVT_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMOVT (Lit |ins#0@@6|))) (_module.__default.UpdateTopBits StartFuel__module._default.UpdateTopBits (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.dstMOVT (Lit |ins#0@@6|))))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMOVT (Lit |ins#0@@6|)))))) (Lit |r#0@@59|)) (ite (_module.ins.MRS_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMRS (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMRS (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MSR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMSR (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMSR (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MRC_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMRC (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMRC (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.MCR_q (Lit |ins#0@@6|)) (_module.__default.evalUpdate (Lit |s#0@@218|) (Lit (_module.ins.dstMCR (Lit |ins#0@@6|))) (LitInt (_module.__default.OperandContents (Lit |s#0@@218|) (Lit (_module.ins.srcMCR (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (ite (_module.ins.CPSID__IAF_q (Lit |ins#0@@6|)) (_module.__default.evalCPSID__IAF (Lit |s#0@@218|) (LitInt (_module.operand.n (Lit (_module.ins.mod (Lit |ins#0@@6|))))) (Lit |r#0@@59|)) (_module.__default.evalMOVSPCLRUC StartFuel__module._default.evalMOVSPCLRUC (Lit |s#0@@218|) (Lit |r#0@@59|)))))))))))))))))))))))))))) (_module.__default.evalIns_k (Lit |ins#0@@6|) (Lit |s#0@@218|) (Lit |r#0@@59|)))))) :qid |ARMdefsd.1181:11| :weight 3 :skolemid |2929| :pattern ( (_module.__default.evalIns_k (Lit |ins#0@@6|) (Lit |s#0@@218|) (Lit |r#0@@59|)) ($IsGoodHeap $Heap@@221)) ))))
(assert  (=> true (forall ((|ins#0@@7| T@U) (|s#0@@219| T@U) (|r#0@@60| T@U) ) (!  (=> (and (and (and (= (type |ins#0@@7|) DatatypeTypeType) (= (type |s#0@@219|) DatatypeTypeType)) (= (type |r#0@@60|) DatatypeTypeType)) (or (|_module.__default.evalIns#canCall| |ins#0@@7| |s#0@@219| |r#0@@60|) (and (and ($Is |ins#0@@7| Tclass._module.ins) ($Is |s#0@@219| Tclass._module.state)) ($Is |r#0@@60| Tclass._module.state)))) true) :qid |ARMdefsd.1242:19| :skolemid |2930| :pattern ( (_module.__default.evalIns |ins#0@@7| |s#0@@219| |r#0@@60|)) ))))
(assert (forall (($Heap@@222 T@U) (|ins#0@@8| T@U) (|s#0@@220| T@U) (|r#0@@61| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@222) (MapType1Type refType)) (= (type |ins#0@@8|) DatatypeTypeType)) (= (type |s#0@@220|) DatatypeTypeType)) (= (type |r#0@@61|) DatatypeTypeType)) (and (and (and ($IsGoodHeap $Heap@@222) ($Is |ins#0@@8| Tclass._module.ins)) ($Is |s#0@@220| Tclass._module.state)) ($Is |r#0@@61| Tclass._module.state))) (and (=> (|_module.__default.evalIns#requires| |ins#0@@8| |s#0@@220| |r#0@@61|) true) (=> true (|_module.__default.evalIns#requires| |ins#0@@8| |s#0@@220| |r#0@@61|)))) :qid |ARMdefsd.1242:11| :skolemid |2931| :pattern ( (|_module.__default.evalIns#requires| |ins#0@@8| |s#0@@220| |r#0@@61|) ($IsGoodHeap $Heap@@222)) )))
(assert  (=> true (forall (($Heap@@223 T@U) (|ins#0@@9| T@U) (|s#0@@221| T@U) (|r#0@@62| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@223) (MapType1Type refType)) (= (type |ins#0@@9|) DatatypeTypeType)) (= (type |s#0@@221|) DatatypeTypeType)) (= (type |r#0@@62|) DatatypeTypeType)) (or (|_module.__default.evalIns#canCall| |ins#0@@9| |s#0@@221| |r#0@@62|) (and (and (and ($IsGoodHeap $Heap@@223) ($Is |ins#0@@9| Tclass._module.ins)) ($Is |s#0@@221| Tclass._module.state)) ($Is |r#0@@62| Tclass._module.state)))) (and (and (and (and (_module.state.State_q |s#0@@221|) (=> (_module.state.ok |s#0@@221|) (|_module.__default.ValidInstruction#canCall| |s#0@@221| |ins#0@@9|))) (=> (or (not (_module.state.ok |s#0@@221|)) (not (_module.__default.ValidInstruction |s#0@@221| |ins#0@@9|))) (_module.state.State_q |r#0@@62|))) (=> (not (or (not (_module.state.ok |s#0@@221|)) (not (_module.__default.ValidInstruction |s#0@@221| |ins#0@@9|)))) (forall ((|s'#0| T@U) ) (!  (=> (and (= (type |s'#0|) DatatypeTypeType) ($Is |s'#0| Tclass._module.state)) (and (|_module.__default.maybeHandleInterrupt#canCall| |s#0@@221| |s'#0|) (=> (_module.__default.maybeHandleInterrupt |s#0@@221| |s'#0|) (|_module.__default.evalIns_k#canCall| |ins#0@@9| |s'#0| |r#0@@62|)))) :qid |ARMdefsd.1245:17| :skolemid |2932| :pattern ( (_module.__default.evalIns_k |ins#0@@9| |s'#0| |r#0@@62|)) :pattern ( (_module.__default.maybeHandleInterrupt |s#0@@221| |s'#0|)) )))) (and (=> (_module.__default.evalIns |ins#0@@9| |s#0@@221| |r#0@@62|) (ite  (or (not (_module.state.ok |s#0@@221|)) (not (_module.__default.ValidInstruction |s#0@@221| |ins#0@@9|)))  (not (_module.state.ok |r#0@@62|)) (exists ((|s'#0@@0| T@U) ) (!  (and (= (type |s'#0@@0|) DatatypeTypeType) (and ($Is |s'#0@@0| Tclass._module.state) (and (_module.__default.maybeHandleInterrupt |s#0@@221| |s'#0@@0|) (_module.__default.evalIns_k |ins#0@@9| |s'#0@@0| |r#0@@62|)))) :qid |ARMdefsd.1245:17| :skolemid |2933| :pattern ( (_module.__default.evalIns_k |ins#0@@9| |s'#0@@0| |r#0@@62|)) :pattern ( (_module.__default.maybeHandleInterrupt |s#0@@221| |s'#0@@0|)) )))) (=> (ite  (or (not (_module.state.ok |s#0@@221|)) (not (_module.__default.ValidInstruction |s#0@@221| |ins#0@@9|)))  (not (_module.state.ok |r#0@@62|)) (exists ((|s'#0@@1| T@U) ) (!  (and (= (type |s'#0@@1|) DatatypeTypeType) (and ($Is |s'#0@@1| Tclass._module.state) (and (_module.__default.maybeHandleInterrupt |s#0@@221| |s'#0@@1|) (_module.__default.evalIns_k |ins#0@@9| |s'#0@@1| |r#0@@62|)))) :qid |ARMdefsd.1245:17| :skolemid |2933| :pattern ( (_module.__default.evalIns_k |ins#0@@9| |s'#0@@1| |r#0@@62|)) :pattern ( (_module.__default.maybeHandleInterrupt |s#0@@221| |s'#0@@1|)) ))) (_module.__default.evalIns |ins#0@@9| |s#0@@221| |r#0@@62|))))) :qid |ARMdefsd.1242:11| :skolemid |2934| :pattern ( (_module.__default.evalIns |ins#0@@9| |s#0@@221| |r#0@@62|) ($IsGoodHeap $Heap@@223)) ))))
(assert  (=> true (forall (($Heap@@224 T@U) (|ins#0@@10| T@U) (|s#0@@222| T@U) (|r#0@@63| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@224) (MapType1Type refType)) (= (type |ins#0@@10|) DatatypeTypeType)) (= (type |s#0@@222|) DatatypeTypeType)) (= (type |r#0@@63|) DatatypeTypeType)) (or (|_module.__default.evalIns#canCall| (Lit |ins#0@@10|) (Lit |s#0@@222|) (Lit |r#0@@63|)) (and (and (and ($IsGoodHeap $Heap@@224) ($Is |ins#0@@10| Tclass._module.ins)) ($Is |s#0@@222| Tclass._module.state)) ($Is |r#0@@63| Tclass._module.state)))) (and (and (and (and (_module.state.State_q (Lit |s#0@@222|)) (=> (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@222|))))) (|_module.__default.ValidInstruction#canCall| (Lit |s#0@@222|) (Lit |ins#0@@10|)))) (=> (or (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@222|)))))) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidInstruction (Lit |s#0@@222|) (Lit |ins#0@@10|))))))) (_module.state.State_q (Lit |r#0@@63|)))) (=> (not (or (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@222|)))))) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidInstruction (Lit |s#0@@222|) (Lit |ins#0@@10|)))))))) (forall ((|s'#1| T@U) ) (!  (=> (and (= (type |s'#1|) DatatypeTypeType) ($Is |s'#1| Tclass._module.state)) (and (|_module.__default.maybeHandleInterrupt#canCall| (Lit |s#0@@222|) |s'#1|) (=> (_module.__default.maybeHandleInterrupt (Lit |s#0@@222|) |s'#1|) (|_module.__default.evalIns_k#canCall| (Lit |ins#0@@10|) |s'#1| (Lit |r#0@@63|))))) :qid |ARMdefsd.1245:17| :skolemid |2935| :pattern ( (_module.__default.evalIns_k |ins#0@@10| |s'#1| |r#0@@63|)) :pattern ( (_module.__default.maybeHandleInterrupt |s#0@@222| |s'#1|)) )))) (and (=> (_module.__default.evalIns (Lit |ins#0@@10|) (Lit |s#0@@222|) (Lit |r#0@@63|)) (ite  (or (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@222|)))))) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidInstruction (Lit |s#0@@222|) (Lit |ins#0@@10|)))))))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@63|)))))) (exists ((|s'#1@@0| T@U) ) (!  (and (= (type |s'#1@@0|) DatatypeTypeType) (and ($Is |s'#1@@0| Tclass._module.state) (and (_module.__default.maybeHandleInterrupt (Lit |s#0@@222|) |s'#1@@0|) (_module.__default.evalIns_k (Lit |ins#0@@10|) |s'#1@@0| (Lit |r#0@@63|))))) :qid |ARMdefsd.1245:17| :skolemid |2936| :pattern ( (_module.__default.evalIns_k |ins#0@@10| |s'#1@@0| |r#0@@63|)) :pattern ( (_module.__default.maybeHandleInterrupt |s#0@@222| |s'#1@@0|)) )))) (=> (ite  (or (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@222|)))))) (not (U_2_bool (Lit (bool_2_U (_module.__default.ValidInstruction (Lit |s#0@@222|) (Lit |ins#0@@10|)))))))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@63|)))))) (exists ((|s'#1@@1| T@U) ) (!  (and (= (type |s'#1@@1|) DatatypeTypeType) (and ($Is |s'#1@@1| Tclass._module.state) (and (_module.__default.maybeHandleInterrupt (Lit |s#0@@222|) |s'#1@@1|) (_module.__default.evalIns_k (Lit |ins#0@@10|) |s'#1@@1| (Lit |r#0@@63|))))) :qid |ARMdefsd.1245:17| :skolemid |2936| :pattern ( (_module.__default.evalIns_k |ins#0@@10| |s'#1@@1| |r#0@@63|)) :pattern ( (_module.__default.maybeHandleInterrupt |s#0@@222| |s'#1@@1|)) ))) (_module.__default.evalIns (Lit |ins#0@@10|) (Lit |s#0@@222|) (Lit |r#0@@63|)))))) :qid |ARMdefsd.1242:11| :weight 3 :skolemid |2937| :pattern ( (_module.__default.evalIns (Lit |ins#0@@10|) (Lit |s#0@@222|) (Lit |r#0@@63|)) ($IsGoodHeap $Heap@@224)) ))))
(assert  (=> true (forall ((|s#0@@223| T@U) (|mod#0| Int) (|r#0@@64| T@U) ) (!  (=> (and (and (and (= (type |s#0@@223|) DatatypeTypeType) (= (type |r#0@@64|) DatatypeTypeType)) (or (|_module.__default.evalCPSID__IAF#canCall| |s#0@@223| |mod#0| |r#0@@64|) (and (and (and ($Is |s#0@@223| Tclass._module.state) (_module.__default.isUInt32 |mod#0|)) ($Is |r#0@@64| Tclass._module.state)) (and (_module.__default.ValidState |s#0@@223|) (_module.__default.ValidModeEncoding |mod#0|))))) (_module.__default.evalCPSID__IAF |s#0@@223| |mod#0| |r#0@@64|)) (_module.__default.ValidState |r#0@@64|)) :qid |ARMdefsd.1248:25| :skolemid |2938| :pattern ( (_module.__default.evalCPSID__IAF |s#0@@223| |mod#0| |r#0@@64|)) ))))
(assert (forall (($Heap@@225 T@U) (|s#0@@224| T@U) (|mod#0@@0| Int) (|r#0@@65| T@U) ) (!  (=> (and (and (= (type $Heap@@225) (MapType1Type refType)) (= (type |s#0@@224|) DatatypeTypeType)) (= (type |r#0@@65|) DatatypeTypeType)) (=> (and (and (and ($IsGoodHeap $Heap@@225) ($Is |s#0@@224| Tclass._module.state)) (_module.__default.isUInt32 |mod#0@@0|)) ($Is |r#0@@65| Tclass._module.state)) (and (=> (|_module.__default.evalCPSID__IAF#requires| |s#0@@224| |mod#0@@0| |r#0@@65|) (and (_module.__default.ValidState |s#0@@224|) (_module.__default.ValidModeEncoding |mod#0@@0|))) (=> (and (_module.__default.ValidState |s#0@@224|) (_module.__default.ValidModeEncoding |mod#0@@0|)) (|_module.__default.evalCPSID__IAF#requires| |s#0@@224| |mod#0@@0| |r#0@@65|))))) :qid |ARMdefsd.1248:11| :skolemid |2939| :pattern ( (|_module.__default.evalCPSID__IAF#requires| |s#0@@224| |mod#0@@0| |r#0@@65|) ($IsGoodHeap $Heap@@225)) )))
(assert (= (type MoreFuel__module._default.ValidSRegState8) LayerTypeType))
(assert  (=> true (forall (($Heap@@226 T@U) (|s#0@@225| T@U) (|mod#0@@1| Int) (|r#0@@66| T@U) ) (!  (=> (and (and (and (= (type $Heap@@226) (MapType1Type refType)) (= (type |s#0@@225|) DatatypeTypeType)) (= (type |r#0@@66|) DatatypeTypeType)) (or (|_module.__default.evalCPSID__IAF#canCall| |s#0@@225| |mod#0@@1| |r#0@@66|) (and (and (and (and ($IsGoodHeap $Heap@@226) ($Is |s#0@@225| Tclass._module.state)) (_module.__default.isUInt32 |mod#0@@1|)) ($Is |r#0@@66| Tclass._module.state)) (and (_module.__default.ValidState |s#0@@225|) (_module.__default.ValidModeEncoding |mod#0@@1|))))) (and (and (and (_module.state.State_q |s#0@@225|) (|_module.__default.update__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@225|)) ($Box (Lit |#_module.SReg.cpsr|))))) |mod#0@@1| (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true))))) (and (and (and (|_module.__default.decode__mode#canCall| |mod#0@@1|) (|_module.__default.ValidModeChange_k#canCall| |s#0@@225| (_module.__default.decode__mode |mod#0@@1|))) (=> (_module.__default.ValidModeChange_k |s#0@@225| (_module.__default.decode__mode |mod#0@@1|)) (|_module.__default.ValidPsrWord#canCall| (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@225|)) ($Box (Lit |#_module.SReg.cpsr|))))) |mod#0@@1| (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true))))))) (=> (and (|_module.__default.ValidPsrWord#canCall| (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@225|)) ($Box (Lit |#_module.SReg.cpsr|))))) |mod#0@@1| (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true))))) (_module.__default.ValidPsrWord (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@225|)) ($Box (Lit |#_module.SReg.cpsr|))))) |mod#0@@1| (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))))) (|_module.__default.evalUpdate#canCall| |s#0@@225| (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@225|)) ($Box (Lit |#_module.SReg.cpsr|))))) |mod#0@@1| (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))) |r#0@@66|)))) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState8)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState8)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState8) MoreFuel__module._default.ValidSRegState8)) (and (=> (_module.__default.evalCPSID__IAF |s#0@@225| |mod#0@@1| |r#0@@66|) (and (and (_module.__default.ValidModeChange_k |s#0@@225| (_module.__default.decode__mode |mod#0@@1|)) (_module.__default.ValidPsrWord (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@225|)) ($Box (Lit |#_module.SReg.cpsr|))))) |mod#0@@1| (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))))) (_module.__default.evalUpdate |s#0@@225| (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@225|)) ($Box (Lit |#_module.SReg.cpsr|))))) |mod#0@@1| (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))) |r#0@@66|))) (=> (and (and (_module.__default.ValidModeChange_k |s#0@@225| (_module.__default.decode__mode |mod#0@@1|)) (_module.__default.ValidPsrWord (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@225|)) ($Box (Lit |#_module.SReg.cpsr|))))) |mod#0@@1| (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))))) (_module.__default.evalUpdate |s#0@@225| (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (_module.state.sregs |s#0@@225|)) ($Box (Lit |#_module.SReg.cpsr|))))) |mod#0@@1| (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))) |r#0@@66|)) (_module.__default.evalCPSID__IAF |s#0@@225| |mod#0@@1| |r#0@@66|)))))) :qid |ARMdefsd.1248:11| :skolemid |2940| :pattern ( (_module.__default.evalCPSID__IAF |s#0@@225| |mod#0@@1| |r#0@@66|) ($IsGoodHeap $Heap@@226)) ))))
(assert (= (type MoreFuel__module._default.ValidSRegState9) LayerTypeType))
(assert  (=> true (forall (($Heap@@227 T@U) (|s#0@@226| T@U) (|mod#0@@2| Int) (|r#0@@67| T@U) ) (!  (=> (and (and (and (= (type $Heap@@227) (MapType1Type refType)) (= (type |s#0@@226|) DatatypeTypeType)) (= (type |r#0@@67|) DatatypeTypeType)) (or (|_module.__default.evalCPSID__IAF#canCall| (Lit |s#0@@226|) (LitInt |mod#0@@2|) (Lit |r#0@@67|)) (and (and (and (and ($IsGoodHeap $Heap@@227) ($Is |s#0@@226| Tclass._module.state)) (_module.__default.isUInt32 |mod#0@@2|)) ($Is |r#0@@67| Tclass._module.state)) (U_2_bool (Lit (bool_2_U  (and (_module.__default.ValidState (Lit |s#0@@226|)) (_module.__default.ValidModeEncoding (LitInt |mod#0@@2|))))))))) (and (and (and (_module.state.State_q (Lit |s#0@@226|)) (|_module.__default.update__psr#canCall| (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@226|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt |mod#0@@2|) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true))))) (and (and (and (|_module.__default.decode__mode#canCall| (LitInt |mod#0@@2|)) (|_module.__default.ValidModeChange_k#canCall| (Lit |s#0@@226|) (Lit (_module.__default.decode__mode (LitInt |mod#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidModeChange_k (Lit |s#0@@226|) (Lit (_module.__default.decode__mode (LitInt |mod#0@@2|))))))) (|_module.__default.ValidPsrWord#canCall| (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@226|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt |mod#0@@2|) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true))))))) (=> (and (|_module.__default.ValidPsrWord#canCall| (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@226|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt |mod#0@@2|) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true))))) (_module.__default.ValidPsrWord (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@226|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt |mod#0@@2|) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))))) (|_module.__default.evalUpdate#canCall| (Lit |s#0@@226|) (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@226|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt |mod#0@@2|) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))) (Lit |r#0@@67|))))) (and (and (and (= StartFuel__module._default.ValidSRegState ($LS MoreFuel__module._default.ValidSRegState9)) (= StartFuelAssert__module._default.ValidSRegState ($LS ($LS MoreFuel__module._default.ValidSRegState9)))) (= (AsFuelBottom MoreFuel__module._default.ValidSRegState9) MoreFuel__module._default.ValidSRegState9)) (and (=> (_module.__default.evalCPSID__IAF (Lit |s#0@@226|) (LitInt |mod#0@@2|) (Lit |r#0@@67|)) (and (and (_module.__default.ValidModeChange_k (Lit |s#0@@226|) (Lit (_module.__default.decode__mode (LitInt |mod#0@@2|)))) (_module.__default.ValidPsrWord (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@226|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt |mod#0@@2|) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))))) (_module.__default.evalUpdate (Lit |s#0@@226|) (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@226|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt |mod#0@@2|) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))) (Lit |r#0@@67|)))) (=> (and (and (_module.__default.ValidModeChange_k (Lit |s#0@@226|) (Lit (_module.__default.decode__mode (LitInt |mod#0@@2|)))) (_module.__default.ValidPsrWord (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@226|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt |mod#0@@2|) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))))) (_module.__default.evalUpdate (Lit |s#0@@226|) (Lit (|#_module.operand.OSReg| (Lit |#_module.SReg.cpsr|))) (_module.__default.update__psr StartFuel__module._default.update_psr (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit (_module.state.sregs (Lit |s#0@@226|)))) ($Box (Lit |#_module.SReg.cpsr|))))) (LitInt |mod#0@@2|) (U_2_bool (Lit (bool_2_U true))) (U_2_bool (Lit (bool_2_U true)))) (Lit |r#0@@67|))) (_module.__default.evalCPSID__IAF (Lit |s#0@@226|) (LitInt |mod#0@@2|) (Lit |r#0@@67|))))))) :qid |ARMdefsd.1248:11| :weight 3 :skolemid |2941| :pattern ( (_module.__default.evalCPSID__IAF (Lit |s#0@@226|) (LitInt |mod#0@@2|) (Lit |r#0@@67|)) ($IsGoodHeap $Heap@@227)) ))))
(assert  (=> true (forall ((|s#0@@227| T@U) (|s2#0@@2| T@U) (|s4#0| T@U) ) (!  (=> (and (and (and (= (type |s#0@@227|) DatatypeTypeType) (= (type |s2#0@@2|) DatatypeTypeType)) (= (type |s4#0|) DatatypeTypeType)) (or (|_module.__default.evalUserExecution#canCall| |s#0@@227| |s2#0@@2| |s4#0|) (and (and (and ($Is |s#0@@227| Tclass._module.state) ($Is |s2#0@@2| Tclass._module.state)) ($Is |s4#0| Tclass._module.state)) (_module.__default.ValidState |s#0@@227|)))) true) :qid |ARMdefsd.1259:29| :skolemid |2942| :pattern ( (_module.__default.evalUserExecution |s#0@@227| |s2#0@@2| |s4#0|)) ))))
(assert (forall (($Heap@@228 T@U) (|s#0@@228| T@U) (|s2#0@@3| T@U) (|s4#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@228) (MapType1Type refType)) (= (type |s#0@@228|) DatatypeTypeType)) (= (type |s2#0@@3|) DatatypeTypeType)) (= (type |s4#0@@0|) DatatypeTypeType)) (and (and (and ($IsGoodHeap $Heap@@228) ($Is |s#0@@228| Tclass._module.state)) ($Is |s2#0@@3| Tclass._module.state)) ($Is |s4#0@@0| Tclass._module.state))) (and (=> (|_module.__default.evalUserExecution#requires| |s#0@@228| |s2#0@@3| |s4#0@@0|) (_module.__default.ValidState |s#0@@228|)) (=> (_module.__default.ValidState |s#0@@228|) (|_module.__default.evalUserExecution#requires| |s#0@@228| |s2#0@@3| |s4#0@@0|)))) :qid |ARMdefsd.1259:11| :skolemid |2943| :pattern ( (|_module.__default.evalUserExecution#requires| |s#0@@228| |s2#0@@3| |s4#0@@0|) ($IsGoodHeap $Heap@@228)) )))
(assert (= (type StartFuel__module._default.userspaceExecutionFn) LayerTypeType))
(assert  (=> true (forall (($Heap@@229 T@U) (|s#0@@229| T@U) (|s2#0@@4| T@U) (|s4#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@229) (MapType1Type refType)) (= (type |s#0@@229|) DatatypeTypeType)) (= (type |s2#0@@4|) DatatypeTypeType)) (= (type |s4#0@@1|) DatatypeTypeType)) (or (|_module.__default.evalUserExecution#canCall| |s#0@@229| |s2#0@@4| |s4#0@@1|) (and (and (and (and ($IsGoodHeap $Heap@@229) ($Is |s#0@@229| Tclass._module.state)) ($Is |s2#0@@4| Tclass._module.state)) ($Is |s4#0@@1| Tclass._module.state)) (_module.__default.ValidState |s#0@@229|)))) (and (and (and (|_module.__default.evalEnterUserspace#canCall| |s#0@@229| |s2#0@@4|) (=> (_module.__default.evalEnterUserspace |s#0@@229| |s2#0@@4|) (|_module.__default.ExtractAbsPageTable#canCall| |s2#0@@4|))) (=> (and (|_module.__default.ExtractAbsPageTable#canCall| |s2#0@@4|) (_module.Maybe.Just_q (_module.__default.ExtractAbsPageTable |s2#0@@4|))) (and (and (|_module.__default.OperandContents#canCall| |s#0@@229| (Lit |#_module.operand.OLR|)) (|_module.__default.userspaceExecutionFn#canCall| |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|)))) (|_module.__default.evalExceptionTaken#canCall| ($Unbox DatatypeTypeType (_System.__tuple_h3._0 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|))))) ($Unbox DatatypeTypeType (_System.__tuple_h3._2 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|))))) (U_2_int ($Unbox intType (_System.__tuple_h3._1 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|)))))) |s4#0@@1|)))) (and (=> (_module.__default.evalUserExecution |s#0@@229| |s2#0@@4| |s4#0@@1|) (and (and (_module.__default.evalEnterUserspace |s#0@@229| |s2#0@@4|) (_module.Maybe.Just_q (_module.__default.ExtractAbsPageTable |s2#0@@4|))) (_module.__default.evalExceptionTaken ($Unbox DatatypeTypeType (_System.__tuple_h3._0 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|))))) ($Unbox DatatypeTypeType (_System.__tuple_h3._2 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|))))) (U_2_int ($Unbox intType (_System.__tuple_h3._1 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|)))))) |s4#0@@1|))) (=> (and (and (_module.__default.evalEnterUserspace |s#0@@229| |s2#0@@4|) (_module.Maybe.Just_q (_module.__default.ExtractAbsPageTable |s2#0@@4|))) (_module.__default.evalExceptionTaken ($Unbox DatatypeTypeType (_System.__tuple_h3._0 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|))))) ($Unbox DatatypeTypeType (_System.__tuple_h3._2 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|))))) (U_2_int ($Unbox intType (_System.__tuple_h3._1 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn |s2#0@@4| (_module.__default.OperandContents |s#0@@229| (Lit |#_module.operand.OLR|)))))) |s4#0@@1|)) (_module.__default.evalUserExecution |s#0@@229| |s2#0@@4| |s4#0@@1|))))) :qid |ARMdefsd.1259:11| :skolemid |2944| :pattern ( (_module.__default.evalUserExecution |s#0@@229| |s2#0@@4| |s4#0@@1|) ($IsGoodHeap $Heap@@229)) ))))
(assert  (=> true (forall (($Heap@@230 T@U) (|s#0@@230| T@U) (|s2#0@@5| T@U) (|s4#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type $Heap@@230) (MapType1Type refType)) (= (type |s#0@@230|) DatatypeTypeType)) (= (type |s2#0@@5|) DatatypeTypeType)) (= (type |s4#0@@2|) DatatypeTypeType)) (or (|_module.__default.evalUserExecution#canCall| (Lit |s#0@@230|) (Lit |s2#0@@5|) (Lit |s4#0@@2|)) (and (and (and (and ($IsGoodHeap $Heap@@230) ($Is |s#0@@230| Tclass._module.state)) ($Is |s2#0@@5| Tclass._module.state)) ($Is |s4#0@@2| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@230|)))))))) (and (and (and (|_module.__default.evalEnterUserspace#canCall| (Lit |s#0@@230|) (Lit |s2#0@@5|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.evalEnterUserspace (Lit |s#0@@230|) (Lit |s2#0@@5|))))) (|_module.__default.ExtractAbsPageTable#canCall| (Lit |s2#0@@5|)))) (=> (and (|_module.__default.ExtractAbsPageTable#canCall| (Lit |s2#0@@5|)) (U_2_bool (Lit (bool_2_U (_module.Maybe.Just_q (Lit (_module.__default.ExtractAbsPageTable (Lit |s2#0@@5|)))))))) (and (and (|_module.__default.OperandContents#canCall| (Lit |s#0@@230|) (Lit |#_module.operand.OLR|)) (|_module.__default.userspaceExecutionFn#canCall| (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|))))) (|_module.__default.evalExceptionTaken#canCall| ($Unbox DatatypeTypeType (_System.__tuple_h3._0 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|)))))) ($Unbox DatatypeTypeType (_System.__tuple_h3._2 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|)))))) (U_2_int ($Unbox intType (_System.__tuple_h3._1 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|))))))) (Lit |s4#0@@2|))))) (and (=> (_module.__default.evalUserExecution (Lit |s#0@@230|) (Lit |s2#0@@5|) (Lit |s4#0@@2|)) (and (and (_module.__default.evalEnterUserspace (Lit |s#0@@230|) (Lit |s2#0@@5|)) (_module.Maybe.Just_q (Lit (_module.__default.ExtractAbsPageTable (Lit |s2#0@@5|))))) (_module.__default.evalExceptionTaken ($Unbox DatatypeTypeType (_System.__tuple_h3._0 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|)))))) ($Unbox DatatypeTypeType (_System.__tuple_h3._2 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|)))))) (U_2_int ($Unbox intType (_System.__tuple_h3._1 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|))))))) (Lit |s4#0@@2|)))) (=> (and (and (_module.__default.evalEnterUserspace (Lit |s#0@@230|) (Lit |s2#0@@5|)) (_module.Maybe.Just_q (Lit (_module.__default.ExtractAbsPageTable (Lit |s2#0@@5|))))) (_module.__default.evalExceptionTaken ($Unbox DatatypeTypeType (_System.__tuple_h3._0 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|)))))) ($Unbox DatatypeTypeType (_System.__tuple_h3._2 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|)))))) (U_2_int ($Unbox intType (_System.__tuple_h3._1 (_module.__default.userspaceExecutionFn StartFuel__module._default.userspaceExecutionFn (Lit |s2#0@@5|) (LitInt (_module.__default.OperandContents (Lit |s#0@@230|) (Lit |#_module.operand.OLR|))))))) (Lit |s4#0@@2|))) (_module.__default.evalUserExecution (Lit |s#0@@230|) (Lit |s2#0@@5|) (Lit |s4#0@@2|)))))) :qid |ARMdefsd.1259:11| :weight 3 :skolemid |2945| :pattern ( (_module.__default.evalUserExecution (Lit |s#0@@230|) (Lit |s2#0@@5|) (Lit |s4#0@@2|)) ($IsGoodHeap $Heap@@230)) ))))
(assert (forall (($ly@@199 T@U) (|s#0@@231| T@U) (|r#0@@68| T@U) ) (!  (=> (and (and (= (type $ly@@199) LayerTypeType) (= (type |s#0@@231|) DatatypeTypeType)) (= (type |r#0@@68|) DatatypeTypeType)) (and (=> (_module.__default.evalMOVSPCLRUC ($LS $ly@@199) |s#0@@231| |r#0@@68|) (_module.__default.evalMOVSPCLRUC $ly@@199 |s#0@@231| |r#0@@68|)) (=> (_module.__default.evalMOVSPCLRUC $ly@@199 |s#0@@231| |r#0@@68|) (_module.__default.evalMOVSPCLRUC ($LS $ly@@199) |s#0@@231| |r#0@@68|)))) :qid |ARMdefsd.1267:21| :skolemid |2946| :pattern ( (_module.__default.evalMOVSPCLRUC ($LS $ly@@199) |s#0@@231| |r#0@@68|)) )))
(assert (forall (($ly@@200 T@U) (|s#0@@232| T@U) (|r#0@@69| T@U) ) (!  (=> (and (and (= (type $ly@@200) LayerTypeType) (= (type |s#0@@232|) DatatypeTypeType)) (= (type |r#0@@69|) DatatypeTypeType)) (and (=> (_module.__default.evalMOVSPCLRUC $ly@@200 |s#0@@232| |r#0@@69|) (_module.__default.evalMOVSPCLRUC $LZ |s#0@@232| |r#0@@69|)) (=> (_module.__default.evalMOVSPCLRUC $LZ |s#0@@232| |r#0@@69|) (_module.__default.evalMOVSPCLRUC $ly@@200 |s#0@@232| |r#0@@69|)))) :qid |ARMdefsd.1267:21| :skolemid |2947| :pattern ( (_module.__default.evalMOVSPCLRUC (AsFuelBottom $ly@@200) |s#0@@232| |r#0@@69|)) )))
(assert  (=> true (forall (($ly@@201 T@U) (|s#0@@233| T@U) (|r#0@@70| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@201) LayerTypeType) (= (type |s#0@@233|) DatatypeTypeType)) (= (type |r#0@@70|) DatatypeTypeType)) (or (|_module.__default.evalMOVSPCLRUC#canCall| |s#0@@233| |r#0@@70|) (and (and ($Is |s#0@@233| Tclass._module.state) ($Is |r#0@@70| Tclass._module.state)) (_module.__default.ValidState |s#0@@233|)))) (_module.__default.evalMOVSPCLRUC $ly@@201 |s#0@@233| |r#0@@70|)) (_module.__default.ValidState |r#0@@70|)) :qid |ARMdefsd.1267:21| :skolemid |2948| :pattern ( (_module.__default.evalMOVSPCLRUC $ly@@201 |s#0@@233| |r#0@@70|)) ))))
(assert (forall (($ly@@202 T@U) (|s#0@@234| T@U) (|r#0@@71| T@U) ) (!  (=> (and (and (and (= (type $ly@@202) LayerTypeType) (= (type |s#0@@234|) DatatypeTypeType)) (= (type |r#0@@71|) DatatypeTypeType)) (and ($Is |s#0@@234| Tclass._module.state) ($Is |r#0@@71| Tclass._module.state))) (and (=> (|_module.__default.evalMOVSPCLRUC#requires| $ly@@202 |s#0@@234| |r#0@@71|) (_module.__default.ValidState |s#0@@234|)) (=> (_module.__default.ValidState |s#0@@234|) (|_module.__default.evalMOVSPCLRUC#requires| $ly@@202 |s#0@@234| |r#0@@71|)))) :qid |ARMdefsd.1267:21| :skolemid |2949| :pattern ( (|_module.__default.evalMOVSPCLRUC#requires| $ly@@202 |s#0@@234| |r#0@@71|)) )))
(assert  (=> true (forall (($ly@@203 T@U) (|s#0@@235| T@U) (|r#0@@72| T@U) ) (!  (=> (and (and (and (= (type $ly@@203) LayerTypeType) (= (type |s#0@@235|) DatatypeTypeType)) (= (type |r#0@@72|) DatatypeTypeType)) (or (|_module.__default.evalMOVSPCLRUC#canCall| |s#0@@235| |r#0@@72|) (and (and ($Is |s#0@@235| Tclass._module.state) ($Is |r#0@@72| Tclass._module.state)) (_module.__default.ValidState |s#0@@235|)))) (and (and (|_module.__default.UsermodeContinuationPrecondition#canCall| |s#0@@235|) (=> (_module.__default.UsermodeContinuationPrecondition |s#0@@235|) (forall ((|s2#0@@6| T@U) (|s4#0@@3| T@U) ) (!  (=> (and (and (= (type |s2#0@@6|) DatatypeTypeType) (= (type |s4#0@@3|) DatatypeTypeType)) (and ($Is |s2#0@@6| Tclass._module.state) ($Is |s4#0@@3| Tclass._module.state))) (and (|_module.__default.evalUserExecution#canCall| |s#0@@235| |s2#0@@6| |s4#0@@3|) (=> (_module.__default.evalUserExecution |s#0@@235| |s2#0@@6| |s4#0@@3|) (|_module.__default.UsermodeContinuationInvariant#canCall| |s4#0@@3| |r#0@@72|)))) :qid |ARMdefsd.1272:15| :skolemid |2950| :pattern ( (_module.__default.evalUserExecution |s#0@@235| |s2#0@@6| |s4#0@@3|)) )))) (and (=> (_module.__default.evalMOVSPCLRUC ($LS $ly@@203) |s#0@@235| |r#0@@72|) (and (_module.__default.UsermodeContinuationPrecondition |s#0@@235|) (exists ((|s2#0@@7| T@U) (|s4#0@@4| T@U) ) (!  (and (and (= (type |s2#0@@7|) DatatypeTypeType) (= (type |s4#0@@4|) DatatypeTypeType)) (and (and ($Is |s2#0@@7| Tclass._module.state) ($Is |s4#0@@4| Tclass._module.state)) (and (_module.__default.evalUserExecution |s#0@@235| |s2#0@@7| |s4#0@@4|) (_module.__default.UsermodeContinuationInvariant |s4#0@@4| |r#0@@72|)))) :qid |ARMdefsd.1272:15| :skolemid |2951| :pattern ( (_module.__default.evalUserExecution |s#0@@235| |s2#0@@7| |s4#0@@4|)) )))) (=> (and (_module.__default.UsermodeContinuationPrecondition |s#0@@235|) (exists ((|s2#0@@8| T@U) (|s4#0@@5| T@U) ) (!  (and (and (= (type |s2#0@@8|) DatatypeTypeType) (= (type |s4#0@@5|) DatatypeTypeType)) (and (and ($Is |s2#0@@8| Tclass._module.state) ($Is |s4#0@@5| Tclass._module.state)) (and (_module.__default.evalUserExecution |s#0@@235| |s2#0@@8| |s4#0@@5|) (_module.__default.UsermodeContinuationInvariant |s4#0@@5| |r#0@@72|)))) :qid |ARMdefsd.1272:15| :skolemid |2951| :pattern ( (_module.__default.evalUserExecution |s#0@@235| |s2#0@@8| |s4#0@@5|)) ))) (_module.__default.evalMOVSPCLRUC ($LS $ly@@203) |s#0@@235| |r#0@@72|))))) :qid |ARMdefsd.1267:21| :skolemid |2952| :pattern ( (_module.__default.evalMOVSPCLRUC ($LS $ly@@203) |s#0@@235| |r#0@@72|)) ))))
(assert  (=> true (forall (($ly@@204 T@U) (|s#0@@236| T@U) (|r#0@@73| T@U) ) (!  (=> (and (and (and (= (type $ly@@204) LayerTypeType) (= (type |s#0@@236|) DatatypeTypeType)) (= (type |r#0@@73|) DatatypeTypeType)) (or (|_module.__default.evalMOVSPCLRUC#canCall| (Lit |s#0@@236|) (Lit |r#0@@73|)) (and (and ($Is |s#0@@236| Tclass._module.state) ($Is |r#0@@73| Tclass._module.state)) (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@236|)))))))) (and (and (|_module.__default.UsermodeContinuationPrecondition#canCall| (Lit |s#0@@236|)) (=> (_module.__default.UsermodeContinuationPrecondition (Lit |s#0@@236|)) (forall ((|s2#1@@2| T@U) (|s4#1| T@U) ) (!  (=> (and (and (= (type |s2#1@@2|) DatatypeTypeType) (= (type |s4#1|) DatatypeTypeType)) (and ($Is |s2#1@@2| Tclass._module.state) ($Is |s4#1| Tclass._module.state))) (and (|_module.__default.evalUserExecution#canCall| (Lit |s#0@@236|) |s2#1@@2| |s4#1|) (=> (_module.__default.evalUserExecution (Lit |s#0@@236|) |s2#1@@2| |s4#1|) (|_module.__default.UsermodeContinuationInvariant#canCall| |s4#1| (Lit |r#0@@73|))))) :qid |ARMdefsd.1272:15| :skolemid |2953| :pattern ( (_module.__default.evalUserExecution |s#0@@236| |s2#1@@2| |s4#1|)) )))) (and (=> (_module.__default.evalMOVSPCLRUC ($LS $ly@@204) (Lit |s#0@@236|) (Lit |r#0@@73|)) (and (_module.__default.UsermodeContinuationPrecondition (Lit |s#0@@236|)) (exists ((|s2#1@@3| T@U) (|s4#1@@0| T@U) ) (!  (and (and (= (type |s2#1@@3|) DatatypeTypeType) (= (type |s4#1@@0|) DatatypeTypeType)) (and (and ($Is |s2#1@@3| Tclass._module.state) ($Is |s4#1@@0| Tclass._module.state)) (and (_module.__default.evalUserExecution (Lit |s#0@@236|) |s2#1@@3| |s4#1@@0|) (_module.__default.UsermodeContinuationInvariant |s4#1@@0| (Lit |r#0@@73|))))) :qid |ARMdefsd.1272:15| :skolemid |2954| :pattern ( (_module.__default.evalUserExecution |s#0@@236| |s2#1@@3| |s4#1@@0|)) )))) (=> (and (_module.__default.UsermodeContinuationPrecondition (Lit |s#0@@236|)) (exists ((|s2#1@@4| T@U) (|s4#1@@1| T@U) ) (!  (and (and (= (type |s2#1@@4|) DatatypeTypeType) (= (type |s4#1@@1|) DatatypeTypeType)) (and (and ($Is |s2#1@@4| Tclass._module.state) ($Is |s4#1@@1| Tclass._module.state)) (and (_module.__default.evalUserExecution (Lit |s#0@@236|) |s2#1@@4| |s4#1@@1|) (_module.__default.UsermodeContinuationInvariant |s4#1@@1| (Lit |r#0@@73|))))) :qid |ARMdefsd.1272:15| :skolemid |2954| :pattern ( (_module.__default.evalUserExecution |s#0@@236| |s2#1@@4| |s4#1@@1|)) ))) (_module.__default.evalMOVSPCLRUC ($LS $ly@@204) (Lit |s#0@@236|) (Lit |r#0@@73|)))))) :qid |ARMdefsd.1267:21| :weight 3 :skolemid |2955| :pattern ( (_module.__default.evalMOVSPCLRUC ($LS $ly@@204) (Lit |s#0@@236|) (Lit |r#0@@73|))) ))))
(assert (forall (($ly@@205 T@U) (|block#0| T@U) (|s#0@@237| T@U) (|r#0@@74| T@U) ) (!  (=> (and (and (and (= (type $ly@@205) LayerTypeType) (= (type |block#0|) DatatypeTypeType)) (= (type |s#0@@237|) DatatypeTypeType)) (= (type |r#0@@74|) DatatypeTypeType)) (and (=> (_module.__default.evalBlock ($LS $ly@@205) |block#0| |s#0@@237| |r#0@@74|) (_module.__default.evalBlock $ly@@205 |block#0| |s#0@@237| |r#0@@74|)) (=> (_module.__default.evalBlock $ly@@205 |block#0| |s#0@@237| |r#0@@74|) (_module.__default.evalBlock ($LS $ly@@205) |block#0| |s#0@@237| |r#0@@74|)))) :qid |ARMdefsd.1276:11| :skolemid |2956| :pattern ( (_module.__default.evalBlock ($LS $ly@@205) |block#0| |s#0@@237| |r#0@@74|)) )))
(assert (forall (($ly@@206 T@U) (|block#0@@0| T@U) (|s#0@@238| T@U) (|r#0@@75| T@U) ) (!  (=> (and (and (and (= (type $ly@@206) LayerTypeType) (= (type |block#0@@0|) DatatypeTypeType)) (= (type |s#0@@238|) DatatypeTypeType)) (= (type |r#0@@75|) DatatypeTypeType)) (and (=> (_module.__default.evalBlock $ly@@206 |block#0@@0| |s#0@@238| |r#0@@75|) (_module.__default.evalBlock $LZ |block#0@@0| |s#0@@238| |r#0@@75|)) (=> (_module.__default.evalBlock $LZ |block#0@@0| |s#0@@238| |r#0@@75|) (_module.__default.evalBlock $ly@@206 |block#0@@0| |s#0@@238| |r#0@@75|)))) :qid |ARMdefsd.1276:11| :skolemid |2957| :pattern ( (_module.__default.evalBlock (AsFuelBottom $ly@@206) |block#0@@0| |s#0@@238| |r#0@@75|)) )))
(assert (= (type Tclass._module.codes) TyType))
(assert (= (Tag Tclass._module.codes) Tagclass._module.codes))
(assert (forall ((bx@@111 T@U) ) (!  (=> (and (= (type bx@@111) BoxType) ($IsBox bx@@111 Tclass._module.codes)) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) Tclass._module.codes))) :qid |unknown.0:0| :skolemid |2958| :pattern ( ($IsBox bx@@111 Tclass._module.codes)) )))
(assert  (=> true (forall (($ly@@207 T@U) (|block#0@@1| T@U) (|s#0@@239| T@U) (|r#0@@76| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@207) LayerTypeType) (= (type |block#0@@1|) DatatypeTypeType)) (= (type |s#0@@239|) DatatypeTypeType)) (= (type |r#0@@76|) DatatypeTypeType)) (or (|_module.__default.evalBlock#canCall| |block#0@@1| |s#0@@239| |r#0@@76|) (and (and ($Is |block#0@@1| Tclass._module.codes) ($Is |s#0@@239| Tclass._module.state)) ($Is |r#0@@76| Tclass._module.state)))) true) :qid |ARMdefsd.1276:11| :skolemid |2959| :pattern ( (_module.__default.evalBlock $ly@@207 |block#0@@1| |s#0@@239| |r#0@@76|)) ))))
(assert (forall (($ly@@208 T@U) ($Heap@@231 T@U) (|block#0@@2| T@U) (|s#0@@240| T@U) (|r#0@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@208) LayerTypeType) (= (type $Heap@@231) (MapType1Type refType))) (= (type |block#0@@2|) DatatypeTypeType)) (= (type |s#0@@240|) DatatypeTypeType)) (= (type |r#0@@77|) DatatypeTypeType)) (and (and (and ($IsGoodHeap $Heap@@231) ($Is |block#0@@2| Tclass._module.codes)) ($Is |s#0@@240| Tclass._module.state)) ($Is |r#0@@77| Tclass._module.state))) (and (=> (|_module.__default.evalBlock#requires| $ly@@208 |block#0@@2| |s#0@@240| |r#0@@77|) true) (=> true (|_module.__default.evalBlock#requires| $ly@@208 |block#0@@2| |s#0@@240| |r#0@@77|)))) :qid |ARMdefsd.1276:11| :skolemid |2960| :pattern ( (|_module.__default.evalBlock#requires| $ly@@208 |block#0@@2| |s#0@@240| |r#0@@77|) ($IsGoodHeap $Heap@@231)) )))
(assert  (and (forall ((arg0@@413 T@U) ) (! (= (type (_module.codes.tl arg0@@413)) DatatypeTypeType) :qid |funType:_module.codes.tl| :pattern ( (_module.codes.tl arg0@@413)) )) (forall ((arg0@@414 T@U) ) (! (= (type (_module.codes.hd arg0@@414)) DatatypeTypeType) :qid |funType:_module.codes.hd| :pattern ( (_module.codes.hd arg0@@414)) ))))
(assert  (=> true (forall (($ly@@209 T@U) ($Heap@@232 T@U) (|block#0@@3| T@U) (|s#0@@241| T@U) (|r#0@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@209) LayerTypeType) (= (type $Heap@@232) (MapType1Type refType))) (= (type |block#0@@3|) DatatypeTypeType)) (= (type |s#0@@241|) DatatypeTypeType)) (= (type |r#0@@78|) DatatypeTypeType)) (or (|_module.__default.evalBlock#canCall| |block#0@@3| |s#0@@241| |r#0@@78|) (and (and (and ($IsGoodHeap $Heap@@232) ($Is |block#0@@3| Tclass._module.codes)) ($Is |s#0@@241| Tclass._module.state)) ($Is |r#0@@78| Tclass._module.state)))) (and (=> (not (_module.codes.CNil_q |block#0@@3|)) (forall ((|r'#0| T@U) ) (!  (=> (and (= (type |r'#0|) DatatypeTypeType) ($Is |r'#0| Tclass._module.state)) (and (|_module.__default.evalCode#canCall| (_module.codes.hd |block#0@@3|) |s#0@@241| |r'#0|) (=> (_module.__default.evalCode $ly@@209 (_module.codes.hd |block#0@@3|) |s#0@@241| |r'#0|) (|_module.__default.evalBlock#canCall| (_module.codes.tl |block#0@@3|) |r'#0| |r#0@@78|)))) :qid |ARMdefsd.1281:16| :skolemid |2961| :pattern ( (_module.__default.evalBlock $ly@@209 (_module.codes.tl |block#0@@3|) |r'#0| |r#0@@78|)) :pattern ( (_module.__default.evalCode $ly@@209 (_module.codes.hd |block#0@@3|) |s#0@@241| |r'#0|)) ))) (and (=> (_module.__default.evalBlock ($LS $ly@@209) |block#0@@3| |s#0@@241| |r#0@@78|) (ite (_module.codes.CNil_q |block#0@@3|) (= |r#0@@78| |s#0@@241|) (exists ((|r'#0@@0| T@U) (|tr$ly#0@@9| T@U) ) (!  (and (and (= (type |r'#0@@0|) DatatypeTypeType) (= (type |tr$ly#0@@9|) LayerTypeType)) (and ($Is |r'#0@@0| Tclass._module.state) (and (_module.__default.evalCode $ly@@209 (_module.codes.hd |block#0@@3|) |s#0@@241| |r'#0@@0|) (_module.__default.evalBlock $ly@@209 (_module.codes.tl |block#0@@3|) |r'#0@@0| |r#0@@78|)))) :qid |ARMdefsd.1281:16| :skolemid |2962| :pattern ( (_module.__default.evalBlock |tr$ly#0@@9| (_module.codes.tl |block#0@@3|) |r'#0@@0| |r#0@@78|)) :pattern ( (_module.__default.evalCode |tr$ly#0@@9| (_module.codes.hd |block#0@@3|) |s#0@@241| |r'#0@@0|)) )))) (=> (ite (_module.codes.CNil_q |block#0@@3|) (= |r#0@@78| |s#0@@241|) (exists ((|r'#0@@1| T@U) (|tr$ly#0@@10| T@U) ) (!  (and (and (= (type |r'#0@@1|) DatatypeTypeType) (= (type |tr$ly#0@@10|) LayerTypeType)) (and ($Is |r'#0@@1| Tclass._module.state) (and (_module.__default.evalCode $ly@@209 (_module.codes.hd |block#0@@3|) |s#0@@241| |r'#0@@1|) (_module.__default.evalBlock $ly@@209 (_module.codes.tl |block#0@@3|) |r'#0@@1| |r#0@@78|)))) :qid |ARMdefsd.1281:16| :skolemid |2962| :pattern ( (_module.__default.evalBlock |tr$ly#0@@10| (_module.codes.tl |block#0@@3|) |r'#0@@1| |r#0@@78|)) :pattern ( (_module.__default.evalCode |tr$ly#0@@10| (_module.codes.hd |block#0@@3|) |s#0@@241| |r'#0@@1|)) ))) (_module.__default.evalBlock ($LS $ly@@209) |block#0@@3| |s#0@@241| |r#0@@78|))))) :qid |ARMdefsd.1276:11| :skolemid |2963| :pattern ( (_module.__default.evalBlock ($LS $ly@@209) |block#0@@3| |s#0@@241| |r#0@@78|) ($IsGoodHeap $Heap@@232)) ))))
(assert  (=> true (forall (($ly@@210 T@U) ($Heap@@233 T@U) (|block#0@@4| T@U) (|s#0@@242| T@U) (|r#0@@79| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@210) LayerTypeType) (= (type $Heap@@233) (MapType1Type refType))) (= (type |block#0@@4|) DatatypeTypeType)) (= (type |s#0@@242|) DatatypeTypeType)) (= (type |r#0@@79|) DatatypeTypeType)) (or (|_module.__default.evalBlock#canCall| (Lit |block#0@@4|) (Lit |s#0@@242|) (Lit |r#0@@79|)) (and (and (and ($IsGoodHeap $Heap@@233) ($Is |block#0@@4| Tclass._module.codes)) ($Is |s#0@@242| Tclass._module.state)) ($Is |r#0@@79| Tclass._module.state)))) (and (=> (not (U_2_bool (Lit (bool_2_U (_module.codes.CNil_q (Lit |block#0@@4|)))))) (forall ((|r'#1| T@U) ) (!  (=> (and (= (type |r'#1|) DatatypeTypeType) ($Is |r'#1| Tclass._module.state)) (and (|_module.__default.evalCode#canCall| (Lit (_module.codes.hd (Lit |block#0@@4|))) (Lit |s#0@@242|) |r'#1|) (=> (_module.__default.evalCode ($LS $ly@@210) (Lit (_module.codes.hd (Lit |block#0@@4|))) (Lit |s#0@@242|) |r'#1|) (|_module.__default.evalBlock#canCall| (Lit (_module.codes.tl (Lit |block#0@@4|))) |r'#1| (Lit |r#0@@79|))))) :qid |ARMdefsd.1281:16| :skolemid |2964| :pattern ( (_module.__default.evalBlock ($LS $ly@@210) (_module.codes.tl |block#0@@4|) |r'#1| |r#0@@79|)) :pattern ( (_module.__default.evalCode ($LS $ly@@210) (_module.codes.hd |block#0@@4|) |s#0@@242| |r'#1|)) ))) (and (=> (_module.__default.evalBlock ($LS $ly@@210) (Lit |block#0@@4|) (Lit |s#0@@242|) (Lit |r#0@@79|)) (ite (_module.codes.CNil_q (Lit |block#0@@4|)) (= (Lit |r#0@@79|) (Lit |s#0@@242|)) (exists ((|r'#1@@0| T@U) (|tr$ly#1@@7| T@U) ) (!  (and (and (= (type |r'#1@@0|) DatatypeTypeType) (= (type |tr$ly#1@@7|) LayerTypeType)) (and ($Is |r'#1@@0| Tclass._module.state) (and (_module.__default.evalCode ($LS $ly@@210) (Lit (_module.codes.hd (Lit |block#0@@4|))) (Lit |s#0@@242|) |r'#1@@0|) (_module.__default.evalBlock ($LS $ly@@210) (Lit (_module.codes.tl (Lit |block#0@@4|))) |r'#1@@0| (Lit |r#0@@79|))))) :qid |ARMdefsd.1281:16| :skolemid |2965| :pattern ( (_module.__default.evalBlock |tr$ly#1@@7| (_module.codes.tl |block#0@@4|) |r'#1@@0| |r#0@@79|)) :pattern ( (_module.__default.evalCode |tr$ly#1@@7| (_module.codes.hd |block#0@@4|) |s#0@@242| |r'#1@@0|)) )))) (=> (ite (_module.codes.CNil_q (Lit |block#0@@4|)) (= (Lit |r#0@@79|) (Lit |s#0@@242|)) (exists ((|r'#1@@1| T@U) (|tr$ly#1@@8| T@U) ) (!  (and (and (= (type |r'#1@@1|) DatatypeTypeType) (= (type |tr$ly#1@@8|) LayerTypeType)) (and ($Is |r'#1@@1| Tclass._module.state) (and (_module.__default.evalCode ($LS $ly@@210) (Lit (_module.codes.hd (Lit |block#0@@4|))) (Lit |s#0@@242|) |r'#1@@1|) (_module.__default.evalBlock ($LS $ly@@210) (Lit (_module.codes.tl (Lit |block#0@@4|))) |r'#1@@1| (Lit |r#0@@79|))))) :qid |ARMdefsd.1281:16| :skolemid |2965| :pattern ( (_module.__default.evalBlock |tr$ly#1@@8| (_module.codes.tl |block#0@@4|) |r'#1@@1| |r#0@@79|)) :pattern ( (_module.__default.evalCode |tr$ly#1@@8| (_module.codes.hd |block#0@@4|) |s#0@@242| |r'#1@@1|)) ))) (_module.__default.evalBlock ($LS $ly@@210) (Lit |block#0@@4|) (Lit |s#0@@242|) (Lit |r#0@@79|)))))) :qid |ARMdefsd.1276:11| :weight 3 :skolemid |2966| :pattern ( (_module.__default.evalBlock ($LS $ly@@210) (Lit |block#0@@4|) (Lit |s#0@@242|) (Lit |r#0@@79|)) ($IsGoodHeap $Heap@@233)) ))))
(assert (forall (($ly@@211 T@U) (|cond#0| T@U) (|ifT#0| T@U) (|ifF#0| T@U) (|s#0@@243| T@U) (|r#0@@80| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@211) LayerTypeType) (= (type |cond#0|) DatatypeTypeType)) (= (type |ifT#0|) DatatypeTypeType)) (= (type |ifF#0|) DatatypeTypeType)) (= (type |s#0@@243|) DatatypeTypeType)) (= (type |r#0@@80|) DatatypeTypeType)) (and (=> (_module.__default.evalIfElse ($LS $ly@@211) |cond#0| |ifT#0| |ifF#0| |s#0@@243| |r#0@@80|) (_module.__default.evalIfElse $ly@@211 |cond#0| |ifT#0| |ifF#0| |s#0@@243| |r#0@@80|)) (=> (_module.__default.evalIfElse $ly@@211 |cond#0| |ifT#0| |ifF#0| |s#0@@243| |r#0@@80|) (_module.__default.evalIfElse ($LS $ly@@211) |cond#0| |ifT#0| |ifF#0| |s#0@@243| |r#0@@80|)))) :qid |ARMdefsd.1284:11| :skolemid |2967| :pattern ( (_module.__default.evalIfElse ($LS $ly@@211) |cond#0| |ifT#0| |ifF#0| |s#0@@243| |r#0@@80|)) )))
(assert (forall (($ly@@212 T@U) (|cond#0@@0| T@U) (|ifT#0@@0| T@U) (|ifF#0@@0| T@U) (|s#0@@244| T@U) (|r#0@@81| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@212) LayerTypeType) (= (type |cond#0@@0|) DatatypeTypeType)) (= (type |ifT#0@@0|) DatatypeTypeType)) (= (type |ifF#0@@0|) DatatypeTypeType)) (= (type |s#0@@244|) DatatypeTypeType)) (= (type |r#0@@81|) DatatypeTypeType)) (and (=> (_module.__default.evalIfElse $ly@@212 |cond#0@@0| |ifT#0@@0| |ifF#0@@0| |s#0@@244| |r#0@@81|) (_module.__default.evalIfElse $LZ |cond#0@@0| |ifT#0@@0| |ifF#0@@0| |s#0@@244| |r#0@@81|)) (=> (_module.__default.evalIfElse $LZ |cond#0@@0| |ifT#0@@0| |ifF#0@@0| |s#0@@244| |r#0@@81|) (_module.__default.evalIfElse $ly@@212 |cond#0@@0| |ifT#0@@0| |ifF#0@@0| |s#0@@244| |r#0@@81|)))) :qid |ARMdefsd.1284:11| :skolemid |2968| :pattern ( (_module.__default.evalIfElse (AsFuelBottom $ly@@212) |cond#0@@0| |ifT#0@@0| |ifF#0@@0| |s#0@@244| |r#0@@81|)) )))
(assert (= (type Tclass._module.code) TyType))
(assert (= (Tag Tclass._module.code) Tagclass._module.code))
(assert (forall ((bx@@112 T@U) ) (!  (=> (and (= (type bx@@112) BoxType) ($IsBox bx@@112 Tclass._module.code)) (and (= ($Box ($Unbox DatatypeTypeType bx@@112)) bx@@112) ($Is ($Unbox DatatypeTypeType bx@@112) Tclass._module.code))) :qid |unknown.0:0| :skolemid |2969| :pattern ( ($IsBox bx@@112 Tclass._module.code)) )))
(assert  (=> true (forall (($ly@@213 T@U) (|cond#0@@1| T@U) (|ifT#0@@1| T@U) (|ifF#0@@1| T@U) (|s#0@@245| T@U) (|r#0@@82| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@213) LayerTypeType) (= (type |cond#0@@1|) DatatypeTypeType)) (= (type |ifT#0@@1|) DatatypeTypeType)) (= (type |ifF#0@@1|) DatatypeTypeType)) (= (type |s#0@@245|) DatatypeTypeType)) (= (type |r#0@@82|) DatatypeTypeType)) (or (|_module.__default.evalIfElse#canCall| |cond#0@@1| |ifT#0@@1| |ifF#0@@1| |s#0@@245| |r#0@@82|) (and (and (and (and ($Is |cond#0@@1| Tclass._module.obool) ($Is |ifT#0@@1| Tclass._module.code)) ($Is |ifF#0@@1| Tclass._module.code)) ($Is |s#0@@245| Tclass._module.state)) ($Is |r#0@@82| Tclass._module.state)))) true) :qid |ARMdefsd.1284:11| :skolemid |2970| :pattern ( (_module.__default.evalIfElse $ly@@213 |cond#0@@1| |ifT#0@@1| |ifF#0@@1| |s#0@@245| |r#0@@82|)) ))))
(assert (forall (($ly@@214 T@U) ($Heap@@234 T@U) (|cond#0@@2| T@U) (|ifT#0@@2| T@U) (|ifF#0@@2| T@U) (|s#0@@246| T@U) (|r#0@@83| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type $ly@@214) LayerTypeType) (= (type $Heap@@234) (MapType1Type refType))) (= (type |cond#0@@2|) DatatypeTypeType)) (= (type |ifT#0@@2|) DatatypeTypeType)) (= (type |ifF#0@@2|) DatatypeTypeType)) (= (type |s#0@@246|) DatatypeTypeType)) (= (type |r#0@@83|) DatatypeTypeType)) (and (and (and (and (and ($IsGoodHeap $Heap@@234) ($Is |cond#0@@2| Tclass._module.obool)) ($Is |ifT#0@@2| Tclass._module.code)) ($Is |ifF#0@@2| Tclass._module.code)) ($Is |s#0@@246| Tclass._module.state)) ($Is |r#0@@83| Tclass._module.state))) (and (=> (|_module.__default.evalIfElse#requires| $ly@@214 |cond#0@@2| |ifT#0@@2| |ifF#0@@2| |s#0@@246| |r#0@@83|) true) (=> true (|_module.__default.evalIfElse#requires| $ly@@214 |cond#0@@2| |ifT#0@@2| |ifF#0@@2| |s#0@@246| |r#0@@83|)))) :qid |ARMdefsd.1284:11| :skolemid |2971| :pattern ( (|_module.__default.evalIfElse#requires| $ly@@214 |cond#0@@2| |ifT#0@@2| |ifF#0@@2| |s#0@@246| |r#0@@83|) ($IsGoodHeap $Heap@@234)) )))
(assert  (=> true (forall (($ly@@215 T@U) ($Heap@@235 T@U) (|cond#0@@3| T@U) (|ifT#0@@3| T@U) (|ifF#0@@3| T@U) (|s#0@@247| T@U) (|r#0@@84| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type $ly@@215) LayerTypeType) (= (type $Heap@@235) (MapType1Type refType))) (= (type |cond#0@@3|) DatatypeTypeType)) (= (type |ifT#0@@3|) DatatypeTypeType)) (= (type |ifF#0@@3|) DatatypeTypeType)) (= (type |s#0@@247|) DatatypeTypeType)) (= (type |r#0@@84|) DatatypeTypeType)) (or (|_module.__default.evalIfElse#canCall| |cond#0@@3| |ifT#0@@3| |ifF#0@@3| |s#0@@247| |r#0@@84|) (and (and (and (and (and ($IsGoodHeap $Heap@@235) ($Is |cond#0@@3| Tclass._module.obool)) ($Is |ifT#0@@3| Tclass._module.code)) ($Is |ifF#0@@3| Tclass._module.code)) ($Is |s#0@@247| Tclass._module.state)) ($Is |r#0@@84| Tclass._module.state)))) (and (and (and (and (and (and (|_module.__default.ValidState#canCall| |s#0@@247|) (=> (_module.__default.ValidState |s#0@@247|) (_module.state.State_q |s#0@@247|))) (=> (and (_module.state.State_q |s#0@@247|) (_module.state.ok |s#0@@247|)) (and (_module.obool.OCmp_q |cond#0@@3|) (|_module.__default.ValidOperand#canCall| (_module.obool.o1 |cond#0@@3|))))) (=> (and (and (_module.obool.OCmp_q |cond#0@@3|) (|_module.__default.ValidOperand#canCall| (_module.obool.o1 |cond#0@@3|))) (_module.__default.ValidOperand (_module.obool.o1 |cond#0@@3|))) (and (_module.obool.OCmp_q |cond#0@@3|) (|_module.__default.ValidOperand#canCall| (_module.obool.o2 |cond#0@@3|))))) (=> (and (and (and (_module.__default.ValidState |s#0@@247|) (_module.state.ok |s#0@@247|)) (_module.__default.ValidOperand (_module.obool.o1 |cond#0@@3|))) (_module.__default.ValidOperand (_module.obool.o2 |cond#0@@3|))) (forall ((|s'#0@@2| T@U) ) (!  (=> (and (= (type |s'#0@@2|) DatatypeTypeType) ($Is |s'#0@@2| Tclass._module.state)) (and (|_module.__default.evalGuard#canCall| |s#0@@247| |cond#0@@3| |s'#0@@2|) (=> (_module.__default.evalGuard |s#0@@247| |cond#0@@3| |s'#0@@2|) (and (and (|_module.__default.evalOBool#canCall| |s#0@@247| |cond#0@@3|) (=> (_module.__default.evalOBool |s#0@@247| |cond#0@@3|) (|_module.__default.evalCode#canCall| |ifT#0@@3| |s'#0@@2| |r#0@@84|))) (=> (not (_module.__default.evalOBool |s#0@@247| |cond#0@@3|)) (|_module.__default.evalCode#canCall| |ifF#0@@3| |s'#0@@2| |r#0@@84|)))))) :qid |ARMdefsd.1288:16| :skolemid |2972| :pattern ( (_module.__default.evalCode $ly@@215 |ifF#0@@3| |s'#0@@2| |r#0@@84|)) :pattern ( (_module.__default.evalCode $ly@@215 |ifT#0@@3| |s'#0@@2| |r#0@@84|)) :pattern ( (_module.__default.evalGuard |s#0@@247| |cond#0@@3| |s'#0@@2|)) )))) (=> (not (and (and (and (_module.__default.ValidState |s#0@@247|) (_module.state.ok |s#0@@247|)) (_module.__default.ValidOperand (_module.obool.o1 |cond#0@@3|))) (_module.__default.ValidOperand (_module.obool.o2 |cond#0@@3|)))) (_module.state.State_q |r#0@@84|))) (and (=> (_module.__default.evalIfElse ($LS $ly@@215) |cond#0@@3| |ifT#0@@3| |ifF#0@@3| |s#0@@247| |r#0@@84|) (ite  (and (and (and (_module.__default.ValidState |s#0@@247|) (_module.state.ok |s#0@@247|)) (_module.__default.ValidOperand (_module.obool.o1 |cond#0@@3|))) (_module.__default.ValidOperand (_module.obool.o2 |cond#0@@3|))) (exists ((|s'#0@@3| T@U) (|tr$ly#0@@11| T@U) ) (!  (and (and (= (type |s'#0@@3|) DatatypeTypeType) (= (type |tr$ly#0@@11|) LayerTypeType)) (and ($Is |s'#0@@3| Tclass._module.state) (and (_module.__default.evalGuard |s#0@@247| |cond#0@@3| |s'#0@@3|) (ite (_module.__default.evalOBool |s#0@@247| |cond#0@@3|) (_module.__default.evalCode $ly@@215 |ifT#0@@3| |s'#0@@3| |r#0@@84|) (_module.__default.evalCode $ly@@215 |ifF#0@@3| |s'#0@@3| |r#0@@84|))))) :qid |ARMdefsd.1288:16| :skolemid |2973| :pattern ( (_module.__default.evalCode |tr$ly#0@@11| |ifF#0@@3| |s'#0@@3| |r#0@@84|)) :pattern ( (_module.__default.evalCode |tr$ly#0@@11| |ifT#0@@3| |s'#0@@3| |r#0@@84|)) :pattern ( (_module.__default.evalGuard |s#0@@247| |cond#0@@3| |s'#0@@3|) (AsFuelBottom |tr$ly#0@@11|)) ))  (not (_module.state.ok |r#0@@84|)))) (=> (ite  (and (and (and (_module.__default.ValidState |s#0@@247|) (_module.state.ok |s#0@@247|)) (_module.__default.ValidOperand (_module.obool.o1 |cond#0@@3|))) (_module.__default.ValidOperand (_module.obool.o2 |cond#0@@3|))) (exists ((|s'#0@@4| T@U) (|tr$ly#0@@12| T@U) ) (!  (and (and (= (type |s'#0@@4|) DatatypeTypeType) (= (type |tr$ly#0@@12|) LayerTypeType)) (and ($Is |s'#0@@4| Tclass._module.state) (and (_module.__default.evalGuard |s#0@@247| |cond#0@@3| |s'#0@@4|) (ite (_module.__default.evalOBool |s#0@@247| |cond#0@@3|) (_module.__default.evalCode $ly@@215 |ifT#0@@3| |s'#0@@4| |r#0@@84|) (_module.__default.evalCode $ly@@215 |ifF#0@@3| |s'#0@@4| |r#0@@84|))))) :qid |ARMdefsd.1288:16| :skolemid |2973| :pattern ( (_module.__default.evalCode |tr$ly#0@@12| |ifF#0@@3| |s'#0@@4| |r#0@@84|)) :pattern ( (_module.__default.evalCode |tr$ly#0@@12| |ifT#0@@3| |s'#0@@4| |r#0@@84|)) :pattern ( (_module.__default.evalGuard |s#0@@247| |cond#0@@3| |s'#0@@4|) (AsFuelBottom |tr$ly#0@@12|)) ))  (not (_module.state.ok |r#0@@84|))) (_module.__default.evalIfElse ($LS $ly@@215) |cond#0@@3| |ifT#0@@3| |ifF#0@@3| |s#0@@247| |r#0@@84|))))) :qid |ARMdefsd.1284:11| :skolemid |2974| :pattern ( (_module.__default.evalIfElse ($LS $ly@@215) |cond#0@@3| |ifT#0@@3| |ifF#0@@3| |s#0@@247| |r#0@@84|) ($IsGoodHeap $Heap@@235)) ))))
(assert  (=> true (forall (($ly@@216 T@U) ($Heap@@236 T@U) (|cond#0@@4| T@U) (|ifT#0@@4| T@U) (|ifF#0@@4| T@U) (|s#0@@248| T@U) (|r#0@@85| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type $ly@@216) LayerTypeType) (= (type $Heap@@236) (MapType1Type refType))) (= (type |cond#0@@4|) DatatypeTypeType)) (= (type |ifT#0@@4|) DatatypeTypeType)) (= (type |ifF#0@@4|) DatatypeTypeType)) (= (type |s#0@@248|) DatatypeTypeType)) (= (type |r#0@@85|) DatatypeTypeType)) (or (|_module.__default.evalIfElse#canCall| (Lit |cond#0@@4|) (Lit |ifT#0@@4|) (Lit |ifF#0@@4|) (Lit |s#0@@248|) |r#0@@85|) (and (and (and (and (and ($IsGoodHeap $Heap@@236) ($Is |cond#0@@4| Tclass._module.obool)) ($Is |ifT#0@@4| Tclass._module.code)) ($Is |ifF#0@@4| Tclass._module.code)) ($Is |s#0@@248| Tclass._module.state)) ($Is |r#0@@85| Tclass._module.state)))) (and (and (and (and (and (and (|_module.__default.ValidState#canCall| (Lit |s#0@@248|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@248|))))) (_module.state.State_q (Lit |s#0@@248|)))) (=> (and (_module.state.State_q (Lit |s#0@@248|)) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@248|)))))) (and (_module.obool.OCmp_q (Lit |cond#0@@4|)) (|_module.__default.ValidOperand#canCall| (Lit (_module.obool.o1 (Lit |cond#0@@4|))))))) (=> (and (and (_module.obool.OCmp_q (Lit |cond#0@@4|)) (|_module.__default.ValidOperand#canCall| (Lit (_module.obool.o1 (Lit |cond#0@@4|))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@4|)))))))) (and (_module.obool.OCmp_q (Lit |cond#0@@4|)) (|_module.__default.ValidOperand#canCall| (Lit (_module.obool.o2 (Lit |cond#0@@4|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (and (and (_module.__default.ValidState (Lit |s#0@@248|)) (_module.state.ok (Lit |s#0@@248|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@4|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |cond#0@@4|)))))))) (forall ((|s'#1@@2| T@U) ) (!  (=> (and (= (type |s'#1@@2|) DatatypeTypeType) ($Is |s'#1@@2| Tclass._module.state)) (and (|_module.__default.evalGuard#canCall| (Lit |s#0@@248|) (Lit |cond#0@@4|) |s'#1@@2|) (=> (_module.__default.evalGuard (Lit |s#0@@248|) (Lit |cond#0@@4|) |s'#1@@2|) (and (and (|_module.__default.evalOBool#canCall| (Lit |s#0@@248|) (Lit |cond#0@@4|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.evalOBool (Lit |s#0@@248|) (Lit |cond#0@@4|))))) (|_module.__default.evalCode#canCall| (Lit |ifT#0@@4|) |s'#1@@2| |r#0@@85|))) (=> (not (U_2_bool (Lit (bool_2_U (_module.__default.evalOBool (Lit |s#0@@248|) (Lit |cond#0@@4|)))))) (|_module.__default.evalCode#canCall| (Lit |ifF#0@@4|) |s'#1@@2| |r#0@@85|)))))) :qid |ARMdefsd.1288:16| :skolemid |2975| :pattern ( (_module.__default.evalCode ($LS $ly@@216) |ifF#0@@4| |s'#1@@2| |r#0@@85|)) :pattern ( (_module.__default.evalCode ($LS $ly@@216) |ifT#0@@4| |s'#1@@2| |r#0@@85|)) :pattern ( (_module.__default.evalGuard |s#0@@248| |cond#0@@4| |s'#1@@2|)) )))) (=> (not (U_2_bool (Lit (bool_2_U  (and (and (and (_module.__default.ValidState (Lit |s#0@@248|)) (_module.state.ok (Lit |s#0@@248|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@4|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |cond#0@@4|))))))))) (_module.state.State_q |r#0@@85|))) (and (=> (_module.__default.evalIfElse ($LS $ly@@216) (Lit |cond#0@@4|) (Lit |ifT#0@@4|) (Lit |ifF#0@@4|) (Lit |s#0@@248|) |r#0@@85|) (ite  (and (and (and (_module.__default.ValidState (Lit |s#0@@248|)) (_module.state.ok (Lit |s#0@@248|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@4|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |cond#0@@4|))))) (exists ((|s'#1@@3| T@U) (|tr$ly#1@@9| T@U) ) (!  (and (and (= (type |s'#1@@3|) DatatypeTypeType) (= (type |tr$ly#1@@9|) LayerTypeType)) (and ($Is |s'#1@@3| Tclass._module.state) (and (_module.__default.evalGuard (Lit |s#0@@248|) (Lit |cond#0@@4|) |s'#1@@3|) (ite (_module.__default.evalOBool (Lit |s#0@@248|) (Lit |cond#0@@4|)) (_module.__default.evalCode ($LS $ly@@216) (Lit |ifT#0@@4|) |s'#1@@3| |r#0@@85|) (_module.__default.evalCode ($LS $ly@@216) (Lit |ifF#0@@4|) |s'#1@@3| |r#0@@85|))))) :qid |ARMdefsd.1288:16| :skolemid |2976| :pattern ( (_module.__default.evalCode |tr$ly#1@@9| |ifF#0@@4| |s'#1@@3| |r#0@@85|)) :pattern ( (_module.__default.evalCode |tr$ly#1@@9| |ifT#0@@4| |s'#1@@3| |r#0@@85|)) :pattern ( (_module.__default.evalGuard |s#0@@248| |cond#0@@4| |s'#1@@3|) (AsFuelBottom |tr$ly#1@@9|)) ))  (not (_module.state.ok |r#0@@85|)))) (=> (ite  (and (and (and (_module.__default.ValidState (Lit |s#0@@248|)) (_module.state.ok (Lit |s#0@@248|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@4|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |cond#0@@4|))))) (exists ((|s'#1@@4| T@U) (|tr$ly#1@@10| T@U) ) (!  (and (and (= (type |s'#1@@4|) DatatypeTypeType) (= (type |tr$ly#1@@10|) LayerTypeType)) (and ($Is |s'#1@@4| Tclass._module.state) (and (_module.__default.evalGuard (Lit |s#0@@248|) (Lit |cond#0@@4|) |s'#1@@4|) (ite (_module.__default.evalOBool (Lit |s#0@@248|) (Lit |cond#0@@4|)) (_module.__default.evalCode ($LS $ly@@216) (Lit |ifT#0@@4|) |s'#1@@4| |r#0@@85|) (_module.__default.evalCode ($LS $ly@@216) (Lit |ifF#0@@4|) |s'#1@@4| |r#0@@85|))))) :qid |ARMdefsd.1288:16| :skolemid |2976| :pattern ( (_module.__default.evalCode |tr$ly#1@@10| |ifF#0@@4| |s'#1@@4| |r#0@@85|)) :pattern ( (_module.__default.evalCode |tr$ly#1@@10| |ifT#0@@4| |s'#1@@4| |r#0@@85|)) :pattern ( (_module.__default.evalGuard |s#0@@248| |cond#0@@4| |s'#1@@4|) (AsFuelBottom |tr$ly#1@@10|)) ))  (not (_module.state.ok |r#0@@85|))) (_module.__default.evalIfElse ($LS $ly@@216) (Lit |cond#0@@4|) (Lit |ifT#0@@4|) (Lit |ifF#0@@4|) (Lit |s#0@@248|) |r#0@@85|))))) :qid |ARMdefsd.1284:11| :weight 3 :skolemid |2977| :pattern ( (_module.__default.evalIfElse ($LS $ly@@216) (Lit |cond#0@@4|) (Lit |ifT#0@@4|) (Lit |ifF#0@@4|) (Lit |s#0@@248|) |r#0@@85|) ($IsGoodHeap $Heap@@236)) ))))
(assert  (=> true (forall (($ly@@217 T@U) ($Heap@@237 T@U) (|cond#0@@5| T@U) (|ifT#0@@5| T@U) (|ifF#0@@5| T@U) (|s#0@@249| T@U) (|r#0@@86| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type $ly@@217) LayerTypeType) (= (type $Heap@@237) (MapType1Type refType))) (= (type |cond#0@@5|) DatatypeTypeType)) (= (type |ifT#0@@5|) DatatypeTypeType)) (= (type |ifF#0@@5|) DatatypeTypeType)) (= (type |s#0@@249|) DatatypeTypeType)) (= (type |r#0@@86|) DatatypeTypeType)) (or (|_module.__default.evalIfElse#canCall| (Lit |cond#0@@5|) (Lit |ifT#0@@5|) (Lit |ifF#0@@5|) (Lit |s#0@@249|) (Lit |r#0@@86|)) (and (and (and (and (and ($IsGoodHeap $Heap@@237) ($Is |cond#0@@5| Tclass._module.obool)) ($Is |ifT#0@@5| Tclass._module.code)) ($Is |ifF#0@@5| Tclass._module.code)) ($Is |s#0@@249| Tclass._module.state)) ($Is |r#0@@86| Tclass._module.state)))) (and (and (and (and (and (and (|_module.__default.ValidState#canCall| (Lit |s#0@@249|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@249|))))) (_module.state.State_q (Lit |s#0@@249|)))) (=> (and (_module.state.State_q (Lit |s#0@@249|)) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@249|)))))) (and (_module.obool.OCmp_q (Lit |cond#0@@5|)) (|_module.__default.ValidOperand#canCall| (Lit (_module.obool.o1 (Lit |cond#0@@5|))))))) (=> (and (and (_module.obool.OCmp_q (Lit |cond#0@@5|)) (|_module.__default.ValidOperand#canCall| (Lit (_module.obool.o1 (Lit |cond#0@@5|))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@5|)))))))) (and (_module.obool.OCmp_q (Lit |cond#0@@5|)) (|_module.__default.ValidOperand#canCall| (Lit (_module.obool.o2 (Lit |cond#0@@5|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (and (and (_module.__default.ValidState (Lit |s#0@@249|)) (_module.state.ok (Lit |s#0@@249|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@5|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |cond#0@@5|)))))))) (forall ((|s'#2| T@U) ) (!  (=> (and (= (type |s'#2|) DatatypeTypeType) ($Is |s'#2| Tclass._module.state)) (and (|_module.__default.evalGuard#canCall| (Lit |s#0@@249|) (Lit |cond#0@@5|) |s'#2|) (=> (_module.__default.evalGuard (Lit |s#0@@249|) (Lit |cond#0@@5|) |s'#2|) (and (and (|_module.__default.evalOBool#canCall| (Lit |s#0@@249|) (Lit |cond#0@@5|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.evalOBool (Lit |s#0@@249|) (Lit |cond#0@@5|))))) (|_module.__default.evalCode#canCall| (Lit |ifT#0@@5|) |s'#2| (Lit |r#0@@86|)))) (=> (not (U_2_bool (Lit (bool_2_U (_module.__default.evalOBool (Lit |s#0@@249|) (Lit |cond#0@@5|)))))) (|_module.__default.evalCode#canCall| (Lit |ifF#0@@5|) |s'#2| (Lit |r#0@@86|))))))) :qid |ARMdefsd.1288:16| :skolemid |2978| :pattern ( (_module.__default.evalCode ($LS $ly@@217) |ifF#0@@5| |s'#2| |r#0@@86|)) :pattern ( (_module.__default.evalCode ($LS $ly@@217) |ifT#0@@5| |s'#2| |r#0@@86|)) :pattern ( (_module.__default.evalGuard |s#0@@249| |cond#0@@5| |s'#2|)) )))) (=> (not (U_2_bool (Lit (bool_2_U  (and (and (and (_module.__default.ValidState (Lit |s#0@@249|)) (_module.state.ok (Lit |s#0@@249|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@5|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |cond#0@@5|))))))))) (_module.state.State_q (Lit |r#0@@86|)))) (and (=> (_module.__default.evalIfElse ($LS $ly@@217) (Lit |cond#0@@5|) (Lit |ifT#0@@5|) (Lit |ifF#0@@5|) (Lit |s#0@@249|) (Lit |r#0@@86|)) (ite  (and (and (and (_module.__default.ValidState (Lit |s#0@@249|)) (_module.state.ok (Lit |s#0@@249|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@5|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |cond#0@@5|))))) (exists ((|s'#2@@0| T@U) (|tr$ly#2@@1| T@U) ) (!  (and (and (= (type |s'#2@@0|) DatatypeTypeType) (= (type |tr$ly#2@@1|) LayerTypeType)) (and ($Is |s'#2@@0| Tclass._module.state) (and (_module.__default.evalGuard (Lit |s#0@@249|) (Lit |cond#0@@5|) |s'#2@@0|) (ite (_module.__default.evalOBool (Lit |s#0@@249|) (Lit |cond#0@@5|)) (_module.__default.evalCode ($LS $ly@@217) (Lit |ifT#0@@5|) |s'#2@@0| (Lit |r#0@@86|)) (_module.__default.evalCode ($LS $ly@@217) (Lit |ifF#0@@5|) |s'#2@@0| (Lit |r#0@@86|)))))) :qid |ARMdefsd.1288:16| :skolemid |2979| :pattern ( (_module.__default.evalCode |tr$ly#2@@1| |ifF#0@@5| |s'#2@@0| |r#0@@86|)) :pattern ( (_module.__default.evalCode |tr$ly#2@@1| |ifT#0@@5| |s'#2@@0| |r#0@@86|)) :pattern ( (_module.__default.evalGuard |s#0@@249| |cond#0@@5| |s'#2@@0|) (AsFuelBottom |tr$ly#2@@1|)) ))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@86|)))))))) (=> (ite  (and (and (and (_module.__default.ValidState (Lit |s#0@@249|)) (_module.state.ok (Lit |s#0@@249|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |cond#0@@5|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |cond#0@@5|))))) (exists ((|s'#2@@1| T@U) (|tr$ly#2@@2| T@U) ) (!  (and (and (= (type |s'#2@@1|) DatatypeTypeType) (= (type |tr$ly#2@@2|) LayerTypeType)) (and ($Is |s'#2@@1| Tclass._module.state) (and (_module.__default.evalGuard (Lit |s#0@@249|) (Lit |cond#0@@5|) |s'#2@@1|) (ite (_module.__default.evalOBool (Lit |s#0@@249|) (Lit |cond#0@@5|)) (_module.__default.evalCode ($LS $ly@@217) (Lit |ifT#0@@5|) |s'#2@@1| (Lit |r#0@@86|)) (_module.__default.evalCode ($LS $ly@@217) (Lit |ifF#0@@5|) |s'#2@@1| (Lit |r#0@@86|)))))) :qid |ARMdefsd.1288:16| :skolemid |2979| :pattern ( (_module.__default.evalCode |tr$ly#2@@2| |ifF#0@@5| |s'#2@@1| |r#0@@86|)) :pattern ( (_module.__default.evalCode |tr$ly#2@@2| |ifT#0@@5| |s'#2@@1| |r#0@@86|)) :pattern ( (_module.__default.evalGuard |s#0@@249| |cond#0@@5| |s'#2@@1|) (AsFuelBottom |tr$ly#2@@2|)) ))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@86|))))))) (_module.__default.evalIfElse ($LS $ly@@217) (Lit |cond#0@@5|) (Lit |ifT#0@@5|) (Lit |ifF#0@@5|) (Lit |s#0@@249|) (Lit |r#0@@86|)))))) :qid |ARMdefsd.1284:11| :weight 3 :skolemid |2980| :pattern ( (_module.__default.evalIfElse ($LS $ly@@217) (Lit |cond#0@@5|) (Lit |ifT#0@@5|) (Lit |ifF#0@@5|) (Lit |s#0@@249|) (Lit |r#0@@86|)) ($IsGoodHeap $Heap@@237)) ))))
(assert (forall (($ly@@218 T@U) (|b#0@@11| T@U) (|c#0@@9| T@U) (|n#0@@6| Int) (|s#0@@250| T@U) (|r#0@@87| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@218) LayerTypeType) (= (type |b#0@@11|) DatatypeTypeType)) (= (type |c#0@@9|) DatatypeTypeType)) (= (type |s#0@@250|) DatatypeTypeType)) (= (type |r#0@@87|) DatatypeTypeType)) (and (=> (_module.__default.evalWhile ($LS $ly@@218) |b#0@@11| |c#0@@9| |n#0@@6| |s#0@@250| |r#0@@87|) (_module.__default.evalWhile $ly@@218 |b#0@@11| |c#0@@9| |n#0@@6| |s#0@@250| |r#0@@87|)) (=> (_module.__default.evalWhile $ly@@218 |b#0@@11| |c#0@@9| |n#0@@6| |s#0@@250| |r#0@@87|) (_module.__default.evalWhile ($LS $ly@@218) |b#0@@11| |c#0@@9| |n#0@@6| |s#0@@250| |r#0@@87|)))) :qid |ARMdefsd.1293:11| :skolemid |2981| :pattern ( (_module.__default.evalWhile ($LS $ly@@218) |b#0@@11| |c#0@@9| |n#0@@6| |s#0@@250| |r#0@@87|)) )))
(assert (forall (($ly@@219 T@U) (|b#0@@12| T@U) (|c#0@@10| T@U) (|n#0@@7| Int) (|s#0@@251| T@U) (|r#0@@88| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@219) LayerTypeType) (= (type |b#0@@12|) DatatypeTypeType)) (= (type |c#0@@10|) DatatypeTypeType)) (= (type |s#0@@251|) DatatypeTypeType)) (= (type |r#0@@88|) DatatypeTypeType)) (and (=> (_module.__default.evalWhile $ly@@219 |b#0@@12| |c#0@@10| |n#0@@7| |s#0@@251| |r#0@@88|) (_module.__default.evalWhile $LZ |b#0@@12| |c#0@@10| |n#0@@7| |s#0@@251| |r#0@@88|)) (=> (_module.__default.evalWhile $LZ |b#0@@12| |c#0@@10| |n#0@@7| |s#0@@251| |r#0@@88|) (_module.__default.evalWhile $ly@@219 |b#0@@12| |c#0@@10| |n#0@@7| |s#0@@251| |r#0@@88|)))) :qid |ARMdefsd.1293:11| :skolemid |2982| :pattern ( (_module.__default.evalWhile (AsFuelBottom $ly@@219) |b#0@@12| |c#0@@10| |n#0@@7| |s#0@@251| |r#0@@88|)) )))
(assert  (=> true (forall (($ly@@220 T@U) (|b#0@@13| T@U) (|c#0@@11| T@U) (|n#0@@8| Int) (|s#0@@252| T@U) (|r#0@@89| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@220) LayerTypeType) (= (type |b#0@@13|) DatatypeTypeType)) (= (type |c#0@@11|) DatatypeTypeType)) (= (type |s#0@@252|) DatatypeTypeType)) (= (type |r#0@@89|) DatatypeTypeType)) (or (|_module.__default.evalWhile#canCall| |b#0@@13| |c#0@@11| |n#0@@8| |s#0@@252| |r#0@@89|) (and (and (and (and ($Is |b#0@@13| Tclass._module.obool) ($Is |c#0@@11| Tclass._module.code)) (INTERNAL_le_boogie 0 |n#0@@8|)) ($Is |s#0@@252| Tclass._module.state)) ($Is |r#0@@89| Tclass._module.state)))) true) :qid |ARMdefsd.1293:11| :skolemid |2983| :pattern ( (_module.__default.evalWhile $ly@@220 |b#0@@13| |c#0@@11| |n#0@@8| |s#0@@252| |r#0@@89|)) ))))
(assert (forall (($ly@@221 T@U) ($Heap@@238 T@U) (|b#0@@14| T@U) (|c#0@@12| T@U) (|n#0@@9| Int) (|s#0@@253| T@U) (|r#0@@90| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@221) LayerTypeType) (= (type $Heap@@238) (MapType1Type refType))) (= (type |b#0@@14|) DatatypeTypeType)) (= (type |c#0@@12|) DatatypeTypeType)) (= (type |s#0@@253|) DatatypeTypeType)) (= (type |r#0@@90|) DatatypeTypeType)) (and (and (and (and (and ($IsGoodHeap $Heap@@238) ($Is |b#0@@14| Tclass._module.obool)) ($Is |c#0@@12| Tclass._module.code)) (INTERNAL_le_boogie 0 |n#0@@9|)) ($Is |s#0@@253| Tclass._module.state)) ($Is |r#0@@90| Tclass._module.state))) (and (=> (|_module.__default.evalWhile#requires| $ly@@221 |b#0@@14| |c#0@@12| |n#0@@9| |s#0@@253| |r#0@@90|) true) (=> true (|_module.__default.evalWhile#requires| $ly@@221 |b#0@@14| |c#0@@12| |n#0@@9| |s#0@@253| |r#0@@90|)))) :qid |ARMdefsd.1293:11| :skolemid |2984| :pattern ( (|_module.__default.evalWhile#requires| $ly@@221 |b#0@@14| |c#0@@12| |n#0@@9| |s#0@@253| |r#0@@90|) ($IsGoodHeap $Heap@@238)) )))
(assert  (=> true (forall (($ly@@222 T@U) ($Heap@@239 T@U) (|b#0@@15| T@U) (|c#0@@13| T@U) (|n#0@@10| Int) (|s#0@@254| T@U) (|r#0@@91| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@222) LayerTypeType) (= (type $Heap@@239) (MapType1Type refType))) (= (type |b#0@@15|) DatatypeTypeType)) (= (type |c#0@@13|) DatatypeTypeType)) (= (type |s#0@@254|) DatatypeTypeType)) (= (type |r#0@@91|) DatatypeTypeType)) (or (|_module.__default.evalWhile#canCall| |b#0@@15| |c#0@@13| |n#0@@10| |s#0@@254| |r#0@@91|) (and (and (and (and (and ($IsGoodHeap $Heap@@239) ($Is |b#0@@15| Tclass._module.obool)) ($Is |c#0@@13| Tclass._module.code)) (INTERNAL_le_boogie 0 |n#0@@10|)) ($Is |s#0@@254| Tclass._module.state)) ($Is |r#0@@91| Tclass._module.state)))) (and (and (and (and (and (and (|_module.__default.ValidState#canCall| |s#0@@254|) (=> (_module.__default.ValidState |s#0@@254|) (_module.state.State_q |s#0@@254|))) (=> (and (_module.state.State_q |s#0@@254|) (_module.state.ok |s#0@@254|)) (and (_module.obool.OCmp_q |b#0@@15|) (|_module.__default.ValidOperand#canCall| (_module.obool.o1 |b#0@@15|))))) (=> (and (and (_module.obool.OCmp_q |b#0@@15|) (|_module.__default.ValidOperand#canCall| (_module.obool.o1 |b#0@@15|))) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@15|))) (and (_module.obool.OCmp_q |b#0@@15|) (|_module.__default.ValidOperand#canCall| (_module.obool.o2 |b#0@@15|))))) (=> (and (and (and (_module.__default.ValidState |s#0@@254|) (_module.state.ok |s#0@@254|)) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@15|))) (_module.__default.ValidOperand (_module.obool.o2 |b#0@@15|))) (and (=> (= |n#0@@10| (LitInt 0)) (and (|_module.__default.evalOBool#canCall| |s#0@@254| |b#0@@15|) (=> (not (_module.__default.evalOBool |s#0@@254| |b#0@@15|)) (|_module.__default.evalGuard#canCall| |s#0@@254| |b#0@@15| |r#0@@91|)))) (=> (not (= |n#0@@10| (LitInt 0))) (forall ((|s'#0@@5| T@U) (|r'#0@@2| T@U) ) (!  (=> (and (and (= (type |s'#0@@5|) DatatypeTypeType) (= (type |r'#0@@2|) DatatypeTypeType)) (and ($Is |s'#0@@5| Tclass._module.state) ($Is |r'#0@@2| Tclass._module.state))) (and (and (and (|_module.__default.evalGuard#canCall| |s#0@@254| |b#0@@15| |s'#0@@5|) (=> (_module.__default.evalGuard |s#0@@254| |b#0@@15| |s'#0@@5|) (|_module.__default.evalOBool#canCall| |s#0@@254| |b#0@@15|))) (=> (and (|_module.__default.evalOBool#canCall| |s#0@@254| |b#0@@15|) (_module.__default.evalOBool |s#0@@254| |b#0@@15|)) (|_module.__default.evalCode#canCall| |c#0@@13| |s'#0@@5| |r'#0@@2|))) (=> (and (|_module.__default.evalCode#canCall| |c#0@@13| |s'#0@@5| |r'#0@@2|) (_module.__default.evalCode $ly@@222 |c#0@@13| |s'#0@@5| |r'#0@@2|)) (|_module.__default.evalWhile#canCall| |b#0@@15| |c#0@@13| (INTERNAL_sub_boogie |n#0@@10| 1) |r'#0@@2| |r#0@@91|)))) :qid |ARMdefsd.1300:20| :skolemid |2985| :pattern ( (_module.__default.evalWhile $ly@@222 |b#0@@15| |c#0@@13| (INTERNAL_sub_boogie |n#0@@10| 1) |r'#0@@2| |r#0@@91|) (_module.__default.evalGuard |s#0@@254| |b#0@@15| |s'#0@@5|)) :pattern ( (_module.__default.evalCode $ly@@222 |c#0@@13| |s'#0@@5| |r'#0@@2|)) )))))) (=> (not (and (and (and (_module.__default.ValidState |s#0@@254|) (_module.state.ok |s#0@@254|)) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@15|))) (_module.__default.ValidOperand (_module.obool.o2 |b#0@@15|)))) (_module.state.State_q |r#0@@91|))) (and (=> (_module.__default.evalWhile ($LS $ly@@222) |b#0@@15| |c#0@@13| |n#0@@10| |s#0@@254| |r#0@@91|) (ite  (and (and (and (_module.__default.ValidState |s#0@@254|) (_module.state.ok |s#0@@254|)) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@15|))) (_module.__default.ValidOperand (_module.obool.o2 |b#0@@15|))) (ite (= |n#0@@10| (LitInt 0))  (and (not (_module.__default.evalOBool |s#0@@254| |b#0@@15|)) (_module.__default.evalGuard |s#0@@254| |b#0@@15| |r#0@@91|)) (exists ((|s'#0@@6| T@U) (|r'#0@@3| T@U) (|tr$ly#0@@13| T@U) ) (!  (and (and (and (= (type |s'#0@@6|) DatatypeTypeType) (= (type |r'#0@@3|) DatatypeTypeType)) (= (type |tr$ly#0@@13|) LayerTypeType)) (and (and ($Is |s'#0@@6| Tclass._module.state) ($Is |r'#0@@3| Tclass._module.state)) (and (and (and (_module.__default.evalGuard |s#0@@254| |b#0@@15| |s'#0@@6|) (_module.__default.evalOBool |s#0@@254| |b#0@@15|)) (_module.__default.evalCode $ly@@222 |c#0@@13| |s'#0@@6| |r'#0@@3|)) (_module.__default.evalWhile $ly@@222 |b#0@@15| |c#0@@13| (INTERNAL_sub_boogie |n#0@@10| 1) |r'#0@@3| |r#0@@91|)))) :qid |ARMdefsd.1300:20| :skolemid |2986| :pattern ( (_module.__default.evalWhile |tr$ly#0@@13| |b#0@@15| |c#0@@13| (INTERNAL_sub_boogie |n#0@@10| 1) |r'#0@@3| |r#0@@91|) (_module.__default.evalGuard |s#0@@254| |b#0@@15| |s'#0@@6|)) :pattern ( (_module.__default.evalCode |tr$ly#0@@13| |c#0@@13| |s'#0@@6| |r'#0@@3|)) )))  (not (_module.state.ok |r#0@@91|)))) (=> (ite  (and (and (and (_module.__default.ValidState |s#0@@254|) (_module.state.ok |s#0@@254|)) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@15|))) (_module.__default.ValidOperand (_module.obool.o2 |b#0@@15|))) (ite (= |n#0@@10| (LitInt 0))  (and (not (_module.__default.evalOBool |s#0@@254| |b#0@@15|)) (_module.__default.evalGuard |s#0@@254| |b#0@@15| |r#0@@91|)) (exists ((|s'#0@@7| T@U) (|r'#0@@4| T@U) (|tr$ly#0@@14| T@U) ) (!  (and (and (and (= (type |s'#0@@7|) DatatypeTypeType) (= (type |r'#0@@4|) DatatypeTypeType)) (= (type |tr$ly#0@@14|) LayerTypeType)) (and (and ($Is |s'#0@@7| Tclass._module.state) ($Is |r'#0@@4| Tclass._module.state)) (and (and (and (_module.__default.evalGuard |s#0@@254| |b#0@@15| |s'#0@@7|) (_module.__default.evalOBool |s#0@@254| |b#0@@15|)) (_module.__default.evalCode $ly@@222 |c#0@@13| |s'#0@@7| |r'#0@@4|)) (_module.__default.evalWhile $ly@@222 |b#0@@15| |c#0@@13| (INTERNAL_sub_boogie |n#0@@10| 1) |r'#0@@4| |r#0@@91|)))) :qid |ARMdefsd.1300:20| :skolemid |2986| :pattern ( (_module.__default.evalWhile |tr$ly#0@@14| |b#0@@15| |c#0@@13| (INTERNAL_sub_boogie |n#0@@10| 1) |r'#0@@4| |r#0@@91|) (_module.__default.evalGuard |s#0@@254| |b#0@@15| |s'#0@@7|)) :pattern ( (_module.__default.evalCode |tr$ly#0@@14| |c#0@@13| |s'#0@@7| |r'#0@@4|)) )))  (not (_module.state.ok |r#0@@91|))) (_module.__default.evalWhile ($LS $ly@@222) |b#0@@15| |c#0@@13| |n#0@@10| |s#0@@254| |r#0@@91|))))) :qid |ARMdefsd.1293:11| :skolemid |2987| :pattern ( (_module.__default.evalWhile ($LS $ly@@222) |b#0@@15| |c#0@@13| |n#0@@10| |s#0@@254| |r#0@@91|) ($IsGoodHeap $Heap@@239)) ))))
(assert  (=> true (forall (($ly@@223 T@U) ($Heap@@240 T@U) (|b#0@@16| T@U) (|c#0@@14| T@U) (|n#0@@11| Int) (|s#0@@255| T@U) (|r#0@@92| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@223) LayerTypeType) (= (type $Heap@@240) (MapType1Type refType))) (= (type |b#0@@16|) DatatypeTypeType)) (= (type |c#0@@14|) DatatypeTypeType)) (= (type |s#0@@255|) DatatypeTypeType)) (= (type |r#0@@92|) DatatypeTypeType)) (or (|_module.__default.evalWhile#canCall| |b#0@@16| (Lit |c#0@@14|) (LitInt |n#0@@11|) |s#0@@255| |r#0@@92|) (and (and (and (and (and ($IsGoodHeap $Heap@@240) ($Is |b#0@@16| Tclass._module.obool)) ($Is |c#0@@14| Tclass._module.code)) (INTERNAL_le_boogie 0 |n#0@@11|)) ($Is |s#0@@255| Tclass._module.state)) ($Is |r#0@@92| Tclass._module.state)))) (and (and (and (and (and (and (|_module.__default.ValidState#canCall| |s#0@@255|) (=> (_module.__default.ValidState |s#0@@255|) (_module.state.State_q |s#0@@255|))) (=> (and (_module.state.State_q |s#0@@255|) (_module.state.ok |s#0@@255|)) (and (_module.obool.OCmp_q |b#0@@16|) (|_module.__default.ValidOperand#canCall| (_module.obool.o1 |b#0@@16|))))) (=> (and (and (_module.obool.OCmp_q |b#0@@16|) (|_module.__default.ValidOperand#canCall| (_module.obool.o1 |b#0@@16|))) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@16|))) (and (_module.obool.OCmp_q |b#0@@16|) (|_module.__default.ValidOperand#canCall| (_module.obool.o2 |b#0@@16|))))) (=> (and (and (and (_module.__default.ValidState |s#0@@255|) (_module.state.ok |s#0@@255|)) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@16|))) (_module.__default.ValidOperand (_module.obool.o2 |b#0@@16|))) (and (=> (= (LitInt |n#0@@11|) (LitInt 0)) (and (|_module.__default.evalOBool#canCall| |s#0@@255| |b#0@@16|) (=> (not (_module.__default.evalOBool |s#0@@255| |b#0@@16|)) (|_module.__default.evalGuard#canCall| |s#0@@255| |b#0@@16| |r#0@@92|)))) (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (forall ((|s'#1@@5| T@U) (|r'#1@@2| T@U) ) (!  (=> (and (and (= (type |s'#1@@5|) DatatypeTypeType) (= (type |r'#1@@2|) DatatypeTypeType)) (and ($Is |s'#1@@5| Tclass._module.state) ($Is |r'#1@@2| Tclass._module.state))) (and (and (and (|_module.__default.evalGuard#canCall| |s#0@@255| |b#0@@16| |s'#1@@5|) (=> (_module.__default.evalGuard |s#0@@255| |b#0@@16| |s'#1@@5|) (|_module.__default.evalOBool#canCall| |s#0@@255| |b#0@@16|))) (=> (and (|_module.__default.evalOBool#canCall| |s#0@@255| |b#0@@16|) (_module.__default.evalOBool |s#0@@255| |b#0@@16|)) (|_module.__default.evalCode#canCall| (Lit |c#0@@14|) |s'#1@@5| |r'#1@@2|))) (=> (and (|_module.__default.evalCode#canCall| (Lit |c#0@@14|) |s'#1@@5| |r'#1@@2|) (_module.__default.evalCode ($LS $ly@@223) (Lit |c#0@@14|) |s'#1@@5| |r'#1@@2|)) (|_module.__default.evalWhile#canCall| |b#0@@16| (Lit |c#0@@14|) (LitInt (INTERNAL_sub_boogie |n#0@@11| 1)) |r'#1@@2| |r#0@@92|)))) :qid |ARMdefsd.1300:20| :skolemid |2988| :pattern ( (_module.__default.evalWhile ($LS $ly@@223) |b#0@@16| |c#0@@14| (INTERNAL_sub_boogie |n#0@@11| 1) |r'#1@@2| |r#0@@92|) (_module.__default.evalGuard |s#0@@255| |b#0@@16| |s'#1@@5|)) :pattern ( (_module.__default.evalCode ($LS $ly@@223) |c#0@@14| |s'#1@@5| |r'#1@@2|)) )))))) (=> (not (and (and (and (_module.__default.ValidState |s#0@@255|) (_module.state.ok |s#0@@255|)) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@16|))) (_module.__default.ValidOperand (_module.obool.o2 |b#0@@16|)))) (_module.state.State_q |r#0@@92|))) (and (=> (_module.__default.evalWhile ($LS $ly@@223) |b#0@@16| (Lit |c#0@@14|) (LitInt |n#0@@11|) |s#0@@255| |r#0@@92|) (ite  (and (and (and (_module.__default.ValidState |s#0@@255|) (_module.state.ok |s#0@@255|)) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@16|))) (_module.__default.ValidOperand (_module.obool.o2 |b#0@@16|))) (ite (= (LitInt |n#0@@11|) (LitInt 0))  (and (not (_module.__default.evalOBool |s#0@@255| |b#0@@16|)) (_module.__default.evalGuard |s#0@@255| |b#0@@16| |r#0@@92|)) (exists ((|s'#1@@6| T@U) (|r'#1@@3| T@U) (|tr$ly#1@@11| T@U) ) (!  (and (and (and (= (type |s'#1@@6|) DatatypeTypeType) (= (type |r'#1@@3|) DatatypeTypeType)) (= (type |tr$ly#1@@11|) LayerTypeType)) (and (and ($Is |s'#1@@6| Tclass._module.state) ($Is |r'#1@@3| Tclass._module.state)) (and (and (and (_module.__default.evalGuard |s#0@@255| |b#0@@16| |s'#1@@6|) (_module.__default.evalOBool |s#0@@255| |b#0@@16|)) (_module.__default.evalCode ($LS $ly@@223) (Lit |c#0@@14|) |s'#1@@6| |r'#1@@3|)) (_module.__default.evalWhile ($LS $ly@@223) |b#0@@16| (Lit |c#0@@14|) (LitInt (INTERNAL_sub_boogie |n#0@@11| 1)) |r'#1@@3| |r#0@@92|)))) :qid |ARMdefsd.1300:20| :skolemid |2989| :pattern ( (_module.__default.evalWhile |tr$ly#1@@11| |b#0@@16| |c#0@@14| (INTERNAL_sub_boogie |n#0@@11| 1) |r'#1@@3| |r#0@@92|) (_module.__default.evalGuard |s#0@@255| |b#0@@16| |s'#1@@6|)) :pattern ( (_module.__default.evalCode |tr$ly#1@@11| |c#0@@14| |s'#1@@6| |r'#1@@3|)) )))  (not (_module.state.ok |r#0@@92|)))) (=> (ite  (and (and (and (_module.__default.ValidState |s#0@@255|) (_module.state.ok |s#0@@255|)) (_module.__default.ValidOperand (_module.obool.o1 |b#0@@16|))) (_module.__default.ValidOperand (_module.obool.o2 |b#0@@16|))) (ite (= (LitInt |n#0@@11|) (LitInt 0))  (and (not (_module.__default.evalOBool |s#0@@255| |b#0@@16|)) (_module.__default.evalGuard |s#0@@255| |b#0@@16| |r#0@@92|)) (exists ((|s'#1@@7| T@U) (|r'#1@@4| T@U) (|tr$ly#1@@12| T@U) ) (!  (and (and (and (= (type |s'#1@@7|) DatatypeTypeType) (= (type |r'#1@@4|) DatatypeTypeType)) (= (type |tr$ly#1@@12|) LayerTypeType)) (and (and ($Is |s'#1@@7| Tclass._module.state) ($Is |r'#1@@4| Tclass._module.state)) (and (and (and (_module.__default.evalGuard |s#0@@255| |b#0@@16| |s'#1@@7|) (_module.__default.evalOBool |s#0@@255| |b#0@@16|)) (_module.__default.evalCode ($LS $ly@@223) (Lit |c#0@@14|) |s'#1@@7| |r'#1@@4|)) (_module.__default.evalWhile ($LS $ly@@223) |b#0@@16| (Lit |c#0@@14|) (LitInt (INTERNAL_sub_boogie |n#0@@11| 1)) |r'#1@@4| |r#0@@92|)))) :qid |ARMdefsd.1300:20| :skolemid |2989| :pattern ( (_module.__default.evalWhile |tr$ly#1@@12| |b#0@@16| |c#0@@14| (INTERNAL_sub_boogie |n#0@@11| 1) |r'#1@@4| |r#0@@92|) (_module.__default.evalGuard |s#0@@255| |b#0@@16| |s'#1@@7|)) :pattern ( (_module.__default.evalCode |tr$ly#1@@12| |c#0@@14| |s'#1@@7| |r'#1@@4|)) )))  (not (_module.state.ok |r#0@@92|))) (_module.__default.evalWhile ($LS $ly@@223) |b#0@@16| (Lit |c#0@@14|) (LitInt |n#0@@11|) |s#0@@255| |r#0@@92|))))) :qid |ARMdefsd.1293:11| :weight 3 :skolemid |2990| :pattern ( (_module.__default.evalWhile ($LS $ly@@223) |b#0@@16| (Lit |c#0@@14|) (LitInt |n#0@@11|) |s#0@@255| |r#0@@92|) ($IsGoodHeap $Heap@@240)) ))))
(assert  (=> true (forall (($ly@@224 T@U) ($Heap@@241 T@U) (|b#0@@17| T@U) (|c#0@@15| T@U) (|n#0@@12| Int) (|s#0@@256| T@U) (|r#0@@93| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@224) LayerTypeType) (= (type $Heap@@241) (MapType1Type refType))) (= (type |b#0@@17|) DatatypeTypeType)) (= (type |c#0@@15|) DatatypeTypeType)) (= (type |s#0@@256|) DatatypeTypeType)) (= (type |r#0@@93|) DatatypeTypeType)) (or (|_module.__default.evalWhile#canCall| (Lit |b#0@@17|) (Lit |c#0@@15|) (LitInt |n#0@@12|) (Lit |s#0@@256|) (Lit |r#0@@93|)) (and (and (and (and (and ($IsGoodHeap $Heap@@241) ($Is |b#0@@17| Tclass._module.obool)) ($Is |c#0@@15| Tclass._module.code)) (INTERNAL_le_boogie 0 |n#0@@12|)) ($Is |s#0@@256| Tclass._module.state)) ($Is |r#0@@93| Tclass._module.state)))) (and (and (and (and (and (and (|_module.__default.ValidState#canCall| (Lit |s#0@@256|)) (=> (U_2_bool (Lit (bool_2_U (_module.__default.ValidState (Lit |s#0@@256|))))) (_module.state.State_q (Lit |s#0@@256|)))) (=> (and (_module.state.State_q (Lit |s#0@@256|)) (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |s#0@@256|)))))) (and (_module.obool.OCmp_q (Lit |b#0@@17|)) (|_module.__default.ValidOperand#canCall| (Lit (_module.obool.o1 (Lit |b#0@@17|))))))) (=> (and (and (_module.obool.OCmp_q (Lit |b#0@@17|)) (|_module.__default.ValidOperand#canCall| (Lit (_module.obool.o1 (Lit |b#0@@17|))))) (U_2_bool (Lit (bool_2_U (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |b#0@@17|)))))))) (and (_module.obool.OCmp_q (Lit |b#0@@17|)) (|_module.__default.ValidOperand#canCall| (Lit (_module.obool.o2 (Lit |b#0@@17|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (and (and (_module.__default.ValidState (Lit |s#0@@256|)) (_module.state.ok (Lit |s#0@@256|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |b#0@@17|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |b#0@@17|)))))))) (and (=> (= (LitInt |n#0@@12|) (LitInt 0)) (and (|_module.__default.evalOBool#canCall| (Lit |s#0@@256|) (Lit |b#0@@17|)) (=> (not (U_2_bool (Lit (bool_2_U (_module.__default.evalOBool (Lit |s#0@@256|) (Lit |b#0@@17|)))))) (|_module.__default.evalGuard#canCall| (Lit |s#0@@256|) (Lit |b#0@@17|) (Lit |r#0@@93|))))) (=> (not (= (LitInt |n#0@@12|) (LitInt 0))) (forall ((|s'#2@@2| T@U) (|r'#2| T@U) ) (!  (=> (and (and (= (type |s'#2@@2|) DatatypeTypeType) (= (type |r'#2|) DatatypeTypeType)) (and ($Is |s'#2@@2| Tclass._module.state) ($Is |r'#2| Tclass._module.state))) (and (and (and (|_module.__default.evalGuard#canCall| (Lit |s#0@@256|) (Lit |b#0@@17|) |s'#2@@2|) (=> (_module.__default.evalGuard (Lit |s#0@@256|) (Lit |b#0@@17|) |s'#2@@2|) (|_module.__default.evalOBool#canCall| (Lit |s#0@@256|) (Lit |b#0@@17|)))) (=> (and (|_module.__default.evalOBool#canCall| (Lit |s#0@@256|) (Lit |b#0@@17|)) (U_2_bool (Lit (bool_2_U (_module.__default.evalOBool (Lit |s#0@@256|) (Lit |b#0@@17|)))))) (|_module.__default.evalCode#canCall| (Lit |c#0@@15|) |s'#2@@2| |r'#2|))) (=> (and (|_module.__default.evalCode#canCall| (Lit |c#0@@15|) |s'#2@@2| |r'#2|) (_module.__default.evalCode ($LS $ly@@224) (Lit |c#0@@15|) |s'#2@@2| |r'#2|)) (|_module.__default.evalWhile#canCall| (Lit |b#0@@17|) (Lit |c#0@@15|) (LitInt (INTERNAL_sub_boogie |n#0@@12| 1)) |r'#2| (Lit |r#0@@93|))))) :qid |ARMdefsd.1300:20| :skolemid |2991| :pattern ( (_module.__default.evalWhile ($LS $ly@@224) |b#0@@17| |c#0@@15| (INTERNAL_sub_boogie |n#0@@12| 1) |r'#2| |r#0@@93|) (_module.__default.evalGuard |s#0@@256| |b#0@@17| |s'#2@@2|)) :pattern ( (_module.__default.evalCode ($LS $ly@@224) |c#0@@15| |s'#2@@2| |r'#2|)) )))))) (=> (not (U_2_bool (Lit (bool_2_U  (and (and (and (_module.__default.ValidState (Lit |s#0@@256|)) (_module.state.ok (Lit |s#0@@256|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |b#0@@17|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |b#0@@17|))))))))) (_module.state.State_q (Lit |r#0@@93|)))) (and (=> (_module.__default.evalWhile ($LS $ly@@224) (Lit |b#0@@17|) (Lit |c#0@@15|) (LitInt |n#0@@12|) (Lit |s#0@@256|) (Lit |r#0@@93|)) (ite  (and (and (and (_module.__default.ValidState (Lit |s#0@@256|)) (_module.state.ok (Lit |s#0@@256|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |b#0@@17|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |b#0@@17|))))) (ite (= (LitInt |n#0@@12|) (LitInt 0))  (and (not (U_2_bool (Lit (bool_2_U (_module.__default.evalOBool (Lit |s#0@@256|) (Lit |b#0@@17|)))))) (_module.__default.evalGuard (Lit |s#0@@256|) (Lit |b#0@@17|) (Lit |r#0@@93|))) (exists ((|s'#2@@3| T@U) (|r'#2@@0| T@U) (|tr$ly#2@@3| T@U) ) (!  (and (and (and (= (type |s'#2@@3|) DatatypeTypeType) (= (type |r'#2@@0|) DatatypeTypeType)) (= (type |tr$ly#2@@3|) LayerTypeType)) (and (and ($Is |s'#2@@3| Tclass._module.state) ($Is |r'#2@@0| Tclass._module.state)) (and (and (and (_module.__default.evalGuard (Lit |s#0@@256|) (Lit |b#0@@17|) |s'#2@@3|) (_module.__default.evalOBool (Lit |s#0@@256|) (Lit |b#0@@17|))) (_module.__default.evalCode ($LS $ly@@224) (Lit |c#0@@15|) |s'#2@@3| |r'#2@@0|)) (_module.__default.evalWhile ($LS $ly@@224) (Lit |b#0@@17|) (Lit |c#0@@15|) (LitInt (INTERNAL_sub_boogie |n#0@@12| 1)) |r'#2@@0| (Lit |r#0@@93|))))) :qid |ARMdefsd.1300:20| :skolemid |2992| :pattern ( (_module.__default.evalWhile |tr$ly#2@@3| |b#0@@17| |c#0@@15| (INTERNAL_sub_boogie |n#0@@12| 1) |r'#2@@0| |r#0@@93|) (_module.__default.evalGuard |s#0@@256| |b#0@@17| |s'#2@@3|)) :pattern ( (_module.__default.evalCode |tr$ly#2@@3| |c#0@@15| |s'#2@@3| |r'#2@@0|)) )))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@93|)))))))) (=> (ite  (and (and (and (_module.__default.ValidState (Lit |s#0@@256|)) (_module.state.ok (Lit |s#0@@256|))) (_module.__default.ValidOperand (Lit (_module.obool.o1 (Lit |b#0@@17|))))) (_module.__default.ValidOperand (Lit (_module.obool.o2 (Lit |b#0@@17|))))) (ite (= (LitInt |n#0@@12|) (LitInt 0))  (and (not (U_2_bool (Lit (bool_2_U (_module.__default.evalOBool (Lit |s#0@@256|) (Lit |b#0@@17|)))))) (_module.__default.evalGuard (Lit |s#0@@256|) (Lit |b#0@@17|) (Lit |r#0@@93|))) (exists ((|s'#2@@4| T@U) (|r'#2@@1| T@U) (|tr$ly#2@@4| T@U) ) (!  (and (and (and (= (type |s'#2@@4|) DatatypeTypeType) (= (type |r'#2@@1|) DatatypeTypeType)) (= (type |tr$ly#2@@4|) LayerTypeType)) (and (and ($Is |s'#2@@4| Tclass._module.state) ($Is |r'#2@@1| Tclass._module.state)) (and (and (and (_module.__default.evalGuard (Lit |s#0@@256|) (Lit |b#0@@17|) |s'#2@@4|) (_module.__default.evalOBool (Lit |s#0@@256|) (Lit |b#0@@17|))) (_module.__default.evalCode ($LS $ly@@224) (Lit |c#0@@15|) |s'#2@@4| |r'#2@@1|)) (_module.__default.evalWhile ($LS $ly@@224) (Lit |b#0@@17|) (Lit |c#0@@15|) (LitInt (INTERNAL_sub_boogie |n#0@@12| 1)) |r'#2@@1| (Lit |r#0@@93|))))) :qid |ARMdefsd.1300:20| :skolemid |2992| :pattern ( (_module.__default.evalWhile |tr$ly#2@@4| |b#0@@17| |c#0@@15| (INTERNAL_sub_boogie |n#0@@12| 1) |r'#2@@1| |r#0@@93|) (_module.__default.evalGuard |s#0@@256| |b#0@@17| |s'#2@@4|)) :pattern ( (_module.__default.evalCode |tr$ly#2@@4| |c#0@@15| |s'#2@@4| |r'#2@@1|)) )))  (not (U_2_bool (Lit (bool_2_U (_module.state.ok (Lit |r#0@@93|))))))) (_module.__default.evalWhile ($LS $ly@@224) (Lit |b#0@@17|) (Lit |c#0@@15|) (LitInt |n#0@@12|) (Lit |s#0@@256|) (Lit |r#0@@93|)))))) :qid |ARMdefsd.1293:11| :weight 3 :skolemid |2993| :pattern ( (_module.__default.evalWhile ($LS $ly@@224) (Lit |b#0@@17|) (Lit |c#0@@15|) (LitInt |n#0@@12|) (Lit |s#0@@256|) (Lit |r#0@@93|)) ($IsGoodHeap $Heap@@241)) ))))
(assert (forall (($ly@@225 T@U) (|c#0@@16| T@U) (|s#0@@257| T@U) (|r#0@@94| T@U) ) (!  (=> (and (and (and (= (type $ly@@225) LayerTypeType) (= (type |c#0@@16|) DatatypeTypeType)) (= (type |s#0@@257|) DatatypeTypeType)) (= (type |r#0@@94|) DatatypeTypeType)) (and (=> (_module.__default.evalCode ($LS $ly@@225) |c#0@@16| |s#0@@257| |r#0@@94|) (_module.__default.evalCode $ly@@225 |c#0@@16| |s#0@@257| |r#0@@94|)) (=> (_module.__default.evalCode $ly@@225 |c#0@@16| |s#0@@257| |r#0@@94|) (_module.__default.evalCode ($LS $ly@@225) |c#0@@16| |s#0@@257| |r#0@@94|)))) :qid |ARMdefsd.1305:11| :skolemid |2994| :pattern ( (_module.__default.evalCode ($LS $ly@@225) |c#0@@16| |s#0@@257| |r#0@@94|)) )))
(assert (forall (($ly@@226 T@U) (|c#0@@17| T@U) (|s#0@@258| T@U) (|r#0@@95| T@U) ) (!  (=> (and (and (and (= (type $ly@@226) LayerTypeType) (= (type |c#0@@17|) DatatypeTypeType)) (= (type |s#0@@258|) DatatypeTypeType)) (= (type |r#0@@95|) DatatypeTypeType)) (and (=> (_module.__default.evalCode $ly@@226 |c#0@@17| |s#0@@258| |r#0@@95|) (_module.__default.evalCode $LZ |c#0@@17| |s#0@@258| |r#0@@95|)) (=> (_module.__default.evalCode $LZ |c#0@@17| |s#0@@258| |r#0@@95|) (_module.__default.evalCode $ly@@226 |c#0@@17| |s#0@@258| |r#0@@95|)))) :qid |ARMdefsd.1305:11| :skolemid |2995| :pattern ( (_module.__default.evalCode (AsFuelBottom $ly@@226) |c#0@@17| |s#0@@258| |r#0@@95|)) )))
(assert  (=> true (forall (($ly@@227 T@U) (|c#0@@18| T@U) (|s#0@@259| T@U) (|r#0@@96| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@227) LayerTypeType) (= (type |c#0@@18|) DatatypeTypeType)) (= (type |s#0@@259|) DatatypeTypeType)) (= (type |r#0@@96|) DatatypeTypeType)) (or (|_module.__default.evalCode#canCall| |c#0@@18| |s#0@@259| |r#0@@96|) (and (and ($Is |c#0@@18| Tclass._module.code) ($Is |s#0@@259| Tclass._module.state)) ($Is |r#0@@96| Tclass._module.state)))) true) :qid |ARMdefsd.1305:11| :skolemid |2996| :pattern ( (_module.__default.evalCode $ly@@227 |c#0@@18| |s#0@@259| |r#0@@96|)) ))))
(assert (forall (($ly@@228 T@U) (|c#0@@19| T@U) (|s#0@@260| T@U) (|r#0@@97| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@228) LayerTypeType) (= (type |c#0@@19|) DatatypeTypeType)) (= (type |s#0@@260|) DatatypeTypeType)) (= (type |r#0@@97|) DatatypeTypeType)) (and (and ($Is |c#0@@19| Tclass._module.code) ($Is |s#0@@260| Tclass._module.state)) ($Is |r#0@@97| Tclass._module.state))) (and (=> (|_module.__default.evalCode#requires| $ly@@228 |c#0@@19| |s#0@@260| |r#0@@97|) true) (=> true (|_module.__default.evalCode#requires| $ly@@228 |c#0@@19| |s#0@@260| |r#0@@97|)))) :qid |ARMdefsd.1305:11| :skolemid |2997| :pattern ( (|_module.__default.evalCode#requires| $ly@@228 |c#0@@19| |s#0@@260| |r#0@@97|)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@415 T@U) ) (! (= (type (_module.code.ins arg0@@415)) DatatypeTypeType) :qid |funType:_module.code.ins| :pattern ( (_module.code.ins arg0@@415)) )) (forall ((arg0@@416 T@U) ) (! (= (type (_module.code.block arg0@@416)) DatatypeTypeType) :qid |funType:_module.code.block| :pattern ( (_module.code.block arg0@@416)) ))) (forall ((arg0@@417 T@U) ) (! (= (type (_module.code.ifCond arg0@@417)) DatatypeTypeType) :qid |funType:_module.code.ifCond| :pattern ( (_module.code.ifCond arg0@@417)) ))) (forall ((arg0@@418 T@U) ) (! (= (type (_module.code.ifTrue arg0@@418)) DatatypeTypeType) :qid |funType:_module.code.ifTrue| :pattern ( (_module.code.ifTrue arg0@@418)) ))) (forall ((arg0@@419 T@U) ) (! (= (type (_module.code.ifFalse arg0@@419)) DatatypeTypeType) :qid |funType:_module.code.ifFalse| :pattern ( (_module.code.ifFalse arg0@@419)) ))) (forall ((arg0@@420 T@U) ) (! (= (type (_module.code.whileCond arg0@@420)) DatatypeTypeType) :qid |funType:_module.code.whileCond| :pattern ( (_module.code.whileCond arg0@@420)) ))) (forall ((arg0@@421 T@U) ) (! (= (type (_module.code.whileBody arg0@@421)) DatatypeTypeType) :qid |funType:_module.code.whileBody| :pattern ( (_module.code.whileBody arg0@@421)) ))))
(assert  (=> true (forall (($ly@@229 T@U) (|c#0@@20| T@U) (|s#0@@261| T@U) (|r#0@@98| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@229) LayerTypeType) (= (type |c#0@@20|) DatatypeTypeType)) (= (type |s#0@@261|) DatatypeTypeType)) (= (type |r#0@@98|) DatatypeTypeType)) (or (|_module.__default.evalCode#canCall| |c#0@@20| |s#0@@261| |r#0@@98|) (and (and ($Is |c#0@@20| Tclass._module.code) ($Is |s#0@@261| Tclass._module.state)) ($Is |r#0@@98| Tclass._module.state)))) (and (and (=> (_module.code.Ins_q |c#0@@20|) (|_module.__default.evalIns#canCall| (_module.code.ins |c#0@@20|) |s#0@@261| |r#0@@98|)) (=> (not (_module.code.Ins_q |c#0@@20|)) (and (=> (_module.code.Block_q |c#0@@20|) (|_module.__default.evalBlock#canCall| (_module.code.block |c#0@@20|) |s#0@@261| |r#0@@98|)) (=> (not (_module.code.Block_q |c#0@@20|)) (and (=> (_module.code.IfElse_q |c#0@@20|) (|_module.__default.evalIfElse#canCall| (_module.code.ifCond |c#0@@20|) (_module.code.ifTrue |c#0@@20|) (_module.code.ifFalse |c#0@@20|) |s#0@@261| |r#0@@98|)) (=> (not (_module.code.IfElse_q |c#0@@20|)) (forall ((|n#0@@13| Int) ) (!  (=> (INTERNAL_le_boogie 0 |n#0@@13|) (|_module.__default.evalWhile#canCall| (_module.code.whileCond |c#0@@20|) (_module.code.whileBody |c#0@@20|) |n#0@@13| |s#0@@261| |r#0@@98|)) :qid |ARMdefsd.1312:42| :skolemid |2998| :pattern ( (_module.__default.evalWhile $ly@@229 (_module.code.whileCond |c#0@@20|) (_module.code.whileBody |c#0@@20|) |n#0@@13| |s#0@@261| |r#0@@98|)) )))))))) (and (=> (_module.__default.evalCode ($LS $ly@@229) |c#0@@20| |s#0@@261| |r#0@@98|) (ite (_module.code.Ins_q |c#0@@20|) (_module.__default.evalIns (_module.code.ins |c#0@@20|) |s#0@@261| |r#0@@98|) (ite (_module.code.Block_q |c#0@@20|) (_module.__default.evalBlock $ly@@229 (_module.code.block |c#0@@20|) |s#0@@261| |r#0@@98|) (ite (_module.code.IfElse_q |c#0@@20|) (_module.__default.evalIfElse $ly@@229 (_module.code.ifCond |c#0@@20|) (_module.code.ifTrue |c#0@@20|) (_module.code.ifFalse |c#0@@20|) |s#0@@261| |r#0@@98|) (exists ((|n#1| Int) (|tr$ly#0@@15| T@U) ) (!  (and (= (type |tr$ly#0@@15|) LayerTypeType) (and (INTERNAL_le_boogie 0 |n#1|) (_module.__default.evalWhile $ly@@229 (_module.code.whileCond |c#0@@20|) (_module.code.whileBody |c#0@@20|) |n#1| |s#0@@261| |r#0@@98|))) :qid |ARMdefsd.1312:42| :skolemid |2999| :pattern ( (_module.__default.evalWhile |tr$ly#0@@15| (_module.code.whileCond |c#0@@20|) (_module.code.whileBody |c#0@@20|) |n#1| |s#0@@261| |r#0@@98|)) )))))) (=> (ite (_module.code.Ins_q |c#0@@20|) (_module.__default.evalIns (_module.code.ins |c#0@@20|) |s#0@@261| |r#0@@98|) (ite (_module.code.Block_q |c#0@@20|) (_module.__default.evalBlock $ly@@229 (_module.code.block |c#0@@20|) |s#0@@261| |r#0@@98|) (ite (_module.code.IfElse_q |c#0@@20|) (_module.__default.evalIfElse $ly@@229 (_module.code.ifCond |c#0@@20|) (_module.code.ifTrue |c#0@@20|) (_module.code.ifFalse |c#0@@20|) |s#0@@261| |r#0@@98|) (exists ((|n#1@@0| Int) (|tr$ly#0@@16| T@U) ) (!  (and (= (type |tr$ly#0@@16|) LayerTypeType) (and (INTERNAL_le_boogie 0 |n#1@@0|) (_module.__default.evalWhile $ly@@229 (_module.code.whileCond |c#0@@20|) (_module.code.whileBody |c#0@@20|) |n#1@@0| |s#0@@261| |r#0@@98|))) :qid |ARMdefsd.1312:42| :skolemid |2999| :pattern ( (_module.__default.evalWhile |tr$ly#0@@16| (_module.code.whileCond |c#0@@20|) (_module.code.whileBody |c#0@@20|) |n#1@@0| |s#0@@261| |r#0@@98|)) ))))) (_module.__default.evalCode ($LS $ly@@229) |c#0@@20| |s#0@@261| |r#0@@98|))))) :qid |ARMdefsd.1305:11| :skolemid |3000| :pattern ( (_module.__default.evalCode ($LS $ly@@229) |c#0@@20| |s#0@@261| |r#0@@98|)) ))))
(assert  (=> true (forall (($ly@@230 T@U) (|c#0@@21| T@U) (|s#0@@262| T@U) (|r#0@@99| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@230) LayerTypeType) (= (type |c#0@@21|) DatatypeTypeType)) (= (type |s#0@@262|) DatatypeTypeType)) (= (type |r#0@@99|) DatatypeTypeType)) (or (|_module.__default.evalCode#canCall| (Lit |c#0@@21|) |s#0@@262| |r#0@@99|) (and (and ($Is |c#0@@21| Tclass._module.code) ($Is |s#0@@262| Tclass._module.state)) ($Is |r#0@@99| Tclass._module.state)))) (and (and (=> (U_2_bool (Lit (bool_2_U (_module.code.Ins_q (Lit |c#0@@21|))))) (|_module.__default.evalIns#canCall| (Lit (_module.code.ins (Lit |c#0@@21|))) |s#0@@262| |r#0@@99|)) (=> (not (U_2_bool (Lit (bool_2_U (_module.code.Ins_q (Lit |c#0@@21|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.code.Block_q (Lit |c#0@@21|))))) (|_module.__default.evalBlock#canCall| (Lit (_module.code.block (Lit |c#0@@21|))) |s#0@@262| |r#0@@99|)) (=> (not (U_2_bool (Lit (bool_2_U (_module.code.Block_q (Lit |c#0@@21|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.code.IfElse_q (Lit |c#0@@21|))))) (|_module.__default.evalIfElse#canCall| (Lit (_module.code.ifCond (Lit |c#0@@21|))) (Lit (_module.code.ifTrue (Lit |c#0@@21|))) (Lit (_module.code.ifFalse (Lit |c#0@@21|))) |s#0@@262| |r#0@@99|)) (=> (not (U_2_bool (Lit (bool_2_U (_module.code.IfElse_q (Lit |c#0@@21|)))))) (forall ((|n#2| Int) ) (!  (=> (INTERNAL_le_boogie 0 |n#2|) (|_module.__default.evalWhile#canCall| (Lit (_module.code.whileCond (Lit |c#0@@21|))) (Lit (_module.code.whileBody (Lit |c#0@@21|))) |n#2| |s#0@@262| |r#0@@99|)) :qid |ARMdefsd.1312:42| :skolemid |3001| :pattern ( (_module.__default.evalWhile ($LS $ly@@230) (_module.code.whileCond |c#0@@21|) (_module.code.whileBody |c#0@@21|) |n#2| |s#0@@262| |r#0@@99|)) )))))))) (and (=> (_module.__default.evalCode ($LS $ly@@230) (Lit |c#0@@21|) |s#0@@262| |r#0@@99|) (ite (_module.code.Ins_q (Lit |c#0@@21|)) (_module.__default.evalIns (Lit (_module.code.ins (Lit |c#0@@21|))) |s#0@@262| |r#0@@99|) (ite (_module.code.Block_q (Lit |c#0@@21|)) (_module.__default.evalBlock ($LS $ly@@230) (Lit (_module.code.block (Lit |c#0@@21|))) |s#0@@262| |r#0@@99|) (ite (_module.code.IfElse_q (Lit |c#0@@21|)) (_module.__default.evalIfElse ($LS $ly@@230) (Lit (_module.code.ifCond (Lit |c#0@@21|))) (Lit (_module.code.ifTrue (Lit |c#0@@21|))) (Lit (_module.code.ifFalse (Lit |c#0@@21|))) |s#0@@262| |r#0@@99|) (exists ((|n#3| Int) (|tr$ly#1@@13| T@U) ) (!  (and (= (type |tr$ly#1@@13|) LayerTypeType) (and (INTERNAL_le_boogie 0 |n#3|) (_module.__default.evalWhile ($LS $ly@@230) (Lit (_module.code.whileCond (Lit |c#0@@21|))) (Lit (_module.code.whileBody (Lit |c#0@@21|))) |n#3| |s#0@@262| |r#0@@99|))) :qid |ARMdefsd.1312:42| :skolemid |3002| :pattern ( (_module.__default.evalWhile |tr$ly#1@@13| (_module.code.whileCond |c#0@@21|) (_module.code.whileBody |c#0@@21|) |n#3| |s#0@@262| |r#0@@99|)) )))))) (=> (ite (_module.code.Ins_q (Lit |c#0@@21|)) (_module.__default.evalIns (Lit (_module.code.ins (Lit |c#0@@21|))) |s#0@@262| |r#0@@99|) (ite (_module.code.Block_q (Lit |c#0@@21|)) (_module.__default.evalBlock ($LS $ly@@230) (Lit (_module.code.block (Lit |c#0@@21|))) |s#0@@262| |r#0@@99|) (ite (_module.code.IfElse_q (Lit |c#0@@21|)) (_module.__default.evalIfElse ($LS $ly@@230) (Lit (_module.code.ifCond (Lit |c#0@@21|))) (Lit (_module.code.ifTrue (Lit |c#0@@21|))) (Lit (_module.code.ifFalse (Lit |c#0@@21|))) |s#0@@262| |r#0@@99|) (exists ((|n#3@@0| Int) (|tr$ly#1@@14| T@U) ) (!  (and (= (type |tr$ly#1@@14|) LayerTypeType) (and (INTERNAL_le_boogie 0 |n#3@@0|) (_module.__default.evalWhile ($LS $ly@@230) (Lit (_module.code.whileCond (Lit |c#0@@21|))) (Lit (_module.code.whileBody (Lit |c#0@@21|))) |n#3@@0| |s#0@@262| |r#0@@99|))) :qid |ARMdefsd.1312:42| :skolemid |3002| :pattern ( (_module.__default.evalWhile |tr$ly#1@@14| (_module.code.whileCond |c#0@@21|) (_module.code.whileBody |c#0@@21|) |n#3@@0| |s#0@@262| |r#0@@99|)) ))))) (_module.__default.evalCode ($LS $ly@@230) (Lit |c#0@@21|) |s#0@@262| |r#0@@99|))))) :qid |ARMdefsd.1305:11| :weight 3 :skolemid |3003| :pattern ( (_module.__default.evalCode ($LS $ly@@230) (Lit |c#0@@21|) |s#0@@262| |r#0@@99|)) ))))
(assert  (=> true (forall (($ly@@231 T@U) (|c#0@@22| T@U) (|s#0@@263| T@U) (|r#0@@100| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@231) LayerTypeType) (= (type |c#0@@22|) DatatypeTypeType)) (= (type |s#0@@263|) DatatypeTypeType)) (= (type |r#0@@100|) DatatypeTypeType)) (or (|_module.__default.evalCode#canCall| (Lit |c#0@@22|) (Lit |s#0@@263|) (Lit |r#0@@100|)) (and (and ($Is |c#0@@22| Tclass._module.code) ($Is |s#0@@263| Tclass._module.state)) ($Is |r#0@@100| Tclass._module.state)))) (and (and (=> (U_2_bool (Lit (bool_2_U (_module.code.Ins_q (Lit |c#0@@22|))))) (|_module.__default.evalIns#canCall| (Lit (_module.code.ins (Lit |c#0@@22|))) (Lit |s#0@@263|) (Lit |r#0@@100|))) (=> (not (U_2_bool (Lit (bool_2_U (_module.code.Ins_q (Lit |c#0@@22|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.code.Block_q (Lit |c#0@@22|))))) (|_module.__default.evalBlock#canCall| (Lit (_module.code.block (Lit |c#0@@22|))) (Lit |s#0@@263|) (Lit |r#0@@100|))) (=> (not (U_2_bool (Lit (bool_2_U (_module.code.Block_q (Lit |c#0@@22|)))))) (and (=> (U_2_bool (Lit (bool_2_U (_module.code.IfElse_q (Lit |c#0@@22|))))) (|_module.__default.evalIfElse#canCall| (Lit (_module.code.ifCond (Lit |c#0@@22|))) (Lit (_module.code.ifTrue (Lit |c#0@@22|))) (Lit (_module.code.ifFalse (Lit |c#0@@22|))) (Lit |s#0@@263|) (Lit |r#0@@100|))) (=> (not (U_2_bool (Lit (bool_2_U (_module.code.IfElse_q (Lit |c#0@@22|)))))) (forall ((|n#4| Int) ) (!  (=> (INTERNAL_le_boogie 0 |n#4|) (|_module.__default.evalWhile#canCall| (Lit (_module.code.whileCond (Lit |c#0@@22|))) (Lit (_module.code.whileBody (Lit |c#0@@22|))) |n#4| (Lit |s#0@@263|) (Lit |r#0@@100|))) :qid |ARMdefsd.1312:42| :skolemid |3004| :pattern ( (_module.__default.evalWhile ($LS $ly@@231) (_module.code.whileCond |c#0@@22|) (_module.code.whileBody |c#0@@22|) |n#4| |s#0@@263| |r#0@@100|)) )))))))) (and (=> (_module.__default.evalCode ($LS $ly@@231) (Lit |c#0@@22|) (Lit |s#0@@263|) (Lit |r#0@@100|)) (ite (_module.code.Ins_q (Lit |c#0@@22|)) (_module.__default.evalIns (Lit (_module.code.ins (Lit |c#0@@22|))) (Lit |s#0@@263|) (Lit |r#0@@100|)) (ite (_module.code.Block_q (Lit |c#0@@22|)) (_module.__default.evalBlock ($LS $ly@@231) (Lit (_module.code.block (Lit |c#0@@22|))) (Lit |s#0@@263|) (Lit |r#0@@100|)) (ite (_module.code.IfElse_q (Lit |c#0@@22|)) (_module.__default.evalIfElse ($LS $ly@@231) (Lit (_module.code.ifCond (Lit |c#0@@22|))) (Lit (_module.code.ifTrue (Lit |c#0@@22|))) (Lit (_module.code.ifFalse (Lit |c#0@@22|))) (Lit |s#0@@263|) (Lit |r#0@@100|)) (exists ((|n#5| Int) (|tr$ly#2@@5| T@U) ) (!  (and (= (type |tr$ly#2@@5|) LayerTypeType) (and (INTERNAL_le_boogie 0 |n#5|) (_module.__default.evalWhile ($LS $ly@@231) (Lit (_module.code.whileCond (Lit |c#0@@22|))) (Lit (_module.code.whileBody (Lit |c#0@@22|))) |n#5| (Lit |s#0@@263|) (Lit |r#0@@100|)))) :qid |ARMdefsd.1312:42| :skolemid |3005| :pattern ( (_module.__default.evalWhile |tr$ly#2@@5| (_module.code.whileCond |c#0@@22|) (_module.code.whileBody |c#0@@22|) |n#5| |s#0@@263| |r#0@@100|)) )))))) (=> (ite (_module.code.Ins_q (Lit |c#0@@22|)) (_module.__default.evalIns (Lit (_module.code.ins (Lit |c#0@@22|))) (Lit |s#0@@263|) (Lit |r#0@@100|)) (ite (_module.code.Block_q (Lit |c#0@@22|)) (_module.__default.evalBlock ($LS $ly@@231) (Lit (_module.code.block (Lit |c#0@@22|))) (Lit |s#0@@263|) (Lit |r#0@@100|)) (ite (_module.code.IfElse_q (Lit |c#0@@22|)) (_module.__default.evalIfElse ($LS $ly@@231) (Lit (_module.code.ifCond (Lit |c#0@@22|))) (Lit (_module.code.ifTrue (Lit |c#0@@22|))) (Lit (_module.code.ifFalse (Lit |c#0@@22|))) (Lit |s#0@@263|) (Lit |r#0@@100|)) (exists ((|n#5@@0| Int) (|tr$ly#2@@6| T@U) ) (!  (and (= (type |tr$ly#2@@6|) LayerTypeType) (and (INTERNAL_le_boogie 0 |n#5@@0|) (_module.__default.evalWhile ($LS $ly@@231) (Lit (_module.code.whileCond (Lit |c#0@@22|))) (Lit (_module.code.whileBody (Lit |c#0@@22|))) |n#5@@0| (Lit |s#0@@263|) (Lit |r#0@@100|)))) :qid |ARMdefsd.1312:42| :skolemid |3005| :pattern ( (_module.__default.evalWhile |tr$ly#2@@6| (_module.code.whileCond |c#0@@22|) (_module.code.whileBody |c#0@@22|) |n#5@@0| |s#0@@263| |r#0@@100|)) ))))) (_module.__default.evalCode ($LS $ly@@231) (Lit |c#0@@22|) (Lit |s#0@@263|) (Lit |r#0@@100|)))))) :qid |ARMdefsd.1305:11| :weight 3 :skolemid |3006| :pattern ( (_module.__default.evalCode ($LS $ly@@231) (Lit |c#0@@22|) (Lit |s#0@@263|) (Lit |r#0@@100|))) ))))
(assert (forall (($ly@@232 T@U) (|i#0@@29| Int) ) (!  (=> (= (type $ly@@232) LayerTypeType) (= (_module.__default.WordAsBits ($LS $ly@@232) |i#0@@29|) (_module.__default.WordAsBits $ly@@232 |i#0@@29|))) :qid |bitvecto.15:27| :skolemid |3007| :pattern ( (_module.__default.WordAsBits ($LS $ly@@232) |i#0@@29|)) )))
(assert (forall (($ly@@233 T@U) (|i#0@@30| Int) ) (!  (=> (= (type $ly@@233) LayerTypeType) (= (_module.__default.WordAsBits $ly@@233 |i#0@@30|) (_module.__default.WordAsBits $LZ |i#0@@30|))) :qid |bitvecto.15:27| :skolemid |3008| :pattern ( (_module.__default.WordAsBits (AsFuelBottom $ly@@233) |i#0@@30|)) )))
(assert  (=> true (forall (($ly@@234 T@U) (|i#0@@31| Int) ) (!  (=> (and (= (type $ly@@234) LayerTypeType) (or (|_module.__default.WordAsBits#canCall| |i#0@@31|) (_module.__default.isUInt32 |i#0@@31|))) (and (=> (= |i#0@@31| (LitInt 0)) (= (_module.__default.WordAsBits $ly@@234 |i#0@@31|) (U_2_bv32 (Lit (bv32_2_U #x00000000))))) (=> (= (_module.__default.WordAsBits $ly@@234 |i#0@@31|) (U_2_bv32 (Lit (bv32_2_U #x00000000)))) (= |i#0@@31| (LitInt 0))))) :qid |bitvecto.15:27| :skolemid |3009| :pattern ( (_module.__default.WordAsBits $ly@@234 |i#0@@31|)) ))))
(assert (forall (($ly@@235 T@U) (|i#0@@32| Int) ) (!  (=> (and (= (type $ly@@235) LayerTypeType) (_module.__default.isUInt32 |i#0@@32|)) (and (=> (|_module.__default.WordAsBits#requires| $ly@@235 |i#0@@32|) true) (=> true (|_module.__default.WordAsBits#requires| $ly@@235 |i#0@@32|)))) :qid |bitvecto.15:27| :skolemid |3010| :pattern ( (|_module.__default.WordAsBits#requires| $ly@@235 |i#0@@32|)) )))
(assert  (=> true (forall (($ly@@236 T@U) (|i#0@@33| Int) ) (!  (=> (and (= (type $ly@@236) LayerTypeType) (or (|_module.__default.WordAsBits#canCall| |i#0@@33|) (_module.__default.isUInt32 |i#0@@33|))) (= (_module.__default.WordAsBits ($LS $ly@@236) |i#0@@33|) ((_ int2bv 32) |i#0@@33|))) :qid |bitvecto.15:27| :skolemid |3011| :pattern ( (_module.__default.WordAsBits ($LS $ly@@236) |i#0@@33|)) ))))
(assert  (=> true (forall (($ly@@237 T@U) (|i#0@@34| Int) ) (!  (=> (and (= (type $ly@@237) LayerTypeType) (or (|_module.__default.WordAsBits#canCall| (LitInt |i#0@@34|)) (_module.__default.isUInt32 |i#0@@34|))) (= (_module.__default.WordAsBits ($LS $ly@@237) (LitInt |i#0@@34|)) ((_ int2bv 32) (LitInt |i#0@@34|)))) :qid |bitvecto.15:27| :weight 3 :skolemid |3012| :pattern ( (_module.__default.WordAsBits ($LS $ly@@237) (LitInt |i#0@@34|))) ))))
(assert (forall (($ly@@238 T@U) (|b#0@@18| (_ BitVec 32)) ) (!  (=> (= (type $ly@@238) LayerTypeType) (= (_module.__default.BitsAsWord ($LS $ly@@238) |b#0@@18|) (_module.__default.BitsAsWord $ly@@238 |b#0@@18|))) :qid |bitvecto.26:27| :skolemid |3013| :pattern ( (_module.__default.BitsAsWord ($LS $ly@@238) |b#0@@18|)) )))
(assert (forall (($ly@@239 T@U) (|b#0@@19| (_ BitVec 32)) ) (!  (=> (= (type $ly@@239) LayerTypeType) (= (_module.__default.BitsAsWord $ly@@239 |b#0@@19|) (_module.__default.BitsAsWord $LZ |b#0@@19|))) :qid |bitvecto.26:27| :skolemid |3014| :pattern ( (_module.__default.BitsAsWord (AsFuelBottom $ly@@239) |b#0@@19|)) )))
(assert  (=> true (forall (($ly@@240 T@U) (|b#0@@20| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@240) LayerTypeType) true) (and (and (=> (= |b#0@@20| (U_2_bv32 (Lit (bv32_2_U #x00000000)))) (= (_module.__default.BitsAsWord $ly@@240 |b#0@@20|) (LitInt 0))) (=> (= (_module.__default.BitsAsWord $ly@@240 |b#0@@20|) (LitInt 0)) (= |b#0@@20| (U_2_bv32 (Lit (bv32_2_U #x00000000)))))) (_module.__default.isUInt32 (_module.__default.BitsAsWord $ly@@240 |b#0@@20|)))) :qid |bitvecto.26:27| :skolemid |3015| :pattern ( (_module.__default.BitsAsWord $ly@@240 |b#0@@20|)) ))))
(assert (forall (($ly@@241 T@U) (|b#0@@21| (_ BitVec 32)) ) (!  (=> (= (type $ly@@241) LayerTypeType) (and (=> (|_module.__default.BitsAsWord#requires| $ly@@241 |b#0@@21|) true) (=> true (|_module.__default.BitsAsWord#requires| $ly@@241 |b#0@@21|)))) :qid |bitvecto.26:27| :skolemid |3016| :pattern ( (|_module.__default.BitsAsWord#requires| $ly@@241 |b#0@@21|)) )))
(assert  (=> true (forall (($ly@@242 T@U) (|b#0@@22| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@242) LayerTypeType) true) (= (_module.__default.BitsAsWord ($LS $ly@@242) |b#0@@22|) (nat_from_bv32 |b#0@@22|))) :qid |bitvecto.26:27| :skolemid |3017| :pattern ( (_module.__default.BitsAsWord ($LS $ly@@242) |b#0@@22|)) ))))
(assert  (=> true (forall (($ly@@243 T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (= (type $ly@@243) LayerTypeType) (= (type |b#0@@23|) bv32Type)) true) (= (_module.__default.BitsAsWord ($LS $ly@@243) (U_2_bv32 (Lit |b#0@@23|))) (nat_from_bv32 (U_2_bv32 (Lit |b#0@@23|))))) :qid |bitvecto.26:27| :weight 3 :skolemid |3018| :pattern ( (_module.__default.BitsAsWord ($LS $ly@@243) (U_2_bv32 (Lit |b#0@@23|)))) ))))
(assert (forall (($ly@@244 T@U) (|x#0@@69| (_ BitVec 32)) (|y#0@@33| (_ BitVec 32)) ) (!  (=> (= (type $ly@@244) LayerTypeType) (= (_module.__default.BitAdd ($LS $ly@@244) |x#0@@69| |y#0@@33|) (_module.__default.BitAdd $ly@@244 |x#0@@69| |y#0@@33|))) :qid |bitvecto.53:20| :skolemid |3019| :pattern ( (_module.__default.BitAdd ($LS $ly@@244) |x#0@@69| |y#0@@33|)) )))
(assert (forall (($ly@@245 T@U) (|x#0@@70| (_ BitVec 32)) (|y#0@@34| (_ BitVec 32)) ) (!  (=> (= (type $ly@@245) LayerTypeType) (= (_module.__default.BitAdd $ly@@245 |x#0@@70| |y#0@@34|) (_module.__default.BitAdd $LZ |x#0@@70| |y#0@@34|))) :qid |bitvecto.53:20| :skolemid |3020| :pattern ( (_module.__default.BitAdd (AsFuelBottom $ly@@245) |x#0@@70| |y#0@@34|)) )))
(assert  (=> true (forall (($ly@@246 T@U) (|x#0@@71| (_ BitVec 32)) (|y#0@@35| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@246) LayerTypeType) true) true) :qid |bitvecto.53:20| :skolemid |3021| :pattern ( (_module.__default.BitAdd $ly@@246 |x#0@@71| |y#0@@35|)) ))))
(assert (forall (($ly@@247 T@U) (|x#0@@72| (_ BitVec 32)) (|y#0@@36| (_ BitVec 32)) ) (!  (=> (= (type $ly@@247) LayerTypeType) (and (=> (|_module.__default.BitAdd#requires| $ly@@247 |x#0@@72| |y#0@@36|) true) (=> true (|_module.__default.BitAdd#requires| $ly@@247 |x#0@@72| |y#0@@36|)))) :qid |bitvecto.53:20| :skolemid |3022| :pattern ( (|_module.__default.BitAdd#requires| $ly@@247 |x#0@@72| |y#0@@36|)) )))
(assert  (=> true (forall (($ly@@248 T@U) (|x#0@@73| (_ BitVec 32)) (|y#0@@37| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@248) LayerTypeType) true) (= (_module.__default.BitAdd ($LS $ly@@248) |x#0@@73| |y#0@@37|) (bvadd |x#0@@73| |y#0@@37|))) :qid |bitvecto.53:20| :skolemid |3023| :pattern ( (_module.__default.BitAdd ($LS $ly@@248) |x#0@@73| |y#0@@37|)) ))))
(assert  (=> true (forall (($ly@@249 T@U) (|x#0@@74| T@U) (|y#0@@38| T@U) ) (!  (=> (and (and (and (= (type $ly@@249) LayerTypeType) (= (type |x#0@@74|) bv32Type)) (= (type |y#0@@38|) bv32Type)) true) (= (_module.__default.BitAdd ($LS $ly@@249) (U_2_bv32 (Lit |x#0@@74|)) (U_2_bv32 (Lit |y#0@@38|))) (U_2_bv32 (Lit (bv32_2_U (bvadd (U_2_bv32 |x#0@@74|) (U_2_bv32 |y#0@@38|))))))) :qid |bitvecto.53:20| :weight 3 :skolemid |3024| :pattern ( (_module.__default.BitAdd ($LS $ly@@249) (U_2_bv32 (Lit |x#0@@74|)) (U_2_bv32 (Lit |y#0@@38|)))) ))))
(assert (forall (($ly@@250 T@U) (|x#0@@75| (_ BitVec 32)) (|y#0@@39| (_ BitVec 32)) ) (!  (=> (= (type $ly@@250) LayerTypeType) (= (_module.__default.BitSub ($LS $ly@@250) |x#0@@75| |y#0@@39|) (_module.__default.BitSub $ly@@250 |x#0@@75| |y#0@@39|))) :qid |bitvecto.58:20| :skolemid |3025| :pattern ( (_module.__default.BitSub ($LS $ly@@250) |x#0@@75| |y#0@@39|)) )))
(assert (forall (($ly@@251 T@U) (|x#0@@76| (_ BitVec 32)) (|y#0@@40| (_ BitVec 32)) ) (!  (=> (= (type $ly@@251) LayerTypeType) (= (_module.__default.BitSub $ly@@251 |x#0@@76| |y#0@@40|) (_module.__default.BitSub $LZ |x#0@@76| |y#0@@40|))) :qid |bitvecto.58:20| :skolemid |3026| :pattern ( (_module.__default.BitSub (AsFuelBottom $ly@@251) |x#0@@76| |y#0@@40|)) )))
(assert  (=> true (forall (($ly@@252 T@U) (|x#0@@77| (_ BitVec 32)) (|y#0@@41| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@252) LayerTypeType) true) true) :qid |bitvecto.58:20| :skolemid |3027| :pattern ( (_module.__default.BitSub $ly@@252 |x#0@@77| |y#0@@41|)) ))))
(assert (forall (($ly@@253 T@U) (|x#0@@78| (_ BitVec 32)) (|y#0@@42| (_ BitVec 32)) ) (!  (=> (= (type $ly@@253) LayerTypeType) (and (=> (|_module.__default.BitSub#requires| $ly@@253 |x#0@@78| |y#0@@42|) true) (=> true (|_module.__default.BitSub#requires| $ly@@253 |x#0@@78| |y#0@@42|)))) :qid |bitvecto.58:20| :skolemid |3028| :pattern ( (|_module.__default.BitSub#requires| $ly@@253 |x#0@@78| |y#0@@42|)) )))
(assert  (=> true (forall (($ly@@254 T@U) (|x#0@@79| (_ BitVec 32)) (|y#0@@43| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@254) LayerTypeType) true) (= (_module.__default.BitSub ($LS $ly@@254) |x#0@@79| |y#0@@43|) (bvsub |x#0@@79| |y#0@@43|))) :qid |bitvecto.58:20| :skolemid |3029| :pattern ( (_module.__default.BitSub ($LS $ly@@254) |x#0@@79| |y#0@@43|)) ))))
(assert  (=> true (forall (($ly@@255 T@U) (|x#0@@80| T@U) (|y#0@@44| T@U) ) (!  (=> (and (and (and (= (type $ly@@255) LayerTypeType) (= (type |x#0@@80|) bv32Type)) (= (type |y#0@@44|) bv32Type)) true) (= (_module.__default.BitSub ($LS $ly@@255) (U_2_bv32 (Lit |x#0@@80|)) (U_2_bv32 (Lit |y#0@@44|))) (U_2_bv32 (Lit (bv32_2_U (bvsub (U_2_bv32 |x#0@@80|) (U_2_bv32 |y#0@@44|))))))) :qid |bitvecto.58:20| :weight 3 :skolemid |3030| :pattern ( (_module.__default.BitSub ($LS $ly@@255) (U_2_bv32 (Lit |x#0@@80|)) (U_2_bv32 (Lit |y#0@@44|)))) ))))
(assert (forall (($ly@@256 T@U) (|x#0@@81| (_ BitVec 32)) (|y#0@@45| (_ BitVec 32)) ) (!  (=> (= (type $ly@@256) LayerTypeType) (= (_module.__default.BitAnd ($LS $ly@@256) |x#0@@81| |y#0@@45|) (_module.__default.BitAnd $ly@@256 |x#0@@81| |y#0@@45|))) :qid |bitvecto.63:20| :skolemid |3031| :pattern ( (_module.__default.BitAnd ($LS $ly@@256) |x#0@@81| |y#0@@45|)) )))
(assert (forall (($ly@@257 T@U) (|x#0@@82| (_ BitVec 32)) (|y#0@@46| (_ BitVec 32)) ) (!  (=> (= (type $ly@@257) LayerTypeType) (= (_module.__default.BitAnd $ly@@257 |x#0@@82| |y#0@@46|) (_module.__default.BitAnd $LZ |x#0@@82| |y#0@@46|))) :qid |bitvecto.63:20| :skolemid |3032| :pattern ( (_module.__default.BitAnd (AsFuelBottom $ly@@257) |x#0@@82| |y#0@@46|)) )))
(assert  (=> true (forall (($ly@@258 T@U) (|x#0@@83| (_ BitVec 32)) (|y#0@@47| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@258) LayerTypeType) true) true) :qid |bitvecto.63:20| :skolemid |3033| :pattern ( (_module.__default.BitAnd $ly@@258 |x#0@@83| |y#0@@47|)) ))))
(assert (forall (($ly@@259 T@U) (|x#0@@84| (_ BitVec 32)) (|y#0@@48| (_ BitVec 32)) ) (!  (=> (= (type $ly@@259) LayerTypeType) (and (=> (|_module.__default.BitAnd#requires| $ly@@259 |x#0@@84| |y#0@@48|) true) (=> true (|_module.__default.BitAnd#requires| $ly@@259 |x#0@@84| |y#0@@48|)))) :qid |bitvecto.63:20| :skolemid |3034| :pattern ( (|_module.__default.BitAnd#requires| $ly@@259 |x#0@@84| |y#0@@48|)) )))
(assert  (=> true (forall (($ly@@260 T@U) (|x#0@@85| (_ BitVec 32)) (|y#0@@49| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@260) LayerTypeType) true) (= (_module.__default.BitAnd ($LS $ly@@260) |x#0@@85| |y#0@@49|) (bvand |x#0@@85| |y#0@@49|))) :qid |bitvecto.63:20| :skolemid |3035| :pattern ( (_module.__default.BitAnd ($LS $ly@@260) |x#0@@85| |y#0@@49|)) ))))
(assert  (=> true (forall (($ly@@261 T@U) (|x#0@@86| T@U) (|y#0@@50| T@U) ) (!  (=> (and (and (and (= (type $ly@@261) LayerTypeType) (= (type |x#0@@86|) bv32Type)) (= (type |y#0@@50|) bv32Type)) true) (= (_module.__default.BitAnd ($LS $ly@@261) (U_2_bv32 (Lit |x#0@@86|)) (U_2_bv32 (Lit |y#0@@50|))) (U_2_bv32 (Lit (bv32_2_U (bvand (U_2_bv32 |x#0@@86|) (U_2_bv32 |y#0@@50|))))))) :qid |bitvecto.63:20| :weight 3 :skolemid |3036| :pattern ( (_module.__default.BitAnd ($LS $ly@@261) (U_2_bv32 (Lit |x#0@@86|)) (U_2_bv32 (Lit |y#0@@50|)))) ))))
(assert (forall (($ly@@262 T@U) (|x#0@@87| (_ BitVec 32)) (|y#0@@51| (_ BitVec 32)) ) (!  (=> (= (type $ly@@262) LayerTypeType) (= (_module.__default.BitOr ($LS $ly@@262) |x#0@@87| |y#0@@51|) (_module.__default.BitOr $ly@@262 |x#0@@87| |y#0@@51|))) :qid |bitvecto.68:20| :skolemid |3037| :pattern ( (_module.__default.BitOr ($LS $ly@@262) |x#0@@87| |y#0@@51|)) )))
(assert (forall (($ly@@263 T@U) (|x#0@@88| (_ BitVec 32)) (|y#0@@52| (_ BitVec 32)) ) (!  (=> (= (type $ly@@263) LayerTypeType) (= (_module.__default.BitOr $ly@@263 |x#0@@88| |y#0@@52|) (_module.__default.BitOr $LZ |x#0@@88| |y#0@@52|))) :qid |bitvecto.68:20| :skolemid |3038| :pattern ( (_module.__default.BitOr (AsFuelBottom $ly@@263) |x#0@@88| |y#0@@52|)) )))
(assert  (=> true (forall (($ly@@264 T@U) (|x#0@@89| (_ BitVec 32)) (|y#0@@53| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@264) LayerTypeType) true) true) :qid |bitvecto.68:20| :skolemid |3039| :pattern ( (_module.__default.BitOr $ly@@264 |x#0@@89| |y#0@@53|)) ))))
(assert (forall (($ly@@265 T@U) (|x#0@@90| (_ BitVec 32)) (|y#0@@54| (_ BitVec 32)) ) (!  (=> (= (type $ly@@265) LayerTypeType) (and (=> (|_module.__default.BitOr#requires| $ly@@265 |x#0@@90| |y#0@@54|) true) (=> true (|_module.__default.BitOr#requires| $ly@@265 |x#0@@90| |y#0@@54|)))) :qid |bitvecto.68:20| :skolemid |3040| :pattern ( (|_module.__default.BitOr#requires| $ly@@265 |x#0@@90| |y#0@@54|)) )))
(assert  (=> true (forall (($ly@@266 T@U) (|x#0@@91| (_ BitVec 32)) (|y#0@@55| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@266) LayerTypeType) true) (= (_module.__default.BitOr ($LS $ly@@266) |x#0@@91| |y#0@@55|) (bvor |x#0@@91| |y#0@@55|))) :qid |bitvecto.68:20| :skolemid |3041| :pattern ( (_module.__default.BitOr ($LS $ly@@266) |x#0@@91| |y#0@@55|)) ))))
(assert  (=> true (forall (($ly@@267 T@U) (|x#0@@92| T@U) (|y#0@@56| T@U) ) (!  (=> (and (and (and (= (type $ly@@267) LayerTypeType) (= (type |x#0@@92|) bv32Type)) (= (type |y#0@@56|) bv32Type)) true) (= (_module.__default.BitOr ($LS $ly@@267) (U_2_bv32 (Lit |x#0@@92|)) (U_2_bv32 (Lit |y#0@@56|))) (U_2_bv32 (Lit (bv32_2_U (bvor (U_2_bv32 |x#0@@92|) (U_2_bv32 |y#0@@56|))))))) :qid |bitvecto.68:20| :weight 3 :skolemid |3042| :pattern ( (_module.__default.BitOr ($LS $ly@@267) (U_2_bv32 (Lit |x#0@@92|)) (U_2_bv32 (Lit |y#0@@56|)))) ))))
(assert (forall (($ly@@268 T@U) (|x#0@@93| (_ BitVec 32)) (|y#0@@57| (_ BitVec 32)) ) (!  (=> (= (type $ly@@268) LayerTypeType) (= (_module.__default.BitXor ($LS $ly@@268) |x#0@@93| |y#0@@57|) (_module.__default.BitXor $ly@@268 |x#0@@93| |y#0@@57|))) :qid |bitvecto.73:20| :skolemid |3043| :pattern ( (_module.__default.BitXor ($LS $ly@@268) |x#0@@93| |y#0@@57|)) )))
(assert (forall (($ly@@269 T@U) (|x#0@@94| (_ BitVec 32)) (|y#0@@58| (_ BitVec 32)) ) (!  (=> (= (type $ly@@269) LayerTypeType) (= (_module.__default.BitXor $ly@@269 |x#0@@94| |y#0@@58|) (_module.__default.BitXor $LZ |x#0@@94| |y#0@@58|))) :qid |bitvecto.73:20| :skolemid |3044| :pattern ( (_module.__default.BitXor (AsFuelBottom $ly@@269) |x#0@@94| |y#0@@58|)) )))
(assert  (=> true (forall (($ly@@270 T@U) (|x#0@@95| (_ BitVec 32)) (|y#0@@59| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@270) LayerTypeType) true) true) :qid |bitvecto.73:20| :skolemid |3045| :pattern ( (_module.__default.BitXor $ly@@270 |x#0@@95| |y#0@@59|)) ))))
(assert (forall (($ly@@271 T@U) (|x#0@@96| (_ BitVec 32)) (|y#0@@60| (_ BitVec 32)) ) (!  (=> (= (type $ly@@271) LayerTypeType) (and (=> (|_module.__default.BitXor#requires| $ly@@271 |x#0@@96| |y#0@@60|) true) (=> true (|_module.__default.BitXor#requires| $ly@@271 |x#0@@96| |y#0@@60|)))) :qid |bitvecto.73:20| :skolemid |3046| :pattern ( (|_module.__default.BitXor#requires| $ly@@271 |x#0@@96| |y#0@@60|)) )))
(assert  (=> true (forall (($ly@@272 T@U) (|x#0@@97| (_ BitVec 32)) (|y#0@@61| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@272) LayerTypeType) true) (= (_module.__default.BitXor ($LS $ly@@272) |x#0@@97| |y#0@@61|) (bvxor |x#0@@97| |y#0@@61|))) :qid |bitvecto.73:20| :skolemid |3047| :pattern ( (_module.__default.BitXor ($LS $ly@@272) |x#0@@97| |y#0@@61|)) ))))
(assert  (=> true (forall (($ly@@273 T@U) (|x#0@@98| T@U) (|y#0@@62| T@U) ) (!  (=> (and (and (and (= (type $ly@@273) LayerTypeType) (= (type |x#0@@98|) bv32Type)) (= (type |y#0@@62|) bv32Type)) true) (= (_module.__default.BitXor ($LS $ly@@273) (U_2_bv32 (Lit |x#0@@98|)) (U_2_bv32 (Lit |y#0@@62|))) (U_2_bv32 (Lit (bv32_2_U (bvxor (U_2_bv32 |x#0@@98|) (U_2_bv32 |y#0@@62|))))))) :qid |bitvecto.73:20| :weight 3 :skolemid |3048| :pattern ( (_module.__default.BitXor ($LS $ly@@273) (U_2_bv32 (Lit |x#0@@98|)) (U_2_bv32 (Lit |y#0@@62|)))) ))))
(assert (forall (($ly@@274 T@U) (|x#0@@99| (_ BitVec 32)) (|y#0@@63| (_ BitVec 32)) ) (!  (=> (= (type $ly@@274) LayerTypeType) (= (_module.__default.BitMod ($LS $ly@@274) |x#0@@99| |y#0@@63|) (_module.__default.BitMod $ly@@274 |x#0@@99| |y#0@@63|))) :qid |bitvecto.78:20| :skolemid |3049| :pattern ( (_module.__default.BitMod ($LS $ly@@274) |x#0@@99| |y#0@@63|)) )))
(assert (forall (($ly@@275 T@U) (|x#0@@100| (_ BitVec 32)) (|y#0@@64| (_ BitVec 32)) ) (!  (=> (= (type $ly@@275) LayerTypeType) (= (_module.__default.BitMod $ly@@275 |x#0@@100| |y#0@@64|) (_module.__default.BitMod $LZ |x#0@@100| |y#0@@64|))) :qid |bitvecto.78:20| :skolemid |3050| :pattern ( (_module.__default.BitMod (AsFuelBottom $ly@@275) |x#0@@100| |y#0@@64|)) )))
(assert  (=> true (forall (($ly@@276 T@U) (|x#0@@101| (_ BitVec 32)) (|y#0@@65| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@276) LayerTypeType) (or (|_module.__default.BitMod#canCall| |x#0@@101| |y#0@@65|) (not (= |y#0@@65| #x00000000)))) true) :qid |bitvecto.78:20| :skolemid |3051| :pattern ( (_module.__default.BitMod $ly@@276 |x#0@@101| |y#0@@65|)) ))))
(assert (forall (($ly@@277 T@U) (|x#0@@102| (_ BitVec 32)) (|y#0@@66| (_ BitVec 32)) ) (!  (=> (= (type $ly@@277) LayerTypeType) (and (=> (|_module.__default.BitMod#requires| $ly@@277 |x#0@@102| |y#0@@66|) (not (= |y#0@@66| #x00000000))) (=> (not (= |y#0@@66| #x00000000)) (|_module.__default.BitMod#requires| $ly@@277 |x#0@@102| |y#0@@66|)))) :qid |bitvecto.78:20| :skolemid |3052| :pattern ( (|_module.__default.BitMod#requires| $ly@@277 |x#0@@102| |y#0@@66|)) )))
(assert  (=> true (forall (($ly@@278 T@U) (|x#0@@103| (_ BitVec 32)) (|y#0@@67| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@278) LayerTypeType) (or (|_module.__default.BitMod#canCall| |x#0@@103| |y#0@@67|) (not (= |y#0@@67| #x00000000)))) (= (_module.__default.BitMod ($LS $ly@@278) |x#0@@103| |y#0@@67|) (bvurem |x#0@@103| |y#0@@67|))) :qid |bitvecto.78:20| :skolemid |3053| :pattern ( (_module.__default.BitMod ($LS $ly@@278) |x#0@@103| |y#0@@67|)) ))))
(assert  (=> true (forall (($ly@@279 T@U) (|x#0@@104| T@U) (|y#0@@68| T@U) ) (!  (=> (and (and (and (= (type $ly@@279) LayerTypeType) (= (type |x#0@@104|) bv32Type)) (= (type |y#0@@68|) bv32Type)) (or (|_module.__default.BitMod#canCall| (U_2_bv32 (Lit |x#0@@104|)) (U_2_bv32 (Lit |y#0@@68|))) (U_2_bool (Lit (bool_2_U (not (= (U_2_bv32 |y#0@@68|) #x00000000))))))) (= (_module.__default.BitMod ($LS $ly@@279) (U_2_bv32 (Lit |x#0@@104|)) (U_2_bv32 (Lit |y#0@@68|))) (U_2_bv32 (Lit (bv32_2_U (bvurem (U_2_bv32 |x#0@@104|) (U_2_bv32 |y#0@@68|))))))) :qid |bitvecto.78:20| :weight 3 :skolemid |3054| :pattern ( (_module.__default.BitMod ($LS $ly@@279) (U_2_bv32 (Lit |x#0@@104|)) (U_2_bv32 (Lit |y#0@@68|)))) ))))
(assert (forall (($ly@@280 T@U) (|x#0@@105| (_ BitVec 32)) (|y#0@@69| (_ BitVec 32)) ) (!  (=> (= (type $ly@@280) LayerTypeType) (= (_module.__default.BitDiv ($LS $ly@@280) |x#0@@105| |y#0@@69|) (_module.__default.BitDiv $ly@@280 |x#0@@105| |y#0@@69|))) :qid |bitvecto.84:20| :skolemid |3055| :pattern ( (_module.__default.BitDiv ($LS $ly@@280) |x#0@@105| |y#0@@69|)) )))
(assert (forall (($ly@@281 T@U) (|x#0@@106| (_ BitVec 32)) (|y#0@@70| (_ BitVec 32)) ) (!  (=> (= (type $ly@@281) LayerTypeType) (= (_module.__default.BitDiv $ly@@281 |x#0@@106| |y#0@@70|) (_module.__default.BitDiv $LZ |x#0@@106| |y#0@@70|))) :qid |bitvecto.84:20| :skolemid |3056| :pattern ( (_module.__default.BitDiv (AsFuelBottom $ly@@281) |x#0@@106| |y#0@@70|)) )))
(assert  (=> true (forall (($ly@@282 T@U) (|x#0@@107| (_ BitVec 32)) (|y#0@@71| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@282) LayerTypeType) (or (|_module.__default.BitDiv#canCall| |x#0@@107| |y#0@@71|) (not (= |y#0@@71| #x00000000)))) true) :qid |bitvecto.84:20| :skolemid |3057| :pattern ( (_module.__default.BitDiv $ly@@282 |x#0@@107| |y#0@@71|)) ))))
(assert (forall (($ly@@283 T@U) (|x#0@@108| (_ BitVec 32)) (|y#0@@72| (_ BitVec 32)) ) (!  (=> (= (type $ly@@283) LayerTypeType) (and (=> (|_module.__default.BitDiv#requires| $ly@@283 |x#0@@108| |y#0@@72|) (not (= |y#0@@72| #x00000000))) (=> (not (= |y#0@@72| #x00000000)) (|_module.__default.BitDiv#requires| $ly@@283 |x#0@@108| |y#0@@72|)))) :qid |bitvecto.84:20| :skolemid |3058| :pattern ( (|_module.__default.BitDiv#requires| $ly@@283 |x#0@@108| |y#0@@72|)) )))
(assert  (=> true (forall (($ly@@284 T@U) (|x#0@@109| (_ BitVec 32)) (|y#0@@73| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@284) LayerTypeType) (or (|_module.__default.BitDiv#canCall| |x#0@@109| |y#0@@73|) (not (= |y#0@@73| #x00000000)))) (= (_module.__default.BitDiv ($LS $ly@@284) |x#0@@109| |y#0@@73|) (bvudiv |x#0@@109| |y#0@@73|))) :qid |bitvecto.84:20| :skolemid |3059| :pattern ( (_module.__default.BitDiv ($LS $ly@@284) |x#0@@109| |y#0@@73|)) ))))
(assert  (=> true (forall (($ly@@285 T@U) (|x#0@@110| T@U) (|y#0@@74| T@U) ) (!  (=> (and (and (and (= (type $ly@@285) LayerTypeType) (= (type |x#0@@110|) bv32Type)) (= (type |y#0@@74|) bv32Type)) (or (|_module.__default.BitDiv#canCall| (U_2_bv32 (Lit |x#0@@110|)) (U_2_bv32 (Lit |y#0@@74|))) (U_2_bool (Lit (bool_2_U (not (= (U_2_bv32 |y#0@@74|) #x00000000))))))) (= (_module.__default.BitDiv ($LS $ly@@285) (U_2_bv32 (Lit |x#0@@110|)) (U_2_bv32 (Lit |y#0@@74|))) (U_2_bv32 (Lit (bv32_2_U (bvudiv (U_2_bv32 |x#0@@110|) (U_2_bv32 |y#0@@74|))))))) :qid |bitvecto.84:20| :weight 3 :skolemid |3060| :pattern ( (_module.__default.BitDiv ($LS $ly@@285) (U_2_bv32 (Lit |x#0@@110|)) (U_2_bv32 (Lit |y#0@@74|)))) ))))
(assert (forall (($ly@@286 T@U) (|x#0@@111| (_ BitVec 32)) (|y#0@@75| (_ BitVec 32)) ) (!  (=> (= (type $ly@@286) LayerTypeType) (= (_module.__default.BitMul ($LS $ly@@286) |x#0@@111| |y#0@@75|) (_module.__default.BitMul $ly@@286 |x#0@@111| |y#0@@75|))) :qid |bitvecto.90:20| :skolemid |3061| :pattern ( (_module.__default.BitMul ($LS $ly@@286) |x#0@@111| |y#0@@75|)) )))
(assert (forall (($ly@@287 T@U) (|x#0@@112| (_ BitVec 32)) (|y#0@@76| (_ BitVec 32)) ) (!  (=> (= (type $ly@@287) LayerTypeType) (= (_module.__default.BitMul $ly@@287 |x#0@@112| |y#0@@76|) (_module.__default.BitMul $LZ |x#0@@112| |y#0@@76|))) :qid |bitvecto.90:20| :skolemid |3062| :pattern ( (_module.__default.BitMul (AsFuelBottom $ly@@287) |x#0@@112| |y#0@@76|)) )))
(assert  (=> true (forall (($ly@@288 T@U) (|x#0@@113| (_ BitVec 32)) (|y#0@@77| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@288) LayerTypeType) true) true) :qid |bitvecto.90:20| :skolemid |3063| :pattern ( (_module.__default.BitMul $ly@@288 |x#0@@113| |y#0@@77|)) ))))
(assert (forall (($ly@@289 T@U) (|x#0@@114| (_ BitVec 32)) (|y#0@@78| (_ BitVec 32)) ) (!  (=> (= (type $ly@@289) LayerTypeType) (and (=> (|_module.__default.BitMul#requires| $ly@@289 |x#0@@114| |y#0@@78|) true) (=> true (|_module.__default.BitMul#requires| $ly@@289 |x#0@@114| |y#0@@78|)))) :qid |bitvecto.90:20| :skolemid |3064| :pattern ( (|_module.__default.BitMul#requires| $ly@@289 |x#0@@114| |y#0@@78|)) )))
(assert  (=> true (forall (($ly@@290 T@U) (|x#0@@115| (_ BitVec 32)) (|y#0@@79| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@290) LayerTypeType) true) (= (_module.__default.BitMul ($LS $ly@@290) |x#0@@115| |y#0@@79|) (bvmul |x#0@@115| |y#0@@79|))) :qid |bitvecto.90:20| :skolemid |3065| :pattern ( (_module.__default.BitMul ($LS $ly@@290) |x#0@@115| |y#0@@79|)) ))))
(assert  (=> true (forall (($ly@@291 T@U) (|x#0@@116| T@U) (|y#0@@80| T@U) ) (!  (=> (and (and (and (= (type $ly@@291) LayerTypeType) (= (type |x#0@@116|) bv32Type)) (= (type |y#0@@80|) bv32Type)) true) (= (_module.__default.BitMul ($LS $ly@@291) (U_2_bv32 (Lit |x#0@@116|)) (U_2_bv32 (Lit |y#0@@80|))) (U_2_bv32 (Lit (bv32_2_U (bvmul (U_2_bv32 |x#0@@116|) (U_2_bv32 |y#0@@80|))))))) :qid |bitvecto.90:20| :weight 3 :skolemid |3066| :pattern ( (_module.__default.BitMul ($LS $ly@@291) (U_2_bv32 (Lit |x#0@@116|)) (U_2_bv32 (Lit |y#0@@80|)))) ))))
(assert (forall (($ly@@292 T@U) (|x#0@@117| (_ BitVec 32)) ) (!  (=> (= (type $ly@@292) LayerTypeType) (= (_module.__default.BitNot ($LS $ly@@292) |x#0@@117|) (_module.__default.BitNot $ly@@292 |x#0@@117|))) :qid |bitvecto.95:20| :skolemid |3067| :pattern ( (_module.__default.BitNot ($LS $ly@@292) |x#0@@117|)) )))
(assert (forall (($ly@@293 T@U) (|x#0@@118| (_ BitVec 32)) ) (!  (=> (= (type $ly@@293) LayerTypeType) (= (_module.__default.BitNot $ly@@293 |x#0@@118|) (_module.__default.BitNot $LZ |x#0@@118|))) :qid |bitvecto.95:20| :skolemid |3068| :pattern ( (_module.__default.BitNot (AsFuelBottom $ly@@293) |x#0@@118|)) )))
(assert  (=> true (forall (($ly@@294 T@U) (|x#0@@119| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@294) LayerTypeType) true) true) :qid |bitvecto.95:20| :skolemid |3069| :pattern ( (_module.__default.BitNot $ly@@294 |x#0@@119|)) ))))
(assert (forall (($ly@@295 T@U) (|x#0@@120| (_ BitVec 32)) ) (!  (=> (= (type $ly@@295) LayerTypeType) (and (=> (|_module.__default.BitNot#requires| $ly@@295 |x#0@@120|) true) (=> true (|_module.__default.BitNot#requires| $ly@@295 |x#0@@120|)))) :qid |bitvecto.95:20| :skolemid |3070| :pattern ( (|_module.__default.BitNot#requires| $ly@@295 |x#0@@120|)) )))
(assert  (=> true (forall (($ly@@296 T@U) (|x#0@@121| (_ BitVec 32)) ) (!  (=> (and (= (type $ly@@296) LayerTypeType) true) (= (_module.__default.BitNot ($LS $ly@@296) |x#0@@121|) (bvnot |x#0@@121|))) :qid |bitvecto.95:20| :skolemid |3071| :pattern ( (_module.__default.BitNot ($LS $ly@@296) |x#0@@121|)) ))))
(assert  (=> true (forall (($ly@@297 T@U) (|x#0@@122| T@U) ) (!  (=> (and (and (= (type $ly@@297) LayerTypeType) (= (type |x#0@@122|) bv32Type)) true) (= (_module.__default.BitNot ($LS $ly@@297) (U_2_bv32 (Lit |x#0@@122|))) (U_2_bv32 (Lit (bv32_2_U (bvnot (U_2_bv32 (Lit |x#0@@122|)))))))) :qid |bitvecto.95:20| :weight 3 :skolemid |3072| :pattern ( (_module.__default.BitNot ($LS $ly@@297) (U_2_bv32 (Lit |x#0@@122|)))) ))))
(assert (forall (($ly@@298 T@U) (|x#0@@123| (_ BitVec 32)) (|amount#0| Int) ) (!  (=> (= (type $ly@@298) LayerTypeType) (= (_module.__default.BitShiftLeft ($LS $ly@@298) |x#0@@123| |amount#0|) (_module.__default.BitShiftLeft $ly@@298 |x#0@@123| |amount#0|))) :qid |bitvecto.100:20| :skolemid |3073| :pattern ( (_module.__default.BitShiftLeft ($LS $ly@@298) |x#0@@123| |amount#0|)) )))
(assert (forall (($ly@@299 T@U) (|x#0@@124| (_ BitVec 32)) (|amount#0@@0| Int) ) (!  (=> (= (type $ly@@299) LayerTypeType) (= (_module.__default.BitShiftLeft $ly@@299 |x#0@@124| |amount#0@@0|) (_module.__default.BitShiftLeft $LZ |x#0@@124| |amount#0@@0|))) :qid |bitvecto.100:20| :skolemid |3074| :pattern ( (_module.__default.BitShiftLeft (AsFuelBottom $ly@@299) |x#0@@124| |amount#0@@0|)) )))
(assert  (=> true (forall (($ly@@300 T@U) (|x#0@@125| (_ BitVec 32)) (|amount#0@@1| Int) ) (!  (=> (and (= (type $ly@@300) LayerTypeType) (or (|_module.__default.BitShiftLeft#canCall| |x#0@@125| |amount#0@@1|) (and (INTERNAL_le_boogie 0 |amount#0@@1|) (INTERNAL_lt_boogie |amount#0@@1| 32)))) true) :qid |bitvecto.100:20| :skolemid |3075| :pattern ( (_module.__default.BitShiftLeft $ly@@300 |x#0@@125| |amount#0@@1|)) ))))
(assert (forall (($ly@@301 T@U) (|x#0@@126| (_ BitVec 32)) (|amount#0@@2| Int) ) (!  (=> (= (type $ly@@301) LayerTypeType) (and (=> (|_module.__default.BitShiftLeft#requires| $ly@@301 |x#0@@126| |amount#0@@2|) (and (INTERNAL_le_boogie 0 |amount#0@@2|) (INTERNAL_lt_boogie |amount#0@@2| 32))) (=> (and (INTERNAL_le_boogie 0 |amount#0@@2|) (INTERNAL_lt_boogie |amount#0@@2| 32)) (|_module.__default.BitShiftLeft#requires| $ly@@301 |x#0@@126| |amount#0@@2|)))) :qid |bitvecto.100:20| :skolemid |3076| :pattern ( (|_module.__default.BitShiftLeft#requires| $ly@@301 |x#0@@126| |amount#0@@2|)) )))
(assert  (=> true (forall (($ly@@302 T@U) (|x#0@@127| (_ BitVec 32)) (|amount#0@@3| Int) ) (!  (=> (and (= (type $ly@@302) LayerTypeType) (or (|_module.__default.BitShiftLeft#canCall| |x#0@@127| |amount#0@@3|) (and (INTERNAL_le_boogie 0 |amount#0@@3|) (INTERNAL_lt_boogie |amount#0@@3| 32)))) (= (_module.__default.BitShiftLeft ($LS $ly@@302) |x#0@@127| |amount#0@@3|) (bvshl |x#0@@127| ((_ int2bv 32) |amount#0@@3|)))) :qid |bitvecto.100:20| :skolemid |3077| :pattern ( (_module.__default.BitShiftLeft ($LS $ly@@302) |x#0@@127| |amount#0@@3|)) ))))
(assert  (=> true (forall (($ly@@303 T@U) (|x#0@@128| T@U) (|amount#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@303) LayerTypeType) (= (type |x#0@@128|) bv32Type)) (or (|_module.__default.BitShiftLeft#canCall| (U_2_bv32 (Lit |x#0@@128|)) (LitInt |amount#0@@4|)) (and (INTERNAL_le_boogie 0 |amount#0@@4|) (INTERNAL_lt_boogie |amount#0@@4| 32)))) (= (_module.__default.BitShiftLeft ($LS $ly@@303) (U_2_bv32 (Lit |x#0@@128|)) (LitInt |amount#0@@4|)) (U_2_bv32 (Lit (bv32_2_U (bvshl (U_2_bv32 |x#0@@128|) ((_ int2bv 32) |amount#0@@4|))))))) :qid |bitvecto.100:20| :weight 3 :skolemid |3078| :pattern ( (_module.__default.BitShiftLeft ($LS $ly@@303) (U_2_bv32 (Lit |x#0@@128|)) (LitInt |amount#0@@4|))) ))))
(assert (forall (($ly@@304 T@U) (|x#0@@129| (_ BitVec 32)) (|amount#0@@5| Int) ) (!  (=> (= (type $ly@@304) LayerTypeType) (= (_module.__default.BitShiftRight ($LS $ly@@304) |x#0@@129| |amount#0@@5|) (_module.__default.BitShiftRight $ly@@304 |x#0@@129| |amount#0@@5|))) :qid |bitvecto.106:20| :skolemid |3079| :pattern ( (_module.__default.BitShiftRight ($LS $ly@@304) |x#0@@129| |amount#0@@5|)) )))
(assert (forall (($ly@@305 T@U) (|x#0@@130| (_ BitVec 32)) (|amount#0@@6| Int) ) (!  (=> (= (type $ly@@305) LayerTypeType) (= (_module.__default.BitShiftRight $ly@@305 |x#0@@130| |amount#0@@6|) (_module.__default.BitShiftRight $LZ |x#0@@130| |amount#0@@6|))) :qid |bitvecto.106:20| :skolemid |3080| :pattern ( (_module.__default.BitShiftRight (AsFuelBottom $ly@@305) |x#0@@130| |amount#0@@6|)) )))
(assert  (=> true (forall (($ly@@306 T@U) (|x#0@@131| (_ BitVec 32)) (|amount#0@@7| Int) ) (!  (=> (and (= (type $ly@@306) LayerTypeType) (or (|_module.__default.BitShiftRight#canCall| |x#0@@131| |amount#0@@7|) (and (INTERNAL_le_boogie 0 |amount#0@@7|) (INTERNAL_lt_boogie |amount#0@@7| 32)))) true) :qid |bitvecto.106:20| :skolemid |3081| :pattern ( (_module.__default.BitShiftRight $ly@@306 |x#0@@131| |amount#0@@7|)) ))))
(assert (forall (($ly@@307 T@U) (|x#0@@132| (_ BitVec 32)) (|amount#0@@8| Int) ) (!  (=> (= (type $ly@@307) LayerTypeType) (and (=> (|_module.__default.BitShiftRight#requires| $ly@@307 |x#0@@132| |amount#0@@8|) (and (INTERNAL_le_boogie 0 |amount#0@@8|) (INTERNAL_lt_boogie |amount#0@@8| 32))) (=> (and (INTERNAL_le_boogie 0 |amount#0@@8|) (INTERNAL_lt_boogie |amount#0@@8| 32)) (|_module.__default.BitShiftRight#requires| $ly@@307 |x#0@@132| |amount#0@@8|)))) :qid |bitvecto.106:20| :skolemid |3082| :pattern ( (|_module.__default.BitShiftRight#requires| $ly@@307 |x#0@@132| |amount#0@@8|)) )))
(assert  (=> true (forall (($ly@@308 T@U) (|x#0@@133| (_ BitVec 32)) (|amount#0@@9| Int) ) (!  (=> (and (= (type $ly@@308) LayerTypeType) (or (|_module.__default.BitShiftRight#canCall| |x#0@@133| |amount#0@@9|) (and (INTERNAL_le_boogie 0 |amount#0@@9|) (INTERNAL_lt_boogie |amount#0@@9| 32)))) (= (_module.__default.BitShiftRight ($LS $ly@@308) |x#0@@133| |amount#0@@9|) (bvlshr |x#0@@133| ((_ int2bv 32) |amount#0@@9|)))) :qid |bitvecto.106:20| :skolemid |3083| :pattern ( (_module.__default.BitShiftRight ($LS $ly@@308) |x#0@@133| |amount#0@@9|)) ))))
(assert  (=> true (forall (($ly@@309 T@U) (|x#0@@134| T@U) (|amount#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@309) LayerTypeType) (= (type |x#0@@134|) bv32Type)) (or (|_module.__default.BitShiftRight#canCall| (U_2_bv32 (Lit |x#0@@134|)) (LitInt |amount#0@@10|)) (and (INTERNAL_le_boogie 0 |amount#0@@10|) (INTERNAL_lt_boogie |amount#0@@10| 32)))) (= (_module.__default.BitShiftRight ($LS $ly@@309) (U_2_bv32 (Lit |x#0@@134|)) (LitInt |amount#0@@10|)) (U_2_bv32 (Lit (bv32_2_U (bvlshr (U_2_bv32 |x#0@@134|) ((_ int2bv 32) |amount#0@@10|))))))) :qid |bitvecto.106:20| :weight 3 :skolemid |3084| :pattern ( (_module.__default.BitShiftRight ($LS $ly@@309) (U_2_bv32 (Lit |x#0@@134|)) (LitInt |amount#0@@10|))) ))))
(assert (forall (($ly@@310 T@U) (|x#0@@135| (_ BitVec 32)) (|amount#0@@11| Int) ) (!  (=> (= (type $ly@@310) LayerTypeType) (= (_module.__default.BitRotateRight ($LS $ly@@310) |x#0@@135| |amount#0@@11|) (_module.__default.BitRotateRight $ly@@310 |x#0@@135| |amount#0@@11|))) :qid |bitvecto.112:20| :skolemid |3085| :pattern ( (_module.__default.BitRotateRight ($LS $ly@@310) |x#0@@135| |amount#0@@11|)) )))
(assert (forall (($ly@@311 T@U) (|x#0@@136| (_ BitVec 32)) (|amount#0@@12| Int) ) (!  (=> (= (type $ly@@311) LayerTypeType) (= (_module.__default.BitRotateRight $ly@@311 |x#0@@136| |amount#0@@12|) (_module.__default.BitRotateRight $LZ |x#0@@136| |amount#0@@12|))) :qid |bitvecto.112:20| :skolemid |3086| :pattern ( (_module.__default.BitRotateRight (AsFuelBottom $ly@@311) |x#0@@136| |amount#0@@12|)) )))
(assert  (=> true (forall (($ly@@312 T@U) (|x#0@@137| (_ BitVec 32)) (|amount#0@@13| Int) ) (!  (=> (and (= (type $ly@@312) LayerTypeType) (or (|_module.__default.BitRotateRight#canCall| |x#0@@137| |amount#0@@13|) (and (INTERNAL_le_boogie 0 |amount#0@@13|) (INTERNAL_lt_boogie |amount#0@@13| 32)))) true) :qid |bitvecto.112:20| :skolemid |3087| :pattern ( (_module.__default.BitRotateRight $ly@@312 |x#0@@137| |amount#0@@13|)) ))))
(assert (forall (($ly@@313 T@U) (|x#0@@138| (_ BitVec 32)) (|amount#0@@14| Int) ) (!  (=> (= (type $ly@@313) LayerTypeType) (and (=> (|_module.__default.BitRotateRight#requires| $ly@@313 |x#0@@138| |amount#0@@14|) (and (INTERNAL_le_boogie 0 |amount#0@@14|) (INTERNAL_lt_boogie |amount#0@@14| 32))) (=> (and (INTERNAL_le_boogie 0 |amount#0@@14|) (INTERNAL_lt_boogie |amount#0@@14| 32)) (|_module.__default.BitRotateRight#requires| $ly@@313 |x#0@@138| |amount#0@@14|)))) :qid |bitvecto.112:20| :skolemid |3088| :pattern ( (|_module.__default.BitRotateRight#requires| $ly@@313 |x#0@@138| |amount#0@@14|)) )))
(assert (forall (($ly@@314 T@U) (|n#0@@14| Int) ) (!  (=> (= (type $ly@@314) LayerTypeType) (= (_module.__default.pow2 ($LS $ly@@314) |n#0@@14|) (_module.__default.pow2 $ly@@314 |n#0@@14|))) :qid |bitvecto.149:20| :skolemid |3089| :pattern ( (_module.__default.pow2 ($LS $ly@@314) |n#0@@14|)) )))
(assert (forall (($ly@@315 T@U) (|n#0@@15| Int) ) (!  (=> (= (type $ly@@315) LayerTypeType) (= (_module.__default.pow2 $ly@@315 |n#0@@15|) (_module.__default.pow2 $LZ |n#0@@15|))) :qid |bitvecto.149:20| :skolemid |3090| :pattern ( (_module.__default.pow2 (AsFuelBottom $ly@@315) |n#0@@15|)) )))
(assert  (=> true (forall (($ly@@316 T@U) (|n#0@@16| Int) ) (!  (=> (and (= (type $ly@@316) LayerTypeType) (or (|_module.__default.pow2#canCall| |n#0@@16|) (INTERNAL_le_boogie 0 |n#0@@16|))) (and (INTERNAL_gt_boogie (_module.__default.pow2 $ly@@316 |n#0@@16|) 0) (INTERNAL_le_boogie 0 (_module.__default.pow2 $ly@@316 |n#0@@16|)))) :qid |bitvecto.149:20| :skolemid |3091| :pattern ( (_module.__default.pow2 $ly@@316 |n#0@@16|)) ))))
(assert (forall (($ly@@317 T@U) (|n#0@@17| Int) ) (!  (=> (and (= (type $ly@@317) LayerTypeType) (INTERNAL_le_boogie 0 |n#0@@17|)) (and (=> (|_module.__default.pow2#requires| $ly@@317 |n#0@@17|) true) (=> true (|_module.__default.pow2#requires| $ly@@317 |n#0@@17|)))) :qid |bitvecto.149:20| :skolemid |3092| :pattern ( (|_module.__default.pow2#requires| $ly@@317 |n#0@@17|)) )))
(assert  (=> true (forall (($ly@@318 T@U) (|n#0@@18| Int) ) (!  (=> (and (= (type $ly@@318) LayerTypeType) (or (|_module.__default.pow2#canCall| |n#0@@18|) (INTERNAL_le_boogie 0 |n#0@@18|))) (and (=> (not (= |n#0@@18| (LitInt 0))) (|_module.__default.pow2#canCall| (INTERNAL_sub_boogie |n#0@@18| 1))) (= (_module.__default.pow2 ($LS $ly@@318) |n#0@@18|) (ite (= |n#0@@18| (LitInt 0)) 1 (INTERNAL_mul_boogie 2 (_module.__default.pow2 $ly@@318 (INTERNAL_sub_boogie |n#0@@18| 1))))))) :qid |bitvecto.149:20| :skolemid |3093| :pattern ( (_module.__default.pow2 ($LS $ly@@318) |n#0@@18|)) ))))
(assert  (=> true (forall (($ly@@319 T@U) (|n#0@@19| Int) ) (!  (=> (and (= (type $ly@@319) LayerTypeType) (or (|_module.__default.pow2#canCall| (LitInt |n#0@@19|)) (INTERNAL_le_boogie 0 |n#0@@19|))) (and (=> (not (= (LitInt |n#0@@19|) (LitInt 0))) (|_module.__default.pow2#canCall| (LitInt (INTERNAL_sub_boogie |n#0@@19| 1)))) (= (_module.__default.pow2 ($LS $ly@@319) (LitInt |n#0@@19|)) (ite (= (LitInt |n#0@@19|) (LitInt 0)) 1 (INTERNAL_mul_boogie 2 (_module.__default.pow2 ($LS $ly@@319) (LitInt (INTERNAL_sub_boogie |n#0@@19| 1)))))))) :qid |bitvecto.149:20| :weight 3 :skolemid |3094| :pattern ( (_module.__default.pow2 ($LS $ly@@319) (LitInt |n#0@@19|))) ))))
(assert  (=> true (forall ((|bitpos#0| Int) ) (!  (=> (or (|_module.__default.BitAtPos_k#canCall| |bitpos#0|) (and (INTERNAL_le_boogie 0 |bitpos#0|) (INTERNAL_lt_boogie |bitpos#0| 32))) true) :qid |bitvecto.155:20| :skolemid |3095| :pattern ( (_module.__default.BitAtPos_k |bitpos#0|)) ))))
(assert (forall ((|bitpos#0@@0| Int) ) (!  (and (=> (|_module.__default.BitAtPos_k#requires| |bitpos#0@@0|) (and (INTERNAL_le_boogie 0 |bitpos#0@@0|) (INTERNAL_lt_boogie |bitpos#0@@0| 32))) (=> (and (INTERNAL_le_boogie 0 |bitpos#0@@0|) (INTERNAL_lt_boogie |bitpos#0@@0| 32)) (|_module.__default.BitAtPos_k#requires| |bitpos#0@@0|))) :qid |bitvecto.155:20| :skolemid |3096| :pattern ( (|_module.__default.BitAtPos_k#requires| |bitpos#0@@0|)) )))
(assert  (=> true (forall ((|bitpos#0@@1| Int) ) (!  (=> (or (|_module.__default.BitAtPos_k#canCall| |bitpos#0@@1|) (and (INTERNAL_le_boogie 0 |bitpos#0@@1|) (INTERNAL_lt_boogie |bitpos#0@@1| 32))) (= (_module.__default.BitAtPos_k |bitpos#0@@1|) (bvshl #x00000001 ((_ int2bv 32) |bitpos#0@@1|)))) :qid |bitvecto.155:20| :skolemid |3097| :pattern ( (_module.__default.BitAtPos_k |bitpos#0@@1|)) ))))
(assert  (=> true (forall ((|bitpos#0@@2| Int) ) (!  (=> (or (|_module.__default.BitAtPos_k#canCall| (LitInt |bitpos#0@@2|)) (and (INTERNAL_le_boogie 0 |bitpos#0@@2|) (INTERNAL_lt_boogie |bitpos#0@@2| 32))) (= (_module.__default.BitAtPos_k (LitInt |bitpos#0@@2|)) (bvshl #x00000001 ((_ int2bv 32) |bitpos#0@@2|)))) :qid |bitvecto.155:20| :weight 3 :skolemid |3098| :pattern ( (_module.__default.BitAtPos_k (LitInt |bitpos#0@@2|))) ))))
(assert (forall (($ly@@320 T@U) (|bitpos#0@@3| Int) ) (!  (=> (= (type $ly@@320) LayerTypeType) (= (_module.__default.BitAtPos ($LS $ly@@320) |bitpos#0@@3|) (_module.__default.BitAtPos $ly@@320 |bitpos#0@@3|))) :qid |bitvecto.165:20| :skolemid |3099| :pattern ( (_module.__default.BitAtPos ($LS $ly@@320) |bitpos#0@@3|)) )))
(assert (forall (($ly@@321 T@U) (|bitpos#0@@4| Int) ) (!  (=> (= (type $ly@@321) LayerTypeType) (= (_module.__default.BitAtPos $ly@@321 |bitpos#0@@4|) (_module.__default.BitAtPos $LZ |bitpos#0@@4|))) :qid |bitvecto.165:20| :skolemid |3100| :pattern ( (_module.__default.BitAtPos (AsFuelBottom $ly@@321) |bitpos#0@@4|)) )))
(assert (= (type StartFuel__module._default.pow2) LayerTypeType))
(assert  (=> true (forall (($ly@@322 T@U) (|bitpos#0@@5| Int) ) (!  (=> (and (= (type $ly@@322) LayerTypeType) (or (|_module.__default.BitAtPos#canCall| |bitpos#0@@5|) (and (INTERNAL_le_boogie 0 |bitpos#0@@5|) (INTERNAL_lt_boogie |bitpos#0@@5| 32)))) (and (not (= (_module.__default.BitAtPos $ly@@322 |bitpos#0@@5|) #x00000000)) (= (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitAtPos $ly@@322 |bitpos#0@@5|)) (_module.__default.pow2 StartFuel__module._default.pow2 |bitpos#0@@5|)))) :qid |bitvecto.165:20| :skolemid |3101| :pattern ( (_module.__default.BitAtPos $ly@@322 |bitpos#0@@5|)) ))))
(assert (forall (($ly@@323 T@U) (|bitpos#0@@6| Int) ) (!  (=> (= (type $ly@@323) LayerTypeType) (and (=> (|_module.__default.BitAtPos#requires| $ly@@323 |bitpos#0@@6|) (and (INTERNAL_le_boogie 0 |bitpos#0@@6|) (INTERNAL_lt_boogie |bitpos#0@@6| 32))) (=> (and (INTERNAL_le_boogie 0 |bitpos#0@@6|) (INTERNAL_lt_boogie |bitpos#0@@6| 32)) (|_module.__default.BitAtPos#requires| $ly@@323 |bitpos#0@@6|)))) :qid |bitvecto.165:20| :skolemid |3102| :pattern ( (|_module.__default.BitAtPos#requires| $ly@@323 |bitpos#0@@6|)) )))
(assert  (=> true (forall (($ly@@324 T@U) (|bitpos#0@@7| Int) ) (!  (=> (and (= (type $ly@@324) LayerTypeType) (or (|_module.__default.BitAtPos#canCall| |bitpos#0@@7|) (and (INTERNAL_le_boogie 0 |bitpos#0@@7|) (INTERNAL_lt_boogie |bitpos#0@@7| 32)))) (and (|_module.__default.BitAtPos_k#canCall| |bitpos#0@@7|) (= (_module.__default.BitAtPos ($LS $ly@@324) |bitpos#0@@7|) (_module.__default.BitAtPos_k |bitpos#0@@7|)))) :qid |bitvecto.165:20| :skolemid |3103| :pattern ( (_module.__default.BitAtPos ($LS $ly@@324) |bitpos#0@@7|)) ))))
(assert  (=> true (forall (($ly@@325 T@U) (|bitpos#0@@8| Int) ) (!  (=> (and (= (type $ly@@325) LayerTypeType) (or (|_module.__default.BitAtPos#canCall| (LitInt |bitpos#0@@8|)) (and (INTERNAL_le_boogie 0 |bitpos#0@@8|) (INTERNAL_lt_boogie |bitpos#0@@8| 32)))) (and (|_module.__default.BitAtPos_k#canCall| (LitInt |bitpos#0@@8|)) (= (_module.__default.BitAtPos ($LS $ly@@325) (LitInt |bitpos#0@@8|)) (U_2_bv32 (Lit (bv32_2_U (_module.__default.BitAtPos_k (LitInt |bitpos#0@@8|)))))))) :qid |bitvecto.165:20| :weight 3 :skolemid |3104| :pattern ( (_module.__default.BitAtPos ($LS $ly@@325) (LitInt |bitpos#0@@8|))) ))))
(assert  (=> true (forall ((|bitpos#0@@9| Int) ) (!  (=> (or (|_module.__default.BitmaskLow#canCall| |bitpos#0@@9|) (and (INTERNAL_le_boogie 0 |bitpos#0@@9|) (INTERNAL_lt_boogie |bitpos#0@@9| 32))) true) :qid |bitvecto.173:21| :skolemid |3105| :pattern ( (_module.__default.BitmaskLow |bitpos#0@@9|)) ))))
(assert (forall ((|bitpos#0@@10| Int) ) (!  (and (=> (|_module.__default.BitmaskLow#requires| |bitpos#0@@10|) (and (INTERNAL_le_boogie 0 |bitpos#0@@10|) (INTERNAL_lt_boogie |bitpos#0@@10| 32))) (=> (and (INTERNAL_le_boogie 0 |bitpos#0@@10|) (INTERNAL_lt_boogie |bitpos#0@@10| 32)) (|_module.__default.BitmaskLow#requires| |bitpos#0@@10|))) :qid |bitvecto.173:21| :skolemid |3106| :pattern ( (|_module.__default.BitmaskLow#requires| |bitpos#0@@10|)) )))
(assert (= (type StartFuel__module._default.BitAtPos) LayerTypeType))
(assert  (=> true (forall ((|bitpos#0@@11| Int) ) (!  (=> (or (|_module.__default.BitmaskLow#canCall| |bitpos#0@@11|) (and (INTERNAL_le_boogie 0 |bitpos#0@@11|) (INTERNAL_lt_boogie |bitpos#0@@11| 32))) (and (|_module.__default.BitAtPos#canCall| |bitpos#0@@11|) (= (_module.__default.BitmaskLow |bitpos#0@@11|) (bvsub (_module.__default.BitAtPos StartFuel__module._default.BitAtPos |bitpos#0@@11|) #x00000001)))) :qid |bitvecto.173:21| :skolemid |3107| :pattern ( (_module.__default.BitmaskLow |bitpos#0@@11|)) ))))
(assert  (=> true (forall ((|bitpos#0@@12| Int) ) (!  (=> (or (|_module.__default.BitmaskLow#canCall| (LitInt |bitpos#0@@12|)) (and (INTERNAL_le_boogie 0 |bitpos#0@@12|) (INTERNAL_lt_boogie |bitpos#0@@12| 32))) (and (|_module.__default.BitAtPos#canCall| (LitInt |bitpos#0@@12|)) (= (_module.__default.BitmaskLow (LitInt |bitpos#0@@12|)) (bvsub (_module.__default.BitAtPos StartFuel__module._default.BitAtPos (LitInt |bitpos#0@@12|)) #x00000001)))) :qid |bitvecto.173:21| :weight 3 :skolemid |3108| :pattern ( (_module.__default.BitmaskLow (LitInt |bitpos#0@@12|))) ))))
(assert  (=> true (forall ((|bitpos#0@@13| Int) ) (!  (=> (or (|_module.__default.BitmaskHigh#canCall| |bitpos#0@@13|) (and (INTERNAL_le_boogie 0 |bitpos#0@@13|) (INTERNAL_lt_boogie |bitpos#0@@13| 32))) true) :qid |bitvecto.179:22| :skolemid |3109| :pattern ( (_module.__default.BitmaskHigh |bitpos#0@@13|)) ))))
(assert (forall ((|bitpos#0@@14| Int) ) (!  (and (=> (|_module.__default.BitmaskHigh#requires| |bitpos#0@@14|) (and (INTERNAL_le_boogie 0 |bitpos#0@@14|) (INTERNAL_lt_boogie |bitpos#0@@14| 32))) (=> (and (INTERNAL_le_boogie 0 |bitpos#0@@14|) (INTERNAL_lt_boogie |bitpos#0@@14| 32)) (|_module.__default.BitmaskHigh#requires| |bitpos#0@@14|))) :qid |bitvecto.179:22| :skolemid |3110| :pattern ( (|_module.__default.BitmaskHigh#requires| |bitpos#0@@14|)) )))
(assert (= (type StartFuel__module._default.BitNot) LayerTypeType))
(assert  (=> true (forall ((|bitpos#0@@15| Int) ) (!  (=> (or (|_module.__default.BitmaskHigh#canCall| |bitpos#0@@15|) (and (INTERNAL_le_boogie 0 |bitpos#0@@15|) (INTERNAL_lt_boogie |bitpos#0@@15| 32))) (and (and (|_module.__default.BitmaskLow#canCall| |bitpos#0@@15|) (|_module.__default.BitNot#canCall| (_module.__default.BitmaskLow |bitpos#0@@15|))) (= (_module.__default.BitmaskHigh |bitpos#0@@15|) (_module.__default.BitNot StartFuel__module._default.BitNot (_module.__default.BitmaskLow |bitpos#0@@15|))))) :qid |bitvecto.179:22| :skolemid |3111| :pattern ( (_module.__default.BitmaskHigh |bitpos#0@@15|)) ))))
(assert  (=> true (forall ((|bitpos#0@@16| Int) ) (!  (=> (or (|_module.__default.BitmaskHigh#canCall| (LitInt |bitpos#0@@16|)) (and (INTERNAL_le_boogie 0 |bitpos#0@@16|) (INTERNAL_lt_boogie |bitpos#0@@16| 32))) (and (and (|_module.__default.BitmaskLow#canCall| (LitInt |bitpos#0@@16|)) (|_module.__default.BitNot#canCall| (U_2_bv32 (Lit (bv32_2_U (_module.__default.BitmaskLow (LitInt |bitpos#0@@16|))))))) (= (_module.__default.BitmaskHigh (LitInt |bitpos#0@@16|)) (_module.__default.BitNot StartFuel__module._default.BitNot (U_2_bv32 (Lit (bv32_2_U (_module.__default.BitmaskLow (LitInt |bitpos#0@@16|))))))))) :qid |bitvecto.179:22| :weight 3 :skolemid |3112| :pattern ( (_module.__default.BitmaskHigh (LitInt |bitpos#0@@16|))) ))))
(assert  (=> true (forall ((|n#0@@20| Int) ) (!  (=> (or (|_module.__default.pow2__properties#canCall| |n#0@@20|) (INTERNAL_le_boogie 0 |n#0@@20|)) true) :qid |bitvecto.240:27| :skolemid |3113| :pattern ( (_module.__default.pow2__properties |n#0@@20|)) ))))
(assert (forall ((|n#0@@21| Int) ) (!  (=> (INTERNAL_le_boogie 0 |n#0@@21|) (and (=> (|_module.__default.pow2__properties#requires| |n#0@@21|) true) (=> true (|_module.__default.pow2__properties#requires| |n#0@@21|)))) :qid |bitvecto.240:27| :skolemid |3114| :pattern ( (|_module.__default.pow2__properties#requires| |n#0@@21|)) )))
(assert  (=> true (forall ((|n#0@@22| Int) ) (!  (=> (or (|_module.__default.pow2__properties#canCall| |n#0@@22|) (INTERNAL_le_boogie 0 |n#0@@22|)) (and (and (and (=> (INTERNAL_ge_boogie |n#0@@22| 2) (|_module.__default.pow2#canCall| |n#0@@22|)) (=> (and (|_module.__default.pow2#canCall| |n#0@@22|) (= (INTERNAL_mod_boogie (_module.__default.pow2 StartFuel__module._default.pow2 |n#0@@22|) 4) (LitInt 0))) (|_module.__default.pow2#canCall| (LitInt 10)))) (=> (and (|_module.__default.pow2#canCall| (LitInt 10)) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 10)) (LitInt 1024))) (|_module.__default.pow2#canCall| (LitInt 12)))) (and (=> (_module.__default.pow2__properties |n#0@@22|) (and (and (=> (INTERNAL_ge_boogie |n#0@@22| 2) (= (INTERNAL_mod_boogie (_module.__default.pow2 StartFuel__module._default.pow2 |n#0@@22|) 4) (LitInt 0))) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 10)) (LitInt 1024))) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 12)) (LitInt 4096)))) (=> (and (and (=> (INTERNAL_ge_boogie |n#0@@22| 2) (= (INTERNAL_mod_boogie (_module.__default.pow2 StartFuel__module._default.pow2 |n#0@@22|) 4) (LitInt 0))) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 10)) (LitInt 1024))) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 12)) (LitInt 4096))) (_module.__default.pow2__properties |n#0@@22|))))) :qid |bitvecto.240:27| :skolemid |3115| :pattern ( (_module.__default.pow2__properties |n#0@@22|)) ))))
(assert  (=> true (forall ((|n#0@@23| Int) ) (!  (=> (or (|_module.__default.pow2__properties#canCall| (LitInt |n#0@@23|)) (INTERNAL_le_boogie 0 |n#0@@23|)) (and (and (and (=> (INTERNAL_ge_boogie |n#0@@23| 2) (|_module.__default.pow2#canCall| (LitInt |n#0@@23|))) (=> (and (|_module.__default.pow2#canCall| (LitInt |n#0@@23|)) (= (INTERNAL_mod_boogie (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt |n#0@@23|)) 4) (LitInt 0))) (|_module.__default.pow2#canCall| (LitInt 10)))) (=> (and (|_module.__default.pow2#canCall| (LitInt 10)) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 10)) (LitInt 1024))) (|_module.__default.pow2#canCall| (LitInt 12)))) (and (=> (_module.__default.pow2__properties (LitInt |n#0@@23|)) (and (and (=> (INTERNAL_ge_boogie |n#0@@23| 2) (= (INTERNAL_mod_boogie (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt |n#0@@23|)) 4) (LitInt 0))) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 10)) (LitInt 1024))) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 12)) (LitInt 4096)))) (=> (and (and (=> (INTERNAL_ge_boogie |n#0@@23| 2) (= (INTERNAL_mod_boogie (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt |n#0@@23|)) 4) (LitInt 0))) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 10)) (LitInt 1024))) (= (_module.__default.pow2 StartFuel__module._default.pow2 (LitInt 12)) (LitInt 4096))) (_module.__default.pow2__properties (LitInt |n#0@@23|)))))) :qid |bitvecto.240:27| :weight 3 :skolemid |3116| :pattern ( (_module.__default.pow2__properties (LitInt |n#0@@23|))) ))))
(assert (forall (($ly@@326 T@U) (|i#0@@35| Int) (|bitpos#0@@17| Int) ) (!  (=> (= (type $ly@@326) LayerTypeType) (= (_module.__default.BitwiseMaskHigh ($LS $ly@@326) |i#0@@35| |bitpos#0@@17|) (_module.__default.BitwiseMaskHigh $ly@@326 |i#0@@35| |bitpos#0@@17|))) :qid |bitvecto.253:20| :skolemid |3117| :pattern ( (_module.__default.BitwiseMaskHigh ($LS $ly@@326) |i#0@@35| |bitpos#0@@17|)) )))
(assert (forall (($ly@@327 T@U) (|i#0@@36| Int) (|bitpos#0@@18| Int) ) (!  (=> (= (type $ly@@327) LayerTypeType) (= (_module.__default.BitwiseMaskHigh $ly@@327 |i#0@@36| |bitpos#0@@18|) (_module.__default.BitwiseMaskHigh $LZ |i#0@@36| |bitpos#0@@18|))) :qid |bitvecto.253:20| :skolemid |3118| :pattern ( (_module.__default.BitwiseMaskHigh (AsFuelBottom $ly@@327) |i#0@@36| |bitpos#0@@18|)) )))
(assert  (=> true (forall (($ly@@328 T@U) (|i#0@@37| Int) (|bitpos#0@@19| Int) ) (!  (=> (and (= (type $ly@@328) LayerTypeType) (or (|_module.__default.BitwiseMaskHigh#canCall| |i#0@@37| |bitpos#0@@19|) (and (_module.__default.isUInt32 |i#0@@37|) (and (INTERNAL_le_boogie 0 |bitpos#0@@19|) (INTERNAL_lt_boogie |bitpos#0@@19| 32))))) (and (and (and (= (_module.__default.BitwiseMaskHigh $ly@@328 |i#0@@37| |bitpos#0@@19|) (INTERNAL_mul_boogie (INTERNAL_div_boogie |i#0@@37| (_module.__default.pow2 StartFuel__module._default.pow2 |bitpos#0@@19|)) (_module.__default.pow2 StartFuel__module._default.pow2 |bitpos#0@@19|))) (= (INTERNAL_mod_boogie (_module.__default.BitwiseMaskHigh $ly@@328 |i#0@@37| |bitpos#0@@19|) (_module.__default.pow2 StartFuel__module._default.pow2 |bitpos#0@@19|)) (LitInt 0))) (_module.__default.pow2__properties |bitpos#0@@19|)) (_module.__default.isUInt32 (_module.__default.BitwiseMaskHigh $ly@@328 |i#0@@37| |bitpos#0@@19|)))) :qid |bitvecto.253:20| :skolemid |3119| :pattern ( (_module.__default.BitwiseMaskHigh $ly@@328 |i#0@@37| |bitpos#0@@19|)) ))))
(assert (forall (($ly@@329 T@U) (|i#0@@38| Int) (|bitpos#0@@20| Int) ) (!  (=> (and (= (type $ly@@329) LayerTypeType) (_module.__default.isUInt32 |i#0@@38|)) (and (=> (|_module.__default.BitwiseMaskHigh#requires| $ly@@329 |i#0@@38| |bitpos#0@@20|) (and (INTERNAL_le_boogie 0 |bitpos#0@@20|) (INTERNAL_lt_boogie |bitpos#0@@20| 32))) (=> (and (INTERNAL_le_boogie 0 |bitpos#0@@20|) (INTERNAL_lt_boogie |bitpos#0@@20| 32)) (|_module.__default.BitwiseMaskHigh#requires| $ly@@329 |i#0@@38| |bitpos#0@@20|)))) :qid |bitvecto.253:20| :skolemid |3120| :pattern ( (|_module.__default.BitwiseMaskHigh#requires| $ly@@329 |i#0@@38| |bitpos#0@@20|)) )))
(assert  (=> true (forall (($ly@@330 T@U) (|i#0@@39| Int) (|bitpos#0@@21| Int) ) (!  (=> (and (= (type $ly@@330) LayerTypeType) (or (|_module.__default.BitwiseMaskHigh#canCall| |i#0@@39| |bitpos#0@@21|) (and (_module.__default.isUInt32 |i#0@@39|) (and (INTERNAL_le_boogie 0 |bitpos#0@@21|) (INTERNAL_lt_boogie |bitpos#0@@21| 32))))) (and (and (and (and (|_module.__default.WordAsBits#canCall| |i#0@@39|) (|_module.__default.BitmaskHigh#canCall| |bitpos#0@@21|)) (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |i#0@@39|) (_module.__default.BitmaskHigh |bitpos#0@@21|))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |i#0@@39|) (_module.__default.BitmaskHigh |bitpos#0@@21|)))) (= (_module.__default.BitwiseMaskHigh ($LS $ly@@330) |i#0@@39| |bitpos#0@@21|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |i#0@@39|) (_module.__default.BitmaskHigh |bitpos#0@@21|)))))) :qid |bitvecto.253:20| :skolemid |3121| :pattern ( (_module.__default.BitwiseMaskHigh ($LS $ly@@330) |i#0@@39| |bitpos#0@@21|)) ))))
(assert  (=> true (forall (($ly@@331 T@U) (|i#0@@40| Int) (|bitpos#0@@22| Int) ) (!  (=> (and (= (type $ly@@331) LayerTypeType) (or (|_module.__default.BitwiseMaskHigh#canCall| (LitInt |i#0@@40|) (LitInt |bitpos#0@@22|)) (and (_module.__default.isUInt32 |i#0@@40|) (and (INTERNAL_le_boogie 0 |bitpos#0@@22|) (INTERNAL_lt_boogie |bitpos#0@@22| 32))))) (and (and (and (and (|_module.__default.WordAsBits#canCall| (LitInt |i#0@@40|)) (|_module.__default.BitmaskHigh#canCall| (LitInt |bitpos#0@@22|))) (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |i#0@@40|)) (U_2_bv32 (Lit (bv32_2_U (_module.__default.BitmaskHigh (LitInt |bitpos#0@@22|))))))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |i#0@@40|)) (U_2_bv32 (Lit (bv32_2_U (_module.__default.BitmaskHigh (LitInt |bitpos#0@@22|)))))))) (= (_module.__default.BitwiseMaskHigh ($LS $ly@@331) (LitInt |i#0@@40|) (LitInt |bitpos#0@@22|)) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |i#0@@40|)) (U_2_bv32 (Lit (bv32_2_U (_module.__default.BitmaskHigh (LitInt |bitpos#0@@22|)))))))))) :qid |bitvecto.253:20| :weight 3 :skolemid |3122| :pattern ( (_module.__default.BitwiseMaskHigh ($LS $ly@@331) (LitInt |i#0@@40|) (LitInt |bitpos#0@@22|))) ))))
(assert (forall (($ly@@332 T@U) (|i#0@@41| Int) (|bitpos#0@@23| Int) ) (!  (=> (= (type $ly@@332) LayerTypeType) (= (_module.__default.BitwiseMaskLow ($LS $ly@@332) |i#0@@41| |bitpos#0@@23|) (_module.__default.BitwiseMaskLow $ly@@332 |i#0@@41| |bitpos#0@@23|))) :qid |bitvecto.264:20| :skolemid |3123| :pattern ( (_module.__default.BitwiseMaskLow ($LS $ly@@332) |i#0@@41| |bitpos#0@@23|)) )))
(assert (forall (($ly@@333 T@U) (|i#0@@42| Int) (|bitpos#0@@24| Int) ) (!  (=> (= (type $ly@@333) LayerTypeType) (= (_module.__default.BitwiseMaskLow $ly@@333 |i#0@@42| |bitpos#0@@24|) (_module.__default.BitwiseMaskLow $LZ |i#0@@42| |bitpos#0@@24|))) :qid |bitvecto.264:20| :skolemid |3124| :pattern ( (_module.__default.BitwiseMaskLow (AsFuelBottom $ly@@333) |i#0@@42| |bitpos#0@@24|)) )))
(assert  (=> true (forall (($ly@@334 T@U) (|i#0@@43| Int) (|bitpos#0@@25| Int) ) (!  (=> (and (= (type $ly@@334) LayerTypeType) (or (|_module.__default.BitwiseMaskLow#canCall| |i#0@@43| |bitpos#0@@25|) (and (_module.__default.isUInt32 |i#0@@43|) (and (INTERNAL_le_boogie 0 |bitpos#0@@25|) (INTERNAL_lt_boogie |bitpos#0@@25| 32))))) (and (and (= (_module.__default.BitwiseMaskLow $ly@@334 |i#0@@43| |bitpos#0@@25|) (INTERNAL_mod_boogie |i#0@@43| (_module.__default.pow2 StartFuel__module._default.pow2 |bitpos#0@@25|))) (_module.__default.pow2__properties |bitpos#0@@25|)) (_module.__default.isUInt32 (_module.__default.BitwiseMaskLow $ly@@334 |i#0@@43| |bitpos#0@@25|)))) :qid |bitvecto.264:20| :skolemid |3125| :pattern ( (_module.__default.BitwiseMaskLow $ly@@334 |i#0@@43| |bitpos#0@@25|)) ))))
(assert (forall (($ly@@335 T@U) (|i#0@@44| Int) (|bitpos#0@@26| Int) ) (!  (=> (and (= (type $ly@@335) LayerTypeType) (_module.__default.isUInt32 |i#0@@44|)) (and (=> (|_module.__default.BitwiseMaskLow#requires| $ly@@335 |i#0@@44| |bitpos#0@@26|) (and (INTERNAL_le_boogie 0 |bitpos#0@@26|) (INTERNAL_lt_boogie |bitpos#0@@26| 32))) (=> (and (INTERNAL_le_boogie 0 |bitpos#0@@26|) (INTERNAL_lt_boogie |bitpos#0@@26| 32)) (|_module.__default.BitwiseMaskLow#requires| $ly@@335 |i#0@@44| |bitpos#0@@26|)))) :qid |bitvecto.264:20| :skolemid |3126| :pattern ( (|_module.__default.BitwiseMaskLow#requires| $ly@@335 |i#0@@44| |bitpos#0@@26|)) )))
(assert  (=> true (forall (($ly@@336 T@U) (|i#0@@45| Int) (|bitpos#0@@27| Int) ) (!  (=> (and (= (type $ly@@336) LayerTypeType) (or (|_module.__default.BitwiseMaskLow#canCall| |i#0@@45| |bitpos#0@@27|) (and (_module.__default.isUInt32 |i#0@@45|) (and (INTERNAL_le_boogie 0 |bitpos#0@@27|) (INTERNAL_lt_boogie |bitpos#0@@27| 32))))) (and (and (and (and (|_module.__default.WordAsBits#canCall| |i#0@@45|) (|_module.__default.BitmaskLow#canCall| |bitpos#0@@27|)) (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |i#0@@45|) (_module.__default.BitmaskLow |bitpos#0@@27|))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |i#0@@45|) (_module.__default.BitmaskLow |bitpos#0@@27|)))) (= (_module.__default.BitwiseMaskLow ($LS $ly@@336) |i#0@@45| |bitpos#0@@27|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |i#0@@45|) (_module.__default.BitmaskLow |bitpos#0@@27|)))))) :qid |bitvecto.264:20| :skolemid |3127| :pattern ( (_module.__default.BitwiseMaskLow ($LS $ly@@336) |i#0@@45| |bitpos#0@@27|)) ))))
(assert  (=> true (forall (($ly@@337 T@U) (|i#0@@46| Int) (|bitpos#0@@28| Int) ) (!  (=> (and (= (type $ly@@337) LayerTypeType) (or (|_module.__default.BitwiseMaskLow#canCall| (LitInt |i#0@@46|) (LitInt |bitpos#0@@28|)) (and (_module.__default.isUInt32 |i#0@@46|) (and (INTERNAL_le_boogie 0 |bitpos#0@@28|) (INTERNAL_lt_boogie |bitpos#0@@28| 32))))) (and (and (and (and (|_module.__default.WordAsBits#canCall| (LitInt |i#0@@46|)) (|_module.__default.BitmaskLow#canCall| (LitInt |bitpos#0@@28|))) (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |i#0@@46|)) (U_2_bv32 (Lit (bv32_2_U (_module.__default.BitmaskLow (LitInt |bitpos#0@@28|))))))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |i#0@@46|)) (U_2_bv32 (Lit (bv32_2_U (_module.__default.BitmaskLow (LitInt |bitpos#0@@28|)))))))) (= (_module.__default.BitwiseMaskLow ($LS $ly@@337) (LitInt |i#0@@46|) (LitInt |bitpos#0@@28|)) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |i#0@@46|)) (U_2_bv32 (Lit (bv32_2_U (_module.__default.BitmaskLow (LitInt |bitpos#0@@28|)))))))))) :qid |bitvecto.264:20| :weight 3 :skolemid |3128| :pattern ( (_module.__default.BitwiseMaskLow ($LS $ly@@337) (LitInt |i#0@@46|) (LitInt |bitpos#0@@28|))) ))))
(assert  (=> true (forall ((_module._default.fromJust$T T@U) ($Heap@@242 T@U) (|x#0@@139| T@U) ) (!  (=> (and (and (and (= (type _module._default.fromJust$T) TyType) (= (type $Heap@@242) (MapType1Type refType))) (= (type |x#0@@139|) DatatypeTypeType)) (or (|_module.__default.fromJust#canCall| _module._default.fromJust$T |x#0@@139|) (and (and ($IsGoodHeap $Heap@@242) ($Is |x#0@@139| (Tclass._module.Maybe _module._default.fromJust$T))) (_module.Maybe.Just_q |x#0@@139|)))) ($IsBox (_module.__default.fromJust _module._default.fromJust$T |x#0@@139|) _module._default.fromJust$T)) :qid |unknown.0:0| :skolemid |3129| :pattern ( (_module.__default.fromJust _module._default.fromJust$T |x#0@@139|) ($IsGoodHeap $Heap@@242)) ))))
(assert (forall ((_module._default.fromJust$T@@0 T@U) ($Heap@@243 T@U) (|x#0@@140| T@U) ) (!  (=> (and (and (and (= (type _module._default.fromJust$T@@0) TyType) (= (type $Heap@@243) (MapType1Type refType))) (= (type |x#0@@140|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@243) ($Is |x#0@@140| (Tclass._module.Maybe _module._default.fromJust$T@@0)))) (and (=> (|_module.__default.fromJust#requires| _module._default.fromJust$T@@0 |x#0@@140|) (_module.Maybe.Just_q |x#0@@140|)) (=> (_module.Maybe.Just_q |x#0@@140|) (|_module.__default.fromJust#requires| _module._default.fromJust$T@@0 |x#0@@140|)))) :qid |unknown.0:0| :skolemid |3130| :pattern ( (|_module.__default.fromJust#requires| _module._default.fromJust$T@@0 |x#0@@140|) ($IsGoodHeap $Heap@@243)) )))
(assert  (=> true (forall ((_module._default.fromJust$T@@1 T@U) ($Heap@@244 T@U) (|x#0@@141| T@U) ) (!  (=> (and (and (and (= (type _module._default.fromJust$T@@1) TyType) (= (type $Heap@@244) (MapType1Type refType))) (= (type |x#0@@141|) DatatypeTypeType)) (or (|_module.__default.fromJust#canCall| _module._default.fromJust$T@@1 |x#0@@141|) (and (and ($IsGoodHeap $Heap@@244) ($Is |x#0@@141| (Tclass._module.Maybe _module._default.fromJust$T@@1))) (_module.Maybe.Just_q |x#0@@141|)))) (= (_module.__default.fromJust _module._default.fromJust$T@@1 |x#0@@141|) (_module.Maybe.v |x#0@@141|))) :qid |unknown.0:0| :skolemid |3131| :pattern ( (_module.__default.fromJust _module._default.fromJust$T@@1 |x#0@@141|) ($IsGoodHeap $Heap@@244)) ))))
(assert  (=> true (forall ((_module._default.fromJust$T@@2 T@U) ($Heap@@245 T@U) (|x#0@@142| T@U) ) (!  (=> (and (and (and (= (type _module._default.fromJust$T@@2) TyType) (= (type $Heap@@245) (MapType1Type refType))) (= (type |x#0@@142|) DatatypeTypeType)) (or (|_module.__default.fromJust#canCall| _module._default.fromJust$T@@2 (Lit |x#0@@142|)) (and (and ($IsGoodHeap $Heap@@245) ($Is |x#0@@142| (Tclass._module.Maybe _module._default.fromJust$T@@2))) (U_2_bool (Lit (bool_2_U (_module.Maybe.Just_q (Lit |x#0@@142|)))))))) (= (_module.__default.fromJust _module._default.fromJust$T@@2 (Lit |x#0@@142|)) (Lit (_module.Maybe.v (Lit |x#0@@142|))))) :qid |unknown.0:0| :weight 3 :skolemid |3132| :pattern ( (_module.__default.fromJust _module._default.fromJust$T@@2 (Lit |x#0@@142|)) ($IsGoodHeap $Heap@@245)) ))))
(assert  (=> true (forall ((_module._default.SeqLength$T T@U) (|s#0@@264| T@U) ) (!  (=> (and (and (= (type _module._default.SeqLength$T) TyType) (= (type |s#0@@264|) (SeqType BoxType))) (or (|_module.__default.SeqLength#canCall| _module._default.SeqLength$T |s#0@@264|) ($Is |s#0@@264| (TSeq _module._default.SeqLength$T)))) true) :qid |unknown.0:0| :skolemid |3133| :pattern ( (_module.__default.SeqLength _module._default.SeqLength$T |s#0@@264|)) ))))
(assert (forall ((_module._default.SeqLength$T@@0 T@U) (|s#0@@265| T@U) ) (!  (=> (and (and (= (type _module._default.SeqLength$T@@0) TyType) (= (type |s#0@@265|) (SeqType BoxType))) ($Is |s#0@@265| (TSeq _module._default.SeqLength$T@@0))) (and (=> (|_module.__default.SeqLength#requires| _module._default.SeqLength$T@@0 |s#0@@265|) true) (=> true (|_module.__default.SeqLength#requires| _module._default.SeqLength$T@@0 |s#0@@265|)))) :qid |unknown.0:0| :skolemid |3134| :pattern ( (|_module.__default.SeqLength#requires| _module._default.SeqLength$T@@0 |s#0@@265|)) )))
(assert  (=> true (forall ((_module._default.SeqLength$T@@1 T@U) (|s#0@@266| T@U) ) (!  (=> (and (and (= (type _module._default.SeqLength$T@@1) TyType) (= (type |s#0@@266|) (SeqType BoxType))) (or (|_module.__default.SeqLength#canCall| _module._default.SeqLength$T@@1 |s#0@@266|) ($Is |s#0@@266| (TSeq _module._default.SeqLength$T@@1)))) (= (_module.__default.SeqLength _module._default.SeqLength$T@@1 |s#0@@266|) (|Seq#Length| |s#0@@266|))) :qid |unknown.0:0| :skolemid |3135| :pattern ( (_module.__default.SeqLength _module._default.SeqLength$T@@1 |s#0@@266|)) ))))
(assert  (=> true (forall ((_module._default.SeqLength$T@@2 T@U) (|s#0@@267| T@U) ) (!  (=> (and (and (= (type _module._default.SeqLength$T@@2) TyType) (= (type |s#0@@267|) (SeqType BoxType))) (or (|_module.__default.SeqLength#canCall| _module._default.SeqLength$T@@2 (Lit |s#0@@267|)) ($Is |s#0@@267| (TSeq _module._default.SeqLength$T@@2)))) (= (_module.__default.SeqLength _module._default.SeqLength$T@@2 (Lit |s#0@@267|)) (|Seq#Length| (Lit |s#0@@267|)))) :qid |unknown.0:0| :weight 3 :skolemid |3136| :pattern ( (_module.__default.SeqLength _module._default.SeqLength$T@@2 (Lit |s#0@@267|))) ))))
(assert (forall ((arg0@@422 T@U) (arg1@@177 T@U) (arg2@@120 Int) (arg3@@73 Int) ) (! (= (type (_module.__default.SeqSlice arg0@@422 arg1@@177 arg2@@120 arg3@@73)) (SeqType BoxType)) :qid |funType:_module.__default.SeqSlice| :pattern ( (_module.__default.SeqSlice arg0@@422 arg1@@177 arg2@@120 arg3@@73)) )))
(assert  (=> true (forall ((_module._default.SeqSlice$T T@U) (|s#0@@268| T@U) (|start#0| Int) (|end#0| Int) ) (!  (=> (and (and (= (type _module._default.SeqSlice$T) TyType) (= (type |s#0@@268|) (SeqType BoxType))) (or (|_module.__default.SeqSlice#canCall| _module._default.SeqSlice$T |s#0@@268| |start#0| |end#0|) (and ($Is |s#0@@268| (TSeq _module._default.SeqSlice$T)) (and (and (INTERNAL_le_boogie 0 |start#0|) (INTERNAL_le_boogie |start#0| |end#0|)) (INTERNAL_le_boogie |end#0| (|Seq#Length| |s#0@@268|)))))) ($Is (_module.__default.SeqSlice _module._default.SeqSlice$T |s#0@@268| |start#0| |end#0|) (TSeq _module._default.SeqSlice$T))) :qid |unknown.0:0| :skolemid |3137| :pattern ( (_module.__default.SeqSlice _module._default.SeqSlice$T |s#0@@268| |start#0| |end#0|)) ))))
(assert (forall ((_module._default.SeqSlice$T@@0 T@U) (|s#0@@269| T@U) (|start#0@@0| Int) (|end#0@@0| Int) ) (!  (=> (and (and (= (type _module._default.SeqSlice$T@@0) TyType) (= (type |s#0@@269|) (SeqType BoxType))) ($Is |s#0@@269| (TSeq _module._default.SeqSlice$T@@0))) (and (=> (|_module.__default.SeqSlice#requires| _module._default.SeqSlice$T@@0 |s#0@@269| |start#0@@0| |end#0@@0|) (and (and (INTERNAL_le_boogie 0 |start#0@@0|) (INTERNAL_le_boogie |start#0@@0| |end#0@@0|)) (INTERNAL_le_boogie |end#0@@0| (|Seq#Length| |s#0@@269|)))) (=> (and (and (INTERNAL_le_boogie 0 |start#0@@0|) (INTERNAL_le_boogie |start#0@@0| |end#0@@0|)) (INTERNAL_le_boogie |end#0@@0| (|Seq#Length| |s#0@@269|))) (|_module.__default.SeqSlice#requires| _module._default.SeqSlice$T@@0 |s#0@@269| |start#0@@0| |end#0@@0|)))) :qid |unknown.0:0| :skolemid |3138| :pattern ( (|_module.__default.SeqSlice#requires| _module._default.SeqSlice$T@@0 |s#0@@269| |start#0@@0| |end#0@@0|)) )))
(assert  (=> true (forall ((_module._default.SeqSlice$T@@1 T@U) (|s#0@@270| T@U) (|start#0@@1| Int) (|end#0@@1| Int) ) (!  (=> (and (and (= (type _module._default.SeqSlice$T@@1) TyType) (= (type |s#0@@270|) (SeqType BoxType))) (or (|_module.__default.SeqSlice#canCall| _module._default.SeqSlice$T@@1 |s#0@@270| |start#0@@1| |end#0@@1|) (and ($Is |s#0@@270| (TSeq _module._default.SeqSlice$T@@1)) (and (and (INTERNAL_le_boogie 0 |start#0@@1|) (INTERNAL_le_boogie |start#0@@1| |end#0@@1|)) (INTERNAL_le_boogie |end#0@@1| (|Seq#Length| |s#0@@270|)))))) (= (_module.__default.SeqSlice _module._default.SeqSlice$T@@1 |s#0@@270| |start#0@@1| |end#0@@1|) (|Seq#Drop| (|Seq#Take| |s#0@@270| |end#0@@1|) |start#0@@1|))) :qid |unknown.0:0| :skolemid |3139| :pattern ( (_module.__default.SeqSlice _module._default.SeqSlice$T@@1 |s#0@@270| |start#0@@1| |end#0@@1|)) ))))
(assert  (=> true (forall ((_module._default.SeqSlice$T@@2 T@U) (|s#0@@271| T@U) (|start#0@@2| Int) (|end#0@@2| Int) ) (!  (=> (and (and (= (type _module._default.SeqSlice$T@@2) TyType) (= (type |s#0@@271|) (SeqType BoxType))) (or (|_module.__default.SeqSlice#canCall| _module._default.SeqSlice$T@@2 (Lit |s#0@@271|) (LitInt |start#0@@2|) (LitInt |end#0@@2|)) (and ($Is |s#0@@271| (TSeq _module._default.SeqSlice$T@@2)) (and (and (INTERNAL_le_boogie 0 |start#0@@2|) (INTERNAL_le_boogie |start#0@@2| |end#0@@2|)) (INTERNAL_le_boogie |end#0@@2| (|Seq#Length| (Lit |s#0@@271|))))))) (= (_module.__default.SeqSlice _module._default.SeqSlice$T@@2 (Lit |s#0@@271|) (LitInt |start#0@@2|) (LitInt |end#0@@2|)) (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@271|) (LitInt |end#0@@2|)) (LitInt |start#0@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |3140| :pattern ( (_module.__default.SeqSlice _module._default.SeqSlice$T@@2 (Lit |s#0@@271|) (LitInt |start#0@@2|) (LitInt |end#0@@2|))) ))))
(assert (forall ((arg0@@423 T@U) (arg1@@178 T@U) (arg2@@121 Int) ) (! (= (type (_module.__default.SeqDrop arg0@@423 arg1@@178 arg2@@121)) (SeqType BoxType)) :qid |funType:_module.__default.SeqDrop| :pattern ( (_module.__default.SeqDrop arg0@@423 arg1@@178 arg2@@121)) )))
(assert  (=> true (forall ((_module._default.SeqDrop$T T@U) (|s#0@@272| T@U) (|tail#0| Int) ) (!  (=> (and (and (= (type _module._default.SeqDrop$T) TyType) (= (type |s#0@@272|) (SeqType BoxType))) (or (|_module.__default.SeqDrop#canCall| _module._default.SeqDrop$T |s#0@@272| |tail#0|) (and ($Is |s#0@@272| (TSeq _module._default.SeqDrop$T)) (and (INTERNAL_le_boogie 0 |tail#0|) (INTERNAL_le_boogie |tail#0| (|Seq#Length| |s#0@@272|)))))) ($Is (_module.__default.SeqDrop _module._default.SeqDrop$T |s#0@@272| |tail#0|) (TSeq _module._default.SeqDrop$T))) :qid |unknown.0:0| :skolemid |3141| :pattern ( (_module.__default.SeqDrop _module._default.SeqDrop$T |s#0@@272| |tail#0|)) ))))
(assert (forall ((_module._default.SeqDrop$T@@0 T@U) (|s#0@@273| T@U) (|tail#0@@0| Int) ) (!  (=> (and (and (= (type _module._default.SeqDrop$T@@0) TyType) (= (type |s#0@@273|) (SeqType BoxType))) ($Is |s#0@@273| (TSeq _module._default.SeqDrop$T@@0))) (and (=> (|_module.__default.SeqDrop#requires| _module._default.SeqDrop$T@@0 |s#0@@273| |tail#0@@0|) (and (INTERNAL_le_boogie 0 |tail#0@@0|) (INTERNAL_le_boogie |tail#0@@0| (|Seq#Length| |s#0@@273|)))) (=> (and (INTERNAL_le_boogie 0 |tail#0@@0|) (INTERNAL_le_boogie |tail#0@@0| (|Seq#Length| |s#0@@273|))) (|_module.__default.SeqDrop#requires| _module._default.SeqDrop$T@@0 |s#0@@273| |tail#0@@0|)))) :qid |unknown.0:0| :skolemid |3142| :pattern ( (|_module.__default.SeqDrop#requires| _module._default.SeqDrop$T@@0 |s#0@@273| |tail#0@@0|)) )))
(assert  (=> true (forall ((_module._default.SeqDrop$T@@1 T@U) (|s#0@@274| T@U) (|tail#0@@1| Int) ) (!  (=> (and (and (= (type _module._default.SeqDrop$T@@1) TyType) (= (type |s#0@@274|) (SeqType BoxType))) (or (|_module.__default.SeqDrop#canCall| _module._default.SeqDrop$T@@1 |s#0@@274| |tail#0@@1|) (and ($Is |s#0@@274| (TSeq _module._default.SeqDrop$T@@1)) (and (INTERNAL_le_boogie 0 |tail#0@@1|) (INTERNAL_le_boogie |tail#0@@1| (|Seq#Length| |s#0@@274|)))))) (= (_module.__default.SeqDrop _module._default.SeqDrop$T@@1 |s#0@@274| |tail#0@@1|) (|Seq#Take| |s#0@@274| |tail#0@@1|))) :qid |unknown.0:0| :skolemid |3143| :pattern ( (_module.__default.SeqDrop _module._default.SeqDrop$T@@1 |s#0@@274| |tail#0@@1|)) ))))
(assert  (=> true (forall ((_module._default.SeqDrop$T@@2 T@U) (|s#0@@275| T@U) (|tail#0@@2| Int) ) (!  (=> (and (and (= (type _module._default.SeqDrop$T@@2) TyType) (= (type |s#0@@275|) (SeqType BoxType))) (or (|_module.__default.SeqDrop#canCall| _module._default.SeqDrop$T@@2 (Lit |s#0@@275|) (LitInt |tail#0@@2|)) (and ($Is |s#0@@275| (TSeq _module._default.SeqDrop$T@@2)) (and (INTERNAL_le_boogie 0 |tail#0@@2|) (INTERNAL_le_boogie |tail#0@@2| (|Seq#Length| (Lit |s#0@@275|))))))) (= (_module.__default.SeqDrop _module._default.SeqDrop$T@@2 (Lit |s#0@@275|) (LitInt |tail#0@@2|)) (Lit (|Seq#Take| (Lit |s#0@@275|) (LitInt |tail#0@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |3144| :pattern ( (_module.__default.SeqDrop _module._default.SeqDrop$T@@2 (Lit |s#0@@275|) (LitInt |tail#0@@2|))) ))))
(assert (forall ((arg0@@424 T@U) (arg1@@179 T@U) (arg2@@122 T@U) ) (! (= (type (_module.__default.SeqAppendElt arg0@@424 arg1@@179 arg2@@122)) (SeqType BoxType)) :qid |funType:_module.__default.SeqAppendElt| :pattern ( (_module.__default.SeqAppendElt arg0@@424 arg1@@179 arg2@@122)) )))
(assert  (=> true (forall ((_module._default.SeqAppendElt$T T@U) (|s#0@@276| T@U) (|elt#0| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqAppendElt$T) TyType) (= (type |s#0@@276|) (SeqType BoxType))) (= (type |elt#0|) BoxType)) (or (|_module.__default.SeqAppendElt#canCall| _module._default.SeqAppendElt$T |s#0@@276| |elt#0|) (and ($Is |s#0@@276| (TSeq _module._default.SeqAppendElt$T)) ($IsBox |elt#0| _module._default.SeqAppendElt$T)))) ($Is (_module.__default.SeqAppendElt _module._default.SeqAppendElt$T |s#0@@276| |elt#0|) (TSeq _module._default.SeqAppendElt$T))) :qid |unknown.0:0| :skolemid |3145| :pattern ( (_module.__default.SeqAppendElt _module._default.SeqAppendElt$T |s#0@@276| |elt#0|)) ))))
(assert (forall ((_module._default.SeqAppendElt$T@@0 T@U) (|s#0@@277| T@U) (|elt#0@@0| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqAppendElt$T@@0) TyType) (= (type |s#0@@277|) (SeqType BoxType))) (= (type |elt#0@@0|) BoxType)) (and ($Is |s#0@@277| (TSeq _module._default.SeqAppendElt$T@@0)) ($IsBox |elt#0@@0| _module._default.SeqAppendElt$T@@0))) (and (=> (|_module.__default.SeqAppendElt#requires| _module._default.SeqAppendElt$T@@0 |s#0@@277| |elt#0@@0|) true) (=> true (|_module.__default.SeqAppendElt#requires| _module._default.SeqAppendElt$T@@0 |s#0@@277| |elt#0@@0|)))) :qid |unknown.0:0| :skolemid |3146| :pattern ( (|_module.__default.SeqAppendElt#requires| _module._default.SeqAppendElt$T@@0 |s#0@@277| |elt#0@@0|)) )))
(assert  (=> true (forall ((_module._default.SeqAppendElt$T@@1 T@U) (|s#0@@278| T@U) (|elt#0@@1| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqAppendElt$T@@1) TyType) (= (type |s#0@@278|) (SeqType BoxType))) (= (type |elt#0@@1|) BoxType)) (or (|_module.__default.SeqAppendElt#canCall| _module._default.SeqAppendElt$T@@1 |s#0@@278| |elt#0@@1|) (and ($Is |s#0@@278| (TSeq _module._default.SeqAppendElt$T@@1)) ($IsBox |elt#0@@1| _module._default.SeqAppendElt$T@@1)))) (= (_module.__default.SeqAppendElt _module._default.SeqAppendElt$T@@1 |s#0@@278| |elt#0@@1|) (|Seq#Append| |s#0@@278| (|Seq#Build| (|Seq#Empty| BoxType) |elt#0@@1|)))) :qid |unknown.0:0| :skolemid |3147| :pattern ( (_module.__default.SeqAppendElt _module._default.SeqAppendElt$T@@1 |s#0@@278| |elt#0@@1|)) ))))
(assert  (=> true (forall ((_module._default.SeqAppendElt$T@@2 T@U) (|s#0@@279| T@U) (|elt#0@@2| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqAppendElt$T@@2) TyType) (= (type |s#0@@279|) (SeqType BoxType))) (= (type |elt#0@@2|) BoxType)) (or (|_module.__default.SeqAppendElt#canCall| _module._default.SeqAppendElt$T@@2 (Lit |s#0@@279|) |elt#0@@2|) (and ($Is |s#0@@279| (TSeq _module._default.SeqAppendElt$T@@2)) ($IsBox |elt#0@@2| _module._default.SeqAppendElt$T@@2)))) (= (_module.__default.SeqAppendElt _module._default.SeqAppendElt$T@@2 (Lit |s#0@@279|) |elt#0@@2|) (|Seq#Append| |s#0@@279| (|Seq#Build| (|Seq#Empty| BoxType) |elt#0@@2|)))) :qid |unknown.0:0| :weight 3 :skolemid |3148| :pattern ( (_module.__default.SeqAppendElt _module._default.SeqAppendElt$T@@2 (Lit |s#0@@279|) |elt#0@@2|)) ))))
(assert  (=> true (forall ((_module._default.SeqAppendElt$T@@3 T@U) (|s#0@@280| T@U) (|elt#0@@3| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqAppendElt$T@@3) TyType) (= (type |s#0@@280|) (SeqType BoxType))) (= (type |elt#0@@3|) BoxType)) (or (|_module.__default.SeqAppendElt#canCall| _module._default.SeqAppendElt$T@@3 (Lit |s#0@@280|) (Lit |elt#0@@3|)) (and ($Is |s#0@@280| (TSeq _module._default.SeqAppendElt$T@@3)) ($IsBox |elt#0@@3| _module._default.SeqAppendElt$T@@3)))) (= (_module.__default.SeqAppendElt _module._default.SeqAppendElt$T@@3 (Lit |s#0@@280|) (Lit |elt#0@@3|)) (|Seq#Append| |s#0@@280| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |elt#0@@3|))))) :qid |unknown.0:0| :weight 3 :skolemid |3149| :pattern ( (_module.__default.SeqAppendElt _module._default.SeqAppendElt$T@@3 (Lit |s#0@@280|) (Lit |elt#0@@3|))) ))))
(assert (forall ((arg0@@425 T@U) (arg1@@180 T@U) ) (! (= (type (_module.__default.SeqBuild arg0@@425 arg1@@180)) (SeqType BoxType)) :qid |funType:_module.__default.SeqBuild| :pattern ( (_module.__default.SeqBuild arg0@@425 arg1@@180)) )))
(assert  (=> true (forall ((_module._default.SeqBuild$T T@U) (|elt#0@@4| T@U) ) (!  (=> (and (and (= (type _module._default.SeqBuild$T) TyType) (= (type |elt#0@@4|) BoxType)) (or (|_module.__default.SeqBuild#canCall| _module._default.SeqBuild$T |elt#0@@4|) ($IsBox |elt#0@@4| _module._default.SeqBuild$T))) ($Is (_module.__default.SeqBuild _module._default.SeqBuild$T |elt#0@@4|) (TSeq _module._default.SeqBuild$T))) :qid |unknown.0:0| :skolemid |3150| :pattern ( (_module.__default.SeqBuild _module._default.SeqBuild$T |elt#0@@4|)) ))))
(assert (forall ((_module._default.SeqBuild$T@@0 T@U) (|elt#0@@5| T@U) ) (!  (=> (and (and (= (type _module._default.SeqBuild$T@@0) TyType) (= (type |elt#0@@5|) BoxType)) ($IsBox |elt#0@@5| _module._default.SeqBuild$T@@0)) (and (=> (|_module.__default.SeqBuild#requires| _module._default.SeqBuild$T@@0 |elt#0@@5|) true) (=> true (|_module.__default.SeqBuild#requires| _module._default.SeqBuild$T@@0 |elt#0@@5|)))) :qid |unknown.0:0| :skolemid |3151| :pattern ( (|_module.__default.SeqBuild#requires| _module._default.SeqBuild$T@@0 |elt#0@@5|)) )))
(assert  (=> true (forall ((_module._default.SeqBuild$T@@1 T@U) (|elt#0@@6| T@U) ) (!  (=> (and (and (= (type _module._default.SeqBuild$T@@1) TyType) (= (type |elt#0@@6|) BoxType)) (or (|_module.__default.SeqBuild#canCall| _module._default.SeqBuild$T@@1 |elt#0@@6|) ($IsBox |elt#0@@6| _module._default.SeqBuild$T@@1))) (= (_module.__default.SeqBuild _module._default.SeqBuild$T@@1 |elt#0@@6|) (|Seq#Build| (|Seq#Empty| BoxType) |elt#0@@6|))) :qid |unknown.0:0| :skolemid |3152| :pattern ( (_module.__default.SeqBuild _module._default.SeqBuild$T@@1 |elt#0@@6|)) ))))
(assert  (=> true (forall ((_module._default.SeqBuild$T@@2 T@U) (|elt#0@@7| T@U) ) (!  (=> (and (and (= (type _module._default.SeqBuild$T@@2) TyType) (= (type |elt#0@@7|) BoxType)) (or (|_module.__default.SeqBuild#canCall| _module._default.SeqBuild$T@@2 (Lit |elt#0@@7|)) ($IsBox |elt#0@@7| _module._default.SeqBuild$T@@2))) (= (_module.__default.SeqBuild _module._default.SeqBuild$T@@2 (Lit |elt#0@@7|)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) (Lit |elt#0@@7|))))) :qid |unknown.0:0| :weight 3 :skolemid |3153| :pattern ( (_module.__default.SeqBuild _module._default.SeqBuild$T@@2 (Lit |elt#0@@7|))) ))))
(assert (forall ((arg0@@426 T@U) (arg1@@181 T@U) (arg2@@123 Int) (arg3@@74 T@U) ) (! (= (type (_module.__default.SeqRepeat arg0@@426 arg1@@181 arg2@@123 arg3@@74)) (SeqType BoxType)) :qid |funType:_module.__default.SeqRepeat| :pattern ( (_module.__default.SeqRepeat arg0@@426 arg1@@181 arg2@@123 arg3@@74)) )))
(assert (forall ((_module._default.SeqRepeat$T T@U) ($ly@@338 T@U) (|count#0@@12| Int) (|elt#0@@8| T@U) ) (!  (=> (and (and (= (type _module._default.SeqRepeat$T) TyType) (= (type $ly@@338) LayerTypeType)) (= (type |elt#0@@8|) BoxType)) (= (_module.__default.SeqRepeat _module._default.SeqRepeat$T ($LS $ly@@338) |count#0@@12| |elt#0@@8|) (_module.__default.SeqRepeat _module._default.SeqRepeat$T $ly@@338 |count#0@@12| |elt#0@@8|))) :qid |unknown.0:0| :skolemid |3154| :pattern ( (_module.__default.SeqRepeat _module._default.SeqRepeat$T ($LS $ly@@338) |count#0@@12| |elt#0@@8|)) )))
(assert (forall ((_module._default.SeqRepeat$T@@0 T@U) ($ly@@339 T@U) (|count#0@@13| Int) (|elt#0@@9| T@U) ) (!  (=> (and (and (= (type _module._default.SeqRepeat$T@@0) TyType) (= (type $ly@@339) LayerTypeType)) (= (type |elt#0@@9|) BoxType)) (= (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@0 $ly@@339 |count#0@@13| |elt#0@@9|) (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@0 $LZ |count#0@@13| |elt#0@@9|))) :qid |unknown.0:0| :skolemid |3155| :pattern ( (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@0 (AsFuelBottom $ly@@339) |count#0@@13| |elt#0@@9|)) )))
(assert  (=> true (forall ((_module._default.SeqRepeat$T@@1 T@U) ($ly@@340 T@U) (|count#0@@14| Int) (|elt#0@@10| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqRepeat$T@@1) TyType) (= (type $ly@@340) LayerTypeType)) (= (type |elt#0@@10|) BoxType)) (or (|_module.__default.SeqRepeat#canCall| _module._default.SeqRepeat$T@@1 |count#0@@14| |elt#0@@10|) (and (INTERNAL_le_boogie 0 |count#0@@14|) ($IsBox |elt#0@@10| _module._default.SeqRepeat$T@@1)))) (and (and (= (|Seq#Length| (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@1 $ly@@340 |count#0@@14| |elt#0@@10|)) |count#0@@14|) (forall ((|i#0@@47| Int) (|tr$ly#0@@17| T@U) ) (!  (=> (and (and (= (type |tr$ly#0@@17|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |i#0@@47|) (INTERNAL_lt_boogie |i#0@@47| |count#0@@14|))) (= (|Seq#Index| (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@1 $ly@@340 |count#0@@14| |elt#0@@10|) |i#0@@47|) |elt#0@@10|)) :qid |Seqdfy.17:20| :skolemid |3156| :pattern ( (|Seq#Index| (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@1 |tr$ly#0@@17| |count#0@@14| |elt#0@@10|) |i#0@@47|)) ))) ($Is (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@1 $ly@@340 |count#0@@14| |elt#0@@10|) (TSeq _module._default.SeqRepeat$T@@1)))) :qid |unknown.0:0| :skolemid |3157| :pattern ( (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@1 $ly@@340 |count#0@@14| |elt#0@@10|)) ))))
(assert (forall ((_module._default.SeqRepeat$T@@2 T@U) ($ly@@341 T@U) (|count#0@@15| Int) (|elt#0@@11| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqRepeat$T@@2) TyType) (= (type $ly@@341) LayerTypeType)) (= (type |elt#0@@11|) BoxType)) (and (INTERNAL_le_boogie 0 |count#0@@15|) ($IsBox |elt#0@@11| _module._default.SeqRepeat$T@@2))) (and (=> (|_module.__default.SeqRepeat#requires| _module._default.SeqRepeat$T@@2 $ly@@341 |count#0@@15| |elt#0@@11|) true) (=> true (|_module.__default.SeqRepeat#requires| _module._default.SeqRepeat$T@@2 $ly@@341 |count#0@@15| |elt#0@@11|)))) :qid |unknown.0:0| :skolemid |3158| :pattern ( (|_module.__default.SeqRepeat#requires| _module._default.SeqRepeat$T@@2 $ly@@341 |count#0@@15| |elt#0@@11|)) )))
(assert  (=> true (forall ((_module._default.SeqRepeat$T@@3 T@U) ($ly@@342 T@U) (|count#0@@16| Int) (|elt#0@@12| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqRepeat$T@@3) TyType) (= (type $ly@@342) LayerTypeType)) (= (type |elt#0@@12|) BoxType)) (or (|_module.__default.SeqRepeat#canCall| _module._default.SeqRepeat$T@@3 |count#0@@16| |elt#0@@12|) (and (INTERNAL_le_boogie 0 |count#0@@16|) ($IsBox |elt#0@@12| _module._default.SeqRepeat$T@@3)))) (and (=> (not (= |count#0@@16| (LitInt 0))) (|_module.__default.SeqRepeat#canCall| _module._default.SeqRepeat$T@@3 (INTERNAL_sub_boogie |count#0@@16| 1) |elt#0@@12|)) (= (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@3 ($LS $ly@@342) |count#0@@16| |elt#0@@12|) (ite (= |count#0@@16| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |elt#0@@12|) (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@3 $ly@@342 (INTERNAL_sub_boogie |count#0@@16| 1) |elt#0@@12|)))))) :qid |unknown.0:0| :skolemid |3159| :pattern ( (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@3 ($LS $ly@@342) |count#0@@16| |elt#0@@12|)) ))))
(assert  (=> true (forall ((_module._default.SeqRepeat$T@@4 T@U) ($ly@@343 T@U) (|count#0@@17| Int) (|elt#0@@13| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqRepeat$T@@4) TyType) (= (type $ly@@343) LayerTypeType)) (= (type |elt#0@@13|) BoxType)) (or (|_module.__default.SeqRepeat#canCall| _module._default.SeqRepeat$T@@4 (LitInt |count#0@@17|) |elt#0@@13|) (and (INTERNAL_le_boogie 0 |count#0@@17|) ($IsBox |elt#0@@13| _module._default.SeqRepeat$T@@4)))) (and (=> (not (= (LitInt |count#0@@17|) (LitInt 0))) (|_module.__default.SeqRepeat#canCall| _module._default.SeqRepeat$T@@4 (LitInt (INTERNAL_sub_boogie |count#0@@17| 1)) |elt#0@@13|)) (= (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@4 ($LS $ly@@343) (LitInt |count#0@@17|) |elt#0@@13|) (ite (= (LitInt |count#0@@17|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |elt#0@@13|) (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@4 ($LS $ly@@343) (LitInt (INTERNAL_sub_boogie |count#0@@17| 1)) |elt#0@@13|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3160| :pattern ( (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@4 ($LS $ly@@343) (LitInt |count#0@@17|) |elt#0@@13|)) ))))
(assert  (=> true (forall ((_module._default.SeqRepeat$T@@5 T@U) ($ly@@344 T@U) (|count#0@@18| Int) (|elt#0@@14| T@U) ) (!  (=> (and (and (and (= (type _module._default.SeqRepeat$T@@5) TyType) (= (type $ly@@344) LayerTypeType)) (= (type |elt#0@@14|) BoxType)) (or (|_module.__default.SeqRepeat#canCall| _module._default.SeqRepeat$T@@5 (LitInt |count#0@@18|) (Lit |elt#0@@14|)) (and (INTERNAL_le_boogie 0 |count#0@@18|) ($IsBox |elt#0@@14| _module._default.SeqRepeat$T@@5)))) (and (=> (not (= (LitInt |count#0@@18|) (LitInt 0))) (|_module.__default.SeqRepeat#canCall| _module._default.SeqRepeat$T@@5 (LitInt (INTERNAL_sub_boogie |count#0@@18| 1)) (Lit |elt#0@@14|))) (= (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@5 ($LS $ly@@344) (LitInt |count#0@@18|) (Lit |elt#0@@14|)) (ite (= (LitInt |count#0@@18|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |elt#0@@14|)) (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@5 ($LS $ly@@344) (LitInt (INTERNAL_sub_boogie |count#0@@18| 1)) (Lit |elt#0@@14|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3161| :pattern ( (_module.__default.SeqRepeat _module._default.SeqRepeat$T@@5 ($LS $ly@@344) (LitInt |count#0@@18|) (Lit |elt#0@@14|))) ))))
(assert (forall ((arg0@@427 T@U) (arg1@@182 T@U) (arg2@@124 T@U) (arg3@@75 T@U) (arg4@@58 T@U) (arg5@@46 T@U) ) (! (= (type (_module.__default.MapSeqToSeq arg0@@427 arg1@@182 arg2@@124 arg3@@75 arg4@@58 arg5@@46)) (SeqType BoxType)) :qid |funType:_module.__default.MapSeqToSeq| :pattern ( (_module.__default.MapSeqToSeq arg0@@427 arg1@@182 arg2@@124 arg3@@75 arg4@@58 arg5@@46)) )))
(assert (forall ((_module._default.MapSeqToSeq$T T@U) (_module._default.MapSeqToSeq$U T@U) ($ly@@345 T@U) ($Heap@@246 T@U) (|s#0@@281| T@U) (|func#0| T@U) ) (!  (=> (and (and (and (and (and (= (type _module._default.MapSeqToSeq$T) TyType) (= (type _module._default.MapSeqToSeq$U) TyType)) (= (type $ly@@345) LayerTypeType)) (= (type $Heap@@246) (MapType1Type refType))) (= (type |s#0@@281|) (SeqType BoxType))) (= (type |func#0|) HandleTypeType)) (= (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T _module._default.MapSeqToSeq$U ($LS $ly@@345) $Heap@@246 |s#0@@281| |func#0|) (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T _module._default.MapSeqToSeq$U $ly@@345 $Heap@@246 |s#0@@281| |func#0|))) :qid |unknown.0:0| :skolemid |3162| :pattern ( (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T _module._default.MapSeqToSeq$U ($LS $ly@@345) $Heap@@246 |s#0@@281| |func#0|)) )))
(assert (forall ((_module._default.MapSeqToSeq$T@@0 T@U) (_module._default.MapSeqToSeq$U@@0 T@U) ($ly@@346 T@U) ($Heap@@247 T@U) (|s#0@@282| T@U) (|func#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type _module._default.MapSeqToSeq$T@@0) TyType) (= (type _module._default.MapSeqToSeq$U@@0) TyType)) (= (type $ly@@346) LayerTypeType)) (= (type $Heap@@247) (MapType1Type refType))) (= (type |s#0@@282|) (SeqType BoxType))) (= (type |func#0@@0|) HandleTypeType)) (= (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@0 _module._default.MapSeqToSeq$U@@0 $ly@@346 $Heap@@247 |s#0@@282| |func#0@@0|) (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@0 _module._default.MapSeqToSeq$U@@0 $LZ $Heap@@247 |s#0@@282| |func#0@@0|))) :qid |unknown.0:0| :skolemid |3163| :pattern ( (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@0 _module._default.MapSeqToSeq$U@@0 (AsFuelBottom $ly@@346) $Heap@@247 |s#0@@282| |func#0@@0|)) )))
(assert (forall ((_module._default.MapSeqToSeq$T@@1 T@U) (_module._default.MapSeqToSeq$U@@1 T@U) ($ly@@347 T@U) ($h0 T@U) ($h1 T@U) (|s#0@@283| T@U) (|func#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type _module._default.MapSeqToSeq$T@@1) TyType) (= (type _module._default.MapSeqToSeq$U@@1) TyType)) (= (type $ly@@347) LayerTypeType)) (= (type $h0) (MapType1Type refType))) (= (type $h1) (MapType1Type refType))) (= (type |s#0@@283|) (SeqType BoxType))) (= (type |func#0@@1|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (|_module.__default.MapSeqToSeq#canCall| _module._default.MapSeqToSeq$T@@1 _module._default.MapSeqToSeq$U@@1 $h0 |s#0@@283| |func#0@@1|) (and ($Is |s#0@@283| (TSeq _module._default.MapSeqToSeq$T@@1)) ($Is |func#0@@1| (Tclass._System.___hFunc1 _module._default.MapSeqToSeq$T@@1 _module._default.MapSeqToSeq$U@@1)))) (or (|_module.__default.MapSeqToSeq#canCall| _module._default.MapSeqToSeq$T@@1 _module._default.MapSeqToSeq$U@@1 $h1 |s#0@@283| |func#0@@1|) (and ($Is |s#0@@283| (TSeq _module._default.MapSeqToSeq$T@@1)) ($Is |func#0@@1| (Tclass._System.___hFunc1 _module._default.MapSeqToSeq$T@@1 _module._default.MapSeqToSeq$U@@1)))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@7 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@7) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@7 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| _module._default.MapSeqToSeq$T@@1) ($Is |_o0#0| Tclass._System.object)) (U_2_bool (MapType0Select (Reads1 _module._default.MapSeqToSeq$T@@1 _module._default.MapSeqToSeq$U@@1 |func#0@@1| $h0 |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@7) ($Box |_o0#0|)))) :qid |Seqdfy.23:16| :skolemid |3164| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select $h0 $o@@7 $f) (MapType1Select $h1 $o@@7 $f)))) :qid |unknown.0:0| :skolemid |3165| :no-pattern (type $o@@7) :no-pattern (type $f) :no-pattern (U_2_int $o@@7) :no-pattern (U_2_bool $o@@7) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@1 _module._default.MapSeqToSeq$U@@1 $ly@@347 $h0 |s#0@@283| |func#0@@1|) (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@1 _module._default.MapSeqToSeq$U@@1 $ly@@347 $h1 |s#0@@283| |func#0@@1|))) :qid |unknown.0:0| :skolemid |3166| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@1 _module._default.MapSeqToSeq$U@@1 $ly@@347 $h1 |s#0@@283| |func#0@@1|)) )))
(assert  (=> true (forall ((_module._default.MapSeqToSeq$T@@2 T@U) (_module._default.MapSeqToSeq$U@@2 T@U) ($ly@@348 T@U) ($Heap@@248 T@U) (|s#0@@284| T@U) (|func#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type _module._default.MapSeqToSeq$T@@2) TyType) (= (type _module._default.MapSeqToSeq$U@@2) TyType)) (= (type $ly@@348) LayerTypeType)) (= (type $Heap@@248) (MapType1Type refType))) (= (type |s#0@@284|) (SeqType BoxType))) (= (type |func#0@@2|) HandleTypeType)) (or (|_module.__default.MapSeqToSeq#canCall| _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 $Heap@@248 |s#0@@284| |func#0@@2|) (and (and (and ($IsGoodHeap $Heap@@248) ($Is |s#0@@284| (TSeq _module._default.MapSeqToSeq$T@@2))) ($Is |func#0@@2| (Tclass._System.___hFunc1 _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2))) (and (forall ((|i#0@@48| T@U) ) (!  (=> (and (= (type |i#0@@48|) BoxType) ($IsBox |i#0@@48| _module._default.MapSeqToSeq$T@@2)) (|Set#Equal| (Reads1 _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 |func#0@@2| $Heap@@248 |i#0@@48|) (|Set#Empty| BoxType))) :qid |Seqdfy.24:21| :skolemid |3167| :pattern ( (Reads1 _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 |func#0@@2| $Heap@@248 |i#0@@48|)) )) (forall ((|i#1@@23| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#1@@23|) (INTERNAL_lt_boogie |i#1@@23| (|Seq#Length| |s#0@@284|))) (Requires1 _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 |func#0@@2| $Heap@@248 (|Seq#Index| |s#0@@284| |i#1@@23|)))) :qid |Seqdfy.25:21| :skolemid |3168| :pattern ( (|Seq#Index| |s#0@@284| |i#1@@23|)) )))))) (and (and (= (|Seq#Length| (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 $ly@@348 $Heap@@248 |s#0@@284| |func#0@@2|)) (|Seq#Length| |s#0@@284|)) (forall ((|i#2| Int) (|tr$ly#0@@18| T@U) ) (!  (=> (and (and (= (type |tr$ly#0@@18|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |i#2|) (INTERNAL_lt_boogie |i#2| (|Seq#Length| |s#0@@284|)))) (= (Apply1 _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 |func#0@@2| $Heap@@248 (|Seq#Index| |s#0@@284| |i#2|)) (|Seq#Index| (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 $ly@@348 $Heap@@248 |s#0@@284| |func#0@@2|) |i#2|))) :qid |Seqdfy.27:20| :skolemid |3169| :pattern ( (Apply1 _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 |func#0@@2| $Heap@@248 (|Seq#Index| |s#0@@284| |i#2|)) (AsFuelBottom |tr$ly#0@@18|)) :pattern ( (|Seq#Index| (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 |tr$ly#0@@18| $Heap@@248 |s#0@@284| |func#0@@2|) |i#2|)) ))) ($Is (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 $ly@@348 $Heap@@248 |s#0@@284| |func#0@@2|) (TSeq _module._default.MapSeqToSeq$U@@2)))) :qid |unknown.0:0| :skolemid |3170| :pattern ( (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@2 _module._default.MapSeqToSeq$U@@2 $ly@@348 $Heap@@248 |s#0@@284| |func#0@@2|)) ))))
(assert (forall ((_module._default.MapSeqToSeq$T@@3 T@U) (_module._default.MapSeqToSeq$U@@3 T@U) ($ly@@349 T@U) ($Heap@@249 T@U) (|s#0@@285| T@U) (|func#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type _module._default.MapSeqToSeq$T@@3) TyType) (= (type _module._default.MapSeqToSeq$U@@3) TyType)) (= (type $ly@@349) LayerTypeType)) (= (type $Heap@@249) (MapType1Type refType))) (= (type |s#0@@285|) (SeqType BoxType))) (= (type |func#0@@3|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@249) ($Is |s#0@@285| (TSeq _module._default.MapSeqToSeq$T@@3))) ($Is |func#0@@3| (Tclass._System.___hFunc1 _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3)))) (and (=> (|_module.__default.MapSeqToSeq#requires| _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3 $ly@@349 $Heap@@249 |s#0@@285| |func#0@@3|) (and (forall ((|i#3| T@U) ) (!  (=> (and (= (type |i#3|) BoxType) ($IsBox |i#3| _module._default.MapSeqToSeq$T@@3)) (|Set#Equal| (Reads1 _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3 |func#0@@3| $Heap@@249 |i#3|) (|Set#Empty| BoxType))) :qid |Seqdfy.24:21| :skolemid |3171| :pattern ( (Reads1 _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3 |func#0@@3| $Heap@@249 |i#3|)) )) (forall ((|i#4| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#4|) (INTERNAL_lt_boogie |i#4| (|Seq#Length| |s#0@@285|))) (Requires1 _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3 |func#0@@3| $Heap@@249 (|Seq#Index| |s#0@@285| |i#4|)))) :qid |Seqdfy.25:21| :skolemid |3172| :pattern ( (|Seq#Index| |s#0@@285| |i#4|)) )))) (=> (and (forall ((|i#3@@0| T@U) ) (!  (=> (and (= (type |i#3@@0|) BoxType) ($IsBox |i#3@@0| _module._default.MapSeqToSeq$T@@3)) (|Set#Equal| (Reads1 _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3 |func#0@@3| $Heap@@249 |i#3@@0|) (|Set#Empty| BoxType))) :qid |Seqdfy.24:21| :skolemid |3171| :pattern ( (Reads1 _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3 |func#0@@3| $Heap@@249 |i#3@@0|)) )) (forall ((|i#4@@0| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#4@@0|) (INTERNAL_lt_boogie |i#4@@0| (|Seq#Length| |s#0@@285|))) (Requires1 _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3 |func#0@@3| $Heap@@249 (|Seq#Index| |s#0@@285| |i#4@@0|)))) :qid |Seqdfy.25:21| :skolemid |3172| :pattern ( (|Seq#Index| |s#0@@285| |i#4@@0|)) ))) (|_module.__default.MapSeqToSeq#requires| _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3 $ly@@349 $Heap@@249 |s#0@@285| |func#0@@3|)))) :qid |unknown.0:0| :skolemid |3173| :pattern ( (|_module.__default.MapSeqToSeq#requires| _module._default.MapSeqToSeq$T@@3 _module._default.MapSeqToSeq$U@@3 $ly@@349 $Heap@@249 |s#0@@285| |func#0@@3|)) )))
(assert  (=> true (forall ((_module._default.MapSeqToSeq$T@@4 T@U) (_module._default.MapSeqToSeq$U@@4 T@U) ($ly@@350 T@U) ($Heap@@250 T@U) (|s#0@@286| T@U) (|func#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type _module._default.MapSeqToSeq$T@@4) TyType) (= (type _module._default.MapSeqToSeq$U@@4) TyType)) (= (type $ly@@350) LayerTypeType)) (= (type $Heap@@250) (MapType1Type refType))) (= (type |s#0@@286|) (SeqType BoxType))) (= (type |func#0@@4|) HandleTypeType)) (or (|_module.__default.MapSeqToSeq#canCall| _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4 $Heap@@250 |s#0@@286| |func#0@@4|) (and (and (and ($IsGoodHeap $Heap@@250) ($Is |s#0@@286| (TSeq _module._default.MapSeqToSeq$T@@4))) ($Is |func#0@@4| (Tclass._System.___hFunc1 _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4))) (and (forall ((|i#3@@1| T@U) ) (!  (=> (and (= (type |i#3@@1|) BoxType) ($IsBox |i#3@@1| _module._default.MapSeqToSeq$T@@4)) (|Set#Equal| (Reads1 _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4 |func#0@@4| $Heap@@250 |i#3@@1|) (|Set#Empty| BoxType))) :qid |Seqdfy.24:21| :skolemid |3171| :pattern ( (Reads1 _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4 |func#0@@4| $Heap@@250 |i#3@@1|)) )) (forall ((|i#4@@1| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#4@@1|) (INTERNAL_lt_boogie |i#4@@1| (|Seq#Length| |s#0@@286|))) (Requires1 _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4 |func#0@@4| $Heap@@250 (|Seq#Index| |s#0@@286| |i#4@@1|)))) :qid |Seqdfy.25:21| :skolemid |3172| :pattern ( (|Seq#Index| |s#0@@286| |i#4@@1|)) )))))) (and (=> (not (= (|Seq#Length| |s#0@@286|) (LitInt 0))) (|_module.__default.MapSeqToSeq#canCall| _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4 $Heap@@250 (|Seq#Drop| |s#0@@286| (LitInt 1)) |func#0@@4|)) (= (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4 ($LS $ly@@350) $Heap@@250 |s#0@@286| |func#0@@4|) (ite (= (|Seq#Length| |s#0@@286|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4 |func#0@@4| $Heap@@250 (|Seq#Index| |s#0@@286| (LitInt 0)))) (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4 $ly@@350 $Heap@@250 (|Seq#Drop| |s#0@@286| (LitInt 1)) |func#0@@4|)))))) :qid |unknown.0:0| :skolemid |3174| :pattern ( (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@4 _module._default.MapSeqToSeq$U@@4 ($LS $ly@@350) $Heap@@250 |s#0@@286| |func#0@@4|)) ))))
(assert  (=> true (forall ((_module._default.MapSeqToSeq$T@@5 T@U) (_module._default.MapSeqToSeq$U@@5 T@U) ($ly@@351 T@U) ($Heap@@251 T@U) (|s#0@@287| T@U) (|func#0@@5| T@U) ) (!  (=> (and (and (and (and (and (and (= (type _module._default.MapSeqToSeq$T@@5) TyType) (= (type _module._default.MapSeqToSeq$U@@5) TyType)) (= (type $ly@@351) LayerTypeType)) (= (type $Heap@@251) (MapType1Type refType))) (= (type |s#0@@287|) (SeqType BoxType))) (= (type |func#0@@5|) HandleTypeType)) (or (|_module.__default.MapSeqToSeq#canCall| _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5 $Heap@@251 (Lit |s#0@@287|) (Lit |func#0@@5|)) (and (and (and ($IsGoodHeap $Heap@@251) ($Is |s#0@@287| (TSeq _module._default.MapSeqToSeq$T@@5))) ($Is |func#0@@5| (Tclass._System.___hFunc1 _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5))) (and (forall ((|i#5| T@U) ) (!  (=> (and (= (type |i#5|) BoxType) ($IsBox |i#5| _module._default.MapSeqToSeq$T@@5)) (|Set#Equal| (Reads1 _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5 (Lit |func#0@@5|) $Heap@@251 |i#5|) (|Set#Empty| BoxType))) :qid |Seqdfy.24:21| :skolemid |3175| :pattern ( (Reads1 _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5 |func#0@@5| $Heap@@251 |i#5|)) )) (forall ((|i#6| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#6|) (INTERNAL_lt_boogie |i#6| (|Seq#Length| (Lit |s#0@@287|)))) (Requires1 _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5 (Lit |func#0@@5|) $Heap@@251 (|Seq#Index| (Lit |s#0@@287|) |i#6|)))) :qid |Seqdfy.25:21| :skolemid |3176| :pattern ( (|Seq#Index| |s#0@@287| |i#6|)) )))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@287|)) (LitInt 0))) (|_module.__default.MapSeqToSeq#canCall| _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5 $Heap@@251 (Lit (|Seq#Drop| (Lit |s#0@@287|) (LitInt 1))) (Lit |func#0@@5|))) (= (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5 ($LS $ly@@351) $Heap@@251 (Lit |s#0@@287|) (Lit |func#0@@5|)) (ite (= (|Seq#Length| (Lit |s#0@@287|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5 (Lit |func#0@@5|) $Heap@@251 (|Seq#Index| (Lit |s#0@@287|) (LitInt 0)))) (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5 ($LS $ly@@351) $Heap@@251 (Lit (|Seq#Drop| (Lit |s#0@@287|) (LitInt 1))) (Lit |func#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3177| :pattern ( (_module.__default.MapSeqToSeq _module._default.MapSeqToSeq$T@@5 _module._default.MapSeqToSeq$U@@5 ($LS $ly@@351) $Heap@@251 (Lit |s#0@@287|) (Lit |func#0@@5|))) ))))
(assert (forall ((_module._default.IMapSeqToSeq$T T@U) (_module._default.IMapSeqToSeq$U T@U) ($ly@@352 T@U) (|s#0@@288| T@U) (|func#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type _module._default.IMapSeqToSeq$T) TyType) (= (type _module._default.IMapSeqToSeq$U) TyType)) (= (type $ly@@352) LayerTypeType)) (= (type |s#0@@288|) (SeqType BoxType))) (= (type |func#0@@6|) (IMapType BoxType BoxType))) (= (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T _module._default.IMapSeqToSeq$U ($LS $ly@@352) |s#0@@288| |func#0@@6|) (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T _module._default.IMapSeqToSeq$U $ly@@352 |s#0@@288| |func#0@@6|))) :qid |unknown.0:0| :skolemid |3178| :pattern ( (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T _module._default.IMapSeqToSeq$U ($LS $ly@@352) |s#0@@288| |func#0@@6|)) )))
(assert (forall ((_module._default.IMapSeqToSeq$T@@0 T@U) (_module._default.IMapSeqToSeq$U@@0 T@U) ($ly@@353 T@U) (|s#0@@289| T@U) (|func#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type _module._default.IMapSeqToSeq$T@@0) TyType) (= (type _module._default.IMapSeqToSeq$U@@0) TyType)) (= (type $ly@@353) LayerTypeType)) (= (type |s#0@@289|) (SeqType BoxType))) (= (type |func#0@@7|) (IMapType BoxType BoxType))) (= (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@0 _module._default.IMapSeqToSeq$U@@0 $ly@@353 |s#0@@289| |func#0@@7|) (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@0 _module._default.IMapSeqToSeq$U@@0 $LZ |s#0@@289| |func#0@@7|))) :qid |unknown.0:0| :skolemid |3179| :pattern ( (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@0 _module._default.IMapSeqToSeq$U@@0 (AsFuelBottom $ly@@353) |s#0@@289| |func#0@@7|)) )))
(assert  (=> true (forall ((_module._default.IMapSeqToSeq$T@@1 T@U) (_module._default.IMapSeqToSeq$U@@1 T@U) ($ly@@354 T@U) (|s#0@@290| T@U) (|func#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type _module._default.IMapSeqToSeq$T@@1) TyType) (= (type _module._default.IMapSeqToSeq$U@@1) TyType)) (= (type $ly@@354) LayerTypeType)) (= (type |s#0@@290|) (SeqType BoxType))) (= (type |func#0@@8|) (IMapType BoxType BoxType))) (or (|_module.__default.IMapSeqToSeq#canCall| _module._default.IMapSeqToSeq$T@@1 _module._default.IMapSeqToSeq$U@@1 |s#0@@290| |func#0@@8|) (and (and ($Is |s#0@@290| (TSeq _module._default.IMapSeqToSeq$T@@1)) ($Is |func#0@@8| (TIMap _module._default.IMapSeqToSeq$T@@1 _module._default.IMapSeqToSeq$U@@1))) (forall ((|i#0@@49| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#0@@49|) (INTERNAL_lt_boogie |i#0@@49| (|Seq#Length| |s#0@@290|))) (U_2_bool (MapType0Select (|IMap#Domain| |func#0@@8|) (|Seq#Index| |s#0@@290| |i#0@@49|))))) :qid |Seqdfy.34:21| :skolemid |3180| :pattern ( (|Seq#Index| |s#0@@290| |i#0@@49|)) ))))) (and (and (= (|Seq#Length| (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@1 _module._default.IMapSeqToSeq$U@@1 $ly@@354 |s#0@@290| |func#0@@8|)) (|Seq#Length| |s#0@@290|)) (forall ((|i#1@@24| Int) (|tr$ly#0@@19| T@U) ) (!  (=> (and (and (= (type |tr$ly#0@@19|) LayerTypeType) true) (and (INTERNAL_le_boogie 0 |i#1@@24|) (INTERNAL_lt_boogie |i#1@@24| (|Seq#Length| |s#0@@290|)))) (= (MapType0Select (|IMap#Elements| |func#0@@8|) (|Seq#Index| |s#0@@290| |i#1@@24|)) (|Seq#Index| (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@1 _module._default.IMapSeqToSeq$U@@1 $ly@@354 |s#0@@290| |func#0@@8|) |i#1@@24|))) :qid |Seqdfy.36:20| :skolemid |3181| :pattern ( (MapType0Select (|IMap#Elements| |func#0@@8|) (|Seq#Index| |s#0@@290| |i#1@@24|)) (AsFuelBottom |tr$ly#0@@19|)) :pattern ( (|Seq#Index| (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@1 _module._default.IMapSeqToSeq$U@@1 |tr$ly#0@@19| |s#0@@290| |func#0@@8|) |i#1@@24|)) ))) ($Is (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@1 _module._default.IMapSeqToSeq$U@@1 $ly@@354 |s#0@@290| |func#0@@8|) (TSeq _module._default.IMapSeqToSeq$U@@1)))) :qid |unknown.0:0| :skolemid |3182| :pattern ( (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@1 _module._default.IMapSeqToSeq$U@@1 $ly@@354 |s#0@@290| |func#0@@8|)) ))))
(assert (forall ((_module._default.IMapSeqToSeq$T@@2 T@U) (_module._default.IMapSeqToSeq$U@@2 T@U) ($ly@@355 T@U) (|s#0@@291| T@U) (|func#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type _module._default.IMapSeqToSeq$T@@2) TyType) (= (type _module._default.IMapSeqToSeq$U@@2) TyType)) (= (type $ly@@355) LayerTypeType)) (= (type |s#0@@291|) (SeqType BoxType))) (= (type |func#0@@9|) (IMapType BoxType BoxType))) (and ($Is |s#0@@291| (TSeq _module._default.IMapSeqToSeq$T@@2)) ($Is |func#0@@9| (TIMap _module._default.IMapSeqToSeq$T@@2 _module._default.IMapSeqToSeq$U@@2)))) (and (=> (|_module.__default.IMapSeqToSeq#requires| _module._default.IMapSeqToSeq$T@@2 _module._default.IMapSeqToSeq$U@@2 $ly@@355 |s#0@@291| |func#0@@9|) (forall ((|i#2@@0| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#2@@0|) (INTERNAL_lt_boogie |i#2@@0| (|Seq#Length| |s#0@@291|))) (U_2_bool (MapType0Select (|IMap#Domain| |func#0@@9|) (|Seq#Index| |s#0@@291| |i#2@@0|))))) :qid |Seqdfy.34:21| :skolemid |3183| :pattern ( (|Seq#Index| |s#0@@291| |i#2@@0|)) ))) (=> (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#2@@1|) (INTERNAL_lt_boogie |i#2@@1| (|Seq#Length| |s#0@@291|))) (U_2_bool (MapType0Select (|IMap#Domain| |func#0@@9|) (|Seq#Index| |s#0@@291| |i#2@@1|))))) :qid |Seqdfy.34:21| :skolemid |3183| :pattern ( (|Seq#Index| |s#0@@291| |i#2@@1|)) )) (|_module.__default.IMapSeqToSeq#requires| _module._default.IMapSeqToSeq$T@@2 _module._default.IMapSeqToSeq$U@@2 $ly@@355 |s#0@@291| |func#0@@9|)))) :qid |unknown.0:0| :skolemid |3184| :pattern ( (|_module.__default.IMapSeqToSeq#requires| _module._default.IMapSeqToSeq$T@@2 _module._default.IMapSeqToSeq$U@@2 $ly@@355 |s#0@@291| |func#0@@9|)) )))
(assert  (=> true (forall ((_module._default.IMapSeqToSeq$T@@3 T@U) (_module._default.IMapSeqToSeq$U@@3 T@U) ($ly@@356 T@U) (|s#0@@292| T@U) (|func#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type _module._default.IMapSeqToSeq$T@@3) TyType) (= (type _module._default.IMapSeqToSeq$U@@3) TyType)) (= (type $ly@@356) LayerTypeType)) (= (type |s#0@@292|) (SeqType BoxType))) (= (type |func#0@@10|) (IMapType BoxType BoxType))) (or (|_module.__default.IMapSeqToSeq#canCall| _module._default.IMapSeqToSeq$T@@3 _module._default.IMapSeqToSeq$U@@3 |s#0@@292| |func#0@@10|) (and (and ($Is |s#0@@292| (TSeq _module._default.IMapSeqToSeq$T@@3)) ($Is |func#0@@10| (TIMap _module._default.IMapSeqToSeq$T@@3 _module._default.IMapSeqToSeq$U@@3))) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#2@@2|) (INTERNAL_lt_boogie |i#2@@2| (|Seq#Length| |s#0@@292|))) (U_2_bool (MapType0Select (|IMap#Domain| |func#0@@10|) (|Seq#Index| |s#0@@292| |i#2@@2|))))) :qid |Seqdfy.34:21| :skolemid |3183| :pattern ( (|Seq#Index| |s#0@@292| |i#2@@2|)) ))))) (and (=> (not (= (|Seq#Length| |s#0@@292|) (LitInt 0))) (|_module.__default.IMapSeqToSeq#canCall| _module._default.IMapSeqToSeq$T@@3 _module._default.IMapSeqToSeq$U@@3 (|Seq#Drop| |s#0@@292| (LitInt 1)) |func#0@@10|)) (= (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@3 _module._default.IMapSeqToSeq$U@@3 ($LS $ly@@356) |s#0@@292| |func#0@@10|) (ite (= (|Seq#Length| |s#0@@292|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (MapType0Select (|IMap#Elements| |func#0@@10|) (|Seq#Index| |s#0@@292| (LitInt 0)))) (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@3 _module._default.IMapSeqToSeq$U@@3 $ly@@356 (|Seq#Drop| |s#0@@292| (LitInt 1)) |func#0@@10|)))))) :qid |unknown.0:0| :skolemid |3185| :pattern ( (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@3 _module._default.IMapSeqToSeq$U@@3 ($LS $ly@@356) |s#0@@292| |func#0@@10|)) ))))
(assert  (=> true (forall ((_module._default.IMapSeqToSeq$T@@4 T@U) (_module._default.IMapSeqToSeq$U@@4 T@U) ($ly@@357 T@U) (|s#0@@293| T@U) (|func#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type _module._default.IMapSeqToSeq$T@@4) TyType) (= (type _module._default.IMapSeqToSeq$U@@4) TyType)) (= (type $ly@@357) LayerTypeType)) (= (type |s#0@@293|) (SeqType BoxType))) (= (type |func#0@@11|) (IMapType BoxType BoxType))) (or (|_module.__default.IMapSeqToSeq#canCall| _module._default.IMapSeqToSeq$T@@4 _module._default.IMapSeqToSeq$U@@4 (Lit |s#0@@293|) |func#0@@11|) (and (and ($Is |s#0@@293| (TSeq _module._default.IMapSeqToSeq$T@@4)) ($Is |func#0@@11| (TIMap _module._default.IMapSeqToSeq$T@@4 _module._default.IMapSeqToSeq$U@@4))) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#3@@2|) (INTERNAL_lt_boogie |i#3@@2| (|Seq#Length| (Lit |s#0@@293|)))) (U_2_bool (MapType0Select (|IMap#Domain| |func#0@@11|) (|Seq#Index| (Lit |s#0@@293|) |i#3@@2|))))) :qid |Seqdfy.34:21| :skolemid |3186| :pattern ( (|Seq#Index| |s#0@@293| |i#3@@2|)) ))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@293|)) (LitInt 0))) (|_module.__default.IMapSeqToSeq#canCall| _module._default.IMapSeqToSeq$T@@4 _module._default.IMapSeqToSeq$U@@4 (Lit (|Seq#Drop| (Lit |s#0@@293|) (LitInt 1))) |func#0@@11|)) (= (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@4 _module._default.IMapSeqToSeq$U@@4 ($LS $ly@@357) (Lit |s#0@@293|) |func#0@@11|) (ite (= (|Seq#Length| (Lit |s#0@@293|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (MapType0Select (|IMap#Elements| |func#0@@11|) (|Seq#Index| (Lit |s#0@@293|) (LitInt 0)))) (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@4 _module._default.IMapSeqToSeq$U@@4 ($LS $ly@@357) (Lit (|Seq#Drop| (Lit |s#0@@293|) (LitInt 1))) |func#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3187| :pattern ( (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@4 _module._default.IMapSeqToSeq$U@@4 ($LS $ly@@357) (Lit |s#0@@293|) |func#0@@11|)) ))))
(assert  (=> true (forall ((_module._default.IMapSeqToSeq$T@@5 T@U) (_module._default.IMapSeqToSeq$U@@5 T@U) ($ly@@358 T@U) (|s#0@@294| T@U) (|func#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type _module._default.IMapSeqToSeq$T@@5) TyType) (= (type _module._default.IMapSeqToSeq$U@@5) TyType)) (= (type $ly@@358) LayerTypeType)) (= (type |s#0@@294|) (SeqType BoxType))) (= (type |func#0@@12|) (IMapType BoxType BoxType))) (or (|_module.__default.IMapSeqToSeq#canCall| _module._default.IMapSeqToSeq$T@@5 _module._default.IMapSeqToSeq$U@@5 (Lit |s#0@@294|) (Lit |func#0@@12|)) (and (and ($Is |s#0@@294| (TSeq _module._default.IMapSeqToSeq$T@@5)) ($Is |func#0@@12| (TIMap _module._default.IMapSeqToSeq$T@@5 _module._default.IMapSeqToSeq$U@@5))) (forall ((|i#4@@2| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#4@@2|) (INTERNAL_lt_boogie |i#4@@2| (|Seq#Length| (Lit |s#0@@294|)))) (U_2_bool (MapType0Select (|IMap#Domain| |func#0@@12|) (|Seq#Index| (Lit |s#0@@294|) |i#4@@2|))))) :qid |Seqdfy.34:21| :skolemid |3188| :pattern ( (|Seq#Index| |s#0@@294| |i#4@@2|)) ))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@294|)) (LitInt 0))) (|_module.__default.IMapSeqToSeq#canCall| _module._default.IMapSeqToSeq$T@@5 _module._default.IMapSeqToSeq$U@@5 (Lit (|Seq#Drop| (Lit |s#0@@294|) (LitInt 1))) (Lit |func#0@@12|))) (= (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@5 _module._default.IMapSeqToSeq$U@@5 ($LS $ly@@358) (Lit |s#0@@294|) (Lit |func#0@@12|)) (ite (= (|Seq#Length| (Lit |s#0@@294|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (MapType0Select (|IMap#Elements| (Lit |func#0@@12|)) (|Seq#Index| (Lit |s#0@@294|) (LitInt 0)))) (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@5 _module._default.IMapSeqToSeq$U@@5 ($LS $ly@@358) (Lit (|Seq#Drop| (Lit |s#0@@294|) (LitInt 1))) (Lit |func#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3189| :pattern ( (_module.__default.IMapSeqToSeq _module._default.IMapSeqToSeq$T@@5 _module._default.IMapSeqToSeq$U@@5 ($LS $ly@@358) (Lit |s#0@@294|) (Lit |func#0@@12|))) ))))
(assert (forall (($ly@@359 T@U) (|a#0@@32| Int) (|b#0@@24| Int) ) (!  (=> (= (type $ly@@359) LayerTypeType) (= (_module.__default.SeqOfNumbersInRightExclusiveRange ($LS $ly@@359) |a#0@@32| |b#0@@24|) (_module.__default.SeqOfNumbersInRightExclusiveRange $ly@@359 |a#0@@32| |b#0@@24|))) :qid |Seqdfy.42:20| :skolemid |3190| :pattern ( (_module.__default.SeqOfNumbersInRightExclusiveRange ($LS $ly@@359) |a#0@@32| |b#0@@24|)) )))
(assert (forall (($ly@@360 T@U) (|a#0@@33| Int) (|b#0@@25| Int) ) (!  (=> (= (type $ly@@360) LayerTypeType) (= (_module.__default.SeqOfNumbersInRightExclusiveRange $ly@@360 |a#0@@33| |b#0@@25|) (_module.__default.SeqOfNumbersInRightExclusiveRange $LZ |a#0@@33| |b#0@@25|))) :qid |Seqdfy.42:20| :skolemid |3191| :pattern ( (_module.__default.SeqOfNumbersInRightExclusiveRange (AsFuelBottom $ly@@360) |a#0@@33| |b#0@@25|)) )))
(assert  (=> true (forall (($ly@@361 T@U) (|a#0@@34| Int) (|b#0@@26| Int) ) (!  (=> (and (= (type $ly@@361) LayerTypeType) (or (|_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| |a#0@@34| |b#0@@26|) (INTERNAL_le_boogie |a#0@@34| |b#0@@26|))) (and (and (= (|Seq#Length| (_module.__default.SeqOfNumbersInRightExclusiveRange $ly@@361 |a#0@@34| |b#0@@26|)) (INTERNAL_sub_boogie |b#0@@26| |a#0@@34|)) (forall ((|i#0@@50| Int) ) (!  (=> (and (INTERNAL_le_boogie 0 |i#0@@50|) (INTERNAL_lt_boogie |i#0@@50| (INTERNAL_sub_boogie |b#0@@26| |a#0@@34|))) (= (U_2_int ($Unbox intType (|Seq#Index| (_module.__default.SeqOfNumbersInRightExclusiveRange $ly@@361 |a#0@@34| |b#0@@26|) |i#0@@50|))) (INTERNAL_add_boogie |a#0@@34| |i#0@@50|))) :qid |Seqdfy.45:20| :skolemid |3192| :pattern ( ($Unbox intType (|Seq#Index| (_module.__default.SeqOfNumbersInRightExclusiveRange $ly@@361 |a#0@@34| |b#0@@26|) |i#0@@50|))) ))) ($Is (_module.__default.SeqOfNumbersInRightExclusiveRange $ly@@361 |a#0@@34| |b#0@@26|) (TSeq TInt)))) :qid |Seqdfy.42:20| :skolemid |3193| :pattern ( (_module.__default.SeqOfNumbersInRightExclusiveRange $ly@@361 |a#0@@34| |b#0@@26|)) ))))
(assert (forall (($ly@@362 T@U) (|a#0@@35| Int) (|b#0@@27| Int) ) (!  (=> (= (type $ly@@362) LayerTypeType) (and (=> (|_module.__default.SeqOfNumbersInRightExclusiveRange#requires| $ly@@362 |a#0@@35| |b#0@@27|) (INTERNAL_le_boogie |a#0@@35| |b#0@@27|)) (=> (INTERNAL_le_boogie |a#0@@35| |b#0@@27|) (|_module.__default.SeqOfNumbersInRightExclusiveRange#requires| $ly@@362 |a#0@@35| |b#0@@27|)))) :qid |Seqdfy.42:20| :skolemid |3194| :pattern ( (|_module.__default.SeqOfNumbersInRightExclusiveRange#requires| $ly@@362 |a#0@@35| |b#0@@27|)) )))
(assert  (=> true (forall (($ly@@363 T@U) (|a#0@@36| Int) (|b#0@@28| Int) ) (!  (=> (and (= (type $ly@@363) LayerTypeType) (or (|_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| |a#0@@36| |b#0@@28|) (INTERNAL_le_boogie |a#0@@36| |b#0@@28|))) (and (=> (not (= |a#0@@36| |b#0@@28|)) (|_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| (INTERNAL_add_boogie |a#0@@36| 1) |b#0@@28|)) (= (_module.__default.SeqOfNumbersInRightExclusiveRange ($LS $ly@@363) |a#0@@36| |b#0@@28|) (ite (= |a#0@@36| |b#0@@28|) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |a#0@@36|))) (_module.__default.SeqOfNumbersInRightExclusiveRange $ly@@363 (INTERNAL_add_boogie |a#0@@36| 1) |b#0@@28|)))))) :qid |Seqdfy.42:20| :skolemid |3195| :pattern ( (_module.__default.SeqOfNumbersInRightExclusiveRange ($LS $ly@@363) |a#0@@36| |b#0@@28|)) ))))
(assert  (=> true (forall (($ly@@364 T@U) (|a#0@@37| Int) (|b#0@@29| Int) ) (!  (=> (and (= (type $ly@@364) LayerTypeType) (or (|_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| (LitInt |a#0@@37|) (LitInt |b#0@@29|)) (INTERNAL_le_boogie |a#0@@37| |b#0@@29|))) (and (=> (not (= (LitInt |a#0@@37|) (LitInt |b#0@@29|))) (|_module.__default.SeqOfNumbersInRightExclusiveRange#canCall| (LitInt (INTERNAL_add_boogie |a#0@@37| 1)) (LitInt |b#0@@29|))) (= (_module.__default.SeqOfNumbersInRightExclusiveRange ($LS $ly@@364) (LitInt |a#0@@37|) (LitInt |b#0@@29|)) (ite (= (LitInt |a#0@@37|) (LitInt |b#0@@29|)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt |a#0@@37|)))) (_module.__default.SeqOfNumbersInRightExclusiveRange ($LS $ly@@364) (LitInt (INTERNAL_add_boogie |a#0@@37| 1)) (LitInt |b#0@@29|))))))) :qid |Seqdfy.42:20| :weight 3 :skolemid |3196| :pattern ( (_module.__default.SeqOfNumbersInRightExclusiveRange ($LS $ly@@364) (LitInt |a#0@@37|) (LitInt |b#0@@29|))) ))))
(assert  (=> true (forall ((|i#0@@51| Int) ) (!  (=> true true) :qid |typessdf.7:20| :skolemid |3197| :pattern ( (_module.__default.isUInt32 |i#0@@51|)) ))))
(assert (forall ((|i#0@@52| Int) ) (!  (and (=> (|_module.__default.isUInt32#requires| |i#0@@52|) true) (=> true (|_module.__default.isUInt32#requires| |i#0@@52|))) :qid |typessdf.7:20| :skolemid |3198| :pattern ( (|_module.__default.isUInt32#requires| |i#0@@52|)) )))
(assert  (=> true (forall ((|i#0@@53| Int) ) (!  (=> true (and (=> (_module.__default.isUInt32 |i#0@@53|) (and (INTERNAL_le_boogie 0 |i#0@@53|) (INTERNAL_lt_boogie |i#0@@53| (LitInt 4294967296)))) (=> (and (INTERNAL_le_boogie 0 |i#0@@53|) (INTERNAL_lt_boogie |i#0@@53| (LitInt 4294967296))) (_module.__default.isUInt32 |i#0@@53|)))) :qid |typessdf.7:20| :skolemid |3199| :pattern ( (_module.__default.isUInt32 |i#0@@53|)) ))))
(assert  (=> true (forall ((|i#0@@54| Int) ) (!  (=> true (and (=> (_module.__default.isUInt32 (LitInt |i#0@@54|)) (and (INTERNAL_le_boogie 0 |i#0@@54|) (INTERNAL_lt_boogie |i#0@@54| (LitInt 4294967296)))) (=> (and (INTERNAL_le_boogie 0 |i#0@@54|) (INTERNAL_lt_boogie |i#0@@54| (LitInt 4294967296))) (_module.__default.isUInt32 (LitInt |i#0@@54|))))) :qid |typessdf.7:20| :weight 3 :skolemid |3200| :pattern ( (_module.__default.isUInt32 (LitInt |i#0@@54|))) ))))
(assert (forall (($ly@@365 T@U) (|i#0@@55| Int) ) (!  (=> (= (type $ly@@365) LayerTypeType) (and (=> (_module.__default.WordAligned ($LS $ly@@365) |i#0@@55|) (_module.__default.WordAligned $ly@@365 |i#0@@55|)) (=> (_module.__default.WordAligned $ly@@365 |i#0@@55|) (_module.__default.WordAligned ($LS $ly@@365) |i#0@@55|)))) :qid |typessdf.10:21| :skolemid |3201| :pattern ( (_module.__default.WordAligned ($LS $ly@@365) |i#0@@55|)) )))
(assert (forall (($ly@@366 T@U) (|i#0@@56| Int) ) (!  (=> (= (type $ly@@366) LayerTypeType) (and (=> (_module.__default.WordAligned $ly@@366 |i#0@@56|) (_module.__default.WordAligned $LZ |i#0@@56|)) (=> (_module.__default.WordAligned $LZ |i#0@@56|) (_module.__default.WordAligned $ly@@366 |i#0@@56|)))) :qid |typessdf.10:21| :skolemid |3202| :pattern ( (_module.__default.WordAligned (AsFuelBottom $ly@@366) |i#0@@56|)) )))
(assert  (=> true (forall (($ly@@367 T@U) (|i#0@@57| Int) ) (!  (=> (and (= (type $ly@@367) LayerTypeType) true) true) :qid |typessdf.10:21| :skolemid |3203| :pattern ( (_module.__default.WordAligned $ly@@367 |i#0@@57|)) ))))
(assert (forall (($ly@@368 T@U) (|i#0@@58| Int) ) (!  (=> (= (type $ly@@368) LayerTypeType) (and (=> (|_module.__default.WordAligned#requires| $ly@@368 |i#0@@58|) true) (=> true (|_module.__default.WordAligned#requires| $ly@@368 |i#0@@58|)))) :qid |typessdf.10:21| :skolemid |3204| :pattern ( (|_module.__default.WordAligned#requires| $ly@@368 |i#0@@58|)) )))
(assert  (=> true (forall (($ly@@369 T@U) (|i#0@@59| Int) ) (!  (=> (and (= (type $ly@@369) LayerTypeType) true) (and (=> (_module.__default.WordAligned ($LS $ly@@369) |i#0@@59|) (= (INTERNAL_mod_boogie |i#0@@59| (LitInt 4)) (LitInt 0))) (=> (= (INTERNAL_mod_boogie |i#0@@59| (LitInt 4)) (LitInt 0)) (_module.__default.WordAligned ($LS $ly@@369) |i#0@@59|)))) :qid |typessdf.10:21| :skolemid |3205| :pattern ( (_module.__default.WordAligned ($LS $ly@@369) |i#0@@59|)) ))))
(assert  (=> true (forall (($ly@@370 T@U) (|i#0@@60| Int) ) (!  (=> (and (= (type $ly@@370) LayerTypeType) true) (and (=> (_module.__default.WordAligned ($LS $ly@@370) (LitInt |i#0@@60|)) (= (INTERNAL_mod_boogie |i#0@@60| (LitInt 4)) (LitInt 0))) (=> (= (INTERNAL_mod_boogie |i#0@@60| (LitInt 4)) (LitInt 0)) (_module.__default.WordAligned ($LS $ly@@370) (LitInt |i#0@@60|))))) :qid |typessdf.10:21| :weight 3 :skolemid |3206| :pattern ( (_module.__default.WordAligned ($LS $ly@@370) (LitInt |i#0@@60|))) ))))
(assert  (=> true (forall ((|w#0@@9| Int) ) (!  (=> true (_module.__default.WordAligned StartFuel__module._default.WordAligned (_module.__default.WordsToBytes |w#0@@9|))) :qid |typessdf.14:30| :skolemid |3207| :pattern ( (_module.__default.WordsToBytes |w#0@@9|)) ))))
(assert (forall ((|w#0@@10| Int) ) (!  (and (=> (|_module.__default.WordsToBytes#requires| |w#0@@10|) true) (=> true (|_module.__default.WordsToBytes#requires| |w#0@@10|))) :qid |typessdf.14:30| :skolemid |3208| :pattern ( (|_module.__default.WordsToBytes#requires| |w#0@@10|)) )))
(assert  (and (= (type MoreFuel__module._default.WordAligned0) LayerTypeType) (= (type StartFuelAssert__module._default.WordAligned) LayerTypeType)))
(assert  (=> true (forall ((|w#0@@11| Int) ) (!  (=> true (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned0)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned0)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned0) MoreFuel__module._default.WordAligned0)) (= (_module.__default.WordsToBytes |w#0@@11|) (INTERNAL_mul_boogie (LitInt 4) |w#0@@11|)))) :qid |typessdf.14:30| :skolemid |3209| :pattern ( (_module.__default.WordsToBytes |w#0@@11|)) ))))
(assert (= (type MoreFuel__module._default.WordAligned1) LayerTypeType))
(assert  (=> true (forall ((|w#0@@12| Int) ) (!  (=> true (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned1)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned1)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned1) MoreFuel__module._default.WordAligned1)) (= (_module.__default.WordsToBytes (LitInt |w#0@@12|)) (INTERNAL_mul_boogie (LitInt 4) |w#0@@12|)))) :qid |typessdf.14:30| :weight 3 :skolemid |3210| :pattern ( (_module.__default.WordsToBytes (LitInt |w#0@@12|))) ))))
(assert  (=> true (forall ((|b#0@@30| Int) ) (!  (=> (or (|_module.__default.BytesToWords#canCall| |b#0@@30|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |b#0@@30|)) true) :qid |typessdf.18:30| :skolemid |3211| :pattern ( (_module.__default.BytesToWords |b#0@@30|)) ))))
(assert (forall ((|b#0@@31| Int) ) (!  (and (=> (|_module.__default.BytesToWords#requires| |b#0@@31|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |b#0@@31|)) (=> (_module.__default.WordAligned StartFuel__module._default.WordAligned |b#0@@31|) (|_module.__default.BytesToWords#requires| |b#0@@31|))) :qid |typessdf.18:30| :skolemid |3212| :pattern ( (|_module.__default.BytesToWords#requires| |b#0@@31|)) )))
(assert (= (type MoreFuel__module._default.WordAligned2) LayerTypeType))
(assert  (=> true (forall ((|b#0@@32| Int) ) (!  (=> (or (|_module.__default.BytesToWords#canCall| |b#0@@32|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |b#0@@32|)) (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned2)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned2)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned2) MoreFuel__module._default.WordAligned2)) (= (_module.__default.BytesToWords |b#0@@32|) (INTERNAL_div_boogie |b#0@@32| (LitInt 4))))) :qid |typessdf.18:30| :skolemid |3213| :pattern ( (_module.__default.BytesToWords |b#0@@32|)) ))))
(assert (= (type MoreFuel__module._default.WordAligned3) LayerTypeType))
(assert  (=> true (forall ((|b#0@@33| Int) ) (!  (=> (or (|_module.__default.BytesToWords#canCall| (LitInt |b#0@@33|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |b#0@@33|))) (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned3)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned3)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned3) MoreFuel__module._default.WordAligned3)) (= (_module.__default.BytesToWords (LitInt |b#0@@33|)) (INTERNAL_div_boogie |b#0@@33| (LitInt 4))))) :qid |typessdf.18:30| :weight 3 :skolemid |3214| :pattern ( (_module.__default.BytesToWords (LitInt |b#0@@33|))) ))))
(assert (forall (($ly@@371 T@U) (|x#0@@143| Int) ) (!  (=> (= (type $ly@@371) LayerTypeType) (= (_module.__default.TruncateWord ($LS $ly@@371) |x#0@@143|) (_module.__default.TruncateWord $ly@@371 |x#0@@143|))) :qid |typessdf.22:20| :skolemid |3215| :pattern ( (_module.__default.TruncateWord ($LS $ly@@371) |x#0@@143|)) )))
(assert (forall (($ly@@372 T@U) (|x#0@@144| Int) ) (!  (=> (= (type $ly@@372) LayerTypeType) (= (_module.__default.TruncateWord $ly@@372 |x#0@@144|) (_module.__default.TruncateWord $LZ |x#0@@144|))) :qid |typessdf.22:20| :skolemid |3216| :pattern ( (_module.__default.TruncateWord (AsFuelBottom $ly@@372) |x#0@@144|)) )))
(assert  (=> true (forall (($ly@@373 T@U) (|x#0@@145| Int) ) (!  (=> (and (= (type $ly@@373) LayerTypeType) true) (_module.__default.isUInt32 (_module.__default.TruncateWord $ly@@373 |x#0@@145|))) :qid |typessdf.22:20| :skolemid |3217| :pattern ( (_module.__default.TruncateWord $ly@@373 |x#0@@145|)) ))))
(assert (forall (($ly@@374 T@U) (|x#0@@146| Int) ) (!  (=> (= (type $ly@@374) LayerTypeType) (and (=> (|_module.__default.TruncateWord#requires| $ly@@374 |x#0@@146|) true) (=> true (|_module.__default.TruncateWord#requires| $ly@@374 |x#0@@146|)))) :qid |typessdf.22:20| :skolemid |3218| :pattern ( (|_module.__default.TruncateWord#requires| $ly@@374 |x#0@@146|)) )))
(assert  (=> true (forall (($ly@@375 T@U) (|x#0@@147| Int) ) (!  (=> (and (= (type $ly@@375) LayerTypeType) true) (= (_module.__default.TruncateWord ($LS $ly@@375) |x#0@@147|) (INTERNAL_mod_boogie |x#0@@147| (LitInt 4294967296)))) :qid |typessdf.22:20| :skolemid |3219| :pattern ( (_module.__default.TruncateWord ($LS $ly@@375) |x#0@@147|)) ))))
(assert  (=> true (forall (($ly@@376 T@U) (|x#0@@148| Int) ) (!  (=> (and (= (type $ly@@376) LayerTypeType) true) (= (_module.__default.TruncateWord ($LS $ly@@376) (LitInt |x#0@@148|)) (INTERNAL_mod_boogie |x#0@@148| (LitInt 4294967296)))) :qid |typessdf.22:20| :weight 3 :skolemid |3220| :pattern ( (_module.__default.TruncateWord ($LS $ly@@376) (LitInt |x#0@@148|))) ))))
(assert  (=> true (forall ((|b#0@@34| Int) (|i#0@@61| Int) ) (!  (=> (or (|_module.__default.WordOffset_k#canCall| |b#0@@34| |i#0@@61|) (_module.__default.isUInt32 |b#0@@34|)) (=> (_module.__default.WordAligned StartFuel__module._default.WordAligned |b#0@@34|) (_module.__default.WordAligned StartFuel__module._default.WordAligned (_module.__default.WordOffset_k |b#0@@34| |i#0@@61|)))) :qid |typessdf.26:29| :skolemid |3221| :pattern ( (_module.__default.WordOffset_k |b#0@@34| |i#0@@61|)) ))))
(assert (forall ((|b#0@@35| Int) (|i#0@@62| Int) ) (!  (=> (_module.__default.isUInt32 |b#0@@35|) (and (=> (|_module.__default.WordOffset_k#requires| |b#0@@35| |i#0@@62|) true) (=> true (|_module.__default.WordOffset_k#requires| |b#0@@35| |i#0@@62|)))) :qid |typessdf.26:29| :skolemid |3222| :pattern ( (|_module.__default.WordOffset_k#requires| |b#0@@35| |i#0@@62|)) )))
(assert (= (type MoreFuel__module._default.WordAligned4) LayerTypeType))
(assert  (=> true (forall ((|b#0@@36| Int) (|i#0@@63| Int) ) (!  (=> (or (|_module.__default.WordOffset_k#canCall| |b#0@@36| |i#0@@63|) (_module.__default.isUInt32 |b#0@@36|)) (and (|_module.__default.WordsToBytes#canCall| |i#0@@63|) (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned4)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned4)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned4) MoreFuel__module._default.WordAligned4)) (= (_module.__default.WordOffset_k |b#0@@36| |i#0@@63|) (INTERNAL_add_boogie |b#0@@36| (_module.__default.WordsToBytes |i#0@@63|)))))) :qid |typessdf.26:29| :skolemid |3223| :pattern ( (_module.__default.WordOffset_k |b#0@@36| |i#0@@63|)) ))))
(assert (= (type MoreFuel__module._default.WordAligned5) LayerTypeType))
(assert  (=> true (forall ((|b#0@@37| Int) (|i#0@@64| Int) ) (!  (=> (or (|_module.__default.WordOffset_k#canCall| (LitInt |b#0@@37|) (LitInt |i#0@@64|)) (_module.__default.isUInt32 |b#0@@37|)) (and (|_module.__default.WordsToBytes#canCall| (LitInt |i#0@@64|)) (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned5)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned5)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned5) MoreFuel__module._default.WordAligned5)) (= (_module.__default.WordOffset_k (LitInt |b#0@@37|) (LitInt |i#0@@64|)) (LitInt (INTERNAL_add_boogie |b#0@@37| (_module.__default.WordsToBytes (LitInt |i#0@@64|)))))))) :qid |typessdf.26:29| :weight 3 :skolemid |3224| :pattern ( (_module.__default.WordOffset_k (LitInt |b#0@@37|) (LitInt |i#0@@64|))) ))))
(assert  (=> true (forall ((|a#0@@38| Int) (|i#0@@65| Int) ) (!  (=> (or (|_module.__default.ValidWordOffset#canCall| |a#0@@38| |i#0@@65|) (_module.__default.isUInt32 |a#0@@38|)) true) :qid |typessdf.30:27| :skolemid |3225| :pattern ( (_module.__default.ValidWordOffset |a#0@@38| |i#0@@65|)) ))))
(assert (forall ((|a#0@@39| Int) (|i#0@@66| Int) ) (!  (=> (_module.__default.isUInt32 |a#0@@39|) (and (=> (|_module.__default.ValidWordOffset#requires| |a#0@@39| |i#0@@66|) true) (=> true (|_module.__default.ValidWordOffset#requires| |a#0@@39| |i#0@@66|)))) :qid |typessdf.30:27| :skolemid |3226| :pattern ( (|_module.__default.ValidWordOffset#requires| |a#0@@39| |i#0@@66|)) )))
(assert  (=> true (forall ((|a#0@@40| Int) (|i#0@@67| Int) ) (!  (=> (or (|_module.__default.ValidWordOffset#canCall| |a#0@@40| |i#0@@67|) (_module.__default.isUInt32 |a#0@@40|)) (and (and (|_module.__default.WordAligned#canCall| |a#0@@40|) (=> (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@40|) (and (|_module.__default.WordsToBytes#canCall| |i#0@@67|) (|_module.__default.isUInt32#canCall| (INTERNAL_add_boogie |a#0@@40| (_module.__default.WordsToBytes |i#0@@67|)))))) (and (=> (_module.__default.ValidWordOffset |a#0@@40| |i#0@@67|) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@40|) (_module.__default.isUInt32 (INTERNAL_add_boogie |a#0@@40| (_module.__default.WordsToBytes |i#0@@67|))))) (=> (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@40|) (_module.__default.isUInt32 (INTERNAL_add_boogie |a#0@@40| (_module.__default.WordsToBytes |i#0@@67|)))) (_module.__default.ValidWordOffset |a#0@@40| |i#0@@67|))))) :qid |typessdf.30:27| :skolemid |3227| :pattern ( (_module.__default.ValidWordOffset |a#0@@40| |i#0@@67|)) ))))
(assert  (=> true (forall ((|a#0@@41| Int) (|i#0@@68| Int) ) (!  (=> (or (|_module.__default.ValidWordOffset#canCall| (LitInt |a#0@@41|) (LitInt |i#0@@68|)) (_module.__default.isUInt32 |a#0@@41|)) (and (and (|_module.__default.WordAligned#canCall| (LitInt |a#0@@41|)) (=> (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |a#0@@41|)) (and (|_module.__default.WordsToBytes#canCall| (LitInt |i#0@@68|)) (|_module.__default.isUInt32#canCall| (LitInt (INTERNAL_add_boogie |a#0@@41| (_module.__default.WordsToBytes (LitInt |i#0@@68|)))))))) (and (=> (_module.__default.ValidWordOffset (LitInt |a#0@@41|) (LitInt |i#0@@68|)) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |a#0@@41|)) (_module.__default.isUInt32 (LitInt (INTERNAL_add_boogie |a#0@@41| (_module.__default.WordsToBytes (LitInt |i#0@@68|))))))) (=> (and (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |a#0@@41|)) (_module.__default.isUInt32 (LitInt (INTERNAL_add_boogie |a#0@@41| (_module.__default.WordsToBytes (LitInt |i#0@@68|)))))) (_module.__default.ValidWordOffset (LitInt |a#0@@41|) (LitInt |i#0@@68|)))))) :qid |typessdf.30:27| :weight 3 :skolemid |3228| :pattern ( (_module.__default.ValidWordOffset (LitInt |a#0@@41|) (LitInt |i#0@@68|))) ))))
(assert  (=> true (forall ((|a#0@@42| Int) (|i#0@@69| Int) ) (!  (=> (or (|_module.__default.WordOffset#canCall| |a#0@@42| |i#0@@69|) (and (and (_module.__default.isUInt32 |a#0@@42|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@42|)) (_module.__default.isUInt32 (INTERNAL_add_boogie |a#0@@42| (_module.__default.WordsToBytes |i#0@@69|))))) (and (_module.__default.isUInt32 (_module.__default.WordOffset |a#0@@42| |i#0@@69|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (_module.__default.WordOffset |a#0@@42| |i#0@@69|)))) :qid |typessdf.33:28| :skolemid |3229| :pattern ( (_module.__default.WordOffset |a#0@@42| |i#0@@69|)) ))))
(assert (forall ((|a#0@@43| Int) (|i#0@@70| Int) ) (!  (=> (and (_module.__default.isUInt32 |a#0@@43|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@43|)) (and (=> (|_module.__default.WordOffset#requires| |a#0@@43| |i#0@@70|) (_module.__default.isUInt32 (INTERNAL_add_boogie |a#0@@43| (_module.__default.WordsToBytes |i#0@@70|)))) (=> (_module.__default.isUInt32 (INTERNAL_add_boogie |a#0@@43| (_module.__default.WordsToBytes |i#0@@70|))) (|_module.__default.WordOffset#requires| |a#0@@43| |i#0@@70|)))) :qid |typessdf.33:28| :skolemid |3230| :pattern ( (|_module.__default.WordOffset#requires| |a#0@@43| |i#0@@70|)) )))
(assert  (=> true (forall ((|a#0@@44| Int) (|i#0@@71| Int) ) (!  (=> (or (|_module.__default.WordOffset#canCall| |a#0@@44| |i#0@@71|) (and (and (_module.__default.isUInt32 |a#0@@44|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@44|)) (_module.__default.isUInt32 (INTERNAL_add_boogie |a#0@@44| (_module.__default.WordsToBytes |i#0@@71|))))) (and (|_module.__default.WordOffset_k#canCall| |a#0@@44| |i#0@@71|) (= (_module.__default.WordOffset |a#0@@44| |i#0@@71|) (_module.__default.WordOffset_k |a#0@@44| |i#0@@71|)))) :qid |typessdf.33:28| :skolemid |3231| :pattern ( (_module.__default.WordOffset |a#0@@44| |i#0@@71|)) ))))
(assert  (=> true (forall ((|a#0@@45| Int) (|i#0@@72| Int) ) (!  (=> (or (|_module.__default.WordOffset#canCall| (LitInt |a#0@@45|) (LitInt |i#0@@72|)) (and (and (_module.__default.isUInt32 |a#0@@45|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |a#0@@45|)) (U_2_bool (Lit (bool_2_U (_module.__default.isUInt32 (LitInt (INTERNAL_add_boogie |a#0@@45| (_module.__default.WordsToBytes (LitInt |i#0@@72|)))))))))) (and (|_module.__default.WordOffset_k#canCall| (LitInt |a#0@@45|) (LitInt |i#0@@72|)) (= (_module.__default.WordOffset (LitInt |a#0@@45|) (LitInt |i#0@@72|)) (LitInt (_module.__default.WordOffset_k (LitInt |a#0@@45|) (LitInt |i#0@@72|)))))) :qid |typessdf.33:28| :weight 3 :skolemid |3232| :pattern ( (_module.__default.WordOffset (LitInt |a#0@@45|) (LitInt |i#0@@72|))) ))))
(assert (forall (($ly@@377 T@U) (|addr#0@@21| Int) ) (!  (=> (= (type $ly@@377) LayerTypeType) (and (=> (_module.__default.PageAligned ($LS $ly@@377) |addr#0@@21|) (_module.__default.PageAligned $ly@@377 |addr#0@@21|)) (=> (_module.__default.PageAligned $ly@@377 |addr#0@@21|) (_module.__default.PageAligned ($LS $ly@@377) |addr#0@@21|)))) :qid |typessdf.40:21| :skolemid |3233| :pattern ( (_module.__default.PageAligned ($LS $ly@@377) |addr#0@@21|)) )))
(assert (forall (($ly@@378 T@U) (|addr#0@@22| Int) ) (!  (=> (= (type $ly@@378) LayerTypeType) (and (=> (_module.__default.PageAligned $ly@@378 |addr#0@@22|) (_module.__default.PageAligned $LZ |addr#0@@22|)) (=> (_module.__default.PageAligned $LZ |addr#0@@22|) (_module.__default.PageAligned $ly@@378 |addr#0@@22|)))) :qid |typessdf.40:21| :skolemid |3234| :pattern ( (_module.__default.PageAligned (AsFuelBottom $ly@@378) |addr#0@@22|)) )))
(assert  (=> true (forall (($ly@@379 T@U) (|addr#0@@23| Int) ) (!  (=> (and (and (= (type $ly@@379) LayerTypeType) (or (|_module.__default.PageAligned#canCall| |addr#0@@23|) (INTERNAL_ge_boogie |addr#0@@23| 0))) (_module.__default.PageAligned $ly@@379 |addr#0@@23|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned |addr#0@@23|)) :qid |typessdf.40:21| :skolemid |3235| :pattern ( (_module.__default.PageAligned $ly@@379 |addr#0@@23|)) ))))
(assert (forall (($ly@@380 T@U) (|addr#0@@24| Int) ) (!  (=> (= (type $ly@@380) LayerTypeType) (and (=> (|_module.__default.PageAligned#requires| $ly@@380 |addr#0@@24|) (INTERNAL_ge_boogie |addr#0@@24| 0)) (=> (INTERNAL_ge_boogie |addr#0@@24| 0) (|_module.__default.PageAligned#requires| $ly@@380 |addr#0@@24|)))) :qid |typessdf.40:21| :skolemid |3236| :pattern ( (|_module.__default.PageAligned#requires| $ly@@380 |addr#0@@24|)) )))
(assert  (=> true (forall (($ly@@381 T@U) (|addr#0@@25| Int) ) (!  (=> (and (= (type $ly@@381) LayerTypeType) (or (|_module.__default.PageAligned#canCall| |addr#0@@25|) (INTERNAL_ge_boogie |addr#0@@25| 0))) (and (=> (_module.__default.PageAligned ($LS $ly@@381) |addr#0@@25|) (ite (= (INTERNAL_mod_boogie |addr#0@@25| (LitInt 4096)) (LitInt 0)) true false)) (=> (ite (= (INTERNAL_mod_boogie |addr#0@@25| (LitInt 4096)) (LitInt 0)) true false) (_module.__default.PageAligned ($LS $ly@@381) |addr#0@@25|)))) :qid |typessdf.40:21| :skolemid |3237| :pattern ( (_module.__default.PageAligned ($LS $ly@@381) |addr#0@@25|)) ))))
(assert  (=> true (forall (($ly@@382 T@U) (|addr#0@@26| Int) ) (!  (=> (and (= (type $ly@@382) LayerTypeType) (or (|_module.__default.PageAligned#canCall| (LitInt |addr#0@@26|)) (INTERNAL_ge_boogie |addr#0@@26| 0))) (and (=> (_module.__default.PageAligned ($LS $ly@@382) (LitInt |addr#0@@26|)) (ite (= (INTERNAL_mod_boogie |addr#0@@26| (LitInt 4096)) (LitInt 0)) true false)) (=> (ite (= (INTERNAL_mod_boogie |addr#0@@26| (LitInt 4096)) (LitInt 0)) true false) (_module.__default.PageAligned ($LS $ly@@382) (LitInt |addr#0@@26|))))) :qid |typessdf.40:21| :weight 3 :skolemid |3238| :pattern ( (_module.__default.PageAligned ($LS $ly@@382) (LitInt |addr#0@@26|))) ))))
(assert  (=> true (forall ((|x1#0| Int) (|x2#0| Int) ) (!  (=> (or (|_module.__default.WordAlignedAdd#canCall| |x1#0| |x2#0|) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |x1#0|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |x2#0|))) (_module.__default.WordAligned StartFuel__module._default.WordAligned (_module.__default.WordAlignedAdd |x1#0| |x2#0|))) :qid |typessdf.82:25| :skolemid |3239| :pattern ( (_module.__default.WordAlignedAdd |x1#0| |x2#0|)) ))))
(assert (forall ((|x1#0@@0| Int) (|x2#0@@0| Int) ) (!  (and (=> (|_module.__default.WordAlignedAdd#requires| |x1#0@@0| |x2#0@@0|) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |x1#0@@0|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |x2#0@@0|))) (=> (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |x1#0@@0|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |x2#0@@0|)) (|_module.__default.WordAlignedAdd#requires| |x1#0@@0| |x2#0@@0|))) :qid |typessdf.82:25| :skolemid |3240| :pattern ( (|_module.__default.WordAlignedAdd#requires| |x1#0@@0| |x2#0@@0|)) )))
(assert (= (type MoreFuel__module._default.WordAligned6) LayerTypeType))
(assert  (=> true (forall ((|x1#0@@1| Int) (|x2#0@@1| Int) ) (!  (=> (or (|_module.__default.WordAlignedAdd#canCall| |x1#0@@1| |x2#0@@1|) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |x1#0@@1|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |x2#0@@1|))) (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned6)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned6)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned6) MoreFuel__module._default.WordAligned6)) (= (_module.__default.WordAlignedAdd |x1#0@@1| |x2#0@@1|) (INTERNAL_add_boogie |x1#0@@1| |x2#0@@1|)))) :qid |typessdf.82:25| :skolemid |3241| :pattern ( (_module.__default.WordAlignedAdd |x1#0@@1| |x2#0@@1|)) ))))
(assert (= (type MoreFuel__module._default.WordAligned7) LayerTypeType))
(assert  (=> true (forall ((|x1#0@@2| Int) (|x2#0@@2| Int) ) (!  (=> (or (|_module.__default.WordAlignedAdd#canCall| (LitInt |x1#0@@2|) (LitInt |x2#0@@2|)) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |x1#0@@2|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |x2#0@@2|)))) (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned7)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned7)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned7) MoreFuel__module._default.WordAligned7)) (= (_module.__default.WordAlignedAdd (LitInt |x1#0@@2|) (LitInt |x2#0@@2|)) (LitInt (INTERNAL_add_boogie |x1#0@@2| |x2#0@@2|))))) :qid |typessdf.82:25| :weight 3 :skolemid |3242| :pattern ( (_module.__default.WordAlignedAdd (LitInt |x1#0@@2|) (LitInt |x2#0@@2|))) ))))
(assert  (=> true (forall ((|x1#0@@3| Int) (|x2#0@@3| Int) ) (!  (=> (or (|_module.__default.WordAlignedSub#canCall| |x1#0@@3| |x2#0@@3|) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |x1#0@@3|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |x2#0@@3|))) (_module.__default.WordAligned StartFuel__module._default.WordAligned (_module.__default.WordAlignedSub |x1#0@@3| |x2#0@@3|))) :qid |typessdf.90:25| :skolemid |3243| :pattern ( (_module.__default.WordAlignedSub |x1#0@@3| |x2#0@@3|)) ))))
(assert (forall ((|x1#0@@4| Int) (|x2#0@@4| Int) ) (!  (and (=> (|_module.__default.WordAlignedSub#requires| |x1#0@@4| |x2#0@@4|) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |x1#0@@4|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |x2#0@@4|))) (=> (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |x1#0@@4|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |x2#0@@4|)) (|_module.__default.WordAlignedSub#requires| |x1#0@@4| |x2#0@@4|))) :qid |typessdf.90:25| :skolemid |3244| :pattern ( (|_module.__default.WordAlignedSub#requires| |x1#0@@4| |x2#0@@4|)) )))
(assert (= (type MoreFuel__module._default.WordAligned8) LayerTypeType))
(assert  (=> true (forall ((|x1#0@@5| Int) (|x2#0@@5| Int) ) (!  (=> (or (|_module.__default.WordAlignedSub#canCall| |x1#0@@5| |x2#0@@5|) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned |x1#0@@5|) (_module.__default.WordAligned StartFuel__module._default.WordAligned |x2#0@@5|))) (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned8)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned8)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned8) MoreFuel__module._default.WordAligned8)) (= (_module.__default.WordAlignedSub |x1#0@@5| |x2#0@@5|) (INTERNAL_sub_boogie |x1#0@@5| |x2#0@@5|)))) :qid |typessdf.90:25| :skolemid |3245| :pattern ( (_module.__default.WordAlignedSub |x1#0@@5| |x2#0@@5|)) ))))
(assert (= (type MoreFuel__module._default.WordAligned9) LayerTypeType))
(assert  (=> true (forall ((|x1#0@@6| Int) (|x2#0@@6| Int) ) (!  (=> (or (|_module.__default.WordAlignedSub#canCall| (LitInt |x1#0@@6|) (LitInt |x2#0@@6|)) (and (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |x1#0@@6|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (LitInt |x2#0@@6|)))) (and (and (and (= StartFuel__module._default.WordAligned ($LS MoreFuel__module._default.WordAligned9)) (= StartFuelAssert__module._default.WordAligned ($LS ($LS MoreFuel__module._default.WordAligned9)))) (= (AsFuelBottom MoreFuel__module._default.WordAligned9) MoreFuel__module._default.WordAligned9)) (= (_module.__default.WordAlignedSub (LitInt |x1#0@@6|) (LitInt |x2#0@@6|)) (LitInt (INTERNAL_sub_boogie |x1#0@@6| |x2#0@@6|))))) :qid |typessdf.90:25| :weight 3 :skolemid |3246| :pattern ( (_module.__default.WordAlignedSub (LitInt |x1#0@@6|) (LitInt |x2#0@@6|))) ))))
(assert  (=> true (forall ((|x#0@@149| Int) (|y#0@@81| Int) ) (!  (=> (or (|_module.__default.BitwiseXor#canCall| |x#0@@149| |y#0@@81|) (and (_module.__default.isUInt32 |x#0@@149|) (_module.__default.isUInt32 |y#0@@81|))) (_module.__default.isUInt32 (_module.__default.BitwiseXor |x#0@@149| |y#0@@81|))) :qid |bitvecto.10:21| :skolemid |3247| :pattern ( (_module.__default.BitwiseXor |x#0@@149| |y#0@@81|)) ))))
(assert (forall ((|x#0@@150| Int) (|y#0@@82| Int) ) (!  (=> (and (_module.__default.isUInt32 |x#0@@150|) (_module.__default.isUInt32 |y#0@@82|)) (and (=> (|_module.__default.BitwiseXor#requires| |x#0@@150| |y#0@@82|) true) (=> true (|_module.__default.BitwiseXor#requires| |x#0@@150| |y#0@@82|)))) :qid |bitvecto.10:21| :skolemid |3248| :pattern ( (|_module.__default.BitwiseXor#requires| |x#0@@150| |y#0@@82|)) )))
(assert (= (type StartFuel__module._default.BitXor) LayerTypeType))
(assert  (=> true (forall ((|x#0@@151| Int) (|y#0@@83| Int) ) (!  (=> (or (|_module.__default.BitwiseXor#canCall| |x#0@@151| |y#0@@83|) (and (_module.__default.isUInt32 |x#0@@151|) (_module.__default.isUInt32 |y#0@@83|))) (and (and (and (and (|_module.__default.WordAsBits#canCall| |x#0@@151|) (|_module.__default.WordAsBits#canCall| |y#0@@83|)) (|_module.__default.BitXor#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@151|) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |y#0@@83|))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitXor StartFuel__module._default.BitXor (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@151|) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |y#0@@83|)))) (= (_module.__default.BitwiseXor |x#0@@151| |y#0@@83|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitXor StartFuel__module._default.BitXor (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@151|) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |y#0@@83|)))))) :qid |bitvecto.10:21| :skolemid |3249| :pattern ( (_module.__default.BitwiseXor |x#0@@151| |y#0@@83|)) ))))
(assert  (=> true (forall ((|x#0@@152| Int) (|y#0@@84| Int) ) (!  (=> (or (|_module.__default.BitwiseXor#canCall| (LitInt |x#0@@152|) (LitInt |y#0@@84|)) (and (_module.__default.isUInt32 |x#0@@152|) (_module.__default.isUInt32 |y#0@@84|))) (and (and (and (and (|_module.__default.WordAsBits#canCall| (LitInt |x#0@@152|)) (|_module.__default.WordAsBits#canCall| (LitInt |y#0@@84|))) (|_module.__default.BitXor#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@152|)) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |y#0@@84|)))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitXor StartFuel__module._default.BitXor (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@152|)) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |y#0@@84|))))) (= (_module.__default.BitwiseXor (LitInt |x#0@@152|) (LitInt |y#0@@84|)) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitXor StartFuel__module._default.BitXor (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@152|)) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |y#0@@84|))))))) :qid |bitvecto.10:21| :weight 3 :skolemid |3250| :pattern ( (_module.__default.BitwiseXor (LitInt |x#0@@152|) (LitInt |y#0@@84|))) ))))
(assert  (=> true (forall ((|x#0@@153| Int) (|y#0@@85| Int) ) (!  (=> (or (|_module.__default.BitwiseAnd#canCall| |x#0@@153| |y#0@@85|) (and (_module.__default.isUInt32 |x#0@@153|) (_module.__default.isUInt32 |y#0@@85|))) (_module.__default.isUInt32 (_module.__default.BitwiseAnd |x#0@@153| |y#0@@85|))) :qid |bitvecto.13:21| :skolemid |3251| :pattern ( (_module.__default.BitwiseAnd |x#0@@153| |y#0@@85|)) ))))
(assert (forall ((|x#0@@154| Int) (|y#0@@86| Int) ) (!  (=> (and (_module.__default.isUInt32 |x#0@@154|) (_module.__default.isUInt32 |y#0@@86|)) (and (=> (|_module.__default.BitwiseAnd#requires| |x#0@@154| |y#0@@86|) true) (=> true (|_module.__default.BitwiseAnd#requires| |x#0@@154| |y#0@@86|)))) :qid |bitvecto.13:21| :skolemid |3252| :pattern ( (|_module.__default.BitwiseAnd#requires| |x#0@@154| |y#0@@86|)) )))
(assert  (=> true (forall ((|x#0@@155| Int) (|y#0@@87| Int) ) (!  (=> (or (|_module.__default.BitwiseAnd#canCall| |x#0@@155| |y#0@@87|) (and (_module.__default.isUInt32 |x#0@@155|) (_module.__default.isUInt32 |y#0@@87|))) (and (and (and (and (|_module.__default.WordAsBits#canCall| |x#0@@155|) (|_module.__default.WordAsBits#canCall| |y#0@@87|)) (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@155|) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |y#0@@87|))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@155|) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |y#0@@87|)))) (= (_module.__default.BitwiseAnd |x#0@@155| |y#0@@87|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@155|) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |y#0@@87|)))))) :qid |bitvecto.13:21| :skolemid |3253| :pattern ( (_module.__default.BitwiseAnd |x#0@@155| |y#0@@87|)) ))))
(assert  (=> true (forall ((|x#0@@156| Int) (|y#0@@88| Int) ) (!  (=> (or (|_module.__default.BitwiseAnd#canCall| (LitInt |x#0@@156|) (LitInt |y#0@@88|)) (and (_module.__default.isUInt32 |x#0@@156|) (_module.__default.isUInt32 |y#0@@88|))) (and (and (and (and (|_module.__default.WordAsBits#canCall| (LitInt |x#0@@156|)) (|_module.__default.WordAsBits#canCall| (LitInt |y#0@@88|))) (|_module.__default.BitAnd#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@156|)) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |y#0@@88|)))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@156|)) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |y#0@@88|))))) (= (_module.__default.BitwiseAnd (LitInt |x#0@@156|) (LitInt |y#0@@88|)) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitAnd StartFuel__module._default.BitAnd (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@156|)) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |y#0@@88|))))))) :qid |bitvecto.13:21| :weight 3 :skolemid |3254| :pattern ( (_module.__default.BitwiseAnd (LitInt |x#0@@156|) (LitInt |y#0@@88|))) ))))
(assert  (=> true (forall ((|x#0@@157| Int) (|y#0@@89| Int) ) (!  (=> (or (|_module.__default.BitwiseOr#canCall| |x#0@@157| |y#0@@89|) (and (_module.__default.isUInt32 |x#0@@157|) (_module.__default.isUInt32 |y#0@@89|))) (_module.__default.isUInt32 (_module.__default.BitwiseOr |x#0@@157| |y#0@@89|))) :qid |bitvecto.16:20| :skolemid |3255| :pattern ( (_module.__default.BitwiseOr |x#0@@157| |y#0@@89|)) ))))
(assert (forall ((|x#0@@158| Int) (|y#0@@90| Int) ) (!  (=> (and (_module.__default.isUInt32 |x#0@@158|) (_module.__default.isUInt32 |y#0@@90|)) (and (=> (|_module.__default.BitwiseOr#requires| |x#0@@158| |y#0@@90|) true) (=> true (|_module.__default.BitwiseOr#requires| |x#0@@158| |y#0@@90|)))) :qid |bitvecto.16:20| :skolemid |3256| :pattern ( (|_module.__default.BitwiseOr#requires| |x#0@@158| |y#0@@90|)) )))
(assert  (=> true (forall ((|x#0@@159| Int) (|y#0@@91| Int) ) (!  (=> (or (|_module.__default.BitwiseOr#canCall| |x#0@@159| |y#0@@91|) (and (_module.__default.isUInt32 |x#0@@159|) (_module.__default.isUInt32 |y#0@@91|))) (and (and (and (and (|_module.__default.WordAsBits#canCall| |x#0@@159|) (|_module.__default.WordAsBits#canCall| |y#0@@91|)) (|_module.__default.BitOr#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@159|) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |y#0@@91|))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitOr StartFuel__module._default.BitOr (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@159|) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |y#0@@91|)))) (= (_module.__default.BitwiseOr |x#0@@159| |y#0@@91|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitOr StartFuel__module._default.BitOr (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@159|) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |y#0@@91|)))))) :qid |bitvecto.16:20| :skolemid |3257| :pattern ( (_module.__default.BitwiseOr |x#0@@159| |y#0@@91|)) ))))
(assert  (=> true (forall ((|x#0@@160| Int) (|y#0@@92| Int) ) (!  (=> (or (|_module.__default.BitwiseOr#canCall| (LitInt |x#0@@160|) (LitInt |y#0@@92|)) (and (_module.__default.isUInt32 |x#0@@160|) (_module.__default.isUInt32 |y#0@@92|))) (and (and (and (and (|_module.__default.WordAsBits#canCall| (LitInt |x#0@@160|)) (|_module.__default.WordAsBits#canCall| (LitInt |y#0@@92|))) (|_module.__default.BitOr#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@160|)) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |y#0@@92|)))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitOr StartFuel__module._default.BitOr (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@160|)) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |y#0@@92|))))) (= (_module.__default.BitwiseOr (LitInt |x#0@@160|) (LitInt |y#0@@92|)) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitOr StartFuel__module._default.BitOr (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@160|)) (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |y#0@@92|))))))) :qid |bitvecto.16:20| :weight 3 :skolemid |3258| :pattern ( (_module.__default.BitwiseOr (LitInt |x#0@@160|) (LitInt |y#0@@92|))) ))))
(assert  (=> true (forall ((|x#0@@161| Int) ) (!  (=> (or (|_module.__default.BitwiseNot#canCall| |x#0@@161|) (_module.__default.isUInt32 |x#0@@161|)) (_module.__default.isUInt32 (_module.__default.BitwiseNot |x#0@@161|))) :qid |bitvecto.19:21| :skolemid |3259| :pattern ( (_module.__default.BitwiseNot |x#0@@161|)) ))))
(assert (forall ((|x#0@@162| Int) ) (!  (=> (_module.__default.isUInt32 |x#0@@162|) (and (=> (|_module.__default.BitwiseNot#requires| |x#0@@162|) true) (=> true (|_module.__default.BitwiseNot#requires| |x#0@@162|)))) :qid |bitvecto.19:21| :skolemid |3260| :pattern ( (|_module.__default.BitwiseNot#requires| |x#0@@162|)) )))
(assert  (=> true (forall ((|x#0@@163| Int) ) (!  (=> (or (|_module.__default.BitwiseNot#canCall| |x#0@@163|) (_module.__default.isUInt32 |x#0@@163|)) (and (and (and (|_module.__default.WordAsBits#canCall| |x#0@@163|) (|_module.__default.BitNot#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@163|))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitNot StartFuel__module._default.BitNot (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@163|)))) (= (_module.__default.BitwiseNot |x#0@@163|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitNot StartFuel__module._default.BitNot (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@163|)))))) :qid |bitvecto.19:21| :skolemid |3261| :pattern ( (_module.__default.BitwiseNot |x#0@@163|)) ))))
(assert  (=> true (forall ((|x#0@@164| Int) ) (!  (=> (or (|_module.__default.BitwiseNot#canCall| (LitInt |x#0@@164|)) (_module.__default.isUInt32 |x#0@@164|)) (and (and (and (|_module.__default.WordAsBits#canCall| (LitInt |x#0@@164|)) (|_module.__default.BitNot#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@164|)))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitNot StartFuel__module._default.BitNot (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@164|))))) (= (_module.__default.BitwiseNot (LitInt |x#0@@164|)) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitNot StartFuel__module._default.BitNot (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@164|))))))) :qid |bitvecto.19:21| :weight 3 :skolemid |3262| :pattern ( (_module.__default.BitwiseNot (LitInt |x#0@@164|))) ))))
(assert  (=> true (forall ((|x#0@@165| Int) (|amount#0@@15| Int) ) (!  (=> (or (|_module.__default.LeftShift#canCall| |x#0@@165| |amount#0@@15|) (and (and (_module.__default.isUInt32 |x#0@@165|) (_module.__default.isUInt32 |amount#0@@15|)) (and (INTERNAL_le_boogie 0 |amount#0@@15|) (INTERNAL_lt_boogie |amount#0@@15| 32)))) (_module.__default.isUInt32 (_module.__default.LeftShift |x#0@@165| |amount#0@@15|))) :qid |bitvecto.22:20| :skolemid |3263| :pattern ( (_module.__default.LeftShift |x#0@@165| |amount#0@@15|)) ))))
(assert (forall ((|x#0@@166| Int) (|amount#0@@16| Int) ) (!  (=> (and (_module.__default.isUInt32 |x#0@@166|) (_module.__default.isUInt32 |amount#0@@16|)) (and (=> (|_module.__default.LeftShift#requires| |x#0@@166| |amount#0@@16|) (and (INTERNAL_le_boogie 0 |amount#0@@16|) (INTERNAL_lt_boogie |amount#0@@16| 32))) (=> (and (INTERNAL_le_boogie 0 |amount#0@@16|) (INTERNAL_lt_boogie |amount#0@@16| 32)) (|_module.__default.LeftShift#requires| |x#0@@166| |amount#0@@16|)))) :qid |bitvecto.22:20| :skolemid |3264| :pattern ( (|_module.__default.LeftShift#requires| |x#0@@166| |amount#0@@16|)) )))
(assert (= (type StartFuel__module._default.BitShiftLeft) LayerTypeType))
(assert  (=> true (forall ((|x#0@@167| Int) (|amount#0@@17| Int) ) (!  (=> (or (|_module.__default.LeftShift#canCall| |x#0@@167| |amount#0@@17|) (and (and (_module.__default.isUInt32 |x#0@@167|) (_module.__default.isUInt32 |amount#0@@17|)) (and (INTERNAL_le_boogie 0 |amount#0@@17|) (INTERNAL_lt_boogie |amount#0@@17| 32)))) (and (and (and (|_module.__default.WordAsBits#canCall| |x#0@@167|) (|_module.__default.BitShiftLeft#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@167|) |amount#0@@17|)) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitShiftLeft StartFuel__module._default.BitShiftLeft (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@167|) |amount#0@@17|))) (= (_module.__default.LeftShift |x#0@@167| |amount#0@@17|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitShiftLeft StartFuel__module._default.BitShiftLeft (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@167|) |amount#0@@17|))))) :qid |bitvecto.22:20| :skolemid |3265| :pattern ( (_module.__default.LeftShift |x#0@@167| |amount#0@@17|)) ))))
(assert  (=> true (forall ((|x#0@@168| Int) (|amount#0@@18| Int) ) (!  (=> (or (|_module.__default.LeftShift#canCall| (LitInt |x#0@@168|) (LitInt |amount#0@@18|)) (and (and (_module.__default.isUInt32 |x#0@@168|) (_module.__default.isUInt32 |amount#0@@18|)) (and (INTERNAL_le_boogie 0 |amount#0@@18|) (INTERNAL_lt_boogie |amount#0@@18| 32)))) (and (and (and (|_module.__default.WordAsBits#canCall| (LitInt |x#0@@168|)) (|_module.__default.BitShiftLeft#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@168|)) (LitInt |amount#0@@18|))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitShiftLeft StartFuel__module._default.BitShiftLeft (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@168|)) (LitInt |amount#0@@18|)))) (= (_module.__default.LeftShift (LitInt |x#0@@168|) (LitInt |amount#0@@18|)) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitShiftLeft StartFuel__module._default.BitShiftLeft (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@168|)) (LitInt |amount#0@@18|)))))) :qid |bitvecto.22:20| :weight 3 :skolemid |3266| :pattern ( (_module.__default.LeftShift (LitInt |x#0@@168|) (LitInt |amount#0@@18|))) ))))
(assert  (=> true (forall ((|x#0@@169| Int) (|amount#0@@19| Int) ) (!  (=> (or (|_module.__default.RightShift#canCall| |x#0@@169| |amount#0@@19|) (and (and (_module.__default.isUInt32 |x#0@@169|) (_module.__default.isUInt32 |amount#0@@19|)) (and (INTERNAL_le_boogie 0 |amount#0@@19|) (INTERNAL_lt_boogie |amount#0@@19| 32)))) (_module.__default.isUInt32 (_module.__default.RightShift |x#0@@169| |amount#0@@19|))) :qid |bitvecto.26:21| :skolemid |3267| :pattern ( (_module.__default.RightShift |x#0@@169| |amount#0@@19|)) ))))
(assert (forall ((|x#0@@170| Int) (|amount#0@@20| Int) ) (!  (=> (and (_module.__default.isUInt32 |x#0@@170|) (_module.__default.isUInt32 |amount#0@@20|)) (and (=> (|_module.__default.RightShift#requires| |x#0@@170| |amount#0@@20|) (and (INTERNAL_le_boogie 0 |amount#0@@20|) (INTERNAL_lt_boogie |amount#0@@20| 32))) (=> (and (INTERNAL_le_boogie 0 |amount#0@@20|) (INTERNAL_lt_boogie |amount#0@@20| 32)) (|_module.__default.RightShift#requires| |x#0@@170| |amount#0@@20|)))) :qid |bitvecto.26:21| :skolemid |3268| :pattern ( (|_module.__default.RightShift#requires| |x#0@@170| |amount#0@@20|)) )))
(assert (= (type StartFuel__module._default.BitShiftRight) LayerTypeType))
(assert  (=> true (forall ((|x#0@@171| Int) (|amount#0@@21| Int) ) (!  (=> (or (|_module.__default.RightShift#canCall| |x#0@@171| |amount#0@@21|) (and (and (_module.__default.isUInt32 |x#0@@171|) (_module.__default.isUInt32 |amount#0@@21|)) (and (INTERNAL_le_boogie 0 |amount#0@@21|) (INTERNAL_lt_boogie |amount#0@@21| 32)))) (and (and (and (|_module.__default.WordAsBits#canCall| |x#0@@171|) (|_module.__default.BitShiftRight#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@171|) |amount#0@@21|)) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitShiftRight StartFuel__module._default.BitShiftRight (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@171|) |amount#0@@21|))) (= (_module.__default.RightShift |x#0@@171| |amount#0@@21|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitShiftRight StartFuel__module._default.BitShiftRight (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@171|) |amount#0@@21|))))) :qid |bitvecto.26:21| :skolemid |3269| :pattern ( (_module.__default.RightShift |x#0@@171| |amount#0@@21|)) ))))
(assert  (=> true (forall ((|x#0@@172| Int) (|amount#0@@22| Int) ) (!  (=> (or (|_module.__default.RightShift#canCall| (LitInt |x#0@@172|) (LitInt |amount#0@@22|)) (and (and (_module.__default.isUInt32 |x#0@@172|) (_module.__default.isUInt32 |amount#0@@22|)) (and (INTERNAL_le_boogie 0 |amount#0@@22|) (INTERNAL_lt_boogie |amount#0@@22| 32)))) (and (and (and (|_module.__default.WordAsBits#canCall| (LitInt |x#0@@172|)) (|_module.__default.BitShiftRight#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@172|)) (LitInt |amount#0@@22|))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitShiftRight StartFuel__module._default.BitShiftRight (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@172|)) (LitInt |amount#0@@22|)))) (= (_module.__default.RightShift (LitInt |x#0@@172|) (LitInt |amount#0@@22|)) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitShiftRight StartFuel__module._default.BitShiftRight (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@172|)) (LitInt |amount#0@@22|)))))) :qid |bitvecto.26:21| :weight 3 :skolemid |3270| :pattern ( (_module.__default.RightShift (LitInt |x#0@@172|) (LitInt |amount#0@@22|))) ))))
(assert  (=> true (forall ((|x#0@@173| Int) (|amount#0@@23| Int) ) (!  (=> (or (|_module.__default.RotateRight#canCall| |x#0@@173| |amount#0@@23|) (and (and (_module.__default.isUInt32 |x#0@@173|) (and (INTERNAL_le_boogie 0 |amount#0@@23|) (INTERNAL_lt_boogie |amount#0@@23| 32))) (and (INTERNAL_le_boogie 0 |amount#0@@23|) (INTERNAL_lt_boogie |amount#0@@23| 32)))) (_module.__default.isUInt32 (_module.__default.RotateRight |x#0@@173| |amount#0@@23|))) :qid |bitvecto.30:22| :skolemid |3271| :pattern ( (_module.__default.RotateRight |x#0@@173| |amount#0@@23|)) ))))
(assert (forall ((|x#0@@174| Int) (|amount#0@@24| Int) ) (!  (=> (and (_module.__default.isUInt32 |x#0@@174|) (and (INTERNAL_le_boogie 0 |amount#0@@24|) (INTERNAL_lt_boogie |amount#0@@24| 32))) (and (=> (|_module.__default.RotateRight#requires| |x#0@@174| |amount#0@@24|) (and (INTERNAL_le_boogie 0 |amount#0@@24|) (INTERNAL_lt_boogie |amount#0@@24| 32))) (=> (and (INTERNAL_le_boogie 0 |amount#0@@24|) (INTERNAL_lt_boogie |amount#0@@24| 32)) (|_module.__default.RotateRight#requires| |x#0@@174| |amount#0@@24|)))) :qid |bitvecto.30:22| :skolemid |3272| :pattern ( (|_module.__default.RotateRight#requires| |x#0@@174| |amount#0@@24|)) )))
(assert (= (type StartFuel__module._default.BitRotateRight) LayerTypeType))
(assert  (=> true (forall ((|x#0@@175| Int) (|amount#0@@25| Int) ) (!  (=> (or (|_module.__default.RotateRight#canCall| |x#0@@175| |amount#0@@25|) (and (and (_module.__default.isUInt32 |x#0@@175|) (and (INTERNAL_le_boogie 0 |amount#0@@25|) (INTERNAL_lt_boogie |amount#0@@25| 32))) (and (INTERNAL_le_boogie 0 |amount#0@@25|) (INTERNAL_lt_boogie |amount#0@@25| 32)))) (and (and (and (|_module.__default.WordAsBits#canCall| |x#0@@175|) (|_module.__default.BitRotateRight#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@175|) |amount#0@@25|)) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitRotateRight StartFuel__module._default.BitRotateRight (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@175|) |amount#0@@25|))) (= (_module.__default.RotateRight |x#0@@175| |amount#0@@25|) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitRotateRight StartFuel__module._default.BitRotateRight (_module.__default.WordAsBits StartFuel__module._default.WordAsBits |x#0@@175|) |amount#0@@25|))))) :qid |bitvecto.30:22| :skolemid |3273| :pattern ( (_module.__default.RotateRight |x#0@@175| |amount#0@@25|)) ))))
(assert  (=> true (forall ((|x#0@@176| Int) (|amount#0@@26| Int) ) (!  (=> (or (|_module.__default.RotateRight#canCall| (LitInt |x#0@@176|) (LitInt |amount#0@@26|)) (and (and (_module.__default.isUInt32 |x#0@@176|) (and (INTERNAL_le_boogie 0 |amount#0@@26|) (INTERNAL_lt_boogie |amount#0@@26| 32))) (and (INTERNAL_le_boogie 0 |amount#0@@26|) (INTERNAL_lt_boogie |amount#0@@26| 32)))) (and (and (and (|_module.__default.WordAsBits#canCall| (LitInt |x#0@@176|)) (|_module.__default.BitRotateRight#canCall| (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@176|)) (LitInt |amount#0@@26|))) (|_module.__default.BitsAsWord#canCall| (_module.__default.BitRotateRight StartFuel__module._default.BitRotateRight (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@176|)) (LitInt |amount#0@@26|)))) (= (_module.__default.RotateRight (LitInt |x#0@@176|) (LitInt |amount#0@@26|)) (_module.__default.BitsAsWord StartFuel__module._default.BitsAsWord (_module.__default.BitRotateRight StartFuel__module._default.BitRotateRight (_module.__default.WordAsBits StartFuel__module._default.WordAsBits (LitInt |x#0@@176|)) (LitInt |amount#0@@26|)))))) :qid |bitvecto.30:22| :weight 3 :skolemid |3274| :pattern ( (_module.__default.RotateRight (LitInt |x#0@@176|) (LitInt |amount#0@@26|))) ))))
(assert (forall (($ly@@383 T@U) (|origval#0| Int) (|newval#0| Int) ) (!  (=> (= (type $ly@@383) LayerTypeType) (= (_module.__default.UpdateTopBits ($LS $ly@@383) |origval#0| |newval#0|) (_module.__default.UpdateTopBits $ly@@383 |origval#0| |newval#0|))) :qid |bitvecto.34:20| :skolemid |3275| :pattern ( (_module.__default.UpdateTopBits ($LS $ly@@383) |origval#0| |newval#0|)) )))
(assert (forall (($ly@@384 T@U) (|origval#0@@0| Int) (|newval#0@@0| Int) ) (!  (=> (= (type $ly@@384) LayerTypeType) (= (_module.__default.UpdateTopBits $ly@@384 |origval#0@@0| |newval#0@@0|) (_module.__default.UpdateTopBits $LZ |origval#0@@0| |newval#0@@0|))) :qid |bitvecto.34:20| :skolemid |3276| :pattern ( (_module.__default.UpdateTopBits (AsFuelBottom $ly@@384) |origval#0@@0| |newval#0@@0|)) )))
(assert  (=> true (forall (($ly@@385 T@U) (|origval#0@@1| Int) (|newval#0@@1| Int) ) (!  (=> (and (= (type $ly@@385) LayerTypeType) (or (|_module.__default.UpdateTopBits#canCall| |origval#0@@1| |newval#0@@1|) (and (_module.__default.isUInt32 |origval#0@@1|) (_module.__default.isUInt32 |newval#0@@1|)))) (_module.__default.isUInt32 (_module.__default.UpdateTopBits $ly@@385 |origval#0@@1| |newval#0@@1|))) :qid |bitvecto.34:20| :skolemid |3277| :pattern ( (_module.__default.UpdateTopBits $ly@@385 |origval#0@@1| |newval#0@@1|)) ))))
(assert (forall (($ly@@386 T@U) (|origval#0@@2| Int) (|newval#0@@2| Int) ) (!  (=> (= (type $ly@@386) LayerTypeType) (=> (and (_module.__default.isUInt32 |origval#0@@2|) (_module.__default.isUInt32 |newval#0@@2|)) (and (=> (|_module.__default.UpdateTopBits#requires| $ly@@386 |origval#0@@2| |newval#0@@2|) true) (=> true (|_module.__default.UpdateTopBits#requires| $ly@@386 |origval#0@@2| |newval#0@@2|))))) :qid |bitvecto.34:20| :skolemid |3278| :pattern ( (|_module.__default.UpdateTopBits#requires| $ly@@386 |origval#0@@2| |newval#0@@2|)) )))
(assert (= (type StartFuel__module._default.BitwiseMaskLow) LayerTypeType))
(assert  (=> true (forall (($ly@@387 T@U) (|origval#0@@3| Int) (|newval#0@@3| Int) ) (!  (=> (and (= (type $ly@@387) LayerTypeType) (or (|_module.__default.UpdateTopBits#canCall| |origval#0@@3| |newval#0@@3|) (and (_module.__default.isUInt32 |origval#0@@3|) (_module.__default.isUInt32 |newval#0@@3|)))) (and (and (and (|_module.__default.LeftShift#canCall| |newval#0@@3| (LitInt 16)) (|_module.__default.BitwiseMaskLow#canCall| |origval#0@@3| (LitInt 16))) (|_module.__default.BitwiseOr#canCall| (_module.__default.LeftShift |newval#0@@3| (LitInt 16)) (_module.__default.BitwiseMaskLow StartFuel__module._default.BitwiseMaskLow |origval#0@@3| (LitInt 16)))) (= (_module.__default.UpdateTopBits ($LS $ly@@387) |origval#0@@3| |newval#0@@3|) (_module.__default.BitwiseOr (_module.__default.LeftShift |newval#0@@3| (LitInt 16)) (_module.__default.BitwiseMaskLow StartFuel__module._default.BitwiseMaskLow |origval#0@@3| (LitInt 16)))))) :qid |bitvecto.34:20| :skolemid |3279| :pattern ( (_module.__default.UpdateTopBits ($LS $ly@@387) |origval#0@@3| |newval#0@@3|)) ))))
(assert  (=> true (forall (($ly@@388 T@U) (|origval#0@@4| Int) (|newval#0@@4| Int) ) (!  (=> (and (= (type $ly@@388) LayerTypeType) (or (|_module.__default.UpdateTopBits#canCall| (LitInt |origval#0@@4|) (LitInt |newval#0@@4|)) (and (_module.__default.isUInt32 |origval#0@@4|) (_module.__default.isUInt32 |newval#0@@4|)))) (and (and (and (|_module.__default.LeftShift#canCall| (LitInt |newval#0@@4|) (LitInt 16)) (|_module.__default.BitwiseMaskLow#canCall| (LitInt |origval#0@@4|) (LitInt 16))) (|_module.__default.BitwiseOr#canCall| (LitInt (_module.__default.LeftShift (LitInt |newval#0@@4|) (LitInt 16))) (_module.__default.BitwiseMaskLow StartFuel__module._default.BitwiseMaskLow (LitInt |origval#0@@4|) (LitInt 16)))) (= (_module.__default.UpdateTopBits ($LS $ly@@388) (LitInt |origval#0@@4|) (LitInt |newval#0@@4|)) (_module.__default.BitwiseOr (LitInt (_module.__default.LeftShift (LitInt |newval#0@@4|) (LitInt 16))) (_module.__default.BitwiseMaskLow StartFuel__module._default.BitwiseMaskLow (LitInt |origval#0@@4|) (LitInt 16)))))) :qid |bitvecto.34:20| :weight 3 :skolemid |3280| :pattern ( (_module.__default.UpdateTopBits ($LS $ly@@388) (LitInt |origval#0@@4|) (LitInt |newval#0@@4|))) ))))
(assert (forall ((arg0@@428 Int) (arg1@@183 Int) (arg2@@125 Int) (arg3@@76 Int) (arg4@@59 Int) (arg5@@47 Int) (arg6@@36 Int) (arg7@@22 Int) ) (! (= (type (|#_module.atoh_Type.atoh_c| arg0@@428 arg1@@183 arg2@@125 arg3@@76 arg4@@59 arg5@@47 arg6@@36 arg7@@22)) DatatypeTypeType) :qid |funType:#_module.atoh_Type.atoh_c| :pattern ( (|#_module.atoh_Type.atoh_c| arg0@@428 arg1@@183 arg2@@125 arg3@@76 arg4@@59 arg5@@47 arg6@@36 arg7@@22)) )))
(assert (forall ((|a#0#0#0@@0| Int) (|a#0#1#0@@0| Int) (|a#0#2#0@@0| Int) (|a#0#3#0| Int) (|a#0#4#0| Int) (|a#0#5#0| Int) (|a#0#6#0| Int) (|a#0#7#0| Int) ) (! (= (DatatypeCtorId (|#_module.atoh_Type.atoh_c| |a#0#0#0@@0| |a#0#1#0@@0| |a#0#2#0@@0| |a#0#3#0| |a#0#4#0| |a#0#5#0| |a#0#6#0| |a#0#7#0|)) |##_module.atoh_Type.atoh_c|) :qid |sha256sd.49:29| :skolemid |3281| :pattern ( (|#_module.atoh_Type.atoh_c| |a#0#0#0@@0| |a#0#1#0@@0| |a#0#2#0@@0| |a#0#3#0| |a#0#4#0| |a#0#5#0| |a#0#6#0| |a#0#7#0|)) )))
(assert (forall ((d@@12 T@U) ) (!  (=> (= (type d@@12) DatatypeTypeType) (and (=> (_module.atoh__Type.atoh__c_q d@@12) (= (DatatypeCtorId d@@12) |##_module.atoh_Type.atoh_c|)) (=> (= (DatatypeCtorId d@@12) |##_module.atoh_Type.atoh_c|) (_module.atoh__Type.atoh__c_q d@@12)))) :qid |unknown.0:0| :skolemid |3282| :pattern ( (_module.atoh__Type.atoh__c_q d@@12)) )))
(assert (forall ((d@@13 T@U) ) (!  (=> (and (= (type d@@13) DatatypeTypeType) (_module.atoh__Type.atoh__c_q d@@13)) (exists ((|a#1#0#0@@0| Int) (|a#1#1#0@@0| Int) (|a#1#2#0@@0| Int) (|a#1#3#0| Int) (|a#1#4#0| Int) (|a#1#5#0| Int) (|a#1#6#0| Int) (|a#1#7#0| Int) ) (! (= d@@13 (|#_module.atoh_Type.atoh_c| |a#1#0#0@@0| |a#1#1#0@@0| |a#1#2#0@@0| |a#1#3#0| |a#1#4#0| |a#1#5#0| |a#1#6#0| |a#1#7#0|)) :qid |sha256sd.49:29| :skolemid |3283| ))) :qid |unknown.0:0| :skolemid |3284| :pattern ( (_module.atoh__Type.atoh__c_q d@@13)) )))
(assert (forall ((|a#2#0#0@@0| Int) (|a#2#1#0@@0| Int) (|a#2#2#0@@0| Int) (|a#2#3#0| Int) (|a#2#4#0| Int) (|a#2#5#0| Int) (|a#2#6#0| Int) (|a#2#7#0| Int) ) (!  (and (=> ($Is (|#_module.atoh_Type.atoh_c| |a#2#0#0@@0| |a#2#1#0@@0| |a#2#2#0@@0| |a#2#3#0| |a#2#4#0| |a#2#5#0| |a#2#6#0| |a#2#7#0|) Tclass._module.atoh__Type) (and (and (and (and (and (and (and ($Is (int_2_U |a#2#0#0@@0|) Tclass._module.word) ($Is (int_2_U |a#2#1#0@@0|) Tclass._module.word)) ($Is (int_2_U |a#2#2#0@@0|) Tclass._module.word)) ($Is (int_2_U |a#2#3#0|) Tclass._module.word)) ($Is (int_2_U |a#2#4#0|) Tclass._module.word)) ($Is (int_2_U |a#2#5#0|) Tclass._module.word)) ($Is (int_2_U |a#2#6#0|) Tclass._module.word)) ($Is (int_2_U |a#2#7#0|) Tclass._module.word))) (=> (and (and (and (and (and (and (and ($Is (int_2_U |a#2#0#0@@0|) Tclass._module.word) ($Is (int_2_U |a#2#1#0@@0|) Tclass._module.word)) ($Is (int_2_U |a#2#2#0@@0|) Tclass._module.word)) ($Is (int_2_U |a#2#3#0|) Tclass._module.word)) ($Is (int_2_U |a#2#4#0|) Tclass._module.word)) ($Is (int_2_U |a#2#5#0|) Tclass._module.word)) ($Is (int_2_U |a#2#6#0|) Tclass._module.word)) ($Is (int_2_U |a#2#7#0|) Tclass._module.word)) ($Is (|#_module.atoh_Type.atoh_c| |a#2#0#0@@0| |a#2#1#0@@0| |a#2#2#0@@0| |a#2#3#0| |a#2#4#0| |a#2#5#0| |a#2#6#0| |a#2#7#0|) Tclass._module.atoh__Type))) :qid |sha256sd.49:29| :skolemid |3285| :pattern ( ($Is (|#_module.atoh_Type.atoh_c| |a#2#0#0@@0| |a#2#1#0@@0| |a#2#2#0@@0| |a#2#3#0| |a#2#4#0| |a#2#5#0| |a#2#6#0| |a#2#7#0|) Tclass._module.atoh__Type)) )))
(assert (forall ((|a#3#0#0@@0| Int) (|a#3#1#0@@0| Int) (|a#3#2#0@@0| Int) (|a#3#3#0| Int) (|a#3#4#0| Int) (|a#3#5#0| Int) (|a#3#6#0| Int) (|a#3#7#0| Int) ($h@@8 T@U) ) (!  (=> (and (= (type $h@@8) (MapType1Type refType)) ($IsGoodHeap $h@@8)) (and (=> ($IsAlloc (|#_module.atoh_Type.atoh_c| |a#3#0#0@@0| |a#3#1#0@@0| |a#3#2#0@@0| |a#3#3#0| |a#3#4#0| |a#3#5#0| |a#3#6#0| |a#3#7#0|) Tclass._module.atoh__Type $h@@8) (and (and (and (and (and (and (and ($IsAlloc (int_2_U |a#3#0#0@@0|) Tclass._module.word $h@@8) ($IsAlloc (int_2_U |a#3#1#0@@0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#2#0@@0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#3#0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#4#0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#5#0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#6#0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#7#0|) Tclass._module.word $h@@8))) (=> (and (and (and (and (and (and (and ($IsAlloc (int_2_U |a#3#0#0@@0|) Tclass._module.word $h@@8) ($IsAlloc (int_2_U |a#3#1#0@@0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#2#0@@0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#3#0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#4#0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#5#0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#6#0|) Tclass._module.word $h@@8)) ($IsAlloc (int_2_U |a#3#7#0|) Tclass._module.word $h@@8)) ($IsAlloc (|#_module.atoh_Type.atoh_c| |a#3#0#0@@0| |a#3#1#0@@0| |a#3#2#0@@0| |a#3#3#0| |a#3#4#0| |a#3#5#0| |a#3#6#0| |a#3#7#0|) Tclass._module.atoh__Type $h@@8)))) :qid |sha256sd.49:29| :skolemid |3286| :pattern ( ($IsAlloc (|#_module.atoh_Type.atoh_c| |a#3#0#0@@0| |a#3#1#0@@0| |a#3#2#0@@0| |a#3#3#0| |a#3#4#0| |a#3#5#0| |a#3#6#0| |a#3#7#0|) Tclass._module.atoh__Type $h@@8)) )))
(assert (forall ((|a#4#0#0@@0| Int) (|a#4#1#0@@0| Int) (|a#4#2#0@@0| Int) (|a#4#3#0| Int) (|a#4#4#0| Int) (|a#4#5#0| Int) (|a#4#6#0| Int) (|a#4#7#0| Int) ) (! (= (|#_module.atoh_Type.atoh_c| (LitInt |a#4#0#0@@0|) (LitInt |a#4#1#0@@0|) (LitInt |a#4#2#0@@0|) (LitInt |a#4#3#0|) (LitInt |a#4#4#0|) (LitInt |a#4#5#0|) (LitInt |a#4#6#0|) (LitInt |a#4#7#0|)) (Lit (|#_module.atoh_Type.atoh_c| |a#4#0#0@@0| |a#4#1#0@@0| |a#4#2#0@@0| |a#4#3#0| |a#4#4#0| |a#4#5#0| |a#4#6#0| |a#4#7#0|))) :qid |sha256sd.49:29| :skolemid |3287| :pattern ( (|#_module.atoh_Type.atoh_c| (LitInt |a#4#0#0@@0|) (LitInt |a#4#1#0@@0|) (LitInt |a#4#2#0@@0|) (LitInt |a#4#3#0|) (LitInt |a#4#4#0|) (LitInt |a#4#5#0|) (LitInt |a#4#6#0|) (LitInt |a#4#7#0|))) )))
(assert (forall ((|a#5#0#0@@0| Int) (|a#5#1#0@@0| Int) (|a#5#2#0@@0| Int) (|a#5#3#0| Int) (|a#5#4#0| Int) (|a#5#5#0| Int) (|a#5#6#0| Int) (|a#5#7#0| Int) ) (! (= (_module.atoh__Type.a (|#_module.atoh_Type.atoh_c| |a#5#0#0@@0| |a#5#1#0@@0| |a#5#2#0@@0| |a#5#3#0| |a#5#4#0| |a#5#5#0| |a#5#6#0| |a#5#7#0|)) |a#5#0#0@@0|) :qid |sha256sd.49:29| :skolemid |3288| :pattern ( (|#_module.atoh_Type.atoh_c| |a#5#0#0@@0| |a#5#1#0@@0| |a#5#2#0@@0| |a#5#3#0| |a#5#4#0| |a#5#5#0| |a#5#6#0| |a#5#7#0|)) )))
(assert (forall ((|a#6#0#0@@0| Int) (|a#6#1#0@@0| Int) (|a#6#2#0@@0| Int) (|a#6#3#0| Int) (|a#6#4#0| Int) (|a#6#5#0| Int) (|a#6#6#0| Int) (|a#6#7#0| Int) ) (! (= (_module.atoh__Type.b (|#_module.atoh_Type.atoh_c| |a#6#0#0@@0| |a#6#1#0@@0| |a#6#2#0@@0| |a#6#3#0| |a#6#4#0| |a#6#5#0| |a#6#6#0| |a#6#7#0|)) |a#6#1#0@@0|) :qid |sha256sd.49:29| :skolemid |3289| :pattern ( (|#_module.atoh_Type.atoh_c| |a#6#0#0@@0| |a#6#1#0@@0| |a#6#2#0@@0| |a#6#3#0| |a#6#4#0| |a#6#5#0| |a#6#6#0| |a#6#7#0|)) )))
(assert (forall ((|a#7#0#0@@0| Int) (|a#7#1#0@@0| Int) (|a#7#2#0@@0| Int) (|a#7#3#0| Int) (|a#7#4#0| Int) (|a#7#5#0| Int) (|a#7#6#0| Int) (|a#7#7#0| Int) ) (! (= (_module.atoh__Type.c (|#_module.atoh_Type.atoh_c| |a#7#0#0@@0| |a#7#1#0@@0| |a#7#2#0@@0| |a#7#3#0| |a#7#4#0| |a#7#5#0| |a#7#6#0| |a#7#7#0|)) |a#7#2#0@@0|) :qid |sha256sd.49:29| :skolemid |3290| :pattern ( (|#_module.atoh_Type.atoh_c| |a#7#0#0@@0| |a#7#1#0@@0| |a#7#2#0@@0| |a#7#3#0| |a#7#4#0| |a#7#5#0| |a#7#6#0| |a#7#7#0|)) )))
(assert (forall ((|a#8#0#0@@0| Int) (|a#8#1#0@@0| Int) (|a#8#2#0@@0| Int) (|a#8#3#0| Int) (|a#8#4#0| Int) (|a#8#5#0| Int) (|a#8#6#0| Int) (|a#8#7#0| Int) ) (! (= (_module.atoh__Type.d (|#_module.atoh_Type.atoh_c| |a#8#0#0@@0| |a#8#1#0@@0| |a#8#2#0@@0| |a#8#3#0| |a#8#4#0| |a#8#5#0| |a#8#6#0| |a#8#7#0|)) |a#8#3#0|) :qid |sha256sd.49:29| :skolemid |3291| :pattern ( (|#_module.atoh_Type.atoh_c| |a#8#0#0@@0| |a#8#1#0@@0| |a#8#2#0@@0| |a#8#3#0| |a#8#4#0| |a#8#5#0| |a#8#6#0| |a#8#7#0|)) )))
(assert (forall ((|a#9#0#0@@0| Int) (|a#9#1#0@@0| Int) (|a#9#2#0@@0| Int) (|a#9#3#0| Int) (|a#9#4#0| Int) (|a#9#5#0| Int) (|a#9#6#0| Int) (|a#9#7#0| Int) ) (! (= (_module.atoh__Type.e (|#_module.atoh_Type.atoh_c| |a#9#0#0@@0| |a#9#1#0@@0| |a#9#2#0@@0| |a#9#3#0| |a#9#4#0| |a#9#5#0| |a#9#6#0| |a#9#7#0|)) |a#9#4#0|) :qid |sha256sd.49:29| :skolemid |3292| :pattern ( (|#_module.atoh_Type.atoh_c| |a#9#0#0@@0| |a#9#1#0@@0| |a#9#2#0@@0| |a#9#3#0| |a#9#4#0| |a#9#5#0| |a#9#6#0| |a#9#7#0|)) )))
(assert (forall ((|a#10#0#0@@0| Int) (|a#10#1#0@@0| Int) (|a#10#2#0@@0| Int) (|a#10#3#0| Int) (|a#10#4#0| Int) (|a#10#5#0| Int) (|a#10#6#0| Int) (|a#10#7#0| Int) ) (! (= (_module.atoh__Type.f (|#_module.atoh_Type.atoh_c| |a#10#0#0@@0| |a#10#1#0@@0| |a#10#2#0@@0| |a#10#3#0| |a#10#4#0| |a#10#5#0| |a#10#6#0| |a#10#7#0|)) |a#10#5#0|) :qid |sha256sd.49:29| :skolemid |3293| :pattern ( (|#_module.atoh_Type.atoh_c| |a#10#0#0@@0| |a#10#1#0@@0| |a#10#2#0@@0| |a#10#3#0| |a#10#4#0| |a#10#5#0| |a#10#6#0| |a#10#7#0|)) )))
(assert (forall ((|a#11#0#0@@0| Int) (|a#11#1#0@@0| Int) (|a#11#2#0| Int) (|a#11#3#0| Int) (|a#11#4#0| Int) (|a#11#5#0| Int) (|a#11#6#0| Int) (|a#11#7#0| Int) ) (! (= (_module.atoh__Type.g (|#_module.atoh_Type.atoh_c| |a#11#0#0@@0| |a#11#1#0@@0| |a#11#2#0| |a#11#3#0| |a#11#4#0| |a#11#5#0| |a#11#6#0| |a#11#7#0|)) |a#11#6#0|) :qid |sha256sd.49:29| :skolemid |3294| :pattern ( (|#_module.atoh_Type.atoh_c| |a#11#0#0@@0| |a#11#1#0@@0| |a#11#2#0| |a#11#3#0| |a#11#4#0| |a#11#5#0| |a#11#6#0| |a#11#7#0|)) )))
(assert (forall ((|a#12#0#0@@0| Int) (|a#12#1#0@@0| Int) (|a#12#2#0| Int) (|a#12#3#0| Int) (|a#12#4#0| Int) (|a#12#5#0| Int) (|a#12#6#0| Int) (|a#12#7#0| Int) ) (! (= (_module.atoh__Type.h (|#_module.atoh_Type.atoh_c| |a#12#0#0@@0| |a#12#1#0@@0| |a#12#2#0| |a#12#3#0| |a#12#4#0| |a#12#5#0| |a#12#6#0| |a#12#7#0|)) |a#12#7#0|) :qid |sha256sd.49:29| :skolemid |3295| :pattern ( (|#_module.atoh_Type.atoh_c| |a#12#0#0@@0| |a#12#1#0@@0| |a#12#2#0| |a#12#3#0| |a#12#4#0| |a#12#5#0| |a#12#6#0| |a#12#7#0|)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) (|$IsA#_module.atoh__Type| d@@14)) (_module.atoh__Type.atoh__c_q d@@14)) :qid |unknown.0:0| :skolemid |3296| :pattern ( (|$IsA#_module.atoh__Type| d@@14)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) ($Is d@@15 Tclass._module.atoh__Type)) (_module.atoh__Type.atoh__c_q d@@15)) :qid |unknown.0:0| :skolemid |3297| :pattern ( (_module.atoh__Type.atoh__c_q d@@15) ($Is d@@15 Tclass._module.atoh__Type)) )))
(assert (forall ((|a#13#0#0@@0| T@U) (|a#13#1#0@@0| T@U) (|a#13#2#0| T@U) (|a#13#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#13#0#0@@0|) (SeqType BoxType)) (= (type |a#13#1#0@@0|) (SeqType BoxType))) (= (type |a#13#2#0|) (SeqType BoxType))) (= (type |a#13#3#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#_module.SHA256Trace.SHA256Trace_c| |a#13#0#0@@0| |a#13#1#0@@0| |a#13#2#0| |a#13#3#0|)) |##_module.SHA256Trace.SHA256Trace_c|)) :qid |sha256sd.50:38| :skolemid |3298| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| |a#13#0#0@@0| |a#13#1#0@@0| |a#13#2#0| |a#13#3#0|)) )))
(assert (forall ((d@@16 T@U) ) (!  (=> (= (type d@@16) DatatypeTypeType) (and (=> (_module.SHA256Trace.SHA256Trace__c_q d@@16) (= (DatatypeCtorId d@@16) |##_module.SHA256Trace.SHA256Trace_c|)) (=> (= (DatatypeCtorId d@@16) |##_module.SHA256Trace.SHA256Trace_c|) (_module.SHA256Trace.SHA256Trace__c_q d@@16)))) :qid |unknown.0:0| :skolemid |3299| :pattern ( (_module.SHA256Trace.SHA256Trace__c_q d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) (_module.SHA256Trace.SHA256Trace__c_q d@@17)) (exists ((|a#14#0#0@@0| T@U) (|a#14#1#0@@0| T@U) (|a#14#2#0| T@U) (|a#14#3#0| T@U) ) (!  (and (and (and (and (= (type |a#14#0#0@@0|) (SeqType BoxType)) (= (type |a#14#1#0@@0|) (SeqType BoxType))) (= (type |a#14#2#0|) (SeqType BoxType))) (= (type |a#14#3#0|) (SeqType BoxType))) (= d@@17 (|#_module.SHA256Trace.SHA256Trace_c| |a#14#0#0@@0| |a#14#1#0@@0| |a#14#2#0| |a#14#3#0|))) :qid |sha256sd.50:38| :skolemid |3300| :no-pattern (type |a#14#0#0@@0|) :no-pattern (type |a#14#1#0@@0|) :no-pattern (type |a#14#2#0|) :no-pattern (type |a#14#3#0|) :no-pattern (U_2_int |a#14#0#0@@0|) :no-pattern (U_2_bool |a#14#0#0@@0|) :no-pattern (U_2_int |a#14#1#0@@0|) :no-pattern (U_2_bool |a#14#1#0@@0|) :no-pattern (U_2_int |a#14#2#0|) :no-pattern (U_2_bool |a#14#2#0|) :no-pattern (U_2_int |a#14#3#0|) :no-pattern (U_2_bool |a#14#3#0|) ))) :qid |unknown.0:0| :skolemid |3301| :pattern ( (_module.SHA256Trace.SHA256Trace__c_q d@@17)) )))
(assert (forall ((|a#15#0#0@@0| T@U) (|a#15#1#0@@0| T@U) (|a#15#2#0| T@U) (|a#15#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#15#0#0@@0|) (SeqType BoxType)) (= (type |a#15#1#0@@0|) (SeqType BoxType))) (= (type |a#15#2#0|) (SeqType BoxType))) (= (type |a#15#3#0|) (SeqType BoxType))) (and (=> ($Is (|#_module.SHA256Trace.SHA256Trace_c| |a#15#0#0@@0| |a#15#1#0@@0| |a#15#2#0| |a#15#3#0|) Tclass._module.SHA256Trace) (and (and (and ($Is |a#15#0#0@@0| (TSeq (TSeq Tclass._module.word))) ($Is |a#15#1#0@@0| (TSeq (TSeq Tclass._module.word)))) ($Is |a#15#2#0| (TSeq (TSeq Tclass._module.word)))) ($Is |a#15#3#0| (TSeq (TSeq Tclass._module.atoh__Type))))) (=> (and (and (and ($Is |a#15#0#0@@0| (TSeq (TSeq Tclass._module.word))) ($Is |a#15#1#0@@0| (TSeq (TSeq Tclass._module.word)))) ($Is |a#15#2#0| (TSeq (TSeq Tclass._module.word)))) ($Is |a#15#3#0| (TSeq (TSeq Tclass._module.atoh__Type)))) ($Is (|#_module.SHA256Trace.SHA256Trace_c| |a#15#0#0@@0| |a#15#1#0@@0| |a#15#2#0| |a#15#3#0|) Tclass._module.SHA256Trace)))) :qid |sha256sd.50:38| :skolemid |3302| :pattern ( ($Is (|#_module.SHA256Trace.SHA256Trace_c| |a#15#0#0@@0| |a#15#1#0@@0| |a#15#2#0| |a#15#3#0|) Tclass._module.SHA256Trace)) )))
(assert (forall ((|a#16#0#0@@0| T@U) (|a#16#1#0@@0| T@U) (|a#16#2#0| T@U) (|a#16#3#0| T@U) ($h@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type |a#16#0#0@@0|) (SeqType BoxType)) (= (type |a#16#1#0@@0|) (SeqType BoxType))) (= (type |a#16#2#0|) (SeqType BoxType))) (= (type |a#16#3#0|) (SeqType BoxType))) (= (type $h@@9) (MapType1Type refType))) ($IsGoodHeap $h@@9)) (and (=> ($IsAlloc (|#_module.SHA256Trace.SHA256Trace_c| |a#16#0#0@@0| |a#16#1#0@@0| |a#16#2#0| |a#16#3#0|) Tclass._module.SHA256Trace $h@@9) (and (and (and ($IsAlloc |a#16#0#0@@0| (TSeq (TSeq Tclass._module.word)) $h@@9) ($IsAlloc |a#16#1#0@@0| (TSeq (TSeq Tclass._module.word)) $h@@9)) ($IsAlloc |a#16#2#0| (TSeq (TSeq Tclass._module.word)) $h@@9)) ($IsAlloc |a#16#3#0| (TSeq (TSeq Tclass._module.atoh__Type)) $h@@9))) (=> (and (and (and ($IsAlloc |a#16#0#0@@0| (TSeq (TSeq Tclass._module.word)) $h@@9) ($IsAlloc |a#16#1#0@@0| (TSeq (TSeq Tclass._module.word)) $h@@9)) ($IsAlloc |a#16#2#0| (TSeq (TSeq Tclass._module.word)) $h@@9)) ($IsAlloc |a#16#3#0| (TSeq (TSeq Tclass._module.atoh__Type)) $h@@9)) ($IsAlloc (|#_module.SHA256Trace.SHA256Trace_c| |a#16#0#0@@0| |a#16#1#0@@0| |a#16#2#0| |a#16#3#0|) Tclass._module.SHA256Trace $h@@9)))) :qid |sha256sd.50:38| :skolemid |3303| :pattern ( ($IsAlloc (|#_module.SHA256Trace.SHA256Trace_c| |a#16#0#0@@0| |a#16#1#0@@0| |a#16#2#0| |a#16#3#0|) Tclass._module.SHA256Trace $h@@9)) )))
(assert (forall ((|a#17#0#0@@0| T@U) (|a#17#1#0@@0| T@U) (|a#17#2#0| T@U) (|a#17#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (type |a#17#1#0@@0|) (SeqType BoxType))) (= (type |a#17#2#0|) (SeqType BoxType))) (= (type |a#17#3#0|) (SeqType BoxType))) (= (|#_module.SHA256Trace.SHA256Trace_c| (Lit |a#17#0#0@@0|) (Lit |a#17#1#0@@0|) (Lit |a#17#2#0|) (Lit |a#17#3#0|)) (Lit (|#_module.SHA256Trace.SHA256Trace_c| |a#17#0#0@@0| |a#17#1#0@@0| |a#17#2#0| |a#17#3#0|)))) :qid |sha256sd.50:38| :skolemid |3304| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| (Lit |a#17#0#0@@0|) (Lit |a#17#1#0@@0|) (Lit |a#17#2#0|) (Lit |a#17#3#0|))) )))
(assert (forall ((|a#18#0#0@@0| T@U) (|a#18#1#0@@0| T@U) (|a#18#2#0| T@U) (|a#18#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= (type |a#18#1#0@@0|) (SeqType BoxType))) (= (type |a#18#2#0|) (SeqType BoxType))) (= (type |a#18#3#0|) (SeqType BoxType))) (= (_module.SHA256Trace.M (|#_module.SHA256Trace.SHA256Trace_c| |a#18#0#0@@0| |a#18#1#0@@0| |a#18#2#0| |a#18#3#0|)) |a#18#0#0@@0|)) :qid |sha256sd.50:38| :skolemid |3305| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| |a#18#0#0@@0| |a#18#1#0@@0| |a#18#2#0| |a#18#3#0|)) )))
(assert (forall ((|a#19#0#0@@0| T@U) (|a#19#1#0@@0| T@U) (|a#19#2#0| T@U) (|a#19#3#0| T@U) (i@@33 Int) ) (!  (=> (and (and (and (and (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= (type |a#19#1#0@@0|) (SeqType BoxType))) (= (type |a#19#2#0|) (SeqType BoxType))) (= (type |a#19#3#0|) (SeqType BoxType))) (and (<= 0 i@@33) (< i@@33 (|Seq#Length| |a#19#0#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#19#0#0@@0| i@@33))) (DtRank (|#_module.SHA256Trace.SHA256Trace_c| |a#19#0#0@@0| |a#19#1#0@@0| |a#19#2#0| |a#19#3#0|)))) :qid |sha256sd.50:38| :skolemid |3306| :pattern ( (|Seq#Index| |a#19#0#0@@0| i@@33) (|#_module.SHA256Trace.SHA256Trace_c| |a#19#0#0@@0| |a#19#1#0@@0| |a#19#2#0| |a#19#3#0|)) )))
(assert (forall ((|a#20#0#0@@0| T@U) (|a#20#1#0@@0| T@U) (|a#20#2#0@@0| T@U) (|a#20#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#20#0#0@@0|) (SeqType BoxType)) (= (type |a#20#1#0@@0|) (SeqType BoxType))) (= (type |a#20#2#0@@0|) (SeqType BoxType))) (= (type |a#20#3#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#20#0#0@@0|) (DtRank (|#_module.SHA256Trace.SHA256Trace_c| |a#20#0#0@@0| |a#20#1#0@@0| |a#20#2#0@@0| |a#20#3#0|)))) :qid |sha256sd.50:38| :skolemid |3307| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| |a#20#0#0@@0| |a#20#1#0@@0| |a#20#2#0@@0| |a#20#3#0|)) )))
(assert (forall ((|a#21#0#0@@0| T@U) (|a#21#1#0@@0| T@U) (|a#21#2#0@@0| T@U) (|a#21#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#21#0#0@@0|) (SeqType BoxType)) (= (type |a#21#1#0@@0|) (SeqType BoxType))) (= (type |a#21#2#0@@0|) (SeqType BoxType))) (= (type |a#21#3#0|) (SeqType BoxType))) (= (_module.SHA256Trace.H (|#_module.SHA256Trace.SHA256Trace_c| |a#21#0#0@@0| |a#21#1#0@@0| |a#21#2#0@@0| |a#21#3#0|)) |a#21#1#0@@0|)) :qid |sha256sd.50:38| :skolemid |3308| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| |a#21#0#0@@0| |a#21#1#0@@0| |a#21#2#0@@0| |a#21#3#0|)) )))
(assert (forall ((|a#22#0#0@@0| T@U) (|a#22#1#0@@0| T@U) (|a#22#2#0@@0| T@U) (|a#22#3#0| T@U) (i@@34 Int) ) (!  (=> (and (and (and (and (= (type |a#22#0#0@@0|) (SeqType BoxType)) (= (type |a#22#1#0@@0|) (SeqType BoxType))) (= (type |a#22#2#0@@0|) (SeqType BoxType))) (= (type |a#22#3#0|) (SeqType BoxType))) (and (<= 0 i@@34) (< i@@34 (|Seq#Length| |a#22#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#22#1#0@@0| i@@34))) (DtRank (|#_module.SHA256Trace.SHA256Trace_c| |a#22#0#0@@0| |a#22#1#0@@0| |a#22#2#0@@0| |a#22#3#0|)))) :qid |sha256sd.50:38| :skolemid |3309| :pattern ( (|Seq#Index| |a#22#1#0@@0| i@@34) (|#_module.SHA256Trace.SHA256Trace_c| |a#22#0#0@@0| |a#22#1#0@@0| |a#22#2#0@@0| |a#22#3#0|)) )))
(assert (forall ((|a#23#0#0@@0| T@U) (|a#23#1#0@@0| T@U) (|a#23#2#0@@0| T@U) (|a#23#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#23#0#0@@0|) (SeqType BoxType)) (= (type |a#23#1#0@@0|) (SeqType BoxType))) (= (type |a#23#2#0@@0|) (SeqType BoxType))) (= (type |a#23#3#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#23#1#0@@0|) (DtRank (|#_module.SHA256Trace.SHA256Trace_c| |a#23#0#0@@0| |a#23#1#0@@0| |a#23#2#0@@0| |a#23#3#0|)))) :qid |sha256sd.50:38| :skolemid |3310| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| |a#23#0#0@@0| |a#23#1#0@@0| |a#23#2#0@@0| |a#23#3#0|)) )))
(assert (forall ((|a#24#0#0@@0| T@U) (|a#24#1#0@@0| T@U) (|a#24#2#0@@0| T@U) (|a#24#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#24#0#0@@0|) (SeqType BoxType)) (= (type |a#24#1#0@@0|) (SeqType BoxType))) (= (type |a#24#2#0@@0|) (SeqType BoxType))) (= (type |a#24#3#0|) (SeqType BoxType))) (= (_module.SHA256Trace.W (|#_module.SHA256Trace.SHA256Trace_c| |a#24#0#0@@0| |a#24#1#0@@0| |a#24#2#0@@0| |a#24#3#0|)) |a#24#2#0@@0|)) :qid |sha256sd.50:38| :skolemid |3311| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| |a#24#0#0@@0| |a#24#1#0@@0| |a#24#2#0@@0| |a#24#3#0|)) )))
(assert (forall ((|a#25#0#0@@0| T@U) (|a#25#1#0@@0| T@U) (|a#25#2#0@@0| T@U) (|a#25#3#0| T@U) (i@@35 Int) ) (!  (=> (and (and (and (and (= (type |a#25#0#0@@0|) (SeqType BoxType)) (= (type |a#25#1#0@@0|) (SeqType BoxType))) (= (type |a#25#2#0@@0|) (SeqType BoxType))) (= (type |a#25#3#0|) (SeqType BoxType))) (and (<= 0 i@@35) (< i@@35 (|Seq#Length| |a#25#2#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#25#2#0@@0| i@@35))) (DtRank (|#_module.SHA256Trace.SHA256Trace_c| |a#25#0#0@@0| |a#25#1#0@@0| |a#25#2#0@@0| |a#25#3#0|)))) :qid |sha256sd.50:38| :skolemid |3312| :pattern ( (|Seq#Index| |a#25#2#0@@0| i@@35) (|#_module.SHA256Trace.SHA256Trace_c| |a#25#0#0@@0| |a#25#1#0@@0| |a#25#2#0@@0| |a#25#3#0|)) )))
(assert (forall ((|a#26#0#0@@0| T@U) (|a#26#1#0@@0| T@U) (|a#26#2#0@@0| T@U) (|a#26#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#26#0#0@@0|) (SeqType BoxType)) (= (type |a#26#1#0@@0|) (SeqType BoxType))) (= (type |a#26#2#0@@0|) (SeqType BoxType))) (= (type |a#26#3#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#26#2#0@@0|) (DtRank (|#_module.SHA256Trace.SHA256Trace_c| |a#26#0#0@@0| |a#26#1#0@@0| |a#26#2#0@@0| |a#26#3#0|)))) :qid |sha256sd.50:38| :skolemid |3313| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| |a#26#0#0@@0| |a#26#1#0@@0| |a#26#2#0@@0| |a#26#3#0|)) )))
(assert (forall ((|a#27#0#0@@0| T@U) (|a#27#1#0@@0| T@U) (|a#27#2#0@@0| T@U) (|a#27#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#27#0#0@@0|) (SeqType BoxType)) (= (type |a#27#1#0@@0|) (SeqType BoxType))) (= (type |a#27#2#0@@0|) (SeqType BoxType))) (= (type |a#27#3#0|) (SeqType BoxType))) (= (_module.SHA256Trace.atoh (|#_module.SHA256Trace.SHA256Trace_c| |a#27#0#0@@0| |a#27#1#0@@0| |a#27#2#0@@0| |a#27#3#0|)) |a#27#3#0|)) :qid |sha256sd.50:38| :skolemid |3314| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| |a#27#0#0@@0| |a#27#1#0@@0| |a#27#2#0@@0| |a#27#3#0|)) )))
(assert (forall ((|a#28#0#0@@0| T@U) (|a#28#1#0@@0| T@U) (|a#28#2#0@@0| T@U) (|a#28#3#0| T@U) (i@@36 Int) ) (!  (=> (and (and (and (and (= (type |a#28#0#0@@0|) (SeqType BoxType)) (= (type |a#28#1#0@@0|) (SeqType BoxType))) (= (type |a#28#2#0@@0|) (SeqType BoxType))) (= (type |a#28#3#0|) (SeqType BoxType))) (and (<= 0 i@@36) (< i@@36 (|Seq#Length| |a#28#3#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#28#3#0| i@@36))) (DtRank (|#_module.SHA256Trace.SHA256Trace_c| |a#28#0#0@@0| |a#28#1#0@@0| |a#28#2#0@@0| |a#28#3#0|)))) :qid |sha256sd.50:38| :skolemid |3315| :pattern ( (|Seq#Index| |a#28#3#0| i@@36) (|#_module.SHA256Trace.SHA256Trace_c| |a#28#0#0@@0| |a#28#1#0@@0| |a#28#2#0@@0| |a#28#3#0|)) )))
(assert (forall ((|a#29#0#0@@0| T@U) (|a#29#1#0@@0| T@U) (|a#29#2#0@@0| T@U) (|a#29#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#29#0#0@@0|) (SeqType BoxType)) (= (type |a#29#1#0@@0|) (SeqType BoxType))) (= (type |a#29#2#0@@0|) (SeqType BoxType))) (= (type |a#29#3#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#29#3#0|) (DtRank (|#_module.SHA256Trace.SHA256Trace_c| |a#29#0#0@@0| |a#29#1#0@@0| |a#29#2#0@@0| |a#29#3#0|)))) :qid |sha256sd.50:38| :skolemid |3316| :pattern ( (|#_module.SHA256Trace.SHA256Trace_c| |a#29#0#0@@0| |a#29#1#0@@0| |a#29#2#0@@0| |a#29#3#0|)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (and (= (type d@@18) DatatypeTypeType) (|$IsA#_module.SHA256Trace| d@@18)) (_module.SHA256Trace.SHA256Trace__c_q d@@18)) :qid |unknown.0:0| :skolemid |3317| :pattern ( (|$IsA#_module.SHA256Trace| d@@18)) )))
(assert (forall ((d@@19 T@U) ) (!  (=> (and (= (type d@@19) DatatypeTypeType) ($Is d@@19 Tclass._module.SHA256Trace)) (_module.SHA256Trace.SHA256Trace__c_q d@@19)) :qid |unknown.0:0| :skolemid |3318| :pattern ( (_module.SHA256Trace.SHA256Trace__c_q d@@19) ($Is d@@19 Tclass._module.SHA256Trace)) )))
(assert (forall ((|i#0@@73| T@U) ) (!  (=> (= (type |i#0@@73|) intType) (and (=> ($Is |i#0@@73| Tclass._module.byte) (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@73|)) (INTERNAL_lt_boogie (U_2_int |i#0@@73|) 256))) (=> (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@73|)) (INTERNAL_lt_boogie (U_2_int |i#0@@73|) 256)) ($Is |i#0@@73| Tclass._module.byte)))) :qid |unknown.0:0| :skolemid |3319| :pattern ( ($Is |i#0@@73| Tclass._module.byte)) )))
(assert (forall ((|i#0@@74| T@U) ($h@@10 T@U) ) (!  (=> (and (= (type |i#0@@74|) intType) (= (type $h@@10) (MapType1Type refType))) ($IsAlloc |i#0@@74| Tclass._module.byte $h@@10)) :qid |unknown.0:0| :skolemid |3320| :pattern ( ($IsAlloc |i#0@@74| Tclass._module.byte $h@@10)) )))
(assert (forall ((|i#0@@75| T@U) ) (!  (=> (= (type |i#0@@75|) intType) (and (=> ($Is |i#0@@75| Tclass._module.uint64) (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@75|)) (INTERNAL_lt_boogie (U_2_int |i#0@@75|) 18446744073709551616))) (=> (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@75|)) (INTERNAL_lt_boogie (U_2_int |i#0@@75|) 18446744073709551616)) ($Is |i#0@@75| Tclass._module.uint64)))) :qid |unknown.0:0| :skolemid |3321| :pattern ( ($Is |i#0@@75| Tclass._module.uint64)) )))
(assert (forall ((|i#0@@76| T@U) ($h@@11 T@U) ) (!  (=> (and (= (type |i#0@@76|) intType) (= (type $h@@11) (MapType1Type refType))) ($IsAlloc |i#0@@76| Tclass._module.uint64 $h@@11)) :qid |unknown.0:0| :skolemid |3322| :pattern ( ($IsAlloc |i#0@@76| Tclass._module.uint64 $h@@11)) )))
(assert (= (DatatypeCtorId |#_module.ARMReg.R0|) |##_module.ARMReg.R0|))
(assert (forall ((d@@20 T@U) ) (!  (=> (= (type d@@20) DatatypeTypeType) (and (=> (_module.ARMReg.R0_q d@@20) (= (DatatypeCtorId d@@20) |##_module.ARMReg.R0|)) (=> (= (DatatypeCtorId d@@20) |##_module.ARMReg.R0|) (_module.ARMReg.R0_q d@@20)))) :qid |unknown.0:0| :skolemid |3323| :pattern ( (_module.ARMReg.R0_q d@@20)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) (_module.ARMReg.R0_q d@@21)) (= d@@21 |#_module.ARMReg.R0|)) :qid |unknown.0:0| :skolemid |3324| :pattern ( (_module.ARMReg.R0_q d@@21)) )))
(assert ($Is |#_module.ARMReg.R0| Tclass._module.ARMReg))
(assert (forall (($h@@12 T@U) ) (!  (=> (and (= (type $h@@12) (MapType1Type refType)) ($IsGoodHeap $h@@12)) ($IsAlloc |#_module.ARMReg.R0| Tclass._module.ARMReg $h@@12)) :qid |DafnyPre.405:12| :skolemid |3325| :pattern ( ($IsAlloc |#_module.ARMReg.R0| Tclass._module.ARMReg $h@@12)) )))
(assert (= |#_module.ARMReg.R0| (Lit |#_module.ARMReg.R0|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R1|) |##_module.ARMReg.R1|))
(assert (forall ((d@@22 T@U) ) (!  (=> (= (type d@@22) DatatypeTypeType) (and (=> (_module.ARMReg.R1_q d@@22) (= (DatatypeCtorId d@@22) |##_module.ARMReg.R1|)) (=> (= (DatatypeCtorId d@@22) |##_module.ARMReg.R1|) (_module.ARMReg.R1_q d@@22)))) :qid |unknown.0:0| :skolemid |3326| :pattern ( (_module.ARMReg.R1_q d@@22)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (and (= (type d@@23) DatatypeTypeType) (_module.ARMReg.R1_q d@@23)) (= d@@23 |#_module.ARMReg.R1|)) :qid |unknown.0:0| :skolemid |3327| :pattern ( (_module.ARMReg.R1_q d@@23)) )))
(assert ($Is |#_module.ARMReg.R1| Tclass._module.ARMReg))
(assert (forall (($h@@13 T@U) ) (!  (=> (and (= (type $h@@13) (MapType1Type refType)) ($IsGoodHeap $h@@13)) ($IsAlloc |#_module.ARMReg.R1| Tclass._module.ARMReg $h@@13)) :qid |DafnyPre.405:12| :skolemid |3328| :pattern ( ($IsAlloc |#_module.ARMReg.R1| Tclass._module.ARMReg $h@@13)) )))
(assert (= |#_module.ARMReg.R1| (Lit |#_module.ARMReg.R1|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R2|) |##_module.ARMReg.R2|))
(assert (forall ((d@@24 T@U) ) (!  (=> (= (type d@@24) DatatypeTypeType) (and (=> (_module.ARMReg.R2_q d@@24) (= (DatatypeCtorId d@@24) |##_module.ARMReg.R2|)) (=> (= (DatatypeCtorId d@@24) |##_module.ARMReg.R2|) (_module.ARMReg.R2_q d@@24)))) :qid |unknown.0:0| :skolemid |3329| :pattern ( (_module.ARMReg.R2_q d@@24)) )))
(assert (forall ((d@@25 T@U) ) (!  (=> (and (= (type d@@25) DatatypeTypeType) (_module.ARMReg.R2_q d@@25)) (= d@@25 |#_module.ARMReg.R2|)) :qid |unknown.0:0| :skolemid |3330| :pattern ( (_module.ARMReg.R2_q d@@25)) )))
(assert ($Is |#_module.ARMReg.R2| Tclass._module.ARMReg))
(assert (forall (($h@@14 T@U) ) (!  (=> (and (= (type $h@@14) (MapType1Type refType)) ($IsGoodHeap $h@@14)) ($IsAlloc |#_module.ARMReg.R2| Tclass._module.ARMReg $h@@14)) :qid |DafnyPre.405:12| :skolemid |3331| :pattern ( ($IsAlloc |#_module.ARMReg.R2| Tclass._module.ARMReg $h@@14)) )))
(assert (= |#_module.ARMReg.R2| (Lit |#_module.ARMReg.R2|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R3|) |##_module.ARMReg.R3|))
(assert (forall ((d@@26 T@U) ) (!  (=> (= (type d@@26) DatatypeTypeType) (and (=> (_module.ARMReg.R3_q d@@26) (= (DatatypeCtorId d@@26) |##_module.ARMReg.R3|)) (=> (= (DatatypeCtorId d@@26) |##_module.ARMReg.R3|) (_module.ARMReg.R3_q d@@26)))) :qid |unknown.0:0| :skolemid |3332| :pattern ( (_module.ARMReg.R3_q d@@26)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (and (= (type d@@27) DatatypeTypeType) (_module.ARMReg.R3_q d@@27)) (= d@@27 |#_module.ARMReg.R3|)) :qid |unknown.0:0| :skolemid |3333| :pattern ( (_module.ARMReg.R3_q d@@27)) )))
(assert ($Is |#_module.ARMReg.R3| Tclass._module.ARMReg))
(assert (forall (($h@@15 T@U) ) (!  (=> (and (= (type $h@@15) (MapType1Type refType)) ($IsGoodHeap $h@@15)) ($IsAlloc |#_module.ARMReg.R3| Tclass._module.ARMReg $h@@15)) :qid |DafnyPre.405:12| :skolemid |3334| :pattern ( ($IsAlloc |#_module.ARMReg.R3| Tclass._module.ARMReg $h@@15)) )))
(assert (= |#_module.ARMReg.R3| (Lit |#_module.ARMReg.R3|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R4|) |##_module.ARMReg.R4|))
(assert (forall ((d@@28 T@U) ) (!  (=> (= (type d@@28) DatatypeTypeType) (and (=> (_module.ARMReg.R4_q d@@28) (= (DatatypeCtorId d@@28) |##_module.ARMReg.R4|)) (=> (= (DatatypeCtorId d@@28) |##_module.ARMReg.R4|) (_module.ARMReg.R4_q d@@28)))) :qid |unknown.0:0| :skolemid |3335| :pattern ( (_module.ARMReg.R4_q d@@28)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (and (= (type d@@29) DatatypeTypeType) (_module.ARMReg.R4_q d@@29)) (= d@@29 |#_module.ARMReg.R4|)) :qid |unknown.0:0| :skolemid |3336| :pattern ( (_module.ARMReg.R4_q d@@29)) )))
(assert ($Is |#_module.ARMReg.R4| Tclass._module.ARMReg))
(assert (forall (($h@@16 T@U) ) (!  (=> (and (= (type $h@@16) (MapType1Type refType)) ($IsGoodHeap $h@@16)) ($IsAlloc |#_module.ARMReg.R4| Tclass._module.ARMReg $h@@16)) :qid |DafnyPre.405:12| :skolemid |3337| :pattern ( ($IsAlloc |#_module.ARMReg.R4| Tclass._module.ARMReg $h@@16)) )))
(assert (= |#_module.ARMReg.R4| (Lit |#_module.ARMReg.R4|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R5|) |##_module.ARMReg.R5|))
(assert (forall ((d@@30 T@U) ) (!  (=> (= (type d@@30) DatatypeTypeType) (and (=> (_module.ARMReg.R5_q d@@30) (= (DatatypeCtorId d@@30) |##_module.ARMReg.R5|)) (=> (= (DatatypeCtorId d@@30) |##_module.ARMReg.R5|) (_module.ARMReg.R5_q d@@30)))) :qid |unknown.0:0| :skolemid |3338| :pattern ( (_module.ARMReg.R5_q d@@30)) )))
(assert (forall ((d@@31 T@U) ) (!  (=> (and (= (type d@@31) DatatypeTypeType) (_module.ARMReg.R5_q d@@31)) (= d@@31 |#_module.ARMReg.R5|)) :qid |unknown.0:0| :skolemid |3339| :pattern ( (_module.ARMReg.R5_q d@@31)) )))
(assert ($Is |#_module.ARMReg.R5| Tclass._module.ARMReg))
(assert (forall (($h@@17 T@U) ) (!  (=> (and (= (type $h@@17) (MapType1Type refType)) ($IsGoodHeap $h@@17)) ($IsAlloc |#_module.ARMReg.R5| Tclass._module.ARMReg $h@@17)) :qid |DafnyPre.405:12| :skolemid |3340| :pattern ( ($IsAlloc |#_module.ARMReg.R5| Tclass._module.ARMReg $h@@17)) )))
(assert (= |#_module.ARMReg.R5| (Lit |#_module.ARMReg.R5|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R6|) |##_module.ARMReg.R6|))
(assert (forall ((d@@32 T@U) ) (!  (=> (= (type d@@32) DatatypeTypeType) (and (=> (_module.ARMReg.R6_q d@@32) (= (DatatypeCtorId d@@32) |##_module.ARMReg.R6|)) (=> (= (DatatypeCtorId d@@32) |##_module.ARMReg.R6|) (_module.ARMReg.R6_q d@@32)))) :qid |unknown.0:0| :skolemid |3341| :pattern ( (_module.ARMReg.R6_q d@@32)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (and (= (type d@@33) DatatypeTypeType) (_module.ARMReg.R6_q d@@33)) (= d@@33 |#_module.ARMReg.R6|)) :qid |unknown.0:0| :skolemid |3342| :pattern ( (_module.ARMReg.R6_q d@@33)) )))
(assert ($Is |#_module.ARMReg.R6| Tclass._module.ARMReg))
(assert (forall (($h@@18 T@U) ) (!  (=> (and (= (type $h@@18) (MapType1Type refType)) ($IsGoodHeap $h@@18)) ($IsAlloc |#_module.ARMReg.R6| Tclass._module.ARMReg $h@@18)) :qid |DafnyPre.405:12| :skolemid |3343| :pattern ( ($IsAlloc |#_module.ARMReg.R6| Tclass._module.ARMReg $h@@18)) )))
(assert (= |#_module.ARMReg.R6| (Lit |#_module.ARMReg.R6|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R7|) |##_module.ARMReg.R7|))
(assert (forall ((d@@34 T@U) ) (!  (=> (= (type d@@34) DatatypeTypeType) (and (=> (_module.ARMReg.R7_q d@@34) (= (DatatypeCtorId d@@34) |##_module.ARMReg.R7|)) (=> (= (DatatypeCtorId d@@34) |##_module.ARMReg.R7|) (_module.ARMReg.R7_q d@@34)))) :qid |unknown.0:0| :skolemid |3344| :pattern ( (_module.ARMReg.R7_q d@@34)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) (_module.ARMReg.R7_q d@@35)) (= d@@35 |#_module.ARMReg.R7|)) :qid |unknown.0:0| :skolemid |3345| :pattern ( (_module.ARMReg.R7_q d@@35)) )))
(assert ($Is |#_module.ARMReg.R7| Tclass._module.ARMReg))
(assert (forall (($h@@19 T@U) ) (!  (=> (and (= (type $h@@19) (MapType1Type refType)) ($IsGoodHeap $h@@19)) ($IsAlloc |#_module.ARMReg.R7| Tclass._module.ARMReg $h@@19)) :qid |DafnyPre.405:12| :skolemid |3346| :pattern ( ($IsAlloc |#_module.ARMReg.R7| Tclass._module.ARMReg $h@@19)) )))
(assert (= |#_module.ARMReg.R7| (Lit |#_module.ARMReg.R7|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R8|) |##_module.ARMReg.R8|))
(assert (forall ((d@@36 T@U) ) (!  (=> (= (type d@@36) DatatypeTypeType) (and (=> (_module.ARMReg.R8_q d@@36) (= (DatatypeCtorId d@@36) |##_module.ARMReg.R8|)) (=> (= (DatatypeCtorId d@@36) |##_module.ARMReg.R8|) (_module.ARMReg.R8_q d@@36)))) :qid |unknown.0:0| :skolemid |3347| :pattern ( (_module.ARMReg.R8_q d@@36)) )))
(assert (forall ((d@@37 T@U) ) (!  (=> (and (= (type d@@37) DatatypeTypeType) (_module.ARMReg.R8_q d@@37)) (= d@@37 |#_module.ARMReg.R8|)) :qid |unknown.0:0| :skolemid |3348| :pattern ( (_module.ARMReg.R8_q d@@37)) )))
(assert ($Is |#_module.ARMReg.R8| Tclass._module.ARMReg))
(assert (forall (($h@@20 T@U) ) (!  (=> (and (= (type $h@@20) (MapType1Type refType)) ($IsGoodHeap $h@@20)) ($IsAlloc |#_module.ARMReg.R8| Tclass._module.ARMReg $h@@20)) :qid |DafnyPre.405:12| :skolemid |3349| :pattern ( ($IsAlloc |#_module.ARMReg.R8| Tclass._module.ARMReg $h@@20)) )))
(assert (= |#_module.ARMReg.R8| (Lit |#_module.ARMReg.R8|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R9|) |##_module.ARMReg.R9|))
(assert (forall ((d@@38 T@U) ) (!  (=> (= (type d@@38) DatatypeTypeType) (and (=> (_module.ARMReg.R9_q d@@38) (= (DatatypeCtorId d@@38) |##_module.ARMReg.R9|)) (=> (= (DatatypeCtorId d@@38) |##_module.ARMReg.R9|) (_module.ARMReg.R9_q d@@38)))) :qid |unknown.0:0| :skolemid |3350| :pattern ( (_module.ARMReg.R9_q d@@38)) )))
(assert (forall ((d@@39 T@U) ) (!  (=> (and (= (type d@@39) DatatypeTypeType) (_module.ARMReg.R9_q d@@39)) (= d@@39 |#_module.ARMReg.R9|)) :qid |unknown.0:0| :skolemid |3351| :pattern ( (_module.ARMReg.R9_q d@@39)) )))
(assert ($Is |#_module.ARMReg.R9| Tclass._module.ARMReg))
(assert (forall (($h@@21 T@U) ) (!  (=> (and (= (type $h@@21) (MapType1Type refType)) ($IsGoodHeap $h@@21)) ($IsAlloc |#_module.ARMReg.R9| Tclass._module.ARMReg $h@@21)) :qid |DafnyPre.405:12| :skolemid |3352| :pattern ( ($IsAlloc |#_module.ARMReg.R9| Tclass._module.ARMReg $h@@21)) )))
(assert (= |#_module.ARMReg.R9| (Lit |#_module.ARMReg.R9|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R10|) |##_module.ARMReg.R10|))
(assert (forall ((d@@40 T@U) ) (!  (=> (= (type d@@40) DatatypeTypeType) (and (=> (_module.ARMReg.R10_q d@@40) (= (DatatypeCtorId d@@40) |##_module.ARMReg.R10|)) (=> (= (DatatypeCtorId d@@40) |##_module.ARMReg.R10|) (_module.ARMReg.R10_q d@@40)))) :qid |unknown.0:0| :skolemid |3353| :pattern ( (_module.ARMReg.R10_q d@@40)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (and (= (type d@@41) DatatypeTypeType) (_module.ARMReg.R10_q d@@41)) (= d@@41 |#_module.ARMReg.R10|)) :qid |unknown.0:0| :skolemid |3354| :pattern ( (_module.ARMReg.R10_q d@@41)) )))
(assert ($Is |#_module.ARMReg.R10| Tclass._module.ARMReg))
(assert (forall (($h@@22 T@U) ) (!  (=> (and (= (type $h@@22) (MapType1Type refType)) ($IsGoodHeap $h@@22)) ($IsAlloc |#_module.ARMReg.R10| Tclass._module.ARMReg $h@@22)) :qid |DafnyPre.405:12| :skolemid |3355| :pattern ( ($IsAlloc |#_module.ARMReg.R10| Tclass._module.ARMReg $h@@22)) )))
(assert (= |#_module.ARMReg.R10| (Lit |#_module.ARMReg.R10|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R11|) |##_module.ARMReg.R11|))
(assert (forall ((d@@42 T@U) ) (!  (=> (= (type d@@42) DatatypeTypeType) (and (=> (_module.ARMReg.R11_q d@@42) (= (DatatypeCtorId d@@42) |##_module.ARMReg.R11|)) (=> (= (DatatypeCtorId d@@42) |##_module.ARMReg.R11|) (_module.ARMReg.R11_q d@@42)))) :qid |unknown.0:0| :skolemid |3356| :pattern ( (_module.ARMReg.R11_q d@@42)) )))
(assert (forall ((d@@43 T@U) ) (!  (=> (and (= (type d@@43) DatatypeTypeType) (_module.ARMReg.R11_q d@@43)) (= d@@43 |#_module.ARMReg.R11|)) :qid |unknown.0:0| :skolemid |3357| :pattern ( (_module.ARMReg.R11_q d@@43)) )))
(assert ($Is |#_module.ARMReg.R11| Tclass._module.ARMReg))
(assert (forall (($h@@23 T@U) ) (!  (=> (and (= (type $h@@23) (MapType1Type refType)) ($IsGoodHeap $h@@23)) ($IsAlloc |#_module.ARMReg.R11| Tclass._module.ARMReg $h@@23)) :qid |DafnyPre.405:12| :skolemid |3358| :pattern ( ($IsAlloc |#_module.ARMReg.R11| Tclass._module.ARMReg $h@@23)) )))
(assert (= |#_module.ARMReg.R11| (Lit |#_module.ARMReg.R11|)))
(assert (= (DatatypeCtorId |#_module.ARMReg.R12|) |##_module.ARMReg.R12|))
(assert (forall ((d@@44 T@U) ) (!  (=> (= (type d@@44) DatatypeTypeType) (and (=> (_module.ARMReg.R12_q d@@44) (= (DatatypeCtorId d@@44) |##_module.ARMReg.R12|)) (=> (= (DatatypeCtorId d@@44) |##_module.ARMReg.R12|) (_module.ARMReg.R12_q d@@44)))) :qid |unknown.0:0| :skolemid |3359| :pattern ( (_module.ARMReg.R12_q d@@44)) )))
(assert (forall ((d@@45 T@U) ) (!  (=> (and (= (type d@@45) DatatypeTypeType) (_module.ARMReg.R12_q d@@45)) (= d@@45 |#_module.ARMReg.R12|)) :qid |unknown.0:0| :skolemid |3360| :pattern ( (_module.ARMReg.R12_q d@@45)) )))
(assert ($Is |#_module.ARMReg.R12| Tclass._module.ARMReg))
(assert (forall (($h@@24 T@U) ) (!  (=> (and (= (type $h@@24) (MapType1Type refType)) ($IsGoodHeap $h@@24)) ($IsAlloc |#_module.ARMReg.R12| Tclass._module.ARMReg $h@@24)) :qid |DafnyPre.405:12| :skolemid |3361| :pattern ( ($IsAlloc |#_module.ARMReg.R12| Tclass._module.ARMReg $h@@24)) )))
(assert (= |#_module.ARMReg.R12| (Lit |#_module.ARMReg.R12|)))
(assert (forall ((|a#95#0#0| T@U) ) (!  (=> (= (type |a#95#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.ARMReg.SP| |a#95#0#0|)) |##_module.ARMReg.SP|)) :qid |ARMdefsd.12:65| :skolemid |3362| :pattern ( (|#_module.ARMReg.SP| |a#95#0#0|)) )))
(assert (forall ((d@@46 T@U) ) (!  (=> (= (type d@@46) DatatypeTypeType) (and (=> (_module.ARMReg.SP_q d@@46) (= (DatatypeCtorId d@@46) |##_module.ARMReg.SP|)) (=> (= (DatatypeCtorId d@@46) |##_module.ARMReg.SP|) (_module.ARMReg.SP_q d@@46)))) :qid |unknown.0:0| :skolemid |3363| :pattern ( (_module.ARMReg.SP_q d@@46)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (and (= (type d@@47) DatatypeTypeType) (_module.ARMReg.SP_q d@@47)) (exists ((|a#96#0#0| T@U) ) (!  (and (= (type |a#96#0#0|) DatatypeTypeType) (= d@@47 (|#_module.ARMReg.SP| |a#96#0#0|))) :qid |ARMdefsd.12:65| :skolemid |3364| :no-pattern (type |a#96#0#0|) :no-pattern (U_2_int |a#96#0#0|) :no-pattern (U_2_bool |a#96#0#0|) ))) :qid |unknown.0:0| :skolemid |3365| :pattern ( (_module.ARMReg.SP_q d@@47)) )))
(assert (forall ((|a#97#0#0| T@U) ) (!  (=> (= (type |a#97#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.ARMReg.SP| |a#97#0#0|) Tclass._module.ARMReg) ($Is |a#97#0#0| Tclass._module.mode)) (=> ($Is |a#97#0#0| Tclass._module.mode) ($Is (|#_module.ARMReg.SP| |a#97#0#0|) Tclass._module.ARMReg)))) :qid |ARMdefsd.12:65| :skolemid |3366| :pattern ( ($Is (|#_module.ARMReg.SP| |a#97#0#0|) Tclass._module.ARMReg)) )))
(assert (forall ((|a#98#0#0| T@U) ($h@@25 T@U) ) (!  (=> (and (and (= (type |a#98#0#0|) DatatypeTypeType) (= (type $h@@25) (MapType1Type refType))) ($IsGoodHeap $h@@25)) (and (=> ($IsAlloc (|#_module.ARMReg.SP| |a#98#0#0|) Tclass._module.ARMReg $h@@25) ($IsAlloc |a#98#0#0| Tclass._module.mode $h@@25)) (=> ($IsAlloc |a#98#0#0| Tclass._module.mode $h@@25) ($IsAlloc (|#_module.ARMReg.SP| |a#98#0#0|) Tclass._module.ARMReg $h@@25)))) :qid |ARMdefsd.12:65| :skolemid |3367| :pattern ( ($IsAlloc (|#_module.ARMReg.SP| |a#98#0#0|) Tclass._module.ARMReg $h@@25)) )))
(assert (forall ((|a#99#0#0| T@U) ) (!  (=> (= (type |a#99#0#0|) DatatypeTypeType) (= (|#_module.ARMReg.SP| (Lit |a#99#0#0|)) (Lit (|#_module.ARMReg.SP| |a#99#0#0|)))) :qid |ARMdefsd.12:65| :skolemid |3368| :pattern ( (|#_module.ARMReg.SP| (Lit |a#99#0#0|))) )))
(assert (forall ((|a#100#0#0| T@U) ) (!  (=> (= (type |a#100#0#0|) DatatypeTypeType) (= (_module.ARMReg.spm (|#_module.ARMReg.SP| |a#100#0#0|)) |a#100#0#0|)) :qid |ARMdefsd.12:65| :skolemid |3369| :pattern ( (|#_module.ARMReg.SP| |a#100#0#0|)) )))
(assert (forall ((|a#101#0#0| T@U) ) (!  (=> (= (type |a#101#0#0|) DatatypeTypeType) (< (DtRank |a#101#0#0|) (DtRank (|#_module.ARMReg.SP| |a#101#0#0|)))) :qid |ARMdefsd.12:65| :skolemid |3370| :pattern ( (|#_module.ARMReg.SP| |a#101#0#0|)) )))
(assert (forall ((|a#102#0#0| T@U) ) (!  (=> (= (type |a#102#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.ARMReg.LR| |a#102#0#0|)) |##_module.ARMReg.LR|)) :qid |ARMdefsd.12:80| :skolemid |3371| :pattern ( (|#_module.ARMReg.LR| |a#102#0#0|)) )))
(assert (forall ((d@@48 T@U) ) (!  (=> (= (type d@@48) DatatypeTypeType) (and (=> (_module.ARMReg.LR_q d@@48) (= (DatatypeCtorId d@@48) |##_module.ARMReg.LR|)) (=> (= (DatatypeCtorId d@@48) |##_module.ARMReg.LR|) (_module.ARMReg.LR_q d@@48)))) :qid |unknown.0:0| :skolemid |3372| :pattern ( (_module.ARMReg.LR_q d@@48)) )))
(assert (forall ((d@@49 T@U) ) (!  (=> (and (= (type d@@49) DatatypeTypeType) (_module.ARMReg.LR_q d@@49)) (exists ((|a#103#0#0| T@U) ) (!  (and (= (type |a#103#0#0|) DatatypeTypeType) (= d@@49 (|#_module.ARMReg.LR| |a#103#0#0|))) :qid |ARMdefsd.12:80| :skolemid |3373| :no-pattern (type |a#103#0#0|) :no-pattern (U_2_int |a#103#0#0|) :no-pattern (U_2_bool |a#103#0#0|) ))) :qid |unknown.0:0| :skolemid |3374| :pattern ( (_module.ARMReg.LR_q d@@49)) )))
(assert (forall ((|a#104#0#0| T@U) ) (!  (=> (= (type |a#104#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.ARMReg.LR| |a#104#0#0|) Tclass._module.ARMReg) ($Is |a#104#0#0| Tclass._module.mode)) (=> ($Is |a#104#0#0| Tclass._module.mode) ($Is (|#_module.ARMReg.LR| |a#104#0#0|) Tclass._module.ARMReg)))) :qid |ARMdefsd.12:80| :skolemid |3375| :pattern ( ($Is (|#_module.ARMReg.LR| |a#104#0#0|) Tclass._module.ARMReg)) )))
(assert (forall ((|a#105#0#0| T@U) ($h@@26 T@U) ) (!  (=> (and (and (= (type |a#105#0#0|) DatatypeTypeType) (= (type $h@@26) (MapType1Type refType))) ($IsGoodHeap $h@@26)) (and (=> ($IsAlloc (|#_module.ARMReg.LR| |a#105#0#0|) Tclass._module.ARMReg $h@@26) ($IsAlloc |a#105#0#0| Tclass._module.mode $h@@26)) (=> ($IsAlloc |a#105#0#0| Tclass._module.mode $h@@26) ($IsAlloc (|#_module.ARMReg.LR| |a#105#0#0|) Tclass._module.ARMReg $h@@26)))) :qid |ARMdefsd.12:80| :skolemid |3376| :pattern ( ($IsAlloc (|#_module.ARMReg.LR| |a#105#0#0|) Tclass._module.ARMReg $h@@26)) )))
(assert (forall ((|a#106#0#0| T@U) ) (!  (=> (= (type |a#106#0#0|) DatatypeTypeType) (= (|#_module.ARMReg.LR| (Lit |a#106#0#0|)) (Lit (|#_module.ARMReg.LR| |a#106#0#0|)))) :qid |ARMdefsd.12:80| :skolemid |3377| :pattern ( (|#_module.ARMReg.LR| (Lit |a#106#0#0|))) )))
(assert (forall ((|a#107#0#0| T@U) ) (!  (=> (= (type |a#107#0#0|) DatatypeTypeType) (= (_module.ARMReg.lrm (|#_module.ARMReg.LR| |a#107#0#0|)) |a#107#0#0|)) :qid |ARMdefsd.12:80| :skolemid |3378| :pattern ( (|#_module.ARMReg.LR| |a#107#0#0|)) )))
(assert (forall ((|a#108#0#0| T@U) ) (!  (=> (= (type |a#108#0#0|) DatatypeTypeType) (< (DtRank |a#108#0#0|) (DtRank (|#_module.ARMReg.LR| |a#108#0#0|)))) :qid |ARMdefsd.12:80| :skolemid |3379| :pattern ( (|#_module.ARMReg.LR| |a#108#0#0|)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (and (= (type d@@50) DatatypeTypeType) (|$IsA#_module.ARMReg| d@@50)) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (_module.ARMReg.R0_q d@@50) (_module.ARMReg.R1_q d@@50)) (_module.ARMReg.R2_q d@@50)) (_module.ARMReg.R3_q d@@50)) (_module.ARMReg.R4_q d@@50)) (_module.ARMReg.R5_q d@@50)) (_module.ARMReg.R6_q d@@50)) (_module.ARMReg.R7_q d@@50)) (_module.ARMReg.R8_q d@@50)) (_module.ARMReg.R9_q d@@50)) (_module.ARMReg.R10_q d@@50)) (_module.ARMReg.R11_q d@@50)) (_module.ARMReg.R12_q d@@50)) (_module.ARMReg.SP_q d@@50)) (_module.ARMReg.LR_q d@@50))) :qid |unknown.0:0| :skolemid |3380| :pattern ( (|$IsA#_module.ARMReg| d@@50)) )))
(assert (forall ((d@@51 T@U) ) (!  (=> (and (= (type d@@51) DatatypeTypeType) ($Is d@@51 Tclass._module.ARMReg)) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (_module.ARMReg.R0_q d@@51) (_module.ARMReg.R1_q d@@51)) (_module.ARMReg.R2_q d@@51)) (_module.ARMReg.R3_q d@@51)) (_module.ARMReg.R4_q d@@51)) (_module.ARMReg.R5_q d@@51)) (_module.ARMReg.R6_q d@@51)) (_module.ARMReg.R7_q d@@51)) (_module.ARMReg.R8_q d@@51)) (_module.ARMReg.R9_q d@@51)) (_module.ARMReg.R10_q d@@51)) (_module.ARMReg.R11_q d@@51)) (_module.ARMReg.R12_q d@@51)) (_module.ARMReg.SP_q d@@51)) (_module.ARMReg.LR_q d@@51))) :qid |unknown.0:0| :skolemid |3381| :pattern ( (_module.ARMReg.LR_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.SP_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R12_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R11_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R10_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R9_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R8_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R7_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R6_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R5_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R4_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R3_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R2_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R1_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) :pattern ( (_module.ARMReg.R0_q d@@51) ($Is d@@51 Tclass._module.ARMReg)) )))
(assert (= (DatatypeCtorId |#_module.SReg.cpsr|) |##_module.SReg.cpsr|))
(assert (forall ((d@@52 T@U) ) (!  (=> (= (type d@@52) DatatypeTypeType) (and (=> (_module.SReg.cpsr_q d@@52) (= (DatatypeCtorId d@@52) |##_module.SReg.cpsr|)) (=> (= (DatatypeCtorId d@@52) |##_module.SReg.cpsr|) (_module.SReg.cpsr_q d@@52)))) :qid |unknown.0:0| :skolemid |3382| :pattern ( (_module.SReg.cpsr_q d@@52)) )))
(assert (forall ((d@@53 T@U) ) (!  (=> (and (= (type d@@53) DatatypeTypeType) (_module.SReg.cpsr_q d@@53)) (= d@@53 |#_module.SReg.cpsr|)) :qid |unknown.0:0| :skolemid |3383| :pattern ( (_module.SReg.cpsr_q d@@53)) )))
(assert ($Is |#_module.SReg.cpsr| Tclass._module.SReg))
(assert (forall (($h@@27 T@U) ) (!  (=> (and (= (type $h@@27) (MapType1Type refType)) ($IsGoodHeap $h@@27)) ($IsAlloc |#_module.SReg.cpsr| Tclass._module.SReg $h@@27)) :qid |DafnyPre.405:12| :skolemid |3384| :pattern ( ($IsAlloc |#_module.SReg.cpsr| Tclass._module.SReg $h@@27)) )))
(assert (= |#_module.SReg.cpsr| (Lit |#_module.SReg.cpsr|)))
(assert (forall ((|a#114#0#0| T@U) ) (!  (=> (= (type |a#114#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.SReg.spsr| |a#114#0#0|)) |##_module.SReg.spsr|)) :qid |ARMdefsd.16:29| :skolemid |3385| :pattern ( (|#_module.SReg.spsr| |a#114#0#0|)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (= (type d@@54) DatatypeTypeType) (and (=> (_module.SReg.spsr_q d@@54) (= (DatatypeCtorId d@@54) |##_module.SReg.spsr|)) (=> (= (DatatypeCtorId d@@54) |##_module.SReg.spsr|) (_module.SReg.spsr_q d@@54)))) :qid |unknown.0:0| :skolemid |3386| :pattern ( (_module.SReg.spsr_q d@@54)) )))
(assert (forall ((d@@55 T@U) ) (!  (=> (and (= (type d@@55) DatatypeTypeType) (_module.SReg.spsr_q d@@55)) (exists ((|a#115#0#0| T@U) ) (!  (and (= (type |a#115#0#0|) DatatypeTypeType) (= d@@55 (|#_module.SReg.spsr| |a#115#0#0|))) :qid |ARMdefsd.16:29| :skolemid |3387| :no-pattern (type |a#115#0#0|) :no-pattern (U_2_int |a#115#0#0|) :no-pattern (U_2_bool |a#115#0#0|) ))) :qid |unknown.0:0| :skolemid |3388| :pattern ( (_module.SReg.spsr_q d@@55)) )))
(assert (forall ((|a#116#0#0| T@U) ) (!  (=> (= (type |a#116#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.SReg.spsr| |a#116#0#0|) Tclass._module.SReg) ($Is |a#116#0#0| Tclass._module.mode)) (=> ($Is |a#116#0#0| Tclass._module.mode) ($Is (|#_module.SReg.spsr| |a#116#0#0|) Tclass._module.SReg)))) :qid |ARMdefsd.16:29| :skolemid |3389| :pattern ( ($Is (|#_module.SReg.spsr| |a#116#0#0|) Tclass._module.SReg)) )))
(assert (forall ((|a#117#0#0| T@U) ($h@@28 T@U) ) (!  (=> (and (and (= (type |a#117#0#0|) DatatypeTypeType) (= (type $h@@28) (MapType1Type refType))) ($IsGoodHeap $h@@28)) (and (=> ($IsAlloc (|#_module.SReg.spsr| |a#117#0#0|) Tclass._module.SReg $h@@28) ($IsAlloc |a#117#0#0| Tclass._module.mode $h@@28)) (=> ($IsAlloc |a#117#0#0| Tclass._module.mode $h@@28) ($IsAlloc (|#_module.SReg.spsr| |a#117#0#0|) Tclass._module.SReg $h@@28)))) :qid |ARMdefsd.16:29| :skolemid |3390| :pattern ( ($IsAlloc (|#_module.SReg.spsr| |a#117#0#0|) Tclass._module.SReg $h@@28)) )))
(assert (forall ((|a#118#0#0| T@U) ) (!  (=> (= (type |a#118#0#0|) DatatypeTypeType) (= (|#_module.SReg.spsr| (Lit |a#118#0#0|)) (Lit (|#_module.SReg.spsr| |a#118#0#0|)))) :qid |ARMdefsd.16:29| :skolemid |3391| :pattern ( (|#_module.SReg.spsr| (Lit |a#118#0#0|))) )))
(assert (forall ((|a#119#0#0| T@U) ) (!  (=> (= (type |a#119#0#0|) DatatypeTypeType) (= (_module.SReg.m (|#_module.SReg.spsr| |a#119#0#0|)) |a#119#0#0|)) :qid |ARMdefsd.16:29| :skolemid |3392| :pattern ( (|#_module.SReg.spsr| |a#119#0#0|)) )))
(assert (forall ((|a#120#0#0| T@U) ) (!  (=> (= (type |a#120#0#0|) DatatypeTypeType) (< (DtRank |a#120#0#0|) (DtRank (|#_module.SReg.spsr| |a#120#0#0|)))) :qid |ARMdefsd.16:29| :skolemid |3393| :pattern ( (|#_module.SReg.spsr| |a#120#0#0|)) )))
(assert (= (DatatypeCtorId |#_module.SReg.SCR|) |##_module.SReg.SCR|))
(assert (forall ((d@@56 T@U) ) (!  (=> (= (type d@@56) DatatypeTypeType) (and (=> (_module.SReg.SCR_q d@@56) (= (DatatypeCtorId d@@56) |##_module.SReg.SCR|)) (=> (= (DatatypeCtorId d@@56) |##_module.SReg.SCR|) (_module.SReg.SCR_q d@@56)))) :qid |unknown.0:0| :skolemid |3394| :pattern ( (_module.SReg.SCR_q d@@56)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (and (= (type d@@57) DatatypeTypeType) (_module.SReg.SCR_q d@@57)) (= d@@57 |#_module.SReg.SCR|)) :qid |unknown.0:0| :skolemid |3395| :pattern ( (_module.SReg.SCR_q d@@57)) )))
(assert ($Is |#_module.SReg.SCR| Tclass._module.SReg))
(assert (forall (($h@@29 T@U) ) (!  (=> (and (= (type $h@@29) (MapType1Type refType)) ($IsGoodHeap $h@@29)) ($IsAlloc |#_module.SReg.SCR| Tclass._module.SReg $h@@29)) :qid |DafnyPre.405:12| :skolemid |3396| :pattern ( ($IsAlloc |#_module.SReg.SCR| Tclass._module.SReg $h@@29)) )))
(assert (= |#_module.SReg.SCR| (Lit |#_module.SReg.SCR|)))
(assert (= (type |#_module.SReg.SCTLR|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.SReg.SCTLR|) |##_module.SReg.SCTLR|))
(assert (forall ((d@@58 T@U) ) (!  (=> (= (type d@@58) DatatypeTypeType) (and (=> (_module.SReg.SCTLR_q d@@58) (= (DatatypeCtorId d@@58) |##_module.SReg.SCTLR|)) (=> (= (DatatypeCtorId d@@58) |##_module.SReg.SCTLR|) (_module.SReg.SCTLR_q d@@58)))) :qid |unknown.0:0| :skolemid |3397| :pattern ( (_module.SReg.SCTLR_q d@@58)) )))
(assert (forall ((d@@59 T@U) ) (!  (=> (and (= (type d@@59) DatatypeTypeType) (_module.SReg.SCTLR_q d@@59)) (= d@@59 |#_module.SReg.SCTLR|)) :qid |unknown.0:0| :skolemid |3398| :pattern ( (_module.SReg.SCTLR_q d@@59)) )))
(assert ($Is |#_module.SReg.SCTLR| Tclass._module.SReg))
(assert (forall (($h@@30 T@U) ) (!  (=> (and (= (type $h@@30) (MapType1Type refType)) ($IsGoodHeap $h@@30)) ($IsAlloc |#_module.SReg.SCTLR| Tclass._module.SReg $h@@30)) :qid |DafnyPre.405:12| :skolemid |3399| :pattern ( ($IsAlloc |#_module.SReg.SCTLR| Tclass._module.SReg $h@@30)) )))
(assert (= |#_module.SReg.SCTLR| (Lit |#_module.SReg.SCTLR|)))
(assert (= (type |#_module.SReg.VBAR|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.SReg.VBAR|) |##_module.SReg.VBAR|))
(assert (forall ((d@@60 T@U) ) (!  (=> (= (type d@@60) DatatypeTypeType) (and (=> (_module.SReg.VBAR_q d@@60) (= (DatatypeCtorId d@@60) |##_module.SReg.VBAR|)) (=> (= (DatatypeCtorId d@@60) |##_module.SReg.VBAR|) (_module.SReg.VBAR_q d@@60)))) :qid |unknown.0:0| :skolemid |3400| :pattern ( (_module.SReg.VBAR_q d@@60)) )))
(assert (forall ((d@@61 T@U) ) (!  (=> (and (= (type d@@61) DatatypeTypeType) (_module.SReg.VBAR_q d@@61)) (= d@@61 |#_module.SReg.VBAR|)) :qid |unknown.0:0| :skolemid |3401| :pattern ( (_module.SReg.VBAR_q d@@61)) )))
(assert ($Is |#_module.SReg.VBAR| Tclass._module.SReg))
(assert (forall (($h@@31 T@U) ) (!  (=> (and (= (type $h@@31) (MapType1Type refType)) ($IsGoodHeap $h@@31)) ($IsAlloc |#_module.SReg.VBAR| Tclass._module.SReg $h@@31)) :qid |DafnyPre.405:12| :skolemid |3402| :pattern ( ($IsAlloc |#_module.SReg.VBAR| Tclass._module.SReg $h@@31)) )))
(assert (= |#_module.SReg.VBAR| (Lit |#_module.SReg.VBAR|)))
(assert (= (DatatypeCtorId |#_module.SReg.ttbr0|) |##_module.SReg.ttbr0|))
(assert (forall ((d@@62 T@U) ) (!  (=> (= (type d@@62) DatatypeTypeType) (and (=> (_module.SReg.ttbr0_q d@@62) (= (DatatypeCtorId d@@62) |##_module.SReg.ttbr0|)) (=> (= (DatatypeCtorId d@@62) |##_module.SReg.ttbr0|) (_module.SReg.ttbr0_q d@@62)))) :qid |unknown.0:0| :skolemid |3403| :pattern ( (_module.SReg.ttbr0_q d@@62)) )))
(assert (forall ((d@@63 T@U) ) (!  (=> (and (= (type d@@63) DatatypeTypeType) (_module.SReg.ttbr0_q d@@63)) (= d@@63 |#_module.SReg.ttbr0|)) :qid |unknown.0:0| :skolemid |3404| :pattern ( (_module.SReg.ttbr0_q d@@63)) )))
(assert ($Is |#_module.SReg.ttbr0| Tclass._module.SReg))
(assert (forall (($h@@32 T@U) ) (!  (=> (and (= (type $h@@32) (MapType1Type refType)) ($IsGoodHeap $h@@32)) ($IsAlloc |#_module.SReg.ttbr0| Tclass._module.SReg $h@@32)) :qid |DafnyPre.405:12| :skolemid |3405| :pattern ( ($IsAlloc |#_module.SReg.ttbr0| Tclass._module.SReg $h@@32)) )))
(assert (= |#_module.SReg.ttbr0| (Lit |#_module.SReg.ttbr0|)))
(assert (= (DatatypeCtorId |#_module.SReg.TLBIALL|) |##_module.SReg.TLBIALL|))
(assert (forall ((d@@64 T@U) ) (!  (=> (= (type d@@64) DatatypeTypeType) (and (=> (_module.SReg.TLBIALL_q d@@64) (= (DatatypeCtorId d@@64) |##_module.SReg.TLBIALL|)) (=> (= (DatatypeCtorId d@@64) |##_module.SReg.TLBIALL|) (_module.SReg.TLBIALL_q d@@64)))) :qid |unknown.0:0| :skolemid |3406| :pattern ( (_module.SReg.TLBIALL_q d@@64)) )))
(assert (forall ((d@@65 T@U) ) (!  (=> (and (= (type d@@65) DatatypeTypeType) (_module.SReg.TLBIALL_q d@@65)) (= d@@65 |#_module.SReg.TLBIALL|)) :qid |unknown.0:0| :skolemid |3407| :pattern ( (_module.SReg.TLBIALL_q d@@65)) )))
(assert ($Is |#_module.SReg.TLBIALL| Tclass._module.SReg))
(assert (forall (($h@@33 T@U) ) (!  (=> (and (= (type $h@@33) (MapType1Type refType)) ($IsGoodHeap $h@@33)) ($IsAlloc |#_module.SReg.TLBIALL| Tclass._module.SReg $h@@33)) :qid |DafnyPre.405:12| :skolemid |3408| :pattern ( ($IsAlloc |#_module.SReg.TLBIALL| Tclass._module.SReg $h@@33)) )))
(assert (= |#_module.SReg.TLBIALL| (Lit |#_module.SReg.TLBIALL|)))
(assert (forall ((d@@66 T@U) ) (!  (=> (and (= (type d@@66) DatatypeTypeType) (|$IsA#_module.SReg| d@@66)) (or (or (or (or (or (or (_module.SReg.cpsr_q d@@66) (_module.SReg.spsr_q d@@66)) (_module.SReg.SCR_q d@@66)) (_module.SReg.SCTLR_q d@@66)) (_module.SReg.VBAR_q d@@66)) (_module.SReg.ttbr0_q d@@66)) (_module.SReg.TLBIALL_q d@@66))) :qid |unknown.0:0| :skolemid |3409| :pattern ( (|$IsA#_module.SReg| d@@66)) )))
(assert (forall ((d@@67 T@U) ) (!  (=> (and (= (type d@@67) DatatypeTypeType) ($Is d@@67 Tclass._module.SReg)) (or (or (or (or (or (or (_module.SReg.cpsr_q d@@67) (_module.SReg.spsr_q d@@67)) (_module.SReg.SCR_q d@@67)) (_module.SReg.SCTLR_q d@@67)) (_module.SReg.VBAR_q d@@67)) (_module.SReg.ttbr0_q d@@67)) (_module.SReg.TLBIALL_q d@@67))) :qid |unknown.0:0| :skolemid |3410| :pattern ( (_module.SReg.TLBIALL_q d@@67) ($Is d@@67 Tclass._module.SReg)) :pattern ( (_module.SReg.ttbr0_q d@@67) ($Is d@@67 Tclass._module.SReg)) :pattern ( (_module.SReg.VBAR_q d@@67) ($Is d@@67 Tclass._module.SReg)) :pattern ( (_module.SReg.SCTLR_q d@@67) ($Is d@@67 Tclass._module.SReg)) :pattern ( (_module.SReg.SCR_q d@@67) ($Is d@@67 Tclass._module.SReg)) :pattern ( (_module.SReg.spsr_q d@@67) ($Is d@@67 Tclass._module.SReg)) :pattern ( (_module.SReg.cpsr_q d@@67) ($Is d@@67 Tclass._module.SReg)) )))
(assert (forall ((|a#146#0#0| T@U) (|a#146#1#0| T@U) (|a#146#2#0| T@U) (|a#146#3#0| Bool) (|a#146#4#0| T@U) (|a#146#5#0| Int) (|a#146#6#0| Int) ) (!  (=> (and (and (and (= (type |a#146#0#0|) DatatypeTypeType) (= (type |a#146#1#0|) DatatypeTypeType)) (= (type |a#146#2#0|) DatatypeTypeType)) (= (type |a#146#4#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.config.Config| |a#146#0#0| |a#146#1#0| |a#146#2#0| |a#146#3#0| |a#146#4#0| |a#146#5#0| |a#146#6#0|)) |##_module.config.Config|)) :qid |ARMdefsd.24:26| :skolemid |3411| :pattern ( (|#_module.config.Config| |a#146#0#0| |a#146#1#0| |a#146#2#0| |a#146#3#0| |a#146#4#0| |a#146#5#0| |a#146#6#0|)) )))
(assert (forall ((d@@68 T@U) ) (!  (=> (= (type d@@68) DatatypeTypeType) (and (=> (_module.config.Config_q d@@68) (= (DatatypeCtorId d@@68) |##_module.config.Config|)) (=> (= (DatatypeCtorId d@@68) |##_module.config.Config|) (_module.config.Config_q d@@68)))) :qid |unknown.0:0| :skolemid |3412| :pattern ( (_module.config.Config_q d@@68)) )))
(assert (forall ((d@@69 T@U) ) (!  (=> (and (= (type d@@69) DatatypeTypeType) (_module.config.Config_q d@@69)) (exists ((|a#147#0#0| T@U) (|a#147#1#0| T@U) (|a#147#2#0| T@U) (|a#147#3#0| Bool) (|a#147#4#0| T@U) (|a#147#5#0| Int) (|a#147#6#0| Int) ) (!  (and (and (and (and (= (type |a#147#0#0|) DatatypeTypeType) (= (type |a#147#1#0|) DatatypeTypeType)) (= (type |a#147#2#0|) DatatypeTypeType)) (= (type |a#147#4#0|) DatatypeTypeType)) (= d@@69 (|#_module.config.Config| |a#147#0#0| |a#147#1#0| |a#147#2#0| |a#147#3#0| |a#147#4#0| |a#147#5#0| |a#147#6#0|))) :qid |ARMdefsd.24:26| :skolemid |3413| :no-pattern (type |a#147#0#0|) :no-pattern (type |a#147#1#0|) :no-pattern (type |a#147#2#0|) :no-pattern (type |a#147#4#0|) :no-pattern (U_2_int |a#147#0#0|) :no-pattern (U_2_bool |a#147#0#0|) :no-pattern (U_2_int |a#147#1#0|) :no-pattern (U_2_bool |a#147#1#0|) :no-pattern (U_2_int |a#147#2#0|) :no-pattern (U_2_bool |a#147#2#0|) :no-pattern (U_2_int |a#147#4#0|) :no-pattern (U_2_bool |a#147#4#0|) ))) :qid |unknown.0:0| :skolemid |3414| :pattern ( (_module.config.Config_q d@@69)) )))
(assert (forall ((|a#148#0#0| T@U) (|a#148#1#0| T@U) (|a#148#2#0| T@U) (|a#148#3#0| Bool) (|a#148#4#0| T@U) (|a#148#5#0| Int) (|a#148#6#0| Int) ) (!  (=> (and (and (and (= (type |a#148#0#0|) DatatypeTypeType) (= (type |a#148#1#0|) DatatypeTypeType)) (= (type |a#148#2#0|) DatatypeTypeType)) (= (type |a#148#4#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.config.Config| |a#148#0#0| |a#148#1#0| |a#148#2#0| |a#148#3#0| |a#148#4#0| |a#148#5#0| |a#148#6#0|) Tclass._module.config) (and (and (and (and (and (and ($Is |a#148#0#0| Tclass._module.PSR) ($Is |a#148#1#0| Tclass._module.SCR)) ($Is |a#148#2#0| Tclass._module.TTBR)) ($Is (bool_2_U |a#148#3#0|) TBool)) ($Is |a#148#4#0| Tclass._module.exception)) ($Is (int_2_U |a#148#5#0|) Tclass._System.nat)) ($Is (int_2_U |a#148#6#0|) TInt))) (=> (and (and (and (and (and (and ($Is |a#148#0#0| Tclass._module.PSR) ($Is |a#148#1#0| Tclass._module.SCR)) ($Is |a#148#2#0| Tclass._module.TTBR)) ($Is (bool_2_U |a#148#3#0|) TBool)) ($Is |a#148#4#0| Tclass._module.exception)) ($Is (int_2_U |a#148#5#0|) Tclass._System.nat)) ($Is (int_2_U |a#148#6#0|) TInt)) ($Is (|#_module.config.Config| |a#148#0#0| |a#148#1#0| |a#148#2#0| |a#148#3#0| |a#148#4#0| |a#148#5#0| |a#148#6#0|) Tclass._module.config)))) :qid |ARMdefsd.24:26| :skolemid |3415| :pattern ( ($Is (|#_module.config.Config| |a#148#0#0| |a#148#1#0| |a#148#2#0| |a#148#3#0| |a#148#4#0| |a#148#5#0| |a#148#6#0|) Tclass._module.config)) )))
(assert (forall ((|a#149#0#0| T@U) (|a#149#1#0| T@U) (|a#149#2#0| T@U) (|a#149#3#0| Bool) (|a#149#4#0| T@U) (|a#149#5#0| Int) (|a#149#6#0| Int) ($h@@34 T@U) ) (!  (=> (and (and (and (and (and (= (type |a#149#0#0|) DatatypeTypeType) (= (type |a#149#1#0|) DatatypeTypeType)) (= (type |a#149#2#0|) DatatypeTypeType)) (= (type |a#149#4#0|) DatatypeTypeType)) (= (type $h@@34) (MapType1Type refType))) ($IsGoodHeap $h@@34)) (and (=> ($IsAlloc (|#_module.config.Config| |a#149#0#0| |a#149#1#0| |a#149#2#0| |a#149#3#0| |a#149#4#0| |a#149#5#0| |a#149#6#0|) Tclass._module.config $h@@34) (and (and (and (and (and (and ($IsAlloc |a#149#0#0| Tclass._module.PSR $h@@34) ($IsAlloc |a#149#1#0| Tclass._module.SCR $h@@34)) ($IsAlloc |a#149#2#0| Tclass._module.TTBR $h@@34)) ($IsAlloc (bool_2_U |a#149#3#0|) TBool $h@@34)) ($IsAlloc |a#149#4#0| Tclass._module.exception $h@@34)) ($IsAlloc (int_2_U |a#149#5#0|) Tclass._System.nat $h@@34)) ($IsAlloc (int_2_U |a#149#6#0|) TInt $h@@34))) (=> (and (and (and (and (and (and ($IsAlloc |a#149#0#0| Tclass._module.PSR $h@@34) ($IsAlloc |a#149#1#0| Tclass._module.SCR $h@@34)) ($IsAlloc |a#149#2#0| Tclass._module.TTBR $h@@34)) ($IsAlloc (bool_2_U |a#149#3#0|) TBool $h@@34)) ($IsAlloc |a#149#4#0| Tclass._module.exception $h@@34)) ($IsAlloc (int_2_U |a#149#5#0|) Tclass._System.nat $h@@34)) ($IsAlloc (int_2_U |a#149#6#0|) TInt $h@@34)) ($IsAlloc (|#_module.config.Config| |a#149#0#0| |a#149#1#0| |a#149#2#0| |a#149#3#0| |a#149#4#0| |a#149#5#0| |a#149#6#0|) Tclass._module.config $h@@34)))) :qid |ARMdefsd.24:26| :skolemid |3416| :pattern ( ($IsAlloc (|#_module.config.Config| |a#149#0#0| |a#149#1#0| |a#149#2#0| |a#149#3#0| |a#149#4#0| |a#149#5#0| |a#149#6#0|) Tclass._module.config $h@@34)) )))
(assert (forall ((|a#150#0#0| T@U) (|a#150#1#0| T@U) (|a#150#2#0| T@U) (|a#150#3#0| T@U) (|a#150#4#0| T@U) (|a#150#5#0| Int) (|a#150#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#150#0#0|) DatatypeTypeType) (= (type |a#150#1#0|) DatatypeTypeType)) (= (type |a#150#2#0|) DatatypeTypeType)) (= (type |a#150#3#0|) boolType)) (= (type |a#150#4#0|) DatatypeTypeType)) (= (|#_module.config.Config| (Lit |a#150#0#0|) (Lit |a#150#1#0|) (Lit |a#150#2#0|) (U_2_bool (Lit |a#150#3#0|)) (Lit |a#150#4#0|) (LitInt |a#150#5#0|) (LitInt |a#150#6#0|)) (Lit (|#_module.config.Config| |a#150#0#0| |a#150#1#0| |a#150#2#0| (U_2_bool |a#150#3#0|) |a#150#4#0| |a#150#5#0| |a#150#6#0|)))) :qid |ARMdefsd.24:26| :skolemid |3417| :pattern ( (|#_module.config.Config| (Lit |a#150#0#0|) (Lit |a#150#1#0|) (Lit |a#150#2#0|) (U_2_bool (Lit |a#150#3#0|)) (Lit |a#150#4#0|) (LitInt |a#150#5#0|) (LitInt |a#150#6#0|))) )))
(assert (forall ((|a#151#0#0| T@U) (|a#151#1#0| T@U) (|a#151#2#0| T@U) (|a#151#3#0| Bool) (|a#151#4#0| T@U) (|a#151#5#0| Int) (|a#151#6#0| Int) ) (!  (=> (and (and (and (= (type |a#151#0#0|) DatatypeTypeType) (= (type |a#151#1#0|) DatatypeTypeType)) (= (type |a#151#2#0|) DatatypeTypeType)) (= (type |a#151#4#0|) DatatypeTypeType)) (= (_module.config.cpsr (|#_module.config.Config| |a#151#0#0| |a#151#1#0| |a#151#2#0| |a#151#3#0| |a#151#4#0| |a#151#5#0| |a#151#6#0|)) |a#151#0#0|)) :qid |ARMdefsd.24:26| :skolemid |3418| :pattern ( (|#_module.config.Config| |a#151#0#0| |a#151#1#0| |a#151#2#0| |a#151#3#0| |a#151#4#0| |a#151#5#0| |a#151#6#0|)) )))
(assert (forall ((|a#152#0#0| T@U) (|a#152#1#0| T@U) (|a#152#2#0| T@U) (|a#152#3#0| Bool) (|a#152#4#0| T@U) (|a#152#5#0| Int) (|a#152#6#0| Int) ) (!  (=> (and (and (and (= (type |a#152#0#0|) DatatypeTypeType) (= (type |a#152#1#0|) DatatypeTypeType)) (= (type |a#152#2#0|) DatatypeTypeType)) (= (type |a#152#4#0|) DatatypeTypeType)) (< (DtRank |a#152#0#0|) (DtRank (|#_module.config.Config| |a#152#0#0| |a#152#1#0| |a#152#2#0| |a#152#3#0| |a#152#4#0| |a#152#5#0| |a#152#6#0|)))) :qid |ARMdefsd.24:26| :skolemid |3419| :pattern ( (|#_module.config.Config| |a#152#0#0| |a#152#1#0| |a#152#2#0| |a#152#3#0| |a#152#4#0| |a#152#5#0| |a#152#6#0|)) )))
(assert (forall ((|a#153#0#0| T@U) (|a#153#1#0| T@U) (|a#153#2#0| T@U) (|a#153#3#0| Bool) (|a#153#4#0| T@U) (|a#153#5#0| Int) (|a#153#6#0| Int) ) (!  (=> (and (and (and (= (type |a#153#0#0|) DatatypeTypeType) (= (type |a#153#1#0|) DatatypeTypeType)) (= (type |a#153#2#0|) DatatypeTypeType)) (= (type |a#153#4#0|) DatatypeTypeType)) (= (_module.config.scr (|#_module.config.Config| |a#153#0#0| |a#153#1#0| |a#153#2#0| |a#153#3#0| |a#153#4#0| |a#153#5#0| |a#153#6#0|)) |a#153#1#0|)) :qid |ARMdefsd.24:26| :skolemid |3420| :pattern ( (|#_module.config.Config| |a#153#0#0| |a#153#1#0| |a#153#2#0| |a#153#3#0| |a#153#4#0| |a#153#5#0| |a#153#6#0|)) )))
(assert (forall ((|a#154#0#0| T@U) (|a#154#1#0| T@U) (|a#154#2#0| T@U) (|a#154#3#0| Bool) (|a#154#4#0| T@U) (|a#154#5#0| Int) (|a#154#6#0| Int) ) (!  (=> (and (and (and (= (type |a#154#0#0|) DatatypeTypeType) (= (type |a#154#1#0|) DatatypeTypeType)) (= (type |a#154#2#0|) DatatypeTypeType)) (= (type |a#154#4#0|) DatatypeTypeType)) (< (DtRank |a#154#1#0|) (DtRank (|#_module.config.Config| |a#154#0#0| |a#154#1#0| |a#154#2#0| |a#154#3#0| |a#154#4#0| |a#154#5#0| |a#154#6#0|)))) :qid |ARMdefsd.24:26| :skolemid |3421| :pattern ( (|#_module.config.Config| |a#154#0#0| |a#154#1#0| |a#154#2#0| |a#154#3#0| |a#154#4#0| |a#154#5#0| |a#154#6#0|)) )))
(assert (forall ((|a#155#0#0| T@U) (|a#155#1#0| T@U) (|a#155#2#0| T@U) (|a#155#3#0| Bool) (|a#155#4#0| T@U) (|a#155#5#0| Int) (|a#155#6#0| Int) ) (!  (=> (and (and (and (= (type |a#155#0#0|) DatatypeTypeType) (= (type |a#155#1#0|) DatatypeTypeType)) (= (type |a#155#2#0|) DatatypeTypeType)) (= (type |a#155#4#0|) DatatypeTypeType)) (= (_module.config.ttbr0 (|#_module.config.Config| |a#155#0#0| |a#155#1#0| |a#155#2#0| |a#155#3#0| |a#155#4#0| |a#155#5#0| |a#155#6#0|)) |a#155#2#0|)) :qid |ARMdefsd.24:26| :skolemid |3422| :pattern ( (|#_module.config.Config| |a#155#0#0| |a#155#1#0| |a#155#2#0| |a#155#3#0| |a#155#4#0| |a#155#5#0| |a#155#6#0|)) )))
(assert (forall ((|a#156#0#0| T@U) (|a#156#1#0| T@U) (|a#156#2#0| T@U) (|a#156#3#0| Bool) (|a#156#4#0| T@U) (|a#156#5#0| Int) (|a#156#6#0| Int) ) (!  (=> (and (and (and (= (type |a#156#0#0|) DatatypeTypeType) (= (type |a#156#1#0|) DatatypeTypeType)) (= (type |a#156#2#0|) DatatypeTypeType)) (= (type |a#156#4#0|) DatatypeTypeType)) (< (DtRank |a#156#2#0|) (DtRank (|#_module.config.Config| |a#156#0#0| |a#156#1#0| |a#156#2#0| |a#156#3#0| |a#156#4#0| |a#156#5#0| |a#156#6#0|)))) :qid |ARMdefsd.24:26| :skolemid |3423| :pattern ( (|#_module.config.Config| |a#156#0#0| |a#156#1#0| |a#156#2#0| |a#156#3#0| |a#156#4#0| |a#156#5#0| |a#156#6#0|)) )))
(assert (forall ((|a#157#0#0| T@U) (|a#157#1#0| T@U) (|a#157#2#0| T@U) (|a#157#3#0| Bool) (|a#157#4#0| T@U) (|a#157#5#0| Int) (|a#157#6#0| Int) ) (!  (=> (and (and (and (= (type |a#157#0#0|) DatatypeTypeType) (= (type |a#157#1#0|) DatatypeTypeType)) (= (type |a#157#2#0|) DatatypeTypeType)) (= (type |a#157#4#0|) DatatypeTypeType)) (and (=> (_module.config.tlb__consistent (|#_module.config.Config| |a#157#0#0| |a#157#1#0| |a#157#2#0| |a#157#3#0| |a#157#4#0| |a#157#5#0| |a#157#6#0|)) |a#157#3#0|) (=> |a#157#3#0| (_module.config.tlb__consistent (|#_module.config.Config| |a#157#0#0| |a#157#1#0| |a#157#2#0| |a#157#3#0| |a#157#4#0| |a#157#5#0| |a#157#6#0|))))) :qid |ARMdefsd.24:26| :skolemid |3424| :pattern ( (|#_module.config.Config| |a#157#0#0| |a#157#1#0| |a#157#2#0| |a#157#3#0| |a#157#4#0| |a#157#5#0| |a#157#6#0|)) )))
(assert (forall ((|a#158#0#0| T@U) (|a#158#1#0| T@U) (|a#158#2#0| T@U) (|a#158#3#0| Bool) (|a#158#4#0| T@U) (|a#158#5#0| Int) (|a#158#6#0| Int) ) (!  (=> (and (and (and (= (type |a#158#0#0|) DatatypeTypeType) (= (type |a#158#1#0|) DatatypeTypeType)) (= (type |a#158#2#0|) DatatypeTypeType)) (= (type |a#158#4#0|) DatatypeTypeType)) (= (_module.config.ex (|#_module.config.Config| |a#158#0#0| |a#158#1#0| |a#158#2#0| |a#158#3#0| |a#158#4#0| |a#158#5#0| |a#158#6#0|)) |a#158#4#0|)) :qid |ARMdefsd.24:26| :skolemid |3425| :pattern ( (|#_module.config.Config| |a#158#0#0| |a#158#1#0| |a#158#2#0| |a#158#3#0| |a#158#4#0| |a#158#5#0| |a#158#6#0|)) )))
(assert (forall ((|a#159#0#0| T@U) (|a#159#1#0| T@U) (|a#159#2#0| T@U) (|a#159#3#0| Bool) (|a#159#4#0| T@U) (|a#159#5#0| Int) (|a#159#6#0| Int) ) (!  (=> (and (and (and (= (type |a#159#0#0|) DatatypeTypeType) (= (type |a#159#1#0|) DatatypeTypeType)) (= (type |a#159#2#0|) DatatypeTypeType)) (= (type |a#159#4#0|) DatatypeTypeType)) (< (DtRank |a#159#4#0|) (DtRank (|#_module.config.Config| |a#159#0#0| |a#159#1#0| |a#159#2#0| |a#159#3#0| |a#159#4#0| |a#159#5#0| |a#159#6#0|)))) :qid |ARMdefsd.24:26| :skolemid |3426| :pattern ( (|#_module.config.Config| |a#159#0#0| |a#159#1#0| |a#159#2#0| |a#159#3#0| |a#159#4#0| |a#159#5#0| |a#159#6#0|)) )))
(assert (forall ((|a#160#0#0| T@U) (|a#160#1#0| T@U) (|a#160#2#0| T@U) (|a#160#3#0| Bool) (|a#160#4#0| T@U) (|a#160#5#0| Int) (|a#160#6#0| Int) ) (!  (=> (and (and (and (= (type |a#160#0#0|) DatatypeTypeType) (= (type |a#160#1#0|) DatatypeTypeType)) (= (type |a#160#2#0|) DatatypeTypeType)) (= (type |a#160#4#0|) DatatypeTypeType)) (= (_module.config.exstep (|#_module.config.Config| |a#160#0#0| |a#160#1#0| |a#160#2#0| |a#160#3#0| |a#160#4#0| |a#160#5#0| |a#160#6#0|)) |a#160#5#0|)) :qid |ARMdefsd.24:26| :skolemid |3427| :pattern ( (|#_module.config.Config| |a#160#0#0| |a#160#1#0| |a#160#2#0| |a#160#3#0| |a#160#4#0| |a#160#5#0| |a#160#6#0|)) )))
(assert (forall ((|a#161#0#0| T@U) (|a#161#1#0| T@U) (|a#161#2#0| T@U) (|a#161#3#0| Bool) (|a#161#4#0| T@U) (|a#161#5#0| Int) (|a#161#6#0| Int) ) (!  (=> (and (and (and (= (type |a#161#0#0|) DatatypeTypeType) (= (type |a#161#1#0|) DatatypeTypeType)) (= (type |a#161#2#0|) DatatypeTypeType)) (= (type |a#161#4#0|) DatatypeTypeType)) (= (_module.config.nondet (|#_module.config.Config| |a#161#0#0| |a#161#1#0| |a#161#2#0| |a#161#3#0| |a#161#4#0| |a#161#5#0| |a#161#6#0|)) |a#161#6#0|)) :qid |ARMdefsd.24:26| :skolemid |3428| :pattern ( (|#_module.config.Config| |a#161#0#0| |a#161#1#0| |a#161#2#0| |a#161#3#0| |a#161#4#0| |a#161#5#0| |a#161#6#0|)) )))
(assert (forall ((d@@70 T@U) ) (!  (=> (and (= (type d@@70) DatatypeTypeType) (|$IsA#_module.config| d@@70)) (_module.config.Config_q d@@70)) :qid |unknown.0:0| :skolemid |3429| :pattern ( (|$IsA#_module.config| d@@70)) )))
(assert (forall ((d@@71 T@U) ) (!  (=> (and (= (type d@@71) DatatypeTypeType) ($Is d@@71 Tclass._module.config)) (_module.config.Config_q d@@71)) :qid |unknown.0:0| :skolemid |3430| :pattern ( (_module.config.Config_q d@@71) ($Is d@@71 Tclass._module.config)) )))
(assert (forall ((|a#162#0#0| T@U) (|a#162#1#0| Bool) (|a#162#2#0| Bool) ) (!  (=> (= (type |a#162#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.PSR.PSR| |a#162#0#0| |a#162#1#0| |a#162#2#0|)) |##_module.PSR.PSR|)) :qid |ARMdefsd.26:21| :skolemid |3431| :pattern ( (|#_module.PSR.PSR| |a#162#0#0| |a#162#1#0| |a#162#2#0|)) )))
(assert (forall ((d@@72 T@U) ) (!  (=> (= (type d@@72) DatatypeTypeType) (and (=> (_module.PSR.PSR_q d@@72) (= (DatatypeCtorId d@@72) |##_module.PSR.PSR|)) (=> (= (DatatypeCtorId d@@72) |##_module.PSR.PSR|) (_module.PSR.PSR_q d@@72)))) :qid |unknown.0:0| :skolemid |3432| :pattern ( (_module.PSR.PSR_q d@@72)) )))
(assert (forall ((d@@73 T@U) ) (!  (=> (and (= (type d@@73) DatatypeTypeType) (_module.PSR.PSR_q d@@73)) (exists ((|a#163#0#0| T@U) (|a#163#1#0| Bool) (|a#163#2#0| Bool) ) (!  (and (= (type |a#163#0#0|) DatatypeTypeType) (= d@@73 (|#_module.PSR.PSR| |a#163#0#0| |a#163#1#0| |a#163#2#0|))) :qid |ARMdefsd.26:21| :skolemid |3433| :no-pattern (type |a#163#0#0|) :no-pattern (U_2_int |a#163#0#0|) :no-pattern (U_2_bool |a#163#0#0|) ))) :qid |unknown.0:0| :skolemid |3434| :pattern ( (_module.PSR.PSR_q d@@73)) )))
(assert (forall ((|a#164#0#0| T@U) (|a#164#1#0| Bool) (|a#164#2#0| Bool) ) (!  (=> (= (type |a#164#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.PSR.PSR| |a#164#0#0| |a#164#1#0| |a#164#2#0|) Tclass._module.PSR) (and (and ($Is |a#164#0#0| Tclass._module.mode) ($Is (bool_2_U |a#164#1#0|) TBool)) ($Is (bool_2_U |a#164#2#0|) TBool))) (=> (and (and ($Is |a#164#0#0| Tclass._module.mode) ($Is (bool_2_U |a#164#1#0|) TBool)) ($Is (bool_2_U |a#164#2#0|) TBool)) ($Is (|#_module.PSR.PSR| |a#164#0#0| |a#164#1#0| |a#164#2#0|) Tclass._module.PSR)))) :qid |ARMdefsd.26:21| :skolemid |3435| :pattern ( ($Is (|#_module.PSR.PSR| |a#164#0#0| |a#164#1#0| |a#164#2#0|) Tclass._module.PSR)) )))
(assert (forall ((|a#165#0#0| T@U) (|a#165#1#0| Bool) (|a#165#2#0| Bool) ($h@@35 T@U) ) (!  (=> (and (and (= (type |a#165#0#0|) DatatypeTypeType) (= (type $h@@35) (MapType1Type refType))) ($IsGoodHeap $h@@35)) (and (=> ($IsAlloc (|#_module.PSR.PSR| |a#165#0#0| |a#165#1#0| |a#165#2#0|) Tclass._module.PSR $h@@35) (and (and ($IsAlloc |a#165#0#0| Tclass._module.mode $h@@35) ($IsAlloc (bool_2_U |a#165#1#0|) TBool $h@@35)) ($IsAlloc (bool_2_U |a#165#2#0|) TBool $h@@35))) (=> (and (and ($IsAlloc |a#165#0#0| Tclass._module.mode $h@@35) ($IsAlloc (bool_2_U |a#165#1#0|) TBool $h@@35)) ($IsAlloc (bool_2_U |a#165#2#0|) TBool $h@@35)) ($IsAlloc (|#_module.PSR.PSR| |a#165#0#0| |a#165#1#0| |a#165#2#0|) Tclass._module.PSR $h@@35)))) :qid |ARMdefsd.26:21| :skolemid |3436| :pattern ( ($IsAlloc (|#_module.PSR.PSR| |a#165#0#0| |a#165#1#0| |a#165#2#0|) Tclass._module.PSR $h@@35)) )))
(assert (forall ((|a#166#0#0| T@U) (|a#166#1#0| T@U) (|a#166#2#0| T@U) ) (!  (=> (and (and (= (type |a#166#0#0|) DatatypeTypeType) (= (type |a#166#1#0|) boolType)) (= (type |a#166#2#0|) boolType)) (= (|#_module.PSR.PSR| (Lit |a#166#0#0|) (U_2_bool (Lit |a#166#1#0|)) (U_2_bool (Lit |a#166#2#0|))) (Lit (|#_module.PSR.PSR| |a#166#0#0| (U_2_bool |a#166#1#0|) (U_2_bool |a#166#2#0|))))) :qid |ARMdefsd.26:21| :skolemid |3437| :pattern ( (|#_module.PSR.PSR| (Lit |a#166#0#0|) (U_2_bool (Lit |a#166#1#0|)) (U_2_bool (Lit |a#166#2#0|)))) )))
(assert (forall ((|a#167#0#0| T@U) (|a#167#1#0| Bool) (|a#167#2#0| Bool) ) (!  (=> (= (type |a#167#0#0|) DatatypeTypeType) (= (_module.PSR.m (|#_module.PSR.PSR| |a#167#0#0| |a#167#1#0| |a#167#2#0|)) |a#167#0#0|)) :qid |ARMdefsd.26:21| :skolemid |3438| :pattern ( (|#_module.PSR.PSR| |a#167#0#0| |a#167#1#0| |a#167#2#0|)) )))
(assert (forall ((|a#168#0#0| T@U) (|a#168#1#0| Bool) (|a#168#2#0| Bool) ) (!  (=> (= (type |a#168#0#0|) DatatypeTypeType) (< (DtRank |a#168#0#0|) (DtRank (|#_module.PSR.PSR| |a#168#0#0| |a#168#1#0| |a#168#2#0|)))) :qid |ARMdefsd.26:21| :skolemid |3439| :pattern ( (|#_module.PSR.PSR| |a#168#0#0| |a#168#1#0| |a#168#2#0|)) )))
(assert (forall ((|a#169#0#0| T@U) (|a#169#1#0| Bool) (|a#169#2#0| Bool) ) (!  (=> (= (type |a#169#0#0|) DatatypeTypeType) (and (=> (_module.PSR.f (|#_module.PSR.PSR| |a#169#0#0| |a#169#1#0| |a#169#2#0|)) |a#169#1#0|) (=> |a#169#1#0| (_module.PSR.f (|#_module.PSR.PSR| |a#169#0#0| |a#169#1#0| |a#169#2#0|))))) :qid |ARMdefsd.26:21| :skolemid |3440| :pattern ( (|#_module.PSR.PSR| |a#169#0#0| |a#169#1#0| |a#169#2#0|)) )))
(assert (forall ((|a#170#0#0| T@U) (|a#170#1#0| Bool) (|a#170#2#0| Bool) ) (!  (=> (= (type |a#170#0#0|) DatatypeTypeType) (and (=> (_module.PSR.i (|#_module.PSR.PSR| |a#170#0#0| |a#170#1#0| |a#170#2#0|)) |a#170#2#0|) (=> |a#170#2#0| (_module.PSR.i (|#_module.PSR.PSR| |a#170#0#0| |a#170#1#0| |a#170#2#0|))))) :qid |ARMdefsd.26:21| :skolemid |3441| :pattern ( (|#_module.PSR.PSR| |a#170#0#0| |a#170#1#0| |a#170#2#0|)) )))
(assert (forall ((d@@74 T@U) ) (!  (=> (and (= (type d@@74) DatatypeTypeType) (|$IsA#_module.PSR| d@@74)) (_module.PSR.PSR_q d@@74)) :qid |unknown.0:0| :skolemid |3442| :pattern ( (|$IsA#_module.PSR| d@@74)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (and (= (type d@@75) DatatypeTypeType) ($Is d@@75 Tclass._module.PSR)) (_module.PSR.PSR_q d@@75)) :qid |unknown.0:0| :skolemid |3443| :pattern ( (_module.PSR.PSR_q d@@75) ($Is d@@75 Tclass._module.PSR)) )))
(assert (forall ((|a#171#0#0| T@U) (|a#171#1#0| Bool) (|a#171#2#0| Bool) ) (!  (=> (= (type |a#171#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.SCR.SCRT| |a#171#0#0| |a#171#1#0| |a#171#2#0|)) |##_module.SCR.SCRT|)) :qid |ARMdefsd.27:22| :skolemid |3444| :pattern ( (|#_module.SCR.SCRT| |a#171#0#0| |a#171#1#0| |a#171#2#0|)) )))
(assert (forall ((d@@76 T@U) ) (!  (=> (= (type d@@76) DatatypeTypeType) (and (=> (_module.SCR.SCRT_q d@@76) (= (DatatypeCtorId d@@76) |##_module.SCR.SCRT|)) (=> (= (DatatypeCtorId d@@76) |##_module.SCR.SCRT|) (_module.SCR.SCRT_q d@@76)))) :qid |unknown.0:0| :skolemid |3445| :pattern ( (_module.SCR.SCRT_q d@@76)) )))
(assert (forall ((d@@77 T@U) ) (!  (=> (and (= (type d@@77) DatatypeTypeType) (_module.SCR.SCRT_q d@@77)) (exists ((|a#172#0#0| T@U) (|a#172#1#0| Bool) (|a#172#2#0| Bool) ) (!  (and (= (type |a#172#0#0|) DatatypeTypeType) (= d@@77 (|#_module.SCR.SCRT| |a#172#0#0| |a#172#1#0| |a#172#2#0|))) :qid |ARMdefsd.27:22| :skolemid |3446| :no-pattern (type |a#172#0#0|) :no-pattern (U_2_int |a#172#0#0|) :no-pattern (U_2_bool |a#172#0#0|) ))) :qid |unknown.0:0| :skolemid |3447| :pattern ( (_module.SCR.SCRT_q d@@77)) )))
(assert (forall ((|a#173#0#0| T@U) (|a#173#1#0| Bool) (|a#173#2#0| Bool) ) (!  (=> (= (type |a#173#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.SCR.SCRT| |a#173#0#0| |a#173#1#0| |a#173#2#0|) Tclass._module.SCR) (and (and ($Is |a#173#0#0| Tclass._module.world) ($Is (bool_2_U |a#173#1#0|) TBool)) ($Is (bool_2_U |a#173#2#0|) TBool))) (=> (and (and ($Is |a#173#0#0| Tclass._module.world) ($Is (bool_2_U |a#173#1#0|) TBool)) ($Is (bool_2_U |a#173#2#0|) TBool)) ($Is (|#_module.SCR.SCRT| |a#173#0#0| |a#173#1#0| |a#173#2#0|) Tclass._module.SCR)))) :qid |ARMdefsd.27:22| :skolemid |3448| :pattern ( ($Is (|#_module.SCR.SCRT| |a#173#0#0| |a#173#1#0| |a#173#2#0|) Tclass._module.SCR)) )))
(assert (forall ((|a#174#0#0| T@U) (|a#174#1#0| Bool) (|a#174#2#0| Bool) ($h@@36 T@U) ) (!  (=> (and (and (= (type |a#174#0#0|) DatatypeTypeType) (= (type $h@@36) (MapType1Type refType))) ($IsGoodHeap $h@@36)) (and (=> ($IsAlloc (|#_module.SCR.SCRT| |a#174#0#0| |a#174#1#0| |a#174#2#0|) Tclass._module.SCR $h@@36) (and (and ($IsAlloc |a#174#0#0| Tclass._module.world $h@@36) ($IsAlloc (bool_2_U |a#174#1#0|) TBool $h@@36)) ($IsAlloc (bool_2_U |a#174#2#0|) TBool $h@@36))) (=> (and (and ($IsAlloc |a#174#0#0| Tclass._module.world $h@@36) ($IsAlloc (bool_2_U |a#174#1#0|) TBool $h@@36)) ($IsAlloc (bool_2_U |a#174#2#0|) TBool $h@@36)) ($IsAlloc (|#_module.SCR.SCRT| |a#174#0#0| |a#174#1#0| |a#174#2#0|) Tclass._module.SCR $h@@36)))) :qid |ARMdefsd.27:22| :skolemid |3449| :pattern ( ($IsAlloc (|#_module.SCR.SCRT| |a#174#0#0| |a#174#1#0| |a#174#2#0|) Tclass._module.SCR $h@@36)) )))
(assert (forall ((|a#175#0#0| T@U) (|a#175#1#0| T@U) (|a#175#2#0| T@U) ) (!  (=> (and (and (= (type |a#175#0#0|) DatatypeTypeType) (= (type |a#175#1#0|) boolType)) (= (type |a#175#2#0|) boolType)) (= (|#_module.SCR.SCRT| (Lit |a#175#0#0|) (U_2_bool (Lit |a#175#1#0|)) (U_2_bool (Lit |a#175#2#0|))) (Lit (|#_module.SCR.SCRT| |a#175#0#0| (U_2_bool |a#175#1#0|) (U_2_bool |a#175#2#0|))))) :qid |ARMdefsd.27:22| :skolemid |3450| :pattern ( (|#_module.SCR.SCRT| (Lit |a#175#0#0|) (U_2_bool (Lit |a#175#1#0|)) (U_2_bool (Lit |a#175#2#0|)))) )))
(assert (forall ((|a#176#0#0| T@U) (|a#176#1#0| Bool) (|a#176#2#0| Bool) ) (!  (=> (= (type |a#176#0#0|) DatatypeTypeType) (= (_module.SCR.ns (|#_module.SCR.SCRT| |a#176#0#0| |a#176#1#0| |a#176#2#0|)) |a#176#0#0|)) :qid |ARMdefsd.27:22| :skolemid |3451| :pattern ( (|#_module.SCR.SCRT| |a#176#0#0| |a#176#1#0| |a#176#2#0|)) )))
(assert (forall ((|a#177#0#0| T@U) (|a#177#1#0| Bool) (|a#177#2#0| Bool) ) (!  (=> (= (type |a#177#0#0|) DatatypeTypeType) (< (DtRank |a#177#0#0|) (DtRank (|#_module.SCR.SCRT| |a#177#0#0| |a#177#1#0| |a#177#2#0|)))) :qid |ARMdefsd.27:22| :skolemid |3452| :pattern ( (|#_module.SCR.SCRT| |a#177#0#0| |a#177#1#0| |a#177#2#0|)) )))
(assert (forall ((|a#178#0#0| T@U) (|a#178#1#0| Bool) (|a#178#2#0| Bool) ) (!  (=> (= (type |a#178#0#0|) DatatypeTypeType) (and (=> (_module.SCR.irq (|#_module.SCR.SCRT| |a#178#0#0| |a#178#1#0| |a#178#2#0|)) |a#178#1#0|) (=> |a#178#1#0| (_module.SCR.irq (|#_module.SCR.SCRT| |a#178#0#0| |a#178#1#0| |a#178#2#0|))))) :qid |ARMdefsd.27:22| :skolemid |3453| :pattern ( (|#_module.SCR.SCRT| |a#178#0#0| |a#178#1#0| |a#178#2#0|)) )))
(assert (forall ((|a#179#0#0| T@U) (|a#179#1#0| Bool) (|a#179#2#0| Bool) ) (!  (=> (= (type |a#179#0#0|) DatatypeTypeType) (and (=> (_module.SCR.fiq (|#_module.SCR.SCRT| |a#179#0#0| |a#179#1#0| |a#179#2#0|)) |a#179#2#0|) (=> |a#179#2#0| (_module.SCR.fiq (|#_module.SCR.SCRT| |a#179#0#0| |a#179#1#0| |a#179#2#0|))))) :qid |ARMdefsd.27:22| :skolemid |3454| :pattern ( (|#_module.SCR.SCRT| |a#179#0#0| |a#179#1#0| |a#179#2#0|)) )))
(assert (forall ((d@@78 T@U) ) (!  (=> (and (= (type d@@78) DatatypeTypeType) (|$IsA#_module.SCR| d@@78)) (_module.SCR.SCRT_q d@@78)) :qid |unknown.0:0| :skolemid |3455| :pattern ( (|$IsA#_module.SCR| d@@78)) )))
(assert (forall ((d@@79 T@U) ) (!  (=> (and (= (type d@@79) DatatypeTypeType) ($Is d@@79 Tclass._module.SCR)) (_module.SCR.SCRT_q d@@79)) :qid |unknown.0:0| :skolemid |3456| :pattern ( (_module.SCR.SCRT_q d@@79) ($Is d@@79 Tclass._module.SCR)) )))
(assert (forall ((|a#180#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.TTBR.TTBR| |a#180#0#0|)) |##_module.TTBR.TTBR|) :qid |ARMdefsd.28:22| :skolemid |3457| :pattern ( (|#_module.TTBR.TTBR| |a#180#0#0|)) )))
(assert (forall ((d@@80 T@U) ) (!  (=> (= (type d@@80) DatatypeTypeType) (and (=> (_module.TTBR.TTBR_q d@@80) (= (DatatypeCtorId d@@80) |##_module.TTBR.TTBR|)) (=> (= (DatatypeCtorId d@@80) |##_module.TTBR.TTBR|) (_module.TTBR.TTBR_q d@@80)))) :qid |unknown.0:0| :skolemid |3458| :pattern ( (_module.TTBR.TTBR_q d@@80)) )))
(assert (forall ((d@@81 T@U) ) (!  (=> (and (= (type d@@81) DatatypeTypeType) (_module.TTBR.TTBR_q d@@81)) (exists ((|a#181#0#0| Int) ) (! (= d@@81 (|#_module.TTBR.TTBR| |a#181#0#0|)) :qid |ARMdefsd.28:22| :skolemid |3459| ))) :qid |unknown.0:0| :skolemid |3460| :pattern ( (_module.TTBR.TTBR_q d@@81)) )))
(assert (forall ((|a#182#0#0| Int) ) (!  (and (=> ($Is (|#_module.TTBR.TTBR| |a#182#0#0|) Tclass._module.TTBR) ($Is (int_2_U |a#182#0#0|) Tclass._module.addr)) (=> ($Is (int_2_U |a#182#0#0|) Tclass._module.addr) ($Is (|#_module.TTBR.TTBR| |a#182#0#0|) Tclass._module.TTBR))) :qid |ARMdefsd.28:22| :skolemid |3461| :pattern ( ($Is (|#_module.TTBR.TTBR| |a#182#0#0|) Tclass._module.TTBR)) )))
(assert (forall ((|a#183#0#0| Int) ($h@@37 T@U) ) (!  (=> (and (= (type $h@@37) (MapType1Type refType)) ($IsGoodHeap $h@@37)) (and (=> ($IsAlloc (|#_module.TTBR.TTBR| |a#183#0#0|) Tclass._module.TTBR $h@@37) ($IsAlloc (int_2_U |a#183#0#0|) Tclass._module.addr $h@@37)) (=> ($IsAlloc (int_2_U |a#183#0#0|) Tclass._module.addr $h@@37) ($IsAlloc (|#_module.TTBR.TTBR| |a#183#0#0|) Tclass._module.TTBR $h@@37)))) :qid |ARMdefsd.28:22| :skolemid |3462| :pattern ( ($IsAlloc (|#_module.TTBR.TTBR| |a#183#0#0|) Tclass._module.TTBR $h@@37)) )))
(assert (forall ((|a#184#0#0| Int) ) (! (= (|#_module.TTBR.TTBR| (LitInt |a#184#0#0|)) (Lit (|#_module.TTBR.TTBR| |a#184#0#0|))) :qid |ARMdefsd.28:22| :skolemid |3463| :pattern ( (|#_module.TTBR.TTBR| (LitInt |a#184#0#0|))) )))
(assert (forall ((|a#185#0#0| Int) ) (! (= (_module.TTBR.ptbase (|#_module.TTBR.TTBR| |a#185#0#0|)) |a#185#0#0|) :qid |ARMdefsd.28:22| :skolemid |3464| :pattern ( (|#_module.TTBR.TTBR| |a#185#0#0|)) )))
(assert (forall ((d@@82 T@U) ) (!  (=> (and (= (type d@@82) DatatypeTypeType) (|$IsA#_module.TTBR| d@@82)) (_module.TTBR.TTBR_q d@@82)) :qid |unknown.0:0| :skolemid |3465| :pattern ( (|$IsA#_module.TTBR| d@@82)) )))
(assert (forall ((d@@83 T@U) ) (!  (=> (and (= (type d@@83) DatatypeTypeType) ($Is d@@83 Tclass._module.TTBR)) (_module.TTBR.TTBR_q d@@83)) :qid |unknown.0:0| :skolemid |3466| :pattern ( (_module.TTBR.TTBR_q d@@83) ($Is d@@83 Tclass._module.TTBR)) )))
(assert (forall ((|a#186#0#0| Int) (|a#186#1#0| Bool) (|a#186#2#0| Bool) ) (! (= (DatatypeCtorId (|#_module.RNG.RNG| |a#186#0#0| |a#186#1#0| |a#186#2#0|)) |##_module.RNG.RNG|) :qid |ARMdefsd.32:20| :skolemid |3467| :pattern ( (|#_module.RNG.RNG| |a#186#0#0| |a#186#1#0| |a#186#2#0|)) )))
(assert (forall ((d@@84 T@U) ) (!  (=> (= (type d@@84) DatatypeTypeType) (and (=> (_module.RNG.RNG_q d@@84) (= (DatatypeCtorId d@@84) |##_module.RNG.RNG|)) (=> (= (DatatypeCtorId d@@84) |##_module.RNG.RNG|) (_module.RNG.RNG_q d@@84)))) :qid |unknown.0:0| :skolemid |3468| :pattern ( (_module.RNG.RNG_q d@@84)) )))
(assert (forall ((d@@85 T@U) ) (!  (=> (and (= (type d@@85) DatatypeTypeType) (_module.RNG.RNG_q d@@85)) (exists ((|a#187#0#0| Int) (|a#187#1#0| Bool) (|a#187#2#0| Bool) ) (! (= d@@85 (|#_module.RNG.RNG| |a#187#0#0| |a#187#1#0| |a#187#2#0|)) :qid |ARMdefsd.32:20| :skolemid |3469| ))) :qid |unknown.0:0| :skolemid |3470| :pattern ( (_module.RNG.RNG_q d@@85)) )))
(assert (= (type Tclass._module.RNG) TyType))
(assert (= (Tag Tclass._module.RNG) Tagclass._module.RNG))
(assert (forall ((bx@@113 T@U) ) (!  (=> (and (= (type bx@@113) BoxType) ($IsBox bx@@113 Tclass._module.RNG)) (and (= ($Box ($Unbox DatatypeTypeType bx@@113)) bx@@113) ($Is ($Unbox DatatypeTypeType bx@@113) Tclass._module.RNG))) :qid |unknown.0:0| :skolemid |3471| :pattern ( ($IsBox bx@@113 Tclass._module.RNG)) )))
(assert (forall ((|a#188#0#0| Int) (|a#188#1#0| Bool) (|a#188#2#0| Bool) ) (!  (and (=> ($Is (|#_module.RNG.RNG| |a#188#0#0| |a#188#1#0| |a#188#2#0|) Tclass._module.RNG) (and (and ($Is (int_2_U |a#188#0#0|) Tclass._module.word) ($Is (bool_2_U |a#188#1#0|) TBool)) ($Is (bool_2_U |a#188#2#0|) TBool))) (=> (and (and ($Is (int_2_U |a#188#0#0|) Tclass._module.word) ($Is (bool_2_U |a#188#1#0|) TBool)) ($Is (bool_2_U |a#188#2#0|) TBool)) ($Is (|#_module.RNG.RNG| |a#188#0#0| |a#188#1#0| |a#188#2#0|) Tclass._module.RNG))) :qid |ARMdefsd.32:20| :skolemid |3472| :pattern ( ($Is (|#_module.RNG.RNG| |a#188#0#0| |a#188#1#0| |a#188#2#0|) Tclass._module.RNG)) )))
(assert (forall ((|a#189#0#0| Int) (|a#189#1#0| Bool) (|a#189#2#0| Bool) ($h@@38 T@U) ) (!  (=> (and (= (type $h@@38) (MapType1Type refType)) ($IsGoodHeap $h@@38)) (and (=> ($IsAlloc (|#_module.RNG.RNG| |a#189#0#0| |a#189#1#0| |a#189#2#0|) Tclass._module.RNG $h@@38) (and (and ($IsAlloc (int_2_U |a#189#0#0|) Tclass._module.word $h@@38) ($IsAlloc (bool_2_U |a#189#1#0|) TBool $h@@38)) ($IsAlloc (bool_2_U |a#189#2#0|) TBool $h@@38))) (=> (and (and ($IsAlloc (int_2_U |a#189#0#0|) Tclass._module.word $h@@38) ($IsAlloc (bool_2_U |a#189#1#0|) TBool $h@@38)) ($IsAlloc (bool_2_U |a#189#2#0|) TBool $h@@38)) ($IsAlloc (|#_module.RNG.RNG| |a#189#0#0| |a#189#1#0| |a#189#2#0|) Tclass._module.RNG $h@@38)))) :qid |ARMdefsd.32:20| :skolemid |3473| :pattern ( ($IsAlloc (|#_module.RNG.RNG| |a#189#0#0| |a#189#1#0| |a#189#2#0|) Tclass._module.RNG $h@@38)) )))
(assert (forall ((|a#190#0#0| Int) (|a#190#1#0| T@U) (|a#190#2#0| T@U) ) (!  (=> (and (= (type |a#190#1#0|) boolType) (= (type |a#190#2#0|) boolType)) (= (|#_module.RNG.RNG| (LitInt |a#190#0#0|) (U_2_bool (Lit |a#190#1#0|)) (U_2_bool (Lit |a#190#2#0|))) (Lit (|#_module.RNG.RNG| |a#190#0#0| (U_2_bool |a#190#1#0|) (U_2_bool |a#190#2#0|))))) :qid |ARMdefsd.32:20| :skolemid |3474| :pattern ( (|#_module.RNG.RNG| (LitInt |a#190#0#0|) (U_2_bool (Lit |a#190#1#0|)) (U_2_bool (Lit |a#190#2#0|)))) )))
(assert (forall ((|a#191#0#0| Int) (|a#191#1#0| Bool) (|a#191#2#0| Bool) ) (! (= (_module.RNG.entropy (|#_module.RNG.RNG| |a#191#0#0| |a#191#1#0| |a#191#2#0|)) |a#191#0#0|) :qid |ARMdefsd.32:20| :skolemid |3475| :pattern ( (|#_module.RNG.RNG| |a#191#0#0| |a#191#1#0| |a#191#2#0|)) )))
(assert (forall ((|a#192#0#0| Int) (|a#192#1#0| Bool) (|a#192#2#0| Bool) ) (!  (and (=> (_module.RNG.consumed (|#_module.RNG.RNG| |a#192#0#0| |a#192#1#0| |a#192#2#0|)) |a#192#1#0|) (=> |a#192#1#0| (_module.RNG.consumed (|#_module.RNG.RNG| |a#192#0#0| |a#192#1#0| |a#192#2#0|)))) :qid |ARMdefsd.32:20| :skolemid |3476| :pattern ( (|#_module.RNG.RNG| |a#192#0#0| |a#192#1#0| |a#192#2#0|)) )))
(assert (forall ((|a#193#0#0| Int) (|a#193#1#0| Bool) (|a#193#2#0| Bool) ) (!  (and (=> (_module.RNG.ready (|#_module.RNG.RNG| |a#193#0#0| |a#193#1#0| |a#193#2#0|)) |a#193#2#0|) (=> |a#193#2#0| (_module.RNG.ready (|#_module.RNG.RNG| |a#193#0#0| |a#193#1#0| |a#193#2#0|)))) :qid |ARMdefsd.32:20| :skolemid |3477| :pattern ( (|#_module.RNG.RNG| |a#193#0#0| |a#193#1#0| |a#193#2#0|)) )))
(assert (forall ((d@@86 T@U) ) (!  (=> (and (= (type d@@86) DatatypeTypeType) (|$IsA#_module.RNG| d@@86)) (_module.RNG.RNG_q d@@86)) :qid |unknown.0:0| :skolemid |3478| :pattern ( (|$IsA#_module.RNG| d@@86)) )))
(assert (forall ((d@@87 T@U) ) (!  (=> (and (= (type d@@87) DatatypeTypeType) ($Is d@@87 Tclass._module.RNG)) (_module.RNG.RNG_q d@@87)) :qid |unknown.0:0| :skolemid |3479| :pattern ( (_module.RNG.RNG_q d@@87) ($Is d@@87 Tclass._module.RNG)) )))
(assert (forall ((arg0@@429 Int) ) (! (= (type (|#_module.Shift.LSLShift| arg0@@429)) DatatypeTypeType) :qid |funType:#_module.Shift.LSLShift| :pattern ( (|#_module.Shift.LSLShift| arg0@@429)) )))
(assert (forall ((|a#194#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.Shift.LSLShift| |a#194#0#0|)) |##_module.Shift.LSLShift|) :qid |ARMdefsd.34:27| :skolemid |3480| :pattern ( (|#_module.Shift.LSLShift| |a#194#0#0|)) )))
(assert (forall ((d@@88 T@U) ) (!  (=> (= (type d@@88) DatatypeTypeType) (and (=> (_module.Shift.LSLShift_q d@@88) (= (DatatypeCtorId d@@88) |##_module.Shift.LSLShift|)) (=> (= (DatatypeCtorId d@@88) |##_module.Shift.LSLShift|) (_module.Shift.LSLShift_q d@@88)))) :qid |unknown.0:0| :skolemid |3481| :pattern ( (_module.Shift.LSLShift_q d@@88)) )))
(assert (forall ((d@@89 T@U) ) (!  (=> (and (= (type d@@89) DatatypeTypeType) (_module.Shift.LSLShift_q d@@89)) (exists ((|a#195#0#0| Int) ) (! (= d@@89 (|#_module.Shift.LSLShift| |a#195#0#0|)) :qid |ARMdefsd.34:27| :skolemid |3482| ))) :qid |unknown.0:0| :skolemid |3483| :pattern ( (_module.Shift.LSLShift_q d@@89)) )))
(assert (= (type Tclass._module.shift__amount) TyType))
(assert (= (Tag Tclass._module.shift__amount) Tagclass._module.shift__amount))
(assert (forall ((bx@@114 T@U) ) (!  (=> (and (= (type bx@@114) BoxType) ($IsBox bx@@114 Tclass._module.shift__amount)) (and (= ($Box ($Unbox intType bx@@114)) bx@@114) ($Is ($Unbox intType bx@@114) Tclass._module.shift__amount))) :qid |unknown.0:0| :skolemid |3484| :pattern ( ($IsBox bx@@114 Tclass._module.shift__amount)) )))
(assert (forall ((|a#196#0#0| Int) ) (!  (and (=> ($Is (|#_module.Shift.LSLShift| |a#196#0#0|) Tclass._module.Shift) ($Is (int_2_U |a#196#0#0|) Tclass._module.shift__amount)) (=> ($Is (int_2_U |a#196#0#0|) Tclass._module.shift__amount) ($Is (|#_module.Shift.LSLShift| |a#196#0#0|) Tclass._module.Shift))) :qid |ARMdefsd.34:27| :skolemid |3485| :pattern ( ($Is (|#_module.Shift.LSLShift| |a#196#0#0|) Tclass._module.Shift)) )))
(assert (forall ((|a#197#0#0| Int) ($h@@39 T@U) ) (!  (=> (and (= (type $h@@39) (MapType1Type refType)) ($IsGoodHeap $h@@39)) (and (=> ($IsAlloc (|#_module.Shift.LSLShift| |a#197#0#0|) Tclass._module.Shift $h@@39) ($IsAlloc (int_2_U |a#197#0#0|) Tclass._module.shift__amount $h@@39)) (=> ($IsAlloc (int_2_U |a#197#0#0|) Tclass._module.shift__amount $h@@39) ($IsAlloc (|#_module.Shift.LSLShift| |a#197#0#0|) Tclass._module.Shift $h@@39)))) :qid |ARMdefsd.34:27| :skolemid |3486| :pattern ( ($IsAlloc (|#_module.Shift.LSLShift| |a#197#0#0|) Tclass._module.Shift $h@@39)) )))
(assert (forall ((|a#198#0#0| Int) ) (! (= (|#_module.Shift.LSLShift| (LitInt |a#198#0#0|)) (Lit (|#_module.Shift.LSLShift| |a#198#0#0|))) :qid |ARMdefsd.34:27| :skolemid |3487| :pattern ( (|#_module.Shift.LSLShift| (LitInt |a#198#0#0|))) )))
(assert (forall ((|a#199#0#0| Int) ) (! (= (_module.Shift.amount__lsl (|#_module.Shift.LSLShift| |a#199#0#0|)) |a#199#0#0|) :qid |ARMdefsd.34:27| :skolemid |3488| :pattern ( (|#_module.Shift.LSLShift| |a#199#0#0|)) )))
(assert (forall ((arg0@@430 Int) ) (! (= (type (|#_module.Shift.LSRShift| arg0@@430)) DatatypeTypeType) :qid |funType:#_module.Shift.LSRShift| :pattern ( (|#_module.Shift.LSRShift| arg0@@430)) )))
(assert (forall ((|a#200#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.Shift.LSRShift| |a#200#0#0|)) |##_module.Shift.LSRShift|) :qid |ARMdefsd.35:27| :skolemid |3489| :pattern ( (|#_module.Shift.LSRShift| |a#200#0#0|)) )))
(assert (forall ((d@@90 T@U) ) (!  (=> (= (type d@@90) DatatypeTypeType) (and (=> (_module.Shift.LSRShift_q d@@90) (= (DatatypeCtorId d@@90) |##_module.Shift.LSRShift|)) (=> (= (DatatypeCtorId d@@90) |##_module.Shift.LSRShift|) (_module.Shift.LSRShift_q d@@90)))) :qid |unknown.0:0| :skolemid |3490| :pattern ( (_module.Shift.LSRShift_q d@@90)) )))
(assert (forall ((d@@91 T@U) ) (!  (=> (and (= (type d@@91) DatatypeTypeType) (_module.Shift.LSRShift_q d@@91)) (exists ((|a#201#0#0| Int) ) (! (= d@@91 (|#_module.Shift.LSRShift| |a#201#0#0|)) :qid |ARMdefsd.35:27| :skolemid |3491| ))) :qid |unknown.0:0| :skolemid |3492| :pattern ( (_module.Shift.LSRShift_q d@@91)) )))
(assert (forall ((|a#202#0#0| Int) ) (!  (and (=> ($Is (|#_module.Shift.LSRShift| |a#202#0#0|) Tclass._module.Shift) ($Is (int_2_U |a#202#0#0|) Tclass._module.shift__amount)) (=> ($Is (int_2_U |a#202#0#0|) Tclass._module.shift__amount) ($Is (|#_module.Shift.LSRShift| |a#202#0#0|) Tclass._module.Shift))) :qid |ARMdefsd.35:27| :skolemid |3493| :pattern ( ($Is (|#_module.Shift.LSRShift| |a#202#0#0|) Tclass._module.Shift)) )))
(assert (forall ((|a#203#0#0| Int) ($h@@40 T@U) ) (!  (=> (and (= (type $h@@40) (MapType1Type refType)) ($IsGoodHeap $h@@40)) (and (=> ($IsAlloc (|#_module.Shift.LSRShift| |a#203#0#0|) Tclass._module.Shift $h@@40) ($IsAlloc (int_2_U |a#203#0#0|) Tclass._module.shift__amount $h@@40)) (=> ($IsAlloc (int_2_U |a#203#0#0|) Tclass._module.shift__amount $h@@40) ($IsAlloc (|#_module.Shift.LSRShift| |a#203#0#0|) Tclass._module.Shift $h@@40)))) :qid |ARMdefsd.35:27| :skolemid |3494| :pattern ( ($IsAlloc (|#_module.Shift.LSRShift| |a#203#0#0|) Tclass._module.Shift $h@@40)) )))
(assert (forall ((|a#204#0#0| Int) ) (! (= (|#_module.Shift.LSRShift| (LitInt |a#204#0#0|)) (Lit (|#_module.Shift.LSRShift| |a#204#0#0|))) :qid |ARMdefsd.35:27| :skolemid |3495| :pattern ( (|#_module.Shift.LSRShift| (LitInt |a#204#0#0|))) )))
(assert (forall ((|a#205#0#0| Int) ) (! (= (_module.Shift.amount__lsr (|#_module.Shift.LSRShift| |a#205#0#0|)) |a#205#0#0|) :qid |ARMdefsd.35:27| :skolemid |3496| :pattern ( (|#_module.Shift.LSRShift| |a#205#0#0|)) )))
(assert (forall ((arg0@@431 Int) ) (! (= (type (|#_module.Shift.RORShift| arg0@@431)) DatatypeTypeType) :qid |funType:#_module.Shift.RORShift| :pattern ( (|#_module.Shift.RORShift| arg0@@431)) )))
(assert (forall ((|a#206#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.Shift.RORShift| |a#206#0#0|)) |##_module.Shift.RORShift|) :qid |ARMdefsd.36:27| :skolemid |3497| :pattern ( (|#_module.Shift.RORShift| |a#206#0#0|)) )))
(assert (forall ((d@@92 T@U) ) (!  (=> (= (type d@@92) DatatypeTypeType) (and (=> (_module.Shift.RORShift_q d@@92) (= (DatatypeCtorId d@@92) |##_module.Shift.RORShift|)) (=> (= (DatatypeCtorId d@@92) |##_module.Shift.RORShift|) (_module.Shift.RORShift_q d@@92)))) :qid |unknown.0:0| :skolemid |3498| :pattern ( (_module.Shift.RORShift_q d@@92)) )))
(assert (forall ((d@@93 T@U) ) (!  (=> (and (= (type d@@93) DatatypeTypeType) (_module.Shift.RORShift_q d@@93)) (exists ((|a#207#0#0| Int) ) (! (= d@@93 (|#_module.Shift.RORShift| |a#207#0#0|)) :qid |ARMdefsd.36:27| :skolemid |3499| ))) :qid |unknown.0:0| :skolemid |3500| :pattern ( (_module.Shift.RORShift_q d@@93)) )))
(assert (forall ((|a#208#0#0| Int) ) (!  (and (=> ($Is (|#_module.Shift.RORShift| |a#208#0#0|) Tclass._module.Shift) ($Is (int_2_U |a#208#0#0|) Tclass._module.shift__amount)) (=> ($Is (int_2_U |a#208#0#0|) Tclass._module.shift__amount) ($Is (|#_module.Shift.RORShift| |a#208#0#0|) Tclass._module.Shift))) :qid |ARMdefsd.36:27| :skolemid |3501| :pattern ( ($Is (|#_module.Shift.RORShift| |a#208#0#0|) Tclass._module.Shift)) )))
(assert (forall ((|a#209#0#0| Int) ($h@@41 T@U) ) (!  (=> (and (= (type $h@@41) (MapType1Type refType)) ($IsGoodHeap $h@@41)) (and (=> ($IsAlloc (|#_module.Shift.RORShift| |a#209#0#0|) Tclass._module.Shift $h@@41) ($IsAlloc (int_2_U |a#209#0#0|) Tclass._module.shift__amount $h@@41)) (=> ($IsAlloc (int_2_U |a#209#0#0|) Tclass._module.shift__amount $h@@41) ($IsAlloc (|#_module.Shift.RORShift| |a#209#0#0|) Tclass._module.Shift $h@@41)))) :qid |ARMdefsd.36:27| :skolemid |3502| :pattern ( ($IsAlloc (|#_module.Shift.RORShift| |a#209#0#0|) Tclass._module.Shift $h@@41)) )))
(assert (forall ((|a#210#0#0| Int) ) (! (= (|#_module.Shift.RORShift| (LitInt |a#210#0#0|)) (Lit (|#_module.Shift.RORShift| |a#210#0#0|))) :qid |ARMdefsd.36:27| :skolemid |3503| :pattern ( (|#_module.Shift.RORShift| (LitInt |a#210#0#0|))) )))
(assert (forall ((|a#211#0#0| Int) ) (! (= (_module.Shift.amount__ror (|#_module.Shift.RORShift| |a#211#0#0|)) |a#211#0#0|) :qid |ARMdefsd.36:27| :skolemid |3504| :pattern ( (|#_module.Shift.RORShift| |a#211#0#0|)) )))
(assert (forall ((d@@94 T@U) ) (!  (=> (and (= (type d@@94) DatatypeTypeType) (|$IsA#_module.Shift| d@@94)) (or (or (_module.Shift.LSLShift_q d@@94) (_module.Shift.LSRShift_q d@@94)) (_module.Shift.RORShift_q d@@94))) :qid |unknown.0:0| :skolemid |3505| :pattern ( (|$IsA#_module.Shift| d@@94)) )))
(assert (forall ((d@@95 T@U) ) (!  (=> (and (= (type d@@95) DatatypeTypeType) ($Is d@@95 Tclass._module.Shift)) (or (or (_module.Shift.LSLShift_q d@@95) (_module.Shift.LSRShift_q d@@95)) (_module.Shift.RORShift_q d@@95))) :qid |unknown.0:0| :skolemid |3506| :pattern ( (_module.Shift.RORShift_q d@@95) ($Is d@@95 Tclass._module.Shift)) :pattern ( (_module.Shift.LSRShift_q d@@95) ($Is d@@95 Tclass._module.Shift)) :pattern ( (_module.Shift.LSLShift_q d@@95) ($Is d@@95 Tclass._module.Shift)) )))
(assert (forall ((|a#212#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.operand.OConst| |a#212#0#0|)) |##_module.operand.OConst|) :qid |ARMdefsd.38:27| :skolemid |3507| :pattern ( (|#_module.operand.OConst| |a#212#0#0|)) )))
(assert (forall ((d@@96 T@U) ) (!  (=> (= (type d@@96) DatatypeTypeType) (and (=> (_module.operand.OConst_q d@@96) (= (DatatypeCtorId d@@96) |##_module.operand.OConst|)) (=> (= (DatatypeCtorId d@@96) |##_module.operand.OConst|) (_module.operand.OConst_q d@@96)))) :qid |unknown.0:0| :skolemid |3508| :pattern ( (_module.operand.OConst_q d@@96)) )))
(assert (forall ((d@@97 T@U) ) (!  (=> (and (= (type d@@97) DatatypeTypeType) (_module.operand.OConst_q d@@97)) (exists ((|a#213#0#0| Int) ) (! (= d@@97 (|#_module.operand.OConst| |a#213#0#0|)) :qid |ARMdefsd.38:27| :skolemid |3509| ))) :qid |unknown.0:0| :skolemid |3510| :pattern ( (_module.operand.OConst_q d@@97)) )))
(assert (forall ((|a#214#0#0| Int) ) (!  (and (=> ($Is (|#_module.operand.OConst| |a#214#0#0|) Tclass._module.operand) ($Is (int_2_U |a#214#0#0|) Tclass._module.word)) (=> ($Is (int_2_U |a#214#0#0|) Tclass._module.word) ($Is (|#_module.operand.OConst| |a#214#0#0|) Tclass._module.operand))) :qid |ARMdefsd.38:27| :skolemid |3511| :pattern ( ($Is (|#_module.operand.OConst| |a#214#0#0|) Tclass._module.operand)) )))
(assert (forall ((|a#215#0#0| Int) ($h@@42 T@U) ) (!  (=> (and (= (type $h@@42) (MapType1Type refType)) ($IsGoodHeap $h@@42)) (and (=> ($IsAlloc (|#_module.operand.OConst| |a#215#0#0|) Tclass._module.operand $h@@42) ($IsAlloc (int_2_U |a#215#0#0|) Tclass._module.word $h@@42)) (=> ($IsAlloc (int_2_U |a#215#0#0|) Tclass._module.word $h@@42) ($IsAlloc (|#_module.operand.OConst| |a#215#0#0|) Tclass._module.operand $h@@42)))) :qid |ARMdefsd.38:27| :skolemid |3512| :pattern ( ($IsAlloc (|#_module.operand.OConst| |a#215#0#0|) Tclass._module.operand $h@@42)) )))
(assert (forall ((|a#216#0#0| Int) ) (! (= (|#_module.operand.OConst| (LitInt |a#216#0#0|)) (Lit (|#_module.operand.OConst| |a#216#0#0|))) :qid |ARMdefsd.38:27| :skolemid |3513| :pattern ( (|#_module.operand.OConst| (LitInt |a#216#0#0|))) )))
(assert (forall ((|a#217#0#0| Int) ) (! (= (_module.operand.n (|#_module.operand.OConst| |a#217#0#0|)) |a#217#0#0|) :qid |ARMdefsd.38:27| :skolemid |3514| :pattern ( (|#_module.operand.OConst| |a#217#0#0|)) )))
(assert (forall ((arg0@@432 T@U) ) (! (= (type (|#_module.operand.OReg| arg0@@432)) DatatypeTypeType) :qid |funType:#_module.operand.OReg| :pattern ( (|#_module.operand.OReg| arg0@@432)) )))
(assert (forall ((|a#218#0#0| T@U) ) (!  (=> (= (type |a#218#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.operand.OReg| |a#218#0#0|)) |##_module.operand.OReg|)) :qid |ARMdefsd.39:12| :skolemid |3515| :pattern ( (|#_module.operand.OReg| |a#218#0#0|)) )))
(assert (forall ((d@@98 T@U) ) (!  (=> (= (type d@@98) DatatypeTypeType) (and (=> (_module.operand.OReg_q d@@98) (= (DatatypeCtorId d@@98) |##_module.operand.OReg|)) (=> (= (DatatypeCtorId d@@98) |##_module.operand.OReg|) (_module.operand.OReg_q d@@98)))) :qid |unknown.0:0| :skolemid |3516| :pattern ( (_module.operand.OReg_q d@@98)) )))
(assert (forall ((d@@99 T@U) ) (!  (=> (and (= (type d@@99) DatatypeTypeType) (_module.operand.OReg_q d@@99)) (exists ((|a#219#0#0| T@U) ) (!  (and (= (type |a#219#0#0|) DatatypeTypeType) (= d@@99 (|#_module.operand.OReg| |a#219#0#0|))) :qid |ARMdefsd.39:12| :skolemid |3517| :no-pattern (type |a#219#0#0|) :no-pattern (U_2_int |a#219#0#0|) :no-pattern (U_2_bool |a#219#0#0|) ))) :qid |unknown.0:0| :skolemid |3518| :pattern ( (_module.operand.OReg_q d@@99)) )))
(assert (forall ((|a#220#0#0| T@U) ) (!  (=> (= (type |a#220#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.operand.OReg| |a#220#0#0|) Tclass._module.operand) ($Is |a#220#0#0| Tclass._module.ARMReg)) (=> ($Is |a#220#0#0| Tclass._module.ARMReg) ($Is (|#_module.operand.OReg| |a#220#0#0|) Tclass._module.operand)))) :qid |ARMdefsd.39:12| :skolemid |3519| :pattern ( ($Is (|#_module.operand.OReg| |a#220#0#0|) Tclass._module.operand)) )))
(assert (forall ((|a#221#0#0| T@U) ($h@@43 T@U) ) (!  (=> (and (and (= (type |a#221#0#0|) DatatypeTypeType) (= (type $h@@43) (MapType1Type refType))) ($IsGoodHeap $h@@43)) (and (=> ($IsAlloc (|#_module.operand.OReg| |a#221#0#0|) Tclass._module.operand $h@@43) ($IsAlloc |a#221#0#0| Tclass._module.ARMReg $h@@43)) (=> ($IsAlloc |a#221#0#0| Tclass._module.ARMReg $h@@43) ($IsAlloc (|#_module.operand.OReg| |a#221#0#0|) Tclass._module.operand $h@@43)))) :qid |ARMdefsd.39:12| :skolemid |3520| :pattern ( ($IsAlloc (|#_module.operand.OReg| |a#221#0#0|) Tclass._module.operand $h@@43)) )))
(assert (forall ((|a#222#0#0| T@U) ) (!  (=> (= (type |a#222#0#0|) DatatypeTypeType) (= (|#_module.operand.OReg| (Lit |a#222#0#0|)) (Lit (|#_module.operand.OReg| |a#222#0#0|)))) :qid |ARMdefsd.39:12| :skolemid |3521| :pattern ( (|#_module.operand.OReg| (Lit |a#222#0#0|))) )))
(assert (forall ((|a#223#0#0| T@U) ) (!  (=> (= (type |a#223#0#0|) DatatypeTypeType) (= (_module.operand.r (|#_module.operand.OReg| |a#223#0#0|)) |a#223#0#0|)) :qid |ARMdefsd.39:12| :skolemid |3522| :pattern ( (|#_module.operand.OReg| |a#223#0#0|)) )))
(assert (forall ((|a#224#0#0| T@U) ) (!  (=> (= (type |a#224#0#0|) DatatypeTypeType) (< (DtRank |a#224#0#0|) (DtRank (|#_module.operand.OReg| |a#224#0#0|)))) :qid |ARMdefsd.39:12| :skolemid |3523| :pattern ( (|#_module.operand.OReg| |a#224#0#0|)) )))
(assert (forall ((arg0@@433 T@U) (arg1@@184 T@U) ) (! (= (type (|#_module.operand.OShift| arg0@@433 arg1@@184)) DatatypeTypeType) :qid |funType:#_module.operand.OShift| :pattern ( (|#_module.operand.OShift| arg0@@433 arg1@@184)) )))
(assert (forall ((|a#225#0#0| T@U) (|a#225#1#0| T@U) ) (!  (=> (and (= (type |a#225#0#0|) DatatypeTypeType) (= (type |a#225#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.operand.OShift| |a#225#0#0| |a#225#1#0|)) |##_module.operand.OShift|)) :qid |ARMdefsd.40:14| :skolemid |3524| :pattern ( (|#_module.operand.OShift| |a#225#0#0| |a#225#1#0|)) )))
(assert (forall ((d@@100 T@U) ) (!  (=> (= (type d@@100) DatatypeTypeType) (and (=> (_module.operand.OShift_q d@@100) (= (DatatypeCtorId d@@100) |##_module.operand.OShift|)) (=> (= (DatatypeCtorId d@@100) |##_module.operand.OShift|) (_module.operand.OShift_q d@@100)))) :qid |unknown.0:0| :skolemid |3525| :pattern ( (_module.operand.OShift_q d@@100)) )))
(assert (forall ((d@@101 T@U) ) (!  (=> (and (= (type d@@101) DatatypeTypeType) (_module.operand.OShift_q d@@101)) (exists ((|a#226#0#0| T@U) (|a#226#1#0| T@U) ) (!  (and (and (= (type |a#226#0#0|) DatatypeTypeType) (= (type |a#226#1#0|) DatatypeTypeType)) (= d@@101 (|#_module.operand.OShift| |a#226#0#0| |a#226#1#0|))) :qid |ARMdefsd.40:14| :skolemid |3526| :no-pattern (type |a#226#0#0|) :no-pattern (type |a#226#1#0|) :no-pattern (U_2_int |a#226#0#0|) :no-pattern (U_2_bool |a#226#0#0|) :no-pattern (U_2_int |a#226#1#0|) :no-pattern (U_2_bool |a#226#1#0|) ))) :qid |unknown.0:0| :skolemid |3527| :pattern ( (_module.operand.OShift_q d@@101)) )))
(assert (forall ((|a#227#0#0| T@U) (|a#227#1#0| T@U) ) (!  (=> (and (= (type |a#227#0#0|) DatatypeTypeType) (= (type |a#227#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.operand.OShift| |a#227#0#0| |a#227#1#0|) Tclass._module.operand) (and ($Is |a#227#0#0| Tclass._module.ARMReg) ($Is |a#227#1#0| Tclass._module.Shift))) (=> (and ($Is |a#227#0#0| Tclass._module.ARMReg) ($Is |a#227#1#0| Tclass._module.Shift)) ($Is (|#_module.operand.OShift| |a#227#0#0| |a#227#1#0|) Tclass._module.operand)))) :qid |ARMdefsd.40:14| :skolemid |3528| :pattern ( ($Is (|#_module.operand.OShift| |a#227#0#0| |a#227#1#0|) Tclass._module.operand)) )))
(assert (forall ((|a#228#0#0| T@U) (|a#228#1#0| T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (= (type |a#228#0#0|) DatatypeTypeType) (= (type |a#228#1#0|) DatatypeTypeType)) (= (type $h@@44) (MapType1Type refType))) ($IsGoodHeap $h@@44)) (and (=> ($IsAlloc (|#_module.operand.OShift| |a#228#0#0| |a#228#1#0|) Tclass._module.operand $h@@44) (and ($IsAlloc |a#228#0#0| Tclass._module.ARMReg $h@@44) ($IsAlloc |a#228#1#0| Tclass._module.Shift $h@@44))) (=> (and ($IsAlloc |a#228#0#0| Tclass._module.ARMReg $h@@44) ($IsAlloc |a#228#1#0| Tclass._module.Shift $h@@44)) ($IsAlloc (|#_module.operand.OShift| |a#228#0#0| |a#228#1#0|) Tclass._module.operand $h@@44)))) :qid |ARMdefsd.40:14| :skolemid |3529| :pattern ( ($IsAlloc (|#_module.operand.OShift| |a#228#0#0| |a#228#1#0|) Tclass._module.operand $h@@44)) )))
(assert (forall ((|a#229#0#0| T@U) (|a#229#1#0| T@U) ) (!  (=> (and (= (type |a#229#0#0|) DatatypeTypeType) (= (type |a#229#1#0|) DatatypeTypeType)) (= (|#_module.operand.OShift| (Lit |a#229#0#0|) (Lit |a#229#1#0|)) (Lit (|#_module.operand.OShift| |a#229#0#0| |a#229#1#0|)))) :qid |ARMdefsd.40:14| :skolemid |3530| :pattern ( (|#_module.operand.OShift| (Lit |a#229#0#0|) (Lit |a#229#1#0|))) )))
(assert (forall ((|a#230#0#0| T@U) (|a#230#1#0| T@U) ) (!  (=> (and (= (type |a#230#0#0|) DatatypeTypeType) (= (type |a#230#1#0|) DatatypeTypeType)) (= (_module.operand.reg (|#_module.operand.OShift| |a#230#0#0| |a#230#1#0|)) |a#230#0#0|)) :qid |ARMdefsd.40:14| :skolemid |3531| :pattern ( (|#_module.operand.OShift| |a#230#0#0| |a#230#1#0|)) )))
(assert (forall ((|a#231#0#0| T@U) (|a#231#1#0| T@U) ) (!  (=> (and (= (type |a#231#0#0|) DatatypeTypeType) (= (type |a#231#1#0|) DatatypeTypeType)) (< (DtRank |a#231#0#0|) (DtRank (|#_module.operand.OShift| |a#231#0#0| |a#231#1#0|)))) :qid |ARMdefsd.40:14| :skolemid |3532| :pattern ( (|#_module.operand.OShift| |a#231#0#0| |a#231#1#0|)) )))
(assert (forall ((|a#232#0#0| T@U) (|a#232#1#0| T@U) ) (!  (=> (and (= (type |a#232#0#0|) DatatypeTypeType) (= (type |a#232#1#0|) DatatypeTypeType)) (= (_module.operand.s (|#_module.operand.OShift| |a#232#0#0| |a#232#1#0|)) |a#232#1#0|)) :qid |ARMdefsd.40:14| :skolemid |3533| :pattern ( (|#_module.operand.OShift| |a#232#0#0| |a#232#1#0|)) )))
(assert (forall ((|a#233#0#0| T@U) (|a#233#1#0| T@U) ) (!  (=> (and (= (type |a#233#0#0|) DatatypeTypeType) (= (type |a#233#1#0|) DatatypeTypeType)) (< (DtRank |a#233#1#0|) (DtRank (|#_module.operand.OShift| |a#233#0#0| |a#233#1#0|)))) :qid |ARMdefsd.40:14| :skolemid |3534| :pattern ( (|#_module.operand.OShift| |a#233#0#0| |a#233#1#0|)) )))
(assert (forall ((|a#234#0#0| T@U) ) (!  (=> (= (type |a#234#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.operand.OSReg| |a#234#0#0|)) |##_module.operand.OSReg|)) :qid |ARMdefsd.41:13| :skolemid |3535| :pattern ( (|#_module.operand.OSReg| |a#234#0#0|)) )))
(assert (forall ((d@@102 T@U) ) (!  (=> (= (type d@@102) DatatypeTypeType) (and (=> (_module.operand.OSReg_q d@@102) (= (DatatypeCtorId d@@102) |##_module.operand.OSReg|)) (=> (= (DatatypeCtorId d@@102) |##_module.operand.OSReg|) (_module.operand.OSReg_q d@@102)))) :qid |unknown.0:0| :skolemid |3536| :pattern ( (_module.operand.OSReg_q d@@102)) )))
(assert (forall ((d@@103 T@U) ) (!  (=> (and (= (type d@@103) DatatypeTypeType) (_module.operand.OSReg_q d@@103)) (exists ((|a#235#0#0| T@U) ) (!  (and (= (type |a#235#0#0|) DatatypeTypeType) (= d@@103 (|#_module.operand.OSReg| |a#235#0#0|))) :qid |ARMdefsd.41:13| :skolemid |3537| :no-pattern (type |a#235#0#0|) :no-pattern (U_2_int |a#235#0#0|) :no-pattern (U_2_bool |a#235#0#0|) ))) :qid |unknown.0:0| :skolemid |3538| :pattern ( (_module.operand.OSReg_q d@@103)) )))
(assert (forall ((|a#236#0#0| T@U) ) (!  (=> (= (type |a#236#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.operand.OSReg| |a#236#0#0|) Tclass._module.operand) ($Is |a#236#0#0| Tclass._module.SReg)) (=> ($Is |a#236#0#0| Tclass._module.SReg) ($Is (|#_module.operand.OSReg| |a#236#0#0|) Tclass._module.operand)))) :qid |ARMdefsd.41:13| :skolemid |3539| :pattern ( ($Is (|#_module.operand.OSReg| |a#236#0#0|) Tclass._module.operand)) )))
(assert (forall ((|a#237#0#0| T@U) ($h@@45 T@U) ) (!  (=> (and (and (= (type |a#237#0#0|) DatatypeTypeType) (= (type $h@@45) (MapType1Type refType))) ($IsGoodHeap $h@@45)) (and (=> ($IsAlloc (|#_module.operand.OSReg| |a#237#0#0|) Tclass._module.operand $h@@45) ($IsAlloc |a#237#0#0| Tclass._module.SReg $h@@45)) (=> ($IsAlloc |a#237#0#0| Tclass._module.SReg $h@@45) ($IsAlloc (|#_module.operand.OSReg| |a#237#0#0|) Tclass._module.operand $h@@45)))) :qid |ARMdefsd.41:13| :skolemid |3540| :pattern ( ($IsAlloc (|#_module.operand.OSReg| |a#237#0#0|) Tclass._module.operand $h@@45)) )))
(assert (forall ((|a#238#0#0| T@U) ) (!  (=> (= (type |a#238#0#0|) DatatypeTypeType) (= (|#_module.operand.OSReg| (Lit |a#238#0#0|)) (Lit (|#_module.operand.OSReg| |a#238#0#0|)))) :qid |ARMdefsd.41:13| :skolemid |3541| :pattern ( (|#_module.operand.OSReg| (Lit |a#238#0#0|))) )))
(assert (forall ((|a#239#0#0| T@U) ) (!  (=> (= (type |a#239#0#0|) DatatypeTypeType) (= (_module.operand.sr (|#_module.operand.OSReg| |a#239#0#0|)) |a#239#0#0|)) :qid |ARMdefsd.41:13| :skolemid |3542| :pattern ( (|#_module.operand.OSReg| |a#239#0#0|)) )))
(assert (forall ((|a#240#0#0| T@U) ) (!  (=> (= (type |a#240#0#0|) DatatypeTypeType) (< (DtRank |a#240#0#0|) (DtRank (|#_module.operand.OSReg| |a#240#0#0|)))) :qid |ARMdefsd.41:13| :skolemid |3543| :pattern ( (|#_module.operand.OSReg| |a#240#0#0|)) )))
(assert (= (DatatypeCtorId |#_module.operand.OSP|) |##_module.operand.OSP|))
(assert (forall ((d@@104 T@U) ) (!  (=> (= (type d@@104) DatatypeTypeType) (and (=> (_module.operand.OSP_q d@@104) (= (DatatypeCtorId d@@104) |##_module.operand.OSP|)) (=> (= (DatatypeCtorId d@@104) |##_module.operand.OSP|) (_module.operand.OSP_q d@@104)))) :qid |unknown.0:0| :skolemid |3544| :pattern ( (_module.operand.OSP_q d@@104)) )))
(assert (forall ((d@@105 T@U) ) (!  (=> (and (= (type d@@105) DatatypeTypeType) (_module.operand.OSP_q d@@105)) (= d@@105 |#_module.operand.OSP|)) :qid |unknown.0:0| :skolemid |3545| :pattern ( (_module.operand.OSP_q d@@105)) )))
(assert ($Is |#_module.operand.OSP| Tclass._module.operand))
(assert (forall (($h@@46 T@U) ) (!  (=> (and (= (type $h@@46) (MapType1Type refType)) ($IsGoodHeap $h@@46)) ($IsAlloc |#_module.operand.OSP| Tclass._module.operand $h@@46)) :qid |DafnyPre.405:12| :skolemid |3546| :pattern ( ($IsAlloc |#_module.operand.OSP| Tclass._module.operand $h@@46)) )))
(assert (= |#_module.operand.OSP| (Lit |#_module.operand.OSP|)))
(assert (= (DatatypeCtorId |#_module.operand.OLR|) |##_module.operand.OLR|))
(assert (forall ((d@@106 T@U) ) (!  (=> (= (type d@@106) DatatypeTypeType) (and (=> (_module.operand.OLR_q d@@106) (= (DatatypeCtorId d@@106) |##_module.operand.OLR|)) (=> (= (DatatypeCtorId d@@106) |##_module.operand.OLR|) (_module.operand.OLR_q d@@106)))) :qid |unknown.0:0| :skolemid |3547| :pattern ( (_module.operand.OLR_q d@@106)) )))
(assert (forall ((d@@107 T@U) ) (!  (=> (and (= (type d@@107) DatatypeTypeType) (_module.operand.OLR_q d@@107)) (= d@@107 |#_module.operand.OLR|)) :qid |unknown.0:0| :skolemid |3548| :pattern ( (_module.operand.OLR_q d@@107)) )))
(assert ($Is |#_module.operand.OLR| Tclass._module.operand))
(assert (forall (($h@@47 T@U) ) (!  (=> (and (= (type $h@@47) (MapType1Type refType)) ($IsGoodHeap $h@@47)) ($IsAlloc |#_module.operand.OLR| Tclass._module.operand $h@@47)) :qid |DafnyPre.405:12| :skolemid |3549| :pattern ( ($IsAlloc |#_module.operand.OLR| Tclass._module.operand $h@@47)) )))
(assert (= |#_module.operand.OLR| (Lit |#_module.operand.OLR|)))
(assert (forall ((d@@108 T@U) ) (!  (=> (and (= (type d@@108) DatatypeTypeType) (|$IsA#_module.operand| d@@108)) (or (or (or (or (or (_module.operand.OConst_q d@@108) (_module.operand.OReg_q d@@108)) (_module.operand.OShift_q d@@108)) (_module.operand.OSReg_q d@@108)) (_module.operand.OSP_q d@@108)) (_module.operand.OLR_q d@@108))) :qid |unknown.0:0| :skolemid |3550| :pattern ( (|$IsA#_module.operand| d@@108)) )))
(assert (forall ((d@@109 T@U) ) (!  (=> (and (= (type d@@109) DatatypeTypeType) ($Is d@@109 Tclass._module.operand)) (or (or (or (or (or (_module.operand.OConst_q d@@109) (_module.operand.OReg_q d@@109)) (_module.operand.OShift_q d@@109)) (_module.operand.OSReg_q d@@109)) (_module.operand.OSP_q d@@109)) (_module.operand.OLR_q d@@109))) :qid |unknown.0:0| :skolemid |3551| :pattern ( (_module.operand.OLR_q d@@109) ($Is d@@109 Tclass._module.operand)) :pattern ( (_module.operand.OSP_q d@@109) ($Is d@@109 Tclass._module.operand)) :pattern ( (_module.operand.OSReg_q d@@109) ($Is d@@109 Tclass._module.operand)) :pattern ( (_module.operand.OShift_q d@@109) ($Is d@@109 Tclass._module.operand)) :pattern ( (_module.operand.OReg_q d@@109) ($Is d@@109 Tclass._module.operand)) :pattern ( (_module.operand.OConst_q d@@109) ($Is d@@109 Tclass._module.operand)) )))
(assert (forall ((|a#251#0#0| T@U) (|a#251#1#0| T@U) ) (!  (=> (and (= (type |a#251#0#0|) (MapType BoxType BoxType)) (= (type |a#251#1#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#_module.memstate.MemState| |a#251#0#0| |a#251#1#0|)) |##_module.memstate.MemState|)) :qid |ARMdefsd.47:30| :skolemid |3552| :pattern ( (|#_module.memstate.MemState| |a#251#0#0| |a#251#1#0|)) )))
(assert (forall ((d@@110 T@U) ) (!  (=> (= (type d@@110) DatatypeTypeType) (and (=> (_module.memstate.MemState_q d@@110) (= (DatatypeCtorId d@@110) |##_module.memstate.MemState|)) (=> (= (DatatypeCtorId d@@110) |##_module.memstate.MemState|) (_module.memstate.MemState_q d@@110)))) :qid |unknown.0:0| :skolemid |3553| :pattern ( (_module.memstate.MemState_q d@@110)) )))
(assert (forall ((d@@111 T@U) ) (!  (=> (and (= (type d@@111) DatatypeTypeType) (_module.memstate.MemState_q d@@111)) (exists ((|a#252#0#0| T@U) (|a#252#1#0| T@U) ) (!  (and (and (= (type |a#252#0#0|) (MapType BoxType BoxType)) (= (type |a#252#1#0|) (MapType BoxType BoxType))) (= d@@111 (|#_module.memstate.MemState| |a#252#0#0| |a#252#1#0|))) :qid |ARMdefsd.47:30| :skolemid |3554| :no-pattern (type |a#252#0#0|) :no-pattern (type |a#252#1#0|) :no-pattern (U_2_int |a#252#0#0|) :no-pattern (U_2_bool |a#252#0#0|) :no-pattern (U_2_int |a#252#1#0|) :no-pattern (U_2_bool |a#252#1#0|) ))) :qid |unknown.0:0| :skolemid |3555| :pattern ( (_module.memstate.MemState_q d@@111)) )))
(assert (forall ((|a#253#0#0| T@U) (|a#253#1#0| T@U) ) (!  (=> (and (= (type |a#253#0#0|) (MapType BoxType BoxType)) (= (type |a#253#1#0|) (MapType BoxType BoxType))) (and (=> ($Is (|#_module.memstate.MemState| |a#253#0#0| |a#253#1#0|) Tclass._module.memstate) (and ($Is |a#253#0#0| (TMap Tclass._module.addr Tclass._module.word)) ($Is |a#253#1#0| (TMap (TSeq TChar) (TSeq Tclass._module.word))))) (=> (and ($Is |a#253#0#0| (TMap Tclass._module.addr Tclass._module.word)) ($Is |a#253#1#0| (TMap (TSeq TChar) (TSeq Tclass._module.word)))) ($Is (|#_module.memstate.MemState| |a#253#0#0| |a#253#1#0|) Tclass._module.memstate)))) :qid |ARMdefsd.47:30| :skolemid |3556| :pattern ( ($Is (|#_module.memstate.MemState| |a#253#0#0| |a#253#1#0|) Tclass._module.memstate)) )))
(assert (forall ((|a#254#0#0| T@U) (|a#254#1#0| T@U) ($h@@48 T@U) ) (!  (=> (and (and (and (= (type |a#254#0#0|) (MapType BoxType BoxType)) (= (type |a#254#1#0|) (MapType BoxType BoxType))) (= (type $h@@48) (MapType1Type refType))) ($IsGoodHeap $h@@48)) (and (=> ($IsAlloc (|#_module.memstate.MemState| |a#254#0#0| |a#254#1#0|) Tclass._module.memstate $h@@48) (and ($IsAlloc |a#254#0#0| (TMap Tclass._module.addr Tclass._module.word) $h@@48) ($IsAlloc |a#254#1#0| (TMap (TSeq TChar) (TSeq Tclass._module.word)) $h@@48))) (=> (and ($IsAlloc |a#254#0#0| (TMap Tclass._module.addr Tclass._module.word) $h@@48) ($IsAlloc |a#254#1#0| (TMap (TSeq TChar) (TSeq Tclass._module.word)) $h@@48)) ($IsAlloc (|#_module.memstate.MemState| |a#254#0#0| |a#254#1#0|) Tclass._module.memstate $h@@48)))) :qid |ARMdefsd.47:30| :skolemid |3557| :pattern ( ($IsAlloc (|#_module.memstate.MemState| |a#254#0#0| |a#254#1#0|) Tclass._module.memstate $h@@48)) )))
(assert (forall ((|a#255#0#0| T@U) (|a#255#1#0| T@U) ) (!  (=> (and (= (type |a#255#0#0|) (MapType BoxType BoxType)) (= (type |a#255#1#0|) (MapType BoxType BoxType))) (= (|#_module.memstate.MemState| (Lit |a#255#0#0|) (Lit |a#255#1#0|)) (Lit (|#_module.memstate.MemState| |a#255#0#0| |a#255#1#0|)))) :qid |ARMdefsd.47:30| :skolemid |3558| :pattern ( (|#_module.memstate.MemState| (Lit |a#255#0#0|) (Lit |a#255#1#0|))) )))
(assert (forall ((|a#256#0#0| T@U) (|a#256#1#0| T@U) ) (!  (=> (and (= (type |a#256#0#0|) (MapType BoxType BoxType)) (= (type |a#256#1#0|) (MapType BoxType BoxType))) (= (_module.memstate.addresses (|#_module.memstate.MemState| |a#256#0#0| |a#256#1#0|)) |a#256#0#0|)) :qid |ARMdefsd.47:30| :skolemid |3559| :pattern ( (|#_module.memstate.MemState| |a#256#0#0| |a#256#1#0|)) )))
(assert (forall ((|a#257#0#0| T@U) (|a#257#1#0| T@U) ) (!  (=> (and (= (type |a#257#0#0|) (MapType BoxType BoxType)) (= (type |a#257#1#0|) (MapType BoxType BoxType))) (= (_module.memstate.globals (|#_module.memstate.MemState| |a#257#0#0| |a#257#1#0|)) |a#257#1#0|)) :qid |ARMdefsd.47:30| :skolemid |3560| :pattern ( (|#_module.memstate.MemState| |a#257#0#0| |a#257#1#0|)) )))
(assert (forall ((d@@112 T@U) ) (!  (=> (and (= (type d@@112) DatatypeTypeType) (|$IsA#_module.memstate| d@@112)) (_module.memstate.MemState_q d@@112)) :qid |unknown.0:0| :skolemid |3561| :pattern ( (|$IsA#_module.memstate| d@@112)) )))
(assert (forall ((d@@113 T@U) ) (!  (=> (and (= (type d@@113) DatatypeTypeType) ($Is d@@113 Tclass._module.memstate)) (_module.memstate.MemState_q d@@113)) :qid |unknown.0:0| :skolemid |3562| :pattern ( (_module.memstate.MemState_q d@@113) ($Is d@@113 Tclass._module.memstate)) )))
(assert (forall ((|a#258#0#0| T@U) (|a#258#1#0| T@U) (|a#258#2#0| T@U) (|a#258#3#0| T@U) (|a#258#4#0| T@U) (|a#258#5#0| Bool) (|a#258#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#258#0#0|) (MapType BoxType BoxType)) (= (type |a#258#1#0|) (MapType BoxType BoxType))) (= (type |a#258#2#0|) DatatypeTypeType)) (= (type |a#258#3#0|) DatatypeTypeType)) (= (type |a#258#4#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.state.State| |a#258#0#0| |a#258#1#0| |a#258#2#0| |a#258#3#0| |a#258#4#0| |a#258#5#0| |a#258#6#0|)) |##_module.state.State|)) :qid |ARMdefsd.50:24| :skolemid |3563| :pattern ( (|#_module.state.State| |a#258#0#0| |a#258#1#0| |a#258#2#0| |a#258#3#0| |a#258#4#0| |a#258#5#0| |a#258#6#0|)) )))
(assert (forall ((d@@114 T@U) ) (!  (=> (= (type d@@114) DatatypeTypeType) (and (=> (_module.state.State_q d@@114) (= (DatatypeCtorId d@@114) |##_module.state.State|)) (=> (= (DatatypeCtorId d@@114) |##_module.state.State|) (_module.state.State_q d@@114)))) :qid |unknown.0:0| :skolemid |3564| :pattern ( (_module.state.State_q d@@114)) )))
(assert (forall ((d@@115 T@U) ) (!  (=> (and (= (type d@@115) DatatypeTypeType) (_module.state.State_q d@@115)) (exists ((|a#259#0#0| T@U) (|a#259#1#0| T@U) (|a#259#2#0| T@U) (|a#259#3#0| T@U) (|a#259#4#0| T@U) (|a#259#5#0| Bool) (|a#259#6#0| Int) ) (!  (and (and (and (and (and (= (type |a#259#0#0|) (MapType BoxType BoxType)) (= (type |a#259#1#0|) (MapType BoxType BoxType))) (= (type |a#259#2#0|) DatatypeTypeType)) (= (type |a#259#3#0|) DatatypeTypeType)) (= (type |a#259#4#0|) DatatypeTypeType)) (= d@@115 (|#_module.state.State| |a#259#0#0| |a#259#1#0| |a#259#2#0| |a#259#3#0| |a#259#4#0| |a#259#5#0| |a#259#6#0|))) :qid |ARMdefsd.50:24| :skolemid |3565| :no-pattern (type |a#259#0#0|) :no-pattern (type |a#259#1#0|) :no-pattern (type |a#259#2#0|) :no-pattern (type |a#259#3#0|) :no-pattern (type |a#259#4#0|) :no-pattern (U_2_int |a#259#0#0|) :no-pattern (U_2_bool |a#259#0#0|) :no-pattern (U_2_int |a#259#1#0|) :no-pattern (U_2_bool |a#259#1#0|) :no-pattern (U_2_int |a#259#2#0|) :no-pattern (U_2_bool |a#259#2#0|) :no-pattern (U_2_int |a#259#3#0|) :no-pattern (U_2_bool |a#259#3#0|) :no-pattern (U_2_int |a#259#4#0|) :no-pattern (U_2_bool |a#259#4#0|) ))) :qid |unknown.0:0| :skolemid |3566| :pattern ( (_module.state.State_q d@@115)) )))
(assert (forall ((|a#260#0#0| T@U) (|a#260#1#0| T@U) (|a#260#2#0| T@U) (|a#260#3#0| T@U) (|a#260#4#0| T@U) (|a#260#5#0| Bool) (|a#260#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#260#0#0|) (MapType BoxType BoxType)) (= (type |a#260#1#0|) (MapType BoxType BoxType))) (= (type |a#260#2#0|) DatatypeTypeType)) (= (type |a#260#3#0|) DatatypeTypeType)) (= (type |a#260#4#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.state.State| |a#260#0#0| |a#260#1#0| |a#260#2#0| |a#260#3#0| |a#260#4#0| |a#260#5#0| |a#260#6#0|) Tclass._module.state) (and (and (and (and (and (and ($Is |a#260#0#0| (TMap Tclass._module.ARMReg Tclass._module.word)) ($Is |a#260#1#0| (TMap Tclass._module.SReg Tclass._module.word))) ($Is |a#260#2#0| Tclass._module.memstate)) ($Is |a#260#3#0| Tclass._module.config)) ($Is |a#260#4#0| Tclass._module.RNG)) ($Is (bool_2_U |a#260#5#0|) TBool)) ($Is (int_2_U |a#260#6#0|) Tclass._System.nat))) (=> (and (and (and (and (and (and ($Is |a#260#0#0| (TMap Tclass._module.ARMReg Tclass._module.word)) ($Is |a#260#1#0| (TMap Tclass._module.SReg Tclass._module.word))) ($Is |a#260#2#0| Tclass._module.memstate)) ($Is |a#260#3#0| Tclass._module.config)) ($Is |a#260#4#0| Tclass._module.RNG)) ($Is (bool_2_U |a#260#5#0|) TBool)) ($Is (int_2_U |a#260#6#0|) Tclass._System.nat)) ($Is (|#_module.state.State| |a#260#0#0| |a#260#1#0| |a#260#2#0| |a#260#3#0| |a#260#4#0| |a#260#5#0| |a#260#6#0|) Tclass._module.state)))) :qid |ARMdefsd.50:24| :skolemid |3567| :pattern ( ($Is (|#_module.state.State| |a#260#0#0| |a#260#1#0| |a#260#2#0| |a#260#3#0| |a#260#4#0| |a#260#5#0| |a#260#6#0|) Tclass._module.state)) )))
(assert (forall ((|a#261#0#0| T@U) (|a#261#1#0| T@U) (|a#261#2#0| T@U) (|a#261#3#0| T@U) (|a#261#4#0| T@U) (|a#261#5#0| Bool) (|a#261#6#0| Int) ($h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#261#0#0|) (MapType BoxType BoxType)) (= (type |a#261#1#0|) (MapType BoxType BoxType))) (= (type |a#261#2#0|) DatatypeTypeType)) (= (type |a#261#3#0|) DatatypeTypeType)) (= (type |a#261#4#0|) DatatypeTypeType)) (= (type $h@@49) (MapType1Type refType))) ($IsGoodHeap $h@@49)) (and (=> ($IsAlloc (|#_module.state.State| |a#261#0#0| |a#261#1#0| |a#261#2#0| |a#261#3#0| |a#261#4#0| |a#261#5#0| |a#261#6#0|) Tclass._module.state $h@@49) (and (and (and (and (and (and ($IsAlloc |a#261#0#0| (TMap Tclass._module.ARMReg Tclass._module.word) $h@@49) ($IsAlloc |a#261#1#0| (TMap Tclass._module.SReg Tclass._module.word) $h@@49)) ($IsAlloc |a#261#2#0| Tclass._module.memstate $h@@49)) ($IsAlloc |a#261#3#0| Tclass._module.config $h@@49)) ($IsAlloc |a#261#4#0| Tclass._module.RNG $h@@49)) ($IsAlloc (bool_2_U |a#261#5#0|) TBool $h@@49)) ($IsAlloc (int_2_U |a#261#6#0|) Tclass._System.nat $h@@49))) (=> (and (and (and (and (and (and ($IsAlloc |a#261#0#0| (TMap Tclass._module.ARMReg Tclass._module.word) $h@@49) ($IsAlloc |a#261#1#0| (TMap Tclass._module.SReg Tclass._module.word) $h@@49)) ($IsAlloc |a#261#2#0| Tclass._module.memstate $h@@49)) ($IsAlloc |a#261#3#0| Tclass._module.config $h@@49)) ($IsAlloc |a#261#4#0| Tclass._module.RNG $h@@49)) ($IsAlloc (bool_2_U |a#261#5#0|) TBool $h@@49)) ($IsAlloc (int_2_U |a#261#6#0|) Tclass._System.nat $h@@49)) ($IsAlloc (|#_module.state.State| |a#261#0#0| |a#261#1#0| |a#261#2#0| |a#261#3#0| |a#261#4#0| |a#261#5#0| |a#261#6#0|) Tclass._module.state $h@@49)))) :qid |ARMdefsd.50:24| :skolemid |3568| :pattern ( ($IsAlloc (|#_module.state.State| |a#261#0#0| |a#261#1#0| |a#261#2#0| |a#261#3#0| |a#261#4#0| |a#261#5#0| |a#261#6#0|) Tclass._module.state $h@@49)) )))
(assert (forall ((|a#262#0#0| T@U) (|a#262#1#0| T@U) (|a#262#2#0| T@U) (|a#262#3#0| T@U) (|a#262#4#0| T@U) (|a#262#5#0| T@U) (|a#262#6#0| Int) ) (!  (=> (and (and (and (and (and (= (type |a#262#0#0|) (MapType BoxType BoxType)) (= (type |a#262#1#0|) (MapType BoxType BoxType))) (= (type |a#262#2#0|) DatatypeTypeType)) (= (type |a#262#3#0|) DatatypeTypeType)) (= (type |a#262#4#0|) DatatypeTypeType)) (= (type |a#262#5#0|) boolType)) (= (|#_module.state.State| (Lit |a#262#0#0|) (Lit |a#262#1#0|) (Lit |a#262#2#0|) (Lit |a#262#3#0|) (Lit |a#262#4#0|) (U_2_bool (Lit |a#262#5#0|)) (LitInt |a#262#6#0|)) (Lit (|#_module.state.State| |a#262#0#0| |a#262#1#0| |a#262#2#0| |a#262#3#0| |a#262#4#0| (U_2_bool |a#262#5#0|) |a#262#6#0|)))) :qid |ARMdefsd.50:24| :skolemid |3569| :pattern ( (|#_module.state.State| (Lit |a#262#0#0|) (Lit |a#262#1#0|) (Lit |a#262#2#0|) (Lit |a#262#3#0|) (Lit |a#262#4#0|) (U_2_bool (Lit |a#262#5#0|)) (LitInt |a#262#6#0|))) )))
(assert (forall ((|a#263#0#0| T@U) (|a#263#1#0| T@U) (|a#263#2#0| T@U) (|a#263#3#0| T@U) (|a#263#4#0| T@U) (|a#263#5#0| Bool) (|a#263#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#263#0#0|) (MapType BoxType BoxType)) (= (type |a#263#1#0|) (MapType BoxType BoxType))) (= (type |a#263#2#0|) DatatypeTypeType)) (= (type |a#263#3#0|) DatatypeTypeType)) (= (type |a#263#4#0|) DatatypeTypeType)) (= (_module.state.regs (|#_module.state.State| |a#263#0#0| |a#263#1#0| |a#263#2#0| |a#263#3#0| |a#263#4#0| |a#263#5#0| |a#263#6#0|)) |a#263#0#0|)) :qid |ARMdefsd.50:24| :skolemid |3570| :pattern ( (|#_module.state.State| |a#263#0#0| |a#263#1#0| |a#263#2#0| |a#263#3#0| |a#263#4#0| |a#263#5#0| |a#263#6#0|)) )))
(assert (forall ((|a#264#0#0| T@U) (|a#264#1#0| T@U) (|a#264#2#0| T@U) (|a#264#3#0| T@U) (|a#264#4#0| T@U) (|a#264#5#0| Bool) (|a#264#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#264#0#0|) (MapType BoxType BoxType)) (= (type |a#264#1#0|) (MapType BoxType BoxType))) (= (type |a#264#2#0|) DatatypeTypeType)) (= (type |a#264#3#0|) DatatypeTypeType)) (= (type |a#264#4#0|) DatatypeTypeType)) (= (_module.state.sregs (|#_module.state.State| |a#264#0#0| |a#264#1#0| |a#264#2#0| |a#264#3#0| |a#264#4#0| |a#264#5#0| |a#264#6#0|)) |a#264#1#0|)) :qid |ARMdefsd.50:24| :skolemid |3571| :pattern ( (|#_module.state.State| |a#264#0#0| |a#264#1#0| |a#264#2#0| |a#264#3#0| |a#264#4#0| |a#264#5#0| |a#264#6#0|)) )))
(assert (forall ((|a#265#0#0| T@U) (|a#265#1#0| T@U) (|a#265#2#0| T@U) (|a#265#3#0| T@U) (|a#265#4#0| T@U) (|a#265#5#0| Bool) (|a#265#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#265#0#0|) (MapType BoxType BoxType)) (= (type |a#265#1#0|) (MapType BoxType BoxType))) (= (type |a#265#2#0|) DatatypeTypeType)) (= (type |a#265#3#0|) DatatypeTypeType)) (= (type |a#265#4#0|) DatatypeTypeType)) (= (_module.state.m (|#_module.state.State| |a#265#0#0| |a#265#1#0| |a#265#2#0| |a#265#3#0| |a#265#4#0| |a#265#5#0| |a#265#6#0|)) |a#265#2#0|)) :qid |ARMdefsd.50:24| :skolemid |3572| :pattern ( (|#_module.state.State| |a#265#0#0| |a#265#1#0| |a#265#2#0| |a#265#3#0| |a#265#4#0| |a#265#5#0| |a#265#6#0|)) )))
(assert (forall ((|a#266#0#0| T@U) (|a#266#1#0| T@U) (|a#266#2#0| T@U) (|a#266#3#0| T@U) (|a#266#4#0| T@U) (|a#266#5#0| Bool) (|a#266#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#266#0#0|) (MapType BoxType BoxType)) (= (type |a#266#1#0|) (MapType BoxType BoxType))) (= (type |a#266#2#0|) DatatypeTypeType)) (= (type |a#266#3#0|) DatatypeTypeType)) (= (type |a#266#4#0|) DatatypeTypeType)) (< (DtRank |a#266#2#0|) (DtRank (|#_module.state.State| |a#266#0#0| |a#266#1#0| |a#266#2#0| |a#266#3#0| |a#266#4#0| |a#266#5#0| |a#266#6#0|)))) :qid |ARMdefsd.50:24| :skolemid |3573| :pattern ( (|#_module.state.State| |a#266#0#0| |a#266#1#0| |a#266#2#0| |a#266#3#0| |a#266#4#0| |a#266#5#0| |a#266#6#0|)) )))
(assert (forall ((|a#267#0#0| T@U) (|a#267#1#0| T@U) (|a#267#2#0| T@U) (|a#267#3#0| T@U) (|a#267#4#0| T@U) (|a#267#5#0| Bool) (|a#267#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#267#0#0|) (MapType BoxType BoxType)) (= (type |a#267#1#0|) (MapType BoxType BoxType))) (= (type |a#267#2#0|) DatatypeTypeType)) (= (type |a#267#3#0|) DatatypeTypeType)) (= (type |a#267#4#0|) DatatypeTypeType)) (= (_module.state.conf (|#_module.state.State| |a#267#0#0| |a#267#1#0| |a#267#2#0| |a#267#3#0| |a#267#4#0| |a#267#5#0| |a#267#6#0|)) |a#267#3#0|)) :qid |ARMdefsd.50:24| :skolemid |3574| :pattern ( (|#_module.state.State| |a#267#0#0| |a#267#1#0| |a#267#2#0| |a#267#3#0| |a#267#4#0| |a#267#5#0| |a#267#6#0|)) )))
(assert (forall ((|a#268#0#0| T@U) (|a#268#1#0| T@U) (|a#268#2#0| T@U) (|a#268#3#0| T@U) (|a#268#4#0| T@U) (|a#268#5#0| Bool) (|a#268#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#268#0#0|) (MapType BoxType BoxType)) (= (type |a#268#1#0|) (MapType BoxType BoxType))) (= (type |a#268#2#0|) DatatypeTypeType)) (= (type |a#268#3#0|) DatatypeTypeType)) (= (type |a#268#4#0|) DatatypeTypeType)) (< (DtRank |a#268#3#0|) (DtRank (|#_module.state.State| |a#268#0#0| |a#268#1#0| |a#268#2#0| |a#268#3#0| |a#268#4#0| |a#268#5#0| |a#268#6#0|)))) :qid |ARMdefsd.50:24| :skolemid |3575| :pattern ( (|#_module.state.State| |a#268#0#0| |a#268#1#0| |a#268#2#0| |a#268#3#0| |a#268#4#0| |a#268#5#0| |a#268#6#0|)) )))
(assert (forall ((|a#269#0#0| T@U) (|a#269#1#0| T@U) (|a#269#2#0| T@U) (|a#269#3#0| T@U) (|a#269#4#0| T@U) (|a#269#5#0| Bool) (|a#269#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#269#0#0|) (MapType BoxType BoxType)) (= (type |a#269#1#0|) (MapType BoxType BoxType))) (= (type |a#269#2#0|) DatatypeTypeType)) (= (type |a#269#3#0|) DatatypeTypeType)) (= (type |a#269#4#0|) DatatypeTypeType)) (= (_module.state.rng (|#_module.state.State| |a#269#0#0| |a#269#1#0| |a#269#2#0| |a#269#3#0| |a#269#4#0| |a#269#5#0| |a#269#6#0|)) |a#269#4#0|)) :qid |ARMdefsd.50:24| :skolemid |3576| :pattern ( (|#_module.state.State| |a#269#0#0| |a#269#1#0| |a#269#2#0| |a#269#3#0| |a#269#4#0| |a#269#5#0| |a#269#6#0|)) )))
(assert (forall ((|a#270#0#0| T@U) (|a#270#1#0| T@U) (|a#270#2#0| T@U) (|a#270#3#0| T@U) (|a#270#4#0| T@U) (|a#270#5#0| Bool) (|a#270#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#270#0#0|) (MapType BoxType BoxType)) (= (type |a#270#1#0|) (MapType BoxType BoxType))) (= (type |a#270#2#0|) DatatypeTypeType)) (= (type |a#270#3#0|) DatatypeTypeType)) (= (type |a#270#4#0|) DatatypeTypeType)) (< (DtRank |a#270#4#0|) (DtRank (|#_module.state.State| |a#270#0#0| |a#270#1#0| |a#270#2#0| |a#270#3#0| |a#270#4#0| |a#270#5#0| |a#270#6#0|)))) :qid |ARMdefsd.50:24| :skolemid |3577| :pattern ( (|#_module.state.State| |a#270#0#0| |a#270#1#0| |a#270#2#0| |a#270#3#0| |a#270#4#0| |a#270#5#0| |a#270#6#0|)) )))
(assert (forall ((|a#271#0#0| T@U) (|a#271#1#0| T@U) (|a#271#2#0| T@U) (|a#271#3#0| T@U) (|a#271#4#0| T@U) (|a#271#5#0| Bool) (|a#271#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#271#0#0|) (MapType BoxType BoxType)) (= (type |a#271#1#0|) (MapType BoxType BoxType))) (= (type |a#271#2#0|) DatatypeTypeType)) (= (type |a#271#3#0|) DatatypeTypeType)) (= (type |a#271#4#0|) DatatypeTypeType)) (and (=> (_module.state.ok (|#_module.state.State| |a#271#0#0| |a#271#1#0| |a#271#2#0| |a#271#3#0| |a#271#4#0| |a#271#5#0| |a#271#6#0|)) |a#271#5#0|) (=> |a#271#5#0| (_module.state.ok (|#_module.state.State| |a#271#0#0| |a#271#1#0| |a#271#2#0| |a#271#3#0| |a#271#4#0| |a#271#5#0| |a#271#6#0|))))) :qid |ARMdefsd.50:24| :skolemid |3578| :pattern ( (|#_module.state.State| |a#271#0#0| |a#271#1#0| |a#271#2#0| |a#271#3#0| |a#271#4#0| |a#271#5#0| |a#271#6#0|)) )))
(assert (forall ((|a#272#0#0| T@U) (|a#272#1#0| T@U) (|a#272#2#0| T@U) (|a#272#3#0| T@U) (|a#272#4#0| T@U) (|a#272#5#0| Bool) (|a#272#6#0| Int) ) (!  (=> (and (and (and (and (= (type |a#272#0#0|) (MapType BoxType BoxType)) (= (type |a#272#1#0|) (MapType BoxType BoxType))) (= (type |a#272#2#0|) DatatypeTypeType)) (= (type |a#272#3#0|) DatatypeTypeType)) (= (type |a#272#4#0|) DatatypeTypeType)) (= (_module.state.steps (|#_module.state.State| |a#272#0#0| |a#272#1#0| |a#272#2#0| |a#272#3#0| |a#272#4#0| |a#272#5#0| |a#272#6#0|)) |a#272#6#0|)) :qid |ARMdefsd.50:24| :skolemid |3579| :pattern ( (|#_module.state.State| |a#272#0#0| |a#272#1#0| |a#272#2#0| |a#272#3#0| |a#272#4#0| |a#272#5#0| |a#272#6#0|)) )))
(assert (forall ((d@@116 T@U) ) (!  (=> (and (= (type d@@116) DatatypeTypeType) (|$IsA#_module.state| d@@116)) (_module.state.State_q d@@116)) :qid |unknown.0:0| :skolemid |3580| :pattern ( (|$IsA#_module.state| d@@116)) )))
(assert (forall ((d@@117 T@U) ) (!  (=> (and (= (type d@@117) DatatypeTypeType) ($Is d@@117 Tclass._module.state)) (_module.state.State_q d@@117)) :qid |unknown.0:0| :skolemid |3581| :pattern ( (_module.state.State_q d@@117) ($Is d@@117 Tclass._module.state)) )))
(assert (= (DatatypeCtorId |#_module.mode.User|) |##_module.mode.User|))
(assert (forall ((d@@118 T@U) ) (!  (=> (= (type d@@118) DatatypeTypeType) (and (=> (_module.mode.User_q d@@118) (= (DatatypeCtorId d@@118) |##_module.mode.User|)) (=> (= (DatatypeCtorId d@@118) |##_module.mode.User|) (_module.mode.User_q d@@118)))) :qid |unknown.0:0| :skolemid |3582| :pattern ( (_module.mode.User_q d@@118)) )))
(assert (forall ((d@@119 T@U) ) (!  (=> (and (= (type d@@119) DatatypeTypeType) (_module.mode.User_q d@@119)) (= d@@119 |#_module.mode.User|)) :qid |unknown.0:0| :skolemid |3583| :pattern ( (_module.mode.User_q d@@119)) )))
(assert ($Is |#_module.mode.User| Tclass._module.mode))
(assert (forall (($h@@50 T@U) ) (!  (=> (and (= (type $h@@50) (MapType1Type refType)) ($IsGoodHeap $h@@50)) ($IsAlloc |#_module.mode.User| Tclass._module.mode $h@@50)) :qid |DafnyPre.405:12| :skolemid |3584| :pattern ( ($IsAlloc |#_module.mode.User| Tclass._module.mode $h@@50)) )))
(assert (= |#_module.mode.User| (Lit |#_module.mode.User|)))
(assert (= (DatatypeCtorId |#_module.mode.FIQ|) |##_module.mode.FIQ|))
(assert (forall ((d@@120 T@U) ) (!  (=> (= (type d@@120) DatatypeTypeType) (and (=> (_module.mode.FIQ_q d@@120) (= (DatatypeCtorId d@@120) |##_module.mode.FIQ|)) (=> (= (DatatypeCtorId d@@120) |##_module.mode.FIQ|) (_module.mode.FIQ_q d@@120)))) :qid |unknown.0:0| :skolemid |3585| :pattern ( (_module.mode.FIQ_q d@@120)) )))
(assert (forall ((d@@121 T@U) ) (!  (=> (and (= (type d@@121) DatatypeTypeType) (_module.mode.FIQ_q d@@121)) (= d@@121 |#_module.mode.FIQ|)) :qid |unknown.0:0| :skolemid |3586| :pattern ( (_module.mode.FIQ_q d@@121)) )))
(assert ($Is |#_module.mode.FIQ| Tclass._module.mode))
(assert (forall (($h@@51 T@U) ) (!  (=> (and (= (type $h@@51) (MapType1Type refType)) ($IsGoodHeap $h@@51)) ($IsAlloc |#_module.mode.FIQ| Tclass._module.mode $h@@51)) :qid |DafnyPre.405:12| :skolemid |3587| :pattern ( ($IsAlloc |#_module.mode.FIQ| Tclass._module.mode $h@@51)) )))
(assert (= |#_module.mode.FIQ| (Lit |#_module.mode.FIQ|)))
(assert (= (DatatypeCtorId |#_module.mode.IRQ|) |##_module.mode.IRQ|))
(assert (forall ((d@@122 T@U) ) (!  (=> (= (type d@@122) DatatypeTypeType) (and (=> (_module.mode.IRQ_q d@@122) (= (DatatypeCtorId d@@122) |##_module.mode.IRQ|)) (=> (= (DatatypeCtorId d@@122) |##_module.mode.IRQ|) (_module.mode.IRQ_q d@@122)))) :qid |unknown.0:0| :skolemid |3588| :pattern ( (_module.mode.IRQ_q d@@122)) )))
(assert (forall ((d@@123 T@U) ) (!  (=> (and (= (type d@@123) DatatypeTypeType) (_module.mode.IRQ_q d@@123)) (= d@@123 |#_module.mode.IRQ|)) :qid |unknown.0:0| :skolemid |3589| :pattern ( (_module.mode.IRQ_q d@@123)) )))
(assert ($Is |#_module.mode.IRQ| Tclass._module.mode))
(assert (forall (($h@@52 T@U) ) (!  (=> (and (= (type $h@@52) (MapType1Type refType)) ($IsGoodHeap $h@@52)) ($IsAlloc |#_module.mode.IRQ| Tclass._module.mode $h@@52)) :qid |DafnyPre.405:12| :skolemid |3590| :pattern ( ($IsAlloc |#_module.mode.IRQ| Tclass._module.mode $h@@52)) )))
(assert (= |#_module.mode.IRQ| (Lit |#_module.mode.IRQ|)))
(assert (= (DatatypeCtorId |#_module.mode.Supervisor|) |##_module.mode.Supervisor|))
(assert (forall ((d@@124 T@U) ) (!  (=> (= (type d@@124) DatatypeTypeType) (and (=> (_module.mode.Supervisor_q d@@124) (= (DatatypeCtorId d@@124) |##_module.mode.Supervisor|)) (=> (= (DatatypeCtorId d@@124) |##_module.mode.Supervisor|) (_module.mode.Supervisor_q d@@124)))) :qid |unknown.0:0| :skolemid |3591| :pattern ( (_module.mode.Supervisor_q d@@124)) )))
(assert (forall ((d@@125 T@U) ) (!  (=> (and (= (type d@@125) DatatypeTypeType) (_module.mode.Supervisor_q d@@125)) (= d@@125 |#_module.mode.Supervisor|)) :qid |unknown.0:0| :skolemid |3592| :pattern ( (_module.mode.Supervisor_q d@@125)) )))
(assert ($Is |#_module.mode.Supervisor| Tclass._module.mode))
(assert (forall (($h@@53 T@U) ) (!  (=> (and (= (type $h@@53) (MapType1Type refType)) ($IsGoodHeap $h@@53)) ($IsAlloc |#_module.mode.Supervisor| Tclass._module.mode $h@@53)) :qid |DafnyPre.405:12| :skolemid |3593| :pattern ( ($IsAlloc |#_module.mode.Supervisor| Tclass._module.mode $h@@53)) )))
(assert (= |#_module.mode.Supervisor| (Lit |#_module.mode.Supervisor|)))
(assert (= (DatatypeCtorId |#_module.mode.Abort|) |##_module.mode.Abort|))
(assert (forall ((d@@126 T@U) ) (!  (=> (= (type d@@126) DatatypeTypeType) (and (=> (_module.mode.Abort_q d@@126) (= (DatatypeCtorId d@@126) |##_module.mode.Abort|)) (=> (= (DatatypeCtorId d@@126) |##_module.mode.Abort|) (_module.mode.Abort_q d@@126)))) :qid |unknown.0:0| :skolemid |3594| :pattern ( (_module.mode.Abort_q d@@126)) )))
(assert (forall ((d@@127 T@U) ) (!  (=> (and (= (type d@@127) DatatypeTypeType) (_module.mode.Abort_q d@@127)) (= d@@127 |#_module.mode.Abort|)) :qid |unknown.0:0| :skolemid |3595| :pattern ( (_module.mode.Abort_q d@@127)) )))
(assert ($Is |#_module.mode.Abort| Tclass._module.mode))
(assert (forall (($h@@54 T@U) ) (!  (=> (and (= (type $h@@54) (MapType1Type refType)) ($IsGoodHeap $h@@54)) ($IsAlloc |#_module.mode.Abort| Tclass._module.mode $h@@54)) :qid |DafnyPre.405:12| :skolemid |3596| :pattern ( ($IsAlloc |#_module.mode.Abort| Tclass._module.mode $h@@54)) )))
(assert (= |#_module.mode.Abort| (Lit |#_module.mode.Abort|)))
(assert (= (DatatypeCtorId |#_module.mode.Undefined|) |##_module.mode.Undefined|))
(assert (forall ((d@@128 T@U) ) (!  (=> (= (type d@@128) DatatypeTypeType) (and (=> (_module.mode.Undefined_q d@@128) (= (DatatypeCtorId d@@128) |##_module.mode.Undefined|)) (=> (= (DatatypeCtorId d@@128) |##_module.mode.Undefined|) (_module.mode.Undefined_q d@@128)))) :qid |unknown.0:0| :skolemid |3597| :pattern ( (_module.mode.Undefined_q d@@128)) )))
(assert (forall ((d@@129 T@U) ) (!  (=> (and (= (type d@@129) DatatypeTypeType) (_module.mode.Undefined_q d@@129)) (= d@@129 |#_module.mode.Undefined|)) :qid |unknown.0:0| :skolemid |3598| :pattern ( (_module.mode.Undefined_q d@@129)) )))
(assert ($Is |#_module.mode.Undefined| Tclass._module.mode))
(assert (forall (($h@@55 T@U) ) (!  (=> (and (= (type $h@@55) (MapType1Type refType)) ($IsGoodHeap $h@@55)) ($IsAlloc |#_module.mode.Undefined| Tclass._module.mode $h@@55)) :qid |DafnyPre.405:12| :skolemid |3599| :pattern ( ($IsAlloc |#_module.mode.Undefined| Tclass._module.mode $h@@55)) )))
(assert (= |#_module.mode.Undefined| (Lit |#_module.mode.Undefined|)))
(assert (= (DatatypeCtorId |#_module.mode.Monitor|) |##_module.mode.Monitor|))
(assert (forall ((d@@130 T@U) ) (!  (=> (= (type d@@130) DatatypeTypeType) (and (=> (_module.mode.Monitor_q d@@130) (= (DatatypeCtorId d@@130) |##_module.mode.Monitor|)) (=> (= (DatatypeCtorId d@@130) |##_module.mode.Monitor|) (_module.mode.Monitor_q d@@130)))) :qid |unknown.0:0| :skolemid |3600| :pattern ( (_module.mode.Monitor_q d@@130)) )))
(assert (forall ((d@@131 T@U) ) (!  (=> (and (= (type d@@131) DatatypeTypeType) (_module.mode.Monitor_q d@@131)) (= d@@131 |#_module.mode.Monitor|)) :qid |unknown.0:0| :skolemid |3601| :pattern ( (_module.mode.Monitor_q d@@131)) )))
(assert ($Is |#_module.mode.Monitor| Tclass._module.mode))
(assert (forall (($h@@56 T@U) ) (!  (=> (and (= (type $h@@56) (MapType1Type refType)) ($IsGoodHeap $h@@56)) ($IsAlloc |#_module.mode.Monitor| Tclass._module.mode $h@@56)) :qid |DafnyPre.405:12| :skolemid |3602| :pattern ( ($IsAlloc |#_module.mode.Monitor| Tclass._module.mode $h@@56)) )))
(assert (= |#_module.mode.Monitor| (Lit |#_module.mode.Monitor|)))
(assert (forall ((d@@132 T@U) ) (!  (=> (and (= (type d@@132) DatatypeTypeType) (|$IsA#_module.mode| d@@132)) (or (or (or (or (or (or (_module.mode.User_q d@@132) (_module.mode.FIQ_q d@@132)) (_module.mode.IRQ_q d@@132)) (_module.mode.Supervisor_q d@@132)) (_module.mode.Abort_q d@@132)) (_module.mode.Undefined_q d@@132)) (_module.mode.Monitor_q d@@132))) :qid |unknown.0:0| :skolemid |3603| :pattern ( (|$IsA#_module.mode| d@@132)) )))
(assert (forall ((d@@133 T@U) ) (!  (=> (and (= (type d@@133) DatatypeTypeType) ($Is d@@133 Tclass._module.mode)) (or (or (or (or (or (or (_module.mode.User_q d@@133) (_module.mode.FIQ_q d@@133)) (_module.mode.IRQ_q d@@133)) (_module.mode.Supervisor_q d@@133)) (_module.mode.Abort_q d@@133)) (_module.mode.Undefined_q d@@133)) (_module.mode.Monitor_q d@@133))) :qid |unknown.0:0| :skolemid |3604| :pattern ( (_module.mode.Monitor_q d@@133) ($Is d@@133 Tclass._module.mode)) :pattern ( (_module.mode.Undefined_q d@@133) ($Is d@@133 Tclass._module.mode)) :pattern ( (_module.mode.Abort_q d@@133) ($Is d@@133 Tclass._module.mode)) :pattern ( (_module.mode.Supervisor_q d@@133) ($Is d@@133 Tclass._module.mode)) :pattern ( (_module.mode.IRQ_q d@@133) ($Is d@@133 Tclass._module.mode)) :pattern ( (_module.mode.FIQ_q d@@133) ($Is d@@133 Tclass._module.mode)) :pattern ( (_module.mode.User_q d@@133) ($Is d@@133 Tclass._module.mode)) )))
(assert (= (DatatypeCtorId |#_module.priv.PL0|) |##_module.priv.PL0|))
(assert (forall ((d@@134 T@U) ) (!  (=> (= (type d@@134) DatatypeTypeType) (and (=> (_module.priv.PL0_q d@@134) (= (DatatypeCtorId d@@134) |##_module.priv.PL0|)) (=> (= (DatatypeCtorId d@@134) |##_module.priv.PL0|) (_module.priv.PL0_q d@@134)))) :qid |unknown.0:0| :skolemid |3605| :pattern ( (_module.priv.PL0_q d@@134)) )))
(assert (forall ((d@@135 T@U) ) (!  (=> (and (= (type d@@135) DatatypeTypeType) (_module.priv.PL0_q d@@135)) (= d@@135 |#_module.priv.PL0|)) :qid |unknown.0:0| :skolemid |3606| :pattern ( (_module.priv.PL0_q d@@135)) )))
(assert ($Is |#_module.priv.PL0| Tclass._module.priv))
(assert (forall (($h@@57 T@U) ) (!  (=> (and (= (type $h@@57) (MapType1Type refType)) ($IsGoodHeap $h@@57)) ($IsAlloc |#_module.priv.PL0| Tclass._module.priv $h@@57)) :qid |DafnyPre.405:12| :skolemid |3607| :pattern ( ($IsAlloc |#_module.priv.PL0| Tclass._module.priv $h@@57)) )))
(assert (= |#_module.priv.PL0| (Lit |#_module.priv.PL0|)))
(assert (= (DatatypeCtorId |#_module.priv.PL1|) |##_module.priv.PL1|))
(assert (forall ((d@@136 T@U) ) (!  (=> (= (type d@@136) DatatypeTypeType) (and (=> (_module.priv.PL1_q d@@136) (= (DatatypeCtorId d@@136) |##_module.priv.PL1|)) (=> (= (DatatypeCtorId d@@136) |##_module.priv.PL1|) (_module.priv.PL1_q d@@136)))) :qid |unknown.0:0| :skolemid |3608| :pattern ( (_module.priv.PL1_q d@@136)) )))
(assert (forall ((d@@137 T@U) ) (!  (=> (and (= (type d@@137) DatatypeTypeType) (_module.priv.PL1_q d@@137)) (= d@@137 |#_module.priv.PL1|)) :qid |unknown.0:0| :skolemid |3609| :pattern ( (_module.priv.PL1_q d@@137)) )))
(assert ($Is |#_module.priv.PL1| Tclass._module.priv))
(assert (forall (($h@@58 T@U) ) (!  (=> (and (= (type $h@@58) (MapType1Type refType)) ($IsGoodHeap $h@@58)) ($IsAlloc |#_module.priv.PL1| Tclass._module.priv $h@@58)) :qid |DafnyPre.405:12| :skolemid |3610| :pattern ( ($IsAlloc |#_module.priv.PL1| Tclass._module.priv $h@@58)) )))
(assert (= |#_module.priv.PL1| (Lit |#_module.priv.PL1|)))
(assert (forall ((d@@138 T@U) ) (!  (=> (and (= (type d@@138) DatatypeTypeType) (|$IsA#_module.priv| d@@138)) (or (_module.priv.PL0_q d@@138) (_module.priv.PL1_q d@@138))) :qid |unknown.0:0| :skolemid |3611| :pattern ( (|$IsA#_module.priv| d@@138)) )))
(assert (forall ((d@@139 T@U) ) (!  (=> (and (= (type d@@139) DatatypeTypeType) ($Is d@@139 Tclass._module.priv)) (or (_module.priv.PL0_q d@@139) (_module.priv.PL1_q d@@139))) :qid |unknown.0:0| :skolemid |3612| :pattern ( (_module.priv.PL1_q d@@139) ($Is d@@139 Tclass._module.priv)) :pattern ( (_module.priv.PL0_q d@@139) ($Is d@@139 Tclass._module.priv)) )))
(assert (= (DatatypeCtorId |#_module.world.Secure|) |##_module.world.Secure|))
(assert (forall ((d@@140 T@U) ) (!  (=> (= (type d@@140) DatatypeTypeType) (and (=> (_module.world.Secure_q d@@140) (= (DatatypeCtorId d@@140) |##_module.world.Secure|)) (=> (= (DatatypeCtorId d@@140) |##_module.world.Secure|) (_module.world.Secure_q d@@140)))) :qid |unknown.0:0| :skolemid |3613| :pattern ( (_module.world.Secure_q d@@140)) )))
(assert (forall ((d@@141 T@U) ) (!  (=> (and (= (type d@@141) DatatypeTypeType) (_module.world.Secure_q d@@141)) (= d@@141 |#_module.world.Secure|)) :qid |unknown.0:0| :skolemid |3614| :pattern ( (_module.world.Secure_q d@@141)) )))
(assert ($Is |#_module.world.Secure| Tclass._module.world))
(assert (forall (($h@@59 T@U) ) (!  (=> (and (= (type $h@@59) (MapType1Type refType)) ($IsGoodHeap $h@@59)) ($IsAlloc |#_module.world.Secure| Tclass._module.world $h@@59)) :qid |DafnyPre.405:12| :skolemid |3615| :pattern ( ($IsAlloc |#_module.world.Secure| Tclass._module.world $h@@59)) )))
(assert (= |#_module.world.Secure| (Lit |#_module.world.Secure|)))
(assert (= (DatatypeCtorId |#_module.world.NotSecure|) |##_module.world.NotSecure|))
(assert (forall ((d@@142 T@U) ) (!  (=> (= (type d@@142) DatatypeTypeType) (and (=> (_module.world.NotSecure_q d@@142) (= (DatatypeCtorId d@@142) |##_module.world.NotSecure|)) (=> (= (DatatypeCtorId d@@142) |##_module.world.NotSecure|) (_module.world.NotSecure_q d@@142)))) :qid |unknown.0:0| :skolemid |3616| :pattern ( (_module.world.NotSecure_q d@@142)) )))
(assert (forall ((d@@143 T@U) ) (!  (=> (and (= (type d@@143) DatatypeTypeType) (_module.world.NotSecure_q d@@143)) (= d@@143 |#_module.world.NotSecure|)) :qid |unknown.0:0| :skolemid |3617| :pattern ( (_module.world.NotSecure_q d@@143)) )))
(assert ($Is |#_module.world.NotSecure| Tclass._module.world))
(assert (forall (($h@@60 T@U) ) (!  (=> (and (= (type $h@@60) (MapType1Type refType)) ($IsGoodHeap $h@@60)) ($IsAlloc |#_module.world.NotSecure| Tclass._module.world $h@@60)) :qid |DafnyPre.405:12| :skolemid |3618| :pattern ( ($IsAlloc |#_module.world.NotSecure| Tclass._module.world $h@@60)) )))
(assert (= |#_module.world.NotSecure| (Lit |#_module.world.NotSecure|)))
(assert (forall ((d@@144 T@U) ) (!  (=> (and (= (type d@@144) DatatypeTypeType) (|$IsA#_module.world| d@@144)) (or (_module.world.Secure_q d@@144) (_module.world.NotSecure_q d@@144))) :qid |unknown.0:0| :skolemid |3619| :pattern ( (|$IsA#_module.world| d@@144)) )))
(assert (forall ((d@@145 T@U) ) (!  (=> (and (= (type d@@145) DatatypeTypeType) ($Is d@@145 Tclass._module.world)) (or (_module.world.Secure_q d@@145) (_module.world.NotSecure_q d@@145))) :qid |unknown.0:0| :skolemid |3620| :pattern ( (_module.world.NotSecure_q d@@145) ($Is d@@145 Tclass._module.world)) :pattern ( (_module.world.Secure_q d@@145) ($Is d@@145 Tclass._module.world)) )))
(assert (= (type |#_module.exception.ExAbt|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.exception.ExAbt|) |##_module.exception.ExAbt|))
(assert (forall ((d@@146 T@U) ) (!  (=> (= (type d@@146) DatatypeTypeType) (and (=> (_module.exception.ExAbt_q d@@146) (= (DatatypeCtorId d@@146) |##_module.exception.ExAbt|)) (=> (= (DatatypeCtorId d@@146) |##_module.exception.ExAbt|) (_module.exception.ExAbt_q d@@146)))) :qid |unknown.0:0| :skolemid |3621| :pattern ( (_module.exception.ExAbt_q d@@146)) )))
(assert (forall ((d@@147 T@U) ) (!  (=> (and (= (type d@@147) DatatypeTypeType) (_module.exception.ExAbt_q d@@147)) (= d@@147 |#_module.exception.ExAbt|)) :qid |unknown.0:0| :skolemid |3622| :pattern ( (_module.exception.ExAbt_q d@@147)) )))
(assert ($Is |#_module.exception.ExAbt| Tclass._module.exception))
(assert (forall (($h@@61 T@U) ) (!  (=> (and (= (type $h@@61) (MapType1Type refType)) ($IsGoodHeap $h@@61)) ($IsAlloc |#_module.exception.ExAbt| Tclass._module.exception $h@@61)) :qid |DafnyPre.405:12| :skolemid |3623| :pattern ( ($IsAlloc |#_module.exception.ExAbt| Tclass._module.exception $h@@61)) )))
(assert (= |#_module.exception.ExAbt| (Lit |#_module.exception.ExAbt|)))
(assert (= (type |#_module.exception.ExUnd|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.exception.ExUnd|) |##_module.exception.ExUnd|))
(assert (forall ((d@@148 T@U) ) (!  (=> (= (type d@@148) DatatypeTypeType) (and (=> (_module.exception.ExUnd_q d@@148) (= (DatatypeCtorId d@@148) |##_module.exception.ExUnd|)) (=> (= (DatatypeCtorId d@@148) |##_module.exception.ExUnd|) (_module.exception.ExUnd_q d@@148)))) :qid |unknown.0:0| :skolemid |3624| :pattern ( (_module.exception.ExUnd_q d@@148)) )))
(assert (forall ((d@@149 T@U) ) (!  (=> (and (= (type d@@149) DatatypeTypeType) (_module.exception.ExUnd_q d@@149)) (= d@@149 |#_module.exception.ExUnd|)) :qid |unknown.0:0| :skolemid |3625| :pattern ( (_module.exception.ExUnd_q d@@149)) )))
(assert ($Is |#_module.exception.ExUnd| Tclass._module.exception))
(assert (forall (($h@@62 T@U) ) (!  (=> (and (= (type $h@@62) (MapType1Type refType)) ($IsGoodHeap $h@@62)) ($IsAlloc |#_module.exception.ExUnd| Tclass._module.exception $h@@62)) :qid |DafnyPre.405:12| :skolemid |3626| :pattern ( ($IsAlloc |#_module.exception.ExUnd| Tclass._module.exception $h@@62)) )))
(assert (= |#_module.exception.ExUnd| (Lit |#_module.exception.ExUnd|)))
(assert (= (DatatypeCtorId |#_module.exception.ExIRQ|) |##_module.exception.ExIRQ|))
(assert (forall ((d@@150 T@U) ) (!  (=> (= (type d@@150) DatatypeTypeType) (and (=> (_module.exception.ExIRQ_q d@@150) (= (DatatypeCtorId d@@150) |##_module.exception.ExIRQ|)) (=> (= (DatatypeCtorId d@@150) |##_module.exception.ExIRQ|) (_module.exception.ExIRQ_q d@@150)))) :qid |unknown.0:0| :skolemid |3627| :pattern ( (_module.exception.ExIRQ_q d@@150)) )))
(assert (forall ((d@@151 T@U) ) (!  (=> (and (= (type d@@151) DatatypeTypeType) (_module.exception.ExIRQ_q d@@151)) (= d@@151 |#_module.exception.ExIRQ|)) :qid |unknown.0:0| :skolemid |3628| :pattern ( (_module.exception.ExIRQ_q d@@151)) )))
(assert ($Is |#_module.exception.ExIRQ| Tclass._module.exception))
(assert (forall (($h@@63 T@U) ) (!  (=> (and (= (type $h@@63) (MapType1Type refType)) ($IsGoodHeap $h@@63)) ($IsAlloc |#_module.exception.ExIRQ| Tclass._module.exception $h@@63)) :qid |DafnyPre.405:12| :skolemid |3629| :pattern ( ($IsAlloc |#_module.exception.ExIRQ| Tclass._module.exception $h@@63)) )))
(assert (= |#_module.exception.ExIRQ| (Lit |#_module.exception.ExIRQ|)))
(assert (= (DatatypeCtorId |#_module.exception.ExFIQ|) |##_module.exception.ExFIQ|))
(assert (forall ((d@@152 T@U) ) (!  (=> (= (type d@@152) DatatypeTypeType) (and (=> (_module.exception.ExFIQ_q d@@152) (= (DatatypeCtorId d@@152) |##_module.exception.ExFIQ|)) (=> (= (DatatypeCtorId d@@152) |##_module.exception.ExFIQ|) (_module.exception.ExFIQ_q d@@152)))) :qid |unknown.0:0| :skolemid |3630| :pattern ( (_module.exception.ExFIQ_q d@@152)) )))
(assert (forall ((d@@153 T@U) ) (!  (=> (and (= (type d@@153) DatatypeTypeType) (_module.exception.ExFIQ_q d@@153)) (= d@@153 |#_module.exception.ExFIQ|)) :qid |unknown.0:0| :skolemid |3631| :pattern ( (_module.exception.ExFIQ_q d@@153)) )))
(assert ($Is |#_module.exception.ExFIQ| Tclass._module.exception))
(assert (forall (($h@@64 T@U) ) (!  (=> (and (= (type $h@@64) (MapType1Type refType)) ($IsGoodHeap $h@@64)) ($IsAlloc |#_module.exception.ExFIQ| Tclass._module.exception $h@@64)) :qid |DafnyPre.405:12| :skolemid |3632| :pattern ( ($IsAlloc |#_module.exception.ExFIQ| Tclass._module.exception $h@@64)) )))
(assert (= |#_module.exception.ExFIQ| (Lit |#_module.exception.ExFIQ|)))
(assert (= (type |#_module.exception.ExSVC|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.exception.ExSVC|) |##_module.exception.ExSVC|))
(assert (forall ((d@@154 T@U) ) (!  (=> (= (type d@@154) DatatypeTypeType) (and (=> (_module.exception.ExSVC_q d@@154) (= (DatatypeCtorId d@@154) |##_module.exception.ExSVC|)) (=> (= (DatatypeCtorId d@@154) |##_module.exception.ExSVC|) (_module.exception.ExSVC_q d@@154)))) :qid |unknown.0:0| :skolemid |3633| :pattern ( (_module.exception.ExSVC_q d@@154)) )))
(assert (forall ((d@@155 T@U) ) (!  (=> (and (= (type d@@155) DatatypeTypeType) (_module.exception.ExSVC_q d@@155)) (= d@@155 |#_module.exception.ExSVC|)) :qid |unknown.0:0| :skolemid |3634| :pattern ( (_module.exception.ExSVC_q d@@155)) )))
(assert ($Is |#_module.exception.ExSVC| Tclass._module.exception))
(assert (forall (($h@@65 T@U) ) (!  (=> (and (= (type $h@@65) (MapType1Type refType)) ($IsGoodHeap $h@@65)) ($IsAlloc |#_module.exception.ExSVC| Tclass._module.exception $h@@65)) :qid |DafnyPre.405:12| :skolemid |3635| :pattern ( ($IsAlloc |#_module.exception.ExSVC| Tclass._module.exception $h@@65)) )))
(assert (= |#_module.exception.ExSVC| (Lit |#_module.exception.ExSVC|)))
(assert (forall ((d@@156 T@U) ) (!  (=> (and (= (type d@@156) DatatypeTypeType) (|$IsA#_module.exception| d@@156)) (or (or (or (or (_module.exception.ExAbt_q d@@156) (_module.exception.ExUnd_q d@@156)) (_module.exception.ExIRQ_q d@@156)) (_module.exception.ExFIQ_q d@@156)) (_module.exception.ExSVC_q d@@156))) :qid |unknown.0:0| :skolemid |3636| :pattern ( (|$IsA#_module.exception| d@@156)) )))
(assert (forall ((d@@157 T@U) ) (!  (=> (and (= (type d@@157) DatatypeTypeType) ($Is d@@157 Tclass._module.exception)) (or (or (or (or (_module.exception.ExAbt_q d@@157) (_module.exception.ExUnd_q d@@157)) (_module.exception.ExIRQ_q d@@157)) (_module.exception.ExFIQ_q d@@157)) (_module.exception.ExSVC_q d@@157))) :qid |unknown.0:0| :skolemid |3637| :pattern ( (_module.exception.ExSVC_q d@@157) ($Is d@@157 Tclass._module.exception)) :pattern ( (_module.exception.ExFIQ_q d@@157) ($Is d@@157 Tclass._module.exception)) :pattern ( (_module.exception.ExIRQ_q d@@157) ($Is d@@157 Tclass._module.exception)) :pattern ( (_module.exception.ExUnd_q d@@157) ($Is d@@157 Tclass._module.exception)) :pattern ( (_module.exception.ExAbt_q d@@157) ($Is d@@157 Tclass._module.exception)) )))
(assert (forall ((|a#353#0#0| T@U) (|a#353#1#0| Int) (|a#353#2#0| T@U) ) (!  (=> (and (= (type |a#353#0#0|) (MapType BoxType BoxType)) (= (type |a#353#2#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#_module.UserState.UserState| |a#353#0#0| |a#353#1#0| |a#353#2#0|)) |##_module.UserState.UserState|)) :qid |ARMdefsd.123:32| :skolemid |3638| :pattern ( (|#_module.UserState.UserState| |a#353#0#0| |a#353#1#0| |a#353#2#0|)) )))
(assert (forall ((d@@158 T@U) ) (!  (=> (= (type d@@158) DatatypeTypeType) (and (=> (_module.UserState.UserState_q d@@158) (= (DatatypeCtorId d@@158) |##_module.UserState.UserState|)) (=> (= (DatatypeCtorId d@@158) |##_module.UserState.UserState|) (_module.UserState.UserState_q d@@158)))) :qid |unknown.0:0| :skolemid |3639| :pattern ( (_module.UserState.UserState_q d@@158)) )))
(assert (forall ((d@@159 T@U) ) (!  (=> (and (= (type d@@159) DatatypeTypeType) (_module.UserState.UserState_q d@@159)) (exists ((|a#354#0#0| T@U) (|a#354#1#0| Int) (|a#354#2#0| T@U) ) (!  (and (and (= (type |a#354#0#0|) (MapType BoxType BoxType)) (= (type |a#354#2#0|) (MapType BoxType BoxType))) (= d@@159 (|#_module.UserState.UserState| |a#354#0#0| |a#354#1#0| |a#354#2#0|))) :qid |ARMdefsd.123:32| :skolemid |3640| :no-pattern (type |a#354#0#0|) :no-pattern (type |a#354#2#0|) :no-pattern (U_2_int |a#354#0#0|) :no-pattern (U_2_bool |a#354#0#0|) :no-pattern (U_2_int |a#354#2#0|) :no-pattern (U_2_bool |a#354#2#0|) ))) :qid |unknown.0:0| :skolemid |3641| :pattern ( (_module.UserState.UserState_q d@@159)) )))
(assert (forall ((|a#355#0#0| T@U) (|a#355#1#0| Int) (|a#355#2#0| T@U) ) (!  (=> (and (= (type |a#355#0#0|) (MapType BoxType BoxType)) (= (type |a#355#2#0|) (MapType BoxType BoxType))) (and (=> ($Is (|#_module.UserState.UserState| |a#355#0#0| |a#355#1#0| |a#355#2#0|) Tclass._module.UserState) (and (and ($Is |a#355#0#0| (TMap Tclass._module.ARMReg Tclass._module.word)) ($Is (int_2_U |a#355#1#0|) Tclass._module.word)) ($Is |a#355#2#0| (TMap Tclass._module.addr Tclass._module.word)))) (=> (and (and ($Is |a#355#0#0| (TMap Tclass._module.ARMReg Tclass._module.word)) ($Is (int_2_U |a#355#1#0|) Tclass._module.word)) ($Is |a#355#2#0| (TMap Tclass._module.addr Tclass._module.word))) ($Is (|#_module.UserState.UserState| |a#355#0#0| |a#355#1#0| |a#355#2#0|) Tclass._module.UserState)))) :qid |ARMdefsd.123:32| :skolemid |3642| :pattern ( ($Is (|#_module.UserState.UserState| |a#355#0#0| |a#355#1#0| |a#355#2#0|) Tclass._module.UserState)) )))
(assert (forall ((|a#356#0#0| T@U) (|a#356#1#0| Int) (|a#356#2#0| T@U) ($h@@66 T@U) ) (!  (=> (and (and (and (= (type |a#356#0#0|) (MapType BoxType BoxType)) (= (type |a#356#2#0|) (MapType BoxType BoxType))) (= (type $h@@66) (MapType1Type refType))) ($IsGoodHeap $h@@66)) (and (=> ($IsAlloc (|#_module.UserState.UserState| |a#356#0#0| |a#356#1#0| |a#356#2#0|) Tclass._module.UserState $h@@66) (and (and ($IsAlloc |a#356#0#0| (TMap Tclass._module.ARMReg Tclass._module.word) $h@@66) ($IsAlloc (int_2_U |a#356#1#0|) Tclass._module.word $h@@66)) ($IsAlloc |a#356#2#0| (TMap Tclass._module.addr Tclass._module.word) $h@@66))) (=> (and (and ($IsAlloc |a#356#0#0| (TMap Tclass._module.ARMReg Tclass._module.word) $h@@66) ($IsAlloc (int_2_U |a#356#1#0|) Tclass._module.word $h@@66)) ($IsAlloc |a#356#2#0| (TMap Tclass._module.addr Tclass._module.word) $h@@66)) ($IsAlloc (|#_module.UserState.UserState| |a#356#0#0| |a#356#1#0| |a#356#2#0|) Tclass._module.UserState $h@@66)))) :qid |ARMdefsd.123:32| :skolemid |3643| :pattern ( ($IsAlloc (|#_module.UserState.UserState| |a#356#0#0| |a#356#1#0| |a#356#2#0|) Tclass._module.UserState $h@@66)) )))
(assert (forall ((|a#357#0#0| T@U) (|a#357#1#0| Int) (|a#357#2#0| T@U) ) (!  (=> (and (= (type |a#357#0#0|) (MapType BoxType BoxType)) (= (type |a#357#2#0|) (MapType BoxType BoxType))) (= (|#_module.UserState.UserState| (Lit |a#357#0#0|) (LitInt |a#357#1#0|) (Lit |a#357#2#0|)) (Lit (|#_module.UserState.UserState| |a#357#0#0| |a#357#1#0| |a#357#2#0|)))) :qid |ARMdefsd.123:32| :skolemid |3644| :pattern ( (|#_module.UserState.UserState| (Lit |a#357#0#0|) (LitInt |a#357#1#0|) (Lit |a#357#2#0|))) )))
(assert (forall ((arg0@@434 T@U) ) (! (= (type (_module.UserState.regs arg0@@434)) (MapType BoxType BoxType)) :qid |funType:_module.UserState.regs| :pattern ( (_module.UserState.regs arg0@@434)) )))
(assert (forall ((|a#358#0#0| T@U) (|a#358#1#0| Int) (|a#358#2#0| T@U) ) (!  (=> (and (= (type |a#358#0#0|) (MapType BoxType BoxType)) (= (type |a#358#2#0|) (MapType BoxType BoxType))) (= (_module.UserState.regs (|#_module.UserState.UserState| |a#358#0#0| |a#358#1#0| |a#358#2#0|)) |a#358#0#0|)) :qid |ARMdefsd.123:32| :skolemid |3645| :pattern ( (|#_module.UserState.UserState| |a#358#0#0| |a#358#1#0| |a#358#2#0|)) )))
(assert (forall ((|a#359#0#0| T@U) (|a#359#1#0| Int) (|a#359#2#0| T@U) ) (!  (=> (and (= (type |a#359#0#0|) (MapType BoxType BoxType)) (= (type |a#359#2#0|) (MapType BoxType BoxType))) (= (_module.UserState.pc (|#_module.UserState.UserState| |a#359#0#0| |a#359#1#0| |a#359#2#0|)) |a#359#1#0|)) :qid |ARMdefsd.123:32| :skolemid |3646| :pattern ( (|#_module.UserState.UserState| |a#359#0#0| |a#359#1#0| |a#359#2#0|)) )))
(assert (forall ((arg0@@435 T@U) ) (! (= (type (_module.UserState.addresses arg0@@435)) (MapType BoxType BoxType)) :qid |funType:_module.UserState.addresses| :pattern ( (_module.UserState.addresses arg0@@435)) )))
(assert (forall ((|a#360#0#0| T@U) (|a#360#1#0| Int) (|a#360#2#0| T@U) ) (!  (=> (and (= (type |a#360#0#0|) (MapType BoxType BoxType)) (= (type |a#360#2#0|) (MapType BoxType BoxType))) (= (_module.UserState.addresses (|#_module.UserState.UserState| |a#360#0#0| |a#360#1#0| |a#360#2#0|)) |a#360#2#0|)) :qid |ARMdefsd.123:32| :skolemid |3647| :pattern ( (|#_module.UserState.UserState| |a#360#0#0| |a#360#1#0| |a#360#2#0|)) )))
(assert (forall ((d@@160 T@U) ) (!  (=> (and (= (type d@@160) DatatypeTypeType) (|$IsA#_module.UserState| d@@160)) (_module.UserState.UserState_q d@@160)) :qid |unknown.0:0| :skolemid |3648| :pattern ( (|$IsA#_module.UserState| d@@160)) )))
(assert (forall ((d@@161 T@U) ) (!  (=> (and (= (type d@@161) DatatypeTypeType) ($Is d@@161 Tclass._module.UserState)) (_module.UserState.UserState_q d@@161)) :qid |unknown.0:0| :skolemid |3649| :pattern ( (_module.UserState.UserState_q d@@161) ($Is d@@161 Tclass._module.UserState)) )))
(assert (forall ((arg0@@436 T@U) (arg1@@185 T@U) (arg2@@126 T@U) ) (! (= (type (|#_module.ins.ADD| arg0@@436 arg1@@185 arg2@@126)) DatatypeTypeType) :qid |funType:#_module.ins.ADD| :pattern ( (|#_module.ins.ADD| arg0@@436 arg1@@185 arg2@@126)) )))
(assert (forall ((|a#361#0#0| T@U) (|a#361#1#0| T@U) (|a#361#2#0| T@U) ) (!  (=> (and (and (= (type |a#361#0#0|) DatatypeTypeType) (= (type |a#361#1#0|) DatatypeTypeType)) (= (type |a#361#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.ADD| |a#361#0#0| |a#361#1#0| |a#361#2#0|)) |##_module.ins.ADD|)) :qid |ARMdefsd.280:11| :skolemid |3650| :pattern ( (|#_module.ins.ADD| |a#361#0#0| |a#361#1#0| |a#361#2#0|)) )))
(assert (forall ((d@@162 T@U) ) (!  (=> (= (type d@@162) DatatypeTypeType) (and (=> (_module.ins.ADD_q d@@162) (= (DatatypeCtorId d@@162) |##_module.ins.ADD|)) (=> (= (DatatypeCtorId d@@162) |##_module.ins.ADD|) (_module.ins.ADD_q d@@162)))) :qid |unknown.0:0| :skolemid |3651| :pattern ( (_module.ins.ADD_q d@@162)) )))
(assert (forall ((d@@163 T@U) ) (!  (=> (and (= (type d@@163) DatatypeTypeType) (_module.ins.ADD_q d@@163)) (exists ((|a#362#0#0| T@U) (|a#362#1#0| T@U) (|a#362#2#0| T@U) ) (!  (and (and (and (= (type |a#362#0#0|) DatatypeTypeType) (= (type |a#362#1#0|) DatatypeTypeType)) (= (type |a#362#2#0|) DatatypeTypeType)) (= d@@163 (|#_module.ins.ADD| |a#362#0#0| |a#362#1#0| |a#362#2#0|))) :qid |ARMdefsd.280:11| :skolemid |3652| :no-pattern (type |a#362#0#0|) :no-pattern (type |a#362#1#0|) :no-pattern (type |a#362#2#0|) :no-pattern (U_2_int |a#362#0#0|) :no-pattern (U_2_bool |a#362#0#0|) :no-pattern (U_2_int |a#362#1#0|) :no-pattern (U_2_bool |a#362#1#0|) :no-pattern (U_2_int |a#362#2#0|) :no-pattern (U_2_bool |a#362#2#0|) ))) :qid |unknown.0:0| :skolemid |3653| :pattern ( (_module.ins.ADD_q d@@163)) )))
(assert (forall ((|a#363#0#0| T@U) (|a#363#1#0| T@U) (|a#363#2#0| T@U) ) (!  (=> (and (and (= (type |a#363#0#0|) DatatypeTypeType) (= (type |a#363#1#0|) DatatypeTypeType)) (= (type |a#363#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.ADD| |a#363#0#0| |a#363#1#0| |a#363#2#0|) Tclass._module.ins) (and (and ($Is |a#363#0#0| Tclass._module.operand) ($Is |a#363#1#0| Tclass._module.operand)) ($Is |a#363#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#363#0#0| Tclass._module.operand) ($Is |a#363#1#0| Tclass._module.operand)) ($Is |a#363#2#0| Tclass._module.operand)) ($Is (|#_module.ins.ADD| |a#363#0#0| |a#363#1#0| |a#363#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.280:11| :skolemid |3654| :pattern ( ($Is (|#_module.ins.ADD| |a#363#0#0| |a#363#1#0| |a#363#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#364#0#0| T@U) (|a#364#1#0| T@U) (|a#364#2#0| T@U) ($h@@67 T@U) ) (!  (=> (and (and (and (and (= (type |a#364#0#0|) DatatypeTypeType) (= (type |a#364#1#0|) DatatypeTypeType)) (= (type |a#364#2#0|) DatatypeTypeType)) (= (type $h@@67) (MapType1Type refType))) ($IsGoodHeap $h@@67)) (and (=> ($IsAlloc (|#_module.ins.ADD| |a#364#0#0| |a#364#1#0| |a#364#2#0|) Tclass._module.ins $h@@67) (and (and ($IsAlloc |a#364#0#0| Tclass._module.operand $h@@67) ($IsAlloc |a#364#1#0| Tclass._module.operand $h@@67)) ($IsAlloc |a#364#2#0| Tclass._module.operand $h@@67))) (=> (and (and ($IsAlloc |a#364#0#0| Tclass._module.operand $h@@67) ($IsAlloc |a#364#1#0| Tclass._module.operand $h@@67)) ($IsAlloc |a#364#2#0| Tclass._module.operand $h@@67)) ($IsAlloc (|#_module.ins.ADD| |a#364#0#0| |a#364#1#0| |a#364#2#0|) Tclass._module.ins $h@@67)))) :qid |ARMdefsd.280:11| :skolemid |3655| :pattern ( ($IsAlloc (|#_module.ins.ADD| |a#364#0#0| |a#364#1#0| |a#364#2#0|) Tclass._module.ins $h@@67)) )))
(assert (forall ((|a#365#0#0| T@U) (|a#365#1#0| T@U) (|a#365#2#0| T@U) ) (!  (=> (and (and (= (type |a#365#0#0|) DatatypeTypeType) (= (type |a#365#1#0|) DatatypeTypeType)) (= (type |a#365#2#0|) DatatypeTypeType)) (= (|#_module.ins.ADD| (Lit |a#365#0#0|) (Lit |a#365#1#0|) (Lit |a#365#2#0|)) (Lit (|#_module.ins.ADD| |a#365#0#0| |a#365#1#0| |a#365#2#0|)))) :qid |ARMdefsd.280:11| :skolemid |3656| :pattern ( (|#_module.ins.ADD| (Lit |a#365#0#0|) (Lit |a#365#1#0|) (Lit |a#365#2#0|))) )))
(assert (forall ((|a#366#0#0| T@U) (|a#366#1#0| T@U) (|a#366#2#0| T@U) ) (!  (=> (and (and (= (type |a#366#0#0|) DatatypeTypeType) (= (type |a#366#1#0|) DatatypeTypeType)) (= (type |a#366#2#0|) DatatypeTypeType)) (= (_module.ins.dstADD (|#_module.ins.ADD| |a#366#0#0| |a#366#1#0| |a#366#2#0|)) |a#366#0#0|)) :qid |ARMdefsd.280:11| :skolemid |3657| :pattern ( (|#_module.ins.ADD| |a#366#0#0| |a#366#1#0| |a#366#2#0|)) )))
(assert (forall ((|a#367#0#0| T@U) (|a#367#1#0| T@U) (|a#367#2#0| T@U) ) (!  (=> (and (and (= (type |a#367#0#0|) DatatypeTypeType) (= (type |a#367#1#0|) DatatypeTypeType)) (= (type |a#367#2#0|) DatatypeTypeType)) (< (DtRank |a#367#0#0|) (DtRank (|#_module.ins.ADD| |a#367#0#0| |a#367#1#0| |a#367#2#0|)))) :qid |ARMdefsd.280:11| :skolemid |3658| :pattern ( (|#_module.ins.ADD| |a#367#0#0| |a#367#1#0| |a#367#2#0|)) )))
(assert (forall ((|a#368#0#0| T@U) (|a#368#1#0| T@U) (|a#368#2#0| T@U) ) (!  (=> (and (and (= (type |a#368#0#0|) DatatypeTypeType) (= (type |a#368#1#0|) DatatypeTypeType)) (= (type |a#368#2#0|) DatatypeTypeType)) (= (_module.ins.src1ADD (|#_module.ins.ADD| |a#368#0#0| |a#368#1#0| |a#368#2#0|)) |a#368#1#0|)) :qid |ARMdefsd.280:11| :skolemid |3659| :pattern ( (|#_module.ins.ADD| |a#368#0#0| |a#368#1#0| |a#368#2#0|)) )))
(assert (forall ((|a#369#0#0| T@U) (|a#369#1#0| T@U) (|a#369#2#0| T@U) ) (!  (=> (and (and (= (type |a#369#0#0|) DatatypeTypeType) (= (type |a#369#1#0|) DatatypeTypeType)) (= (type |a#369#2#0|) DatatypeTypeType)) (< (DtRank |a#369#1#0|) (DtRank (|#_module.ins.ADD| |a#369#0#0| |a#369#1#0| |a#369#2#0|)))) :qid |ARMdefsd.280:11| :skolemid |3660| :pattern ( (|#_module.ins.ADD| |a#369#0#0| |a#369#1#0| |a#369#2#0|)) )))
(assert (forall ((|a#370#0#0| T@U) (|a#370#1#0| T@U) (|a#370#2#0| T@U) ) (!  (=> (and (and (= (type |a#370#0#0|) DatatypeTypeType) (= (type |a#370#1#0|) DatatypeTypeType)) (= (type |a#370#2#0|) DatatypeTypeType)) (= (_module.ins.src2ADD (|#_module.ins.ADD| |a#370#0#0| |a#370#1#0| |a#370#2#0|)) |a#370#2#0|)) :qid |ARMdefsd.280:11| :skolemid |3661| :pattern ( (|#_module.ins.ADD| |a#370#0#0| |a#370#1#0| |a#370#2#0|)) )))
(assert (forall ((|a#371#0#0| T@U) (|a#371#1#0| T@U) (|a#371#2#0| T@U) ) (!  (=> (and (and (= (type |a#371#0#0|) DatatypeTypeType) (= (type |a#371#1#0|) DatatypeTypeType)) (= (type |a#371#2#0|) DatatypeTypeType)) (< (DtRank |a#371#2#0|) (DtRank (|#_module.ins.ADD| |a#371#0#0| |a#371#1#0| |a#371#2#0|)))) :qid |ARMdefsd.280:11| :skolemid |3662| :pattern ( (|#_module.ins.ADD| |a#371#0#0| |a#371#1#0| |a#371#2#0|)) )))
(assert (forall ((arg0@@437 T@U) (arg1@@186 T@U) (arg2@@127 T@U) ) (! (= (type (|#_module.ins.SUB| arg0@@437 arg1@@186 arg2@@127)) DatatypeTypeType) :qid |funType:#_module.ins.SUB| :pattern ( (|#_module.ins.SUB| arg0@@437 arg1@@186 arg2@@127)) )))
(assert (forall ((|a#372#0#0| T@U) (|a#372#1#0| T@U) (|a#372#2#0| T@U) ) (!  (=> (and (and (= (type |a#372#0#0|) DatatypeTypeType) (= (type |a#372#1#0|) DatatypeTypeType)) (= (type |a#372#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.SUB| |a#372#0#0| |a#372#1#0| |a#372#2#0|)) |##_module.ins.SUB|)) :qid |ARMdefsd.281:11| :skolemid |3663| :pattern ( (|#_module.ins.SUB| |a#372#0#0| |a#372#1#0| |a#372#2#0|)) )))
(assert (forall ((d@@164 T@U) ) (!  (=> (= (type d@@164) DatatypeTypeType) (and (=> (_module.ins.SUB_q d@@164) (= (DatatypeCtorId d@@164) |##_module.ins.SUB|)) (=> (= (DatatypeCtorId d@@164) |##_module.ins.SUB|) (_module.ins.SUB_q d@@164)))) :qid |unknown.0:0| :skolemid |3664| :pattern ( (_module.ins.SUB_q d@@164)) )))
(assert (forall ((d@@165 T@U) ) (!  (=> (and (= (type d@@165) DatatypeTypeType) (_module.ins.SUB_q d@@165)) (exists ((|a#373#0#0| T@U) (|a#373#1#0| T@U) (|a#373#2#0| T@U) ) (!  (and (and (and (= (type |a#373#0#0|) DatatypeTypeType) (= (type |a#373#1#0|) DatatypeTypeType)) (= (type |a#373#2#0|) DatatypeTypeType)) (= d@@165 (|#_module.ins.SUB| |a#373#0#0| |a#373#1#0| |a#373#2#0|))) :qid |ARMdefsd.281:11| :skolemid |3665| :no-pattern (type |a#373#0#0|) :no-pattern (type |a#373#1#0|) :no-pattern (type |a#373#2#0|) :no-pattern (U_2_int |a#373#0#0|) :no-pattern (U_2_bool |a#373#0#0|) :no-pattern (U_2_int |a#373#1#0|) :no-pattern (U_2_bool |a#373#1#0|) :no-pattern (U_2_int |a#373#2#0|) :no-pattern (U_2_bool |a#373#2#0|) ))) :qid |unknown.0:0| :skolemid |3666| :pattern ( (_module.ins.SUB_q d@@165)) )))
(assert (forall ((|a#374#0#0| T@U) (|a#374#1#0| T@U) (|a#374#2#0| T@U) ) (!  (=> (and (and (= (type |a#374#0#0|) DatatypeTypeType) (= (type |a#374#1#0|) DatatypeTypeType)) (= (type |a#374#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.SUB| |a#374#0#0| |a#374#1#0| |a#374#2#0|) Tclass._module.ins) (and (and ($Is |a#374#0#0| Tclass._module.operand) ($Is |a#374#1#0| Tclass._module.operand)) ($Is |a#374#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#374#0#0| Tclass._module.operand) ($Is |a#374#1#0| Tclass._module.operand)) ($Is |a#374#2#0| Tclass._module.operand)) ($Is (|#_module.ins.SUB| |a#374#0#0| |a#374#1#0| |a#374#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.281:11| :skolemid |3667| :pattern ( ($Is (|#_module.ins.SUB| |a#374#0#0| |a#374#1#0| |a#374#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#375#0#0| T@U) (|a#375#1#0| T@U) (|a#375#2#0| T@U) ($h@@68 T@U) ) (!  (=> (and (and (and (and (= (type |a#375#0#0|) DatatypeTypeType) (= (type |a#375#1#0|) DatatypeTypeType)) (= (type |a#375#2#0|) DatatypeTypeType)) (= (type $h@@68) (MapType1Type refType))) ($IsGoodHeap $h@@68)) (and (=> ($IsAlloc (|#_module.ins.SUB| |a#375#0#0| |a#375#1#0| |a#375#2#0|) Tclass._module.ins $h@@68) (and (and ($IsAlloc |a#375#0#0| Tclass._module.operand $h@@68) ($IsAlloc |a#375#1#0| Tclass._module.operand $h@@68)) ($IsAlloc |a#375#2#0| Tclass._module.operand $h@@68))) (=> (and (and ($IsAlloc |a#375#0#0| Tclass._module.operand $h@@68) ($IsAlloc |a#375#1#0| Tclass._module.operand $h@@68)) ($IsAlloc |a#375#2#0| Tclass._module.operand $h@@68)) ($IsAlloc (|#_module.ins.SUB| |a#375#0#0| |a#375#1#0| |a#375#2#0|) Tclass._module.ins $h@@68)))) :qid |ARMdefsd.281:11| :skolemid |3668| :pattern ( ($IsAlloc (|#_module.ins.SUB| |a#375#0#0| |a#375#1#0| |a#375#2#0|) Tclass._module.ins $h@@68)) )))
(assert (forall ((|a#376#0#0| T@U) (|a#376#1#0| T@U) (|a#376#2#0| T@U) ) (!  (=> (and (and (= (type |a#376#0#0|) DatatypeTypeType) (= (type |a#376#1#0|) DatatypeTypeType)) (= (type |a#376#2#0|) DatatypeTypeType)) (= (|#_module.ins.SUB| (Lit |a#376#0#0|) (Lit |a#376#1#0|) (Lit |a#376#2#0|)) (Lit (|#_module.ins.SUB| |a#376#0#0| |a#376#1#0| |a#376#2#0|)))) :qid |ARMdefsd.281:11| :skolemid |3669| :pattern ( (|#_module.ins.SUB| (Lit |a#376#0#0|) (Lit |a#376#1#0|) (Lit |a#376#2#0|))) )))
(assert (forall ((|a#377#0#0| T@U) (|a#377#1#0| T@U) (|a#377#2#0| T@U) ) (!  (=> (and (and (= (type |a#377#0#0|) DatatypeTypeType) (= (type |a#377#1#0|) DatatypeTypeType)) (= (type |a#377#2#0|) DatatypeTypeType)) (= (_module.ins.dstSUB (|#_module.ins.SUB| |a#377#0#0| |a#377#1#0| |a#377#2#0|)) |a#377#0#0|)) :qid |ARMdefsd.281:11| :skolemid |3670| :pattern ( (|#_module.ins.SUB| |a#377#0#0| |a#377#1#0| |a#377#2#0|)) )))
(assert (forall ((|a#378#0#0| T@U) (|a#378#1#0| T@U) (|a#378#2#0| T@U) ) (!  (=> (and (and (= (type |a#378#0#0|) DatatypeTypeType) (= (type |a#378#1#0|) DatatypeTypeType)) (= (type |a#378#2#0|) DatatypeTypeType)) (< (DtRank |a#378#0#0|) (DtRank (|#_module.ins.SUB| |a#378#0#0| |a#378#1#0| |a#378#2#0|)))) :qid |ARMdefsd.281:11| :skolemid |3671| :pattern ( (|#_module.ins.SUB| |a#378#0#0| |a#378#1#0| |a#378#2#0|)) )))
(assert (forall ((|a#379#0#0| T@U) (|a#379#1#0| T@U) (|a#379#2#0| T@U) ) (!  (=> (and (and (= (type |a#379#0#0|) DatatypeTypeType) (= (type |a#379#1#0|) DatatypeTypeType)) (= (type |a#379#2#0|) DatatypeTypeType)) (= (_module.ins.src1SUB (|#_module.ins.SUB| |a#379#0#0| |a#379#1#0| |a#379#2#0|)) |a#379#1#0|)) :qid |ARMdefsd.281:11| :skolemid |3672| :pattern ( (|#_module.ins.SUB| |a#379#0#0| |a#379#1#0| |a#379#2#0|)) )))
(assert (forall ((|a#380#0#0| T@U) (|a#380#1#0| T@U) (|a#380#2#0| T@U) ) (!  (=> (and (and (= (type |a#380#0#0|) DatatypeTypeType) (= (type |a#380#1#0|) DatatypeTypeType)) (= (type |a#380#2#0|) DatatypeTypeType)) (< (DtRank |a#380#1#0|) (DtRank (|#_module.ins.SUB| |a#380#0#0| |a#380#1#0| |a#380#2#0|)))) :qid |ARMdefsd.281:11| :skolemid |3673| :pattern ( (|#_module.ins.SUB| |a#380#0#0| |a#380#1#0| |a#380#2#0|)) )))
(assert (forall ((|a#381#0#0| T@U) (|a#381#1#0| T@U) (|a#381#2#0| T@U) ) (!  (=> (and (and (= (type |a#381#0#0|) DatatypeTypeType) (= (type |a#381#1#0|) DatatypeTypeType)) (= (type |a#381#2#0|) DatatypeTypeType)) (= (_module.ins.src2SUB (|#_module.ins.SUB| |a#381#0#0| |a#381#1#0| |a#381#2#0|)) |a#381#2#0|)) :qid |ARMdefsd.281:11| :skolemid |3674| :pattern ( (|#_module.ins.SUB| |a#381#0#0| |a#381#1#0| |a#381#2#0|)) )))
(assert (forall ((|a#382#0#0| T@U) (|a#382#1#0| T@U) (|a#382#2#0| T@U) ) (!  (=> (and (and (= (type |a#382#0#0|) DatatypeTypeType) (= (type |a#382#1#0|) DatatypeTypeType)) (= (type |a#382#2#0|) DatatypeTypeType)) (< (DtRank |a#382#2#0|) (DtRank (|#_module.ins.SUB| |a#382#0#0| |a#382#1#0| |a#382#2#0|)))) :qid |ARMdefsd.281:11| :skolemid |3675| :pattern ( (|#_module.ins.SUB| |a#382#0#0| |a#382#1#0| |a#382#2#0|)) )))
(assert (forall ((arg0@@438 T@U) (arg1@@187 T@U) (arg2@@128 T@U) ) (! (= (type (|#_module.ins.MUL| arg0@@438 arg1@@187 arg2@@128)) DatatypeTypeType) :qid |funType:#_module.ins.MUL| :pattern ( (|#_module.ins.MUL| arg0@@438 arg1@@187 arg2@@128)) )))
(assert (forall ((|a#383#0#0| T@U) (|a#383#1#0| T@U) (|a#383#2#0| T@U) ) (!  (=> (and (and (= (type |a#383#0#0|) DatatypeTypeType) (= (type |a#383#1#0|) DatatypeTypeType)) (= (type |a#383#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.MUL| |a#383#0#0| |a#383#1#0| |a#383#2#0|)) |##_module.ins.MUL|)) :qid |ARMdefsd.282:11| :skolemid |3676| :pattern ( (|#_module.ins.MUL| |a#383#0#0| |a#383#1#0| |a#383#2#0|)) )))
(assert (forall ((d@@166 T@U) ) (!  (=> (= (type d@@166) DatatypeTypeType) (and (=> (_module.ins.MUL_q d@@166) (= (DatatypeCtorId d@@166) |##_module.ins.MUL|)) (=> (= (DatatypeCtorId d@@166) |##_module.ins.MUL|) (_module.ins.MUL_q d@@166)))) :qid |unknown.0:0| :skolemid |3677| :pattern ( (_module.ins.MUL_q d@@166)) )))
(assert (forall ((d@@167 T@U) ) (!  (=> (and (= (type d@@167) DatatypeTypeType) (_module.ins.MUL_q d@@167)) (exists ((|a#384#0#0| T@U) (|a#384#1#0| T@U) (|a#384#2#0| T@U) ) (!  (and (and (and (= (type |a#384#0#0|) DatatypeTypeType) (= (type |a#384#1#0|) DatatypeTypeType)) (= (type |a#384#2#0|) DatatypeTypeType)) (= d@@167 (|#_module.ins.MUL| |a#384#0#0| |a#384#1#0| |a#384#2#0|))) :qid |ARMdefsd.282:11| :skolemid |3678| :no-pattern (type |a#384#0#0|) :no-pattern (type |a#384#1#0|) :no-pattern (type |a#384#2#0|) :no-pattern (U_2_int |a#384#0#0|) :no-pattern (U_2_bool |a#384#0#0|) :no-pattern (U_2_int |a#384#1#0|) :no-pattern (U_2_bool |a#384#1#0|) :no-pattern (U_2_int |a#384#2#0|) :no-pattern (U_2_bool |a#384#2#0|) ))) :qid |unknown.0:0| :skolemid |3679| :pattern ( (_module.ins.MUL_q d@@167)) )))
(assert (forall ((|a#385#0#0| T@U) (|a#385#1#0| T@U) (|a#385#2#0| T@U) ) (!  (=> (and (and (= (type |a#385#0#0|) DatatypeTypeType) (= (type |a#385#1#0|) DatatypeTypeType)) (= (type |a#385#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.MUL| |a#385#0#0| |a#385#1#0| |a#385#2#0|) Tclass._module.ins) (and (and ($Is |a#385#0#0| Tclass._module.operand) ($Is |a#385#1#0| Tclass._module.operand)) ($Is |a#385#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#385#0#0| Tclass._module.operand) ($Is |a#385#1#0| Tclass._module.operand)) ($Is |a#385#2#0| Tclass._module.operand)) ($Is (|#_module.ins.MUL| |a#385#0#0| |a#385#1#0| |a#385#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.282:11| :skolemid |3680| :pattern ( ($Is (|#_module.ins.MUL| |a#385#0#0| |a#385#1#0| |a#385#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#386#0#0| T@U) (|a#386#1#0| T@U) (|a#386#2#0| T@U) ($h@@69 T@U) ) (!  (=> (and (and (and (and (= (type |a#386#0#0|) DatatypeTypeType) (= (type |a#386#1#0|) DatatypeTypeType)) (= (type |a#386#2#0|) DatatypeTypeType)) (= (type $h@@69) (MapType1Type refType))) ($IsGoodHeap $h@@69)) (and (=> ($IsAlloc (|#_module.ins.MUL| |a#386#0#0| |a#386#1#0| |a#386#2#0|) Tclass._module.ins $h@@69) (and (and ($IsAlloc |a#386#0#0| Tclass._module.operand $h@@69) ($IsAlloc |a#386#1#0| Tclass._module.operand $h@@69)) ($IsAlloc |a#386#2#0| Tclass._module.operand $h@@69))) (=> (and (and ($IsAlloc |a#386#0#0| Tclass._module.operand $h@@69) ($IsAlloc |a#386#1#0| Tclass._module.operand $h@@69)) ($IsAlloc |a#386#2#0| Tclass._module.operand $h@@69)) ($IsAlloc (|#_module.ins.MUL| |a#386#0#0| |a#386#1#0| |a#386#2#0|) Tclass._module.ins $h@@69)))) :qid |ARMdefsd.282:11| :skolemid |3681| :pattern ( ($IsAlloc (|#_module.ins.MUL| |a#386#0#0| |a#386#1#0| |a#386#2#0|) Tclass._module.ins $h@@69)) )))
(assert (forall ((|a#387#0#0| T@U) (|a#387#1#0| T@U) (|a#387#2#0| T@U) ) (!  (=> (and (and (= (type |a#387#0#0|) DatatypeTypeType) (= (type |a#387#1#0|) DatatypeTypeType)) (= (type |a#387#2#0|) DatatypeTypeType)) (= (|#_module.ins.MUL| (Lit |a#387#0#0|) (Lit |a#387#1#0|) (Lit |a#387#2#0|)) (Lit (|#_module.ins.MUL| |a#387#0#0| |a#387#1#0| |a#387#2#0|)))) :qid |ARMdefsd.282:11| :skolemid |3682| :pattern ( (|#_module.ins.MUL| (Lit |a#387#0#0|) (Lit |a#387#1#0|) (Lit |a#387#2#0|))) )))
(assert (forall ((|a#388#0#0| T@U) (|a#388#1#0| T@U) (|a#388#2#0| T@U) ) (!  (=> (and (and (= (type |a#388#0#0|) DatatypeTypeType) (= (type |a#388#1#0|) DatatypeTypeType)) (= (type |a#388#2#0|) DatatypeTypeType)) (= (_module.ins.dstMUL (|#_module.ins.MUL| |a#388#0#0| |a#388#1#0| |a#388#2#0|)) |a#388#0#0|)) :qid |ARMdefsd.282:11| :skolemid |3683| :pattern ( (|#_module.ins.MUL| |a#388#0#0| |a#388#1#0| |a#388#2#0|)) )))
(assert (forall ((|a#389#0#0| T@U) (|a#389#1#0| T@U) (|a#389#2#0| T@U) ) (!  (=> (and (and (= (type |a#389#0#0|) DatatypeTypeType) (= (type |a#389#1#0|) DatatypeTypeType)) (= (type |a#389#2#0|) DatatypeTypeType)) (< (DtRank |a#389#0#0|) (DtRank (|#_module.ins.MUL| |a#389#0#0| |a#389#1#0| |a#389#2#0|)))) :qid |ARMdefsd.282:11| :skolemid |3684| :pattern ( (|#_module.ins.MUL| |a#389#0#0| |a#389#1#0| |a#389#2#0|)) )))
(assert (forall ((|a#390#0#0| T@U) (|a#390#1#0| T@U) (|a#390#2#0| T@U) ) (!  (=> (and (and (= (type |a#390#0#0|) DatatypeTypeType) (= (type |a#390#1#0|) DatatypeTypeType)) (= (type |a#390#2#0|) DatatypeTypeType)) (= (_module.ins.src1MUL (|#_module.ins.MUL| |a#390#0#0| |a#390#1#0| |a#390#2#0|)) |a#390#1#0|)) :qid |ARMdefsd.282:11| :skolemid |3685| :pattern ( (|#_module.ins.MUL| |a#390#0#0| |a#390#1#0| |a#390#2#0|)) )))
(assert (forall ((|a#391#0#0| T@U) (|a#391#1#0| T@U) (|a#391#2#0| T@U) ) (!  (=> (and (and (= (type |a#391#0#0|) DatatypeTypeType) (= (type |a#391#1#0|) DatatypeTypeType)) (= (type |a#391#2#0|) DatatypeTypeType)) (< (DtRank |a#391#1#0|) (DtRank (|#_module.ins.MUL| |a#391#0#0| |a#391#1#0| |a#391#2#0|)))) :qid |ARMdefsd.282:11| :skolemid |3686| :pattern ( (|#_module.ins.MUL| |a#391#0#0| |a#391#1#0| |a#391#2#0|)) )))
(assert (forall ((|a#392#0#0| T@U) (|a#392#1#0| T@U) (|a#392#2#0| T@U) ) (!  (=> (and (and (= (type |a#392#0#0|) DatatypeTypeType) (= (type |a#392#1#0|) DatatypeTypeType)) (= (type |a#392#2#0|) DatatypeTypeType)) (= (_module.ins.src2MUL (|#_module.ins.MUL| |a#392#0#0| |a#392#1#0| |a#392#2#0|)) |a#392#2#0|)) :qid |ARMdefsd.282:11| :skolemid |3687| :pattern ( (|#_module.ins.MUL| |a#392#0#0| |a#392#1#0| |a#392#2#0|)) )))
(assert (forall ((|a#393#0#0| T@U) (|a#393#1#0| T@U) (|a#393#2#0| T@U) ) (!  (=> (and (and (= (type |a#393#0#0|) DatatypeTypeType) (= (type |a#393#1#0|) DatatypeTypeType)) (= (type |a#393#2#0|) DatatypeTypeType)) (< (DtRank |a#393#2#0|) (DtRank (|#_module.ins.MUL| |a#393#0#0| |a#393#1#0| |a#393#2#0|)))) :qid |ARMdefsd.282:11| :skolemid |3688| :pattern ( (|#_module.ins.MUL| |a#393#0#0| |a#393#1#0| |a#393#2#0|)) )))
(assert (forall ((arg0@@439 T@U) (arg1@@188 T@U) (arg2@@129 T@U) ) (! (= (type (|#_module.ins.UDIV| arg0@@439 arg1@@188 arg2@@129)) DatatypeTypeType) :qid |funType:#_module.ins.UDIV| :pattern ( (|#_module.ins.UDIV| arg0@@439 arg1@@188 arg2@@129)) )))
(assert (forall ((|a#394#0#0| T@U) (|a#394#1#0| T@U) (|a#394#2#0| T@U) ) (!  (=> (and (and (= (type |a#394#0#0|) DatatypeTypeType) (= (type |a#394#1#0|) DatatypeTypeType)) (= (type |a#394#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.UDIV| |a#394#0#0| |a#394#1#0| |a#394#2#0|)) |##_module.ins.UDIV|)) :qid |ARMdefsd.283:12| :skolemid |3689| :pattern ( (|#_module.ins.UDIV| |a#394#0#0| |a#394#1#0| |a#394#2#0|)) )))
(assert (forall ((d@@168 T@U) ) (!  (=> (= (type d@@168) DatatypeTypeType) (and (=> (_module.ins.UDIV_q d@@168) (= (DatatypeCtorId d@@168) |##_module.ins.UDIV|)) (=> (= (DatatypeCtorId d@@168) |##_module.ins.UDIV|) (_module.ins.UDIV_q d@@168)))) :qid |unknown.0:0| :skolemid |3690| :pattern ( (_module.ins.UDIV_q d@@168)) )))
(assert (forall ((d@@169 T@U) ) (!  (=> (and (= (type d@@169) DatatypeTypeType) (_module.ins.UDIV_q d@@169)) (exists ((|a#395#0#0| T@U) (|a#395#1#0| T@U) (|a#395#2#0| T@U) ) (!  (and (and (and (= (type |a#395#0#0|) DatatypeTypeType) (= (type |a#395#1#0|) DatatypeTypeType)) (= (type |a#395#2#0|) DatatypeTypeType)) (= d@@169 (|#_module.ins.UDIV| |a#395#0#0| |a#395#1#0| |a#395#2#0|))) :qid |ARMdefsd.283:12| :skolemid |3691| :no-pattern (type |a#395#0#0|) :no-pattern (type |a#395#1#0|) :no-pattern (type |a#395#2#0|) :no-pattern (U_2_int |a#395#0#0|) :no-pattern (U_2_bool |a#395#0#0|) :no-pattern (U_2_int |a#395#1#0|) :no-pattern (U_2_bool |a#395#1#0|) :no-pattern (U_2_int |a#395#2#0|) :no-pattern (U_2_bool |a#395#2#0|) ))) :qid |unknown.0:0| :skolemid |3692| :pattern ( (_module.ins.UDIV_q d@@169)) )))
(assert (forall ((|a#396#0#0| T@U) (|a#396#1#0| T@U) (|a#396#2#0| T@U) ) (!  (=> (and (and (= (type |a#396#0#0|) DatatypeTypeType) (= (type |a#396#1#0|) DatatypeTypeType)) (= (type |a#396#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.UDIV| |a#396#0#0| |a#396#1#0| |a#396#2#0|) Tclass._module.ins) (and (and ($Is |a#396#0#0| Tclass._module.operand) ($Is |a#396#1#0| Tclass._module.operand)) ($Is |a#396#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#396#0#0| Tclass._module.operand) ($Is |a#396#1#0| Tclass._module.operand)) ($Is |a#396#2#0| Tclass._module.operand)) ($Is (|#_module.ins.UDIV| |a#396#0#0| |a#396#1#0| |a#396#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.283:12| :skolemid |3693| :pattern ( ($Is (|#_module.ins.UDIV| |a#396#0#0| |a#396#1#0| |a#396#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#397#0#0| T@U) (|a#397#1#0| T@U) (|a#397#2#0| T@U) ($h@@70 T@U) ) (!  (=> (and (and (and (and (= (type |a#397#0#0|) DatatypeTypeType) (= (type |a#397#1#0|) DatatypeTypeType)) (= (type |a#397#2#0|) DatatypeTypeType)) (= (type $h@@70) (MapType1Type refType))) ($IsGoodHeap $h@@70)) (and (=> ($IsAlloc (|#_module.ins.UDIV| |a#397#0#0| |a#397#1#0| |a#397#2#0|) Tclass._module.ins $h@@70) (and (and ($IsAlloc |a#397#0#0| Tclass._module.operand $h@@70) ($IsAlloc |a#397#1#0| Tclass._module.operand $h@@70)) ($IsAlloc |a#397#2#0| Tclass._module.operand $h@@70))) (=> (and (and ($IsAlloc |a#397#0#0| Tclass._module.operand $h@@70) ($IsAlloc |a#397#1#0| Tclass._module.operand $h@@70)) ($IsAlloc |a#397#2#0| Tclass._module.operand $h@@70)) ($IsAlloc (|#_module.ins.UDIV| |a#397#0#0| |a#397#1#0| |a#397#2#0|) Tclass._module.ins $h@@70)))) :qid |ARMdefsd.283:12| :skolemid |3694| :pattern ( ($IsAlloc (|#_module.ins.UDIV| |a#397#0#0| |a#397#1#0| |a#397#2#0|) Tclass._module.ins $h@@70)) )))
(assert (forall ((|a#398#0#0| T@U) (|a#398#1#0| T@U) (|a#398#2#0| T@U) ) (!  (=> (and (and (= (type |a#398#0#0|) DatatypeTypeType) (= (type |a#398#1#0|) DatatypeTypeType)) (= (type |a#398#2#0|) DatatypeTypeType)) (= (|#_module.ins.UDIV| (Lit |a#398#0#0|) (Lit |a#398#1#0|) (Lit |a#398#2#0|)) (Lit (|#_module.ins.UDIV| |a#398#0#0| |a#398#1#0| |a#398#2#0|)))) :qid |ARMdefsd.283:12| :skolemid |3695| :pattern ( (|#_module.ins.UDIV| (Lit |a#398#0#0|) (Lit |a#398#1#0|) (Lit |a#398#2#0|))) )))
(assert (forall ((|a#399#0#0| T@U) (|a#399#1#0| T@U) (|a#399#2#0| T@U) ) (!  (=> (and (and (= (type |a#399#0#0|) DatatypeTypeType) (= (type |a#399#1#0|) DatatypeTypeType)) (= (type |a#399#2#0|) DatatypeTypeType)) (= (_module.ins.dstDIV (|#_module.ins.UDIV| |a#399#0#0| |a#399#1#0| |a#399#2#0|)) |a#399#0#0|)) :qid |ARMdefsd.283:12| :skolemid |3696| :pattern ( (|#_module.ins.UDIV| |a#399#0#0| |a#399#1#0| |a#399#2#0|)) )))
(assert (forall ((|a#400#0#0| T@U) (|a#400#1#0| T@U) (|a#400#2#0| T@U) ) (!  (=> (and (and (= (type |a#400#0#0|) DatatypeTypeType) (= (type |a#400#1#0|) DatatypeTypeType)) (= (type |a#400#2#0|) DatatypeTypeType)) (< (DtRank |a#400#0#0|) (DtRank (|#_module.ins.UDIV| |a#400#0#0| |a#400#1#0| |a#400#2#0|)))) :qid |ARMdefsd.283:12| :skolemid |3697| :pattern ( (|#_module.ins.UDIV| |a#400#0#0| |a#400#1#0| |a#400#2#0|)) )))
(assert (forall ((|a#401#0#0| T@U) (|a#401#1#0| T@U) (|a#401#2#0| T@U) ) (!  (=> (and (and (= (type |a#401#0#0|) DatatypeTypeType) (= (type |a#401#1#0|) DatatypeTypeType)) (= (type |a#401#2#0|) DatatypeTypeType)) (= (_module.ins.src1DIV (|#_module.ins.UDIV| |a#401#0#0| |a#401#1#0| |a#401#2#0|)) |a#401#1#0|)) :qid |ARMdefsd.283:12| :skolemid |3698| :pattern ( (|#_module.ins.UDIV| |a#401#0#0| |a#401#1#0| |a#401#2#0|)) )))
(assert (forall ((|a#402#0#0| T@U) (|a#402#1#0| T@U) (|a#402#2#0| T@U) ) (!  (=> (and (and (= (type |a#402#0#0|) DatatypeTypeType) (= (type |a#402#1#0|) DatatypeTypeType)) (= (type |a#402#2#0|) DatatypeTypeType)) (< (DtRank |a#402#1#0|) (DtRank (|#_module.ins.UDIV| |a#402#0#0| |a#402#1#0| |a#402#2#0|)))) :qid |ARMdefsd.283:12| :skolemid |3699| :pattern ( (|#_module.ins.UDIV| |a#402#0#0| |a#402#1#0| |a#402#2#0|)) )))
(assert (forall ((|a#403#0#0| T@U) (|a#403#1#0| T@U) (|a#403#2#0| T@U) ) (!  (=> (and (and (= (type |a#403#0#0|) DatatypeTypeType) (= (type |a#403#1#0|) DatatypeTypeType)) (= (type |a#403#2#0|) DatatypeTypeType)) (= (_module.ins.src2DIV (|#_module.ins.UDIV| |a#403#0#0| |a#403#1#0| |a#403#2#0|)) |a#403#2#0|)) :qid |ARMdefsd.283:12| :skolemid |3700| :pattern ( (|#_module.ins.UDIV| |a#403#0#0| |a#403#1#0| |a#403#2#0|)) )))
(assert (forall ((|a#404#0#0| T@U) (|a#404#1#0| T@U) (|a#404#2#0| T@U) ) (!  (=> (and (and (= (type |a#404#0#0|) DatatypeTypeType) (= (type |a#404#1#0|) DatatypeTypeType)) (= (type |a#404#2#0|) DatatypeTypeType)) (< (DtRank |a#404#2#0|) (DtRank (|#_module.ins.UDIV| |a#404#0#0| |a#404#1#0| |a#404#2#0|)))) :qid |ARMdefsd.283:12| :skolemid |3701| :pattern ( (|#_module.ins.UDIV| |a#404#0#0| |a#404#1#0| |a#404#2#0|)) )))
(assert (forall ((arg0@@440 T@U) (arg1@@189 T@U) (arg2@@130 T@U) ) (! (= (type (|#_module.ins.AND| arg0@@440 arg1@@189 arg2@@130)) DatatypeTypeType) :qid |funType:#_module.ins.AND| :pattern ( (|#_module.ins.AND| arg0@@440 arg1@@189 arg2@@130)) )))
(assert (forall ((|a#405#0#0| T@U) (|a#405#1#0| T@U) (|a#405#2#0| T@U) ) (!  (=> (and (and (= (type |a#405#0#0|) DatatypeTypeType) (= (type |a#405#1#0|) DatatypeTypeType)) (= (type |a#405#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.AND| |a#405#0#0| |a#405#1#0| |a#405#2#0|)) |##_module.ins.AND|)) :qid |ARMdefsd.284:11| :skolemid |3702| :pattern ( (|#_module.ins.AND| |a#405#0#0| |a#405#1#0| |a#405#2#0|)) )))
(assert (forall ((d@@170 T@U) ) (!  (=> (= (type d@@170) DatatypeTypeType) (and (=> (_module.ins.AND_q d@@170) (= (DatatypeCtorId d@@170) |##_module.ins.AND|)) (=> (= (DatatypeCtorId d@@170) |##_module.ins.AND|) (_module.ins.AND_q d@@170)))) :qid |unknown.0:0| :skolemid |3703| :pattern ( (_module.ins.AND_q d@@170)) )))
(assert (forall ((d@@171 T@U) ) (!  (=> (and (= (type d@@171) DatatypeTypeType) (_module.ins.AND_q d@@171)) (exists ((|a#406#0#0| T@U) (|a#406#1#0| T@U) (|a#406#2#0| T@U) ) (!  (and (and (and (= (type |a#406#0#0|) DatatypeTypeType) (= (type |a#406#1#0|) DatatypeTypeType)) (= (type |a#406#2#0|) DatatypeTypeType)) (= d@@171 (|#_module.ins.AND| |a#406#0#0| |a#406#1#0| |a#406#2#0|))) :qid |ARMdefsd.284:11| :skolemid |3704| :no-pattern (type |a#406#0#0|) :no-pattern (type |a#406#1#0|) :no-pattern (type |a#406#2#0|) :no-pattern (U_2_int |a#406#0#0|) :no-pattern (U_2_bool |a#406#0#0|) :no-pattern (U_2_int |a#406#1#0|) :no-pattern (U_2_bool |a#406#1#0|) :no-pattern (U_2_int |a#406#2#0|) :no-pattern (U_2_bool |a#406#2#0|) ))) :qid |unknown.0:0| :skolemid |3705| :pattern ( (_module.ins.AND_q d@@171)) )))
(assert (forall ((|a#407#0#0| T@U) (|a#407#1#0| T@U) (|a#407#2#0| T@U) ) (!  (=> (and (and (= (type |a#407#0#0|) DatatypeTypeType) (= (type |a#407#1#0|) DatatypeTypeType)) (= (type |a#407#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.AND| |a#407#0#0| |a#407#1#0| |a#407#2#0|) Tclass._module.ins) (and (and ($Is |a#407#0#0| Tclass._module.operand) ($Is |a#407#1#0| Tclass._module.operand)) ($Is |a#407#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#407#0#0| Tclass._module.operand) ($Is |a#407#1#0| Tclass._module.operand)) ($Is |a#407#2#0| Tclass._module.operand)) ($Is (|#_module.ins.AND| |a#407#0#0| |a#407#1#0| |a#407#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.284:11| :skolemid |3706| :pattern ( ($Is (|#_module.ins.AND| |a#407#0#0| |a#407#1#0| |a#407#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#408#0#0| T@U) (|a#408#1#0| T@U) (|a#408#2#0| T@U) ($h@@71 T@U) ) (!  (=> (and (and (and (and (= (type |a#408#0#0|) DatatypeTypeType) (= (type |a#408#1#0|) DatatypeTypeType)) (= (type |a#408#2#0|) DatatypeTypeType)) (= (type $h@@71) (MapType1Type refType))) ($IsGoodHeap $h@@71)) (and (=> ($IsAlloc (|#_module.ins.AND| |a#408#0#0| |a#408#1#0| |a#408#2#0|) Tclass._module.ins $h@@71) (and (and ($IsAlloc |a#408#0#0| Tclass._module.operand $h@@71) ($IsAlloc |a#408#1#0| Tclass._module.operand $h@@71)) ($IsAlloc |a#408#2#0| Tclass._module.operand $h@@71))) (=> (and (and ($IsAlloc |a#408#0#0| Tclass._module.operand $h@@71) ($IsAlloc |a#408#1#0| Tclass._module.operand $h@@71)) ($IsAlloc |a#408#2#0| Tclass._module.operand $h@@71)) ($IsAlloc (|#_module.ins.AND| |a#408#0#0| |a#408#1#0| |a#408#2#0|) Tclass._module.ins $h@@71)))) :qid |ARMdefsd.284:11| :skolemid |3707| :pattern ( ($IsAlloc (|#_module.ins.AND| |a#408#0#0| |a#408#1#0| |a#408#2#0|) Tclass._module.ins $h@@71)) )))
(assert (forall ((|a#409#0#0| T@U) (|a#409#1#0| T@U) (|a#409#2#0| T@U) ) (!  (=> (and (and (= (type |a#409#0#0|) DatatypeTypeType) (= (type |a#409#1#0|) DatatypeTypeType)) (= (type |a#409#2#0|) DatatypeTypeType)) (= (|#_module.ins.AND| (Lit |a#409#0#0|) (Lit |a#409#1#0|) (Lit |a#409#2#0|)) (Lit (|#_module.ins.AND| |a#409#0#0| |a#409#1#0| |a#409#2#0|)))) :qid |ARMdefsd.284:11| :skolemid |3708| :pattern ( (|#_module.ins.AND| (Lit |a#409#0#0|) (Lit |a#409#1#0|) (Lit |a#409#2#0|))) )))
(assert (forall ((|a#410#0#0| T@U) (|a#410#1#0| T@U) (|a#410#2#0| T@U) ) (!  (=> (and (and (= (type |a#410#0#0|) DatatypeTypeType) (= (type |a#410#1#0|) DatatypeTypeType)) (= (type |a#410#2#0|) DatatypeTypeType)) (= (_module.ins.dstAND (|#_module.ins.AND| |a#410#0#0| |a#410#1#0| |a#410#2#0|)) |a#410#0#0|)) :qid |ARMdefsd.284:11| :skolemid |3709| :pattern ( (|#_module.ins.AND| |a#410#0#0| |a#410#1#0| |a#410#2#0|)) )))
(assert (forall ((|a#411#0#0| T@U) (|a#411#1#0| T@U) (|a#411#2#0| T@U) ) (!  (=> (and (and (= (type |a#411#0#0|) DatatypeTypeType) (= (type |a#411#1#0|) DatatypeTypeType)) (= (type |a#411#2#0|) DatatypeTypeType)) (< (DtRank |a#411#0#0|) (DtRank (|#_module.ins.AND| |a#411#0#0| |a#411#1#0| |a#411#2#0|)))) :qid |ARMdefsd.284:11| :skolemid |3710| :pattern ( (|#_module.ins.AND| |a#411#0#0| |a#411#1#0| |a#411#2#0|)) )))
(assert (forall ((|a#412#0#0| T@U) (|a#412#1#0| T@U) (|a#412#2#0| T@U) ) (!  (=> (and (and (= (type |a#412#0#0|) DatatypeTypeType) (= (type |a#412#1#0|) DatatypeTypeType)) (= (type |a#412#2#0|) DatatypeTypeType)) (= (_module.ins.src1AND (|#_module.ins.AND| |a#412#0#0| |a#412#1#0| |a#412#2#0|)) |a#412#1#0|)) :qid |ARMdefsd.284:11| :skolemid |3711| :pattern ( (|#_module.ins.AND| |a#412#0#0| |a#412#1#0| |a#412#2#0|)) )))
(assert (forall ((|a#413#0#0| T@U) (|a#413#1#0| T@U) (|a#413#2#0| T@U) ) (!  (=> (and (and (= (type |a#413#0#0|) DatatypeTypeType) (= (type |a#413#1#0|) DatatypeTypeType)) (= (type |a#413#2#0|) DatatypeTypeType)) (< (DtRank |a#413#1#0|) (DtRank (|#_module.ins.AND| |a#413#0#0| |a#413#1#0| |a#413#2#0|)))) :qid |ARMdefsd.284:11| :skolemid |3712| :pattern ( (|#_module.ins.AND| |a#413#0#0| |a#413#1#0| |a#413#2#0|)) )))
(assert (forall ((|a#414#0#0| T@U) (|a#414#1#0| T@U) (|a#414#2#0| T@U) ) (!  (=> (and (and (= (type |a#414#0#0|) DatatypeTypeType) (= (type |a#414#1#0|) DatatypeTypeType)) (= (type |a#414#2#0|) DatatypeTypeType)) (= (_module.ins.src2AND (|#_module.ins.AND| |a#414#0#0| |a#414#1#0| |a#414#2#0|)) |a#414#2#0|)) :qid |ARMdefsd.284:11| :skolemid |3713| :pattern ( (|#_module.ins.AND| |a#414#0#0| |a#414#1#0| |a#414#2#0|)) )))
(assert (forall ((|a#415#0#0| T@U) (|a#415#1#0| T@U) (|a#415#2#0| T@U) ) (!  (=> (and (and (= (type |a#415#0#0|) DatatypeTypeType) (= (type |a#415#1#0|) DatatypeTypeType)) (= (type |a#415#2#0|) DatatypeTypeType)) (< (DtRank |a#415#2#0|) (DtRank (|#_module.ins.AND| |a#415#0#0| |a#415#1#0| |a#415#2#0|)))) :qid |ARMdefsd.284:11| :skolemid |3714| :pattern ( (|#_module.ins.AND| |a#415#0#0| |a#415#1#0| |a#415#2#0|)) )))
(assert (forall ((arg0@@441 T@U) (arg1@@190 T@U) (arg2@@131 T@U) ) (! (= (type (|#_module.ins.ORR| arg0@@441 arg1@@190 arg2@@131)) DatatypeTypeType) :qid |funType:#_module.ins.ORR| :pattern ( (|#_module.ins.ORR| arg0@@441 arg1@@190 arg2@@131)) )))
(assert (forall ((|a#416#0#0| T@U) (|a#416#1#0| T@U) (|a#416#2#0| T@U) ) (!  (=> (and (and (= (type |a#416#0#0|) DatatypeTypeType) (= (type |a#416#1#0|) DatatypeTypeType)) (= (type |a#416#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.ORR| |a#416#0#0| |a#416#1#0| |a#416#2#0|)) |##_module.ins.ORR|)) :qid |ARMdefsd.285:11| :skolemid |3715| :pattern ( (|#_module.ins.ORR| |a#416#0#0| |a#416#1#0| |a#416#2#0|)) )))
(assert (forall ((d@@172 T@U) ) (!  (=> (= (type d@@172) DatatypeTypeType) (and (=> (_module.ins.ORR_q d@@172) (= (DatatypeCtorId d@@172) |##_module.ins.ORR|)) (=> (= (DatatypeCtorId d@@172) |##_module.ins.ORR|) (_module.ins.ORR_q d@@172)))) :qid |unknown.0:0| :skolemid |3716| :pattern ( (_module.ins.ORR_q d@@172)) )))
(assert (forall ((d@@173 T@U) ) (!  (=> (and (= (type d@@173) DatatypeTypeType) (_module.ins.ORR_q d@@173)) (exists ((|a#417#0#0| T@U) (|a#417#1#0| T@U) (|a#417#2#0| T@U) ) (!  (and (and (and (= (type |a#417#0#0|) DatatypeTypeType) (= (type |a#417#1#0|) DatatypeTypeType)) (= (type |a#417#2#0|) DatatypeTypeType)) (= d@@173 (|#_module.ins.ORR| |a#417#0#0| |a#417#1#0| |a#417#2#0|))) :qid |ARMdefsd.285:11| :skolemid |3717| :no-pattern (type |a#417#0#0|) :no-pattern (type |a#417#1#0|) :no-pattern (type |a#417#2#0|) :no-pattern (U_2_int |a#417#0#0|) :no-pattern (U_2_bool |a#417#0#0|) :no-pattern (U_2_int |a#417#1#0|) :no-pattern (U_2_bool |a#417#1#0|) :no-pattern (U_2_int |a#417#2#0|) :no-pattern (U_2_bool |a#417#2#0|) ))) :qid |unknown.0:0| :skolemid |3718| :pattern ( (_module.ins.ORR_q d@@173)) )))
(assert (forall ((|a#418#0#0| T@U) (|a#418#1#0| T@U) (|a#418#2#0| T@U) ) (!  (=> (and (and (= (type |a#418#0#0|) DatatypeTypeType) (= (type |a#418#1#0|) DatatypeTypeType)) (= (type |a#418#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.ORR| |a#418#0#0| |a#418#1#0| |a#418#2#0|) Tclass._module.ins) (and (and ($Is |a#418#0#0| Tclass._module.operand) ($Is |a#418#1#0| Tclass._module.operand)) ($Is |a#418#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#418#0#0| Tclass._module.operand) ($Is |a#418#1#0| Tclass._module.operand)) ($Is |a#418#2#0| Tclass._module.operand)) ($Is (|#_module.ins.ORR| |a#418#0#0| |a#418#1#0| |a#418#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.285:11| :skolemid |3719| :pattern ( ($Is (|#_module.ins.ORR| |a#418#0#0| |a#418#1#0| |a#418#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#419#0#0| T@U) (|a#419#1#0| T@U) (|a#419#2#0| T@U) ($h@@72 T@U) ) (!  (=> (and (and (and (and (= (type |a#419#0#0|) DatatypeTypeType) (= (type |a#419#1#0|) DatatypeTypeType)) (= (type |a#419#2#0|) DatatypeTypeType)) (= (type $h@@72) (MapType1Type refType))) ($IsGoodHeap $h@@72)) (and (=> ($IsAlloc (|#_module.ins.ORR| |a#419#0#0| |a#419#1#0| |a#419#2#0|) Tclass._module.ins $h@@72) (and (and ($IsAlloc |a#419#0#0| Tclass._module.operand $h@@72) ($IsAlloc |a#419#1#0| Tclass._module.operand $h@@72)) ($IsAlloc |a#419#2#0| Tclass._module.operand $h@@72))) (=> (and (and ($IsAlloc |a#419#0#0| Tclass._module.operand $h@@72) ($IsAlloc |a#419#1#0| Tclass._module.operand $h@@72)) ($IsAlloc |a#419#2#0| Tclass._module.operand $h@@72)) ($IsAlloc (|#_module.ins.ORR| |a#419#0#0| |a#419#1#0| |a#419#2#0|) Tclass._module.ins $h@@72)))) :qid |ARMdefsd.285:11| :skolemid |3720| :pattern ( ($IsAlloc (|#_module.ins.ORR| |a#419#0#0| |a#419#1#0| |a#419#2#0|) Tclass._module.ins $h@@72)) )))
(assert (forall ((|a#420#0#0| T@U) (|a#420#1#0| T@U) (|a#420#2#0| T@U) ) (!  (=> (and (and (= (type |a#420#0#0|) DatatypeTypeType) (= (type |a#420#1#0|) DatatypeTypeType)) (= (type |a#420#2#0|) DatatypeTypeType)) (= (|#_module.ins.ORR| (Lit |a#420#0#0|) (Lit |a#420#1#0|) (Lit |a#420#2#0|)) (Lit (|#_module.ins.ORR| |a#420#0#0| |a#420#1#0| |a#420#2#0|)))) :qid |ARMdefsd.285:11| :skolemid |3721| :pattern ( (|#_module.ins.ORR| (Lit |a#420#0#0|) (Lit |a#420#1#0|) (Lit |a#420#2#0|))) )))
(assert (forall ((|a#421#0#0| T@U) (|a#421#1#0| T@U) (|a#421#2#0| T@U) ) (!  (=> (and (and (= (type |a#421#0#0|) DatatypeTypeType) (= (type |a#421#1#0|) DatatypeTypeType)) (= (type |a#421#2#0|) DatatypeTypeType)) (= (_module.ins.dstOR (|#_module.ins.ORR| |a#421#0#0| |a#421#1#0| |a#421#2#0|)) |a#421#0#0|)) :qid |ARMdefsd.285:11| :skolemid |3722| :pattern ( (|#_module.ins.ORR| |a#421#0#0| |a#421#1#0| |a#421#2#0|)) )))
(assert (forall ((|a#422#0#0| T@U) (|a#422#1#0| T@U) (|a#422#2#0| T@U) ) (!  (=> (and (and (= (type |a#422#0#0|) DatatypeTypeType) (= (type |a#422#1#0|) DatatypeTypeType)) (= (type |a#422#2#0|) DatatypeTypeType)) (< (DtRank |a#422#0#0|) (DtRank (|#_module.ins.ORR| |a#422#0#0| |a#422#1#0| |a#422#2#0|)))) :qid |ARMdefsd.285:11| :skolemid |3723| :pattern ( (|#_module.ins.ORR| |a#422#0#0| |a#422#1#0| |a#422#2#0|)) )))
(assert (forall ((|a#423#0#0| T@U) (|a#423#1#0| T@U) (|a#423#2#0| T@U) ) (!  (=> (and (and (= (type |a#423#0#0|) DatatypeTypeType) (= (type |a#423#1#0|) DatatypeTypeType)) (= (type |a#423#2#0|) DatatypeTypeType)) (= (_module.ins.src1OR (|#_module.ins.ORR| |a#423#0#0| |a#423#1#0| |a#423#2#0|)) |a#423#1#0|)) :qid |ARMdefsd.285:11| :skolemid |3724| :pattern ( (|#_module.ins.ORR| |a#423#0#0| |a#423#1#0| |a#423#2#0|)) )))
(assert (forall ((|a#424#0#0| T@U) (|a#424#1#0| T@U) (|a#424#2#0| T@U) ) (!  (=> (and (and (= (type |a#424#0#0|) DatatypeTypeType) (= (type |a#424#1#0|) DatatypeTypeType)) (= (type |a#424#2#0|) DatatypeTypeType)) (< (DtRank |a#424#1#0|) (DtRank (|#_module.ins.ORR| |a#424#0#0| |a#424#1#0| |a#424#2#0|)))) :qid |ARMdefsd.285:11| :skolemid |3725| :pattern ( (|#_module.ins.ORR| |a#424#0#0| |a#424#1#0| |a#424#2#0|)) )))
(assert (forall ((|a#425#0#0| T@U) (|a#425#1#0| T@U) (|a#425#2#0| T@U) ) (!  (=> (and (and (= (type |a#425#0#0|) DatatypeTypeType) (= (type |a#425#1#0|) DatatypeTypeType)) (= (type |a#425#2#0|) DatatypeTypeType)) (= (_module.ins.src2OR (|#_module.ins.ORR| |a#425#0#0| |a#425#1#0| |a#425#2#0|)) |a#425#2#0|)) :qid |ARMdefsd.285:11| :skolemid |3726| :pattern ( (|#_module.ins.ORR| |a#425#0#0| |a#425#1#0| |a#425#2#0|)) )))
(assert (forall ((|a#426#0#0| T@U) (|a#426#1#0| T@U) (|a#426#2#0| T@U) ) (!  (=> (and (and (= (type |a#426#0#0|) DatatypeTypeType) (= (type |a#426#1#0|) DatatypeTypeType)) (= (type |a#426#2#0|) DatatypeTypeType)) (< (DtRank |a#426#2#0|) (DtRank (|#_module.ins.ORR| |a#426#0#0| |a#426#1#0| |a#426#2#0|)))) :qid |ARMdefsd.285:11| :skolemid |3727| :pattern ( (|#_module.ins.ORR| |a#426#0#0| |a#426#1#0| |a#426#2#0|)) )))
(assert (forall ((arg0@@442 T@U) (arg1@@191 T@U) (arg2@@132 T@U) ) (! (= (type (|#_module.ins.EOR| arg0@@442 arg1@@191 arg2@@132)) DatatypeTypeType) :qid |funType:#_module.ins.EOR| :pattern ( (|#_module.ins.EOR| arg0@@442 arg1@@191 arg2@@132)) )))
(assert (forall ((|a#427#0#0| T@U) (|a#427#1#0| T@U) (|a#427#2#0| T@U) ) (!  (=> (and (and (= (type |a#427#0#0|) DatatypeTypeType) (= (type |a#427#1#0|) DatatypeTypeType)) (= (type |a#427#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.EOR| |a#427#0#0| |a#427#1#0| |a#427#2#0|)) |##_module.ins.EOR|)) :qid |ARMdefsd.286:11| :skolemid |3728| :pattern ( (|#_module.ins.EOR| |a#427#0#0| |a#427#1#0| |a#427#2#0|)) )))
(assert (forall ((d@@174 T@U) ) (!  (=> (= (type d@@174) DatatypeTypeType) (and (=> (_module.ins.EOR_q d@@174) (= (DatatypeCtorId d@@174) |##_module.ins.EOR|)) (=> (= (DatatypeCtorId d@@174) |##_module.ins.EOR|) (_module.ins.EOR_q d@@174)))) :qid |unknown.0:0| :skolemid |3729| :pattern ( (_module.ins.EOR_q d@@174)) )))
(assert (forall ((d@@175 T@U) ) (!  (=> (and (= (type d@@175) DatatypeTypeType) (_module.ins.EOR_q d@@175)) (exists ((|a#428#0#0| T@U) (|a#428#1#0| T@U) (|a#428#2#0| T@U) ) (!  (and (and (and (= (type |a#428#0#0|) DatatypeTypeType) (= (type |a#428#1#0|) DatatypeTypeType)) (= (type |a#428#2#0|) DatatypeTypeType)) (= d@@175 (|#_module.ins.EOR| |a#428#0#0| |a#428#1#0| |a#428#2#0|))) :qid |ARMdefsd.286:11| :skolemid |3730| :no-pattern (type |a#428#0#0|) :no-pattern (type |a#428#1#0|) :no-pattern (type |a#428#2#0|) :no-pattern (U_2_int |a#428#0#0|) :no-pattern (U_2_bool |a#428#0#0|) :no-pattern (U_2_int |a#428#1#0|) :no-pattern (U_2_bool |a#428#1#0|) :no-pattern (U_2_int |a#428#2#0|) :no-pattern (U_2_bool |a#428#2#0|) ))) :qid |unknown.0:0| :skolemid |3731| :pattern ( (_module.ins.EOR_q d@@175)) )))
(assert (forall ((|a#429#0#0| T@U) (|a#429#1#0| T@U) (|a#429#2#0| T@U) ) (!  (=> (and (and (= (type |a#429#0#0|) DatatypeTypeType) (= (type |a#429#1#0|) DatatypeTypeType)) (= (type |a#429#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.EOR| |a#429#0#0| |a#429#1#0| |a#429#2#0|) Tclass._module.ins) (and (and ($Is |a#429#0#0| Tclass._module.operand) ($Is |a#429#1#0| Tclass._module.operand)) ($Is |a#429#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#429#0#0| Tclass._module.operand) ($Is |a#429#1#0| Tclass._module.operand)) ($Is |a#429#2#0| Tclass._module.operand)) ($Is (|#_module.ins.EOR| |a#429#0#0| |a#429#1#0| |a#429#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.286:11| :skolemid |3732| :pattern ( ($Is (|#_module.ins.EOR| |a#429#0#0| |a#429#1#0| |a#429#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#430#0#0| T@U) (|a#430#1#0| T@U) (|a#430#2#0| T@U) ($h@@73 T@U) ) (!  (=> (and (and (and (and (= (type |a#430#0#0|) DatatypeTypeType) (= (type |a#430#1#0|) DatatypeTypeType)) (= (type |a#430#2#0|) DatatypeTypeType)) (= (type $h@@73) (MapType1Type refType))) ($IsGoodHeap $h@@73)) (and (=> ($IsAlloc (|#_module.ins.EOR| |a#430#0#0| |a#430#1#0| |a#430#2#0|) Tclass._module.ins $h@@73) (and (and ($IsAlloc |a#430#0#0| Tclass._module.operand $h@@73) ($IsAlloc |a#430#1#0| Tclass._module.operand $h@@73)) ($IsAlloc |a#430#2#0| Tclass._module.operand $h@@73))) (=> (and (and ($IsAlloc |a#430#0#0| Tclass._module.operand $h@@73) ($IsAlloc |a#430#1#0| Tclass._module.operand $h@@73)) ($IsAlloc |a#430#2#0| Tclass._module.operand $h@@73)) ($IsAlloc (|#_module.ins.EOR| |a#430#0#0| |a#430#1#0| |a#430#2#0|) Tclass._module.ins $h@@73)))) :qid |ARMdefsd.286:11| :skolemid |3733| :pattern ( ($IsAlloc (|#_module.ins.EOR| |a#430#0#0| |a#430#1#0| |a#430#2#0|) Tclass._module.ins $h@@73)) )))
(assert (forall ((|a#431#0#0| T@U) (|a#431#1#0| T@U) (|a#431#2#0| T@U) ) (!  (=> (and (and (= (type |a#431#0#0|) DatatypeTypeType) (= (type |a#431#1#0|) DatatypeTypeType)) (= (type |a#431#2#0|) DatatypeTypeType)) (= (|#_module.ins.EOR| (Lit |a#431#0#0|) (Lit |a#431#1#0|) (Lit |a#431#2#0|)) (Lit (|#_module.ins.EOR| |a#431#0#0| |a#431#1#0| |a#431#2#0|)))) :qid |ARMdefsd.286:11| :skolemid |3734| :pattern ( (|#_module.ins.EOR| (Lit |a#431#0#0|) (Lit |a#431#1#0|) (Lit |a#431#2#0|))) )))
(assert (forall ((|a#432#0#0| T@U) (|a#432#1#0| T@U) (|a#432#2#0| T@U) ) (!  (=> (and (and (= (type |a#432#0#0|) DatatypeTypeType) (= (type |a#432#1#0|) DatatypeTypeType)) (= (type |a#432#2#0|) DatatypeTypeType)) (= (_module.ins.dstEOR (|#_module.ins.EOR| |a#432#0#0| |a#432#1#0| |a#432#2#0|)) |a#432#0#0|)) :qid |ARMdefsd.286:11| :skolemid |3735| :pattern ( (|#_module.ins.EOR| |a#432#0#0| |a#432#1#0| |a#432#2#0|)) )))
(assert (forall ((|a#433#0#0| T@U) (|a#433#1#0| T@U) (|a#433#2#0| T@U) ) (!  (=> (and (and (= (type |a#433#0#0|) DatatypeTypeType) (= (type |a#433#1#0|) DatatypeTypeType)) (= (type |a#433#2#0|) DatatypeTypeType)) (< (DtRank |a#433#0#0|) (DtRank (|#_module.ins.EOR| |a#433#0#0| |a#433#1#0| |a#433#2#0|)))) :qid |ARMdefsd.286:11| :skolemid |3736| :pattern ( (|#_module.ins.EOR| |a#433#0#0| |a#433#1#0| |a#433#2#0|)) )))
(assert (forall ((|a#434#0#0| T@U) (|a#434#1#0| T@U) (|a#434#2#0| T@U) ) (!  (=> (and (and (= (type |a#434#0#0|) DatatypeTypeType) (= (type |a#434#1#0|) DatatypeTypeType)) (= (type |a#434#2#0|) DatatypeTypeType)) (= (_module.ins.src1EOR (|#_module.ins.EOR| |a#434#0#0| |a#434#1#0| |a#434#2#0|)) |a#434#1#0|)) :qid |ARMdefsd.286:11| :skolemid |3737| :pattern ( (|#_module.ins.EOR| |a#434#0#0| |a#434#1#0| |a#434#2#0|)) )))
(assert (forall ((|a#435#0#0| T@U) (|a#435#1#0| T@U) (|a#435#2#0| T@U) ) (!  (=> (and (and (= (type |a#435#0#0|) DatatypeTypeType) (= (type |a#435#1#0|) DatatypeTypeType)) (= (type |a#435#2#0|) DatatypeTypeType)) (< (DtRank |a#435#1#0|) (DtRank (|#_module.ins.EOR| |a#435#0#0| |a#435#1#0| |a#435#2#0|)))) :qid |ARMdefsd.286:11| :skolemid |3738| :pattern ( (|#_module.ins.EOR| |a#435#0#0| |a#435#1#0| |a#435#2#0|)) )))
(assert (forall ((|a#436#0#0| T@U) (|a#436#1#0| T@U) (|a#436#2#0| T@U) ) (!  (=> (and (and (= (type |a#436#0#0|) DatatypeTypeType) (= (type |a#436#1#0|) DatatypeTypeType)) (= (type |a#436#2#0|) DatatypeTypeType)) (= (_module.ins.src2EOR (|#_module.ins.EOR| |a#436#0#0| |a#436#1#0| |a#436#2#0|)) |a#436#2#0|)) :qid |ARMdefsd.286:11| :skolemid |3739| :pattern ( (|#_module.ins.EOR| |a#436#0#0| |a#436#1#0| |a#436#2#0|)) )))
(assert (forall ((|a#437#0#0| T@U) (|a#437#1#0| T@U) (|a#437#2#0| T@U) ) (!  (=> (and (and (= (type |a#437#0#0|) DatatypeTypeType) (= (type |a#437#1#0|) DatatypeTypeType)) (= (type |a#437#2#0|) DatatypeTypeType)) (< (DtRank |a#437#2#0|) (DtRank (|#_module.ins.EOR| |a#437#0#0| |a#437#1#0| |a#437#2#0|)))) :qid |ARMdefsd.286:11| :skolemid |3740| :pattern ( (|#_module.ins.EOR| |a#437#0#0| |a#437#1#0| |a#437#2#0|)) )))
(assert (forall ((arg0@@443 T@U) (arg1@@192 T@U) (arg2@@133 T@U) ) (! (= (type (|#_module.ins.LSL| arg0@@443 arg1@@192 arg2@@133)) DatatypeTypeType) :qid |funType:#_module.ins.LSL| :pattern ( (|#_module.ins.LSL| arg0@@443 arg1@@192 arg2@@133)) )))
(assert (forall ((|a#438#0#0| T@U) (|a#438#1#0| T@U) (|a#438#2#0| T@U) ) (!  (=> (and (and (= (type |a#438#0#0|) DatatypeTypeType) (= (type |a#438#1#0|) DatatypeTypeType)) (= (type |a#438#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.LSL| |a#438#0#0| |a#438#1#0| |a#438#2#0|)) |##_module.ins.LSL|)) :qid |ARMdefsd.287:11| :skolemid |3741| :pattern ( (|#_module.ins.LSL| |a#438#0#0| |a#438#1#0| |a#438#2#0|)) )))
(assert (forall ((d@@176 T@U) ) (!  (=> (= (type d@@176) DatatypeTypeType) (and (=> (_module.ins.LSL_q d@@176) (= (DatatypeCtorId d@@176) |##_module.ins.LSL|)) (=> (= (DatatypeCtorId d@@176) |##_module.ins.LSL|) (_module.ins.LSL_q d@@176)))) :qid |unknown.0:0| :skolemid |3742| :pattern ( (_module.ins.LSL_q d@@176)) )))
(assert (forall ((d@@177 T@U) ) (!  (=> (and (= (type d@@177) DatatypeTypeType) (_module.ins.LSL_q d@@177)) (exists ((|a#439#0#0| T@U) (|a#439#1#0| T@U) (|a#439#2#0| T@U) ) (!  (and (and (and (= (type |a#439#0#0|) DatatypeTypeType) (= (type |a#439#1#0|) DatatypeTypeType)) (= (type |a#439#2#0|) DatatypeTypeType)) (= d@@177 (|#_module.ins.LSL| |a#439#0#0| |a#439#1#0| |a#439#2#0|))) :qid |ARMdefsd.287:11| :skolemid |3743| :no-pattern (type |a#439#0#0|) :no-pattern (type |a#439#1#0|) :no-pattern (type |a#439#2#0|) :no-pattern (U_2_int |a#439#0#0|) :no-pattern (U_2_bool |a#439#0#0|) :no-pattern (U_2_int |a#439#1#0|) :no-pattern (U_2_bool |a#439#1#0|) :no-pattern (U_2_int |a#439#2#0|) :no-pattern (U_2_bool |a#439#2#0|) ))) :qid |unknown.0:0| :skolemid |3744| :pattern ( (_module.ins.LSL_q d@@177)) )))
(assert (forall ((|a#440#0#0| T@U) (|a#440#1#0| T@U) (|a#440#2#0| T@U) ) (!  (=> (and (and (= (type |a#440#0#0|) DatatypeTypeType) (= (type |a#440#1#0|) DatatypeTypeType)) (= (type |a#440#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.LSL| |a#440#0#0| |a#440#1#0| |a#440#2#0|) Tclass._module.ins) (and (and ($Is |a#440#0#0| Tclass._module.operand) ($Is |a#440#1#0| Tclass._module.operand)) ($Is |a#440#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#440#0#0| Tclass._module.operand) ($Is |a#440#1#0| Tclass._module.operand)) ($Is |a#440#2#0| Tclass._module.operand)) ($Is (|#_module.ins.LSL| |a#440#0#0| |a#440#1#0| |a#440#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.287:11| :skolemid |3745| :pattern ( ($Is (|#_module.ins.LSL| |a#440#0#0| |a#440#1#0| |a#440#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#441#0#0| T@U) (|a#441#1#0| T@U) (|a#441#2#0| T@U) ($h@@74 T@U) ) (!  (=> (and (and (and (and (= (type |a#441#0#0|) DatatypeTypeType) (= (type |a#441#1#0|) DatatypeTypeType)) (= (type |a#441#2#0|) DatatypeTypeType)) (= (type $h@@74) (MapType1Type refType))) ($IsGoodHeap $h@@74)) (and (=> ($IsAlloc (|#_module.ins.LSL| |a#441#0#0| |a#441#1#0| |a#441#2#0|) Tclass._module.ins $h@@74) (and (and ($IsAlloc |a#441#0#0| Tclass._module.operand $h@@74) ($IsAlloc |a#441#1#0| Tclass._module.operand $h@@74)) ($IsAlloc |a#441#2#0| Tclass._module.operand $h@@74))) (=> (and (and ($IsAlloc |a#441#0#0| Tclass._module.operand $h@@74) ($IsAlloc |a#441#1#0| Tclass._module.operand $h@@74)) ($IsAlloc |a#441#2#0| Tclass._module.operand $h@@74)) ($IsAlloc (|#_module.ins.LSL| |a#441#0#0| |a#441#1#0| |a#441#2#0|) Tclass._module.ins $h@@74)))) :qid |ARMdefsd.287:11| :skolemid |3746| :pattern ( ($IsAlloc (|#_module.ins.LSL| |a#441#0#0| |a#441#1#0| |a#441#2#0|) Tclass._module.ins $h@@74)) )))
(assert (forall ((|a#442#0#0| T@U) (|a#442#1#0| T@U) (|a#442#2#0| T@U) ) (!  (=> (and (and (= (type |a#442#0#0|) DatatypeTypeType) (= (type |a#442#1#0|) DatatypeTypeType)) (= (type |a#442#2#0|) DatatypeTypeType)) (= (|#_module.ins.LSL| (Lit |a#442#0#0|) (Lit |a#442#1#0|) (Lit |a#442#2#0|)) (Lit (|#_module.ins.LSL| |a#442#0#0| |a#442#1#0| |a#442#2#0|)))) :qid |ARMdefsd.287:11| :skolemid |3747| :pattern ( (|#_module.ins.LSL| (Lit |a#442#0#0|) (Lit |a#442#1#0|) (Lit |a#442#2#0|))) )))
(assert (forall ((|a#443#0#0| T@U) (|a#443#1#0| T@U) (|a#443#2#0| T@U) ) (!  (=> (and (and (= (type |a#443#0#0|) DatatypeTypeType) (= (type |a#443#1#0|) DatatypeTypeType)) (= (type |a#443#2#0|) DatatypeTypeType)) (= (_module.ins.dstLSL (|#_module.ins.LSL| |a#443#0#0| |a#443#1#0| |a#443#2#0|)) |a#443#0#0|)) :qid |ARMdefsd.287:11| :skolemid |3748| :pattern ( (|#_module.ins.LSL| |a#443#0#0| |a#443#1#0| |a#443#2#0|)) )))
(assert (forall ((|a#444#0#0| T@U) (|a#444#1#0| T@U) (|a#444#2#0| T@U) ) (!  (=> (and (and (= (type |a#444#0#0|) DatatypeTypeType) (= (type |a#444#1#0|) DatatypeTypeType)) (= (type |a#444#2#0|) DatatypeTypeType)) (< (DtRank |a#444#0#0|) (DtRank (|#_module.ins.LSL| |a#444#0#0| |a#444#1#0| |a#444#2#0|)))) :qid |ARMdefsd.287:11| :skolemid |3749| :pattern ( (|#_module.ins.LSL| |a#444#0#0| |a#444#1#0| |a#444#2#0|)) )))
(assert (forall ((|a#445#0#0| T@U) (|a#445#1#0| T@U) (|a#445#2#0| T@U) ) (!  (=> (and (and (= (type |a#445#0#0|) DatatypeTypeType) (= (type |a#445#1#0|) DatatypeTypeType)) (= (type |a#445#2#0|) DatatypeTypeType)) (= (_module.ins.src1LSL (|#_module.ins.LSL| |a#445#0#0| |a#445#1#0| |a#445#2#0|)) |a#445#1#0|)) :qid |ARMdefsd.287:11| :skolemid |3750| :pattern ( (|#_module.ins.LSL| |a#445#0#0| |a#445#1#0| |a#445#2#0|)) )))
(assert (forall ((|a#446#0#0| T@U) (|a#446#1#0| T@U) (|a#446#2#0| T@U) ) (!  (=> (and (and (= (type |a#446#0#0|) DatatypeTypeType) (= (type |a#446#1#0|) DatatypeTypeType)) (= (type |a#446#2#0|) DatatypeTypeType)) (< (DtRank |a#446#1#0|) (DtRank (|#_module.ins.LSL| |a#446#0#0| |a#446#1#0| |a#446#2#0|)))) :qid |ARMdefsd.287:11| :skolemid |3751| :pattern ( (|#_module.ins.LSL| |a#446#0#0| |a#446#1#0| |a#446#2#0|)) )))
(assert (forall ((|a#447#0#0| T@U) (|a#447#1#0| T@U) (|a#447#2#0| T@U) ) (!  (=> (and (and (= (type |a#447#0#0|) DatatypeTypeType) (= (type |a#447#1#0|) DatatypeTypeType)) (= (type |a#447#2#0|) DatatypeTypeType)) (= (_module.ins.src2LSL (|#_module.ins.LSL| |a#447#0#0| |a#447#1#0| |a#447#2#0|)) |a#447#2#0|)) :qid |ARMdefsd.287:11| :skolemid |3752| :pattern ( (|#_module.ins.LSL| |a#447#0#0| |a#447#1#0| |a#447#2#0|)) )))
(assert (forall ((|a#448#0#0| T@U) (|a#448#1#0| T@U) (|a#448#2#0| T@U) ) (!  (=> (and (and (= (type |a#448#0#0|) DatatypeTypeType) (= (type |a#448#1#0|) DatatypeTypeType)) (= (type |a#448#2#0|) DatatypeTypeType)) (< (DtRank |a#448#2#0|) (DtRank (|#_module.ins.LSL| |a#448#0#0| |a#448#1#0| |a#448#2#0|)))) :qid |ARMdefsd.287:11| :skolemid |3753| :pattern ( (|#_module.ins.LSL| |a#448#0#0| |a#448#1#0| |a#448#2#0|)) )))
(assert (forall ((arg0@@444 T@U) (arg1@@193 T@U) (arg2@@134 T@U) ) (! (= (type (|#_module.ins.LSR| arg0@@444 arg1@@193 arg2@@134)) DatatypeTypeType) :qid |funType:#_module.ins.LSR| :pattern ( (|#_module.ins.LSR| arg0@@444 arg1@@193 arg2@@134)) )))
(assert (forall ((|a#449#0#0| T@U) (|a#449#1#0| T@U) (|a#449#2#0| T@U) ) (!  (=> (and (and (= (type |a#449#0#0|) DatatypeTypeType) (= (type |a#449#1#0|) DatatypeTypeType)) (= (type |a#449#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.LSR| |a#449#0#0| |a#449#1#0| |a#449#2#0|)) |##_module.ins.LSR|)) :qid |ARMdefsd.288:11| :skolemid |3754| :pattern ( (|#_module.ins.LSR| |a#449#0#0| |a#449#1#0| |a#449#2#0|)) )))
(assert (forall ((d@@178 T@U) ) (!  (=> (= (type d@@178) DatatypeTypeType) (and (=> (_module.ins.LSR_q d@@178) (= (DatatypeCtorId d@@178) |##_module.ins.LSR|)) (=> (= (DatatypeCtorId d@@178) |##_module.ins.LSR|) (_module.ins.LSR_q d@@178)))) :qid |unknown.0:0| :skolemid |3755| :pattern ( (_module.ins.LSR_q d@@178)) )))
(assert (forall ((d@@179 T@U) ) (!  (=> (and (= (type d@@179) DatatypeTypeType) (_module.ins.LSR_q d@@179)) (exists ((|a#450#0#0| T@U) (|a#450#1#0| T@U) (|a#450#2#0| T@U) ) (!  (and (and (and (= (type |a#450#0#0|) DatatypeTypeType) (= (type |a#450#1#0|) DatatypeTypeType)) (= (type |a#450#2#0|) DatatypeTypeType)) (= d@@179 (|#_module.ins.LSR| |a#450#0#0| |a#450#1#0| |a#450#2#0|))) :qid |ARMdefsd.288:11| :skolemid |3756| :no-pattern (type |a#450#0#0|) :no-pattern (type |a#450#1#0|) :no-pattern (type |a#450#2#0|) :no-pattern (U_2_int |a#450#0#0|) :no-pattern (U_2_bool |a#450#0#0|) :no-pattern (U_2_int |a#450#1#0|) :no-pattern (U_2_bool |a#450#1#0|) :no-pattern (U_2_int |a#450#2#0|) :no-pattern (U_2_bool |a#450#2#0|) ))) :qid |unknown.0:0| :skolemid |3757| :pattern ( (_module.ins.LSR_q d@@179)) )))
(assert (forall ((|a#451#0#0| T@U) (|a#451#1#0| T@U) (|a#451#2#0| T@U) ) (!  (=> (and (and (= (type |a#451#0#0|) DatatypeTypeType) (= (type |a#451#1#0|) DatatypeTypeType)) (= (type |a#451#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.LSR| |a#451#0#0| |a#451#1#0| |a#451#2#0|) Tclass._module.ins) (and (and ($Is |a#451#0#0| Tclass._module.operand) ($Is |a#451#1#0| Tclass._module.operand)) ($Is |a#451#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#451#0#0| Tclass._module.operand) ($Is |a#451#1#0| Tclass._module.operand)) ($Is |a#451#2#0| Tclass._module.operand)) ($Is (|#_module.ins.LSR| |a#451#0#0| |a#451#1#0| |a#451#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.288:11| :skolemid |3758| :pattern ( ($Is (|#_module.ins.LSR| |a#451#0#0| |a#451#1#0| |a#451#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#452#0#0| T@U) (|a#452#1#0| T@U) (|a#452#2#0| T@U) ($h@@75 T@U) ) (!  (=> (and (and (and (and (= (type |a#452#0#0|) DatatypeTypeType) (= (type |a#452#1#0|) DatatypeTypeType)) (= (type |a#452#2#0|) DatatypeTypeType)) (= (type $h@@75) (MapType1Type refType))) ($IsGoodHeap $h@@75)) (and (=> ($IsAlloc (|#_module.ins.LSR| |a#452#0#0| |a#452#1#0| |a#452#2#0|) Tclass._module.ins $h@@75) (and (and ($IsAlloc |a#452#0#0| Tclass._module.operand $h@@75) ($IsAlloc |a#452#1#0| Tclass._module.operand $h@@75)) ($IsAlloc |a#452#2#0| Tclass._module.operand $h@@75))) (=> (and (and ($IsAlloc |a#452#0#0| Tclass._module.operand $h@@75) ($IsAlloc |a#452#1#0| Tclass._module.operand $h@@75)) ($IsAlloc |a#452#2#0| Tclass._module.operand $h@@75)) ($IsAlloc (|#_module.ins.LSR| |a#452#0#0| |a#452#1#0| |a#452#2#0|) Tclass._module.ins $h@@75)))) :qid |ARMdefsd.288:11| :skolemid |3759| :pattern ( ($IsAlloc (|#_module.ins.LSR| |a#452#0#0| |a#452#1#0| |a#452#2#0|) Tclass._module.ins $h@@75)) )))
(assert (forall ((|a#453#0#0| T@U) (|a#453#1#0| T@U) (|a#453#2#0| T@U) ) (!  (=> (and (and (= (type |a#453#0#0|) DatatypeTypeType) (= (type |a#453#1#0|) DatatypeTypeType)) (= (type |a#453#2#0|) DatatypeTypeType)) (= (|#_module.ins.LSR| (Lit |a#453#0#0|) (Lit |a#453#1#0|) (Lit |a#453#2#0|)) (Lit (|#_module.ins.LSR| |a#453#0#0| |a#453#1#0| |a#453#2#0|)))) :qid |ARMdefsd.288:11| :skolemid |3760| :pattern ( (|#_module.ins.LSR| (Lit |a#453#0#0|) (Lit |a#453#1#0|) (Lit |a#453#2#0|))) )))
(assert (forall ((|a#454#0#0| T@U) (|a#454#1#0| T@U) (|a#454#2#0| T@U) ) (!  (=> (and (and (= (type |a#454#0#0|) DatatypeTypeType) (= (type |a#454#1#0|) DatatypeTypeType)) (= (type |a#454#2#0|) DatatypeTypeType)) (= (_module.ins.dstLSR (|#_module.ins.LSR| |a#454#0#0| |a#454#1#0| |a#454#2#0|)) |a#454#0#0|)) :qid |ARMdefsd.288:11| :skolemid |3761| :pattern ( (|#_module.ins.LSR| |a#454#0#0| |a#454#1#0| |a#454#2#0|)) )))
(assert (forall ((|a#455#0#0| T@U) (|a#455#1#0| T@U) (|a#455#2#0| T@U) ) (!  (=> (and (and (= (type |a#455#0#0|) DatatypeTypeType) (= (type |a#455#1#0|) DatatypeTypeType)) (= (type |a#455#2#0|) DatatypeTypeType)) (< (DtRank |a#455#0#0|) (DtRank (|#_module.ins.LSR| |a#455#0#0| |a#455#1#0| |a#455#2#0|)))) :qid |ARMdefsd.288:11| :skolemid |3762| :pattern ( (|#_module.ins.LSR| |a#455#0#0| |a#455#1#0| |a#455#2#0|)) )))
(assert (forall ((|a#456#0#0| T@U) (|a#456#1#0| T@U) (|a#456#2#0| T@U) ) (!  (=> (and (and (= (type |a#456#0#0|) DatatypeTypeType) (= (type |a#456#1#0|) DatatypeTypeType)) (= (type |a#456#2#0|) DatatypeTypeType)) (= (_module.ins.src1LSR (|#_module.ins.LSR| |a#456#0#0| |a#456#1#0| |a#456#2#0|)) |a#456#1#0|)) :qid |ARMdefsd.288:11| :skolemid |3763| :pattern ( (|#_module.ins.LSR| |a#456#0#0| |a#456#1#0| |a#456#2#0|)) )))
(assert (forall ((|a#457#0#0| T@U) (|a#457#1#0| T@U) (|a#457#2#0| T@U) ) (!  (=> (and (and (= (type |a#457#0#0|) DatatypeTypeType) (= (type |a#457#1#0|) DatatypeTypeType)) (= (type |a#457#2#0|) DatatypeTypeType)) (< (DtRank |a#457#1#0|) (DtRank (|#_module.ins.LSR| |a#457#0#0| |a#457#1#0| |a#457#2#0|)))) :qid |ARMdefsd.288:11| :skolemid |3764| :pattern ( (|#_module.ins.LSR| |a#457#0#0| |a#457#1#0| |a#457#2#0|)) )))
(assert (forall ((|a#458#0#0| T@U) (|a#458#1#0| T@U) (|a#458#2#0| T@U) ) (!  (=> (and (and (= (type |a#458#0#0|) DatatypeTypeType) (= (type |a#458#1#0|) DatatypeTypeType)) (= (type |a#458#2#0|) DatatypeTypeType)) (= (_module.ins.src2LSR (|#_module.ins.LSR| |a#458#0#0| |a#458#1#0| |a#458#2#0|)) |a#458#2#0|)) :qid |ARMdefsd.288:11| :skolemid |3765| :pattern ( (|#_module.ins.LSR| |a#458#0#0| |a#458#1#0| |a#458#2#0|)) )))
(assert (forall ((|a#459#0#0| T@U) (|a#459#1#0| T@U) (|a#459#2#0| T@U) ) (!  (=> (and (and (= (type |a#459#0#0|) DatatypeTypeType) (= (type |a#459#1#0|) DatatypeTypeType)) (= (type |a#459#2#0|) DatatypeTypeType)) (< (DtRank |a#459#2#0|) (DtRank (|#_module.ins.LSR| |a#459#0#0| |a#459#1#0| |a#459#2#0|)))) :qid |ARMdefsd.288:11| :skolemid |3766| :pattern ( (|#_module.ins.LSR| |a#459#0#0| |a#459#1#0| |a#459#2#0|)) )))
(assert (forall ((arg0@@445 T@U) (arg1@@194 T@U) ) (! (= (type (|#_module.ins.REV| arg0@@445 arg1@@194)) DatatypeTypeType) :qid |funType:#_module.ins.REV| :pattern ( (|#_module.ins.REV| arg0@@445 arg1@@194)) )))
(assert (forall ((|a#460#0#0| T@U) (|a#460#1#0| T@U) ) (!  (=> (and (= (type |a#460#0#0|) DatatypeTypeType) (= (type |a#460#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.REV| |a#460#0#0| |a#460#1#0|)) |##_module.ins.REV|)) :qid |ARMdefsd.289:11| :skolemid |3767| :pattern ( (|#_module.ins.REV| |a#460#0#0| |a#460#1#0|)) )))
(assert (forall ((d@@180 T@U) ) (!  (=> (= (type d@@180) DatatypeTypeType) (and (=> (_module.ins.REV_q d@@180) (= (DatatypeCtorId d@@180) |##_module.ins.REV|)) (=> (= (DatatypeCtorId d@@180) |##_module.ins.REV|) (_module.ins.REV_q d@@180)))) :qid |unknown.0:0| :skolemid |3768| :pattern ( (_module.ins.REV_q d@@180)) )))
(assert (forall ((d@@181 T@U) ) (!  (=> (and (= (type d@@181) DatatypeTypeType) (_module.ins.REV_q d@@181)) (exists ((|a#461#0#0| T@U) (|a#461#1#0| T@U) ) (!  (and (and (= (type |a#461#0#0|) DatatypeTypeType) (= (type |a#461#1#0|) DatatypeTypeType)) (= d@@181 (|#_module.ins.REV| |a#461#0#0| |a#461#1#0|))) :qid |ARMdefsd.289:11| :skolemid |3769| :no-pattern (type |a#461#0#0|) :no-pattern (type |a#461#1#0|) :no-pattern (U_2_int |a#461#0#0|) :no-pattern (U_2_bool |a#461#0#0|) :no-pattern (U_2_int |a#461#1#0|) :no-pattern (U_2_bool |a#461#1#0|) ))) :qid |unknown.0:0| :skolemid |3770| :pattern ( (_module.ins.REV_q d@@181)) )))
(assert (forall ((|a#462#0#0| T@U) (|a#462#1#0| T@U) ) (!  (=> (and (= (type |a#462#0#0|) DatatypeTypeType) (= (type |a#462#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.REV| |a#462#0#0| |a#462#1#0|) Tclass._module.ins) (and ($Is |a#462#0#0| Tclass._module.operand) ($Is |a#462#1#0| Tclass._module.operand))) (=> (and ($Is |a#462#0#0| Tclass._module.operand) ($Is |a#462#1#0| Tclass._module.operand)) ($Is (|#_module.ins.REV| |a#462#0#0| |a#462#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.289:11| :skolemid |3771| :pattern ( ($Is (|#_module.ins.REV| |a#462#0#0| |a#462#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#463#0#0| T@U) (|a#463#1#0| T@U) ($h@@76 T@U) ) (!  (=> (and (and (and (= (type |a#463#0#0|) DatatypeTypeType) (= (type |a#463#1#0|) DatatypeTypeType)) (= (type $h@@76) (MapType1Type refType))) ($IsGoodHeap $h@@76)) (and (=> ($IsAlloc (|#_module.ins.REV| |a#463#0#0| |a#463#1#0|) Tclass._module.ins $h@@76) (and ($IsAlloc |a#463#0#0| Tclass._module.operand $h@@76) ($IsAlloc |a#463#1#0| Tclass._module.operand $h@@76))) (=> (and ($IsAlloc |a#463#0#0| Tclass._module.operand $h@@76) ($IsAlloc |a#463#1#0| Tclass._module.operand $h@@76)) ($IsAlloc (|#_module.ins.REV| |a#463#0#0| |a#463#1#0|) Tclass._module.ins $h@@76)))) :qid |ARMdefsd.289:11| :skolemid |3772| :pattern ( ($IsAlloc (|#_module.ins.REV| |a#463#0#0| |a#463#1#0|) Tclass._module.ins $h@@76)) )))
(assert (forall ((|a#464#0#0| T@U) (|a#464#1#0| T@U) ) (!  (=> (and (= (type |a#464#0#0|) DatatypeTypeType) (= (type |a#464#1#0|) DatatypeTypeType)) (= (|#_module.ins.REV| (Lit |a#464#0#0|) (Lit |a#464#1#0|)) (Lit (|#_module.ins.REV| |a#464#0#0| |a#464#1#0|)))) :qid |ARMdefsd.289:11| :skolemid |3773| :pattern ( (|#_module.ins.REV| (Lit |a#464#0#0|) (Lit |a#464#1#0|))) )))
(assert (forall ((|a#465#0#0| T@U) (|a#465#1#0| T@U) ) (!  (=> (and (= (type |a#465#0#0|) DatatypeTypeType) (= (type |a#465#1#0|) DatatypeTypeType)) (= (_module.ins.dstREV (|#_module.ins.REV| |a#465#0#0| |a#465#1#0|)) |a#465#0#0|)) :qid |ARMdefsd.289:11| :skolemid |3774| :pattern ( (|#_module.ins.REV| |a#465#0#0| |a#465#1#0|)) )))
(assert (forall ((|a#466#0#0| T@U) (|a#466#1#0| T@U) ) (!  (=> (and (= (type |a#466#0#0|) DatatypeTypeType) (= (type |a#466#1#0|) DatatypeTypeType)) (< (DtRank |a#466#0#0|) (DtRank (|#_module.ins.REV| |a#466#0#0| |a#466#1#0|)))) :qid |ARMdefsd.289:11| :skolemid |3775| :pattern ( (|#_module.ins.REV| |a#466#0#0| |a#466#1#0|)) )))
(assert (forall ((|a#467#0#0| T@U) (|a#467#1#0| T@U) ) (!  (=> (and (= (type |a#467#0#0|) DatatypeTypeType) (= (type |a#467#1#0|) DatatypeTypeType)) (= (_module.ins.srcREV (|#_module.ins.REV| |a#467#0#0| |a#467#1#0|)) |a#467#1#0|)) :qid |ARMdefsd.289:11| :skolemid |3776| :pattern ( (|#_module.ins.REV| |a#467#0#0| |a#467#1#0|)) )))
(assert (forall ((|a#468#0#0| T@U) (|a#468#1#0| T@U) ) (!  (=> (and (= (type |a#468#0#0|) DatatypeTypeType) (= (type |a#468#1#0|) DatatypeTypeType)) (< (DtRank |a#468#1#0|) (DtRank (|#_module.ins.REV| |a#468#0#0| |a#468#1#0|)))) :qid |ARMdefsd.289:11| :skolemid |3777| :pattern ( (|#_module.ins.REV| |a#468#0#0| |a#468#1#0|)) )))
(assert (forall ((arg0@@446 T@U) (arg1@@195 T@U) ) (! (= (type (|#_module.ins.MOV| arg0@@446 arg1@@195)) DatatypeTypeType) :qid |funType:#_module.ins.MOV| :pattern ( (|#_module.ins.MOV| arg0@@446 arg1@@195)) )))
(assert (forall ((|a#469#0#0| T@U) (|a#469#1#0| T@U) ) (!  (=> (and (= (type |a#469#0#0|) DatatypeTypeType) (= (type |a#469#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.MOV| |a#469#0#0| |a#469#1#0|)) |##_module.ins.MOV|)) :qid |ARMdefsd.290:11| :skolemid |3778| :pattern ( (|#_module.ins.MOV| |a#469#0#0| |a#469#1#0|)) )))
(assert (forall ((d@@182 T@U) ) (!  (=> (= (type d@@182) DatatypeTypeType) (and (=> (_module.ins.MOV_q d@@182) (= (DatatypeCtorId d@@182) |##_module.ins.MOV|)) (=> (= (DatatypeCtorId d@@182) |##_module.ins.MOV|) (_module.ins.MOV_q d@@182)))) :qid |unknown.0:0| :skolemid |3779| :pattern ( (_module.ins.MOV_q d@@182)) )))
(assert (forall ((d@@183 T@U) ) (!  (=> (and (= (type d@@183) DatatypeTypeType) (_module.ins.MOV_q d@@183)) (exists ((|a#470#0#0| T@U) (|a#470#1#0| T@U) ) (!  (and (and (= (type |a#470#0#0|) DatatypeTypeType) (= (type |a#470#1#0|) DatatypeTypeType)) (= d@@183 (|#_module.ins.MOV| |a#470#0#0| |a#470#1#0|))) :qid |ARMdefsd.290:11| :skolemid |3780| :no-pattern (type |a#470#0#0|) :no-pattern (type |a#470#1#0|) :no-pattern (U_2_int |a#470#0#0|) :no-pattern (U_2_bool |a#470#0#0|) :no-pattern (U_2_int |a#470#1#0|) :no-pattern (U_2_bool |a#470#1#0|) ))) :qid |unknown.0:0| :skolemid |3781| :pattern ( (_module.ins.MOV_q d@@183)) )))
(assert (forall ((|a#471#0#0| T@U) (|a#471#1#0| T@U) ) (!  (=> (and (= (type |a#471#0#0|) DatatypeTypeType) (= (type |a#471#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.MOV| |a#471#0#0| |a#471#1#0|) Tclass._module.ins) (and ($Is |a#471#0#0| Tclass._module.operand) ($Is |a#471#1#0| Tclass._module.operand))) (=> (and ($Is |a#471#0#0| Tclass._module.operand) ($Is |a#471#1#0| Tclass._module.operand)) ($Is (|#_module.ins.MOV| |a#471#0#0| |a#471#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.290:11| :skolemid |3782| :pattern ( ($Is (|#_module.ins.MOV| |a#471#0#0| |a#471#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#472#0#0| T@U) (|a#472#1#0| T@U) ($h@@77 T@U) ) (!  (=> (and (and (and (= (type |a#472#0#0|) DatatypeTypeType) (= (type |a#472#1#0|) DatatypeTypeType)) (= (type $h@@77) (MapType1Type refType))) ($IsGoodHeap $h@@77)) (and (=> ($IsAlloc (|#_module.ins.MOV| |a#472#0#0| |a#472#1#0|) Tclass._module.ins $h@@77) (and ($IsAlloc |a#472#0#0| Tclass._module.operand $h@@77) ($IsAlloc |a#472#1#0| Tclass._module.operand $h@@77))) (=> (and ($IsAlloc |a#472#0#0| Tclass._module.operand $h@@77) ($IsAlloc |a#472#1#0| Tclass._module.operand $h@@77)) ($IsAlloc (|#_module.ins.MOV| |a#472#0#0| |a#472#1#0|) Tclass._module.ins $h@@77)))) :qid |ARMdefsd.290:11| :skolemid |3783| :pattern ( ($IsAlloc (|#_module.ins.MOV| |a#472#0#0| |a#472#1#0|) Tclass._module.ins $h@@77)) )))
(assert (forall ((|a#473#0#0| T@U) (|a#473#1#0| T@U) ) (!  (=> (and (= (type |a#473#0#0|) DatatypeTypeType) (= (type |a#473#1#0|) DatatypeTypeType)) (= (|#_module.ins.MOV| (Lit |a#473#0#0|) (Lit |a#473#1#0|)) (Lit (|#_module.ins.MOV| |a#473#0#0| |a#473#1#0|)))) :qid |ARMdefsd.290:11| :skolemid |3784| :pattern ( (|#_module.ins.MOV| (Lit |a#473#0#0|) (Lit |a#473#1#0|))) )))
(assert (forall ((|a#474#0#0| T@U) (|a#474#1#0| T@U) ) (!  (=> (and (= (type |a#474#0#0|) DatatypeTypeType) (= (type |a#474#1#0|) DatatypeTypeType)) (= (_module.ins.dstMOV (|#_module.ins.MOV| |a#474#0#0| |a#474#1#0|)) |a#474#0#0|)) :qid |ARMdefsd.290:11| :skolemid |3785| :pattern ( (|#_module.ins.MOV| |a#474#0#0| |a#474#1#0|)) )))
(assert (forall ((|a#475#0#0| T@U) (|a#475#1#0| T@U) ) (!  (=> (and (= (type |a#475#0#0|) DatatypeTypeType) (= (type |a#475#1#0|) DatatypeTypeType)) (< (DtRank |a#475#0#0|) (DtRank (|#_module.ins.MOV| |a#475#0#0| |a#475#1#0|)))) :qid |ARMdefsd.290:11| :skolemid |3786| :pattern ( (|#_module.ins.MOV| |a#475#0#0| |a#475#1#0|)) )))
(assert (forall ((|a#476#0#0| T@U) (|a#476#1#0| T@U) ) (!  (=> (and (= (type |a#476#0#0|) DatatypeTypeType) (= (type |a#476#1#0|) DatatypeTypeType)) (= (_module.ins.srcMOV (|#_module.ins.MOV| |a#476#0#0| |a#476#1#0|)) |a#476#1#0|)) :qid |ARMdefsd.290:11| :skolemid |3787| :pattern ( (|#_module.ins.MOV| |a#476#0#0| |a#476#1#0|)) )))
(assert (forall ((|a#477#0#0| T@U) (|a#477#1#0| T@U) ) (!  (=> (and (= (type |a#477#0#0|) DatatypeTypeType) (= (type |a#477#1#0|) DatatypeTypeType)) (< (DtRank |a#477#1#0|) (DtRank (|#_module.ins.MOV| |a#477#0#0| |a#477#1#0|)))) :qid |ARMdefsd.290:11| :skolemid |3788| :pattern ( (|#_module.ins.MOV| |a#477#0#0| |a#477#1#0|)) )))
(assert (forall ((arg0@@447 T@U) (arg1@@196 T@U) ) (! (= (type (|#_module.ins.MOVW| arg0@@447 arg1@@196)) DatatypeTypeType) :qid |funType:#_module.ins.MOVW| :pattern ( (|#_module.ins.MOVW| arg0@@447 arg1@@196)) )))
(assert (forall ((|a#478#0#0| T@U) (|a#478#1#0| T@U) ) (!  (=> (and (= (type |a#478#0#0|) DatatypeTypeType) (= (type |a#478#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.MOVW| |a#478#0#0| |a#478#1#0|)) |##_module.ins.MOVW|)) :qid |ARMdefsd.291:12| :skolemid |3789| :pattern ( (|#_module.ins.MOVW| |a#478#0#0| |a#478#1#0|)) )))
(assert (forall ((d@@184 T@U) ) (!  (=> (= (type d@@184) DatatypeTypeType) (and (=> (_module.ins.MOVW_q d@@184) (= (DatatypeCtorId d@@184) |##_module.ins.MOVW|)) (=> (= (DatatypeCtorId d@@184) |##_module.ins.MOVW|) (_module.ins.MOVW_q d@@184)))) :qid |unknown.0:0| :skolemid |3790| :pattern ( (_module.ins.MOVW_q d@@184)) )))
(assert (forall ((d@@185 T@U) ) (!  (=> (and (= (type d@@185) DatatypeTypeType) (_module.ins.MOVW_q d@@185)) (exists ((|a#479#0#0| T@U) (|a#479#1#0| T@U) ) (!  (and (and (= (type |a#479#0#0|) DatatypeTypeType) (= (type |a#479#1#0|) DatatypeTypeType)) (= d@@185 (|#_module.ins.MOVW| |a#479#0#0| |a#479#1#0|))) :qid |ARMdefsd.291:12| :skolemid |3791| :no-pattern (type |a#479#0#0|) :no-pattern (type |a#479#1#0|) :no-pattern (U_2_int |a#479#0#0|) :no-pattern (U_2_bool |a#479#0#0|) :no-pattern (U_2_int |a#479#1#0|) :no-pattern (U_2_bool |a#479#1#0|) ))) :qid |unknown.0:0| :skolemid |3792| :pattern ( (_module.ins.MOVW_q d@@185)) )))
(assert (forall ((|a#480#0#0| T@U) (|a#480#1#0| T@U) ) (!  (=> (and (= (type |a#480#0#0|) DatatypeTypeType) (= (type |a#480#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.MOVW| |a#480#0#0| |a#480#1#0|) Tclass._module.ins) (and ($Is |a#480#0#0| Tclass._module.operand) ($Is |a#480#1#0| Tclass._module.operand))) (=> (and ($Is |a#480#0#0| Tclass._module.operand) ($Is |a#480#1#0| Tclass._module.operand)) ($Is (|#_module.ins.MOVW| |a#480#0#0| |a#480#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.291:12| :skolemid |3793| :pattern ( ($Is (|#_module.ins.MOVW| |a#480#0#0| |a#480#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#481#0#0| T@U) (|a#481#1#0| T@U) ($h@@78 T@U) ) (!  (=> (and (and (and (= (type |a#481#0#0|) DatatypeTypeType) (= (type |a#481#1#0|) DatatypeTypeType)) (= (type $h@@78) (MapType1Type refType))) ($IsGoodHeap $h@@78)) (and (=> ($IsAlloc (|#_module.ins.MOVW| |a#481#0#0| |a#481#1#0|) Tclass._module.ins $h@@78) (and ($IsAlloc |a#481#0#0| Tclass._module.operand $h@@78) ($IsAlloc |a#481#1#0| Tclass._module.operand $h@@78))) (=> (and ($IsAlloc |a#481#0#0| Tclass._module.operand $h@@78) ($IsAlloc |a#481#1#0| Tclass._module.operand $h@@78)) ($IsAlloc (|#_module.ins.MOVW| |a#481#0#0| |a#481#1#0|) Tclass._module.ins $h@@78)))) :qid |ARMdefsd.291:12| :skolemid |3794| :pattern ( ($IsAlloc (|#_module.ins.MOVW| |a#481#0#0| |a#481#1#0|) Tclass._module.ins $h@@78)) )))
(assert (forall ((|a#482#0#0| T@U) (|a#482#1#0| T@U) ) (!  (=> (and (= (type |a#482#0#0|) DatatypeTypeType) (= (type |a#482#1#0|) DatatypeTypeType)) (= (|#_module.ins.MOVW| (Lit |a#482#0#0|) (Lit |a#482#1#0|)) (Lit (|#_module.ins.MOVW| |a#482#0#0| |a#482#1#0|)))) :qid |ARMdefsd.291:12| :skolemid |3795| :pattern ( (|#_module.ins.MOVW| (Lit |a#482#0#0|) (Lit |a#482#1#0|))) )))
(assert (forall ((|a#483#0#0| T@U) (|a#483#1#0| T@U) ) (!  (=> (and (= (type |a#483#0#0|) DatatypeTypeType) (= (type |a#483#1#0|) DatatypeTypeType)) (= (_module.ins.dstMOVW (|#_module.ins.MOVW| |a#483#0#0| |a#483#1#0|)) |a#483#0#0|)) :qid |ARMdefsd.291:12| :skolemid |3796| :pattern ( (|#_module.ins.MOVW| |a#483#0#0| |a#483#1#0|)) )))
(assert (forall ((|a#484#0#0| T@U) (|a#484#1#0| T@U) ) (!  (=> (and (= (type |a#484#0#0|) DatatypeTypeType) (= (type |a#484#1#0|) DatatypeTypeType)) (< (DtRank |a#484#0#0|) (DtRank (|#_module.ins.MOVW| |a#484#0#0| |a#484#1#0|)))) :qid |ARMdefsd.291:12| :skolemid |3797| :pattern ( (|#_module.ins.MOVW| |a#484#0#0| |a#484#1#0|)) )))
(assert (forall ((|a#485#0#0| T@U) (|a#485#1#0| T@U) ) (!  (=> (and (= (type |a#485#0#0|) DatatypeTypeType) (= (type |a#485#1#0|) DatatypeTypeType)) (= (_module.ins.srcMOVW (|#_module.ins.MOVW| |a#485#0#0| |a#485#1#0|)) |a#485#1#0|)) :qid |ARMdefsd.291:12| :skolemid |3798| :pattern ( (|#_module.ins.MOVW| |a#485#0#0| |a#485#1#0|)) )))
(assert (forall ((|a#486#0#0| T@U) (|a#486#1#0| T@U) ) (!  (=> (and (= (type |a#486#0#0|) DatatypeTypeType) (= (type |a#486#1#0|) DatatypeTypeType)) (< (DtRank |a#486#1#0|) (DtRank (|#_module.ins.MOVW| |a#486#0#0| |a#486#1#0|)))) :qid |ARMdefsd.291:12| :skolemid |3799| :pattern ( (|#_module.ins.MOVW| |a#486#0#0| |a#486#1#0|)) )))
(assert (forall ((arg0@@448 T@U) (arg1@@197 T@U) ) (! (= (type (|#_module.ins.MOVT| arg0@@448 arg1@@197)) DatatypeTypeType) :qid |funType:#_module.ins.MOVT| :pattern ( (|#_module.ins.MOVT| arg0@@448 arg1@@197)) )))
(assert (forall ((|a#487#0#0| T@U) (|a#487#1#0| T@U) ) (!  (=> (and (= (type |a#487#0#0|) DatatypeTypeType) (= (type |a#487#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.MOVT| |a#487#0#0| |a#487#1#0|)) |##_module.ins.MOVT|)) :qid |ARMdefsd.292:12| :skolemid |3800| :pattern ( (|#_module.ins.MOVT| |a#487#0#0| |a#487#1#0|)) )))
(assert (forall ((d@@186 T@U) ) (!  (=> (= (type d@@186) DatatypeTypeType) (and (=> (_module.ins.MOVT_q d@@186) (= (DatatypeCtorId d@@186) |##_module.ins.MOVT|)) (=> (= (DatatypeCtorId d@@186) |##_module.ins.MOVT|) (_module.ins.MOVT_q d@@186)))) :qid |unknown.0:0| :skolemid |3801| :pattern ( (_module.ins.MOVT_q d@@186)) )))
(assert (forall ((d@@187 T@U) ) (!  (=> (and (= (type d@@187) DatatypeTypeType) (_module.ins.MOVT_q d@@187)) (exists ((|a#488#0#0| T@U) (|a#488#1#0| T@U) ) (!  (and (and (= (type |a#488#0#0|) DatatypeTypeType) (= (type |a#488#1#0|) DatatypeTypeType)) (= d@@187 (|#_module.ins.MOVT| |a#488#0#0| |a#488#1#0|))) :qid |ARMdefsd.292:12| :skolemid |3802| :no-pattern (type |a#488#0#0|) :no-pattern (type |a#488#1#0|) :no-pattern (U_2_int |a#488#0#0|) :no-pattern (U_2_bool |a#488#0#0|) :no-pattern (U_2_int |a#488#1#0|) :no-pattern (U_2_bool |a#488#1#0|) ))) :qid |unknown.0:0| :skolemid |3803| :pattern ( (_module.ins.MOVT_q d@@187)) )))
(assert (forall ((|a#489#0#0| T@U) (|a#489#1#0| T@U) ) (!  (=> (and (= (type |a#489#0#0|) DatatypeTypeType) (= (type |a#489#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.MOVT| |a#489#0#0| |a#489#1#0|) Tclass._module.ins) (and ($Is |a#489#0#0| Tclass._module.operand) ($Is |a#489#1#0| Tclass._module.operand))) (=> (and ($Is |a#489#0#0| Tclass._module.operand) ($Is |a#489#1#0| Tclass._module.operand)) ($Is (|#_module.ins.MOVT| |a#489#0#0| |a#489#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.292:12| :skolemid |3804| :pattern ( ($Is (|#_module.ins.MOVT| |a#489#0#0| |a#489#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#490#0#0| T@U) (|a#490#1#0| T@U) ($h@@79 T@U) ) (!  (=> (and (and (and (= (type |a#490#0#0|) DatatypeTypeType) (= (type |a#490#1#0|) DatatypeTypeType)) (= (type $h@@79) (MapType1Type refType))) ($IsGoodHeap $h@@79)) (and (=> ($IsAlloc (|#_module.ins.MOVT| |a#490#0#0| |a#490#1#0|) Tclass._module.ins $h@@79) (and ($IsAlloc |a#490#0#0| Tclass._module.operand $h@@79) ($IsAlloc |a#490#1#0| Tclass._module.operand $h@@79))) (=> (and ($IsAlloc |a#490#0#0| Tclass._module.operand $h@@79) ($IsAlloc |a#490#1#0| Tclass._module.operand $h@@79)) ($IsAlloc (|#_module.ins.MOVT| |a#490#0#0| |a#490#1#0|) Tclass._module.ins $h@@79)))) :qid |ARMdefsd.292:12| :skolemid |3805| :pattern ( ($IsAlloc (|#_module.ins.MOVT| |a#490#0#0| |a#490#1#0|) Tclass._module.ins $h@@79)) )))
(assert (forall ((|a#491#0#0| T@U) (|a#491#1#0| T@U) ) (!  (=> (and (= (type |a#491#0#0|) DatatypeTypeType) (= (type |a#491#1#0|) DatatypeTypeType)) (= (|#_module.ins.MOVT| (Lit |a#491#0#0|) (Lit |a#491#1#0|)) (Lit (|#_module.ins.MOVT| |a#491#0#0| |a#491#1#0|)))) :qid |ARMdefsd.292:12| :skolemid |3806| :pattern ( (|#_module.ins.MOVT| (Lit |a#491#0#0|) (Lit |a#491#1#0|))) )))
(assert (forall ((|a#492#0#0| T@U) (|a#492#1#0| T@U) ) (!  (=> (and (= (type |a#492#0#0|) DatatypeTypeType) (= (type |a#492#1#0|) DatatypeTypeType)) (= (_module.ins.dstMOVT (|#_module.ins.MOVT| |a#492#0#0| |a#492#1#0|)) |a#492#0#0|)) :qid |ARMdefsd.292:12| :skolemid |3807| :pattern ( (|#_module.ins.MOVT| |a#492#0#0| |a#492#1#0|)) )))
(assert (forall ((|a#493#0#0| T@U) (|a#493#1#0| T@U) ) (!  (=> (and (= (type |a#493#0#0|) DatatypeTypeType) (= (type |a#493#1#0|) DatatypeTypeType)) (< (DtRank |a#493#0#0|) (DtRank (|#_module.ins.MOVT| |a#493#0#0| |a#493#1#0|)))) :qid |ARMdefsd.292:12| :skolemid |3808| :pattern ( (|#_module.ins.MOVT| |a#493#0#0| |a#493#1#0|)) )))
(assert (forall ((|a#494#0#0| T@U) (|a#494#1#0| T@U) ) (!  (=> (and (= (type |a#494#0#0|) DatatypeTypeType) (= (type |a#494#1#0|) DatatypeTypeType)) (= (_module.ins.srcMOVT (|#_module.ins.MOVT| |a#494#0#0| |a#494#1#0|)) |a#494#1#0|)) :qid |ARMdefsd.292:12| :skolemid |3809| :pattern ( (|#_module.ins.MOVT| |a#494#0#0| |a#494#1#0|)) )))
(assert (forall ((|a#495#0#0| T@U) (|a#495#1#0| T@U) ) (!  (=> (and (= (type |a#495#0#0|) DatatypeTypeType) (= (type |a#495#1#0|) DatatypeTypeType)) (< (DtRank |a#495#1#0|) (DtRank (|#_module.ins.MOVT| |a#495#0#0| |a#495#1#0|)))) :qid |ARMdefsd.292:12| :skolemid |3810| :pattern ( (|#_module.ins.MOVT| |a#495#0#0| |a#495#1#0|)) )))
(assert (forall ((arg0@@449 T@U) (arg1@@198 T@U) ) (! (= (type (|#_module.ins.MVN| arg0@@449 arg1@@198)) DatatypeTypeType) :qid |funType:#_module.ins.MVN| :pattern ( (|#_module.ins.MVN| arg0@@449 arg1@@198)) )))
(assert (forall ((|a#496#0#0| T@U) (|a#496#1#0| T@U) ) (!  (=> (and (= (type |a#496#0#0|) DatatypeTypeType) (= (type |a#496#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.MVN| |a#496#0#0| |a#496#1#0|)) |##_module.ins.MVN|)) :qid |ARMdefsd.293:11| :skolemid |3811| :pattern ( (|#_module.ins.MVN| |a#496#0#0| |a#496#1#0|)) )))
(assert (forall ((d@@188 T@U) ) (!  (=> (= (type d@@188) DatatypeTypeType) (and (=> (_module.ins.MVN_q d@@188) (= (DatatypeCtorId d@@188) |##_module.ins.MVN|)) (=> (= (DatatypeCtorId d@@188) |##_module.ins.MVN|) (_module.ins.MVN_q d@@188)))) :qid |unknown.0:0| :skolemid |3812| :pattern ( (_module.ins.MVN_q d@@188)) )))
(assert (forall ((d@@189 T@U) ) (!  (=> (and (= (type d@@189) DatatypeTypeType) (_module.ins.MVN_q d@@189)) (exists ((|a#497#0#0| T@U) (|a#497#1#0| T@U) ) (!  (and (and (= (type |a#497#0#0|) DatatypeTypeType) (= (type |a#497#1#0|) DatatypeTypeType)) (= d@@189 (|#_module.ins.MVN| |a#497#0#0| |a#497#1#0|))) :qid |ARMdefsd.293:11| :skolemid |3813| :no-pattern (type |a#497#0#0|) :no-pattern (type |a#497#1#0|) :no-pattern (U_2_int |a#497#0#0|) :no-pattern (U_2_bool |a#497#0#0|) :no-pattern (U_2_int |a#497#1#0|) :no-pattern (U_2_bool |a#497#1#0|) ))) :qid |unknown.0:0| :skolemid |3814| :pattern ( (_module.ins.MVN_q d@@189)) )))
(assert (forall ((|a#498#0#0| T@U) (|a#498#1#0| T@U) ) (!  (=> (and (= (type |a#498#0#0|) DatatypeTypeType) (= (type |a#498#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.MVN| |a#498#0#0| |a#498#1#0|) Tclass._module.ins) (and ($Is |a#498#0#0| Tclass._module.operand) ($Is |a#498#1#0| Tclass._module.operand))) (=> (and ($Is |a#498#0#0| Tclass._module.operand) ($Is |a#498#1#0| Tclass._module.operand)) ($Is (|#_module.ins.MVN| |a#498#0#0| |a#498#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.293:11| :skolemid |3815| :pattern ( ($Is (|#_module.ins.MVN| |a#498#0#0| |a#498#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#499#0#0| T@U) (|a#499#1#0| T@U) ($h@@80 T@U) ) (!  (=> (and (and (and (= (type |a#499#0#0|) DatatypeTypeType) (= (type |a#499#1#0|) DatatypeTypeType)) (= (type $h@@80) (MapType1Type refType))) ($IsGoodHeap $h@@80)) (and (=> ($IsAlloc (|#_module.ins.MVN| |a#499#0#0| |a#499#1#0|) Tclass._module.ins $h@@80) (and ($IsAlloc |a#499#0#0| Tclass._module.operand $h@@80) ($IsAlloc |a#499#1#0| Tclass._module.operand $h@@80))) (=> (and ($IsAlloc |a#499#0#0| Tclass._module.operand $h@@80) ($IsAlloc |a#499#1#0| Tclass._module.operand $h@@80)) ($IsAlloc (|#_module.ins.MVN| |a#499#0#0| |a#499#1#0|) Tclass._module.ins $h@@80)))) :qid |ARMdefsd.293:11| :skolemid |3816| :pattern ( ($IsAlloc (|#_module.ins.MVN| |a#499#0#0| |a#499#1#0|) Tclass._module.ins $h@@80)) )))
(assert (forall ((|a#500#0#0| T@U) (|a#500#1#0| T@U) ) (!  (=> (and (= (type |a#500#0#0|) DatatypeTypeType) (= (type |a#500#1#0|) DatatypeTypeType)) (= (|#_module.ins.MVN| (Lit |a#500#0#0|) (Lit |a#500#1#0|)) (Lit (|#_module.ins.MVN| |a#500#0#0| |a#500#1#0|)))) :qid |ARMdefsd.293:11| :skolemid |3817| :pattern ( (|#_module.ins.MVN| (Lit |a#500#0#0|) (Lit |a#500#1#0|))) )))
(assert (forall ((|a#501#0#0| T@U) (|a#501#1#0| T@U) ) (!  (=> (and (= (type |a#501#0#0|) DatatypeTypeType) (= (type |a#501#1#0|) DatatypeTypeType)) (= (_module.ins.dstMVN (|#_module.ins.MVN| |a#501#0#0| |a#501#1#0|)) |a#501#0#0|)) :qid |ARMdefsd.293:11| :skolemid |3818| :pattern ( (|#_module.ins.MVN| |a#501#0#0| |a#501#1#0|)) )))
(assert (forall ((|a#502#0#0| T@U) (|a#502#1#0| T@U) ) (!  (=> (and (= (type |a#502#0#0|) DatatypeTypeType) (= (type |a#502#1#0|) DatatypeTypeType)) (< (DtRank |a#502#0#0|) (DtRank (|#_module.ins.MVN| |a#502#0#0| |a#502#1#0|)))) :qid |ARMdefsd.293:11| :skolemid |3819| :pattern ( (|#_module.ins.MVN| |a#502#0#0| |a#502#1#0|)) )))
(assert (forall ((|a#503#0#0| T@U) (|a#503#1#0| T@U) ) (!  (=> (and (= (type |a#503#0#0|) DatatypeTypeType) (= (type |a#503#1#0|) DatatypeTypeType)) (= (_module.ins.srcMVN (|#_module.ins.MVN| |a#503#0#0| |a#503#1#0|)) |a#503#1#0|)) :qid |ARMdefsd.293:11| :skolemid |3820| :pattern ( (|#_module.ins.MVN| |a#503#0#0| |a#503#1#0|)) )))
(assert (forall ((|a#504#0#0| T@U) (|a#504#1#0| T@U) ) (!  (=> (and (= (type |a#504#0#0|) DatatypeTypeType) (= (type |a#504#1#0|) DatatypeTypeType)) (< (DtRank |a#504#1#0|) (DtRank (|#_module.ins.MVN| |a#504#0#0| |a#504#1#0|)))) :qid |ARMdefsd.293:11| :skolemid |3821| :pattern ( (|#_module.ins.MVN| |a#504#0#0| |a#504#1#0|)) )))
(assert (forall ((arg0@@450 T@U) (arg1@@199 T@U) (arg2@@135 T@U) ) (! (= (type (|#_module.ins.LDR| arg0@@450 arg1@@199 arg2@@135)) DatatypeTypeType) :qid |funType:#_module.ins.LDR| :pattern ( (|#_module.ins.LDR| arg0@@450 arg1@@199 arg2@@135)) )))
(assert (forall ((|a#505#0#0| T@U) (|a#505#1#0| T@U) (|a#505#2#0| T@U) ) (!  (=> (and (and (= (type |a#505#0#0|) DatatypeTypeType) (= (type |a#505#1#0|) DatatypeTypeType)) (= (type |a#505#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.LDR| |a#505#0#0| |a#505#1#0| |a#505#2#0|)) |##_module.ins.LDR|)) :qid |ARMdefsd.294:11| :skolemid |3822| :pattern ( (|#_module.ins.LDR| |a#505#0#0| |a#505#1#0| |a#505#2#0|)) )))
(assert (forall ((d@@190 T@U) ) (!  (=> (= (type d@@190) DatatypeTypeType) (and (=> (_module.ins.LDR_q d@@190) (= (DatatypeCtorId d@@190) |##_module.ins.LDR|)) (=> (= (DatatypeCtorId d@@190) |##_module.ins.LDR|) (_module.ins.LDR_q d@@190)))) :qid |unknown.0:0| :skolemid |3823| :pattern ( (_module.ins.LDR_q d@@190)) )))
(assert (forall ((d@@191 T@U) ) (!  (=> (and (= (type d@@191) DatatypeTypeType) (_module.ins.LDR_q d@@191)) (exists ((|a#506#0#0| T@U) (|a#506#1#0| T@U) (|a#506#2#0| T@U) ) (!  (and (and (and (= (type |a#506#0#0|) DatatypeTypeType) (= (type |a#506#1#0|) DatatypeTypeType)) (= (type |a#506#2#0|) DatatypeTypeType)) (= d@@191 (|#_module.ins.LDR| |a#506#0#0| |a#506#1#0| |a#506#2#0|))) :qid |ARMdefsd.294:11| :skolemid |3824| :no-pattern (type |a#506#0#0|) :no-pattern (type |a#506#1#0|) :no-pattern (type |a#506#2#0|) :no-pattern (U_2_int |a#506#0#0|) :no-pattern (U_2_bool |a#506#0#0|) :no-pattern (U_2_int |a#506#1#0|) :no-pattern (U_2_bool |a#506#1#0|) :no-pattern (U_2_int |a#506#2#0|) :no-pattern (U_2_bool |a#506#2#0|) ))) :qid |unknown.0:0| :skolemid |3825| :pattern ( (_module.ins.LDR_q d@@191)) )))
(assert (forall ((|a#507#0#0| T@U) (|a#507#1#0| T@U) (|a#507#2#0| T@U) ) (!  (=> (and (and (= (type |a#507#0#0|) DatatypeTypeType) (= (type |a#507#1#0|) DatatypeTypeType)) (= (type |a#507#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.LDR| |a#507#0#0| |a#507#1#0| |a#507#2#0|) Tclass._module.ins) (and (and ($Is |a#507#0#0| Tclass._module.operand) ($Is |a#507#1#0| Tclass._module.operand)) ($Is |a#507#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#507#0#0| Tclass._module.operand) ($Is |a#507#1#0| Tclass._module.operand)) ($Is |a#507#2#0| Tclass._module.operand)) ($Is (|#_module.ins.LDR| |a#507#0#0| |a#507#1#0| |a#507#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.294:11| :skolemid |3826| :pattern ( ($Is (|#_module.ins.LDR| |a#507#0#0| |a#507#1#0| |a#507#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#508#0#0| T@U) (|a#508#1#0| T@U) (|a#508#2#0| T@U) ($h@@81 T@U) ) (!  (=> (and (and (and (and (= (type |a#508#0#0|) DatatypeTypeType) (= (type |a#508#1#0|) DatatypeTypeType)) (= (type |a#508#2#0|) DatatypeTypeType)) (= (type $h@@81) (MapType1Type refType))) ($IsGoodHeap $h@@81)) (and (=> ($IsAlloc (|#_module.ins.LDR| |a#508#0#0| |a#508#1#0| |a#508#2#0|) Tclass._module.ins $h@@81) (and (and ($IsAlloc |a#508#0#0| Tclass._module.operand $h@@81) ($IsAlloc |a#508#1#0| Tclass._module.operand $h@@81)) ($IsAlloc |a#508#2#0| Tclass._module.operand $h@@81))) (=> (and (and ($IsAlloc |a#508#0#0| Tclass._module.operand $h@@81) ($IsAlloc |a#508#1#0| Tclass._module.operand $h@@81)) ($IsAlloc |a#508#2#0| Tclass._module.operand $h@@81)) ($IsAlloc (|#_module.ins.LDR| |a#508#0#0| |a#508#1#0| |a#508#2#0|) Tclass._module.ins $h@@81)))) :qid |ARMdefsd.294:11| :skolemid |3827| :pattern ( ($IsAlloc (|#_module.ins.LDR| |a#508#0#0| |a#508#1#0| |a#508#2#0|) Tclass._module.ins $h@@81)) )))
(assert (forall ((|a#509#0#0| T@U) (|a#509#1#0| T@U) (|a#509#2#0| T@U) ) (!  (=> (and (and (= (type |a#509#0#0|) DatatypeTypeType) (= (type |a#509#1#0|) DatatypeTypeType)) (= (type |a#509#2#0|) DatatypeTypeType)) (= (|#_module.ins.LDR| (Lit |a#509#0#0|) (Lit |a#509#1#0|) (Lit |a#509#2#0|)) (Lit (|#_module.ins.LDR| |a#509#0#0| |a#509#1#0| |a#509#2#0|)))) :qid |ARMdefsd.294:11| :skolemid |3828| :pattern ( (|#_module.ins.LDR| (Lit |a#509#0#0|) (Lit |a#509#1#0|) (Lit |a#509#2#0|))) )))
(assert (forall ((|a#510#0#0| T@U) (|a#510#1#0| T@U) (|a#510#2#0| T@U) ) (!  (=> (and (and (= (type |a#510#0#0|) DatatypeTypeType) (= (type |a#510#1#0|) DatatypeTypeType)) (= (type |a#510#2#0|) DatatypeTypeType)) (= (_module.ins.rdLDR (|#_module.ins.LDR| |a#510#0#0| |a#510#1#0| |a#510#2#0|)) |a#510#0#0|)) :qid |ARMdefsd.294:11| :skolemid |3829| :pattern ( (|#_module.ins.LDR| |a#510#0#0| |a#510#1#0| |a#510#2#0|)) )))
(assert (forall ((|a#511#0#0| T@U) (|a#511#1#0| T@U) (|a#511#2#0| T@U) ) (!  (=> (and (and (= (type |a#511#0#0|) DatatypeTypeType) (= (type |a#511#1#0|) DatatypeTypeType)) (= (type |a#511#2#0|) DatatypeTypeType)) (< (DtRank |a#511#0#0|) (DtRank (|#_module.ins.LDR| |a#511#0#0| |a#511#1#0| |a#511#2#0|)))) :qid |ARMdefsd.294:11| :skolemid |3830| :pattern ( (|#_module.ins.LDR| |a#511#0#0| |a#511#1#0| |a#511#2#0|)) )))
(assert (forall ((|a#512#0#0| T@U) (|a#512#1#0| T@U) (|a#512#2#0| T@U) ) (!  (=> (and (and (= (type |a#512#0#0|) DatatypeTypeType) (= (type |a#512#1#0|) DatatypeTypeType)) (= (type |a#512#2#0|) DatatypeTypeType)) (= (_module.ins.baseLDR (|#_module.ins.LDR| |a#512#0#0| |a#512#1#0| |a#512#2#0|)) |a#512#1#0|)) :qid |ARMdefsd.294:11| :skolemid |3831| :pattern ( (|#_module.ins.LDR| |a#512#0#0| |a#512#1#0| |a#512#2#0|)) )))
(assert (forall ((|a#513#0#0| T@U) (|a#513#1#0| T@U) (|a#513#2#0| T@U) ) (!  (=> (and (and (= (type |a#513#0#0|) DatatypeTypeType) (= (type |a#513#1#0|) DatatypeTypeType)) (= (type |a#513#2#0|) DatatypeTypeType)) (< (DtRank |a#513#1#0|) (DtRank (|#_module.ins.LDR| |a#513#0#0| |a#513#1#0| |a#513#2#0|)))) :qid |ARMdefsd.294:11| :skolemid |3832| :pattern ( (|#_module.ins.LDR| |a#513#0#0| |a#513#1#0| |a#513#2#0|)) )))
(assert (forall ((|a#514#0#0| T@U) (|a#514#1#0| T@U) (|a#514#2#0| T@U) ) (!  (=> (and (and (= (type |a#514#0#0|) DatatypeTypeType) (= (type |a#514#1#0|) DatatypeTypeType)) (= (type |a#514#2#0|) DatatypeTypeType)) (= (_module.ins.ofsLDR (|#_module.ins.LDR| |a#514#0#0| |a#514#1#0| |a#514#2#0|)) |a#514#2#0|)) :qid |ARMdefsd.294:11| :skolemid |3833| :pattern ( (|#_module.ins.LDR| |a#514#0#0| |a#514#1#0| |a#514#2#0|)) )))
(assert (forall ((|a#515#0#0| T@U) (|a#515#1#0| T@U) (|a#515#2#0| T@U) ) (!  (=> (and (and (= (type |a#515#0#0|) DatatypeTypeType) (= (type |a#515#1#0|) DatatypeTypeType)) (= (type |a#515#2#0|) DatatypeTypeType)) (< (DtRank |a#515#2#0|) (DtRank (|#_module.ins.LDR| |a#515#0#0| |a#515#1#0| |a#515#2#0|)))) :qid |ARMdefsd.294:11| :skolemid |3834| :pattern ( (|#_module.ins.LDR| |a#515#0#0| |a#515#1#0| |a#515#2#0|)) )))
(assert (forall ((arg0@@451 T@U) (arg1@@200 T@U) (arg2@@136 T@U) (arg3@@77 T@U) ) (! (= (type (|#_module.ins.LDR_global| arg0@@451 arg1@@200 arg2@@136 arg3@@77)) DatatypeTypeType) :qid |funType:#_module.ins.LDR_global| :pattern ( (|#_module.ins.LDR_global| arg0@@451 arg1@@200 arg2@@136 arg3@@77)) )))
(assert (forall ((|a#516#0#0| T@U) (|a#516#1#0| T@U) (|a#516#2#0| T@U) (|a#516#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#516#0#0|) DatatypeTypeType) (= (type |a#516#1#0|) (SeqType BoxType))) (= (type |a#516#2#0|) DatatypeTypeType)) (= (type |a#516#3#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.LDR_global| |a#516#0#0| |a#516#1#0| |a#516#2#0| |a#516#3#0|)) |##_module.ins.LDR_global|)) :qid |ARMdefsd.295:18| :skolemid |3835| :pattern ( (|#_module.ins.LDR_global| |a#516#0#0| |a#516#1#0| |a#516#2#0| |a#516#3#0|)) )))
(assert (forall ((d@@192 T@U) ) (!  (=> (= (type d@@192) DatatypeTypeType) (and (=> (_module.ins.LDR__global_q d@@192) (= (DatatypeCtorId d@@192) |##_module.ins.LDR_global|)) (=> (= (DatatypeCtorId d@@192) |##_module.ins.LDR_global|) (_module.ins.LDR__global_q d@@192)))) :qid |unknown.0:0| :skolemid |3836| :pattern ( (_module.ins.LDR__global_q d@@192)) )))
(assert (forall ((d@@193 T@U) ) (!  (=> (and (= (type d@@193) DatatypeTypeType) (_module.ins.LDR__global_q d@@193)) (exists ((|a#517#0#0| T@U) (|a#517#1#0| T@U) (|a#517#2#0| T@U) (|a#517#3#0| T@U) ) (!  (and (and (and (and (= (type |a#517#0#0|) DatatypeTypeType) (= (type |a#517#1#0|) (SeqType BoxType))) (= (type |a#517#2#0|) DatatypeTypeType)) (= (type |a#517#3#0|) DatatypeTypeType)) (= d@@193 (|#_module.ins.LDR_global| |a#517#0#0| |a#517#1#0| |a#517#2#0| |a#517#3#0|))) :qid |ARMdefsd.295:18| :skolemid |3837| :no-pattern (type |a#517#0#0|) :no-pattern (type |a#517#1#0|) :no-pattern (type |a#517#2#0|) :no-pattern (type |a#517#3#0|) :no-pattern (U_2_int |a#517#0#0|) :no-pattern (U_2_bool |a#517#0#0|) :no-pattern (U_2_int |a#517#1#0|) :no-pattern (U_2_bool |a#517#1#0|) :no-pattern (U_2_int |a#517#2#0|) :no-pattern (U_2_bool |a#517#2#0|) :no-pattern (U_2_int |a#517#3#0|) :no-pattern (U_2_bool |a#517#3#0|) ))) :qid |unknown.0:0| :skolemid |3838| :pattern ( (_module.ins.LDR__global_q d@@193)) )))
(assert (forall ((|a#518#0#0| T@U) (|a#518#1#0| T@U) (|a#518#2#0| T@U) (|a#518#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#518#0#0|) DatatypeTypeType) (= (type |a#518#1#0|) (SeqType BoxType))) (= (type |a#518#2#0|) DatatypeTypeType)) (= (type |a#518#3#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.LDR_global| |a#518#0#0| |a#518#1#0| |a#518#2#0| |a#518#3#0|) Tclass._module.ins) (and (and (and ($Is |a#518#0#0| Tclass._module.operand) ($Is |a#518#1#0| (TSeq TChar))) ($Is |a#518#2#0| Tclass._module.operand)) ($Is |a#518#3#0| Tclass._module.operand))) (=> (and (and (and ($Is |a#518#0#0| Tclass._module.operand) ($Is |a#518#1#0| (TSeq TChar))) ($Is |a#518#2#0| Tclass._module.operand)) ($Is |a#518#3#0| Tclass._module.operand)) ($Is (|#_module.ins.LDR_global| |a#518#0#0| |a#518#1#0| |a#518#2#0| |a#518#3#0|) Tclass._module.ins)))) :qid |ARMdefsd.295:18| :skolemid |3839| :pattern ( ($Is (|#_module.ins.LDR_global| |a#518#0#0| |a#518#1#0| |a#518#2#0| |a#518#3#0|) Tclass._module.ins)) )))
(assert (forall ((|a#519#0#0| T@U) (|a#519#1#0| T@U) (|a#519#2#0| T@U) (|a#519#3#0| T@U) ($h@@82 T@U) ) (!  (=> (and (and (and (and (and (= (type |a#519#0#0|) DatatypeTypeType) (= (type |a#519#1#0|) (SeqType BoxType))) (= (type |a#519#2#0|) DatatypeTypeType)) (= (type |a#519#3#0|) DatatypeTypeType)) (= (type $h@@82) (MapType1Type refType))) ($IsGoodHeap $h@@82)) (and (=> ($IsAlloc (|#_module.ins.LDR_global| |a#519#0#0| |a#519#1#0| |a#519#2#0| |a#519#3#0|) Tclass._module.ins $h@@82) (and (and (and ($IsAlloc |a#519#0#0| Tclass._module.operand $h@@82) ($IsAlloc |a#519#1#0| (TSeq TChar) $h@@82)) ($IsAlloc |a#519#2#0| Tclass._module.operand $h@@82)) ($IsAlloc |a#519#3#0| Tclass._module.operand $h@@82))) (=> (and (and (and ($IsAlloc |a#519#0#0| Tclass._module.operand $h@@82) ($IsAlloc |a#519#1#0| (TSeq TChar) $h@@82)) ($IsAlloc |a#519#2#0| Tclass._module.operand $h@@82)) ($IsAlloc |a#519#3#0| Tclass._module.operand $h@@82)) ($IsAlloc (|#_module.ins.LDR_global| |a#519#0#0| |a#519#1#0| |a#519#2#0| |a#519#3#0|) Tclass._module.ins $h@@82)))) :qid |ARMdefsd.295:18| :skolemid |3840| :pattern ( ($IsAlloc (|#_module.ins.LDR_global| |a#519#0#0| |a#519#1#0| |a#519#2#0| |a#519#3#0|) Tclass._module.ins $h@@82)) )))
(assert (forall ((|a#520#0#0| T@U) (|a#520#1#0| T@U) (|a#520#2#0| T@U) (|a#520#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#520#0#0|) DatatypeTypeType) (= (type |a#520#1#0|) (SeqType BoxType))) (= (type |a#520#2#0|) DatatypeTypeType)) (= (type |a#520#3#0|) DatatypeTypeType)) (= (|#_module.ins.LDR_global| (Lit |a#520#0#0|) (Lit |a#520#1#0|) (Lit |a#520#2#0|) (Lit |a#520#3#0|)) (Lit (|#_module.ins.LDR_global| |a#520#0#0| |a#520#1#0| |a#520#2#0| |a#520#3#0|)))) :qid |ARMdefsd.295:18| :skolemid |3841| :pattern ( (|#_module.ins.LDR_global| (Lit |a#520#0#0|) (Lit |a#520#1#0|) (Lit |a#520#2#0|) (Lit |a#520#3#0|))) )))
(assert (forall ((|a#521#0#0| T@U) (|a#521#1#0| T@U) (|a#521#2#0| T@U) (|a#521#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#521#0#0|) DatatypeTypeType) (= (type |a#521#1#0|) (SeqType BoxType))) (= (type |a#521#2#0|) DatatypeTypeType)) (= (type |a#521#3#0|) DatatypeTypeType)) (= (_module.ins.rdLDR__global (|#_module.ins.LDR_global| |a#521#0#0| |a#521#1#0| |a#521#2#0| |a#521#3#0|)) |a#521#0#0|)) :qid |ARMdefsd.295:18| :skolemid |3842| :pattern ( (|#_module.ins.LDR_global| |a#521#0#0| |a#521#1#0| |a#521#2#0| |a#521#3#0|)) )))
(assert (forall ((|a#522#0#0| T@U) (|a#522#1#0| T@U) (|a#522#2#0| T@U) (|a#522#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#522#0#0|) DatatypeTypeType) (= (type |a#522#1#0|) (SeqType BoxType))) (= (type |a#522#2#0|) DatatypeTypeType)) (= (type |a#522#3#0|) DatatypeTypeType)) (< (DtRank |a#522#0#0|) (DtRank (|#_module.ins.LDR_global| |a#522#0#0| |a#522#1#0| |a#522#2#0| |a#522#3#0|)))) :qid |ARMdefsd.295:18| :skolemid |3843| :pattern ( (|#_module.ins.LDR_global| |a#522#0#0| |a#522#1#0| |a#522#2#0| |a#522#3#0|)) )))
(assert (forall ((|a#523#0#0| T@U) (|a#523#1#0| T@U) (|a#523#2#0| T@U) (|a#523#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#523#0#0|) DatatypeTypeType) (= (type |a#523#1#0|) (SeqType BoxType))) (= (type |a#523#2#0|) DatatypeTypeType)) (= (type |a#523#3#0|) DatatypeTypeType)) (= (_module.ins.globalLDR (|#_module.ins.LDR_global| |a#523#0#0| |a#523#1#0| |a#523#2#0| |a#523#3#0|)) |a#523#1#0|)) :qid |ARMdefsd.295:18| :skolemid |3844| :pattern ( (|#_module.ins.LDR_global| |a#523#0#0| |a#523#1#0| |a#523#2#0| |a#523#3#0|)) )))
(assert (forall ((|a#524#0#0| T@U) (|a#524#1#0| T@U) (|a#524#2#0| T@U) (|a#524#3#0| T@U) (i@@37 Int) ) (!  (=> (and (and (and (and (= (type |a#524#0#0|) DatatypeTypeType) (= (type |a#524#1#0|) (SeqType BoxType))) (= (type |a#524#2#0|) DatatypeTypeType)) (= (type |a#524#3#0|) DatatypeTypeType)) (and (<= 0 i@@37) (< i@@37 (|Seq#Length| |a#524#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#524#1#0| i@@37))) (DtRank (|#_module.ins.LDR_global| |a#524#0#0| |a#524#1#0| |a#524#2#0| |a#524#3#0|)))) :qid |ARMdefsd.295:18| :skolemid |3845| :pattern ( (|Seq#Index| |a#524#1#0| i@@37) (|#_module.ins.LDR_global| |a#524#0#0| |a#524#1#0| |a#524#2#0| |a#524#3#0|)) )))
(assert (forall ((|a#525#0#0| T@U) (|a#525#1#0| T@U) (|a#525#2#0| T@U) (|a#525#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#525#0#0|) DatatypeTypeType) (= (type |a#525#1#0|) (SeqType BoxType))) (= (type |a#525#2#0|) DatatypeTypeType)) (= (type |a#525#3#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#525#1#0|) (DtRank (|#_module.ins.LDR_global| |a#525#0#0| |a#525#1#0| |a#525#2#0| |a#525#3#0|)))) :qid |ARMdefsd.295:18| :skolemid |3846| :pattern ( (|#_module.ins.LDR_global| |a#525#0#0| |a#525#1#0| |a#525#2#0| |a#525#3#0|)) )))
(assert (forall ((|a#526#0#0| T@U) (|a#526#1#0| T@U) (|a#526#2#0| T@U) (|a#526#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#526#0#0|) DatatypeTypeType) (= (type |a#526#1#0|) (SeqType BoxType))) (= (type |a#526#2#0|) DatatypeTypeType)) (= (type |a#526#3#0|) DatatypeTypeType)) (= (_module.ins.baseLDR__global (|#_module.ins.LDR_global| |a#526#0#0| |a#526#1#0| |a#526#2#0| |a#526#3#0|)) |a#526#2#0|)) :qid |ARMdefsd.295:18| :skolemid |3847| :pattern ( (|#_module.ins.LDR_global| |a#526#0#0| |a#526#1#0| |a#526#2#0| |a#526#3#0|)) )))
(assert (forall ((|a#527#0#0| T@U) (|a#527#1#0| T@U) (|a#527#2#0| T@U) (|a#527#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#527#0#0|) DatatypeTypeType) (= (type |a#527#1#0|) (SeqType BoxType))) (= (type |a#527#2#0|) DatatypeTypeType)) (= (type |a#527#3#0|) DatatypeTypeType)) (< (DtRank |a#527#2#0|) (DtRank (|#_module.ins.LDR_global| |a#527#0#0| |a#527#1#0| |a#527#2#0| |a#527#3#0|)))) :qid |ARMdefsd.295:18| :skolemid |3848| :pattern ( (|#_module.ins.LDR_global| |a#527#0#0| |a#527#1#0| |a#527#2#0| |a#527#3#0|)) )))
(assert (forall ((|a#528#0#0| T@U) (|a#528#1#0| T@U) (|a#528#2#0| T@U) (|a#528#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#528#0#0|) DatatypeTypeType) (= (type |a#528#1#0|) (SeqType BoxType))) (= (type |a#528#2#0|) DatatypeTypeType)) (= (type |a#528#3#0|) DatatypeTypeType)) (= (_module.ins.ofsLDR__global (|#_module.ins.LDR_global| |a#528#0#0| |a#528#1#0| |a#528#2#0| |a#528#3#0|)) |a#528#3#0|)) :qid |ARMdefsd.295:18| :skolemid |3849| :pattern ( (|#_module.ins.LDR_global| |a#528#0#0| |a#528#1#0| |a#528#2#0| |a#528#3#0|)) )))
(assert (forall ((|a#529#0#0| T@U) (|a#529#1#0| T@U) (|a#529#2#0| T@U) (|a#529#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#529#0#0|) DatatypeTypeType) (= (type |a#529#1#0|) (SeqType BoxType))) (= (type |a#529#2#0|) DatatypeTypeType)) (= (type |a#529#3#0|) DatatypeTypeType)) (< (DtRank |a#529#3#0|) (DtRank (|#_module.ins.LDR_global| |a#529#0#0| |a#529#1#0| |a#529#2#0| |a#529#3#0|)))) :qid |ARMdefsd.295:18| :skolemid |3850| :pattern ( (|#_module.ins.LDR_global| |a#529#0#0| |a#529#1#0| |a#529#2#0| |a#529#3#0|)) )))
(assert (forall ((arg0@@452 T@U) (arg1@@201 T@U) ) (! (= (type (|#_module.ins.LDR_reloc| arg0@@452 arg1@@201)) DatatypeTypeType) :qid |funType:#_module.ins.LDR_reloc| :pattern ( (|#_module.ins.LDR_reloc| arg0@@452 arg1@@201)) )))
(assert (forall ((|a#530#0#0| T@U) (|a#530#1#0| T@U) ) (!  (=> (and (= (type |a#530#0#0|) DatatypeTypeType) (= (type |a#530#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#_module.ins.LDR_reloc| |a#530#0#0| |a#530#1#0|)) |##_module.ins.LDR_reloc|)) :qid |ARMdefsd.297:17| :skolemid |3851| :pattern ( (|#_module.ins.LDR_reloc| |a#530#0#0| |a#530#1#0|)) )))
(assert (forall ((d@@194 T@U) ) (!  (=> (= (type d@@194) DatatypeTypeType) (and (=> (_module.ins.LDR__reloc_q d@@194) (= (DatatypeCtorId d@@194) |##_module.ins.LDR_reloc|)) (=> (= (DatatypeCtorId d@@194) |##_module.ins.LDR_reloc|) (_module.ins.LDR__reloc_q d@@194)))) :qid |unknown.0:0| :skolemid |3852| :pattern ( (_module.ins.LDR__reloc_q d@@194)) )))
(assert (forall ((d@@195 T@U) ) (!  (=> (and (= (type d@@195) DatatypeTypeType) (_module.ins.LDR__reloc_q d@@195)) (exists ((|a#531#0#0| T@U) (|a#531#1#0| T@U) ) (!  (and (and (= (type |a#531#0#0|) DatatypeTypeType) (= (type |a#531#1#0|) (SeqType BoxType))) (= d@@195 (|#_module.ins.LDR_reloc| |a#531#0#0| |a#531#1#0|))) :qid |ARMdefsd.297:17| :skolemid |3853| :no-pattern (type |a#531#0#0|) :no-pattern (type |a#531#1#0|) :no-pattern (U_2_int |a#531#0#0|) :no-pattern (U_2_bool |a#531#0#0|) :no-pattern (U_2_int |a#531#1#0|) :no-pattern (U_2_bool |a#531#1#0|) ))) :qid |unknown.0:0| :skolemid |3854| :pattern ( (_module.ins.LDR__reloc_q d@@195)) )))
(assert (forall ((|a#532#0#0| T@U) (|a#532#1#0| T@U) ) (!  (=> (and (= (type |a#532#0#0|) DatatypeTypeType) (= (type |a#532#1#0|) (SeqType BoxType))) (and (=> ($Is (|#_module.ins.LDR_reloc| |a#532#0#0| |a#532#1#0|) Tclass._module.ins) (and ($Is |a#532#0#0| Tclass._module.operand) ($Is |a#532#1#0| (TSeq TChar)))) (=> (and ($Is |a#532#0#0| Tclass._module.operand) ($Is |a#532#1#0| (TSeq TChar))) ($Is (|#_module.ins.LDR_reloc| |a#532#0#0| |a#532#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.297:17| :skolemid |3855| :pattern ( ($Is (|#_module.ins.LDR_reloc| |a#532#0#0| |a#532#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#533#0#0| T@U) (|a#533#1#0| T@U) ($h@@83 T@U) ) (!  (=> (and (and (and (= (type |a#533#0#0|) DatatypeTypeType) (= (type |a#533#1#0|) (SeqType BoxType))) (= (type $h@@83) (MapType1Type refType))) ($IsGoodHeap $h@@83)) (and (=> ($IsAlloc (|#_module.ins.LDR_reloc| |a#533#0#0| |a#533#1#0|) Tclass._module.ins $h@@83) (and ($IsAlloc |a#533#0#0| Tclass._module.operand $h@@83) ($IsAlloc |a#533#1#0| (TSeq TChar) $h@@83))) (=> (and ($IsAlloc |a#533#0#0| Tclass._module.operand $h@@83) ($IsAlloc |a#533#1#0| (TSeq TChar) $h@@83)) ($IsAlloc (|#_module.ins.LDR_reloc| |a#533#0#0| |a#533#1#0|) Tclass._module.ins $h@@83)))) :qid |ARMdefsd.297:17| :skolemid |3856| :pattern ( ($IsAlloc (|#_module.ins.LDR_reloc| |a#533#0#0| |a#533#1#0|) Tclass._module.ins $h@@83)) )))
(assert (forall ((|a#534#0#0| T@U) (|a#534#1#0| T@U) ) (!  (=> (and (= (type |a#534#0#0|) DatatypeTypeType) (= (type |a#534#1#0|) (SeqType BoxType))) (= (|#_module.ins.LDR_reloc| (Lit |a#534#0#0|) (Lit |a#534#1#0|)) (Lit (|#_module.ins.LDR_reloc| |a#534#0#0| |a#534#1#0|)))) :qid |ARMdefsd.297:17| :skolemid |3857| :pattern ( (|#_module.ins.LDR_reloc| (Lit |a#534#0#0|) (Lit |a#534#1#0|))) )))
(assert (forall ((|a#535#0#0| T@U) (|a#535#1#0| T@U) ) (!  (=> (and (= (type |a#535#0#0|) DatatypeTypeType) (= (type |a#535#1#0|) (SeqType BoxType))) (= (_module.ins.rdLDR__reloc (|#_module.ins.LDR_reloc| |a#535#0#0| |a#535#1#0|)) |a#535#0#0|)) :qid |ARMdefsd.297:17| :skolemid |3858| :pattern ( (|#_module.ins.LDR_reloc| |a#535#0#0| |a#535#1#0|)) )))
(assert (forall ((|a#536#0#0| T@U) (|a#536#1#0| T@U) ) (!  (=> (and (= (type |a#536#0#0|) DatatypeTypeType) (= (type |a#536#1#0|) (SeqType BoxType))) (< (DtRank |a#536#0#0|) (DtRank (|#_module.ins.LDR_reloc| |a#536#0#0| |a#536#1#0|)))) :qid |ARMdefsd.297:17| :skolemid |3859| :pattern ( (|#_module.ins.LDR_reloc| |a#536#0#0| |a#536#1#0|)) )))
(assert (forall ((|a#537#0#0| T@U) (|a#537#1#0| T@U) ) (!  (=> (and (= (type |a#537#0#0|) DatatypeTypeType) (= (type |a#537#1#0|) (SeqType BoxType))) (= (_module.ins.symLDR__reloc (|#_module.ins.LDR_reloc| |a#537#0#0| |a#537#1#0|)) |a#537#1#0|)) :qid |ARMdefsd.297:17| :skolemid |3860| :pattern ( (|#_module.ins.LDR_reloc| |a#537#0#0| |a#537#1#0|)) )))
(assert (forall ((|a#538#0#0| T@U) (|a#538#1#0| T@U) (i@@38 Int) ) (!  (=> (and (and (= (type |a#538#0#0|) DatatypeTypeType) (= (type |a#538#1#0|) (SeqType BoxType))) (and (<= 0 i@@38) (< i@@38 (|Seq#Length| |a#538#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#538#1#0| i@@38))) (DtRank (|#_module.ins.LDR_reloc| |a#538#0#0| |a#538#1#0|)))) :qid |ARMdefsd.297:17| :skolemid |3861| :pattern ( (|Seq#Index| |a#538#1#0| i@@38) (|#_module.ins.LDR_reloc| |a#538#0#0| |a#538#1#0|)) )))
(assert (forall ((|a#539#0#0| T@U) (|a#539#1#0| T@U) ) (!  (=> (and (= (type |a#539#0#0|) DatatypeTypeType) (= (type |a#539#1#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#539#1#0|) (DtRank (|#_module.ins.LDR_reloc| |a#539#0#0| |a#539#1#0|)))) :qid |ARMdefsd.297:17| :skolemid |3862| :pattern ( (|#_module.ins.LDR_reloc| |a#539#0#0| |a#539#1#0|)) )))
(assert (forall ((arg0@@453 T@U) (arg1@@202 T@U) (arg2@@137 T@U) ) (! (= (type (|#_module.ins.STR| arg0@@453 arg1@@202 arg2@@137)) DatatypeTypeType) :qid |funType:#_module.ins.STR| :pattern ( (|#_module.ins.STR| arg0@@453 arg1@@202 arg2@@137)) )))
(assert (forall ((|a#540#0#0| T@U) (|a#540#1#0| T@U) (|a#540#2#0| T@U) ) (!  (=> (and (and (= (type |a#540#0#0|) DatatypeTypeType) (= (type |a#540#1#0|) DatatypeTypeType)) (= (type |a#540#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.STR| |a#540#0#0| |a#540#1#0| |a#540#2#0|)) |##_module.ins.STR|)) :qid |ARMdefsd.298:11| :skolemid |3863| :pattern ( (|#_module.ins.STR| |a#540#0#0| |a#540#1#0| |a#540#2#0|)) )))
(assert (forall ((d@@196 T@U) ) (!  (=> (= (type d@@196) DatatypeTypeType) (and (=> (_module.ins.STR_q d@@196) (= (DatatypeCtorId d@@196) |##_module.ins.STR|)) (=> (= (DatatypeCtorId d@@196) |##_module.ins.STR|) (_module.ins.STR_q d@@196)))) :qid |unknown.0:0| :skolemid |3864| :pattern ( (_module.ins.STR_q d@@196)) )))
(assert (forall ((d@@197 T@U) ) (!  (=> (and (= (type d@@197) DatatypeTypeType) (_module.ins.STR_q d@@197)) (exists ((|a#541#0#0| T@U) (|a#541#1#0| T@U) (|a#541#2#0| T@U) ) (!  (and (and (and (= (type |a#541#0#0|) DatatypeTypeType) (= (type |a#541#1#0|) DatatypeTypeType)) (= (type |a#541#2#0|) DatatypeTypeType)) (= d@@197 (|#_module.ins.STR| |a#541#0#0| |a#541#1#0| |a#541#2#0|))) :qid |ARMdefsd.298:11| :skolemid |3865| :no-pattern (type |a#541#0#0|) :no-pattern (type |a#541#1#0|) :no-pattern (type |a#541#2#0|) :no-pattern (U_2_int |a#541#0#0|) :no-pattern (U_2_bool |a#541#0#0|) :no-pattern (U_2_int |a#541#1#0|) :no-pattern (U_2_bool |a#541#1#0|) :no-pattern (U_2_int |a#541#2#0|) :no-pattern (U_2_bool |a#541#2#0|) ))) :qid |unknown.0:0| :skolemid |3866| :pattern ( (_module.ins.STR_q d@@197)) )))
(assert (forall ((|a#542#0#0| T@U) (|a#542#1#0| T@U) (|a#542#2#0| T@U) ) (!  (=> (and (and (= (type |a#542#0#0|) DatatypeTypeType) (= (type |a#542#1#0|) DatatypeTypeType)) (= (type |a#542#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.STR| |a#542#0#0| |a#542#1#0| |a#542#2#0|) Tclass._module.ins) (and (and ($Is |a#542#0#0| Tclass._module.operand) ($Is |a#542#1#0| Tclass._module.operand)) ($Is |a#542#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#542#0#0| Tclass._module.operand) ($Is |a#542#1#0| Tclass._module.operand)) ($Is |a#542#2#0| Tclass._module.operand)) ($Is (|#_module.ins.STR| |a#542#0#0| |a#542#1#0| |a#542#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.298:11| :skolemid |3867| :pattern ( ($Is (|#_module.ins.STR| |a#542#0#0| |a#542#1#0| |a#542#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#543#0#0| T@U) (|a#543#1#0| T@U) (|a#543#2#0| T@U) ($h@@84 T@U) ) (!  (=> (and (and (and (and (= (type |a#543#0#0|) DatatypeTypeType) (= (type |a#543#1#0|) DatatypeTypeType)) (= (type |a#543#2#0|) DatatypeTypeType)) (= (type $h@@84) (MapType1Type refType))) ($IsGoodHeap $h@@84)) (and (=> ($IsAlloc (|#_module.ins.STR| |a#543#0#0| |a#543#1#0| |a#543#2#0|) Tclass._module.ins $h@@84) (and (and ($IsAlloc |a#543#0#0| Tclass._module.operand $h@@84) ($IsAlloc |a#543#1#0| Tclass._module.operand $h@@84)) ($IsAlloc |a#543#2#0| Tclass._module.operand $h@@84))) (=> (and (and ($IsAlloc |a#543#0#0| Tclass._module.operand $h@@84) ($IsAlloc |a#543#1#0| Tclass._module.operand $h@@84)) ($IsAlloc |a#543#2#0| Tclass._module.operand $h@@84)) ($IsAlloc (|#_module.ins.STR| |a#543#0#0| |a#543#1#0| |a#543#2#0|) Tclass._module.ins $h@@84)))) :qid |ARMdefsd.298:11| :skolemid |3868| :pattern ( ($IsAlloc (|#_module.ins.STR| |a#543#0#0| |a#543#1#0| |a#543#2#0|) Tclass._module.ins $h@@84)) )))
(assert (forall ((|a#544#0#0| T@U) (|a#544#1#0| T@U) (|a#544#2#0| T@U) ) (!  (=> (and (and (= (type |a#544#0#0|) DatatypeTypeType) (= (type |a#544#1#0|) DatatypeTypeType)) (= (type |a#544#2#0|) DatatypeTypeType)) (= (|#_module.ins.STR| (Lit |a#544#0#0|) (Lit |a#544#1#0|) (Lit |a#544#2#0|)) (Lit (|#_module.ins.STR| |a#544#0#0| |a#544#1#0| |a#544#2#0|)))) :qid |ARMdefsd.298:11| :skolemid |3869| :pattern ( (|#_module.ins.STR| (Lit |a#544#0#0|) (Lit |a#544#1#0|) (Lit |a#544#2#0|))) )))
(assert (forall ((|a#545#0#0| T@U) (|a#545#1#0| T@U) (|a#545#2#0| T@U) ) (!  (=> (and (and (= (type |a#545#0#0|) DatatypeTypeType) (= (type |a#545#1#0|) DatatypeTypeType)) (= (type |a#545#2#0|) DatatypeTypeType)) (= (_module.ins.rdSTR (|#_module.ins.STR| |a#545#0#0| |a#545#1#0| |a#545#2#0|)) |a#545#0#0|)) :qid |ARMdefsd.298:11| :skolemid |3870| :pattern ( (|#_module.ins.STR| |a#545#0#0| |a#545#1#0| |a#545#2#0|)) )))
(assert (forall ((|a#546#0#0| T@U) (|a#546#1#0| T@U) (|a#546#2#0| T@U) ) (!  (=> (and (and (= (type |a#546#0#0|) DatatypeTypeType) (= (type |a#546#1#0|) DatatypeTypeType)) (= (type |a#546#2#0|) DatatypeTypeType)) (< (DtRank |a#546#0#0|) (DtRank (|#_module.ins.STR| |a#546#0#0| |a#546#1#0| |a#546#2#0|)))) :qid |ARMdefsd.298:11| :skolemid |3871| :pattern ( (|#_module.ins.STR| |a#546#0#0| |a#546#1#0| |a#546#2#0|)) )))
(assert (forall ((|a#547#0#0| T@U) (|a#547#1#0| T@U) (|a#547#2#0| T@U) ) (!  (=> (and (and (= (type |a#547#0#0|) DatatypeTypeType) (= (type |a#547#1#0|) DatatypeTypeType)) (= (type |a#547#2#0|) DatatypeTypeType)) (= (_module.ins.baseSTR (|#_module.ins.STR| |a#547#0#0| |a#547#1#0| |a#547#2#0|)) |a#547#1#0|)) :qid |ARMdefsd.298:11| :skolemid |3872| :pattern ( (|#_module.ins.STR| |a#547#0#0| |a#547#1#0| |a#547#2#0|)) )))
(assert (forall ((|a#548#0#0| T@U) (|a#548#1#0| T@U) (|a#548#2#0| T@U) ) (!  (=> (and (and (= (type |a#548#0#0|) DatatypeTypeType) (= (type |a#548#1#0|) DatatypeTypeType)) (= (type |a#548#2#0|) DatatypeTypeType)) (< (DtRank |a#548#1#0|) (DtRank (|#_module.ins.STR| |a#548#0#0| |a#548#1#0| |a#548#2#0|)))) :qid |ARMdefsd.298:11| :skolemid |3873| :pattern ( (|#_module.ins.STR| |a#548#0#0| |a#548#1#0| |a#548#2#0|)) )))
(assert (forall ((|a#549#0#0| T@U) (|a#549#1#0| T@U) (|a#549#2#0| T@U) ) (!  (=> (and (and (= (type |a#549#0#0|) DatatypeTypeType) (= (type |a#549#1#0|) DatatypeTypeType)) (= (type |a#549#2#0|) DatatypeTypeType)) (= (_module.ins.ofsSTR (|#_module.ins.STR| |a#549#0#0| |a#549#1#0| |a#549#2#0|)) |a#549#2#0|)) :qid |ARMdefsd.298:11| :skolemid |3874| :pattern ( (|#_module.ins.STR| |a#549#0#0| |a#549#1#0| |a#549#2#0|)) )))
(assert (forall ((|a#550#0#0| T@U) (|a#550#1#0| T@U) (|a#550#2#0| T@U) ) (!  (=> (and (and (= (type |a#550#0#0|) DatatypeTypeType) (= (type |a#550#1#0|) DatatypeTypeType)) (= (type |a#550#2#0|) DatatypeTypeType)) (< (DtRank |a#550#2#0|) (DtRank (|#_module.ins.STR| |a#550#0#0| |a#550#1#0| |a#550#2#0|)))) :qid |ARMdefsd.298:11| :skolemid |3875| :pattern ( (|#_module.ins.STR| |a#550#0#0| |a#550#1#0| |a#550#2#0|)) )))
(assert (forall ((arg0@@454 T@U) (arg1@@203 T@U) (arg2@@138 T@U) (arg3@@78 T@U) ) (! (= (type (|#_module.ins.STR_global| arg0@@454 arg1@@203 arg2@@138 arg3@@78)) DatatypeTypeType) :qid |funType:#_module.ins.STR_global| :pattern ( (|#_module.ins.STR_global| arg0@@454 arg1@@203 arg2@@138 arg3@@78)) )))
(assert (forall ((|a#551#0#0| T@U) (|a#551#1#0| T@U) (|a#551#2#0| T@U) (|a#551#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#551#0#0|) DatatypeTypeType) (= (type |a#551#1#0|) (SeqType BoxType))) (= (type |a#551#2#0|) DatatypeTypeType)) (= (type |a#551#3#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.STR_global| |a#551#0#0| |a#551#1#0| |a#551#2#0| |a#551#3#0|)) |##_module.ins.STR_global|)) :qid |ARMdefsd.299:18| :skolemid |3876| :pattern ( (|#_module.ins.STR_global| |a#551#0#0| |a#551#1#0| |a#551#2#0| |a#551#3#0|)) )))
(assert (forall ((d@@198 T@U) ) (!  (=> (= (type d@@198) DatatypeTypeType) (and (=> (_module.ins.STR__global_q d@@198) (= (DatatypeCtorId d@@198) |##_module.ins.STR_global|)) (=> (= (DatatypeCtorId d@@198) |##_module.ins.STR_global|) (_module.ins.STR__global_q d@@198)))) :qid |unknown.0:0| :skolemid |3877| :pattern ( (_module.ins.STR__global_q d@@198)) )))
(assert (forall ((d@@199 T@U) ) (!  (=> (and (= (type d@@199) DatatypeTypeType) (_module.ins.STR__global_q d@@199)) (exists ((|a#552#0#0| T@U) (|a#552#1#0| T@U) (|a#552#2#0| T@U) (|a#552#3#0| T@U) ) (!  (and (and (and (and (= (type |a#552#0#0|) DatatypeTypeType) (= (type |a#552#1#0|) (SeqType BoxType))) (= (type |a#552#2#0|) DatatypeTypeType)) (= (type |a#552#3#0|) DatatypeTypeType)) (= d@@199 (|#_module.ins.STR_global| |a#552#0#0| |a#552#1#0| |a#552#2#0| |a#552#3#0|))) :qid |ARMdefsd.299:18| :skolemid |3878| :no-pattern (type |a#552#0#0|) :no-pattern (type |a#552#1#0|) :no-pattern (type |a#552#2#0|) :no-pattern (type |a#552#3#0|) :no-pattern (U_2_int |a#552#0#0|) :no-pattern (U_2_bool |a#552#0#0|) :no-pattern (U_2_int |a#552#1#0|) :no-pattern (U_2_bool |a#552#1#0|) :no-pattern (U_2_int |a#552#2#0|) :no-pattern (U_2_bool |a#552#2#0|) :no-pattern (U_2_int |a#552#3#0|) :no-pattern (U_2_bool |a#552#3#0|) ))) :qid |unknown.0:0| :skolemid |3879| :pattern ( (_module.ins.STR__global_q d@@199)) )))
(assert (forall ((|a#553#0#0| T@U) (|a#553#1#0| T@U) (|a#553#2#0| T@U) (|a#553#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#553#0#0|) DatatypeTypeType) (= (type |a#553#1#0|) (SeqType BoxType))) (= (type |a#553#2#0|) DatatypeTypeType)) (= (type |a#553#3#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.STR_global| |a#553#0#0| |a#553#1#0| |a#553#2#0| |a#553#3#0|) Tclass._module.ins) (and (and (and ($Is |a#553#0#0| Tclass._module.operand) ($Is |a#553#1#0| (TSeq TChar))) ($Is |a#553#2#0| Tclass._module.operand)) ($Is |a#553#3#0| Tclass._module.operand))) (=> (and (and (and ($Is |a#553#0#0| Tclass._module.operand) ($Is |a#553#1#0| (TSeq TChar))) ($Is |a#553#2#0| Tclass._module.operand)) ($Is |a#553#3#0| Tclass._module.operand)) ($Is (|#_module.ins.STR_global| |a#553#0#0| |a#553#1#0| |a#553#2#0| |a#553#3#0|) Tclass._module.ins)))) :qid |ARMdefsd.299:18| :skolemid |3880| :pattern ( ($Is (|#_module.ins.STR_global| |a#553#0#0| |a#553#1#0| |a#553#2#0| |a#553#3#0|) Tclass._module.ins)) )))
(assert (forall ((|a#554#0#0| T@U) (|a#554#1#0| T@U) (|a#554#2#0| T@U) (|a#554#3#0| T@U) ($h@@85 T@U) ) (!  (=> (and (and (and (and (and (= (type |a#554#0#0|) DatatypeTypeType) (= (type |a#554#1#0|) (SeqType BoxType))) (= (type |a#554#2#0|) DatatypeTypeType)) (= (type |a#554#3#0|) DatatypeTypeType)) (= (type $h@@85) (MapType1Type refType))) ($IsGoodHeap $h@@85)) (and (=> ($IsAlloc (|#_module.ins.STR_global| |a#554#0#0| |a#554#1#0| |a#554#2#0| |a#554#3#0|) Tclass._module.ins $h@@85) (and (and (and ($IsAlloc |a#554#0#0| Tclass._module.operand $h@@85) ($IsAlloc |a#554#1#0| (TSeq TChar) $h@@85)) ($IsAlloc |a#554#2#0| Tclass._module.operand $h@@85)) ($IsAlloc |a#554#3#0| Tclass._module.operand $h@@85))) (=> (and (and (and ($IsAlloc |a#554#0#0| Tclass._module.operand $h@@85) ($IsAlloc |a#554#1#0| (TSeq TChar) $h@@85)) ($IsAlloc |a#554#2#0| Tclass._module.operand $h@@85)) ($IsAlloc |a#554#3#0| Tclass._module.operand $h@@85)) ($IsAlloc (|#_module.ins.STR_global| |a#554#0#0| |a#554#1#0| |a#554#2#0| |a#554#3#0|) Tclass._module.ins $h@@85)))) :qid |ARMdefsd.299:18| :skolemid |3881| :pattern ( ($IsAlloc (|#_module.ins.STR_global| |a#554#0#0| |a#554#1#0| |a#554#2#0| |a#554#3#0|) Tclass._module.ins $h@@85)) )))
(assert (forall ((|a#555#0#0| T@U) (|a#555#1#0| T@U) (|a#555#2#0| T@U) (|a#555#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#555#0#0|) DatatypeTypeType) (= (type |a#555#1#0|) (SeqType BoxType))) (= (type |a#555#2#0|) DatatypeTypeType)) (= (type |a#555#3#0|) DatatypeTypeType)) (= (|#_module.ins.STR_global| (Lit |a#555#0#0|) (Lit |a#555#1#0|) (Lit |a#555#2#0|) (Lit |a#555#3#0|)) (Lit (|#_module.ins.STR_global| |a#555#0#0| |a#555#1#0| |a#555#2#0| |a#555#3#0|)))) :qid |ARMdefsd.299:18| :skolemid |3882| :pattern ( (|#_module.ins.STR_global| (Lit |a#555#0#0|) (Lit |a#555#1#0|) (Lit |a#555#2#0|) (Lit |a#555#3#0|))) )))
(assert (forall ((|a#556#0#0| T@U) (|a#556#1#0| T@U) (|a#556#2#0| T@U) (|a#556#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#556#0#0|) DatatypeTypeType) (= (type |a#556#1#0|) (SeqType BoxType))) (= (type |a#556#2#0|) DatatypeTypeType)) (= (type |a#556#3#0|) DatatypeTypeType)) (= (_module.ins.rdSTRR__global (|#_module.ins.STR_global| |a#556#0#0| |a#556#1#0| |a#556#2#0| |a#556#3#0|)) |a#556#0#0|)) :qid |ARMdefsd.299:18| :skolemid |3883| :pattern ( (|#_module.ins.STR_global| |a#556#0#0| |a#556#1#0| |a#556#2#0| |a#556#3#0|)) )))
(assert (forall ((|a#557#0#0| T@U) (|a#557#1#0| T@U) (|a#557#2#0| T@U) (|a#557#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#557#0#0|) DatatypeTypeType) (= (type |a#557#1#0|) (SeqType BoxType))) (= (type |a#557#2#0|) DatatypeTypeType)) (= (type |a#557#3#0|) DatatypeTypeType)) (< (DtRank |a#557#0#0|) (DtRank (|#_module.ins.STR_global| |a#557#0#0| |a#557#1#0| |a#557#2#0| |a#557#3#0|)))) :qid |ARMdefsd.299:18| :skolemid |3884| :pattern ( (|#_module.ins.STR_global| |a#557#0#0| |a#557#1#0| |a#557#2#0| |a#557#3#0|)) )))
(assert (forall ((|a#558#0#0| T@U) (|a#558#1#0| T@U) (|a#558#2#0| T@U) (|a#558#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#558#0#0|) DatatypeTypeType) (= (type |a#558#1#0|) (SeqType BoxType))) (= (type |a#558#2#0|) DatatypeTypeType)) (= (type |a#558#3#0|) DatatypeTypeType)) (= (_module.ins.globalSTR (|#_module.ins.STR_global| |a#558#0#0| |a#558#1#0| |a#558#2#0| |a#558#3#0|)) |a#558#1#0|)) :qid |ARMdefsd.299:18| :skolemid |3885| :pattern ( (|#_module.ins.STR_global| |a#558#0#0| |a#558#1#0| |a#558#2#0| |a#558#3#0|)) )))
(assert (forall ((|a#559#0#0| T@U) (|a#559#1#0| T@U) (|a#559#2#0| T@U) (|a#559#3#0| T@U) (i@@39 Int) ) (!  (=> (and (and (and (and (= (type |a#559#0#0|) DatatypeTypeType) (= (type |a#559#1#0|) (SeqType BoxType))) (= (type |a#559#2#0|) DatatypeTypeType)) (= (type |a#559#3#0|) DatatypeTypeType)) (and (<= 0 i@@39) (< i@@39 (|Seq#Length| |a#559#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#559#1#0| i@@39))) (DtRank (|#_module.ins.STR_global| |a#559#0#0| |a#559#1#0| |a#559#2#0| |a#559#3#0|)))) :qid |ARMdefsd.299:18| :skolemid |3886| :pattern ( (|Seq#Index| |a#559#1#0| i@@39) (|#_module.ins.STR_global| |a#559#0#0| |a#559#1#0| |a#559#2#0| |a#559#3#0|)) )))
(assert (forall ((|a#560#0#0| T@U) (|a#560#1#0| T@U) (|a#560#2#0| T@U) (|a#560#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#560#0#0|) DatatypeTypeType) (= (type |a#560#1#0|) (SeqType BoxType))) (= (type |a#560#2#0|) DatatypeTypeType)) (= (type |a#560#3#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#560#1#0|) (DtRank (|#_module.ins.STR_global| |a#560#0#0| |a#560#1#0| |a#560#2#0| |a#560#3#0|)))) :qid |ARMdefsd.299:18| :skolemid |3887| :pattern ( (|#_module.ins.STR_global| |a#560#0#0| |a#560#1#0| |a#560#2#0| |a#560#3#0|)) )))
(assert (forall ((|a#561#0#0| T@U) (|a#561#1#0| T@U) (|a#561#2#0| T@U) (|a#561#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#561#0#0|) DatatypeTypeType) (= (type |a#561#1#0|) (SeqType BoxType))) (= (type |a#561#2#0|) DatatypeTypeType)) (= (type |a#561#3#0|) DatatypeTypeType)) (= (_module.ins.baseSTR__global (|#_module.ins.STR_global| |a#561#0#0| |a#561#1#0| |a#561#2#0| |a#561#3#0|)) |a#561#2#0|)) :qid |ARMdefsd.299:18| :skolemid |3888| :pattern ( (|#_module.ins.STR_global| |a#561#0#0| |a#561#1#0| |a#561#2#0| |a#561#3#0|)) )))
(assert (forall ((|a#562#0#0| T@U) (|a#562#1#0| T@U) (|a#562#2#0| T@U) (|a#562#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#562#0#0|) DatatypeTypeType) (= (type |a#562#1#0|) (SeqType BoxType))) (= (type |a#562#2#0|) DatatypeTypeType)) (= (type |a#562#3#0|) DatatypeTypeType)) (< (DtRank |a#562#2#0|) (DtRank (|#_module.ins.STR_global| |a#562#0#0| |a#562#1#0| |a#562#2#0| |a#562#3#0|)))) :qid |ARMdefsd.299:18| :skolemid |3889| :pattern ( (|#_module.ins.STR_global| |a#562#0#0| |a#562#1#0| |a#562#2#0| |a#562#3#0|)) )))
(assert (forall ((|a#563#0#0| T@U) (|a#563#1#0| T@U) (|a#563#2#0| T@U) (|a#563#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#563#0#0|) DatatypeTypeType) (= (type |a#563#1#0|) (SeqType BoxType))) (= (type |a#563#2#0|) DatatypeTypeType)) (= (type |a#563#3#0|) DatatypeTypeType)) (= (_module.ins.ofsSTR__global (|#_module.ins.STR_global| |a#563#0#0| |a#563#1#0| |a#563#2#0| |a#563#3#0|)) |a#563#3#0|)) :qid |ARMdefsd.299:18| :skolemid |3890| :pattern ( (|#_module.ins.STR_global| |a#563#0#0| |a#563#1#0| |a#563#2#0| |a#563#3#0|)) )))
(assert (forall ((|a#564#0#0| T@U) (|a#564#1#0| T@U) (|a#564#2#0| T@U) (|a#564#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#564#0#0|) DatatypeTypeType) (= (type |a#564#1#0|) (SeqType BoxType))) (= (type |a#564#2#0|) DatatypeTypeType)) (= (type |a#564#3#0|) DatatypeTypeType)) (< (DtRank |a#564#3#0|) (DtRank (|#_module.ins.STR_global| |a#564#0#0| |a#564#1#0| |a#564#2#0| |a#564#3#0|)))) :qid |ARMdefsd.299:18| :skolemid |3891| :pattern ( (|#_module.ins.STR_global| |a#564#0#0| |a#564#1#0| |a#564#2#0| |a#564#3#0|)) )))
(assert (forall ((arg0@@455 T@U) (arg1@@204 T@U) ) (! (= (type (|#_module.ins.MRS| arg0@@455 arg1@@204)) DatatypeTypeType) :qid |funType:#_module.ins.MRS| :pattern ( (|#_module.ins.MRS| arg0@@455 arg1@@204)) )))
(assert (forall ((|a#565#0#0| T@U) (|a#565#1#0| T@U) ) (!  (=> (and (= (type |a#565#0#0|) DatatypeTypeType) (= (type |a#565#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.MRS| |a#565#0#0| |a#565#1#0|)) |##_module.ins.MRS|)) :qid |ARMdefsd.301:11| :skolemid |3892| :pattern ( (|#_module.ins.MRS| |a#565#0#0| |a#565#1#0|)) )))
(assert (forall ((d@@200 T@U) ) (!  (=> (= (type d@@200) DatatypeTypeType) (and (=> (_module.ins.MRS_q d@@200) (= (DatatypeCtorId d@@200) |##_module.ins.MRS|)) (=> (= (DatatypeCtorId d@@200) |##_module.ins.MRS|) (_module.ins.MRS_q d@@200)))) :qid |unknown.0:0| :skolemid |3893| :pattern ( (_module.ins.MRS_q d@@200)) )))
(assert (forall ((d@@201 T@U) ) (!  (=> (and (= (type d@@201) DatatypeTypeType) (_module.ins.MRS_q d@@201)) (exists ((|a#566#0#0| T@U) (|a#566#1#0| T@U) ) (!  (and (and (= (type |a#566#0#0|) DatatypeTypeType) (= (type |a#566#1#0|) DatatypeTypeType)) (= d@@201 (|#_module.ins.MRS| |a#566#0#0| |a#566#1#0|))) :qid |ARMdefsd.301:11| :skolemid |3894| :no-pattern (type |a#566#0#0|) :no-pattern (type |a#566#1#0|) :no-pattern (U_2_int |a#566#0#0|) :no-pattern (U_2_bool |a#566#0#0|) :no-pattern (U_2_int |a#566#1#0|) :no-pattern (U_2_bool |a#566#1#0|) ))) :qid |unknown.0:0| :skolemid |3895| :pattern ( (_module.ins.MRS_q d@@201)) )))
(assert (forall ((|a#567#0#0| T@U) (|a#567#1#0| T@U) ) (!  (=> (and (= (type |a#567#0#0|) DatatypeTypeType) (= (type |a#567#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.MRS| |a#567#0#0| |a#567#1#0|) Tclass._module.ins) (and ($Is |a#567#0#0| Tclass._module.operand) ($Is |a#567#1#0| Tclass._module.operand))) (=> (and ($Is |a#567#0#0| Tclass._module.operand) ($Is |a#567#1#0| Tclass._module.operand)) ($Is (|#_module.ins.MRS| |a#567#0#0| |a#567#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.301:11| :skolemid |3896| :pattern ( ($Is (|#_module.ins.MRS| |a#567#0#0| |a#567#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#568#0#0| T@U) (|a#568#1#0| T@U) ($h@@86 T@U) ) (!  (=> (and (and (and (= (type |a#568#0#0|) DatatypeTypeType) (= (type |a#568#1#0|) DatatypeTypeType)) (= (type $h@@86) (MapType1Type refType))) ($IsGoodHeap $h@@86)) (and (=> ($IsAlloc (|#_module.ins.MRS| |a#568#0#0| |a#568#1#0|) Tclass._module.ins $h@@86) (and ($IsAlloc |a#568#0#0| Tclass._module.operand $h@@86) ($IsAlloc |a#568#1#0| Tclass._module.operand $h@@86))) (=> (and ($IsAlloc |a#568#0#0| Tclass._module.operand $h@@86) ($IsAlloc |a#568#1#0| Tclass._module.operand $h@@86)) ($IsAlloc (|#_module.ins.MRS| |a#568#0#0| |a#568#1#0|) Tclass._module.ins $h@@86)))) :qid |ARMdefsd.301:11| :skolemid |3897| :pattern ( ($IsAlloc (|#_module.ins.MRS| |a#568#0#0| |a#568#1#0|) Tclass._module.ins $h@@86)) )))
(assert (forall ((|a#569#0#0| T@U) (|a#569#1#0| T@U) ) (!  (=> (and (= (type |a#569#0#0|) DatatypeTypeType) (= (type |a#569#1#0|) DatatypeTypeType)) (= (|#_module.ins.MRS| (Lit |a#569#0#0|) (Lit |a#569#1#0|)) (Lit (|#_module.ins.MRS| |a#569#0#0| |a#569#1#0|)))) :qid |ARMdefsd.301:11| :skolemid |3898| :pattern ( (|#_module.ins.MRS| (Lit |a#569#0#0|) (Lit |a#569#1#0|))) )))
(assert (forall ((|a#570#0#0| T@U) (|a#570#1#0| T@U) ) (!  (=> (and (= (type |a#570#0#0|) DatatypeTypeType) (= (type |a#570#1#0|) DatatypeTypeType)) (= (_module.ins.dstMRS (|#_module.ins.MRS| |a#570#0#0| |a#570#1#0|)) |a#570#0#0|)) :qid |ARMdefsd.301:11| :skolemid |3899| :pattern ( (|#_module.ins.MRS| |a#570#0#0| |a#570#1#0|)) )))
(assert (forall ((|a#571#0#0| T@U) (|a#571#1#0| T@U) ) (!  (=> (and (= (type |a#571#0#0|) DatatypeTypeType) (= (type |a#571#1#0|) DatatypeTypeType)) (< (DtRank |a#571#0#0|) (DtRank (|#_module.ins.MRS| |a#571#0#0| |a#571#1#0|)))) :qid |ARMdefsd.301:11| :skolemid |3900| :pattern ( (|#_module.ins.MRS| |a#571#0#0| |a#571#1#0|)) )))
(assert (forall ((|a#572#0#0| T@U) (|a#572#1#0| T@U) ) (!  (=> (and (= (type |a#572#0#0|) DatatypeTypeType) (= (type |a#572#1#0|) DatatypeTypeType)) (= (_module.ins.srcMRS (|#_module.ins.MRS| |a#572#0#0| |a#572#1#0|)) |a#572#1#0|)) :qid |ARMdefsd.301:11| :skolemid |3901| :pattern ( (|#_module.ins.MRS| |a#572#0#0| |a#572#1#0|)) )))
(assert (forall ((|a#573#0#0| T@U) (|a#573#1#0| T@U) ) (!  (=> (and (= (type |a#573#0#0|) DatatypeTypeType) (= (type |a#573#1#0|) DatatypeTypeType)) (< (DtRank |a#573#1#0|) (DtRank (|#_module.ins.MRS| |a#573#0#0| |a#573#1#0|)))) :qid |ARMdefsd.301:11| :skolemid |3902| :pattern ( (|#_module.ins.MRS| |a#573#0#0| |a#573#1#0|)) )))
(assert (forall ((arg0@@456 T@U) (arg1@@205 T@U) ) (! (= (type (|#_module.ins.MSR| arg0@@456 arg1@@205)) DatatypeTypeType) :qid |funType:#_module.ins.MSR| :pattern ( (|#_module.ins.MSR| arg0@@456 arg1@@205)) )))
(assert (forall ((|a#574#0#0| T@U) (|a#574#1#0| T@U) ) (!  (=> (and (= (type |a#574#0#0|) DatatypeTypeType) (= (type |a#574#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.MSR| |a#574#0#0| |a#574#1#0|)) |##_module.ins.MSR|)) :qid |ARMdefsd.302:11| :skolemid |3903| :pattern ( (|#_module.ins.MSR| |a#574#0#0| |a#574#1#0|)) )))
(assert (forall ((d@@202 T@U) ) (!  (=> (= (type d@@202) DatatypeTypeType) (and (=> (_module.ins.MSR_q d@@202) (= (DatatypeCtorId d@@202) |##_module.ins.MSR|)) (=> (= (DatatypeCtorId d@@202) |##_module.ins.MSR|) (_module.ins.MSR_q d@@202)))) :qid |unknown.0:0| :skolemid |3904| :pattern ( (_module.ins.MSR_q d@@202)) )))
(assert (forall ((d@@203 T@U) ) (!  (=> (and (= (type d@@203) DatatypeTypeType) (_module.ins.MSR_q d@@203)) (exists ((|a#575#0#0| T@U) (|a#575#1#0| T@U) ) (!  (and (and (= (type |a#575#0#0|) DatatypeTypeType) (= (type |a#575#1#0|) DatatypeTypeType)) (= d@@203 (|#_module.ins.MSR| |a#575#0#0| |a#575#1#0|))) :qid |ARMdefsd.302:11| :skolemid |3905| :no-pattern (type |a#575#0#0|) :no-pattern (type |a#575#1#0|) :no-pattern (U_2_int |a#575#0#0|) :no-pattern (U_2_bool |a#575#0#0|) :no-pattern (U_2_int |a#575#1#0|) :no-pattern (U_2_bool |a#575#1#0|) ))) :qid |unknown.0:0| :skolemid |3906| :pattern ( (_module.ins.MSR_q d@@203)) )))
(assert (forall ((|a#576#0#0| T@U) (|a#576#1#0| T@U) ) (!  (=> (and (= (type |a#576#0#0|) DatatypeTypeType) (= (type |a#576#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.MSR| |a#576#0#0| |a#576#1#0|) Tclass._module.ins) (and ($Is |a#576#0#0| Tclass._module.operand) ($Is |a#576#1#0| Tclass._module.operand))) (=> (and ($Is |a#576#0#0| Tclass._module.operand) ($Is |a#576#1#0| Tclass._module.operand)) ($Is (|#_module.ins.MSR| |a#576#0#0| |a#576#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.302:11| :skolemid |3907| :pattern ( ($Is (|#_module.ins.MSR| |a#576#0#0| |a#576#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#577#0#0| T@U) (|a#577#1#0| T@U) ($h@@87 T@U) ) (!  (=> (and (and (and (= (type |a#577#0#0|) DatatypeTypeType) (= (type |a#577#1#0|) DatatypeTypeType)) (= (type $h@@87) (MapType1Type refType))) ($IsGoodHeap $h@@87)) (and (=> ($IsAlloc (|#_module.ins.MSR| |a#577#0#0| |a#577#1#0|) Tclass._module.ins $h@@87) (and ($IsAlloc |a#577#0#0| Tclass._module.operand $h@@87) ($IsAlloc |a#577#1#0| Tclass._module.operand $h@@87))) (=> (and ($IsAlloc |a#577#0#0| Tclass._module.operand $h@@87) ($IsAlloc |a#577#1#0| Tclass._module.operand $h@@87)) ($IsAlloc (|#_module.ins.MSR| |a#577#0#0| |a#577#1#0|) Tclass._module.ins $h@@87)))) :qid |ARMdefsd.302:11| :skolemid |3908| :pattern ( ($IsAlloc (|#_module.ins.MSR| |a#577#0#0| |a#577#1#0|) Tclass._module.ins $h@@87)) )))
(assert (forall ((|a#578#0#0| T@U) (|a#578#1#0| T@U) ) (!  (=> (and (= (type |a#578#0#0|) DatatypeTypeType) (= (type |a#578#1#0|) DatatypeTypeType)) (= (|#_module.ins.MSR| (Lit |a#578#0#0|) (Lit |a#578#1#0|)) (Lit (|#_module.ins.MSR| |a#578#0#0| |a#578#1#0|)))) :qid |ARMdefsd.302:11| :skolemid |3909| :pattern ( (|#_module.ins.MSR| (Lit |a#578#0#0|) (Lit |a#578#1#0|))) )))
(assert (forall ((|a#579#0#0| T@U) (|a#579#1#0| T@U) ) (!  (=> (and (= (type |a#579#0#0|) DatatypeTypeType) (= (type |a#579#1#0|) DatatypeTypeType)) (= (_module.ins.dstMSR (|#_module.ins.MSR| |a#579#0#0| |a#579#1#0|)) |a#579#0#0|)) :qid |ARMdefsd.302:11| :skolemid |3910| :pattern ( (|#_module.ins.MSR| |a#579#0#0| |a#579#1#0|)) )))
(assert (forall ((|a#580#0#0| T@U) (|a#580#1#0| T@U) ) (!  (=> (and (= (type |a#580#0#0|) DatatypeTypeType) (= (type |a#580#1#0|) DatatypeTypeType)) (< (DtRank |a#580#0#0|) (DtRank (|#_module.ins.MSR| |a#580#0#0| |a#580#1#0|)))) :qid |ARMdefsd.302:11| :skolemid |3911| :pattern ( (|#_module.ins.MSR| |a#580#0#0| |a#580#1#0|)) )))
(assert (forall ((|a#581#0#0| T@U) (|a#581#1#0| T@U) ) (!  (=> (and (= (type |a#581#0#0|) DatatypeTypeType) (= (type |a#581#1#0|) DatatypeTypeType)) (= (_module.ins.srcMSR (|#_module.ins.MSR| |a#581#0#0| |a#581#1#0|)) |a#581#1#0|)) :qid |ARMdefsd.302:11| :skolemid |3912| :pattern ( (|#_module.ins.MSR| |a#581#0#0| |a#581#1#0|)) )))
(assert (forall ((|a#582#0#0| T@U) (|a#582#1#0| T@U) ) (!  (=> (and (= (type |a#582#0#0|) DatatypeTypeType) (= (type |a#582#1#0|) DatatypeTypeType)) (< (DtRank |a#582#1#0|) (DtRank (|#_module.ins.MSR| |a#582#0#0| |a#582#1#0|)))) :qid |ARMdefsd.302:11| :skolemid |3913| :pattern ( (|#_module.ins.MSR| |a#582#0#0| |a#582#1#0|)) )))
(assert (forall ((arg0@@457 T@U) (arg1@@206 T@U) ) (! (= (type (|#_module.ins.MRC| arg0@@457 arg1@@206)) DatatypeTypeType) :qid |funType:#_module.ins.MRC| :pattern ( (|#_module.ins.MRC| arg0@@457 arg1@@206)) )))
(assert (forall ((|a#583#0#0| T@U) (|a#583#1#0| T@U) ) (!  (=> (and (= (type |a#583#0#0|) DatatypeTypeType) (= (type |a#583#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.MRC| |a#583#0#0| |a#583#1#0|)) |##_module.ins.MRC|)) :qid |ARMdefsd.305:11| :skolemid |3914| :pattern ( (|#_module.ins.MRC| |a#583#0#0| |a#583#1#0|)) )))
(assert (forall ((d@@204 T@U) ) (!  (=> (= (type d@@204) DatatypeTypeType) (and (=> (_module.ins.MRC_q d@@204) (= (DatatypeCtorId d@@204) |##_module.ins.MRC|)) (=> (= (DatatypeCtorId d@@204) |##_module.ins.MRC|) (_module.ins.MRC_q d@@204)))) :qid |unknown.0:0| :skolemid |3915| :pattern ( (_module.ins.MRC_q d@@204)) )))
(assert (forall ((d@@205 T@U) ) (!  (=> (and (= (type d@@205) DatatypeTypeType) (_module.ins.MRC_q d@@205)) (exists ((|a#584#0#0| T@U) (|a#584#1#0| T@U) ) (!  (and (and (= (type |a#584#0#0|) DatatypeTypeType) (= (type |a#584#1#0|) DatatypeTypeType)) (= d@@205 (|#_module.ins.MRC| |a#584#0#0| |a#584#1#0|))) :qid |ARMdefsd.305:11| :skolemid |3916| :no-pattern (type |a#584#0#0|) :no-pattern (type |a#584#1#0|) :no-pattern (U_2_int |a#584#0#0|) :no-pattern (U_2_bool |a#584#0#0|) :no-pattern (U_2_int |a#584#1#0|) :no-pattern (U_2_bool |a#584#1#0|) ))) :qid |unknown.0:0| :skolemid |3917| :pattern ( (_module.ins.MRC_q d@@205)) )))
(assert (forall ((|a#585#0#0| T@U) (|a#585#1#0| T@U) ) (!  (=> (and (= (type |a#585#0#0|) DatatypeTypeType) (= (type |a#585#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.MRC| |a#585#0#0| |a#585#1#0|) Tclass._module.ins) (and ($Is |a#585#0#0| Tclass._module.operand) ($Is |a#585#1#0| Tclass._module.operand))) (=> (and ($Is |a#585#0#0| Tclass._module.operand) ($Is |a#585#1#0| Tclass._module.operand)) ($Is (|#_module.ins.MRC| |a#585#0#0| |a#585#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.305:11| :skolemid |3918| :pattern ( ($Is (|#_module.ins.MRC| |a#585#0#0| |a#585#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#586#0#0| T@U) (|a#586#1#0| T@U) ($h@@88 T@U) ) (!  (=> (and (and (and (= (type |a#586#0#0|) DatatypeTypeType) (= (type |a#586#1#0|) DatatypeTypeType)) (= (type $h@@88) (MapType1Type refType))) ($IsGoodHeap $h@@88)) (and (=> ($IsAlloc (|#_module.ins.MRC| |a#586#0#0| |a#586#1#0|) Tclass._module.ins $h@@88) (and ($IsAlloc |a#586#0#0| Tclass._module.operand $h@@88) ($IsAlloc |a#586#1#0| Tclass._module.operand $h@@88))) (=> (and ($IsAlloc |a#586#0#0| Tclass._module.operand $h@@88) ($IsAlloc |a#586#1#0| Tclass._module.operand $h@@88)) ($IsAlloc (|#_module.ins.MRC| |a#586#0#0| |a#586#1#0|) Tclass._module.ins $h@@88)))) :qid |ARMdefsd.305:11| :skolemid |3919| :pattern ( ($IsAlloc (|#_module.ins.MRC| |a#586#0#0| |a#586#1#0|) Tclass._module.ins $h@@88)) )))
(assert (forall ((|a#587#0#0| T@U) (|a#587#1#0| T@U) ) (!  (=> (and (= (type |a#587#0#0|) DatatypeTypeType) (= (type |a#587#1#0|) DatatypeTypeType)) (= (|#_module.ins.MRC| (Lit |a#587#0#0|) (Lit |a#587#1#0|)) (Lit (|#_module.ins.MRC| |a#587#0#0| |a#587#1#0|)))) :qid |ARMdefsd.305:11| :skolemid |3920| :pattern ( (|#_module.ins.MRC| (Lit |a#587#0#0|) (Lit |a#587#1#0|))) )))
(assert (forall ((|a#588#0#0| T@U) (|a#588#1#0| T@U) ) (!  (=> (and (= (type |a#588#0#0|) DatatypeTypeType) (= (type |a#588#1#0|) DatatypeTypeType)) (= (_module.ins.dstMRC (|#_module.ins.MRC| |a#588#0#0| |a#588#1#0|)) |a#588#0#0|)) :qid |ARMdefsd.305:11| :skolemid |3921| :pattern ( (|#_module.ins.MRC| |a#588#0#0| |a#588#1#0|)) )))
(assert (forall ((|a#589#0#0| T@U) (|a#589#1#0| T@U) ) (!  (=> (and (= (type |a#589#0#0|) DatatypeTypeType) (= (type |a#589#1#0|) DatatypeTypeType)) (< (DtRank |a#589#0#0|) (DtRank (|#_module.ins.MRC| |a#589#0#0| |a#589#1#0|)))) :qid |ARMdefsd.305:11| :skolemid |3922| :pattern ( (|#_module.ins.MRC| |a#589#0#0| |a#589#1#0|)) )))
(assert (forall ((|a#590#0#0| T@U) (|a#590#1#0| T@U) ) (!  (=> (and (= (type |a#590#0#0|) DatatypeTypeType) (= (type |a#590#1#0|) DatatypeTypeType)) (= (_module.ins.srcMRC (|#_module.ins.MRC| |a#590#0#0| |a#590#1#0|)) |a#590#1#0|)) :qid |ARMdefsd.305:11| :skolemid |3923| :pattern ( (|#_module.ins.MRC| |a#590#0#0| |a#590#1#0|)) )))
(assert (forall ((|a#591#0#0| T@U) (|a#591#1#0| T@U) ) (!  (=> (and (= (type |a#591#0#0|) DatatypeTypeType) (= (type |a#591#1#0|) DatatypeTypeType)) (< (DtRank |a#591#1#0|) (DtRank (|#_module.ins.MRC| |a#591#0#0| |a#591#1#0|)))) :qid |ARMdefsd.305:11| :skolemid |3924| :pattern ( (|#_module.ins.MRC| |a#591#0#0| |a#591#1#0|)) )))
(assert (forall ((arg0@@458 T@U) (arg1@@207 T@U) ) (! (= (type (|#_module.ins.MCR| arg0@@458 arg1@@207)) DatatypeTypeType) :qid |funType:#_module.ins.MCR| :pattern ( (|#_module.ins.MCR| arg0@@458 arg1@@207)) )))
(assert (forall ((|a#592#0#0| T@U) (|a#592#1#0| T@U) ) (!  (=> (and (= (type |a#592#0#0|) DatatypeTypeType) (= (type |a#592#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.MCR| |a#592#0#0| |a#592#1#0|)) |##_module.ins.MCR|)) :qid |ARMdefsd.306:11| :skolemid |3925| :pattern ( (|#_module.ins.MCR| |a#592#0#0| |a#592#1#0|)) )))
(assert (forall ((d@@206 T@U) ) (!  (=> (= (type d@@206) DatatypeTypeType) (and (=> (_module.ins.MCR_q d@@206) (= (DatatypeCtorId d@@206) |##_module.ins.MCR|)) (=> (= (DatatypeCtorId d@@206) |##_module.ins.MCR|) (_module.ins.MCR_q d@@206)))) :qid |unknown.0:0| :skolemid |3926| :pattern ( (_module.ins.MCR_q d@@206)) )))
(assert (forall ((d@@207 T@U) ) (!  (=> (and (= (type d@@207) DatatypeTypeType) (_module.ins.MCR_q d@@207)) (exists ((|a#593#0#0| T@U) (|a#593#1#0| T@U) ) (!  (and (and (= (type |a#593#0#0|) DatatypeTypeType) (= (type |a#593#1#0|) DatatypeTypeType)) (= d@@207 (|#_module.ins.MCR| |a#593#0#0| |a#593#1#0|))) :qid |ARMdefsd.306:11| :skolemid |3927| :no-pattern (type |a#593#0#0|) :no-pattern (type |a#593#1#0|) :no-pattern (U_2_int |a#593#0#0|) :no-pattern (U_2_bool |a#593#0#0|) :no-pattern (U_2_int |a#593#1#0|) :no-pattern (U_2_bool |a#593#1#0|) ))) :qid |unknown.0:0| :skolemid |3928| :pattern ( (_module.ins.MCR_q d@@207)) )))
(assert (forall ((|a#594#0#0| T@U) (|a#594#1#0| T@U) ) (!  (=> (and (= (type |a#594#0#0|) DatatypeTypeType) (= (type |a#594#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.MCR| |a#594#0#0| |a#594#1#0|) Tclass._module.ins) (and ($Is |a#594#0#0| Tclass._module.operand) ($Is |a#594#1#0| Tclass._module.operand))) (=> (and ($Is |a#594#0#0| Tclass._module.operand) ($Is |a#594#1#0| Tclass._module.operand)) ($Is (|#_module.ins.MCR| |a#594#0#0| |a#594#1#0|) Tclass._module.ins)))) :qid |ARMdefsd.306:11| :skolemid |3929| :pattern ( ($Is (|#_module.ins.MCR| |a#594#0#0| |a#594#1#0|) Tclass._module.ins)) )))
(assert (forall ((|a#595#0#0| T@U) (|a#595#1#0| T@U) ($h@@89 T@U) ) (!  (=> (and (and (and (= (type |a#595#0#0|) DatatypeTypeType) (= (type |a#595#1#0|) DatatypeTypeType)) (= (type $h@@89) (MapType1Type refType))) ($IsGoodHeap $h@@89)) (and (=> ($IsAlloc (|#_module.ins.MCR| |a#595#0#0| |a#595#1#0|) Tclass._module.ins $h@@89) (and ($IsAlloc |a#595#0#0| Tclass._module.operand $h@@89) ($IsAlloc |a#595#1#0| Tclass._module.operand $h@@89))) (=> (and ($IsAlloc |a#595#0#0| Tclass._module.operand $h@@89) ($IsAlloc |a#595#1#0| Tclass._module.operand $h@@89)) ($IsAlloc (|#_module.ins.MCR| |a#595#0#0| |a#595#1#0|) Tclass._module.ins $h@@89)))) :qid |ARMdefsd.306:11| :skolemid |3930| :pattern ( ($IsAlloc (|#_module.ins.MCR| |a#595#0#0| |a#595#1#0|) Tclass._module.ins $h@@89)) )))
(assert (forall ((|a#596#0#0| T@U) (|a#596#1#0| T@U) ) (!  (=> (and (= (type |a#596#0#0|) DatatypeTypeType) (= (type |a#596#1#0|) DatatypeTypeType)) (= (|#_module.ins.MCR| (Lit |a#596#0#0|) (Lit |a#596#1#0|)) (Lit (|#_module.ins.MCR| |a#596#0#0| |a#596#1#0|)))) :qid |ARMdefsd.306:11| :skolemid |3931| :pattern ( (|#_module.ins.MCR| (Lit |a#596#0#0|) (Lit |a#596#1#0|))) )))
(assert (forall ((|a#597#0#0| T@U) (|a#597#1#0| T@U) ) (!  (=> (and (= (type |a#597#0#0|) DatatypeTypeType) (= (type |a#597#1#0|) DatatypeTypeType)) (= (_module.ins.dstMCR (|#_module.ins.MCR| |a#597#0#0| |a#597#1#0|)) |a#597#0#0|)) :qid |ARMdefsd.306:11| :skolemid |3932| :pattern ( (|#_module.ins.MCR| |a#597#0#0| |a#597#1#0|)) )))
(assert (forall ((|a#598#0#0| T@U) (|a#598#1#0| T@U) ) (!  (=> (and (= (type |a#598#0#0|) DatatypeTypeType) (= (type |a#598#1#0|) DatatypeTypeType)) (< (DtRank |a#598#0#0|) (DtRank (|#_module.ins.MCR| |a#598#0#0| |a#598#1#0|)))) :qid |ARMdefsd.306:11| :skolemid |3933| :pattern ( (|#_module.ins.MCR| |a#598#0#0| |a#598#1#0|)) )))
(assert (forall ((|a#599#0#0| T@U) (|a#599#1#0| T@U) ) (!  (=> (and (= (type |a#599#0#0|) DatatypeTypeType) (= (type |a#599#1#0|) DatatypeTypeType)) (= (_module.ins.srcMCR (|#_module.ins.MCR| |a#599#0#0| |a#599#1#0|)) |a#599#1#0|)) :qid |ARMdefsd.306:11| :skolemid |3934| :pattern ( (|#_module.ins.MCR| |a#599#0#0| |a#599#1#0|)) )))
(assert (forall ((|a#600#0#0| T@U) (|a#600#1#0| T@U) ) (!  (=> (and (= (type |a#600#0#0|) DatatypeTypeType) (= (type |a#600#1#0|) DatatypeTypeType)) (< (DtRank |a#600#1#0|) (DtRank (|#_module.ins.MCR| |a#600#0#0| |a#600#1#0|)))) :qid |ARMdefsd.306:11| :skolemid |3935| :pattern ( (|#_module.ins.MCR| |a#600#0#0| |a#600#1#0|)) )))
(assert (forall ((arg0@@459 T@U) ) (! (= (type (|#_module.ins.CPSID_IAF| arg0@@459)) DatatypeTypeType) :qid |funType:#_module.ins.CPSID_IAF| :pattern ( (|#_module.ins.CPSID_IAF| arg0@@459)) )))
(assert (forall ((|a#601#0#0| T@U) ) (!  (=> (= (type |a#601#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.ins.CPSID_IAF| |a#601#0#0|)) |##_module.ins.CPSID_IAF|)) :qid |ARMdefsd.307:17| :skolemid |3936| :pattern ( (|#_module.ins.CPSID_IAF| |a#601#0#0|)) )))
(assert (forall ((d@@208 T@U) ) (!  (=> (= (type d@@208) DatatypeTypeType) (and (=> (_module.ins.CPSID__IAF_q d@@208) (= (DatatypeCtorId d@@208) |##_module.ins.CPSID_IAF|)) (=> (= (DatatypeCtorId d@@208) |##_module.ins.CPSID_IAF|) (_module.ins.CPSID__IAF_q d@@208)))) :qid |unknown.0:0| :skolemid |3937| :pattern ( (_module.ins.CPSID__IAF_q d@@208)) )))
(assert (forall ((d@@209 T@U) ) (!  (=> (and (= (type d@@209) DatatypeTypeType) (_module.ins.CPSID__IAF_q d@@209)) (exists ((|a#602#0#0| T@U) ) (!  (and (= (type |a#602#0#0|) DatatypeTypeType) (= d@@209 (|#_module.ins.CPSID_IAF| |a#602#0#0|))) :qid |ARMdefsd.307:17| :skolemid |3938| :no-pattern (type |a#602#0#0|) :no-pattern (U_2_int |a#602#0#0|) :no-pattern (U_2_bool |a#602#0#0|) ))) :qid |unknown.0:0| :skolemid |3939| :pattern ( (_module.ins.CPSID__IAF_q d@@209)) )))
(assert (forall ((|a#603#0#0| T@U) ) (!  (=> (= (type |a#603#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.ins.CPSID_IAF| |a#603#0#0|) Tclass._module.ins) ($Is |a#603#0#0| Tclass._module.operand)) (=> ($Is |a#603#0#0| Tclass._module.operand) ($Is (|#_module.ins.CPSID_IAF| |a#603#0#0|) Tclass._module.ins)))) :qid |ARMdefsd.307:17| :skolemid |3940| :pattern ( ($Is (|#_module.ins.CPSID_IAF| |a#603#0#0|) Tclass._module.ins)) )))
(assert (forall ((|a#604#0#0| T@U) ($h@@90 T@U) ) (!  (=> (and (and (= (type |a#604#0#0|) DatatypeTypeType) (= (type $h@@90) (MapType1Type refType))) ($IsGoodHeap $h@@90)) (and (=> ($IsAlloc (|#_module.ins.CPSID_IAF| |a#604#0#0|) Tclass._module.ins $h@@90) ($IsAlloc |a#604#0#0| Tclass._module.operand $h@@90)) (=> ($IsAlloc |a#604#0#0| Tclass._module.operand $h@@90) ($IsAlloc (|#_module.ins.CPSID_IAF| |a#604#0#0|) Tclass._module.ins $h@@90)))) :qid |ARMdefsd.307:17| :skolemid |3941| :pattern ( ($IsAlloc (|#_module.ins.CPSID_IAF| |a#604#0#0|) Tclass._module.ins $h@@90)) )))
(assert (forall ((|a#605#0#0| T@U) ) (!  (=> (= (type |a#605#0#0|) DatatypeTypeType) (= (|#_module.ins.CPSID_IAF| (Lit |a#605#0#0|)) (Lit (|#_module.ins.CPSID_IAF| |a#605#0#0|)))) :qid |ARMdefsd.307:17| :skolemid |3942| :pattern ( (|#_module.ins.CPSID_IAF| (Lit |a#605#0#0|))) )))
(assert (forall ((|a#606#0#0| T@U) ) (!  (=> (= (type |a#606#0#0|) DatatypeTypeType) (= (_module.ins.mod (|#_module.ins.CPSID_IAF| |a#606#0#0|)) |a#606#0#0|)) :qid |ARMdefsd.307:17| :skolemid |3943| :pattern ( (|#_module.ins.CPSID_IAF| |a#606#0#0|)) )))
(assert (forall ((|a#607#0#0| T@U) ) (!  (=> (= (type |a#607#0#0|) DatatypeTypeType) (< (DtRank |a#607#0#0|) (DtRank (|#_module.ins.CPSID_IAF| |a#607#0#0|)))) :qid |ARMdefsd.307:17| :skolemid |3944| :pattern ( (|#_module.ins.CPSID_IAF| |a#607#0#0|)) )))
(assert (= (type |#_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE|) |##_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE|))
(assert (forall ((d@@210 T@U) ) (!  (=> (= (type d@@210) DatatypeTypeType) (and (=> (_module.ins.MOVS__PCLR__TO__USERMODE__AND__CONTINUE_q d@@210) (= (DatatypeCtorId d@@210) |##_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE|)) (=> (= (DatatypeCtorId d@@210) |##_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE|) (_module.ins.MOVS__PCLR__TO__USERMODE__AND__CONTINUE_q d@@210)))) :qid |unknown.0:0| :skolemid |3945| :pattern ( (_module.ins.MOVS__PCLR__TO__USERMODE__AND__CONTINUE_q d@@210)) )))
(assert (forall ((d@@211 T@U) ) (!  (=> (and (= (type d@@211) DatatypeTypeType) (_module.ins.MOVS__PCLR__TO__USERMODE__AND__CONTINUE_q d@@211)) (= d@@211 |#_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE|)) :qid |unknown.0:0| :skolemid |3946| :pattern ( (_module.ins.MOVS__PCLR__TO__USERMODE__AND__CONTINUE_q d@@211)) )))
(assert ($Is |#_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE| Tclass._module.ins))
(assert (forall (($h@@91 T@U) ) (!  (=> (and (= (type $h@@91) (MapType1Type refType)) ($IsGoodHeap $h@@91)) ($IsAlloc |#_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE| Tclass._module.ins $h@@91)) :qid |DafnyPre.405:12| :skolemid |3947| :pattern ( ($IsAlloc |#_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE| Tclass._module.ins $h@@91)) )))
(assert (= |#_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE| (Lit |#_module.ins.MOVS_PCLR_TO_USERMODE_AND_CONTINUE|)))
(assert (forall ((arg0@@460 T@U) (arg1@@208 T@U) (arg2@@139 T@U) ) (! (= (type (|#_module.ins.LDR_rng| arg0@@460 arg1@@208 arg2@@139)) DatatypeTypeType) :qid |funType:#_module.ins.LDR_rng| :pattern ( (|#_module.ins.LDR_rng| arg0@@460 arg1@@208 arg2@@139)) )))
(assert (forall ((|a#613#0#0| T@U) (|a#613#1#0| T@U) (|a#613#2#0| T@U) ) (!  (=> (and (and (= (type |a#613#0#0|) DatatypeTypeType) (= (type |a#613#1#0|) DatatypeTypeType)) (= (type |a#613#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.ins.LDR_rng| |a#613#0#0| |a#613#1#0| |a#613#2#0|)) |##_module.ins.LDR_rng|)) :qid |ARMdefsd.313:15| :skolemid |3948| :pattern ( (|#_module.ins.LDR_rng| |a#613#0#0| |a#613#1#0| |a#613#2#0|)) )))
(assert (forall ((d@@212 T@U) ) (!  (=> (= (type d@@212) DatatypeTypeType) (and (=> (_module.ins.LDR__rng_q d@@212) (= (DatatypeCtorId d@@212) |##_module.ins.LDR_rng|)) (=> (= (DatatypeCtorId d@@212) |##_module.ins.LDR_rng|) (_module.ins.LDR__rng_q d@@212)))) :qid |unknown.0:0| :skolemid |3949| :pattern ( (_module.ins.LDR__rng_q d@@212)) )))
(assert (forall ((d@@213 T@U) ) (!  (=> (and (= (type d@@213) DatatypeTypeType) (_module.ins.LDR__rng_q d@@213)) (exists ((|a#614#0#0| T@U) (|a#614#1#0| T@U) (|a#614#2#0| T@U) ) (!  (and (and (and (= (type |a#614#0#0|) DatatypeTypeType) (= (type |a#614#1#0|) DatatypeTypeType)) (= (type |a#614#2#0|) DatatypeTypeType)) (= d@@213 (|#_module.ins.LDR_rng| |a#614#0#0| |a#614#1#0| |a#614#2#0|))) :qid |ARMdefsd.313:15| :skolemid |3950| :no-pattern (type |a#614#0#0|) :no-pattern (type |a#614#1#0|) :no-pattern (type |a#614#2#0|) :no-pattern (U_2_int |a#614#0#0|) :no-pattern (U_2_bool |a#614#0#0|) :no-pattern (U_2_int |a#614#1#0|) :no-pattern (U_2_bool |a#614#1#0|) :no-pattern (U_2_int |a#614#2#0|) :no-pattern (U_2_bool |a#614#2#0|) ))) :qid |unknown.0:0| :skolemid |3951| :pattern ( (_module.ins.LDR__rng_q d@@213)) )))
(assert (forall ((|a#615#0#0| T@U) (|a#615#1#0| T@U) (|a#615#2#0| T@U) ) (!  (=> (and (and (= (type |a#615#0#0|) DatatypeTypeType) (= (type |a#615#1#0|) DatatypeTypeType)) (= (type |a#615#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.ins.LDR_rng| |a#615#0#0| |a#615#1#0| |a#615#2#0|) Tclass._module.ins) (and (and ($Is |a#615#0#0| Tclass._module.operand) ($Is |a#615#1#0| Tclass._module.operand)) ($Is |a#615#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#615#0#0| Tclass._module.operand) ($Is |a#615#1#0| Tclass._module.operand)) ($Is |a#615#2#0| Tclass._module.operand)) ($Is (|#_module.ins.LDR_rng| |a#615#0#0| |a#615#1#0| |a#615#2#0|) Tclass._module.ins)))) :qid |ARMdefsd.313:15| :skolemid |3952| :pattern ( ($Is (|#_module.ins.LDR_rng| |a#615#0#0| |a#615#1#0| |a#615#2#0|) Tclass._module.ins)) )))
(assert (forall ((|a#616#0#0| T@U) (|a#616#1#0| T@U) (|a#616#2#0| T@U) ($h@@92 T@U) ) (!  (=> (and (and (and (and (= (type |a#616#0#0|) DatatypeTypeType) (= (type |a#616#1#0|) DatatypeTypeType)) (= (type |a#616#2#0|) DatatypeTypeType)) (= (type $h@@92) (MapType1Type refType))) ($IsGoodHeap $h@@92)) (and (=> ($IsAlloc (|#_module.ins.LDR_rng| |a#616#0#0| |a#616#1#0| |a#616#2#0|) Tclass._module.ins $h@@92) (and (and ($IsAlloc |a#616#0#0| Tclass._module.operand $h@@92) ($IsAlloc |a#616#1#0| Tclass._module.operand $h@@92)) ($IsAlloc |a#616#2#0| Tclass._module.operand $h@@92))) (=> (and (and ($IsAlloc |a#616#0#0| Tclass._module.operand $h@@92) ($IsAlloc |a#616#1#0| Tclass._module.operand $h@@92)) ($IsAlloc |a#616#2#0| Tclass._module.operand $h@@92)) ($IsAlloc (|#_module.ins.LDR_rng| |a#616#0#0| |a#616#1#0| |a#616#2#0|) Tclass._module.ins $h@@92)))) :qid |ARMdefsd.313:15| :skolemid |3953| :pattern ( ($IsAlloc (|#_module.ins.LDR_rng| |a#616#0#0| |a#616#1#0| |a#616#2#0|) Tclass._module.ins $h@@92)) )))
(assert (forall ((|a#617#0#0| T@U) (|a#617#1#0| T@U) (|a#617#2#0| T@U) ) (!  (=> (and (and (= (type |a#617#0#0|) DatatypeTypeType) (= (type |a#617#1#0|) DatatypeTypeType)) (= (type |a#617#2#0|) DatatypeTypeType)) (= (|#_module.ins.LDR_rng| (Lit |a#617#0#0|) (Lit |a#617#1#0|) (Lit |a#617#2#0|)) (Lit (|#_module.ins.LDR_rng| |a#617#0#0| |a#617#1#0| |a#617#2#0|)))) :qid |ARMdefsd.313:15| :skolemid |3954| :pattern ( (|#_module.ins.LDR_rng| (Lit |a#617#0#0|) (Lit |a#617#1#0|) (Lit |a#617#2#0|))) )))
(assert (forall ((|a#618#0#0| T@U) (|a#618#1#0| T@U) (|a#618#2#0| T@U) ) (!  (=> (and (and (= (type |a#618#0#0|) DatatypeTypeType) (= (type |a#618#1#0|) DatatypeTypeType)) (= (type |a#618#2#0|) DatatypeTypeType)) (= (_module.ins.rdLDR__rng (|#_module.ins.LDR_rng| |a#618#0#0| |a#618#1#0| |a#618#2#0|)) |a#618#0#0|)) :qid |ARMdefsd.313:15| :skolemid |3955| :pattern ( (|#_module.ins.LDR_rng| |a#618#0#0| |a#618#1#0| |a#618#2#0|)) )))
(assert (forall ((|a#619#0#0| T@U) (|a#619#1#0| T@U) (|a#619#2#0| T@U) ) (!  (=> (and (and (= (type |a#619#0#0|) DatatypeTypeType) (= (type |a#619#1#0|) DatatypeTypeType)) (= (type |a#619#2#0|) DatatypeTypeType)) (< (DtRank |a#619#0#0|) (DtRank (|#_module.ins.LDR_rng| |a#619#0#0| |a#619#1#0| |a#619#2#0|)))) :qid |ARMdefsd.313:15| :skolemid |3956| :pattern ( (|#_module.ins.LDR_rng| |a#619#0#0| |a#619#1#0| |a#619#2#0|)) )))
(assert (forall ((|a#620#0#0| T@U) (|a#620#1#0| T@U) (|a#620#2#0| T@U) ) (!  (=> (and (and (= (type |a#620#0#0|) DatatypeTypeType) (= (type |a#620#1#0|) DatatypeTypeType)) (= (type |a#620#2#0|) DatatypeTypeType)) (= (_module.ins.baseLDR__rng (|#_module.ins.LDR_rng| |a#620#0#0| |a#620#1#0| |a#620#2#0|)) |a#620#1#0|)) :qid |ARMdefsd.313:15| :skolemid |3957| :pattern ( (|#_module.ins.LDR_rng| |a#620#0#0| |a#620#1#0| |a#620#2#0|)) )))
(assert (forall ((|a#621#0#0| T@U) (|a#621#1#0| T@U) (|a#621#2#0| T@U) ) (!  (=> (and (and (= (type |a#621#0#0|) DatatypeTypeType) (= (type |a#621#1#0|) DatatypeTypeType)) (= (type |a#621#2#0|) DatatypeTypeType)) (< (DtRank |a#621#1#0|) (DtRank (|#_module.ins.LDR_rng| |a#621#0#0| |a#621#1#0| |a#621#2#0|)))) :qid |ARMdefsd.313:15| :skolemid |3958| :pattern ( (|#_module.ins.LDR_rng| |a#621#0#0| |a#621#1#0| |a#621#2#0|)) )))
(assert (forall ((|a#622#0#0| T@U) (|a#622#1#0| T@U) (|a#622#2#0| T@U) ) (!  (=> (and (and (= (type |a#622#0#0|) DatatypeTypeType) (= (type |a#622#1#0|) DatatypeTypeType)) (= (type |a#622#2#0|) DatatypeTypeType)) (= (_module.ins.ofsLDR__rng (|#_module.ins.LDR_rng| |a#622#0#0| |a#622#1#0| |a#622#2#0|)) |a#622#2#0|)) :qid |ARMdefsd.313:15| :skolemid |3959| :pattern ( (|#_module.ins.LDR_rng| |a#622#0#0| |a#622#1#0| |a#622#2#0|)) )))
(assert (forall ((|a#623#0#0| T@U) (|a#623#1#0| T@U) (|a#623#2#0| T@U) ) (!  (=> (and (and (= (type |a#623#0#0|) DatatypeTypeType) (= (type |a#623#1#0|) DatatypeTypeType)) (= (type |a#623#2#0|) DatatypeTypeType)) (< (DtRank |a#623#2#0|) (DtRank (|#_module.ins.LDR_rng| |a#623#0#0| |a#623#1#0| |a#623#2#0|)))) :qid |ARMdefsd.313:15| :skolemid |3960| :pattern ( (|#_module.ins.LDR_rng| |a#623#0#0| |a#623#1#0| |a#623#2#0|)) )))
(assert (forall ((d@@214 T@U) ) (!  (=> (and (= (type d@@214) DatatypeTypeType) (|$IsA#_module.ins| d@@214)) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (_module.ins.ADD_q d@@214) (_module.ins.SUB_q d@@214)) (_module.ins.MUL_q d@@214)) (_module.ins.UDIV_q d@@214)) (_module.ins.AND_q d@@214)) (_module.ins.ORR_q d@@214)) (_module.ins.EOR_q d@@214)) (_module.ins.LSL_q d@@214)) (_module.ins.LSR_q d@@214)) (_module.ins.REV_q d@@214)) (_module.ins.MOV_q d@@214)) (_module.ins.MOVW_q d@@214)) (_module.ins.MOVT_q d@@214)) (_module.ins.MVN_q d@@214)) (_module.ins.LDR_q d@@214)) (_module.ins.LDR__global_q d@@214)) (_module.ins.LDR__reloc_q d@@214)) (_module.ins.STR_q d@@214)) (_module.ins.STR__global_q d@@214)) (_module.ins.MRS_q d@@214)) (_module.ins.MSR_q d@@214)) (_module.ins.MRC_q d@@214)) (_module.ins.MCR_q d@@214)) (_module.ins.CPSID__IAF_q d@@214)) (_module.ins.MOVS__PCLR__TO__USERMODE__AND__CONTINUE_q d@@214)) (_module.ins.LDR__rng_q d@@214))) :qid |unknown.0:0| :skolemid |3961| :pattern ( (|$IsA#_module.ins| d@@214)) )))
(assert (forall ((d@@215 T@U) ) (!  (=> (and (= (type d@@215) DatatypeTypeType) ($Is d@@215 Tclass._module.ins)) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (_module.ins.ADD_q d@@215) (_module.ins.SUB_q d@@215)) (_module.ins.MUL_q d@@215)) (_module.ins.UDIV_q d@@215)) (_module.ins.AND_q d@@215)) (_module.ins.ORR_q d@@215)) (_module.ins.EOR_q d@@215)) (_module.ins.LSL_q d@@215)) (_module.ins.LSR_q d@@215)) (_module.ins.REV_q d@@215)) (_module.ins.MOV_q d@@215)) (_module.ins.MOVW_q d@@215)) (_module.ins.MOVT_q d@@215)) (_module.ins.MVN_q d@@215)) (_module.ins.LDR_q d@@215)) (_module.ins.LDR__global_q d@@215)) (_module.ins.LDR__reloc_q d@@215)) (_module.ins.STR_q d@@215)) (_module.ins.STR__global_q d@@215)) (_module.ins.MRS_q d@@215)) (_module.ins.MSR_q d@@215)) (_module.ins.MRC_q d@@215)) (_module.ins.MCR_q d@@215)) (_module.ins.CPSID__IAF_q d@@215)) (_module.ins.MOVS__PCLR__TO__USERMODE__AND__CONTINUE_q d@@215)) (_module.ins.LDR__rng_q d@@215))) :qid |unknown.0:0| :skolemid |3962| :pattern ( (_module.ins.LDR__rng_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MOVS__PCLR__TO__USERMODE__AND__CONTINUE_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.CPSID__IAF_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MCR_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MRC_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MSR_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MRS_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.STR__global_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.STR_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.LDR__reloc_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.LDR__global_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.LDR_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MVN_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MOVT_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MOVW_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MOV_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.REV_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.LSR_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.LSL_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.EOR_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.ORR_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.AND_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.UDIV_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.MUL_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.SUB_q d@@215) ($Is d@@215 Tclass._module.ins)) :pattern ( (_module.ins.ADD_q d@@215) ($Is d@@215 Tclass._module.ins)) )))
(assert (= (type |#_module.ocmp.OEq|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.ocmp.OEq|) |##_module.ocmp.OEq|))
(assert (forall ((d@@216 T@U) ) (!  (=> (= (type d@@216) DatatypeTypeType) (and (=> (_module.ocmp.OEq_q d@@216) (= (DatatypeCtorId d@@216) |##_module.ocmp.OEq|)) (=> (= (DatatypeCtorId d@@216) |##_module.ocmp.OEq|) (_module.ocmp.OEq_q d@@216)))) :qid |unknown.0:0| :skolemid |3963| :pattern ( (_module.ocmp.OEq_q d@@216)) )))
(assert (forall ((d@@217 T@U) ) (!  (=> (and (= (type d@@217) DatatypeTypeType) (_module.ocmp.OEq_q d@@217)) (= d@@217 |#_module.ocmp.OEq|)) :qid |unknown.0:0| :skolemid |3964| :pattern ( (_module.ocmp.OEq_q d@@217)) )))
(assert ($Is |#_module.ocmp.OEq| Tclass._module.ocmp))
(assert (forall (($h@@93 T@U) ) (!  (=> (and (= (type $h@@93) (MapType1Type refType)) ($IsGoodHeap $h@@93)) ($IsAlloc |#_module.ocmp.OEq| Tclass._module.ocmp $h@@93)) :qid |DafnyPre.405:12| :skolemid |3965| :pattern ( ($IsAlloc |#_module.ocmp.OEq| Tclass._module.ocmp $h@@93)) )))
(assert (= |#_module.ocmp.OEq| (Lit |#_module.ocmp.OEq|)))
(assert (= (type |#_module.ocmp.ONe|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.ocmp.ONe|) |##_module.ocmp.ONe|))
(assert (forall ((d@@218 T@U) ) (!  (=> (= (type d@@218) DatatypeTypeType) (and (=> (_module.ocmp.ONe_q d@@218) (= (DatatypeCtorId d@@218) |##_module.ocmp.ONe|)) (=> (= (DatatypeCtorId d@@218) |##_module.ocmp.ONe|) (_module.ocmp.ONe_q d@@218)))) :qid |unknown.0:0| :skolemid |3966| :pattern ( (_module.ocmp.ONe_q d@@218)) )))
(assert (forall ((d@@219 T@U) ) (!  (=> (and (= (type d@@219) DatatypeTypeType) (_module.ocmp.ONe_q d@@219)) (= d@@219 |#_module.ocmp.ONe|)) :qid |unknown.0:0| :skolemid |3967| :pattern ( (_module.ocmp.ONe_q d@@219)) )))
(assert ($Is |#_module.ocmp.ONe| Tclass._module.ocmp))
(assert (forall (($h@@94 T@U) ) (!  (=> (and (= (type $h@@94) (MapType1Type refType)) ($IsGoodHeap $h@@94)) ($IsAlloc |#_module.ocmp.ONe| Tclass._module.ocmp $h@@94)) :qid |DafnyPre.405:12| :skolemid |3968| :pattern ( ($IsAlloc |#_module.ocmp.ONe| Tclass._module.ocmp $h@@94)) )))
(assert (= |#_module.ocmp.ONe| (Lit |#_module.ocmp.ONe|)))
(assert (= (type |#_module.ocmp.OLe|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.ocmp.OLe|) |##_module.ocmp.OLe|))
(assert (forall ((d@@220 T@U) ) (!  (=> (= (type d@@220) DatatypeTypeType) (and (=> (_module.ocmp.OLe_q d@@220) (= (DatatypeCtorId d@@220) |##_module.ocmp.OLe|)) (=> (= (DatatypeCtorId d@@220) |##_module.ocmp.OLe|) (_module.ocmp.OLe_q d@@220)))) :qid |unknown.0:0| :skolemid |3969| :pattern ( (_module.ocmp.OLe_q d@@220)) )))
(assert (forall ((d@@221 T@U) ) (!  (=> (and (= (type d@@221) DatatypeTypeType) (_module.ocmp.OLe_q d@@221)) (= d@@221 |#_module.ocmp.OLe|)) :qid |unknown.0:0| :skolemid |3970| :pattern ( (_module.ocmp.OLe_q d@@221)) )))
(assert ($Is |#_module.ocmp.OLe| Tclass._module.ocmp))
(assert (forall (($h@@95 T@U) ) (!  (=> (and (= (type $h@@95) (MapType1Type refType)) ($IsGoodHeap $h@@95)) ($IsAlloc |#_module.ocmp.OLe| Tclass._module.ocmp $h@@95)) :qid |DafnyPre.405:12| :skolemid |3971| :pattern ( ($IsAlloc |#_module.ocmp.OLe| Tclass._module.ocmp $h@@95)) )))
(assert (= |#_module.ocmp.OLe| (Lit |#_module.ocmp.OLe|)))
(assert (= (type |#_module.ocmp.OGe|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.ocmp.OGe|) |##_module.ocmp.OGe|))
(assert (forall ((d@@222 T@U) ) (!  (=> (= (type d@@222) DatatypeTypeType) (and (=> (_module.ocmp.OGe_q d@@222) (= (DatatypeCtorId d@@222) |##_module.ocmp.OGe|)) (=> (= (DatatypeCtorId d@@222) |##_module.ocmp.OGe|) (_module.ocmp.OGe_q d@@222)))) :qid |unknown.0:0| :skolemid |3972| :pattern ( (_module.ocmp.OGe_q d@@222)) )))
(assert (forall ((d@@223 T@U) ) (!  (=> (and (= (type d@@223) DatatypeTypeType) (_module.ocmp.OGe_q d@@223)) (= d@@223 |#_module.ocmp.OGe|)) :qid |unknown.0:0| :skolemid |3973| :pattern ( (_module.ocmp.OGe_q d@@223)) )))
(assert ($Is |#_module.ocmp.OGe| Tclass._module.ocmp))
(assert (forall (($h@@96 T@U) ) (!  (=> (and (= (type $h@@96) (MapType1Type refType)) ($IsGoodHeap $h@@96)) ($IsAlloc |#_module.ocmp.OGe| Tclass._module.ocmp $h@@96)) :qid |DafnyPre.405:12| :skolemid |3974| :pattern ( ($IsAlloc |#_module.ocmp.OGe| Tclass._module.ocmp $h@@96)) )))
(assert (= |#_module.ocmp.OGe| (Lit |#_module.ocmp.OGe|)))
(assert (= (type |#_module.ocmp.OLt|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.ocmp.OLt|) |##_module.ocmp.OLt|))
(assert (forall ((d@@224 T@U) ) (!  (=> (= (type d@@224) DatatypeTypeType) (and (=> (_module.ocmp.OLt_q d@@224) (= (DatatypeCtorId d@@224) |##_module.ocmp.OLt|)) (=> (= (DatatypeCtorId d@@224) |##_module.ocmp.OLt|) (_module.ocmp.OLt_q d@@224)))) :qid |unknown.0:0| :skolemid |3975| :pattern ( (_module.ocmp.OLt_q d@@224)) )))
(assert (forall ((d@@225 T@U) ) (!  (=> (and (= (type d@@225) DatatypeTypeType) (_module.ocmp.OLt_q d@@225)) (= d@@225 |#_module.ocmp.OLt|)) :qid |unknown.0:0| :skolemid |3976| :pattern ( (_module.ocmp.OLt_q d@@225)) )))
(assert ($Is |#_module.ocmp.OLt| Tclass._module.ocmp))
(assert (forall (($h@@97 T@U) ) (!  (=> (and (= (type $h@@97) (MapType1Type refType)) ($IsGoodHeap $h@@97)) ($IsAlloc |#_module.ocmp.OLt| Tclass._module.ocmp $h@@97)) :qid |DafnyPre.405:12| :skolemid |3977| :pattern ( ($IsAlloc |#_module.ocmp.OLt| Tclass._module.ocmp $h@@97)) )))
(assert (= |#_module.ocmp.OLt| (Lit |#_module.ocmp.OLt|)))
(assert (= (type |#_module.ocmp.OGt|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.ocmp.OGt|) |##_module.ocmp.OGt|))
(assert (forall ((d@@226 T@U) ) (!  (=> (= (type d@@226) DatatypeTypeType) (and (=> (_module.ocmp.OGt_q d@@226) (= (DatatypeCtorId d@@226) |##_module.ocmp.OGt|)) (=> (= (DatatypeCtorId d@@226) |##_module.ocmp.OGt|) (_module.ocmp.OGt_q d@@226)))) :qid |unknown.0:0| :skolemid |3978| :pattern ( (_module.ocmp.OGt_q d@@226)) )))
(assert (forall ((d@@227 T@U) ) (!  (=> (and (= (type d@@227) DatatypeTypeType) (_module.ocmp.OGt_q d@@227)) (= d@@227 |#_module.ocmp.OGt|)) :qid |unknown.0:0| :skolemid |3979| :pattern ( (_module.ocmp.OGt_q d@@227)) )))
(assert ($Is |#_module.ocmp.OGt| Tclass._module.ocmp))
(assert (forall (($h@@98 T@U) ) (!  (=> (and (= (type $h@@98) (MapType1Type refType)) ($IsGoodHeap $h@@98)) ($IsAlloc |#_module.ocmp.OGt| Tclass._module.ocmp $h@@98)) :qid |DafnyPre.405:12| :skolemid |3980| :pattern ( ($IsAlloc |#_module.ocmp.OGt| Tclass._module.ocmp $h@@98)) )))
(assert (= |#_module.ocmp.OGt| (Lit |#_module.ocmp.OGt|)))
(assert (= (DatatypeCtorId |#_module.ocmp.OTstEq|) |##_module.ocmp.OTstEq|))
(assert (forall ((d@@228 T@U) ) (!  (=> (= (type d@@228) DatatypeTypeType) (and (=> (_module.ocmp.OTstEq_q d@@228) (= (DatatypeCtorId d@@228) |##_module.ocmp.OTstEq|)) (=> (= (DatatypeCtorId d@@228) |##_module.ocmp.OTstEq|) (_module.ocmp.OTstEq_q d@@228)))) :qid |unknown.0:0| :skolemid |3981| :pattern ( (_module.ocmp.OTstEq_q d@@228)) )))
(assert (forall ((d@@229 T@U) ) (!  (=> (and (= (type d@@229) DatatypeTypeType) (_module.ocmp.OTstEq_q d@@229)) (= d@@229 |#_module.ocmp.OTstEq|)) :qid |unknown.0:0| :skolemid |3982| :pattern ( (_module.ocmp.OTstEq_q d@@229)) )))
(assert ($Is |#_module.ocmp.OTstEq| Tclass._module.ocmp))
(assert (forall (($h@@99 T@U) ) (!  (=> (and (= (type $h@@99) (MapType1Type refType)) ($IsGoodHeap $h@@99)) ($IsAlloc |#_module.ocmp.OTstEq| Tclass._module.ocmp $h@@99)) :qid |DafnyPre.405:12| :skolemid |3983| :pattern ( ($IsAlloc |#_module.ocmp.OTstEq| Tclass._module.ocmp $h@@99)) )))
(assert (= |#_module.ocmp.OTstEq| (Lit |#_module.ocmp.OTstEq|)))
(assert (= (type |#_module.ocmp.OTstNe|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.ocmp.OTstNe|) |##_module.ocmp.OTstNe|))
(assert (forall ((d@@230 T@U) ) (!  (=> (= (type d@@230) DatatypeTypeType) (and (=> (_module.ocmp.OTstNe_q d@@230) (= (DatatypeCtorId d@@230) |##_module.ocmp.OTstNe|)) (=> (= (DatatypeCtorId d@@230) |##_module.ocmp.OTstNe|) (_module.ocmp.OTstNe_q d@@230)))) :qid |unknown.0:0| :skolemid |3984| :pattern ( (_module.ocmp.OTstNe_q d@@230)) )))
(assert (forall ((d@@231 T@U) ) (!  (=> (and (= (type d@@231) DatatypeTypeType) (_module.ocmp.OTstNe_q d@@231)) (= d@@231 |#_module.ocmp.OTstNe|)) :qid |unknown.0:0| :skolemid |3985| :pattern ( (_module.ocmp.OTstNe_q d@@231)) )))
(assert ($Is |#_module.ocmp.OTstNe| Tclass._module.ocmp))
(assert (forall (($h@@100 T@U) ) (!  (=> (and (= (type $h@@100) (MapType1Type refType)) ($IsGoodHeap $h@@100)) ($IsAlloc |#_module.ocmp.OTstNe| Tclass._module.ocmp $h@@100)) :qid |DafnyPre.405:12| :skolemid |3986| :pattern ( ($IsAlloc |#_module.ocmp.OTstNe| Tclass._module.ocmp $h@@100)) )))
(assert (= |#_module.ocmp.OTstNe| (Lit |#_module.ocmp.OTstNe|)))
(assert (forall ((d@@232 T@U) ) (!  (=> (and (= (type d@@232) DatatypeTypeType) (|$IsA#_module.ocmp| d@@232)) (or (or (or (or (or (or (or (_module.ocmp.OEq_q d@@232) (_module.ocmp.ONe_q d@@232)) (_module.ocmp.OLe_q d@@232)) (_module.ocmp.OGe_q d@@232)) (_module.ocmp.OLt_q d@@232)) (_module.ocmp.OGt_q d@@232)) (_module.ocmp.OTstEq_q d@@232)) (_module.ocmp.OTstNe_q d@@232))) :qid |unknown.0:0| :skolemid |3987| :pattern ( (|$IsA#_module.ocmp| d@@232)) )))
(assert (forall ((d@@233 T@U) ) (!  (=> (and (= (type d@@233) DatatypeTypeType) ($Is d@@233 Tclass._module.ocmp)) (or (or (or (or (or (or (or (_module.ocmp.OEq_q d@@233) (_module.ocmp.ONe_q d@@233)) (_module.ocmp.OLe_q d@@233)) (_module.ocmp.OGe_q d@@233)) (_module.ocmp.OLt_q d@@233)) (_module.ocmp.OGt_q d@@233)) (_module.ocmp.OTstEq_q d@@233)) (_module.ocmp.OTstNe_q d@@233))) :qid |unknown.0:0| :skolemid |3988| :pattern ( (_module.ocmp.OTstNe_q d@@233) ($Is d@@233 Tclass._module.ocmp)) :pattern ( (_module.ocmp.OTstEq_q d@@233) ($Is d@@233 Tclass._module.ocmp)) :pattern ( (_module.ocmp.OGt_q d@@233) ($Is d@@233 Tclass._module.ocmp)) :pattern ( (_module.ocmp.OLt_q d@@233) ($Is d@@233 Tclass._module.ocmp)) :pattern ( (_module.ocmp.OGe_q d@@233) ($Is d@@233 Tclass._module.ocmp)) :pattern ( (_module.ocmp.OLe_q d@@233) ($Is d@@233 Tclass._module.ocmp)) :pattern ( (_module.ocmp.ONe_q d@@233) ($Is d@@233 Tclass._module.ocmp)) :pattern ( (_module.ocmp.OEq_q d@@233) ($Is d@@233 Tclass._module.ocmp)) )))
(assert (forall ((|a#664#0#0| T@U) (|a#664#1#0| T@U) (|a#664#2#0| T@U) ) (!  (=> (and (and (= (type |a#664#0#0|) DatatypeTypeType) (= (type |a#664#1#0|) DatatypeTypeType)) (= (type |a#664#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.obool.OCmp| |a#664#0#0| |a#664#1#0| |a#664#2#0|)) |##_module.obool.OCmp|)) :qid |ARMdefsd.319:23| :skolemid |3989| :pattern ( (|#_module.obool.OCmp| |a#664#0#0| |a#664#1#0| |a#664#2#0|)) )))
(assert (forall ((d@@234 T@U) ) (!  (=> (= (type d@@234) DatatypeTypeType) (and (=> (_module.obool.OCmp_q d@@234) (= (DatatypeCtorId d@@234) |##_module.obool.OCmp|)) (=> (= (DatatypeCtorId d@@234) |##_module.obool.OCmp|) (_module.obool.OCmp_q d@@234)))) :qid |unknown.0:0| :skolemid |3990| :pattern ( (_module.obool.OCmp_q d@@234)) )))
(assert (forall ((d@@235 T@U) ) (!  (=> (and (= (type d@@235) DatatypeTypeType) (_module.obool.OCmp_q d@@235)) (exists ((|a#665#0#0| T@U) (|a#665#1#0| T@U) (|a#665#2#0| T@U) ) (!  (and (and (and (= (type |a#665#0#0|) DatatypeTypeType) (= (type |a#665#1#0|) DatatypeTypeType)) (= (type |a#665#2#0|) DatatypeTypeType)) (= d@@235 (|#_module.obool.OCmp| |a#665#0#0| |a#665#1#0| |a#665#2#0|))) :qid |ARMdefsd.319:23| :skolemid |3991| :no-pattern (type |a#665#0#0|) :no-pattern (type |a#665#1#0|) :no-pattern (type |a#665#2#0|) :no-pattern (U_2_int |a#665#0#0|) :no-pattern (U_2_bool |a#665#0#0|) :no-pattern (U_2_int |a#665#1#0|) :no-pattern (U_2_bool |a#665#1#0|) :no-pattern (U_2_int |a#665#2#0|) :no-pattern (U_2_bool |a#665#2#0|) ))) :qid |unknown.0:0| :skolemid |3992| :pattern ( (_module.obool.OCmp_q d@@235)) )))
(assert (forall ((|a#666#0#0| T@U) (|a#666#1#0| T@U) (|a#666#2#0| T@U) ) (!  (=> (and (and (= (type |a#666#0#0|) DatatypeTypeType) (= (type |a#666#1#0|) DatatypeTypeType)) (= (type |a#666#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.obool.OCmp| |a#666#0#0| |a#666#1#0| |a#666#2#0|) Tclass._module.obool) (and (and ($Is |a#666#0#0| Tclass._module.ocmp) ($Is |a#666#1#0| Tclass._module.operand)) ($Is |a#666#2#0| Tclass._module.operand))) (=> (and (and ($Is |a#666#0#0| Tclass._module.ocmp) ($Is |a#666#1#0| Tclass._module.operand)) ($Is |a#666#2#0| Tclass._module.operand)) ($Is (|#_module.obool.OCmp| |a#666#0#0| |a#666#1#0| |a#666#2#0|) Tclass._module.obool)))) :qid |ARMdefsd.319:23| :skolemid |3993| :pattern ( ($Is (|#_module.obool.OCmp| |a#666#0#0| |a#666#1#0| |a#666#2#0|) Tclass._module.obool)) )))
(assert (forall ((|a#667#0#0| T@U) (|a#667#1#0| T@U) (|a#667#2#0| T@U) ($h@@101 T@U) ) (!  (=> (and (and (and (and (= (type |a#667#0#0|) DatatypeTypeType) (= (type |a#667#1#0|) DatatypeTypeType)) (= (type |a#667#2#0|) DatatypeTypeType)) (= (type $h@@101) (MapType1Type refType))) ($IsGoodHeap $h@@101)) (and (=> ($IsAlloc (|#_module.obool.OCmp| |a#667#0#0| |a#667#1#0| |a#667#2#0|) Tclass._module.obool $h@@101) (and (and ($IsAlloc |a#667#0#0| Tclass._module.ocmp $h@@101) ($IsAlloc |a#667#1#0| Tclass._module.operand $h@@101)) ($IsAlloc |a#667#2#0| Tclass._module.operand $h@@101))) (=> (and (and ($IsAlloc |a#667#0#0| Tclass._module.ocmp $h@@101) ($IsAlloc |a#667#1#0| Tclass._module.operand $h@@101)) ($IsAlloc |a#667#2#0| Tclass._module.operand $h@@101)) ($IsAlloc (|#_module.obool.OCmp| |a#667#0#0| |a#667#1#0| |a#667#2#0|) Tclass._module.obool $h@@101)))) :qid |ARMdefsd.319:23| :skolemid |3994| :pattern ( ($IsAlloc (|#_module.obool.OCmp| |a#667#0#0| |a#667#1#0| |a#667#2#0|) Tclass._module.obool $h@@101)) )))
(assert (forall ((|a#668#0#0| T@U) (|a#668#1#0| T@U) (|a#668#2#0| T@U) ) (!  (=> (and (and (= (type |a#668#0#0|) DatatypeTypeType) (= (type |a#668#1#0|) DatatypeTypeType)) (= (type |a#668#2#0|) DatatypeTypeType)) (= (|#_module.obool.OCmp| (Lit |a#668#0#0|) (Lit |a#668#1#0|) (Lit |a#668#2#0|)) (Lit (|#_module.obool.OCmp| |a#668#0#0| |a#668#1#0| |a#668#2#0|)))) :qid |ARMdefsd.319:23| :skolemid |3995| :pattern ( (|#_module.obool.OCmp| (Lit |a#668#0#0|) (Lit |a#668#1#0|) (Lit |a#668#2#0|))) )))
(assert (forall ((|a#669#0#0| T@U) (|a#669#1#0| T@U) (|a#669#2#0| T@U) ) (!  (=> (and (and (= (type |a#669#0#0|) DatatypeTypeType) (= (type |a#669#1#0|) DatatypeTypeType)) (= (type |a#669#2#0|) DatatypeTypeType)) (= (_module.obool.cmp (|#_module.obool.OCmp| |a#669#0#0| |a#669#1#0| |a#669#2#0|)) |a#669#0#0|)) :qid |ARMdefsd.319:23| :skolemid |3996| :pattern ( (|#_module.obool.OCmp| |a#669#0#0| |a#669#1#0| |a#669#2#0|)) )))
(assert (forall ((|a#670#0#0| T@U) (|a#670#1#0| T@U) (|a#670#2#0| T@U) ) (!  (=> (and (and (= (type |a#670#0#0|) DatatypeTypeType) (= (type |a#670#1#0|) DatatypeTypeType)) (= (type |a#670#2#0|) DatatypeTypeType)) (< (DtRank |a#670#0#0|) (DtRank (|#_module.obool.OCmp| |a#670#0#0| |a#670#1#0| |a#670#2#0|)))) :qid |ARMdefsd.319:23| :skolemid |3997| :pattern ( (|#_module.obool.OCmp| |a#670#0#0| |a#670#1#0| |a#670#2#0|)) )))
(assert (forall ((|a#671#0#0| T@U) (|a#671#1#0| T@U) (|a#671#2#0| T@U) ) (!  (=> (and (and (= (type |a#671#0#0|) DatatypeTypeType) (= (type |a#671#1#0|) DatatypeTypeType)) (= (type |a#671#2#0|) DatatypeTypeType)) (= (_module.obool.o1 (|#_module.obool.OCmp| |a#671#0#0| |a#671#1#0| |a#671#2#0|)) |a#671#1#0|)) :qid |ARMdefsd.319:23| :skolemid |3998| :pattern ( (|#_module.obool.OCmp| |a#671#0#0| |a#671#1#0| |a#671#2#0|)) )))
(assert (forall ((|a#672#0#0| T@U) (|a#672#1#0| T@U) (|a#672#2#0| T@U) ) (!  (=> (and (and (= (type |a#672#0#0|) DatatypeTypeType) (= (type |a#672#1#0|) DatatypeTypeType)) (= (type |a#672#2#0|) DatatypeTypeType)) (< (DtRank |a#672#1#0|) (DtRank (|#_module.obool.OCmp| |a#672#0#0| |a#672#1#0| |a#672#2#0|)))) :qid |ARMdefsd.319:23| :skolemid |3999| :pattern ( (|#_module.obool.OCmp| |a#672#0#0| |a#672#1#0| |a#672#2#0|)) )))
(assert (forall ((|a#673#0#0| T@U) (|a#673#1#0| T@U) (|a#673#2#0| T@U) ) (!  (=> (and (and (= (type |a#673#0#0|) DatatypeTypeType) (= (type |a#673#1#0|) DatatypeTypeType)) (= (type |a#673#2#0|) DatatypeTypeType)) (= (_module.obool.o2 (|#_module.obool.OCmp| |a#673#0#0| |a#673#1#0| |a#673#2#0|)) |a#673#2#0|)) :qid |ARMdefsd.319:23| :skolemid |4000| :pattern ( (|#_module.obool.OCmp| |a#673#0#0| |a#673#1#0| |a#673#2#0|)) )))
(assert (forall ((|a#674#0#0| T@U) (|a#674#1#0| T@U) (|a#674#2#0| T@U) ) (!  (=> (and (and (= (type |a#674#0#0|) DatatypeTypeType) (= (type |a#674#1#0|) DatatypeTypeType)) (= (type |a#674#2#0|) DatatypeTypeType)) (< (DtRank |a#674#2#0|) (DtRank (|#_module.obool.OCmp| |a#674#0#0| |a#674#1#0| |a#674#2#0|)))) :qid |ARMdefsd.319:23| :skolemid |4001| :pattern ( (|#_module.obool.OCmp| |a#674#0#0| |a#674#1#0| |a#674#2#0|)) )))
(assert (forall ((d@@236 T@U) ) (!  (=> (and (= (type d@@236) DatatypeTypeType) (|$IsA#_module.obool| d@@236)) (_module.obool.OCmp_q d@@236)) :qid |unknown.0:0| :skolemid |4002| :pattern ( (|$IsA#_module.obool| d@@236)) )))
(assert (forall ((d@@237 T@U) ) (!  (=> (and (= (type d@@237) DatatypeTypeType) ($Is d@@237 Tclass._module.obool)) (_module.obool.OCmp_q d@@237)) :qid |unknown.0:0| :skolemid |4003| :pattern ( (_module.obool.OCmp_q d@@237) ($Is d@@237 Tclass._module.obool)) )))
(assert (= (type |#_module.codes.CNil|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_module.codes.CNil|) |##_module.codes.CNil|))
(assert (forall ((d@@238 T@U) ) (!  (=> (= (type d@@238) DatatypeTypeType) (and (=> (_module.codes.CNil_q d@@238) (= (DatatypeCtorId d@@238) |##_module.codes.CNil|)) (=> (= (DatatypeCtorId d@@238) |##_module.codes.CNil|) (_module.codes.CNil_q d@@238)))) :qid |unknown.0:0| :skolemid |4004| :pattern ( (_module.codes.CNil_q d@@238)) )))
(assert (forall ((d@@239 T@U) ) (!  (=> (and (= (type d@@239) DatatypeTypeType) (_module.codes.CNil_q d@@239)) (= d@@239 |#_module.codes.CNil|)) :qid |unknown.0:0| :skolemid |4005| :pattern ( (_module.codes.CNil_q d@@239)) )))
(assert ($Is |#_module.codes.CNil| Tclass._module.codes))
(assert (forall (($h@@102 T@U) ) (!  (=> (and (= (type $h@@102) (MapType1Type refType)) ($IsGoodHeap $h@@102)) ($IsAlloc |#_module.codes.CNil| Tclass._module.codes $h@@102)) :qid |DafnyPre.405:12| :skolemid |4006| :pattern ( ($IsAlloc |#_module.codes.CNil| Tclass._module.codes $h@@102)) )))
(assert (= |#_module.codes.CNil| (Lit |#_module.codes.CNil|)))
(assert (forall ((arg0@@461 T@U) (arg1@@209 T@U) ) (! (= (type (|#_module.codes.va_CCons| arg0@@461 arg1@@209)) DatatypeTypeType) :qid |funType:#_module.codes.va_CCons| :pattern ( (|#_module.codes.va_CCons| arg0@@461 arg1@@209)) )))
(assert (forall ((|a#680#0#0| T@U) (|a#680#1#0| T@U) ) (!  (=> (and (= (type |a#680#0#0|) DatatypeTypeType) (= (type |a#680#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.codes.va_CCons| |a#680#0#0| |a#680#1#0|)) |##_module.codes.va_CCons|)) :qid |ARMdefsd.321:34| :skolemid |4007| :pattern ( (|#_module.codes.va_CCons| |a#680#0#0| |a#680#1#0|)) )))
(assert (forall ((d@@240 T@U) ) (!  (=> (= (type d@@240) DatatypeTypeType) (and (=> (_module.codes.va__CCons_q d@@240) (= (DatatypeCtorId d@@240) |##_module.codes.va_CCons|)) (=> (= (DatatypeCtorId d@@240) |##_module.codes.va_CCons|) (_module.codes.va__CCons_q d@@240)))) :qid |unknown.0:0| :skolemid |4008| :pattern ( (_module.codes.va__CCons_q d@@240)) )))
(assert (forall ((d@@241 T@U) ) (!  (=> (and (= (type d@@241) DatatypeTypeType) (_module.codes.va__CCons_q d@@241)) (exists ((|a#681#0#0| T@U) (|a#681#1#0| T@U) ) (!  (and (and (= (type |a#681#0#0|) DatatypeTypeType) (= (type |a#681#1#0|) DatatypeTypeType)) (= d@@241 (|#_module.codes.va_CCons| |a#681#0#0| |a#681#1#0|))) :qid |ARMdefsd.321:34| :skolemid |4009| :no-pattern (type |a#681#0#0|) :no-pattern (type |a#681#1#0|) :no-pattern (U_2_int |a#681#0#0|) :no-pattern (U_2_bool |a#681#0#0|) :no-pattern (U_2_int |a#681#1#0|) :no-pattern (U_2_bool |a#681#1#0|) ))) :qid |unknown.0:0| :skolemid |4010| :pattern ( (_module.codes.va__CCons_q d@@241)) )))
(assert (forall ((|a#682#0#0| T@U) (|a#682#1#0| T@U) ) (!  (=> (and (= (type |a#682#0#0|) DatatypeTypeType) (= (type |a#682#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.codes.va_CCons| |a#682#0#0| |a#682#1#0|) Tclass._module.codes) (and ($Is |a#682#0#0| Tclass._module.code) ($Is |a#682#1#0| Tclass._module.codes))) (=> (and ($Is |a#682#0#0| Tclass._module.code) ($Is |a#682#1#0| Tclass._module.codes)) ($Is (|#_module.codes.va_CCons| |a#682#0#0| |a#682#1#0|) Tclass._module.codes)))) :qid |ARMdefsd.321:34| :skolemid |4011| :pattern ( ($Is (|#_module.codes.va_CCons| |a#682#0#0| |a#682#1#0|) Tclass._module.codes)) )))
(assert (forall ((|a#683#0#0| T@U) (|a#683#1#0| T@U) ($h@@103 T@U) ) (!  (=> (and (and (and (= (type |a#683#0#0|) DatatypeTypeType) (= (type |a#683#1#0|) DatatypeTypeType)) (= (type $h@@103) (MapType1Type refType))) ($IsGoodHeap $h@@103)) (and (=> ($IsAlloc (|#_module.codes.va_CCons| |a#683#0#0| |a#683#1#0|) Tclass._module.codes $h@@103) (and ($IsAlloc |a#683#0#0| Tclass._module.code $h@@103) ($IsAlloc |a#683#1#0| Tclass._module.codes $h@@103))) (=> (and ($IsAlloc |a#683#0#0| Tclass._module.code $h@@103) ($IsAlloc |a#683#1#0| Tclass._module.codes $h@@103)) ($IsAlloc (|#_module.codes.va_CCons| |a#683#0#0| |a#683#1#0|) Tclass._module.codes $h@@103)))) :qid |ARMdefsd.321:34| :skolemid |4012| :pattern ( ($IsAlloc (|#_module.codes.va_CCons| |a#683#0#0| |a#683#1#0|) Tclass._module.codes $h@@103)) )))
(assert (forall ((|a#684#0#0| T@U) (|a#684#1#0| T@U) ) (!  (=> (and (= (type |a#684#0#0|) DatatypeTypeType) (= (type |a#684#1#0|) DatatypeTypeType)) (= (|#_module.codes.va_CCons| (Lit |a#684#0#0|) (Lit |a#684#1#0|)) (Lit (|#_module.codes.va_CCons| |a#684#0#0| |a#684#1#0|)))) :qid |ARMdefsd.321:34| :skolemid |4013| :pattern ( (|#_module.codes.va_CCons| (Lit |a#684#0#0|) (Lit |a#684#1#0|))) )))
(assert (forall ((|a#685#0#0| T@U) (|a#685#1#0| T@U) ) (!  (=> (and (= (type |a#685#0#0|) DatatypeTypeType) (= (type |a#685#1#0|) DatatypeTypeType)) (= (_module.codes.hd (|#_module.codes.va_CCons| |a#685#0#0| |a#685#1#0|)) |a#685#0#0|)) :qid |ARMdefsd.321:34| :skolemid |4014| :pattern ( (|#_module.codes.va_CCons| |a#685#0#0| |a#685#1#0|)) )))
(assert (forall ((|a#686#0#0| T@U) (|a#686#1#0| T@U) ) (!  (=> (and (= (type |a#686#0#0|) DatatypeTypeType) (= (type |a#686#1#0|) DatatypeTypeType)) (< (DtRank |a#686#0#0|) (DtRank (|#_module.codes.va_CCons| |a#686#0#0| |a#686#1#0|)))) :qid |ARMdefsd.321:34| :skolemid |4015| :pattern ( (|#_module.codes.va_CCons| |a#686#0#0| |a#686#1#0|)) )))
(assert (forall ((|a#687#0#0| T@U) (|a#687#1#0| T@U) ) (!  (=> (and (= (type |a#687#0#0|) DatatypeTypeType) (= (type |a#687#1#0|) DatatypeTypeType)) (= (_module.codes.tl (|#_module.codes.va_CCons| |a#687#0#0| |a#687#1#0|)) |a#687#1#0|)) :qid |ARMdefsd.321:34| :skolemid |4016| :pattern ( (|#_module.codes.va_CCons| |a#687#0#0| |a#687#1#0|)) )))
(assert (forall ((|a#688#0#0| T@U) (|a#688#1#0| T@U) ) (!  (=> (and (= (type |a#688#0#0|) DatatypeTypeType) (= (type |a#688#1#0|) DatatypeTypeType)) (< (DtRank |a#688#1#0|) (DtRank (|#_module.codes.va_CCons| |a#688#0#0| |a#688#1#0|)))) :qid |ARMdefsd.321:34| :skolemid |4017| :pattern ( (|#_module.codes.va_CCons| |a#688#0#0| |a#688#1#0|)) )))
(assert (forall ((d@@242 T@U) ) (!  (=> (and (= (type d@@242) DatatypeTypeType) (|$IsA#_module.codes| d@@242)) (or (_module.codes.CNil_q d@@242) (_module.codes.va__CCons_q d@@242))) :qid |unknown.0:0| :skolemid |4018| :pattern ( (|$IsA#_module.codes| d@@242)) )))
(assert (forall ((d@@243 T@U) ) (!  (=> (and (= (type d@@243) DatatypeTypeType) ($Is d@@243 Tclass._module.codes)) (or (_module.codes.CNil_q d@@243) (_module.codes.va__CCons_q d@@243))) :qid |unknown.0:0| :skolemid |4019| :pattern ( (_module.codes.va__CCons_q d@@243) ($Is d@@243 Tclass._module.codes)) :pattern ( (_module.codes.CNil_q d@@243) ($Is d@@243 Tclass._module.codes)) )))
(assert (forall ((arg0@@462 T@U) ) (! (= (type (|#_module.code.Ins| arg0@@462)) DatatypeTypeType) :qid |funType:#_module.code.Ins| :pattern ( (|#_module.code.Ins| arg0@@462)) )))
(assert (forall ((|a#689#0#0| T@U) ) (!  (=> (= (type |a#689#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.code.Ins| |a#689#0#0|)) |##_module.code.Ins|)) :qid |ARMdefsd.324:7| :skolemid |4020| :pattern ( (|#_module.code.Ins| |a#689#0#0|)) )))
(assert (forall ((d@@244 T@U) ) (!  (=> (= (type d@@244) DatatypeTypeType) (and (=> (_module.code.Ins_q d@@244) (= (DatatypeCtorId d@@244) |##_module.code.Ins|)) (=> (= (DatatypeCtorId d@@244) |##_module.code.Ins|) (_module.code.Ins_q d@@244)))) :qid |unknown.0:0| :skolemid |4021| :pattern ( (_module.code.Ins_q d@@244)) )))
(assert (forall ((d@@245 T@U) ) (!  (=> (and (= (type d@@245) DatatypeTypeType) (_module.code.Ins_q d@@245)) (exists ((|a#690#0#0| T@U) ) (!  (and (= (type |a#690#0#0|) DatatypeTypeType) (= d@@245 (|#_module.code.Ins| |a#690#0#0|))) :qid |ARMdefsd.324:7| :skolemid |4022| :no-pattern (type |a#690#0#0|) :no-pattern (U_2_int |a#690#0#0|) :no-pattern (U_2_bool |a#690#0#0|) ))) :qid |unknown.0:0| :skolemid |4023| :pattern ( (_module.code.Ins_q d@@245)) )))
(assert (forall ((|a#691#0#0| T@U) ) (!  (=> (= (type |a#691#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.code.Ins| |a#691#0#0|) Tclass._module.code) ($Is |a#691#0#0| Tclass._module.ins)) (=> ($Is |a#691#0#0| Tclass._module.ins) ($Is (|#_module.code.Ins| |a#691#0#0|) Tclass._module.code)))) :qid |ARMdefsd.324:7| :skolemid |4024| :pattern ( ($Is (|#_module.code.Ins| |a#691#0#0|) Tclass._module.code)) )))
(assert (forall ((|a#692#0#0| T@U) ($h@@104 T@U) ) (!  (=> (and (and (= (type |a#692#0#0|) DatatypeTypeType) (= (type $h@@104) (MapType1Type refType))) ($IsGoodHeap $h@@104)) (and (=> ($IsAlloc (|#_module.code.Ins| |a#692#0#0|) Tclass._module.code $h@@104) ($IsAlloc |a#692#0#0| Tclass._module.ins $h@@104)) (=> ($IsAlloc |a#692#0#0| Tclass._module.ins $h@@104) ($IsAlloc (|#_module.code.Ins| |a#692#0#0|) Tclass._module.code $h@@104)))) :qid |ARMdefsd.324:7| :skolemid |4025| :pattern ( ($IsAlloc (|#_module.code.Ins| |a#692#0#0|) Tclass._module.code $h@@104)) )))
(assert (forall ((|a#693#0#0| T@U) ) (!  (=> (= (type |a#693#0#0|) DatatypeTypeType) (= (|#_module.code.Ins| (Lit |a#693#0#0|)) (Lit (|#_module.code.Ins| |a#693#0#0|)))) :qid |ARMdefsd.324:7| :skolemid |4026| :pattern ( (|#_module.code.Ins| (Lit |a#693#0#0|))) )))
(assert (forall ((|a#694#0#0| T@U) ) (!  (=> (= (type |a#694#0#0|) DatatypeTypeType) (= (_module.code.ins (|#_module.code.Ins| |a#694#0#0|)) |a#694#0#0|)) :qid |ARMdefsd.324:7| :skolemid |4027| :pattern ( (|#_module.code.Ins| |a#694#0#0|)) )))
(assert (forall ((|a#695#0#0| T@U) ) (!  (=> (= (type |a#695#0#0|) DatatypeTypeType) (< (DtRank |a#695#0#0|) (DtRank (|#_module.code.Ins| |a#695#0#0|)))) :qid |ARMdefsd.324:7| :skolemid |4028| :pattern ( (|#_module.code.Ins| |a#695#0#0|)) )))
(assert (forall ((arg0@@463 T@U) ) (! (= (type (|#_module.code.Block| arg0@@463)) DatatypeTypeType) :qid |funType:#_module.code.Block| :pattern ( (|#_module.code.Block| arg0@@463)) )))
(assert (forall ((|a#696#0#0| T@U) ) (!  (=> (= (type |a#696#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#_module.code.Block| |a#696#0#0|)) |##_module.code.Block|)) :qid |ARMdefsd.325:9| :skolemid |4029| :pattern ( (|#_module.code.Block| |a#696#0#0|)) )))
(assert (forall ((d@@246 T@U) ) (!  (=> (= (type d@@246) DatatypeTypeType) (and (=> (_module.code.Block_q d@@246) (= (DatatypeCtorId d@@246) |##_module.code.Block|)) (=> (= (DatatypeCtorId d@@246) |##_module.code.Block|) (_module.code.Block_q d@@246)))) :qid |unknown.0:0| :skolemid |4030| :pattern ( (_module.code.Block_q d@@246)) )))
(assert (forall ((d@@247 T@U) ) (!  (=> (and (= (type d@@247) DatatypeTypeType) (_module.code.Block_q d@@247)) (exists ((|a#697#0#0| T@U) ) (!  (and (= (type |a#697#0#0|) DatatypeTypeType) (= d@@247 (|#_module.code.Block| |a#697#0#0|))) :qid |ARMdefsd.325:9| :skolemid |4031| :no-pattern (type |a#697#0#0|) :no-pattern (U_2_int |a#697#0#0|) :no-pattern (U_2_bool |a#697#0#0|) ))) :qid |unknown.0:0| :skolemid |4032| :pattern ( (_module.code.Block_q d@@247)) )))
(assert (forall ((|a#698#0#0| T@U) ) (!  (=> (= (type |a#698#0#0|) DatatypeTypeType) (and (=> ($Is (|#_module.code.Block| |a#698#0#0|) Tclass._module.code) ($Is |a#698#0#0| Tclass._module.codes)) (=> ($Is |a#698#0#0| Tclass._module.codes) ($Is (|#_module.code.Block| |a#698#0#0|) Tclass._module.code)))) :qid |ARMdefsd.325:9| :skolemid |4033| :pattern ( ($Is (|#_module.code.Block| |a#698#0#0|) Tclass._module.code)) )))
(assert (forall ((|a#699#0#0| T@U) ($h@@105 T@U) ) (!  (=> (and (and (= (type |a#699#0#0|) DatatypeTypeType) (= (type $h@@105) (MapType1Type refType))) ($IsGoodHeap $h@@105)) (and (=> ($IsAlloc (|#_module.code.Block| |a#699#0#0|) Tclass._module.code $h@@105) ($IsAlloc |a#699#0#0| Tclass._module.codes $h@@105)) (=> ($IsAlloc |a#699#0#0| Tclass._module.codes $h@@105) ($IsAlloc (|#_module.code.Block| |a#699#0#0|) Tclass._module.code $h@@105)))) :qid |ARMdefsd.325:9| :skolemid |4034| :pattern ( ($IsAlloc (|#_module.code.Block| |a#699#0#0|) Tclass._module.code $h@@105)) )))
(assert (forall ((|a#700#0#0| T@U) ) (!  (=> (= (type |a#700#0#0|) DatatypeTypeType) (= (|#_module.code.Block| (Lit |a#700#0#0|)) (Lit (|#_module.code.Block| |a#700#0#0|)))) :qid |ARMdefsd.325:9| :skolemid |4035| :pattern ( (|#_module.code.Block| (Lit |a#700#0#0|))) )))
(assert (forall ((|a#701#0#0| T@U) ) (!  (=> (= (type |a#701#0#0|) DatatypeTypeType) (= (_module.code.block (|#_module.code.Block| |a#701#0#0|)) |a#701#0#0|)) :qid |ARMdefsd.325:9| :skolemid |4036| :pattern ( (|#_module.code.Block| |a#701#0#0|)) )))
(assert (forall ((|a#702#0#0| T@U) ) (!  (=> (= (type |a#702#0#0|) DatatypeTypeType) (< (DtRank |a#702#0#0|) (DtRank (|#_module.code.Block| |a#702#0#0|)))) :qid |ARMdefsd.325:9| :skolemid |4037| :pattern ( (|#_module.code.Block| |a#702#0#0|)) )))
(assert (forall ((arg0@@464 T@U) (arg1@@210 T@U) (arg2@@140 T@U) ) (! (= (type (|#_module.code.IfElse| arg0@@464 arg1@@210 arg2@@140)) DatatypeTypeType) :qid |funType:#_module.code.IfElse| :pattern ( (|#_module.code.IfElse| arg0@@464 arg1@@210 arg2@@140)) )))
(assert (forall ((|a#703#0#0| T@U) (|a#703#1#0| T@U) (|a#703#2#0| T@U) ) (!  (=> (and (and (= (type |a#703#0#0|) DatatypeTypeType) (= (type |a#703#1#0|) DatatypeTypeType)) (= (type |a#703#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.code.IfElse| |a#703#0#0| |a#703#1#0| |a#703#2#0|)) |##_module.code.IfElse|)) :qid |ARMdefsd.326:10| :skolemid |4038| :pattern ( (|#_module.code.IfElse| |a#703#0#0| |a#703#1#0| |a#703#2#0|)) )))
(assert (forall ((d@@248 T@U) ) (!  (=> (= (type d@@248) DatatypeTypeType) (and (=> (_module.code.IfElse_q d@@248) (= (DatatypeCtorId d@@248) |##_module.code.IfElse|)) (=> (= (DatatypeCtorId d@@248) |##_module.code.IfElse|) (_module.code.IfElse_q d@@248)))) :qid |unknown.0:0| :skolemid |4039| :pattern ( (_module.code.IfElse_q d@@248)) )))
(assert (forall ((d@@249 T@U) ) (!  (=> (and (= (type d@@249) DatatypeTypeType) (_module.code.IfElse_q d@@249)) (exists ((|a#704#0#0| T@U) (|a#704#1#0| T@U) (|a#704#2#0| T@U) ) (!  (and (and (and (= (type |a#704#0#0|) DatatypeTypeType) (= (type |a#704#1#0|) DatatypeTypeType)) (= (type |a#704#2#0|) DatatypeTypeType)) (= d@@249 (|#_module.code.IfElse| |a#704#0#0| |a#704#1#0| |a#704#2#0|))) :qid |ARMdefsd.326:10| :skolemid |4040| :no-pattern (type |a#704#0#0|) :no-pattern (type |a#704#1#0|) :no-pattern (type |a#704#2#0|) :no-pattern (U_2_int |a#704#0#0|) :no-pattern (U_2_bool |a#704#0#0|) :no-pattern (U_2_int |a#704#1#0|) :no-pattern (U_2_bool |a#704#1#0|) :no-pattern (U_2_int |a#704#2#0|) :no-pattern (U_2_bool |a#704#2#0|) ))) :qid |unknown.0:0| :skolemid |4041| :pattern ( (_module.code.IfElse_q d@@249)) )))
(assert (forall ((|a#705#0#0| T@U) (|a#705#1#0| T@U) (|a#705#2#0| T@U) ) (!  (=> (and (and (= (type |a#705#0#0|) DatatypeTypeType) (= (type |a#705#1#0|) DatatypeTypeType)) (= (type |a#705#2#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.code.IfElse| |a#705#0#0| |a#705#1#0| |a#705#2#0|) Tclass._module.code) (and (and ($Is |a#705#0#0| Tclass._module.obool) ($Is |a#705#1#0| Tclass._module.code)) ($Is |a#705#2#0| Tclass._module.code))) (=> (and (and ($Is |a#705#0#0| Tclass._module.obool) ($Is |a#705#1#0| Tclass._module.code)) ($Is |a#705#2#0| Tclass._module.code)) ($Is (|#_module.code.IfElse| |a#705#0#0| |a#705#1#0| |a#705#2#0|) Tclass._module.code)))) :qid |ARMdefsd.326:10| :skolemid |4042| :pattern ( ($Is (|#_module.code.IfElse| |a#705#0#0| |a#705#1#0| |a#705#2#0|) Tclass._module.code)) )))
(assert (forall ((|a#706#0#0| T@U) (|a#706#1#0| T@U) (|a#706#2#0| T@U) ($h@@106 T@U) ) (!  (=> (and (and (and (and (= (type |a#706#0#0|) DatatypeTypeType) (= (type |a#706#1#0|) DatatypeTypeType)) (= (type |a#706#2#0|) DatatypeTypeType)) (= (type $h@@106) (MapType1Type refType))) ($IsGoodHeap $h@@106)) (and (=> ($IsAlloc (|#_module.code.IfElse| |a#706#0#0| |a#706#1#0| |a#706#2#0|) Tclass._module.code $h@@106) (and (and ($IsAlloc |a#706#0#0| Tclass._module.obool $h@@106) ($IsAlloc |a#706#1#0| Tclass._module.code $h@@106)) ($IsAlloc |a#706#2#0| Tclass._module.code $h@@106))) (=> (and (and ($IsAlloc |a#706#0#0| Tclass._module.obool $h@@106) ($IsAlloc |a#706#1#0| Tclass._module.code $h@@106)) ($IsAlloc |a#706#2#0| Tclass._module.code $h@@106)) ($IsAlloc (|#_module.code.IfElse| |a#706#0#0| |a#706#1#0| |a#706#2#0|) Tclass._module.code $h@@106)))) :qid |ARMdefsd.326:10| :skolemid |4043| :pattern ( ($IsAlloc (|#_module.code.IfElse| |a#706#0#0| |a#706#1#0| |a#706#2#0|) Tclass._module.code $h@@106)) )))
(assert (forall ((|a#707#0#0| T@U) (|a#707#1#0| T@U) (|a#707#2#0| T@U) ) (!  (=> (and (and (= (type |a#707#0#0|) DatatypeTypeType) (= (type |a#707#1#0|) DatatypeTypeType)) (= (type |a#707#2#0|) DatatypeTypeType)) (= (|#_module.code.IfElse| (Lit |a#707#0#0|) (Lit |a#707#1#0|) (Lit |a#707#2#0|)) (Lit (|#_module.code.IfElse| |a#707#0#0| |a#707#1#0| |a#707#2#0|)))) :qid |ARMdefsd.326:10| :skolemid |4044| :pattern ( (|#_module.code.IfElse| (Lit |a#707#0#0|) (Lit |a#707#1#0|) (Lit |a#707#2#0|))) )))
(assert (forall ((|a#708#0#0| T@U) (|a#708#1#0| T@U) (|a#708#2#0| T@U) ) (!  (=> (and (and (= (type |a#708#0#0|) DatatypeTypeType) (= (type |a#708#1#0|) DatatypeTypeType)) (= (type |a#708#2#0|) DatatypeTypeType)) (= (_module.code.ifCond (|#_module.code.IfElse| |a#708#0#0| |a#708#1#0| |a#708#2#0|)) |a#708#0#0|)) :qid |ARMdefsd.326:10| :skolemid |4045| :pattern ( (|#_module.code.IfElse| |a#708#0#0| |a#708#1#0| |a#708#2#0|)) )))
(assert (forall ((|a#709#0#0| T@U) (|a#709#1#0| T@U) (|a#709#2#0| T@U) ) (!  (=> (and (and (= (type |a#709#0#0|) DatatypeTypeType) (= (type |a#709#1#0|) DatatypeTypeType)) (= (type |a#709#2#0|) DatatypeTypeType)) (< (DtRank |a#709#0#0|) (DtRank (|#_module.code.IfElse| |a#709#0#0| |a#709#1#0| |a#709#2#0|)))) :qid |ARMdefsd.326:10| :skolemid |4046| :pattern ( (|#_module.code.IfElse| |a#709#0#0| |a#709#1#0| |a#709#2#0|)) )))
(assert (forall ((|a#710#0#0| T@U) (|a#710#1#0| T@U) (|a#710#2#0| T@U) ) (!  (=> (and (and (= (type |a#710#0#0|) DatatypeTypeType) (= (type |a#710#1#0|) DatatypeTypeType)) (= (type |a#710#2#0|) DatatypeTypeType)) (= (_module.code.ifTrue (|#_module.code.IfElse| |a#710#0#0| |a#710#1#0| |a#710#2#0|)) |a#710#1#0|)) :qid |ARMdefsd.326:10| :skolemid |4047| :pattern ( (|#_module.code.IfElse| |a#710#0#0| |a#710#1#0| |a#710#2#0|)) )))
(assert (forall ((|a#711#0#0| T@U) (|a#711#1#0| T@U) (|a#711#2#0| T@U) ) (!  (=> (and (and (= (type |a#711#0#0|) DatatypeTypeType) (= (type |a#711#1#0|) DatatypeTypeType)) (= (type |a#711#2#0|) DatatypeTypeType)) (< (DtRank |a#711#1#0|) (DtRank (|#_module.code.IfElse| |a#711#0#0| |a#711#1#0| |a#711#2#0|)))) :qid |ARMdefsd.326:10| :skolemid |4048| :pattern ( (|#_module.code.IfElse| |a#711#0#0| |a#711#1#0| |a#711#2#0|)) )))
(assert (forall ((|a#712#0#0| T@U) (|a#712#1#0| T@U) (|a#712#2#0| T@U) ) (!  (=> (and (and (= (type |a#712#0#0|) DatatypeTypeType) (= (type |a#712#1#0|) DatatypeTypeType)) (= (type |a#712#2#0|) DatatypeTypeType)) (= (_module.code.ifFalse (|#_module.code.IfElse| |a#712#0#0| |a#712#1#0| |a#712#2#0|)) |a#712#2#0|)) :qid |ARMdefsd.326:10| :skolemid |4049| :pattern ( (|#_module.code.IfElse| |a#712#0#0| |a#712#1#0| |a#712#2#0|)) )))
(assert (forall ((|a#713#0#0| T@U) (|a#713#1#0| T@U) (|a#713#2#0| T@U) ) (!  (=> (and (and (= (type |a#713#0#0|) DatatypeTypeType) (= (type |a#713#1#0|) DatatypeTypeType)) (= (type |a#713#2#0|) DatatypeTypeType)) (< (DtRank |a#713#2#0|) (DtRank (|#_module.code.IfElse| |a#713#0#0| |a#713#1#0| |a#713#2#0|)))) :qid |ARMdefsd.326:10| :skolemid |4050| :pattern ( (|#_module.code.IfElse| |a#713#0#0| |a#713#1#0| |a#713#2#0|)) )))
(assert (forall ((arg0@@465 T@U) (arg1@@211 T@U) ) (! (= (type (|#_module.code.While| arg0@@465 arg1@@211)) DatatypeTypeType) :qid |funType:#_module.code.While| :pattern ( (|#_module.code.While| arg0@@465 arg1@@211)) )))
(assert (forall ((|a#714#0#0| T@U) (|a#714#1#0| T@U) ) (!  (=> (and (= (type |a#714#0#0|) DatatypeTypeType) (= (type |a#714#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#_module.code.While| |a#714#0#0| |a#714#1#0|)) |##_module.code.While|)) :qid |ARMdefsd.327:9| :skolemid |4051| :pattern ( (|#_module.code.While| |a#714#0#0| |a#714#1#0|)) )))
(assert (forall ((d@@250 T@U) ) (!  (=> (= (type d@@250) DatatypeTypeType) (and (=> (_module.code.While_q d@@250) (= (DatatypeCtorId d@@250) |##_module.code.While|)) (=> (= (DatatypeCtorId d@@250) |##_module.code.While|) (_module.code.While_q d@@250)))) :qid |unknown.0:0| :skolemid |4052| :pattern ( (_module.code.While_q d@@250)) )))
(assert (forall ((d@@251 T@U) ) (!  (=> (and (= (type d@@251) DatatypeTypeType) (_module.code.While_q d@@251)) (exists ((|a#715#0#0| T@U) (|a#715#1#0| T@U) ) (!  (and (and (= (type |a#715#0#0|) DatatypeTypeType) (= (type |a#715#1#0|) DatatypeTypeType)) (= d@@251 (|#_module.code.While| |a#715#0#0| |a#715#1#0|))) :qid |ARMdefsd.327:9| :skolemid |4053| :no-pattern (type |a#715#0#0|) :no-pattern (type |a#715#1#0|) :no-pattern (U_2_int |a#715#0#0|) :no-pattern (U_2_bool |a#715#0#0|) :no-pattern (U_2_int |a#715#1#0|) :no-pattern (U_2_bool |a#715#1#0|) ))) :qid |unknown.0:0| :skolemid |4054| :pattern ( (_module.code.While_q d@@251)) )))
(assert (forall ((|a#716#0#0| T@U) (|a#716#1#0| T@U) ) (!  (=> (and (= (type |a#716#0#0|) DatatypeTypeType) (= (type |a#716#1#0|) DatatypeTypeType)) (and (=> ($Is (|#_module.code.While| |a#716#0#0| |a#716#1#0|) Tclass._module.code) (and ($Is |a#716#0#0| Tclass._module.obool) ($Is |a#716#1#0| Tclass._module.code))) (=> (and ($Is |a#716#0#0| Tclass._module.obool) ($Is |a#716#1#0| Tclass._module.code)) ($Is (|#_module.code.While| |a#716#0#0| |a#716#1#0|) Tclass._module.code)))) :qid |ARMdefsd.327:9| :skolemid |4055| :pattern ( ($Is (|#_module.code.While| |a#716#0#0| |a#716#1#0|) Tclass._module.code)) )))
(assert (forall ((|a#717#0#0| T@U) (|a#717#1#0| T@U) ($h@@107 T@U) ) (!  (=> (and (and (and (= (type |a#717#0#0|) DatatypeTypeType) (= (type |a#717#1#0|) DatatypeTypeType)) (= (type $h@@107) (MapType1Type refType))) ($IsGoodHeap $h@@107)) (and (=> ($IsAlloc (|#_module.code.While| |a#717#0#0| |a#717#1#0|) Tclass._module.code $h@@107) (and ($IsAlloc |a#717#0#0| Tclass._module.obool $h@@107) ($IsAlloc |a#717#1#0| Tclass._module.code $h@@107))) (=> (and ($IsAlloc |a#717#0#0| Tclass._module.obool $h@@107) ($IsAlloc |a#717#1#0| Tclass._module.code $h@@107)) ($IsAlloc (|#_module.code.While| |a#717#0#0| |a#717#1#0|) Tclass._module.code $h@@107)))) :qid |ARMdefsd.327:9| :skolemid |4056| :pattern ( ($IsAlloc (|#_module.code.While| |a#717#0#0| |a#717#1#0|) Tclass._module.code $h@@107)) )))
(assert (forall ((|a#718#0#0| T@U) (|a#718#1#0| T@U) ) (!  (=> (and (= (type |a#718#0#0|) DatatypeTypeType) (= (type |a#718#1#0|) DatatypeTypeType)) (= (|#_module.code.While| (Lit |a#718#0#0|) (Lit |a#718#1#0|)) (Lit (|#_module.code.While| |a#718#0#0| |a#718#1#0|)))) :qid |ARMdefsd.327:9| :skolemid |4057| :pattern ( (|#_module.code.While| (Lit |a#718#0#0|) (Lit |a#718#1#0|))) )))
(assert (forall ((|a#719#0#0| T@U) (|a#719#1#0| T@U) ) (!  (=> (and (= (type |a#719#0#0|) DatatypeTypeType) (= (type |a#719#1#0|) DatatypeTypeType)) (= (_module.code.whileCond (|#_module.code.While| |a#719#0#0| |a#719#1#0|)) |a#719#0#0|)) :qid |ARMdefsd.327:9| :skolemid |4058| :pattern ( (|#_module.code.While| |a#719#0#0| |a#719#1#0|)) )))
(assert (forall ((|a#720#0#0| T@U) (|a#720#1#0| T@U) ) (!  (=> (and (= (type |a#720#0#0|) DatatypeTypeType) (= (type |a#720#1#0|) DatatypeTypeType)) (< (DtRank |a#720#0#0|) (DtRank (|#_module.code.While| |a#720#0#0| |a#720#1#0|)))) :qid |ARMdefsd.327:9| :skolemid |4059| :pattern ( (|#_module.code.While| |a#720#0#0| |a#720#1#0|)) )))
(assert (forall ((|a#721#0#0| T@U) (|a#721#1#0| T@U) ) (!  (=> (and (= (type |a#721#0#0|) DatatypeTypeType) (= (type |a#721#1#0|) DatatypeTypeType)) (= (_module.code.whileBody (|#_module.code.While| |a#721#0#0| |a#721#1#0|)) |a#721#1#0|)) :qid |ARMdefsd.327:9| :skolemid |4060| :pattern ( (|#_module.code.While| |a#721#0#0| |a#721#1#0|)) )))
(assert (forall ((|a#722#0#0| T@U) (|a#722#1#0| T@U) ) (!  (=> (and (= (type |a#722#0#0|) DatatypeTypeType) (= (type |a#722#1#0|) DatatypeTypeType)) (< (DtRank |a#722#1#0|) (DtRank (|#_module.code.While| |a#722#0#0| |a#722#1#0|)))) :qid |ARMdefsd.327:9| :skolemid |4061| :pattern ( (|#_module.code.While| |a#722#0#0| |a#722#1#0|)) )))
(assert (forall ((d@@252 T@U) ) (!  (=> (and (= (type d@@252) DatatypeTypeType) (|$IsA#_module.code| d@@252)) (or (or (or (_module.code.Ins_q d@@252) (_module.code.Block_q d@@252)) (_module.code.IfElse_q d@@252)) (_module.code.While_q d@@252))) :qid |unknown.0:0| :skolemid |4062| :pattern ( (|$IsA#_module.code| d@@252)) )))
(assert (forall ((d@@253 T@U) ) (!  (=> (and (= (type d@@253) DatatypeTypeType) ($Is d@@253 Tclass._module.code)) (or (or (or (_module.code.Ins_q d@@253) (_module.code.Block_q d@@253)) (_module.code.IfElse_q d@@253)) (_module.code.While_q d@@253))) :qid |unknown.0:0| :skolemid |4063| :pattern ( (_module.code.While_q d@@253) ($Is d@@253 Tclass._module.code)) :pattern ( (_module.code.IfElse_q d@@253) ($Is d@@253 Tclass._module.code)) :pattern ( (_module.code.Block_q d@@253) ($Is d@@253 Tclass._module.code)) :pattern ( (_module.code.Ins_q d@@253) ($Is d@@253 Tclass._module.code)) )))
(assert (forall ((|a#723#0#0| Int) (|a#723#1#0| Bool) (|a#723#2#0| Bool) ) (! (= (DatatypeCtorId (|#_module.AbsPTE.AbsPTE| |a#723#0#0| |a#723#1#0| |a#723#2#0|)) |##_module.AbsPTE.AbsPTE|) :qid |ARMdefsd.748:26| :skolemid |4064| :pattern ( (|#_module.AbsPTE.AbsPTE| |a#723#0#0| |a#723#1#0| |a#723#2#0|)) )))
(assert (forall ((d@@254 T@U) ) (!  (=> (= (type d@@254) DatatypeTypeType) (and (=> (_module.AbsPTE.AbsPTE_q d@@254) (= (DatatypeCtorId d@@254) |##_module.AbsPTE.AbsPTE|)) (=> (= (DatatypeCtorId d@@254) |##_module.AbsPTE.AbsPTE|) (_module.AbsPTE.AbsPTE_q d@@254)))) :qid |unknown.0:0| :skolemid |4065| :pattern ( (_module.AbsPTE.AbsPTE_q d@@254)) )))
(assert (forall ((d@@255 T@U) ) (!  (=> (and (= (type d@@255) DatatypeTypeType) (_module.AbsPTE.AbsPTE_q d@@255)) (exists ((|a#724#0#0| Int) (|a#724#1#0| Bool) (|a#724#2#0| Bool) ) (! (= d@@255 (|#_module.AbsPTE.AbsPTE| |a#724#0#0| |a#724#1#0| |a#724#2#0|)) :qid |ARMdefsd.748:26| :skolemid |4066| ))) :qid |unknown.0:0| :skolemid |4067| :pattern ( (_module.AbsPTE.AbsPTE_q d@@255)) )))
(assert (forall ((|a#725#0#0| Int) (|a#725#1#0| Bool) (|a#725#2#0| Bool) ) (!  (and (=> ($Is (|#_module.AbsPTE.AbsPTE| |a#725#0#0| |a#725#1#0| |a#725#2#0|) Tclass._module.AbsPTE) (and (and ($Is (int_2_U |a#725#0#0|) Tclass._module.addr) ($Is (bool_2_U |a#725#1#0|) TBool)) ($Is (bool_2_U |a#725#2#0|) TBool))) (=> (and (and ($Is (int_2_U |a#725#0#0|) Tclass._module.addr) ($Is (bool_2_U |a#725#1#0|) TBool)) ($Is (bool_2_U |a#725#2#0|) TBool)) ($Is (|#_module.AbsPTE.AbsPTE| |a#725#0#0| |a#725#1#0| |a#725#2#0|) Tclass._module.AbsPTE))) :qid |ARMdefsd.748:26| :skolemid |4068| :pattern ( ($Is (|#_module.AbsPTE.AbsPTE| |a#725#0#0| |a#725#1#0| |a#725#2#0|) Tclass._module.AbsPTE)) )))
(assert (forall ((|a#726#0#0| Int) (|a#726#1#0| Bool) (|a#726#2#0| Bool) ($h@@108 T@U) ) (!  (=> (and (= (type $h@@108) (MapType1Type refType)) ($IsGoodHeap $h@@108)) (and (=> ($IsAlloc (|#_module.AbsPTE.AbsPTE| |a#726#0#0| |a#726#1#0| |a#726#2#0|) Tclass._module.AbsPTE $h@@108) (and (and ($IsAlloc (int_2_U |a#726#0#0|) Tclass._module.addr $h@@108) ($IsAlloc (bool_2_U |a#726#1#0|) TBool $h@@108)) ($IsAlloc (bool_2_U |a#726#2#0|) TBool $h@@108))) (=> (and (and ($IsAlloc (int_2_U |a#726#0#0|) Tclass._module.addr $h@@108) ($IsAlloc (bool_2_U |a#726#1#0|) TBool $h@@108)) ($IsAlloc (bool_2_U |a#726#2#0|) TBool $h@@108)) ($IsAlloc (|#_module.AbsPTE.AbsPTE| |a#726#0#0| |a#726#1#0| |a#726#2#0|) Tclass._module.AbsPTE $h@@108)))) :qid |ARMdefsd.748:26| :skolemid |4069| :pattern ( ($IsAlloc (|#_module.AbsPTE.AbsPTE| |a#726#0#0| |a#726#1#0| |a#726#2#0|) Tclass._module.AbsPTE $h@@108)) )))
(assert (forall ((|a#727#0#0| Int) (|a#727#1#0| T@U) (|a#727#2#0| T@U) ) (!  (=> (and (= (type |a#727#1#0|) boolType) (= (type |a#727#2#0|) boolType)) (= (|#_module.AbsPTE.AbsPTE| (LitInt |a#727#0#0|) (U_2_bool (Lit |a#727#1#0|)) (U_2_bool (Lit |a#727#2#0|))) (Lit (|#_module.AbsPTE.AbsPTE| |a#727#0#0| (U_2_bool |a#727#1#0|) (U_2_bool |a#727#2#0|))))) :qid |ARMdefsd.748:26| :skolemid |4070| :pattern ( (|#_module.AbsPTE.AbsPTE| (LitInt |a#727#0#0|) (U_2_bool (Lit |a#727#1#0|)) (U_2_bool (Lit |a#727#2#0|)))) )))
(assert (forall ((|a#728#0#0| Int) (|a#728#1#0| Bool) (|a#728#2#0| Bool) ) (! (= (_module.AbsPTE.phys (|#_module.AbsPTE.AbsPTE| |a#728#0#0| |a#728#1#0| |a#728#2#0|)) |a#728#0#0|) :qid |ARMdefsd.748:26| :skolemid |4071| :pattern ( (|#_module.AbsPTE.AbsPTE| |a#728#0#0| |a#728#1#0| |a#728#2#0|)) )))
(assert (forall ((|a#729#0#0| Int) (|a#729#1#0| Bool) (|a#729#2#0| Bool) ) (!  (and (=> (_module.AbsPTE.write (|#_module.AbsPTE.AbsPTE| |a#729#0#0| |a#729#1#0| |a#729#2#0|)) |a#729#1#0|) (=> |a#729#1#0| (_module.AbsPTE.write (|#_module.AbsPTE.AbsPTE| |a#729#0#0| |a#729#1#0| |a#729#2#0|)))) :qid |ARMdefsd.748:26| :skolemid |4072| :pattern ( (|#_module.AbsPTE.AbsPTE| |a#729#0#0| |a#729#1#0| |a#729#2#0|)) )))
(assert (forall ((|a#730#0#0| Int) (|a#730#1#0| Bool) (|a#730#2#0| Bool) ) (!  (and (=> (_module.AbsPTE.exec (|#_module.AbsPTE.AbsPTE| |a#730#0#0| |a#730#1#0| |a#730#2#0|)) |a#730#2#0|) (=> |a#730#2#0| (_module.AbsPTE.exec (|#_module.AbsPTE.AbsPTE| |a#730#0#0| |a#730#1#0| |a#730#2#0|)))) :qid |ARMdefsd.748:26| :skolemid |4073| :pattern ( (|#_module.AbsPTE.AbsPTE| |a#730#0#0| |a#730#1#0| |a#730#2#0|)) )))
(assert (forall ((d@@256 T@U) ) (!  (=> (and (= (type d@@256) DatatypeTypeType) (|$IsA#_module.AbsPTE| d@@256)) (_module.AbsPTE.AbsPTE_q d@@256)) :qid |unknown.0:0| :skolemid |4074| :pattern ( (|$IsA#_module.AbsPTE| d@@256)) )))
(assert (forall ((d@@257 T@U) ) (!  (=> (and (= (type d@@257) DatatypeTypeType) ($Is d@@257 Tclass._module.AbsPTE)) (_module.AbsPTE.AbsPTE_q d@@257)) :qid |unknown.0:0| :skolemid |4075| :pattern ( (_module.AbsPTE.AbsPTE_q d@@257) ($Is d@@257 Tclass._module.AbsPTE)) )))
(assert (= (DatatypeCtorId |#_module.Maybe.Nothing|) |##_module.Maybe.Nothing|))
(assert (forall ((d@@258 T@U) ) (!  (=> (= (type d@@258) DatatypeTypeType) (and (=> (_module.Maybe.Nothing_q d@@258) (= (DatatypeCtorId d@@258) |##_module.Maybe.Nothing|)) (=> (= (DatatypeCtorId d@@258) |##_module.Maybe.Nothing|) (_module.Maybe.Nothing_q d@@258)))) :qid |unknown.0:0| :skolemid |4076| :pattern ( (_module.Maybe.Nothing_q d@@258)) )))
(assert (forall ((d@@259 T@U) ) (!  (=> (and (= (type d@@259) DatatypeTypeType) (_module.Maybe.Nothing_q d@@259)) (= d@@259 |#_module.Maybe.Nothing|)) :qid |unknown.0:0| :skolemid |4077| :pattern ( (_module.Maybe.Nothing_q d@@259)) )))
(assert (forall ((_module.Maybe$T@@2 T@U) ) (!  (=> (= (type _module.Maybe$T@@2) TyType) ($Is |#_module.Maybe.Nothing| (Tclass._module.Maybe _module.Maybe$T@@2))) :qid |unknown.0:0| :skolemid |4078| :pattern ( ($Is |#_module.Maybe.Nothing| (Tclass._module.Maybe _module.Maybe$T@@2))) )))
(assert (forall ((_module.Maybe$T@@3 T@U) ($h@@109 T@U) ) (!  (=> (and (and (= (type _module.Maybe$T@@3) TyType) (= (type $h@@109) (MapType1Type refType))) ($IsGoodHeap $h@@109)) ($IsAlloc |#_module.Maybe.Nothing| (Tclass._module.Maybe _module.Maybe$T@@3) $h@@109)) :qid |unknown.0:0| :skolemid |4079| :pattern ( ($IsAlloc |#_module.Maybe.Nothing| (Tclass._module.Maybe _module.Maybe$T@@3) $h@@109)) )))
(assert (= |#_module.Maybe.Nothing| (Lit |#_module.Maybe.Nothing|)))
(assert (forall ((|a#736#0#0| T@U) ) (!  (=> (= (type |a#736#0#0|) BoxType) (= (DatatypeCtorId (|#_module.Maybe.Just| |a#736#0#0|)) |##_module.Maybe.Just|)) :qid |Maybedfy.1:36| :skolemid |4080| :pattern ( (|#_module.Maybe.Just| |a#736#0#0|)) )))
(assert (forall ((d@@260 T@U) ) (!  (=> (= (type d@@260) DatatypeTypeType) (and (=> (_module.Maybe.Just_q d@@260) (= (DatatypeCtorId d@@260) |##_module.Maybe.Just|)) (=> (= (DatatypeCtorId d@@260) |##_module.Maybe.Just|) (_module.Maybe.Just_q d@@260)))) :qid |unknown.0:0| :skolemid |4081| :pattern ( (_module.Maybe.Just_q d@@260)) )))
(assert (forall ((d@@261 T@U) ) (!  (=> (and (= (type d@@261) DatatypeTypeType) (_module.Maybe.Just_q d@@261)) (exists ((|a#737#0#0| T@U) ) (!  (and (= (type |a#737#0#0|) BoxType) (= d@@261 (|#_module.Maybe.Just| |a#737#0#0|))) :qid |Maybedfy.1:36| :skolemid |4082| :no-pattern (type |a#737#0#0|) :no-pattern (U_2_int |a#737#0#0|) :no-pattern (U_2_bool |a#737#0#0|) ))) :qid |unknown.0:0| :skolemid |4083| :pattern ( (_module.Maybe.Just_q d@@261)) )))
(assert (forall ((_module.Maybe$T@@4 T@U) (|a#738#0#0| T@U) ) (!  (=> (and (= (type _module.Maybe$T@@4) TyType) (= (type |a#738#0#0|) BoxType)) (and (=> ($Is (|#_module.Maybe.Just| |a#738#0#0|) (Tclass._module.Maybe _module.Maybe$T@@4)) ($IsBox |a#738#0#0| _module.Maybe$T@@4)) (=> ($IsBox |a#738#0#0| _module.Maybe$T@@4) ($Is (|#_module.Maybe.Just| |a#738#0#0|) (Tclass._module.Maybe _module.Maybe$T@@4))))) :qid |unknown.0:0| :skolemid |4084| :pattern ( ($Is (|#_module.Maybe.Just| |a#738#0#0|) (Tclass._module.Maybe _module.Maybe$T@@4))) )))
(assert (forall ((_module.Maybe$T@@5 T@U) (|a#739#0#0| T@U) ($h@@110 T@U) ) (!  (=> (and (and (and (= (type _module.Maybe$T@@5) TyType) (= (type |a#739#0#0|) BoxType)) (= (type $h@@110) (MapType1Type refType))) ($IsGoodHeap $h@@110)) (and (=> ($IsAlloc (|#_module.Maybe.Just| |a#739#0#0|) (Tclass._module.Maybe _module.Maybe$T@@5) $h@@110) ($IsAllocBox |a#739#0#0| _module.Maybe$T@@5 $h@@110)) (=> ($IsAllocBox |a#739#0#0| _module.Maybe$T@@5 $h@@110) ($IsAlloc (|#_module.Maybe.Just| |a#739#0#0|) (Tclass._module.Maybe _module.Maybe$T@@5) $h@@110)))) :qid |unknown.0:0| :skolemid |4085| :pattern ( ($IsAlloc (|#_module.Maybe.Just| |a#739#0#0|) (Tclass._module.Maybe _module.Maybe$T@@5) $h@@110)) )))
(assert (forall ((|a#740#0#0| T@U) ) (!  (=> (= (type |a#740#0#0|) BoxType) (= (|#_module.Maybe.Just| (Lit |a#740#0#0|)) (Lit (|#_module.Maybe.Just| |a#740#0#0|)))) :qid |Maybedfy.1:36| :skolemid |4086| :pattern ( (|#_module.Maybe.Just| (Lit |a#740#0#0|))) )))
(assert (forall ((|a#741#0#0| T@U) ) (!  (=> (= (type |a#741#0#0|) BoxType) (= (_module.Maybe.v (|#_module.Maybe.Just| |a#741#0#0|)) |a#741#0#0|)) :qid |Maybedfy.1:36| :skolemid |4087| :pattern ( (|#_module.Maybe.Just| |a#741#0#0|)) )))
(assert (forall ((|a#742#0#0| T@U) ) (!  (=> (= (type |a#742#0#0|) BoxType) (< (BoxRank |a#742#0#0|) (DtRank (|#_module.Maybe.Just| |a#742#0#0|)))) :qid |Maybedfy.1:36| :skolemid |4088| :pattern ( (|#_module.Maybe.Just| |a#742#0#0|)) )))
(assert (forall ((d@@262 T@U) ) (!  (=> (and (= (type d@@262) DatatypeTypeType) (|$IsA#_module.Maybe| d@@262)) (or (_module.Maybe.Nothing_q d@@262) (_module.Maybe.Just_q d@@262))) :qid |unknown.0:0| :skolemid |4089| :pattern ( (|$IsA#_module.Maybe| d@@262)) )))
(assert (forall ((_module.Maybe$T@@6 T@U) (d@@263 T@U) ) (!  (=> (and (and (= (type _module.Maybe$T@@6) TyType) (= (type d@@263) DatatypeTypeType)) ($Is d@@263 (Tclass._module.Maybe _module.Maybe$T@@6))) (or (_module.Maybe.Nothing_q d@@263) (_module.Maybe.Just_q d@@263))) :qid |unknown.0:0| :skolemid |4090| :pattern ( (_module.Maybe.Just_q d@@263) ($Is d@@263 (Tclass._module.Maybe _module.Maybe$T@@6))) :pattern ( (_module.Maybe.Nothing_q d@@263) ($Is d@@263 (Tclass._module.Maybe _module.Maybe$T@@6))) )))
(assert (forall ((|x#0@@177| T@U) ) (!  (=> (= (type |x#0@@177|) intType) (and (=> ($Is |x#0@@177| Tclass._module.word) (_module.__default.isUInt32 (U_2_int |x#0@@177|))) (=> (_module.__default.isUInt32 (U_2_int |x#0@@177|)) ($Is |x#0@@177| Tclass._module.word)))) :qid |unknown.0:0| :skolemid |4091| :pattern ( ($Is |x#0@@177| Tclass._module.word)) )))
(assert (forall ((|x#0@@178| T@U) ($h@@111 T@U) ) (!  (=> (and (= (type |x#0@@178|) intType) (= (type $h@@111) (MapType1Type refType))) ($IsAlloc |x#0@@178| Tclass._module.word $h@@111)) :qid |unknown.0:0| :skolemid |4092| :pattern ( ($IsAlloc |x#0@@178| Tclass._module.word $h@@111)) )))
(assert (forall ((|x#0@@179| T@U) ) (!  (=> (= (type |x#0@@179|) intType) (and (=> ($Is |x#0@@179| Tclass._module.addr) (and (_module.__default.isUInt32 (U_2_int |x#0@@179|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (U_2_int |x#0@@179|)))) (=> (and (_module.__default.isUInt32 (U_2_int |x#0@@179|)) (_module.__default.WordAligned StartFuel__module._default.WordAligned (U_2_int |x#0@@179|))) ($Is |x#0@@179| Tclass._module.addr)))) :qid |unknown.0:0| :skolemid |4093| :pattern ( ($Is |x#0@@179| Tclass._module.addr)) )))
(assert (forall ((|x#0@@180| T@U) ($h@@112 T@U) ) (!  (=> (and (= (type |x#0@@180|) intType) (= (type $h@@112) (MapType1Type refType))) ($IsAlloc |x#0@@180| Tclass._module.addr $h@@112)) :qid |unknown.0:0| :skolemid |4094| :pattern ( ($IsAlloc |x#0@@180| Tclass._module.addr $h@@112)) )))
(assert (forall ((|s#0@@295| T@U) ) (!  (=> (= (type |s#0@@295|) intType) (and (=> ($Is |s#0@@295| Tclass._module.shift__amount) (and (INTERNAL_le_boogie 0 (U_2_int |s#0@@295|)) (INTERNAL_lt_boogie (U_2_int |s#0@@295|) 32))) (=> (and (INTERNAL_le_boogie 0 (U_2_int |s#0@@295|)) (INTERNAL_lt_boogie (U_2_int |s#0@@295|) 32)) ($Is |s#0@@295| Tclass._module.shift__amount)))) :qid |unknown.0:0| :skolemid |4095| :pattern ( ($Is |s#0@@295| Tclass._module.shift__amount)) )))
(assert (forall ((|s#0@@296| T@U) ($h@@113 T@U) ) (!  (=> (and (= (type |s#0@@296|) intType) (= (type $h@@113) (MapType1Type refType))) ($IsAlloc |s#0@@296| Tclass._module.shift__amount $h@@113)) :qid |unknown.0:0| :skolemid |4096| :pattern ( ($IsAlloc |s#0@@296| Tclass._module.shift__amount $h@@113)) )))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@466 T@T) (arg1@@212 T@T) ) (! (= (Ctor (MapType8Type arg0@@466 arg1@@212)) 27) :qid |ctor:MapType8Type| )) (forall ((arg0@@467 T@T) (arg1@@213 T@T) ) (! (= (MapType8TypeInv0 (MapType8Type arg0@@467 arg1@@213)) arg0@@467) :qid |typeInv:MapType8TypeInv0| :pattern ( (MapType8Type arg0@@467 arg1@@213)) ))) (forall ((arg0@@468 T@T) (arg1@@214 T@T) ) (! (= (MapType8TypeInv1 (MapType8Type arg0@@468 arg1@@214)) arg1@@214) :qid |typeInv:MapType8TypeInv1| :pattern ( (MapType8Type arg0@@468 arg1@@214)) ))) (forall ((arg0@@469 T@U) (arg1@@215 T@U) (arg2@@141 T@U) ) (! (let ((aVar1@@8 (MapType8TypeInv1 (type arg0@@469)))) (= (type (MapType8Select arg0@@469 arg1@@215 arg2@@141)) aVar1@@8)) :qid |funType:MapType8Select| :pattern ( (MapType8Select arg0@@469 arg1@@215 arg2@@141)) ))) (forall ((arg0@@470 T@U) (arg1@@216 T@U) (arg2@@142 T@U) (arg3@@79 T@U) ) (! (let ((aVar1@@9 (type arg3@@79))) (let ((aVar0@@7 (type arg1@@216))) (= (type (MapType8Store arg0@@470 arg1@@216 arg2@@142 arg3@@79)) (MapType8Type aVar0@@7 aVar1@@9)))) :qid |funType:MapType8Store| :pattern ( (MapType8Store arg0@@470 arg1@@216 arg2@@142 arg3@@79)) ))) (forall ((m@@68 T@U) (x0@@47 T@U) (x1@@44 T@U) (val@@48 T@U) ) (! (let ((aVar1@@10 (MapType8TypeInv1 (type m@@68)))) (=> (= (type val@@48) aVar1@@10) (= (MapType8Select (MapType8Store m@@68 x0@@47 x1@@44 val@@48) x0@@47 x1@@44) val@@48))) :qid |mapAx0:MapType8Select| :weight 0 ))) (and (and (forall ((val@@49 T@U) (m@@69 T@U) (x0@@48 T@U) (x1@@45 T@U) (y0@@39 T@U) (y1@@37 T@U) ) (!  (or (= x0@@48 y0@@39) (= (MapType8Select (MapType8Store m@@69 x0@@48 x1@@45 val@@49) y0@@39 y1@@37) (MapType8Select m@@69 y0@@39 y1@@37))) :qid |mapAx1:MapType8Select:0| :weight 0 )) (forall ((val@@50 T@U) (m@@70 T@U) (x0@@49 T@U) (x1@@46 T@U) (y0@@40 T@U) (y1@@38 T@U) ) (!  (or (= x1@@46 y1@@38) (= (MapType8Select (MapType8Store m@@70 x0@@49 x1@@46 val@@50) y0@@40 y1@@38) (MapType8Select m@@70 y0@@40 y1@@38))) :qid |mapAx1:MapType8Select:1| :weight 0 ))) (forall ((val@@51 T@U) (m@@71 T@U) (x0@@50 T@U) (x1@@47 T@U) (y0@@41 T@U) (y1@@39 T@U) ) (!  (or true (= (MapType8Select (MapType8Store m@@71 x0@@50 x1@@47 val@@51) y0@@41 y1@@39) (MapType8Select m@@71 y0@@41 y1@@39))) :qid |mapAx2:MapType8Select| :weight 0 )))) (forall ((arg0@@471 T@U) (arg1@@217 T@U) (arg2@@143 T@U) ) (! (= (type (|lambda#0| arg0@@471 arg1@@217 arg2@@143)) (MapType8Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@471 arg1@@217 arg2@@143)) ))))
(assert (forall (($o@@8 T@U) ($f@@0 T@U) (alloc@@0 T@U) (null@@0 T@U) ($Heap@@252 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (and (and (= (type $o@@8) refType) (= (type $f@@0) (FieldType alpha@@7))) (= (type alloc@@0) (FieldType boolType))) (= (type null@@0) refType)) (= (type $Heap@@252) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#0| alloc@@0 null@@0 $Heap@@252) $o@@8 $f@@0))  (=> (and (not (= $o@@8 null@@0)) (U_2_bool (MapType1Select $Heap@@252 $o@@8 alloc@@0))) false)))) :qid |sha256id.10:11| :skolemid |4097| :pattern ( (MapType8Select (|lambda#0| alloc@@0 null@@0 $Heap@@252) $o@@8 $f@@0)) )))
(assert (forall ((arg0@@472 T@U) (arg1@@218 T@U) (arg2@@144 T@U) ) (! (= (type (|lambda#1| arg0@@472 arg1@@218 arg2@@144)) (MapType8Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@472 arg1@@218 arg2@@144)) )))
(assert (forall (($o@@9 T@U) ($f@@1 T@U) (alloc@@1 T@U) (null@@1 T@U) ($Heap@@253 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (and (and (= (type $o@@9) refType) (= (type $f@@1) (FieldType alpha@@8))) (= (type alloc@@1) (FieldType boolType))) (= (type null@@1) refType)) (= (type $Heap@@253) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#1| alloc@@1 null@@1 $Heap@@253) $o@@9 $f@@1))  (=> (and (not (= $o@@9 null@@1)) (U_2_bool (MapType1Select $Heap@@253 $o@@9 alloc@@1))) false)))) :qid |sha256id.10:11| :skolemid |4098| :pattern ( (MapType8Select (|lambda#1| alloc@@1 null@@1 $Heap@@253) $o@@9 $f@@1)) )))
(assert (forall ((arg0@@473 T@U) (arg1@@219 T@U) (arg2@@145 T@U) ) (! (= (type (|lambda#2| arg0@@473 arg1@@219 arg2@@145)) (MapType8Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@473 arg1@@219 arg2@@145)) )))
(assert (forall (($o@@10 T@U) ($f@@2 T@U) (alloc@@2 T@U) (null@@2 T@U) ($Heap@@254 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (and (and (= (type $o@@10) refType) (= (type $f@@2) (FieldType alpha@@9))) (= (type alloc@@2) (FieldType boolType))) (= (type null@@2) refType)) (= (type $Heap@@254) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#2| alloc@@2 null@@2 $Heap@@254) $o@@10 $f@@2))  (=> (and (not (= $o@@10 null@@2)) (U_2_bool (MapType1Select $Heap@@254 $o@@10 alloc@@2))) false)))) :qid |sha256id.21:11| :skolemid |4099| :pattern ( (MapType8Select (|lambda#2| alloc@@2 null@@2 $Heap@@254) $o@@10 $f@@2)) )))
(assert (forall ((arg0@@474 T@U) (arg1@@220 T@U) (arg2@@146 T@U) ) (! (= (type (|lambda#3| arg0@@474 arg1@@220 arg2@@146)) (MapType8Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@474 arg1@@220 arg2@@146)) )))
(assert (forall (($o@@11 T@U) ($f@@3 T@U) (alloc@@3 T@U) (null@@3 T@U) ($Heap@@255 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (and (and (= (type $o@@11) refType) (= (type $f@@3) (FieldType alpha@@10))) (= (type alloc@@3) (FieldType boolType))) (= (type null@@3) refType)) (= (type $Heap@@255) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#3| alloc@@3 null@@3 $Heap@@255) $o@@11 $f@@3))  (=> (and (not (= $o@@11 null@@3)) (U_2_bool (MapType1Select $Heap@@255 $o@@11 alloc@@3))) false)))) :qid |sha256id.21:11| :skolemid |4100| :pattern ( (MapType8Select (|lambda#3| alloc@@3 null@@3 $Heap@@255) $o@@11 $f@@3)) )))
(assert (forall ((arg0@@475 T@U) (arg1@@221 T@U) (arg2@@147 T@U) ) (! (= (type (|lambda#4| arg0@@475 arg1@@221 arg2@@147)) (MapType8Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@475 arg1@@221 arg2@@147)) )))
(assert (forall (($o@@12 T@U) ($f@@4 T@U) (alloc@@4 T@U) (null@@4 T@U) ($Heap@@256 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type $o@@12) refType) (= (type $f@@4) (FieldType alpha@@11))) (= (type alloc@@4) (FieldType boolType))) (= (type null@@4) refType)) (= (type $Heap@@256) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#4| alloc@@4 null@@4 $Heap@@256) $o@@12 $f@@4))  (=> (and (not (= $o@@12 null@@4)) (U_2_bool (MapType1Select $Heap@@256 $o@@12 alloc@@4))) false)))) :qid |sha256id.28:11| :skolemid |4101| :pattern ( (MapType8Select (|lambda#4| alloc@@4 null@@4 $Heap@@256) $o@@12 $f@@4)) )))
(assert (forall ((arg0@@476 T@U) (arg1@@222 T@U) (arg2@@148 T@U) ) (! (= (type (|lambda#5| arg0@@476 arg1@@222 arg2@@148)) (MapType8Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@476 arg1@@222 arg2@@148)) )))
(assert (forall (($o@@13 T@U) ($f@@5 T@U) (alloc@@5 T@U) (null@@5 T@U) ($Heap@@257 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type $o@@13) refType) (= (type $f@@5) (FieldType alpha@@12))) (= (type alloc@@5) (FieldType boolType))) (= (type null@@5) refType)) (= (type $Heap@@257) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#5| alloc@@5 null@@5 $Heap@@257) $o@@13 $f@@5))  (=> (and (not (= $o@@13 null@@5)) (U_2_bool (MapType1Select $Heap@@257 $o@@13 alloc@@5))) false)))) :qid |sha256id.28:11| :skolemid |4102| :pattern ( (MapType8Select (|lambda#5| alloc@@5 null@@5 $Heap@@257) $o@@13 $f@@5)) )))
(assert (forall ((arg0@@477 T@U) (arg1@@223 T@U) (arg2@@149 T@U) ) (! (= (type (|lambda#6| arg0@@477 arg1@@223 arg2@@149)) (MapType8Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@477 arg1@@223 arg2@@149)) )))
(assert (forall (($o@@14 T@U) ($f@@6 T@U) (alloc@@6 T@U) (null@@6 T@U) ($Heap@@258 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type $o@@14) refType) (= (type $f@@6) (FieldType alpha@@13))) (= (type alloc@@6) (FieldType boolType))) (= (type null@@6) refType)) (= (type $Heap@@258) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#6| alloc@@6 null@@6 $Heap@@258) $o@@14 $f@@6))  (=> (and (not (= $o@@14 null@@6)) (U_2_bool (MapType1Select $Heap@@258 $o@@14 alloc@@6))) false)))) :qid |sha256id.35:11| :skolemid |4103| :pattern ( (MapType8Select (|lambda#6| alloc@@6 null@@6 $Heap@@258) $o@@14 $f@@6)) )))
(assert (forall ((arg0@@478 T@U) (arg1@@224 T@U) (arg2@@150 T@U) ) (! (= (type (|lambda#7| arg0@@478 arg1@@224 arg2@@150)) (MapType8Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@478 arg1@@224 arg2@@150)) )))
(assert (forall (($o@@15 T@U) ($f@@7 T@U) (alloc@@7 T@U) (null@@7 T@U) ($Heap@@259 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type $o@@15) refType) (= (type $f@@7) (FieldType alpha@@14))) (= (type alloc@@7) (FieldType boolType))) (= (type null@@7) refType)) (= (type $Heap@@259) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#7| alloc@@7 null@@7 $Heap@@259) $o@@15 $f@@7))  (=> (and (not (= $o@@15 null@@7)) (U_2_bool (MapType1Select $Heap@@259 $o@@15 alloc@@7))) false)))) :qid |sha256id.35:11| :skolemid |4104| :pattern ( (MapType8Select (|lambda#7| alloc@@7 null@@7 $Heap@@259) $o@@15 $f@@7)) )))
(assert (forall ((arg0@@479 T@U) (arg1@@225 T@U) (arg2@@151 T@U) ) (! (= (type (|lambda#8| arg0@@479 arg1@@225 arg2@@151)) (MapType8Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@479 arg1@@225 arg2@@151)) )))
(assert (forall (($o@@16 T@U) ($f@@8 T@U) (alloc@@8 T@U) (null@@8 T@U) ($Heap@@260 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type $o@@16) refType) (= (type $f@@8) (FieldType alpha@@15))) (= (type alloc@@8) (FieldType boolType))) (= (type null@@8) refType)) (= (type $Heap@@260) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#8| alloc@@8 null@@8 $Heap@@260) $o@@16 $f@@8))  (=> (and (not (= $o@@16 null@@8)) (U_2_bool (MapType1Select $Heap@@260 $o@@16 alloc@@8))) false)))) :qid |sha256id.44:11| :skolemid |4105| :pattern ( (MapType8Select (|lambda#8| alloc@@8 null@@8 $Heap@@260) $o@@16 $f@@8)) )))
(assert (forall ((arg0@@480 T@U) (arg1@@226 T@U) (arg2@@152 T@U) ) (! (= (type (|lambda#9| arg0@@480 arg1@@226 arg2@@152)) (MapType8Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@480 arg1@@226 arg2@@152)) )))
(assert (forall (($o@@17 T@U) ($f@@9 T@U) (alloc@@9 T@U) (null@@9 T@U) ($Heap@@261 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type $o@@17) refType) (= (type $f@@9) (FieldType alpha@@16))) (= (type alloc@@9) (FieldType boolType))) (= (type null@@9) refType)) (= (type $Heap@@261) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#9| alloc@@9 null@@9 $Heap@@261) $o@@17 $f@@9))  (=> (and (not (= $o@@17 null@@9)) (U_2_bool (MapType1Select $Heap@@261 $o@@17 alloc@@9))) false)))) :qid |sha256id.44:11| :skolemid |4106| :pattern ( (MapType8Select (|lambda#9| alloc@@9 null@@9 $Heap@@261) $o@@17 $f@@9)) )))
(assert (forall ((arg0@@481 T@U) (arg1@@227 T@U) (arg2@@153 T@U) ) (! (= (type (|lambda#10| arg0@@481 arg1@@227 arg2@@153)) (MapType8Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@481 arg1@@227 arg2@@153)) )))
(assert (forall (($o@@18 T@U) ($f@@10 T@U) (alloc@@10 T@U) (null@@10 T@U) ($Heap@@262 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type $o@@18) refType) (= (type $f@@10) (FieldType alpha@@17))) (= (type alloc@@10) (FieldType boolType))) (= (type null@@10) refType)) (= (type $Heap@@262) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#10| alloc@@10 null@@10 $Heap@@262) $o@@18 $f@@10))  (=> (and (not (= $o@@18 null@@10)) (U_2_bool (MapType1Select $Heap@@262 $o@@18 alloc@@10))) false)))) :qid |sha256id.55:20| :skolemid |4107| :pattern ( (MapType8Select (|lambda#10| alloc@@10 null@@10 $Heap@@262) $o@@18 $f@@10)) )))
(assert (forall ((arg0@@482 T@U) (arg1@@228 T@U) (arg2@@154 T@U) ) (! (= (type (|lambda#11| arg0@@482 arg1@@228 arg2@@154)) (MapType8Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@482 arg1@@228 arg2@@154)) )))
(assert (forall (($o@@19 T@U) ($f@@11 T@U) (alloc@@11 T@U) (null@@11 T@U) ($Heap@@263 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type $o@@19) refType) (= (type $f@@11) (FieldType alpha@@18))) (= (type alloc@@11) (FieldType boolType))) (= (type null@@11) refType)) (= (type $Heap@@263) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#11| alloc@@11 null@@11 $Heap@@263) $o@@19 $f@@11))  (=> (and (not (= $o@@19 null@@11)) (U_2_bool (MapType1Select $Heap@@263 $o@@19 alloc@@11))) false)))) :qid |sha256id.55:20| :skolemid |4108| :pattern ( (MapType8Select (|lambda#11| alloc@@11 null@@11 $Heap@@263) $o@@19 $f@@11)) )))
(assert (forall ((arg0@@483 T@U) (arg1@@229 T@U) (arg2@@155 T@U) ) (! (= (type (|lambda#12| arg0@@483 arg1@@229 arg2@@155)) (MapType8Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@483 arg1@@229 arg2@@155)) )))
(assert (forall (($o@@20 T@U) ($f@@12 T@U) (alloc@@12 T@U) (null@@12 T@U) ($Heap@@264 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type $o@@20) refType) (= (type $f@@12) (FieldType alpha@@19))) (= (type alloc@@12) (FieldType boolType))) (= (type null@@12) refType)) (= (type $Heap@@264) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#12| alloc@@12 null@@12 $Heap@@264) $o@@20 $f@@12))  (=> (and (not (= $o@@20 null@@12)) (U_2_bool (MapType1Select $Heap@@264 $o@@20 alloc@@12))) false)))) :qid |sha256id.80:11| :skolemid |4109| :pattern ( (MapType8Select (|lambda#12| alloc@@12 null@@12 $Heap@@264) $o@@20 $f@@12)) )))
(assert (forall ((arg0@@484 T@U) (arg1@@230 T@U) (arg2@@156 T@U) ) (! (= (type (|lambda#13| arg0@@484 arg1@@230 arg2@@156)) (MapType8Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@484 arg1@@230 arg2@@156)) )))
(assert (forall (($o@@21 T@U) ($f@@13 T@U) (alloc@@13 T@U) (null@@13 T@U) ($Heap@@265 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type $o@@21) refType) (= (type $f@@13) (FieldType alpha@@20))) (= (type alloc@@13) (FieldType boolType))) (= (type null@@13) refType)) (= (type $Heap@@265) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#13| alloc@@13 null@@13 $Heap@@265) $o@@21 $f@@13))  (=> (and (not (= $o@@21 null@@13)) (U_2_bool (MapType1Select $Heap@@265 $o@@21 alloc@@13))) false)))) :qid |sha256id.80:11| :skolemid |4110| :pattern ( (MapType8Select (|lambda#13| alloc@@13 null@@13 $Heap@@265) $o@@21 $f@@13)) )))
(assert (forall ((arg0@@485 T@U) (arg1@@231 T@U) (arg2@@157 T@U) ) (! (= (type (|lambda#14| arg0@@485 arg1@@231 arg2@@157)) (MapType8Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@485 arg1@@231 arg2@@157)) )))
(assert (forall (($o@@22 T@U) ($f@@14 T@U) (alloc@@14 T@U) (null@@14 T@U) ($Heap@@266 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type $o@@22) refType) (= (type $f@@14) (FieldType alpha@@21))) (= (type alloc@@14) (FieldType boolType))) (= (type null@@14) refType)) (= (type $Heap@@266) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#14| alloc@@14 null@@14 $Heap@@266) $o@@22 $f@@14))  (=> (and (not (= $o@@22 null@@14)) (U_2_bool (MapType1Select $Heap@@266 $o@@22 alloc@@14))) false)))) :qid |sha256id.86:11| :skolemid |4111| :pattern ( (MapType8Select (|lambda#14| alloc@@14 null@@14 $Heap@@266) $o@@22 $f@@14)) )))
(assert (forall ((arg0@@486 T@U) (arg1@@232 T@U) (arg2@@158 T@U) ) (! (= (type (|lambda#15| arg0@@486 arg1@@232 arg2@@158)) (MapType8Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@486 arg1@@232 arg2@@158)) )))
(assert (forall (($o@@23 T@U) ($f@@15 T@U) (alloc@@15 T@U) (null@@15 T@U) ($Heap@@267 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type $o@@23) refType) (= (type $f@@15) (FieldType alpha@@22))) (= (type alloc@@15) (FieldType boolType))) (= (type null@@15) refType)) (= (type $Heap@@267) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#15| alloc@@15 null@@15 $Heap@@267) $o@@23 $f@@15))  (=> (and (not (= $o@@23 null@@15)) (U_2_bool (MapType1Select $Heap@@267 $o@@23 alloc@@15))) false)))) :qid |sha256id.86:11| :skolemid |4112| :pattern ( (MapType8Select (|lambda#15| alloc@@15 null@@15 $Heap@@267) $o@@23 $f@@15)) )))
(assert (forall ((arg0@@487 T@U) (arg1@@233 T@U) (arg2@@159 T@U) ) (! (= (type (|lambda#16| arg0@@487 arg1@@233 arg2@@159)) (MapType8Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@487 arg1@@233 arg2@@159)) )))
(assert (forall (($o@@24 T@U) ($f@@16 T@U) (alloc@@16 T@U) (null@@16 T@U) ($Heap@@268 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type $o@@24) refType) (= (type $f@@16) (FieldType alpha@@23))) (= (type alloc@@16) (FieldType boolType))) (= (type null@@16) refType)) (= (type $Heap@@268) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#16| alloc@@16 null@@16 $Heap@@268) $o@@24 $f@@16))  (=> (and (not (= $o@@24 null@@16)) (U_2_bool (MapType1Select $Heap@@268 $o@@24 alloc@@16))) false)))) :qid |sha256id.94:11| :skolemid |4113| :pattern ( (MapType8Select (|lambda#16| alloc@@16 null@@16 $Heap@@268) $o@@24 $f@@16)) )))
(assert (forall ((arg0@@488 T@U) (arg1@@234 T@U) (arg2@@160 T@U) ) (! (= (type (|lambda#17| arg0@@488 arg1@@234 arg2@@160)) (MapType8Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@488 arg1@@234 arg2@@160)) )))
(assert (forall (($o@@25 T@U) ($f@@17 T@U) (alloc@@17 T@U) (null@@17 T@U) ($Heap@@269 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type $o@@25) refType) (= (type $f@@17) (FieldType alpha@@24))) (= (type alloc@@17) (FieldType boolType))) (= (type null@@17) refType)) (= (type $Heap@@269) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#17| alloc@@17 null@@17 $Heap@@269) $o@@25 $f@@17))  (=> (and (not (= $o@@25 null@@17)) (U_2_bool (MapType1Select $Heap@@269 $o@@25 alloc@@17))) false)))) :qid |sha256id.94:11| :skolemid |4114| :pattern ( (MapType8Select (|lambda#17| alloc@@17 null@@17 $Heap@@269) $o@@25 $f@@17)) )))
(assert (forall ((arg0@@489 T@U) (arg1@@235 T@U) (arg2@@161 T@U) ) (! (= (type (|lambda#18| arg0@@489 arg1@@235 arg2@@161)) (MapType8Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@489 arg1@@235 arg2@@161)) )))
(assert (forall (($o@@26 T@U) ($f@@18 T@U) (alloc@@18 T@U) (null@@18 T@U) ($Heap@@270 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type $o@@26) refType) (= (type $f@@18) (FieldType alpha@@25))) (= (type alloc@@18) (FieldType boolType))) (= (type null@@18) refType)) (= (type $Heap@@270) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#18| alloc@@18 null@@18 $Heap@@270) $o@@26 $f@@18))  (=> (and (not (= $o@@26 null@@18)) (U_2_bool (MapType1Select $Heap@@270 $o@@26 alloc@@18))) false)))) :qid |sha256id.103:11| :skolemid |4115| :pattern ( (MapType8Select (|lambda#18| alloc@@18 null@@18 $Heap@@270) $o@@26 $f@@18)) )))
(assert (forall ((arg0@@490 T@U) (arg1@@236 T@U) (arg2@@162 T@U) ) (! (= (type (|lambda#19| arg0@@490 arg1@@236 arg2@@162)) (MapType8Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@490 arg1@@236 arg2@@162)) )))
(assert (forall (($o@@27 T@U) ($f@@19 T@U) (alloc@@19 T@U) (null@@19 T@U) ($Heap@@271 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type $o@@27) refType) (= (type $f@@19) (FieldType alpha@@26))) (= (type alloc@@19) (FieldType boolType))) (= (type null@@19) refType)) (= (type $Heap@@271) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#19| alloc@@19 null@@19 $Heap@@271) $o@@27 $f@@19))  (=> (and (not (= $o@@27 null@@19)) (U_2_bool (MapType1Select $Heap@@271 $o@@27 alloc@@19))) false)))) :qid |sha256id.103:11| :skolemid |4116| :pattern ( (MapType8Select (|lambda#19| alloc@@19 null@@19 $Heap@@271) $o@@27 $f@@19)) )))
(assert (forall ((arg0@@491 T@U) (arg1@@237 T@U) (arg2@@163 T@U) ) (! (= (type (|lambda#20| arg0@@491 arg1@@237 arg2@@163)) (MapType8Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@491 arg1@@237 arg2@@163)) )))
(assert (forall (($o@@28 T@U) ($f@@20 T@U) (alloc@@20 T@U) (null@@20 T@U) ($Heap@@272 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type $o@@28) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type alloc@@20) (FieldType boolType))) (= (type null@@20) refType)) (= (type $Heap@@272) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#20| alloc@@20 null@@20 $Heap@@272) $o@@28 $f@@20))  (=> (and (not (= $o@@28 null@@20)) (U_2_bool (MapType1Select $Heap@@272 $o@@28 alloc@@20))) false)))) :qid |sha256id.116:20| :skolemid |4117| :pattern ( (MapType8Select (|lambda#20| alloc@@20 null@@20 $Heap@@272) $o@@28 $f@@20)) )))
(assert (forall ((arg0@@492 T@U) (arg1@@238 T@U) (arg2@@164 T@U) ) (! (= (type (|lambda#21| arg0@@492 arg1@@238 arg2@@164)) (MapType8Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@492 arg1@@238 arg2@@164)) )))
(assert (forall (($o@@29 T@U) ($f@@21 T@U) (alloc@@21 T@U) (null@@21 T@U) ($Heap@@273 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type $o@@29) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type alloc@@21) (FieldType boolType))) (= (type null@@21) refType)) (= (type $Heap@@273) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#21| alloc@@21 null@@21 $Heap@@273) $o@@29 $f@@21))  (=> (and (not (= $o@@29 null@@21)) (U_2_bool (MapType1Select $Heap@@273 $o@@29 alloc@@21))) false)))) :qid |sha256id.116:20| :skolemid |4118| :pattern ( (MapType8Select (|lambda#21| alloc@@21 null@@21 $Heap@@273) $o@@29 $f@@21)) )))
(assert (forall ((arg0@@493 T@U) (arg1@@239 T@U) (arg2@@165 T@U) ) (! (= (type (|lambda#22| arg0@@493 arg1@@239 arg2@@165)) (MapType8Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@493 arg1@@239 arg2@@165)) )))
(assert (forall (($o@@30 T@U) ($f@@22 T@U) (alloc@@22 T@U) (null@@22 T@U) ($Heap@@274 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@30) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type alloc@@22) (FieldType boolType))) (= (type null@@22) refType)) (= (type $Heap@@274) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#22| alloc@@22 null@@22 $Heap@@274) $o@@30 $f@@22))  (=> (and (not (= $o@@30 null@@22)) (U_2_bool (MapType1Select $Heap@@274 $o@@30 alloc@@22))) false)))) :qid |sha256id.139:7| :skolemid |4119| :pattern ( (MapType8Select (|lambda#22| alloc@@22 null@@22 $Heap@@274) $o@@30 $f@@22)) )))
(assert (forall ((arg0@@494 T@U) (arg1@@240 T@U) (arg2@@166 T@U) ) (! (= (type (|lambda#23| arg0@@494 arg1@@240 arg2@@166)) (MapType8Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@494 arg1@@240 arg2@@166)) )))
(assert (forall (($o@@31 T@U) ($f@@23 T@U) (alloc@@23 T@U) (null@@23 T@U) ($Heap@@275 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@31) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type alloc@@23) (FieldType boolType))) (= (type null@@23) refType)) (= (type $Heap@@275) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#23| alloc@@23 null@@23 $Heap@@275) $o@@31 $f@@23))  (=> (and (not (= $o@@31 null@@23)) (U_2_bool (MapType1Select $Heap@@275 $o@@31 alloc@@23))) false)))) :qid |sha256id.139:7| :skolemid |4120| :pattern ( (MapType8Select (|lambda#23| alloc@@23 null@@23 $Heap@@275) $o@@31 $f@@23)) )))
(assert (forall ((arg0@@495 T@U) (arg1@@241 T@U) (arg2@@167 T@U) ) (! (= (type (|lambda#24| arg0@@495 arg1@@241 arg2@@167)) (MapType8Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@495 arg1@@241 arg2@@167)) )))
(assert (forall (($o@@32 T@U) ($f@@24 T@U) (alloc@@24 T@U) (null@@24 T@U) ($Heap@@276 T@U) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@32) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type alloc@@24) (FieldType boolType))) (= (type null@@24) refType)) (= (type $Heap@@276) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#24| alloc@@24 null@@24 $Heap@@276) $o@@32 $f@@24))  (=> (and (not (= $o@@32 null@@24)) (U_2_bool (MapType1Select $Heap@@276 $o@@32 alloc@@24))) false)))) :qid |sha256id.154:7| :skolemid |4121| :pattern ( (MapType8Select (|lambda#24| alloc@@24 null@@24 $Heap@@276) $o@@32 $f@@24)) )))
(assert (forall ((arg0@@496 T@U) (arg1@@242 T@U) (arg2@@168 T@U) ) (! (= (type (|lambda#25| arg0@@496 arg1@@242 arg2@@168)) (MapType8Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@496 arg1@@242 arg2@@168)) )))
(assert (forall (($o@@33 T@U) ($f@@25 T@U) (alloc@@25 T@U) (null@@25 T@U) ($Heap@@277 T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type $o@@33) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type alloc@@25) (FieldType boolType))) (= (type null@@25) refType)) (= (type $Heap@@277) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#25| alloc@@25 null@@25 $Heap@@277) $o@@33 $f@@25))  (=> (and (not (= $o@@33 null@@25)) (U_2_bool (MapType1Select $Heap@@277 $o@@33 alloc@@25))) false)))) :qid |sha256id.154:7| :skolemid |4122| :pattern ( (MapType8Select (|lambda#25| alloc@@25 null@@25 $Heap@@277) $o@@33 $f@@25)) )))
(assert (forall ((arg0@@497 T@U) (arg1@@243 T@U) (arg2@@169 T@U) ) (! (= (type (|lambda#26| arg0@@497 arg1@@243 arg2@@169)) (MapType8Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@497 arg1@@243 arg2@@169)) )))
(assert (forall (($o@@34 T@U) ($f@@26 T@U) (alloc@@26 T@U) (null@@26 T@U) ($Heap@@278 T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type $o@@34) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type alloc@@26) (FieldType boolType))) (= (type null@@26) refType)) (= (type $Heap@@278) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#26| alloc@@26 null@@26 $Heap@@278) $o@@34 $f@@26))  (=> (and (not (= $o@@34 null@@26)) (U_2_bool (MapType1Select $Heap@@278 $o@@34 alloc@@26))) false)))) :qid |sha256id.171:32| :skolemid |4123| :pattern ( (MapType8Select (|lambda#26| alloc@@26 null@@26 $Heap@@278) $o@@34 $f@@26)) )))
(assert (forall ((arg0@@498 T@U) (arg1@@244 T@U) (arg2@@170 T@U) ) (! (= (type (|lambda#27| arg0@@498 arg1@@244 arg2@@170)) (MapType8Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@498 arg1@@244 arg2@@170)) )))
(assert (forall (($o@@35 T@U) ($f@@27 T@U) (alloc@@27 T@U) (null@@27 T@U) ($Heap@@279 T@U) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@35) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type alloc@@27) (FieldType boolType))) (= (type null@@27) refType)) (= (type $Heap@@279) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#27| alloc@@27 null@@27 $Heap@@279) $o@@35 $f@@27))  (=> (and (not (= $o@@35 null@@27)) (U_2_bool (MapType1Select $Heap@@279 $o@@35 alloc@@27))) false)))) :qid |sha256id.171:32| :skolemid |4124| :pattern ( (MapType8Select (|lambda#27| alloc@@27 null@@27 $Heap@@279) $o@@35 $f@@27)) )))
(assert (forall ((arg0@@499 T@U) (arg1@@245 T@U) (arg2@@171 T@U) ) (! (= (type (|lambda#28| arg0@@499 arg1@@245 arg2@@171)) (MapType8Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@499 arg1@@245 arg2@@171)) )))
(assert (forall (($o@@36 T@U) ($f@@28 T@U) (alloc@@28 T@U) (null@@28 T@U) ($Heap@@280 T@U) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@36) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type alloc@@28) (FieldType boolType))) (= (type null@@28) refType)) (= (type $Heap@@280) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#28| alloc@@28 null@@28 $Heap@@280) $o@@36 $f@@28))  (=> (and (not (= $o@@36 null@@28)) (U_2_bool (MapType1Select $Heap@@280 $o@@36 alloc@@28))) false)))) :qid |sha256id.249:7| :skolemid |4125| :pattern ( (MapType8Select (|lambda#28| alloc@@28 null@@28 $Heap@@280) $o@@36 $f@@28)) )))
(assert (forall ((arg0@@500 T@U) (arg1@@246 T@U) (arg2@@172 T@U) ) (! (= (type (|lambda#29| arg0@@500 arg1@@246 arg2@@172)) (MapType8Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@500 arg1@@246 arg2@@172)) )))
(assert (forall (($o@@37 T@U) ($f@@29 T@U) (alloc@@29 T@U) (null@@29 T@U) ($Heap@@281 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type $o@@37) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type alloc@@29) (FieldType boolType))) (= (type null@@29) refType)) (= (type $Heap@@281) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#29| alloc@@29 null@@29 $Heap@@281) $o@@37 $f@@29))  (=> (and (not (= $o@@37 null@@29)) (U_2_bool (MapType1Select $Heap@@281 $o@@37 alloc@@29))) false)))) :qid |sha256id.249:7| :skolemid |4126| :pattern ( (MapType8Select (|lambda#29| alloc@@29 null@@29 $Heap@@281) $o@@37 $f@@29)) )))
(assert (forall ((arg0@@501 T@U) (arg1@@247 T@U) (arg2@@173 T@U) ) (! (= (type (|lambda#30| arg0@@501 arg1@@247 arg2@@173)) (MapType8Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@501 arg1@@247 arg2@@173)) )))
(assert (forall (($o@@38 T@U) ($f@@30 T@U) (alloc@@30 T@U) (null@@30 T@U) ($Heap@@282 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type $o@@38) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type alloc@@30) (FieldType boolType))) (= (type null@@30) refType)) (= (type $Heap@@282) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#30| alloc@@30 null@@30 $Heap@@282) $o@@38 $f@@30))  (=> (and (not (= $o@@38 null@@30)) (U_2_bool (MapType1Select $Heap@@282 $o@@38 alloc@@30))) false)))) :qid |sha256id.343:7| :skolemid |4127| :pattern ( (MapType8Select (|lambda#30| alloc@@30 null@@30 $Heap@@282) $o@@38 $f@@30)) )))
(assert (forall ((arg0@@502 T@U) (arg1@@248 T@U) (arg2@@174 T@U) ) (! (= (type (|lambda#31| arg0@@502 arg1@@248 arg2@@174)) (MapType8Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@502 arg1@@248 arg2@@174)) )))
(assert (forall (($o@@39 T@U) ($f@@31 T@U) (alloc@@31 T@U) (null@@31 T@U) ($Heap@@283 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type $o@@39) refType) (= (type $f@@31) (FieldType alpha@@38))) (= (type alloc@@31) (FieldType boolType))) (= (type null@@31) refType)) (= (type $Heap@@283) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#31| alloc@@31 null@@31 $Heap@@283) $o@@39 $f@@31))  (=> (and (not (= $o@@39 null@@31)) (U_2_bool (MapType1Select $Heap@@283 $o@@39 alloc@@31))) false)))) :qid |sha256id.343:7| :skolemid |4128| :pattern ( (MapType8Select (|lambda#31| alloc@@31 null@@31 $Heap@@283) $o@@39 $f@@31)) )))
(assert (forall ((arg0@@503 T@U) (arg1@@249 T@U) (arg2@@175 T@U) ) (! (= (type (|lambda#32| arg0@@503 arg1@@249 arg2@@175)) (MapType8Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@503 arg1@@249 arg2@@175)) )))
(assert (forall (($o@@40 T@U) ($f@@32 T@U) (alloc@@32 T@U) (null@@32 T@U) ($Heap@@284 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type $o@@40) refType) (= (type $f@@32) (FieldType alpha@@39))) (= (type alloc@@32) (FieldType boolType))) (= (type null@@32) refType)) (= (type $Heap@@284) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#32| alloc@@32 null@@32 $Heap@@284) $o@@40 $f@@32))  (=> (and (not (= $o@@40 null@@32)) (U_2_bool (MapType1Select $Heap@@284 $o@@40 alloc@@32))) false)))) :qid |sha256id.397:7| :skolemid |4129| :pattern ( (MapType8Select (|lambda#32| alloc@@32 null@@32 $Heap@@284) $o@@40 $f@@32)) )))
(assert (forall ((arg0@@504 T@U) (arg1@@250 T@U) (arg2@@176 T@U) ) (! (= (type (|lambda#33| arg0@@504 arg1@@250 arg2@@176)) (MapType8Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@504 arg1@@250 arg2@@176)) )))
(assert (forall (($o@@41 T@U) ($f@@33 T@U) (alloc@@33 T@U) (null@@33 T@U) ($Heap@@285 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type $o@@41) refType) (= (type $f@@33) (FieldType alpha@@40))) (= (type alloc@@33) (FieldType boolType))) (= (type null@@33) refType)) (= (type $Heap@@285) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#33| alloc@@33 null@@33 $Heap@@285) $o@@41 $f@@33))  (=> (and (not (= $o@@41 null@@33)) (U_2_bool (MapType1Select $Heap@@285 $o@@41 alloc@@33))) false)))) :qid |sha256id.397:7| :skolemid |4130| :pattern ( (MapType8Select (|lambda#33| alloc@@33 null@@33 $Heap@@285) $o@@41 $f@@33)) )))
(assert (forall ((arg0@@505 T@U) (arg1@@251 T@U) (arg2@@177 T@U) ) (! (= (type (|lambda#34| arg0@@505 arg1@@251 arg2@@177)) (MapType8Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@505 arg1@@251 arg2@@177)) )))
(assert (forall (($o@@42 T@U) ($f@@34 T@U) (alloc@@34 T@U) (null@@34 T@U) ($Heap@@286 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type $o@@42) refType) (= (type $f@@34) (FieldType alpha@@41))) (= (type alloc@@34) (FieldType boolType))) (= (type null@@34) refType)) (= (type $Heap@@286) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#34| alloc@@34 null@@34 $Heap@@286) $o@@42 $f@@34))  (=> (and (not (= $o@@42 null@@34)) (U_2_bool (MapType1Select $Heap@@286 $o@@42 alloc@@34))) false)))) :qid |sha256id.513:7| :skolemid |4131| :pattern ( (MapType8Select (|lambda#34| alloc@@34 null@@34 $Heap@@286) $o@@42 $f@@34)) )))
(assert (forall ((arg0@@506 T@U) (arg1@@252 T@U) (arg2@@178 T@U) ) (! (= (type (|lambda#35| arg0@@506 arg1@@252 arg2@@178)) (MapType8Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@506 arg1@@252 arg2@@178)) )))
(assert (forall (($o@@43 T@U) ($f@@35 T@U) (alloc@@35 T@U) (null@@35 T@U) ($Heap@@287 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type $o@@43) refType) (= (type $f@@35) (FieldType alpha@@42))) (= (type alloc@@35) (FieldType boolType))) (= (type null@@35) refType)) (= (type $Heap@@287) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#35| alloc@@35 null@@35 $Heap@@287) $o@@43 $f@@35))  (=> (and (not (= $o@@43 null@@35)) (U_2_bool (MapType1Select $Heap@@287 $o@@43 alloc@@35))) false)))) :qid |sha256id.513:7| :skolemid |4132| :pattern ( (MapType8Select (|lambda#35| alloc@@35 null@@35 $Heap@@287) $o@@43 $f@@35)) )))
(assert (forall ((arg0@@507 T@U) (arg1@@253 T@U) (arg2@@179 T@U) ) (! (= (type (|lambda#36| arg0@@507 arg1@@253 arg2@@179)) (MapType8Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@507 arg1@@253 arg2@@179)) )))
(assert (forall (($o@@44 T@U) ($f@@36 T@U) (alloc@@36 T@U) (null@@36 T@U) ($Heap@@288 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type $o@@44) refType) (= (type $f@@36) (FieldType alpha@@43))) (= (type alloc@@36) (FieldType boolType))) (= (type null@@36) refType)) (= (type $Heap@@288) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#36| alloc@@36 null@@36 $Heap@@288) $o@@44 $f@@36))  (=> (and (not (= $o@@44 null@@36)) (U_2_bool (MapType1Select $Heap@@288 $o@@44 alloc@@36))) false)))) :qid |sha256id.519:7| :skolemid |4133| :pattern ( (MapType8Select (|lambda#36| alloc@@36 null@@36 $Heap@@288) $o@@44 $f@@36)) )))
(assert (forall ((arg0@@508 T@U) (arg1@@254 T@U) (arg2@@180 T@U) ) (! (= (type (|lambda#37| arg0@@508 arg1@@254 arg2@@180)) (MapType8Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@508 arg1@@254 arg2@@180)) )))
(assert (forall (($o@@45 T@U) ($f@@37 T@U) (alloc@@37 T@U) (null@@37 T@U) ($Heap@@289 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type $o@@45) refType) (= (type $f@@37) (FieldType alpha@@44))) (= (type alloc@@37) (FieldType boolType))) (= (type null@@37) refType)) (= (type $Heap@@289) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#37| alloc@@37 null@@37 $Heap@@289) $o@@45 $f@@37))  (=> (and (not (= $o@@45 null@@37)) (U_2_bool (MapType1Select $Heap@@289 $o@@45 alloc@@37))) false)))) :qid |sha256id.535:7| :skolemid |4134| :pattern ( (MapType8Select (|lambda#37| alloc@@37 null@@37 $Heap@@289) $o@@45 $f@@37)) )))
(assert (forall ((arg0@@509 T@U) (arg1@@255 T@U) (arg2@@181 T@U) ) (! (= (type (|lambda#38| arg0@@509 arg1@@255 arg2@@181)) (MapType8Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@509 arg1@@255 arg2@@181)) )))
(assert (forall (($o@@46 T@U) ($f@@38 T@U) (alloc@@38 T@U) (null@@38 T@U) ($Heap@@290 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type $o@@46) refType) (= (type $f@@38) (FieldType alpha@@45))) (= (type alloc@@38) (FieldType boolType))) (= (type null@@38) refType)) (= (type $Heap@@290) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#38| alloc@@38 null@@38 $Heap@@290) $o@@46 $f@@38))  (=> (and (not (= $o@@46 null@@38)) (U_2_bool (MapType1Select $Heap@@290 $o@@46 alloc@@38))) false)))) :qid |sha256id.535:7| :skolemid |4135| :pattern ( (MapType8Select (|lambda#38| alloc@@38 null@@38 $Heap@@290) $o@@46 $f@@38)) )))
(assert (forall ((arg0@@510 T@U) (arg1@@256 T@U) (arg2@@182 T@U) ) (! (= (type (|lambda#39| arg0@@510 arg1@@256 arg2@@182)) (MapType8Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@510 arg1@@256 arg2@@182)) )))
(assert (forall (($o@@47 T@U) ($f@@39 T@U) (alloc@@39 T@U) (null@@39 T@U) ($Heap@@291 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type $o@@47) refType) (= (type $f@@39) (FieldType alpha@@46))) (= (type alloc@@39) (FieldType boolType))) (= (type null@@39) refType)) (= (type $Heap@@291) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#39| alloc@@39 null@@39 $Heap@@291) $o@@47 $f@@39))  (=> (and (not (= $o@@47 null@@39)) (U_2_bool (MapType1Select $Heap@@291 $o@@47 alloc@@39))) false)))) :qid |sha256id.601:7| :skolemid |4136| :pattern ( (MapType8Select (|lambda#39| alloc@@39 null@@39 $Heap@@291) $o@@47 $f@@39)) )))
(assert (forall ((arg0@@511 T@U) (arg1@@257 T@U) (arg2@@183 T@U) ) (! (= (type (|lambda#40| arg0@@511 arg1@@257 arg2@@183)) (MapType8Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@511 arg1@@257 arg2@@183)) )))
(assert (forall (($o@@48 T@U) ($f@@40 T@U) (alloc@@40 T@U) (null@@40 T@U) ($Heap@@292 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type $o@@48) refType) (= (type $f@@40) (FieldType alpha@@47))) (= (type alloc@@40) (FieldType boolType))) (= (type null@@40) refType)) (= (type $Heap@@292) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#40| alloc@@40 null@@40 $Heap@@292) $o@@48 $f@@40))  (=> (and (not (= $o@@48 null@@40)) (U_2_bool (MapType1Select $Heap@@292 $o@@48 alloc@@40))) false)))) :qid |sha256id.601:7| :skolemid |4137| :pattern ( (MapType8Select (|lambda#40| alloc@@40 null@@40 $Heap@@292) $o@@48 $f@@40)) )))
(assert (forall ((arg0@@512 T@U) (arg1@@258 T@U) (arg2@@184 T@U) ) (! (= (type (|lambda#41| arg0@@512 arg1@@258 arg2@@184)) (MapType8Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@512 arg1@@258 arg2@@184)) )))
(assert (forall (($o@@49 T@U) ($f@@41 T@U) (alloc@@41 T@U) (null@@41 T@U) ($Heap@@293 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type $o@@49) refType) (= (type $f@@41) (FieldType alpha@@48))) (= (type alloc@@41) (FieldType boolType))) (= (type null@@41) refType)) (= (type $Heap@@293) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#41| alloc@@41 null@@41 $Heap@@293) $o@@49 $f@@41))  (=> (and (not (= $o@@49 null@@41)) (U_2_bool (MapType1Select $Heap@@293 $o@@49 alloc@@41))) false)))) :qid |sha256id.616:7| :skolemid |4138| :pattern ( (MapType8Select (|lambda#41| alloc@@41 null@@41 $Heap@@293) $o@@49 $f@@41)) )))
(assert (forall ((arg0@@513 T@U) (arg1@@259 T@U) (arg2@@185 T@U) ) (! (= (type (|lambda#42| arg0@@513 arg1@@259 arg2@@185)) (MapType8Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@513 arg1@@259 arg2@@185)) )))
(assert (forall (($o@@50 T@U) ($f@@42 T@U) (alloc@@42 T@U) (null@@42 T@U) ($Heap@@294 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type $o@@50) refType) (= (type $f@@42) (FieldType alpha@@49))) (= (type alloc@@42) (FieldType boolType))) (= (type null@@42) refType)) (= (type $Heap@@294) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#42| alloc@@42 null@@42 $Heap@@294) $o@@50 $f@@42))  (=> (and (not (= $o@@50 null@@42)) (U_2_bool (MapType1Select $Heap@@294 $o@@50 alloc@@42))) false)))) :qid |sha256id.616:7| :skolemid |4139| :pattern ( (MapType8Select (|lambda#42| alloc@@42 null@@42 $Heap@@294) $o@@50 $f@@42)) )))
(assert (forall ((arg0@@514 T@U) (arg1@@260 T@U) (arg2@@186 T@U) ) (! (= (type (|lambda#43| arg0@@514 arg1@@260 arg2@@186)) (MapType8Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@514 arg1@@260 arg2@@186)) )))
(assert (forall (($o@@51 T@U) ($f@@43 T@U) (alloc@@43 T@U) (null@@43 T@U) ($Heap@@295 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type $o@@51) refType) (= (type $f@@43) (FieldType alpha@@50))) (= (type alloc@@43) (FieldType boolType))) (= (type null@@43) refType)) (= (type $Heap@@295) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#43| alloc@@43 null@@43 $Heap@@295) $o@@51 $f@@43))  (=> (and (not (= $o@@51 null@@43)) (U_2_bool (MapType1Select $Heap@@295 $o@@51 alloc@@43))) false)))) :qid |sha256id.624:14| :skolemid |4140| :pattern ( (MapType8Select (|lambda#43| alloc@@43 null@@43 $Heap@@295) $o@@51 $f@@43)) )))
(assert (forall ((arg0@@515 T@U) (arg1@@261 T@U) (arg2@@187 T@U) ) (! (= (type (|lambda#44| arg0@@515 arg1@@261 arg2@@187)) (MapType8Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@515 arg1@@261 arg2@@187)) )))
(assert (forall (($o@@52 T@U) ($f@@44 T@U) (alloc@@44 T@U) (null@@44 T@U) ($Heap@@296 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type $o@@52) refType) (= (type $f@@44) (FieldType alpha@@51))) (= (type alloc@@44) (FieldType boolType))) (= (type null@@44) refType)) (= (type $Heap@@296) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#44| alloc@@44 null@@44 $Heap@@296) $o@@52 $f@@44))  (=> (and (not (= $o@@52 null@@44)) (U_2_bool (MapType1Select $Heap@@296 $o@@52 alloc@@44))) false)))) :qid |sha256id.624:14| :skolemid |4141| :pattern ( (MapType8Select (|lambda#44| alloc@@44 null@@44 $Heap@@296) $o@@52 $f@@44)) )))
(assert (forall ((arg0@@516 T@U) (arg1@@262 T@U) (arg2@@188 T@U) ) (! (= (type (|lambda#45| arg0@@516 arg1@@262 arg2@@188)) (MapType8Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@516 arg1@@262 arg2@@188)) )))
(assert (forall (($o@@53 T@U) ($f@@45 T@U) (alloc@@45 T@U) (null@@45 T@U) ($Heap@@297 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type $o@@53) refType) (= (type $f@@45) (FieldType alpha@@52))) (= (type alloc@@45) (FieldType boolType))) (= (type null@@45) refType)) (= (type $Heap@@297) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#45| alloc@@45 null@@45 $Heap@@297) $o@@53 $f@@45))  (=> (and (not (= $o@@53 null@@45)) (U_2_bool (MapType1Select $Heap@@297 $o@@53 alloc@@45))) false)))) :qid |sha256id.665:7| :skolemid |4142| :pattern ( (MapType8Select (|lambda#45| alloc@@45 null@@45 $Heap@@297) $o@@53 $f@@45)) )))
(assert (forall ((arg0@@517 T@U) (arg1@@263 T@U) (arg2@@189 T@U) ) (! (= (type (|lambda#46| arg0@@517 arg1@@263 arg2@@189)) (MapType8Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@517 arg1@@263 arg2@@189)) )))
(assert (forall (($o@@54 T@U) ($f@@46 T@U) (alloc@@46 T@U) (null@@46 T@U) ($Heap@@298 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type $o@@54) refType) (= (type $f@@46) (FieldType alpha@@53))) (= (type alloc@@46) (FieldType boolType))) (= (type null@@46) refType)) (= (type $Heap@@298) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#46| alloc@@46 null@@46 $Heap@@298) $o@@54 $f@@46))  (=> (and (not (= $o@@54 null@@46)) (U_2_bool (MapType1Select $Heap@@298 $o@@54 alloc@@46))) false)))) :qid |sha256id.665:7| :skolemid |4143| :pattern ( (MapType8Select (|lambda#46| alloc@@46 null@@46 $Heap@@298) $o@@54 $f@@46)) )))
(assert (forall ((arg0@@518 T@U) (arg1@@264 T@U) (arg2@@190 T@U) ) (! (= (type (|lambda#47| arg0@@518 arg1@@264 arg2@@190)) (MapType8Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@518 arg1@@264 arg2@@190)) )))
(assert (forall (($o@@55 T@U) ($f@@47 T@U) (alloc@@47 T@U) (null@@47 T@U) ($Heap@@299 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type $o@@55) refType) (= (type $f@@47) (FieldType alpha@@54))) (= (type alloc@@47) (FieldType boolType))) (= (type null@@47) refType)) (= (type $Heap@@299) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#47| alloc@@47 null@@47 $Heap@@299) $o@@55 $f@@47))  (=> (and (not (= $o@@55 null@@47)) (U_2_bool (MapType1Select $Heap@@299 $o@@55 alloc@@47))) false)))) :qid |sha256id.702:7| :skolemid |4144| :pattern ( (MapType8Select (|lambda#47| alloc@@47 null@@47 $Heap@@299) $o@@55 $f@@47)) )))
(assert (forall ((arg0@@519 T@U) (arg1@@265 T@U) (arg2@@191 T@U) ) (! (= (type (|lambda#48| arg0@@519 arg1@@265 arg2@@191)) (MapType8Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@519 arg1@@265 arg2@@191)) )))
(assert (forall (($o@@56 T@U) ($f@@48 T@U) (alloc@@48 T@U) (null@@48 T@U) ($Heap@@300 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type $o@@56) refType) (= (type $f@@48) (FieldType alpha@@55))) (= (type alloc@@48) (FieldType boolType))) (= (type null@@48) refType)) (= (type $Heap@@300) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#48| alloc@@48 null@@48 $Heap@@300) $o@@56 $f@@48))  (=> (and (not (= $o@@56 null@@48)) (U_2_bool (MapType1Select $Heap@@300 $o@@56 alloc@@48))) false)))) :qid |sha256id.719:7| :skolemid |4145| :pattern ( (MapType8Select (|lambda#48| alloc@@48 null@@48 $Heap@@300) $o@@56 $f@@48)) )))
(assert (forall ((arg0@@520 T@U) (arg1@@266 T@U) (arg2@@192 T@U) ) (! (= (type (|lambda#49| arg0@@520 arg1@@266 arg2@@192)) (MapType8Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@520 arg1@@266 arg2@@192)) )))
(assert (forall (($o@@57 T@U) ($f@@49 T@U) (alloc@@49 T@U) (null@@49 T@U) ($Heap@@301 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type $o@@57) refType) (= (type $f@@49) (FieldType alpha@@56))) (= (type alloc@@49) (FieldType boolType))) (= (type null@@49) refType)) (= (type $Heap@@301) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#49| alloc@@49 null@@49 $Heap@@301) $o@@57 $f@@49))  (=> (and (not (= $o@@57 null@@49)) (U_2_bool (MapType1Select $Heap@@301 $o@@57 alloc@@49))) false)))) :qid |sha256id.719:7| :skolemid |4146| :pattern ( (MapType8Select (|lambda#49| alloc@@49 null@@49 $Heap@@301) $o@@57 $f@@49)) )))
(assert (forall ((arg0@@521 T@U) (arg1@@267 T@U) (arg2@@193 T@U) ) (! (= (type (|lambda#50| arg0@@521 arg1@@267 arg2@@193)) (MapType8Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@521 arg1@@267 arg2@@193)) )))
(assert (forall (($o@@58 T@U) ($f@@50 T@U) (alloc@@50 T@U) (null@@50 T@U) ($Heap@@302 T@U) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type $o@@58) refType) (= (type $f@@50) (FieldType alpha@@57))) (= (type alloc@@50) (FieldType boolType))) (= (type null@@50) refType)) (= (type $Heap@@302) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#50| alloc@@50 null@@50 $Heap@@302) $o@@58 $f@@50))  (=> (and (not (= $o@@58 null@@50)) (U_2_bool (MapType1Select $Heap@@302 $o@@58 alloc@@50))) false)))) :qid |sha256id.741:7| :skolemid |4147| :pattern ( (MapType8Select (|lambda#50| alloc@@50 null@@50 $Heap@@302) $o@@58 $f@@50)) )))
(assert (forall ((arg0@@522 T@U) (arg1@@268 T@U) (arg2@@194 T@U) ) (! (= (type (|lambda#51| arg0@@522 arg1@@268 arg2@@194)) (MapType8Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@522 arg1@@268 arg2@@194)) )))
(assert (forall (($o@@59 T@U) ($f@@51 T@U) (alloc@@51 T@U) (null@@51 T@U) ($Heap@@303 T@U) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type $o@@59) refType) (= (type $f@@51) (FieldType alpha@@58))) (= (type alloc@@51) (FieldType boolType))) (= (type null@@51) refType)) (= (type $Heap@@303) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#51| alloc@@51 null@@51 $Heap@@303) $o@@59 $f@@51))  (=> (and (not (= $o@@59 null@@51)) (U_2_bool (MapType1Select $Heap@@303 $o@@59 alloc@@51))) false)))) :qid |sha256id.741:7| :skolemid |4148| :pattern ( (MapType8Select (|lambda#51| alloc@@51 null@@51 $Heap@@303) $o@@59 $f@@51)) )))
(assert (forall ((arg0@@523 T@U) (arg1@@269 T@U) (arg2@@195 T@U) ) (! (= (type (|lambda#52| arg0@@523 arg1@@269 arg2@@195)) (MapType8Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@523 arg1@@269 arg2@@195)) )))
(assert (forall (($o@@60 T@U) ($f@@52 T@U) (alloc@@52 T@U) (null@@52 T@U) ($Heap@@304 T@U) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type $o@@60) refType) (= (type $f@@52) (FieldType alpha@@59))) (= (type alloc@@52) (FieldType boolType))) (= (type null@@52) refType)) (= (type $Heap@@304) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#52| alloc@@52 null@@52 $Heap@@304) $o@@60 $f@@52))  (=> (and (not (= $o@@60 null@@52)) (U_2_bool (MapType1Select $Heap@@304 $o@@60 alloc@@52))) false)))) :qid |sha256id.775:14| :skolemid |4149| :pattern ( (MapType8Select (|lambda#52| alloc@@52 null@@52 $Heap@@304) $o@@60 $f@@52)) )))
(assert (forall ((arg0@@524 T@U) (arg1@@270 T@U) (arg2@@196 T@U) ) (! (= (type (|lambda#53| arg0@@524 arg1@@270 arg2@@196)) (MapType8Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@524 arg1@@270 arg2@@196)) )))
(assert (forall (($o@@61 T@U) ($f@@53 T@U) (alloc@@53 T@U) (null@@53 T@U) ($Heap@@305 T@U) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type $o@@61) refType) (= (type $f@@53) (FieldType alpha@@60))) (= (type alloc@@53) (FieldType boolType))) (= (type null@@53) refType)) (= (type $Heap@@305) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#53| alloc@@53 null@@53 $Heap@@305) $o@@61 $f@@53))  (=> (and (not (= $o@@61 null@@53)) (U_2_bool (MapType1Select $Heap@@305 $o@@61 alloc@@53))) false)))) :qid |sha256id.775:14| :skolemid |4150| :pattern ( (MapType8Select (|lambda#53| alloc@@53 null@@53 $Heap@@305) $o@@61 $f@@53)) )))
(assert (forall ((arg0@@525 T@U) (arg1@@271 T@U) (arg2@@197 T@U) ) (! (= (type (|lambda#54| arg0@@525 arg1@@271 arg2@@197)) (MapType8Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@525 arg1@@271 arg2@@197)) )))
(assert (forall (($o@@62 T@U) ($f@@54 T@U) (alloc@@54 T@U) (null@@54 T@U) ($Heap@@306 T@U) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type $o@@62) refType) (= (type $f@@54) (FieldType alpha@@61))) (= (type alloc@@54) (FieldType boolType))) (= (type null@@54) refType)) (= (type $Heap@@306) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#54| alloc@@54 null@@54 $Heap@@306) $o@@62 $f@@54))  (=> (and (not (= $o@@62 null@@54)) (U_2_bool (MapType1Select $Heap@@306 $o@@62 alloc@@54))) false)))) :qid |sha256id.809:7| :skolemid |4151| :pattern ( (MapType8Select (|lambda#54| alloc@@54 null@@54 $Heap@@306) $o@@62 $f@@54)) )))
(assert (forall ((arg0@@526 T@U) (arg1@@272 T@U) (arg2@@198 T@U) ) (! (= (type (|lambda#55| arg0@@526 arg1@@272 arg2@@198)) (MapType8Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@526 arg1@@272 arg2@@198)) )))
(assert (forall (($o@@63 T@U) ($f@@55 T@U) (alloc@@55 T@U) (null@@55 T@U) ($Heap@@307 T@U) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type $o@@63) refType) (= (type $f@@55) (FieldType alpha@@62))) (= (type alloc@@55) (FieldType boolType))) (= (type null@@55) refType)) (= (type $Heap@@307) (MapType1Type refType))) (= (U_2_bool (MapType8Select (|lambda#55| alloc@@55 null@@55 $Heap@@307) $o@@63 $f@@55))  (=> (and (not (= $o@@63 null@@55)) (U_2_bool (MapType1Select $Heap@@307 $o@@63 alloc@@55))) false)))) :qid |sha256id.809:7| :skolemid |4152| :pattern ( (MapType8Select (|lambda#55| alloc@@55 null@@55 $Heap@@307) $o@@63 $f@@55)) )))
(assert (forall ((|$y#0| T@U) ) (!  (=> (= (type |$y#0|) BoxType) (= (U_2_bool (MapType0Select |lambda#56| |$y#0|))  (and ($Is ($Unbox DatatypeTypeType |$y#0|) Tclass._module.ARMReg) (U_2_bool (MapType0Select (Lit _module.__default.USER__REGS) |$y#0|))))) :qid |ARMdefsd.141:5| :skolemid |4153| :pattern ( (MapType0Select |lambda#56| |$y#0|)) )))
(assert (forall ((|$y#0@@0| T@U) (|regs#0@@13| T@U) ) (!  (=> (and (= (type |$y#0@@0|) BoxType) (= (type |regs#0@@13|) (MapType BoxType BoxType))) (= (MapType0Select (|lambda#57| |regs#0@@13|) |$y#0@@0|) (MapType0Select (|Map#Elements| |regs#0@@13|) |$y#0@@0|))) :qid |ARMdefsd.141:5| :skolemid |4154| :pattern ( (MapType0Select (|lambda#57| |regs#0@@13|) |$y#0@@0|)) )))
(assert (forall ((|$y#1| T@U) (|regs#0@@14| T@U) ) (!  (=> (and (= (type |$y#1|) BoxType) (= (type |regs#0@@14|) (MapType BoxType BoxType))) (= (MapType0Select (|lambda#58| |regs#0@@14|) |$y#1|) (MapType0Select (|Map#Elements| (Lit |regs#0@@14|)) |$y#1|))) :qid |ARMdefsd.141:5| :skolemid |4155| :pattern ( (MapType0Select (|lambda#58| |regs#0@@14|) |$y#1|)) )))
(assert (forall ((|$y#0@@1| T@U) (StartFuel__module._default.PageBase@@0 T@U) (StartFuel__module._default.WordAligned@@0 T@U) (|pt#0@@23| T@U) ) (!  (=> (and (and (and (= (type |$y#0@@1|) BoxType) (= (type StartFuel__module._default.PageBase@@0) LayerTypeType)) (= (type StartFuel__module._default.WordAligned@@0) LayerTypeType)) (= (type |pt#0@@23|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#59| StartFuel__module._default.PageBase@@0 StartFuel__module._default.WordAligned@@0 |pt#0@@23|) |$y#0@@1|))  (and (and (_module.__default.isUInt32 (U_2_int ($Unbox intType |$y#0@@1|))) (_module.__default.WordAligned StartFuel__module._default.WordAligned@@0 (U_2_int ($Unbox intType |$y#0@@1|)))) (and (and (and (_module.__default.ValidMem (U_2_int ($Unbox intType |$y#0@@1|))) (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW |$y#0@@1|))) (_module.__default.addrIsSecure (U_2_int ($Unbox intType |$y#0@@1|)))) (U_2_bool (MapType0Select (_module.__default.AllPagesInTable |pt#0@@23|) ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase@@0 (U_2_int ($Unbox intType |$y#0@@1|))))))))))) :qid |ARMdefsd.151:6| :skolemid |4156| :pattern ( (MapType0Select (|lambda#59| StartFuel__module._default.PageBase@@0 StartFuel__module._default.WordAligned@@0 |pt#0@@23|) |$y#0@@1|)) )))
(assert (forall ((|$y#0@@2| T@U) (|m#0@@58| T@U) ) (!  (=> (and (= (type |$y#0@@2|) BoxType) (= (type |m#0@@58|) DatatypeTypeType)) (= (MapType0Select (|lambda#60| |m#0@@58|) |$y#0@@2|) (MapType0Select (|Map#Elements| (_module.memstate.addresses |m#0@@58|)) |$y#0@@2|))) :qid |ARMdefsd.151:6| :skolemid |4157| :pattern ( (MapType0Select (|lambda#60| |m#0@@58|) |$y#0@@2|)) )))
(assert (forall ((|$y#1@@0| T@U) (StartFuel__module._default.PageBase@@1 T@U) (StartFuel__module._default.WordAligned@@1 T@U) (|pt#0@@24| T@U) ) (!  (=> (and (and (and (= (type |$y#1@@0|) BoxType) (= (type StartFuel__module._default.PageBase@@1) LayerTypeType)) (= (type StartFuel__module._default.WordAligned@@1) LayerTypeType)) (= (type |pt#0@@24|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#61| StartFuel__module._default.PageBase@@1 StartFuel__module._default.WordAligned@@1 |pt#0@@24|) |$y#1@@0|))  (and (and (_module.__default.isUInt32 (U_2_int ($Unbox intType |$y#1@@0|))) (_module.__default.WordAligned StartFuel__module._default.WordAligned@@1 (U_2_int ($Unbox intType |$y#1@@0|)))) (and (and (and (_module.__default.ValidMem (U_2_int ($Unbox intType |$y#1@@0|))) (U_2_bool (MapType0Select _module.__default.TheValidAddressesRW |$y#1@@0|))) (_module.__default.addrIsSecure (U_2_int ($Unbox intType |$y#1@@0|)))) (U_2_bool (MapType0Select (Lit (_module.__default.AllPagesInTable (Lit |pt#0@@24|))) ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase@@1 (U_2_int ($Unbox intType |$y#1@@0|))))))))))) :qid |ARMdefsd.151:6| :skolemid |4158| :pattern ( (MapType0Select (|lambda#61| StartFuel__module._default.PageBase@@1 StartFuel__module._default.WordAligned@@1 |pt#0@@24|) |$y#1@@0|)) )))
(assert (forall ((|$y#1@@1| T@U) (|m#0@@59| T@U) ) (!  (=> (and (= (type |$y#1@@1|) BoxType) (= (type |m#0@@59|) DatatypeTypeType)) (= (MapType0Select (|lambda#62| |m#0@@59|) |$y#1@@1|) (MapType0Select (|Map#Elements| (Lit (_module.memstate.addresses (Lit |m#0@@59|)))) |$y#1@@1|))) :qid |ARMdefsd.151:6| :skolemid |4159| :pattern ( (MapType0Select (|lambda#62| |m#0@@59|) |$y#1@@1|)) )))
(assert (forall ((|$y#0@@3| T@U) (StartFuel__module._default.WordAligned@@2 T@U) ) (!  (=> (and (= (type |$y#0@@3|) BoxType) (= (type StartFuel__module._default.WordAligned@@2) LayerTypeType)) (= (U_2_bool (MapType0Select (|lambda#63| StartFuel__module._default.WordAligned@@2) |$y#0@@3|))  (and (and (_module.__default.isUInt32 (U_2_int ($Unbox intType |$y#0@@3|))) (_module.__default.WordAligned StartFuel__module._default.WordAligned@@2 (U_2_int ($Unbox intType |$y#0@@3|)))) (U_2_bool (MapType0Select (Lit _module.__default.TheValidAddresses) |$y#0@@3|))))) :qid |ARMdefsd.669:6| :skolemid |4160| :pattern ( (MapType0Select (|lambda#63| StartFuel__module._default.WordAligned@@2) |$y#0@@3|)) )))
(assert (forall ((|$y#0@@4| T@U) (|pages#0@@3| T@U) (StartFuel__module._default.PageBase@@2 T@U) (|us#0@@7| T@U) (|s#0@@297| T@U) ) (!  (=> (and (and (and (and (= (type |$y#0@@4|) BoxType) (= (type |pages#0@@3|) (MapType0Type BoxType boolType))) (= (type StartFuel__module._default.PageBase@@2) LayerTypeType)) (= (type |us#0@@7|) DatatypeTypeType)) (= (type |s#0@@297|) DatatypeTypeType)) (= (MapType0Select (|lambda#64| |pages#0@@3| StartFuel__module._default.PageBase@@2 |us#0@@7| |s#0@@297|) |$y#0@@4|) ($Box (int_2_U (ite (U_2_bool (MapType0Select |pages#0@@3| ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase@@2 (U_2_int ($Unbox intType |$y#0@@4|))))))) (ite (_module.__default.addrIsSecure (U_2_int ($Unbox intType |$y#0@@4|))) (_module.__default.nondet__private__word (_module.config.nondet (_module.state.conf |s#0@@297|)) |us#0@@7| (U_2_int ($Unbox intType |$y#0@@4|))) (_module.__default.nondet__word (_module.config.nondet (_module.state.conf |s#0@@297|)) (U_2_int ($Unbox intType |$y#0@@4|)))) (_module.__default.MemContents (_module.state.m |s#0@@297|) (U_2_int ($Unbox intType |$y#0@@4|)))))))) :qid |ARMdefsd.669:6| :skolemid |4161| :pattern ( (MapType0Select (|lambda#64| |pages#0@@3| StartFuel__module._default.PageBase@@2 |us#0@@7| |s#0@@297|) |$y#0@@4|)) )))
(assert (forall ((|$y#1@@2| T@U) (|pages#0@@4| T@U) (StartFuel__module._default.PageBase@@3 T@U) (|us#0@@8| T@U) (|s#0@@298| T@U) ) (!  (=> (and (and (and (and (= (type |$y#1@@2|) BoxType) (= (type |pages#0@@4|) (MapType0Type BoxType boolType))) (= (type StartFuel__module._default.PageBase@@3) LayerTypeType)) (= (type |us#0@@8|) DatatypeTypeType)) (= (type |s#0@@298|) DatatypeTypeType)) (= (MapType0Select (|lambda#65| |pages#0@@4| StartFuel__module._default.PageBase@@3 |us#0@@8| |s#0@@298|) |$y#1@@2|) ($Box (int_2_U (ite (U_2_bool (MapType0Select (Lit |pages#0@@4|) ($Box (int_2_U (_module.__default.PageBase StartFuel__module._default.PageBase@@3 (U_2_int ($Unbox intType |$y#1@@2|))))))) (ite (_module.__default.addrIsSecure (U_2_int ($Unbox intType |$y#1@@2|))) (_module.__default.nondet__private__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@298|))))) (Lit |us#0@@8|) (U_2_int ($Unbox intType |$y#1@@2|))) (_module.__default.nondet__word (LitInt (_module.config.nondet (Lit (_module.state.conf (Lit |s#0@@298|))))) (U_2_int ($Unbox intType |$y#1@@2|)))) (_module.__default.MemContents (Lit (_module.state.m (Lit |s#0@@298|))) (U_2_int ($Unbox intType |$y#1@@2|)))))))) :qid |ARMdefsd.669:6| :skolemid |4162| :pattern ( (MapType0Select (|lambda#65| |pages#0@@4| StartFuel__module._default.PageBase@@3 |us#0@@8| |s#0@@298|) |$y#1@@2|)) )))
(assert (forall ((|$y#0@@5| T@U) (|regs#0@@15| T@U) ) (!  (=> (and (= (type |$y#0@@5|) BoxType) (= (type |regs#0@@15|) (MapType BoxType BoxType))) (= (U_2_bool (MapType0Select (|lambda#66| |regs#0@@15|) |$y#0@@5|))  (and ($Is ($Unbox DatatypeTypeType |$y#0@@5|) Tclass._module.ARMReg) (U_2_bool (MapType0Select (|Map#Domain| |regs#0@@15|) |$y#0@@5|))))) :qid |ARMdefsd.681:5| :skolemid |4163| :pattern ( (MapType0Select (|lambda#66| |regs#0@@15|) |$y#0@@5|)) )))
(assert (forall ((|$y#0@@6| T@U) (|regs#0@@16| T@U) (|nondet#0@@3| Int) (|us#0@@9| T@U) ) (!  (=> (and (and (= (type |$y#0@@6|) BoxType) (= (type |regs#0@@16|) (MapType BoxType BoxType))) (= (type |us#0@@9|) DatatypeTypeType)) (= (MapType0Select (|lambda#67| |regs#0@@16| |nondet#0@@3| |us#0@@9|) |$y#0@@6|) ($Box (int_2_U (ite (U_2_bool (MapType0Select (Lit _module.__default.USER__REGS) |$y#0@@6|)) (_module.__default.nondet__private__word |nondet#0@@3| |us#0@@9| (_module.__default.NONDET__REG ($Unbox DatatypeTypeType |$y#0@@6|))) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| |regs#0@@16|) |$y#0@@6|)))))))) :qid |ARMdefsd.681:5| :skolemid |4164| :pattern ( (MapType0Select (|lambda#67| |regs#0@@16| |nondet#0@@3| |us#0@@9|) |$y#0@@6|)) )))
(assert (forall ((|$y#1@@3| T@U) (|regs#0@@17| T@U) (|nondet#0@@4| Int) (|us#0@@10| T@U) ) (!  (=> (and (and (= (type |$y#1@@3|) BoxType) (= (type |regs#0@@17|) (MapType BoxType BoxType))) (= (type |us#0@@10|) DatatypeTypeType)) (= (MapType0Select (|lambda#68| |regs#0@@17| |nondet#0@@4| |us#0@@10|) |$y#1@@3|) ($Box (int_2_U (ite (U_2_bool (MapType0Select (Lit _module.__default.USER__REGS) |$y#1@@3|)) (_module.__default.nondet__private__word (LitInt |nondet#0@@4|) (Lit |us#0@@10|) (_module.__default.NONDET__REG ($Unbox DatatypeTypeType |$y#1@@3|))) (U_2_int ($Unbox intType (MapType0Select (|Map#Elements| (Lit |regs#0@@17|)) |$y#1@@3|)))))))) :qid |ARMdefsd.681:5| :skolemid |4165| :pattern ( (MapType0Select (|lambda#68| |regs#0@@17| |nondet#0@@4| |us#0@@10|) |$y#1@@3|)) )))
(assert (forall ((|$y#0@@7| T@U) (|pt#0@@25| T@U) ) (!  (=> (and (= (type |$y#0@@7|) BoxType) (= (type |pt#0@@25|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#69| |pt#0@@25|) |$y#0@@7|)) (exists ((|i#0@@77| Int) (|j#0@@19| Int) ) (!  (and (and (and (and (and (INTERNAL_le_boogie 0 |i#0@@77|) (INTERNAL_lt_boogie |i#0@@77| (|Seq#Length| |pt#0@@25|))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@25| |i#0@@77|)))) (and (INTERNAL_le_boogie 0 |j#0@@19|) (INTERNAL_lt_boogie |j#0@@19| (|Seq#Length| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@25| |i#0@@77|)))))))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@25| |i#0@@77|)))) |j#0@@19|)))) (= |$y#0@@7| ($Box (int_2_U (_module.__default.WordAlignedAdd (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@25| |i#0@@77|)))) |j#0@@19|))))) _module.__default.PhysBase))))) :qid |ARMdefsd.823:10| :skolemid |2779| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@25| |i#0@@77|)))) |j#0@@19|))) )))) :qid |ARMdefsd.823:6| :skolemid |4166| :pattern ( (MapType0Select (|lambda#69| |pt#0@@25|) |$y#0@@7|)) )))
(assert (forall ((|$y#1@@4| T@U) (|pt#0@@26| T@U) ) (!  (=> (and (= (type |$y#1@@4|) BoxType) (= (type |pt#0@@26|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#70| |pt#0@@26|) |$y#1@@4|)) (exists ((|i#1@@25| Int) (|j#1@@12| Int) ) (!  (and (and (and (and (and (INTERNAL_le_boogie 0 |i#1@@25|) (INTERNAL_lt_boogie |i#1@@25| (|Seq#Length| (Lit |pt#0@@26|)))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@26|) |i#1@@25|)))) (and (INTERNAL_le_boogie 0 |j#1@@12|) (INTERNAL_lt_boogie |j#1@@12| (|Seq#Length| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@26|) |i#1@@25|)))))))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@26|) |i#1@@25|)))) |j#1@@12|)))) (= |$y#1@@4| ($Box (int_2_U (_module.__default.WordAlignedAdd (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@26|) |i#1@@25|)))) |j#1@@12|))))) _module.__default.PhysBase))))) :qid |ARMdefsd.823:10| :skolemid |2782| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@26| |i#1@@25|)))) |j#1@@12|))) )))) :qid |ARMdefsd.823:6| :skolemid |4167| :pattern ( (MapType0Select (|lambda#70| |pt#0@@26|) |$y#1@@4|)) )))
(assert (forall ((|$y#0@@8| T@U) (|pt#0@@27| T@U) ) (!  (=> (and (= (type |$y#0@@8|) BoxType) (= (type |pt#0@@27|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#71| |pt#0@@27|) |$y#0@@8|)) (exists ((|i#0@@78| Int) (|j#0@@20| Int) ) (!  (and (and (and (and (and (and (INTERNAL_le_boogie 0 |i#0@@78|) (INTERNAL_lt_boogie |i#0@@78| (|Seq#Length| |pt#0@@27|))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@27| |i#0@@78|)))) (and (INTERNAL_le_boogie 0 |j#0@@20|) (INTERNAL_lt_boogie |j#0@@20| (|Seq#Length| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@27| |i#0@@78|)))))))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@27| |i#0@@78|)))) |j#0@@20|)))) (_module.AbsPTE.write ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@27| |i#0@@78|)))) |j#0@@20|)))))) (= |$y#0@@8| ($Box (int_2_U (_module.__default.WordAlignedAdd (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@27| |i#0@@78|)))) |j#0@@20|))))) _module.__default.PhysBase))))) :qid |ARMdefsd.831:10| :skolemid |2787| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@27| |i#0@@78|)))) |j#0@@20|))) )))) :qid |ARMdefsd.831:6| :skolemid |4168| :pattern ( (MapType0Select (|lambda#71| |pt#0@@27|) |$y#0@@8|)) )))
(assert (forall ((|$y#1@@5| T@U) (|pt#0@@28| T@U) ) (!  (=> (and (= (type |$y#1@@5|) BoxType) (= (type |pt#0@@28|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#72| |pt#0@@28|) |$y#1@@5|)) (exists ((|i#1@@26| Int) (|j#1@@13| Int) ) (!  (and (and (and (and (and (and (INTERNAL_le_boogie 0 |i#1@@26|) (INTERNAL_lt_boogie |i#1@@26| (|Seq#Length| (Lit |pt#0@@28|)))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@28|) |i#1@@26|)))) (and (INTERNAL_le_boogie 0 |j#1@@13|) (INTERNAL_lt_boogie |j#1@@13| (|Seq#Length| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@28|) |i#1@@26|)))))))) (_module.Maybe.Just_q ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@28|) |i#1@@26|)))) |j#1@@13|)))) (_module.AbsPTE.write ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@28|) |i#1@@26|)))) |j#1@@13|)))))) (= |$y#1@@5| ($Box (int_2_U (_module.__default.WordAlignedAdd (_module.AbsPTE.phys ($Unbox DatatypeTypeType (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@28|) |i#1@@26|)))) |j#1@@13|))))) _module.__default.PhysBase))))) :qid |ARMdefsd.831:10| :skolemid |2790| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| ($Unbox (SeqType BoxType) (_module.Maybe.v ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@28| |i#1@@26|)))) |j#1@@13|))) )))) :qid |ARMdefsd.831:6| :skolemid |4169| :pattern ( (MapType0Select (|lambda#72| |pt#0@@28|) |$y#1@@5|)) )))
(assert (forall ((|$y#0@@9| T@U) ) (!  (=> (= (type |$y#0@@9|) BoxType) (= (U_2_bool (MapType0Select |lambda#73| |$y#0@@9|))  (and (INTERNAL_le_boogie 0 (U_2_int ($Unbox intType |$y#0@@9|))) (INTERNAL_lt_boogie (U_2_int ($Unbox intType |$y#0@@9|)) (LitInt 1024))))) :qid |ARMdefsd.855:14| :skolemid |4170| :pattern ( (MapType0Select |lambda#73| |$y#0@@9|)) )))
(assert (forall ((|$y#0@@10| T@U) (|m#0@@60| T@U) (|vbase#0@@21| Int) ) (!  (=> (and (= (type |$y#0@@10|) BoxType) (= (type |m#0@@60|) DatatypeTypeType)) (= (MapType0Select (|lambda#74| |m#0@@60| |vbase#0@@21|) |$y#0@@10|) ($Box (ite (_module.Maybe.Nothing_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@60| (_module.__default.WordOffset |vbase#0@@21| (U_2_int ($Unbox intType |$y#0@@10|)))))) |#_module.Maybe.Nothing| (|#_module.Maybe.Just| ($Box (_module.__default.ExtractAbsL2PTable |m#0@@60| (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents |m#0@@60| (_module.__default.WordOffset |vbase#0@@21| (U_2_int ($Unbox intType |$y#0@@10|)))))))) _module.__default.PhysBase)))))))) :qid |ARMdefsd.855:14| :skolemid |4171| :pattern ( (MapType0Select (|lambda#74| |m#0@@60| |vbase#0@@21|) |$y#0@@10|)) )))
(assert (forall ((|$y#2| T@U) (|m#0@@61| T@U) (|vbase#0@@22| Int) ) (!  (=> (and (= (type |$y#2|) BoxType) (= (type |m#0@@61|) DatatypeTypeType)) (= (MapType0Select (|lambda#75| |m#0@@61| |vbase#0@@22|) |$y#2|) ($Box (ite (_module.Maybe.Nothing_q (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@61|) (_module.__default.WordOffset (LitInt |vbase#0@@22|) (U_2_int ($Unbox intType |$y#2|)))))) |#_module.Maybe.Nothing| (|#_module.Maybe.Just| ($Box (_module.__default.ExtractAbsL2PTable (Lit |m#0@@61|) (INTERNAL_add_boogie (U_2_int ($Unbox intType (_module.Maybe.v (_module.__default.ExtractAbsL1PTE (_module.__default.MemContents (Lit |m#0@@61|) (_module.__default.WordOffset (LitInt |vbase#0@@22|) (U_2_int ($Unbox intType |$y#2|)))))))) _module.__default.PhysBase)))))))) :qid |ARMdefsd.855:14| :skolemid |4172| :pattern ( (MapType0Select (|lambda#75| |m#0@@61| |vbase#0@@22|) |$y#2|)) )))
(assert (forall ((|$y#0@@11| T@U) ) (!  (=> (= (type |$y#0@@11|) BoxType) (= (U_2_bool (MapType0Select |lambda#76| |$y#0@@11|))  (and (INTERNAL_le_boogie 0 (U_2_int ($Unbox intType |$y#0@@11|))) (INTERNAL_lt_boogie (U_2_int ($Unbox intType |$y#0@@11|)) (LitInt 256))))) :qid |ARMdefsd.900:14| :skolemid |4173| :pattern ( (MapType0Select |lambda#76| |$y#0@@11|)) )))
(assert (forall ((|$y#0@@12| T@U) (|m#0@@62| T@U) (|vbase#0@@23| Int) ) (!  (=> (and (= (type |$y#0@@12|) BoxType) (= (type |m#0@@62|) DatatypeTypeType)) (= (MapType0Select (|lambda#77| |m#0@@62| |vbase#0@@23|) |$y#0@@12|) ($Box (_module.__default.ExtractAbsL2PTE (_module.__default.MemContents |m#0@@62| (_module.__default.WordOffset |vbase#0@@23| (U_2_int ($Unbox intType |$y#0@@12|)))))))) :qid |ARMdefsd.900:14| :skolemid |4174| :pattern ( (MapType0Select (|lambda#77| |m#0@@62| |vbase#0@@23|) |$y#0@@12|)) )))
(assert (forall ((|$y#2@@0| T@U) (|m#0@@63| T@U) (|vbase#0@@24| Int) ) (!  (=> (and (= (type |$y#2@@0|) BoxType) (= (type |m#0@@63|) DatatypeTypeType)) (= (MapType0Select (|lambda#78| |m#0@@63| |vbase#0@@24|) |$y#2@@0|) ($Box (_module.__default.ExtractAbsL2PTE (_module.__default.MemContents (Lit |m#0@@63|) (_module.__default.WordOffset (LitInt |vbase#0@@24|) (U_2_int ($Unbox intType |$y#2@@0|)))))))) :qid |ARMdefsd.900:14| :skolemid |4175| :pattern ( (MapType0Select (|lambda#78| |m#0@@63| |vbase#0@@24|) |$y#2@@0|)) )))
(declare-fun |message#0@@13| () T@U)
(declare-fun |z#0@@98| () T@U)
(declare-fun |##ss#1_8_0@0| () T@U)
(declare-fun |##ws#1_8_0@0| () T@U)
(declare-fun StartFuelAssert__module._default.WordSeqToBytes () T@U)
(declare-fun |processed_bytes#0| () T@U)
(declare-fun |unprocessed_bytes#0| () T@U)
(declare-fun StartFuelAssert__module._default.RepeatByte () T@U)
(declare-fun StartFuelAssert__module._default.Uint64ToBytes () T@U)
(declare-fun StartFuelAssert__module._default.PartialSHA256TraceHasCorrectatohsOpaque () T@U)
(declare-fun StartFuel__module._default.TheAToHsAreOK () T@U)
(declare-fun StartFuelAssert__module._default.TheAToHsAreOK () T@U)
(declare-fun StartFuelAssert__module._default.K_SHA256 () T@U)
(declare-fun StartFuel__module._default.BytesToUint64 () T@U)
(declare-fun StartFuelAssert__module._default.BytesToUint64 () T@U)
(declare-fun StartFuel__module._default.bswap32_seq () T@U)
(declare-fun StartFuelAssert__module._default.bswap32_seq () T@U)
(declare-fun StartFuelAssert__module._default.Ch () T@U)
(declare-fun StartFuelAssert__module._default.Maj () T@U)
(declare-fun StartFuelAssert__module._default.Parity () T@U)
(declare-fun StartFuel__module._default.ft () T@U)
(declare-fun StartFuelAssert__module._default.ft () T@U)
(declare-fun StartFuelAssert__module._default.BSIG0 () T@U)
(declare-fun StartFuelAssert__module._default.BSIG1 () T@U)
(declare-fun StartFuelAssert__module._default.SSIG0 () T@U)
(declare-fun StartFuelAssert__module._default.SSIG1 () T@U)
(declare-fun StartFuel__module._default.BreakIntoBlocks () T@U)
(declare-fun StartFuelAssert__module._default.BreakIntoBlocks () T@U)
(declare-fun StartFuelAssert__module._default.SeqXor () T@U)
(declare-fun BaseFuel__module._default.BEByteSeqToInt () T@U)
(declare-fun StartFuelAssert__module._default.BEByteSeqToInt () T@U)
(declare-fun BaseFuel__module._default.BEUintToSeqByte () T@U)
(declare-fun StartFuelAssert__module._default.BEUintToSeqByte () T@U)
(declare-fun StartFuelAssert__module._default.BytesToWord () T@U)
(declare-fun StartFuelAssert__module._default.WordToBytes () T@U)
(declare-fun BaseFuel__module._default.WordSeqToBytes () T@U)
(declare-fun BaseFuel__module._default.RepeatByte () T@U)
(declare-fun StartFuelAssert__module._default.update_psr () T@U)
(declare-fun StartFuelAssert__module._default.userspaceExecutionFn () T@U)
(declare-fun StartFuelAssert__module._default.PageBase () T@U)
(declare-fun StartFuelAssert__module._default.ExtractAbsL1PTable () T@U)
(declare-fun StartFuelAssert__module._default.evalMOVSPCLRUC () T@U)
(declare-fun StartFuelAssert__module._default.WordAsBits () T@U)
(declare-fun StartFuelAssert__module._default.BitsAsWord () T@U)
(declare-fun StartFuel__module._default.BitAdd () T@U)
(declare-fun StartFuelAssert__module._default.BitAdd () T@U)
(declare-fun StartFuel__module._default.BitSub () T@U)
(declare-fun StartFuelAssert__module._default.BitSub () T@U)
(declare-fun StartFuelAssert__module._default.BitAnd () T@U)
(declare-fun StartFuelAssert__module._default.BitOr () T@U)
(declare-fun StartFuelAssert__module._default.BitXor () T@U)
(declare-fun StartFuel__module._default.BitMod () T@U)
(declare-fun StartFuelAssert__module._default.BitMod () T@U)
(declare-fun StartFuel__module._default.BitDiv () T@U)
(declare-fun StartFuelAssert__module._default.BitDiv () T@U)
(declare-fun StartFuel__module._default.BitMul () T@U)
(declare-fun StartFuelAssert__module._default.BitMul () T@U)
(declare-fun StartFuelAssert__module._default.BitNot () T@U)
(declare-fun StartFuelAssert__module._default.BitShiftLeft () T@U)
(declare-fun StartFuelAssert__module._default.BitShiftRight () T@U)
(declare-fun StartFuelAssert__module._default.BitRotateRight () T@U)
(declare-fun StartFuelAssert__module._default.pow2 () T@U)
(declare-fun StartFuelAssert__module._default.BitAtPos () T@U)
(declare-fun StartFuelAssert__module._default.BitwiseMaskHigh () T@U)
(declare-fun StartFuelAssert__module._default.BitwiseMaskLow () T@U)
(declare-fun StartFuel__module._default.SeqRepeat () T@U)
(declare-fun StartFuelAssert__module._default.SeqRepeat () T@U)
(declare-fun StartFuel__module._default.MapSeqToSeq () T@U)
(declare-fun StartFuelAssert__module._default.MapSeqToSeq () T@U)
(declare-fun StartFuelAssert__module._default.IMapSeqToSeq () T@U)
(declare-fun StartFuelAssert__module._default.SeqOfNumbersInRightExclusiveRange () T@U)
(declare-fun StartFuelAssert__module._default.TruncateWord () T@U)
(declare-fun StartFuelAssert__module._default.UpdateTopBits () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@@308 () T@U)
(declare-fun |H#0| () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+2 () Bool)
(declare-fun %lbl%+3 () Bool)
(declare-fun |newtype$check#1_0_0@0| () Int)
(declare-fun |##b#1_0_0@0| () Int)
(declare-fun |##count#1_0_0@0| () Int)
(declare-fun |##u#1_0_0@0| () Int)
(declare-fun |newtype$check#1_0_1@0| () Int)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%@5 () Bool)
(declare-fun %lbl%@6 () Bool)
(declare-fun %lbl%@7 () Bool)
(declare-fun |##b#1_0_1@0| () Int)
(declare-fun |##count#1_0_1@0| () Int)
(declare-fun %lbl%@8 () Bool)
(declare-fun |newtype$check#1_0_2@0| () Int)
(declare-fun %lbl%@9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun |##u#1_0_1@0| () Int)
(declare-fun %lbl%@11 () Bool)
(declare-fun %lbl%+12 () Bool)
(declare-fun |newtype$check#1_1_0@0| () Int)
(declare-fun |##b#1_1_0@0| () Int)
(declare-fun |##count#1_1_0@0| () Int)
(declare-fun |##u#1_1_0@0| () Int)
(declare-fun |newtype$check#1_1_1@0| () Int)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%@14 () Bool)
(declare-fun %lbl%@15 () Bool)
(declare-fun %lbl%@16 () Bool)
(declare-fun |##b#1_1_1@0| () Int)
(declare-fun |##count#1_1_1@0| () Int)
(declare-fun %lbl%@17 () Bool)
(declare-fun %lbl%@18 () Bool)
(declare-fun |##u#1_1_1@0| () Int)
(declare-fun %lbl%@19 () Bool)
(declare-fun %lbl%+20 () Bool)
(declare-fun |newtype$check#1_2_0@0| () Int)
(declare-fun |##b#1_2_0@0| () Int)
(declare-fun |##count#1_2_0@0| () Int)
(declare-fun |newtype$check#1_2_1@0| () Int)
(declare-fun %lbl%@21 () Bool)
(declare-fun %lbl%@22 () Bool)
(declare-fun |##b#1_2_1@0| () Int)
(declare-fun |##count#1_2_1@0| () Int)
(declare-fun %lbl%@23 () Bool)
(declare-fun %lbl%@24 () Bool)
(declare-fun |##u#1_2_0@0| () Int)
(declare-fun %lbl%@25 () Bool)
(declare-fun %lbl%+26 () Bool)
(declare-fun |newtype$check#1_3_0@0| () Int)
(declare-fun |##b#1_3_0@0| () Int)
(declare-fun |##count#1_3_0@0| () Int)
(declare-fun |newtype$check#1_3_1@0| () Int)
(declare-fun %lbl%@27 () Bool)
(declare-fun %lbl%@28 () Bool)
(declare-fun |##b#1_3_1@0| () Int)
(declare-fun |##count#1_3_1@0| () Int)
(declare-fun %lbl%@29 () Bool)
(declare-fun %lbl%@30 () Bool)
(declare-fun %lbl%@31 () Bool)
(declare-fun %lbl%@32 () Bool)
(declare-fun %lbl%+33 () Bool)
(declare-fun |newtype$check#1_4_0@0| () Int)
(declare-fun |newtype$check#1_4_1@0| () Int)
(declare-fun %lbl%@34 () Bool)
(declare-fun %lbl%@35 () Bool)
(declare-fun |##b#1_4_0@0| () Int)
(declare-fun |##count#1_4_0@0| () Int)
(declare-fun %lbl%@36 () Bool)
(declare-fun %lbl%@37 () Bool)
(declare-fun %lbl%@38 () Bool)
(declare-fun %lbl%@39 () Bool)
(declare-fun %lbl%+40 () Bool)
(declare-fun |newtype$check#1_5_0@0| () Int)
(declare-fun |newtype$check#1_5_1@0| () Int)
(declare-fun %lbl%@41 () Bool)
(declare-fun %lbl%@42 () Bool)
(declare-fun %lbl%@43 () Bool)
(declare-fun %lbl%@44 () Bool)
(declare-fun %lbl%+45 () Bool)
(declare-fun |newtype$check#1_6_0@0| () Int)
(declare-fun %lbl%@46 () Bool)
(declare-fun %lbl%@47 () Bool)
(declare-fun %lbl%@48 () Bool)
(declare-fun %lbl%@49 () Bool)
(declare-fun %lbl%+50 () Bool)
(declare-fun %lbl%@51 () Bool)
(declare-fun %lbl%+52 () Bool)
(declare-fun %lbl%@53 () Bool)
(declare-fun %lbl%+54 () Bool)
(declare-fun %lbl%+55 () Bool)
(declare-fun %lbl%+56 () Bool)
(declare-fun %lbl%@57 () Bool)
(declare-fun %lbl%@58 () Bool)
(declare-fun %lbl%@59 () Bool)
(declare-fun %lbl%+60 () Bool)
(declare-fun %lbl%@61 () Bool)
(declare-fun %lbl%@62 () Bool)
(declare-fun %lbl%@63 () Bool)
(declare-fun %lbl%+64 () Bool)
(declare-fun %lbl%@65 () Bool)
(declare-fun %lbl%@66 () Bool)
(declare-fun %lbl%+67 () Bool)
(declare-fun %lbl%+68 () Bool)
(declare-fun %lbl%+69 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type |message#0@@13|) (SeqType BoxType)) (= (type |z#0@@98|) DatatypeTypeType)) (= (type |##ss#1_8_0@0|) (SeqType BoxType))) (= (type |##ws#1_8_0@0|) (SeqType BoxType))) (= (type StartFuelAssert__module._default.WordSeqToBytes) LayerTypeType)) (= (type |processed_bytes#0|) (SeqType BoxType))) (= (type |unprocessed_bytes#0|) (SeqType BoxType))) (= (type StartFuelAssert__module._default.RepeatByte) LayerTypeType)) (= (type StartFuelAssert__module._default.Uint64ToBytes) LayerTypeType)) (= (type StartFuelAssert__module._default.PartialSHA256TraceHasCorrectatohsOpaque) LayerTypeType)) (= (type StartFuel__module._default.TheAToHsAreOK) LayerTypeType)) (= (type StartFuelAssert__module._default.TheAToHsAreOK) LayerTypeType)) (= (type StartFuelAssert__module._default.K_SHA256) LayerTypeType)) (= (type StartFuel__module._default.BytesToUint64) LayerTypeType)) (= (type StartFuelAssert__module._default.BytesToUint64) LayerTypeType)) (= (type StartFuel__module._default.bswap32_seq) LayerTypeType)) (= (type StartFuelAssert__module._default.bswap32_seq) LayerTypeType)) (= (type StartFuelAssert__module._default.Ch) LayerTypeType)) (= (type StartFuelAssert__module._default.Maj) LayerTypeType)) (= (type StartFuelAssert__module._default.Parity) LayerTypeType)) (= (type StartFuel__module._default.ft) LayerTypeType)) (= (type StartFuelAssert__module._default.ft) LayerTypeType)) (= (type StartFuelAssert__module._default.BSIG0) LayerTypeType)) (= (type StartFuelAssert__module._default.BSIG1) LayerTypeType)) (= (type StartFuelAssert__module._default.SSIG0) LayerTypeType)) (= (type StartFuelAssert__module._default.SSIG1) LayerTypeType)) (= (type StartFuel__module._default.BreakIntoBlocks) LayerTypeType)) (= (type StartFuelAssert__module._default.BreakIntoBlocks) LayerTypeType)) (= (type StartFuelAssert__module._default.SeqXor) LayerTypeType)) (= (type BaseFuel__module._default.BEByteSeqToInt) LayerTypeType)) (= (type StartFuelAssert__module._default.BEByteSeqToInt) LayerTypeType)) (= (type BaseFuel__module._default.BEUintToSeqByte) LayerTypeType)) (= (type StartFuelAssert__module._default.BEUintToSeqByte) LayerTypeType)) (= (type StartFuelAssert__module._default.BytesToWord) LayerTypeType)) (= (type StartFuelAssert__module._default.WordToBytes) LayerTypeType)) (= (type BaseFuel__module._default.WordSeqToBytes) LayerTypeType)) (= (type BaseFuel__module._default.RepeatByte) LayerTypeType)) (= (type StartFuelAssert__module._default.update_psr) LayerTypeType)) (= (type StartFuelAssert__module._default.userspaceExecutionFn) LayerTypeType)) (= (type StartFuelAssert__module._default.PageBase) LayerTypeType)) (= (type StartFuelAssert__module._default.ExtractAbsL1PTable) LayerTypeType)) (= (type StartFuelAssert__module._default.evalMOVSPCLRUC) LayerTypeType)) (= (type StartFuelAssert__module._default.WordAsBits) LayerTypeType)) (= (type StartFuelAssert__module._default.BitsAsWord) LayerTypeType)) (= (type StartFuel__module._default.BitAdd) LayerTypeType)) (= (type StartFuelAssert__module._default.BitAdd) LayerTypeType)) (= (type StartFuel__module._default.BitSub) LayerTypeType)) (= (type StartFuelAssert__module._default.BitSub) LayerTypeType)) (= (type StartFuelAssert__module._default.BitAnd) LayerTypeType)) (= (type StartFuelAssert__module._default.BitOr) LayerTypeType)) (= (type StartFuelAssert__module._default.BitXor) LayerTypeType)) (= (type StartFuel__module._default.BitMod) LayerTypeType)) (= (type StartFuelAssert__module._default.BitMod) LayerTypeType)) (= (type StartFuel__module._default.BitDiv) LayerTypeType)) (= (type StartFuelAssert__module._default.BitDiv) LayerTypeType)) (= (type StartFuel__module._default.BitMul) LayerTypeType)) (= (type StartFuelAssert__module._default.BitMul) LayerTypeType)) (= (type StartFuelAssert__module._default.BitNot) LayerTypeType)) (= (type StartFuelAssert__module._default.BitShiftLeft) LayerTypeType)) (= (type StartFuelAssert__module._default.BitShiftRight) LayerTypeType)) (= (type StartFuelAssert__module._default.BitRotateRight) LayerTypeType)) (= (type StartFuelAssert__module._default.pow2) LayerTypeType)) (= (type StartFuelAssert__module._default.BitAtPos) LayerTypeType)) (= (type StartFuelAssert__module._default.BitwiseMaskHigh) LayerTypeType)) (= (type StartFuelAssert__module._default.BitwiseMaskLow) LayerTypeType)) (= (type StartFuel__module._default.SeqRepeat) LayerTypeType)) (= (type StartFuelAssert__module._default.SeqRepeat) LayerTypeType)) (= (type StartFuel__module._default.MapSeqToSeq) LayerTypeType)) (= (type StartFuelAssert__module._default.MapSeqToSeq) LayerTypeType)) (= (type StartFuelAssert__module._default.IMapSeqToSeq) LayerTypeType)) (= (type StartFuelAssert__module._default.SeqOfNumbersInRightExclusiveRange) LayerTypeType)) (= (type StartFuelAssert__module._default.TruncateWord) LayerTypeType)) (= (type StartFuelAssert__module._default.UpdateTopBits) LayerTypeType)) (= (type $_Frame@0) (MapType8Type refType boolType))) (= (type $Heap@@308) (MapType1Type refType))) (= (type |H#0|) (SeqType BoxType))))
(push 1)
(set-info :boogie-vc-id Impl$$_module.__default.lemma__SHA256FinalHelper1)
(assert (not (let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (! (or %lbl%@1 (|Seq#Equal| (_module.__default.WordSeqToBytes StartFuelAssert__module._default.WordSeqToBytes (_module.__default.ConcatenateSeqs Tclass._module.word ($LS ($LS $LZ)) (_module.SHA256Trace.M |z#0@@98|))) (|Seq#Append| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64))) (_module.__default.Uint64ToBytes StartFuelAssert__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))))) :lblneg @1)))) (let ((anon30_Else_correct  (=> (! (and %lbl%+2 true) :lblpos +2) (=> (|Seq#Equal| (_module.__default.WordSeqToBytes StartFuel__module._default.WordSeqToBytes (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (_module.SHA256Trace.M |z#0@@98|))) (|Seq#Append| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuel__module._default.RepeatByte (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64))) (_module.__default.Uint64ToBytes StartFuel__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)))) GeneratedUnifiedExit_correct)))) (let ((anon30_Then_correct  (=> (! (and %lbl%+3 true) :lblpos +3) (=> (= |newtype$check#1_0_0@0| (LitInt 128)) (=> (and (and (and (and (INTERNAL_le_boogie 0 |newtype$check#1_0_0@0|) (INTERNAL_lt_boogie |newtype$check#1_0_0@0| 256)) (and (not (= (LitInt 64) 0)) (not (= (LitInt 64) 0)))) (and (and ($Is (int_2_U (LitInt 0)) Tclass._module.byte) (= |##b#1_0_0@0| (LitInt 0))) (and (= |##count#1_0_0@0| (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64)) (INTERNAL_ge_boogie |##count#1_0_0@0| 0)))) (and (and (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64)) ($Is (int_2_U (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) Tclass._module.uint64)) (and (= |##u#1_0_0@0| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)))) (and (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))) (= |newtype$check#1_0_1@0| (LitInt 128))))) (and (! (or %lbl%@4  (and (INTERNAL_le_boogie 0 |newtype$check#1_0_1@0|) (INTERNAL_lt_boogie |newtype$check#1_0_1@0| 256))) :lblneg @4) (=> (and (INTERNAL_le_boogie 0 |newtype$check#1_0_1@0|) (INTERNAL_lt_boogie |newtype$check#1_0_1@0| 256)) (and (! (or %lbl%@5 (not (= (LitInt 64) 0))) :lblneg @5) (and (! (or %lbl%@6 (not (= (LitInt 64) 0))) :lblneg @6) (and (! (or %lbl%@7 ($Is (int_2_U (LitInt 0)) Tclass._module.byte)) :lblneg @7) (=> ($Is (int_2_U (LitInt 0)) Tclass._module.byte) (=> (and (= |##b#1_0_1@0| (LitInt 0)) (= |##count#1_0_1@0| (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64))) (and (! (or %lbl%@8 (INTERNAL_ge_boogie |##count#1_0_1@0| 0)) :lblneg @8) (=> (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64)) (= |newtype$check#1_0_2@0| (|Seq#Length| |message#0@@13|))) (and (! (or %lbl%@9  (and (INTERNAL_le_boogie 0 |newtype$check#1_0_2@0|) (INTERNAL_lt_boogie |newtype$check#1_0_2@0| 18446744073709551616))) :lblneg @9) (=> (and (INTERNAL_le_boogie 0 |newtype$check#1_0_2@0|) (INTERNAL_lt_boogie |newtype$check#1_0_2@0| 18446744073709551616)) (and (! (or %lbl%@10 ($Is (int_2_U (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) Tclass._module.uint64)) :lblneg @10) (=> ($Is (int_2_U (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) Tclass._module.uint64) (=> (and (and (= |##u#1_0_1@0| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))) (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)))) (! (or %lbl%@11 (|Seq#Equal| (|Seq#Append| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64))) (_module.__default.Uint64ToBytes StartFuelAssert__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))) (|Seq#Append| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64))) (_module.__default.Uint64ToBytes StartFuelAssert__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))))) :lblneg @11)))))))))))))))))))) (let ((anon29_Then_correct  (=> (! (and %lbl%+12 true) :lblpos +12) (=> (= |newtype$check#1_1_0@0| (LitInt 128)) (=> (and (INTERNAL_le_boogie 0 |newtype$check#1_1_0@0|) (INTERNAL_lt_boogie |newtype$check#1_1_0@0| 256)) (=> (and (and ($Is (int_2_U (LitInt 0)) Tclass._module.byte) (= |##b#1_1_0@0| (LitInt 0))) (and (= |##count#1_1_0@0| (LitInt 55)) (INTERNAL_ge_boogie |##count#1_1_0@0| 0))) (=> (and (and (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) ($Is (int_2_U (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) Tclass._module.uint64)) (and (= |##u#1_1_0@0| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)))) (and (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))) (= |newtype$check#1_1_1@0| (LitInt 128)))) (and (! (or %lbl%@13  (and (INTERNAL_le_boogie 0 |newtype$check#1_1_1@0|) (INTERNAL_lt_boogie |newtype$check#1_1_1@0| 256))) :lblneg @13) (=> (and (INTERNAL_le_boogie 0 |newtype$check#1_1_1@0|) (INTERNAL_lt_boogie |newtype$check#1_1_1@0| 256)) (and (! (or %lbl%@14 (not (= (LitInt 64) 0))) :lblneg @14) (and (! (or %lbl%@15 (not (= (LitInt 64) 0))) :lblneg @15) (and (! (or %lbl%@16 ($Is (int_2_U (LitInt 0)) Tclass._module.byte)) :lblneg @16) (=> ($Is (int_2_U (LitInt 0)) Tclass._module.byte) (=> (and (= |##b#1_1_1@0| (LitInt 0)) (= |##count#1_1_1@0| (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64))) (and (! (or %lbl%@17 (INTERNAL_ge_boogie |##count#1_1_1@0| 0)) :lblneg @17) (=> (|_module.__default.RepeatByte#canCall| (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64)) (and (! (or %lbl%@18 ($Is (int_2_U (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) Tclass._module.uint64)) :lblneg @18) (=> ($Is (int_2_U (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) Tclass._module.uint64) (=> (and (and (= |##u#1_1_1@0| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))) (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)))) (! (or %lbl%@19 (|Seq#Equal| (|Seq#Append| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (LitInt 55))) (_module.__default.Uint64ToBytes StartFuelAssert__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))) (|Seq#Append| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64))) (_module.__default.Uint64ToBytes StartFuelAssert__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))))) :lblneg @19)))))))))))))))))))) (let ((anon28_Then_correct  (=> (! (and %lbl%+20 true) :lblpos +20) (=> (= |newtype$check#1_2_0@0| (LitInt 128)) (=> (and (and (and (and (INTERNAL_le_boogie 0 |newtype$check#1_2_0@0|) (INTERNAL_lt_boogie |newtype$check#1_2_0@0| 256)) ($Is (int_2_U (LitInt 0)) Tclass._module.byte)) (and (= |##b#1_2_0@0| (LitInt 0)) (= |##count#1_2_0@0| (LitInt 55)))) (and (and (and (INTERNAL_ge_boogie |##count#1_2_0@0| 0) (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55))) (and (<= 0 (LitInt 56)) (<= (LitInt 56) (|Seq#Length| |unprocessed_bytes#0|)))) (and (and (<= (LitInt 56) (LitInt 64)) (<= (LitInt 64) (|Seq#Length| |unprocessed_bytes#0|))) (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) (= |newtype$check#1_2_1@0| (LitInt 128)))))) (and (! (or %lbl%@21  (and (INTERNAL_le_boogie 0 |newtype$check#1_2_1@0|) (INTERNAL_lt_boogie |newtype$check#1_2_1@0| 256))) :lblneg @21) (=> (and (INTERNAL_le_boogie 0 |newtype$check#1_2_1@0|) (INTERNAL_lt_boogie |newtype$check#1_2_1@0| 256)) (and (! (or %lbl%@22 ($Is (int_2_U (LitInt 0)) Tclass._module.byte)) :lblneg @22) (=> ($Is (int_2_U (LitInt 0)) Tclass._module.byte) (=> (and (= |##b#1_2_1@0| (LitInt 0)) (= |##count#1_2_1@0| (LitInt 55))) (and (! (or %lbl%@23 (INTERNAL_ge_boogie |##count#1_2_1@0| 0)) :lblneg @23) (=> (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) (and (! (or %lbl%@24 ($Is (int_2_U (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) Tclass._module.uint64)) :lblneg @24) (=> ($Is (int_2_U (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) Tclass._module.uint64) (=> (and (and (= |##u#1_2_0@0| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))) (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) (|_module.__default.Uint64ToBytes#canCall| (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8)))) (! (or %lbl%@25 (|Seq#Equal| (|Seq#Append| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (LitInt 55))) (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 64)) (LitInt 56))) (|Seq#Append| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (LitInt 55))) (_module.__default.Uint64ToBytes StartFuelAssert__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))))) :lblneg @25)))))))))))))))) (let ((anon27_Then_correct  (=> (! (and %lbl%+26 true) :lblpos +26) (=> (= |newtype$check#1_3_0@0| (LitInt 128)) (=> (and (and (and (and (INTERNAL_le_boogie 0 |newtype$check#1_3_0@0|) (INTERNAL_lt_boogie |newtype$check#1_3_0@0| 256)) ($Is (int_2_U (LitInt 0)) Tclass._module.byte)) (and (= |##b#1_3_0@0| (LitInt 0)) (= |##count#1_3_0@0| (LitInt 55)))) (and (and (and (INTERNAL_ge_boogie |##count#1_3_0@0| 0) (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55))) (and (<= 0 (LitInt 56)) (<= (LitInt 56) (|Seq#Length| |unprocessed_bytes#0|)))) (and (and (<= (LitInt 56) (LitInt 64)) (<= (LitInt 64) (|Seq#Length| |unprocessed_bytes#0|))) (and (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) (= |newtype$check#1_3_1@0| (LitInt 128)))))) (and (! (or %lbl%@27  (and (INTERNAL_le_boogie 0 |newtype$check#1_3_1@0|) (INTERNAL_lt_boogie |newtype$check#1_3_1@0| 256))) :lblneg @27) (=> (and (INTERNAL_le_boogie 0 |newtype$check#1_3_1@0|) (INTERNAL_lt_boogie |newtype$check#1_3_1@0| 256)) (and (! (or %lbl%@28 ($Is (int_2_U (LitInt 0)) Tclass._module.byte)) :lblneg @28) (=> ($Is (int_2_U (LitInt 0)) Tclass._module.byte) (=> (and (= |##b#1_3_1@0| (LitInt 0)) (= |##count#1_3_1@0| (LitInt 55))) (and (! (or %lbl%@29 (INTERNAL_ge_boogie |##count#1_3_1@0| 0)) :lblneg @29) (=> (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) (and (! (or %lbl%@30  (and (<= 0 (LitInt 56)) (<= (LitInt 56) (|Seq#Length| |unprocessed_bytes#0|)))) :lblneg @30) (and (! (or %lbl%@31  (and (<= (LitInt 56) (LitInt 64)) (<= (LitInt 64) (|Seq#Length| |unprocessed_bytes#0|)))) :lblneg @31) (=> (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) (! (or %lbl%@32 (|Seq#Equal| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (|Seq#Append| (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (LitInt 55)) (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 64)) (LitInt 56)))) (|Seq#Append| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (LitInt 55))) (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 64)) (LitInt 56))))) :lblneg @32)))))))))))))))) (let ((anon26_Then_correct  (=> (! (and %lbl%+33 true) :lblpos +33) (=> (= |newtype$check#1_4_0@0| (LitInt 128)) (=> (and (and (and (INTERNAL_le_boogie 0 |newtype$check#1_4_0@0|) (INTERNAL_lt_boogie |newtype$check#1_4_0@0| 256)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |unprocessed_bytes#0|)))) (and (and (<= (LitInt 1) (LitInt 64)) (<= (LitInt 64) (|Seq#Length| |unprocessed_bytes#0|))) (= |newtype$check#1_4_1@0| (LitInt 128)))) (and (! (or %lbl%@34  (and (INTERNAL_le_boogie 0 |newtype$check#1_4_1@0|) (INTERNAL_lt_boogie |newtype$check#1_4_1@0| 256))) :lblneg @34) (=> (and (INTERNAL_le_boogie 0 |newtype$check#1_4_1@0|) (INTERNAL_lt_boogie |newtype$check#1_4_1@0| 256)) (and (! (or %lbl%@35 ($Is (int_2_U (LitInt 0)) Tclass._module.byte)) :lblneg @35) (=> ($Is (int_2_U (LitInt 0)) Tclass._module.byte) (=> (and (= |##b#1_4_0@0| (LitInt 0)) (= |##count#1_4_0@0| (LitInt 55))) (and (! (or %lbl%@36 (INTERNAL_ge_boogie |##count#1_4_0@0| 0)) :lblneg @36) (=> (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) (and (! (or %lbl%@37  (and (<= 0 (LitInt 56)) (<= (LitInt 56) (|Seq#Length| |unprocessed_bytes#0|)))) :lblneg @37) (and (! (or %lbl%@38  (and (<= (LitInt 56) (LitInt 64)) (<= (LitInt 64) (|Seq#Length| |unprocessed_bytes#0|)))) :lblneg @38) (=> (|_module.__default.RepeatByte#canCall| (LitInt 0) (LitInt 55)) (! (or %lbl%@39 (|Seq#Equal| (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 64)) (LitInt 1))) (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (|Seq#Append| (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (LitInt 55)) (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 64)) (LitInt 56)))))) :lblneg @39)))))))))))))))) (let ((anon25_Then_correct  (=> (! (and %lbl%+40 true) :lblpos +40) (=> (= |newtype$check#1_5_0@0| (LitInt 128)) (=> (and (and (and (INTERNAL_le_boogie 0 |newtype$check#1_5_0@0|) (INTERNAL_lt_boogie |newtype$check#1_5_0@0| 256)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |unprocessed_bytes#0|)))) (and (and (<= (LitInt 1) (LitInt 64)) (<= (LitInt 64) (|Seq#Length| |unprocessed_bytes#0|))) (= |newtype$check#1_5_1@0| (LitInt 128)))) (and (! (or %lbl%@41  (and (INTERNAL_le_boogie 0 |newtype$check#1_5_1@0|) (INTERNAL_lt_boogie |newtype$check#1_5_1@0| 256))) :lblneg @41) (=> (and (INTERNAL_le_boogie 0 |newtype$check#1_5_1@0|) (INTERNAL_lt_boogie |newtype$check#1_5_1@0| 256)) (and (! (or %lbl%@42  (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |unprocessed_bytes#0|)))) :lblneg @42) (and (! (or %lbl%@43  (and (<= (LitInt 1) (LitInt 64)) (<= (LitInt 64) (|Seq#Length| |unprocessed_bytes#0|)))) :lblneg @43) (! (or %lbl%@44 (|Seq#Equal| (|Seq#Append| |message#0@@13| (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128)))) (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 64)) (LitInt 1)))) (|Seq#Append| (|Seq#Append| |message#0@@13| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128))))) (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 64)) (LitInt 1))))) :lblneg @44)))))))))) (let ((anon24_Then_correct  (=> (! (and %lbl%+45 true) :lblpos +45) (=> (= |newtype$check#1_6_0@0| (LitInt 128)) (and (! (or %lbl%@46  (and (INTERNAL_le_boogie 0 |newtype$check#1_6_0@0|) (INTERNAL_lt_boogie |newtype$check#1_6_0@0| 256))) :lblneg @46) (=> (and (INTERNAL_le_boogie 0 |newtype$check#1_6_0@0|) (INTERNAL_lt_boogie |newtype$check#1_6_0@0| 256)) (and (! (or %lbl%@47  (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |unprocessed_bytes#0|)))) :lblneg @47) (and (! (or %lbl%@48  (and (<= (LitInt 1) (LitInt 64)) (<= (LitInt 64) (|Seq#Length| |unprocessed_bytes#0|)))) :lblneg @48) (! (or %lbl%@49 (|Seq#Equal| (|Seq#Append| |message#0@@13| |unprocessed_bytes#0|) (|Seq#Append| |message#0@@13| (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 128)))) (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 64)) (LitInt 1)))))) :lblneg @49))))))))) (let ((anon23_Then_correct  (=> (! (and %lbl%+50 true) :lblpos +50) (! (or %lbl%@51 (|Seq#Equal| |processed_bytes#0| (|Seq#Append| |message#0@@13| |unprocessed_bytes#0|))) :lblneg @51)))) (let ((anon22_Then_correct  (=> (! (and %lbl%+52 true) :lblpos +52) (=> (_module.SHA256Trace.SHA256Trace__c_q |z#0@@98|) (=> (and (and (and (= |##ss#1_8_0@0| (_module.SHA256Trace.M |z#0@@98|)) (|_module.__default.ConcatenateSeqs#canCall| Tclass._module.word (_module.SHA256Trace.M |z#0@@98|))) (and (= |##ws#1_8_0@0| (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (_module.SHA256Trace.M |z#0@@98|))) (|_module.__default.WordSeqToBytes#canCall| (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (_module.SHA256Trace.M |z#0@@98|))))) (and (and (_module.SHA256Trace.SHA256Trace__c_q |z#0@@98|) (|_module.__default.ConcatenateSeqs#canCall| Tclass._module.word (_module.SHA256Trace.M |z#0@@98|))) (|_module.__default.WordSeqToBytes#canCall| (_module.__default.ConcatenateSeqs Tclass._module.word ($LS $LZ) (_module.SHA256Trace.M |z#0@@98|))))) (! (or %lbl%@53 (|Seq#Equal| (_module.__default.WordSeqToBytes StartFuelAssert__module._default.WordSeqToBytes (_module.__default.ConcatenateSeqs Tclass._module.word ($LS ($LS $LZ)) (_module.SHA256Trace.M |z#0@@98|))) |processed_bytes#0|)) :lblneg @53)))))) (let ((anon21_Then_correct  (=> (! (and %lbl%+54 true) :lblpos +54) true))) (let ((anon20_Else_correct  (=> (! (and %lbl%+55 true) :lblpos +55) (=> (= (LitInt 55) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64)) (and (and (and (and (and (and (and (and (and (and anon21_Then_correct anon22_Then_correct) anon23_Then_correct) anon24_Then_correct) anon25_Then_correct) anon26_Then_correct) anon27_Then_correct) anon28_Then_correct) anon29_Then_correct) anon30_Then_correct) anon30_Else_correct))))) (let ((anon20_Then_correct  (=> (! (and %lbl%+56 true) :lblpos +56) (=> (and (not (= (LitInt 64) 0)) (not (= (LitInt 64) 0))) (and (! (or %lbl%@57 (not (= (LitInt 64) 0))) :lblneg @57) (and (! (or %lbl%@58 (not (= (LitInt 64) 0))) :lblneg @58) (! (or %lbl%@59 (= (INTERNAL_mod_boogie (INTERNAL_sub_boogie 55 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 119 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64))) :lblneg @59))))))) (let ((anon19_Then_correct  (=> (! (and %lbl%+60 true) :lblpos +60) (=> (not (= (LitInt 64) 0)) (and (! (or %lbl%@61 (not (= (LitInt 64) 0))) :lblneg @61) (and (! (or %lbl%@62 (not (= (LitInt 64) 0))) :lblneg @62) (! (or %lbl%@63 (= (INTERNAL_sub_boogie 55 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) (INTERNAL_mod_boogie (INTERNAL_sub_boogie 55 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)) 64))) :lblneg @63))))))) (let ((anon18_Then_correct  (=> (! (and %lbl%+64 true) :lblpos +64) (and (! (or %lbl%@65 (not (= (LitInt 64) 0))) :lblneg @65) (! (or %lbl%@66 (= (LitInt 55) (INTERNAL_sub_boogie 55 (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64)))) :lblneg @66))))) (let ((anon17_Then_correct  (=> (! (and %lbl%+67 true) :lblpos +67) true))) (let ((anon0_correct  (=> (! (and %lbl%+68 true) :lblpos +68) (=> (= (AsFuelBottom StartFuel__module._default.PartialSHA256TraceHasCorrectatohsOpaque) StartFuel__module._default.PartialSHA256TraceHasCorrectatohsOpaque) (=> (and (= (AsFuelBottom StartFuelAssert__module._default.PartialSHA256TraceHasCorrectatohsOpaque) StartFuelAssert__module._default.PartialSHA256TraceHasCorrectatohsOpaque) (= (AsFuelBottom StartFuel__module._default.TheAToHsAreOK) StartFuel__module._default.TheAToHsAreOK)) (=> (and (and (= (AsFuelBottom StartFuelAssert__module._default.TheAToHsAreOK) StartFuelAssert__module._default.TheAToHsAreOK) (= (AsFuelBottom StartFuel__module._default.K_SHA256) StartFuel__module._default.K_SHA256)) (and (= (AsFuelBottom StartFuelAssert__module._default.K_SHA256) StartFuelAssert__module._default.K_SHA256) (= (AsFuelBottom StartFuel__module._default.InitialH_SHA256) StartFuel__module._default.InitialH_SHA256))) (=> (and (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.InitialH_SHA256) StartFuelAssert__module._default.InitialH_SHA256) (= (AsFuelBottom StartFuel__module._default.BytesToUint64) StartFuel__module._default.BytesToUint64)) (and (= (AsFuelBottom StartFuelAssert__module._default.BytesToUint64) StartFuelAssert__module._default.BytesToUint64) (= (AsFuelBottom StartFuel__module._default.bswap32_seq) StartFuel__module._default.bswap32_seq))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.bswap32_seq) StartFuelAssert__module._default.bswap32_seq) (= (AsFuelBottom StartFuel__module._default.Ch) StartFuel__module._default.Ch)) (and (= (AsFuelBottom StartFuelAssert__module._default.Ch) StartFuelAssert__module._default.Ch) (= (AsFuelBottom StartFuel__module._default.Maj) StartFuel__module._default.Maj)))) (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.Maj) StartFuelAssert__module._default.Maj) (= (AsFuelBottom StartFuel__module._default.Parity) StartFuel__module._default.Parity)) (and (= (AsFuelBottom StartFuelAssert__module._default.Parity) StartFuelAssert__module._default.Parity) (= (AsFuelBottom StartFuel__module._default.ft) StartFuel__module._default.ft))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.ft) StartFuelAssert__module._default.ft) (= (AsFuelBottom StartFuel__module._default.BSIG0) StartFuel__module._default.BSIG0)) (and (= (AsFuelBottom StartFuelAssert__module._default.BSIG0) StartFuelAssert__module._default.BSIG0) (= (AsFuelBottom StartFuel__module._default.BSIG1) StartFuel__module._default.BSIG1))))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.BSIG1) StartFuelAssert__module._default.BSIG1) (= (AsFuelBottom StartFuel__module._default.SSIG0) StartFuel__module._default.SSIG0)) (and (= (AsFuelBottom StartFuelAssert__module._default.SSIG0) StartFuelAssert__module._default.SSIG0) (= (AsFuelBottom StartFuel__module._default.SSIG1) StartFuel__module._default.SSIG1))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.SSIG1) StartFuelAssert__module._default.SSIG1) (= (AsFuelBottom StartFuel__module._default.BreakIntoBlocks) StartFuel__module._default.BreakIntoBlocks)) (and (= (AsFuelBottom StartFuelAssert__module._default.BreakIntoBlocks) StartFuelAssert__module._default.BreakIntoBlocks) (= (AsFuelBottom StartFuel__module._default.SeqXor) StartFuel__module._default.SeqXor)))) (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.SeqXor) StartFuelAssert__module._default.SeqXor) (= StartFuel__module._default.BEByteSeqToInt ($LS BaseFuel__module._default.BEByteSeqToInt))) (and (= StartFuelAssert__module._default.BEByteSeqToInt ($LS ($LS BaseFuel__module._default.BEByteSeqToInt))) (= (AsFuelBottom BaseFuel__module._default.BEByteSeqToInt) BaseFuel__module._default.BEByteSeqToInt))) (and (and (= StartFuel__module._default.BEUintToSeqByte ($LS BaseFuel__module._default.BEUintToSeqByte)) (= StartFuelAssert__module._default.BEUintToSeqByte ($LS ($LS BaseFuel__module._default.BEUintToSeqByte)))) (and (= (AsFuelBottom BaseFuel__module._default.BEUintToSeqByte) BaseFuel__module._default.BEUintToSeqByte) (= (AsFuelBottom StartFuel__module._default.BytesToWord) StartFuel__module._default.BytesToWord))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.BytesToWord) StartFuelAssert__module._default.BytesToWord) (= (AsFuelBottom StartFuel__module._default.WordToBytes) StartFuel__module._default.WordToBytes)) (and (= (AsFuelBottom StartFuelAssert__module._default.WordToBytes) StartFuelAssert__module._default.WordToBytes) (= (AsFuelBottom StartFuel__module._default.Uint64ToBytes) StartFuel__module._default.Uint64ToBytes))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.Uint64ToBytes) StartFuelAssert__module._default.Uint64ToBytes) (= StartFuel__module._default.WordSeqToBytes ($LS BaseFuel__module._default.WordSeqToBytes))) (and (= StartFuelAssert__module._default.WordSeqToBytes ($LS ($LS BaseFuel__module._default.WordSeqToBytes))) (= (AsFuelBottom BaseFuel__module._default.WordSeqToBytes) BaseFuel__module._default.WordSeqToBytes)))) (and (and (and (= StartFuel__module._default.RepeatByte ($LS BaseFuel__module._default.RepeatByte)) (= StartFuelAssert__module._default.RepeatByte ($LS ($LS BaseFuel__module._default.RepeatByte)))) (and (= (AsFuelBottom BaseFuel__module._default.RepeatByte) BaseFuel__module._default.RepeatByte) (= (AsFuelBottom StartFuel__module._default.ValidRegState) StartFuel__module._default.ValidRegState))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.ValidRegState) StartFuelAssert__module._default.ValidRegState) (= (AsFuelBottom StartFuel__module._default.ValidSRegState) StartFuel__module._default.ValidSRegState)) (and (= (AsFuelBottom StartFuelAssert__module._default.ValidSRegState) StartFuelAssert__module._default.ValidSRegState) (= (AsFuelBottom StartFuel__module._default.ValidMemState) StartFuel__module._default.ValidMemState)))))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.ValidMemState) StartFuelAssert__module._default.ValidMemState) (= (AsFuelBottom StartFuel__module._default.update_psr) StartFuel__module._default.update_psr)) (and (= (AsFuelBottom StartFuelAssert__module._default.update_psr) StartFuelAssert__module._default.update_psr) (= (AsFuelBottom StartFuel__module._default.userspaceExecutionFn) StartFuel__module._default.userspaceExecutionFn))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.userspaceExecutionFn) StartFuelAssert__module._default.userspaceExecutionFn) (= (AsFuelBottom StartFuel__module._default.PageBase) StartFuel__module._default.PageBase)) (and (= (AsFuelBottom StartFuelAssert__module._default.PageBase) StartFuelAssert__module._default.PageBase) (= (AsFuelBottom StartFuel__module._default.ExtractAbsL1PTable) StartFuel__module._default.ExtractAbsL1PTable)))) (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.ExtractAbsL1PTable) StartFuelAssert__module._default.ExtractAbsL1PTable) (= (AsFuelBottom StartFuel__module._default.evalMOVSPCLRUC) StartFuel__module._default.evalMOVSPCLRUC)) (and (= (AsFuelBottom StartFuelAssert__module._default.evalMOVSPCLRUC) StartFuelAssert__module._default.evalMOVSPCLRUC) (= (AsFuelBottom StartFuel__module._default.WordAsBits) StartFuel__module._default.WordAsBits))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.WordAsBits) StartFuelAssert__module._default.WordAsBits) (= (AsFuelBottom StartFuel__module._default.BitsAsWord) StartFuel__module._default.BitsAsWord)) (and (= (AsFuelBottom StartFuelAssert__module._default.BitsAsWord) StartFuelAssert__module._default.BitsAsWord) (= (AsFuelBottom StartFuel__module._default.BitAdd) StartFuel__module._default.BitAdd))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.BitAdd) StartFuelAssert__module._default.BitAdd) (= (AsFuelBottom StartFuel__module._default.BitSub) StartFuel__module._default.BitSub)) (and (= (AsFuelBottom StartFuelAssert__module._default.BitSub) StartFuelAssert__module._default.BitSub) (= (AsFuelBottom StartFuel__module._default.BitAnd) StartFuel__module._default.BitAnd))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.BitAnd) StartFuelAssert__module._default.BitAnd) (= (AsFuelBottom StartFuel__module._default.BitOr) StartFuel__module._default.BitOr)) (and (= (AsFuelBottom StartFuelAssert__module._default.BitOr) StartFuelAssert__module._default.BitOr) (= (AsFuelBottom StartFuel__module._default.BitXor) StartFuel__module._default.BitXor)))) (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.BitXor) StartFuelAssert__module._default.BitXor) (= (AsFuelBottom StartFuel__module._default.BitMod) StartFuel__module._default.BitMod)) (and (= (AsFuelBottom StartFuelAssert__module._default.BitMod) StartFuelAssert__module._default.BitMod) (= (AsFuelBottom StartFuel__module._default.BitDiv) StartFuel__module._default.BitDiv))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.BitDiv) StartFuelAssert__module._default.BitDiv) (= (AsFuelBottom StartFuel__module._default.BitMul) StartFuel__module._default.BitMul)) (and (= (AsFuelBottom StartFuelAssert__module._default.BitMul) StartFuelAssert__module._default.BitMul) (= (AsFuelBottom StartFuel__module._default.BitNot) StartFuel__module._default.BitNot)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.BitNot) StartFuelAssert__module._default.BitNot) (= (AsFuelBottom StartFuel__module._default.BitShiftLeft) StartFuel__module._default.BitShiftLeft)) (and (= (AsFuelBottom StartFuelAssert__module._default.BitShiftLeft) StartFuelAssert__module._default.BitShiftLeft) (= (AsFuelBottom StartFuel__module._default.BitShiftRight) StartFuel__module._default.BitShiftRight))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.BitShiftRight) StartFuelAssert__module._default.BitShiftRight) (= (AsFuelBottom StartFuel__module._default.BitRotateRight) StartFuel__module._default.BitRotateRight)) (and (= (AsFuelBottom StartFuelAssert__module._default.BitRotateRight) StartFuelAssert__module._default.BitRotateRight) (= (AsFuelBottom StartFuel__module._default.pow2) StartFuel__module._default.pow2)))) (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.pow2) StartFuelAssert__module._default.pow2) (= (AsFuelBottom StartFuel__module._default.BitAtPos) StartFuel__module._default.BitAtPos)) (and (= (AsFuelBottom StartFuelAssert__module._default.BitAtPos) StartFuelAssert__module._default.BitAtPos) (= (AsFuelBottom StartFuel__module._default.BitwiseMaskHigh) StartFuel__module._default.BitwiseMaskHigh))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.BitwiseMaskHigh) StartFuelAssert__module._default.BitwiseMaskHigh) (= (AsFuelBottom StartFuel__module._default.BitwiseMaskLow) StartFuel__module._default.BitwiseMaskLow)) (and (= (AsFuelBottom StartFuelAssert__module._default.BitwiseMaskLow) StartFuelAssert__module._default.BitwiseMaskLow) (= (AsFuelBottom StartFuel__module._default.SeqRepeat) StartFuel__module._default.SeqRepeat))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.SeqRepeat) StartFuelAssert__module._default.SeqRepeat) (= (AsFuelBottom StartFuel__module._default.MapSeqToSeq) StartFuel__module._default.MapSeqToSeq)) (and (= (AsFuelBottom StartFuelAssert__module._default.MapSeqToSeq) StartFuelAssert__module._default.MapSeqToSeq) (= (AsFuelBottom StartFuel__module._default.IMapSeqToSeq) StartFuel__module._default.IMapSeqToSeq))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.IMapSeqToSeq) StartFuelAssert__module._default.IMapSeqToSeq) (= (AsFuelBottom StartFuel__module._default.SeqOfNumbersInRightExclusiveRange) StartFuel__module._default.SeqOfNumbersInRightExclusiveRange)) (and (= (AsFuelBottom StartFuelAssert__module._default.SeqOfNumbersInRightExclusiveRange) StartFuelAssert__module._default.SeqOfNumbersInRightExclusiveRange) (= (AsFuelBottom StartFuel__module._default.WordAligned) StartFuel__module._default.WordAligned)))) (and (and (and (= (AsFuelBottom StartFuelAssert__module._default.WordAligned) StartFuelAssert__module._default.WordAligned) (= (AsFuelBottom StartFuel__module._default.TruncateWord) StartFuel__module._default.TruncateWord)) (and (= (AsFuelBottom StartFuelAssert__module._default.TruncateWord) StartFuelAssert__module._default.TruncateWord) (= (AsFuelBottom StartFuel__module._default.PageAligned) StartFuel__module._default.PageAligned))) (and (and (= (AsFuelBottom StartFuelAssert__module._default.PageAligned) StartFuelAssert__module._default.PageAligned) (= (AsFuelBottom StartFuel__module._default.UpdateTopBits) StartFuel__module._default.UpdateTopBits)) (and (= (AsFuelBottom StartFuelAssert__module._default.UpdateTopBits) StartFuelAssert__module._default.UpdateTopBits) (= $_Frame@0 (|lambda#38| alloc null $Heap@@308)))))))) (and (and (and (and anon17_Then_correct anon18_Then_correct) anon19_Then_correct) anon20_Then_correct) anon20_Else_correct)))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+69 true) :lblpos +69) (=> (and ($IsGoodHeap $Heap@@308) ($IsHeapAnchor $Heap@@308)) (=> (and (and (and (and (and ($Is |z#0@@98| Tclass._module.SHA256Trace) (|$IsA#_module.SHA256Trace| |z#0@@98|)) ($Is |H#0| (TSeq Tclass._module.word))) (and ($Is |processed_bytes#0| (TSeq Tclass._module.byte)) ($Is |unprocessed_bytes#0| (TSeq Tclass._module.byte)))) (and (and (and ($Is |message#0@@13| (TSeq Tclass._module.byte)) (= 66 $FunctionContextHeight)) (and (= (|Seq#Length| |H#0|) (LitInt 8)) (= (INTERNAL_mod_boogie (|Seq#Length| |processed_bytes#0|) 64) (LitInt 0)))) (and (and (= (|Seq#Length| |unprocessed_bytes#0|) (LitInt 64)) (= (INTERNAL_mod_boogie (|Seq#Length| |message#0@@13|) 64) (LitInt 0))) (and (|_module.__default.IsCompleteSHA256Trace#canCall| |z#0@@98|) (and (_module.__default.IsCompleteSHA256Trace |z#0@@98|) (and (and (and (and (and (forall ((|i#4@@3| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |i#4@@3|) (INTERNAL_lt_boogie |i#4@@3| (|Seq#Length| (_module.SHA256Trace.M |z#0@@98|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@98|) |i#4@@3|))) (LitInt 16)))) :qid |sha256sd.59:13| :skolemid |1790| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.M |z#0@@98|) |i#4@@3|))) )) (= (|Seq#Length| (_module.SHA256Trace.H |z#0@@98|)) (INTERNAL_add_boogie (|Seq#Length| (_module.SHA256Trace.M |z#0@@98|)) 1))) (and (= (|Seq#Length| (_module.SHA256Trace.W |z#0@@98|)) (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@98|))) (= (|Seq#Length| (_module.SHA256Trace.atoh |z#0@@98|)) (|Seq#Length| (_module.SHA256Trace.M |z#0@@98|))))) (forall ((|blk#15| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#15|) (INTERNAL_lt_boogie |blk#15| (|Seq#Length| (_module.SHA256Trace.M |z#0@@98|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@98|) |blk#15|))) (LitInt 64)))) :qid |sha256sd.62:13| :skolemid |1791| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.W |z#0@@98|) |blk#15|))) ))) (forall ((|blk#16| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#16|) (INTERNAL_lt_boogie |blk#16| (|Seq#Length| (_module.SHA256Trace.M |z#0@@98|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@98|) |blk#16|))) (LitInt 65)))) :qid |sha256sd.63:13| :skolemid |1792| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.atoh |z#0@@98|) |blk#16|))) ))) (forall ((|blk#17| Int) ) (!  (=> true (=> (and (INTERNAL_le_boogie 0 |blk#17|) (INTERNAL_le_boogie |blk#17| (|Seq#Length| (_module.SHA256Trace.M |z#0@@98|)))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@98|) |blk#17|))) (LitInt 8)))) :qid |sha256sd.64:13| :skolemid |1793| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (_module.SHA256Trace.H |z#0@@98|) |blk#17|))) )))))))) (and (and (and (and (|_module.__default.SHA256TraceIsCorrect#canCall| |z#0@@98|) (and (_module.__default.SHA256TraceIsCorrect |z#0@@98|) (and (and (_module.__default.SHA256TraceHasCorrectHs |z#0@@98|) (_module.__default.SHA256TraceHasCorrectWs |z#0@@98|)) (_module.__default.SHA256TraceHasCorrectatohs |z#0@@98|)))) (|Seq#Equal| (_module.__default.WordSeqToBytes StartFuelAssert__module._default.WordSeqToBytes (_module.__default.ConcatenateSeqs Tclass._module.word ($LS ($LS $LZ)) (_module.SHA256Trace.M |z#0@@98|))) |processed_bytes#0|)) (and (|Seq#Equal| |H#0| ($Unbox (SeqType BoxType) (_module.__default.last (TSeq Tclass._module.word) (_module.SHA256Trace.H |z#0@@98|)))) (|Seq#Equal| |processed_bytes#0| (|Seq#Append| |message#0@@13| |unprocessed_bytes#0|)))) (and (and (= (U_2_int ($Unbox intType (|Seq#Index| |unprocessed_bytes#0| (LitInt 0)))) (LitInt 128)) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 56)) (LitInt 1)) (_module.__default.RepeatByte StartFuelAssert__module._default.RepeatByte (LitInt 0) (LitInt 55)))) (and (INTERNAL_le_boogie (|Seq#Length| |message#0@@13|) _module.__default.MaxBytesForSHA) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| |unprocessed_bytes#0| (LitInt 64)) (LitInt 56)) (_module.__default.Uint64ToBytes StartFuelAssert__module._default.Uint64ToBytes (INTERNAL_mul_boogie (|Seq#Length| |message#0@@13|) 8))))))) anon0_correct))))) PreconditionGeneratedEntry_correct))))))))))))))))))) ))
(check-sat)
