(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc5 () T@U)
(declare-fun Tagclass._System.___hPartialFunc5 () T@U)
(declare-fun Tagclass._System.___hTotalFunc5 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc2OSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2OSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2OSO () T@U)
(declare-fun Tagclass._System.___hFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hFunc1OS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OS () T@U)
(declare-fun Tagclass._System.___hFunc0L () T@U)
(declare-fun Tagclass._System.___hPartialFunc0L () T@U)
(declare-fun Tagclass._System.___hTotalFunc0L () T@U)
(declare-fun Tagclass._System.___hFunc2LOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LOO () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun Tagclass._System.___hFunc1OL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OL () T@U)
(declare-fun Tagclass._System.___hFunc1LO () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LO () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LO () T@U)
(declare-fun |##_System._tuple#2OLL._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2OLL () T@U)
(declare-fun class._System.Tuple2OLL () T@U)
(declare-fun Tagclass._System.___hFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hFunc2SSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2SSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2SSO () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc2LLO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LLO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LLO () T@U)
(declare-fun Tagclass._System.___hFunc1SS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1SS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1SS () T@U)
(declare-fun Tagclass._System.___hFunc1LL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LL () T@U)
(declare-fun |##DList.Node.Node| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.DList.Node () T@U)
(declare-fun class.DList.Node () T@U)
(declare-fun |##DList.DList.DList| () T@U)
(declare-fun Tagclass.DList.DList () T@U)
(declare-fun class.DList.DList () T@U)
(declare-fun class.DList.__default () T@U)
(declare-fun Tagclass.DList.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.LinearMaybe.predefined () T@U)
(declare-fun class.LinearMaybe.__default () T@U)
(declare-fun Tagclass.LinearMaybe.__default () T@U)
(declare-fun class.LinearExtern.predefined () T@U)
(declare-fun class.LinearExtern.__default () T@U)
(declare-fun Tagclass.LinearExtern.__default () T@U)
(declare-fun class.LinearSequence__i.__default () T@U)
(declare-fun Tagclass.LinearSequence__i.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func5| () T@U)
(declare-fun |tytagFamily$_#PartialFunc5| () T@U)
(declare-fun |tytagFamily$_#TotalFunc5| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_#Func2OSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#Func3LLOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#Func1OS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OS| () T@U)
(declare-fun |tytagFamily$_#Func0L| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0L| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0L| () T@U)
(declare-fun |tytagFamily$_#Func2LOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LOO| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun |tytagFamily$_#Func1OL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OL| () T@U)
(declare-fun |tytagFamily$_#Func1LO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LO| () T@U)
(declare-fun |tytagFamily$_tuple#2OLL| () T@U)
(declare-fun |tytagFamily$_#Func3LLOL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#Func2SSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2SSO| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_#Func2LLO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#Func1SS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1SS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1SS| () T@U)
(declare-fun |tytagFamily$_#Func1LL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LL| () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$Node () T@U)
(declare-fun tytagFamily$DList () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_5 (T@U) T@U)
(declare-fun Apply5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle5 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4TypeInv5 (T@T) T@T)
(declare-fun MapType4TypeInv6 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_2 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_1 (T@U) T@U)
(declare-fun |#_System._tuple#2OLL._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2OLL.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2OLL (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_1 (T@U) T@U)
(declare-fun _System.Tuple2OLL._0 (T@U) T@U)
(declare-fun _System.Tuple2OLL._1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2OLL| (T@U) Bool)
(declare-fun |_System.Tuple2OLL#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_2 (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_1 (T@U) T@U)
(declare-fun |#DList.Node.Node| (T@U Int Int) T@U)
(declare-fun DList.Node.Node_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.DList.Node (T@U) T@U)
(declare-fun Tclass.DList.Node_0 (T@U) T@U)
(declare-fun DList.Node.data (T@U) T@U)
(declare-fun DList.Node.next (T@U) Int)
(declare-fun DList.Node.prev (T@U) Int)
(declare-fun |$IsA#DList.Node| (T@U) Bool)
(declare-fun |DList.Node#Equal| (T@U T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun |#DList.DList.DList| (T@U Int T@U T@U T@U) T@U)
(declare-fun DList.DList.DList_q (T@U) Bool)
(declare-fun Tclass.DList.DList (T@U) T@U)
(declare-fun Tclass.DList.DList_0 (T@U) T@U)
(declare-fun DList.DList.nodes (T@U) T@U)
(declare-fun DList.DList.freeStack (T@U) Int)
(declare-fun DList.DList.s (T@U) T@U)
(declare-fun DList.DList.f (T@U) T@U)
(declare-fun DList.DList.g (T@U) T@U)
(declare-fun |$IsA#DList.DList| (T@U) Bool)
(declare-fun |DList.DList#Equal| (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun DList.DList.Inv (T@U T@U) Bool)
(declare-fun |DList.DList.Inv#canCall| (T@U T@U) Bool)
(declare-fun |DList.DList.Inv#requires| (T@U T@U) Bool)
(declare-fun |DList.__default.Invs#canCall| (T@U T@U Int T@U T@U T@U) Bool)
(declare-fun DList.__default.Invs (T@U T@U Int T@U T@U T@U) Bool)
(declare-fun DList.DList.Seq (T@U T@U) T@U)
(declare-fun |DList.DList.Seq#canCall| (T@U T@U) Bool)
(declare-fun |DList.DList.Seq#requires| (T@U T@U) Bool)
(declare-fun DList.DList.ValidPtr (T@U T@U Int) Bool)
(declare-fun |DList.DList.ValidPtr#canCall| (T@U T@U Int) Bool)
(declare-fun |DList.DList.ValidPtr#requires| (T@U T@U Int) Bool)
(declare-fun DList.DList.MaybePtr (T@U T@U Int) Bool)
(declare-fun |DList.DList.MaybePtr#canCall| (T@U T@U Int) Bool)
(declare-fun |DList.DList.MaybePtr#requires| (T@U T@U Int) Bool)
(declare-fun DList.DList.Index (T@U T@U Int) Int)
(declare-fun |DList.DList.Index#canCall| (T@U T@U Int) Bool)
(declare-fun |DList.DList.Index#requires| (T@U T@U Int) Bool)
(declare-fun DList.DList.IndexHi (T@U T@U Int) Int)
(declare-fun |DList.DList.IndexHi#canCall| (T@U T@U Int) Bool)
(declare-fun |DList.DList.IndexHi#requires| (T@U T@U Int) Bool)
(declare-fun DList.DList.Get (T@U T@U Int) T@U)
(declare-fun |DList.DList.Get#canCall| (T@U T@U Int) Bool)
(declare-fun |DList.DList.Get#requires| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.seq_get#canCall| (T@U T@U Int) Bool)
(declare-fun LinearExtern.__default.seq_get (T@U T@U Int) T@U)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun DList.DList.Next (T@U T@U Int) Int)
(declare-fun |DList.DList.Next#canCall| (T@U T@U Int) Bool)
(declare-fun |DList.DList.Next#requires| (T@U T@U Int) Bool)
(declare-fun DList.DList.Prev (T@U T@U Int) Int)
(declare-fun |DList.DList.Prev#canCall| (T@U T@U Int) Bool)
(declare-fun |DList.DList.Prev#requires| (T@U T@U Int) Bool)
(declare-fun DList.__default.sentinel () Int)
(declare-fun DList.__default.unused () Int)
(declare-fun DList.DList.PointerToIndexUnchanged (T@U T@U T@U T@U Int) Bool)
(declare-fun |DList.DList.PointerToIndexUnchanged#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |DList.DList.PointerToIndexUnchanged#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Tclass.DList.__default () T@U)
(declare-fun |DList.__default.Invs#requires| (T@U T@U Int T@U T@U T@U) Bool)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.LinearMaybe.__default () T@U)
(declare-fun LinearMaybe.__default.has (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.has#canCall| (T@U T@U) Bool)
(declare-fun |#$maybe| (T@U) T@U)
(declare-fun |LinearMaybe.__default.has#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.read (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.read#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.read#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.peek (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.peek#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.peek#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.unwrap (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.unwrap#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.unwrap#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.give (T@U T@U T@U) T@U)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |LinearMaybe.__default.give#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.give#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMaybe.__default.empty (T@U) T@U)
(declare-fun |LinearMaybe.__default.empty#requires| (T@U) Bool)
(declare-fun LinearMaybe.__default.discard (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.discard#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.discard#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.imagine (T@U Bool T@U) T@U)
(declare-fun |LinearMaybe.__default.imagine#canCall| (T@U Bool T@U) Bool)
(declare-fun |LinearMaybe.__default.imagine#requires| (T@U Bool T@U) Bool)
(declare-fun Tclass.LinearExtern.__default () T@U)
(declare-fun |LinearExtern.__default.seq_get#requires| (T@U T@U Int) Bool)
(declare-fun LinearExtern.__default.seq_set (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_set#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_set#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_length (T@U T@U) Int)
(declare-fun |LinearExtern.__default.seq_length#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_length#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_empty (T@U) T@U)
(declare-fun |LinearExtern.__default.seq_empty#requires| (T@U) Bool)
(declare-fun LinearExtern.__default.seq_alloc (T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_alloc#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_alloc#requires| (T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_free (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_free#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_free#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_unleash (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_unleash#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_unleash#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseqs__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#canCall| (T@U T@U) Bool)
(declare-fun |#$lseq| (T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq__has (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq__has#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq__has#requires| (T@U T@U) Bool)
(declare-fun |lambda#24| (T@U) T@U)
(declare-fun |lambda#154| (T@U T@U) T@U)
(declare-fun |lambda#36| (T@U Int Int) T@U)
(declare-fun |lambda#23| (T@U) T@U)
(declare-fun |lambda#22| (Bool) T@U)
(declare-fun LinearExtern.__default.imagine__lseq__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_length_raw (T@U T@U) Int)
(declare-fun |LinearExtern.__default.lseq_length_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_length_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_alloc_raw (T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#canCall| (T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#requires| (T@U Int) Bool)
(declare-fun LinearExtern.__default.lseq_free_raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_free_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_free_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_swap_raw_fun (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.lseq_share_raw (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_share_raw#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_share_raw#requires| (T@U T@U Int) Bool)
(declare-fun Tclass.LinearSequence__i.__default () T@U)
(declare-fun LinearSequence__i.__default.seq__alloc__init (T@U Int T@U) T@U)
(declare-fun |LinearSequence__i.__default.seq__alloc__init#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearSequence__i.__default.seq__alloc__init#requires| (T@U Int T@U) Bool)
(declare-fun LinearSequence__i.__default.lseqs (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.lseqs#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseqs#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.imagine__lseq (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.imagine__lseq#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.imagine__lseq#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.linLast (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.linLast#canCall| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.operator_kcardinality_qlseq (T@U T@U) Int)
(declare-fun |LinearSequence__i.__default.linLast#requires| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.ldroplast (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.ldroplast#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.ldroplast#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__has__all (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__has__all#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__has__all#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__length__as__uint64 (T@U T@U) Int)
(declare-fun |LinearSequence__i.__default.lseq__length__as__uint64#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__length__as__uint64#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__length (T@U T@U) Int)
(declare-fun |LinearSequence__i.__default.lseq__length#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__length#requires| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.operator_kcardinality_qlseq#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.operator_ksubscript_qlseq (T@U T@U Int) T@U)
(declare-fun |LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.operator_ksubscript_qlseq#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.operator_kin_qlseq (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.operator_kin_qlseq#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.operator_kin_qlseq#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.lseq__add (T@U T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.lseq__add#canCall| (T@U T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__add#requires| (T@U T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__peek (T@U T@U Int) T@U)
(declare-fun |LinearSequence__i.__default.lseq__peek#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.lseq__peek#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.lseq__free__fun (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.lseq__free__fun#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__free__fun#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__take__fun (T@U T@U Int) T@U)
(declare-fun |LinearSequence__i.__default.lseq__take__fun#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.lseq__take__fun#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.lseq__full (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__full#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__full#requires| (T@U T@U) Bool)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (Int Int Int) T@U)
(declare-fun |lambda#21| (T@U) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (Int T@U Int) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (Int T@U T@U Int) T@U)
(declare-fun |lambda#58| (Int T@U T@U Int) T@U)
(declare-fun |lambda#68| (T@U Int Int T@U Int T@U Int T@U) T@U)
(declare-fun |lambda#78| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#79| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#80| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#81| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#82| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#83| (Int T@U Int T@U T@U Int) T@U)
(declare-fun |lambda#84| (T@U Int Int) T@U)
(declare-fun |lambda#93| (Int Int Int T@U T@U Int) T@U)
(declare-fun |lambda#103| (Int Int T@U Int T@U Int T@U) T@U)
(declare-fun |lambda#113| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#114| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#115| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#116| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#117| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#138| (Int Int T@U Int T@U Int T@U) T@U)
(declare-fun |lambda#148| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#149| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#150| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#151| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#152| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#153| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :qid |typeInv:U_2_string| :pattern ( (string_2_U arg0@@7)) ))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :qid |cast:U_2_string| :pattern ( (U_2_string x@@3)) ))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType) :qid |funType:string_2_U| :pattern ( (string_2_U arg0@@8)) ))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :qid |typeInv:U_2_regex| :pattern ( (regex_2_U arg0@@9)) ))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :qid |cast:U_2_regex| :pattern ( (U_2_regex x@@4)) ))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType) :qid |funType:regex_2_U| :pattern ( (regex_2_U arg0@@10)) ))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) )))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z)) )))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType| ))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@12)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc5) TyTagType)) (= (type Tagclass._System.___hPartialFunc5) TyTagType)) (= (type Tagclass._System.___hTotalFunc5) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc2OSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2OSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2OSO) TyTagType)) (= (type Tagclass._System.___hFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hFunc1OS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OS) TyTagType)) (= (type Tagclass._System.___hFunc0L) TyTagType)) (= (type Tagclass._System.___hPartialFunc0L) TyTagType)) (= (type Tagclass._System.___hTotalFunc0L) TyTagType)) (= (type Tagclass._System.___hFunc2LOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LOO) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type Tagclass._System.___hFunc1OL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OL) TyTagType)) (= (type Tagclass._System.___hFunc1LO) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LO) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LO) TyTagType)) (= (type |##_System._tuple#2OLL._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2OLL) TyTagType)) (= (type class._System.Tuple2OLL) ClassNameType)) (= (type Tagclass._System.___hFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hFunc2SSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2SSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2SSO) TyTagType)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc2LLO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LLO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LLO) TyTagType)) (= (type Tagclass._System.___hFunc1SS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1SS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1SS) TyTagType)) (= (type Tagclass._System.___hFunc1LL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LL) TyTagType)) (= (type |##DList.Node.Node|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type Tagclass.DList.Node) TyTagType)) (= (type class.DList.Node) ClassNameType)) (= (type |##DList.DList.DList|) DtCtorIdType)) (= (type Tagclass.DList.DList) TyTagType)) (= (type class.DList.DList) ClassNameType)) (= (type class.DList.__default) ClassNameType)) (= (type Tagclass.DList.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.LinearMaybe.predefined) ClassNameType)) (= (type class.LinearMaybe.__default) ClassNameType)) (= (type Tagclass.LinearMaybe.__default) TyTagType)) (= (type class.LinearExtern.predefined) ClassNameType)) (= (type class.LinearExtern.__default) ClassNameType)) (= (type Tagclass.LinearExtern.__default) TyTagType)) (= (type class.LinearSequence__i.__default) ClassNameType)) (= (type Tagclass.LinearSequence__i.__default) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func5|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0L|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2OLL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LL|) TyTagFamilyType)) (= (type tytagFamily$Option) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$Node) TyTagFamilyType)) (= (type tytagFamily$DList) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc5 Tagclass._System.___hPartialFunc5 Tagclass._System.___hTotalFunc5 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc2OSO Tagclass._System.___hPartialFunc2OSO Tagclass._System.___hTotalFunc2OSO Tagclass._System.___hFunc3LLOO Tagclass._System.___hPartialFunc3LLOO Tagclass._System.___hTotalFunc3LLOO Tagclass._System.___hFunc1OS Tagclass._System.___hPartialFunc1OS Tagclass._System.___hTotalFunc1OS Tagclass._System.___hFunc0L Tagclass._System.___hPartialFunc0L Tagclass._System.___hTotalFunc0L Tagclass._System.___hFunc2LOO Tagclass._System.___hPartialFunc2LOO Tagclass._System.___hTotalFunc2LOO |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 Tagclass._System.___hFunc1OL Tagclass._System.___hPartialFunc1OL Tagclass._System.___hTotalFunc1OL Tagclass._System.___hFunc1LO Tagclass._System.___hPartialFunc1LO Tagclass._System.___hTotalFunc1LO |##_System._tuple#2OLL._#Make2| Tagclass._System.Tuple2OLL class._System.Tuple2OLL Tagclass._System.___hFunc3LLOL Tagclass._System.___hPartialFunc3LLOL Tagclass._System.___hTotalFunc3LLOL Tagclass._System.___hFunc2SSO Tagclass._System.___hPartialFunc2SSO Tagclass._System.___hTotalFunc2SSO |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc2LLO Tagclass._System.___hPartialFunc2LLO Tagclass._System.___hTotalFunc2LLO Tagclass._System.___hFunc1SS Tagclass._System.___hPartialFunc1SS Tagclass._System.___hTotalFunc1SS Tagclass._System.___hFunc1LL Tagclass._System.___hPartialFunc1LL Tagclass._System.___hTotalFunc1LL |##DList.Node.Node| Tagclass.Options.Option Tagclass.NativeTypes.uint64 Tagclass.DList.Node class.DList.Node |##DList.DList.DList| Tagclass.DList.DList class.DList.DList class.DList.__default Tagclass.DList.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.LinearMaybe.predefined class.LinearMaybe.__default Tagclass.LinearMaybe.__default class.LinearExtern.predefined class.LinearExtern.__default Tagclass.LinearExtern.__default class.LinearSequence__i.__default Tagclass.LinearSequence__i.__default tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_#Func5| |tytagFamily$_#PartialFunc5| |tytagFamily$_#TotalFunc5| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_#Func2OSO| |tytagFamily$_#PartialFunc2OSO| |tytagFamily$_#TotalFunc2OSO| |tytagFamily$_#Func3LLOO| |tytagFamily$_#PartialFunc3LLOO| |tytagFamily$_#TotalFunc3LLOO| |tytagFamily$_#Func1OS| |tytagFamily$_#PartialFunc1OS| |tytagFamily$_#TotalFunc1OS| |tytagFamily$_#Func0L| |tytagFamily$_#PartialFunc0L| |tytagFamily$_#TotalFunc0L| |tytagFamily$_#Func2LOO| |tytagFamily$_#PartialFunc2LOO| |tytagFamily$_#TotalFunc2LOO| |tytagFamily$_tuple#0| |tytagFamily$_#Func1OL| |tytagFamily$_#PartialFunc1OL| |tytagFamily$_#TotalFunc1OL| |tytagFamily$_#Func1LO| |tytagFamily$_#PartialFunc1LO| |tytagFamily$_#TotalFunc1LO| |tytagFamily$_tuple#2OLL| |tytagFamily$_#Func3LLOL| |tytagFamily$_#PartialFunc3LLOL| |tytagFamily$_#TotalFunc3LLOL| |tytagFamily$_#Func2SSO| |tytagFamily$_#PartialFunc2SSO| |tytagFamily$_#TotalFunc2SSO| |tytagFamily$_tuple#2| |tytagFamily$_#Func2LLO| |tytagFamily$_#PartialFunc2LLO| |tytagFamily$_#TotalFunc2LLO| |tytagFamily$_#Func1SS| |tytagFamily$_#PartialFunc1SS| |tytagFamily$_#TotalFunc1SS| |tytagFamily$_#Func1LL| |tytagFamily$_#PartialFunc1LL| |tytagFamily$_#TotalFunc1LL| tytagFamily$Option tytagFamily$uint64 tytagFamily$Node tytagFamily$DList tytagFamily$sbyte tytagFamily$byte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$uint32 tytagFamily$int64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@13)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPreludebpl.34:15| :skolemid |347| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@15)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPreludebpl.36:15| :skolemid |348| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@17)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPreludebpl.38:15| :skolemid |349| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@18)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@19)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPreludebpl.40:15| :skolemid |350| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@20)) )) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@21)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPreludebpl.42:15| :skolemid |351| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@22 arg1)) )) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@23)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPreludebpl.45:15| :skolemid |352| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@24)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPreludebpl.46:15| :skolemid |353| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@25 arg1@@0)) )) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@26)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPreludebpl.49:15| :skolemid |354| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@27)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPreludebpl.50:15| :skolemid |355| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@28)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPreludebpl.76:15| :skolemid |356| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPreludebpl.77:15| :skolemid |357| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPreludebpl.78:15| :skolemid |358| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPreludebpl.79:15| :skolemid |359| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPreludebpl.80:15| :skolemid |360| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPreludebpl.81:15| :skolemid |361| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29))) (= (type (Lit arg0@@29)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@29)) )))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8) :qid |DafnyPreludebpl.89:29| :skolemid |362| :pattern ( (Lit x@@8)) )))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@30)) ))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :qid |DafnyPreludebpl.90:18| :skolemid |363| :pattern ( ($Box (Lit x@@9))) )))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10) :qid |DafnyPreludebpl.95:29| :skolemid |364| :pattern ( (LitInt x@@10)) )))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :qid |DafnyPreludebpl.96:15| :skolemid |365| :pattern ( ($Box (int_2_U (LitInt x@@11)))) )))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12) :qid |DafnyPreludebpl.97:30| :skolemid |366| :pattern ( (LitReal x@@12)) )))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :qid |DafnyPreludebpl.98:15| :skolemid |367| :pattern ( ($Box (real_2_U (LitReal x@@13)))) )))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@31)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPreludebpl.107:15| :skolemid |368| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPreludebpl.111:15| :skolemid |369| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@32 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPreludebpl.117:15| :skolemid |370| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@33 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPreludebpl.120:15| :skolemid |371| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@34)) )))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14))) (= ($Unbox T@@1 ($Box x@@14)) x@@14)) :qid |DafnyPreludebpl.141:18| :skolemid |372| :pattern ( ($Box x@@14)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPreludebpl.143:15| :skolemid |373| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPreludebpl.146:15| :skolemid |374| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPreludebpl.149:15| :skolemid |375| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPreludebpl.152:15| :skolemid |376| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type| )) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@36 arg1@@4)) ))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@37 arg1@@5)) ))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38)))) (= (type (MapType0Select arg0@@38 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@38 arg1@@6)) ))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :qid |DafnyPreludebpl.158:15| :skolemid |377| :pattern ( ($IsBox bx@@3 (TBitvector 0))) )))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :qid |DafnyPreludebpl.162:15| :skolemid |378| :pattern ( ($IsBox bx@@4 (TSet t@@13))) )))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :qid |DafnyPreludebpl.165:15| :skolemid |379| :pattern ( ($IsBox bx@@5 (TISet t@@14))) )))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :qid |DafnyPreludebpl.168:15| :skolemid |380| :pattern ( ($IsBox bx@@6 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType| )) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@41)) ))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :qid |DafnyPreludebpl.171:15| :skolemid |381| :pattern ( ($IsBox bx@@7 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType| )) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@43 arg1@@9)) ))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@44 arg1@@10)) ))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :qid |DafnyPreludebpl.174:15| :skolemid |382| :pattern ( ($IsBox bx@@8 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType| )) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@46 arg1@@12)) ))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@47 arg1@@13)) ))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :qid |DafnyPreludebpl.177:15| :skolemid |383| :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :qid |DafnyPreludebpl.181:18| :skolemid |384| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@48 arg1@@14)) )) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :qid |DafnyPreludebpl.184:18| :skolemid |385| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPreludebpl.202:14| :skolemid |386| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPreludebpl.203:14| :skolemid |387| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPreludebpl.204:14| :skolemid |388| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPreludebpl.205:14| :skolemid |389| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPreludebpl.206:14| :skolemid |390| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPreludebpl.208:14| :skolemid |391| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPreludebpl.209:14| :skolemid |392| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPreludebpl.210:14| :skolemid |393| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPreludebpl.211:14| :skolemid |394| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPreludebpl.212:14| :skolemid |395| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :qid |DafnyPreludebpl.216:15| :skolemid |396| :pattern ( ($Is v@@11 (TBitvector 0))) )))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :qid |DafnyPreludebpl.217:15| :skolemid |397| :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5)) )))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPreludebpl.221:11| :skolemid |398| :pattern ( (MapType0Select v@@13 bx@@10)) )))) :qid |DafnyPreludebpl.219:15| :skolemid |399| :pattern ( ($Is v@@13 (TSet t0))) )))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPreludebpl.225:11| :skolemid |400| :pattern ( (MapType0Select v@@14 bx@@11)) )))) :qid |DafnyPreludebpl.223:15| :skolemid |401| :pattern ( ($Is v@@14 (TISet t0@@0))) )))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :qid |DafnyPreludebpl.229:11| :skolemid |402| :pattern ( (MapType0Select v@@15 bx@@12)) )))) :qid |DafnyPreludebpl.227:15| :skolemid |403| :pattern ( ($Is v@@15 (TMultiSet t0@@1))) )))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :qid |DafnyPreludebpl.231:15| :skolemid |404| :pattern ( ($Is v@@16 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50)))) (= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@50 arg1@@16)) )))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :qid |DafnyPreludebpl.235:11| :skolemid |405| :pattern ( (|Seq#Index| v@@17 i)) )))) :qid |DafnyPreludebpl.233:15| :skolemid |406| :pattern ( ($Is v@@17 (TSeq t0@@3))) )))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :qid |DafnyPreludebpl.240:11| :skolemid |407| :pattern ( (MapType0Select v@@18 bx@@13)) )))) :qid |DafnyPreludebpl.238:15| :skolemid |408| :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6)) )))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :qid |DafnyPreludebpl.244:11| :skolemid |409| :pattern ( (MapType0Select v@@19 bx@@14)) )))) :qid |DafnyPreludebpl.242:15| :skolemid |410| :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7)) )))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :qid |DafnyPreludebpl.248:11| :skolemid |411| :pattern ( (MapType0Select v@@20 bx@@15)) )))) :qid |DafnyPreludebpl.246:15| :skolemid |412| :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) )))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :qid |DafnyPreludebpl.252:11| :skolemid |413| :pattern ( (|Seq#Index| v@@21 i@@0)) )))) :qid |DafnyPreludebpl.250:15| :skolemid |414| :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) )))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51)))) (let ((U (MapTypeInv0 (type arg0@@51)))) (= (type (|Map#Elements| arg0@@51)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@51)) )) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52)))) (= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@52)) ))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :qid |DafnyPreludebpl.259:19| :skolemid |415| :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16)) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16)) )))) :qid |DafnyPreludebpl.256:15| :skolemid |416| :pattern ( ($Is v@@22 (TMap t0@@8 t1))) )))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :qid |DafnyPreludebpl.267:19| :skolemid |417| :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17)) :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17)) )))) :qid |DafnyPreludebpl.264:15| :skolemid |418| :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) )))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53)))) (= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@53)) )) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@54)) ))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17)) ))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :qid |DafnyPreludebpl.272:15| :skolemid |419| :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1))) )))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@56)))) (= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@56)) )) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57)))) (= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@57)) ))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :qid |DafnyPreludebpl.282:19| :skolemid |420| :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18)) :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18)) )))) :qid |DafnyPreludebpl.279:15| :skolemid |421| :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2))) )))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :qid |DafnyPreludebpl.290:19| :skolemid |422| :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19)) :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19)) )))) :qid |DafnyPreludebpl.287:15| :skolemid |423| :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) )))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58)))) (= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@58)) )) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@59)) ))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :qid |DafnyPreludebpl.295:15| :skolemid |424| :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4))) )))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@60 arg1@@18)) )) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@61)) ))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@62)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPreludebpl.322:15| :skolemid |425| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@63)) )))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :qid |DafnyPreludebpl.331:15| :skolemid |426| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPreludebpl.333:15| :skolemid |427| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPreludebpl.352:15| :skolemid |428| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPreludebpl.367:15| :skolemid |429| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@64)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPreludebpl.373:15| :skolemid |430| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPreludebpl.375:15| :skolemid |431| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPreludebpl.379:15| :skolemid |432| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPreludebpl.385:15| :skolemid |433| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPreludebpl.388:15| :skolemid |434| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :qid |DafnyPreludebpl.395:15| :skolemid |435| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@65 arg1@@19)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPreludebpl.399:15| :skolemid |436| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPreludebpl.404:15| :skolemid |437| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPreludebpl.407:15| :skolemid |438| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@66 arg1@@20)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPreludebpl.412:15| :skolemid |439| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPreludebpl.416:15| :skolemid |440| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPreludebpl.422:15| :skolemid |441| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPreludebpl.427:15| :skolemid |442| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPreludebpl.432:15| :skolemid |443| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPreludebpl.438:15| :skolemid |444| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67)))) (= (type (AtLayer arg0@@67 arg1@@21)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@67 arg1@@21)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPreludebpl.462:18| :skolemid |445| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@68)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPreludebpl.463:18| :skolemid |446| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@69)) )))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1) :qid |DafnyPreludebpl.474:15| :skolemid |447| :pattern ( (IndexField i@@1)) )))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :qid |DafnyPreludebpl.476:15| :skolemid |448| :pattern ( (IndexField i@@2)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@70 arg1@@22)) )))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :qid |DafnyPreludebpl.479:15| :skolemid |449| :pattern ( (MultiIndexField f@@1 i@@3)) )))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71)))) (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@71)) )))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :qid |DafnyPreludebpl.482:15| :skolemid |450| :pattern ( (MultiIndexField f@@2 i@@4)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) )) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@73)) ))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@74)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPreludebpl.491:18| :skolemid |451| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :qid |DafnyPreludebpl.504:17| :skolemid |452| :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) )))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :qid |DafnyPreludebpl.507:14| :skolemid |453| :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPreludebpl.524:15| :skolemid |454| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15)) :qid |DafnyPreludebpl.530:14| :skolemid |455| :pattern ( (q@Int x@@15)) )))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16)) :qid |DafnyPreludebpl.531:15| :skolemid |456| :pattern ( (q@Real x@@16)) )))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5) :qid |DafnyPreludebpl.532:15| :skolemid |457| :pattern ( (q@Int (q@Real i@@5))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17))) (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))))) :qid |DafnyPreludebpl.554:22| :skolemid |458| :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPreludebpl.557:15| :skolemid |459| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPreludebpl.560:30| :skolemid |460| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPreludebpl.559:15| :skolemid |461| :pattern ( ($HeapSucc h@@15 k@@1)) )))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPreludebpl.566:20| :skolemid |462| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPreludebpl.563:15| :skolemid |463| :pattern ( ($HeapSuccGhost h@@16 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPreludebpl.624:18| :skolemid |468| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPreludebpl.627:18| :skolemid |469| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18))) :qid |DafnyPreludebpl.630:33| :skolemid |470| :no-pattern (type x@@18) :no-pattern (U_2_int x@@18) :no-pattern (U_2_bool x@@18) )))))) :qid |DafnyPreludebpl.628:18| :skolemid |471| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75))) (= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@75)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPreludebpl.636:18| :skolemid |472| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)))) :qid |DafnyPreludebpl.637:18| :skolemid |473| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPreludebpl.638:18| :skolemid |474| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24))) (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24)) )))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19)))))) :qid |DafnyPreludebpl.641:18| :skolemid |475| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20)))) :qid |DafnyPreludebpl.643:18| :skolemid |476| :pattern ( (|Set#UnionOne| a@@4 x@@20)) )))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1)))) :qid |DafnyPreludebpl.645:18| :skolemid |477| :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6)))) :qid |DafnyPreludebpl.647:18| :skolemid |478| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22))) )))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPreludebpl.649:18| :skolemid |479| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@77 arg1@@25)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))))) :qid |DafnyPreludebpl.653:18| :skolemid |480| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPreludebpl.655:18| :skolemid |481| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPreludebpl.657:18| :skolemid |482| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@78 arg1@@26)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPreludebpl.659:18| :skolemid |483| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@79 arg1@@27)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))))) :qid |DafnyPreludebpl.669:18| :skolemid |484| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPreludebpl.672:18| :skolemid |485| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPreludebpl.674:18| :skolemid |486| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPreludebpl.676:18| :skolemid |487| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPreludebpl.678:18| :skolemid |488| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPreludebpl.680:18| :skolemid |489| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))))) :qid |DafnyPreludebpl.684:18| :skolemid |490| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPreludebpl.686:18| :skolemid |491| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPreludebpl.688:18| :skolemid |492| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPreludebpl.697:32| :skolemid |493| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))))) :qid |DafnyPreludebpl.696:17| :skolemid |494| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :qid |DafnyPreludebpl.705:31| :skolemid |495| :pattern ( (MapType0Select a@@22 o@@24)) :pattern ( (MapType0Select b@@17 o@@24)) ))))) :qid |DafnyPreludebpl.704:17| :skolemid |496| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPreludebpl.706:17| :skolemid |497| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :qid |DafnyPreludebpl.711:34| :skolemid |498| :pattern ( (MapType0Select a@@24 o@@25)) :pattern ( (MapType0Select b@@19 o@@25)) ))))) :qid |DafnyPreludebpl.710:18| :skolemid |499| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26)))) :qid |DafnyPreludebpl.720:18| :skolemid |500| :pattern ( (let ((T@@38 (type o@@26))) (MapType0Select (|ISet#Empty| T@@38) o@@26))) )))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28))) (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28)) )))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27)))))) :qid |DafnyPreludebpl.727:18| :skolemid |501| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) )))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25)))) :qid |DafnyPreludebpl.729:18| :skolemid |502| :pattern ( (|ISet#UnionOne| a@@26 x@@25)) )))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5)))) :qid |DafnyPreludebpl.731:18| :skolemid |503| :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81)))) (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@81 arg1@@29)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28)))))) :qid |DafnyPreludebpl.735:18| :skolemid |504| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPreludebpl.737:18| :skolemid |505| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPreludebpl.739:18| :skolemid |506| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82)))) (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@82 arg1@@30)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPreludebpl.741:18| :skolemid |507| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83)))) (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29)))))) :qid |DafnyPreludebpl.747:18| :skolemid |508| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPreludebpl.750:18| :skolemid |509| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPreludebpl.752:18| :skolemid |510| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPreludebpl.754:18| :skolemid |511| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPreludebpl.756:18| :skolemid |512| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30))))))) :qid |DafnyPreludebpl.761:18| :skolemid |513| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPreludebpl.763:18| :skolemid |514| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :qid |DafnyPreludebpl.768:33| :skolemid |515| :pattern ( (MapType0Select a@@39 o@@31)) :pattern ( (MapType0Select b@@31 o@@31)) ))))) :qid |DafnyPreludebpl.767:17| :skolemid |516| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :qid |DafnyPreludebpl.772:32| :skolemid |517| :pattern ( (MapType0Select a@@40 o@@32)) :pattern ( (MapType0Select b@@32 o@@32)) ))))) :qid |DafnyPreludebpl.771:17| :skolemid |518| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPreludebpl.773:17| :skolemid |519| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :qid |DafnyPreludebpl.778:35| :skolemid |520| :pattern ( (MapType0Select a@@42 o@@33)) :pattern ( (MapType0Select b@@34 o@@33)) ))))) :qid |DafnyPreludebpl.777:18| :skolemid |521| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :qid |DafnyPreludebpl.785:15| :skolemid |522| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :qid |DafnyPreludebpl.786:15| :skolemid |523| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPreludebpl.787:15| :skolemid |524| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPreludebpl.790:15| :skolemid |525| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPreludebpl.791:15| :skolemid |526| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :qid |DafnyPreludebpl.799:11| :skolemid |527| :pattern ( (MapType0Select ms bx@@22)) ))))) :qid |DafnyPreludebpl.797:18| :skolemid |528| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPreludebpl.802:18| :skolemid |529| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5))))) :qid |DafnyPreludebpl.803:18| :skolemid |530| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0)) :qid |DafnyPreludebpl.807:18| :skolemid |531| :pattern ( (let ((T@@65 (type o@@34))) (MapType0Select (|MultiSet#Empty| T@@65) o@@34))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28)))) :qid |DafnyPreludebpl.810:38| :skolemid |532| :no-pattern (type x@@28) :no-pattern (U_2_int x@@28) :no-pattern (U_2_bool x@@28) )))))) :qid |DafnyPreludebpl.808:18| :skolemid |533| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84))) (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@84)) )))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35)))))) :qid |DafnyPreludebpl.813:18| :skolemid |534| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) )))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32))) (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPreludebpl.815:18| :skolemid |535| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36))))))) :qid |DafnyPreludebpl.819:18| :skolemid |536| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) )))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1)))) :qid |DafnyPreludebpl.822:18| :skolemid |537| :pattern ( (|MultiSet#UnionOne| a@@49 x@@30)) )))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9))))) :qid |DafnyPreludebpl.825:18| :skolemid |538| :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10))))) :qid |DafnyPreludebpl.828:18| :skolemid |539| :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPreludebpl.830:18| :skolemid |540| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) )))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86)))) (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37)))))) :qid |DafnyPreludebpl.836:18| :skolemid |541| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPreludebpl.838:18| :skolemid |542| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87)))) (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38)))))) :qid |DafnyPreludebpl.842:18| :skolemid |543| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPreludebpl.846:18| :skolemid |544| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPreludebpl.848:18| :skolemid |545| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88)))) (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39))))))) :qid |DafnyPreludebpl.853:18| :skolemid |546| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPreludebpl.855:18| :skolemid |547| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPreludebpl.857:18| :skolemid |548| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :qid |DafnyPreludebpl.867:37| :skolemid |549| :pattern ( (MapType0Select a@@61 o@@40)) :pattern ( (MapType0Select b@@46 o@@40)) ))))) :qid |DafnyPreludebpl.866:17| :skolemid |550| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :qid |DafnyPreludebpl.871:36| :skolemid |551| :pattern ( (MapType0Select a@@62 o@@41)) :pattern ( (MapType0Select b@@47 o@@41)) ))))) :qid |DafnyPreludebpl.870:17| :skolemid |552| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPreludebpl.873:17| :skolemid |553| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :qid |DafnyPreludebpl.878:39| :skolemid |554| :pattern ( (MapType0Select a@@64 o@@42)) :pattern ( (MapType0Select b@@49 o@@42)) ))))) :qid |DafnyPreludebpl.877:18| :skolemid |555| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@89)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65)))))) :qid |DafnyPreludebpl.882:18| :skolemid |556| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPreludebpl.885:18| :skolemid |557| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90)))) (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@90)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPreludebpl.891:18| :skolemid |558| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPreludebpl.893:18| :skolemid |559| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36))) (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@91 arg1@@36)) )))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29)))) :qid |DafnyPreludebpl.897:18| :skolemid |560| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| )))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92)))) (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@92 arg1@@37)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPreludebpl.904:18| :skolemid |562| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34))))) :qid |DafnyPreludebpl.909:18| :skolemid |563| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) )))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35))) (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7))) :qid |DafnyPreludebpl.916:11| :skolemid |564| :pattern ( (|Seq#Index| s@@14 i@@7)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))))) :qid |DafnyPreludebpl.915:18| :skolemid |565| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPreludebpl.925:18| :skolemid |566| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |567| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPreludebpl.929:18| :skolemid |568| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94))) (= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@94)) )))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :qid |DafnyPreludebpl.942:18| :skolemid |569| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95)))) (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96)))) (= (type (|Seq#Build_inv1| arg0@@96)) T@@111)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@96)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5))) (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPreludebpl.947:18| :skolemid |570| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31))) (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPreludebpl.952:18| :skolemid |571| :pattern ( (|Seq#Build| s@@18 v@@31)) )))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32))) (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8)))))) :qid |DafnyPreludebpl.955:18| :skolemid |572| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) )))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :qid |DafnyPreludebpl.960:15| :skolemid |573| :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) )))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPreludebpl.964:15| :skolemid |574| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :qid |DafnyPreludebpl.968:15| :skolemid |575| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPreludebpl.974:18| :skolemid |576| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :qid |DafnyPreludebpl.978:18| :skolemid |577| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0)) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0)))) (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0)))))))) :qid |DafnyPreludebpl.979:18| :skolemid |578| :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33))) (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21))))) :qid |DafnyPreludebpl.984:18| :skolemid |579| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) )))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34))) (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPreludebpl.986:18| :skolemid |580| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36))) (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36)) :qid |DafnyPreludebpl.994:13| :skolemid |581| :pattern ( (|Seq#Index| s@@23 i@@12)) ))))) :qid |DafnyPreludebpl.992:18| :skolemid |582| :pattern ( (|Seq#Contains| s@@23 x@@36)) )))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37))) (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) :qid |DafnyPreludebpl.995:18| :skolemid |583| :pattern ( (let ((T@@120 (type x@@37))) (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38))) (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38))))) :qid |DafnyPreludebpl.999:18| :skolemid |584| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) )))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35))) (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39))))) :qid |DafnyPreludebpl.1004:18| :skolemid |585| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) )))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99)))) (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@99 arg1@@41)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40))) (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40)) :qid |DafnyPreludebpl.1011:13| :skolemid |586| :pattern ( (|Seq#Index| s@@25 i@@13)) ))))) :qid |DafnyPreludebpl.1008:18| :skolemid |587| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) )))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100)))) (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@100 arg1@@42)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41))) (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41)) :qid |DafnyPreludebpl.1016:13| :skolemid |588| :pattern ( (|Seq#Index| s@@26 i@@14)) ))))) :qid |DafnyPreludebpl.1013:18| :skolemid |589| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2)))) (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :qid |DafnyPreludebpl.1023:13| :skolemid |590| :pattern ( (|Seq#Index| s0@@2 j)) :pattern ( (|Seq#Index| s1@@2 j)) )))))) :qid |DafnyPreludebpl.1020:18| :skolemid |591| :pattern ( (|Seq#Equal| s0@@2 s1@@2)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPreludebpl.1025:18| :skolemid |592| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPreludebpl.1031:13| :skolemid |593| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))))) :qid |DafnyPreludebpl.1029:18| :skolemid |594| :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPreludebpl.1035:18| :skolemid |595| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1))))) :qid |DafnyPreludebpl.1037:18| :weight 25 :skolemid |596| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPreludebpl.1045:18| :skolemid |597| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14)))))) :qid |DafnyPreludebpl.1047:18| :weight 25 :skolemid |598| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPreludebpl.1052:18| :weight 25 :skolemid |599| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26)))) :qid |DafnyPreludebpl.1058:18| :skolemid |600| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) )))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43)) )))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPreludebpl.1067:15| :skolemid |601| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) )))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :qid |DafnyPreludebpl.1072:11| :skolemid |602| :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) ))) :qid |DafnyPreludebpl.1070:15| :skolemid |603| :pattern ( (|Seq#FromArray| h@@18 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPreludebpl.1082:15| :skolemid |604| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :qid |DafnyPreludebpl.1087:15| :skolemid |605| :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37))) (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37))))) :qid |DafnyPreludebpl.1092:18| :skolemid |606| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38))) (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPreludebpl.1095:18| :skolemid |607| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39))) (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39))))) :qid |DafnyPreludebpl.1098:18| :skolemid |608| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40))) (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPreludebpl.1101:18| :skolemid |609| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) )))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :qid |DafnyPreludebpl.1105:15| :skolemid |610| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41))) (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41))))) :qid |DafnyPreludebpl.1109:18| :skolemid |611| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :qid |DafnyPreludebpl.1114:15| :skolemid |612| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) )))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39))))) :qid |DafnyPreludebpl.1117:18| :skolemid |613| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) )))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40))))) :qid |DafnyPreludebpl.1120:18| :skolemid |614| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23))) )))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41))))) :qid |DafnyPreludebpl.1123:18| :skolemid |615| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPreludebpl.1128:18| :skolemid |616| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145)))) :qid |DafnyPreludebpl.1130:18| :skolemid |617| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPreludebpl.1132:18| :skolemid |618| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPreludebpl.1150:20| :skolemid |619| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@4 V@@4)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11)))) (let ((U@@5 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5)))))) :qid |DafnyPreludebpl.1152:21| :skolemid |620| :pattern ( (|Map#Card| m@@11)) )))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12)))) (let ((U@@6 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4))) :qid |DafnyPreludebpl.1158:31| :skolemid |621| :no-pattern (type k@@4) :no-pattern (U_2_int k@@4) :no-pattern (U_2_bool k@@4) )))))) :qid |DafnyPreludebpl.1156:21| :skolemid |622| :pattern ( (|Map#Domain| m@@12)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13)))) (let ((U@@7 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42))) :qid |DafnyPreludebpl.1161:31| :skolemid |623| :no-pattern (type v@@42) :no-pattern (U_2_int v@@42) :no-pattern (U_2_bool v@@42) )))))) :qid |DafnyPreludebpl.1159:21| :skolemid |624| :pattern ( (|Map#Values| m@@13)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) )))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14)))) (let ((U@@8 (MapTypeInv0 (type m@@14)))) (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43))))) :qid |DafnyPreludebpl.1164:31| :skolemid |625| :no-pattern (type k@@5) :no-pattern (type v@@43) :no-pattern (U_2_int k@@5) :no-pattern (U_2_bool k@@5) :no-pattern (U_2_int v@@43) :no-pattern (U_2_bool v@@43) )))))) :qid |DafnyPreludebpl.1162:21| :skolemid |626| :pattern ( (|Map#Items| m@@14)) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))))) :qid |DafnyPreludebpl.1166:21| :skolemid |627| :pattern ( (|Set#Card| (|Map#Domain| m@@15))) )))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16)))) (let ((U@@10 (MapTypeInv0 (type m@@16)))) (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))))) :qid |DafnyPreludebpl.1169:21| :skolemid |628| :pattern ( (|Set#Card| (|Map#Values| m@@16))) )))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17)))) (let ((U@@11 (MapTypeInv0 (type m@@17)))) (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))))) :qid |DafnyPreludebpl.1172:21| :skolemid |629| :pattern ( (|Set#Card| (|Map#Items| m@@17))) )))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44))) (let ((U@@12 (MapTypeInv0 (type m@@18)))) (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :qid |DafnyPreludebpl.1185:10| :skolemid |630| :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5)) )))))) :qid |DafnyPreludebpl.1183:20| :skolemid |631| :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44)) )))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@103)) )) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@104)) ))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :qid |DafnyPreludebpl.1204:15| :skolemid |632| :pattern ( (MapType0Select (|Map#Items| m@@19) item)) )))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))) :qid |DafnyPreludebpl.1212:21| :skolemid |633| :pattern ( (let ((U@@13 (type u@@6))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))) )))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@14 (MapType0TypeInv0 (type arg0@@105)))) (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52)))) (let ((U@@15 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)))) :qid |DafnyPreludebpl.1217:21| :skolemid |634| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53)))) (let ((U@@16 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)))) :qid |DafnyPreludebpl.1220:21| :skolemid |635| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))) :qid |DafnyPreludebpl.1226:11| :skolemid |636| :no-pattern (type bx@@24) :no-pattern (U_2_int bx@@24) :no-pattern (U_2_bool bx@@24) ))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :qid |DafnyPreludebpl.1223:15| :skolemid |637| :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) )))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5))) (let ((U@@17 (type arg1@@46))) (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) )))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45))) (let ((U@@18 (type u@@7))) (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))))) :qid |DafnyPreludebpl.1237:21| :skolemid |638| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) )))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46))) (let ((U@@19 (type u@@8))) (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))))) :qid |DafnyPreludebpl.1243:21| :skolemid |639| :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) )))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47))) (let ((U@@20 (type u@@9))) (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))))) :qid |DafnyPreludebpl.1245:21| :skolemid |640| :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) )))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107)))) (let ((U@@21 (MapTypeInv0 (type arg0@@107)))) (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21)))) :qid |funType:Map#Merge| :pattern ( (|Map#Merge| arg0@@107 arg1@@47)) )))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23)))) (let ((U@@22 (MapTypeInv0 (type m@@23)))) (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))))) :qid |DafnyPreludebpl.1250:21| :skolemid |641| :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25))) )))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24)))) (let ((U@@23 (type u@@10))) (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))))) :qid |DafnyPreludebpl.1253:21| :skolemid |642| :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) )))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108)))) (let ((U@@24 (MapTypeInv0 (type arg0@@108)))) (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24)))) :qid |funType:Map#Subtract| :pattern ( (|Map#Subtract| arg0@@108 arg1@@48)) )))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25)))) (let ((U@@25 (MapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))))) :qid |DafnyPreludebpl.1260:21| :skolemid |643| :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45))) )))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26)))) (let ((U@@26 (type u@@11))) (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))))) :qid |DafnyPreludebpl.1263:21| :skolemid |644| :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11)) )))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27)))) (let ((U@@27 (MapTypeInv0 (type m@@27)))) (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :qid |DafnyPreludebpl.1272:35| :skolemid |645| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPreludebpl.1273:35| :skolemid |646| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) ))))))) :qid |DafnyPreludebpl.1270:21| :skolemid |647| :pattern ( (|Map#Equal| m@@27 |m'|)) )))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28)))) (let ((U@@28 (MapTypeInv0 (type m@@28)))) (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)))) :qid |DafnyPreludebpl.1275:21| :skolemid |648| :pattern ( (|Map#Equal| m@@28 |m'@@0|)) )))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29)))) (let ((U@@29 (MapTypeInv0 (type m@@29)))) (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :qid |DafnyPreludebpl.1282:38| :skolemid |649| :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43)) )))))) :qid |DafnyPreludebpl.1280:21| :skolemid |650| :pattern ( (|Map#Disjoint| m@@29 |m'@@1|)) )))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@30 V@@30)) )))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30)))) (let ((U@@31 (IMapTypeInv0 (type m@@30)))) (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6))) :qid |DafnyPreludebpl.1298:32| :skolemid |651| :no-pattern (type k@@6) :no-pattern (U_2_int k@@6) :no-pattern (U_2_bool k@@6) )))))) :qid |DafnyPreludebpl.1296:21| :skolemid |652| :pattern ( (|IMap#Domain| m@@30)) )))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31)))) (let ((U@@32 (IMapTypeInv0 (type m@@31)))) (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48))) :qid |DafnyPreludebpl.1301:32| :skolemid |653| :no-pattern (type v@@48) :no-pattern (U_2_int v@@48) :no-pattern (U_2_bool v@@48) )))))) :qid |DafnyPreludebpl.1299:21| :skolemid |654| :pattern ( (|IMap#Values| m@@31)) )))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32)))) (let ((U@@33 (IMapTypeInv0 (type m@@32)))) (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49))))) :qid |DafnyPreludebpl.1304:32| :skolemid |655| :no-pattern (type k@@7) :no-pattern (type v@@49) :no-pattern (U_2_int k@@7) :no-pattern (U_2_bool k@@7) :no-pattern (U_2_int v@@49) :no-pattern (U_2_bool v@@49) )))))) :qid |DafnyPreludebpl.1302:21| :skolemid |656| :pattern ( (|IMap#Items| m@@32)) )))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33)))) (let ((U@@34 (IMapTypeInv0 (type m@@33)))) (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34)))))) :qid |DafnyPreludebpl.1306:21| :skolemid |657| :pattern ( (|IMap#Domain| m@@33)) )))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34)))) (let ((U@@35 (IMapTypeInv0 (type m@@34)))) (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35)))))) :qid |DafnyPreludebpl.1309:21| :skolemid |658| :pattern ( (|IMap#Values| m@@34)) )))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35)))) (let ((U@@36 (IMapTypeInv0 (type m@@35)))) (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))))) :qid |DafnyPreludebpl.1312:21| :skolemid |659| :pattern ( (|IMap#Items| m@@35)) )))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50))) (let ((U@@37 (IMapTypeInv0 (type m@@36)))) (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :qid |DafnyPreludebpl.1325:10| :skolemid |660| :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14)) :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14)) )))))) :qid |DafnyPreludebpl.1323:20| :skolemid |661| :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50)) )))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :qid |DafnyPreludebpl.1340:15| :skolemid |662| :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0)) )))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))) :qid |DafnyPreludebpl.1347:21| :skolemid |663| :pattern ( (let ((U@@38 (type u@@15))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))) )))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49)))) (let ((U@@39 (MapType0TypeInv0 (type arg0@@109)))) (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55)))) (let ((U@@40 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)))) :qid |DafnyPreludebpl.1352:21| :skolemid |664| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56)))) (let ((U@@41 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)))) :qid |DafnyPreludebpl.1355:21| :skolemid |665| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6))) :qid |DafnyPreludebpl.1361:11| :skolemid |666| :no-pattern (type bx@@25) :no-pattern (U_2_int bx@@25) :no-pattern (U_2_bool bx@@25) ))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :qid |DafnyPreludebpl.1358:15| :skolemid |667| :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) )))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7))) (let ((U@@42 (type arg1@@50))) (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) )))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51))) (let ((U@@43 (type u@@16))) (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))))) :qid |DafnyPreludebpl.1371:21| :skolemid |668| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) )))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39)))) (let ((U@@44 (IMapTypeInv0 (type m@@39)))) (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :qid |DafnyPreludebpl.1382:36| :skolemid |669| :no-pattern (type u@@17) :no-pattern (U_2_int u@@17) :no-pattern (U_2_bool u@@17) )) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :qid |DafnyPreludebpl.1383:35| :skolemid |670| :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) ))))))) :qid |DafnyPreludebpl.1380:21| :skolemid |671| :pattern ( (|IMap#Equal| m@@39 |m'@@2|)) )))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40)))) (let ((U@@45 (IMapTypeInv0 (type m@@40)))) (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)))) :qid |DafnyPreludebpl.1385:21| :skolemid |672| :pattern ( (|IMap#Equal| m@@40 |m'@@3|)) )))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111)))) (let ((U@@46 (IMapTypeInv0 (type arg0@@111)))) (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46)))) :qid |funType:IMap#Merge| :pattern ( (|IMap#Merge| arg0@@111 arg1@@51)) )))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41)))) (let ((U@@47 (IMapTypeInv0 (type m@@41)))) (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))))) :qid |DafnyPreludebpl.1391:21| :skolemid |673| :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) )))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42)))) (let ((U@@48 (type u@@19))) (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))))) :qid |DafnyPreludebpl.1394:21| :skolemid |674| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19)) )))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112)))) (let ((U@@49 (IMapTypeInv0 (type arg0@@112)))) (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49)))) :qid |funType:IMap#Subtract| :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52)) )))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43)))) (let ((U@@50 (IMapTypeInv0 (type m@@43)))) (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))))) :qid |DafnyPreludebpl.1401:21| :skolemid |675| :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) )))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44)))) (let ((U@@51 (type u@@20))) (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))))) :qid |DafnyPreludebpl.1404:21| :skolemid |676| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20)) )))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :qid |DafnyPreludebpl.1413:30| :skolemid |677| :pattern ( (INTERNAL_add_boogie x@@42 y@@12)) )))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :qid |DafnyPreludebpl.1414:30| :skolemid |678| :pattern ( (INTERNAL_sub_boogie x@@43 y@@13)) )))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :qid |DafnyPreludebpl.1415:30| :skolemid |679| :pattern ( (INTERNAL_mul_boogie x@@44 y@@14)) )))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :qid |DafnyPreludebpl.1416:30| :skolemid |680| :pattern ( (INTERNAL_div_boogie x@@45 y@@15)) )))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :qid |DafnyPreludebpl.1417:30| :skolemid |681| :pattern ( (INTERNAL_mod_boogie x@@46 y@@16)) )))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :qid |DafnyPreludebpl.1418:51| :skolemid |682| :pattern ( (INTERNAL_lt_boogie x@@47 y@@17)) )))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :qid |DafnyPreludebpl.1419:51| :skolemid |683| :pattern ( (INTERNAL_le_boogie x@@48 y@@18)) )))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19)) :qid |DafnyPreludebpl.1420:51| :skolemid |684| :pattern ( (INTERNAL_gt_boogie x@@49 y@@19)) )))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20)) :qid |DafnyPreludebpl.1421:51| :skolemid |685| :pattern ( (INTERNAL_ge_boogie x@@50 y@@20)) )))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :qid |DafnyPreludebpl.1423:14| :skolemid |686| :pattern ( (Mul x@@51 y@@21)) )))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :qid |DafnyPreludebpl.1424:14| :skolemid |687| :pattern ( (Div x@@52 y@@22)) )))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :qid |DafnyPreludebpl.1425:14| :skolemid |688| :pattern ( (Mod x@@53 y@@23)) )))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :qid |DafnyPreludebpl.1426:14| :skolemid |689| :pattern ( (Add x@@54 y@@24)) )))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :qid |DafnyPreludebpl.1427:14| :skolemid |690| :pattern ( (Sub x@@55 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPreludebpl.1468:15| :skolemid |691| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPreludebpl.1473:15| :skolemid |692| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPreludebpl.1478:15| :skolemid |693| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (TagFamily arg0@@113)) TyTagFamilyType) :qid |funType:TagFamily| :pattern ( (TagFamily arg0@@113)) )))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@26)) bx@@26) ($Is ($Unbox intType bx@@26) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($IsBox bx@@26 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@27)) bx@@27) ($Is ($Unbox refType bx@@27) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsBox bx@@27 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |698| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsBox bx@@28 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :qid |unknown.0:0| :skolemid |702| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.array? arg0@@114)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@114)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.array? _System.array$arg)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@115)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@115)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.array? _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@29) BoxType)) ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) (Tclass._System.array? _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |705| :pattern ( ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (dtype arg0@@116)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@116)) )))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :qid |unknown.0:0| :skolemid |706| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2)) )))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :qid |unknown.0:0| :skolemid |707| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3)) )))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :qid |unknown.0:0| :skolemid |708| :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) )))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :qid |unknown.0:0| :skolemid |709| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)) )))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |710| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6)) )))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |711| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array arg0@@117)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@117)) )))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |712| :pattern ( (Tclass._System.array _System.array$arg@@8)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@118)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@118)) )))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :qid |unknown.0:0| :skolemid |713| :pattern ( (Tclass._System.array _System.array$arg@@9)) )))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array _System.array$arg@@10)))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) )))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :qid |unknown.0:0| :skolemid |715| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) )))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6)) )))
(assert (forall ((arg0@@119 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) )))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :qid |unknown.0:0| :skolemid |717| :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@120)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |718| :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) )))
(assert (forall ((arg0@@121 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@121)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@121)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :qid |unknown.0:0| :skolemid |719| :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@31)) bx@@31) ($Is ($Unbox HandleTypeType bx@@31) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@122 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@122 arg1@@54 arg2@@8)) 24) :qid |ctor:MapType2Type| )) (forall ((arg0@@123 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@123 arg1@@55 arg2@@9)) arg0@@123) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@123 arg1@@55 arg2@@9)) ))) (forall ((arg0@@124 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@124 arg1@@56 arg2@@10)) arg1@@56) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@124 arg1@@56 arg2@@10)) ))) (forall ((arg0@@125 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@125 arg1@@57 arg2@@11)) arg2@@11) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@125 arg1@@57 arg2@@11)) ))) (forall ((arg0@@126 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@58 arg2@@12)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@58 arg2@@12)) ))) (forall ((arg0@@127 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1))) (let ((aVar1@@2 (type arg2@@13))) (let ((aVar0@@0 (type arg1@@59))) (= (type (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) ))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45)))) (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@128 arg1@@60 arg2@@14)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@128 arg1@@60 arg2@@14)) ))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@1 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@1 bx0))) :qid |unknown.0:0| :skolemid |721| :pattern ( (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0)) )))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@2 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@2 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :qid |unknown.0:0| :skolemid |722| :pattern ( (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) )))
(assert (forall ((arg0@@129 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@3 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@32) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@3 bx0@@1) bx@@32)))) :qid |unknown.0:0| :skolemid |723| :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) )))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld)))) :qid |unknown.0:0| :skolemid |724| :no-pattern (type o@@44) :no-pattern (type fld) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :qid |unknown.0:0| :skolemid |725| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) )))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0)))) :qid |unknown.0:0| :skolemid |726| :no-pattern (type o@@45) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) )))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@46) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) )))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@47) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) )))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3)))) :qid |unknown.0:0| :skolemid |732| :no-pattern (type o@@48) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) )))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4)))) :qid |unknown.0:0| :skolemid |734| :no-pattern (type o@@49) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) )))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@4 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@4) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |736| :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@4)) :pattern ( (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8)) )))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@5 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9))) :qid |unknown.0:0| :skolemid |737| :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@5)) :pattern ( (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9)) )))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :qid |DafnyPreludebpl.545:12| :skolemid |738| :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) )))) :qid |unknown.0:0| :skolemid |739| :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) )))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@33 T@U) ) (!  (=> (and (= (type bx@@33) BoxType) ($IsBox bx@@33 u0)) ($IsBox bx@@33 t0@@28)) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@33 u0)) :pattern ( ($IsBox bx@@33 t0@@28)) ))) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 t1@@19)) ($IsBox bx@@34 u1)) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@34 t1@@19)) :pattern ( ($IsBox bx@@34 u1)) )))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) )))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |743| :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9))) )))) :qid |unknown.0:0| :skolemid |744| :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) )))) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :qid |unknown.0:0| :skolemid |746| :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ))) :qid |unknown.0:0| :skolemid |747| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) )))
(assert (forall ((arg0@@131 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@131)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@131)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :qid |unknown.0:0| :skolemid |749| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :qid |unknown.0:0| :skolemid |750| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@35 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@35) BoxType)) ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@35)) bx@@35) ($Is ($Unbox HandleTypeType bx@@35) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) )))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |752| :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) ))))) :qid |unknown.0:0| :skolemid |753| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) )))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :qid |unknown.0:0| :skolemid |754| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7)) )))
(assert (forall ((arg0@@133 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@134)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@134)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :qid |unknown.0:0| :skolemid |756| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) )))
(assert (forall ((arg0@@135 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@135)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@135)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) )))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :qid |unknown.0:0| :skolemid |759| :no-pattern (type |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) ))))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) )))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :qid |unknown.0:0| :skolemid |761| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@136)) )))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :qid |unknown.0:0| :skolemid |762| :pattern ( (Tclass._System.___hFunc0 |#$R@@15|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@137)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@137)) )))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :qid |unknown.0:0| :skolemid |763| :pattern ( (Tclass._System.___hFunc0 |#$R@@16|)) )))
(assert (forall ((|#$R@@17| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$R@@17|)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) )))
(assert  (and (forall ((arg0@@138 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@138 arg1@@64 arg2@@16)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@138 arg1@@64 arg2@@16)) )) (forall ((arg0@@139 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@139 arg1@@65 arg2@@17)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@139 arg1@@65 arg2@@17)) ))))
(assert (forall ((t0@@31 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@6))) :qid |unknown.0:0| :skolemid |765| :pattern ( (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2))) )))
(assert (forall ((t0@@32 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@7))) (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) :qid |unknown.0:0| :skolemid |766| :pattern ( (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) )))
(assert (forall ((arg0@@140 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@140 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@140 arg1@@66 arg2@@18)) )))
(assert (forall ((t0@@33 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@38) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@8) bx@@38)))) :qid |unknown.0:0| :skolemid |767| :pattern ( (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) )))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@50) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) )))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@51) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) )))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@52) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) )))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8)))) :qid |unknown.0:0| :skolemid |774| :no-pattern (type o@@53) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) )))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9)))) :qid |unknown.0:0| :skolemid |776| :no-pattern (type o@@54) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) )))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10)))) :qid |unknown.0:0| :skolemid |778| :no-pattern (type o@@55) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :qid |unknown.0:0| :skolemid |779| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) )))
(assert (forall ((t0@@40 T@U) (heap@@9 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@9) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@9 f@@23) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |780| :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@9)) :pattern ( (Reads0 t0@@40 heap@@9 f@@23)) )))
(assert (forall ((t0@@41 T@U) (heap@@10 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@10) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@10 f@@24))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@10)) :pattern ( (Requires0 t0@@41 heap@@10 f@@24)) )))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :qid |DafnyPreludebpl.545:12| :skolemid |782| :pattern ( (Apply0 t0@@42 h@@30 f@@25)) )))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) )))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@39 T@U) ) (!  (=> (and (= (type bx@@39) BoxType) ($IsBox bx@@39 t0@@43)) ($IsBox bx@@39 u0@@0)) :qid |unknown.0:0| :skolemid |784| :pattern ( ($IsBox bx@@39 t0@@43)) :pattern ( ($IsBox bx@@39 u0@@0)) )))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :qid |unknown.0:0| :skolemid |785| :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) )))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :qid |unknown.0:0| :skolemid |786| :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13))) ))))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) )))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@141)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@141)) )))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :qid |unknown.0:0| :skolemid |789| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|)) )))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@142)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@142)) )))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|)) )))
(assert (forall ((|#$R@@20| T@U) (bx@@40 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@40) BoxType)) ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :qid |unknown.0:0| :skolemid |791| :pattern ( ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) )))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |792| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) )))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@143)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@143)) )))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@144)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@144)) )))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :qid |unknown.0:0| :skolemid |795| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|)) )))
(assert (forall ((|#$R@@25| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) )))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) )))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :qid |unknown.0:0| :skolemid |798| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@42 T@U) ) (!  (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@42)) bx@@42) ($Is ($Unbox refType bx@@42) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |799| :pattern ( ($IsBox bx@@42 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |800| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :qid |unknown.0:0| :skolemid |801| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |802| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :qid |unknown.0:0| :skolemid |803| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@145 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@146)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :qid |unknown.0:0| :skolemid |805| :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) )))
(assert (forall ((arg0@@147 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@147)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@147)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |806| :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@148)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :qid |unknown.0:0| :skolemid |807| :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@149 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@149 arg1@@68 arg2@@20 arg3@@3)) 25) :qid |ctor:MapType3Type| )) (forall ((arg0@@150 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) arg0@@150) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) ))) (forall ((arg0@@151 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) ))) (forall ((arg0@@152 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) ))) (forall ((arg0@@153 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) ))) (forall ((arg0@@154 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@154)))) (= (type (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) ))) (forall ((arg0@@155 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@1 (type arg1@@74))) (= (type (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49)))) (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@156 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@157 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@157 arg1@@76 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@157 arg1@@76 arg2@@28)) ))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@11 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@11 bx0@@13 bx1))) :qid |unknown.0:0| :skolemid |809| :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@12 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@12 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@13 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@44) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@15 bx1@@1) bx@@44)))) :qid |unknown.0:0| :skolemid |811| :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11)))) :qid |unknown.0:0| :skolemid |812| :no-pattern (type o@@56) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :qid |unknown.0:0| :skolemid |813| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12)))) :qid |unknown.0:0| :skolemid |814| :no-pattern (type o@@57) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :qid |unknown.0:0| :skolemid |815| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@58) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14)))) :qid |unknown.0:0| :skolemid |818| :no-pattern (type o@@59) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :qid |unknown.0:0| :skolemid |819| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) )))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@60) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) )))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@61) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) )))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |824| :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@14)) :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8)) )))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9))) :qid |unknown.0:0| :skolemid |825| :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@15)) :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |826| :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) )))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@45 T@U) ) (!  (=> (and (= (type bx@@45) BoxType) ($IsBox bx@@45 u0@@1)) ($IsBox bx@@45 t0@@58)) :qid |unknown.0:0| :skolemid |828| :pattern ( ($IsBox bx@@45 u0@@1)) :pattern ( ($IsBox bx@@45 t0@@58)) ))) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u1@@0)) ($IsBox bx@@46 t1@@34)) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsBox bx@@46 u1@@0)) :pattern ( ($IsBox bx@@46 t1@@34)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 t2@@11)) ($IsBox bx@@47 u2)) :qid |unknown.0:0| :skolemid |830| :pattern ( ($IsBox bx@@47 t2@@11)) :pattern ( ($IsBox bx@@47 u2)) )))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :qid |unknown.0:0| :skolemid |832| :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17))) )))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) )))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) )))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :qid |unknown.0:0| :skolemid |835| :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38)) )))
(assert (forall ((arg0@@159 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@160)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@160)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@161)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@161)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |839| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@162)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |840| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@48 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@48) BoxType)) ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@48)) bx@@48) ($Is ($Unbox HandleTypeType bx@@48) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |841| :pattern ( ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |842| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) ))))) :qid |unknown.0:0| :skolemid |843| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :qid |unknown.0:0| :skolemid |844| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)) )))
(assert (forall ((arg0@@163 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@164)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :qid |unknown.0:0| :skolemid |846| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@165)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@165)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |847| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@166)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |848| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :qid |unknown.0:0| :skolemid |850| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))))) :qid |unknown.0:0| :skolemid |851| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@167 T@U) (arg1@@80 T@U) (arg2@@32 T@U) (arg3@@12 T@U) (arg4@@4 T@U) (arg5@@1 T@U) ) (! (= (type (Tclass._System.___hFunc5 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4 arg5@@1)) TyType) :qid |funType:Tclass._System.___hFunc5| :pattern ( (Tclass._System.___hFunc5 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4 arg5@@1)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$T3| T@U) (|#$T4| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$T4|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc5 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$T4| |#$R@@47|)) Tagclass._System.___hFunc5) (= (TagFamily (Tclass._System.___hFunc5 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$T4| |#$R@@47|)) |tytagFamily$_#Func5|))) :qid |unknown.0:0| :skolemid |853| :pattern ( (Tclass._System.___hFunc5 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$T4| |#$R@@47|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hFunc5_0 arg0@@168)) TyType) :qid |funType:Tclass._System.___hFunc5_0| :pattern ( (Tclass._System.___hFunc5_0 arg0@@168)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$T3@@0| T@U) (|#$T4@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$T4@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc5_0 (Tclass._System.___hFunc5 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$T4@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hFunc5 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$T4@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@169 T@U) ) (! (= (type (Tclass._System.___hFunc5_1 arg0@@169)) TyType) :qid |funType:Tclass._System.___hFunc5_1| :pattern ( (Tclass._System.___hFunc5_1 arg0@@169)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$T3@@1| T@U) (|#$T4@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$T4@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc5_1 (Tclass._System.___hFunc5 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$T4@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hFunc5 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$T4@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc5_2 arg0@@170)) TyType) :qid |funType:Tclass._System.___hFunc5_2| :pattern ( (Tclass._System.___hFunc5_2 arg0@@170)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$T3@@2| T@U) (|#$T4@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$T4@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc5_2 (Tclass._System.___hFunc5 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$T4@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hFunc5 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$T4@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc5_3 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc5_3| :pattern ( (Tclass._System.___hFunc5_3 arg0@@171)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$T3@@3| T@U) (|#$T4@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$T4@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc5_3 (Tclass._System.___hFunc5 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$T4@@3| |#$R@@51|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hFunc5 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$T4@@3| |#$R@@51|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc5_4 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc5_4| :pattern ( (Tclass._System.___hFunc5_4 arg0@@172)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$T3@@4| T@U) (|#$T4@@4| T@U) (|#$R@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$T4@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (Tclass._System.___hFunc5_4 (Tclass._System.___hFunc5 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$T4@@4| |#$R@@52|)) |#$T4@@4|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hFunc5 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$T4@@4| |#$R@@52|)) )))
(assert (forall ((arg0@@173 T@U) ) (! (= (type (Tclass._System.___hFunc5_5 arg0@@173)) TyType) :qid |funType:Tclass._System.___hFunc5_5| :pattern ( (Tclass._System.___hFunc5_5 arg0@@173)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$T3@@5| T@U) (|#$T4@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$T4@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (Tclass._System.___hFunc5_5 (Tclass._System.___hFunc5 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$T4@@5| |#$R@@53|)) |#$R@@53|)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Tclass._System.___hFunc5 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$T4@@5| |#$R@@53|)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$T3@@6| T@U) (|#$T4@@6| T@U) (|#$R@@54| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$T4@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hFunc5 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$T4@@6| |#$R@@54|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hFunc5 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$T4@@6| |#$R@@54|)))) :qid |unknown.0:0| :skolemid |860| :pattern ( ($IsBox bx@@50 (Tclass._System.___hFunc5 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$T4@@6| |#$R@@54|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@174 T@T) (arg1@@81 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@5 T@T) (arg5@@2 T@T) (arg6@@1 T@T) ) (! (= (Ctor (MapType4Type arg0@@174 arg1@@81 arg2@@33 arg3@@13 arg4@@5 arg5@@2 arg6@@1)) 26) :qid |ctor:MapType4Type| )) (forall ((arg0@@175 T@T) (arg1@@82 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@6 T@T) (arg5@@3 T@T) (arg6@@2 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@175 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@3 arg6@@2)) arg0@@175) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@175 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@3 arg6@@2)) ))) (forall ((arg0@@176 T@T) (arg1@@83 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@7 T@T) (arg5@@4 T@T) (arg6@@3 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@176 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@4 arg6@@3)) arg1@@83) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@176 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@4 arg6@@3)) ))) (forall ((arg0@@177 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@8 T@T) (arg5@@5 T@T) (arg6@@4 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@177 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@5 arg6@@4)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@177 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@5 arg6@@4)) ))) (forall ((arg0@@178 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@9 T@T) (arg5@@6 T@T) (arg6@@5 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@178 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@6 arg6@@5)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@178 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@6 arg6@@5)) ))) (forall ((arg0@@179 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@10 T@T) (arg5@@7 T@T) (arg6@@6 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@179 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@7 arg6@@6)) arg4@@10) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@179 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@7 arg6@@6)) ))) (forall ((arg0@@180 T@T) (arg1@@87 T@T) (arg2@@39 T@T) (arg3@@19 T@T) (arg4@@11 T@T) (arg5@@8 T@T) (arg6@@7 T@T) ) (! (= (MapType4TypeInv5 (MapType4Type arg0@@180 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@8 arg6@@7)) arg5@@8) :qid |typeInv:MapType4TypeInv5| :pattern ( (MapType4Type arg0@@180 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@8 arg6@@7)) ))) (forall ((arg0@@181 T@T) (arg1@@88 T@T) (arg2@@40 T@T) (arg3@@20 T@T) (arg4@@12 T@T) (arg5@@9 T@T) (arg6@@8 T@T) ) (! (= (MapType4TypeInv6 (MapType4Type arg0@@181 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@9 arg6@@8)) arg6@@8) :qid |typeInv:MapType4TypeInv6| :pattern ( (MapType4Type arg0@@181 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@9 arg6@@8)) ))) (forall ((arg0@@182 T@U) (arg1@@89 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@13 T@U) (arg5@@10 T@U) (arg6@@9 T@U) ) (! (let ((aVar6 (MapType4TypeInv6 (type arg0@@182)))) (= (type (MapType4Select arg0@@182 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@10 arg6@@9)) aVar6)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@182 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@10 arg6@@9)) ))) (forall ((arg0@@183 T@U) (arg1@@90 T@U) (arg2@@42 T@U) (arg3@@22 T@U) (arg4@@14 T@U) (arg5@@11 T@U) (arg6@@10 T@U) (arg7 T@U) ) (! (let ((aVar6@@0 (type arg7))) (let ((aVar5 (type arg6@@10))) (let ((aVar4 (type arg5@@11))) (let ((aVar3@@2 (type arg4@@14))) (let ((aVar2@@3 (type arg3@@22))) (let ((aVar1@@4 (type arg2@@42))) (let ((aVar0@@2 (type arg1@@90))) (= (type (MapType4Store arg0@@183 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@11 arg6@@10 arg7)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4 aVar5 aVar6@@0))))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@183 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@11 arg6@@10 arg7)) ))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (x4 T@U) (x5 T@U) (val@@15 T@U) ) (! (let ((aVar6@@1 (MapType4TypeInv6 (type m@@54)))) (=> (= (type val@@15) aVar6@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 x4 x5 val@@15) x0@@14 x1@@8 x2@@4 x3 x4 x5) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (x4@@0 T@U) (x5@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) (y4 T@U) (y5 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 x4@@0 x5@@0 val@@16) y0@@10 y1@@6 y2@@3 y3 y4 y5) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3 y4 y5))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (x4@@1 T@U) (x5@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) (y4@@0 T@U) (y5@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 x4@@1 x5@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0 y4@@0 y5@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0 y4@@0 y5@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (x4@@2 T@U) (x5@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) (y4@@1 T@U) (y5@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 x4@@2 x5@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1 y4@@1 y5@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1 y4@@1 y5@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (x4@@3 T@U) (x5@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) (y4@@2 T@U) (y5@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 x4@@3 x5@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2 y4@@2 y5@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2 y4@@2 y5@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (x4@@4 T@U) (x5@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) (y4@@3 T@U) (y5@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 x4@@4 x5@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3 y4@@3 y5@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3 y4@@3 y5@@3))) :qid |mapAx1:MapType4Select:4| :weight 0 ))) (forall ((val@@21 T@U) (m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4@@5 T@U) (x5@@5 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4@@4 T@U) (y5@@4 T@U) ) (!  (or (= x5@@5 y5@@4) (= (MapType4Select (MapType4Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4@@5 x5@@5 val@@21) y0@@15 y1@@11 y2@@8 y3@@4 y4@@4 y5@@4) (MapType4Select m@@60 y0@@15 y1@@11 y2@@8 y3@@4 y4@@4 y5@@4))) :qid |mapAx1:MapType4Select:5| :weight 0 ))) (forall ((val@@22 T@U) (m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@6 T@U) (x5@@6 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@5 T@U) (y5@@5 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 x4@@6 x5@@6 val@@22) y0@@16 y1@@12 y2@@9 y3@@5 y4@@5 y5@@5) (MapType4Select m@@61 y0@@16 y1@@12 y2@@9 y3@@5 y4@@5 y5@@5))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@184 T@U) (arg1@@91 T@U) (arg2@@43 T@U) (arg3@@23 T@U) (arg4@@15 T@U) (arg5@@12 T@U) (arg6@@11 T@U) (arg7@@0 T@U) (arg8 T@U) (arg9 T@U) (arg10 T@U) (arg11 T@U) (arg12 T@U) ) (! (= (type (Apply5 arg0@@184 arg1@@91 arg2@@43 arg3@@23 arg4@@15 arg5@@12 arg6@@11 arg7@@0 arg8 arg9 arg10 arg11 arg12)) BoxType) :qid |funType:Apply5| :pattern ( (Apply5 arg0@@184 arg1@@91 arg2@@43 arg3@@23 arg4@@15 arg5@@12 arg6@@11 arg7@@0 arg8 arg9 arg10 arg11 arg12)) ))) (forall ((arg0@@185 T@U) (arg1@@92 T@U) (arg2@@44 T@U) ) (! (= (type (Handle5 arg0@@185 arg1@@92 arg2@@44)) HandleTypeType) :qid |funType:Handle5| :pattern ( (Handle5 arg0@@185 arg1@@92 arg2@@44)) ))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (t4 T@U) (t5 T@U) (heap@@16 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) (bx3 T@U) (bx4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type t4) TyType)) (= (type t5) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (type bx3) BoxType)) (= (type bx4) BoxType)) (= (Apply5 t0@@61 t1@@37 t2@@14 t3 t4 t5 heap@@16 (Handle5 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3 bx4) (MapType4Select h@@39 heap@@16 bx0@@27 bx1@@13 bx2 bx3 bx4))) :qid |unknown.0:0| :skolemid |861| :pattern ( (Apply5 t0@@61 t1@@37 t2@@14 t3 t4 t5 heap@@16 (Handle5 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3 bx4)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (t4@@0 T@U) (t5@@0 T@U) (heap@@17 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) (bx3@@0 T@U) (bx4@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type t4@@0) TyType)) (= (type t5@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (= (type bx3@@0) BoxType)) (= (type bx4@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@17 bx0@@28 bx1@@14 bx2@@0 bx3@@0 bx4@@0))) (Requires5 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 t5@@0 heap@@17 (Handle5 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0 bx4@@0)) :qid |unknown.0:0| :skolemid |862| :pattern ( (Requires5 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 t5@@0 heap@@17 (Handle5 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0 bx4@@0)) )))
(assert (forall ((arg0@@186 T@U) (arg1@@93 T@U) (arg2@@45 T@U) (arg3@@24 T@U) (arg4@@16 T@U) (arg5@@13 T@U) (arg6@@12 T@U) (arg7@@1 T@U) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 T@U) (arg11@@0 T@U) (arg12@@0 T@U) ) (! (= (type (Reads5 arg0@@186 arg1@@93 arg2@@45 arg3@@24 arg4@@16 arg5@@13 arg6@@12 arg7@@1 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads5| :pattern ( (Reads5 arg0@@186 arg1@@93 arg2@@45 arg3@@24 arg4@@16 arg5@@13 arg6@@12 arg7@@1 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12@@0)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (t4@@1 T@U) (t5@@1 T@U) (heap@@18 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx3@@1 T@U) (bx4@@1 T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type t4@@1) TyType)) (= (type t5@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx4@@1) BoxType)) (= (type bx@@51) BoxType)) (= (U_2_bool (MapType0Select (Reads5 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 t5@@1 heap@@18 (Handle5 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1 bx4@@1) bx@@51)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@29 bx1@@15 bx2@@1 bx3@@1 bx4@@1) bx@@51)))) :qid |unknown.0:0| :skolemid |863| :pattern ( (MapType0Select (Reads5 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 t5@@1 heap@@18 (Handle5 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1 bx4@@1) bx@@51)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (t4@@2 T@U) (t5@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) (bx3@@2 T@U) (bx4@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type t4@@2) TyType)) (= (type t5@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (= (type bx3@@2) BoxType)) (= (type bx4@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($IsBox bx3@@2 t3@@2)) ($IsBox bx4@@2 t4@@2)) ($Is f@@41 (Tclass._System.___hFunc5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2 bx4@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17)))) :qid |unknown.0:0| :skolemid |864| :no-pattern (type o@@62) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2 bx4@@2) (Reads5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2 bx4@@2))) :qid |unknown.0:0| :skolemid |865| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2 bx4@@2)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (t4@@3 T@U) (t5@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) (bx3@@3 T@U) (bx4@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type t4@@3) TyType)) (= (type t5@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (= (type bx3@@3) BoxType)) (= (type bx4@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($IsBox bx3@@3 t3@@3)) ($IsBox bx4@@3 t4@@3)) ($Is f@@42 (Tclass._System.___hFunc5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3 bx4@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18)))) :qid |unknown.0:0| :skolemid |866| :no-pattern (type o@@63) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3 bx4@@3) (Reads5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3 bx4@@3))) :qid |unknown.0:0| :skolemid |867| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3 bx4@@3)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (t4@@4 T@U) (t5@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) (bx3@@4 T@U) (bx4@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type t4@@4) TyType)) (= (type t5@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (= (type bx3@@4) BoxType)) (= (type bx4@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($IsBox bx3@@4 t3@@4)) ($IsBox bx4@@4 t4@@4)) ($Is f@@43 (Tclass._System.___hFunc5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4 bx4@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19)))) :qid |unknown.0:0| :skolemid |868| :no-pattern (type o@@64) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (= (Requires5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4 bx4@@4) (Requires5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4 bx4@@4))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4 bx4@@4)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (t4@@5 T@U) (t5@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) (bx3@@5 T@U) (bx4@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type t4@@5) TyType)) (= (type t5@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (= (type bx3@@5) BoxType)) (= (type bx4@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($IsBox bx3@@5 t3@@5)) ($IsBox bx4@@5 t4@@5)) ($Is f@@44 (Tclass._System.___hFunc5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5 bx4@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20)))) :qid |unknown.0:0| :skolemid |870| :no-pattern (type o@@65) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (= (Requires5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5 bx4@@5) (Requires5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5 bx4@@5))) :qid |unknown.0:0| :skolemid |871| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5 bx4@@5)) )))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (t4@@6 T@U) (t5@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) (bx3@@6 T@U) (bx4@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type t4@@6) TyType)) (= (type t5@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (= (type bx3@@6) BoxType)) (= (type bx4@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($IsBox bx3@@6 t3@@6)) ($IsBox bx4@@6 t4@@6)) ($Is f@@45 (Tclass._System.___hFunc5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6 bx4@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21)))) :qid |unknown.0:0| :skolemid |872| :no-pattern (type o@@66) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6 bx4@@6) (Apply5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6 bx4@@6))) :qid |unknown.0:0| :skolemid |873| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6 bx4@@6)) )))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (t4@@7 T@U) (t5@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) (bx3@@7 T@U) (bx4@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type t4@@7) TyType)) (= (type t5@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (= (type bx3@@7) BoxType)) (= (type bx4@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($IsBox bx3@@7 t3@@7)) ($IsBox bx4@@7 t4@@7)) ($Is f@@46 (Tclass._System.___hFunc5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7 bx4@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22)))) :qid |unknown.0:0| :skolemid |874| :no-pattern (type o@@67) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7 bx4@@7) (Apply5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7 bx4@@7))) :qid |unknown.0:0| :skolemid |875| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7 bx4@@7)) )))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (t4@@8 T@U) (t5@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) (bx3@@8 T@U) (bx4@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type t4@@8) TyType)) (= (type t5@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (= (type bx3@@8) BoxType)) (= (type bx4@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($IsBox bx3@@8 t3@@8)) ($IsBox bx4@@8 t4@@8)) ($Is f@@47 (Tclass._System.___hFunc5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8))))) (= (|Set#Equal| (Reads5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8 bx4@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8 bx4@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |876| :pattern ( (Reads5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8 bx4@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8 bx4@@8)) )))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (t4@@9 T@U) (t5@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) (bx3@@9 T@U) (bx4@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type t4@@9) TyType)) (= (type t5@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (= (type bx3@@9) BoxType)) (= (type bx4@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($IsBox bx3@@9 t3@@9)) ($IsBox bx4@@9 t4@@9)) ($Is f@@48 (Tclass._System.___hFunc5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9)))) (|Set#Equal| (Reads5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9) (|Set#Empty| BoxType)))) (= (Requires5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9) (Requires5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9))) :qid |unknown.0:0| :skolemid |877| :pattern ( (Requires5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) (t4@@10 T@U) (t5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= (type t4@@10) TyType)) (= (type t5@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) (bx3@@10 T@U) (bx4@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (= (type bx3@@10) BoxType)) (= (type bx4@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25)) ($IsBox bx3@@10 t3@@10)) ($IsBox bx4@@10 t4@@10))) (Requires5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10 bx4@@10))) ($IsBox (Apply5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10 bx4@@10) t5@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |878| :pattern ( (Apply5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10 bx4@@10)) )))) :qid |unknown.0:0| :skolemid |879| :pattern ( ($Is f@@49 (Tclass._System.___hFunc5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (t4@@11 T@U) (t5@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) (u4 T@U) (u5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type t4@@11) TyType)) (= (type t5@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (= (type u4) TyType)) (= (type u5) TyType)) (and (and (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc5 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11 t5@@11)) (forall ((bx@@52 T@U) ) (!  (=> (and (= (type bx@@52) BoxType) ($IsBox bx@@52 u0@@2)) ($IsBox bx@@52 t0@@73)) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@52 u0@@2)) :pattern ( ($IsBox bx@@52 t0@@73)) ))) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u1@@1)) ($IsBox bx@@53 t1@@49)) :qid |unknown.0:0| :skolemid |881| :pattern ( ($IsBox bx@@53 u1@@1)) :pattern ( ($IsBox bx@@53 t1@@49)) ))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u2@@0)) ($IsBox bx@@54 t2@@26)) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@54 u2@@0)) :pattern ( ($IsBox bx@@54 t2@@26)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 u3)) ($IsBox bx@@55 t3@@11)) :qid |unknown.0:0| :skolemid |883| :pattern ( ($IsBox bx@@55 u3)) :pattern ( ($IsBox bx@@55 t3@@11)) ))) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 u4)) ($IsBox bx@@56 t4@@11)) :qid |unknown.0:0| :skolemid |884| :pattern ( ($IsBox bx@@56 u4)) :pattern ( ($IsBox bx@@56 t4@@11)) ))) (forall ((bx@@57 T@U) ) (!  (=> (and (= (type bx@@57) BoxType) ($IsBox bx@@57 t5@@11)) ($IsBox bx@@57 u5)) :qid |unknown.0:0| :skolemid |885| :pattern ( ($IsBox bx@@57 t5@@11)) :pattern ( ($IsBox bx@@57 u5)) )))) ($Is f@@50 (Tclass._System.___hFunc5 u0@@2 u1@@1 u2@@0 u3 u4 u5))) :qid |unknown.0:0| :skolemid |886| :pattern ( ($Is f@@50 (Tclass._System.___hFunc5 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11 t5@@11)) ($Is f@@50 (Tclass._System.___hFunc5 u0@@2 u1@@1 u2@@0 u3 u4 u5))) )))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (t4@@12 T@U) (t5@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type t4@@12) TyType)) (= (type t5@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) (bx3@@11 T@U) (bx4@@11 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (= (type bx3@@11) BoxType)) (= (type bx4@@11) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (and ($IsBox bx3@@11 t3@@12) ($IsAllocBox bx3@@11 t3@@12 h@@43))) (and ($IsBox bx4@@11 t4@@12) ($IsAllocBox bx4@@11 t4@@12 h@@43))) (Requires5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc)))) :qid |unknown.0:0| :skolemid |887| :pattern ( (MapType0Select (Reads5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11) ($Box r@@21))) )))) :qid |unknown.0:0| :skolemid |888| :pattern ( (Apply5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11)) :pattern ( (Reads5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11)) )))) :qid |unknown.0:0| :skolemid |889| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12) h@@43)) )))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (t4@@13 T@U) (t5@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type t4@@13) TyType)) (= (type t5@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) (bx3@@12 T@U) (bx4@@12 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (= (type bx3@@12) BoxType)) (= (type bx4@@12) BoxType)) (=> (and (and (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) ($IsAllocBox bx3@@12 t3@@13 h@@44)) ($IsAllocBox bx4@@12 t4@@13 h@@44)) (Requires5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12 bx4@@12)) ($IsAllocBox (Apply5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12 bx4@@12) t5@@13 h@@44))) :qid |unknown.0:0| :skolemid |890| :pattern ( (Apply5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12 bx4@@12)) ))) :qid |unknown.0:0| :skolemid |891| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13) h@@44)) )))
(assert (forall ((arg0@@187 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@17 T@U) (arg5@@14 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5 arg0@@187 arg1@@94 arg2@@46 arg3@@25 arg4@@17 arg5@@14)) TyType) :qid |funType:Tclass._System.___hPartialFunc5| :pattern ( (Tclass._System.___hPartialFunc5 arg0@@187 arg1@@94 arg2@@46 arg3@@25 arg4@@17 arg5@@14)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$T3@@7| T@U) (|#$T4@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$T4@@7|) TyType)) (= (type |#$R@@55|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc5 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$T4@@7| |#$R@@55|)) Tagclass._System.___hPartialFunc5) (= (TagFamily (Tclass._System.___hPartialFunc5 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$T4@@7| |#$R@@55|)) |tytagFamily$_#PartialFunc5|))) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$T4@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_0 arg0@@188)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_0| :pattern ( (Tclass._System.___hPartialFunc5_0 arg0@@188)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$T3@@8| T@U) (|#$T4@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$T4@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc5_0 (Tclass._System.___hPartialFunc5 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$T4@@8| |#$R@@56|)) |#$T0@@43|)) :qid |unknown.0:0| :skolemid |893| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$T4@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_1 arg0@@189)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_1| :pattern ( (Tclass._System.___hPartialFunc5_1 arg0@@189)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$T3@@9| T@U) (|#$T4@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$T4@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc5_1 (Tclass._System.___hPartialFunc5 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$T4@@9| |#$R@@57|)) |#$T1@@28|)) :qid |unknown.0:0| :skolemid |894| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$T4@@9| |#$R@@57|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_2 arg0@@190)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_2| :pattern ( (Tclass._System.___hPartialFunc5_2 arg0@@190)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$T3@@10| T@U) (|#$T4@@10| T@U) (|#$R@@58| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$T4@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (Tclass._System.___hPartialFunc5_2 (Tclass._System.___hPartialFunc5 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$T4@@10| |#$R@@58|)) |#$T2@@10|)) :qid |unknown.0:0| :skolemid |895| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$T4@@10| |#$R@@58|)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_3 arg0@@191)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_3| :pattern ( (Tclass._System.___hPartialFunc5_3 arg0@@191)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$T3@@11| T@U) (|#$T4@@11| T@U) (|#$R@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$T4@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (Tclass._System.___hPartialFunc5_3 (Tclass._System.___hPartialFunc5 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$T4@@11| |#$R@@59|)) |#$T3@@11|)) :qid |unknown.0:0| :skolemid |896| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$T4@@11| |#$R@@59|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_4 arg0@@192)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_4| :pattern ( (Tclass._System.___hPartialFunc5_4 arg0@@192)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$T3@@12| T@U) (|#$T4@@12| T@U) (|#$R@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$T4@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (Tclass._System.___hPartialFunc5_4 (Tclass._System.___hPartialFunc5 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$T4@@12| |#$R@@60|)) |#$T4@@12|)) :qid |unknown.0:0| :skolemid |897| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$T4@@12| |#$R@@60|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_5 arg0@@193)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_5| :pattern ( (Tclass._System.___hPartialFunc5_5 arg0@@193)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$T3@@13| T@U) (|#$T4@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$T4@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tclass._System.___hPartialFunc5_5 (Tclass._System.___hPartialFunc5 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$T4@@13| |#$R@@61|)) |#$R@@61|)) :qid |unknown.0:0| :skolemid |898| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$T4@@13| |#$R@@61|)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$T3@@14| T@U) (|#$T4@@14| T@U) (|#$R@@62| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$T4@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hPartialFunc5 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$T4@@14| |#$R@@62|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hPartialFunc5 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$T4@@14| |#$R@@62|)))) :qid |unknown.0:0| :skolemid |899| :pattern ( ($IsBox bx@@58 (Tclass._System.___hPartialFunc5 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$T4@@14| |#$R@@62|))) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$T3@@15| T@U) (|#$T4@@15| T@U) (|#$R@@63| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$T4@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc5 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$T4@@15| |#$R@@63|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc5 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$T4@@15| |#$R@@63|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) (|x2#0| T@U) (|x3#0| T@U) (|x4#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (= (type |x2#0|) BoxType)) (= (type |x3#0|) BoxType)) (= (type |x4#0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@3| |#$T0@@50|) ($IsBox |x1#0@@1| |#$T1@@34|)) ($IsBox |x2#0| |#$T2@@15|)) ($IsBox |x3#0| |#$T3@@15|)) ($IsBox |x4#0| |#$T4@@15|))) (|Set#Equal| (Reads5 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$T4@@15| |#$R@@63| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1| |x2#0| |x3#0| |x4#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |900| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@1|) :no-pattern (type |x2#0|) :no-pattern (type |x3#0|) :no-pattern (type |x4#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) :no-pattern (U_2_int |x4#0|) :no-pattern (U_2_bool |x4#0|) ))))) :qid |unknown.0:0| :skolemid |901| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc5 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$T4@@15| |#$R@@63|))) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$T3@@16| T@U) (|#$T4@@16| T@U) (|#$R@@64| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$T4@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc5 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$T4@@16| |#$R@@64|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc5 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$T4@@16| |#$R@@64|) $h@@14))) :qid |unknown.0:0| :skolemid |902| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc5 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$T4@@16| |#$R@@64|) $h@@14)) )))
(assert (forall ((arg0@@194 T@U) (arg1@@95 T@U) (arg2@@47 T@U) (arg3@@26 T@U) (arg4@@18 T@U) (arg5@@15 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5 arg0@@194 arg1@@95 arg2@@47 arg3@@26 arg4@@18 arg5@@15)) TyType) :qid |funType:Tclass._System.___hTotalFunc5| :pattern ( (Tclass._System.___hTotalFunc5 arg0@@194 arg1@@95 arg2@@47 arg3@@26 arg4@@18 arg5@@15)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$T3@@17| T@U) (|#$T4@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$T4@@17|) TyType)) (= (type |#$R@@65|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc5 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$T4@@17| |#$R@@65|)) Tagclass._System.___hTotalFunc5) (= (TagFamily (Tclass._System.___hTotalFunc5 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$T4@@17| |#$R@@65|)) |tytagFamily$_#TotalFunc5|))) :qid |unknown.0:0| :skolemid |903| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$T4@@17| |#$R@@65|)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_0 arg0@@195)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_0| :pattern ( (Tclass._System.___hTotalFunc5_0 arg0@@195)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$T3@@18| T@U) (|#$T4@@18| T@U) (|#$R@@66| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$T4@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (Tclass._System.___hTotalFunc5_0 (Tclass._System.___hTotalFunc5 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$T4@@18| |#$R@@66|)) |#$T0@@53|)) :qid |unknown.0:0| :skolemid |904| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$T4@@18| |#$R@@66|)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_1 arg0@@196)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_1| :pattern ( (Tclass._System.___hTotalFunc5_1 arg0@@196)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$T3@@19| T@U) (|#$T4@@19| T@U) (|#$R@@67| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$T4@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (Tclass._System.___hTotalFunc5_1 (Tclass._System.___hTotalFunc5 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$T4@@19| |#$R@@67|)) |#$T1@@38|)) :qid |unknown.0:0| :skolemid |905| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$T4@@19| |#$R@@67|)) )))
(assert (forall ((arg0@@197 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_2 arg0@@197)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_2| :pattern ( (Tclass._System.___hTotalFunc5_2 arg0@@197)) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$T3@@20| T@U) (|#$T4@@20| T@U) (|#$R@@68| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$T4@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (Tclass._System.___hTotalFunc5_2 (Tclass._System.___hTotalFunc5 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$T4@@20| |#$R@@68|)) |#$T2@@20|)) :qid |unknown.0:0| :skolemid |906| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$T4@@20| |#$R@@68|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_3 arg0@@198)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_3| :pattern ( (Tclass._System.___hTotalFunc5_3 arg0@@198)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3@@21| T@U) (|#$T4@@21| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$T4@@21|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tclass._System.___hTotalFunc5_3 (Tclass._System.___hTotalFunc5 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$T4@@21| |#$R@@69|)) |#$T3@@21|)) :qid |unknown.0:0| :skolemid |907| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$T4@@21| |#$R@@69|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_4 arg0@@199)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_4| :pattern ( (Tclass._System.___hTotalFunc5_4 arg0@@199)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@22| T@U) (|#$T4@@22| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$T4@@22|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hTotalFunc5_4 (Tclass._System.___hTotalFunc5 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$T4@@22| |#$R@@70|)) |#$T4@@22|)) :qid |unknown.0:0| :skolemid |908| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$T4@@22| |#$R@@70|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_5 arg0@@200)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_5| :pattern ( (Tclass._System.___hTotalFunc5_5 arg0@@200)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@23| T@U) (|#$T4@@23| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$T4@@23|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hTotalFunc5_5 (Tclass._System.___hTotalFunc5 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$T4@@23| |#$R@@71|)) |#$R@@71|)) :qid |unknown.0:0| :skolemid |909| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$T4@@23| |#$R@@71|)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@24| T@U) (|#$T4@@24| T@U) (|#$R@@72| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$T4@@24|) TyType)) (= (type |#$R@@72|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hTotalFunc5 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4@@24| |#$R@@72|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hTotalFunc5 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4@@24| |#$R@@72|)))) :qid |unknown.0:0| :skolemid |910| :pattern ( ($IsBox bx@@59 (Tclass._System.___hTotalFunc5 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4@@24| |#$R@@72|))) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@25| T@U) (|#$T4@@25| T@U) (|#$R@@73| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$T4@@25|) TyType)) (= (type |#$R@@73|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@25| |#$R@@73|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@25| |#$R@@73|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) (|x2#0@@0| T@U) (|x3#0@@0| T@U) (|x4#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (= (type |x2#0@@0|) BoxType)) (= (type |x3#0@@0|) BoxType)) (= (type |x4#0@@0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@4| |#$T0@@60|) ($IsBox |x1#0@@2| |#$T1@@44|)) ($IsBox |x2#0@@0| |#$T2@@25|)) ($IsBox |x3#0@@0| |#$T3@@25|)) ($IsBox |x4#0@@0| |#$T4@@25|))) (Requires5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@25| |#$R@@73| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2| |x2#0@@0| |x3#0@@0| |x4#0@@0|)) :qid |unknown.0:0| :skolemid |911| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@2|) :no-pattern (type |x2#0@@0|) :no-pattern (type |x3#0@@0|) :no-pattern (type |x4#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) :no-pattern (U_2_int |x4#0@@0|) :no-pattern (U_2_bool |x4#0@@0|) ))))) :qid |unknown.0:0| :skolemid |912| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@25| |#$R@@73|))) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@26| T@U) (|#$T4@@26| T@U) (|#$R@@74| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$T4@@26|) TyType)) (= (type |#$R@@74|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc5 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@26| |#$R@@74|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc5 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@26| |#$R@@74|) $h@@15))) :qid |unknown.0:0| :skolemid |913| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc5 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@26| |#$R@@74|) $h@@15)) )))
(assert (forall ((arg0@@201 T@U) (arg1@@96 T@U) (arg2@@48 T@U) (arg3@@27 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@201 arg1@@96 arg2@@48 arg3@@27)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@201 arg1@@96 arg2@@48 arg3@@27)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$R@@75|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) |tytagFamily$_#Func3|))) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) )))
(assert (forall ((arg0@@202 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@202)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@202)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) |#$T0@@63|)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) )))
(assert (forall ((arg0@@203 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@203)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@203)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|)) |#$T1@@48|)) :qid |unknown.0:0| :skolemid |916| :pattern ( (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|)) )))
(assert (forall ((arg0@@204 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@204)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@204)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) |#$T2@@30|)) :qid |unknown.0:0| :skolemid |917| :pattern ( (Tclass._System.___hFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) )))
(assert (forall ((arg0@@205 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@205)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@205)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) |#$R@@79|)) :qid |unknown.0:0| :skolemid |918| :pattern ( (Tclass._System.___hFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$R@@80| T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$R@@80|) TyType)) (= (type bx@@60) BoxType)) ($IsBox bx@@60 (Tclass._System.___hFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|))) (and (= ($Box ($Unbox HandleTypeType bx@@60)) bx@@60) ($Is ($Unbox HandleTypeType bx@@60) (Tclass._System.___hFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|)))) :qid |unknown.0:0| :skolemid |919| :pattern ( ($IsBox bx@@60 (Tclass._System.___hFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@206 T@T) (arg1@@97 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@19 T@T) ) (! (= (Ctor (MapType5Type arg0@@206 arg1@@97 arg2@@49 arg3@@28 arg4@@19)) 27) :qid |ctor:MapType5Type| )) (forall ((arg0@@207 T@T) (arg1@@98 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@20 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@207 arg1@@98 arg2@@50 arg3@@29 arg4@@20)) arg0@@207) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@207 arg1@@98 arg2@@50 arg3@@29 arg4@@20)) ))) (forall ((arg0@@208 T@T) (arg1@@99 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@21 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@208 arg1@@99 arg2@@51 arg3@@30 arg4@@21)) arg1@@99) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@208 arg1@@99 arg2@@51 arg3@@30 arg4@@21)) ))) (forall ((arg0@@209 T@T) (arg1@@100 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@22 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@209 arg1@@100 arg2@@52 arg3@@31 arg4@@22)) arg2@@52) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@209 arg1@@100 arg2@@52 arg3@@31 arg4@@22)) ))) (forall ((arg0@@210 T@T) (arg1@@101 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@23 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@210 arg1@@101 arg2@@53 arg3@@32 arg4@@23)) arg3@@32) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@210 arg1@@101 arg2@@53 arg3@@32 arg4@@23)) ))) (forall ((arg0@@211 T@T) (arg1@@102 T@T) (arg2@@54 T@T) (arg3@@33 T@T) (arg4@@24 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@211 arg1@@102 arg2@@54 arg3@@33 arg4@@24)) arg4@@24) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@211 arg1@@102 arg2@@54 arg3@@33 arg4@@24)) ))) (forall ((arg0@@212 T@U) (arg1@@103 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@25 T@U) ) (! (let ((aVar4@@0 (MapType5TypeInv4 (type arg0@@212)))) (= (type (MapType5Select arg0@@212 arg1@@103 arg2@@55 arg3@@34 arg4@@25)) aVar4@@0)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@212 arg1@@103 arg2@@55 arg3@@34 arg4@@25)) ))) (forall ((arg0@@213 T@U) (arg1@@104 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@26 T@U) (arg5@@16 T@U) ) (! (let ((aVar4@@1 (type arg5@@16))) (let ((aVar3@@3 (type arg4@@26))) (let ((aVar2@@4 (type arg3@@35))) (let ((aVar1@@5 (type arg2@@56))) (let ((aVar0@@3 (type arg1@@104))) (= (type (MapType5Store arg0@@213 arg1@@104 arg2@@56 arg3@@35 arg4@@26 arg5@@16)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@1))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@213 arg1@@104 arg2@@56 arg3@@35 arg4@@26 arg5@@16)) ))) (forall ((m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (val@@23 T@U) ) (! (let ((aVar4@@2 (MapType5TypeInv4 (type m@@62)))) (=> (= (type val@@23) aVar4@@2) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 val@@23) x0@@22 x1@@16 x2@@12 x3@@7) val@@23))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) ) (!  (or (= x0@@23 y0@@17) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 val@@24) y0@@17 y1@@13 y2@@10 y3@@6) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) ) (!  (or (= x1@@18 y1@@14) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 val@@25) y0@@18 y1@@14 y2@@11 y3@@7) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) ) (!  (or (= x2@@15 y2@@12) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 val@@26) y0@@19 y1@@15 y2@@12 y3@@8) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) ) (!  (or (= x3@@11 y3@@9) (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 val@@27) y0@@20 y1@@16 y2@@13 y3@@9) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@28 T@U) (m@@67 T@U) (x0@@27 T@U) (x1@@21 T@U) (x2@@17 T@U) (x3@@12 T@U) (y0@@21 T@U) (y1@@17 T@U) (y2@@14 T@U) (y3@@10 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@67 x0@@27 x1@@21 x2@@17 x3@@12 val@@28) y0@@21 y1@@17 y2@@14 y3@@10) (MapType5Select m@@67 y0@@21 y1@@17 y2@@14 y3@@10))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@214 T@U) (arg1@@105 T@U) (arg2@@57 T@U) (arg3@@36 T@U) (arg4@@27 T@U) (arg5@@17 T@U) (arg6@@13 T@U) (arg7@@2 T@U) (arg8@@1 T@U) ) (! (= (type (Apply3 arg0@@214 arg1@@105 arg2@@57 arg3@@36 arg4@@27 arg5@@17 arg6@@13 arg7@@2 arg8@@1)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@214 arg1@@105 arg2@@57 arg3@@36 arg4@@27 arg5@@17 arg6@@13 arg7@@2 arg8@@1)) ))) (forall ((arg0@@215 T@U) (arg1@@106 T@U) (arg2@@58 T@U) ) (! (= (type (Handle3 arg0@@215 arg1@@106 arg2@@58)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@215 arg1@@106 arg2@@58)) ))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (heap@@21 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (Apply3 t0@@76 t1@@52 t2@@29 t3@@14 heap@@21 (Handle3 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13) (MapType5Select h@@45 heap@@21 bx0@@41 bx1@@27 bx2@@13))) :qid |unknown.0:0| :skolemid |920| :pattern ( (Apply3 t0@@76 t1@@52 t2@@29 t3@@14 heap@@21 (Handle3 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (heap@@22 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@22 bx0@@42 bx1@@28 bx2@@14))) (Requires3 t0@@77 t1@@53 t2@@30 t3@@15 heap@@22 (Handle3 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14)) :qid |unknown.0:0| :skolemid |921| :pattern ( (Requires3 t0@@77 t1@@53 t2@@30 t3@@15 heap@@22 (Handle3 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14)) )))
(assert (forall ((arg0@@216 T@U) (arg1@@107 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@28 T@U) (arg5@@18 T@U) (arg6@@14 T@U) (arg7@@3 T@U) (arg8@@2 T@U) ) (! (= (type (Reads3 arg0@@216 arg1@@107 arg2@@59 arg3@@37 arg4@@28 arg5@@18 arg6@@14 arg7@@3 arg8@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@216 arg1@@107 arg2@@59 arg3@@37 arg4@@28 arg5@@18 arg6@@14 arg7@@3 arg8@@2)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (heap@@23 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx@@61) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@78 t1@@54 t2@@31 t3@@16 heap@@23 (Handle3 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15) bx@@61)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@43 bx1@@29 bx2@@15) bx@@61)))) :qid |unknown.0:0| :skolemid |922| :pattern ( (MapType0Select (Reads3 t0@@78 t1@@54 t2@@31 t3@@16 heap@@23 (Handle3 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15) bx@@61)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($Is f@@53 (Tclass._System.___hFunc3 t0@@79 t1@@55 t2@@32 t3@@17)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23)))) :qid |unknown.0:0| :skolemid |923| :no-pattern (type o@@68) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16) (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16))) :qid |unknown.0:0| :skolemid |924| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($Is f@@54 (Tclass._System.___hFunc3 t0@@80 t1@@56 t2@@33 t3@@18)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24)))) :qid |unknown.0:0| :skolemid |925| :no-pattern (type o@@69) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17) (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17))) :qid |unknown.0:0| :skolemid |926| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($Is f@@55 (Tclass._System.___hFunc3 t0@@81 t1@@57 t2@@34 t3@@19)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads3 t0@@81 t1@@57 t2@@34 t3@@19 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25)))) :qid |unknown.0:0| :skolemid |927| :no-pattern (type o@@70) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (= (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18) (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18))) :qid |unknown.0:0| :skolemid |928| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($Is f@@56 (Tclass._System.___hFunc3 t0@@82 t1@@58 t2@@35 t3@@20)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26)))) :qid |unknown.0:0| :skolemid |929| :no-pattern (type o@@71) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (= (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19) (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19))) :qid |unknown.0:0| :skolemid |930| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19)) )))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($Is f@@57 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@36 t3@@21)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@83 t1@@59 t2@@36 t3@@21 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27)))) :qid |unknown.0:0| :skolemid |931| :no-pattern (type o@@72) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20) (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20))) :qid |unknown.0:0| :skolemid |932| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20)) )))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($Is f@@58 (Tclass._System.___hFunc3 t0@@84 t1@@60 t2@@37 t3@@22)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28)))) :qid |unknown.0:0| :skolemid |933| :no-pattern (type o@@73) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21) (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21))) :qid |unknown.0:0| :skolemid |934| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21)) )))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($Is f@@59 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@38 t3@@23))))) (= (|Set#Equal| (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |935| :pattern ( (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22) ($IsGoodHeap heap@@24)) :pattern ( (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22)) )))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($Is f@@60 (Tclass._System.___hFunc3 t0@@86 t1@@62 t2@@39 t3@@24)))) (|Set#Equal| (Reads3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) (|Set#Empty| BoxType)))) (= (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23))) :qid |unknown.0:0| :skolemid |936| :pattern ( (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) ($IsGoodHeap heap@@25)) :pattern ( (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23)) )))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc3 t0@@87 t1@@63 t2@@40 t3@@25)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) ) (!  (=> (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40))) (Requires3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24))) ($IsBox (Apply3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24) t3@@25)) :qid |DafnyPreludebpl.545:12| :skolemid |937| :pattern ( (Apply3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24)) )))) :qid |unknown.0:0| :skolemid |938| :pattern ( ($Is f@@61 (Tclass._System.___hFunc3 t0@@87 t1@@63 t2@@40 t3@@25))) )))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc3 t0@@88 t1@@64 t2@@41 t3@@26)) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u0@@3)) ($IsBox bx@@62 t0@@88)) :qid |unknown.0:0| :skolemid |939| :pattern ( ($IsBox bx@@62 u0@@3)) :pattern ( ($IsBox bx@@62 t0@@88)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u1@@2)) ($IsBox bx@@63 t1@@64)) :qid |unknown.0:0| :skolemid |940| :pattern ( ($IsBox bx@@63 u1@@2)) :pattern ( ($IsBox bx@@63 t1@@64)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 u2@@1)) ($IsBox bx@@64 t2@@41)) :qid |unknown.0:0| :skolemid |941| :pattern ( ($IsBox bx@@64 u2@@1)) :pattern ( ($IsBox bx@@64 t2@@41)) ))) (forall ((bx@@65 T@U) ) (!  (=> (and (= (type bx@@65) BoxType) ($IsBox bx@@65 t3@@26)) ($IsBox bx@@65 u3@@0)) :qid |unknown.0:0| :skolemid |942| :pattern ( ($IsBox bx@@65 t3@@26)) :pattern ( ($IsBox bx@@65 u3@@0)) )))) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) :qid |unknown.0:0| :skolemid |943| :pattern ( ($Is f@@62 (Tclass._System.___hFunc3 t0@@88 t1@@64 t2@@41 t3@@26)) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) )))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@89 t1@@65 t2@@42 t3@@27) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) ) (!  (=> (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (=> (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (Requires3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |944| :pattern ( (MapType0Select (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |945| :pattern ( (Apply3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) :pattern ( (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) )))) :qid |unknown.0:0| :skolemid |946| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@89 t1@@65 t2@@42 t3@@27) h@@49)) )))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@90 t1@@66 t2@@43 t3@@28) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) ) (!  (=> (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) (Requires3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26)) ($IsAllocBox (Apply3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26) t3@@28 h@@50))) :qid |unknown.0:0| :skolemid |947| :pattern ( (Apply3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26)) ))) :qid |unknown.0:0| :skolemid |948| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@90 t1@@66 t2@@43 t3@@28) h@@50)) )))
(assert (forall ((arg0@@217 T@U) (arg1@@108 T@U) (arg2@@60 T@U) (arg3@@38 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@217 arg1@@108 arg2@@60 arg3@@38)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@217 arg1@@108 arg2@@60 arg3@@38)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$R@@81|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) |tytagFamily$_#PartialFunc3|))) :qid |unknown.0:0| :skolemid |949| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@218)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@218)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$R@@82| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$R@@82|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) |#$T0@@69|)) :qid |unknown.0:0| :skolemid |950| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@219)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@219)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$R@@83| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$R@@83|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|)) |#$T1@@54|)) :qid |unknown.0:0| :skolemid |951| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@220)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@220)) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$R@@84| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$R@@84|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|)) |#$T2@@36|)) :qid |unknown.0:0| :skolemid |952| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@221)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@221)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$R@@85|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|)) |#$R@@85|)) :qid |unknown.0:0| :skolemid |953| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$R@@86| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$R@@86|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hPartialFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hPartialFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)))) :qid |unknown.0:0| :skolemid |954| :pattern ( ($IsBox bx@@66 (Tclass._System.___hPartialFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|))) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$R@@87| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$R@@87|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@5| |#$T0@@74|) ($IsBox |x1#0@@3| |#$T1@@58|)) ($IsBox |x2#0@@1| |#$T2@@39|))) (|Set#Equal| (Reads3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0@@1|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |955| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) ))))) :qid |unknown.0:0| :skolemid |956| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|))) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$R@@88| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$R@@88|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|) $h@@16))) :qid |unknown.0:0| :skolemid |957| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|) $h@@16)) )))
(assert (forall ((arg0@@222 T@U) (arg1@@109 T@U) (arg2@@61 T@U) (arg3@@39 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@222 arg1@@109 arg2@@61 arg3@@39)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@222 arg1@@109 arg2@@61 arg3@@39)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$R@@89|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) |tytagFamily$_#TotalFunc3|))) :qid |unknown.0:0| :skolemid |958| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@223)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@223)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) |#$T0@@77|)) :qid |unknown.0:0| :skolemid |959| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@224)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@224)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$R@@91| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$R@@91|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|)) |#$T1@@62|)) :qid |unknown.0:0| :skolemid |960| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@225)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@225)) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$R@@92| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$R@@92|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|)) |#$T2@@44|)) :qid |unknown.0:0| :skolemid |961| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@226)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@226)) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$R@@93| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$R@@93|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|)) |#$R@@93|)) :qid |unknown.0:0| :skolemid |962| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@46| T@U) (|#$R@@94| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$R@@94|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hTotalFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$R@@94|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hTotalFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$R@@94|)))) :qid |unknown.0:0| :skolemid |963| :pattern ( ($IsBox bx@@67 (Tclass._System.___hTotalFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$R@@94|))) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@47| T@U) (|#$R@@95| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$R@@95|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$R@@95|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc3 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$R@@95|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@6| |#$T0@@82|) ($IsBox |x1#0@@4| |#$T1@@66|)) ($IsBox |x2#0@@2| |#$T2@@47|))) (Requires3 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$R@@95| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |964| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))))) :qid |unknown.0:0| :skolemid |965| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$R@@95|))) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@48| T@U) (|#$R@@96| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$R@@96|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$R@@96|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc3 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$R@@96|) $h@@17))) :qid |unknown.0:0| :skolemid |966| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$R@@96|) $h@@17)) )))
(assert (forall ((arg0@@227 T@U) (arg1@@110 T@U) (arg2@@62 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO arg0@@227 arg1@@110 arg2@@62)) TyType) :qid |funType:Tclass._System.___hFunc2OSO| :pattern ( (Tclass._System.___hFunc2OSO arg0@@227 arg1@@110 arg2@@62)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$R@@97| T@U) ) (!  (=> (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$R@@97|) TyType)) (and (= (Tag (Tclass._System.___hFunc2OSO |#$T0@@84| |#$T1@@68| |#$R@@97|)) Tagclass._System.___hFunc2OSO) (= (TagFamily (Tclass._System.___hFunc2OSO |#$T0@@84| |#$T1@@68| |#$R@@97|)) |tytagFamily$_#Func2OSO|))) :qid |unknown.0:0| :skolemid |967| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@84| |#$T1@@68| |#$R@@97|)) )))
(assert (forall ((arg0@@228 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_0 arg0@@228)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_0| :pattern ( (Tclass._System.___hFunc2OSO_0 arg0@@228)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$R@@98| T@U) ) (!  (=> (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$R@@98|) TyType)) (= (Tclass._System.___hFunc2OSO_0 (Tclass._System.___hFunc2OSO |#$T0@@85| |#$T1@@69| |#$R@@98|)) |#$T0@@85|)) :qid |unknown.0:0| :skolemid |968| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@85| |#$T1@@69| |#$R@@98|)) )))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_1 arg0@@229)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_1| :pattern ( (Tclass._System.___hFunc2OSO_1 arg0@@229)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$R@@99| T@U) ) (!  (=> (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$R@@99|) TyType)) (= (Tclass._System.___hFunc2OSO_1 (Tclass._System.___hFunc2OSO |#$T0@@86| |#$T1@@70| |#$R@@99|)) |#$T1@@70|)) :qid |unknown.0:0| :skolemid |969| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@86| |#$T1@@70| |#$R@@99|)) )))
(assert (forall ((arg0@@230 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_2 arg0@@230)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_2| :pattern ( (Tclass._System.___hFunc2OSO_2 arg0@@230)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$R@@100| T@U) ) (!  (=> (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$R@@100|) TyType)) (= (Tclass._System.___hFunc2OSO_2 (Tclass._System.___hFunc2OSO |#$T0@@87| |#$T1@@71| |#$R@@100|)) |#$R@@100|)) :qid |unknown.0:0| :skolemid |970| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@87| |#$T1@@71| |#$R@@100|)) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$R@@101| T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$R@@101|) TyType)) (= (type bx@@68) BoxType)) ($IsBox bx@@68 (Tclass._System.___hFunc2OSO |#$T0@@88| |#$T1@@72| |#$R@@101|))) (and (= ($Box ($Unbox HandleTypeType bx@@68)) bx@@68) ($Is ($Unbox HandleTypeType bx@@68) (Tclass._System.___hFunc2OSO |#$T0@@88| |#$T1@@72| |#$R@@101|)))) :qid |unknown.0:0| :skolemid |971| :pattern ( ($IsBox bx@@68 (Tclass._System.___hFunc2OSO |#$T0@@88| |#$T1@@72| |#$R@@101|))) )))
(assert (forall ((arg0@@231 T@U) (arg1@@111 T@U) (arg2@@63 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO arg0@@231 arg1@@111 arg2@@63)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO| :pattern ( (Tclass._System.___hPartialFunc2OSO arg0@@231 arg1@@111 arg2@@63)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$R@@102| T@U) ) (!  (=> (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$R@@102|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2OSO |#$T0@@89| |#$T1@@73| |#$R@@102|)) Tagclass._System.___hPartialFunc2OSO) (= (TagFamily (Tclass._System.___hPartialFunc2OSO |#$T0@@89| |#$T1@@73| |#$R@@102|)) |tytagFamily$_#PartialFunc2OSO|))) :qid |unknown.0:0| :skolemid |972| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@89| |#$T1@@73| |#$R@@102|)) )))
(assert (forall ((arg0@@232 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_0 arg0@@232)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_0| :pattern ( (Tclass._System.___hPartialFunc2OSO_0 arg0@@232)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$R@@103| T@U) ) (!  (=> (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$R@@103|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_0 (Tclass._System.___hPartialFunc2OSO |#$T0@@90| |#$T1@@74| |#$R@@103|)) |#$T0@@90|)) :qid |unknown.0:0| :skolemid |973| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@90| |#$T1@@74| |#$R@@103|)) )))
(assert (forall ((arg0@@233 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_1 arg0@@233)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_1| :pattern ( (Tclass._System.___hPartialFunc2OSO_1 arg0@@233)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$R@@104| T@U) ) (!  (=> (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$R@@104|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_1 (Tclass._System.___hPartialFunc2OSO |#$T0@@91| |#$T1@@75| |#$R@@104|)) |#$T1@@75|)) :qid |unknown.0:0| :skolemid |974| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@91| |#$T1@@75| |#$R@@104|)) )))
(assert (forall ((arg0@@234 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_2 arg0@@234)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_2| :pattern ( (Tclass._System.___hPartialFunc2OSO_2 arg0@@234)) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$R@@105| T@U) ) (!  (=> (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$R@@105|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_2 (Tclass._System.___hPartialFunc2OSO |#$T0@@92| |#$T1@@76| |#$R@@105|)) |#$R@@105|)) :qid |unknown.0:0| :skolemid |975| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@92| |#$T1@@76| |#$R@@105|)) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$R@@106| T@U) (bx@@69 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$R@@106|) TyType)) (= (type bx@@69) BoxType)) ($IsBox bx@@69 (Tclass._System.___hPartialFunc2OSO |#$T0@@93| |#$T1@@77| |#$R@@106|))) (and (= ($Box ($Unbox HandleTypeType bx@@69)) bx@@69) ($Is ($Unbox HandleTypeType bx@@69) (Tclass._System.___hPartialFunc2OSO |#$T0@@93| |#$T1@@77| |#$R@@106|)))) :qid |unknown.0:0| :skolemid |976| :pattern ( ($IsBox bx@@69 (Tclass._System.___hPartialFunc2OSO |#$T0@@93| |#$T1@@77| |#$R@@106|))) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$R@@107| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$R@@107|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (= ($Is |f#0@@19| (Tclass._System.___hPartialFunc2OSO |#$T0@@94| |#$T1@@78| |#$R@@107|))  (and ($Is |f#0@@19| (Tclass._System.___hFunc2OSO |#$T0@@94| |#$T1@@78| |#$R@@107|)) (forall ((|x0#0@@7| T@U) (|x1#0@@5| T@U) ) (!  (=> (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@5|) BoxType)) (and ($IsBox |x0#0@@7| |#$T0@@94|) ($IsBox |x1#0@@5| |#$T1@@78|))) (|Set#Equal| (Reads2 |#$T0@@94| |#$T1@@78| |#$R@@107| $OneHeap |f#0@@19| |x0#0@@7| |x1#0@@5|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |977| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@5|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) ))))) :qid |unknown.0:0| :skolemid |978| :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc2OSO |#$T0@@94| |#$T1@@78| |#$R@@107|))) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$R@@108| T@U) (|f#0@@20| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$R@@108|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc2OSO |#$T0@@95| |#$T1@@79| |#$R@@108|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc2OSO |#$T0@@95| |#$T1@@79| |#$R@@108|) $h@@18))) :qid |unknown.0:0| :skolemid |979| :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc2OSO |#$T0@@95| |#$T1@@79| |#$R@@108|) $h@@18)) )))
(assert (forall ((arg0@@235 T@U) (arg1@@112 T@U) (arg2@@64 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO arg0@@235 arg1@@112 arg2@@64)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO| :pattern ( (Tclass._System.___hTotalFunc2OSO arg0@@235 arg1@@112 arg2@@64)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$R@@109| T@U) ) (!  (=> (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$R@@109|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2OSO |#$T0@@96| |#$T1@@80| |#$R@@109|)) Tagclass._System.___hTotalFunc2OSO) (= (TagFamily (Tclass._System.___hTotalFunc2OSO |#$T0@@96| |#$T1@@80| |#$R@@109|)) |tytagFamily$_#TotalFunc2OSO|))) :qid |unknown.0:0| :skolemid |980| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@96| |#$T1@@80| |#$R@@109|)) )))
(assert (forall ((arg0@@236 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_0 arg0@@236)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_0| :pattern ( (Tclass._System.___hTotalFunc2OSO_0 arg0@@236)) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$R@@110| T@U) ) (!  (=> (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$R@@110|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_0 (Tclass._System.___hTotalFunc2OSO |#$T0@@97| |#$T1@@81| |#$R@@110|)) |#$T0@@97|)) :qid |unknown.0:0| :skolemid |981| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@97| |#$T1@@81| |#$R@@110|)) )))
(assert (forall ((arg0@@237 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_1 arg0@@237)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_1| :pattern ( (Tclass._System.___hTotalFunc2OSO_1 arg0@@237)) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$R@@111| T@U) ) (!  (=> (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$R@@111|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_1 (Tclass._System.___hTotalFunc2OSO |#$T0@@98| |#$T1@@82| |#$R@@111|)) |#$T1@@82|)) :qid |unknown.0:0| :skolemid |982| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@98| |#$T1@@82| |#$R@@111|)) )))
(assert (forall ((arg0@@238 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_2 arg0@@238)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_2| :pattern ( (Tclass._System.___hTotalFunc2OSO_2 arg0@@238)) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$R@@112| T@U) ) (!  (=> (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$R@@112|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_2 (Tclass._System.___hTotalFunc2OSO |#$T0@@99| |#$T1@@83| |#$R@@112|)) |#$R@@112|)) :qid |unknown.0:0| :skolemid |983| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@99| |#$T1@@83| |#$R@@112|)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$R@@113| T@U) (bx@@70 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$R@@113|) TyType)) (= (type bx@@70) BoxType)) ($IsBox bx@@70 (Tclass._System.___hTotalFunc2OSO |#$T0@@100| |#$T1@@84| |#$R@@113|))) (and (= ($Box ($Unbox HandleTypeType bx@@70)) bx@@70) ($Is ($Unbox HandleTypeType bx@@70) (Tclass._System.___hTotalFunc2OSO |#$T0@@100| |#$T1@@84| |#$R@@113|)))) :qid |unknown.0:0| :skolemid |984| :pattern ( ($IsBox bx@@70 (Tclass._System.___hTotalFunc2OSO |#$T0@@100| |#$T1@@84| |#$R@@113|))) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$R@@114| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$R@@114|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (= ($Is |f#0@@21| (Tclass._System.___hTotalFunc2OSO |#$T0@@101| |#$T1@@85| |#$R@@114|))  (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc2OSO |#$T0@@101| |#$T1@@85| |#$R@@114|)) (forall ((|x0#0@@8| T@U) (|x1#0@@6| T@U) ) (!  (=> (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@6|) BoxType)) (and ($IsBox |x0#0@@8| |#$T0@@101|) ($IsBox |x1#0@@6| |#$T1@@85|))) (Requires2 |#$T0@@101| |#$T1@@85| |#$R@@114| $OneHeap |f#0@@21| |x0#0@@8| |x1#0@@6|)) :qid |unknown.0:0| :skolemid |985| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@6|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) ))))) :qid |unknown.0:0| :skolemid |986| :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc2OSO |#$T0@@101| |#$T1@@85| |#$R@@114|))) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$R@@115| T@U) (|f#0@@22| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$R@@115|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc2OSO |#$T0@@102| |#$T1@@86| |#$R@@115|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc2OSO |#$T0@@102| |#$T1@@86| |#$R@@115|) $h@@19))) :qid |unknown.0:0| :skolemid |987| :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc2OSO |#$T0@@102| |#$T1@@86| |#$R@@115|) $h@@19)) )))
(assert (forall ((arg0@@239 T@U) (arg1@@113 T@U) (arg2@@65 T@U) (arg3@@40 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO arg0@@239 arg1@@113 arg2@@65 arg3@@40)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO| :pattern ( (Tclass._System.___hFunc3LLOO arg0@@239 arg1@@113 arg2@@65 arg3@@40)) )))
(assert (forall ((|#$T0@@103| T@U) (|#$T1@@87| T@U) (|#$T2@@49| T@U) (|#$R@@116| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@103|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$R@@116|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOO |#$T0@@103| |#$T1@@87| |#$T2@@49| |#$R@@116|)) Tagclass._System.___hFunc3LLOO) (= (TagFamily (Tclass._System.___hFunc3LLOO |#$T0@@103| |#$T1@@87| |#$T2@@49| |#$R@@116|)) |tytagFamily$_#Func3LLOO|))) :qid |unknown.0:0| :skolemid |988| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@103| |#$T1@@87| |#$T2@@49| |#$R@@116|)) )))
(assert (forall ((arg0@@240 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_0 arg0@@240)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_0| :pattern ( (Tclass._System.___hFunc3LLOO_0 arg0@@240)) )))
(assert (forall ((|#$T0@@104| T@U) (|#$T1@@88| T@U) (|#$T2@@50| T@U) (|#$R@@117| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$R@@117|) TyType)) (= (Tclass._System.___hFunc3LLOO_0 (Tclass._System.___hFunc3LLOO |#$T0@@104| |#$T1@@88| |#$T2@@50| |#$R@@117|)) |#$T0@@104|)) :qid |unknown.0:0| :skolemid |989| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@104| |#$T1@@88| |#$T2@@50| |#$R@@117|)) )))
(assert (forall ((arg0@@241 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_1 arg0@@241)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_1| :pattern ( (Tclass._System.___hFunc3LLOO_1 arg0@@241)) )))
(assert (forall ((|#$T0@@105| T@U) (|#$T1@@89| T@U) (|#$T2@@51| T@U) (|#$R@@118| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@105|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$R@@118|) TyType)) (= (Tclass._System.___hFunc3LLOO_1 (Tclass._System.___hFunc3LLOO |#$T0@@105| |#$T1@@89| |#$T2@@51| |#$R@@118|)) |#$T1@@89|)) :qid |unknown.0:0| :skolemid |990| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@105| |#$T1@@89| |#$T2@@51| |#$R@@118|)) )))
(assert (forall ((arg0@@242 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_2 arg0@@242)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_2| :pattern ( (Tclass._System.___hFunc3LLOO_2 arg0@@242)) )))
(assert (forall ((|#$T0@@106| T@U) (|#$T1@@90| T@U) (|#$T2@@52| T@U) (|#$R@@119| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$R@@119|) TyType)) (= (Tclass._System.___hFunc3LLOO_2 (Tclass._System.___hFunc3LLOO |#$T0@@106| |#$T1@@90| |#$T2@@52| |#$R@@119|)) |#$T2@@52|)) :qid |unknown.0:0| :skolemid |991| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@106| |#$T1@@90| |#$T2@@52| |#$R@@119|)) )))
(assert (forall ((arg0@@243 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_3 arg0@@243)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_3| :pattern ( (Tclass._System.___hFunc3LLOO_3 arg0@@243)) )))
(assert (forall ((|#$T0@@107| T@U) (|#$T1@@91| T@U) (|#$T2@@53| T@U) (|#$R@@120| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@107|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$R@@120|) TyType)) (= (Tclass._System.___hFunc3LLOO_3 (Tclass._System.___hFunc3LLOO |#$T0@@107| |#$T1@@91| |#$T2@@53| |#$R@@120|)) |#$R@@120|)) :qid |unknown.0:0| :skolemid |992| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@107| |#$T1@@91| |#$T2@@53| |#$R@@120|)) )))
(assert (forall ((|#$T0@@108| T@U) (|#$T1@@92| T@U) (|#$T2@@54| T@U) (|#$R@@121| T@U) (bx@@71 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@108|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$R@@121|) TyType)) (= (type bx@@71) BoxType)) ($IsBox bx@@71 (Tclass._System.___hFunc3LLOO |#$T0@@108| |#$T1@@92| |#$T2@@54| |#$R@@121|))) (and (= ($Box ($Unbox HandleTypeType bx@@71)) bx@@71) ($Is ($Unbox HandleTypeType bx@@71) (Tclass._System.___hFunc3LLOO |#$T0@@108| |#$T1@@92| |#$T2@@54| |#$R@@121|)))) :qid |unknown.0:0| :skolemid |993| :pattern ( ($IsBox bx@@71 (Tclass._System.___hFunc3LLOO |#$T0@@108| |#$T1@@92| |#$T2@@54| |#$R@@121|))) )))
(assert (forall ((arg0@@244 T@U) (arg1@@114 T@U) (arg2@@66 T@U) (arg3@@41 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO arg0@@244 arg1@@114 arg2@@66 arg3@@41)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO| :pattern ( (Tclass._System.___hPartialFunc3LLOO arg0@@244 arg1@@114 arg2@@66 arg3@@41)) )))
(assert (forall ((|#$T0@@109| T@U) (|#$T1@@93| T@U) (|#$T2@@55| T@U) (|#$R@@122| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@109|) TyType) (= (type |#$T1@@93|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$R@@122|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOO |#$T0@@109| |#$T1@@93| |#$T2@@55| |#$R@@122|)) Tagclass._System.___hPartialFunc3LLOO) (= (TagFamily (Tclass._System.___hPartialFunc3LLOO |#$T0@@109| |#$T1@@93| |#$T2@@55| |#$R@@122|)) |tytagFamily$_#PartialFunc3LLOO|))) :qid |unknown.0:0| :skolemid |994| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@109| |#$T1@@93| |#$T2@@55| |#$R@@122|)) )))
(assert (forall ((arg0@@245 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_0 arg0@@245)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_0| :pattern ( (Tclass._System.___hPartialFunc3LLOO_0 arg0@@245)) )))
(assert (forall ((|#$T0@@110| T@U) (|#$T1@@94| T@U) (|#$T2@@56| T@U) (|#$R@@123| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@110|) TyType) (= (type |#$T1@@94|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$R@@123|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_0 (Tclass._System.___hPartialFunc3LLOO |#$T0@@110| |#$T1@@94| |#$T2@@56| |#$R@@123|)) |#$T0@@110|)) :qid |unknown.0:0| :skolemid |995| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@110| |#$T1@@94| |#$T2@@56| |#$R@@123|)) )))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_1 arg0@@246)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_1| :pattern ( (Tclass._System.___hPartialFunc3LLOO_1 arg0@@246)) )))
(assert (forall ((|#$T0@@111| T@U) (|#$T1@@95| T@U) (|#$T2@@57| T@U) (|#$R@@124| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@111|) TyType) (= (type |#$T1@@95|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$R@@124|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_1 (Tclass._System.___hPartialFunc3LLOO |#$T0@@111| |#$T1@@95| |#$T2@@57| |#$R@@124|)) |#$T1@@95|)) :qid |unknown.0:0| :skolemid |996| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@111| |#$T1@@95| |#$T2@@57| |#$R@@124|)) )))
(assert (forall ((arg0@@247 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_2 arg0@@247)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_2| :pattern ( (Tclass._System.___hPartialFunc3LLOO_2 arg0@@247)) )))
(assert (forall ((|#$T0@@112| T@U) (|#$T1@@96| T@U) (|#$T2@@58| T@U) (|#$R@@125| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@112|) TyType) (= (type |#$T1@@96|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$R@@125|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_2 (Tclass._System.___hPartialFunc3LLOO |#$T0@@112| |#$T1@@96| |#$T2@@58| |#$R@@125|)) |#$T2@@58|)) :qid |unknown.0:0| :skolemid |997| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@112| |#$T1@@96| |#$T2@@58| |#$R@@125|)) )))
(assert (forall ((arg0@@248 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_3 arg0@@248)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_3| :pattern ( (Tclass._System.___hPartialFunc3LLOO_3 arg0@@248)) )))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@97| T@U) (|#$T2@@59| T@U) (|#$R@@126| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$R@@126|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_3 (Tclass._System.___hPartialFunc3LLOO |#$T0@@113| |#$T1@@97| |#$T2@@59| |#$R@@126|)) |#$R@@126|)) :qid |unknown.0:0| :skolemid |998| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@113| |#$T1@@97| |#$T2@@59| |#$R@@126|)) )))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@98| T@U) (|#$T2@@60| T@U) (|#$R@@127| T@U) (bx@@72 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$R@@127|) TyType)) (= (type bx@@72) BoxType)) ($IsBox bx@@72 (Tclass._System.___hPartialFunc3LLOO |#$T0@@114| |#$T1@@98| |#$T2@@60| |#$R@@127|))) (and (= ($Box ($Unbox HandleTypeType bx@@72)) bx@@72) ($Is ($Unbox HandleTypeType bx@@72) (Tclass._System.___hPartialFunc3LLOO |#$T0@@114| |#$T1@@98| |#$T2@@60| |#$R@@127|)))) :qid |unknown.0:0| :skolemid |999| :pattern ( ($IsBox bx@@72 (Tclass._System.___hPartialFunc3LLOO |#$T0@@114| |#$T1@@98| |#$T2@@60| |#$R@@127|))) )))
(assert (forall ((|#$T0@@115| T@U) (|#$T1@@99| T@U) (|#$T2@@61| T@U) (|#$R@@128| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@115|) TyType) (= (type |#$T1@@99|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$R@@128|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (= ($Is |f#0@@23| (Tclass._System.___hPartialFunc3LLOO |#$T0@@115| |#$T1@@99| |#$T2@@61| |#$R@@128|))  (and ($Is |f#0@@23| (Tclass._System.___hFunc3LLOO |#$T0@@115| |#$T1@@99| |#$T2@@61| |#$R@@128|)) (forall ((|x0#0@@9| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (and (and ($IsBox |x0#0@@9| |#$T0@@115|) ($IsBox |x1#0@@7| |#$T1@@99|)) ($IsBox |x2#0@@3| |#$T2@@61|))) (|Set#Equal| (Reads3 |#$T0@@115| |#$T1@@99| |#$T2@@61| |#$R@@128| $OneHeap |f#0@@23| |x0#0@@9| |x1#0@@7| |x2#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1000| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) ))))) :qid |unknown.0:0| :skolemid |1001| :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc3LLOO |#$T0@@115| |#$T1@@99| |#$T2@@61| |#$R@@128|))) )))
(assert (forall ((|#$T0@@116| T@U) (|#$T1@@100| T@U) (|#$T2@@62| T@U) (|#$R@@129| T@U) (|f#0@@24| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@116|) TyType) (= (type |#$T1@@100|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$R@@129|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc3LLOO |#$T0@@116| |#$T1@@100| |#$T2@@62| |#$R@@129|) $h@@20) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc3LLOO |#$T0@@116| |#$T1@@100| |#$T2@@62| |#$R@@129|) $h@@20))) :qid |unknown.0:0| :skolemid |1002| :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc3LLOO |#$T0@@116| |#$T1@@100| |#$T2@@62| |#$R@@129|) $h@@20)) )))
(assert (forall ((arg0@@249 T@U) (arg1@@115 T@U) (arg2@@67 T@U) (arg3@@42 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO arg0@@249 arg1@@115 arg2@@67 arg3@@42)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO| :pattern ( (Tclass._System.___hTotalFunc3LLOO arg0@@249 arg1@@115 arg2@@67 arg3@@42)) )))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@101| T@U) (|#$T2@@63| T@U) (|#$R@@130| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@101|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$R@@130|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOO |#$T0@@117| |#$T1@@101| |#$T2@@63| |#$R@@130|)) Tagclass._System.___hTotalFunc3LLOO) (= (TagFamily (Tclass._System.___hTotalFunc3LLOO |#$T0@@117| |#$T1@@101| |#$T2@@63| |#$R@@130|)) |tytagFamily$_#TotalFunc3LLOO|))) :qid |unknown.0:0| :skolemid |1003| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@117| |#$T1@@101| |#$T2@@63| |#$R@@130|)) )))
(assert (forall ((arg0@@250 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_0 arg0@@250)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_0| :pattern ( (Tclass._System.___hTotalFunc3LLOO_0 arg0@@250)) )))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@102| T@U) (|#$T2@@64| T@U) (|#$R@@131| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$R@@131|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_0 (Tclass._System.___hTotalFunc3LLOO |#$T0@@118| |#$T1@@102| |#$T2@@64| |#$R@@131|)) |#$T0@@118|)) :qid |unknown.0:0| :skolemid |1004| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@118| |#$T1@@102| |#$T2@@64| |#$R@@131|)) )))
(assert (forall ((arg0@@251 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_1 arg0@@251)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_1| :pattern ( (Tclass._System.___hTotalFunc3LLOO_1 arg0@@251)) )))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@103| T@U) (|#$T2@@65| T@U) (|#$R@@132| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$R@@132|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_1 (Tclass._System.___hTotalFunc3LLOO |#$T0@@119| |#$T1@@103| |#$T2@@65| |#$R@@132|)) |#$T1@@103|)) :qid |unknown.0:0| :skolemid |1005| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@119| |#$T1@@103| |#$T2@@65| |#$R@@132|)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_2 arg0@@252)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_2| :pattern ( (Tclass._System.___hTotalFunc3LLOO_2 arg0@@252)) )))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@104| T@U) (|#$T2@@66| T@U) (|#$R@@133| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$R@@133|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_2 (Tclass._System.___hTotalFunc3LLOO |#$T0@@120| |#$T1@@104| |#$T2@@66| |#$R@@133|)) |#$T2@@66|)) :qid |unknown.0:0| :skolemid |1006| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@120| |#$T1@@104| |#$T2@@66| |#$R@@133|)) )))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_3 arg0@@253)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_3| :pattern ( (Tclass._System.___hTotalFunc3LLOO_3 arg0@@253)) )))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@105| T@U) (|#$T2@@67| T@U) (|#$R@@134| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$R@@134|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_3 (Tclass._System.___hTotalFunc3LLOO |#$T0@@121| |#$T1@@105| |#$T2@@67| |#$R@@134|)) |#$R@@134|)) :qid |unknown.0:0| :skolemid |1007| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@121| |#$T1@@105| |#$T2@@67| |#$R@@134|)) )))
(assert (forall ((|#$T0@@122| T@U) (|#$T1@@106| T@U) (|#$T2@@68| T@U) (|#$R@@135| T@U) (bx@@73 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@122|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$R@@135|) TyType)) (= (type bx@@73) BoxType)) ($IsBox bx@@73 (Tclass._System.___hTotalFunc3LLOO |#$T0@@122| |#$T1@@106| |#$T2@@68| |#$R@@135|))) (and (= ($Box ($Unbox HandleTypeType bx@@73)) bx@@73) ($Is ($Unbox HandleTypeType bx@@73) (Tclass._System.___hTotalFunc3LLOO |#$T0@@122| |#$T1@@106| |#$T2@@68| |#$R@@135|)))) :qid |unknown.0:0| :skolemid |1008| :pattern ( ($IsBox bx@@73 (Tclass._System.___hTotalFunc3LLOO |#$T0@@122| |#$T1@@106| |#$T2@@68| |#$R@@135|))) )))
(assert (forall ((|#$T0@@123| T@U) (|#$T1@@107| T@U) (|#$T2@@69| T@U) (|#$R@@136| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@123|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$R@@136|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (= ($Is |f#0@@25| (Tclass._System.___hTotalFunc3LLOO |#$T0@@123| |#$T1@@107| |#$T2@@69| |#$R@@136|))  (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc3LLOO |#$T0@@123| |#$T1@@107| |#$T2@@69| |#$R@@136|)) (forall ((|x0#0@@10| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (and (and ($IsBox |x0#0@@10| |#$T0@@123|) ($IsBox |x1#0@@8| |#$T1@@107|)) ($IsBox |x2#0@@4| |#$T2@@69|))) (Requires3 |#$T0@@123| |#$T1@@107| |#$T2@@69| |#$R@@136| $OneHeap |f#0@@25| |x0#0@@10| |x1#0@@8| |x2#0@@4|)) :qid |unknown.0:0| :skolemid |1009| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) ))))) :qid |unknown.0:0| :skolemid |1010| :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc3LLOO |#$T0@@123| |#$T1@@107| |#$T2@@69| |#$R@@136|))) )))
(assert (forall ((|#$T0@@124| T@U) (|#$T1@@108| T@U) (|#$T2@@70| T@U) (|#$R@@137| T@U) (|f#0@@26| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@124|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$R@@137|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc3LLOO |#$T0@@124| |#$T1@@108| |#$T2@@70| |#$R@@137|) $h@@21) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc3LLOO |#$T0@@124| |#$T1@@108| |#$T2@@70| |#$R@@137|) $h@@21))) :qid |unknown.0:0| :skolemid |1011| :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc3LLOO |#$T0@@124| |#$T1@@108| |#$T2@@70| |#$R@@137|) $h@@21)) )))
(assert (forall ((arg0@@254 T@U) (arg1@@116 T@U) ) (! (= (type (Tclass._System.___hFunc1OS arg0@@254 arg1@@116)) TyType) :qid |funType:Tclass._System.___hFunc1OS| :pattern ( (Tclass._System.___hFunc1OS arg0@@254 arg1@@116)) )))
(assert (forall ((|#$T0@@125| T@U) (|#$R@@138| T@U) ) (!  (=> (and (= (type |#$T0@@125|) TyType) (= (type |#$R@@138|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OS |#$T0@@125| |#$R@@138|)) Tagclass._System.___hFunc1OS) (= (TagFamily (Tclass._System.___hFunc1OS |#$T0@@125| |#$R@@138|)) |tytagFamily$_#Func1OS|))) :qid |unknown.0:0| :skolemid |1012| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@125| |#$R@@138|)) )))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_0 arg0@@255)) TyType) :qid |funType:Tclass._System.___hFunc1OS_0| :pattern ( (Tclass._System.___hFunc1OS_0 arg0@@255)) )))
(assert (forall ((|#$T0@@126| T@U) (|#$R@@139| T@U) ) (!  (=> (and (= (type |#$T0@@126|) TyType) (= (type |#$R@@139|) TyType)) (= (Tclass._System.___hFunc1OS_0 (Tclass._System.___hFunc1OS |#$T0@@126| |#$R@@139|)) |#$T0@@126|)) :qid |unknown.0:0| :skolemid |1013| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@126| |#$R@@139|)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_1 arg0@@256)) TyType) :qid |funType:Tclass._System.___hFunc1OS_1| :pattern ( (Tclass._System.___hFunc1OS_1 arg0@@256)) )))
(assert (forall ((|#$T0@@127| T@U) (|#$R@@140| T@U) ) (!  (=> (and (= (type |#$T0@@127|) TyType) (= (type |#$R@@140|) TyType)) (= (Tclass._System.___hFunc1OS_1 (Tclass._System.___hFunc1OS |#$T0@@127| |#$R@@140|)) |#$R@@140|)) :qid |unknown.0:0| :skolemid |1014| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@127| |#$R@@140|)) )))
(assert (forall ((|#$T0@@128| T@U) (|#$R@@141| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@128|) TyType) (= (type |#$R@@141|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hFunc1OS |#$T0@@128| |#$R@@141|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hFunc1OS |#$T0@@128| |#$R@@141|)))) :qid |unknown.0:0| :skolemid |1015| :pattern ( ($IsBox bx@@74 (Tclass._System.___hFunc1OS |#$T0@@128| |#$R@@141|))) )))
(assert (forall ((arg0@@257 T@U) (arg1@@117 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS arg0@@257 arg1@@117)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS| :pattern ( (Tclass._System.___hPartialFunc1OS arg0@@257 arg1@@117)) )))
(assert (forall ((|#$T0@@129| T@U) (|#$R@@142| T@U) ) (!  (=> (and (= (type |#$T0@@129|) TyType) (= (type |#$R@@142|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OS |#$T0@@129| |#$R@@142|)) Tagclass._System.___hPartialFunc1OS) (= (TagFamily (Tclass._System.___hPartialFunc1OS |#$T0@@129| |#$R@@142|)) |tytagFamily$_#PartialFunc1OS|))) :qid |unknown.0:0| :skolemid |1016| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@129| |#$R@@142|)) )))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_0 arg0@@258)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_0| :pattern ( (Tclass._System.___hPartialFunc1OS_0 arg0@@258)) )))
(assert (forall ((|#$T0@@130| T@U) (|#$R@@143| T@U) ) (!  (=> (and (= (type |#$T0@@130|) TyType) (= (type |#$R@@143|) TyType)) (= (Tclass._System.___hPartialFunc1OS_0 (Tclass._System.___hPartialFunc1OS |#$T0@@130| |#$R@@143|)) |#$T0@@130|)) :qid |unknown.0:0| :skolemid |1017| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@130| |#$R@@143|)) )))
(assert (forall ((arg0@@259 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_1 arg0@@259)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_1| :pattern ( (Tclass._System.___hPartialFunc1OS_1 arg0@@259)) )))
(assert (forall ((|#$T0@@131| T@U) (|#$R@@144| T@U) ) (!  (=> (and (= (type |#$T0@@131|) TyType) (= (type |#$R@@144|) TyType)) (= (Tclass._System.___hPartialFunc1OS_1 (Tclass._System.___hPartialFunc1OS |#$T0@@131| |#$R@@144|)) |#$R@@144|)) :qid |unknown.0:0| :skolemid |1018| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@131| |#$R@@144|)) )))
(assert (forall ((|#$T0@@132| T@U) (|#$R@@145| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@132|) TyType) (= (type |#$R@@145|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hPartialFunc1OS |#$T0@@132| |#$R@@145|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hPartialFunc1OS |#$T0@@132| |#$R@@145|)))) :qid |unknown.0:0| :skolemid |1019| :pattern ( ($IsBox bx@@75 (Tclass._System.___hPartialFunc1OS |#$T0@@132| |#$R@@145|))) )))
(assert (forall ((|#$T0@@133| T@U) (|#$R@@146| T@U) (|f#0@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@133|) TyType) (= (type |#$R@@146|) TyType)) (= (type |f#0@@27|) HandleTypeType)) (= ($Is |f#0@@27| (Tclass._System.___hPartialFunc1OS |#$T0@@133| |#$R@@146|))  (and ($Is |f#0@@27| (Tclass._System.___hFunc1OS |#$T0@@133| |#$R@@146|)) (forall ((|x0#0@@11| T@U) ) (!  (=> (and (= (type |x0#0@@11|) BoxType) ($IsBox |x0#0@@11| |#$T0@@133|)) (|Set#Equal| (Reads1 |#$T0@@133| |#$R@@146| $OneHeap |f#0@@27| |x0#0@@11|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1020| :no-pattern (type |x0#0@@11|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) ))))) :qid |unknown.0:0| :skolemid |1021| :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc1OS |#$T0@@133| |#$R@@146|))) )))
(assert (forall ((|#$T0@@134| T@U) (|#$R@@147| T@U) (|f#0@@28| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@134|) TyType) (= (type |#$R@@147|) TyType)) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc1OS |#$T0@@134| |#$R@@147|) $h@@22) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc1OS |#$T0@@134| |#$R@@147|) $h@@22))) :qid |unknown.0:0| :skolemid |1022| :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc1OS |#$T0@@134| |#$R@@147|) $h@@22)) )))
(assert (forall ((arg0@@260 T@U) (arg1@@118 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS arg0@@260 arg1@@118)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS| :pattern ( (Tclass._System.___hTotalFunc1OS arg0@@260 arg1@@118)) )))
(assert (forall ((|#$T0@@135| T@U) (|#$R@@148| T@U) ) (!  (=> (and (= (type |#$T0@@135|) TyType) (= (type |#$R@@148|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OS |#$T0@@135| |#$R@@148|)) Tagclass._System.___hTotalFunc1OS) (= (TagFamily (Tclass._System.___hTotalFunc1OS |#$T0@@135| |#$R@@148|)) |tytagFamily$_#TotalFunc1OS|))) :qid |unknown.0:0| :skolemid |1023| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@135| |#$R@@148|)) )))
(assert (forall ((arg0@@261 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_0 arg0@@261)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_0| :pattern ( (Tclass._System.___hTotalFunc1OS_0 arg0@@261)) )))
(assert (forall ((|#$T0@@136| T@U) (|#$R@@149| T@U) ) (!  (=> (and (= (type |#$T0@@136|) TyType) (= (type |#$R@@149|) TyType)) (= (Tclass._System.___hTotalFunc1OS_0 (Tclass._System.___hTotalFunc1OS |#$T0@@136| |#$R@@149|)) |#$T0@@136|)) :qid |unknown.0:0| :skolemid |1024| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@136| |#$R@@149|)) )))
(assert (forall ((arg0@@262 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_1 arg0@@262)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_1| :pattern ( (Tclass._System.___hTotalFunc1OS_1 arg0@@262)) )))
(assert (forall ((|#$T0@@137| T@U) (|#$R@@150| T@U) ) (!  (=> (and (= (type |#$T0@@137|) TyType) (= (type |#$R@@150|) TyType)) (= (Tclass._System.___hTotalFunc1OS_1 (Tclass._System.___hTotalFunc1OS |#$T0@@137| |#$R@@150|)) |#$R@@150|)) :qid |unknown.0:0| :skolemid |1025| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@137| |#$R@@150|)) )))
(assert (forall ((|#$T0@@138| T@U) (|#$R@@151| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@138|) TyType) (= (type |#$R@@151|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hTotalFunc1OS |#$T0@@138| |#$R@@151|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hTotalFunc1OS |#$T0@@138| |#$R@@151|)))) :qid |unknown.0:0| :skolemid |1026| :pattern ( ($IsBox bx@@76 (Tclass._System.___hTotalFunc1OS |#$T0@@138| |#$R@@151|))) )))
(assert (forall ((|#$T0@@139| T@U) (|#$R@@152| T@U) (|f#0@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@139|) TyType) (= (type |#$R@@152|) TyType)) (= (type |f#0@@29|) HandleTypeType)) (= ($Is |f#0@@29| (Tclass._System.___hTotalFunc1OS |#$T0@@139| |#$R@@152|))  (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc1OS |#$T0@@139| |#$R@@152|)) (forall ((|x0#0@@12| T@U) ) (!  (=> (and (= (type |x0#0@@12|) BoxType) ($IsBox |x0#0@@12| |#$T0@@139|)) (Requires1 |#$T0@@139| |#$R@@152| $OneHeap |f#0@@29| |x0#0@@12|)) :qid |unknown.0:0| :skolemid |1027| :no-pattern (type |x0#0@@12|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) ))))) :qid |unknown.0:0| :skolemid |1028| :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc1OS |#$T0@@139| |#$R@@152|))) )))
(assert (forall ((|#$T0@@140| T@U) (|#$R@@153| T@U) (|f#0@@30| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@140|) TyType) (= (type |#$R@@153|) TyType)) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc1OS |#$T0@@140| |#$R@@153|) $h@@23) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc1OS |#$T0@@140| |#$R@@153|) $h@@23))) :qid |unknown.0:0| :skolemid |1029| :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc1OS |#$T0@@140| |#$R@@153|) $h@@23)) )))
(assert (forall ((arg0@@263 T@U) ) (! (= (type (Tclass._System.___hFunc0L arg0@@263)) TyType) :qid |funType:Tclass._System.___hFunc0L| :pattern ( (Tclass._System.___hFunc0L arg0@@263)) )))
(assert (forall ((|#$R@@154| T@U) ) (!  (=> (= (type |#$R@@154|) TyType) (and (= (Tag (Tclass._System.___hFunc0L |#$R@@154|)) Tagclass._System.___hFunc0L) (= (TagFamily (Tclass._System.___hFunc0L |#$R@@154|)) |tytagFamily$_#Func0L|))) :qid |unknown.0:0| :skolemid |1030| :pattern ( (Tclass._System.___hFunc0L |#$R@@154|)) )))
(assert (forall ((arg0@@264 T@U) ) (! (= (type (Tclass._System.___hFunc0L_0 arg0@@264)) TyType) :qid |funType:Tclass._System.___hFunc0L_0| :pattern ( (Tclass._System.___hFunc0L_0 arg0@@264)) )))
(assert (forall ((|#$R@@155| T@U) ) (!  (=> (= (type |#$R@@155|) TyType) (= (Tclass._System.___hFunc0L_0 (Tclass._System.___hFunc0L |#$R@@155|)) |#$R@@155|)) :qid |unknown.0:0| :skolemid |1031| :pattern ( (Tclass._System.___hFunc0L |#$R@@155|)) )))
(assert (forall ((|#$R@@156| T@U) (bx@@77 T@U) ) (!  (=> (and (and (= (type |#$R@@156|) TyType) (= (type bx@@77) BoxType)) ($IsBox bx@@77 (Tclass._System.___hFunc0L |#$R@@156|))) (and (= ($Box ($Unbox HandleTypeType bx@@77)) bx@@77) ($Is ($Unbox HandleTypeType bx@@77) (Tclass._System.___hFunc0L |#$R@@156|)))) :qid |unknown.0:0| :skolemid |1032| :pattern ( ($IsBox bx@@77 (Tclass._System.___hFunc0L |#$R@@156|))) )))
(assert (forall ((arg0@@265 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L arg0@@265)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L| :pattern ( (Tclass._System.___hPartialFunc0L arg0@@265)) )))
(assert (forall ((|#$R@@157| T@U) ) (!  (=> (= (type |#$R@@157|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0L |#$R@@157|)) Tagclass._System.___hPartialFunc0L) (= (TagFamily (Tclass._System.___hPartialFunc0L |#$R@@157|)) |tytagFamily$_#PartialFunc0L|))) :qid |unknown.0:0| :skolemid |1033| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@157|)) )))
(assert (forall ((arg0@@266 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L_0 arg0@@266)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L_0| :pattern ( (Tclass._System.___hPartialFunc0L_0 arg0@@266)) )))
(assert (forall ((|#$R@@158| T@U) ) (!  (=> (= (type |#$R@@158|) TyType) (= (Tclass._System.___hPartialFunc0L_0 (Tclass._System.___hPartialFunc0L |#$R@@158|)) |#$R@@158|)) :qid |unknown.0:0| :skolemid |1034| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@158|)) )))
(assert (forall ((|#$R@@159| T@U) (bx@@78 T@U) ) (!  (=> (and (and (= (type |#$R@@159|) TyType) (= (type bx@@78) BoxType)) ($IsBox bx@@78 (Tclass._System.___hPartialFunc0L |#$R@@159|))) (and (= ($Box ($Unbox HandleTypeType bx@@78)) bx@@78) ($Is ($Unbox HandleTypeType bx@@78) (Tclass._System.___hPartialFunc0L |#$R@@159|)))) :qid |unknown.0:0| :skolemid |1035| :pattern ( ($IsBox bx@@78 (Tclass._System.___hPartialFunc0L |#$R@@159|))) )))
(assert (forall ((|#$R@@160| T@U) (|f#0@@31| T@U) ) (!  (=> (and (= (type |#$R@@160|) TyType) (= (type |f#0@@31|) HandleTypeType)) (= ($Is |f#0@@31| (Tclass._System.___hPartialFunc0L |#$R@@160|))  (and ($Is |f#0@@31| (Tclass._System.___hFunc0L |#$R@@160|)) (|Set#Equal| (Reads0 |#$R@@160| $OneHeap |f#0@@31|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1036| :pattern ( ($Is |f#0@@31| (Tclass._System.___hPartialFunc0L |#$R@@160|))) )))
(assert (forall ((|#$R@@161| T@U) (|f#0@@32| T@U) ($h@@24 T@U) ) (!  (=> (and (and (= (type |#$R@@161|) TyType) (= (type |f#0@@32|) HandleTypeType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc0L |#$R@@161|) $h@@24) ($IsAlloc |f#0@@32| (Tclass._System.___hFunc0L |#$R@@161|) $h@@24))) :qid |unknown.0:0| :skolemid |1037| :pattern ( ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc0L |#$R@@161|) $h@@24)) )))
(assert (forall ((arg0@@267 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L arg0@@267)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L| :pattern ( (Tclass._System.___hTotalFunc0L arg0@@267)) )))
(assert (forall ((|#$R@@162| T@U) ) (!  (=> (= (type |#$R@@162|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0L |#$R@@162|)) Tagclass._System.___hTotalFunc0L) (= (TagFamily (Tclass._System.___hTotalFunc0L |#$R@@162|)) |tytagFamily$_#TotalFunc0L|))) :qid |unknown.0:0| :skolemid |1038| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@162|)) )))
(assert (forall ((arg0@@268 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L_0 arg0@@268)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L_0| :pattern ( (Tclass._System.___hTotalFunc0L_0 arg0@@268)) )))
(assert (forall ((|#$R@@163| T@U) ) (!  (=> (= (type |#$R@@163|) TyType) (= (Tclass._System.___hTotalFunc0L_0 (Tclass._System.___hTotalFunc0L |#$R@@163|)) |#$R@@163|)) :qid |unknown.0:0| :skolemid |1039| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@163|)) )))
(assert (forall ((|#$R@@164| T@U) (bx@@79 T@U) ) (!  (=> (and (and (= (type |#$R@@164|) TyType) (= (type bx@@79) BoxType)) ($IsBox bx@@79 (Tclass._System.___hTotalFunc0L |#$R@@164|))) (and (= ($Box ($Unbox HandleTypeType bx@@79)) bx@@79) ($Is ($Unbox HandleTypeType bx@@79) (Tclass._System.___hTotalFunc0L |#$R@@164|)))) :qid |unknown.0:0| :skolemid |1040| :pattern ( ($IsBox bx@@79 (Tclass._System.___hTotalFunc0L |#$R@@164|))) )))
(assert (forall ((|#$R@@165| T@U) (|f#0@@33| T@U) ) (!  (=> (and (= (type |#$R@@165|) TyType) (= (type |f#0@@33|) HandleTypeType)) (= ($Is |f#0@@33| (Tclass._System.___hTotalFunc0L |#$R@@165|))  (and ($Is |f#0@@33| (Tclass._System.___hPartialFunc0L |#$R@@165|)) (Requires0 |#$R@@165| $OneHeap |f#0@@33|)))) :qid |unknown.0:0| :skolemid |1041| :pattern ( ($Is |f#0@@33| (Tclass._System.___hTotalFunc0L |#$R@@165|))) )))
(assert (forall ((|#$R@@166| T@U) (|f#0@@34| T@U) ($h@@25 T@U) ) (!  (=> (and (and (= (type |#$R@@166|) TyType) (= (type |f#0@@34|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc0L |#$R@@166|) $h@@25) ($IsAlloc |f#0@@34| (Tclass._System.___hPartialFunc0L |#$R@@166|) $h@@25))) :qid |unknown.0:0| :skolemid |1042| :pattern ( ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc0L |#$R@@166|) $h@@25)) )))
(assert (forall ((arg0@@269 T@U) (arg1@@119 T@U) (arg2@@68 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO arg0@@269 arg1@@119 arg2@@68)) TyType) :qid |funType:Tclass._System.___hFunc2LOO| :pattern ( (Tclass._System.___hFunc2LOO arg0@@269 arg1@@119 arg2@@68)) )))
(assert (forall ((|#$T0@@141| T@U) (|#$T1@@109| T@U) (|#$R@@167| T@U) ) (!  (=> (and (and (= (type |#$T0@@141|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$R@@167|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LOO |#$T0@@141| |#$T1@@109| |#$R@@167|)) Tagclass._System.___hFunc2LOO) (= (TagFamily (Tclass._System.___hFunc2LOO |#$T0@@141| |#$T1@@109| |#$R@@167|)) |tytagFamily$_#Func2LOO|))) :qid |unknown.0:0| :skolemid |1043| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@141| |#$T1@@109| |#$R@@167|)) )))
(assert (forall ((arg0@@270 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_0 arg0@@270)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_0| :pattern ( (Tclass._System.___hFunc2LOO_0 arg0@@270)) )))
(assert (forall ((|#$T0@@142| T@U) (|#$T1@@110| T@U) (|#$R@@168| T@U) ) (!  (=> (and (and (= (type |#$T0@@142|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$R@@168|) TyType)) (= (Tclass._System.___hFunc2LOO_0 (Tclass._System.___hFunc2LOO |#$T0@@142| |#$T1@@110| |#$R@@168|)) |#$T0@@142|)) :qid |unknown.0:0| :skolemid |1044| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@142| |#$T1@@110| |#$R@@168|)) )))
(assert (forall ((arg0@@271 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_1 arg0@@271)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_1| :pattern ( (Tclass._System.___hFunc2LOO_1 arg0@@271)) )))
(assert (forall ((|#$T0@@143| T@U) (|#$T1@@111| T@U) (|#$R@@169| T@U) ) (!  (=> (and (and (= (type |#$T0@@143|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$R@@169|) TyType)) (= (Tclass._System.___hFunc2LOO_1 (Tclass._System.___hFunc2LOO |#$T0@@143| |#$T1@@111| |#$R@@169|)) |#$T1@@111|)) :qid |unknown.0:0| :skolemid |1045| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@143| |#$T1@@111| |#$R@@169|)) )))
(assert (forall ((arg0@@272 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_2 arg0@@272)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_2| :pattern ( (Tclass._System.___hFunc2LOO_2 arg0@@272)) )))
(assert (forall ((|#$T0@@144| T@U) (|#$T1@@112| T@U) (|#$R@@170| T@U) ) (!  (=> (and (and (= (type |#$T0@@144|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$R@@170|) TyType)) (= (Tclass._System.___hFunc2LOO_2 (Tclass._System.___hFunc2LOO |#$T0@@144| |#$T1@@112| |#$R@@170|)) |#$R@@170|)) :qid |unknown.0:0| :skolemid |1046| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@144| |#$T1@@112| |#$R@@170|)) )))
(assert (forall ((|#$T0@@145| T@U) (|#$T1@@113| T@U) (|#$R@@171| T@U) (bx@@80 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@145|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$R@@171|) TyType)) (= (type bx@@80) BoxType)) ($IsBox bx@@80 (Tclass._System.___hFunc2LOO |#$T0@@145| |#$T1@@113| |#$R@@171|))) (and (= ($Box ($Unbox HandleTypeType bx@@80)) bx@@80) ($Is ($Unbox HandleTypeType bx@@80) (Tclass._System.___hFunc2LOO |#$T0@@145| |#$T1@@113| |#$R@@171|)))) :qid |unknown.0:0| :skolemid |1047| :pattern ( ($IsBox bx@@80 (Tclass._System.___hFunc2LOO |#$T0@@145| |#$T1@@113| |#$R@@171|))) )))
(assert (forall ((arg0@@273 T@U) (arg1@@120 T@U) (arg2@@69 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO arg0@@273 arg1@@120 arg2@@69)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO| :pattern ( (Tclass._System.___hPartialFunc2LOO arg0@@273 arg1@@120 arg2@@69)) )))
(assert (forall ((|#$T0@@146| T@U) (|#$T1@@114| T@U) (|#$R@@172| T@U) ) (!  (=> (and (and (= (type |#$T0@@146|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$R@@172|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LOO |#$T0@@146| |#$T1@@114| |#$R@@172|)) Tagclass._System.___hPartialFunc2LOO) (= (TagFamily (Tclass._System.___hPartialFunc2LOO |#$T0@@146| |#$T1@@114| |#$R@@172|)) |tytagFamily$_#PartialFunc2LOO|))) :qid |unknown.0:0| :skolemid |1048| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@146| |#$T1@@114| |#$R@@172|)) )))
(assert (forall ((arg0@@274 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_0 arg0@@274)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_0| :pattern ( (Tclass._System.___hPartialFunc2LOO_0 arg0@@274)) )))
(assert (forall ((|#$T0@@147| T@U) (|#$T1@@115| T@U) (|#$R@@173| T@U) ) (!  (=> (and (and (= (type |#$T0@@147|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$R@@173|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_0 (Tclass._System.___hPartialFunc2LOO |#$T0@@147| |#$T1@@115| |#$R@@173|)) |#$T0@@147|)) :qid |unknown.0:0| :skolemid |1049| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@147| |#$T1@@115| |#$R@@173|)) )))
(assert (forall ((arg0@@275 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_1 arg0@@275)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_1| :pattern ( (Tclass._System.___hPartialFunc2LOO_1 arg0@@275)) )))
(assert (forall ((|#$T0@@148| T@U) (|#$T1@@116| T@U) (|#$R@@174| T@U) ) (!  (=> (and (and (= (type |#$T0@@148|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$R@@174|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_1 (Tclass._System.___hPartialFunc2LOO |#$T0@@148| |#$T1@@116| |#$R@@174|)) |#$T1@@116|)) :qid |unknown.0:0| :skolemid |1050| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@148| |#$T1@@116| |#$R@@174|)) )))
(assert (forall ((arg0@@276 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_2 arg0@@276)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_2| :pattern ( (Tclass._System.___hPartialFunc2LOO_2 arg0@@276)) )))
(assert (forall ((|#$T0@@149| T@U) (|#$T1@@117| T@U) (|#$R@@175| T@U) ) (!  (=> (and (and (= (type |#$T0@@149|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$R@@175|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_2 (Tclass._System.___hPartialFunc2LOO |#$T0@@149| |#$T1@@117| |#$R@@175|)) |#$R@@175|)) :qid |unknown.0:0| :skolemid |1051| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@149| |#$T1@@117| |#$R@@175|)) )))
(assert (forall ((|#$T0@@150| T@U) (|#$T1@@118| T@U) (|#$R@@176| T@U) (bx@@81 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@150|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$R@@176|) TyType)) (= (type bx@@81) BoxType)) ($IsBox bx@@81 (Tclass._System.___hPartialFunc2LOO |#$T0@@150| |#$T1@@118| |#$R@@176|))) (and (= ($Box ($Unbox HandleTypeType bx@@81)) bx@@81) ($Is ($Unbox HandleTypeType bx@@81) (Tclass._System.___hPartialFunc2LOO |#$T0@@150| |#$T1@@118| |#$R@@176|)))) :qid |unknown.0:0| :skolemid |1052| :pattern ( ($IsBox bx@@81 (Tclass._System.___hPartialFunc2LOO |#$T0@@150| |#$T1@@118| |#$R@@176|))) )))
(assert (forall ((|#$T0@@151| T@U) (|#$T1@@119| T@U) (|#$R@@177| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@151|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$R@@177|) TyType)) (= (type |f#0@@35|) HandleTypeType)) (= ($Is |f#0@@35| (Tclass._System.___hPartialFunc2LOO |#$T0@@151| |#$T1@@119| |#$R@@177|))  (and ($Is |f#0@@35| (Tclass._System.___hFunc2LOO |#$T0@@151| |#$T1@@119| |#$R@@177|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) ) (!  (=> (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (and ($IsBox |x0#0@@13| |#$T0@@151|) ($IsBox |x1#0@@9| |#$T1@@119|))) (|Set#Equal| (Reads2 |#$T0@@151| |#$T1@@119| |#$R@@177| $OneHeap |f#0@@35| |x0#0@@13| |x1#0@@9|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1053| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@9|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) ))))) :qid |unknown.0:0| :skolemid |1054| :pattern ( ($Is |f#0@@35| (Tclass._System.___hPartialFunc2LOO |#$T0@@151| |#$T1@@119| |#$R@@177|))) )))
(assert (forall ((|#$T0@@152| T@U) (|#$T1@@120| T@U) (|#$R@@178| T@U) (|f#0@@36| T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@152|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$R@@178|) TyType)) (= (type |f#0@@36|) HandleTypeType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc2LOO |#$T0@@152| |#$T1@@120| |#$R@@178|) $h@@26) ($IsAlloc |f#0@@36| (Tclass._System.___hFunc2LOO |#$T0@@152| |#$T1@@120| |#$R@@178|) $h@@26))) :qid |unknown.0:0| :skolemid |1055| :pattern ( ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc2LOO |#$T0@@152| |#$T1@@120| |#$R@@178|) $h@@26)) )))
(assert (forall ((arg0@@277 T@U) (arg1@@121 T@U) (arg2@@70 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO arg0@@277 arg1@@121 arg2@@70)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO| :pattern ( (Tclass._System.___hTotalFunc2LOO arg0@@277 arg1@@121 arg2@@70)) )))
(assert (forall ((|#$T0@@153| T@U) (|#$T1@@121| T@U) (|#$R@@179| T@U) ) (!  (=> (and (and (= (type |#$T0@@153|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$R@@179|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LOO |#$T0@@153| |#$T1@@121| |#$R@@179|)) Tagclass._System.___hTotalFunc2LOO) (= (TagFamily (Tclass._System.___hTotalFunc2LOO |#$T0@@153| |#$T1@@121| |#$R@@179|)) |tytagFamily$_#TotalFunc2LOO|))) :qid |unknown.0:0| :skolemid |1056| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@153| |#$T1@@121| |#$R@@179|)) )))
(assert (forall ((arg0@@278 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_0 arg0@@278)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_0| :pattern ( (Tclass._System.___hTotalFunc2LOO_0 arg0@@278)) )))
(assert (forall ((|#$T0@@154| T@U) (|#$T1@@122| T@U) (|#$R@@180| T@U) ) (!  (=> (and (and (= (type |#$T0@@154|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$R@@180|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_0 (Tclass._System.___hTotalFunc2LOO |#$T0@@154| |#$T1@@122| |#$R@@180|)) |#$T0@@154|)) :qid |unknown.0:0| :skolemid |1057| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@154| |#$T1@@122| |#$R@@180|)) )))
(assert (forall ((arg0@@279 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_1 arg0@@279)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_1| :pattern ( (Tclass._System.___hTotalFunc2LOO_1 arg0@@279)) )))
(assert (forall ((|#$T0@@155| T@U) (|#$T1@@123| T@U) (|#$R@@181| T@U) ) (!  (=> (and (and (= (type |#$T0@@155|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$R@@181|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_1 (Tclass._System.___hTotalFunc2LOO |#$T0@@155| |#$T1@@123| |#$R@@181|)) |#$T1@@123|)) :qid |unknown.0:0| :skolemid |1058| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@155| |#$T1@@123| |#$R@@181|)) )))
(assert (forall ((arg0@@280 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_2 arg0@@280)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_2| :pattern ( (Tclass._System.___hTotalFunc2LOO_2 arg0@@280)) )))
(assert (forall ((|#$T0@@156| T@U) (|#$T1@@124| T@U) (|#$R@@182| T@U) ) (!  (=> (and (and (= (type |#$T0@@156|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$R@@182|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_2 (Tclass._System.___hTotalFunc2LOO |#$T0@@156| |#$T1@@124| |#$R@@182|)) |#$R@@182|)) :qid |unknown.0:0| :skolemid |1059| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@156| |#$T1@@124| |#$R@@182|)) )))
(assert (forall ((|#$T0@@157| T@U) (|#$T1@@125| T@U) (|#$R@@183| T@U) (bx@@82 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@157|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$R@@183|) TyType)) (= (type bx@@82) BoxType)) ($IsBox bx@@82 (Tclass._System.___hTotalFunc2LOO |#$T0@@157| |#$T1@@125| |#$R@@183|))) (and (= ($Box ($Unbox HandleTypeType bx@@82)) bx@@82) ($Is ($Unbox HandleTypeType bx@@82) (Tclass._System.___hTotalFunc2LOO |#$T0@@157| |#$T1@@125| |#$R@@183|)))) :qid |unknown.0:0| :skolemid |1060| :pattern ( ($IsBox bx@@82 (Tclass._System.___hTotalFunc2LOO |#$T0@@157| |#$T1@@125| |#$R@@183|))) )))
(assert (forall ((|#$T0@@158| T@U) (|#$T1@@126| T@U) (|#$R@@184| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@158|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$R@@184|) TyType)) (= (type |f#0@@37|) HandleTypeType)) (= ($Is |f#0@@37| (Tclass._System.___hTotalFunc2LOO |#$T0@@158| |#$T1@@126| |#$R@@184|))  (and ($Is |f#0@@37| (Tclass._System.___hPartialFunc2LOO |#$T0@@158| |#$T1@@126| |#$R@@184|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) ) (!  (=> (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (and ($IsBox |x0#0@@14| |#$T0@@158|) ($IsBox |x1#0@@10| |#$T1@@126|))) (Requires2 |#$T0@@158| |#$T1@@126| |#$R@@184| $OneHeap |f#0@@37| |x0#0@@14| |x1#0@@10|)) :qid |unknown.0:0| :skolemid |1061| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@10|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) ))))) :qid |unknown.0:0| :skolemid |1062| :pattern ( ($Is |f#0@@37| (Tclass._System.___hTotalFunc2LOO |#$T0@@158| |#$T1@@126| |#$R@@184|))) )))
(assert (forall ((|#$T0@@159| T@U) (|#$T1@@127| T@U) (|#$R@@185| T@U) (|f#0@@38| T@U) ($h@@27 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@159|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$R@@185|) TyType)) (= (type |f#0@@38|) HandleTypeType)) (= (type $h@@27) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc2LOO |#$T0@@159| |#$T1@@127| |#$R@@185|) $h@@27) ($IsAlloc |f#0@@38| (Tclass._System.___hPartialFunc2LOO |#$T0@@159| |#$T1@@127| |#$R@@185|) $h@@27))) :qid |unknown.0:0| :skolemid |1063| :pattern ( ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc2LOO |#$T0@@159| |#$T1@@127| |#$R@@185|) $h@@27)) )))
(assert  (and (forall ((arg0@@281 T@U) ) (! (= (type (DatatypeCtorId arg0@@281)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@281)) )) (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType)))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#0._#Make0|))) :qid |unknown.0:0| :skolemid |1064| :pattern ( (_System.Tuple0.___hMake0_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@1)) (= d@@1 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |1065| :pattern ( (_System.Tuple0.___hMake0_q d@@1)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@83)) bx@@83) ($Is ($Unbox DatatypeTypeType bx@@83) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |1066| :pattern ( ($IsBox bx@@83 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@28 T@U) ) (!  (=> (and (= (type $h@@28) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@28)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@28)) :qid |DafnyPreludebpl.545:12| :skolemid |1067| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@28)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@2 T@U) ) (!  (=> (and (= (type d@@2) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@2)) (_System.Tuple0.___hMake0_q d@@2)) :qid |unknown.0:0| :skolemid |1068| :pattern ( (|$IsA#_System.Tuple0| d@@2)) )))
(assert (forall ((d@@3 T@U) ) (!  (=> (and (= (type d@@3) DatatypeTypeType) ($Is d@@3 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@3)) :qid |unknown.0:0| :skolemid |1069| :pattern ( (_System.Tuple0.___hMake0_q d@@3) ($Is d@@3 Tclass._System.Tuple0)) )))
(assert (forall ((a@@112 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@112) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@112 b@@61) true)) :qid |unknown.0:0| :skolemid |1070| :pattern ( (|_System.Tuple0#Equal| a@@112 b@@61)) )))
(assert (forall ((a@@113 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@113) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@113 b@@62) (= a@@113 b@@62))) :qid |unknown.0:0| :skolemid |1071| :pattern ( (|_System.Tuple0#Equal| a@@113 b@@62)) )))
(assert (forall ((arg0@@282 T@U) (arg1@@122 T@U) ) (! (= (type (Tclass._System.___hFunc1OL arg0@@282 arg1@@122)) TyType) :qid |funType:Tclass._System.___hFunc1OL| :pattern ( (Tclass._System.___hFunc1OL arg0@@282 arg1@@122)) )))
(assert (forall ((|#$T0@@160| T@U) (|#$R@@186| T@U) ) (!  (=> (and (= (type |#$T0@@160|) TyType) (= (type |#$R@@186|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OL |#$T0@@160| |#$R@@186|)) Tagclass._System.___hFunc1OL) (= (TagFamily (Tclass._System.___hFunc1OL |#$T0@@160| |#$R@@186|)) |tytagFamily$_#Func1OL|))) :qid |unknown.0:0| :skolemid |1072| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@160| |#$R@@186|)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_0 arg0@@283)) TyType) :qid |funType:Tclass._System.___hFunc1OL_0| :pattern ( (Tclass._System.___hFunc1OL_0 arg0@@283)) )))
(assert (forall ((|#$T0@@161| T@U) (|#$R@@187| T@U) ) (!  (=> (and (= (type |#$T0@@161|) TyType) (= (type |#$R@@187|) TyType)) (= (Tclass._System.___hFunc1OL_0 (Tclass._System.___hFunc1OL |#$T0@@161| |#$R@@187|)) |#$T0@@161|)) :qid |unknown.0:0| :skolemid |1073| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@161| |#$R@@187|)) )))
(assert (forall ((arg0@@284 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_1 arg0@@284)) TyType) :qid |funType:Tclass._System.___hFunc1OL_1| :pattern ( (Tclass._System.___hFunc1OL_1 arg0@@284)) )))
(assert (forall ((|#$T0@@162| T@U) (|#$R@@188| T@U) ) (!  (=> (and (= (type |#$T0@@162|) TyType) (= (type |#$R@@188|) TyType)) (= (Tclass._System.___hFunc1OL_1 (Tclass._System.___hFunc1OL |#$T0@@162| |#$R@@188|)) |#$R@@188|)) :qid |unknown.0:0| :skolemid |1074| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@162| |#$R@@188|)) )))
(assert (forall ((|#$T0@@163| T@U) (|#$R@@189| T@U) (bx@@84 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@163|) TyType) (= (type |#$R@@189|) TyType)) (= (type bx@@84) BoxType)) ($IsBox bx@@84 (Tclass._System.___hFunc1OL |#$T0@@163| |#$R@@189|))) (and (= ($Box ($Unbox HandleTypeType bx@@84)) bx@@84) ($Is ($Unbox HandleTypeType bx@@84) (Tclass._System.___hFunc1OL |#$T0@@163| |#$R@@189|)))) :qid |unknown.0:0| :skolemid |1075| :pattern ( ($IsBox bx@@84 (Tclass._System.___hFunc1OL |#$T0@@163| |#$R@@189|))) )))
(assert (forall ((arg0@@285 T@U) (arg1@@123 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL arg0@@285 arg1@@123)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL| :pattern ( (Tclass._System.___hPartialFunc1OL arg0@@285 arg1@@123)) )))
(assert (forall ((|#$T0@@164| T@U) (|#$R@@190| T@U) ) (!  (=> (and (= (type |#$T0@@164|) TyType) (= (type |#$R@@190|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OL |#$T0@@164| |#$R@@190|)) Tagclass._System.___hPartialFunc1OL) (= (TagFamily (Tclass._System.___hPartialFunc1OL |#$T0@@164| |#$R@@190|)) |tytagFamily$_#PartialFunc1OL|))) :qid |unknown.0:0| :skolemid |1076| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@164| |#$R@@190|)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_0 arg0@@286)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_0| :pattern ( (Tclass._System.___hPartialFunc1OL_0 arg0@@286)) )))
(assert (forall ((|#$T0@@165| T@U) (|#$R@@191| T@U) ) (!  (=> (and (= (type |#$T0@@165|) TyType) (= (type |#$R@@191|) TyType)) (= (Tclass._System.___hPartialFunc1OL_0 (Tclass._System.___hPartialFunc1OL |#$T0@@165| |#$R@@191|)) |#$T0@@165|)) :qid |unknown.0:0| :skolemid |1077| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@165| |#$R@@191|)) )))
(assert (forall ((arg0@@287 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_1 arg0@@287)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_1| :pattern ( (Tclass._System.___hPartialFunc1OL_1 arg0@@287)) )))
(assert (forall ((|#$T0@@166| T@U) (|#$R@@192| T@U) ) (!  (=> (and (= (type |#$T0@@166|) TyType) (= (type |#$R@@192|) TyType)) (= (Tclass._System.___hPartialFunc1OL_1 (Tclass._System.___hPartialFunc1OL |#$T0@@166| |#$R@@192|)) |#$R@@192|)) :qid |unknown.0:0| :skolemid |1078| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@166| |#$R@@192|)) )))
(assert (forall ((|#$T0@@167| T@U) (|#$R@@193| T@U) (bx@@85 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@167|) TyType) (= (type |#$R@@193|) TyType)) (= (type bx@@85) BoxType)) ($IsBox bx@@85 (Tclass._System.___hPartialFunc1OL |#$T0@@167| |#$R@@193|))) (and (= ($Box ($Unbox HandleTypeType bx@@85)) bx@@85) ($Is ($Unbox HandleTypeType bx@@85) (Tclass._System.___hPartialFunc1OL |#$T0@@167| |#$R@@193|)))) :qid |unknown.0:0| :skolemid |1079| :pattern ( ($IsBox bx@@85 (Tclass._System.___hPartialFunc1OL |#$T0@@167| |#$R@@193|))) )))
(assert (forall ((|#$T0@@168| T@U) (|#$R@@194| T@U) (|f#0@@39| T@U) ) (!  (=> (and (and (= (type |#$T0@@168|) TyType) (= (type |#$R@@194|) TyType)) (= (type |f#0@@39|) HandleTypeType)) (= ($Is |f#0@@39| (Tclass._System.___hPartialFunc1OL |#$T0@@168| |#$R@@194|))  (and ($Is |f#0@@39| (Tclass._System.___hFunc1OL |#$T0@@168| |#$R@@194|)) (forall ((|x0#0@@15| T@U) ) (!  (=> (and (= (type |x0#0@@15|) BoxType) ($IsBox |x0#0@@15| |#$T0@@168|)) (|Set#Equal| (Reads1 |#$T0@@168| |#$R@@194| $OneHeap |f#0@@39| |x0#0@@15|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1080| :no-pattern (type |x0#0@@15|) :no-pattern (U_2_int |x0#0@@15|) :no-pattern (U_2_bool |x0#0@@15|) ))))) :qid |unknown.0:0| :skolemid |1081| :pattern ( ($Is |f#0@@39| (Tclass._System.___hPartialFunc1OL |#$T0@@168| |#$R@@194|))) )))
(assert (forall ((|#$T0@@169| T@U) (|#$R@@195| T@U) (|f#0@@40| T@U) ($h@@29 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@169|) TyType) (= (type |#$R@@195|) TyType)) (= (type |f#0@@40|) HandleTypeType)) (= (type $h@@29) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc1OL |#$T0@@169| |#$R@@195|) $h@@29) ($IsAlloc |f#0@@40| (Tclass._System.___hFunc1OL |#$T0@@169| |#$R@@195|) $h@@29))) :qid |unknown.0:0| :skolemid |1082| :pattern ( ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc1OL |#$T0@@169| |#$R@@195|) $h@@29)) )))
(assert (forall ((arg0@@288 T@U) (arg1@@124 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL arg0@@288 arg1@@124)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL| :pattern ( (Tclass._System.___hTotalFunc1OL arg0@@288 arg1@@124)) )))
(assert (forall ((|#$T0@@170| T@U) (|#$R@@196| T@U) ) (!  (=> (and (= (type |#$T0@@170|) TyType) (= (type |#$R@@196|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OL |#$T0@@170| |#$R@@196|)) Tagclass._System.___hTotalFunc1OL) (= (TagFamily (Tclass._System.___hTotalFunc1OL |#$T0@@170| |#$R@@196|)) |tytagFamily$_#TotalFunc1OL|))) :qid |unknown.0:0| :skolemid |1083| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@170| |#$R@@196|)) )))
(assert (forall ((arg0@@289 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_0 arg0@@289)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_0| :pattern ( (Tclass._System.___hTotalFunc1OL_0 arg0@@289)) )))
(assert (forall ((|#$T0@@171| T@U) (|#$R@@197| T@U) ) (!  (=> (and (= (type |#$T0@@171|) TyType) (= (type |#$R@@197|) TyType)) (= (Tclass._System.___hTotalFunc1OL_0 (Tclass._System.___hTotalFunc1OL |#$T0@@171| |#$R@@197|)) |#$T0@@171|)) :qid |unknown.0:0| :skolemid |1084| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@171| |#$R@@197|)) )))
(assert (forall ((arg0@@290 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_1 arg0@@290)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_1| :pattern ( (Tclass._System.___hTotalFunc1OL_1 arg0@@290)) )))
(assert (forall ((|#$T0@@172| T@U) (|#$R@@198| T@U) ) (!  (=> (and (= (type |#$T0@@172|) TyType) (= (type |#$R@@198|) TyType)) (= (Tclass._System.___hTotalFunc1OL_1 (Tclass._System.___hTotalFunc1OL |#$T0@@172| |#$R@@198|)) |#$R@@198|)) :qid |unknown.0:0| :skolemid |1085| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@172| |#$R@@198|)) )))
(assert (forall ((|#$T0@@173| T@U) (|#$R@@199| T@U) (bx@@86 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@173|) TyType) (= (type |#$R@@199|) TyType)) (= (type bx@@86) BoxType)) ($IsBox bx@@86 (Tclass._System.___hTotalFunc1OL |#$T0@@173| |#$R@@199|))) (and (= ($Box ($Unbox HandleTypeType bx@@86)) bx@@86) ($Is ($Unbox HandleTypeType bx@@86) (Tclass._System.___hTotalFunc1OL |#$T0@@173| |#$R@@199|)))) :qid |unknown.0:0| :skolemid |1086| :pattern ( ($IsBox bx@@86 (Tclass._System.___hTotalFunc1OL |#$T0@@173| |#$R@@199|))) )))
(assert (forall ((|#$T0@@174| T@U) (|#$R@@200| T@U) (|f#0@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@174|) TyType) (= (type |#$R@@200|) TyType)) (= (type |f#0@@41|) HandleTypeType)) (= ($Is |f#0@@41| (Tclass._System.___hTotalFunc1OL |#$T0@@174| |#$R@@200|))  (and ($Is |f#0@@41| (Tclass._System.___hPartialFunc1OL |#$T0@@174| |#$R@@200|)) (forall ((|x0#0@@16| T@U) ) (!  (=> (and (= (type |x0#0@@16|) BoxType) ($IsBox |x0#0@@16| |#$T0@@174|)) (Requires1 |#$T0@@174| |#$R@@200| $OneHeap |f#0@@41| |x0#0@@16|)) :qid |unknown.0:0| :skolemid |1087| :no-pattern (type |x0#0@@16|) :no-pattern (U_2_int |x0#0@@16|) :no-pattern (U_2_bool |x0#0@@16|) ))))) :qid |unknown.0:0| :skolemid |1088| :pattern ( ($Is |f#0@@41| (Tclass._System.___hTotalFunc1OL |#$T0@@174| |#$R@@200|))) )))
(assert (forall ((|#$T0@@175| T@U) (|#$R@@201| T@U) (|f#0@@42| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@175|) TyType) (= (type |#$R@@201|) TyType)) (= (type |f#0@@42|) HandleTypeType)) (= (type $h@@30) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc1OL |#$T0@@175| |#$R@@201|) $h@@30) ($IsAlloc |f#0@@42| (Tclass._System.___hPartialFunc1OL |#$T0@@175| |#$R@@201|) $h@@30))) :qid |unknown.0:0| :skolemid |1089| :pattern ( ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc1OL |#$T0@@175| |#$R@@201|) $h@@30)) )))
(assert (forall ((arg0@@291 T@U) (arg1@@125 T@U) ) (! (= (type (Tclass._System.___hFunc1LO arg0@@291 arg1@@125)) TyType) :qid |funType:Tclass._System.___hFunc1LO| :pattern ( (Tclass._System.___hFunc1LO arg0@@291 arg1@@125)) )))
(assert (forall ((|#$T0@@176| T@U) (|#$R@@202| T@U) ) (!  (=> (and (= (type |#$T0@@176|) TyType) (= (type |#$R@@202|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LO |#$T0@@176| |#$R@@202|)) Tagclass._System.___hFunc1LO) (= (TagFamily (Tclass._System.___hFunc1LO |#$T0@@176| |#$R@@202|)) |tytagFamily$_#Func1LO|))) :qid |unknown.0:0| :skolemid |1090| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@176| |#$R@@202|)) )))
(assert (forall ((arg0@@292 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_0 arg0@@292)) TyType) :qid |funType:Tclass._System.___hFunc1LO_0| :pattern ( (Tclass._System.___hFunc1LO_0 arg0@@292)) )))
(assert (forall ((|#$T0@@177| T@U) (|#$R@@203| T@U) ) (!  (=> (and (= (type |#$T0@@177|) TyType) (= (type |#$R@@203|) TyType)) (= (Tclass._System.___hFunc1LO_0 (Tclass._System.___hFunc1LO |#$T0@@177| |#$R@@203|)) |#$T0@@177|)) :qid |unknown.0:0| :skolemid |1091| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@177| |#$R@@203|)) )))
(assert (forall ((arg0@@293 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_1 arg0@@293)) TyType) :qid |funType:Tclass._System.___hFunc1LO_1| :pattern ( (Tclass._System.___hFunc1LO_1 arg0@@293)) )))
(assert (forall ((|#$T0@@178| T@U) (|#$R@@204| T@U) ) (!  (=> (and (= (type |#$T0@@178|) TyType) (= (type |#$R@@204|) TyType)) (= (Tclass._System.___hFunc1LO_1 (Tclass._System.___hFunc1LO |#$T0@@178| |#$R@@204|)) |#$R@@204|)) :qid |unknown.0:0| :skolemid |1092| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@178| |#$R@@204|)) )))
(assert (forall ((|#$T0@@179| T@U) (|#$R@@205| T@U) (bx@@87 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@179|) TyType) (= (type |#$R@@205|) TyType)) (= (type bx@@87) BoxType)) ($IsBox bx@@87 (Tclass._System.___hFunc1LO |#$T0@@179| |#$R@@205|))) (and (= ($Box ($Unbox HandleTypeType bx@@87)) bx@@87) ($Is ($Unbox HandleTypeType bx@@87) (Tclass._System.___hFunc1LO |#$T0@@179| |#$R@@205|)))) :qid |unknown.0:0| :skolemid |1093| :pattern ( ($IsBox bx@@87 (Tclass._System.___hFunc1LO |#$T0@@179| |#$R@@205|))) )))
(assert (forall ((arg0@@294 T@U) (arg1@@126 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO arg0@@294 arg1@@126)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO| :pattern ( (Tclass._System.___hPartialFunc1LO arg0@@294 arg1@@126)) )))
(assert (forall ((|#$T0@@180| T@U) (|#$R@@206| T@U) ) (!  (=> (and (= (type |#$T0@@180|) TyType) (= (type |#$R@@206|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LO |#$T0@@180| |#$R@@206|)) Tagclass._System.___hPartialFunc1LO) (= (TagFamily (Tclass._System.___hPartialFunc1LO |#$T0@@180| |#$R@@206|)) |tytagFamily$_#PartialFunc1LO|))) :qid |unknown.0:0| :skolemid |1094| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@180| |#$R@@206|)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_0 arg0@@295)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_0| :pattern ( (Tclass._System.___hPartialFunc1LO_0 arg0@@295)) )))
(assert (forall ((|#$T0@@181| T@U) (|#$R@@207| T@U) ) (!  (=> (and (= (type |#$T0@@181|) TyType) (= (type |#$R@@207|) TyType)) (= (Tclass._System.___hPartialFunc1LO_0 (Tclass._System.___hPartialFunc1LO |#$T0@@181| |#$R@@207|)) |#$T0@@181|)) :qid |unknown.0:0| :skolemid |1095| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@181| |#$R@@207|)) )))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_1 arg0@@296)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_1| :pattern ( (Tclass._System.___hPartialFunc1LO_1 arg0@@296)) )))
(assert (forall ((|#$T0@@182| T@U) (|#$R@@208| T@U) ) (!  (=> (and (= (type |#$T0@@182|) TyType) (= (type |#$R@@208|) TyType)) (= (Tclass._System.___hPartialFunc1LO_1 (Tclass._System.___hPartialFunc1LO |#$T0@@182| |#$R@@208|)) |#$R@@208|)) :qid |unknown.0:0| :skolemid |1096| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@182| |#$R@@208|)) )))
(assert (forall ((|#$T0@@183| T@U) (|#$R@@209| T@U) (bx@@88 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@183|) TyType) (= (type |#$R@@209|) TyType)) (= (type bx@@88) BoxType)) ($IsBox bx@@88 (Tclass._System.___hPartialFunc1LO |#$T0@@183| |#$R@@209|))) (and (= ($Box ($Unbox HandleTypeType bx@@88)) bx@@88) ($Is ($Unbox HandleTypeType bx@@88) (Tclass._System.___hPartialFunc1LO |#$T0@@183| |#$R@@209|)))) :qid |unknown.0:0| :skolemid |1097| :pattern ( ($IsBox bx@@88 (Tclass._System.___hPartialFunc1LO |#$T0@@183| |#$R@@209|))) )))
(assert (forall ((|#$T0@@184| T@U) (|#$R@@210| T@U) (|f#0@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@184|) TyType) (= (type |#$R@@210|) TyType)) (= (type |f#0@@43|) HandleTypeType)) (= ($Is |f#0@@43| (Tclass._System.___hPartialFunc1LO |#$T0@@184| |#$R@@210|))  (and ($Is |f#0@@43| (Tclass._System.___hFunc1LO |#$T0@@184| |#$R@@210|)) (forall ((|x0#0@@17| T@U) ) (!  (=> (and (= (type |x0#0@@17|) BoxType) ($IsBox |x0#0@@17| |#$T0@@184|)) (|Set#Equal| (Reads1 |#$T0@@184| |#$R@@210| $OneHeap |f#0@@43| |x0#0@@17|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1098| :no-pattern (type |x0#0@@17|) :no-pattern (U_2_int |x0#0@@17|) :no-pattern (U_2_bool |x0#0@@17|) ))))) :qid |unknown.0:0| :skolemid |1099| :pattern ( ($Is |f#0@@43| (Tclass._System.___hPartialFunc1LO |#$T0@@184| |#$R@@210|))) )))
(assert (forall ((|#$T0@@185| T@U) (|#$R@@211| T@U) (|f#0@@44| T@U) ($h@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@185|) TyType) (= (type |#$R@@211|) TyType)) (= (type |f#0@@44|) HandleTypeType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc1LO |#$T0@@185| |#$R@@211|) $h@@31) ($IsAlloc |f#0@@44| (Tclass._System.___hFunc1LO |#$T0@@185| |#$R@@211|) $h@@31))) :qid |unknown.0:0| :skolemid |1100| :pattern ( ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc1LO |#$T0@@185| |#$R@@211|) $h@@31)) )))
(assert (forall ((arg0@@297 T@U) (arg1@@127 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO arg0@@297 arg1@@127)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO| :pattern ( (Tclass._System.___hTotalFunc1LO arg0@@297 arg1@@127)) )))
(assert (forall ((|#$T0@@186| T@U) (|#$R@@212| T@U) ) (!  (=> (and (= (type |#$T0@@186|) TyType) (= (type |#$R@@212|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LO |#$T0@@186| |#$R@@212|)) Tagclass._System.___hTotalFunc1LO) (= (TagFamily (Tclass._System.___hTotalFunc1LO |#$T0@@186| |#$R@@212|)) |tytagFamily$_#TotalFunc1LO|))) :qid |unknown.0:0| :skolemid |1101| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@186| |#$R@@212|)) )))
(assert (forall ((arg0@@298 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_0 arg0@@298)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_0| :pattern ( (Tclass._System.___hTotalFunc1LO_0 arg0@@298)) )))
(assert (forall ((|#$T0@@187| T@U) (|#$R@@213| T@U) ) (!  (=> (and (= (type |#$T0@@187|) TyType) (= (type |#$R@@213|) TyType)) (= (Tclass._System.___hTotalFunc1LO_0 (Tclass._System.___hTotalFunc1LO |#$T0@@187| |#$R@@213|)) |#$T0@@187|)) :qid |unknown.0:0| :skolemid |1102| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@187| |#$R@@213|)) )))
(assert (forall ((arg0@@299 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_1 arg0@@299)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_1| :pattern ( (Tclass._System.___hTotalFunc1LO_1 arg0@@299)) )))
(assert (forall ((|#$T0@@188| T@U) (|#$R@@214| T@U) ) (!  (=> (and (= (type |#$T0@@188|) TyType) (= (type |#$R@@214|) TyType)) (= (Tclass._System.___hTotalFunc1LO_1 (Tclass._System.___hTotalFunc1LO |#$T0@@188| |#$R@@214|)) |#$R@@214|)) :qid |unknown.0:0| :skolemid |1103| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@188| |#$R@@214|)) )))
(assert (forall ((|#$T0@@189| T@U) (|#$R@@215| T@U) (bx@@89 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@189|) TyType) (= (type |#$R@@215|) TyType)) (= (type bx@@89) BoxType)) ($IsBox bx@@89 (Tclass._System.___hTotalFunc1LO |#$T0@@189| |#$R@@215|))) (and (= ($Box ($Unbox HandleTypeType bx@@89)) bx@@89) ($Is ($Unbox HandleTypeType bx@@89) (Tclass._System.___hTotalFunc1LO |#$T0@@189| |#$R@@215|)))) :qid |unknown.0:0| :skolemid |1104| :pattern ( ($IsBox bx@@89 (Tclass._System.___hTotalFunc1LO |#$T0@@189| |#$R@@215|))) )))
(assert (forall ((|#$T0@@190| T@U) (|#$R@@216| T@U) (|f#0@@45| T@U) ) (!  (=> (and (and (= (type |#$T0@@190|) TyType) (= (type |#$R@@216|) TyType)) (= (type |f#0@@45|) HandleTypeType)) (= ($Is |f#0@@45| (Tclass._System.___hTotalFunc1LO |#$T0@@190| |#$R@@216|))  (and ($Is |f#0@@45| (Tclass._System.___hPartialFunc1LO |#$T0@@190| |#$R@@216|)) (forall ((|x0#0@@18| T@U) ) (!  (=> (and (= (type |x0#0@@18|) BoxType) ($IsBox |x0#0@@18| |#$T0@@190|)) (Requires1 |#$T0@@190| |#$R@@216| $OneHeap |f#0@@45| |x0#0@@18|)) :qid |unknown.0:0| :skolemid |1105| :no-pattern (type |x0#0@@18|) :no-pattern (U_2_int |x0#0@@18|) :no-pattern (U_2_bool |x0#0@@18|) ))))) :qid |unknown.0:0| :skolemid |1106| :pattern ( ($Is |f#0@@45| (Tclass._System.___hTotalFunc1LO |#$T0@@190| |#$R@@216|))) )))
(assert (forall ((|#$T0@@191| T@U) (|#$R@@217| T@U) (|f#0@@46| T@U) ($h@@32 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@191|) TyType) (= (type |#$R@@217|) TyType)) (= (type |f#0@@46|) HandleTypeType)) (= (type $h@@32) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc1LO |#$T0@@191| |#$R@@217|) $h@@32) ($IsAlloc |f#0@@46| (Tclass._System.___hPartialFunc1LO |#$T0@@191| |#$R@@217|) $h@@32))) :qid |unknown.0:0| :skolemid |1107| :pattern ( ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc1LO |#$T0@@191| |#$R@@217|) $h@@32)) )))
(assert (forall ((arg0@@300 T@U) (arg1@@128 T@U) ) (! (= (type (|#_System._tuple#2OLL._#Make2| arg0@@300 arg1@@128)) DatatypeTypeType) :qid |funType:#_System._tuple#2OLL._#Make2| :pattern ( (|#_System._tuple#2OLL._#Make2| arg0@@300 arg1@@128)) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2OLL._#Make2| |a#5#0#0| |a#5#1#0|)) |##_System._tuple#2OLL._#Make2|)) :qid |unknown.0:0| :skolemid |1108| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (= (type d@@4) DatatypeTypeType) (= (_System.Tuple2OLL.___hMake2_q d@@4) (= (DatatypeCtorId d@@4) |##_System._tuple#2OLL._#Make2|))) :qid |unknown.0:0| :skolemid |1109| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@4)) )))
(assert (forall ((d@@5 T@U) ) (!  (=> (and (= (type d@@5) DatatypeTypeType) (_System.Tuple2OLL.___hMake2_q d@@5)) (exists ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (and (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (= d@@5 (|#_System._tuple#2OLL._#Make2| |a#6#0#0| |a#6#1#0|))) :qid |unknown.0:0| :skolemid |1110| :no-pattern (type |a#6#0#0|) :no-pattern (type |a#6#1#0|) :no-pattern (U_2_int |a#6#0#0|) :no-pattern (U_2_bool |a#6#0#0|) :no-pattern (U_2_int |a#6#1#0|) :no-pattern (U_2_bool |a#6#1#0|) ))) :qid |unknown.0:0| :skolemid |1111| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@5)) )))
(assert (forall ((arg0@@301 T@U) (arg1@@129 T@U) ) (! (= (type (Tclass._System.Tuple2OLL arg0@@301 arg1@@129)) TyType) :qid |funType:Tclass._System.Tuple2OLL| :pattern ( (Tclass._System.Tuple2OLL arg0@@301 arg1@@129)) )))
(assert (forall ((|_System._tuple#2OLL$T0| T@U) (|_System._tuple#2OLL$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0|) TyType) (= (type |_System._tuple#2OLL$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) Tagclass._System.Tuple2OLL) (= (TagFamily (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) |tytagFamily$_tuple#2OLL|))) :qid |unknown.0:0| :skolemid |1112| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) )))
(assert (forall ((arg0@@302 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_0 arg0@@302)) TyType) :qid |funType:Tclass._System.Tuple2OLL_0| :pattern ( (Tclass._System.Tuple2OLL_0 arg0@@302)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@0| T@U) (|_System._tuple#2OLL$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@0|) TyType) (= (type |_System._tuple#2OLL$T1@@0|) TyType)) (= (Tclass._System.Tuple2OLL_0 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) |_System._tuple#2OLL$T0@@0|)) :qid |unknown.0:0| :skolemid |1113| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) )))
(assert (forall ((arg0@@303 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_1 arg0@@303)) TyType) :qid |funType:Tclass._System.Tuple2OLL_1| :pattern ( (Tclass._System.Tuple2OLL_1 arg0@@303)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@1| T@U) (|_System._tuple#2OLL$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@1|) TyType) (= (type |_System._tuple#2OLL$T1@@1|) TyType)) (= (Tclass._System.Tuple2OLL_1 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) |_System._tuple#2OLL$T1@@1|)) :qid |unknown.0:0| :skolemid |1114| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@2| T@U) (|_System._tuple#2OLL$T1@@2| T@U) (bx@@90 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@2|) TyType) (= (type |_System._tuple#2OLL$T1@@2|) TyType)) (= (type bx@@90) BoxType)) ($IsBox bx@@90 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@90)) bx@@90) ($Is ($Unbox DatatypeTypeType bx@@90) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|)))) :qid |unknown.0:0| :skolemid |1115| :pattern ( ($IsBox bx@@90 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@3| T@U) (|_System._tuple#2OLL$T1@@3| T@U) (|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@3|) TyType) (= (type |_System._tuple#2OLL$T1@@3|) TyType)) (= (type |a#7#0#0|) BoxType)) (= (type |a#7#1#0|) BoxType)) (= ($Is (|#_System._tuple#2OLL._#Make2| |a#7#0#0| |a#7#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))  (and ($IsBox |a#7#0#0| |_System._tuple#2OLL$T0@@3|) ($IsBox |a#7#1#0| |_System._tuple#2OLL$T1@@3|)))) :qid |unknown.0:0| :skolemid |1116| :pattern ( ($Is (|#_System._tuple#2OLL._#Make2| |a#7#0#0| |a#7#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@4| T@U) (|_System._tuple#2OLL$T1@@4| T@U) (|a#8#0#0| T@U) (|a#8#1#0| T@U) ($h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2OLL$T0@@4|) TyType) (= (type |_System._tuple#2OLL$T1@@4|) TyType)) (= (type |a#8#0#0|) BoxType)) (= (type |a#8#1#0|) BoxType)) (= (type $h@@33) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@33)) (= ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#8#0#0| |a#8#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@33)  (and ($IsAllocBox |a#8#0#0| |_System._tuple#2OLL$T0@@4| $h@@33) ($IsAllocBox |a#8#1#0| |_System._tuple#2OLL$T1@@4| $h@@33)))) :qid |unknown.0:0| :skolemid |1117| :pattern ( ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#8#0#0| |a#8#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@33)) )))
(assert (forall ((arg0@@304 T@U) ) (! (= (type (_System.Tuple2OLL._0 arg0@@304)) BoxType) :qid |funType:_System.Tuple2OLL._0| :pattern ( (_System.Tuple2OLL._0 arg0@@304)) )))
(assert (forall ((d@@6 T@U) (|_System._tuple#2OLL$T0@@5| T@U) ($h@@34 T@U) ) (!  (=> (and (and (and (= (type d@@6) DatatypeTypeType) (= (type |_System._tuple#2OLL$T0@@5|) TyType)) (= (type $h@@34) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@34) (and (_System.Tuple2OLL.___hMake2_q d@@6) (exists ((|_System._tuple#2OLL$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T1@@5|) TyType) ($IsAlloc d@@6 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@34)) :qid |unknown.0:0| :skolemid |1118| :pattern ( ($IsAlloc d@@6 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@34)) ))))) ($IsAllocBox (_System.Tuple2OLL._0 d@@6) |_System._tuple#2OLL$T0@@5| $h@@34)) :qid |unknown.0:0| :skolemid |1119| :pattern ( ($IsAllocBox (_System.Tuple2OLL._0 d@@6) |_System._tuple#2OLL$T0@@5| $h@@34)) )))
(assert (forall ((arg0@@305 T@U) ) (! (= (type (_System.Tuple2OLL._1 arg0@@305)) BoxType) :qid |funType:_System.Tuple2OLL._1| :pattern ( (_System.Tuple2OLL._1 arg0@@305)) )))
(assert (forall ((d@@7 T@U) (|_System._tuple#2OLL$T1@@6| T@U) ($h@@35 T@U) ) (!  (=> (and (and (and (= (type d@@7) DatatypeTypeType) (= (type |_System._tuple#2OLL$T1@@6|) TyType)) (= (type $h@@35) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@35) (and (_System.Tuple2OLL.___hMake2_q d@@7) (exists ((|_System._tuple#2OLL$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T0@@6|) TyType) ($IsAlloc d@@7 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@35)) :qid |unknown.0:0| :skolemid |1120| :pattern ( ($IsAlloc d@@7 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@35)) ))))) ($IsAllocBox (_System.Tuple2OLL._1 d@@7) |_System._tuple#2OLL$T1@@6| $h@@35)) :qid |unknown.0:0| :skolemid |1121| :pattern ( ($IsAllocBox (_System.Tuple2OLL._1 d@@7) |_System._tuple#2OLL$T1@@6| $h@@35)) )))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (!  (=> (and (= (type |a#9#0#0|) BoxType) (= (type |a#9#1#0|) BoxType)) (= (|#_System._tuple#2OLL._#Make2| (Lit |a#9#0#0|) (Lit |a#9#1#0|)) (Lit (|#_System._tuple#2OLL._#Make2| |a#9#0#0| |a#9#1#0|)))) :qid |unknown.0:0| :skolemid |1122| :pattern ( (|#_System._tuple#2OLL._#Make2| (Lit |a#9#0#0|) (Lit |a#9#1#0|))) )))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (!  (=> (and (= (type |a#10#0#0|) BoxType) (= (type |a#10#1#0|) BoxType)) (= (_System.Tuple2OLL._0 (|#_System._tuple#2OLL._#Make2| |a#10#0#0| |a#10#1#0|)) |a#10#0#0|)) :qid |unknown.0:0| :skolemid |1123| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#10#0#0| |a#10#1#0|)) )))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (!  (=> (and (= (type |a#11#0#0|) BoxType) (= (type |a#11#1#0|) BoxType)) (< (BoxRank |a#11#0#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#11#0#0| |a#11#1#0|)))) :qid |unknown.0:0| :skolemid |1124| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#11#0#0| |a#11#1#0|)) )))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (!  (=> (and (= (type |a#12#0#0|) BoxType) (= (type |a#12#1#0|) BoxType)) (= (_System.Tuple2OLL._1 (|#_System._tuple#2OLL._#Make2| |a#12#0#0| |a#12#1#0|)) |a#12#1#0|)) :qid |unknown.0:0| :skolemid |1125| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#12#0#0| |a#12#1#0|)) )))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (!  (=> (and (= (type |a#13#0#0|) BoxType) (= (type |a#13#1#0|) BoxType)) (< (BoxRank |a#13#1#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#13#0#0| |a#13#1#0|)))) :qid |unknown.0:0| :skolemid |1126| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#13#0#0| |a#13#1#0|)) )))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple2OLL| d@@8)) (_System.Tuple2OLL.___hMake2_q d@@8)) :qid |unknown.0:0| :skolemid |1127| :pattern ( (|$IsA#_System.Tuple2OLL| d@@8)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@7| T@U) (|_System._tuple#2OLL$T1@@7| T@U) (d@@9 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@7|) TyType) (= (type |_System._tuple#2OLL$T1@@7|) TyType)) (= (type d@@9) DatatypeTypeType)) ($Is d@@9 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) (_System.Tuple2OLL.___hMake2_q d@@9)) :qid |unknown.0:0| :skolemid |1128| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@9) ($Is d@@9 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) )))
(assert (forall ((a@@114 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@114) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (= (|_System.Tuple2OLL#Equal| a@@114 b@@63)  (and (= (_System.Tuple2OLL._0 a@@114) (_System.Tuple2OLL._0 b@@63)) (= (_System.Tuple2OLL._1 a@@114) (_System.Tuple2OLL._1 b@@63))))) :qid |unknown.0:0| :skolemid |1129| :pattern ( (|_System.Tuple2OLL#Equal| a@@114 b@@63)) )))
(assert (forall ((a@@115 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@115) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (= (|_System.Tuple2OLL#Equal| a@@115 b@@64) (= a@@115 b@@64))) :qid |unknown.0:0| :skolemid |1130| :pattern ( (|_System.Tuple2OLL#Equal| a@@115 b@@64)) )))
(assert (forall ((arg0@@306 T@U) (arg1@@130 T@U) (arg2@@71 T@U) (arg3@@43 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL arg0@@306 arg1@@130 arg2@@71 arg3@@43)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL| :pattern ( (Tclass._System.___hFunc3LLOL arg0@@306 arg1@@130 arg2@@71 arg3@@43)) )))
(assert (forall ((|#$T0@@192| T@U) (|#$T1@@128| T@U) (|#$T2@@71| T@U) (|#$R@@218| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@192|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$R@@218|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOL |#$T0@@192| |#$T1@@128| |#$T2@@71| |#$R@@218|)) Tagclass._System.___hFunc3LLOL) (= (TagFamily (Tclass._System.___hFunc3LLOL |#$T0@@192| |#$T1@@128| |#$T2@@71| |#$R@@218|)) |tytagFamily$_#Func3LLOL|))) :qid |unknown.0:0| :skolemid |1131| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@192| |#$T1@@128| |#$T2@@71| |#$R@@218|)) )))
(assert (forall ((arg0@@307 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_0 arg0@@307)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_0| :pattern ( (Tclass._System.___hFunc3LLOL_0 arg0@@307)) )))
(assert (forall ((|#$T0@@193| T@U) (|#$T1@@129| T@U) (|#$T2@@72| T@U) (|#$R@@219| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@193|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$R@@219|) TyType)) (= (Tclass._System.___hFunc3LLOL_0 (Tclass._System.___hFunc3LLOL |#$T0@@193| |#$T1@@129| |#$T2@@72| |#$R@@219|)) |#$T0@@193|)) :qid |unknown.0:0| :skolemid |1132| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@193| |#$T1@@129| |#$T2@@72| |#$R@@219|)) )))
(assert (forall ((arg0@@308 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_1 arg0@@308)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_1| :pattern ( (Tclass._System.___hFunc3LLOL_1 arg0@@308)) )))
(assert (forall ((|#$T0@@194| T@U) (|#$T1@@130| T@U) (|#$T2@@73| T@U) (|#$R@@220| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@194|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$R@@220|) TyType)) (= (Tclass._System.___hFunc3LLOL_1 (Tclass._System.___hFunc3LLOL |#$T0@@194| |#$T1@@130| |#$T2@@73| |#$R@@220|)) |#$T1@@130|)) :qid |unknown.0:0| :skolemid |1133| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@194| |#$T1@@130| |#$T2@@73| |#$R@@220|)) )))
(assert (forall ((arg0@@309 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_2 arg0@@309)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_2| :pattern ( (Tclass._System.___hFunc3LLOL_2 arg0@@309)) )))
(assert (forall ((|#$T0@@195| T@U) (|#$T1@@131| T@U) (|#$T2@@74| T@U) (|#$R@@221| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@195|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$R@@221|) TyType)) (= (Tclass._System.___hFunc3LLOL_2 (Tclass._System.___hFunc3LLOL |#$T0@@195| |#$T1@@131| |#$T2@@74| |#$R@@221|)) |#$T2@@74|)) :qid |unknown.0:0| :skolemid |1134| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@195| |#$T1@@131| |#$T2@@74| |#$R@@221|)) )))
(assert (forall ((arg0@@310 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_3 arg0@@310)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_3| :pattern ( (Tclass._System.___hFunc3LLOL_3 arg0@@310)) )))
(assert (forall ((|#$T0@@196| T@U) (|#$T1@@132| T@U) (|#$T2@@75| T@U) (|#$R@@222| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@196|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$R@@222|) TyType)) (= (Tclass._System.___hFunc3LLOL_3 (Tclass._System.___hFunc3LLOL |#$T0@@196| |#$T1@@132| |#$T2@@75| |#$R@@222|)) |#$R@@222|)) :qid |unknown.0:0| :skolemid |1135| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@196| |#$T1@@132| |#$T2@@75| |#$R@@222|)) )))
(assert (forall ((|#$T0@@197| T@U) (|#$T1@@133| T@U) (|#$T2@@76| T@U) (|#$R@@223| T@U) (bx@@91 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@197|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$R@@223|) TyType)) (= (type bx@@91) BoxType)) ($IsBox bx@@91 (Tclass._System.___hFunc3LLOL |#$T0@@197| |#$T1@@133| |#$T2@@76| |#$R@@223|))) (and (= ($Box ($Unbox HandleTypeType bx@@91)) bx@@91) ($Is ($Unbox HandleTypeType bx@@91) (Tclass._System.___hFunc3LLOL |#$T0@@197| |#$T1@@133| |#$T2@@76| |#$R@@223|)))) :qid |unknown.0:0| :skolemid |1136| :pattern ( ($IsBox bx@@91 (Tclass._System.___hFunc3LLOL |#$T0@@197| |#$T1@@133| |#$T2@@76| |#$R@@223|))) )))
(assert (forall ((arg0@@311 T@U) (arg1@@131 T@U) (arg2@@72 T@U) (arg3@@44 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL arg0@@311 arg1@@131 arg2@@72 arg3@@44)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL| :pattern ( (Tclass._System.___hPartialFunc3LLOL arg0@@311 arg1@@131 arg2@@72 arg3@@44)) )))
(assert (forall ((|#$T0@@198| T@U) (|#$T1@@134| T@U) (|#$T2@@77| T@U) (|#$R@@224| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@198|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$R@@224|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOL |#$T0@@198| |#$T1@@134| |#$T2@@77| |#$R@@224|)) Tagclass._System.___hPartialFunc3LLOL) (= (TagFamily (Tclass._System.___hPartialFunc3LLOL |#$T0@@198| |#$T1@@134| |#$T2@@77| |#$R@@224|)) |tytagFamily$_#PartialFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1137| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@198| |#$T1@@134| |#$T2@@77| |#$R@@224|)) )))
(assert (forall ((arg0@@312 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_0 arg0@@312)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_0| :pattern ( (Tclass._System.___hPartialFunc3LLOL_0 arg0@@312)) )))
(assert (forall ((|#$T0@@199| T@U) (|#$T1@@135| T@U) (|#$T2@@78| T@U) (|#$R@@225| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@199|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$R@@225|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_0 (Tclass._System.___hPartialFunc3LLOL |#$T0@@199| |#$T1@@135| |#$T2@@78| |#$R@@225|)) |#$T0@@199|)) :qid |unknown.0:0| :skolemid |1138| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@199| |#$T1@@135| |#$T2@@78| |#$R@@225|)) )))
(assert (forall ((arg0@@313 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_1 arg0@@313)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_1| :pattern ( (Tclass._System.___hPartialFunc3LLOL_1 arg0@@313)) )))
(assert (forall ((|#$T0@@200| T@U) (|#$T1@@136| T@U) (|#$T2@@79| T@U) (|#$R@@226| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@200|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$R@@226|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_1 (Tclass._System.___hPartialFunc3LLOL |#$T0@@200| |#$T1@@136| |#$T2@@79| |#$R@@226|)) |#$T1@@136|)) :qid |unknown.0:0| :skolemid |1139| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@200| |#$T1@@136| |#$T2@@79| |#$R@@226|)) )))
(assert (forall ((arg0@@314 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_2 arg0@@314)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_2| :pattern ( (Tclass._System.___hPartialFunc3LLOL_2 arg0@@314)) )))
(assert (forall ((|#$T0@@201| T@U) (|#$T1@@137| T@U) (|#$T2@@80| T@U) (|#$R@@227| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@201|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$R@@227|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_2 (Tclass._System.___hPartialFunc3LLOL |#$T0@@201| |#$T1@@137| |#$T2@@80| |#$R@@227|)) |#$T2@@80|)) :qid |unknown.0:0| :skolemid |1140| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@201| |#$T1@@137| |#$T2@@80| |#$R@@227|)) )))
(assert (forall ((arg0@@315 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_3 arg0@@315)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_3| :pattern ( (Tclass._System.___hPartialFunc3LLOL_3 arg0@@315)) )))
(assert (forall ((|#$T0@@202| T@U) (|#$T1@@138| T@U) (|#$T2@@81| T@U) (|#$R@@228| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@202|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$R@@228|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_3 (Tclass._System.___hPartialFunc3LLOL |#$T0@@202| |#$T1@@138| |#$T2@@81| |#$R@@228|)) |#$R@@228|)) :qid |unknown.0:0| :skolemid |1141| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@202| |#$T1@@138| |#$T2@@81| |#$R@@228|)) )))
(assert (forall ((|#$T0@@203| T@U) (|#$T1@@139| T@U) (|#$T2@@82| T@U) (|#$R@@229| T@U) (bx@@92 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@203|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$R@@229|) TyType)) (= (type bx@@92) BoxType)) ($IsBox bx@@92 (Tclass._System.___hPartialFunc3LLOL |#$T0@@203| |#$T1@@139| |#$T2@@82| |#$R@@229|))) (and (= ($Box ($Unbox HandleTypeType bx@@92)) bx@@92) ($Is ($Unbox HandleTypeType bx@@92) (Tclass._System.___hPartialFunc3LLOL |#$T0@@203| |#$T1@@139| |#$T2@@82| |#$R@@229|)))) :qid |unknown.0:0| :skolemid |1142| :pattern ( ($IsBox bx@@92 (Tclass._System.___hPartialFunc3LLOL |#$T0@@203| |#$T1@@139| |#$T2@@82| |#$R@@229|))) )))
(assert (forall ((|#$T0@@204| T@U) (|#$T1@@140| T@U) (|#$T2@@83| T@U) (|#$R@@230| T@U) (|f#0@@47| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@204|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$R@@230|) TyType)) (= (type |f#0@@47|) HandleTypeType)) (= ($Is |f#0@@47| (Tclass._System.___hPartialFunc3LLOL |#$T0@@204| |#$T1@@140| |#$T2@@83| |#$R@@230|))  (and ($Is |f#0@@47| (Tclass._System.___hFunc3LLOL |#$T0@@204| |#$T1@@140| |#$T2@@83| |#$R@@230|)) (forall ((|x0#0@@19| T@U) (|x1#0@@11| T@U) (|x2#0@@5| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@19|) BoxType) (= (type |x1#0@@11|) BoxType)) (= (type |x2#0@@5|) BoxType)) (and (and ($IsBox |x0#0@@19| |#$T0@@204|) ($IsBox |x1#0@@11| |#$T1@@140|)) ($IsBox |x2#0@@5| |#$T2@@83|))) (|Set#Equal| (Reads3 |#$T0@@204| |#$T1@@140| |#$T2@@83| |#$R@@230| $OneHeap |f#0@@47| |x0#0@@19| |x1#0@@11| |x2#0@@5|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1143| :no-pattern (type |x0#0@@19|) :no-pattern (type |x1#0@@11|) :no-pattern (type |x2#0@@5|) :no-pattern (U_2_int |x0#0@@19|) :no-pattern (U_2_bool |x0#0@@19|) :no-pattern (U_2_int |x1#0@@11|) :no-pattern (U_2_bool |x1#0@@11|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) ))))) :qid |unknown.0:0| :skolemid |1144| :pattern ( ($Is |f#0@@47| (Tclass._System.___hPartialFunc3LLOL |#$T0@@204| |#$T1@@140| |#$T2@@83| |#$R@@230|))) )))
(assert (forall ((|#$T0@@205| T@U) (|#$T1@@141| T@U) (|#$T2@@84| T@U) (|#$R@@231| T@U) (|f#0@@48| T@U) ($h@@36 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@205|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$R@@231|) TyType)) (= (type |f#0@@48|) HandleTypeType)) (= (type $h@@36) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc3LLOL |#$T0@@205| |#$T1@@141| |#$T2@@84| |#$R@@231|) $h@@36) ($IsAlloc |f#0@@48| (Tclass._System.___hFunc3LLOL |#$T0@@205| |#$T1@@141| |#$T2@@84| |#$R@@231|) $h@@36))) :qid |unknown.0:0| :skolemid |1145| :pattern ( ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc3LLOL |#$T0@@205| |#$T1@@141| |#$T2@@84| |#$R@@231|) $h@@36)) )))
(assert (forall ((arg0@@316 T@U) (arg1@@132 T@U) (arg2@@73 T@U) (arg3@@45 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL arg0@@316 arg1@@132 arg2@@73 arg3@@45)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL| :pattern ( (Tclass._System.___hTotalFunc3LLOL arg0@@316 arg1@@132 arg2@@73 arg3@@45)) )))
(assert (forall ((|#$T0@@206| T@U) (|#$T1@@142| T@U) (|#$T2@@85| T@U) (|#$R@@232| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@206|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$R@@232|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOL |#$T0@@206| |#$T1@@142| |#$T2@@85| |#$R@@232|)) Tagclass._System.___hTotalFunc3LLOL) (= (TagFamily (Tclass._System.___hTotalFunc3LLOL |#$T0@@206| |#$T1@@142| |#$T2@@85| |#$R@@232|)) |tytagFamily$_#TotalFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1146| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@206| |#$T1@@142| |#$T2@@85| |#$R@@232|)) )))
(assert (forall ((arg0@@317 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_0 arg0@@317)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_0| :pattern ( (Tclass._System.___hTotalFunc3LLOL_0 arg0@@317)) )))
(assert (forall ((|#$T0@@207| T@U) (|#$T1@@143| T@U) (|#$T2@@86| T@U) (|#$R@@233| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@207|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$R@@233|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_0 (Tclass._System.___hTotalFunc3LLOL |#$T0@@207| |#$T1@@143| |#$T2@@86| |#$R@@233|)) |#$T0@@207|)) :qid |unknown.0:0| :skolemid |1147| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@207| |#$T1@@143| |#$T2@@86| |#$R@@233|)) )))
(assert (forall ((arg0@@318 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_1 arg0@@318)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_1| :pattern ( (Tclass._System.___hTotalFunc3LLOL_1 arg0@@318)) )))
(assert (forall ((|#$T0@@208| T@U) (|#$T1@@144| T@U) (|#$T2@@87| T@U) (|#$R@@234| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@208|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$R@@234|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_1 (Tclass._System.___hTotalFunc3LLOL |#$T0@@208| |#$T1@@144| |#$T2@@87| |#$R@@234|)) |#$T1@@144|)) :qid |unknown.0:0| :skolemid |1148| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@208| |#$T1@@144| |#$T2@@87| |#$R@@234|)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_2 arg0@@319)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_2| :pattern ( (Tclass._System.___hTotalFunc3LLOL_2 arg0@@319)) )))
(assert (forall ((|#$T0@@209| T@U) (|#$T1@@145| T@U) (|#$T2@@88| T@U) (|#$R@@235| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@209|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$R@@235|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_2 (Tclass._System.___hTotalFunc3LLOL |#$T0@@209| |#$T1@@145| |#$T2@@88| |#$R@@235|)) |#$T2@@88|)) :qid |unknown.0:0| :skolemid |1149| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@209| |#$T1@@145| |#$T2@@88| |#$R@@235|)) )))
(assert (forall ((arg0@@320 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_3 arg0@@320)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_3| :pattern ( (Tclass._System.___hTotalFunc3LLOL_3 arg0@@320)) )))
(assert (forall ((|#$T0@@210| T@U) (|#$T1@@146| T@U) (|#$T2@@89| T@U) (|#$R@@236| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@210|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$R@@236|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_3 (Tclass._System.___hTotalFunc3LLOL |#$T0@@210| |#$T1@@146| |#$T2@@89| |#$R@@236|)) |#$R@@236|)) :qid |unknown.0:0| :skolemid |1150| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@210| |#$T1@@146| |#$T2@@89| |#$R@@236|)) )))
(assert (forall ((|#$T0@@211| T@U) (|#$T1@@147| T@U) (|#$T2@@90| T@U) (|#$R@@237| T@U) (bx@@93 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@211|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$T2@@90|) TyType)) (= (type |#$R@@237|) TyType)) (= (type bx@@93) BoxType)) ($IsBox bx@@93 (Tclass._System.___hTotalFunc3LLOL |#$T0@@211| |#$T1@@147| |#$T2@@90| |#$R@@237|))) (and (= ($Box ($Unbox HandleTypeType bx@@93)) bx@@93) ($Is ($Unbox HandleTypeType bx@@93) (Tclass._System.___hTotalFunc3LLOL |#$T0@@211| |#$T1@@147| |#$T2@@90| |#$R@@237|)))) :qid |unknown.0:0| :skolemid |1151| :pattern ( ($IsBox bx@@93 (Tclass._System.___hTotalFunc3LLOL |#$T0@@211| |#$T1@@147| |#$T2@@90| |#$R@@237|))) )))
(assert (forall ((|#$T0@@212| T@U) (|#$T1@@148| T@U) (|#$T2@@91| T@U) (|#$R@@238| T@U) (|f#0@@49| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@212|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$T2@@91|) TyType)) (= (type |#$R@@238|) TyType)) (= (type |f#0@@49|) HandleTypeType)) (= ($Is |f#0@@49| (Tclass._System.___hTotalFunc3LLOL |#$T0@@212| |#$T1@@148| |#$T2@@91| |#$R@@238|))  (and ($Is |f#0@@49| (Tclass._System.___hPartialFunc3LLOL |#$T0@@212| |#$T1@@148| |#$T2@@91| |#$R@@238|)) (forall ((|x0#0@@20| T@U) (|x1#0@@12| T@U) (|x2#0@@6| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@20|) BoxType) (= (type |x1#0@@12|) BoxType)) (= (type |x2#0@@6|) BoxType)) (and (and ($IsBox |x0#0@@20| |#$T0@@212|) ($IsBox |x1#0@@12| |#$T1@@148|)) ($IsBox |x2#0@@6| |#$T2@@91|))) (Requires3 |#$T0@@212| |#$T1@@148| |#$T2@@91| |#$R@@238| $OneHeap |f#0@@49| |x0#0@@20| |x1#0@@12| |x2#0@@6|)) :qid |unknown.0:0| :skolemid |1152| :no-pattern (type |x0#0@@20|) :no-pattern (type |x1#0@@12|) :no-pattern (type |x2#0@@6|) :no-pattern (U_2_int |x0#0@@20|) :no-pattern (U_2_bool |x0#0@@20|) :no-pattern (U_2_int |x1#0@@12|) :no-pattern (U_2_bool |x1#0@@12|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) ))))) :qid |unknown.0:0| :skolemid |1153| :pattern ( ($Is |f#0@@49| (Tclass._System.___hTotalFunc3LLOL |#$T0@@212| |#$T1@@148| |#$T2@@91| |#$R@@238|))) )))
(assert (forall ((|#$T0@@213| T@U) (|#$T1@@149| T@U) (|#$T2@@92| T@U) (|#$R@@239| T@U) (|f#0@@50| T@U) ($h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@213|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$T2@@92|) TyType)) (= (type |#$R@@239|) TyType)) (= (type |f#0@@50|) HandleTypeType)) (= (type $h@@37) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc3LLOL |#$T0@@213| |#$T1@@149| |#$T2@@92| |#$R@@239|) $h@@37) ($IsAlloc |f#0@@50| (Tclass._System.___hPartialFunc3LLOL |#$T0@@213| |#$T1@@149| |#$T2@@92| |#$R@@239|) $h@@37))) :qid |unknown.0:0| :skolemid |1154| :pattern ( ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc3LLOL |#$T0@@213| |#$T1@@149| |#$T2@@92| |#$R@@239|) $h@@37)) )))
(assert (forall ((arg0@@321 T@U) (arg1@@133 T@U) (arg2@@74 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO arg0@@321 arg1@@133 arg2@@74)) TyType) :qid |funType:Tclass._System.___hFunc2SSO| :pattern ( (Tclass._System.___hFunc2SSO arg0@@321 arg1@@133 arg2@@74)) )))
(assert (forall ((|#$T0@@214| T@U) (|#$T1@@150| T@U) (|#$R@@240| T@U) ) (!  (=> (and (and (= (type |#$T0@@214|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$R@@240|) TyType)) (and (= (Tag (Tclass._System.___hFunc2SSO |#$T0@@214| |#$T1@@150| |#$R@@240|)) Tagclass._System.___hFunc2SSO) (= (TagFamily (Tclass._System.___hFunc2SSO |#$T0@@214| |#$T1@@150| |#$R@@240|)) |tytagFamily$_#Func2SSO|))) :qid |unknown.0:0| :skolemid |1155| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@214| |#$T1@@150| |#$R@@240|)) )))
(assert (forall ((arg0@@322 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_0 arg0@@322)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_0| :pattern ( (Tclass._System.___hFunc2SSO_0 arg0@@322)) )))
(assert (forall ((|#$T0@@215| T@U) (|#$T1@@151| T@U) (|#$R@@241| T@U) ) (!  (=> (and (and (= (type |#$T0@@215|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$R@@241|) TyType)) (= (Tclass._System.___hFunc2SSO_0 (Tclass._System.___hFunc2SSO |#$T0@@215| |#$T1@@151| |#$R@@241|)) |#$T0@@215|)) :qid |unknown.0:0| :skolemid |1156| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@215| |#$T1@@151| |#$R@@241|)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_1 arg0@@323)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_1| :pattern ( (Tclass._System.___hFunc2SSO_1 arg0@@323)) )))
(assert (forall ((|#$T0@@216| T@U) (|#$T1@@152| T@U) (|#$R@@242| T@U) ) (!  (=> (and (and (= (type |#$T0@@216|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$R@@242|) TyType)) (= (Tclass._System.___hFunc2SSO_1 (Tclass._System.___hFunc2SSO |#$T0@@216| |#$T1@@152| |#$R@@242|)) |#$T1@@152|)) :qid |unknown.0:0| :skolemid |1157| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@216| |#$T1@@152| |#$R@@242|)) )))
(assert (forall ((arg0@@324 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_2 arg0@@324)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_2| :pattern ( (Tclass._System.___hFunc2SSO_2 arg0@@324)) )))
(assert (forall ((|#$T0@@217| T@U) (|#$T1@@153| T@U) (|#$R@@243| T@U) ) (!  (=> (and (and (= (type |#$T0@@217|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$R@@243|) TyType)) (= (Tclass._System.___hFunc2SSO_2 (Tclass._System.___hFunc2SSO |#$T0@@217| |#$T1@@153| |#$R@@243|)) |#$R@@243|)) :qid |unknown.0:0| :skolemid |1158| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@217| |#$T1@@153| |#$R@@243|)) )))
(assert (forall ((|#$T0@@218| T@U) (|#$T1@@154| T@U) (|#$R@@244| T@U) (bx@@94 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@218|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$R@@244|) TyType)) (= (type bx@@94) BoxType)) ($IsBox bx@@94 (Tclass._System.___hFunc2SSO |#$T0@@218| |#$T1@@154| |#$R@@244|))) (and (= ($Box ($Unbox HandleTypeType bx@@94)) bx@@94) ($Is ($Unbox HandleTypeType bx@@94) (Tclass._System.___hFunc2SSO |#$T0@@218| |#$T1@@154| |#$R@@244|)))) :qid |unknown.0:0| :skolemid |1159| :pattern ( ($IsBox bx@@94 (Tclass._System.___hFunc2SSO |#$T0@@218| |#$T1@@154| |#$R@@244|))) )))
(assert (forall ((arg0@@325 T@U) (arg1@@134 T@U) (arg2@@75 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO arg0@@325 arg1@@134 arg2@@75)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO| :pattern ( (Tclass._System.___hPartialFunc2SSO arg0@@325 arg1@@134 arg2@@75)) )))
(assert (forall ((|#$T0@@219| T@U) (|#$T1@@155| T@U) (|#$R@@245| T@U) ) (!  (=> (and (and (= (type |#$T0@@219|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$R@@245|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2SSO |#$T0@@219| |#$T1@@155| |#$R@@245|)) Tagclass._System.___hPartialFunc2SSO) (= (TagFamily (Tclass._System.___hPartialFunc2SSO |#$T0@@219| |#$T1@@155| |#$R@@245|)) |tytagFamily$_#PartialFunc2SSO|))) :qid |unknown.0:0| :skolemid |1160| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@219| |#$T1@@155| |#$R@@245|)) )))
(assert (forall ((arg0@@326 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_0 arg0@@326)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_0| :pattern ( (Tclass._System.___hPartialFunc2SSO_0 arg0@@326)) )))
(assert (forall ((|#$T0@@220| T@U) (|#$T1@@156| T@U) (|#$R@@246| T@U) ) (!  (=> (and (and (= (type |#$T0@@220|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$R@@246|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_0 (Tclass._System.___hPartialFunc2SSO |#$T0@@220| |#$T1@@156| |#$R@@246|)) |#$T0@@220|)) :qid |unknown.0:0| :skolemid |1161| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@220| |#$T1@@156| |#$R@@246|)) )))
(assert (forall ((arg0@@327 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_1 arg0@@327)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_1| :pattern ( (Tclass._System.___hPartialFunc2SSO_1 arg0@@327)) )))
(assert (forall ((|#$T0@@221| T@U) (|#$T1@@157| T@U) (|#$R@@247| T@U) ) (!  (=> (and (and (= (type |#$T0@@221|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$R@@247|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_1 (Tclass._System.___hPartialFunc2SSO |#$T0@@221| |#$T1@@157| |#$R@@247|)) |#$T1@@157|)) :qid |unknown.0:0| :skolemid |1162| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@221| |#$T1@@157| |#$R@@247|)) )))
(assert (forall ((arg0@@328 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_2 arg0@@328)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_2| :pattern ( (Tclass._System.___hPartialFunc2SSO_2 arg0@@328)) )))
(assert (forall ((|#$T0@@222| T@U) (|#$T1@@158| T@U) (|#$R@@248| T@U) ) (!  (=> (and (and (= (type |#$T0@@222|) TyType) (= (type |#$T1@@158|) TyType)) (= (type |#$R@@248|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_2 (Tclass._System.___hPartialFunc2SSO |#$T0@@222| |#$T1@@158| |#$R@@248|)) |#$R@@248|)) :qid |unknown.0:0| :skolemid |1163| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@222| |#$T1@@158| |#$R@@248|)) )))
(assert (forall ((|#$T0@@223| T@U) (|#$T1@@159| T@U) (|#$R@@249| T@U) (bx@@95 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@223|) TyType) (= (type |#$T1@@159|) TyType)) (= (type |#$R@@249|) TyType)) (= (type bx@@95) BoxType)) ($IsBox bx@@95 (Tclass._System.___hPartialFunc2SSO |#$T0@@223| |#$T1@@159| |#$R@@249|))) (and (= ($Box ($Unbox HandleTypeType bx@@95)) bx@@95) ($Is ($Unbox HandleTypeType bx@@95) (Tclass._System.___hPartialFunc2SSO |#$T0@@223| |#$T1@@159| |#$R@@249|)))) :qid |unknown.0:0| :skolemid |1164| :pattern ( ($IsBox bx@@95 (Tclass._System.___hPartialFunc2SSO |#$T0@@223| |#$T1@@159| |#$R@@249|))) )))
(assert (forall ((|#$T0@@224| T@U) (|#$T1@@160| T@U) (|#$R@@250| T@U) (|f#0@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@224|) TyType) (= (type |#$T1@@160|) TyType)) (= (type |#$R@@250|) TyType)) (= (type |f#0@@51|) HandleTypeType)) (= ($Is |f#0@@51| (Tclass._System.___hPartialFunc2SSO |#$T0@@224| |#$T1@@160| |#$R@@250|))  (and ($Is |f#0@@51| (Tclass._System.___hFunc2SSO |#$T0@@224| |#$T1@@160| |#$R@@250|)) (forall ((|x0#0@@21| T@U) (|x1#0@@13| T@U) ) (!  (=> (and (and (= (type |x0#0@@21|) BoxType) (= (type |x1#0@@13|) BoxType)) (and ($IsBox |x0#0@@21| |#$T0@@224|) ($IsBox |x1#0@@13| |#$T1@@160|))) (|Set#Equal| (Reads2 |#$T0@@224| |#$T1@@160| |#$R@@250| $OneHeap |f#0@@51| |x0#0@@21| |x1#0@@13|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1165| :no-pattern (type |x0#0@@21|) :no-pattern (type |x1#0@@13|) :no-pattern (U_2_int |x0#0@@21|) :no-pattern (U_2_bool |x0#0@@21|) :no-pattern (U_2_int |x1#0@@13|) :no-pattern (U_2_bool |x1#0@@13|) ))))) :qid |unknown.0:0| :skolemid |1166| :pattern ( ($Is |f#0@@51| (Tclass._System.___hPartialFunc2SSO |#$T0@@224| |#$T1@@160| |#$R@@250|))) )))
(assert (forall ((|#$T0@@225| T@U) (|#$T1@@161| T@U) (|#$R@@251| T@U) (|f#0@@52| T@U) ($h@@38 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@225|) TyType) (= (type |#$T1@@161|) TyType)) (= (type |#$R@@251|) TyType)) (= (type |f#0@@52|) HandleTypeType)) (= (type $h@@38) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc2SSO |#$T0@@225| |#$T1@@161| |#$R@@251|) $h@@38) ($IsAlloc |f#0@@52| (Tclass._System.___hFunc2SSO |#$T0@@225| |#$T1@@161| |#$R@@251|) $h@@38))) :qid |unknown.0:0| :skolemid |1167| :pattern ( ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc2SSO |#$T0@@225| |#$T1@@161| |#$R@@251|) $h@@38)) )))
(assert (forall ((arg0@@329 T@U) (arg1@@135 T@U) (arg2@@76 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO arg0@@329 arg1@@135 arg2@@76)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO| :pattern ( (Tclass._System.___hTotalFunc2SSO arg0@@329 arg1@@135 arg2@@76)) )))
(assert (forall ((|#$T0@@226| T@U) (|#$T1@@162| T@U) (|#$R@@252| T@U) ) (!  (=> (and (and (= (type |#$T0@@226|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |#$R@@252|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2SSO |#$T0@@226| |#$T1@@162| |#$R@@252|)) Tagclass._System.___hTotalFunc2SSO) (= (TagFamily (Tclass._System.___hTotalFunc2SSO |#$T0@@226| |#$T1@@162| |#$R@@252|)) |tytagFamily$_#TotalFunc2SSO|))) :qid |unknown.0:0| :skolemid |1168| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@226| |#$T1@@162| |#$R@@252|)) )))
(assert (forall ((arg0@@330 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_0 arg0@@330)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_0| :pattern ( (Tclass._System.___hTotalFunc2SSO_0 arg0@@330)) )))
(assert (forall ((|#$T0@@227| T@U) (|#$T1@@163| T@U) (|#$R@@253| T@U) ) (!  (=> (and (and (= (type |#$T0@@227|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |#$R@@253|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_0 (Tclass._System.___hTotalFunc2SSO |#$T0@@227| |#$T1@@163| |#$R@@253|)) |#$T0@@227|)) :qid |unknown.0:0| :skolemid |1169| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@227| |#$T1@@163| |#$R@@253|)) )))
(assert (forall ((arg0@@331 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_1 arg0@@331)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_1| :pattern ( (Tclass._System.___hTotalFunc2SSO_1 arg0@@331)) )))
(assert (forall ((|#$T0@@228| T@U) (|#$T1@@164| T@U) (|#$R@@254| T@U) ) (!  (=> (and (and (= (type |#$T0@@228|) TyType) (= (type |#$T1@@164|) TyType)) (= (type |#$R@@254|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_1 (Tclass._System.___hTotalFunc2SSO |#$T0@@228| |#$T1@@164| |#$R@@254|)) |#$T1@@164|)) :qid |unknown.0:0| :skolemid |1170| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@228| |#$T1@@164| |#$R@@254|)) )))
(assert (forall ((arg0@@332 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_2 arg0@@332)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_2| :pattern ( (Tclass._System.___hTotalFunc2SSO_2 arg0@@332)) )))
(assert (forall ((|#$T0@@229| T@U) (|#$T1@@165| T@U) (|#$R@@255| T@U) ) (!  (=> (and (and (= (type |#$T0@@229|) TyType) (= (type |#$T1@@165|) TyType)) (= (type |#$R@@255|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_2 (Tclass._System.___hTotalFunc2SSO |#$T0@@229| |#$T1@@165| |#$R@@255|)) |#$R@@255|)) :qid |unknown.0:0| :skolemid |1171| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@229| |#$T1@@165| |#$R@@255|)) )))
(assert (forall ((|#$T0@@230| T@U) (|#$T1@@166| T@U) (|#$R@@256| T@U) (bx@@96 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@230|) TyType) (= (type |#$T1@@166|) TyType)) (= (type |#$R@@256|) TyType)) (= (type bx@@96) BoxType)) ($IsBox bx@@96 (Tclass._System.___hTotalFunc2SSO |#$T0@@230| |#$T1@@166| |#$R@@256|))) (and (= ($Box ($Unbox HandleTypeType bx@@96)) bx@@96) ($Is ($Unbox HandleTypeType bx@@96) (Tclass._System.___hTotalFunc2SSO |#$T0@@230| |#$T1@@166| |#$R@@256|)))) :qid |unknown.0:0| :skolemid |1172| :pattern ( ($IsBox bx@@96 (Tclass._System.___hTotalFunc2SSO |#$T0@@230| |#$T1@@166| |#$R@@256|))) )))
(assert (forall ((|#$T0@@231| T@U) (|#$T1@@167| T@U) (|#$R@@257| T@U) (|f#0@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@231|) TyType) (= (type |#$T1@@167|) TyType)) (= (type |#$R@@257|) TyType)) (= (type |f#0@@53|) HandleTypeType)) (= ($Is |f#0@@53| (Tclass._System.___hTotalFunc2SSO |#$T0@@231| |#$T1@@167| |#$R@@257|))  (and ($Is |f#0@@53| (Tclass._System.___hPartialFunc2SSO |#$T0@@231| |#$T1@@167| |#$R@@257|)) (forall ((|x0#0@@22| T@U) (|x1#0@@14| T@U) ) (!  (=> (and (and (= (type |x0#0@@22|) BoxType) (= (type |x1#0@@14|) BoxType)) (and ($IsBox |x0#0@@22| |#$T0@@231|) ($IsBox |x1#0@@14| |#$T1@@167|))) (Requires2 |#$T0@@231| |#$T1@@167| |#$R@@257| $OneHeap |f#0@@53| |x0#0@@22| |x1#0@@14|)) :qid |unknown.0:0| :skolemid |1173| :no-pattern (type |x0#0@@22|) :no-pattern (type |x1#0@@14|) :no-pattern (U_2_int |x0#0@@22|) :no-pattern (U_2_bool |x0#0@@22|) :no-pattern (U_2_int |x1#0@@14|) :no-pattern (U_2_bool |x1#0@@14|) ))))) :qid |unknown.0:0| :skolemid |1174| :pattern ( ($Is |f#0@@53| (Tclass._System.___hTotalFunc2SSO |#$T0@@231| |#$T1@@167| |#$R@@257|))) )))
(assert (forall ((|#$T0@@232| T@U) (|#$T1@@168| T@U) (|#$R@@258| T@U) (|f#0@@54| T@U) ($h@@39 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@232|) TyType) (= (type |#$T1@@168|) TyType)) (= (type |#$R@@258|) TyType)) (= (type |f#0@@54|) HandleTypeType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc2SSO |#$T0@@232| |#$T1@@168| |#$R@@258|) $h@@39) ($IsAlloc |f#0@@54| (Tclass._System.___hPartialFunc2SSO |#$T0@@232| |#$T1@@168| |#$R@@258|) $h@@39))) :qid |unknown.0:0| :skolemid |1175| :pattern ( ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc2SSO |#$T0@@232| |#$T1@@168| |#$R@@258|) $h@@39)) )))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (!  (=> (and (= (type |a#14#0#0|) BoxType) (= (type |a#14#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#14#0#0| |a#14#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |1176| :pattern ( (|#_System._tuple#2._#Make2| |a#14#0#0| |a#14#1#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@10) (= (DatatypeCtorId d@@10) |##_System._tuple#2._#Make2|))) :qid |unknown.0:0| :skolemid |1177| :pattern ( (_System.Tuple2.___hMake2_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@11)) (exists ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (!  (and (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= d@@11 (|#_System._tuple#2._#Make2| |a#15#0#0| |a#15#1#0|))) :qid |unknown.0:0| :skolemid |1178| :no-pattern (type |a#15#0#0|) :no-pattern (type |a#15#1#0|) :no-pattern (U_2_int |a#15#0#0|) :no-pattern (U_2_bool |a#15#0#0|) :no-pattern (U_2_int |a#15#1#0|) :no-pattern (U_2_bool |a#15#1#0|) ))) :qid |unknown.0:0| :skolemid |1179| :pattern ( (_System.Tuple2.___hMake2_q d@@11)) )))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :qid |unknown.0:0| :skolemid |1180| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) )))
(assert (forall ((arg0@@333 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@333)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@333)) )))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :qid |unknown.0:0| :skolemid |1181| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) )))
(assert (forall ((arg0@@334 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@334)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@334)) )))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :qid |unknown.0:0| :skolemid |1182| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) )))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@97 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@97) BoxType)) ($IsBox bx@@97 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@97)) bx@@97) ($Is ($Unbox DatatypeTypeType bx@@97) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :qid |unknown.0:0| :skolemid |1183| :pattern ( ($IsBox bx@@97 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) )))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#16#0#0|) BoxType)) (= (type |a#16#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#16#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#16#1#0| |_System._tuple#2$T1@@3|)))) :qid |unknown.0:0| :skolemid |1184| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))) )))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#17#0#0| T@U) (|a#17#1#0| T@U) ($h@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#17#0#0|) BoxType)) (= (type |a#17#1#0|) BoxType)) (= (type $h@@40) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@40)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@40)  (and ($IsAllocBox |a#17#0#0| |_System._tuple#2$T0@@4| $h@@40) ($IsAllocBox |a#17#1#0| |_System._tuple#2$T1@@4| $h@@40)))) :qid |unknown.0:0| :skolemid |1185| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@40)) )))
(assert (forall ((d@@12 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@41 T@U) ) (!  (=> (and (and (and (= (type d@@12) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@41) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@41) (and (_System.Tuple2.___hMake2_q d@@12) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@41)) :qid |unknown.0:0| :skolemid |1186| :pattern ( ($IsAlloc d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@41)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@12) |_System._tuple#2$T0@@5| $h@@41)) :qid |unknown.0:0| :skolemid |1187| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@12) |_System._tuple#2$T0@@5| $h@@41)) )))
(assert (forall ((d@@13 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@42 T@U) ) (!  (=> (and (and (and (= (type d@@13) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@42) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@42) (and (_System.Tuple2.___hMake2_q d@@13) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@42)) :qid |unknown.0:0| :skolemid |1188| :pattern ( ($IsAlloc d@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@42)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@13) |_System._tuple#2$T1@@6| $h@@42)) :qid |unknown.0:0| :skolemid |1189| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@13) |_System._tuple#2$T1@@6| $h@@42)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (!  (=> (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#18#0#0| |a#18#1#0|)))) :qid |unknown.0:0| :skolemid |1190| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|))) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (!  (=> (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#19#0#0| |a#19#1#0|)) |a#19#0#0|)) :qid |unknown.0:0| :skolemid |1191| :pattern ( (|#_System._tuple#2._#Make2| |a#19#0#0| |a#19#1#0|)) )))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (!  (=> (and (= (type |a#20#0#0|) BoxType) (= (type |a#20#1#0|) BoxType)) (< (BoxRank |a#20#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#20#0#0| |a#20#1#0|)))) :qid |unknown.0:0| :skolemid |1192| :pattern ( (|#_System._tuple#2._#Make2| |a#20#0#0| |a#20#1#0|)) )))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) ) (!  (=> (and (= (type |a#21#0#0|) BoxType) (= (type |a#21#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#21#0#0| |a#21#1#0|)) |a#21#1#0|)) :qid |unknown.0:0| :skolemid |1193| :pattern ( (|#_System._tuple#2._#Make2| |a#21#0#0| |a#21#1#0|)) )))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) ) (!  (=> (and (= (type |a#22#0#0|) BoxType) (= (type |a#22#1#0|) BoxType)) (< (BoxRank |a#22#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#22#0#0| |a#22#1#0|)))) :qid |unknown.0:0| :skolemid |1194| :pattern ( (|#_System._tuple#2._#Make2| |a#22#0#0| |a#22#1#0|)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@14)) (_System.Tuple2.___hMake2_q d@@14)) :qid |unknown.0:0| :skolemid |1195| :pattern ( (|$IsA#_System.Tuple2| d@@14)) )))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@15 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@15) DatatypeTypeType)) ($Is d@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@15)) :qid |unknown.0:0| :skolemid |1196| :pattern ( (_System.Tuple2.___hMake2_q d@@15) ($Is d@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) )))
(assert (forall ((a@@116 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@116 b@@65)  (and (= (_System.Tuple2._0 a@@116) (_System.Tuple2._0 b@@65)) (= (_System.Tuple2._1 a@@116) (_System.Tuple2._1 b@@65))))) :qid |unknown.0:0| :skolemid |1197| :pattern ( (|_System.Tuple2#Equal| a@@116 b@@65)) )))
(assert (forall ((a@@117 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@117) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@117 b@@66) (= a@@117 b@@66))) :qid |unknown.0:0| :skolemid |1198| :pattern ( (|_System.Tuple2#Equal| a@@117 b@@66)) )))
(assert (forall ((arg0@@335 T@U) (arg1@@136 T@U) (arg2@@77 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO arg0@@335 arg1@@136 arg2@@77)) TyType) :qid |funType:Tclass._System.___hFunc2LLO| :pattern ( (Tclass._System.___hFunc2LLO arg0@@335 arg1@@136 arg2@@77)) )))
(assert (forall ((|#$T0@@233| T@U) (|#$T1@@169| T@U) (|#$R@@259| T@U) ) (!  (=> (and (and (= (type |#$T0@@233|) TyType) (= (type |#$T1@@169|) TyType)) (= (type |#$R@@259|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LLO |#$T0@@233| |#$T1@@169| |#$R@@259|)) Tagclass._System.___hFunc2LLO) (= (TagFamily (Tclass._System.___hFunc2LLO |#$T0@@233| |#$T1@@169| |#$R@@259|)) |tytagFamily$_#Func2LLO|))) :qid |unknown.0:0| :skolemid |1199| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@233| |#$T1@@169| |#$R@@259|)) )))
(assert (forall ((arg0@@336 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_0 arg0@@336)) TyType) :qid |funType:Tclass._System.___hFunc2LLO_0| :pattern ( (Tclass._System.___hFunc2LLO_0 arg0@@336)) )))
(assert (forall ((|#$T0@@234| T@U) (|#$T1@@170| T@U) (|#$R@@260| T@U) ) (!  (=> (and (and (= (type |#$T0@@234|) TyType) (= (type |#$T1@@170|) TyType)) (= (type |#$R@@260|) TyType)) (= (Tclass._System.___hFunc2LLO_0 (Tclass._System.___hFunc2LLO |#$T0@@234| |#$T1@@170| |#$R@@260|)) |#$T0@@234|)) :qid |unknown.0:0| :skolemid |1200| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@234| |#$T1@@170| |#$R@@260|)) )))
(assert (forall ((arg0@@337 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_1 arg0@@337)) TyType) :qid |funType:Tclass._System.___hFunc2LLO_1| :pattern ( (Tclass._System.___hFunc2LLO_1 arg0@@337)) )))
(assert (forall ((|#$T0@@235| T@U) (|#$T1@@171| T@U) (|#$R@@261| T@U) ) (!  (=> (and (and (= (type |#$T0@@235|) TyType) (= (type |#$T1@@171|) TyType)) (= (type |#$R@@261|) TyType)) (= (Tclass._System.___hFunc2LLO_1 (Tclass._System.___hFunc2LLO |#$T0@@235| |#$T1@@171| |#$R@@261|)) |#$T1@@171|)) :qid |unknown.0:0| :skolemid |1201| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@235| |#$T1@@171| |#$R@@261|)) )))
(assert (forall ((arg0@@338 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_2 arg0@@338)) TyType) :qid |funType:Tclass._System.___hFunc2LLO_2| :pattern ( (Tclass._System.___hFunc2LLO_2 arg0@@338)) )))
(assert (forall ((|#$T0@@236| T@U) (|#$T1@@172| T@U) (|#$R@@262| T@U) ) (!  (=> (and (and (= (type |#$T0@@236|) TyType) (= (type |#$T1@@172|) TyType)) (= (type |#$R@@262|) TyType)) (= (Tclass._System.___hFunc2LLO_2 (Tclass._System.___hFunc2LLO |#$T0@@236| |#$T1@@172| |#$R@@262|)) |#$R@@262|)) :qid |unknown.0:0| :skolemid |1202| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@236| |#$T1@@172| |#$R@@262|)) )))
(assert (forall ((|#$T0@@237| T@U) (|#$T1@@173| T@U) (|#$R@@263| T@U) (bx@@98 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@237|) TyType) (= (type |#$T1@@173|) TyType)) (= (type |#$R@@263|) TyType)) (= (type bx@@98) BoxType)) ($IsBox bx@@98 (Tclass._System.___hFunc2LLO |#$T0@@237| |#$T1@@173| |#$R@@263|))) (and (= ($Box ($Unbox HandleTypeType bx@@98)) bx@@98) ($Is ($Unbox HandleTypeType bx@@98) (Tclass._System.___hFunc2LLO |#$T0@@237| |#$T1@@173| |#$R@@263|)))) :qid |unknown.0:0| :skolemid |1203| :pattern ( ($IsBox bx@@98 (Tclass._System.___hFunc2LLO |#$T0@@237| |#$T1@@173| |#$R@@263|))) )))
(assert (forall ((arg0@@339 T@U) (arg1@@137 T@U) (arg2@@78 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO arg0@@339 arg1@@137 arg2@@78)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO| :pattern ( (Tclass._System.___hPartialFunc2LLO arg0@@339 arg1@@137 arg2@@78)) )))
(assert (forall ((|#$T0@@238| T@U) (|#$T1@@174| T@U) (|#$R@@264| T@U) ) (!  (=> (and (and (= (type |#$T0@@238|) TyType) (= (type |#$T1@@174|) TyType)) (= (type |#$R@@264|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LLO |#$T0@@238| |#$T1@@174| |#$R@@264|)) Tagclass._System.___hPartialFunc2LLO) (= (TagFamily (Tclass._System.___hPartialFunc2LLO |#$T0@@238| |#$T1@@174| |#$R@@264|)) |tytagFamily$_#PartialFunc2LLO|))) :qid |unknown.0:0| :skolemid |1204| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@238| |#$T1@@174| |#$R@@264|)) )))
(assert (forall ((arg0@@340 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_0 arg0@@340)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO_0| :pattern ( (Tclass._System.___hPartialFunc2LLO_0 arg0@@340)) )))
(assert (forall ((|#$T0@@239| T@U) (|#$T1@@175| T@U) (|#$R@@265| T@U) ) (!  (=> (and (and (= (type |#$T0@@239|) TyType) (= (type |#$T1@@175|) TyType)) (= (type |#$R@@265|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_0 (Tclass._System.___hPartialFunc2LLO |#$T0@@239| |#$T1@@175| |#$R@@265|)) |#$T0@@239|)) :qid |unknown.0:0| :skolemid |1205| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@239| |#$T1@@175| |#$R@@265|)) )))
(assert (forall ((arg0@@341 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_1 arg0@@341)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO_1| :pattern ( (Tclass._System.___hPartialFunc2LLO_1 arg0@@341)) )))
(assert (forall ((|#$T0@@240| T@U) (|#$T1@@176| T@U) (|#$R@@266| T@U) ) (!  (=> (and (and (= (type |#$T0@@240|) TyType) (= (type |#$T1@@176|) TyType)) (= (type |#$R@@266|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_1 (Tclass._System.___hPartialFunc2LLO |#$T0@@240| |#$T1@@176| |#$R@@266|)) |#$T1@@176|)) :qid |unknown.0:0| :skolemid |1206| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@240| |#$T1@@176| |#$R@@266|)) )))
(assert (forall ((arg0@@342 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_2 arg0@@342)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO_2| :pattern ( (Tclass._System.___hPartialFunc2LLO_2 arg0@@342)) )))
(assert (forall ((|#$T0@@241| T@U) (|#$T1@@177| T@U) (|#$R@@267| T@U) ) (!  (=> (and (and (= (type |#$T0@@241|) TyType) (= (type |#$T1@@177|) TyType)) (= (type |#$R@@267|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_2 (Tclass._System.___hPartialFunc2LLO |#$T0@@241| |#$T1@@177| |#$R@@267|)) |#$R@@267|)) :qid |unknown.0:0| :skolemid |1207| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@241| |#$T1@@177| |#$R@@267|)) )))
(assert (forall ((|#$T0@@242| T@U) (|#$T1@@178| T@U) (|#$R@@268| T@U) (bx@@99 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@242|) TyType) (= (type |#$T1@@178|) TyType)) (= (type |#$R@@268|) TyType)) (= (type bx@@99) BoxType)) ($IsBox bx@@99 (Tclass._System.___hPartialFunc2LLO |#$T0@@242| |#$T1@@178| |#$R@@268|))) (and (= ($Box ($Unbox HandleTypeType bx@@99)) bx@@99) ($Is ($Unbox HandleTypeType bx@@99) (Tclass._System.___hPartialFunc2LLO |#$T0@@242| |#$T1@@178| |#$R@@268|)))) :qid |unknown.0:0| :skolemid |1208| :pattern ( ($IsBox bx@@99 (Tclass._System.___hPartialFunc2LLO |#$T0@@242| |#$T1@@178| |#$R@@268|))) )))
(assert (forall ((|#$T0@@243| T@U) (|#$T1@@179| T@U) (|#$R@@269| T@U) (|f#0@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@243|) TyType) (= (type |#$T1@@179|) TyType)) (= (type |#$R@@269|) TyType)) (= (type |f#0@@55|) HandleTypeType)) (= ($Is |f#0@@55| (Tclass._System.___hPartialFunc2LLO |#$T0@@243| |#$T1@@179| |#$R@@269|))  (and ($Is |f#0@@55| (Tclass._System.___hFunc2LLO |#$T0@@243| |#$T1@@179| |#$R@@269|)) (forall ((|x0#0@@23| T@U) (|x1#0@@15| T@U) ) (!  (=> (and (and (= (type |x0#0@@23|) BoxType) (= (type |x1#0@@15|) BoxType)) (and ($IsBox |x0#0@@23| |#$T0@@243|) ($IsBox |x1#0@@15| |#$T1@@179|))) (|Set#Equal| (Reads2 |#$T0@@243| |#$T1@@179| |#$R@@269| $OneHeap |f#0@@55| |x0#0@@23| |x1#0@@15|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1209| :no-pattern (type |x0#0@@23|) :no-pattern (type |x1#0@@15|) :no-pattern (U_2_int |x0#0@@23|) :no-pattern (U_2_bool |x0#0@@23|) :no-pattern (U_2_int |x1#0@@15|) :no-pattern (U_2_bool |x1#0@@15|) ))))) :qid |unknown.0:0| :skolemid |1210| :pattern ( ($Is |f#0@@55| (Tclass._System.___hPartialFunc2LLO |#$T0@@243| |#$T1@@179| |#$R@@269|))) )))
(assert (forall ((|#$T0@@244| T@U) (|#$T1@@180| T@U) (|#$R@@270| T@U) (|f#0@@56| T@U) ($h@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@244|) TyType) (= (type |#$T1@@180|) TyType)) (= (type |#$R@@270|) TyType)) (= (type |f#0@@56|) HandleTypeType)) (= (type $h@@43) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc2LLO |#$T0@@244| |#$T1@@180| |#$R@@270|) $h@@43) ($IsAlloc |f#0@@56| (Tclass._System.___hFunc2LLO |#$T0@@244| |#$T1@@180| |#$R@@270|) $h@@43))) :qid |unknown.0:0| :skolemid |1211| :pattern ( ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc2LLO |#$T0@@244| |#$T1@@180| |#$R@@270|) $h@@43)) )))
(assert (forall ((arg0@@343 T@U) (arg1@@138 T@U) (arg2@@79 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO arg0@@343 arg1@@138 arg2@@79)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO| :pattern ( (Tclass._System.___hTotalFunc2LLO arg0@@343 arg1@@138 arg2@@79)) )))
(assert (forall ((|#$T0@@245| T@U) (|#$T1@@181| T@U) (|#$R@@271| T@U) ) (!  (=> (and (and (= (type |#$T0@@245|) TyType) (= (type |#$T1@@181|) TyType)) (= (type |#$R@@271|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LLO |#$T0@@245| |#$T1@@181| |#$R@@271|)) Tagclass._System.___hTotalFunc2LLO) (= (TagFamily (Tclass._System.___hTotalFunc2LLO |#$T0@@245| |#$T1@@181| |#$R@@271|)) |tytagFamily$_#TotalFunc2LLO|))) :qid |unknown.0:0| :skolemid |1212| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@245| |#$T1@@181| |#$R@@271|)) )))
(assert (forall ((arg0@@344 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_0 arg0@@344)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO_0| :pattern ( (Tclass._System.___hTotalFunc2LLO_0 arg0@@344)) )))
(assert (forall ((|#$T0@@246| T@U) (|#$T1@@182| T@U) (|#$R@@272| T@U) ) (!  (=> (and (and (= (type |#$T0@@246|) TyType) (= (type |#$T1@@182|) TyType)) (= (type |#$R@@272|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_0 (Tclass._System.___hTotalFunc2LLO |#$T0@@246| |#$T1@@182| |#$R@@272|)) |#$T0@@246|)) :qid |unknown.0:0| :skolemid |1213| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@246| |#$T1@@182| |#$R@@272|)) )))
(assert (forall ((arg0@@345 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_1 arg0@@345)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO_1| :pattern ( (Tclass._System.___hTotalFunc2LLO_1 arg0@@345)) )))
(assert (forall ((|#$T0@@247| T@U) (|#$T1@@183| T@U) (|#$R@@273| T@U) ) (!  (=> (and (and (= (type |#$T0@@247|) TyType) (= (type |#$T1@@183|) TyType)) (= (type |#$R@@273|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_1 (Tclass._System.___hTotalFunc2LLO |#$T0@@247| |#$T1@@183| |#$R@@273|)) |#$T1@@183|)) :qid |unknown.0:0| :skolemid |1214| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@247| |#$T1@@183| |#$R@@273|)) )))
(assert (forall ((arg0@@346 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_2 arg0@@346)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO_2| :pattern ( (Tclass._System.___hTotalFunc2LLO_2 arg0@@346)) )))
(assert (forall ((|#$T0@@248| T@U) (|#$T1@@184| T@U) (|#$R@@274| T@U) ) (!  (=> (and (and (= (type |#$T0@@248|) TyType) (= (type |#$T1@@184|) TyType)) (= (type |#$R@@274|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_2 (Tclass._System.___hTotalFunc2LLO |#$T0@@248| |#$T1@@184| |#$R@@274|)) |#$R@@274|)) :qid |unknown.0:0| :skolemid |1215| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@248| |#$T1@@184| |#$R@@274|)) )))
(assert (forall ((|#$T0@@249| T@U) (|#$T1@@185| T@U) (|#$R@@275| T@U) (bx@@100 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@249|) TyType) (= (type |#$T1@@185|) TyType)) (= (type |#$R@@275|) TyType)) (= (type bx@@100) BoxType)) ($IsBox bx@@100 (Tclass._System.___hTotalFunc2LLO |#$T0@@249| |#$T1@@185| |#$R@@275|))) (and (= ($Box ($Unbox HandleTypeType bx@@100)) bx@@100) ($Is ($Unbox HandleTypeType bx@@100) (Tclass._System.___hTotalFunc2LLO |#$T0@@249| |#$T1@@185| |#$R@@275|)))) :qid |unknown.0:0| :skolemid |1216| :pattern ( ($IsBox bx@@100 (Tclass._System.___hTotalFunc2LLO |#$T0@@249| |#$T1@@185| |#$R@@275|))) )))
(assert (forall ((|#$T0@@250| T@U) (|#$T1@@186| T@U) (|#$R@@276| T@U) (|f#0@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@250|) TyType) (= (type |#$T1@@186|) TyType)) (= (type |#$R@@276|) TyType)) (= (type |f#0@@57|) HandleTypeType)) (= ($Is |f#0@@57| (Tclass._System.___hTotalFunc2LLO |#$T0@@250| |#$T1@@186| |#$R@@276|))  (and ($Is |f#0@@57| (Tclass._System.___hPartialFunc2LLO |#$T0@@250| |#$T1@@186| |#$R@@276|)) (forall ((|x0#0@@24| T@U) (|x1#0@@16| T@U) ) (!  (=> (and (and (= (type |x0#0@@24|) BoxType) (= (type |x1#0@@16|) BoxType)) (and ($IsBox |x0#0@@24| |#$T0@@250|) ($IsBox |x1#0@@16| |#$T1@@186|))) (Requires2 |#$T0@@250| |#$T1@@186| |#$R@@276| $OneHeap |f#0@@57| |x0#0@@24| |x1#0@@16|)) :qid |unknown.0:0| :skolemid |1217| :no-pattern (type |x0#0@@24|) :no-pattern (type |x1#0@@16|) :no-pattern (U_2_int |x0#0@@24|) :no-pattern (U_2_bool |x0#0@@24|) :no-pattern (U_2_int |x1#0@@16|) :no-pattern (U_2_bool |x1#0@@16|) ))))) :qid |unknown.0:0| :skolemid |1218| :pattern ( ($Is |f#0@@57| (Tclass._System.___hTotalFunc2LLO |#$T0@@250| |#$T1@@186| |#$R@@276|))) )))
(assert (forall ((|#$T0@@251| T@U) (|#$T1@@187| T@U) (|#$R@@277| T@U) (|f#0@@58| T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@251|) TyType) (= (type |#$T1@@187|) TyType)) (= (type |#$R@@277|) TyType)) (= (type |f#0@@58|) HandleTypeType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc2LLO |#$T0@@251| |#$T1@@187| |#$R@@277|) $h@@44) ($IsAlloc |f#0@@58| (Tclass._System.___hPartialFunc2LLO |#$T0@@251| |#$T1@@187| |#$R@@277|) $h@@44))) :qid |unknown.0:0| :skolemid |1219| :pattern ( ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc2LLO |#$T0@@251| |#$T1@@187| |#$R@@277|) $h@@44)) )))
(assert (forall ((arg0@@347 T@U) (arg1@@139 T@U) ) (! (= (type (Tclass._System.___hFunc1SS arg0@@347 arg1@@139)) TyType) :qid |funType:Tclass._System.___hFunc1SS| :pattern ( (Tclass._System.___hFunc1SS arg0@@347 arg1@@139)) )))
(assert (forall ((|#$T0@@252| T@U) (|#$R@@278| T@U) ) (!  (=> (and (= (type |#$T0@@252|) TyType) (= (type |#$R@@278|) TyType)) (and (= (Tag (Tclass._System.___hFunc1SS |#$T0@@252| |#$R@@278|)) Tagclass._System.___hFunc1SS) (= (TagFamily (Tclass._System.___hFunc1SS |#$T0@@252| |#$R@@278|)) |tytagFamily$_#Func1SS|))) :qid |unknown.0:0| :skolemid |1220| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@252| |#$R@@278|)) )))
(assert (forall ((arg0@@348 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_0 arg0@@348)) TyType) :qid |funType:Tclass._System.___hFunc1SS_0| :pattern ( (Tclass._System.___hFunc1SS_0 arg0@@348)) )))
(assert (forall ((|#$T0@@253| T@U) (|#$R@@279| T@U) ) (!  (=> (and (= (type |#$T0@@253|) TyType) (= (type |#$R@@279|) TyType)) (= (Tclass._System.___hFunc1SS_0 (Tclass._System.___hFunc1SS |#$T0@@253| |#$R@@279|)) |#$T0@@253|)) :qid |unknown.0:0| :skolemid |1221| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@253| |#$R@@279|)) )))
(assert (forall ((arg0@@349 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_1 arg0@@349)) TyType) :qid |funType:Tclass._System.___hFunc1SS_1| :pattern ( (Tclass._System.___hFunc1SS_1 arg0@@349)) )))
(assert (forall ((|#$T0@@254| T@U) (|#$R@@280| T@U) ) (!  (=> (and (= (type |#$T0@@254|) TyType) (= (type |#$R@@280|) TyType)) (= (Tclass._System.___hFunc1SS_1 (Tclass._System.___hFunc1SS |#$T0@@254| |#$R@@280|)) |#$R@@280|)) :qid |unknown.0:0| :skolemid |1222| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@254| |#$R@@280|)) )))
(assert (forall ((|#$T0@@255| T@U) (|#$R@@281| T@U) (bx@@101 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@255|) TyType) (= (type |#$R@@281|) TyType)) (= (type bx@@101) BoxType)) ($IsBox bx@@101 (Tclass._System.___hFunc1SS |#$T0@@255| |#$R@@281|))) (and (= ($Box ($Unbox HandleTypeType bx@@101)) bx@@101) ($Is ($Unbox HandleTypeType bx@@101) (Tclass._System.___hFunc1SS |#$T0@@255| |#$R@@281|)))) :qid |unknown.0:0| :skolemid |1223| :pattern ( ($IsBox bx@@101 (Tclass._System.___hFunc1SS |#$T0@@255| |#$R@@281|))) )))
(assert (forall ((arg0@@350 T@U) (arg1@@140 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS arg0@@350 arg1@@140)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS| :pattern ( (Tclass._System.___hPartialFunc1SS arg0@@350 arg1@@140)) )))
(assert (forall ((|#$T0@@256| T@U) (|#$R@@282| T@U) ) (!  (=> (and (= (type |#$T0@@256|) TyType) (= (type |#$R@@282|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1SS |#$T0@@256| |#$R@@282|)) Tagclass._System.___hPartialFunc1SS) (= (TagFamily (Tclass._System.___hPartialFunc1SS |#$T0@@256| |#$R@@282|)) |tytagFamily$_#PartialFunc1SS|))) :qid |unknown.0:0| :skolemid |1224| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@256| |#$R@@282|)) )))
(assert (forall ((arg0@@351 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_0 arg0@@351)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_0| :pattern ( (Tclass._System.___hPartialFunc1SS_0 arg0@@351)) )))
(assert (forall ((|#$T0@@257| T@U) (|#$R@@283| T@U) ) (!  (=> (and (= (type |#$T0@@257|) TyType) (= (type |#$R@@283|) TyType)) (= (Tclass._System.___hPartialFunc1SS_0 (Tclass._System.___hPartialFunc1SS |#$T0@@257| |#$R@@283|)) |#$T0@@257|)) :qid |unknown.0:0| :skolemid |1225| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@257| |#$R@@283|)) )))
(assert (forall ((arg0@@352 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_1 arg0@@352)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_1| :pattern ( (Tclass._System.___hPartialFunc1SS_1 arg0@@352)) )))
(assert (forall ((|#$T0@@258| T@U) (|#$R@@284| T@U) ) (!  (=> (and (= (type |#$T0@@258|) TyType) (= (type |#$R@@284|) TyType)) (= (Tclass._System.___hPartialFunc1SS_1 (Tclass._System.___hPartialFunc1SS |#$T0@@258| |#$R@@284|)) |#$R@@284|)) :qid |unknown.0:0| :skolemid |1226| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@258| |#$R@@284|)) )))
(assert (forall ((|#$T0@@259| T@U) (|#$R@@285| T@U) (bx@@102 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@259|) TyType) (= (type |#$R@@285|) TyType)) (= (type bx@@102) BoxType)) ($IsBox bx@@102 (Tclass._System.___hPartialFunc1SS |#$T0@@259| |#$R@@285|))) (and (= ($Box ($Unbox HandleTypeType bx@@102)) bx@@102) ($Is ($Unbox HandleTypeType bx@@102) (Tclass._System.___hPartialFunc1SS |#$T0@@259| |#$R@@285|)))) :qid |unknown.0:0| :skolemid |1227| :pattern ( ($IsBox bx@@102 (Tclass._System.___hPartialFunc1SS |#$T0@@259| |#$R@@285|))) )))
(assert (forall ((|#$T0@@260| T@U) (|#$R@@286| T@U) (|f#0@@59| T@U) ) (!  (=> (and (and (= (type |#$T0@@260|) TyType) (= (type |#$R@@286|) TyType)) (= (type |f#0@@59|) HandleTypeType)) (= ($Is |f#0@@59| (Tclass._System.___hPartialFunc1SS |#$T0@@260| |#$R@@286|))  (and ($Is |f#0@@59| (Tclass._System.___hFunc1SS |#$T0@@260| |#$R@@286|)) (forall ((|x0#0@@25| T@U) ) (!  (=> (and (= (type |x0#0@@25|) BoxType) ($IsBox |x0#0@@25| |#$T0@@260|)) (|Set#Equal| (Reads1 |#$T0@@260| |#$R@@286| $OneHeap |f#0@@59| |x0#0@@25|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1228| :no-pattern (type |x0#0@@25|) :no-pattern (U_2_int |x0#0@@25|) :no-pattern (U_2_bool |x0#0@@25|) ))))) :qid |unknown.0:0| :skolemid |1229| :pattern ( ($Is |f#0@@59| (Tclass._System.___hPartialFunc1SS |#$T0@@260| |#$R@@286|))) )))
(assert (forall ((|#$T0@@261| T@U) (|#$R@@287| T@U) (|f#0@@60| T@U) ($h@@45 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@261|) TyType) (= (type |#$R@@287|) TyType)) (= (type |f#0@@60|) HandleTypeType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc1SS |#$T0@@261| |#$R@@287|) $h@@45) ($IsAlloc |f#0@@60| (Tclass._System.___hFunc1SS |#$T0@@261| |#$R@@287|) $h@@45))) :qid |unknown.0:0| :skolemid |1230| :pattern ( ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc1SS |#$T0@@261| |#$R@@287|) $h@@45)) )))
(assert (forall ((arg0@@353 T@U) (arg1@@141 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS arg0@@353 arg1@@141)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS| :pattern ( (Tclass._System.___hTotalFunc1SS arg0@@353 arg1@@141)) )))
(assert (forall ((|#$T0@@262| T@U) (|#$R@@288| T@U) ) (!  (=> (and (= (type |#$T0@@262|) TyType) (= (type |#$R@@288|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1SS |#$T0@@262| |#$R@@288|)) Tagclass._System.___hTotalFunc1SS) (= (TagFamily (Tclass._System.___hTotalFunc1SS |#$T0@@262| |#$R@@288|)) |tytagFamily$_#TotalFunc1SS|))) :qid |unknown.0:0| :skolemid |1231| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@262| |#$R@@288|)) )))
(assert (forall ((arg0@@354 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_0 arg0@@354)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_0| :pattern ( (Tclass._System.___hTotalFunc1SS_0 arg0@@354)) )))
(assert (forall ((|#$T0@@263| T@U) (|#$R@@289| T@U) ) (!  (=> (and (= (type |#$T0@@263|) TyType) (= (type |#$R@@289|) TyType)) (= (Tclass._System.___hTotalFunc1SS_0 (Tclass._System.___hTotalFunc1SS |#$T0@@263| |#$R@@289|)) |#$T0@@263|)) :qid |unknown.0:0| :skolemid |1232| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@263| |#$R@@289|)) )))
(assert (forall ((arg0@@355 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_1 arg0@@355)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_1| :pattern ( (Tclass._System.___hTotalFunc1SS_1 arg0@@355)) )))
(assert (forall ((|#$T0@@264| T@U) (|#$R@@290| T@U) ) (!  (=> (and (= (type |#$T0@@264|) TyType) (= (type |#$R@@290|) TyType)) (= (Tclass._System.___hTotalFunc1SS_1 (Tclass._System.___hTotalFunc1SS |#$T0@@264| |#$R@@290|)) |#$R@@290|)) :qid |unknown.0:0| :skolemid |1233| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@264| |#$R@@290|)) )))
(assert (forall ((|#$T0@@265| T@U) (|#$R@@291| T@U) (bx@@103 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@265|) TyType) (= (type |#$R@@291|) TyType)) (= (type bx@@103) BoxType)) ($IsBox bx@@103 (Tclass._System.___hTotalFunc1SS |#$T0@@265| |#$R@@291|))) (and (= ($Box ($Unbox HandleTypeType bx@@103)) bx@@103) ($Is ($Unbox HandleTypeType bx@@103) (Tclass._System.___hTotalFunc1SS |#$T0@@265| |#$R@@291|)))) :qid |unknown.0:0| :skolemid |1234| :pattern ( ($IsBox bx@@103 (Tclass._System.___hTotalFunc1SS |#$T0@@265| |#$R@@291|))) )))
(assert (forall ((|#$T0@@266| T@U) (|#$R@@292| T@U) (|f#0@@61| T@U) ) (!  (=> (and (and (= (type |#$T0@@266|) TyType) (= (type |#$R@@292|) TyType)) (= (type |f#0@@61|) HandleTypeType)) (= ($Is |f#0@@61| (Tclass._System.___hTotalFunc1SS |#$T0@@266| |#$R@@292|))  (and ($Is |f#0@@61| (Tclass._System.___hPartialFunc1SS |#$T0@@266| |#$R@@292|)) (forall ((|x0#0@@26| T@U) ) (!  (=> (and (= (type |x0#0@@26|) BoxType) ($IsBox |x0#0@@26| |#$T0@@266|)) (Requires1 |#$T0@@266| |#$R@@292| $OneHeap |f#0@@61| |x0#0@@26|)) :qid |unknown.0:0| :skolemid |1235| :no-pattern (type |x0#0@@26|) :no-pattern (U_2_int |x0#0@@26|) :no-pattern (U_2_bool |x0#0@@26|) ))))) :qid |unknown.0:0| :skolemid |1236| :pattern ( ($Is |f#0@@61| (Tclass._System.___hTotalFunc1SS |#$T0@@266| |#$R@@292|))) )))
(assert (forall ((|#$T0@@267| T@U) (|#$R@@293| T@U) (|f#0@@62| T@U) ($h@@46 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@267|) TyType) (= (type |#$R@@293|) TyType)) (= (type |f#0@@62|) HandleTypeType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc1SS |#$T0@@267| |#$R@@293|) $h@@46) ($IsAlloc |f#0@@62| (Tclass._System.___hPartialFunc1SS |#$T0@@267| |#$R@@293|) $h@@46))) :qid |unknown.0:0| :skolemid |1237| :pattern ( ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc1SS |#$T0@@267| |#$R@@293|) $h@@46)) )))
(assert (forall ((arg0@@356 T@U) (arg1@@142 T@U) ) (! (= (type (Tclass._System.___hFunc1LL arg0@@356 arg1@@142)) TyType) :qid |funType:Tclass._System.___hFunc1LL| :pattern ( (Tclass._System.___hFunc1LL arg0@@356 arg1@@142)) )))
(assert (forall ((|#$T0@@268| T@U) (|#$R@@294| T@U) ) (!  (=> (and (= (type |#$T0@@268|) TyType) (= (type |#$R@@294|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LL |#$T0@@268| |#$R@@294|)) Tagclass._System.___hFunc1LL) (= (TagFamily (Tclass._System.___hFunc1LL |#$T0@@268| |#$R@@294|)) |tytagFamily$_#Func1LL|))) :qid |unknown.0:0| :skolemid |1238| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@268| |#$R@@294|)) )))
(assert (forall ((arg0@@357 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_0 arg0@@357)) TyType) :qid |funType:Tclass._System.___hFunc1LL_0| :pattern ( (Tclass._System.___hFunc1LL_0 arg0@@357)) )))
(assert (forall ((|#$T0@@269| T@U) (|#$R@@295| T@U) ) (!  (=> (and (= (type |#$T0@@269|) TyType) (= (type |#$R@@295|) TyType)) (= (Tclass._System.___hFunc1LL_0 (Tclass._System.___hFunc1LL |#$T0@@269| |#$R@@295|)) |#$T0@@269|)) :qid |unknown.0:0| :skolemid |1239| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@269| |#$R@@295|)) )))
(assert (forall ((arg0@@358 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_1 arg0@@358)) TyType) :qid |funType:Tclass._System.___hFunc1LL_1| :pattern ( (Tclass._System.___hFunc1LL_1 arg0@@358)) )))
(assert (forall ((|#$T0@@270| T@U) (|#$R@@296| T@U) ) (!  (=> (and (= (type |#$T0@@270|) TyType) (= (type |#$R@@296|) TyType)) (= (Tclass._System.___hFunc1LL_1 (Tclass._System.___hFunc1LL |#$T0@@270| |#$R@@296|)) |#$R@@296|)) :qid |unknown.0:0| :skolemid |1240| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@270| |#$R@@296|)) )))
(assert (forall ((|#$T0@@271| T@U) (|#$R@@297| T@U) (bx@@104 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@271|) TyType) (= (type |#$R@@297|) TyType)) (= (type bx@@104) BoxType)) ($IsBox bx@@104 (Tclass._System.___hFunc1LL |#$T0@@271| |#$R@@297|))) (and (= ($Box ($Unbox HandleTypeType bx@@104)) bx@@104) ($Is ($Unbox HandleTypeType bx@@104) (Tclass._System.___hFunc1LL |#$T0@@271| |#$R@@297|)))) :qid |unknown.0:0| :skolemid |1241| :pattern ( ($IsBox bx@@104 (Tclass._System.___hFunc1LL |#$T0@@271| |#$R@@297|))) )))
(assert (forall ((arg0@@359 T@U) (arg1@@143 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL arg0@@359 arg1@@143)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL| :pattern ( (Tclass._System.___hPartialFunc1LL arg0@@359 arg1@@143)) )))
(assert (forall ((|#$T0@@272| T@U) (|#$R@@298| T@U) ) (!  (=> (and (= (type |#$T0@@272|) TyType) (= (type |#$R@@298|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LL |#$T0@@272| |#$R@@298|)) Tagclass._System.___hPartialFunc1LL) (= (TagFamily (Tclass._System.___hPartialFunc1LL |#$T0@@272| |#$R@@298|)) |tytagFamily$_#PartialFunc1LL|))) :qid |unknown.0:0| :skolemid |1242| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@272| |#$R@@298|)) )))
(assert (forall ((arg0@@360 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_0 arg0@@360)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_0| :pattern ( (Tclass._System.___hPartialFunc1LL_0 arg0@@360)) )))
(assert (forall ((|#$T0@@273| T@U) (|#$R@@299| T@U) ) (!  (=> (and (= (type |#$T0@@273|) TyType) (= (type |#$R@@299|) TyType)) (= (Tclass._System.___hPartialFunc1LL_0 (Tclass._System.___hPartialFunc1LL |#$T0@@273| |#$R@@299|)) |#$T0@@273|)) :qid |unknown.0:0| :skolemid |1243| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@273| |#$R@@299|)) )))
(assert (forall ((arg0@@361 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_1 arg0@@361)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_1| :pattern ( (Tclass._System.___hPartialFunc1LL_1 arg0@@361)) )))
(assert (forall ((|#$T0@@274| T@U) (|#$R@@300| T@U) ) (!  (=> (and (= (type |#$T0@@274|) TyType) (= (type |#$R@@300|) TyType)) (= (Tclass._System.___hPartialFunc1LL_1 (Tclass._System.___hPartialFunc1LL |#$T0@@274| |#$R@@300|)) |#$R@@300|)) :qid |unknown.0:0| :skolemid |1244| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@274| |#$R@@300|)) )))
(assert (forall ((|#$T0@@275| T@U) (|#$R@@301| T@U) (bx@@105 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@275|) TyType) (= (type |#$R@@301|) TyType)) (= (type bx@@105) BoxType)) ($IsBox bx@@105 (Tclass._System.___hPartialFunc1LL |#$T0@@275| |#$R@@301|))) (and (= ($Box ($Unbox HandleTypeType bx@@105)) bx@@105) ($Is ($Unbox HandleTypeType bx@@105) (Tclass._System.___hPartialFunc1LL |#$T0@@275| |#$R@@301|)))) :qid |unknown.0:0| :skolemid |1245| :pattern ( ($IsBox bx@@105 (Tclass._System.___hPartialFunc1LL |#$T0@@275| |#$R@@301|))) )))
(assert (forall ((|#$T0@@276| T@U) (|#$R@@302| T@U) (|f#0@@63| T@U) ) (!  (=> (and (and (= (type |#$T0@@276|) TyType) (= (type |#$R@@302|) TyType)) (= (type |f#0@@63|) HandleTypeType)) (= ($Is |f#0@@63| (Tclass._System.___hPartialFunc1LL |#$T0@@276| |#$R@@302|))  (and ($Is |f#0@@63| (Tclass._System.___hFunc1LL |#$T0@@276| |#$R@@302|)) (forall ((|x0#0@@27| T@U) ) (!  (=> (and (= (type |x0#0@@27|) BoxType) ($IsBox |x0#0@@27| |#$T0@@276|)) (|Set#Equal| (Reads1 |#$T0@@276| |#$R@@302| $OneHeap |f#0@@63| |x0#0@@27|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1246| :no-pattern (type |x0#0@@27|) :no-pattern (U_2_int |x0#0@@27|) :no-pattern (U_2_bool |x0#0@@27|) ))))) :qid |unknown.0:0| :skolemid |1247| :pattern ( ($Is |f#0@@63| (Tclass._System.___hPartialFunc1LL |#$T0@@276| |#$R@@302|))) )))
(assert (forall ((|#$T0@@277| T@U) (|#$R@@303| T@U) (|f#0@@64| T@U) ($h@@47 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@277|) TyType) (= (type |#$R@@303|) TyType)) (= (type |f#0@@64|) HandleTypeType)) (= (type $h@@47) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1LL |#$T0@@277| |#$R@@303|) $h@@47) ($IsAlloc |f#0@@64| (Tclass._System.___hFunc1LL |#$T0@@277| |#$R@@303|) $h@@47))) :qid |unknown.0:0| :skolemid |1248| :pattern ( ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1LL |#$T0@@277| |#$R@@303|) $h@@47)) )))
(assert (forall ((arg0@@362 T@U) (arg1@@144 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL arg0@@362 arg1@@144)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL| :pattern ( (Tclass._System.___hTotalFunc1LL arg0@@362 arg1@@144)) )))
(assert (forall ((|#$T0@@278| T@U) (|#$R@@304| T@U) ) (!  (=> (and (= (type |#$T0@@278|) TyType) (= (type |#$R@@304|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LL |#$T0@@278| |#$R@@304|)) Tagclass._System.___hTotalFunc1LL) (= (TagFamily (Tclass._System.___hTotalFunc1LL |#$T0@@278| |#$R@@304|)) |tytagFamily$_#TotalFunc1LL|))) :qid |unknown.0:0| :skolemid |1249| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@278| |#$R@@304|)) )))
(assert (forall ((arg0@@363 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_0 arg0@@363)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_0| :pattern ( (Tclass._System.___hTotalFunc1LL_0 arg0@@363)) )))
(assert (forall ((|#$T0@@279| T@U) (|#$R@@305| T@U) ) (!  (=> (and (= (type |#$T0@@279|) TyType) (= (type |#$R@@305|) TyType)) (= (Tclass._System.___hTotalFunc1LL_0 (Tclass._System.___hTotalFunc1LL |#$T0@@279| |#$R@@305|)) |#$T0@@279|)) :qid |unknown.0:0| :skolemid |1250| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@279| |#$R@@305|)) )))
(assert (forall ((arg0@@364 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_1 arg0@@364)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_1| :pattern ( (Tclass._System.___hTotalFunc1LL_1 arg0@@364)) )))
(assert (forall ((|#$T0@@280| T@U) (|#$R@@306| T@U) ) (!  (=> (and (= (type |#$T0@@280|) TyType) (= (type |#$R@@306|) TyType)) (= (Tclass._System.___hTotalFunc1LL_1 (Tclass._System.___hTotalFunc1LL |#$T0@@280| |#$R@@306|)) |#$R@@306|)) :qid |unknown.0:0| :skolemid |1251| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@280| |#$R@@306|)) )))
(assert (forall ((|#$T0@@281| T@U) (|#$R@@307| T@U) (bx@@106 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@281|) TyType) (= (type |#$R@@307|) TyType)) (= (type bx@@106) BoxType)) ($IsBox bx@@106 (Tclass._System.___hTotalFunc1LL |#$T0@@281| |#$R@@307|))) (and (= ($Box ($Unbox HandleTypeType bx@@106)) bx@@106) ($Is ($Unbox HandleTypeType bx@@106) (Tclass._System.___hTotalFunc1LL |#$T0@@281| |#$R@@307|)))) :qid |unknown.0:0| :skolemid |1252| :pattern ( ($IsBox bx@@106 (Tclass._System.___hTotalFunc1LL |#$T0@@281| |#$R@@307|))) )))
(assert (forall ((|#$T0@@282| T@U) (|#$R@@308| T@U) (|f#0@@65| T@U) ) (!  (=> (and (and (= (type |#$T0@@282|) TyType) (= (type |#$R@@308|) TyType)) (= (type |f#0@@65|) HandleTypeType)) (= ($Is |f#0@@65| (Tclass._System.___hTotalFunc1LL |#$T0@@282| |#$R@@308|))  (and ($Is |f#0@@65| (Tclass._System.___hPartialFunc1LL |#$T0@@282| |#$R@@308|)) (forall ((|x0#0@@28| T@U) ) (!  (=> (and (= (type |x0#0@@28|) BoxType) ($IsBox |x0#0@@28| |#$T0@@282|)) (Requires1 |#$T0@@282| |#$R@@308| $OneHeap |f#0@@65| |x0#0@@28|)) :qid |unknown.0:0| :skolemid |1253| :no-pattern (type |x0#0@@28|) :no-pattern (U_2_int |x0#0@@28|) :no-pattern (U_2_bool |x0#0@@28|) ))))) :qid |unknown.0:0| :skolemid |1254| :pattern ( ($Is |f#0@@65| (Tclass._System.___hTotalFunc1LL |#$T0@@282| |#$R@@308|))) )))
(assert (forall ((|#$T0@@283| T@U) (|#$R@@309| T@U) (|f#0@@66| T@U) ($h@@48 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@283|) TyType) (= (type |#$R@@309|) TyType)) (= (type |f#0@@66|) HandleTypeType)) (= (type $h@@48) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1LL |#$T0@@283| |#$R@@309|) $h@@48) ($IsAlloc |f#0@@66| (Tclass._System.___hPartialFunc1LL |#$T0@@283| |#$R@@309|) $h@@48))) :qid |unknown.0:0| :skolemid |1255| :pattern ( ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1LL |#$T0@@283| |#$R@@309|) $h@@48)) )))
(assert (forall ((arg0@@365 T@U) (arg1@@145 Int) (arg2@@80 Int) ) (! (= (type (|#DList.Node.Node| arg0@@365 arg1@@145 arg2@@80)) DatatypeTypeType) :qid |funType:#DList.Node.Node| :pattern ( (|#DList.Node.Node| arg0@@365 arg1@@145 arg2@@80)) )))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| Int) (|a#23#2#0| Int) ) (!  (=> (= (type |a#23#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#DList.Node.Node| |a#23#0#0| |a#23#1#0| |a#23#2#0|)) |##DList.Node.Node|)) :qid |LinearDListidfy.38:27| :skolemid |1256| :pattern ( (|#DList.Node.Node| |a#23#0#0| |a#23#1#0| |a#23#2#0|)) )))
(assert (forall ((d@@16 T@U) ) (!  (=> (= (type d@@16) DatatypeTypeType) (= (DList.Node.Node_q d@@16) (= (DatatypeCtorId d@@16) |##DList.Node.Node|))) :qid |unknown.0:0| :skolemid |1257| :pattern ( (DList.Node.Node_q d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) (DList.Node.Node_q d@@17)) (exists ((|a#24#0#0| T@U) (|a#24#1#0| Int) (|a#24#2#0| Int) ) (!  (and (= (type |a#24#0#0|) DatatypeTypeType) (= d@@17 (|#DList.Node.Node| |a#24#0#0| |a#24#1#0| |a#24#2#0|))) :qid |LinearDListidfy.38:27| :skolemid |1258| :no-pattern (type |a#24#0#0|) :no-pattern (U_2_int |a#24#0#0|) :no-pattern (U_2_bool |a#24#0#0|) ))) :qid |unknown.0:0| :skolemid |1259| :pattern ( (DList.Node.Node_q d@@17)) )))
(assert (forall ((arg0@@366 T@U) ) (! (= (type (Tclass.Options.Option arg0@@366)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@366)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (and (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option) (= (TagFamily (Tclass.Options.Option Options.Option$V)) tytagFamily$Option))) :qid |unknown.0:0| :skolemid |1260| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@367 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@367)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@367)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1261| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@107 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@107) BoxType)) ($IsBox bx@@107 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@107)) bx@@107) ($Is ($Unbox DatatypeTypeType bx@@107) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1262| :pattern ( ($IsBox bx@@107 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@108 T@U) ) (!  (=> (and (= (type bx@@108) BoxType) ($IsBox bx@@108 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@108)) bx@@108) ($Is ($Unbox intType bx@@108) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1263| :pattern ( ($IsBox bx@@108 Tclass.NativeTypes.uint64)) )))
(assert (forall ((arg0@@368 T@U) ) (! (= (type (Tclass.DList.Node arg0@@368)) TyType) :qid |funType:Tclass.DList.Node| :pattern ( (Tclass.DList.Node arg0@@368)) )))
(assert (forall ((DList.Node$A T@U) ) (!  (=> (= (type DList.Node$A) TyType) (and (= (Tag (Tclass.DList.Node DList.Node$A)) Tagclass.DList.Node) (= (TagFamily (Tclass.DList.Node DList.Node$A)) tytagFamily$Node))) :qid |unknown.0:0| :skolemid |1264| :pattern ( (Tclass.DList.Node DList.Node$A)) )))
(assert (forall ((arg0@@369 T@U) ) (! (= (type (Tclass.DList.Node_0 arg0@@369)) TyType) :qid |funType:Tclass.DList.Node_0| :pattern ( (Tclass.DList.Node_0 arg0@@369)) )))
(assert (forall ((DList.Node$A@@0 T@U) ) (!  (=> (= (type DList.Node$A@@0) TyType) (= (Tclass.DList.Node_0 (Tclass.DList.Node DList.Node$A@@0)) DList.Node$A@@0)) :qid |unknown.0:0| :skolemid |1265| :pattern ( (Tclass.DList.Node DList.Node$A@@0)) )))
(assert (forall ((DList.Node$A@@1 T@U) (bx@@109 T@U) ) (!  (=> (and (and (= (type DList.Node$A@@1) TyType) (= (type bx@@109) BoxType)) ($IsBox bx@@109 (Tclass.DList.Node DList.Node$A@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@109)) bx@@109) ($Is ($Unbox DatatypeTypeType bx@@109) (Tclass.DList.Node DList.Node$A@@1)))) :qid |unknown.0:0| :skolemid |1266| :pattern ( ($IsBox bx@@109 (Tclass.DList.Node DList.Node$A@@1))) )))
(assert (forall ((DList.Node$A@@2 T@U) (|a#25#0#0| T@U) (|a#25#1#0| Int) (|a#25#2#0| Int) ) (!  (=> (and (= (type DList.Node$A@@2) TyType) (= (type |a#25#0#0|) DatatypeTypeType)) (= ($Is (|#DList.Node.Node| |a#25#0#0| |a#25#1#0| |a#25#2#0|) (Tclass.DList.Node DList.Node$A@@2))  (and (and ($Is |a#25#0#0| (Tclass.Options.Option DList.Node$A@@2)) ($Is (int_2_U |a#25#1#0|) Tclass.NativeTypes.uint64)) ($Is (int_2_U |a#25#2#0|) Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |1267| :pattern ( ($Is (|#DList.Node.Node| |a#25#0#0| |a#25#1#0| |a#25#2#0|) (Tclass.DList.Node DList.Node$A@@2))) )))
(assert (forall ((DList.Node$A@@3 T@U) (|a#26#0#0| T@U) (|a#26#1#0| Int) (|a#26#2#0| Int) ($h@@49 T@U) ) (!  (=> (and (and (and (= (type DList.Node$A@@3) TyType) (= (type |a#26#0#0|) DatatypeTypeType)) (= (type $h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@49)) (= ($IsAlloc (|#DList.Node.Node| |a#26#0#0| |a#26#1#0| |a#26#2#0|) (Tclass.DList.Node DList.Node$A@@3) $h@@49)  (and (and ($IsAlloc |a#26#0#0| (Tclass.Options.Option DList.Node$A@@3) $h@@49) ($IsAlloc (int_2_U |a#26#1#0|) Tclass.NativeTypes.uint64 $h@@49)) ($IsAlloc (int_2_U |a#26#2#0|) Tclass.NativeTypes.uint64 $h@@49)))) :qid |unknown.0:0| :skolemid |1268| :pattern ( ($IsAlloc (|#DList.Node.Node| |a#26#0#0| |a#26#1#0| |a#26#2#0|) (Tclass.DList.Node DList.Node$A@@3) $h@@49)) )))
(assert (forall ((arg0@@370 T@U) ) (! (= (type (DList.Node.data arg0@@370)) DatatypeTypeType) :qid |funType:DList.Node.data| :pattern ( (DList.Node.data arg0@@370)) )))
(assert (forall ((d@@18 T@U) (DList.Node$A@@4 T@U) ($h@@50 T@U) ) (!  (=> (and (and (and (= (type d@@18) DatatypeTypeType) (= (type DList.Node$A@@4) TyType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@50) (and (DList.Node.Node_q d@@18) ($IsAlloc d@@18 (Tclass.DList.Node DList.Node$A@@4) $h@@50)))) ($IsAlloc (DList.Node.data d@@18) (Tclass.Options.Option DList.Node$A@@4) $h@@50)) :qid |unknown.0:0| :skolemid |1269| :pattern ( ($IsAlloc (DList.Node.data d@@18) (Tclass.Options.Option DList.Node$A@@4) $h@@50)) )))
(assert (forall ((d@@19 T@U) ($h@@51 T@U) ) (!  (=> (and (and (= (type d@@19) DatatypeTypeType) (= (type $h@@51) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@51) (and (DList.Node.Node_q d@@19) (exists ((DList.Node$A@@5 T@U) ) (!  (and (= (type DList.Node$A@@5) TyType) ($IsAlloc d@@19 (Tclass.DList.Node DList.Node$A@@5) $h@@51)) :qid |unknown.0:0| :skolemid |1270| :pattern ( ($IsAlloc d@@19 (Tclass.DList.Node DList.Node$A@@5) $h@@51)) ))))) ($IsAlloc (int_2_U (DList.Node.next d@@19)) Tclass.NativeTypes.uint64 $h@@51)) :qid |unknown.0:0| :skolemid |1271| :pattern ( ($IsAlloc (int_2_U (DList.Node.next d@@19)) Tclass.NativeTypes.uint64 $h@@51)) )))
(assert (forall ((d@@20 T@U) ($h@@52 T@U) ) (!  (=> (and (and (= (type d@@20) DatatypeTypeType) (= (type $h@@52) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@52) (and (DList.Node.Node_q d@@20) (exists ((DList.Node$A@@6 T@U) ) (!  (and (= (type DList.Node$A@@6) TyType) ($IsAlloc d@@20 (Tclass.DList.Node DList.Node$A@@6) $h@@52)) :qid |unknown.0:0| :skolemid |1272| :pattern ( ($IsAlloc d@@20 (Tclass.DList.Node DList.Node$A@@6) $h@@52)) ))))) ($IsAlloc (int_2_U (DList.Node.prev d@@20)) Tclass.NativeTypes.uint64 $h@@52)) :qid |unknown.0:0| :skolemid |1273| :pattern ( ($IsAlloc (int_2_U (DList.Node.prev d@@20)) Tclass.NativeTypes.uint64 $h@@52)) )))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| Int) (|a#27#2#0| Int) ) (!  (=> (= (type |a#27#0#0|) DatatypeTypeType) (= (|#DList.Node.Node| (Lit |a#27#0#0|) (LitInt |a#27#1#0|) (LitInt |a#27#2#0|)) (Lit (|#DList.Node.Node| |a#27#0#0| |a#27#1#0| |a#27#2#0|)))) :qid |LinearDListidfy.38:27| :skolemid |1274| :pattern ( (|#DList.Node.Node| (Lit |a#27#0#0|) (LitInt |a#27#1#0|) (LitInt |a#27#2#0|))) )))
(assert (forall ((|a#28#0#0| T@U) (|a#28#1#0| Int) (|a#28#2#0| Int) ) (!  (=> (= (type |a#28#0#0|) DatatypeTypeType) (= (DList.Node.data (|#DList.Node.Node| |a#28#0#0| |a#28#1#0| |a#28#2#0|)) |a#28#0#0|)) :qid |LinearDListidfy.38:27| :skolemid |1275| :pattern ( (|#DList.Node.Node| |a#28#0#0| |a#28#1#0| |a#28#2#0|)) )))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| Int) (|a#29#2#0| Int) ) (!  (=> (= (type |a#29#0#0|) DatatypeTypeType) (< (DtRank |a#29#0#0|) (DtRank (|#DList.Node.Node| |a#29#0#0| |a#29#1#0| |a#29#2#0|)))) :qid |LinearDListidfy.38:27| :skolemid |1276| :pattern ( (|#DList.Node.Node| |a#29#0#0| |a#29#1#0| |a#29#2#0|)) )))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| Int) (|a#30#2#0| Int) ) (!  (=> (= (type |a#30#0#0|) DatatypeTypeType) (= (DList.Node.next (|#DList.Node.Node| |a#30#0#0| |a#30#1#0| |a#30#2#0|)) |a#30#1#0|)) :qid |LinearDListidfy.38:27| :skolemid |1277| :pattern ( (|#DList.Node.Node| |a#30#0#0| |a#30#1#0| |a#30#2#0|)) )))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| Int) (|a#31#2#0| Int) ) (!  (=> (= (type |a#31#0#0|) DatatypeTypeType) (= (DList.Node.prev (|#DList.Node.Node| |a#31#0#0| |a#31#1#0| |a#31#2#0|)) |a#31#2#0|)) :qid |LinearDListidfy.38:27| :skolemid |1278| :pattern ( (|#DList.Node.Node| |a#31#0#0| |a#31#1#0| |a#31#2#0|)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) (|$IsA#DList.Node| d@@21)) (DList.Node.Node_q d@@21)) :qid |unknown.0:0| :skolemid |1279| :pattern ( (|$IsA#DList.Node| d@@21)) )))
(assert (forall ((DList.Node$A@@7 T@U) (d@@22 T@U) ) (!  (=> (and (and (= (type DList.Node$A@@7) TyType) (= (type d@@22) DatatypeTypeType)) ($Is d@@22 (Tclass.DList.Node DList.Node$A@@7))) (DList.Node.Node_q d@@22)) :qid |unknown.0:0| :skolemid |1280| :pattern ( (DList.Node.Node_q d@@22) ($Is d@@22 (Tclass.DList.Node DList.Node$A@@7))) )))
(assert (forall ((a@@118 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@118) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) true) (= (|DList.Node#Equal| a@@118 b@@67)  (and (and (|Options.Option#Equal| (DList.Node.data a@@118) (DList.Node.data b@@67)) (= (DList.Node.next a@@118) (DList.Node.next b@@67))) (= (DList.Node.prev a@@118) (DList.Node.prev b@@67))))) :qid |unknown.0:0| :skolemid |1281| :pattern ( (|DList.Node#Equal| a@@118 b@@67)) )))
(assert (forall ((a@@119 T@U) (b@@68 T@U) ) (!  (=> (and (= (type a@@119) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (= (|DList.Node#Equal| a@@119 b@@68) (= a@@119 b@@68))) :qid |unknown.0:0| :skolemid |1282| :pattern ( (|DList.Node#Equal| a@@119 b@@68)) )))
(assert (forall ((arg0@@371 T@U) (arg1@@146 Int) (arg2@@81 T@U) (arg3@@46 T@U) (arg4@@29 T@U) ) (! (= (type (|#DList.DList.DList| arg0@@371 arg1@@146 arg2@@81 arg3@@46 arg4@@29)) DatatypeTypeType) :qid |funType:#DList.DList.DList| :pattern ( (|#DList.DList.DList| arg0@@371 arg1@@146 arg2@@81 arg3@@46 arg4@@29)) )))
(assert (forall ((|a#32#0#0| T@U) (|a#32#1#0| Int) (|a#32#2#0| T@U) (|a#32#3#0| T@U) (|a#32#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#32#0#0|) (SeqType BoxType)) (= (type |a#32#2#0|) (SeqType BoxType))) (= (type |a#32#3#0|) (SeqType BoxType))) (= (type |a#32#4#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#DList.DList.DList| |a#32#0#0| |a#32#1#0| |a#32#2#0| |a#32#3#0| |a#32#4#0|)) |##DList.DList.DList|)) :qid |LinearDListidfy.71:12| :skolemid |1283| :pattern ( (|#DList.DList.DList| |a#32#0#0| |a#32#1#0| |a#32#2#0| |a#32#3#0| |a#32#4#0|)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (= (type d@@23) DatatypeTypeType) (= (DList.DList.DList_q d@@23) (= (DatatypeCtorId d@@23) |##DList.DList.DList|))) :qid |unknown.0:0| :skolemid |1284| :pattern ( (DList.DList.DList_q d@@23)) )))
(assert (forall ((d@@24 T@U) ) (!  (=> (and (= (type d@@24) DatatypeTypeType) (DList.DList.DList_q d@@24)) (exists ((|a#33#0#0| T@U) (|a#33#1#0| Int) (|a#33#2#0| T@U) (|a#33#3#0| T@U) (|a#33#4#0| T@U) ) (!  (and (and (and (and (= (type |a#33#0#0|) (SeqType BoxType)) (= (type |a#33#2#0|) (SeqType BoxType))) (= (type |a#33#3#0|) (SeqType BoxType))) (= (type |a#33#4#0|) (SeqType BoxType))) (= d@@24 (|#DList.DList.DList| |a#33#0#0| |a#33#1#0| |a#33#2#0| |a#33#3#0| |a#33#4#0|))) :qid |LinearDListidfy.71:12| :skolemid |1285| :no-pattern (type |a#33#0#0|) :no-pattern (type |a#33#2#0|) :no-pattern (type |a#33#3#0|) :no-pattern (type |a#33#4#0|) :no-pattern (U_2_int |a#33#0#0|) :no-pattern (U_2_bool |a#33#0#0|) :no-pattern (U_2_int |a#33#2#0|) :no-pattern (U_2_bool |a#33#2#0|) :no-pattern (U_2_int |a#33#3#0|) :no-pattern (U_2_bool |a#33#3#0|) :no-pattern (U_2_int |a#33#4#0|) :no-pattern (U_2_bool |a#33#4#0|) ))) :qid |unknown.0:0| :skolemid |1286| :pattern ( (DList.DList.DList_q d@@24)) )))
(assert (forall ((arg0@@372 T@U) ) (! (= (type (Tclass.DList.DList arg0@@372)) TyType) :qid |funType:Tclass.DList.DList| :pattern ( (Tclass.DList.DList arg0@@372)) )))
(assert (forall ((DList.DList$A T@U) ) (!  (=> (= (type DList.DList$A) TyType) (and (= (Tag (Tclass.DList.DList DList.DList$A)) Tagclass.DList.DList) (= (TagFamily (Tclass.DList.DList DList.DList$A)) tytagFamily$DList))) :qid |unknown.0:0| :skolemid |1287| :pattern ( (Tclass.DList.DList DList.DList$A)) )))
(assert (forall ((arg0@@373 T@U) ) (! (= (type (Tclass.DList.DList_0 arg0@@373)) TyType) :qid |funType:Tclass.DList.DList_0| :pattern ( (Tclass.DList.DList_0 arg0@@373)) )))
(assert (forall ((DList.DList$A@@0 T@U) ) (!  (=> (= (type DList.DList$A@@0) TyType) (= (Tclass.DList.DList_0 (Tclass.DList.DList DList.DList$A@@0)) DList.DList$A@@0)) :qid |unknown.0:0| :skolemid |1288| :pattern ( (Tclass.DList.DList DList.DList$A@@0)) )))
(assert (forall ((DList.DList$A@@1 T@U) (bx@@110 T@U) ) (!  (=> (and (and (= (type DList.DList$A@@1) TyType) (= (type bx@@110) BoxType)) ($IsBox bx@@110 (Tclass.DList.DList DList.DList$A@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@110)) bx@@110) ($Is ($Unbox DatatypeTypeType bx@@110) (Tclass.DList.DList DList.DList$A@@1)))) :qid |unknown.0:0| :skolemid |1289| :pattern ( ($IsBox bx@@110 (Tclass.DList.DList DList.DList$A@@1))) )))
(assert (forall ((DList.DList$A@@2 T@U) (|a#34#0#0| T@U) (|a#34#1#0| Int) (|a#34#2#0| T@U) (|a#34#3#0| T@U) (|a#34#4#0| T@U) ) (!  (=> (and (and (and (and (= (type DList.DList$A@@2) TyType) (= (type |a#34#0#0|) (SeqType BoxType))) (= (type |a#34#2#0|) (SeqType BoxType))) (= (type |a#34#3#0|) (SeqType BoxType))) (= (type |a#34#4#0|) (SeqType BoxType))) (= ($Is (|#DList.DList.DList| |a#34#0#0| |a#34#1#0| |a#34#2#0| |a#34#3#0| |a#34#4#0|) (Tclass.DList.DList DList.DList$A@@2))  (and (and (and (and ($Is |a#34#0#0| (TSeq (Tclass.DList.Node DList.DList$A@@2))) ($Is (int_2_U |a#34#1#0|) Tclass.NativeTypes.uint64)) ($Is |a#34#2#0| (TSeq DList.DList$A@@2))) ($Is |a#34#3#0| (TSeq TInt))) ($Is |a#34#4#0| (TSeq TInt))))) :qid |unknown.0:0| :skolemid |1290| :pattern ( ($Is (|#DList.DList.DList| |a#34#0#0| |a#34#1#0| |a#34#2#0| |a#34#3#0| |a#34#4#0|) (Tclass.DList.DList DList.DList$A@@2))) )))
(assert (forall ((DList.DList$A@@3 T@U) (|a#35#0#0| T@U) (|a#35#1#0| Int) (|a#35#2#0| T@U) (|a#35#3#0| T@U) (|a#35#4#0| T@U) ($h@@53 T@U) ) (!  (=> (and (and (and (and (and (and (= (type DList.DList$A@@3) TyType) (= (type |a#35#0#0|) (SeqType BoxType))) (= (type |a#35#2#0|) (SeqType BoxType))) (= (type |a#35#3#0|) (SeqType BoxType))) (= (type |a#35#4#0|) (SeqType BoxType))) (= (type $h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@53)) (= ($IsAlloc (|#DList.DList.DList| |a#35#0#0| |a#35#1#0| |a#35#2#0| |a#35#3#0| |a#35#4#0|) (Tclass.DList.DList DList.DList$A@@3) $h@@53)  (and (and (and (and ($IsAlloc |a#35#0#0| (TSeq (Tclass.DList.Node DList.DList$A@@3)) $h@@53) ($IsAlloc (int_2_U |a#35#1#0|) Tclass.NativeTypes.uint64 $h@@53)) ($IsAlloc |a#35#2#0| (TSeq DList.DList$A@@3) $h@@53)) ($IsAlloc |a#35#3#0| (TSeq TInt) $h@@53)) ($IsAlloc |a#35#4#0| (TSeq TInt) $h@@53)))) :qid |unknown.0:0| :skolemid |1291| :pattern ( ($IsAlloc (|#DList.DList.DList| |a#35#0#0| |a#35#1#0| |a#35#2#0| |a#35#3#0| |a#35#4#0|) (Tclass.DList.DList DList.DList$A@@3) $h@@53)) )))
(assert (forall ((arg0@@374 T@U) ) (! (= (type (DList.DList.nodes arg0@@374)) (SeqType BoxType)) :qid |funType:DList.DList.nodes| :pattern ( (DList.DList.nodes arg0@@374)) )))
(assert (forall ((d@@25 T@U) (DList.DList$A@@4 T@U) ($h@@54 T@U) ) (!  (=> (and (and (and (= (type d@@25) DatatypeTypeType) (= (type DList.DList$A@@4) TyType)) (= (type $h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@54) (and (DList.DList.DList_q d@@25) ($IsAlloc d@@25 (Tclass.DList.DList DList.DList$A@@4) $h@@54)))) ($IsAlloc (DList.DList.nodes d@@25) (TSeq (Tclass.DList.Node DList.DList$A@@4)) $h@@54)) :qid |unknown.0:0| :skolemid |1292| :pattern ( ($IsAlloc (DList.DList.nodes d@@25) (TSeq (Tclass.DList.Node DList.DList$A@@4)) $h@@54)) )))
(assert (forall ((d@@26 T@U) ($h@@55 T@U) ) (!  (=> (and (and (= (type d@@26) DatatypeTypeType) (= (type $h@@55) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@55) (and (DList.DList.DList_q d@@26) (exists ((DList.DList$A@@5 T@U) ) (!  (and (= (type DList.DList$A@@5) TyType) ($IsAlloc d@@26 (Tclass.DList.DList DList.DList$A@@5) $h@@55)) :qid |unknown.0:0| :skolemid |1293| :pattern ( ($IsAlloc d@@26 (Tclass.DList.DList DList.DList$A@@5) $h@@55)) ))))) ($IsAlloc (int_2_U (DList.DList.freeStack d@@26)) Tclass.NativeTypes.uint64 $h@@55)) :qid |unknown.0:0| :skolemid |1294| :pattern ( ($IsAlloc (int_2_U (DList.DList.freeStack d@@26)) Tclass.NativeTypes.uint64 $h@@55)) )))
(assert (forall ((arg0@@375 T@U) ) (! (= (type (DList.DList.s arg0@@375)) (SeqType BoxType)) :qid |funType:DList.DList.s| :pattern ( (DList.DList.s arg0@@375)) )))
(assert (forall ((d@@27 T@U) (DList.DList$A@@6 T@U) ($h@@56 T@U) ) (!  (=> (and (and (and (= (type d@@27) DatatypeTypeType) (= (type DList.DList$A@@6) TyType)) (= (type $h@@56) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@56) (and (DList.DList.DList_q d@@27) ($IsAlloc d@@27 (Tclass.DList.DList DList.DList$A@@6) $h@@56)))) ($IsAlloc (DList.DList.s d@@27) (TSeq DList.DList$A@@6) $h@@56)) :qid |unknown.0:0| :skolemid |1295| :pattern ( ($IsAlloc (DList.DList.s d@@27) (TSeq DList.DList$A@@6) $h@@56)) )))
(assert (forall ((arg0@@376 T@U) ) (! (= (type (DList.DList.f arg0@@376)) (SeqType BoxType)) :qid |funType:DList.DList.f| :pattern ( (DList.DList.f arg0@@376)) )))
(assert (forall ((d@@28 T@U) ($h@@57 T@U) ) (!  (=> (and (and (= (type d@@28) DatatypeTypeType) (= (type $h@@57) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@57) (and (DList.DList.DList_q d@@28) (exists ((DList.DList$A@@7 T@U) ) (!  (and (= (type DList.DList$A@@7) TyType) ($IsAlloc d@@28 (Tclass.DList.DList DList.DList$A@@7) $h@@57)) :qid |unknown.0:0| :skolemid |1296| :pattern ( ($IsAlloc d@@28 (Tclass.DList.DList DList.DList$A@@7) $h@@57)) ))))) ($IsAlloc (DList.DList.f d@@28) (TSeq TInt) $h@@57)) :qid |unknown.0:0| :skolemid |1297| :pattern ( ($IsAlloc (DList.DList.f d@@28) (TSeq TInt) $h@@57)) )))
(assert (forall ((arg0@@377 T@U) ) (! (= (type (DList.DList.g arg0@@377)) (SeqType BoxType)) :qid |funType:DList.DList.g| :pattern ( (DList.DList.g arg0@@377)) )))
(assert (forall ((d@@29 T@U) ($h@@58 T@U) ) (!  (=> (and (and (= (type d@@29) DatatypeTypeType) (= (type $h@@58) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@58) (and (DList.DList.DList_q d@@29) (exists ((DList.DList$A@@8 T@U) ) (!  (and (= (type DList.DList$A@@8) TyType) ($IsAlloc d@@29 (Tclass.DList.DList DList.DList$A@@8) $h@@58)) :qid |unknown.0:0| :skolemid |1298| :pattern ( ($IsAlloc d@@29 (Tclass.DList.DList DList.DList$A@@8) $h@@58)) ))))) ($IsAlloc (DList.DList.g d@@29) (TSeq TInt) $h@@58)) :qid |unknown.0:0| :skolemid |1299| :pattern ( ($IsAlloc (DList.DList.g d@@29) (TSeq TInt) $h@@58)) )))
(assert (forall ((|a#36#0#0| T@U) (|a#36#1#0| Int) (|a#36#2#0| T@U) (|a#36#3#0| T@U) (|a#36#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#36#0#0|) (SeqType BoxType)) (= (type |a#36#2#0|) (SeqType BoxType))) (= (type |a#36#3#0|) (SeqType BoxType))) (= (type |a#36#4#0|) (SeqType BoxType))) (= (|#DList.DList.DList| (Lit |a#36#0#0|) (LitInt |a#36#1#0|) (Lit |a#36#2#0|) (Lit |a#36#3#0|) (Lit |a#36#4#0|)) (Lit (|#DList.DList.DList| |a#36#0#0| |a#36#1#0| |a#36#2#0| |a#36#3#0| |a#36#4#0|)))) :qid |LinearDListidfy.71:12| :skolemid |1300| :pattern ( (|#DList.DList.DList| (Lit |a#36#0#0|) (LitInt |a#36#1#0|) (Lit |a#36#2#0|) (Lit |a#36#3#0|) (Lit |a#36#4#0|))) )))
(assert (forall ((|a#37#0#0| T@U) (|a#37#1#0| Int) (|a#37#2#0| T@U) (|a#37#3#0| T@U) (|a#37#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#37#0#0|) (SeqType BoxType)) (= (type |a#37#2#0|) (SeqType BoxType))) (= (type |a#37#3#0|) (SeqType BoxType))) (= (type |a#37#4#0|) (SeqType BoxType))) (= (DList.DList.nodes (|#DList.DList.DList| |a#37#0#0| |a#37#1#0| |a#37#2#0| |a#37#3#0| |a#37#4#0|)) |a#37#0#0|)) :qid |LinearDListidfy.71:12| :skolemid |1301| :pattern ( (|#DList.DList.DList| |a#37#0#0| |a#37#1#0| |a#37#2#0| |a#37#3#0| |a#37#4#0|)) )))
(assert (forall ((|a#38#0#0| T@U) (|a#38#1#0| Int) (|a#38#2#0| T@U) (|a#38#3#0| T@U) (|a#38#4#0| T@U) (i@@25 Int) ) (!  (=> (and (and (and (and (= (type |a#38#0#0|) (SeqType BoxType)) (= (type |a#38#2#0|) (SeqType BoxType))) (= (type |a#38#3#0|) (SeqType BoxType))) (= (type |a#38#4#0|) (SeqType BoxType))) (and (<= 0 i@@25) (< i@@25 (|Seq#Length| |a#38#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#38#0#0| i@@25))) (DtRank (|#DList.DList.DList| |a#38#0#0| |a#38#1#0| |a#38#2#0| |a#38#3#0| |a#38#4#0|)))) :qid |LinearDListidfy.71:12| :skolemid |1302| :pattern ( (|Seq#Index| |a#38#0#0| i@@25) (|#DList.DList.DList| |a#38#0#0| |a#38#1#0| |a#38#2#0| |a#38#3#0| |a#38#4#0|)) )))
(assert (forall ((|a#39#0#0| T@U) (|a#39#1#0| Int) (|a#39#2#0| T@U) (|a#39#3#0| T@U) (|a#39#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#39#0#0|) (SeqType BoxType)) (= (type |a#39#2#0|) (SeqType BoxType))) (= (type |a#39#3#0|) (SeqType BoxType))) (= (type |a#39#4#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#39#0#0|) (DtRank (|#DList.DList.DList| |a#39#0#0| |a#39#1#0| |a#39#2#0| |a#39#3#0| |a#39#4#0|)))) :qid |LinearDListidfy.71:12| :skolemid |1303| :pattern ( (|#DList.DList.DList| |a#39#0#0| |a#39#1#0| |a#39#2#0| |a#39#3#0| |a#39#4#0|)) )))
(assert (forall ((|a#40#0#0| T@U) (|a#40#1#0| Int) (|a#40#2#0| T@U) (|a#40#3#0| T@U) (|a#40#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#40#0#0|) (SeqType BoxType)) (= (type |a#40#2#0|) (SeqType BoxType))) (= (type |a#40#3#0|) (SeqType BoxType))) (= (type |a#40#4#0|) (SeqType BoxType))) (= (DList.DList.freeStack (|#DList.DList.DList| |a#40#0#0| |a#40#1#0| |a#40#2#0| |a#40#3#0| |a#40#4#0|)) |a#40#1#0|)) :qid |LinearDListidfy.71:12| :skolemid |1304| :pattern ( (|#DList.DList.DList| |a#40#0#0| |a#40#1#0| |a#40#2#0| |a#40#3#0| |a#40#4#0|)) )))
(assert (forall ((|a#41#0#0| T@U) (|a#41#1#0| Int) (|a#41#2#0| T@U) (|a#41#3#0| T@U) (|a#41#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#41#0#0|) (SeqType BoxType)) (= (type |a#41#2#0|) (SeqType BoxType))) (= (type |a#41#3#0|) (SeqType BoxType))) (= (type |a#41#4#0|) (SeqType BoxType))) (= (DList.DList.s (|#DList.DList.DList| |a#41#0#0| |a#41#1#0| |a#41#2#0| |a#41#3#0| |a#41#4#0|)) |a#41#2#0|)) :qid |LinearDListidfy.71:12| :skolemid |1305| :pattern ( (|#DList.DList.DList| |a#41#0#0| |a#41#1#0| |a#41#2#0| |a#41#3#0| |a#41#4#0|)) )))
(assert (forall ((|a#42#0#0| T@U) (|a#42#1#0| Int) (|a#42#2#0| T@U) (|a#42#3#0| T@U) (|a#42#4#0| T@U) (i@@26 Int) ) (!  (=> (and (and (and (and (= (type |a#42#0#0|) (SeqType BoxType)) (= (type |a#42#2#0|) (SeqType BoxType))) (= (type |a#42#3#0|) (SeqType BoxType))) (= (type |a#42#4#0|) (SeqType BoxType))) (and (<= 0 i@@26) (< i@@26 (|Seq#Length| |a#42#2#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#42#2#0| i@@26))) (DtRank (|#DList.DList.DList| |a#42#0#0| |a#42#1#0| |a#42#2#0| |a#42#3#0| |a#42#4#0|)))) :qid |LinearDListidfy.71:12| :skolemid |1306| :pattern ( (|Seq#Index| |a#42#2#0| i@@26) (|#DList.DList.DList| |a#42#0#0| |a#42#1#0| |a#42#2#0| |a#42#3#0| |a#42#4#0|)) )))
(assert (forall ((|a#43#0#0| T@U) (|a#43#1#0| Int) (|a#43#2#0| T@U) (|a#43#3#0| T@U) (|a#43#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#43#0#0|) (SeqType BoxType)) (= (type |a#43#2#0|) (SeqType BoxType))) (= (type |a#43#3#0|) (SeqType BoxType))) (= (type |a#43#4#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#43#2#0|) (DtRank (|#DList.DList.DList| |a#43#0#0| |a#43#1#0| |a#43#2#0| |a#43#3#0| |a#43#4#0|)))) :qid |LinearDListidfy.71:12| :skolemid |1307| :pattern ( (|#DList.DList.DList| |a#43#0#0| |a#43#1#0| |a#43#2#0| |a#43#3#0| |a#43#4#0|)) )))
(assert (forall ((|a#44#0#0| T@U) (|a#44#1#0| Int) (|a#44#2#0| T@U) (|a#44#3#0| T@U) (|a#44#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#44#0#0|) (SeqType BoxType)) (= (type |a#44#2#0|) (SeqType BoxType))) (= (type |a#44#3#0|) (SeqType BoxType))) (= (type |a#44#4#0|) (SeqType BoxType))) (= (DList.DList.f (|#DList.DList.DList| |a#44#0#0| |a#44#1#0| |a#44#2#0| |a#44#3#0| |a#44#4#0|)) |a#44#3#0|)) :qid |LinearDListidfy.71:12| :skolemid |1308| :pattern ( (|#DList.DList.DList| |a#44#0#0| |a#44#1#0| |a#44#2#0| |a#44#3#0| |a#44#4#0|)) )))
(assert (forall ((|a#45#0#0| T@U) (|a#45#1#0| Int) (|a#45#2#0| T@U) (|a#45#3#0| T@U) (|a#45#4#0| T@U) (i@@27 Int) ) (!  (=> (and (and (and (and (= (type |a#45#0#0|) (SeqType BoxType)) (= (type |a#45#2#0|) (SeqType BoxType))) (= (type |a#45#3#0|) (SeqType BoxType))) (= (type |a#45#4#0|) (SeqType BoxType))) (and (<= 0 i@@27) (< i@@27 (|Seq#Length| |a#45#3#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#45#3#0| i@@27))) (DtRank (|#DList.DList.DList| |a#45#0#0| |a#45#1#0| |a#45#2#0| |a#45#3#0| |a#45#4#0|)))) :qid |LinearDListidfy.71:12| :skolemid |1309| :pattern ( (|Seq#Index| |a#45#3#0| i@@27) (|#DList.DList.DList| |a#45#0#0| |a#45#1#0| |a#45#2#0| |a#45#3#0| |a#45#4#0|)) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| Int) (|a#46#2#0| T@U) (|a#46#3#0| T@U) (|a#46#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#46#0#0|) (SeqType BoxType)) (= (type |a#46#2#0|) (SeqType BoxType))) (= (type |a#46#3#0|) (SeqType BoxType))) (= (type |a#46#4#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#46#3#0|) (DtRank (|#DList.DList.DList| |a#46#0#0| |a#46#1#0| |a#46#2#0| |a#46#3#0| |a#46#4#0|)))) :qid |LinearDListidfy.71:12| :skolemid |1310| :pattern ( (|#DList.DList.DList| |a#46#0#0| |a#46#1#0| |a#46#2#0| |a#46#3#0| |a#46#4#0|)) )))
(assert (forall ((|a#47#0#0| T@U) (|a#47#1#0| Int) (|a#47#2#0| T@U) (|a#47#3#0| T@U) (|a#47#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#47#0#0|) (SeqType BoxType)) (= (type |a#47#2#0|) (SeqType BoxType))) (= (type |a#47#3#0|) (SeqType BoxType))) (= (type |a#47#4#0|) (SeqType BoxType))) (= (DList.DList.g (|#DList.DList.DList| |a#47#0#0| |a#47#1#0| |a#47#2#0| |a#47#3#0| |a#47#4#0|)) |a#47#4#0|)) :qid |LinearDListidfy.71:12| :skolemid |1311| :pattern ( (|#DList.DList.DList| |a#47#0#0| |a#47#1#0| |a#47#2#0| |a#47#3#0| |a#47#4#0|)) )))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| Int) (|a#48#2#0| T@U) (|a#48#3#0| T@U) (|a#48#4#0| T@U) (i@@28 Int) ) (!  (=> (and (and (and (and (= (type |a#48#0#0|) (SeqType BoxType)) (= (type |a#48#2#0|) (SeqType BoxType))) (= (type |a#48#3#0|) (SeqType BoxType))) (= (type |a#48#4#0|) (SeqType BoxType))) (and (<= 0 i@@28) (< i@@28 (|Seq#Length| |a#48#4#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#48#4#0| i@@28))) (DtRank (|#DList.DList.DList| |a#48#0#0| |a#48#1#0| |a#48#2#0| |a#48#3#0| |a#48#4#0|)))) :qid |LinearDListidfy.71:12| :skolemid |1312| :pattern ( (|Seq#Index| |a#48#4#0| i@@28) (|#DList.DList.DList| |a#48#0#0| |a#48#1#0| |a#48#2#0| |a#48#3#0| |a#48#4#0|)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| Int) (|a#49#2#0| T@U) (|a#49#3#0| T@U) (|a#49#4#0| T@U) ) (!  (=> (and (and (and (= (type |a#49#0#0|) (SeqType BoxType)) (= (type |a#49#2#0|) (SeqType BoxType))) (= (type |a#49#3#0|) (SeqType BoxType))) (= (type |a#49#4#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#49#4#0|) (DtRank (|#DList.DList.DList| |a#49#0#0| |a#49#1#0| |a#49#2#0| |a#49#3#0| |a#49#4#0|)))) :qid |LinearDListidfy.71:12| :skolemid |1313| :pattern ( (|#DList.DList.DList| |a#49#0#0| |a#49#1#0| |a#49#2#0| |a#49#3#0| |a#49#4#0|)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (and (= (type d@@30) DatatypeTypeType) (|$IsA#DList.DList| d@@30)) (DList.DList.DList_q d@@30)) :qid |unknown.0:0| :skolemid |1314| :pattern ( (|$IsA#DList.DList| d@@30)) )))
(assert (forall ((DList.DList$A@@9 T@U) (d@@31 T@U) ) (!  (=> (and (and (= (type DList.DList$A@@9) TyType) (= (type d@@31) DatatypeTypeType)) ($Is d@@31 (Tclass.DList.DList DList.DList$A@@9))) (DList.DList.DList_q d@@31)) :qid |unknown.0:0| :skolemid |1315| :pattern ( (DList.DList.DList_q d@@31) ($Is d@@31 (Tclass.DList.DList DList.DList$A@@9))) )))
(assert (forall ((a@@120 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@120) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) true) (= (|DList.DList#Equal| a@@120 b@@69)  (and (and (and (and (|Seq#Equal| (DList.DList.nodes a@@120) (DList.DList.nodes b@@69)) (= (DList.DList.freeStack a@@120) (DList.DList.freeStack b@@69))) (|Seq#Equal| (DList.DList.s a@@120) (DList.DList.s b@@69))) (|Seq#Equal| (DList.DList.f a@@120) (DList.DList.f b@@69))) (|Seq#Equal| (DList.DList.g a@@120) (DList.DList.g b@@69))))) :qid |unknown.0:0| :skolemid |1316| :pattern ( (|DList.DList#Equal| a@@120 b@@69)) )))
(assert (forall ((a@@121 T@U) (b@@70 T@U) ) (!  (=> (and (= (type a@@121) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (= (|DList.DList#Equal| a@@121 b@@70) (= a@@121 b@@70))) :qid |unknown.0:0| :skolemid |1317| :pattern ( (|DList.DList#Equal| a@@121 b@@70)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((DList.DList$A@@10 T@U) (this T@U) ) (!  (=> (and (and (= (type DList.DList$A@@10) TyType) (= (type this) DatatypeTypeType)) (or (|DList.DList.Inv#canCall| DList.DList$A@@10 this) (and (not (= 9 $FunctionContextHeight)) ($Is this (Tclass.DList.DList DList.DList$A@@10))))) true) :qid |unknown.0:0| :skolemid |1318| :pattern ( (DList.DList.Inv DList.DList$A@@10 this)) ))))
(assert (forall ((DList.DList$A@@11 T@U) (this@@0 T@U) ) (!  (=> (and (and (= (type DList.DList$A@@11) TyType) (= (type this@@0) DatatypeTypeType)) ($Is this@@0 (Tclass.DList.DList DList.DList$A@@11))) (= (|DList.DList.Inv#requires| DList.DList$A@@11 this@@0) true)) :qid |unknown.0:0| :skolemid |1319| :pattern ( (|DList.DList.Inv#requires| DList.DList$A@@11 this@@0)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((DList.DList$A@@12 T@U) (this@@1 T@U) ) (!  (=> (and (and (= (type DList.DList$A@@12) TyType) (= (type this@@1) DatatypeTypeType)) (or (|DList.DList.Inv#canCall| DList.DList$A@@12 this@@1) (and (not (= 9 $FunctionContextHeight)) ($Is this@@1 (Tclass.DList.DList DList.DList$A@@12))))) (and (and (and (and (and (and (DList.DList.DList_q this@@1) (DList.DList.DList_q this@@1)) (DList.DList.DList_q this@@1)) (DList.DList.DList_q this@@1)) (DList.DList.DList_q this@@1)) (|DList.__default.Invs#canCall| DList.DList$A@@12 (DList.DList.nodes this@@1) (DList.DList.freeStack this@@1) (DList.DList.s this@@1) (DList.DList.f this@@1) (DList.DList.g this@@1))) (= (DList.DList.Inv DList.DList$A@@12 this@@1) (DList.__default.Invs DList.DList$A@@12 (DList.DList.nodes this@@1) (DList.DList.freeStack this@@1) (DList.DList.s this@@1) (DList.DList.f this@@1) (DList.DList.g this@@1))))) :qid |unknown.0:0| :skolemid |1320| :pattern ( (DList.DList.Inv DList.DList$A@@12 this@@1)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((DList.DList$A@@13 T@U) (this@@2 T@U) ) (!  (=> (and (and (= (type DList.DList$A@@13) TyType) (= (type this@@2) DatatypeTypeType)) (or (|DList.DList.Inv#canCall| DList.DList$A@@13 (Lit this@@2)) (and (not (= 9 $FunctionContextHeight)) ($Is this@@2 (Tclass.DList.DList DList.DList$A@@13))))) (and (and (and (and (and (and (DList.DList.DList_q (Lit this@@2)) (DList.DList.DList_q (Lit this@@2))) (DList.DList.DList_q (Lit this@@2))) (DList.DList.DList_q (Lit this@@2))) (DList.DList.DList_q (Lit this@@2))) (|DList.__default.Invs#canCall| DList.DList$A@@13 (Lit (DList.DList.nodes (Lit this@@2))) (LitInt (DList.DList.freeStack (Lit this@@2))) (Lit (DList.DList.s (Lit this@@2))) (Lit (DList.DList.f (Lit this@@2))) (Lit (DList.DList.g (Lit this@@2))))) (= (DList.DList.Inv DList.DList$A@@13 (Lit this@@2)) (U_2_bool (Lit (bool_2_U (DList.__default.Invs DList.DList$A@@13 (Lit (DList.DList.nodes (Lit this@@2))) (LitInt (DList.DList.freeStack (Lit this@@2))) (Lit (DList.DList.s (Lit this@@2))) (Lit (DList.DList.f (Lit this@@2))) (Lit (DList.DList.g (Lit this@@2)))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1321| :pattern ( (DList.DList.Inv DList.DList$A@@13 (Lit this@@2))) ))))
(assert (forall ((arg0@@378 T@U) (arg1@@147 T@U) ) (! (= (type (DList.DList.Seq arg0@@378 arg1@@147)) (SeqType BoxType)) :qid |funType:DList.DList.Seq| :pattern ( (DList.DList.Seq arg0@@378 arg1@@147)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((DList.DList$A@@14 T@U) (this@@3 T@U) ) (!  (=> (and (and (= (type DList.DList$A@@14) TyType) (= (type this@@3) DatatypeTypeType)) (or (|DList.DList.Seq#canCall| DList.DList$A@@14 this@@3) (and (not (= 10 $FunctionContextHeight)) ($Is this@@3 (Tclass.DList.DList DList.DList$A@@14))))) ($Is (DList.DList.Seq DList.DList$A@@14 this@@3) (TSeq DList.DList$A@@14))) :qid |unknown.0:0| :skolemid |1323| :pattern ( (DList.DList.Seq DList.DList$A@@14 this@@3)) ))))
(assert (forall ((DList.DList$A@@15 T@U) (this@@4 T@U) ) (!  (=> (and (and (= (type DList.DList$A@@15) TyType) (= (type this@@4) DatatypeTypeType)) ($Is this@@4 (Tclass.DList.DList DList.DList$A@@15))) (= (|DList.DList.Seq#requires| DList.DList$A@@15 this@@4) true)) :qid |unknown.0:0| :skolemid |1324| :pattern ( (|DList.DList.Seq#requires| DList.DList$A@@15 this@@4)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((DList.DList$A@@16 T@U) (this@@5 T@U) ) (!  (=> (and (and (= (type DList.DList$A@@16) TyType) (= (type this@@5) DatatypeTypeType)) (or (|DList.DList.Seq#canCall| DList.DList$A@@16 this@@5) (and (not (= 10 $FunctionContextHeight)) ($Is this@@5 (Tclass.DList.DList DList.DList$A@@16))))) (and (DList.DList.DList_q this@@5) (= (DList.DList.Seq DList.DList$A@@16 this@@5) (DList.DList.s this@@5)))) :qid |unknown.0:0| :skolemid |1325| :pattern ( (DList.DList.Seq DList.DList$A@@16 this@@5)) ))))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((DList.DList$A@@17 T@U) (this@@6 T@U) ) (!  (=> (and (and (= (type DList.DList$A@@17) TyType) (= (type this@@6) DatatypeTypeType)) (or (|DList.DList.Seq#canCall| DList.DList$A@@17 (Lit this@@6)) (and (not (= 10 $FunctionContextHeight)) ($Is this@@6 (Tclass.DList.DList DList.DList$A@@17))))) (and (DList.DList.DList_q (Lit this@@6)) (= (DList.DList.Seq DList.DList$A@@17 (Lit this@@6)) (Lit (DList.DList.s (Lit this@@6)))))) :qid |unknown.0:0| :weight 3 :skolemid |1326| :pattern ( (DList.DList.Seq DList.DList$A@@17 (Lit this@@6))) ))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((DList.DList$A@@18 T@U) (this@@7 T@U) (|p#0| Int) ) (!  (=> (and (and (and (= (type DList.DList$A@@18) TyType) (= (type this@@7) DatatypeTypeType)) (or (|DList.DList.ValidPtr#canCall| DList.DList$A@@18 this@@7 |p#0|) (and (not (= 4 $FunctionContextHeight)) (and ($Is this@@7 (Tclass.DList.DList DList.DList$A@@18)) (and (<= (LitInt 0) |p#0|) (< |p#0| 18446744073709551616)))))) (DList.DList.ValidPtr DList.DList$A@@18 this@@7 |p#0|)) (not (= |p#0| 0))) :qid |unknown.0:0| :skolemid |1327| :pattern ( (DList.DList.ValidPtr DList.DList$A@@18 this@@7 |p#0|)) ))))
(assert (forall ((DList.DList$A@@19 T@U) (this@@8 T@U) (|p#0@@0| Int) ) (!  (=> (and (and (= (type DList.DList$A@@19) TyType) (= (type this@@8) DatatypeTypeType)) (and ($Is this@@8 (Tclass.DList.DList DList.DList$A@@19)) (and (<= (LitInt 0) |p#0@@0|) (< |p#0@@0| 18446744073709551616)))) (= (|DList.DList.ValidPtr#requires| DList.DList$A@@19 this@@8 |p#0@@0|) true)) :qid |unknown.0:0| :skolemid |1328| :pattern ( (|DList.DList.ValidPtr#requires| DList.DList$A@@19 this@@8 |p#0@@0|)) )))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((DList.DList$A@@20 T@U) (this@@9 T@U) (|p#0@@1| Int) ) (!  (=> (and (and (= (type DList.DList$A@@20) TyType) (= (type this@@9) DatatypeTypeType)) (or (|DList.DList.ValidPtr#canCall| DList.DList$A@@20 this@@9 |p#0@@1|) (and (not (= 4 $FunctionContextHeight)) (and ($Is this@@9 (Tclass.DList.DList DList.DList$A@@20)) (and (<= (LitInt 0) |p#0@@1|) (< |p#0@@1| 18446744073709551616)))))) (and (=> (< 0 |p#0@@1|) (and (DList.DList.DList_q this@@9) (=> (< |p#0@@1| (|Seq#Length| (DList.DList.g this@@9))) (DList.DList.DList_q this@@9)))) (= (DList.DList.ValidPtr DList.DList$A@@20 this@@9 |p#0@@1|)  (and (and (< 0 |p#0@@1|) (< |p#0@@1| (|Seq#Length| (DList.DList.g this@@9)))) (>= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g this@@9) |p#0@@1|))) (LitInt 0)))))) :qid |unknown.0:0| :skolemid |1329| :pattern ( (DList.DList.ValidPtr DList.DList$A@@20 this@@9 |p#0@@1|)) ))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((DList.DList$A@@21 T@U) (this@@10 T@U) (|p#0@@2| Int) ) (!  (=> (and (and (= (type DList.DList$A@@21) TyType) (= (type this@@10) DatatypeTypeType)) (or (|DList.DList.ValidPtr#canCall| DList.DList$A@@21 (Lit this@@10) (LitInt |p#0@@2|)) (and (not (= 4 $FunctionContextHeight)) (and ($Is this@@10 (Tclass.DList.DList DList.DList$A@@21)) (and (<= (LitInt 0) |p#0@@2|) (< |p#0@@2| 18446744073709551616)))))) (and (=> (U_2_bool (Lit (bool_2_U (< 0 |p#0@@2|)))) (and (DList.DList.DList_q (Lit this@@10)) (=> (< |p#0@@2| (|Seq#Length| (Lit (DList.DList.g (Lit this@@10))))) (DList.DList.DList_q (Lit this@@10))))) (= (DList.DList.ValidPtr DList.DList$A@@21 (Lit this@@10) (LitInt |p#0@@2|))  (and (and (< 0 |p#0@@2|) (< |p#0@@2| (|Seq#Length| (Lit (DList.DList.g (Lit this@@10)))))) (>= (U_2_int ($Unbox intType (|Seq#Index| (Lit (DList.DList.g (Lit this@@10))) (LitInt |p#0@@2|)))) (LitInt 0)))))) :qid |unknown.0:0| :weight 3 :skolemid |1330| :pattern ( (DList.DList.ValidPtr DList.DList$A@@21 (Lit this@@10) (LitInt |p#0@@2|))) ))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((DList.DList$A@@22 T@U) (this@@11 T@U) (|p#0@@3| Int) ) (!  (=> (and (and (= (type DList.DList$A@@22) TyType) (= (type this@@11) DatatypeTypeType)) (or (|DList.DList.MaybePtr#canCall| DList.DList$A@@22 this@@11 |p#0@@3|) (and (not (= 5 $FunctionContextHeight)) (and ($Is this@@11 (Tclass.DList.DList DList.DList$A@@22)) (and (<= (LitInt 0) |p#0@@3|) (< |p#0@@3| 18446744073709551616)))))) true) :qid |unknown.0:0| :skolemid |1331| :pattern ( (DList.DList.MaybePtr DList.DList$A@@22 this@@11 |p#0@@3|)) ))))
(assert (forall ((DList.DList$A@@23 T@U) (this@@12 T@U) (|p#0@@4| Int) ) (!  (=> (and (and (= (type DList.DList$A@@23) TyType) (= (type this@@12) DatatypeTypeType)) (and ($Is this@@12 (Tclass.DList.DList DList.DList$A@@23)) (and (<= (LitInt 0) |p#0@@4|) (< |p#0@@4| 18446744073709551616)))) (= (|DList.DList.MaybePtr#requires| DList.DList$A@@23 this@@12 |p#0@@4|) true)) :qid |unknown.0:0| :skolemid |1332| :pattern ( (|DList.DList.MaybePtr#requires| DList.DList$A@@23 this@@12 |p#0@@4|)) )))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((DList.DList$A@@24 T@U) (this@@13 T@U) (|p#0@@5| Int) ) (!  (=> (and (and (= (type DList.DList$A@@24) TyType) (= (type this@@13) DatatypeTypeType)) (or (|DList.DList.MaybePtr#canCall| DList.DList$A@@24 this@@13 |p#0@@5|) (and (not (= 5 $FunctionContextHeight)) (and ($Is this@@13 (Tclass.DList.DList DList.DList$A@@24)) (and (<= (LitInt 0) |p#0@@5|) (< |p#0@@5| 18446744073709551616)))))) (and (=> (not (= |p#0@@5| (LitInt 0))) (|DList.DList.ValidPtr#canCall| DList.DList$A@@24 this@@13 |p#0@@5|)) (= (DList.DList.MaybePtr DList.DList$A@@24 this@@13 |p#0@@5|)  (or (= |p#0@@5| (LitInt 0)) (DList.DList.ValidPtr DList.DList$A@@24 this@@13 |p#0@@5|))))) :qid |unknown.0:0| :skolemid |1333| :pattern ( (DList.DList.MaybePtr DList.DList$A@@24 this@@13 |p#0@@5|)) ))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((DList.DList$A@@25 T@U) (this@@14 T@U) (|p#0@@6| Int) ) (!  (=> (and (and (= (type DList.DList$A@@25) TyType) (= (type this@@14) DatatypeTypeType)) (or (|DList.DList.MaybePtr#canCall| DList.DList$A@@25 (Lit this@@14) (LitInt |p#0@@6|)) (and (not (= 5 $FunctionContextHeight)) (and ($Is this@@14 (Tclass.DList.DList DList.DList$A@@25)) (and (<= (LitInt 0) |p#0@@6|) (< |p#0@@6| 18446744073709551616)))))) (and (=> (not (= (LitInt |p#0@@6|) (LitInt 0))) (|DList.DList.ValidPtr#canCall| DList.DList$A@@25 (Lit this@@14) (LitInt |p#0@@6|))) (= (DList.DList.MaybePtr DList.DList$A@@25 (Lit this@@14) (LitInt |p#0@@6|))  (or (= (LitInt |p#0@@6|) (LitInt 0)) (DList.DList.ValidPtr DList.DList$A@@25 (Lit this@@14) (LitInt |p#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1334| :pattern ( (DList.DList.MaybePtr DList.DList$A@@25 (Lit this@@14) (LitInt |p#0@@6|))) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((DList.DList$A@@26 T@U) (this@@15 T@U) (|p#0@@7| Int) ) (!  (=> (and (and (= (type DList.DList$A@@26) TyType) (= (type this@@15) DatatypeTypeType)) (or (|DList.DList.Index#canCall| DList.DList$A@@26 this@@15 |p#0@@7|) (and (not (= 11 $FunctionContextHeight)) (and ($Is this@@15 (Tclass.DList.DList DList.DList$A@@26)) (and (<= (LitInt 0) |p#0@@7|) (< |p#0@@7| 18446744073709551616)))))) (and (=> (and (DList.DList.Inv DList.DList$A@@26 this@@15) (DList.DList.ValidPtr DList.DList$A@@26 this@@15 |p#0@@7|)) (and (<= (LitInt 0) (DList.DList.Index DList.DList$A@@26 this@@15 |p#0@@7|)) (< (DList.DList.Index DList.DList$A@@26 this@@15 |p#0@@7|) (|Seq#Length| (DList.DList.Seq DList.DList$A@@26 this@@15))))) (=> (and (DList.DList.Inv DList.DList$A@@26 this@@15) (= |p#0@@7| (LitInt 0))) (= (DList.DList.Index DList.DList$A@@26 this@@15 |p#0@@7|) (LitInt (- 0 1)))))) :qid |unknown.0:0| :skolemid |1336| :pattern ( (DList.DList.Index DList.DList$A@@26 this@@15 |p#0@@7|)) ))))
(assert (forall ((DList.DList$A@@27 T@U) (this@@16 T@U) (|p#0@@8| Int) ) (!  (=> (and (and (= (type DList.DList$A@@27) TyType) (= (type this@@16) DatatypeTypeType)) (and ($Is this@@16 (Tclass.DList.DList DList.DList$A@@27)) (and (<= (LitInt 0) |p#0@@8|) (< |p#0@@8| 18446744073709551616)))) (= (|DList.DList.Index#requires| DList.DList$A@@27 this@@16 |p#0@@8|) true)) :qid |unknown.0:0| :skolemid |1337| :pattern ( (|DList.DList.Index#requires| DList.DList$A@@27 this@@16 |p#0@@8|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((DList.DList$A@@28 T@U) (this@@17 T@U) (|p#0@@9| Int) ) (!  (=> (and (and (= (type DList.DList$A@@28) TyType) (= (type this@@17) DatatypeTypeType)) (or (|DList.DList.Index#canCall| DList.DList$A@@28 this@@17 |p#0@@9|) (and (not (= 11 $FunctionContextHeight)) (and ($Is this@@17 (Tclass.DList.DList DList.DList$A@@28)) (and (<= (LitInt 0) |p#0@@9|) (< |p#0@@9| 18446744073709551616)))))) (and (and (and (|DList.DList.Inv#canCall| DList.DList$A@@28 this@@17) (=> (DList.DList.Inv DList.DList$A@@28 this@@17) (|DList.DList.MaybePtr#canCall| DList.DList$A@@28 this@@17 |p#0@@9|))) (=> (and (DList.DList.Inv DList.DList$A@@28 this@@17) (DList.DList.MaybePtr DList.DList$A@@28 this@@17 |p#0@@9|)) (DList.DList.DList_q this@@17))) (= (DList.DList.Index DList.DList$A@@28 this@@17 |p#0@@9|) (ite  (and (DList.DList.Inv DList.DList$A@@28 this@@17) (DList.DList.MaybePtr DList.DList$A@@28 this@@17 |p#0@@9|)) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g this@@17) |p#0@@9|))) 0)))) :qid |unknown.0:0| :skolemid |1338| :pattern ( (DList.DList.Index DList.DList$A@@28 this@@17 |p#0@@9|)) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((DList.DList$A@@29 T@U) (this@@18 T@U) (|p#0@@10| Int) ) (!  (=> (and (and (= (type DList.DList$A@@29) TyType) (= (type this@@18) DatatypeTypeType)) (or (|DList.DList.Index#canCall| DList.DList$A@@29 (Lit this@@18) (LitInt |p#0@@10|)) (and (not (= 11 $FunctionContextHeight)) (and ($Is this@@18 (Tclass.DList.DList DList.DList$A@@29)) (and (<= (LitInt 0) |p#0@@10|) (< |p#0@@10| 18446744073709551616)))))) (and (and (and (|DList.DList.Inv#canCall| DList.DList$A@@29 (Lit this@@18)) (=> (U_2_bool (Lit (bool_2_U (DList.DList.Inv DList.DList$A@@29 (Lit this@@18))))) (|DList.DList.MaybePtr#canCall| DList.DList$A@@29 (Lit this@@18) (LitInt |p#0@@10|)))) (=> (U_2_bool (Lit (bool_2_U  (and (DList.DList.Inv DList.DList$A@@29 (Lit this@@18)) (DList.DList.MaybePtr DList.DList$A@@29 (Lit this@@18) (LitInt |p#0@@10|)))))) (DList.DList.DList_q (Lit this@@18)))) (= (DList.DList.Index DList.DList$A@@29 (Lit this@@18) (LitInt |p#0@@10|)) (ite  (and (DList.DList.Inv DList.DList$A@@29 (Lit this@@18)) (DList.DList.MaybePtr DList.DList$A@@29 (Lit this@@18) (LitInt |p#0@@10|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit (DList.DList.g (Lit this@@18))) (LitInt |p#0@@10|)))) 0)))) :qid |unknown.0:0| :weight 3 :skolemid |1339| :pattern ( (DList.DList.Index DList.DList$A@@29 (Lit this@@18) (LitInt |p#0@@10|))) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((DList.DList$A@@30 T@U) (this@@19 T@U) (|p#0@@11| Int) ) (!  (=> (and (and (= (type DList.DList$A@@30) TyType) (= (type this@@19) DatatypeTypeType)) (or (|DList.DList.IndexHi#canCall| DList.DList$A@@30 this@@19 |p#0@@11|) (and (not (= 12 $FunctionContextHeight)) (and ($Is this@@19 (Tclass.DList.DList DList.DList$A@@30)) (and (<= (LitInt 0) |p#0@@11|) (< |p#0@@11| 18446744073709551616)))))) (and (=> (and (DList.DList.Inv DList.DList$A@@30 this@@19) (DList.DList.ValidPtr DList.DList$A@@30 this@@19 |p#0@@11|)) (= (DList.DList.IndexHi DList.DList$A@@30 this@@19 |p#0@@11|) (DList.DList.Index DList.DList$A@@30 this@@19 |p#0@@11|))) (=> (and (DList.DList.Inv DList.DList$A@@30 this@@19) (= |p#0@@11| (LitInt 0))) (= (DList.DList.IndexHi DList.DList$A@@30 this@@19 |p#0@@11|) (|Seq#Length| (DList.DList.Seq DList.DList$A@@30 this@@19)))))) :qid |unknown.0:0| :skolemid |1342| :pattern ( (DList.DList.IndexHi DList.DList$A@@30 this@@19 |p#0@@11|)) ))))
(assert (forall ((DList.DList$A@@31 T@U) (this@@20 T@U) (|p#0@@12| Int) ) (!  (=> (and (and (= (type DList.DList$A@@31) TyType) (= (type this@@20) DatatypeTypeType)) (and ($Is this@@20 (Tclass.DList.DList DList.DList$A@@31)) (and (<= (LitInt 0) |p#0@@12|) (< |p#0@@12| 18446744073709551616)))) (= (|DList.DList.IndexHi#requires| DList.DList$A@@31 this@@20 |p#0@@12|) true)) :qid |unknown.0:0| :skolemid |1343| :pattern ( (|DList.DList.IndexHi#requires| DList.DList$A@@31 this@@20 |p#0@@12|)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((DList.DList$A@@32 T@U) (this@@21 T@U) (|p#0@@13| Int) ) (!  (=> (and (and (= (type DList.DList$A@@32) TyType) (= (type this@@21) DatatypeTypeType)) (or (|DList.DList.IndexHi#canCall| DList.DList$A@@32 this@@21 |p#0@@13|) (and (not (= 12 $FunctionContextHeight)) (and ($Is this@@21 (Tclass.DList.DList DList.DList$A@@32)) (and (<= (LitInt 0) |p#0@@13|) (< |p#0@@13| 18446744073709551616)))))) (and (and (and (and (|DList.DList.Inv#canCall| DList.DList$A@@32 this@@21) (=> (DList.DList.Inv DList.DList$A@@32 this@@21) (|DList.DList.ValidPtr#canCall| DList.DList$A@@32 this@@21 |p#0@@13|))) (=> (and (DList.DList.Inv DList.DList$A@@32 this@@21) (DList.DList.ValidPtr DList.DList$A@@32 this@@21 |p#0@@13|)) (DList.DList.DList_q this@@21))) (=> (not (and (DList.DList.Inv DList.DList$A@@32 this@@21) (DList.DList.ValidPtr DList.DList$A@@32 this@@21 |p#0@@13|))) (DList.DList.DList_q this@@21))) (= (DList.DList.IndexHi DList.DList$A@@32 this@@21 |p#0@@13|) (ite  (and (DList.DList.Inv DList.DList$A@@32 this@@21) (DList.DList.ValidPtr DList.DList$A@@32 this@@21 |p#0@@13|)) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g this@@21) |p#0@@13|))) (|Seq#Length| (DList.DList.s this@@21)))))) :qid |unknown.0:0| :skolemid |1344| :pattern ( (DList.DList.IndexHi DList.DList$A@@32 this@@21 |p#0@@13|)) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((DList.DList$A@@33 T@U) (this@@22 T@U) (|p#0@@14| Int) ) (!  (=> (and (and (= (type DList.DList$A@@33) TyType) (= (type this@@22) DatatypeTypeType)) (or (|DList.DList.IndexHi#canCall| DList.DList$A@@33 (Lit this@@22) (LitInt |p#0@@14|)) (and (not (= 12 $FunctionContextHeight)) (and ($Is this@@22 (Tclass.DList.DList DList.DList$A@@33)) (and (<= (LitInt 0) |p#0@@14|) (< |p#0@@14| 18446744073709551616)))))) (and (and (and (and (|DList.DList.Inv#canCall| DList.DList$A@@33 (Lit this@@22)) (=> (U_2_bool (Lit (bool_2_U (DList.DList.Inv DList.DList$A@@33 (Lit this@@22))))) (|DList.DList.ValidPtr#canCall| DList.DList$A@@33 (Lit this@@22) (LitInt |p#0@@14|)))) (=> (U_2_bool (Lit (bool_2_U  (and (DList.DList.Inv DList.DList$A@@33 (Lit this@@22)) (DList.DList.ValidPtr DList.DList$A@@33 (Lit this@@22) (LitInt |p#0@@14|)))))) (DList.DList.DList_q (Lit this@@22)))) (=> (not (U_2_bool (Lit (bool_2_U  (and (DList.DList.Inv DList.DList$A@@33 (Lit this@@22)) (DList.DList.ValidPtr DList.DList$A@@33 (Lit this@@22) (LitInt |p#0@@14|))))))) (DList.DList.DList_q (Lit this@@22)))) (= (DList.DList.IndexHi DList.DList$A@@33 (Lit this@@22) (LitInt |p#0@@14|)) (ite  (and (DList.DList.Inv DList.DList$A@@33 (Lit this@@22)) (DList.DList.ValidPtr DList.DList$A@@33 (Lit this@@22) (LitInt |p#0@@14|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit (DList.DList.g (Lit this@@22))) (LitInt |p#0@@14|)))) (|Seq#Length| (Lit (DList.DList.s (Lit this@@22)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1345| :pattern ( (DList.DList.IndexHi DList.DList$A@@33 (Lit this@@22) (LitInt |p#0@@14|))) ))))
(assert (forall ((arg0@@379 T@U) (arg1@@148 T@U) (arg2@@82 Int) ) (! (= (type (DList.DList.Get arg0@@379 arg1@@148 arg2@@82)) BoxType) :qid |funType:DList.DList.Get| :pattern ( (DList.DList.Get arg0@@379 arg1@@148 arg2@@82)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((DList.DList$A@@34 T@U) (this@@23 T@U) (|p#0@@15| Int) ) (!  (=> (and (and (= (type DList.DList$A@@34) TyType) (= (type this@@23) DatatypeTypeType)) (or (|DList.DList.Get#canCall| DList.DList$A@@34 this@@23 |p#0@@15|) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is this@@23 (Tclass.DList.DList DList.DList$A@@34)) (and (<= (LitInt 0) |p#0@@15|) (< |p#0@@15| 18446744073709551616))) (and (DList.DList.Inv DList.DList$A@@34 this@@23) (DList.DList.ValidPtr DList.DList$A@@34 this@@23 |p#0@@15|)))))) (and (= (DList.DList.Get DList.DList$A@@34 this@@23 |p#0@@15|) (|Seq#Index| (DList.DList.Seq DList.DList$A@@34 this@@23) (DList.DList.Index DList.DList$A@@34 this@@23 |p#0@@15|))) ($IsBox (DList.DList.Get DList.DList$A@@34 this@@23 |p#0@@15|) DList.DList$A@@34))) :qid |unknown.0:0| :skolemid |1348| :pattern ( (DList.DList.Get DList.DList$A@@34 this@@23 |p#0@@15|)) ))))
(assert (forall ((DList.DList$A@@35 T@U) (this@@24 T@U) (|p#0@@16| Int) ) (!  (=> (and (and (= (type DList.DList$A@@35) TyType) (= (type this@@24) DatatypeTypeType)) (and ($Is this@@24 (Tclass.DList.DList DList.DList$A@@35)) (and (<= (LitInt 0) |p#0@@16|) (< |p#0@@16| 18446744073709551616)))) (= (|DList.DList.Get#requires| DList.DList$A@@35 this@@24 |p#0@@16|)  (and (DList.DList.Inv DList.DList$A@@35 this@@24) (DList.DList.ValidPtr DList.DList$A@@35 this@@24 |p#0@@16|)))) :qid |unknown.0:0| :skolemid |1349| :pattern ( (|DList.DList.Get#requires| DList.DList$A@@35 this@@24 |p#0@@16|)) )))
(assert  (and (forall ((arg0@@380 T@U) (arg1@@149 T@U) (arg2@@83 Int) ) (! (= (type (LinearExtern.__default.seq_get arg0@@380 arg1@@149 arg2@@83)) BoxType) :qid |funType:LinearExtern.__default.seq_get| :pattern ( (LinearExtern.__default.seq_get arg0@@380 arg1@@149 arg2@@83)) )) (forall ((arg0@@381 T@U) ) (! (= (type (Options.Option.value arg0@@381)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@381)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((DList.DList$A@@36 T@U) (this@@25 T@U) (|p#0@@17| Int) ) (!  (=> (and (and (= (type DList.DList$A@@36) TyType) (= (type this@@25) DatatypeTypeType)) (or (|DList.DList.Get#canCall| DList.DList$A@@36 this@@25 |p#0@@17|) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is this@@25 (Tclass.DList.DList DList.DList$A@@36)) (and (<= (LitInt 0) |p#0@@17|) (< |p#0@@17| 18446744073709551616))) (and (DList.DList.Inv DList.DList$A@@36 this@@25) (DList.DList.ValidPtr DList.DList$A@@36 this@@25 |p#0@@17|)))))) (and (and (and (DList.DList.DList_q this@@25) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@36) (DList.DList.nodes this@@25) |p#0@@17|)) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@36) (DList.DList.nodes this@@25) |p#0@@17|)))) (= (DList.DList.Get DList.DList$A@@36 this@@25 |p#0@@17|) (Options.Option.value (DList.Node.data ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@36) (DList.DList.nodes this@@25) |p#0@@17|))))))) :qid |unknown.0:0| :skolemid |1350| :pattern ( (DList.DList.Get DList.DList$A@@36 this@@25 |p#0@@17|)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((DList.DList$A@@37 T@U) (this@@26 T@U) (|p#0@@18| Int) ) (!  (=> (and (and (= (type DList.DList$A@@37) TyType) (= (type this@@26) DatatypeTypeType)) (or (|DList.DList.Get#canCall| DList.DList$A@@37 (Lit this@@26) (LitInt |p#0@@18|)) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is this@@26 (Tclass.DList.DList DList.DList$A@@37)) (and (<= (LitInt 0) |p#0@@18|) (< |p#0@@18| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (DList.DList.Inv DList.DList$A@@37 (Lit this@@26))))) (U_2_bool (Lit (bool_2_U (DList.DList.ValidPtr DList.DList$A@@37 (Lit this@@26) (LitInt |p#0@@18|)))))))))) (and (and (and (DList.DList.DList_q (Lit this@@26)) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@37) (Lit (DList.DList.nodes (Lit this@@26))) (LitInt |p#0@@18|))) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@37) (Lit (DList.DList.nodes (Lit this@@26))) (LitInt |p#0@@18|))))) (= (DList.DList.Get DList.DList$A@@37 (Lit this@@26) (LitInt |p#0@@18|)) (Options.Option.value (DList.Node.data ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@37) (Lit (DList.DList.nodes (Lit this@@26))) (LitInt |p#0@@18|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1351| :pattern ( (DList.DList.Get DList.DList$A@@37 (Lit this@@26) (LitInt |p#0@@18|))) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((DList.DList$A@@38 T@U) (this@@27 T@U) (|p#0@@19| Int) ) (!  (=> (and (and (= (type DList.DList$A@@38) TyType) (= (type this@@27) DatatypeTypeType)) (or (|DList.DList.Next#canCall| DList.DList$A@@38 this@@27 |p#0@@19|) (and (not (= 14 $FunctionContextHeight)) (and (and ($Is this@@27 (Tclass.DList.DList DList.DList$A@@38)) (and (<= (LitInt 0) |p#0@@19|) (< |p#0@@19| 18446744073709551616))) (and (DList.DList.Inv DList.DList$A@@38 this@@27) (DList.DList.MaybePtr DList.DList$A@@38 this@@27 |p#0@@19|)))))) (and (and (and (and (and (DList.DList.MaybePtr DList.DList$A@@38 this@@27 (DList.DList.Next DList.DList$A@@38 this@@27 |p#0@@19|)) (=> (and (= |p#0@@19| (LitInt 0)) (> (|Seq#Length| (DList.DList.Seq DList.DList$A@@38 this@@27)) 0)) (= (DList.DList.Index DList.DList$A@@38 this@@27 (DList.DList.Next DList.DList$A@@38 this@@27 |p#0@@19|)) (LitInt 0)))) (=> (and (= |p#0@@19| (LitInt 0)) (= (|Seq#Length| (DList.DList.Seq DList.DList$A@@38 this@@27)) (LitInt 0))) (= (DList.DList.Next DList.DList$A@@38 this@@27 |p#0@@19|) (LitInt 0)))) (=> (and (not (= |p#0@@19| 0)) (< (+ (DList.DList.Index DList.DList$A@@38 this@@27 |p#0@@19|) 1) (|Seq#Length| (DList.DList.Seq DList.DList$A@@38 this@@27)))) (= (DList.DList.Index DList.DList$A@@38 this@@27 (DList.DList.Next DList.DList$A@@38 this@@27 |p#0@@19|)) (+ (DList.DList.Index DList.DList$A@@38 this@@27 |p#0@@19|) 1)))) (=> (and (not (= |p#0@@19| 0)) (= (+ (DList.DList.Index DList.DList$A@@38 this@@27 |p#0@@19|) 1) (|Seq#Length| (DList.DList.Seq DList.DList$A@@38 this@@27)))) (= (DList.DList.Next DList.DList$A@@38 this@@27 |p#0@@19|) (LitInt 0)))) (and (<= (LitInt 0) (DList.DList.Next DList.DList$A@@38 this@@27 |p#0@@19|)) (< (DList.DList.Next DList.DList$A@@38 this@@27 |p#0@@19|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1355| :pattern ( (DList.DList.Next DList.DList$A@@38 this@@27 |p#0@@19|)) ))))
(assert (forall ((DList.DList$A@@39 T@U) (this@@28 T@U) (|p#0@@20| Int) ) (!  (=> (and (and (= (type DList.DList$A@@39) TyType) (= (type this@@28) DatatypeTypeType)) (and ($Is this@@28 (Tclass.DList.DList DList.DList$A@@39)) (and (<= (LitInt 0) |p#0@@20|) (< |p#0@@20| 18446744073709551616)))) (= (|DList.DList.Next#requires| DList.DList$A@@39 this@@28 |p#0@@20|)  (and (DList.DList.Inv DList.DList$A@@39 this@@28) (DList.DList.MaybePtr DList.DList$A@@39 this@@28 |p#0@@20|)))) :qid |unknown.0:0| :skolemid |1356| :pattern ( (|DList.DList.Next#requires| DList.DList$A@@39 this@@28 |p#0@@20|)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((DList.DList$A@@40 T@U) (this@@29 T@U) (|p#0@@21| Int) ) (!  (=> (and (and (= (type DList.DList$A@@40) TyType) (= (type this@@29) DatatypeTypeType)) (or (|DList.DList.Next#canCall| DList.DList$A@@40 this@@29 |p#0@@21|) (and (not (= 14 $FunctionContextHeight)) (and (and ($Is this@@29 (Tclass.DList.DList DList.DList$A@@40)) (and (<= (LitInt 0) |p#0@@21|) (< |p#0@@21| 18446744073709551616))) (and (DList.DList.Inv DList.DList$A@@40 this@@29) (DList.DList.MaybePtr DList.DList$A@@40 this@@29 |p#0@@21|)))))) (and (and (and (DList.DList.DList_q this@@29) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@40) (DList.DList.nodes this@@29) |p#0@@21|)) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@40) (DList.DList.nodes this@@29) |p#0@@21|)))) (= (DList.DList.Next DList.DList$A@@40 this@@29 |p#0@@21|) (DList.Node.next ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@40) (DList.DList.nodes this@@29) |p#0@@21|)))))) :qid |unknown.0:0| :skolemid |1357| :pattern ( (DList.DList.Next DList.DList$A@@40 this@@29 |p#0@@21|)) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((DList.DList$A@@41 T@U) (this@@30 T@U) (|p#0@@22| Int) ) (!  (=> (and (and (= (type DList.DList$A@@41) TyType) (= (type this@@30) DatatypeTypeType)) (or (|DList.DList.Next#canCall| DList.DList$A@@41 (Lit this@@30) (LitInt |p#0@@22|)) (and (not (= 14 $FunctionContextHeight)) (and (and ($Is this@@30 (Tclass.DList.DList DList.DList$A@@41)) (and (<= (LitInt 0) |p#0@@22|) (< |p#0@@22| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (DList.DList.Inv DList.DList$A@@41 (Lit this@@30))))) (U_2_bool (Lit (bool_2_U (DList.DList.MaybePtr DList.DList$A@@41 (Lit this@@30) (LitInt |p#0@@22|)))))))))) (and (and (and (DList.DList.DList_q (Lit this@@30)) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@41) (Lit (DList.DList.nodes (Lit this@@30))) (LitInt |p#0@@22|))) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@41) (Lit (DList.DList.nodes (Lit this@@30))) (LitInt |p#0@@22|))))) (= (DList.DList.Next DList.DList$A@@41 (Lit this@@30) (LitInt |p#0@@22|)) (DList.Node.next ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@41) (Lit (DList.DList.nodes (Lit this@@30))) (LitInt |p#0@@22|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1358| :pattern ( (DList.DList.Next DList.DList$A@@41 (Lit this@@30) (LitInt |p#0@@22|))) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((DList.DList$A@@42 T@U) (this@@31 T@U) (|p#0@@23| Int) ) (!  (=> (and (and (= (type DList.DList$A@@42) TyType) (= (type this@@31) DatatypeTypeType)) (or (|DList.DList.Prev#canCall| DList.DList$A@@42 this@@31 |p#0@@23|) (and (not (= 15 $FunctionContextHeight)) (and (and ($Is this@@31 (Tclass.DList.DList DList.DList$A@@42)) (and (<= (LitInt 0) |p#0@@23|) (< |p#0@@23| 18446744073709551616))) (and (DList.DList.Inv DList.DList$A@@42 this@@31) (DList.DList.MaybePtr DList.DList$A@@42 this@@31 |p#0@@23|)))))) (and (and (and (and (and (DList.DList.MaybePtr DList.DList$A@@42 this@@31 (DList.DList.Prev DList.DList$A@@42 this@@31 |p#0@@23|)) (=> (and (= |p#0@@23| (LitInt 0)) (> (|Seq#Length| (DList.DList.Seq DList.DList$A@@42 this@@31)) 0)) (= (DList.DList.Index DList.DList$A@@42 this@@31 (DList.DList.Prev DList.DList$A@@42 this@@31 |p#0@@23|)) (- (|Seq#Length| (DList.DList.Seq DList.DList$A@@42 this@@31)) 1)))) (=> (and (= |p#0@@23| (LitInt 0)) (= (|Seq#Length| (DList.DList.Seq DList.DList$A@@42 this@@31)) (LitInt 0))) (= (DList.DList.Prev DList.DList$A@@42 this@@31 |p#0@@23|) (LitInt 0)))) (=> (and (not (= |p#0@@23| 0)) (> (DList.DList.Index DList.DList$A@@42 this@@31 |p#0@@23|) 0)) (= (DList.DList.Index DList.DList$A@@42 this@@31 (DList.DList.Prev DList.DList$A@@42 this@@31 |p#0@@23|)) (- (DList.DList.Index DList.DList$A@@42 this@@31 |p#0@@23|) 1)))) (=> (and (not (= |p#0@@23| 0)) (and (= (DList.DList.Index DList.DList$A@@42 this@@31 |p#0@@23|) (LitInt 0)) (= (LitInt 0) (|Seq#Length| (DList.DList.Seq DList.DList$A@@42 this@@31))))) (= (DList.DList.Prev DList.DList$A@@42 this@@31 |p#0@@23|) (LitInt 0)))) (and (<= (LitInt 0) (DList.DList.Prev DList.DList$A@@42 this@@31 |p#0@@23|)) (< (DList.DList.Prev DList.DList$A@@42 this@@31 |p#0@@23|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1362| :pattern ( (DList.DList.Prev DList.DList$A@@42 this@@31 |p#0@@23|)) ))))
(assert (forall ((DList.DList$A@@43 T@U) (this@@32 T@U) (|p#0@@24| Int) ) (!  (=> (and (and (= (type DList.DList$A@@43) TyType) (= (type this@@32) DatatypeTypeType)) (and ($Is this@@32 (Tclass.DList.DList DList.DList$A@@43)) (and (<= (LitInt 0) |p#0@@24|) (< |p#0@@24| 18446744073709551616)))) (= (|DList.DList.Prev#requires| DList.DList$A@@43 this@@32 |p#0@@24|)  (and (DList.DList.Inv DList.DList$A@@43 this@@32) (DList.DList.MaybePtr DList.DList$A@@43 this@@32 |p#0@@24|)))) :qid |unknown.0:0| :skolemid |1363| :pattern ( (|DList.DList.Prev#requires| DList.DList$A@@43 this@@32 |p#0@@24|)) )))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((DList.DList$A@@44 T@U) (this@@33 T@U) (|p#0@@25| Int) ) (!  (=> (and (and (= (type DList.DList$A@@44) TyType) (= (type this@@33) DatatypeTypeType)) (or (|DList.DList.Prev#canCall| DList.DList$A@@44 this@@33 |p#0@@25|) (and (not (= 15 $FunctionContextHeight)) (and (and ($Is this@@33 (Tclass.DList.DList DList.DList$A@@44)) (and (<= (LitInt 0) |p#0@@25|) (< |p#0@@25| 18446744073709551616))) (and (DList.DList.Inv DList.DList$A@@44 this@@33) (DList.DList.MaybePtr DList.DList$A@@44 this@@33 |p#0@@25|)))))) (and (and (and (DList.DList.DList_q this@@33) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@44) (DList.DList.nodes this@@33) |p#0@@25|)) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@44) (DList.DList.nodes this@@33) |p#0@@25|)))) (= (DList.DList.Prev DList.DList$A@@44 this@@33 |p#0@@25|) (DList.Node.prev ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@44) (DList.DList.nodes this@@33) |p#0@@25|)))))) :qid |unknown.0:0| :skolemid |1364| :pattern ( (DList.DList.Prev DList.DList$A@@44 this@@33 |p#0@@25|)) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((DList.DList$A@@45 T@U) (this@@34 T@U) (|p#0@@26| Int) ) (!  (=> (and (and (= (type DList.DList$A@@45) TyType) (= (type this@@34) DatatypeTypeType)) (or (|DList.DList.Prev#canCall| DList.DList$A@@45 (Lit this@@34) (LitInt |p#0@@26|)) (and (not (= 15 $FunctionContextHeight)) (and (and ($Is this@@34 (Tclass.DList.DList DList.DList$A@@45)) (and (<= (LitInt 0) |p#0@@26|) (< |p#0@@26| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (DList.DList.Inv DList.DList$A@@45 (Lit this@@34))))) (U_2_bool (Lit (bool_2_U (DList.DList.MaybePtr DList.DList$A@@45 (Lit this@@34) (LitInt |p#0@@26|)))))))))) (and (and (and (DList.DList.DList_q (Lit this@@34)) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@45) (Lit (DList.DList.nodes (Lit this@@34))) (LitInt |p#0@@26|))) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@45) (Lit (DList.DList.nodes (Lit this@@34))) (LitInt |p#0@@26|))))) (= (DList.DList.Prev DList.DList$A@@45 (Lit this@@34) (LitInt |p#0@@26|)) (DList.Node.prev ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@45) (Lit (DList.DList.nodes (Lit this@@34))) (LitInt |p#0@@26|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1365| :pattern ( (DList.DList.Prev DList.DList$A@@45 (Lit this@@34) (LitInt |p#0@@26|))) ))))
(assert (= DList.__default.sentinel (LitInt (- 0 1))))
(assert (= DList.__default.unused (LitInt (- 0 2))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((DList.DList$A@@46 T@U) (DList.DList.PointerToIndexUnchanged$A T@U) (|old_l#0| T@U) (|l#0| T@U) (|x#0@@1| Int) ) (!  (=> (and (and (and (and (= (type DList.DList$A@@46) TyType) (= (type DList.DList.PointerToIndexUnchanged$A) TyType)) (= (type |old_l#0|) DatatypeTypeType)) (= (type |l#0|) DatatypeTypeType)) (or (|DList.DList.PointerToIndexUnchanged#canCall| DList.DList$A@@46 DList.DList.PointerToIndexUnchanged$A |old_l#0| |l#0| |x#0@@1|) (and (not (= 19 $FunctionContextHeight)) (and (and (and ($Is |old_l#0| (Tclass.DList.DList DList.DList.PointerToIndexUnchanged$A)) ($Is |l#0| (Tclass.DList.DList DList.DList.PointerToIndexUnchanged$A))) (and (<= (LitInt 0) |x#0@@1|) (< |x#0@@1| 18446744073709551616))) (DList.DList.ValidPtr DList.DList.PointerToIndexUnchanged$A |old_l#0| |x#0@@1|))))) true) :qid |unknown.0:0| :skolemid |1422| :pattern ( (DList.DList.PointerToIndexUnchanged DList.DList$A@@46 DList.DList.PointerToIndexUnchanged$A |old_l#0| |l#0| |x#0@@1|)) ))))
(assert (forall ((DList.DList$A@@47 T@U) (DList.DList.PointerToIndexUnchanged$A@@0 T@U) (|old_l#0@@0| T@U) (|l#0@@0| T@U) (|x#0@@2| Int) ) (!  (=> (and (and (and (and (= (type DList.DList$A@@47) TyType) (= (type DList.DList.PointerToIndexUnchanged$A@@0) TyType)) (= (type |old_l#0@@0|) DatatypeTypeType)) (= (type |l#0@@0|) DatatypeTypeType)) (and (and ($Is |old_l#0@@0| (Tclass.DList.DList DList.DList.PointerToIndexUnchanged$A@@0)) ($Is |l#0@@0| (Tclass.DList.DList DList.DList.PointerToIndexUnchanged$A@@0))) (and (<= (LitInt 0) |x#0@@2|) (< |x#0@@2| 18446744073709551616)))) (= (|DList.DList.PointerToIndexUnchanged#requires| DList.DList$A@@47 DList.DList.PointerToIndexUnchanged$A@@0 |old_l#0@@0| |l#0@@0| |x#0@@2|) (DList.DList.ValidPtr DList.DList.PointerToIndexUnchanged$A@@0 |old_l#0@@0| |x#0@@2|))) :qid |unknown.0:0| :skolemid |1423| :pattern ( (|DList.DList.PointerToIndexUnchanged#requires| DList.DList$A@@47 DList.DList.PointerToIndexUnchanged$A@@0 |old_l#0@@0| |l#0@@0| |x#0@@2|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((DList.DList$A@@48 T@U) (DList.DList.PointerToIndexUnchanged$A@@1 T@U) (|old_l#0@@1| T@U) (|l#0@@1| T@U) (|x#0@@3| Int) ) (!  (=> (and (and (and (and (= (type DList.DList$A@@48) TyType) (= (type DList.DList.PointerToIndexUnchanged$A@@1) TyType)) (= (type |old_l#0@@1|) DatatypeTypeType)) (= (type |l#0@@1|) DatatypeTypeType)) (or (|DList.DList.PointerToIndexUnchanged#canCall| DList.DList$A@@48 DList.DList.PointerToIndexUnchanged$A@@1 |old_l#0@@1| |l#0@@1| |x#0@@3|) (and (not (= 19 $FunctionContextHeight)) (and (and (and ($Is |old_l#0@@1| (Tclass.DList.DList DList.DList.PointerToIndexUnchanged$A@@1)) ($Is |l#0@@1| (Tclass.DList.DList DList.DList.PointerToIndexUnchanged$A@@1))) (and (<= (LitInt 0) |x#0@@3|) (< |x#0@@3| 18446744073709551616))) (DList.DList.ValidPtr DList.DList.PointerToIndexUnchanged$A@@1 |old_l#0@@1| |x#0@@3|))))) (and (and (|DList.DList.ValidPtr#canCall| DList.DList.PointerToIndexUnchanged$A@@1 |l#0@@1| |x#0@@3|) (=> (DList.DList.ValidPtr DList.DList.PointerToIndexUnchanged$A@@1 |l#0@@1| |x#0@@3|) (and (DList.DList.DList_q |l#0@@1|) (DList.DList.DList_q |old_l#0@@1|)))) (= (DList.DList.PointerToIndexUnchanged DList.DList$A@@48 DList.DList.PointerToIndexUnchanged$A@@1 |old_l#0@@1| |l#0@@1| |x#0@@3|)  (and (DList.DList.ValidPtr DList.DList.PointerToIndexUnchanged$A@@1 |l#0@@1| |x#0@@3|) (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |l#0@@1|) |x#0@@3|))) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_l#0@@1|) |x#0@@3|)))))))) :qid |unknown.0:0| :skolemid |1424| :pattern ( (DList.DList.PointerToIndexUnchanged DList.DList$A@@48 DList.DList.PointerToIndexUnchanged$A@@1 |old_l#0@@1| |l#0@@1| |x#0@@3|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((DList.DList$A@@49 T@U) (DList.DList.PointerToIndexUnchanged$A@@2 T@U) (|old_l#0@@2| T@U) (|l#0@@2| T@U) (|x#0@@4| Int) ) (!  (=> (and (and (and (and (= (type DList.DList$A@@49) TyType) (= (type DList.DList.PointerToIndexUnchanged$A@@2) TyType)) (= (type |old_l#0@@2|) DatatypeTypeType)) (= (type |l#0@@2|) DatatypeTypeType)) (or (|DList.DList.PointerToIndexUnchanged#canCall| DList.DList$A@@49 DList.DList.PointerToIndexUnchanged$A@@2 (Lit |old_l#0@@2|) (Lit |l#0@@2|) (LitInt |x#0@@4|)) (and (not (= 19 $FunctionContextHeight)) (and (and (and ($Is |old_l#0@@2| (Tclass.DList.DList DList.DList.PointerToIndexUnchanged$A@@2)) ($Is |l#0@@2| (Tclass.DList.DList DList.DList.PointerToIndexUnchanged$A@@2))) (and (<= (LitInt 0) |x#0@@4|) (< |x#0@@4| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (DList.DList.ValidPtr DList.DList.PointerToIndexUnchanged$A@@2 (Lit |old_l#0@@2|) (LitInt |x#0@@4|))))))))) (and (and (|DList.DList.ValidPtr#canCall| DList.DList.PointerToIndexUnchanged$A@@2 (Lit |l#0@@2|) (LitInt |x#0@@4|)) (=> (U_2_bool (Lit (bool_2_U (DList.DList.ValidPtr DList.DList.PointerToIndexUnchanged$A@@2 (Lit |l#0@@2|) (LitInt |x#0@@4|))))) (and (DList.DList.DList_q (Lit |l#0@@2|)) (DList.DList.DList_q (Lit |old_l#0@@2|))))) (= (DList.DList.PointerToIndexUnchanged DList.DList$A@@49 DList.DList.PointerToIndexUnchanged$A@@2 (Lit |old_l#0@@2|) (Lit |l#0@@2|) (LitInt |x#0@@4|))  (and (DList.DList.ValidPtr DList.DList.PointerToIndexUnchanged$A@@2 (Lit |l#0@@2|) (LitInt |x#0@@4|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Lit (DList.DList.g (Lit |l#0@@2|))) (LitInt |x#0@@4|)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit (DList.DList.g (Lit |old_l#0@@2|))) (LitInt |x#0@@4|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1425| :pattern ( (DList.DList.PointerToIndexUnchanged DList.DList$A@@49 DList.DList.PointerToIndexUnchanged$A@@2 (Lit |old_l#0@@2|) (Lit |l#0@@2|) (LitInt |x#0@@4|))) ))))
(assert (= (type Tclass.DList.__default) TyType))
(assert (= (Tag Tclass.DList.__default) Tagclass.DList.__default))
(assert (= (TagFamily Tclass.DList.__default) tytagFamily$_default))
(assert (forall ((bx@@111 T@U) ) (!  (=> (and (= (type bx@@111) BoxType) ($IsBox bx@@111 Tclass.DList.__default)) (and (= ($Box ($Unbox refType bx@@111)) bx@@111) ($Is ($Unbox refType bx@@111) Tclass.DList.__default))) :qid |unknown.0:0| :skolemid |1628| :pattern ( ($IsBox bx@@111 Tclass.DList.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.DList.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.DList.__default)))) :qid |unknown.0:0| :skolemid |1629| :pattern ( ($Is $o@@9 Tclass.DList.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@59 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@59) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.DList.__default $h@@59)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@59 $o@@10) alloc))))) :qid |unknown.0:0| :skolemid |1630| :pattern ( ($IsAlloc $o@@10 Tclass.DList.__default $h@@59)) )))
(assert  (=> (< 7 $FunctionContextHeight) ($Is (int_2_U DList.__default.unused) TInt)))
(assert  (=> (< 7 $FunctionContextHeight) (forall (($h@@60 T@U) ) (!  (=> (and (= (type $h@@60) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@60)) ($IsAlloc (int_2_U DList.__default.unused) TInt $h@@60)) :qid |DafnyPreludebpl.545:12| :skolemid |1631| :pattern ( ($IsAlloc (int_2_U DList.__default.unused) TInt $h@@60)) ))))
(assert  (=> (< 6 $FunctionContextHeight) ($Is (int_2_U DList.__default.sentinel) TInt)))
(assert  (=> (< 6 $FunctionContextHeight) (forall (($h@@61 T@U) ) (!  (=> (and (= (type $h@@61) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@61)) ($IsAlloc (int_2_U DList.__default.sentinel) TInt $h@@61)) :qid |DafnyPreludebpl.545:12| :skolemid |1632| :pattern ( ($IsAlloc (int_2_U DList.__default.sentinel) TInt $h@@61)) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((DList._default.Invs$A T@U) (|nodes#0| T@U) (|freeStack#0| Int) (|s#0| T@U) (|f#0@@67| T@U) (|g#0| T@U) ) (!  (=> (and (and (and (and (and (= (type DList._default.Invs$A) TyType) (= (type |nodes#0|) (SeqType BoxType))) (= (type |s#0|) (SeqType BoxType))) (= (type |f#0@@67|) (SeqType BoxType))) (= (type |g#0|) (SeqType BoxType))) (or (|DList.__default.Invs#canCall| DList._default.Invs$A |nodes#0| |freeStack#0| |s#0| |f#0@@67| |g#0|) (and (not (= 8 $FunctionContextHeight)) (and (and (and (and ($Is |nodes#0| (TSeq (Tclass.DList.Node DList._default.Invs$A))) (and (<= (LitInt 0) |freeStack#0|) (< |freeStack#0| 18446744073709551616))) ($Is |s#0| (TSeq DList._default.Invs$A))) ($Is |f#0@@67| (TSeq TInt))) ($Is |g#0| (TSeq TInt)))))) true) :qid |unknown.0:0| :skolemid |1633| :pattern ( (DList.__default.Invs DList._default.Invs$A |nodes#0| |freeStack#0| |s#0| |f#0@@67| |g#0|)) ))))
(assert (forall ((DList._default.Invs$A@@0 T@U) (|nodes#0@@0| T@U) (|freeStack#0@@0| Int) (|s#0@@0| T@U) (|f#0@@68| T@U) (|g#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type DList._default.Invs$A@@0) TyType) (= (type |nodes#0@@0|) (SeqType BoxType))) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |f#0@@68|) (SeqType BoxType))) (= (type |g#0@@0|) (SeqType BoxType))) (and (and (and (and ($Is |nodes#0@@0| (TSeq (Tclass.DList.Node DList._default.Invs$A@@0))) (and (<= (LitInt 0) |freeStack#0@@0|) (< |freeStack#0@@0| 18446744073709551616))) ($Is |s#0@@0| (TSeq DList._default.Invs$A@@0))) ($Is |f#0@@68| (TSeq TInt))) ($Is |g#0@@0| (TSeq TInt)))) (= (|DList.__default.Invs#requires| DList._default.Invs$A@@0 |nodes#0@@0| |freeStack#0@@0| |s#0@@0| |f#0@@68| |g#0@@0|) true)) :qid |unknown.0:0| :skolemid |1634| :pattern ( (|DList.__default.Invs#requires| DList._default.Invs$A@@0 |nodes#0@@0| |freeStack#0@@0| |s#0@@0| |f#0@@68| |g#0@@0|)) )))
(assert (forall ((arg0@@382 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@382)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@382)) )))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((DList._default.Invs$A@@1 T@U) (|nodes#0@@1| T@U) (|freeStack#0@@1| Int) (|s#0@@1| T@U) (|f#0@@69| T@U) (|g#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type DList._default.Invs$A@@1) TyType) (= (type |nodes#0@@1|) (SeqType BoxType))) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |f#0@@69|) (SeqType BoxType))) (= (type |g#0@@1|) (SeqType BoxType))) (or (|DList.__default.Invs#canCall| DList._default.Invs$A@@1 |nodes#0@@1| |freeStack#0@@1| |s#0@@1| |f#0@@69| |g#0@@1|) (and (not (= 8 $FunctionContextHeight)) (and (and (and (and ($Is |nodes#0@@1| (TSeq (Tclass.DList.Node DList._default.Invs$A@@1))) (and (<= (LitInt 0) |freeStack#0@@1|) (< |freeStack#0@@1| 18446744073709551616))) ($Is |s#0@@1| (TSeq DList._default.Invs$A@@1))) ($Is |f#0@@69| (TSeq TInt))) ($Is |g#0@@1| (TSeq TInt)))))) (and (=> (= (|Seq#Length| |f#0@@69|) (|Seq#Length| |s#0@@1|)) (=> (= (|Seq#Length| |g#0@@1|) (|Seq#Length| |nodes#0@@1|)) (=> (> (|Seq#Length| |nodes#0@@1|) 0) (=> (= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| (LitInt 0)))) DList.__default.sentinel) (=> (<= (LitInt 0) |freeStack#0@@1|) (=> (< |freeStack#0@@1| (|Seq#Length| |nodes#0@@1|)) (=> (forall ((|i#0| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |f#0@@69|))) (< 0 (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| |i#0|))))) (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |f#0@@69|))) (< (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| |i#0|))) (|Seq#Length| |nodes#0@@1|))))) :qid |LinearDListidfy.50:16| :skolemid |1643| :pattern ( ($Unbox intType (|Seq#Index| |f#0@@69| |i#0|))) )) (=> (forall ((|i#1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| |f#0@@69|))) (= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| |i#1|)))))) |i#1|))) :qid |LinearDListidfy.51:16| :skolemid |1642| :pattern ( ($Unbox intType (|Seq#Index| |g#0@@1| (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| |i#1|)))))) )) (and (forall ((|p#0@@27| Int) ) (!  (=> (=> (and (<= (LitInt 0) |p#0@@27|) (< |p#0@@27| (|Seq#Length| |g#0@@1|))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@27|))))) (=> (=> (and (<= (LitInt 0) |p#0@@27|) (< |p#0@@27| (|Seq#Length| |g#0@@1|))) (< (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@27|))) (|Seq#Length| |s#0@@1|))) (and (=> (<= (LitInt 0) |p#0@@27|) (=> (< |p#0@@27| (|Seq#Length| |g#0@@1|)) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@27|))))) (=> (=> (and (<= (LitInt 0) |p#0@@27|) (< |p#0@@27| (|Seq#Length| |g#0@@1|))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@27|))))) (and (=> (<= (LitInt 0) |p#0@@27|) (=> (< |p#0@@27| (|Seq#Length| |g#0@@1|)) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@27|))))) (=> (=> (and (<= (LitInt 0) |p#0@@27|) (< |p#0@@27| (|Seq#Length| |g#0@@1|))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@27|))) (|Seq#Length| |g#0@@1|))) (=> (<= (LitInt 0) |p#0@@27|) (=> (< |p#0@@27| (|Seq#Length| |g#0@@1|)) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@27|))))))))))) :qid |LinearDListidfy.52:16| :skolemid |1639| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@27|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@27|))) )) (=> (forall ((|p#0@@28| Int) ) (!  (=> true (and (and (and (and (=> (and (<= (LitInt 0) |p#0@@28|) (< |p#0@@28| (|Seq#Length| |g#0@@1|))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@28|))))) (=> (and (<= (LitInt 0) |p#0@@28|) (< |p#0@@28| (|Seq#Length| |g#0@@1|))) (< (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@28|))) (|Seq#Length| |s#0@@1|)))) (=> (and (<= (LitInt 0) |p#0@@28|) (< |p#0@@28| (|Seq#Length| |g#0@@1|))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@28|)))))) (=> (and (<= (LitInt 0) |p#0@@28|) (< |p#0@@28| (|Seq#Length| |g#0@@1|))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@28|))) (|Seq#Length| |g#0@@1|)))) (=> (and (<= (LitInt 0) |p#0@@28|) (< |p#0@@28| (|Seq#Length| |g#0@@1|))) (= (>= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@28|))) (LitInt 0)) (Options.Option.Some_q (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@28|)))))))) :qid |LinearDListidfy.52:16| :skolemid |1641| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@28|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@28|))) )) (forall ((|p#1| Int) ) (!  (=> (=> (and (and (<= (LitInt 0) |p#1|) (< |p#1| (|Seq#Length| |g#0@@1|))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))) DList.__default.sentinel) (= |p#1| (LitInt 0)))) (and (=> (<= (LitInt 0) |p#1|) (=> (< |p#1| (|Seq#Length| |g#0@@1|)) (=> (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|)))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|)))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|)))))) |p#1|) (and (|$IsA#Options.Option| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1|)))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1|))))))))) (=> (=> (and (and (<= (LitInt 0) |p#1|) (< |p#1| (|Seq#Length| |g#0@@1|))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|)))) (and (= (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|)))))) |p#1|) (|Options.Option#Equal| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1|))) (|#Options.Option.Some| (|Seq#Index| |s#0@@1| (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))))))))) (and (=> (<= (LitInt 0) |p#1|) (=> (< |p#1| (|Seq#Length| |g#0@@1|)) (=> (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|)))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1|)))))) (=> (=> (and (and (<= (LitInt 0) |p#1|) (< |p#1| (|Seq#Length| |g#0@@1|))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))))) (= (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1|))) (ite (< (+ (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))) 1) (|Seq#Length| |f#0@@69|)) (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| (+ (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))) 1)))) 0))) (and (=> (<= (LitInt 0) |p#1|) (=> (< |p#1| (|Seq#Length| |g#0@@1|)) (=> (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|)))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1|)))))) (=> (=> (and (and (<= (LitInt 0) |p#1|) (< |p#1| (|Seq#Length| |g#0@@1|))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))))) (= (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1|))) (ite (> (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))) 0) (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| (- (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))) 1)))) (ite  (or (= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))) (LitInt 0)) (= (|Seq#Length| |f#0@@69|) (LitInt 0))) 0 (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| (- (|Seq#Length| |f#0@@69|) 1)))))))) (=> (<= (LitInt 0) |p#1|) (=> (< |p#1| (|Seq#Length| |g#0@@1|)) (=> (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|)))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1|))))))))))))) :qid |LinearDListidfy.56:16| :skolemid |1640| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@1| |p#1|))) )))))))))))) (= (DList.__default.Invs DList._default.Invs$A@@1 |nodes#0@@1| |freeStack#0@@1| |s#0@@1| |f#0@@69| |g#0@@1|)  (and (and (and (and (and (and (and (and (= (|Seq#Length| |f#0@@69|) (|Seq#Length| |s#0@@1|)) (= (|Seq#Length| |g#0@@1|) (|Seq#Length| |nodes#0@@1|))) (> (|Seq#Length| |nodes#0@@1|) 0)) (= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| (LitInt 0)))) DList.__default.sentinel)) (and (<= (LitInt 0) |freeStack#0@@1|) (< |freeStack#0@@1| (|Seq#Length| |nodes#0@@1|)))) (forall ((|i#0@@0| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| |f#0@@69|))) (< 0 (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| |i#0@@0|))))) (=> (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| |f#0@@69|))) (< (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| |i#0@@0|))) (|Seq#Length| |nodes#0@@1|))))) :qid |LinearDListidfy.50:16| :skolemid |1635| :pattern ( ($Unbox intType (|Seq#Index| |f#0@@69| |i#0@@0|))) ))) (forall ((|i#1@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| |f#0@@69|))) (= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| |i#1@@0|)))))) |i#1@@0|))) :qid |LinearDListidfy.51:16| :skolemid |1636| :pattern ( ($Unbox intType (|Seq#Index| |g#0@@1| (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| |i#1@@0|)))))) ))) (forall ((|p#0@@29| Int) ) (!  (=> true (and (and (and (and (=> (and (<= (LitInt 0) |p#0@@29|) (< |p#0@@29| (|Seq#Length| |g#0@@1|))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@29|))))) (=> (and (<= (LitInt 0) |p#0@@29|) (< |p#0@@29| (|Seq#Length| |g#0@@1|))) (< (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@29|))) (|Seq#Length| |s#0@@1|)))) (=> (and (<= (LitInt 0) |p#0@@29|) (< |p#0@@29| (|Seq#Length| |g#0@@1|))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@29|)))))) (=> (and (<= (LitInt 0) |p#0@@29|) (< |p#0@@29| (|Seq#Length| |g#0@@1|))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@29|))) (|Seq#Length| |g#0@@1|)))) (=> (and (<= (LitInt 0) |p#0@@29|) (< |p#0@@29| (|Seq#Length| |g#0@@1|))) (= (>= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@29|))) (LitInt 0)) (Options.Option.Some_q (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@29|)))))))) :qid |LinearDListidfy.52:16| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#0@@29|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@1| |p#0@@29|))) ))) (forall ((|p#1@@0| Int) ) (!  (=> true (and (and (and (and (=> (and (and (<= (LitInt 0) |p#1@@0|) (< |p#1@@0| (|Seq#Length| |g#0@@1|))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))) DList.__default.sentinel) (= |p#1@@0| (LitInt 0)))) (=> (and (and (<= (LitInt 0) |p#1@@0|) (< |p#1@@0| (|Seq#Length| |g#0@@1|))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|)))) (and (= (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|)))))) |p#1@@0|) (|Options.Option#Equal| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1@@0|))) (|#Options.Option.Some| (|Seq#Index| |s#0@@1| (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|)))))))))) (=> (and (and (<= (LitInt 0) |p#1@@0|) (< |p#1@@0| (|Seq#Length| |g#0@@1|))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))))) (= (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1@@0|))) (ite (< (+ (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))) 1) (|Seq#Length| |f#0@@69|)) (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| (+ (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))) 1)))) 0)))) (=> (and (and (<= (LitInt 0) |p#1@@0|) (< |p#1@@0| (|Seq#Length| |g#0@@1|))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))))) (= (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1@@0|))) (ite (> (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))) 0) (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| (- (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))) 1)))) (ite  (or (= (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))) (LitInt 0)) (= (|Seq#Length| |f#0@@69|) (LitInt 0))) 0 (U_2_int ($Unbox intType (|Seq#Index| |f#0@@69| (- (|Seq#Length| |f#0@@69|) 1))))))))) (=> (and (and (<= (LitInt 0) |p#1@@0|) (< |p#1@@0| (|Seq#Length| |g#0@@1|))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))))) (< (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1@@0|))) (|Seq#Length| |nodes#0@@1|))))) :qid |LinearDListidfy.56:16| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |p#1@@0|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@1| |p#1@@0|))) )))))) :qid |unknown.0:0| :skolemid |1644| :pattern ( (DList.__default.Invs DList._default.Invs$A@@1 |nodes#0@@1| |freeStack#0@@1| |s#0@@1| |f#0@@69| |g#0@@1|)) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((DList._default.Invs$A@@2 T@U) (|nodes#0@@2| T@U) (|freeStack#0@@2| Int) (|s#0@@2| T@U) (|f#0@@70| T@U) (|g#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type DList._default.Invs$A@@2) TyType) (= (type |nodes#0@@2|) (SeqType BoxType))) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |f#0@@70|) (SeqType BoxType))) (= (type |g#0@@2|) (SeqType BoxType))) (or (|DList.__default.Invs#canCall| DList._default.Invs$A@@2 (Lit |nodes#0@@2|) (LitInt |freeStack#0@@2|) (Lit |s#0@@2|) (Lit |f#0@@70|) (Lit |g#0@@2|)) (and (not (= 8 $FunctionContextHeight)) (and (and (and (and ($Is |nodes#0@@2| (TSeq (Tclass.DList.Node DList._default.Invs$A@@2))) (and (<= (LitInt 0) |freeStack#0@@2|) (< |freeStack#0@@2| 18446744073709551616))) ($Is |s#0@@2| (TSeq DList._default.Invs$A@@2))) ($Is |f#0@@70| (TSeq TInt))) ($Is |g#0@@2| (TSeq TInt)))))) (and (=> (= (|Seq#Length| (Lit |f#0@@70|)) (|Seq#Length| (Lit |s#0@@2|))) (=> (= (|Seq#Length| (Lit |g#0@@2|)) (|Seq#Length| (Lit |nodes#0@@2|))) (=> (> (|Seq#Length| (Lit |nodes#0@@2|)) 0) (=> (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) (LitInt 0)))) DList.__default.sentinel) (=> (<= (LitInt 0) (LitInt |freeStack#0@@2|)) (=> (< |freeStack#0@@2| (|Seq#Length| (Lit |nodes#0@@2|))) (=> (forall ((|i#2| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2|) (< |i#2| (|Seq#Length| (Lit |f#0@@70|)))) (< 0 (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) |i#2|))))) (=> (and (<= (LitInt 0) |i#2|) (< |i#2| (|Seq#Length| (Lit |f#0@@70|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) |i#2|))) (|Seq#Length| (Lit |nodes#0@@2|)))))) :qid |LinearDListidfy.50:16| :skolemid |1653| :pattern ( ($Unbox intType (|Seq#Index| |f#0@@70| |i#2|))) )) (=> (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| (Lit |f#0@@70|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) |i#3|)))))) |i#3|))) :qid |LinearDListidfy.51:16| :skolemid |1652| :pattern ( ($Unbox intType (|Seq#Index| |g#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |f#0@@70| |i#3|)))))) )) (and (forall ((|p#2| Int) ) (!  (=> (=> (and (<= (LitInt 0) |p#2|) (< |p#2| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#2|))))) (=> (=> (and (<= (LitInt 0) |p#2|) (< |p#2| (|Seq#Length| (Lit |g#0@@2|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#2|))) (|Seq#Length| (Lit |s#0@@2|)))) (and (=> (<= (LitInt 0) |p#2|) (=> (< |p#2| (|Seq#Length| (Lit |g#0@@2|))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2|))))) (=> (=> (and (<= (LitInt 0) |p#2|) (< |p#2| (|Seq#Length| (Lit |g#0@@2|)))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2|))))) (and (=> (<= (LitInt 0) |p#2|) (=> (< |p#2| (|Seq#Length| (Lit |g#0@@2|))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2|))))) (=> (=> (and (<= (LitInt 0) |p#2|) (< |p#2| (|Seq#Length| (Lit |g#0@@2|)))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2|))) (|Seq#Length| (Lit |g#0@@2|)))) (=> (<= (LitInt 0) |p#2|) (=> (< |p#2| (|Seq#Length| (Lit |g#0@@2|))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2|))))))))))) :qid |LinearDListidfy.52:16| :skolemid |1649| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@2| |p#2|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@2| |p#2|))) )) (=> (forall ((|p#2@@0| Int) ) (!  (=> true (and (and (and (and (=> (and (<= (LitInt 0) |p#2@@0|) (< |p#2@@0| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#2@@0|))))) (=> (and (<= (LitInt 0) |p#2@@0|) (< |p#2@@0| (|Seq#Length| (Lit |g#0@@2|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#2@@0|))) (|Seq#Length| (Lit |s#0@@2|))))) (=> (and (<= (LitInt 0) |p#2@@0|) (< |p#2@@0| (|Seq#Length| (Lit |g#0@@2|)))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2@@0|)))))) (=> (and (<= (LitInt 0) |p#2@@0|) (< |p#2@@0| (|Seq#Length| (Lit |g#0@@2|)))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2@@0|))) (|Seq#Length| (Lit |g#0@@2|))))) (=> (and (<= (LitInt 0) |p#2@@0|) (< |p#2@@0| (|Seq#Length| (Lit |g#0@@2|)))) (= (>= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#2@@0|))) (LitInt 0)) (Options.Option.Some_q (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2@@0|)))))))) :qid |LinearDListidfy.52:16| :skolemid |1651| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@2| |p#2@@0|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@2| |p#2@@0|))) )) (forall ((|p#3| Int) ) (!  (=> (=> (and (and (<= (LitInt 0) |p#3|) (< |p#3| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))) DList.__default.sentinel) (= |p#3| (LitInt 0)))) (and (=> (<= (LitInt 0) |p#3|) (=> (< |p#3| (|Seq#Length| (Lit |g#0@@2|))) (=> (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|)))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|)))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|)))))) |p#3|) (and (|$IsA#Options.Option| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3|)))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3|))))))))) (=> (=> (and (and (<= (LitInt 0) |p#3|) (< |p#3| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|)))) (and (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|)))))) |p#3|) (|Options.Option#Equal| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3|))) (|#Options.Option.Some| (|Seq#Index| (Lit |s#0@@2|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))))))))) (and (=> (<= (LitInt 0) |p#3|) (=> (< |p#3| (|Seq#Length| (Lit |g#0@@2|))) (=> (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|)))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3|)))))) (=> (=> (and (and (<= (LitInt 0) |p#3|) (< |p#3| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))))) (= (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3|))) (ite (< (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))) 1) (|Seq#Length| (Lit |f#0@@70|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))) 1)))) 0))) (and (=> (<= (LitInt 0) |p#3|) (=> (< |p#3| (|Seq#Length| (Lit |g#0@@2|))) (=> (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|)))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3|)))))) (=> (=> (and (and (<= (LitInt 0) |p#3|) (< |p#3| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))))) (= (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3|))) (ite (> (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))) 0) (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) (- (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))) 1)))) (ite  (or (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|))) (LitInt 0)) (= (|Seq#Length| (Lit |f#0@@70|)) (LitInt 0))) 0 (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) (- (|Seq#Length| (Lit |f#0@@70|)) 1)))))))) (=> (<= (LitInt 0) |p#3|) (=> (< |p#3| (|Seq#Length| (Lit |g#0@@2|))) (=> (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3|)))) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3|))))))))))))) :qid |LinearDListidfy.56:16| :skolemid |1650| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@2| |p#3|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@2| |p#3|))) )))))))))))) (= (DList.__default.Invs DList._default.Invs$A@@2 (Lit |nodes#0@@2|) (LitInt |freeStack#0@@2|) (Lit |s#0@@2|) (Lit |f#0@@70|) (Lit |g#0@@2|))  (and (and (and (and (and (and (and (and (= (|Seq#Length| (Lit |f#0@@70|)) (|Seq#Length| (Lit |s#0@@2|))) (= (|Seq#Length| (Lit |g#0@@2|)) (|Seq#Length| (Lit |nodes#0@@2|)))) (> (|Seq#Length| (Lit |nodes#0@@2|)) 0)) (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) (LitInt 0)))) DList.__default.sentinel)) (and (<= (LitInt 0) (LitInt |freeStack#0@@2|)) (< |freeStack#0@@2| (|Seq#Length| (Lit |nodes#0@@2|))))) (forall ((|i#2@@0| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| (Lit |f#0@@70|)))) (< 0 (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) |i#2@@0|))))) (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| (Lit |f#0@@70|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) |i#2@@0|))) (|Seq#Length| (Lit |nodes#0@@2|)))))) :qid |LinearDListidfy.50:16| :skolemid |1645| :pattern ( ($Unbox intType (|Seq#Index| |f#0@@70| |i#2@@0|))) ))) (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| (Lit |f#0@@70|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) |i#3@@0|)))))) |i#3@@0|))) :qid |LinearDListidfy.51:16| :skolemid |1646| :pattern ( ($Unbox intType (|Seq#Index| |g#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |f#0@@70| |i#3@@0|)))))) ))) (forall ((|p#2@@1| Int) ) (!  (=> true (and (and (and (and (=> (and (<= (LitInt 0) |p#2@@1|) (< |p#2@@1| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#2@@1|))))) (=> (and (<= (LitInt 0) |p#2@@1|) (< |p#2@@1| (|Seq#Length| (Lit |g#0@@2|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#2@@1|))) (|Seq#Length| (Lit |s#0@@2|))))) (=> (and (<= (LitInt 0) |p#2@@1|) (< |p#2@@1| (|Seq#Length| (Lit |g#0@@2|)))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2@@1|)))))) (=> (and (<= (LitInt 0) |p#2@@1|) (< |p#2@@1| (|Seq#Length| (Lit |g#0@@2|)))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2@@1|))) (|Seq#Length| (Lit |g#0@@2|))))) (=> (and (<= (LitInt 0) |p#2@@1|) (< |p#2@@1| (|Seq#Length| (Lit |g#0@@2|)))) (= (>= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#2@@1|))) (LitInt 0)) (Options.Option.Some_q (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#2@@1|)))))))) :qid |LinearDListidfy.52:16| :skolemid |1647| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@2| |p#2@@1|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@2| |p#2@@1|))) ))) (forall ((|p#3@@0| Int) ) (!  (=> true (and (and (and (and (=> (and (and (<= (LitInt 0) |p#3@@0|) (< |p#3@@0| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))) DList.__default.sentinel) (= |p#3@@0| (LitInt 0)))) (=> (and (and (<= (LitInt 0) |p#3@@0|) (< |p#3@@0| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|)))) (and (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|)))))) |p#3@@0|) (|Options.Option#Equal| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3@@0|))) (|#Options.Option.Some| (|Seq#Index| (Lit |s#0@@2|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|)))))))))) (=> (and (and (<= (LitInt 0) |p#3@@0|) (< |p#3@@0| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))))) (= (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3@@0|))) (ite (< (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))) 1) (|Seq#Length| (Lit |f#0@@70|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))) 1)))) 0)))) (=> (and (and (<= (LitInt 0) |p#3@@0|) (< |p#3@@0| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))))) (= (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3@@0|))) (ite (> (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))) 0) (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) (- (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))) 1)))) (ite  (or (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))) (LitInt 0)) (= (|Seq#Length| (Lit |f#0@@70|)) (LitInt 0))) 0 (U_2_int ($Unbox intType (|Seq#Index| (Lit |f#0@@70|) (- (|Seq#Length| (Lit |f#0@@70|)) 1))))))))) (=> (and (and (<= (LitInt 0) |p#3@@0|) (< |p#3@@0| (|Seq#Length| (Lit |g#0@@2|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (Lit |g#0@@2|) |p#3@@0|))))) (< (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@2|) |p#3@@0|))) (|Seq#Length| (Lit |nodes#0@@2|)))))) :qid |LinearDListidfy.56:16| :skolemid |1648| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@2| |p#3@@0|))) :pattern ( ($Unbox intType (|Seq#Index| |g#0@@2| |p#3@@0|))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |1654| :pattern ( (DList.__default.Invs DList._default.Invs$A@@2 (Lit |nodes#0@@2|) (LitInt |freeStack#0@@2|) (Lit |s#0@@2|) (Lit |f#0@@70|) (Lit |g#0@@2|))) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@112 T@U) ) (!  (=> (and (= (type bx@@112) BoxType) ($IsBox bx@@112 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@112)) bx@@112) ($Is ($Unbox intType bx@@112) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1670| :pattern ( ($IsBox bx@@112 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@1| T@U) ) (!  (=> (= (type |i#0@@1|) intType) (= ($Is |i#0@@1| Tclass.NativeTypes.sbyte)  (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@1|)) (< (U_2_int |i#0@@1|) 128)))) :qid |unknown.0:0| :skolemid |1671| :pattern ( ($Is |i#0@@1| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@2| T@U) ($h@@62 T@U) ) (!  (=> (and (= (type |i#0@@2|) intType) (= (type $h@@62) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@2| Tclass.NativeTypes.sbyte $h@@62)) :qid |unknown.0:0| :skolemid |1672| :pattern ( ($IsAlloc |i#0@@2| Tclass.NativeTypes.sbyte $h@@62)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@113 T@U) ) (!  (=> (and (= (type bx@@113) BoxType) ($IsBox bx@@113 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@113)) bx@@113) ($Is ($Unbox intType bx@@113) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1673| :pattern ( ($IsBox bx@@113 Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@3| T@U) ) (!  (=> (= (type |i#0@@3|) intType) (= ($Is |i#0@@3| Tclass.NativeTypes.byte)  (and (<= (LitInt 0) (U_2_int |i#0@@3|)) (< (U_2_int |i#0@@3|) 256)))) :qid |unknown.0:0| :skolemid |1674| :pattern ( ($Is |i#0@@3| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@4| T@U) ($h@@63 T@U) ) (!  (=> (and (= (type |i#0@@4|) intType) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@4| Tclass.NativeTypes.byte $h@@63)) :qid |unknown.0:0| :skolemid |1675| :pattern ( ($IsAlloc |i#0@@4| Tclass.NativeTypes.byte $h@@63)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@114 T@U) ) (!  (=> (and (= (type bx@@114) BoxType) ($IsBox bx@@114 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@114)) bx@@114) ($Is ($Unbox intType bx@@114) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1676| :pattern ( ($IsBox bx@@114 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@5| T@U) ) (!  (=> (= (type |i#0@@5|) intType) (= ($Is |i#0@@5| Tclass.NativeTypes.int16)  (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@5|)) (< (U_2_int |i#0@@5|) 32768)))) :qid |unknown.0:0| :skolemid |1677| :pattern ( ($Is |i#0@@5| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@6| T@U) ($h@@64 T@U) ) (!  (=> (and (= (type |i#0@@6|) intType) (= (type $h@@64) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@6| Tclass.NativeTypes.int16 $h@@64)) :qid |unknown.0:0| :skolemid |1678| :pattern ( ($IsAlloc |i#0@@6| Tclass.NativeTypes.int16 $h@@64)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@115 T@U) ) (!  (=> (and (= (type bx@@115) BoxType) ($IsBox bx@@115 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@115)) bx@@115) ($Is ($Unbox intType bx@@115) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1679| :pattern ( ($IsBox bx@@115 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@7| T@U) ) (!  (=> (= (type |i#0@@7|) intType) (= ($Is |i#0@@7| Tclass.NativeTypes.uint16)  (and (<= (LitInt 0) (U_2_int |i#0@@7|)) (< (U_2_int |i#0@@7|) 65536)))) :qid |unknown.0:0| :skolemid |1680| :pattern ( ($Is |i#0@@7| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@8| T@U) ($h@@65 T@U) ) (!  (=> (and (= (type |i#0@@8|) intType) (= (type $h@@65) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@8| Tclass.NativeTypes.uint16 $h@@65)) :qid |unknown.0:0| :skolemid |1681| :pattern ( ($IsAlloc |i#0@@8| Tclass.NativeTypes.uint16 $h@@65)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@116 T@U) ) (!  (=> (and (= (type bx@@116) BoxType) ($IsBox bx@@116 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@116)) bx@@116) ($Is ($Unbox intType bx@@116) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1682| :pattern ( ($IsBox bx@@116 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@9| T@U) ) (!  (=> (= (type |i#0@@9|) intType) (= ($Is |i#0@@9| Tclass.NativeTypes.int32)  (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@9|)) (< (U_2_int |i#0@@9|) 2147483648)))) :qid |unknown.0:0| :skolemid |1683| :pattern ( ($Is |i#0@@9| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@10| T@U) ($h@@66 T@U) ) (!  (=> (and (= (type |i#0@@10|) intType) (= (type $h@@66) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@10| Tclass.NativeTypes.int32 $h@@66)) :qid |unknown.0:0| :skolemid |1684| :pattern ( ($IsAlloc |i#0@@10| Tclass.NativeTypes.int32 $h@@66)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@117 T@U) ) (!  (=> (and (= (type bx@@117) BoxType) ($IsBox bx@@117 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@117)) bx@@117) ($Is ($Unbox intType bx@@117) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1685| :pattern ( ($IsBox bx@@117 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@11| T@U) ) (!  (=> (= (type |i#0@@11|) intType) (= ($Is |i#0@@11| Tclass.NativeTypes.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@11|)) (< (U_2_int |i#0@@11|) 4294967296)))) :qid |unknown.0:0| :skolemid |1686| :pattern ( ($Is |i#0@@11| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@12| T@U) ($h@@67 T@U) ) (!  (=> (and (= (type |i#0@@12|) intType) (= (type $h@@67) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@12| Tclass.NativeTypes.uint32 $h@@67)) :qid |unknown.0:0| :skolemid |1687| :pattern ( ($IsAlloc |i#0@@12| Tclass.NativeTypes.uint32 $h@@67)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@118 T@U) ) (!  (=> (and (= (type bx@@118) BoxType) ($IsBox bx@@118 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@118)) bx@@118) ($Is ($Unbox intType bx@@118) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1688| :pattern ( ($IsBox bx@@118 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (= ($Is |i#0@@13| Tclass.NativeTypes.int64)  (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1689| :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@14| T@U) ($h@@68 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@68) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.int64 $h@@68)) :qid |unknown.0:0| :skolemid |1690| :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.int64 $h@@68)) )))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (= ($Is |i#0@@15| Tclass.NativeTypes.uint64)  (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1691| :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@16| T@U) ($h@@69 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@69) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.uint64 $h@@69)) :qid |unknown.0:0| :skolemid |1692| :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.uint64 $h@@69)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@119 T@U) ) (!  (=> (and (= (type bx@@119) BoxType) ($IsBox bx@@119 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@119)) bx@@119) ($Is ($Unbox intType bx@@119) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1693| :pattern ( ($IsBox bx@@119 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (= ($Is |i#0@@17| Tclass.NativeTypes.nat8)  (and (<= (LitInt 0) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 128)))) :qid |unknown.0:0| :skolemid |1694| :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@18| T@U) ($h@@70 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@70) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat8 $h@@70)) :qid |unknown.0:0| :skolemid |1695| :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat8 $h@@70)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@120 T@U) ) (!  (=> (and (= (type bx@@120) BoxType) ($IsBox bx@@120 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@120)) bx@@120) ($Is ($Unbox intType bx@@120) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1696| :pattern ( ($IsBox bx@@120 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (= ($Is |i#0@@19| Tclass.NativeTypes.nat16)  (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 32768)))) :qid |unknown.0:0| :skolemid |1697| :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@20| T@U) ($h@@71 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@71) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat16 $h@@71)) :qid |unknown.0:0| :skolemid |1698| :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat16 $h@@71)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@121 T@U) ) (!  (=> (and (= (type bx@@121) BoxType) ($IsBox bx@@121 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@121)) bx@@121) ($Is ($Unbox intType bx@@121) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1699| :pattern ( ($IsBox bx@@121 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (= ($Is |i#0@@21| Tclass.NativeTypes.nat32)  (and (<= (LitInt 0) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 2147483648)))) :qid |unknown.0:0| :skolemid |1700| :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@22| T@U) ($h@@72 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@72) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat32 $h@@72)) :qid |unknown.0:0| :skolemid |1701| :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat32 $h@@72)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@122 T@U) ) (!  (=> (and (= (type bx@@122) BoxType) ($IsBox bx@@122 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@122)) bx@@122) ($Is ($Unbox intType bx@@122) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1702| :pattern ( ($IsBox bx@@122 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@23| T@U) ) (!  (=> (= (type |i#0@@23|) intType) (= ($Is |i#0@@23| Tclass.NativeTypes.nat64)  (and (<= (LitInt 0) (U_2_int |i#0@@23|)) (< (U_2_int |i#0@@23|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1703| :pattern ( ($Is |i#0@@23| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@24| T@U) ($h@@73 T@U) ) (!  (=> (and (= (type |i#0@@24|) intType) (= (type $h@@73) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@24| Tclass.NativeTypes.nat64 $h@@73)) :qid |unknown.0:0| :skolemid |1704| :pattern ( ($IsAlloc |i#0@@24| Tclass.NativeTypes.nat64 $h@@73)) )))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@123 T@U) ) (!  (=> (and (= (type bx@@123) BoxType) ($IsBox bx@@123 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@123)) bx@@123) ($Is ($Unbox intType bx@@123) Tclass.NativeTypes.uint128))) :qid |unknown.0:0| :skolemid |1705| :pattern ( ($IsBox bx@@123 Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@25| T@U) ) (!  (=> (= (type |i#0@@25|) intType) (= ($Is |i#0@@25| Tclass.NativeTypes.uint128)  (and (<= (LitInt 0) (U_2_int |i#0@@25|)) (< (U_2_int |i#0@@25|) 340282366920938463463374607431768211456)))) :qid |unknown.0:0| :skolemid |1706| :pattern ( ($Is |i#0@@25| Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@26| T@U) ($h@@74 T@U) ) (!  (=> (and (= (type |i#0@@26|) intType) (= (type $h@@74) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@26| Tclass.NativeTypes.uint128 $h@@74)) :qid |unknown.0:0| :skolemid |1707| :pattern ( ($IsAlloc |i#0@@26| Tclass.NativeTypes.uint128 $h@@74)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@124 T@U) ) (!  (=> (and (= (type bx@@124) BoxType) ($IsBox bx@@124 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@124)) bx@@124) ($Is ($Unbox refType bx@@124) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1708| :pattern ( ($IsBox bx@@124 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.NativeTypes.__default)  (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1709| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@75 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@75) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@75)  (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@75 $o@@12) alloc))))) :qid |unknown.0:0| :skolemid |1710| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@75)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@32 T@U) ) (!  (=> (= (type d@@32) DatatypeTypeType) (= (Options.Option.None_q d@@32) (= (DatatypeCtorId d@@32) |##Options.Option.None|))) :qid |unknown.0:0| :skolemid |1711| :pattern ( (Options.Option.None_q d@@32)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (and (= (type d@@33) DatatypeTypeType) (Options.Option.None_q d@@33)) (= d@@33 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1712| :pattern ( (Options.Option.None_q d@@33)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1713| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@76 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@76) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@76)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@76)) :qid |unknown.0:0| :skolemid |1714| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@76)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsdfy.5:36| :skolemid |1715| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (= (type d@@34) DatatypeTypeType) (= (Options.Option.Some_q d@@34) (= (DatatypeCtorId d@@34) |##Options.Option.Some|))) :qid |unknown.0:0| :skolemid |1716| :pattern ( (Options.Option.Some_q d@@34)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) (Options.Option.Some_q d@@35)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@35 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsdfy.5:36| :skolemid |1717| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1718| :pattern ( (Options.Option.Some_q d@@35)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (= ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4))) :qid |unknown.0:0| :skolemid |1719| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@77 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@77) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@77)) (= ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@77) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@77))) :qid |unknown.0:0| :skolemid |1720| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@77)) )))
(assert (forall ((d@@36 T@U) (Options.Option$V@@6 T@U) ($h@@78 T@U) ) (!  (=> (and (and (and (= (type d@@36) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@78) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@78) (and (Options.Option.Some_q d@@36) ($IsAlloc d@@36 (Tclass.Options.Option Options.Option$V@@6) $h@@78)))) ($IsAllocBox (Options.Option.value d@@36) Options.Option$V@@6 $h@@78)) :qid |unknown.0:0| :skolemid |1721| :pattern ( ($IsAllocBox (Options.Option.value d@@36) Options.Option$V@@6 $h@@78)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ) (!  (=> (= (type |a#9#0#0@@0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0@@0|)) (Lit (|#Options.Option.Some| |a#9#0#0@@0|)))) :qid |Optionsdfy.5:36| :skolemid |1722| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0@@0|))) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0@@0|)) |a#10#0#0@@0|)) :qid |Optionsdfy.5:36| :skolemid |1723| :pattern ( (|#Options.Option.Some| |a#10#0#0@@0|)) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) BoxType) (< (BoxRank |a#11#0#0@@0|) (DtRank (|#Options.Option.Some| |a#11#0#0@@0|)))) :qid |Optionsdfy.5:36| :skolemid |1724| :pattern ( (|#Options.Option.Some| |a#11#0#0@@0|)) )))
(assert (forall ((d@@37 T@U) ) (!  (=> (and (= (type d@@37) DatatypeTypeType) (|$IsA#Options.Option| d@@37)) (or (Options.Option.None_q d@@37) (Options.Option.Some_q d@@37))) :qid |unknown.0:0| :skolemid |1725| :pattern ( (|$IsA#Options.Option| d@@37)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@38 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@38) DatatypeTypeType)) ($Is d@@38 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@38) (Options.Option.Some_q d@@38))) :qid |unknown.0:0| :skolemid |1726| :pattern ( (Options.Option.Some_q d@@38) ($Is d@@38 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@38) ($Is d@@38 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@122 T@U) (b@@71 T@U) ) (!  (=> (and (and (= (type a@@122) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (Options.Option.None_q a@@122) (Options.Option.None_q b@@71))) (= (|Options.Option#Equal| a@@122 b@@71) true)) :qid |unknown.0:0| :skolemid |1727| :pattern ( (|Options.Option#Equal| a@@122 b@@71) (Options.Option.None_q a@@122)) :pattern ( (|Options.Option#Equal| a@@122 b@@71) (Options.Option.None_q b@@71)) )))
(assert (forall ((a@@123 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@123) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (Options.Option.Some_q a@@123) (Options.Option.Some_q b@@72))) (= (|Options.Option#Equal| a@@123 b@@72) (= (Options.Option.value a@@123) (Options.Option.value b@@72)))) :qid |unknown.0:0| :skolemid |1728| :pattern ( (|Options.Option#Equal| a@@123 b@@72) (Options.Option.Some_q a@@123)) :pattern ( (|Options.Option#Equal| a@@123 b@@72) (Options.Option.Some_q b@@72)) )))
(assert (forall ((a@@124 T@U) (b@@73 T@U) ) (!  (=> (and (= (type a@@124) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (= (|Options.Option#Equal| a@@124 b@@73) (= a@@124 b@@73))) :qid |unknown.0:0| :skolemid |1729| :pattern ( (|Options.Option#Equal| a@@124 b@@73)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (= (TagFamily Tclass.Options.__default) tytagFamily$_default))
(assert (forall ((bx@@125 T@U) ) (!  (=> (and (= (type bx@@125) BoxType) ($IsBox bx@@125 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@125)) bx@@125) ($Is ($Unbox refType bx@@125) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1730| :pattern ( ($IsBox bx@@125 Tclass.Options.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (= ($Is $o@@13 Tclass.Options.__default)  (or (= $o@@13 null) (= (dtype $o@@13) Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1731| :pattern ( ($Is $o@@13 Tclass.Options.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@79 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@79) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@14 Tclass.Options.__default $h@@79)  (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@79 $o@@14) alloc))))) :qid |unknown.0:0| :skolemid |1732| :pattern ( ($IsAlloc $o@@14 Tclass.Options.__default $h@@79)) )))
(assert (forall ((arg0@@383 T@U) (arg1@@150 T@U) (arg2@@84 T@U) (arg3@@47 T@U) (arg4@@30 T@U) ) (! (= (type (Options.__default.MapOption arg0@@383 arg1@@150 arg2@@84 arg3@@47 arg4@@30)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@383 arg1@@150 arg2@@84 arg3@@47 arg4@@30)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@71| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@71|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@71|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@71| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@15 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@15) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@15 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@71| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@15))))) (= (MapType1Select (MapType0Select $h0 $o@@15) $f) (MapType1Select (MapType0Select $h1 $o@@15) $f)))) :qid |unknown.0:0| :skolemid |1733| :no-pattern (type $o@@15) :no-pattern (type $f) :no-pattern (U_2_int $o@@15) :no-pattern (U_2_bool $o@@15) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@71|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@71|))) :qid |unknown.0:0| :skolemid |1734| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@71|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap T@U) (|opt#0@@0| T@U) (|f#0@@72| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@72|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|) (and (and (and ($IsGoodHeap $Heap) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@72| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@72| (Options.Option.value |opt#0@@0|)))))) (and (and (= (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@72| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1735| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@72|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@0 T@U) (|opt#0@@1| T@U) (|f#0@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@73|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@0) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@73| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (= (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@73|)  (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@73| (Options.Option.value |opt#0@@1|))))) :qid |unknown.0:0| :skolemid |1736| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@73|) ($IsGoodHeap $Heap@@0)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@1 T@U) (|opt#0@@2| T@U) (|f#0@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@74|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@74|) (and (and (and ($IsGoodHeap $Heap@@1) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@74| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@74| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@74|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#0| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@74| |v#0|)))))) :qid |unknown.0:0| :skolemid |1737| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@74|) ($IsGoodHeap $Heap@@1)) ))))
(assert (forall ((arg0@@384 T@U) (arg1@@151 T@U) (arg2@@85 T@U) (arg3@@48 T@U) (arg4@@31 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@384 arg1@@151 arg2@@85 arg3@@48 arg4@@31)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@384 arg1@@151 arg2@@85 arg3@@48 arg4@@31)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@75| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@75|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@75|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@75| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@16 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@16) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@16 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@75| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@16))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@16) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@16) $f@@0)))) :qid |unknown.0:0| :skolemid |1738| :no-pattern (type $o@@16) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@16) :no-pattern (U_2_bool $o@@16) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@75|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@75|))) :qid |unknown.0:0| :skolemid |1739| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@75|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@4| T@U) (|f#0@@76| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@76|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@76| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@76| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@76| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@76| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@76| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1740| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@76|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@5| T@U) (|f#0@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@77|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@77| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (= (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@77|)  (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@77| (Options.Option.value |opt#0@@5|))))) :qid |unknown.0:0| :skolemid |1741| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@77|) ($IsGoodHeap $Heap@@3)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@6| T@U) (|f#0@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@78|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@78|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@78| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@78| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@78|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#0@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@78| |v#0@@0|)))))) :qid |unknown.0:0| :skolemid |1742| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@78|) ($IsGoodHeap $Heap@@4)) ))))
(assert (= (type Tclass.LinearMaybe.__default) TyType))
(assert (= (Tag Tclass.LinearMaybe.__default) Tagclass.LinearMaybe.__default))
(assert (= (TagFamily Tclass.LinearMaybe.__default) tytagFamily$_default))
(assert (forall ((bx@@126 T@U) ) (!  (=> (and (= (type bx@@126) BoxType) ($IsBox bx@@126 Tclass.LinearMaybe.__default)) (and (= ($Box ($Unbox refType bx@@126)) bx@@126) ($Is ($Unbox refType bx@@126) Tclass.LinearMaybe.__default))) :qid |unknown.0:0| :skolemid |1743| :pattern ( ($IsBox bx@@126 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (= ($Is $o@@17 Tclass.LinearMaybe.__default)  (or (= $o@@17 null) (= (dtype $o@@17) Tclass.LinearMaybe.__default)))) :qid |unknown.0:0| :skolemid |1744| :pattern ( ($Is $o@@17 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@80 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@80) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@18 Tclass.LinearMaybe.__default $h@@80)  (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@80 $o@@18) alloc))))) :qid |unknown.0:0| :skolemid |1745| :pattern ( ($IsAlloc $o@@18 Tclass.LinearMaybe.__default $h@@80)) )))
(assert (forall ((arg0@@385 T@U) ) (! (= (type (|#$maybe| arg0@@385)) TyType) :qid |funType:#$maybe| :pattern ( (|#$maybe| arg0@@385)) )))
(assert  (=> true (forall ((LinearMaybe._default.has$A T@U) (|m#0| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A) TyType) (= (type |m#0|) BoxType)) (or (|LinearMaybe.__default.has#canCall| LinearMaybe._default.has$A |m#0|) ($IsBox |m#0| (|#$maybe| LinearMaybe._default.has$A)))) true) :qid |unknown.0:0| :skolemid |1746| :pattern ( (LinearMaybe.__default.has LinearMaybe._default.has$A |m#0|)) ))))
(assert (forall ((LinearMaybe._default.has$A@@0 T@U) (|m#0@@0| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A@@0) TyType) (= (type |m#0@@0|) BoxType)) ($IsBox |m#0@@0| (|#$maybe| LinearMaybe._default.has$A@@0))) (= (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@0|) true)) :qid |unknown.0:0| :skolemid |1747| :pattern ( (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@0|)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@152 T@U) ) (! (= (type (LinearMaybe.__default.read arg0@@386 arg1@@152)) BoxType) :qid |funType:LinearMaybe.__default.read| :pattern ( (LinearMaybe.__default.read arg0@@386 arg1@@152)) )))
(assert  (=> true (forall ((LinearMaybe._default.read$A T@U) (|m#0@@1| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A) TyType) (= (type |m#0@@1|) BoxType)) (or (|LinearMaybe.__default.read#canCall| LinearMaybe._default.read$A |m#0@@1|) ($IsBox |m#0@@1| (|#$maybe| LinearMaybe._default.read$A)))) ($IsBox (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@1|) LinearMaybe._default.read$A)) :qid |unknown.0:0| :skolemid |1748| :pattern ( (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@1|)) ))))
(assert (forall ((LinearMaybe._default.read$A@@0 T@U) (|m#0@@2| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A@@0) TyType) (= (type |m#0@@2|) BoxType)) ($IsBox |m#0@@2| (|#$maybe| LinearMaybe._default.read$A@@0))) (= (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@2|) true)) :qid |unknown.0:0| :skolemid |1749| :pattern ( (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@2|)) )))
(assert (forall ((arg0@@387 T@U) (arg1@@153 T@U) ) (! (= (type (LinearMaybe.__default.peek arg0@@387 arg1@@153)) BoxType) :qid |funType:LinearMaybe.__default.peek| :pattern ( (LinearMaybe.__default.peek arg0@@387 arg1@@153)) )))
(assert  (=> true (forall ((LinearMaybe._default.peek$A T@U) (|m#0@@3| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A) TyType) (= (type |m#0@@3|) BoxType)) (or (|LinearMaybe.__default.peek#canCall| LinearMaybe._default.peek$A |m#0@@3|) (and ($IsBox |m#0@@3| (|#$maybe| LinearMaybe._default.peek$A)) (LinearMaybe.__default.has LinearMaybe._default.peek$A |m#0@@3|)))) (and (= (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@3|) (LinearMaybe.__default.read LinearMaybe._default.peek$A |m#0@@3|)) ($IsBox (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@3|) LinearMaybe._default.peek$A))) :qid |unknown.0:0| :skolemid |1750| :pattern ( (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@3|)) ))))
(assert (forall ((LinearMaybe._default.peek$A@@0 T@U) (|m#0@@4| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A@@0) TyType) (= (type |m#0@@4|) BoxType)) ($IsBox |m#0@@4| (|#$maybe| LinearMaybe._default.peek$A@@0))) (= (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@4|) (LinearMaybe.__default.has LinearMaybe._default.peek$A@@0 |m#0@@4|))) :qid |unknown.0:0| :skolemid |1751| :pattern ( (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@4|)) )))
(assert (forall ((arg0@@388 T@U) (arg1@@154 T@U) ) (! (= (type (LinearMaybe.__default.unwrap arg0@@388 arg1@@154)) BoxType) :qid |funType:LinearMaybe.__default.unwrap| :pattern ( (LinearMaybe.__default.unwrap arg0@@388 arg1@@154)) )))
(assert  (=> true (forall ((LinearMaybe._default.unwrap$A T@U) (|m#0@@5| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A) TyType) (= (type |m#0@@5|) BoxType)) (or (|LinearMaybe.__default.unwrap#canCall| LinearMaybe._default.unwrap$A |m#0@@5|) (and ($IsBox |m#0@@5| (|#$maybe| LinearMaybe._default.unwrap$A)) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A |m#0@@5|)))) (and (= (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@5|) (LinearMaybe.__default.read LinearMaybe._default.unwrap$A |m#0@@5|)) ($IsBox (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@5|) LinearMaybe._default.unwrap$A))) :qid |unknown.0:0| :skolemid |1752| :pattern ( (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@5|)) ))))
(assert (forall ((LinearMaybe._default.unwrap$A@@0 T@U) (|m#0@@6| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A@@0) TyType) (= (type |m#0@@6|) BoxType)) ($IsBox |m#0@@6| (|#$maybe| LinearMaybe._default.unwrap$A@@0))) (= (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@6|) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A@@0 |m#0@@6|))) :qid |unknown.0:0| :skolemid |1753| :pattern ( (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@6|)) )))
(assert (forall ((arg0@@389 T@U) (arg1@@155 T@U) (arg2@@86 T@U) ) (! (= (type (LinearMaybe.__default.give arg0@@389 arg1@@155 arg2@@86)) BoxType) :qid |funType:LinearMaybe.__default.give| :pattern ( (LinearMaybe.__default.give arg0@@389 arg1@@155 arg2@@86)) )))
(assert (forall ((LinearMaybe._default.give$A T@U) ($ly T@U) (|a#0@@1| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A) TyType) (= (type $ly) LayerTypeType)) (= (type |a#0@@1|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly) |a#0@@1|) (LinearMaybe.__default.give LinearMaybe._default.give$A $ly |a#0@@1|))) :qid |unknown.0:0| :skolemid |1754| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly) |a#0@@1|)) )))
(assert  (and (forall ((arg0@@390 T@U) ) (! (= (type (AsFuelBottom arg0@@390)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@390)) )) (= (type $LZ) LayerTypeType)))
(assert (forall ((LinearMaybe._default.give$A@@0 T@U) ($ly@@0 T@U) (|a#0@@2| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A@@0) TyType) (= (type $ly@@0) LayerTypeType)) (= (type |a#0@@2|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $ly@@0 |a#0@@2|) (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $LZ |a#0@@2|))) :qid |unknown.0:0| :skolemid |1755| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 (AsFuelBottom $ly@@0) |a#0@@2|)) )))
(assert  (=> true (forall ((LinearMaybe._default.give$A@@1 T@U) ($ly@@1 T@U) (|a#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@1) TyType) (= (type $ly@@1) LayerTypeType)) (= (type |a#0@@3|) BoxType)) (or (|LinearMaybe.__default.give#canCall| LinearMaybe._default.give$A@@1 |a#0@@3|) ($IsBox |a#0@@3| LinearMaybe._default.give$A@@1))) (and (and (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|)) (= (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|)) |a#0@@3|)) (forall ((|x#0@@5| T@U) ) (!  (=> (= (type |x#0@@5|) BoxType) (=> (and ($IsBox |x#0@@5| (|#$maybe| LinearMaybe._default.give$A@@1)) (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 |x#0@@5|) (= |a#0@@3| (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@5|)))) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|) |x#0@@5|))) :qid |LinearMaybesdfy.25:20| :skolemid |1756| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@5|))) ))) ($IsBox (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|) (|#$maybe| LinearMaybe._default.give$A@@1)))) :qid |unknown.0:0| :skolemid |1757| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|)) ))))
(assert (forall ((LinearMaybe._default.give$A@@2 T@U) ($ly@@2 T@U) (|a#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@2) TyType) (= (type $ly@@2) LayerTypeType)) (= (type |a#0@@4|) BoxType)) ($IsBox |a#0@@4| LinearMaybe._default.give$A@@2)) (= (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@2 |a#0@@4|) true)) :qid |unknown.0:0| :skolemid |1758| :pattern ( (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@2 |a#0@@4|)) )))
(assert (forall ((arg0@@391 T@U) ) (! (= (type (LinearMaybe.__default.empty arg0@@391)) BoxType) :qid |funType:LinearMaybe.__default.empty| :pattern ( (LinearMaybe.__default.empty arg0@@391)) )))
(assert  (=> true (forall ((LinearMaybe._default.empty$A T@U) ) (!  (=> (and (= (type LinearMaybe._default.empty$A) TyType) true) (and (not (LinearMaybe.__default.has LinearMaybe._default.empty$A (LinearMaybe.__default.empty LinearMaybe._default.empty$A))) ($IsBox (LinearMaybe.__default.empty LinearMaybe._default.empty$A) (|#$maybe| LinearMaybe._default.empty$A)))) :qid |unknown.0:0| :skolemid |1759| :pattern ( (LinearMaybe.__default.empty LinearMaybe._default.empty$A)) ))))
(assert (forall ((LinearMaybe._default.empty$A@@0 T@U) ) (!  (=> (= (type LinearMaybe._default.empty$A@@0) TyType) (= (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0) true)) :qid |unknown.0:0| :skolemid |1760| :pattern ( (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0)) )))
(assert (forall ((arg0@@392 T@U) (arg1@@156 T@U) ) (! (= (type (LinearMaybe.__default.discard arg0@@392 arg1@@156)) DatatypeTypeType) :qid |funType:LinearMaybe.__default.discard| :pattern ( (LinearMaybe.__default.discard arg0@@392 arg1@@156)) )))
(assert  (=> true (forall ((LinearMaybe._default.discard$A T@U) (|m#0@@7| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A) TyType) (= (type |m#0@@7|) BoxType)) (or (|LinearMaybe.__default.discard#canCall| LinearMaybe._default.discard$A |m#0@@7|) (and ($IsBox |m#0@@7| (|#$maybe| LinearMaybe._default.discard$A)) (not (LinearMaybe.__default.has LinearMaybe._default.discard$A |m#0@@7|))))) ($Is (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@7|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1761| :pattern ( (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@7|)) ))))
(assert (forall ((LinearMaybe._default.discard$A@@0 T@U) (|m#0@@8| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A@@0) TyType) (= (type |m#0@@8|) BoxType)) ($IsBox |m#0@@8| (|#$maybe| LinearMaybe._default.discard$A@@0))) (= (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@8|)  (not (LinearMaybe.__default.has LinearMaybe._default.discard$A@@0 |m#0@@8|)))) :qid |unknown.0:0| :skolemid |1762| :pattern ( (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@8|)) )))
(assert (forall ((arg0@@393 T@U) (arg1@@157 Bool) (arg2@@87 T@U) ) (! (= (type (LinearMaybe.__default.imagine arg0@@393 arg1@@157 arg2@@87)) BoxType) :qid |funType:LinearMaybe.__default.imagine| :pattern ( (LinearMaybe.__default.imagine arg0@@393 arg1@@157 arg2@@87)) )))
(assert  (=> true (forall ((LinearMaybe._default.imagine$A T@U) (|h#0| Bool) (|a#0@@5| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A) TyType) (= (type |a#0@@5|) BoxType)) (or (|LinearMaybe.__default.imagine#canCall| LinearMaybe._default.imagine$A |h#0| |a#0@@5|) ($IsBox |a#0@@5| LinearMaybe._default.imagine$A))) (and (and (= (LinearMaybe.__default.has LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|)) |h#0|) (= (LinearMaybe.__default.read LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|)) |a#0@@5|)) ($IsBox (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|) (|#$maybe| LinearMaybe._default.imagine$A)))) :qid |unknown.0:0| :skolemid |1763| :pattern ( (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|)) ))))
(assert (forall ((LinearMaybe._default.imagine$A@@0 T@U) (|h#0@@0| Bool) (|a#0@@6| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A@@0) TyType) (= (type |a#0@@6|) BoxType)) ($IsBox |a#0@@6| LinearMaybe._default.imagine$A@@0)) (= (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@6|) true)) :qid |unknown.0:0| :skolemid |1764| :pattern ( (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@6|)) )))
(assert (= (type Tclass.LinearExtern.__default) TyType))
(assert (= (Tag Tclass.LinearExtern.__default) Tagclass.LinearExtern.__default))
(assert (= (TagFamily Tclass.LinearExtern.__default) tytagFamily$_default))
(assert (forall ((bx@@127 T@U) ) (!  (=> (and (= (type bx@@127) BoxType) ($IsBox bx@@127 Tclass.LinearExtern.__default)) (and (= ($Box ($Unbox refType bx@@127)) bx@@127) ($Is ($Unbox refType bx@@127) Tclass.LinearExtern.__default))) :qid |unknown.0:0| :skolemid |1765| :pattern ( ($IsBox bx@@127 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (= ($Is $o@@19 Tclass.LinearExtern.__default)  (or (= $o@@19 null) (= (dtype $o@@19) Tclass.LinearExtern.__default)))) :qid |unknown.0:0| :skolemid |1766| :pattern ( ($Is $o@@19 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@81 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@81) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@20 Tclass.LinearExtern.__default $h@@81)  (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@81 $o@@20) alloc))))) :qid |unknown.0:0| :skolemid |1767| :pattern ( ($IsAlloc $o@@20 Tclass.LinearExtern.__default $h@@81)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_get$A T@U) (|s#0@@3| T@U) (|i#0@@27| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A) TyType) (= (type |s#0@@3|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_get#canCall| LinearSequence_s._default.seq_get$A |s#0@@3| |i#0@@27|) (and (and ($Is |s#0@@3| (TSeq LinearSequence_s._default.seq_get$A)) (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| 18446744073709551616))) (< |i#0@@27| (|Seq#Length| |s#0@@3|))))) (and (= (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@3| |i#0@@27|) (|Seq#Index| |s#0@@3| |i#0@@27|)) ($IsBox (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@3| |i#0@@27|) LinearSequence_s._default.seq_get$A))) :qid |unknown.0:0| :skolemid |1768| :pattern ( (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@3| |i#0@@27|)) ))))
(assert (forall ((LinearSequence_s._default.seq_get$A@@0 T@U) (|s#0@@4| T@U) (|i#0@@28| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A@@0) TyType) (= (type |s#0@@4|) (SeqType BoxType))) (and ($Is |s#0@@4| (TSeq LinearSequence_s._default.seq_get$A@@0)) (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| 18446744073709551616)))) (= (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@4| |i#0@@28|) (< |i#0@@28| (|Seq#Length| |s#0@@4|)))) :qid |unknown.0:0| :skolemid |1769| :pattern ( (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@4| |i#0@@28|)) )))
(assert (forall ((arg0@@394 T@U) (arg1@@158 T@U) (arg2@@88 Int) (arg3@@49 T@U) ) (! (= (type (LinearExtern.__default.seq_set arg0@@394 arg1@@158 arg2@@88 arg3@@49)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_set| :pattern ( (LinearExtern.__default.seq_set arg0@@394 arg1@@158 arg2@@88 arg3@@49)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_set$A T@U) (|s1#0| T@U) (|i#0@@29| Int) (|a#0@@7| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A) TyType) (= (type |s1#0|) (SeqType BoxType))) (= (type |a#0@@7|) BoxType)) (or (|LinearExtern.__default.seq_set#canCall| LinearSequence_s._default.seq_set$A |s1#0| |i#0@@29| |a#0@@7|) (and (and (and ($Is |s1#0| (TSeq LinearSequence_s._default.seq_set$A)) (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| 18446744073709551616))) ($IsBox |a#0@@7| LinearSequence_s._default.seq_set$A)) (< |i#0@@29| (|Seq#Length| |s1#0|))))) (and (|Seq#Equal| (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@29| |a#0@@7|) (|Seq#Update| |s1#0| |i#0@@29| |a#0@@7|)) ($Is (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@29| |a#0@@7|) (TSeq LinearSequence_s._default.seq_set$A)))) :qid |unknown.0:0| :skolemid |1770| :pattern ( (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@29| |a#0@@7|)) ))))
(assert (forall ((LinearSequence_s._default.seq_set$A@@0 T@U) (|s1#0@@0| T@U) (|i#0@@30| Int) (|a#0@@8| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A@@0) TyType) (= (type |s1#0@@0|) (SeqType BoxType))) (= (type |a#0@@8|) BoxType)) (and (and ($Is |s1#0@@0| (TSeq LinearSequence_s._default.seq_set$A@@0)) (and (<= (LitInt 0) |i#0@@30|) (< |i#0@@30| 18446744073709551616))) ($IsBox |a#0@@8| LinearSequence_s._default.seq_set$A@@0))) (= (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@30| |a#0@@8|) (< |i#0@@30| (|Seq#Length| |s1#0@@0|)))) :qid |unknown.0:0| :skolemid |1771| :pattern ( (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@30| |a#0@@8|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_length$A T@U) (|s#0@@5| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A) TyType) (= (type |s#0@@5|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_length#canCall| LinearSequence_s._default.seq_length$A |s#0@@5|) (and ($Is |s#0@@5| (TSeq LinearSequence_s._default.seq_length$A)) (<= (|Seq#Length| |s#0@@5|) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@5|) (|Seq#Length| |s#0@@5|)) (and (<= (LitInt 0) (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@5|)) (< (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@5|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1772| :pattern ( (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@5|)) ))))
(assert (forall ((LinearSequence_s._default.seq_length$A@@0 T@U) (|s#0@@6| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A@@0) TyType) (= (type |s#0@@6|) (SeqType BoxType))) ($Is |s#0@@6| (TSeq LinearSequence_s._default.seq_length$A@@0))) (= (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@6|) (<= (|Seq#Length| |s#0@@6|) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |1773| :pattern ( (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@6|)) )))
(assert (forall ((arg0@@395 T@U) ) (! (= (type (LinearExtern.__default.seq_empty arg0@@395)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_empty| :pattern ( (LinearExtern.__default.seq_empty arg0@@395)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_empty$A T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_empty$A) TyType) true) (and (= (|Seq#Length| (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) (LitInt 0)) ($Is (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A) (TSeq LinearSequence_s._default.seq_empty$A)))) :qid |unknown.0:0| :skolemid |1774| :pattern ( (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) ))))
(assert (forall ((LinearSequence_s._default.seq_empty$A@@0 T@U) ) (!  (=> (= (type LinearSequence_s._default.seq_empty$A@@0) TyType) (= (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0) true)) :qid |unknown.0:0| :skolemid |1775| :pattern ( (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0)) )))
(assert (forall ((arg0@@396 T@U) (arg1@@159 Int) (arg2@@89 T@U) ) (! (= (type (LinearExtern.__default.seq_alloc arg0@@396 arg1@@159 arg2@@89)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_alloc| :pattern ( (LinearExtern.__default.seq_alloc arg0@@396 arg1@@159 arg2@@89)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_alloc$A T@U) (|length#0| Int) (|a#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_alloc$A) TyType) (= (type |a#0@@9|) BoxType)) (or (|LinearExtern.__default.seq_alloc#canCall| LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|) (and (and (<= (LitInt 0) |length#0|) (< |length#0| 18446744073709551616)) ($IsBox |a#0@@9| LinearSequence_s._default.seq_alloc$A)))) (and (and (= (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|)) |length#0|) (forall ((|i#0@@31| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@31|) (< |i#0@@31| (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|)))) (= (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|) |i#0@@31|) |a#0@@9|))) :qid |LinearSequencesdfy.32:20| :skolemid |1776| :pattern ( (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|) |i#0@@31|)) ))) ($Is (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|) (TSeq LinearSequence_s._default.seq_alloc$A)))) :qid |unknown.0:0| :skolemid |1777| :pattern ( (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|)) ))))
(assert (forall ((LinearSequence_s._default.seq_alloc$A@@0 T@U) (|length#0@@0| Int) (|a#0@@10| T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_alloc$A@@0) TyType) (= (type |a#0@@10|) BoxType)) (=> (and (and (<= (LitInt 0) |length#0@@0|) (< |length#0@@0| 18446744073709551616)) ($IsBox |a#0@@10| LinearSequence_s._default.seq_alloc$A@@0)) (= (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@0| |a#0@@10|) true))) :qid |unknown.0:0| :skolemid |1778| :pattern ( (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@0| |a#0@@10|)) )))
(assert (forall ((arg0@@397 T@U) (arg1@@160 T@U) ) (! (= (type (LinearExtern.__default.seq_free arg0@@397 arg1@@160)) DatatypeTypeType) :qid |funType:LinearExtern.__default.seq_free| :pattern ( (LinearExtern.__default.seq_free arg0@@397 arg1@@160)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_free$A T@U) (|s#0@@7| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A) TyType) (= (type |s#0@@7|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_free#canCall| LinearSequence_s._default.seq_free$A |s#0@@7|) ($Is |s#0@@7| (TSeq LinearSequence_s._default.seq_free$A)))) ($Is (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@7|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1779| :pattern ( (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@7|)) ))))
(assert (forall ((LinearSequence_s._default.seq_free$A@@0 T@U) (|s#0@@8| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A@@0) TyType) (= (type |s#0@@8|) (SeqType BoxType))) ($Is |s#0@@8| (TSeq LinearSequence_s._default.seq_free$A@@0))) (= (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@8|) true)) :qid |unknown.0:0| :skolemid |1780| :pattern ( (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@8|)) )))
(assert (forall ((arg0@@398 T@U) (arg1@@161 T@U) ) (! (= (type (LinearExtern.__default.seq_unleash arg0@@398 arg1@@161)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_unleash| :pattern ( (LinearExtern.__default.seq_unleash arg0@@398 arg1@@161)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_unleash$A T@U) (|s1#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A) TyType) (= (type |s1#0@@1|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_unleash#canCall| LinearSequence_s._default.seq_unleash$A |s1#0@@1|) ($Is |s1#0@@1| (TSeq LinearSequence_s._default.seq_unleash$A)))) (and (|Seq#Equal| |s1#0@@1| (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ($Is (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|) (TSeq LinearSequence_s._default.seq_unleash$A)))) :qid |unknown.0:0| :skolemid |1781| :pattern ( (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.seq_unleash$A@@0 T@U) (|s1#0@@2| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A@@0) TyType) (= (type |s1#0@@2|) (SeqType BoxType))) ($Is |s1#0@@2| (TSeq LinearSequence_s._default.seq_unleash$A@@0))) (= (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|) true)) :qid |unknown.0:0| :skolemid |1782| :pattern ( (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|)) )))
(assert  (and (forall ((arg0@@399 T@U) (arg1@@162 T@U) ) (! (= (type (LinearExtern.__default.lseqs__raw arg0@@399 arg1@@162)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseqs__raw| :pattern ( (LinearExtern.__default.lseqs__raw arg0@@399 arg1@@162)) )) (forall ((arg0@@400 T@U) ) (! (= (type (|#$lseq| arg0@@400)) TyType) :qid |funType:#$lseq| :pattern ( (|#$lseq| arg0@@400)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseqs_raw$A T@U) (|l#0@@3| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A) TyType) (= (type |l#0@@3|) BoxType)) (or (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseqs_raw$A |l#0@@3|) ($IsBox |l#0@@3| (|#$lseq| LinearSequence_s._default.lseqs_raw$A)))) ($Is (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0@@3|) (TSeq (|#$maybe| LinearSequence_s._default.lseqs_raw$A)))) :qid |unknown.0:0| :skolemid |1784| :pattern ( (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0@@3|)) ))))
(assert (forall ((LinearSequence_s._default.lseqs_raw$A@@0 T@U) (|l#0@@4| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A@@0) TyType) (= (type |l#0@@4|) BoxType)) ($IsBox |l#0@@4| (|#$lseq| LinearSequence_s._default.lseqs_raw$A@@0))) (= (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@4|) true)) :qid |unknown.0:0| :skolemid |1785| :pattern ( (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@4|)) )))
(assert (forall ((arg0@@401 T@U) (arg1@@163 T@U) ) (! (= (type (LinearExtern.__default.lseq__has arg0@@401 arg1@@163)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseq__has| :pattern ( (LinearExtern.__default.lseq__has arg0@@401 arg1@@163)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A T@U) (|l#0@@5| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_has$A) TyType) (= (type |l#0@@5|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A |l#0@@5|) ($IsBox |l#0@@5| (|#$lseq| LinearSequence_s._default.lseq_has$A)))) (and (= (|Seq#Length| (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@5|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A |l#0@@5|))) ($Is (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@5|) (TSeq TBool)))) :qid |unknown.0:0| :skolemid |1786| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@5|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_has$A@@0 T@U) ($Heap@@5 T@U) (|l#0@@6| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@0) TyType) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |l#0@@6|) BoxType)) (and ($IsGoodHeap $Heap@@5) ($IsBox |l#0@@6| (|#$lseq| LinearSequence_s._default.lseq_has$A@@0)))) (= (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@6|) true)) :qid |unknown.0:0| :skolemid |1787| :pattern ( (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@6|) ($IsGoodHeap $Heap@@5)) )))
(assert  (and (and (and (and (forall ((arg0@@402 T@U) ) (! (= (type (|lambda#24| arg0@@402)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@402)) )) (forall ((arg0@@403 T@U) (arg1@@164 T@U) ) (! (= (type (|lambda#154| arg0@@403 arg1@@164)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#154| :pattern ( (|lambda#154| arg0@@403 arg1@@164)) ))) (forall ((arg0@@404 T@U) (arg1@@165 Int) (arg2@@90 Int) ) (! (= (type (|lambda#36| arg0@@404 arg1@@165 arg2@@90)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@404 arg1@@165 arg2@@90)) ))) (forall ((arg0@@405 T@U) ) (! (= (type (|lambda#23| arg0@@405)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@405)) ))) (forall ((arg0@@406 Bool) ) (! (= (type (|lambda#22| arg0@@406)) (MapType0Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@406)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@1 T@U) ($Heap@@6 T@U) (|l#0@@7| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@1) TyType) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |l#0@@7|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|) (and ($IsGoodHeap $Heap@@6) ($IsBox |l#0@@7| (|#$lseq| LinearSequence_s._default.lseq_has$A@@1))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|) (forall ((|$l#1#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#1#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|)) (=> (and (<= (LitInt 0) |$l#1#i#0|) (< |$l#1#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|)))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@1 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|) |$l#1#i#0|))))) :qid |unknown.0:0| :skolemid |1788| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|) (|Seq#Create| TBool $Heap@@6 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|)) (Lit (AtLayer (|lambda#24| (Handle1 (|lambda#154| LinearSequence_s._default.lseq_has$A@@1 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|)) (|lambda#36| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|))) (|lambda#23| (SetRef_to_SetBox (|lambda#22| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :skolemid |1789| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@7|) ($IsGoodHeap $Heap@@6)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@2 T@U) ($Heap@@7 T@U) (|l#0@@8| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@2) TyType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |l#0@@8|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|)) (and ($IsGoodHeap $Heap@@7) ($IsBox |l#0@@8| (|#$lseq| LinearSequence_s._default.lseq_has$A@@2))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|)) (forall ((|$l#3#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#3#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|))) (=> (and (<= (LitInt 0) |$l#3#i#0|) (< |$l#3#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|))))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|)) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@2 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|)) |$l#3#i#0|))))) :qid |unknown.0:0| :skolemid |1790| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|)) (|Seq#Create| TBool $Heap@@7 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|))) (Lit (AtLayer (|lambda#24| (Handle1 (|lambda#154| LinearSequence_s._default.lseq_has$A@@2 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|))) (|lambda#36| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|)))) (|lambda#23| (SetRef_to_SetBox (|lambda#22| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :weight 3 :skolemid |1791| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@8|)) ($IsGoodHeap $Heap@@7)) ))))
(assert (forall ((arg0@@407 T@U) (arg1@@166 T@U) ) (! (= (type (LinearExtern.__default.imagine__lseq__raw arg0@@407 arg1@@166)) BoxType) :qid |funType:LinearExtern.__default.imagine__lseq__raw| :pattern ( (LinearExtern.__default.imagine__lseq__raw arg0@@407 arg1@@166)) )))
(assert  (=> true (forall ((LinearSequence_s._default.imagine_lseq_raw$A T@U) (|s#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A) TyType) (= (type |s#0@@9|) (SeqType BoxType))) (or (|LinearExtern.__default.imagine__lseq__raw#canCall| LinearSequence_s._default.imagine_lseq_raw$A |s#0@@9|) ($Is |s#0@@9| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A))))) (and (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.imagine_lseq_raw$A (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@9|)) |s#0@@9|) ($IsBox (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@9|) (|#$lseq| LinearSequence_s._default.imagine_lseq_raw$A)))) :qid |unknown.0:0| :skolemid |1792| :pattern ( (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@9|)) ))))
(assert (forall ((LinearSequence_s._default.imagine_lseq_raw$A@@0 T@U) (|s#0@@10| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A@@0) TyType) (= (type |s#0@@10|) (SeqType BoxType))) ($Is |s#0@@10| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A@@0)))) (= (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@10|) true)) :qid |unknown.0:0| :skolemid |1793| :pattern ( (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@10|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_length_raw$A T@U) (|s#0@@11| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A) TyType) (= (type |s#0@@11|) BoxType)) (or (|LinearExtern.__default.lseq_length_raw#canCall| LinearSequence_s._default.lseq_length_raw$A |s#0@@11|) (and ($IsBox |s#0@@11| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A)) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@11|)) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@11|) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@11|))) (and (<= (LitInt 0) (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@11|)) (< (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@11|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1794| :pattern ( (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@11|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_length_raw$A@@0 T@U) (|s#0@@12| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A@@0) TyType) (= (type |s#0@@12|) BoxType)) ($IsBox |s#0@@12| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A@@0))) (= (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@12|) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@12|)) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |1795| :pattern ( (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@12|)) )))
(assert (forall ((arg0@@408 T@U) (arg1@@167 Int) ) (! (= (type (LinearExtern.__default.lseq_alloc_raw arg0@@408 arg1@@167)) BoxType) :qid |funType:LinearExtern.__default.lseq_alloc_raw| :pattern ( (LinearExtern.__default.lseq_alloc_raw arg0@@408 arg1@@167)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_alloc_raw$A T@U) (|length#0@@1| Int) ) (!  (=> (and (= (type LinearSequence_s._default.lseq_alloc_raw$A) TyType) (or (|LinearExtern.__default.lseq_alloc_raw#canCall| LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|) (and (<= (LitInt 0) |length#0@@1|) (< |length#0@@1| 18446744073709551616)))) (and (and (= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|))) |length#0@@1|) (forall ((|i#0@@32| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@32|) (< |i#0@@32| |length#0@@1|)) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_alloc_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|)) |i#0@@32|)))) :qid |LinearSequencesdfy.90:22| :skolemid |1796| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|)) |i#0@@32|)) ))) ($IsBox (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|) (|#$lseq| LinearSequence_s._default.lseq_alloc_raw$A)))) :qid |unknown.0:0| :skolemid |1797| :pattern ( (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_alloc_raw$A@@0 T@U) (|length#0@@2| Int) ) (!  (=> (= (type LinearSequence_s._default.lseq_alloc_raw$A@@0) TyType) (=> (and (<= (LitInt 0) |length#0@@2|) (< |length#0@@2| 18446744073709551616)) (= (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@2|) true))) :qid |unknown.0:0| :skolemid |1798| :pattern ( (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@2|)) )))
(assert (forall ((arg0@@409 T@U) (arg1@@168 T@U) ) (! (= (type (LinearExtern.__default.lseq_free_raw arg0@@409 arg1@@168)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_free_raw| :pattern ( (LinearExtern.__default.lseq_free_raw arg0@@409 arg1@@168)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_free_raw$A T@U) (|s#0@@13| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A) TyType) (= (type |s#0@@13|) BoxType)) (or (|LinearExtern.__default.lseq_free_raw#canCall| LinearSequence_s._default.lseq_free_raw$A |s#0@@13|) (and ($IsBox |s#0@@13| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A)) (forall ((|i#0@@33| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@33|) (< |i#0@@33| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@13|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@13|) |i#0@@33|)))) :qid |LinearSequencesdfy.93:23| :skolemid |1799| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@13|) |i#0@@33|)) ))))) ($Is (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@13|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1800| :pattern ( (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@13|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_free_raw$A@@0 T@U) (|s#0@@14| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A@@0) TyType) (= (type |s#0@@14|) BoxType)) ($IsBox |s#0@@14| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A@@0))) (= (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@14|) (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@14|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A@@0 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@14|) |i#1@@1|)))) :qid |LinearSequencesdfy.93:23| :skolemid |1801| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@14|) |i#1@@1|)) )))) :qid |unknown.0:0| :skolemid |1802| :pattern ( (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@14|)) )))
(assert (forall ((arg0@@410 T@U) (arg1@@169 T@U) (arg2@@91 Int) (arg3@@50 T@U) ) (! (= (type (LinearExtern.__default.lseq_swap_raw_fun arg0@@410 arg1@@169 arg2@@91 arg3@@50)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_swap_raw_fun| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun arg0@@410 arg1@@169 arg2@@91 arg3@@50)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A T@U) (|s1#0@@3| T@U) (|i#0@@34| Int) (|a1#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A) TyType) (= (type |s1#0@@3|) BoxType)) (= (type |a1#0|) BoxType)) (or (|LinearExtern.__default.lseq_swap_raw_fun#canCall| LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|) (and (and (and ($IsBox |s1#0@@3| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A)) (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| 18446744073709551616))) ($IsBox |a1#0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))) (< |i#0@@34| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|)))))) (and (and (= (_System.Tuple2OLL._1 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|)) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@34|)) (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A (_System.Tuple2OLL._0 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|))) (|Seq#Update| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@34| |a1#0|))) ($Is (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A) (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))))) :qid |unknown.0:0| :skolemid |1803| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A@@0 T@U) (|s1#0@@4| T@U) (|i#0@@35| Int) (|a1#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A@@0) TyType) (= (type |s1#0@@4|) BoxType)) (= (type |a1#0@@0|) BoxType)) (and (and ($IsBox |s1#0@@4| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)) (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| 18446744073709551616))) ($IsBox |a1#0@@0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)))) (= (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@35| |a1#0@@0|) (< |i#0@@35| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4|))))) :qid |unknown.0:0| :skolemid |1804| :pattern ( (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@35| |a1#0@@0|)) )))
(assert (forall ((arg0@@411 T@U) (arg1@@170 T@U) (arg2@@92 Int) ) (! (= (type (LinearExtern.__default.lseq_share_raw arg0@@411 arg1@@170 arg2@@92)) BoxType) :qid |funType:LinearExtern.__default.lseq_share_raw| :pattern ( (LinearExtern.__default.lseq_share_raw arg0@@411 arg1@@170 arg2@@92)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_share_raw$A T@U) (|s#0@@15| T@U) (|i#0@@36| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A) TyType) (= (type |s#0@@15|) BoxType)) (or (|LinearExtern.__default.lseq_share_raw#canCall| LinearSequence_s._default.lseq_share_raw$A |s#0@@15| |i#0@@36|) (and (and ($IsBox |s#0@@15| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A)) (and (<= (LitInt 0) |i#0@@36|) (< |i#0@@36| 18446744073709551616))) (< |i#0@@36| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@15|)))))) (and (= (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@15| |i#0@@36|) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@15|) |i#0@@36|)) ($IsBox (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@15| |i#0@@36|) (|#$maybe| LinearSequence_s._default.lseq_share_raw$A)))) :qid |unknown.0:0| :skolemid |1805| :pattern ( (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@15| |i#0@@36|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_share_raw$A@@0 T@U) (|s#0@@16| T@U) (|i#0@@37| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A@@0) TyType) (= (type |s#0@@16|) BoxType)) (and ($IsBox |s#0@@16| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A@@0)) (and (<= (LitInt 0) |i#0@@37|) (< |i#0@@37| 18446744073709551616)))) (= (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@16| |i#0@@37|) (< |i#0@@37| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@16|))))) :qid |unknown.0:0| :skolemid |1806| :pattern ( (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@16| |i#0@@37|)) )))
(assert (= (type Tclass.LinearSequence__i.__default) TyType))
(assert (= (Tag Tclass.LinearSequence__i.__default) Tagclass.LinearSequence__i.__default))
(assert (= (TagFamily Tclass.LinearSequence__i.__default) tytagFamily$_default))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (= ($Is $o@@21 Tclass.LinearSequence__i.__default)  (or (= $o@@21 null) (= (dtype $o@@21) Tclass.LinearSequence__i.__default)))) :qid |unknown.0:0| :skolemid |1807| :pattern ( ($Is $o@@21 Tclass.LinearSequence__i.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@82 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@82) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@22 Tclass.LinearSequence__i.__default $h@@82)  (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@82 $o@@22) alloc))))) :qid |unknown.0:0| :skolemid |1808| :pattern ( ($IsAlloc $o@@22 Tclass.LinearSequence__i.__default $h@@82)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@171 Int) (arg2@@93 T@U) ) (! (= (type (LinearSequence__i.__default.seq__alloc__init arg0@@412 arg1@@171 arg2@@93)) (SeqType BoxType)) :qid |funType:LinearSequence__i.__default.seq__alloc__init| :pattern ( (LinearSequence__i.__default.seq__alloc__init arg0@@412 arg1@@171 arg2@@93)) )))
(assert  (=> true (forall ((LinearSequence_i._default.seq_alloc_init$A T@U) (|length#0@@3| Int) (|a#0@@11| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.seq_alloc_init$A) TyType) (= (type |a#0@@11|) BoxType)) (or (|LinearSequence__i.__default.seq__alloc__init#canCall| LinearSequence_i._default.seq_alloc_init$A |length#0@@3| |a#0@@11|) (and (and (<= (LitInt 0) |length#0@@3|) (< |length#0@@3| 18446744073709551616)) ($IsBox |a#0@@11| LinearSequence_i._default.seq_alloc_init$A)))) (and (and (= (|Seq#Length| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@3| |a#0@@11|)) |length#0@@3|) (forall ((|i#0@@38| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| (|Seq#Length| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@3| |a#0@@11|)))) (= (|Seq#Index| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@3| |a#0@@11|) |i#0@@38|) |a#0@@11|)) :qid |LinearSequenceidfy.22:22| :skolemid |1809| :pattern ( (|Seq#Index| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@3| |a#0@@11|) |i#0@@38|)) ))) ($Is (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@3| |a#0@@11|) (TSeq LinearSequence_i._default.seq_alloc_init$A)))) :qid |unknown.0:0| :skolemid |1810| :pattern ( (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@3| |a#0@@11|)) ))))
(assert (forall ((LinearSequence_i._default.seq_alloc_init$A@@0 T@U) (|length#0@@4| Int) (|a#0@@12| T@U) ) (!  (=> (and (= (type LinearSequence_i._default.seq_alloc_init$A@@0) TyType) (= (type |a#0@@12|) BoxType)) (=> (and (and (<= (LitInt 0) |length#0@@4|) (< |length#0@@4| 18446744073709551616)) ($IsBox |a#0@@12| LinearSequence_i._default.seq_alloc_init$A@@0)) (= (|LinearSequence__i.__default.seq__alloc__init#requires| LinearSequence_i._default.seq_alloc_init$A@@0 |length#0@@4| |a#0@@12|) true))) :qid |unknown.0:0| :skolemid |1811| :pattern ( (|LinearSequence__i.__default.seq__alloc__init#requires| LinearSequence_i._default.seq_alloc_init$A@@0 |length#0@@4| |a#0@@12|)) )))
(assert (forall ((arg0@@413 T@U) (arg1@@172 T@U) ) (! (= (type (LinearSequence__i.__default.lseqs arg0@@413 arg1@@172)) (SeqType BoxType)) :qid |funType:LinearSequence__i.__default.lseqs| :pattern ( (LinearSequence__i.__default.lseqs arg0@@413 arg1@@172)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseqs$A T@U) (|l#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseqs$A) TyType) (= (type |l#0@@9|) BoxType)) (or (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.lseqs$A |l#0@@9|) ($IsBox |l#0@@9| (|#$lseq| LinearSequence_i._default.lseqs$A)))) (and (= (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@9|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_i._default.lseqs$A |l#0@@9|))) ($Is (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@9|) (TSeq LinearSequence_i._default.lseqs$A)))) :qid |unknown.0:0| :skolemid |1812| :pattern ( (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@9|)) ))))
(assert (forall ((LinearSequence_i._default.lseqs$A@@0 T@U) (|l#0@@10| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseqs$A@@0) TyType) (= (type |l#0@@10|) BoxType)) ($IsBox |l#0@@10| (|#$lseq| LinearSequence_i._default.lseqs$A@@0))) (= (|LinearSequence__i.__default.lseqs#requires| LinearSequence_i._default.lseqs$A@@0 |l#0@@10|) true)) :qid |unknown.0:0| :skolemid |1813| :pattern ( (|LinearSequence__i.__default.lseqs#requires| LinearSequence_i._default.lseqs$A@@0 |l#0@@10|)) )))
(assert (forall ((arg0@@414 T@U) (arg1@@173 T@U) ) (! (= (type (LinearSequence__i.__default.imagine__lseq arg0@@414 arg1@@173)) BoxType) :qid |funType:LinearSequence__i.__default.imagine__lseq| :pattern ( (LinearSequence__i.__default.imagine__lseq arg0@@414 arg1@@173)) )))
(assert  (=> true (forall ((LinearSequence_i._default.imagine_lseq$A T@U) (|s#0@@17| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.imagine_lseq$A) TyType) (= (type |s#0@@17|) (SeqType BoxType))) (or (|LinearSequence__i.__default.imagine__lseq#canCall| LinearSequence_i._default.imagine_lseq$A |s#0@@17|) ($Is |s#0@@17| (TSeq LinearSequence_i._default.imagine_lseq$A)))) (and (and (|Seq#Equal| (LinearSequence__i.__default.lseqs LinearSequence_i._default.imagine_lseq$A (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@17|)) |s#0@@17|) (forall ((|i#0@@39| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| (|Seq#Length| |s#0@@17|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.imagine_lseq$A (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@17|)) |i#0@@39|))))) :qid |LinearSequenceidfy.37:20| :skolemid |1814| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.imagine_lseq$A (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@17|)) |i#0@@39|))) ))) ($IsBox (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@17|) (|#$lseq| LinearSequence_i._default.imagine_lseq$A)))) :qid |unknown.0:0| :skolemid |1815| :pattern ( (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@17|)) ))))
(assert (forall ((LinearSequence_i._default.imagine_lseq$A@@0 T@U) (|s#0@@18| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.imagine_lseq$A@@0) TyType) (= (type |s#0@@18|) (SeqType BoxType))) ($Is |s#0@@18| (TSeq LinearSequence_i._default.imagine_lseq$A@@0))) (= (|LinearSequence__i.__default.imagine__lseq#requires| LinearSequence_i._default.imagine_lseq$A@@0 |s#0@@18|) true)) :qid |unknown.0:0| :skolemid |1816| :pattern ( (|LinearSequence__i.__default.imagine__lseq#requires| LinearSequence_i._default.imagine_lseq$A@@0 |s#0@@18|)) )))
(assert (forall ((arg0@@415 T@U) (arg1@@174 T@U) ) (! (= (type (LinearSequence__i.__default.linLast arg0@@415 arg1@@174)) BoxType) :qid |funType:LinearSequence__i.__default.linLast| :pattern ( (LinearSequence__i.__default.linLast arg0@@415 arg1@@174)) )))
(assert  (=> true (forall ((LinearSequence_i._default.linLast$A T@U) (|l#0@@11| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A) TyType) (= (type |l#0@@11|) BoxType)) (or (|LinearSequence__i.__default.linLast#canCall| LinearSequence_i._default.linLast$A |l#0@@11|) (and ($IsBox |l#0@@11| (|#$lseq| LinearSequence_i._default.linLast$A)) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A |l#0@@11|))))) ($IsBox (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A |l#0@@11|) LinearSequence_i._default.linLast$A)) :qid |unknown.0:0| :skolemid |1818| :pattern ( (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A |l#0@@11|)) ))))
(assert (forall ((LinearSequence_i._default.linLast$A@@0 T@U) (|l#0@@12| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A@@0) TyType) (= (type |l#0@@12|) BoxType)) ($IsBox |l#0@@12| (|#$lseq| LinearSequence_i._default.linLast$A@@0))) (= (|LinearSequence__i.__default.linLast#requires| LinearSequence_i._default.linLast$A@@0 |l#0@@12|) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@0 |l#0@@12|)))) :qid |unknown.0:0| :skolemid |1819| :pattern ( (|LinearSequence__i.__default.linLast#requires| LinearSequence_i._default.linLast$A@@0 |l#0@@12|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.linLast$A@@1 T@U) (|l#0@@13| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A@@1) TyType) (= (type |l#0@@13|) BoxType)) (or (|LinearSequence__i.__default.linLast#canCall| LinearSequence_i._default.linLast$A@@1 |l#0@@13|) (and ($IsBox |l#0@@13| (|#$lseq| LinearSequence_i._default.linLast$A@@1)) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@1 |l#0@@13|))))) (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.linLast$A@@1 |l#0@@13|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.linLast$A@@1 |l#0@@13|)) (= (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@1 |l#0@@13|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.linLast$A@@1 |l#0@@13|) (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@1 |l#0@@13|) 1))))) :qid |unknown.0:0| :skolemid |1820| :pattern ( (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@1 |l#0@@13|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.linLast$A@@2 T@U) (|l#0@@14| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A@@2) TyType) (= (type |l#0@@14|) BoxType)) (or (|LinearSequence__i.__default.linLast#canCall| LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@14|)) (and ($IsBox |l#0@@14| (|#$lseq| LinearSequence_i._default.linLast$A@@2)) (U_2_bool (Lit (bool_2_U (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@14|))))))))) (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@14|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@14|))) (= (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@14|)) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@14|)) (LitInt (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@14|)) 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1821| :pattern ( (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@14|))) ))))
(assert (forall ((arg0@@416 T@U) (arg1@@175 T@U) ) (! (= (type (LinearSequence__i.__default.ldroplast arg0@@416 arg1@@175)) BoxType) :qid |funType:LinearSequence__i.__default.ldroplast| :pattern ( (LinearSequence__i.__default.ldroplast arg0@@416 arg1@@175)) )))
(assert  (=> true (forall ((LinearSequence_i._default.ldroplast$A T@U) (|l#0@@15| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A) TyType) (= (type |l#0@@15|) BoxType)) (or (|LinearSequence__i.__default.ldroplast#canCall| LinearSequence_i._default.ldroplast$A |l#0@@15|) (and ($IsBox |l#0@@15| (|#$lseq| LinearSequence_i._default.ldroplast$A)) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A |l#0@@15|))))) (and (and (= (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A |l#0@@15|) (+ (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@15|)) 1)) (forall ((|i#0@@40| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@15|)))) (= (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@15|)) |i#0@@40|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A |l#0@@15|) |i#0@@40|)))) :qid |LinearSequenceidfy.58:20| :skolemid |1822| :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A |l#0@@15|) |i#0@@40|)) :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@15|)) |i#0@@40|)) ))) ($IsBox (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@15|) (|#$lseq| LinearSequence_i._default.ldroplast$A)))) :qid |unknown.0:0| :skolemid |1823| :pattern ( (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@15|)) ))))
(assert (forall ((LinearSequence_i._default.ldroplast$A@@0 T@U) (|l#0@@16| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A@@0) TyType) (= (type |l#0@@16|) BoxType)) ($IsBox |l#0@@16| (|#$lseq| LinearSequence_i._default.ldroplast$A@@0))) (= (|LinearSequence__i.__default.ldroplast#requires| LinearSequence_i._default.ldroplast$A@@0 |l#0@@16|) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@0 |l#0@@16|)))) :qid |unknown.0:0| :skolemid |1824| :pattern ( (|LinearSequence__i.__default.ldroplast#requires| LinearSequence_i._default.ldroplast$A@@0 |l#0@@16|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.ldroplast$A@@1 T@U) (|l#0@@17| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A@@1) TyType) (= (type |l#0@@17|) BoxType)) (or (|LinearSequence__i.__default.ldroplast#canCall| LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|) (and ($IsBox |l#0@@17| (|#$lseq| LinearSequence_i._default.ldroplast$A@@1)) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|))))) (and (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|)) (|LinearSequence__i.__default.imagine__lseq#canCall| LinearSequence_i._default.ldroplast$A@@1 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|) (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|) 1)))) (= (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|) (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.ldroplast$A@@1 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|) (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|) 1)))))) :qid |unknown.0:0| :skolemid |1825| :pattern ( (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@1 |l#0@@17|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.ldroplast$A@@2 T@U) (|l#0@@18| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A@@2) TyType) (= (type |l#0@@18|) BoxType)) (or (|LinearSequence__i.__default.ldroplast#canCall| LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|)) (and ($IsBox |l#0@@18| (|#$lseq| LinearSequence_i._default.ldroplast$A@@2)) (U_2_bool (Lit (bool_2_U (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|))))))))) (and (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|))) (|LinearSequence__i.__default.imagine__lseq#canCall| LinearSequence_i._default.ldroplast$A@@2 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|)) (LitInt (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|)) 1))))) (= (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|)) (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.ldroplast$A@@2 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|)) (LitInt (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|)) 1))))))) :qid |unknown.0:0| :weight 3 :skolemid |1826| :pattern ( (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@18|))) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_has_all$A T@U) (|l#0@@19| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A) TyType) (= (type |l#0@@19|) BoxType)) (or (|LinearSequence__i.__default.lseq__has__all#canCall| LinearSequence_i._default.lseq_has_all$A |l#0@@19|) ($IsBox |l#0@@19| (|#$lseq| LinearSequence_i._default.lseq_has_all$A)))) true) :qid |unknown.0:0| :skolemid |1827| :pattern ( (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A |l#0@@19|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_has_all$A@@0 T@U) (|l#0@@20| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A@@0) TyType) (= (type |l#0@@20|) BoxType)) ($IsBox |l#0@@20| (|#$lseq| LinearSequence_i._default.lseq_has_all$A@@0))) (= (|LinearSequence__i.__default.lseq__has__all#requires| LinearSequence_i._default.lseq_has_all$A@@0 |l#0@@20|) true)) :qid |unknown.0:0| :skolemid |1828| :pattern ( (|LinearSequence__i.__default.lseq__has__all#requires| LinearSequence_i._default.lseq_has_all$A@@0 |l#0@@20|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_has_all$A@@1 T@U) (|l#0@@21| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A@@1) TyType) (= (type |l#0@@21|) BoxType)) (or (|LinearSequence__i.__default.lseq__has__all#canCall| LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|) ($IsBox |l#0@@21| (|#$lseq| LinearSequence_i._default.lseq_has_all$A@@1)))) (and (forall ((|i#0@@41| Int) ) (!  (=> (<= (LitInt 0) |i#0@@41|) (and (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|) (=> (< |i#0@@41| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|)) (|LinearExtern.__default.lseq__has#canCall| LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|)))) :qid |LinearSequenceidfy.80:12| :skolemid |1830| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|) |i#0@@41|))) )) (= (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|) (forall ((|i#0@@42| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@42|) (< |i#0@@42| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|) |i#0@@42|))))) :qid |LinearSequenceidfy.80:12| :skolemid |1829| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|) |i#0@@42|))) ))))) :qid |unknown.0:0| :skolemid |1831| :pattern ( (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@21|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_has_all$A@@2 T@U) (|l#0@@22| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A@@2) TyType) (= (type |l#0@@22|) BoxType)) (or (|LinearSequence__i.__default.lseq__has__all#canCall| LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@22|)) ($IsBox |l#0@@22| (|#$lseq| LinearSequence_i._default.lseq_has_all$A@@2)))) (and (forall ((|i#1@@2| Int) ) (!  (=> (<= (LitInt 0) |i#1@@2|) (and (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@22|)) (=> (< |i#1@@2| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@22|))) (|LinearExtern.__default.lseq__has#canCall| LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@22|))))) :qid |LinearSequenceidfy.80:12| :skolemid |1833| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@2 |l#0@@22|) |i#1@@2|))) )) (= (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@22|)) (forall ((|i#1@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@22|)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@22|))) |i#1@@3|))))) :qid |LinearSequenceidfy.80:12| :skolemid |1832| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@2 |l#0@@22|) |i#1@@3|))) ))))) :qid |unknown.0:0| :weight 3 :skolemid |1834| :pattern ( (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@22|))) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length_as_uint64$A T@U) (|s#0@@19| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length_as_uint64$A) TyType) (= (type |s#0@@19|) BoxType)) (or (|LinearSequence__i.__default.lseq__length__as__uint64#canCall| LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@19|) (and ($IsBox |s#0@@19| (|#$lseq| LinearSequence_i._default.lseq_length_as_uint64$A)) (<= (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@19|)) (LitInt 18446744073709551615))))) (and (= (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@19|) (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@19|))) (and (<= (LitInt 0) (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@19|)) (< (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@19|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1835| :pattern ( (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@19|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_length_as_uint64$A@@0 T@U) (|s#0@@20| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length_as_uint64$A@@0) TyType) (= (type |s#0@@20|) BoxType)) ($IsBox |s#0@@20| (|#$lseq| LinearSequence_i._default.lseq_length_as_uint64$A@@0))) (= (|LinearSequence__i.__default.lseq__length__as__uint64#requires| LinearSequence_i._default.lseq_length_as_uint64$A@@0 |s#0@@20|) (<= (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length_as_uint64$A@@0 |s#0@@20|)) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |1836| :pattern ( (|LinearSequence__i.__default.lseq__length__as__uint64#requires| LinearSequence_i._default.lseq_length_as_uint64$A@@0 |s#0@@20|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length$A T@U) (|s#0@@21| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A) TyType) (= (type |s#0@@21|) BoxType)) (or (|LinearSequence__i.__default.lseq__length#canCall| LinearSequence_i._default.lseq_length$A |s#0@@21|) ($IsBox |s#0@@21| (|#$lseq| LinearSequence_i._default.lseq_length$A)))) (<= (LitInt 0) (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A |s#0@@21|))) :qid |unknown.0:0| :skolemid |1838| :pattern ( (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A |s#0@@21|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_length$A@@0 T@U) (|s#0@@22| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A@@0) TyType) (= (type |s#0@@22|) BoxType)) ($IsBox |s#0@@22| (|#$lseq| LinearSequence_i._default.lseq_length$A@@0))) (= (|LinearSequence__i.__default.lseq__length#requires| LinearSequence_i._default.lseq_length$A@@0 |s#0@@22|) true)) :qid |unknown.0:0| :skolemid |1839| :pattern ( (|LinearSequence__i.__default.lseq__length#requires| LinearSequence_i._default.lseq_length$A@@0 |s#0@@22|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length$A@@1 T@U) (|s#0@@23| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A@@1) TyType) (= (type |s#0@@23|) BoxType)) (or (|LinearSequence__i.__default.lseq__length#canCall| LinearSequence_i._default.lseq_length$A@@1 |s#0@@23|) ($IsBox |s#0@@23| (|#$lseq| LinearSequence_i._default.lseq_length$A@@1)))) (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.lseq_length$A@@1 |s#0@@23|) (= (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@1 |s#0@@23|) (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length$A@@1 |s#0@@23|))))) :qid |unknown.0:0| :skolemid |1840| :pattern ( (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@1 |s#0@@23|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length$A@@2 T@U) (|s#0@@24| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A@@2) TyType) (= (type |s#0@@24|) BoxType)) (or (|LinearSequence__i.__default.lseq__length#canCall| LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@24|)) ($IsBox |s#0@@24| (|#$lseq| LinearSequence_i._default.lseq_length$A@@2)))) (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@24|)) (= (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@24|)) (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@24|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1841| :pattern ( (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@24|))) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A| T@U) (|s#0@@25| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A|) TyType) (= (type |s#0@@25|) BoxType)) (or (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A| |s#0@@25|) ($IsBox |s#0@@25| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A|)))) (<= (LitInt 0) (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A| |s#0@@25|))) :qid |unknown.0:0| :skolemid |1842| :pattern ( (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A| |s#0@@25|)) ))))
(assert (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A@@0| T@U) (|s#0@@26| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A@@0|) TyType) (= (type |s#0@@26|) BoxType)) ($IsBox |s#0@@26| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A@@0|))) (= (|LinearSequence__i.__default.operator_kcardinality_qlseq#requires| |LinearSequence_i._default.operator'cardinality?lseq$A@@0| |s#0@@26|) true)) :qid |unknown.0:0| :skolemid |1843| :pattern ( (|LinearSequence__i.__default.operator_kcardinality_qlseq#requires| |LinearSequence_i._default.operator'cardinality?lseq$A@@0| |s#0@@26|)) )))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A@@1| T@U) (|s#0@@27| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A@@1|) TyType) (= (type |s#0@@27|) BoxType)) (or (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@27|) ($IsBox |s#0@@27| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A@@1|)))) (and (|LinearSequence__i.__default.lseq__length#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@27|) (= (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@27|) (LinearSequence__i.__default.lseq__length |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@27|)))) :qid |unknown.0:0| :skolemid |1844| :pattern ( (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@27|)) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A@@2| T@U) (|s#0@@28| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A@@2|) TyType) (= (type |s#0@@28|) BoxType)) (or (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@28|)) ($IsBox |s#0@@28| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A@@2|)))) (and (|LinearSequence__i.__default.lseq__length#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@28|)) (= (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@28|)) (LitInt (LinearSequence__i.__default.lseq__length |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@28|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1845| :pattern ( (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@28|))) ))))
(assert (forall ((arg0@@417 T@U) (arg1@@176 T@U) (arg2@@94 Int) ) (! (= (type (LinearSequence__i.__default.operator_ksubscript_qlseq arg0@@417 arg1@@176 arg2@@94)) BoxType) :qid |funType:LinearSequence__i.__default.operator_ksubscript_qlseq| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq arg0@@417 arg1@@176 arg2@@94)) )))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A| T@U) (|s#0@@29| T@U) (|i#0@@43| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A|) TyType) (= (type |s#0@@29|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@29| |i#0@@43|) (and (and ($IsBox |s#0@@29| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A|)) (<= (LitInt 0) |i#0@@43|)) (< |i#0@@43| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@29|))))) ($IsBox (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@29| |i#0@@43|) |LinearSequence_i._default.operator'subscript?lseq$A|)) :qid |unknown.0:0| :skolemid |1846| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@29| |i#0@@43|)) ))))
(assert (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@0| T@U) (|s#0@@30| T@U) (|i#0@@44| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@0|) TyType) (= (type |s#0@@30|) BoxType)) (and ($IsBox |s#0@@30| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@0|)) (<= (LitInt 0) |i#0@@44|))) (= (|LinearSequence__i.__default.operator_ksubscript_qlseq#requires| |LinearSequence_i._default.operator'subscript?lseq$A@@0| |s#0@@30| |i#0@@44|) (< |i#0@@44| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@0| |s#0@@30|)))) :qid |unknown.0:0| :skolemid |1847| :pattern ( (|LinearSequence__i.__default.operator_ksubscript_qlseq#requires| |LinearSequence_i._default.operator'subscript?lseq$A@@0| |s#0@@30| |i#0@@44|)) )))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@1| T@U) (|s#0@@31| T@U) (|i#0@@45| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@1|) TyType) (= (type |s#0@@31|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@31| |i#0@@45|) (and (and ($IsBox |s#0@@31| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@1|)) (<= (LitInt 0) |i#0@@45|)) (< |i#0@@45| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@31|))))) (and (|LinearSequence__i.__default.lseqs#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@31|) (= (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@31| |i#0@@45|) (|Seq#Index| (LinearSequence__i.__default.lseqs |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@31|) |i#0@@45|)))) :qid |unknown.0:0| :skolemid |1848| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@31| |i#0@@45|)) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@2| T@U) (|s#0@@32| T@U) (|i#0@@46| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@2|) TyType) (= (type |s#0@@32|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@32| (LitInt |i#0@@46|)) (and (and ($IsBox |s#0@@32| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@2|)) (<= (LitInt 0) |i#0@@46|)) (< |i#0@@46| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@32|))))) (and (|LinearSequence__i.__default.lseqs#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@32|) (= (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@32| (LitInt |i#0@@46|)) (|Seq#Index| (LinearSequence__i.__default.lseqs |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@32|) (LitInt |i#0@@46|))))) :qid |unknown.0:0| :weight 3 :skolemid |1849| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@32| (LitInt |i#0@@46|))) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@3| T@U) (|s#0@@33| T@U) (|i#0@@47| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@3|) TyType) (= (type |s#0@@33|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@33|) (LitInt |i#0@@47|)) (and (and ($IsBox |s#0@@33| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@3|)) (<= (LitInt 0) |i#0@@47|)) (U_2_bool (Lit (bool_2_U (< |i#0@@47| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@33|))))))))) (and (|LinearSequence__i.__default.lseqs#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@33|)) (= (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@33|) (LitInt |i#0@@47|)) (|Seq#Index| (LinearSequence__i.__default.lseqs |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@33|)) (LitInt |i#0@@47|))))) :qid |unknown.0:0| :weight 3 :skolemid |1850| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@33|) (LitInt |i#0@@47|))) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A| T@U) (|s#0@@34| T@U) (|i#0@@48| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A|) TyType) (= (type |s#0@@34|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A| |s#0@@34| |i#0@@48|) (and (and ($IsBox |s#0@@34| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A|)) (<= (LitInt 0) |i#0@@48|)) (< |i#0@@48| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A| |s#0@@34|))))) true) :qid |unknown.0:0| :skolemid |1851| :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A| |s#0@@34| |i#0@@48|)) ))))
(assert (forall ((|LinearSequence_i._default.operator'in?lseq$A@@0| T@U) (|s#0@@35| T@U) (|i#0@@49| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@0|) TyType) (= (type |s#0@@35|) BoxType)) (and ($IsBox |s#0@@35| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@0|)) (<= (LitInt 0) |i#0@@49|))) (= (|LinearSequence__i.__default.operator_kin_qlseq#requires| |LinearSequence_i._default.operator'in?lseq$A@@0| |s#0@@35| |i#0@@49|) (< |i#0@@49| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@0| |s#0@@35|)))) :qid |unknown.0:0| :skolemid |1852| :pattern ( (|LinearSequence__i.__default.operator_kin_qlseq#requires| |LinearSequence_i._default.operator'in?lseq$A@@0| |s#0@@35| |i#0@@49|)) )))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A@@1| T@U) (|s#0@@36| T@U) (|i#0@@50| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@1|) TyType) (= (type |s#0@@36|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@36| |i#0@@50|) (and (and ($IsBox |s#0@@36| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@1|)) (<= (LitInt 0) |i#0@@50|)) (< |i#0@@50| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@36|))))) (and (|LinearExtern.__default.lseq__has#canCall| |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@36|) (= (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@36| |i#0@@50|) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@36|) |i#0@@50|)))))) :qid |unknown.0:0| :skolemid |1853| :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@36| |i#0@@50|)) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A@@2| T@U) (|s#0@@37| T@U) (|i#0@@51| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@2|) TyType) (= (type |s#0@@37|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@37| (LitInt |i#0@@51|)) (and (and ($IsBox |s#0@@37| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@2|)) (<= (LitInt 0) |i#0@@51|)) (< |i#0@@51| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@37|))))) (and (|LinearExtern.__default.lseq__has#canCall| |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@37|) (= (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@37| (LitInt |i#0@@51|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@37|) (LitInt |i#0@@51|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1854| :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@37| (LitInt |i#0@@51|))) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A@@3| T@U) (|s#0@@38| T@U) (|i#0@@52| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@3|) TyType) (= (type |s#0@@38|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@38|) (LitInt |i#0@@52|)) (and (and ($IsBox |s#0@@38| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@3|)) (<= (LitInt 0) |i#0@@52|)) (U_2_bool (Lit (bool_2_U (< |i#0@@52| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@38|))))))))) (and (|LinearExtern.__default.lseq__has#canCall| |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@38|)) (= (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@38|) (LitInt |i#0@@52|)) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit (LinearExtern.__default.lseq__has |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@38|))) (LitInt |i#0@@52|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1855| :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@38|) (LitInt |i#0@@52|))) ))))
(assert (forall ((arg0@@418 T@U) (arg1@@177 T@U) (arg2@@95 T@U) ) (! (= (type (LinearSequence__i.__default.lseq__add arg0@@418 arg1@@177 arg2@@95)) BoxType) :qid |funType:LinearSequence__i.__default.lseq__add| :pattern ( (LinearSequence__i.__default.lseq__add arg0@@418 arg1@@177 arg2@@95)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_add$A T@U) (|l#0@@23| T@U) (|r#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_i._default.lseq_add$A) TyType) (= (type |l#0@@23|) BoxType)) (= (type |r#0|) BoxType)) (or (|LinearSequence__i.__default.lseq__add#canCall| LinearSequence_i._default.lseq_add$A |l#0@@23| |r#0|) (and ($IsBox |l#0@@23| (|#$lseq| LinearSequence_i._default.lseq_add$A)) ($IsBox |r#0| (|#$lseq| LinearSequence_i._default.lseq_add$A))))) ($IsBox (LinearSequence__i.__default.lseq__add LinearSequence_i._default.lseq_add$A |l#0@@23| |r#0|) (|#$lseq| LinearSequence_i._default.lseq_add$A))) :qid |unknown.0:0| :skolemid |1856| :pattern ( (LinearSequence__i.__default.lseq__add LinearSequence_i._default.lseq_add$A |l#0@@23| |r#0|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_add$A@@0 T@U) (|l#0@@24| T@U) (|r#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_i._default.lseq_add$A@@0) TyType) (= (type |l#0@@24|) BoxType)) (= (type |r#0@@0|) BoxType)) (and ($IsBox |l#0@@24| (|#$lseq| LinearSequence_i._default.lseq_add$A@@0)) ($IsBox |r#0@@0| (|#$lseq| LinearSequence_i._default.lseq_add$A@@0)))) (= (|LinearSequence__i.__default.lseq__add#requires| LinearSequence_i._default.lseq_add$A@@0 |l#0@@24| |r#0@@0|) true)) :qid |unknown.0:0| :skolemid |1857| :pattern ( (|LinearSequence__i.__default.lseq__add#requires| LinearSequence_i._default.lseq_add$A@@0 |l#0@@24| |r#0@@0|)) )))
(assert (forall ((arg0@@419 T@U) (arg1@@178 T@U) (arg2@@96 Int) ) (! (= (type (LinearSequence__i.__default.lseq__peek arg0@@419 arg1@@178 arg2@@96)) BoxType) :qid |funType:LinearSequence__i.__default.lseq__peek| :pattern ( (LinearSequence__i.__default.lseq__peek arg0@@419 arg1@@178 arg2@@96)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_peek$A T@U) (|s#0@@39| T@U) (|i#0@@53| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_peek$A) TyType) (= (type |s#0@@39|) BoxType)) (or (|LinearSequence__i.__default.lseq__peek#canCall| LinearSequence_i._default.lseq_peek$A |s#0@@39| |i#0@@53|) (and (and ($IsBox |s#0@@39| (|#$lseq| LinearSequence_i._default.lseq_peek$A)) (and (<= (LitInt 0) |i#0@@53|) (< |i#0@@53| 18446744073709551616))) (and (< |i#0@@53| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_peek$A |s#0@@39|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_peek$A |s#0@@39|) |i#0@@53|))))))) (and (= (LinearSequence__i.__default.lseq__peek LinearSequence_i._default.lseq_peek$A |s#0@@39| |i#0@@53|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_peek$A |s#0@@39|) |i#0@@53|)) ($IsBox (LinearSequence__i.__default.lseq__peek LinearSequence_i._default.lseq_peek$A |s#0@@39| |i#0@@53|) LinearSequence_i._default.lseq_peek$A))) :qid |unknown.0:0| :skolemid |1858| :pattern ( (LinearSequence__i.__default.lseq__peek LinearSequence_i._default.lseq_peek$A |s#0@@39| |i#0@@53|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_peek$A@@0 T@U) (|s#0@@40| T@U) (|i#0@@54| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_peek$A@@0) TyType) (= (type |s#0@@40|) BoxType)) (and ($IsBox |s#0@@40| (|#$lseq| LinearSequence_i._default.lseq_peek$A@@0)) (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| 18446744073709551616)))) (= (|LinearSequence__i.__default.lseq__peek#requires| LinearSequence_i._default.lseq_peek$A@@0 |s#0@@40| |i#0@@54|)  (and (< |i#0@@54| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_peek$A@@0 |s#0@@40|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_peek$A@@0 |s#0@@40|) |i#0@@54|)))))) :qid |unknown.0:0| :skolemid |1859| :pattern ( (|LinearSequence__i.__default.lseq__peek#requires| LinearSequence_i._default.lseq_peek$A@@0 |s#0@@40| |i#0@@54|)) )))
(assert (forall ((arg0@@420 T@U) (arg1@@179 T@U) ) (! (= (type (LinearSequence__i.__default.lseq__free__fun arg0@@420 arg1@@179)) DatatypeTypeType) :qid |funType:LinearSequence__i.__default.lseq__free__fun| :pattern ( (LinearSequence__i.__default.lseq__free__fun arg0@@420 arg1@@179)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_free_fun$A T@U) (|s#0@@41| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_free_fun$A) TyType) (= (type |s#0@@41|) BoxType)) (or (|LinearSequence__i.__default.lseq__free__fun#canCall| LinearSequence_i._default.lseq_free_fun$A |s#0@@41|) (and ($IsBox |s#0@@41| (|#$lseq| LinearSequence_i._default.lseq_free_fun$A)) (forall ((|i#0@@55| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_free_fun$A |s#0@@41|))) (not (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A |s#0@@41|) |i#0@@55|))))) :qid |LinearSequenceidfy.146:23| :skolemid |1865| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A |s#0@@41|) |i#0@@55|))) ))))) ($Is (LinearSequence__i.__default.lseq__free__fun LinearSequence_i._default.lseq_free_fun$A |s#0@@41|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1866| :pattern ( (LinearSequence__i.__default.lseq__free__fun LinearSequence_i._default.lseq_free_fun$A |s#0@@41|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_free_fun$A@@0 T@U) (|s#0@@42| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_free_fun$A@@0) TyType) (= (type |s#0@@42|) BoxType)) ($IsBox |s#0@@42| (|#$lseq| LinearSequence_i._default.lseq_free_fun$A@@0))) (= (|LinearSequence__i.__default.lseq__free__fun#requires| LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@42|) (forall ((|i#1@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@42|))) (not (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@42|) |i#1@@4|))))) :qid |LinearSequenceidfy.146:23| :skolemid |1867| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@42|) |i#1@@4|))) )))) :qid |unknown.0:0| :skolemid |1868| :pattern ( (|LinearSequence__i.__default.lseq__free__fun#requires| LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@42|)) )))
(assert (forall ((arg0@@421 T@U) (arg1@@180 T@U) (arg2@@97 Int) ) (! (= (type (LinearSequence__i.__default.lseq__take__fun arg0@@421 arg1@@180 arg2@@97)) DatatypeTypeType) :qid |funType:LinearSequence__i.__default.lseq__take__fun| :pattern ( (LinearSequence__i.__default.lseq__take__fun arg0@@421 arg1@@180 arg2@@97)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_take_fun$A T@U) (|s1#0@@5| T@U) (|i#0@@56| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_take_fun$A) TyType) (= (type |s1#0@@5|) BoxType)) (or (|LinearSequence__i.__default.lseq__take__fun#canCall| LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@56|) (and (and ($IsBox |s1#0@@5| (|#$lseq| LinearSequence_i._default.lseq_take_fun$A)) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| 18446744073709551616))) (and (< |i#0@@56| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |i#0@@56|))))))) (and (and (and (= (_System.Tuple2OLL._1 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@56|)) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |i#0@@56|)) (|Seq#Equal| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A (_System.Tuple2OLL._0 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@56|))) (|Seq#Update| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |i#0@@56| ($Box (Lit (bool_2_U false)))))) (forall ((|j#0| Int) ) (!  (=> (and (<= (LitInt 0) |j#0|) (and (< |j#0| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|)) (not (= |j#0| |i#0@@56|)))) (= (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A (_System.Tuple2OLL._0 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@56|))) |j#0|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |j#0|))) :qid |LinearSequenceidfy.199:22| :skolemid |1877| :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |j#0|)) :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A (_System.Tuple2OLL._0 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@56|))) |j#0|)) ))) ($Is (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@56|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_i._default.lseq_take_fun$A) LinearSequence_i._default.lseq_take_fun$A)))) :qid |unknown.0:0| :skolemid |1878| :pattern ( (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@56|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_take_fun$A@@0 T@U) (|s1#0@@6| T@U) (|i#0@@57| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_take_fun$A@@0) TyType) (= (type |s1#0@@6|) BoxType)) (and ($IsBox |s1#0@@6| (|#$lseq| LinearSequence_i._default.lseq_take_fun$A@@0)) (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| 18446744073709551616)))) (= (|LinearSequence__i.__default.lseq__take__fun#requires| LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6| |i#0@@57|)  (and (< |i#0@@57| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6|) |i#0@@57|)))))) :qid |unknown.0:0| :skolemid |1879| :pattern ( (|LinearSequence__i.__default.lseq__take__fun#requires| LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6| |i#0@@57|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_full$A T@U) (|s#0@@43| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A) TyType) (= (type |s#0@@43|) BoxType)) (or (|LinearSequence__i.__default.lseq__full#canCall| LinearSequence_i._default.lseq_full$A |s#0@@43|) ($IsBox |s#0@@43| (|#$lseq| LinearSequence_i._default.lseq_full$A)))) true) :qid |unknown.0:0| :skolemid |1882| :pattern ( (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A |s#0@@43|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_full$A@@0 T@U) (|s#0@@44| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A@@0) TyType) (= (type |s#0@@44|) BoxType)) ($IsBox |s#0@@44| (|#$lseq| LinearSequence_i._default.lseq_full$A@@0))) (= (|LinearSequence__i.__default.lseq__full#requires| LinearSequence_i._default.lseq_full$A@@0 |s#0@@44|) true)) :qid |unknown.0:0| :skolemid |1883| :pattern ( (|LinearSequence__i.__default.lseq__full#requires| LinearSequence_i._default.lseq_full$A@@0 |s#0@@44|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_full$A@@1 T@U) (|s#0@@45| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A@@1) TyType) (= (type |s#0@@45|) BoxType)) (or (|LinearSequence__i.__default.lseq__full#canCall| LinearSequence_i._default.lseq_full$A@@1 |s#0@@45|) ($IsBox |s#0@@45| (|#$lseq| LinearSequence_i._default.lseq_full$A@@1)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#0@@58| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@58|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@1 |s#0@@45|)) (=> (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@1 |s#0@@45|))) (|LinearSequence__i.__default.operator_kin_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@1 |s#0@@45| |i#0@@58|))) :qid |LinearSequenceidfy.230:18| :skolemid |1885| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@1 |s#0@@45|) |i#0@@58|))) ))) (= (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@1 |s#0@@45|)  (and true (forall ((|i#0@@59| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@1 |s#0@@45|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@1 |s#0@@45|) |i#0@@59|)))) :qid |LinearSequenceidfy.230:18| :skolemid |1884| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@1 |s#0@@45|) |i#0@@59|))) )))))) :qid |unknown.0:0| :skolemid |1886| :pattern ( (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@1 |s#0@@45|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_full$A@@2 T@U) (|s#0@@46| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A@@2) TyType) (= (type |s#0@@46|) BoxType)) (or (|LinearSequence__i.__default.lseq__full#canCall| LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@46|)) ($IsBox |s#0@@46| (|#$lseq| LinearSequence_i._default.lseq_full$A@@2)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#1@@5| Int) ) (!  (and (=> (<= (LitInt 0) |i#1@@5|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@46|))) (=> (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@46|)))) (|LinearSequence__i.__default.operator_kin_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@46|) |i#1@@5|))) :qid |LinearSequenceidfy.230:18| :skolemid |1888| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@2 |s#0@@46|) |i#1@@5|))) ))) (= (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@46|))  (and true (forall ((|i#1@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@46|)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@46|))) |i#1@@6|)))) :qid |LinearSequenceidfy.230:18| :skolemid |1887| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@2 |s#0@@46|) |i#1@@6|))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |1889| :pattern ( (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@46|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@422 T@T) (arg1@@181 T@T) ) (! (= (Ctor (MapType6Type arg0@@422 arg1@@181)) 28) :qid |ctor:MapType6Type| )) (forall ((arg0@@423 T@T) (arg1@@182 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@423 arg1@@182)) arg0@@423) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@423 arg1@@182)) ))) (forall ((arg0@@424 T@T) (arg1@@183 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@424 arg1@@183)) arg1@@183) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@424 arg1@@183)) ))) (forall ((arg0@@425 T@U) (arg1@@184 T@U) (arg2@@98 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@425)))) (= (type (MapType6Select arg0@@425 arg1@@184 arg2@@98)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@425 arg1@@184 arg2@@98)) ))) (forall ((arg0@@426 T@U) (arg1@@185 T@U) (arg2@@99 T@U) (arg3@@51 T@U) ) (! (let ((aVar1@@7 (type arg3@@51))) (let ((aVar0@@4 (type arg1@@185))) (= (type (MapType6Store arg0@@426 arg1@@185 arg2@@99 arg3@@51)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@426 arg1@@185 arg2@@99 arg3@@51)) ))) (forall ((m@@68 T@U) (x0@@28 T@U) (x1@@22 T@U) (val@@29 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@68)))) (=> (= (type val@@29) aVar1@@8) (= (MapType6Select (MapType6Store m@@68 x0@@28 x1@@22 val@@29) x0@@28 x1@@22) val@@29))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@30 T@U) (m@@69 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x0@@29 y0@@22) (= (MapType6Select (MapType6Store m@@69 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@69 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@31 T@U) (m@@70 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or (= x1@@24 y1@@19) (= (MapType6Select (MapType6Store m@@70 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@70 y0@@23 y1@@19))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@32 T@U) (m@@71 T@U) (x0@@31 T@U) (x1@@25 T@U) (y0@@24 T@U) (y1@@20 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@71 x0@@31 x1@@25 val@@32) y0@@24 y1@@20) (MapType6Select m@@71 y0@@24 y1@@20))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@427 T@U) (arg1@@186 T@U) (arg2@@100 T@U) (arg3@@52 Bool) ) (! (= (type (|lambda#0| arg0@@427 arg1@@186 arg2@@100 arg3@@52)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@427 arg1@@186 arg2@@100 arg3@@52)) ))))
(assert (forall ((|l#0@@25| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@23 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (and (and (= (type |l#0@@25|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@23) refType)) (= (type $f@@1) (FieldType alpha@@8))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0@@25| |l#1| |l#2| |l#3|) $o@@23 $f@@1))  (=> (and (not (= $o@@23 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@23) |l#2|))) |l#3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1923| :pattern ( (MapType6Select (|lambda#0| |l#0@@25| |l#1| |l#2| |l#3|) $o@@23 $f@@1)) )))
(assert (forall ((arg0@@428 T@U) (arg1@@187 T@U) (arg2@@101 T@U) (arg3@@53 Bool) ) (! (= (type (|lambda#1| arg0@@428 arg1@@187 arg2@@101 arg3@@53)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@428 arg1@@187 arg2@@101 arg3@@53)) )))
(assert (forall ((|l#0@@26| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@24 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (and (and (= (type |l#0@@26|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@24) refType)) (= (type $f@@2) (FieldType alpha@@9))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@26| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@24 $f@@2))  (=> (and (not (= $o@@24 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@24) |l#2@@0|))) |l#3@@0|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1924| :pattern ( (MapType6Select (|lambda#1| |l#0@@26| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@24 $f@@2)) )))
(assert (forall ((arg0@@429 T@U) (arg1@@188 T@U) (arg2@@102 T@U) (arg3@@54 Bool) ) (! (= (type (|lambda#2| arg0@@429 arg1@@188 arg2@@102 arg3@@54)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@429 arg1@@188 arg2@@102 arg3@@54)) )))
(assert (forall ((|l#0@@27| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@25 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (and (and (= (type |l#0@@27|) refType) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@25) refType)) (= (type $f@@3) (FieldType alpha@@10))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@27| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@25 $f@@3))  (=> (and (not (= $o@@25 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@25) |l#2@@1|))) |l#3@@1|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1925| :pattern ( (MapType6Select (|lambda#2| |l#0@@27| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@25 $f@@3)) )))
(assert (forall ((arg0@@430 T@U) (arg1@@189 T@U) (arg2@@103 T@U) (arg3@@55 Bool) ) (! (= (type (|lambda#3| arg0@@430 arg1@@189 arg2@@103 arg3@@55)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@430 arg1@@189 arg2@@103 arg3@@55)) )))
(assert (forall ((|l#0@@28| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@26 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type |l#0@@28|) refType) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (type $o@@26) refType)) (= (type $f@@4) (FieldType alpha@@11))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@28| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@26 $f@@4))  (=> (and (not (= $o@@26 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@26) |l#2@@2|))) |l#3@@2|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1926| :pattern ( (MapType6Select (|lambda#3| |l#0@@28| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@26 $f@@4)) )))
(assert (forall ((arg0@@431 T@U) (arg1@@190 T@U) (arg2@@104 T@U) (arg3@@56 Bool) ) (! (= (type (|lambda#4| arg0@@431 arg1@@190 arg2@@104 arg3@@56)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@431 arg1@@190 arg2@@104 arg3@@56)) )))
(assert (forall ((|l#0@@29| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ($o@@27 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type |l#0@@29|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type $o@@27) refType)) (= (type $f@@5) (FieldType alpha@@12))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@29| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@27 $f@@5))  (=> (and (not (= $o@@27 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@27) |l#2@@3|))) |l#3@@3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1927| :pattern ( (MapType6Select (|lambda#4| |l#0@@29| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@27 $f@@5)) )))
(assert (forall ((arg0@@432 T@U) (arg1@@191 T@U) (arg2@@105 T@U) (arg3@@57 Bool) ) (! (= (type (|lambda#5| arg0@@432 arg1@@191 arg2@@105 arg3@@57)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@432 arg1@@191 arg2@@105 arg3@@57)) )))
(assert (forall ((|l#0@@30| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ($o@@28 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type |l#0@@30|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@28) refType)) (= (type $f@@6) (FieldType alpha@@13))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@30| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@28 $f@@6))  (=> (and (not (= $o@@28 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@28) |l#2@@4|))) |l#3@@4|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1928| :pattern ( (MapType6Select (|lambda#5| |l#0@@30| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@28 $f@@6)) )))
(assert (forall ((arg0@@433 T@U) (arg1@@192 T@U) (arg2@@106 T@U) (arg3@@58 Bool) ) (! (= (type (|lambda#6| arg0@@433 arg1@@192 arg2@@106 arg3@@58)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@433 arg1@@192 arg2@@106 arg3@@58)) )))
(assert (forall ((|l#0@@31| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ($o@@29 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type |l#0@@31|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (type $o@@29) refType)) (= (type $f@@7) (FieldType alpha@@14))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@31| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@29 $f@@7))  (=> (and (not (= $o@@29 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@29) |l#2@@5|))) |l#3@@5|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1929| :pattern ( (MapType6Select (|lambda#6| |l#0@@31| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@29 $f@@7)) )))
(assert (forall ((arg0@@434 T@U) (arg1@@193 T@U) (arg2@@107 T@U) (arg3@@59 Bool) ) (! (= (type (|lambda#7| arg0@@434 arg1@@193 arg2@@107 arg3@@59)) (MapType6Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@434 arg1@@193 arg2@@107 arg3@@59)) )))
(assert (forall ((|l#0@@32| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ($o@@30 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type |l#0@@32|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@30) refType)) (= (type $f@@8) (FieldType alpha@@15))) (= (U_2_bool (MapType6Select (|lambda#7| |l#0@@32| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@30 $f@@8))  (=> (and (not (= $o@@30 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@30) |l#2@@6|))) |l#3@@6|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1930| :pattern ( (MapType6Select (|lambda#7| |l#0@@32| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@30 $f@@8)) )))
(assert (forall ((arg0@@435 T@U) (arg1@@194 T@U) (arg2@@108 T@U) (arg3@@60 Bool) ) (! (= (type (|lambda#8| arg0@@435 arg1@@194 arg2@@108 arg3@@60)) (MapType6Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@435 arg1@@194 arg2@@108 arg3@@60)) )))
(assert (forall ((|l#0@@33| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ($o@@31 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type |l#0@@33|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type $o@@31) refType)) (= (type $f@@9) (FieldType alpha@@16))) (= (U_2_bool (MapType6Select (|lambda#8| |l#0@@33| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@31 $f@@9))  (=> (and (not (= $o@@31 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@31) |l#2@@7|))) |l#3@@7|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1931| :pattern ( (MapType6Select (|lambda#8| |l#0@@33| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@31 $f@@9)) )))
(assert (forall ((arg0@@436 T@U) (arg1@@195 T@U) (arg2@@109 T@U) (arg3@@61 Bool) ) (! (= (type (|lambda#9| arg0@@436 arg1@@195 arg2@@109 arg3@@61)) (MapType6Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@436 arg1@@195 arg2@@109 arg3@@61)) )))
(assert (forall ((|l#0@@34| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ($o@@32 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type |l#0@@34|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@32) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType6Select (|lambda#9| |l#0@@34| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@32 $f@@10))  (=> (and (not (= $o@@32 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@32) |l#2@@8|))) |l#3@@8|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1932| :pattern ( (MapType6Select (|lambda#9| |l#0@@34| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@32 $f@@10)) )))
(assert (forall ((arg0@@437 T@U) (arg1@@196 T@U) (arg2@@110 T@U) (arg3@@62 Bool) ) (! (= (type (|lambda#10| arg0@@437 arg1@@196 arg2@@110 arg3@@62)) (MapType6Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@437 arg1@@196 arg2@@110 arg3@@62)) )))
(assert (forall ((|l#0@@35| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ($o@@33 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type |l#0@@35|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@33) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType6Select (|lambda#10| |l#0@@35| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@33 $f@@11))  (=> (and (not (= $o@@33 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@33) |l#2@@9|))) |l#3@@9|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1933| :pattern ( (MapType6Select (|lambda#10| |l#0@@35| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@33 $f@@11)) )))
(assert (forall ((arg0@@438 T@U) (arg1@@197 T@U) (arg2@@111 T@U) (arg3@@63 Bool) ) (! (= (type (|lambda#11| arg0@@438 arg1@@197 arg2@@111 arg3@@63)) (MapType6Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@438 arg1@@197 arg2@@111 arg3@@63)) )))
(assert (forall ((|l#0@@36| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ($o@@34 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type |l#0@@36|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type $o@@34) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType6Select (|lambda#11| |l#0@@36| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@34 $f@@12))  (=> (and (not (= $o@@34 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@34) |l#2@@10|))) |l#3@@10|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1934| :pattern ( (MapType6Select (|lambda#11| |l#0@@36| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@34 $f@@12)) )))
(assert (forall ((arg0@@439 T@U) (arg1@@198 T@U) (arg2@@112 T@U) (arg3@@64 Bool) ) (! (= (type (|lambda#12| arg0@@439 arg1@@198 arg2@@112 arg3@@64)) (MapType6Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@439 arg1@@198 arg2@@112 arg3@@64)) )))
(assert (forall ((|l#0@@37| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ($o@@35 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type |l#0@@37|) refType) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (type $o@@35) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType6Select (|lambda#12| |l#0@@37| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@35 $f@@13))  (=> (and (not (= $o@@35 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@35) |l#2@@11|))) |l#3@@11|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1935| :pattern ( (MapType6Select (|lambda#12| |l#0@@37| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@35 $f@@13)) )))
(assert (forall ((arg0@@440 T@U) (arg1@@199 T@U) (arg2@@113 T@U) (arg3@@65 Bool) ) (! (= (type (|lambda#13| arg0@@440 arg1@@199 arg2@@113 arg3@@65)) (MapType6Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@440 arg1@@199 arg2@@113 arg3@@65)) )))
(assert (forall ((|l#0@@38| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ($o@@36 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type |l#0@@38|) refType) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type $o@@36) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType6Select (|lambda#13| |l#0@@38| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@36 $f@@14))  (=> (and (not (= $o@@36 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@36) |l#2@@12|))) |l#3@@12|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1936| :pattern ( (MapType6Select (|lambda#13| |l#0@@38| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@36 $f@@14)) )))
(assert (forall ((arg0@@441 T@U) (arg1@@200 T@U) (arg2@@114 T@U) (arg3@@66 Bool) ) (! (= (type (|lambda#14| arg0@@441 arg1@@200 arg2@@114 arg3@@66)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@441 arg1@@200 arg2@@114 arg3@@66)) )))
(assert (forall ((|l#0@@39| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ($o@@37 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type |l#0@@39|) refType) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type $o@@37) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@39| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@37 $f@@15))  (=> (and (not (= $o@@37 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@37) |l#2@@13|))) |l#3@@13|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1937| :pattern ( (MapType6Select (|lambda#14| |l#0@@39| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@37 $f@@15)) )))
(assert (forall ((arg0@@442 T@U) (arg1@@201 T@U) (arg2@@115 T@U) (arg3@@67 Bool) ) (! (= (type (|lambda#15| arg0@@442 arg1@@201 arg2@@115 arg3@@67)) (MapType6Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@442 arg1@@201 arg2@@115 arg3@@67)) )))
(assert (forall ((|l#0@@40| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ($o@@38 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type |l#0@@40|) refType) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type $o@@38) refType)) (= (type $f@@16) (FieldType alpha@@23))) (= (U_2_bool (MapType6Select (|lambda#15| |l#0@@40| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@38 $f@@16))  (=> (and (not (= $o@@38 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@38) |l#2@@14|))) |l#3@@14|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1938| :pattern ( (MapType6Select (|lambda#15| |l#0@@40| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@38 $f@@16)) )))
(assert (forall ((arg0@@443 T@U) (arg1@@202 T@U) (arg2@@116 T@U) (arg3@@68 Bool) ) (! (= (type (|lambda#16| arg0@@443 arg1@@202 arg2@@116 arg3@@68)) (MapType6Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@443 arg1@@202 arg2@@116 arg3@@68)) )))
(assert (forall ((|l#0@@41| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ($o@@39 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type |l#0@@41|) refType) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type $o@@39) refType)) (= (type $f@@17) (FieldType alpha@@24))) (= (U_2_bool (MapType6Select (|lambda#16| |l#0@@41| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@39 $f@@17))  (=> (and (not (= $o@@39 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@39) |l#2@@15|))) |l#3@@15|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1939| :pattern ( (MapType6Select (|lambda#16| |l#0@@41| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@39 $f@@17)) )))
(assert (forall ((arg0@@444 T@U) (arg1@@203 T@U) (arg2@@117 T@U) (arg3@@69 Bool) ) (! (= (type (|lambda#17| arg0@@444 arg1@@203 arg2@@117 arg3@@69)) (MapType6Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@444 arg1@@203 arg2@@117 arg3@@69)) )))
(assert (forall ((|l#0@@42| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ($o@@40 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type |l#0@@42|) refType) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (type $o@@40) refType)) (= (type $f@@18) (FieldType alpha@@25))) (= (U_2_bool (MapType6Select (|lambda#17| |l#0@@42| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@40 $f@@18))  (=> (and (not (= $o@@40 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@40) |l#2@@16|))) |l#3@@16|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1940| :pattern ( (MapType6Select (|lambda#17| |l#0@@42| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@40 $f@@18)) )))
(assert (forall ((arg0@@445 T@U) (arg1@@204 T@U) (arg2@@118 T@U) (arg3@@70 Bool) ) (! (= (type (|lambda#18| arg0@@445 arg1@@204 arg2@@118 arg3@@70)) (MapType6Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@445 arg1@@204 arg2@@118 arg3@@70)) )))
(assert (forall ((|l#0@@43| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ($o@@41 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type |l#0@@43|) refType) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (type $o@@41) refType)) (= (type $f@@19) (FieldType alpha@@26))) (= (U_2_bool (MapType6Select (|lambda#18| |l#0@@43| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@41 $f@@19))  (=> (and (not (= $o@@41 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@41) |l#2@@17|))) |l#3@@17|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1941| :pattern ( (MapType6Select (|lambda#18| |l#0@@43| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@41 $f@@19)) )))
(assert (forall ((arg0@@446 T@U) (arg1@@205 T@U) (arg2@@119 T@U) (arg3@@71 Bool) ) (! (= (type (|lambda#19| arg0@@446 arg1@@205 arg2@@119 arg3@@71)) (MapType6Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@446 arg1@@205 arg2@@119 arg3@@71)) )))
(assert (forall ((|l#0@@44| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ($o@@42 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type |l#0@@44|) refType) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (type $o@@42) refType)) (= (type $f@@20) (FieldType alpha@@27))) (= (U_2_bool (MapType6Select (|lambda#19| |l#0@@44| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@42 $f@@20))  (=> (and (not (= $o@@42 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@42) |l#2@@18|))) |l#3@@18|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1942| :pattern ( (MapType6Select (|lambda#19| |l#0@@44| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@42 $f@@20)) )))
(assert (forall ((arg0@@447 Int) (arg1@@206 Int) (arg2@@120 Int) ) (! (= (type (|lambda#20| arg0@@447 arg1@@206 arg2@@120)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@447 arg1@@206 arg2@@120)) )))
(assert (forall ((|l#0@@45| Int) (|l#1@@19| Int) (|l#2@@19| Int) (|$l#0#heap#0| T@U) (|$l#0#p#0| T@U) ) (!  (=> (and (= (type |$l#0#heap#0|) (MapType0Type refType MapType1Type)) (= (type |$l#0#p#0|) BoxType)) (= (MapType2Select (|lambda#20| |l#0@@45| |l#1@@19| |l#2@@19|) |$l#0#heap#0| |$l#0#p#0|) ($Box (int_2_U (ite (= (U_2_int ($Unbox intType |$l#0#p#0|)) |l#0@@45|) |l#1@@19| |l#2@@19|))))) :qid |unknown.0:0| :skolemid |1943| :pattern ( (MapType2Select (|lambda#20| |l#0@@45| |l#1@@19| |l#2@@19|) |$l#0#heap#0| |$l#0#p#0|)) )))
(assert (forall ((arg0@@448 T@U) ) (! (= (type (|lambda#21| arg0@@448)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@448)) )))
(assert (forall ((|l#0@@46| T@U) (|$l#0#heap#0@@0| T@U) (|$l#0#p#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@46|) TyType) (= (type |$l#0#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#p#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#21| |l#0@@46|) |$l#0#heap#0@@0| |$l#0#p#0@@0|)) ($IsBox |$l#0#p#0@@0| |l#0@@46|))) :qid |DafnyPreludebpl.22:1| :skolemid |1944| :pattern ( (MapType2Select (|lambda#21| |l#0@@46|) |$l#0#heap#0@@0| |$l#0#p#0@@0|)) )))
(assert (forall ((|l#0@@47| Bool) (|$l#0#o#0| T@U) ) (!  (=> (= (type |$l#0#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#22| |l#0@@47|) |$l#0#o#0|)) |l#0@@47|)) :qid |unknown.0:0| :skolemid |1945| :pattern ( (MapType0Select (|lambda#22| |l#0@@47|) |$l#0#o#0|)) )))
(assert (forall ((|l#0@@48| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#p#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@48|) (MapType0Type BoxType boolType)) (= (type |$l#0#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#0#p#0@@1|) BoxType)) (= (MapType2Select (|lambda#23| |l#0@@48|) |$l#0#heap#0@@1| |$l#0#p#0@@1|) |l#0@@48|)) :qid |LinearDListidfy.172:74| :skolemid |1946| :pattern ( (MapType2Select (|lambda#23| |l#0@@48|) |$l#0#heap#0@@1| |$l#0#p#0@@1|)) )))
(assert (forall ((|l#0@@49| T@U) (|$l#0#ly#0| T@U) ) (!  (=> (and (= (type |l#0@@49|) HandleTypeType) (= (type |$l#0#ly#0|) LayerTypeType)) (= (MapType0Select (|lambda#24| |l#0@@49|) |$l#0#ly#0|) |l#0@@49|)) :qid |LinearDListidfy.172:74| :skolemid |1947| :pattern ( (MapType0Select (|lambda#24| |l#0@@49|) |$l#0#ly#0|)) )))
(assert (forall ((arg0@@449 T@U) (arg1@@207 T@U) (arg2@@121 T@U) (arg3@@72 Bool) ) (! (= (type (|lambda#30| arg0@@449 arg1@@207 arg2@@121 arg3@@72)) (MapType6Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@449 arg1@@207 arg2@@121 arg3@@72)) )))
(assert (forall ((|l#0@@50| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@19| Bool) ($o@@43 T@U) ($f@@21 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type |l#0@@50|) refType) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (type $o@@43) refType)) (= (type $f@@21) (FieldType alpha@@28))) (= (U_2_bool (MapType6Select (|lambda#30| |l#0@@50| |l#1@@20| |l#2@@20| |l#3@@19|) $o@@43 $f@@21))  (=> (and (not (= $o@@43 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@43) |l#2@@20|))) |l#3@@19|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1948| :pattern ( (MapType6Select (|lambda#30| |l#0@@50| |l#1@@20| |l#2@@20| |l#3@@19|) $o@@43 $f@@21)) )))
(assert (forall ((arg0@@450 T@U) (arg1@@208 T@U) (arg2@@122 T@U) (arg3@@73 Bool) ) (! (= (type (|lambda#31| arg0@@450 arg1@@208 arg2@@122 arg3@@73)) (MapType6Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@450 arg1@@208 arg2@@122 arg3@@73)) )))
(assert (forall ((|l#0@@51| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@20| Bool) ($o@@44 T@U) ($f@@22 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type |l#0@@51|) refType) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (type $o@@44) refType)) (= (type $f@@22) (FieldType alpha@@29))) (= (U_2_bool (MapType6Select (|lambda#31| |l#0@@51| |l#1@@21| |l#2@@21| |l#3@@20|) $o@@44 $f@@22))  (=> (and (not (= $o@@44 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@44) |l#2@@21|))) |l#3@@20|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1949| :pattern ( (MapType6Select (|lambda#31| |l#0@@51| |l#1@@21| |l#2@@21| |l#3@@20|) $o@@44 $f@@22)) )))
(assert (forall ((arg0@@451 T@U) (arg1@@209 T@U) (arg2@@123 T@U) (arg3@@74 Bool) ) (! (= (type (|lambda#32| arg0@@451 arg1@@209 arg2@@123 arg3@@74)) (MapType6Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@451 arg1@@209 arg2@@123 arg3@@74)) )))
(assert (forall ((|l#0@@52| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@21| Bool) ($o@@45 T@U) ($f@@23 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type |l#0@@52|) refType) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (type $o@@45) refType)) (= (type $f@@23) (FieldType alpha@@30))) (= (U_2_bool (MapType6Select (|lambda#32| |l#0@@52| |l#1@@22| |l#2@@22| |l#3@@21|) $o@@45 $f@@23))  (=> (and (not (= $o@@45 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@45) |l#2@@22|))) |l#3@@21|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1950| :pattern ( (MapType6Select (|lambda#32| |l#0@@52| |l#1@@22| |l#2@@22| |l#3@@21|) $o@@45 $f@@23)) )))
(assert (forall ((arg0@@452 T@U) (arg1@@210 T@U) (arg2@@124 T@U) (arg3@@75 Bool) ) (! (= (type (|lambda#33| arg0@@452 arg1@@210 arg2@@124 arg3@@75)) (MapType6Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@452 arg1@@210 arg2@@124 arg3@@75)) )))
(assert (forall ((|l#0@@53| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@22| Bool) ($o@@46 T@U) ($f@@24 T@U) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type |l#0@@53|) refType) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (type $o@@46) refType)) (= (type $f@@24) (FieldType alpha@@31))) (= (U_2_bool (MapType6Select (|lambda#33| |l#0@@53| |l#1@@23| |l#2@@23| |l#3@@22|) $o@@46 $f@@24))  (=> (and (not (= $o@@46 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@46) |l#2@@23|))) |l#3@@22|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1951| :pattern ( (MapType6Select (|lambda#33| |l#0@@53| |l#1@@23| |l#2@@23| |l#3@@22|) $o@@46 $f@@24)) )))
(assert (forall ((arg0@@453 T@U) (arg1@@211 T@U) (arg2@@125 T@U) (arg3@@76 Bool) ) (! (= (type (|lambda#34| arg0@@453 arg1@@211 arg2@@125 arg3@@76)) (MapType6Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@453 arg1@@211 arg2@@125 arg3@@76)) )))
(assert (forall ((|l#0@@54| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@23| Bool) ($o@@47 T@U) ($f@@25 T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type |l#0@@54|) refType) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (type $o@@47) refType)) (= (type $f@@25) (FieldType alpha@@32))) (= (U_2_bool (MapType6Select (|lambda#34| |l#0@@54| |l#1@@24| |l#2@@24| |l#3@@23|) $o@@47 $f@@25))  (=> (and (not (= $o@@47 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@47) |l#2@@24|))) |l#3@@23|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1952| :pattern ( (MapType6Select (|lambda#34| |l#0@@54| |l#1@@24| |l#2@@24| |l#3@@23|) $o@@47 $f@@25)) )))
(assert (forall ((arg0@@454 Int) (arg1@@212 T@U) (arg2@@126 Int) ) (! (= (type (|lambda#35| arg0@@454 arg1@@212 arg2@@126)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@454 arg1@@212 arg2@@126)) )))
(assert (forall ((|l#0@@55| Int) (|l#1@@25| T@U) (|l#2@@25| Int) (|$l#0#heap#0@@2| T@U) (|$l#0#i#0| T@U) ) (!  (=> (and (and (= (type |l#1@@25|) (SeqType BoxType)) (= (type |$l#0#heap#0@@2|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0|) BoxType)) (= (MapType2Select (|lambda#35| |l#0@@55| |l#1@@25| |l#2@@25|) |$l#0#heap#0@@2| |$l#0#i#0|) ($Box (int_2_U (ite (< (U_2_int ($Unbox intType |$l#0#i#0|)) |l#0@@55|) (U_2_int ($Unbox intType (|Seq#Index| |l#1@@25| (U_2_int ($Unbox intType |$l#0#i#0|))))) |l#2@@25|))))) :qid |LinearDListidfy.205:90| :skolemid |1953| :pattern ( (MapType2Select (|lambda#35| |l#0@@55| |l#1@@25| |l#2@@25|) |$l#0#heap#0@@2| |$l#0#i#0|)) )))
(assert (forall ((|l#0@@56| T@U) (|l#1@@26| Int) (|l#2@@26| Int) (|$l#0#heap#0@@3| T@U) (|$l#0#i#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@56|) TyType) (= (type |$l#0#heap#0@@3|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#36| |l#0@@56| |l#1@@26| |l#2@@26|) |$l#0#heap#0@@3| |$l#0#i#0@@0|))  (and ($IsBox |$l#0#i#0@@0| |l#0@@56|) (and (<= |l#1@@26| (U_2_int ($Unbox intType |$l#0#i#0@@0|))) (< (U_2_int ($Unbox intType |$l#0#i#0@@0|)) |l#2@@26|))))) :qid |DafnyPreludebpl.22:1| :skolemid |1954| :pattern ( (MapType2Select (|lambda#36| |l#0@@56| |l#1@@26| |l#2@@26|) |$l#0#heap#0@@3| |$l#0#i#0@@0|)) )))
(assert (forall ((arg0@@455 T@U) (arg1@@213 T@U) (arg2@@127 T@U) (arg3@@77 Bool) ) (! (= (type (|lambda#45| arg0@@455 arg1@@213 arg2@@127 arg3@@77)) (MapType6Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@455 arg1@@213 arg2@@127 arg3@@77)) )))
(assert (forall ((|l#0@@57| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@24| Bool) ($o@@48 T@U) ($f@@26 T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type |l#0@@57|) refType) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (type $o@@48) refType)) (= (type $f@@26) (FieldType alpha@@33))) (= (U_2_bool (MapType6Select (|lambda#45| |l#0@@57| |l#1@@27| |l#2@@27| |l#3@@24|) $o@@48 $f@@26))  (=> (and (not (= $o@@48 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@48) |l#2@@27|))) |l#3@@24|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1955| :pattern ( (MapType6Select (|lambda#45| |l#0@@57| |l#1@@27| |l#2@@27| |l#3@@24|) $o@@48 $f@@26)) )))
(assert (forall ((arg0@@456 T@U) (arg1@@214 T@U) (arg2@@128 T@U) (arg3@@78 Bool) ) (! (= (type (|lambda#46| arg0@@456 arg1@@214 arg2@@128 arg3@@78)) (MapType6Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@456 arg1@@214 arg2@@128 arg3@@78)) )))
(assert (forall ((|l#0@@58| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@25| Bool) ($o@@49 T@U) ($f@@27 T@U) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type |l#0@@58|) refType) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (type $o@@49) refType)) (= (type $f@@27) (FieldType alpha@@34))) (= (U_2_bool (MapType6Select (|lambda#46| |l#0@@58| |l#1@@28| |l#2@@28| |l#3@@25|) $o@@49 $f@@27))  (=> (and (not (= $o@@49 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@49) |l#2@@28|))) |l#3@@25|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1956| :pattern ( (MapType6Select (|lambda#46| |l#0@@58| |l#1@@28| |l#2@@28| |l#3@@25|) $o@@49 $f@@27)) )))
(assert (forall ((arg0@@457 T@U) (arg1@@215 T@U) (arg2@@129 T@U) (arg3@@79 Bool) ) (! (= (type (|lambda#47| arg0@@457 arg1@@215 arg2@@129 arg3@@79)) (MapType6Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@457 arg1@@215 arg2@@129 arg3@@79)) )))
(assert (forall ((|l#0@@59| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@26| Bool) ($o@@50 T@U) ($f@@28 T@U) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type |l#0@@59|) refType) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (type $o@@50) refType)) (= (type $f@@28) (FieldType alpha@@35))) (= (U_2_bool (MapType6Select (|lambda#47| |l#0@@59| |l#1@@29| |l#2@@29| |l#3@@26|) $o@@50 $f@@28))  (=> (and (not (= $o@@50 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@50) |l#2@@29|))) |l#3@@26|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1957| :pattern ( (MapType6Select (|lambda#47| |l#0@@59| |l#1@@29| |l#2@@29| |l#3@@26|) $o@@50 $f@@28)) )))
(assert (forall ((arg0@@458 Int) (arg1@@216 T@U) (arg2@@130 T@U) (arg3@@80 Int) ) (! (= (type (|lambda#48| arg0@@458 arg1@@216 arg2@@130 arg3@@80)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@458 arg1@@216 arg2@@130 arg3@@80)) )))
(assert (forall ((|l#0@@60| Int) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@27| Int) (|$l#0#heap#0@@4| T@U) (|$l#0#x#0| T@U) ) (!  (=> (and (and (and (= (type |l#1@@30|) (SeqType BoxType)) (= (type |l#2@@30|) (SeqType BoxType))) (= (type |$l#0#heap#0@@4|) (MapType0Type refType MapType1Type))) (= (type |$l#0#x#0|) BoxType)) (= (MapType2Select (|lambda#48| |l#0@@60| |l#1@@30| |l#2@@30| |l#3@@27|) |$l#0#heap#0@@4| |$l#0#x#0|) (ite (< (U_2_int ($Unbox intType |$l#0#x#0|)) |l#0@@60|) (|Seq#Index| |l#1@@30| (U_2_int ($Unbox intType |$l#0#x#0|))) (|Seq#Index| |l#2@@30| (+ (U_2_int ($Unbox intType |$l#0#x#0|)) |l#3@@27|))))) :qid |LinearDListidfy.216:17| :skolemid |1958| :pattern ( (MapType2Select (|lambda#48| |l#0@@60| |l#1@@30| |l#2@@30| |l#3@@27|) |$l#0#heap#0@@4| |$l#0#x#0|)) )))
(assert (forall ((arg0@@459 Int) (arg1@@217 T@U) (arg2@@131 T@U) (arg3@@81 Int) ) (! (= (type (|lambda#58| arg0@@459 arg1@@217 arg2@@131 arg3@@81)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@459 arg1@@217 arg2@@131 arg3@@81)) )))
(assert (forall ((|l#0@@61| Int) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@28| Int) (|$l#3#heap#0| T@U) (|$l#3#x#0| T@U) ) (!  (=> (and (and (and (= (type |l#1@@31|) (SeqType BoxType)) (= (type |l#2@@31|) (SeqType BoxType))) (= (type |$l#3#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#3#x#0|) BoxType)) (= (MapType2Select (|lambda#58| |l#0@@61| |l#1@@31| |l#2@@31| |l#3@@28|) |$l#3#heap#0| |$l#3#x#0|) ($Box (int_2_U (ite (< (U_2_int ($Unbox intType |$l#3#x#0|)) |l#0@@61|) (U_2_int ($Unbox intType (|Seq#Index| |l#1@@31| (U_2_int ($Unbox intType |$l#3#x#0|))))) (U_2_int ($Unbox intType (|Seq#Index| |l#2@@31| (+ (U_2_int ($Unbox intType |$l#3#x#0|)) |l#3@@28|))))))))) :qid |LinearDListidfy.216:17| :skolemid |1959| :pattern ( (MapType2Select (|lambda#58| |l#0@@61| |l#1@@31| |l#2@@31| |l#3@@28|) |$l#3#heap#0| |$l#3#x#0|)) )))
(assert (forall ((arg0@@460 T@U) (arg1@@218 Int) (arg2@@132 Int) (arg3@@82 T@U) (arg4@@32 Int) (arg5@@19 T@U) (arg6@@15 Int) (arg7@@4 T@U) ) (! (= (type (|lambda#68| arg0@@460 arg1@@218 arg2@@132 arg3@@82 arg4@@32 arg5@@19 arg6@@15 arg7@@4)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@460 arg1@@218 arg2@@132 arg3@@82 arg4@@32 arg5@@19 arg6@@15 arg7@@4)) )))
(assert (forall ((|l#0@@62| T@U) (|l#1@@32| Int) (|l#2@@32| Int) (|l#3@@29| T@U) (|l#4| Int) (|l#5| T@U) (|l#6| Int) (|l#7| T@U) (|$l#6#heap#0| T@U) (|$l#6#x#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |l#0@@62|) (SeqType BoxType)) (= (type |l#3@@29|) (SeqType BoxType))) (= (type |l#5|) (SeqType BoxType))) (= (type |l#7|) (SeqType BoxType))) (= (type |$l#6#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#6#x#0|) BoxType)) (= (MapType2Select (|lambda#68| |l#0@@62| |l#1@@32| |l#2@@32| |l#3@@29| |l#4| |l#5| |l#6| |l#7|) |$l#6#heap#0| |$l#6#x#0|) ($Box (int_2_U (ite (= (U_2_int ($Unbox intType (|Seq#Index| |l#0@@62| (U_2_int ($Unbox intType |$l#6#x#0|))))) |l#1@@32|) |l#2@@32| (ite (> (U_2_int ($Unbox intType (|Seq#Index| |l#3@@29| (U_2_int ($Unbox intType |$l#6#x#0|))))) |l#4|) (- (U_2_int ($Unbox intType (|Seq#Index| |l#5| (U_2_int ($Unbox intType |$l#6#x#0|))))) |l#6|) (U_2_int ($Unbox intType (|Seq#Index| |l#7| (U_2_int ($Unbox intType |$l#6#x#0|))))))))))) :qid |LinearDListidfy.224:17| :skolemid |1960| :pattern ( (MapType2Select (|lambda#68| |l#0@@62| |l#1@@32| |l#2@@32| |l#3@@29| |l#4| |l#5| |l#6| |l#7|) |$l#6#heap#0| |$l#6#x#0|)) )))
(assert (forall ((arg0@@461 T@U) (arg1@@219 T@U) (arg2@@133 T@U) (arg3@@83 Bool) ) (! (= (type (|lambda#78| arg0@@461 arg1@@219 arg2@@133 arg3@@83)) (MapType6Type refType boolType)) :qid |funType:lambda#78| :pattern ( (|lambda#78| arg0@@461 arg1@@219 arg2@@133 arg3@@83)) )))
(assert (forall ((|l#0@@63| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@30| Bool) ($o@@51 T@U) ($f@@29 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type |l#0@@63|) refType) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (type $o@@51) refType)) (= (type $f@@29) (FieldType alpha@@36))) (= (U_2_bool (MapType6Select (|lambda#78| |l#0@@63| |l#1@@33| |l#2@@33| |l#3@@30|) $o@@51 $f@@29))  (=> (and (not (= $o@@51 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@51) |l#2@@33|))) |l#3@@30|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1961| :pattern ( (MapType6Select (|lambda#78| |l#0@@63| |l#1@@33| |l#2@@33| |l#3@@30|) $o@@51 $f@@29)) )))
(assert (forall ((arg0@@462 T@U) (arg1@@220 T@U) (arg2@@134 T@U) (arg3@@84 Bool) ) (! (= (type (|lambda#79| arg0@@462 arg1@@220 arg2@@134 arg3@@84)) (MapType6Type refType boolType)) :qid |funType:lambda#79| :pattern ( (|lambda#79| arg0@@462 arg1@@220 arg2@@134 arg3@@84)) )))
(assert (forall ((|l#0@@64| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@31| Bool) ($o@@52 T@U) ($f@@30 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type |l#0@@64|) refType) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (type $o@@52) refType)) (= (type $f@@30) (FieldType alpha@@37))) (= (U_2_bool (MapType6Select (|lambda#79| |l#0@@64| |l#1@@34| |l#2@@34| |l#3@@31|) $o@@52 $f@@30))  (=> (and (not (= $o@@52 |l#0@@64|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@52) |l#2@@34|))) |l#3@@31|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1962| :pattern ( (MapType6Select (|lambda#79| |l#0@@64| |l#1@@34| |l#2@@34| |l#3@@31|) $o@@52 $f@@30)) )))
(assert (forall ((arg0@@463 T@U) (arg1@@221 T@U) (arg2@@135 T@U) (arg3@@85 Bool) ) (! (= (type (|lambda#80| arg0@@463 arg1@@221 arg2@@135 arg3@@85)) (MapType6Type refType boolType)) :qid |funType:lambda#80| :pattern ( (|lambda#80| arg0@@463 arg1@@221 arg2@@135 arg3@@85)) )))
(assert (forall ((|l#0@@65| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@32| Bool) ($o@@53 T@U) ($f@@31 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type |l#0@@65|) refType) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (type $o@@53) refType)) (= (type $f@@31) (FieldType alpha@@38))) (= (U_2_bool (MapType6Select (|lambda#80| |l#0@@65| |l#1@@35| |l#2@@35| |l#3@@32|) $o@@53 $f@@31))  (=> (and (not (= $o@@53 |l#0@@65|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@53) |l#2@@35|))) |l#3@@32|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1963| :pattern ( (MapType6Select (|lambda#80| |l#0@@65| |l#1@@35| |l#2@@35| |l#3@@32|) $o@@53 $f@@31)) )))
(assert (forall ((arg0@@464 T@U) (arg1@@222 T@U) (arg2@@136 T@U) (arg3@@86 Bool) ) (! (= (type (|lambda#81| arg0@@464 arg1@@222 arg2@@136 arg3@@86)) (MapType6Type refType boolType)) :qid |funType:lambda#81| :pattern ( (|lambda#81| arg0@@464 arg1@@222 arg2@@136 arg3@@86)) )))
(assert (forall ((|l#0@@66| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@33| Bool) ($o@@54 T@U) ($f@@32 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type |l#0@@66|) refType) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (type $o@@54) refType)) (= (type $f@@32) (FieldType alpha@@39))) (= (U_2_bool (MapType6Select (|lambda#81| |l#0@@66| |l#1@@36| |l#2@@36| |l#3@@33|) $o@@54 $f@@32))  (=> (and (not (= $o@@54 |l#0@@66|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@54) |l#2@@36|))) |l#3@@33|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1964| :pattern ( (MapType6Select (|lambda#81| |l#0@@66| |l#1@@36| |l#2@@36| |l#3@@33|) $o@@54 $f@@32)) )))
(assert (forall ((arg0@@465 T@U) (arg1@@223 T@U) (arg2@@137 T@U) (arg3@@87 Bool) ) (! (= (type (|lambda#82| arg0@@465 arg1@@223 arg2@@137 arg3@@87)) (MapType6Type refType boolType)) :qid |funType:lambda#82| :pattern ( (|lambda#82| arg0@@465 arg1@@223 arg2@@137 arg3@@87)) )))
(assert (forall ((|l#0@@67| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@34| Bool) ($o@@55 T@U) ($f@@33 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type |l#0@@67|) refType) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (type $o@@55) refType)) (= (type $f@@33) (FieldType alpha@@40))) (= (U_2_bool (MapType6Select (|lambda#82| |l#0@@67| |l#1@@37| |l#2@@37| |l#3@@34|) $o@@55 $f@@33))  (=> (and (not (= $o@@55 |l#0@@67|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@55) |l#2@@37|))) |l#3@@34|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1965| :pattern ( (MapType6Select (|lambda#82| |l#0@@67| |l#1@@37| |l#2@@37| |l#3@@34|) $o@@55 $f@@33)) )))
(assert (forall ((arg0@@466 Int) (arg1@@224 T@U) (arg2@@138 Int) (arg3@@88 T@U) (arg4@@33 T@U) (arg5@@20 Int) ) (! (= (type (|lambda#83| arg0@@466 arg1@@224 arg2@@138 arg3@@88 arg4@@33 arg5@@20)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#83| :pattern ( (|lambda#83| arg0@@466 arg1@@224 arg2@@138 arg3@@88 arg4@@33 arg5@@20)) )))
(assert (forall ((|l#0@@68| Int) (|l#1@@38| T@U) (|l#2@@38| Int) (|l#3@@35| T@U) (|l#4@@0| T@U) (|l#5@@0| Int) (|$l#0#heap#0@@5| T@U) (|$l#0#x#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |l#1@@38|) BoxType) (= (type |l#3@@35|) (SeqType BoxType))) (= (type |l#4@@0|) (SeqType BoxType))) (= (type |$l#0#heap#0@@5|) (MapType0Type refType MapType1Type))) (= (type |$l#0#x#0@@0|) BoxType)) (= (MapType2Select (|lambda#83| |l#0@@68| |l#1@@38| |l#2@@38| |l#3@@35| |l#4@@0| |l#5@@0|) |$l#0#heap#0@@5| |$l#0#x#0@@0|) (ite (= (U_2_int ($Unbox intType |$l#0#x#0@@0|)) |l#0@@68|) |l#1@@38| (ite (< (U_2_int ($Unbox intType |$l#0#x#0@@0|)) |l#2@@38|) (|Seq#Index| |l#3@@35| (U_2_int ($Unbox intType |$l#0#x#0@@0|))) (|Seq#Index| |l#4@@0| (- (U_2_int ($Unbox intType |$l#0#x#0@@0|)) |l#5@@0|)))))) :qid |LinearDListidfy.262:17| :skolemid |1966| :pattern ( (MapType2Select (|lambda#83| |l#0@@68| |l#1@@38| |l#2@@38| |l#3@@35| |l#4@@0| |l#5@@0|) |$l#0#heap#0@@5| |$l#0#x#0@@0|)) )))
(assert (forall ((arg0@@467 T@U) (arg1@@225 Int) (arg2@@139 Int) ) (! (= (type (|lambda#84| arg0@@467 arg1@@225 arg2@@139)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#84| :pattern ( (|lambda#84| arg0@@467 arg1@@225 arg2@@139)) )))
(assert (forall ((|l#0@@69| T@U) (|l#1@@39| Int) (|l#2@@39| Int) (|$l#0#heap#0@@6| T@U) (|$l#0#x#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@69|) TyType) (= (type |$l#0#heap#0@@6|) (MapType0Type refType MapType1Type))) (= (type |$l#0#x#0@@1|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#84| |l#0@@69| |l#1@@39| |l#2@@39|) |$l#0#heap#0@@6| |$l#0#x#0@@1|))  (and ($IsBox |$l#0#x#0@@1| |l#0@@69|) (and (<= |l#1@@39| (U_2_int ($Unbox intType |$l#0#x#0@@1|))) (<= (U_2_int ($Unbox intType |$l#0#x#0@@1|)) |l#2@@39|))))) :qid |DafnyPreludebpl.22:1| :skolemid |1967| :pattern ( (MapType2Select (|lambda#84| |l#0@@69| |l#1@@39| |l#2@@39|) |$l#0#heap#0@@6| |$l#0#x#0@@1|)) )))
(assert (forall ((arg0@@468 Int) (arg1@@226 Int) (arg2@@140 Int) (arg3@@89 T@U) (arg4@@34 T@U) (arg5@@21 Int) ) (! (= (type (|lambda#93| arg0@@468 arg1@@226 arg2@@140 arg3@@89 arg4@@34 arg5@@21)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#93| :pattern ( (|lambda#93| arg0@@468 arg1@@226 arg2@@140 arg3@@89 arg4@@34 arg5@@21)) )))
(assert (forall ((|l#0@@70| Int) (|l#1@@40| Int) (|l#2@@40| Int) (|l#3@@36| T@U) (|l#4@@1| T@U) (|l#5@@1| Int) (|$l#3#heap#0@@0| T@U) (|$l#3#x#0@@0| T@U) ) (!  (=> (and (and (and (= (type |l#3@@36|) (SeqType BoxType)) (= (type |l#4@@1|) (SeqType BoxType))) (= (type |$l#3#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#3#x#0@@0|) BoxType)) (= (MapType2Select (|lambda#93| |l#0@@70| |l#1@@40| |l#2@@40| |l#3@@36| |l#4@@1| |l#5@@1|) |$l#3#heap#0@@0| |$l#3#x#0@@0|) ($Box (int_2_U (ite (= (U_2_int ($Unbox intType |$l#3#x#0@@0|)) |l#0@@70|) |l#1@@40| (ite (< (U_2_int ($Unbox intType |$l#3#x#0@@0|)) |l#2@@40|) (U_2_int ($Unbox intType (|Seq#Index| |l#3@@36| (U_2_int ($Unbox intType |$l#3#x#0@@0|))))) (U_2_int ($Unbox intType (|Seq#Index| |l#4@@1| (- (U_2_int ($Unbox intType |$l#3#x#0@@0|)) |l#5@@1|)))))))))) :qid |LinearDListidfy.262:17| :skolemid |1968| :pattern ( (MapType2Select (|lambda#93| |l#0@@70| |l#1@@40| |l#2@@40| |l#3@@36| |l#4@@1| |l#5@@1|) |$l#3#heap#0@@0| |$l#3#x#0@@0|)) )))
(assert (forall ((arg0@@469 Int) (arg1@@227 Int) (arg2@@141 T@U) (arg3@@90 Int) (arg4@@35 T@U) (arg5@@22 Int) (arg6@@16 T@U) ) (! (= (type (|lambda#103| arg0@@469 arg1@@227 arg2@@141 arg3@@90 arg4@@35 arg5@@22 arg6@@16)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#103| :pattern ( (|lambda#103| arg0@@469 arg1@@227 arg2@@141 arg3@@90 arg4@@35 arg5@@22 arg6@@16)) )))
(assert (forall ((|l#0@@71| Int) (|l#1@@41| Int) (|l#2@@41| T@U) (|l#3@@37| Int) (|l#4@@2| T@U) (|l#5@@2| Int) (|l#6@@0| T@U) (|$l#6#heap#0@@0| T@U) (|$l#6#x#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |l#2@@41|) (SeqType BoxType)) (= (type |l#4@@2|) (SeqType BoxType))) (= (type |l#6@@0|) (SeqType BoxType))) (= (type |$l#6#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#6#x#0@@0|) BoxType)) (= (MapType2Select (|lambda#103| |l#0@@71| |l#1@@41| |l#2@@41| |l#3@@37| |l#4@@2| |l#5@@2| |l#6@@0|) |$l#6#heap#0@@0| |$l#6#x#0@@0|) ($Box (int_2_U (ite (= (U_2_int ($Unbox intType |$l#6#x#0@@0|)) |l#0@@71|) |l#1@@41| (ite (> (U_2_int ($Unbox intType (|Seq#Index| |l#2@@41| (U_2_int ($Unbox intType |$l#6#x#0@@0|))))) |l#3@@37|) (+ (U_2_int ($Unbox intType (|Seq#Index| |l#4@@2| (U_2_int ($Unbox intType |$l#6#x#0@@0|))))) |l#5@@2|) (U_2_int ($Unbox intType (|Seq#Index| |l#6@@0| (U_2_int ($Unbox intType |$l#6#x#0@@0|))))))))))) :qid |LinearDListidfy.241:86| :skolemid |1969| :pattern ( (MapType2Select (|lambda#103| |l#0@@71| |l#1@@41| |l#2@@41| |l#3@@37| |l#4@@2| |l#5@@2| |l#6@@0|) |$l#6#heap#0@@0| |$l#6#x#0@@0|)) )))
(assert (forall ((arg0@@470 T@U) (arg1@@228 T@U) (arg2@@142 T@U) (arg3@@91 Bool) ) (! (= (type (|lambda#113| arg0@@470 arg1@@228 arg2@@142 arg3@@91)) (MapType6Type refType boolType)) :qid |funType:lambda#113| :pattern ( (|lambda#113| arg0@@470 arg1@@228 arg2@@142 arg3@@91)) )))
(assert (forall ((|l#0@@72| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@38| Bool) ($o@@56 T@U) ($f@@34 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type |l#0@@72|) refType) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (type $o@@56) refType)) (= (type $f@@34) (FieldType alpha@@41))) (= (U_2_bool (MapType6Select (|lambda#113| |l#0@@72| |l#1@@42| |l#2@@42| |l#3@@38|) $o@@56 $f@@34))  (=> (and (not (= $o@@56 |l#0@@72|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@56) |l#2@@42|))) |l#3@@38|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1970| :pattern ( (MapType6Select (|lambda#113| |l#0@@72| |l#1@@42| |l#2@@42| |l#3@@38|) $o@@56 $f@@34)) )))
(assert (forall ((arg0@@471 T@U) (arg1@@229 T@U) (arg2@@143 T@U) (arg3@@92 Bool) ) (! (= (type (|lambda#114| arg0@@471 arg1@@229 arg2@@143 arg3@@92)) (MapType6Type refType boolType)) :qid |funType:lambda#114| :pattern ( (|lambda#114| arg0@@471 arg1@@229 arg2@@143 arg3@@92)) )))
(assert (forall ((|l#0@@73| T@U) (|l#1@@43| T@U) (|l#2@@43| T@U) (|l#3@@39| Bool) ($o@@57 T@U) ($f@@35 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type |l#0@@73|) refType) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (type $o@@57) refType)) (= (type $f@@35) (FieldType alpha@@42))) (= (U_2_bool (MapType6Select (|lambda#114| |l#0@@73| |l#1@@43| |l#2@@43| |l#3@@39|) $o@@57 $f@@35))  (=> (and (not (= $o@@57 |l#0@@73|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@57) |l#2@@43|))) |l#3@@39|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1971| :pattern ( (MapType6Select (|lambda#114| |l#0@@73| |l#1@@43| |l#2@@43| |l#3@@39|) $o@@57 $f@@35)) )))
(assert (forall ((arg0@@472 T@U) (arg1@@230 T@U) (arg2@@144 T@U) (arg3@@93 Bool) ) (! (= (type (|lambda#115| arg0@@472 arg1@@230 arg2@@144 arg3@@93)) (MapType6Type refType boolType)) :qid |funType:lambda#115| :pattern ( (|lambda#115| arg0@@472 arg1@@230 arg2@@144 arg3@@93)) )))
(assert (forall ((|l#0@@74| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@40| Bool) ($o@@58 T@U) ($f@@36 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type |l#0@@74|) refType) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (type $o@@58) refType)) (= (type $f@@36) (FieldType alpha@@43))) (= (U_2_bool (MapType6Select (|lambda#115| |l#0@@74| |l#1@@44| |l#2@@44| |l#3@@40|) $o@@58 $f@@36))  (=> (and (not (= $o@@58 |l#0@@74|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@58) |l#2@@44|))) |l#3@@40|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1972| :pattern ( (MapType6Select (|lambda#115| |l#0@@74| |l#1@@44| |l#2@@44| |l#3@@40|) $o@@58 $f@@36)) )))
(assert (forall ((arg0@@473 T@U) (arg1@@231 T@U) (arg2@@145 T@U) (arg3@@94 Bool) ) (! (= (type (|lambda#116| arg0@@473 arg1@@231 arg2@@145 arg3@@94)) (MapType6Type refType boolType)) :qid |funType:lambda#116| :pattern ( (|lambda#116| arg0@@473 arg1@@231 arg2@@145 arg3@@94)) )))
(assert (forall ((|l#0@@75| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) (|l#3@@41| Bool) ($o@@59 T@U) ($f@@37 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type |l#0@@75|) refType) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (type $o@@59) refType)) (= (type $f@@37) (FieldType alpha@@44))) (= (U_2_bool (MapType6Select (|lambda#116| |l#0@@75| |l#1@@45| |l#2@@45| |l#3@@41|) $o@@59 $f@@37))  (=> (and (not (= $o@@59 |l#0@@75|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@59) |l#2@@45|))) |l#3@@41|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1973| :pattern ( (MapType6Select (|lambda#116| |l#0@@75| |l#1@@45| |l#2@@45| |l#3@@41|) $o@@59 $f@@37)) )))
(assert (forall ((arg0@@474 T@U) (arg1@@232 T@U) (arg2@@146 T@U) (arg3@@95 Bool) ) (! (= (type (|lambda#117| arg0@@474 arg1@@232 arg2@@146 arg3@@95)) (MapType6Type refType boolType)) :qid |funType:lambda#117| :pattern ( (|lambda#117| arg0@@474 arg1@@232 arg2@@146 arg3@@95)) )))
(assert (forall ((|l#0@@76| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) (|l#3@@42| Bool) ($o@@60 T@U) ($f@@38 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type |l#0@@76|) refType) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (type $o@@60) refType)) (= (type $f@@38) (FieldType alpha@@45))) (= (U_2_bool (MapType6Select (|lambda#117| |l#0@@76| |l#1@@46| |l#2@@46| |l#3@@42|) $o@@60 $f@@38))  (=> (and (not (= $o@@60 |l#0@@76|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@60) |l#2@@46|))) |l#3@@42|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1974| :pattern ( (MapType6Select (|lambda#117| |l#0@@76| |l#1@@46| |l#2@@46| |l#3@@42|) $o@@60 $f@@38)) )))
(assert (forall ((arg0@@475 Int) (arg1@@233 Int) (arg2@@147 T@U) (arg3@@96 Int) (arg4@@36 T@U) (arg5@@23 Int) (arg6@@17 T@U) ) (! (= (type (|lambda#138| arg0@@475 arg1@@233 arg2@@147 arg3@@96 arg4@@36 arg5@@23 arg6@@17)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#138| :pattern ( (|lambda#138| arg0@@475 arg1@@233 arg2@@147 arg3@@96 arg4@@36 arg5@@23 arg6@@17)) )))
(assert (forall ((|l#0@@77| Int) (|l#1@@47| Int) (|l#2@@47| T@U) (|l#3@@43| Int) (|l#4@@3| T@U) (|l#5@@3| Int) (|l#6@@1| T@U) (|$l#6#heap#0@@1| T@U) (|$l#6#x#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |l#2@@47|) (SeqType BoxType)) (= (type |l#4@@3|) (SeqType BoxType))) (= (type |l#6@@1|) (SeqType BoxType))) (= (type |$l#6#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#6#x#0@@1|) BoxType)) (= (MapType2Select (|lambda#138| |l#0@@77| |l#1@@47| |l#2@@47| |l#3@@43| |l#4@@3| |l#5@@3| |l#6@@1|) |$l#6#heap#0@@1| |$l#6#x#0@@1|) ($Box (int_2_U (ite (= (U_2_int ($Unbox intType |$l#6#x#0@@1|)) |l#0@@77|) |l#1@@47| (ite (>= (U_2_int ($Unbox intType (|Seq#Index| |l#2@@47| (U_2_int ($Unbox intType |$l#6#x#0@@1|))))) |l#3@@43|) (+ (U_2_int ($Unbox intType (|Seq#Index| |l#4@@3| (U_2_int ($Unbox intType |$l#6#x#0@@1|))))) |l#5@@3|) (U_2_int ($Unbox intType (|Seq#Index| |l#6@@1| (U_2_int ($Unbox intType |$l#6#x#0@@1|))))))))))) :qid |LinearDListidfy.279:86| :skolemid |1975| :pattern ( (MapType2Select (|lambda#138| |l#0@@77| |l#1@@47| |l#2@@47| |l#3@@43| |l#4@@3| |l#5@@3| |l#6@@1|) |$l#6#heap#0@@1| |$l#6#x#0@@1|)) )))
(assert (forall ((arg0@@476 T@U) (arg1@@234 T@U) (arg2@@148 T@U) (arg3@@97 Bool) ) (! (= (type (|lambda#148| arg0@@476 arg1@@234 arg2@@148 arg3@@97)) (MapType6Type refType boolType)) :qid |funType:lambda#148| :pattern ( (|lambda#148| arg0@@476 arg1@@234 arg2@@148 arg3@@97)) )))
(assert (forall ((|l#0@@78| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) (|l#3@@44| Bool) ($o@@61 T@U) ($f@@39 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type |l#0@@78|) refType) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (type $o@@61) refType)) (= (type $f@@39) (FieldType alpha@@46))) (= (U_2_bool (MapType6Select (|lambda#148| |l#0@@78| |l#1@@48| |l#2@@48| |l#3@@44|) $o@@61 $f@@39))  (=> (and (not (= $o@@61 |l#0@@78|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@61) |l#2@@48|))) |l#3@@44|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1976| :pattern ( (MapType6Select (|lambda#148| |l#0@@78| |l#1@@48| |l#2@@48| |l#3@@44|) $o@@61 $f@@39)) )))
(assert (forall ((arg0@@477 T@U) (arg1@@235 T@U) (arg2@@149 T@U) (arg3@@98 Bool) ) (! (= (type (|lambda#149| arg0@@477 arg1@@235 arg2@@149 arg3@@98)) (MapType6Type refType boolType)) :qid |funType:lambda#149| :pattern ( (|lambda#149| arg0@@477 arg1@@235 arg2@@149 arg3@@98)) )))
(assert (forall ((|l#0@@79| T@U) (|l#1@@49| T@U) (|l#2@@49| T@U) (|l#3@@45| Bool) ($o@@62 T@U) ($f@@40 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type |l#0@@79|) refType) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (type $o@@62) refType)) (= (type $f@@40) (FieldType alpha@@47))) (= (U_2_bool (MapType6Select (|lambda#149| |l#0@@79| |l#1@@49| |l#2@@49| |l#3@@45|) $o@@62 $f@@40))  (=> (and (not (= $o@@62 |l#0@@79|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@62) |l#2@@49|))) |l#3@@45|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1977| :pattern ( (MapType6Select (|lambda#149| |l#0@@79| |l#1@@49| |l#2@@49| |l#3@@45|) $o@@62 $f@@40)) )))
(assert (forall ((arg0@@478 T@U) (arg1@@236 T@U) (arg2@@150 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#150| arg0@@478 arg1@@236 arg2@@150 arg3@@99)) (MapType6Type refType boolType)) :qid |funType:lambda#150| :pattern ( (|lambda#150| arg0@@478 arg1@@236 arg2@@150 arg3@@99)) )))
(assert (forall ((|l#0@@80| T@U) (|l#1@@50| T@U) (|l#2@@50| T@U) (|l#3@@46| Bool) ($o@@63 T@U) ($f@@41 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type |l#0@@80|) refType) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (type $o@@63) refType)) (= (type $f@@41) (FieldType alpha@@48))) (= (U_2_bool (MapType6Select (|lambda#150| |l#0@@80| |l#1@@50| |l#2@@50| |l#3@@46|) $o@@63 $f@@41))  (=> (and (not (= $o@@63 |l#0@@80|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@63) |l#2@@50|))) |l#3@@46|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1978| :pattern ( (MapType6Select (|lambda#150| |l#0@@80| |l#1@@50| |l#2@@50| |l#3@@46|) $o@@63 $f@@41)) )))
(assert (forall ((arg0@@479 T@U) (arg1@@237 T@U) (arg2@@151 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#151| arg0@@479 arg1@@237 arg2@@151 arg3@@100)) (MapType6Type refType boolType)) :qid |funType:lambda#151| :pattern ( (|lambda#151| arg0@@479 arg1@@237 arg2@@151 arg3@@100)) )))
(assert (forall ((|l#0@@81| T@U) (|l#1@@51| T@U) (|l#2@@51| T@U) (|l#3@@47| Bool) ($o@@64 T@U) ($f@@42 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type |l#0@@81|) refType) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (type $o@@64) refType)) (= (type $f@@42) (FieldType alpha@@49))) (= (U_2_bool (MapType6Select (|lambda#151| |l#0@@81| |l#1@@51| |l#2@@51| |l#3@@47|) $o@@64 $f@@42))  (=> (and (not (= $o@@64 |l#0@@81|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@64) |l#2@@51|))) |l#3@@47|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1979| :pattern ( (MapType6Select (|lambda#151| |l#0@@81| |l#1@@51| |l#2@@51| |l#3@@47|) $o@@64 $f@@42)) )))
(assert (forall ((arg0@@480 T@U) (arg1@@238 T@U) (arg2@@152 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#152| arg0@@480 arg1@@238 arg2@@152 arg3@@101)) (MapType6Type refType boolType)) :qid |funType:lambda#152| :pattern ( (|lambda#152| arg0@@480 arg1@@238 arg2@@152 arg3@@101)) )))
(assert (forall ((|l#0@@82| T@U) (|l#1@@52| T@U) (|l#2@@52| T@U) (|l#3@@48| Bool) ($o@@65 T@U) ($f@@43 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type |l#0@@82|) refType) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (type $o@@65) refType)) (= (type $f@@43) (FieldType alpha@@50))) (= (U_2_bool (MapType6Select (|lambda#152| |l#0@@82| |l#1@@52| |l#2@@52| |l#3@@48|) $o@@65 $f@@43))  (=> (and (not (= $o@@65 |l#0@@82|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@65) |l#2@@52|))) |l#3@@48|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1980| :pattern ( (MapType6Select (|lambda#152| |l#0@@82| |l#1@@52| |l#2@@52| |l#3@@48|) $o@@65 $f@@43)) )))
(assert (forall ((arg0@@481 T@U) (arg1@@239 T@U) (arg2@@153 T@U) (arg3@@102 Bool) ) (! (= (type (|lambda#153| arg0@@481 arg1@@239 arg2@@153 arg3@@102)) (MapType6Type refType boolType)) :qid |funType:lambda#153| :pattern ( (|lambda#153| arg0@@481 arg1@@239 arg2@@153 arg3@@102)) )))
(assert (forall ((|l#0@@83| T@U) (|l#1@@53| T@U) (|l#2@@53| T@U) (|l#3@@49| Bool) ($o@@66 T@U) ($f@@44 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type |l#0@@83|) refType) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (type $o@@66) refType)) (= (type $f@@44) (FieldType alpha@@51))) (= (U_2_bool (MapType6Select (|lambda#153| |l#0@@83| |l#1@@53| |l#2@@53| |l#3@@49|) $o@@66 $f@@44))  (=> (and (not (= $o@@66 |l#0@@83|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@66) |l#2@@53|))) |l#3@@49|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1981| :pattern ( (MapType6Select (|lambda#153| |l#0@@83| |l#1@@53| |l#2@@53| |l#3@@49|) $o@@66 $f@@44)) )))
(assert (forall ((|l#0@@84| T@U) (|l#1@@54| T@U) (|$l#0#heap#0@@7| T@U) (|$l#0#i#0@@1| T@U) ) (!  (=> (and (and (and (= (type |l#0@@84|) TyType) (= (type |l#1@@54|) (SeqType BoxType))) (= (type |$l#0#heap#0@@7|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@1|) BoxType)) (= (MapType2Select (|lambda#154| |l#0@@84| |l#1@@54|) |$l#0#heap#0@@7| |$l#0#i#0@@1|) ($Box (bool_2_U (LinearMaybe.__default.has |l#0@@84| (|Seq#Index| |l#1@@54| (U_2_int ($Unbox intType |$l#0#i#0@@1|)))))))) :qid |unknown.0:0| :skolemid |1982| :pattern ( (MapType2Select (|lambda#154| |l#0@@84| |l#1@@54|) |$l#0#heap#0@@7| |$l#0#i#0@@1|)) )))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |index'#0@0| () Int)
(declare-fun |x#2@0| () Int)
(declare-fun |self#0@0| () T@U)
(declare-fun |lambdaResult#0| () T@U)
(declare-fun DList.DList$A@@50 () T@U)
(declare-fun |a#0@@13| () T@U)
(declare-fun |$_Frame#l0@0| () T@U)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |x#3@0| () Int)
(declare-fun |lambdaResult#1| () Int)
(declare-fun |p'#0@2| () Int)
(declare-fun |$_Frame#l1@0| () T@U)
(declare-fun |$lambdaHeap#1@0| () T@U)
(declare-fun |index#0@0| () Int)
(declare-fun |self#0@2| () T@U)
(declare-fun |x#4@0| () Int)
(declare-fun |lambdaResult#2| () Int)
(declare-fun |$_Frame#l2@0| () T@U)
(declare-fun |$lambdaHeap#2@0| () T@U)
(declare-fun |self#0@8| () T@U)
(declare-fun |old_self#0| () T@U)
(declare-fun |p#0@@30| () Int)
(declare-fun |_inout_tmp_3#0@0| () T@U)
(declare-fun |dt_update_tmp#2#Z#0@0| () T@U)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |self#0@3| () T@U)
(declare-fun |##s#1@0| () T@U)
(declare-fun |node#0@0| () T@U)
(declare-fun |node'#0@0| () T@U)
(declare-fun |_inout_tmp_4#0@0| () T@U)
(declare-fun |old_s##0@0| () T@U)
(declare-fun |dt_update_tmp#3#Z#0@0| () T@U)
(declare-fun |let#3#0#0| () T@U)
(declare-fun |dt_update#next#0#Z#0@0| () Int)
(declare-fun |let#4#0#0| () Int)
(declare-fun |a##0@0| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun |call6formal@s#0| () T@U)
(declare-fun call0formal@LinearSequence_i._default.mut_seq_set$A () T@U)
(declare-fun $Heap@@8 () T@U)
(declare-fun call0formal@LinearSequence_i._default.mut_seq_set$A@0 () T@U)
(declare-fun |call3formal@a#0@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |call6formal@s#0@0| () T@U)
(declare-fun |dt_update_tmp#4#Z#0@0| () T@U)
(declare-fun |let#5#0#0| () T@U)
(declare-fun |dt_update#nodes#0#Z#0@0| () T@U)
(declare-fun |let#6#0#0| () T@U)
(declare-fun |self#0@4| () T@U)
(declare-fun |##s#2@0| () T@U)
(declare-fun |##i#2@0| () Int)
(declare-fun |node_next#0@0| () T@U)
(declare-fun |_inout_tmp_5#0@0| () T@U)
(declare-fun |old_s##1@0| () T@U)
(declare-fun |i##1@0| () Int)
(declare-fun |dt_update_tmp#5#Z#0@0| () T@U)
(declare-fun |let#7#0#0| () T@U)
(declare-fun |dt_update#prev#0#Z#0@0| () Int)
(declare-fun |let#8#0#0| () Int)
(declare-fun |a##1@0| () T@U)
(declare-fun |call6formal@s#0@@0| () T@U)
(declare-fun call0formal@LinearSequence_i._default.mut_seq_set$A@@0 () T@U)
(declare-fun call0formal@LinearSequence_i._default.mut_seq_set$A@0@@0 () T@U)
(declare-fun |call3formal@a#0@0@@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |call6formal@s#0@0@@0| () T@U)
(declare-fun |dt_update_tmp#6#Z#0@0| () T@U)
(declare-fun |let#9#0#0| () T@U)
(declare-fun |dt_update#nodes#1#Z#0@0| () T@U)
(declare-fun |let#10#0#0| () T@U)
(declare-fun |self#0@5| () T@U)
(declare-fun |_inout_tmp_6#0@0| () T@U)
(declare-fun |old_s##2@0| () T@U)
(declare-fun |call6formal@s#0@@1| () T@U)
(declare-fun call0formal@LinearSequence_i._default.mut_seq_set$A@@1 () T@U)
(declare-fun call0formal@LinearSequence_i._default.mut_seq_set$A@0@@1 () T@U)
(declare-fun |call3formal@a#0@0@@1| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |call6formal@s#0@0@@1| () T@U)
(declare-fun |dt_update_tmp#7#Z#0@0| () T@U)
(declare-fun |let#11#0#0| () T@U)
(declare-fun |dt_update#nodes#2#Z#0@0| () T@U)
(declare-fun |let#12#0#0| () T@U)
(declare-fun |self#0@6| () T@U)
(declare-fun |freeNode#0@2| () T@U)
(declare-fun |_inout_tmp_7#0@0| () Int)
(declare-fun |dt_update_tmp#8#Z#0@0| () T@U)
(declare-fun |let#13#0#0| () T@U)
(declare-fun |dt_update#freeStack#0#Z#0@0| () Int)
(declare-fun |let#14#0#0| () Int)
(declare-fun |self#0@7| () T@U)
(declare-fun |_inout_tmp_2#0@0| () T@U)
(declare-fun |dt_update_tmp#1#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |self#0@1| () T@U)
(declare-fun |_inout_tmp_1#0@0| () T@U)
(declare-fun |dt_update_tmp#0#Z#0@0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |p'#0@0| () Int)
(declare-fun |freeNode#0@0| () T@U)
(declare-fun |_inout_tmp_0#0_0@0| () T@U)
(declare-fun |call5formal@self#0| () T@U)
(declare-fun call0formal@DList.DList$A () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |call5formal@self#0@0| () T@U)
(declare-fun |p'#0@1| () Int)
(declare-fun |##s#0_0@0| () T@U)
(declare-fun |freeNode#0@1| () T@U)
(declare-fun |##s#0@0| () T@U)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun this@@35 () T@U)
(declare-fun |p'#0| () Int)
(declare-fun |self#0| () T@U)
(declare-fun |freeNode#0| () T@U)
(declare-fun |_inout_tmp_0#0_0| () T@U)
(declare-fun |$rhs##0_0| () T@U)
(declare-fun |selfBefore#0| () T@U)
(declare-fun |_inout_tmp_1#0| () T@U)
(declare-fun |_inout_tmp_2#0| () T@U)
(declare-fun |_inout_tmp_3#0| () T@U)
(declare-fun |node#0| () T@U)
(declare-fun |node'#0| () T@U)
(declare-fun |_inout_tmp_4#0| () T@U)
(declare-fun |$rhs##0| () T@U)
(declare-fun |node_next#0| () T@U)
(declare-fun |_inout_tmp_5#0| () T@U)
(declare-fun |$rhs##1| () T@U)
(declare-fun |_inout_tmp_6#0| () T@U)
(declare-fun |$rhs##2| () T@U)
(declare-fun |_inout_tmp_7#0| () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type DList.DList$A@@50) TyType) (= (type |self#0@8|) DatatypeTypeType)) (= (type |old_self#0|) DatatypeTypeType)) (= (type |a#0@@13|) BoxType)) (= (type |self#0@2|) DatatypeTypeType)) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type |_inout_tmp_3#0@0|) (SeqType BoxType))) (= (type |dt_update_tmp#2#Z#0@0|) DatatypeTypeType)) (= (type |let#2#0#0|) DatatypeTypeType)) (= (type |self#0@3|) DatatypeTypeType)) (= (type |##s#1@0|) (SeqType BoxType))) (= (type |node#0@0|) DatatypeTypeType)) (= (type |node'#0@0|) DatatypeTypeType)) (= (type |_inout_tmp_4#0@0|) (SeqType BoxType))) (= (type |old_s##0@0|) (SeqType BoxType))) (= (type |dt_update_tmp#3#Z#0@0|) DatatypeTypeType)) (= (type |let#3#0#0|) DatatypeTypeType)) (= (type |a##0@0|) DatatypeTypeType)) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (type |call6formal@s#0|) (SeqType BoxType))) (= (type call0formal@LinearSequence_i._default.mut_seq_set$A) TyType)) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type call0formal@LinearSequence_i._default.mut_seq_set$A@0) TyType)) (= (type |call3formal@a#0@0|) BoxType)) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type |call6formal@s#0@0|) (SeqType BoxType))) (= (type |dt_update_tmp#4#Z#0@0|) DatatypeTypeType)) (= (type |let#5#0#0|) DatatypeTypeType)) (= (type |dt_update#nodes#0#Z#0@0|) (SeqType BoxType))) (= (type |let#6#0#0|) (SeqType BoxType))) (= (type |self#0@4|) DatatypeTypeType)) (= (type |##s#2@0|) (SeqType BoxType))) (= (type |node_next#0@0|) DatatypeTypeType)) (= (type |_inout_tmp_5#0@0|) (SeqType BoxType))) (= (type |old_s##1@0|) (SeqType BoxType))) (= (type |dt_update_tmp#5#Z#0@0|) DatatypeTypeType)) (= (type |let#7#0#0|) DatatypeTypeType)) (= (type |a##1@0|) DatatypeTypeType)) (= (type |call6formal@s#0@@0|) (SeqType BoxType))) (= (type call0formal@LinearSequence_i._default.mut_seq_set$A@@0) TyType)) (= (type call0formal@LinearSequence_i._default.mut_seq_set$A@0@@0) TyType)) (= (type |call3formal@a#0@0@@0|) BoxType)) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type |call6formal@s#0@0@@0|) (SeqType BoxType))) (= (type |dt_update_tmp#6#Z#0@0|) DatatypeTypeType)) (= (type |let#9#0#0|) DatatypeTypeType)) (= (type |dt_update#nodes#1#Z#0@0|) (SeqType BoxType))) (= (type |let#10#0#0|) (SeqType BoxType))) (= (type |self#0@5|) DatatypeTypeType)) (= (type |_inout_tmp_6#0@0|) (SeqType BoxType))) (= (type |old_s##2@0|) (SeqType BoxType))) (= (type |call6formal@s#0@@1|) (SeqType BoxType))) (= (type call0formal@LinearSequence_i._default.mut_seq_set$A@@1) TyType)) (= (type call0formal@LinearSequence_i._default.mut_seq_set$A@0@@1) TyType)) (= (type |call3formal@a#0@0@@1|) BoxType)) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type |call6formal@s#0@0@@1|) (SeqType BoxType))) (= (type |dt_update_tmp#7#Z#0@0|) DatatypeTypeType)) (= (type |let#11#0#0|) DatatypeTypeType)) (= (type |dt_update#nodes#2#Z#0@0|) (SeqType BoxType))) (= (type |let#12#0#0|) (SeqType BoxType))) (= (type |self#0@6|) DatatypeTypeType)) (= (type |freeNode#0@2|) DatatypeTypeType)) (= (type |dt_update_tmp#8#Z#0@0|) DatatypeTypeType)) (= (type |let#13#0#0|) DatatypeTypeType)) (= (type |self#0@7|) DatatypeTypeType)) (= (type |$_Frame#l2@0|) (MapType6Type refType boolType))) (= (type |$lambdaHeap#2@0|) (MapType0Type refType MapType1Type))) (= (type |self#0@0|) DatatypeTypeType)) (= (type |_inout_tmp_2#0@0|) (SeqType BoxType))) (= (type |dt_update_tmp#1#Z#0@0|) DatatypeTypeType)) (= (type |let#1#0#0|) DatatypeTypeType)) (= (type |self#0@1|) DatatypeTypeType)) (= (type |$_Frame#l1@0|) (MapType6Type refType boolType))) (= (type |$lambdaHeap#1@0|) (MapType0Type refType MapType1Type))) (= (type |_inout_tmp_1#0@0|) (SeqType BoxType))) (= (type |dt_update_tmp#0#Z#0@0|) DatatypeTypeType)) (= (type |let#0#0#0|) DatatypeTypeType)) (= (type |lambdaResult#0|) BoxType)) (= (type |$_Frame#l0@0|) (MapType6Type refType boolType))) (= (type |$lambdaHeap#0@0|) (MapType0Type refType MapType1Type))) (= (type |freeNode#0@0|) DatatypeTypeType)) (= (type |_inout_tmp_0#0_0@0|) DatatypeTypeType)) (= (type |call5formal@self#0|) DatatypeTypeType)) (= (type call0formal@DList.DList$A) TyType)) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type |call5formal@self#0@0|) DatatypeTypeType)) (= (type |##s#0_0@0|) (SeqType BoxType))) (= (type |freeNode#0@1|) DatatypeTypeType)) (= (type |##s#0@0|) (SeqType BoxType))) (= (type this@@35) DatatypeTypeType)) (= (type |self#0|) DatatypeTypeType)) (= (type |freeNode#0|) DatatypeTypeType)) (= (type |_inout_tmp_0#0_0|) DatatypeTypeType)) (= (type |$rhs##0_0|) DatatypeTypeType)) (= (type |selfBefore#0|) DatatypeTypeType)) (= (type |_inout_tmp_1#0|) (SeqType BoxType))) (= (type |_inout_tmp_2#0|) (SeqType BoxType))) (= (type |_inout_tmp_3#0|) (SeqType BoxType))) (= (type |node#0|) DatatypeTypeType)) (= (type |node'#0|) DatatypeTypeType)) (= (type |_inout_tmp_4#0|) (SeqType BoxType))) (= (type |$rhs##0|) (SeqType BoxType))) (= (type |node_next#0|) DatatypeTypeType)) (= (type |_inout_tmp_5#0|) (SeqType BoxType))) (= (type |$rhs##1|) (SeqType BoxType))) (= (type |_inout_tmp_6#0|) (SeqType BoxType))) (= (type |$rhs##2|) (SeqType BoxType))))
(push 1)
(set-info :boogie-vc-id Impl$$DList.DList.InsertAfter)
(assert (not (=> (= (ControlFlow 0 0) 262843) (let ((anon15_correct true)) (let ((anon46_Else_correct  (=> (and (<= |index'#0@0| |x#2@0|) (DList.DList.DList_q |self#0@0|)) (and (=> (= (ControlFlow 0 99528) (- 0 271416)) (and (<= 0 (- |x#2@0| 1)) (< (- |x#2@0| 1) (|Seq#Length| (DList.DList.s |self#0@0|))))) (=> (and (<= 0 (- |x#2@0| 1)) (< (- |x#2@0| 1) (|Seq#Length| (DList.DList.s |self#0@0|)))) (=> (and (and (= |lambdaResult#0| (|Seq#Index| (DList.DList.s |self#0@0|) (- |x#2@0| 1))) (DList.DList.DList_q |self#0@0|)) (and ($IsBox |lambdaResult#0| DList.DList$A@@50) (= (ControlFlow 0 99528) 99534))) anon15_correct)))))) (let ((anon46_Then_correct  (=> (and (< |x#2@0| |index'#0@0|) (DList.DList.DList_q |self#0@0|)) (and (=> (= (ControlFlow 0 99526) (- 0 271375)) (and (<= 0 |x#2@0|) (< |x#2@0| (|Seq#Length| (DList.DList.s |self#0@0|))))) (=> (and (<= 0 |x#2@0|) (< |x#2@0| (|Seq#Length| (DList.DList.s |self#0@0|)))) (=> (and (and (= |lambdaResult#0| (|Seq#Index| (DList.DList.s |self#0@0|) |x#2@0|)) (DList.DList.DList_q |self#0@0|)) (and ($IsBox |lambdaResult#0| DList.DList$A@@50) (= (ControlFlow 0 99526) 99534))) anon15_correct)))))) (let ((anon45_Else_correct  (=> (not (= |x#2@0| |index'#0@0|)) (and (=> (= (ControlFlow 0 99524) 99526) anon46_Then_correct) (=> (= (ControlFlow 0 99524) 99528) anon46_Else_correct))))) (let ((anon45_Then_correct  (=> (and (and (= |x#2@0| |index'#0@0|) (= |lambdaResult#0| |a#0@@13|)) (and ($IsBox |lambdaResult#0| DList.DList$A@@50) (= (ControlFlow 0 99517) 99534))) anon15_correct))) (let ((anon44_Then_correct  (=> (and (<= (LitInt 0) |x#2@0|) (<= |x#2@0| (|Seq#Length| (DList.DList.s |self#0@0|)))) (and (=> (= (ControlFlow 0 99515) 99517) anon45_Then_correct) (=> (= (ControlFlow 0 99515) 99524) anon45_Else_correct))))) (let ((anon44_Else_correct  (=> (and (not (and (<= (LitInt 0) |x#2@0|) (<= |x#2@0| (|Seq#Length| (DList.DList.s |self#0@0|))))) (= (ControlFlow 0 99530) 99534)) anon15_correct))) (let ((anon43_Else_correct  (=> (< |x#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 99501) 99515) anon44_Then_correct) (=> (= (ControlFlow 0 99501) 99530) anon44_Else_correct))))) (let ((anon43_Then_correct  (=> (and (<= (LitInt 0) |x#2@0|) (DList.DList.DList_q |self#0@0|)) (and (=> (= (ControlFlow 0 99499) 99515) anon44_Then_correct) (=> (= (ControlFlow 0 99499) 99530) anon44_Else_correct))))) (let ((anon42_Then_correct  (=> (= |$_Frame#l0@0| (|lambda#115| null |$lambdaHeap#0@0| alloc false)) (and (=> (= (ControlFlow 0 99497) 99499) anon43_Then_correct) (=> (= (ControlFlow 0 99497) 99501) anon43_Else_correct))))) (let ((anon42_Else_correct true)) (let ((anon41_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap@1 |$lambdaHeap#0@0|) ($HeapSucc $Heap@1 |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 99490) 99497) anon42_Then_correct) (=> (= (ControlFlow 0 99490) 99532) anon42_Else_correct))))) (let ((anon26_correct true)) (let ((anon52_Else_correct  (=> (and (<= |index'#0@0| |x#3@0|) (DList.DList.DList_q |self#0@0|)) (and (=> (= (ControlFlow 0 99582) (- 0 271222)) (and (<= 0 (- |x#3@0| 1)) (< (- |x#3@0| 1) (|Seq#Length| (DList.DList.f |self#0@0|))))) (=> (and (<= 0 (- |x#3@0| 1)) (< (- |x#3@0| 1) (|Seq#Length| (DList.DList.f |self#0@0|)))) (=> (and (and (= |lambdaResult#1| (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@0|) (- |x#3@0| 1))))) (DList.DList.DList_q |self#0@0|)) (and ($Is (int_2_U |lambdaResult#1|) TInt) (= (ControlFlow 0 99582) 99588))) anon26_correct)))))) (let ((anon52_Then_correct  (=> (and (< |x#3@0| |index'#0@0|) (DList.DList.DList_q |self#0@0|)) (and (=> (= (ControlFlow 0 99580) (- 0 271177)) (and (<= 0 |x#3@0|) (< |x#3@0| (|Seq#Length| (DList.DList.f |self#0@0|))))) (=> (and (<= 0 |x#3@0|) (< |x#3@0| (|Seq#Length| (DList.DList.f |self#0@0|)))) (=> (and (and (= |lambdaResult#1| (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@0|) |x#3@0|)))) (DList.DList.DList_q |self#0@0|)) (and ($Is (int_2_U |lambdaResult#1|) TInt) (= (ControlFlow 0 99580) 99588))) anon26_correct)))))) (let ((anon51_Else_correct  (=> (not (= |x#3@0| |index'#0@0|)) (and (=> (= (ControlFlow 0 99578) 99580) anon52_Then_correct) (=> (= (ControlFlow 0 99578) 99582) anon52_Else_correct))))) (let ((anon51_Then_correct  (=> (and (and (= |x#3@0| |index'#0@0|) (= |lambdaResult#1| |p'#0@2|)) (and ($Is (int_2_U |lambdaResult#1|) TInt) (= (ControlFlow 0 99571) 99588))) anon26_correct))) (let ((anon50_Then_correct  (=> (and (<= (LitInt 0) |x#3@0|) (<= |x#3@0| (|Seq#Length| (DList.DList.f |self#0@0|)))) (and (=> (= (ControlFlow 0 99569) 99571) anon51_Then_correct) (=> (= (ControlFlow 0 99569) 99578) anon51_Else_correct))))) (let ((anon50_Else_correct  (=> (and (not (and (<= (LitInt 0) |x#3@0|) (<= |x#3@0| (|Seq#Length| (DList.DList.f |self#0@0|))))) (= (ControlFlow 0 99584) 99588)) anon26_correct))) (let ((anon49_Else_correct  (=> (< |x#3@0| (LitInt 0)) (and (=> (= (ControlFlow 0 99555) 99569) anon50_Then_correct) (=> (= (ControlFlow 0 99555) 99584) anon50_Else_correct))))) (let ((anon49_Then_correct  (=> (and (<= (LitInt 0) |x#3@0|) (DList.DList.DList_q |self#0@0|)) (and (=> (= (ControlFlow 0 99553) 99569) anon50_Then_correct) (=> (= (ControlFlow 0 99553) 99584) anon50_Else_correct))))) (let ((anon48_Then_correct  (=> (= |$_Frame#l1@0| (|lambda#114| null |$lambdaHeap#1@0| alloc false)) (and (=> (= (ControlFlow 0 99551) 99553) anon49_Then_correct) (=> (= (ControlFlow 0 99551) 99555) anon49_Else_correct))))) (let ((anon48_Else_correct true)) (let ((anon47_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#1@0|) (or (= $Heap@1 |$lambdaHeap#1@0|) ($HeapSucc $Heap@1 |$lambdaHeap#1@0|))) (and (=> (= (ControlFlow 0 99544) 99551) anon48_Then_correct) (=> (= (ControlFlow 0 99544) 99586) anon48_Else_correct))))) (let ((anon37_correct true)) (let ((anon58_Else_correct  (=> (and (>= |index#0@0| (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@2|) |x#4@0|)))) (DList.DList.DList_q |self#0@2|)) (and (=> (= (ControlFlow 0 99636) (- 0 271037)) (and (<= 0 |x#4@0|) (< |x#4@0| (|Seq#Length| (DList.DList.g |self#0@2|))))) (=> (and (<= 0 |x#4@0|) (< |x#4@0| (|Seq#Length| (DList.DList.g |self#0@2|)))) (=> (and (and (= |lambdaResult#2| (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@2|) |x#4@0|)))) (DList.DList.DList_q |self#0@2|)) (and ($Is (int_2_U |lambdaResult#2|) TInt) (= (ControlFlow 0 99636) 99642))) anon37_correct)))))) (let ((anon58_Then_correct  (=> (and (> (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@2|) |x#4@0|))) |index#0@0|) (DList.DList.DList_q |self#0@2|)) (and (=> (= (ControlFlow 0 99634) (- 0 270979)) (and (<= 0 |x#4@0|) (< |x#4@0| (|Seq#Length| (DList.DList.g |self#0@2|))))) (=> (and (<= 0 |x#4@0|) (< |x#4@0| (|Seq#Length| (DList.DList.g |self#0@2|)))) (=> (and (and (= |lambdaResult#2| (+ (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@2|) |x#4@0|))) 1)) (DList.DList.DList_q |self#0@2|)) (and ($Is (int_2_U |lambdaResult#2|) TInt) (= (ControlFlow 0 99634) 99642))) anon37_correct)))))) (let ((anon57_Else_correct  (=> (and (not (= |x#4@0| |p'#0@2|)) (DList.DList.DList_q |self#0@2|)) (and (=> (= (ControlFlow 0 99632) (- 0 270948)) (and (<= 0 |x#4@0|) (< |x#4@0| (|Seq#Length| (DList.DList.g |self#0@2|))))) (=> (and (<= 0 |x#4@0|) (< |x#4@0| (|Seq#Length| (DList.DList.g |self#0@2|)))) (and (=> (= (ControlFlow 0 99632) 99634) anon58_Then_correct) (=> (= (ControlFlow 0 99632) 99636) anon58_Else_correct))))))) (let ((anon57_Then_correct  (=> (and (and (= |x#4@0| |p'#0@2|) (= |lambdaResult#2| |index'#0@0|)) (and ($Is (int_2_U |lambdaResult#2|) TInt) (= (ControlFlow 0 99625) 99642))) anon37_correct))) (let ((anon56_Then_correct  (=> (and (<= (LitInt 0) |x#4@0|) (< |x#4@0| (|Seq#Length| (DList.DList.g |self#0@2|)))) (and (=> (= (ControlFlow 0 99623) 99625) anon57_Then_correct) (=> (= (ControlFlow 0 99623) 99632) anon57_Else_correct))))) (let ((anon56_Else_correct  (=> (and (not (and (<= (LitInt 0) |x#4@0|) (< |x#4@0| (|Seq#Length| (DList.DList.g |self#0@2|))))) (= (ControlFlow 0 99638) 99642)) anon37_correct))) (let ((anon55_Else_correct  (=> (< |x#4@0| (LitInt 0)) (and (=> (= (ControlFlow 0 99609) 99623) anon56_Then_correct) (=> (= (ControlFlow 0 99609) 99638) anon56_Else_correct))))) (let ((anon55_Then_correct  (=> (and (<= (LitInt 0) |x#4@0|) (DList.DList.DList_q |self#0@2|)) (and (=> (= (ControlFlow 0 99607) 99623) anon56_Then_correct) (=> (= (ControlFlow 0 99607) 99638) anon56_Else_correct))))) (let ((anon54_Then_correct  (=> (= |$_Frame#l2@0| (|lambda#113| null |$lambdaHeap#2@0| alloc false)) (and (=> (= (ControlFlow 0 99605) 99607) anon55_Then_correct) (=> (= (ControlFlow 0 99605) 99609) anon55_Else_correct))))) (let ((anon54_Else_correct true)) (let ((anon53_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#2@0|) (or (= $Heap@1 |$lambdaHeap#2@0|) ($HeapSucc $Heap@1 |$lambdaHeap#2@0|))) (and (=> (= (ControlFlow 0 99598) 99605) anon54_Then_correct) (=> (= (ControlFlow 0 99598) 99640) anon54_Else_correct))))) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 262723) (- 0 271488)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (= (|Seq#Length| (DList.DList.f |self#0@8|)) (|Seq#Length| (DList.DList.s |self#0@8|)))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (= (|Seq#Length| (DList.DList.f |self#0@8|)) (|Seq#Length| (DList.DList.s |self#0@8|))))))) (and (=> (= (ControlFlow 0 262723) (- 0 271556)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (= (|Seq#Length| (DList.DList.g |self#0@8|)) (|Seq#Length| (DList.DList.nodes |self#0@8|)))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (= (|Seq#Length| (DList.DList.g |self#0@8|)) (|Seq#Length| (DList.DList.nodes |self#0@8|))))))) (and (=> (= (ControlFlow 0 262723) (- 0 271624)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (> (|Seq#Length| (DList.DList.nodes |self#0@8|)) 0)))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (> (|Seq#Length| (DList.DList.nodes |self#0@8|)) 0))))) (and (=> (= (ControlFlow 0 262723) (- 0 271689)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) (LitInt 0)))) DList.__default.sentinel)))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) (LitInt 0)))) DList.__default.sentinel))))) (and (=> (= (ControlFlow 0 262723) (- 0 271762)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (<= (LitInt 0) (DList.DList.freeStack |self#0@8|))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (<= (LitInt 0) (DList.DList.freeStack |self#0@8|)))))) (and (=> (= (ControlFlow 0 262723) (- 0 271827)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (< (DList.DList.freeStack |self#0@8|) (|Seq#Length| (DList.DList.nodes |self#0@8|)))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (< (DList.DList.freeStack |self#0@8|) (|Seq#Length| (DList.DList.nodes |self#0@8|))))))) (and (=> (= (ControlFlow 0 262723) (- 0 271893)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (forall ((|i#6| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (|Seq#Length| (DList.DList.f |self#0@8|)))) (< 0 (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#6|))))) (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (|Seq#Length| (DList.DList.f |self#0@8|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#6|))) (|Seq#Length| (DList.DList.nodes |self#0@8|)))))) :qid |LinearDListidfy.50:16| :skolemid |1552| :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#6|))) ))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (forall ((|i#6@@0| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#6@@0|) (< |i#6@@0| (|Seq#Length| (DList.DList.f |self#0@8|)))) (< 0 (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#6@@0|))))) (=> (and (<= (LitInt 0) |i#6@@0|) (< |i#6@@0| (|Seq#Length| (DList.DList.f |self#0@8|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#6@@0|))) (|Seq#Length| (DList.DList.nodes |self#0@8|)))))) :qid |LinearDListidfy.50:16| :skolemid |1552| :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#6@@0|))) )))))) (and (=> (= (ControlFlow 0 262723) (- 0 272045)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (forall ((|i#7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (|Seq#Length| (DList.DList.f |self#0@8|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#7|)))))) |i#7|))) :qid |LinearDListidfy.51:16| :skolemid |1553| :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#7|)))))) ))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (forall ((|i#7@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#7@@0|) (< |i#7@@0| (|Seq#Length| (DList.DList.f |self#0@8|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#7@@0|)))))) |i#7@@0|))) :qid |LinearDListidfy.51:16| :skolemid |1553| :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) |i#7@@0|)))))) )))))) (and (=> (= (ControlFlow 0 262723) (- 0 272174)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (forall ((|p#7| Int) ) (!  (=> true (and (and (and (and (=> (and (<= (LitInt 0) |p#7|) (< |p#7| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#7|))))) (=> (and (<= (LitInt 0) |p#7|) (< |p#7| (|Seq#Length| (DList.DList.g |self#0@8|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#7|))) (|Seq#Length| (DList.DList.s |self#0@8|))))) (=> (and (<= (LitInt 0) |p#7|) (< |p#7| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#7|)))))) (=> (and (<= (LitInt 0) |p#7|) (< |p#7| (|Seq#Length| (DList.DList.g |self#0@8|)))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#7|))) (|Seq#Length| (DList.DList.g |self#0@8|))))) (=> (and (<= (LitInt 0) |p#7|) (< |p#7| (|Seq#Length| (DList.DList.g |self#0@8|)))) (= (>= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#7|))) (LitInt 0)) (Options.Option.Some_q (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#7|)))))))) :qid |LinearDListidfy.52:16| :skolemid |1554| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#7|))) :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#7|))) ))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (forall ((|p#7@@0| Int) ) (!  (=> true (and (and (and (and (=> (and (<= (LitInt 0) |p#7@@0|) (< |p#7@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#7@@0|))))) (=> (and (<= (LitInt 0) |p#7@@0|) (< |p#7@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#7@@0|))) (|Seq#Length| (DList.DList.s |self#0@8|))))) (=> (and (<= (LitInt 0) |p#7@@0|) (< |p#7@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#7@@0|)))))) (=> (and (<= (LitInt 0) |p#7@@0|) (< |p#7@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#7@@0|))) (|Seq#Length| (DList.DList.g |self#0@8|))))) (=> (and (<= (LitInt 0) |p#7@@0|) (< |p#7@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (= (>= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#7@@0|))) (LitInt 0)) (Options.Option.Some_q (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#7@@0|)))))))) :qid |LinearDListidfy.52:16| :skolemid |1554| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#7@@0|))) :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#7@@0|))) )))))) (and (=> (= (ControlFlow 0 262723) (- 0 272481)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (forall ((|p#8| Int) ) (!  (=> true (and (and (and (and (=> (and (and (<= (LitInt 0) |p#8|) (< |p#8| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))) DList.__default.sentinel) (= |p#8| (LitInt 0)))) (=> (and (and (<= (LitInt 0) |p#8|) (< |p#8| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|)))) (and (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|)))))) |p#8|) (|Options.Option#Equal| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8|))) (|#Options.Option.Some| (|Seq#Index| (DList.DList.s |self#0@8|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|)))))))))) (=> (and (and (<= (LitInt 0) |p#8|) (< |p#8| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))))) (= (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8|))) (ite (< (+ (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))) 1) (|Seq#Length| (DList.DList.f |self#0@8|))) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) (+ (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))) 1)))) 0)))) (=> (and (and (<= (LitInt 0) |p#8|) (< |p#8| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))))) (= (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8|))) (ite (> (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))) 0) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) (- (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))) 1)))) (ite  (or (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))) (LitInt 0)) (= (|Seq#Length| (DList.DList.f |self#0@8|)) (LitInt 0))) 0 (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) (- (|Seq#Length| (DList.DList.f |self#0@8|)) 1))))))))) (=> (and (and (<= (LitInt 0) |p#8|) (< |p#8| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))))) (< (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8|))) (|Seq#Length| (DList.DList.nodes |self#0@8|)))))) :qid |LinearDListidfy.56:16| :skolemid |1555| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8|))) :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8|))) ))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |self#0@8|) (or (DList.DList.Inv DList.DList$A@@50 |self#0@8|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |self#0@8|) (DList.DList.freeStack |self#0@8|) (DList.DList.s |self#0@8|) (DList.DList.f |self#0@8|) (DList.DList.g |self#0@8|)) (forall ((|p#8@@0| Int) ) (!  (=> true (and (and (and (and (=> (and (and (<= (LitInt 0) |p#8@@0|) (< |p#8@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))) DList.__default.sentinel) (= |p#8@@0| (LitInt 0)))) (=> (and (and (<= (LitInt 0) |p#8@@0|) (< |p#8@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|)))) (and (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|)))))) |p#8@@0|) (|Options.Option#Equal| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8@@0|))) (|#Options.Option.Some| (|Seq#Index| (DList.DList.s |self#0@8|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|)))))))))) (=> (and (and (<= (LitInt 0) |p#8@@0|) (< |p#8@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))))) (= (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8@@0|))) (ite (< (+ (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))) 1) (|Seq#Length| (DList.DList.f |self#0@8|))) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) (+ (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))) 1)))) 0)))) (=> (and (and (<= (LitInt 0) |p#8@@0|) (< |p#8@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))))) (= (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8@@0|))) (ite (> (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))) 0) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) (- (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))) 1)))) (ite  (or (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))) (LitInt 0)) (= (|Seq#Length| (DList.DList.f |self#0@8|)) (LitInt 0))) 0 (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |self#0@8|) (- (|Seq#Length| (DList.DList.f |self#0@8|)) 1))))))))) (=> (and (and (<= (LitInt 0) |p#8@@0|) (< |p#8@@0| (|Seq#Length| (DList.DList.g |self#0@8|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))))) (< (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8@@0|))) (|Seq#Length| (DList.DList.nodes |self#0@8|)))))) :qid |LinearDListidfy.56:16| :skolemid |1555| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |self#0@8|) |p#8@@0|))) :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p#8@@0|))) )))))) (and (=> (= (ControlFlow 0 262723) (- 0 273063)) (|Seq#Equal| (DList.DList.Seq DList.DList$A@@50 |self#0@8|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (DList.DList.Seq DList.DList$A@@50 |old_self#0|) (+ (DList.DList.Index DList.DList$A@@50 |old_self#0| |p#0@@30|) 1)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@13|)) (|Seq#Drop| (DList.DList.Seq DList.DList$A@@50 |old_self#0|) (+ (DList.DList.Index DList.DList$A@@50 |old_self#0| |p#0@@30|) 1))))) (=> (|Seq#Equal| (DList.DList.Seq DList.DList$A@@50 |self#0@8|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (DList.DList.Seq DList.DList$A@@50 |old_self#0|) (+ (DList.DList.Index DList.DList$A@@50 |old_self#0| |p#0@@30|) 1)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@13|)) (|Seq#Drop| (DList.DList.Seq DList.DList$A@@50 |old_self#0|) (+ (DList.DList.Index DList.DList$A@@50 |old_self#0| |p#0@@30|) 1)))) (and (=> (= (ControlFlow 0 262723) (- 0 273122)) (=> (|DList.DList.ValidPtr#canCall| DList.DList$A@@50 |self#0@8| |p'#0@2|) (or (DList.DList.ValidPtr DList.DList$A@@50 |self#0@8| |p'#0@2|) (< 0 |p'#0@2|)))) (=> (=> (|DList.DList.ValidPtr#canCall| DList.DList$A@@50 |self#0@8| |p'#0@2|) (or (DList.DList.ValidPtr DList.DList$A@@50 |self#0@8| |p'#0@2|) (< 0 |p'#0@2|))) (and (=> (= (ControlFlow 0 262723) (- 0 273143)) (=> (|DList.DList.ValidPtr#canCall| DList.DList$A@@50 |self#0@8| |p'#0@2|) (or (DList.DList.ValidPtr DList.DList$A@@50 |self#0@8| |p'#0@2|) (< |p'#0@2| (|Seq#Length| (DList.DList.g |self#0@8|)))))) (=> (=> (|DList.DList.ValidPtr#canCall| DList.DList$A@@50 |self#0@8| |p'#0@2|) (or (DList.DList.ValidPtr DList.DList$A@@50 |self#0@8| |p'#0@2|) (< |p'#0@2| (|Seq#Length| (DList.DList.g |self#0@8|))))) (and (=> (= (ControlFlow 0 262723) (- 0 273167)) (=> (|DList.DList.ValidPtr#canCall| DList.DList$A@@50 |self#0@8| |p'#0@2|) (or (DList.DList.ValidPtr DList.DList$A@@50 |self#0@8| |p'#0@2|) (>= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p'#0@2|))) (LitInt 0))))) (=> (=> (|DList.DList.ValidPtr#canCall| DList.DList$A@@50 |self#0@8| |p'#0@2|) (or (DList.DList.ValidPtr DList.DList$A@@50 |self#0@8| |p'#0@2|) (>= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@8|) |p'#0@2|))) (LitInt 0)))) (and (=> (= (ControlFlow 0 262723) (- 0 273199)) (= (DList.DList.Index DList.DList$A@@50 |self#0@8| |p'#0@2|) (+ (DList.DList.Index DList.DList$A@@50 |old_self#0| |p#0@@30|) 1))) (=> (= (DList.DList.Index DList.DList$A@@50 |self#0@8| |p'#0@2|) (+ (DList.DList.Index DList.DList$A@@50 |old_self#0| |p#0@@30|) 1)) (=> (= (ControlFlow 0 262723) (- 0 273219)) (forall ((|x#1| Int) ) (!  (=> (and (<= (LitInt 0) |x#1|) (< |x#1| 18446744073709551616)) (and (=> (DList.DList.ValidPtr DList.DList$A@@50 |old_self#0| |x#1|) (DList.DList.ValidPtr DList.DList$A@@50 |self#0@8| |x#1|)) (=> (DList.DList.ValidPtr DList.DList$A@@50 |old_self#0| |x#1|) (= (DList.DList.Index DList.DList$A@@50 |self#0@8| |x#1|) (+ (DList.DList.Index DList.DList$A@@50 |old_self#0| |x#1|) (ite (<= (DList.DList.Index DList.DList$A@@50 |old_self#0| |x#1|) (DList.DList.Index DList.DList$A@@50 |old_self#0| |p#0@@30|)) 0 1)))))) :qid |LinearDListidfy.247:22| :skolemid |1561| :pattern ( (DList.DList.Index DList.DList$A@@50 |old_self#0| |x#1|)) :pattern ( (DList.DList.Index DList.DList$A@@50 |self#0@8| |x#1|)) :pattern ( (DList.DList.ValidPtr DList.DList$A@@50 |self#0@8| |x#1|)) :pattern ( (DList.DList.ValidPtr DList.DList$A@@50 |old_self#0| |x#1|)) ))))))))))))))))))))))))))))))))))) (let ((anon53_Else_correct  (and (=> (= (ControlFlow 0 99644) (- 0 268783)) (forall ((|seqinit#2#i0#0| Int) ) (!  (=> (and (<= 0 |seqinit#2#i0#0|) (< |seqinit#2#i0#0| (|Seq#Length| (DList.DList.g |self#0@2|)))) (Requires1 TInt TInt $Heap@1 (Lit (AtLayer (|lambda#24| (Handle1 (|lambda#103| |p'#0@2| |index'#0@0| (DList.DList.g |self#0@2|) |index#0@0| (DList.DList.g |self#0@2|) 1 (DList.DList.g |self#0@2|)) (|lambda#36| TInt (LitInt 0) (|Seq#Length| (DList.DList.g |self#0@2|))) (|lambda#23| (SetRef_to_SetBox (|lambda#22| false))))) ($LS $LZ))) ($Box (int_2_U |seqinit#2#i0#0|)))) :qid |LinearDListidfy.268:29| :skolemid |1568| ))) (=> (and (and (DList.DList.DList_q |self#0@2|) (forall ((|$l#7#x#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#7#x#0|) (DList.DList.DList_q |self#0@2|)) (=> (and (<= (LitInt 0) |$l#7#x#0|) (< |$l#7#x#0| (|Seq#Length| (DList.DList.g |self#0@2|)))) (=> (not (= |$l#7#x#0| |p'#0@2|)) (and (and (DList.DList.DList_q |self#0@2|) (=> (> (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@2|) |$l#7#x#0|))) |index#0@0|) (DList.DList.DList_q |self#0@2|))) (=> (>= |index#0@0| (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@2|) |$l#7#x#0|)))) (DList.DList.DList_q |self#0@2|)))))) :qid |unknown.0:0| :skolemid |1569| ))) (= |_inout_tmp_3#0@0| (|Seq#Create| TInt $Heap@1 (|Seq#Length| (DList.DList.g |self#0@2|)) (Lit (AtLayer (|lambda#24| (Handle1 (|lambda#103| |p'#0@2| |index'#0@0| (DList.DList.g |self#0@2|) |index#0@0| (DList.DList.g |self#0@2|) 1 (DList.DList.g |self#0@2|)) (|lambda#36| TInt (LitInt 0) (|Seq#Length| (DList.DList.g |self#0@2|))) (|lambda#23| (SetRef_to_SetBox (|lambda#22| false))))) ($LS $LZ)))))) (=> (and (and (and (and ($Is |dt_update_tmp#2#Z#0@0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |dt_update_tmp#2#Z#0@0| (Tclass.DList.DList DList.DList$A@@50) $Heap@1)) (= |let#2#0#0| |self#0@2|)) (and (and ($Is |let#2#0#0| (Tclass.DList.DList DList.DList$A@@50)) (= |dt_update_tmp#2#Z#0@0| |let#2#0#0|)) (and (DList.DList.DList_q |dt_update_tmp#2#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#2#Z#0@0|)))) (and (and (and (DList.DList.DList_q |dt_update_tmp#2#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#2#Z#0@0|)) (and (let ((|dt_update_tmp#2#0| |self#0@2|)) (and (and (and (DList.DList.DList_q |dt_update_tmp#2#0|) (DList.DList.DList_q |dt_update_tmp#2#0|)) (DList.DList.DList_q |dt_update_tmp#2#0|)) (DList.DList.DList_q |dt_update_tmp#2#0|))) (= |self#0@3| (let ((|dt_update_tmp#2#0@@0| |self#0@2|)) (|#DList.DList.DList| (DList.DList.nodes |dt_update_tmp#2#0@@0|) (DList.DList.freeStack |dt_update_tmp#2#0@@0|) (DList.DList.s |dt_update_tmp#2#0@@0|) (DList.DList.f |dt_update_tmp#2#0@@0|) |_inout_tmp_3#0@0|))))) (and (and (DList.DList.DList_q |self#0@3|) (= |##s#1@0| (DList.DList.nodes |self#0@3|))) (and ($IsAlloc |##s#1@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@1) ($IsAlloc (int_2_U |p#0@@30|) Tclass.NativeTypes.uint64 $Heap@1))))) (and (=> (= (ControlFlow 0 99644) (- 0 269170)) (< |p#0@@30| (|Seq#Length| |##s#1@0|))) (=> (< |p#0@@30| (|Seq#Length| |##s#1@0|)) (=> (and (and (and (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |self#0@3|) |p#0@@30|) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |self#0@3|) |p#0@@30|)))) (and (DList.DList.DList_q |self#0@3|) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |self#0@3|) |p#0@@30|))) (and (and (= |node#0@0| ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |self#0@3|) |p#0@@30|))) (DList.Node.Node_q |node#0@0|)) (and (DList.Node.Node_q |node#0@0|) (= |node'#0@0| (|#DList.Node.Node| (|#Options.Option.Some| |a#0@@13|) (DList.Node.next |node#0@0|) |p#0@@30|))))) (=> (and (and (and (and (and ($Is |_inout_tmp_4#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |_inout_tmp_4#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@1)) (DList.DList.DList_q |self#0@3|)) (and (DList.DList.DList_q |self#0@3|) (= |old_s##0@0| (DList.DList.nodes |self#0@3|)))) (and (and (and ($Is |dt_update_tmp#3#Z#0@0| (Tclass.DList.Node DList.DList$A@@50)) ($IsAlloc |dt_update_tmp#3#Z#0@0| (Tclass.DList.Node DList.DList$A@@50) $Heap@1)) (= |let#3#0#0| |node#0@0|)) (and ($Is |let#3#0#0| (Tclass.DList.Node DList.DList$A@@50)) (= |dt_update_tmp#3#Z#0@0| |let#3#0#0|)))) (and (and (and (and (<= (LitInt 0) |dt_update#next#0#Z#0@0|) (< |dt_update#next#0#Z#0@0| 18446744073709551616)) (= |let#4#0#0| |p'#0@2|)) (and ($Is (int_2_U |let#4#0#0|) Tclass.NativeTypes.uint64) (= |dt_update#next#0#Z#0@0| |let#4#0#0|))) (and (and (DList.Node.Node_q |dt_update_tmp#3#Z#0@0|) (DList.Node.Node_q |dt_update_tmp#3#Z#0@0|)) (and (let ((|dt_update_tmp#3#0| |node#0@0|)) (and (DList.Node.Node_q |dt_update_tmp#3#0|) (DList.Node.Node_q |dt_update_tmp#3#0|))) (= |a##0@0| (let ((|dt_update_tmp#3#0@@0| |node#0@0|)) (let ((|dt_update#next#0#0| |p'#0@2|)) (|#DList.Node.Node| (DList.Node.data |dt_update_tmp#3#0@@0|) |dt_update#next#0#0| (DList.Node.prev |dt_update_tmp#3#0@@0|))))))))) (and (=> (= (ControlFlow 0 99644) (- 0 269440)) (forall (($o@@67 T@U) ($f@@45 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (= (type $o@@67) refType) (= (type $f@@45) (FieldType alpha@@52))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@67 $f@@45)))) :qid |LinearDListidfy.272:18| :skolemid |1570| :no-pattern (type $o@@67) :no-pattern (type $f@@45) :no-pattern (U_2_int $o@@67) :no-pattern (U_2_bool $o@@67) :no-pattern (U_2_int $f@@45) :no-pattern (U_2_bool $f@@45) ))) (=> (forall (($o@@68 T@U) ($f@@46 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (= (type $o@@68) refType) (= (type $f@@46) (FieldType alpha@@53))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@68 $f@@46)))) :qid |LinearDListidfy.272:18| :skolemid |1570| :no-pattern (type $o@@68) :no-pattern (type $f@@46) :no-pattern (U_2_int $o@@68) :no-pattern (U_2_bool $o@@68) :no-pattern (U_2_int $f@@46) :no-pattern (U_2_bool $f@@46) )) (=> (and (and ($Is |call6formal@s#0| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A)) ($IsAlloc |call6formal@s#0| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A) $Heap@@8)) (and (= call0formal@LinearSequence_i._default.mut_seq_set$A@0 (Tclass.DList.Node DList.DList$A@@50)) (= |call3formal@a#0@0| ($Box |a##0@0|)))) (and (=> (= (ControlFlow 0 99644) (- 0 269478)) (< |p#0@@30| (|Seq#Length| |old_s##0@0|))) (=> (< |p#0@@30| (|Seq#Length| |old_s##0@0|)) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and (and ($Is |call6formal@s#0@0| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@0)) ($IsAlloc |call6formal@s#0@0| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@0) $Heap@2)) (|Seq#Equal| |call6formal@s#0@0| (|Seq#Update| |old_s##0@0| |p#0@@30| |call3formal@a#0@0|))) (and (forall (($o@@69 T@U) ) (!  (=> (= (type $o@@69) refType) (=> (and (not (= $o@@69 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@1 $o@@69) alloc))) (= (MapType0Select $Heap@2 $o@@69) (MapType0Select $Heap@1 $o@@69)))) :qid |LinearSequenceidfy.431:10| :skolemid |1922| :pattern ( (MapType0Select $Heap@2 $o@@69)) )) ($HeapSucc $Heap@1 $Heap@2))) (and (and (and ($Is |dt_update_tmp#4#Z#0@0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |dt_update_tmp#4#Z#0@0| (Tclass.DList.DList DList.DList$A@@50) $Heap@2)) (= |let#5#0#0| |self#0@3|)) (and ($Is |let#5#0#0| (Tclass.DList.DList DList.DList$A@@50)) (= |dt_update_tmp#4#Z#0@0| |let#5#0#0|)))) (=> (and (and (and (and (and ($Is |dt_update#nodes#0#Z#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |dt_update#nodes#0#Z#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@2)) (= |let#6#0#0| |call6formal@s#0@0|)) (and ($Is |let#6#0#0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) (= |dt_update#nodes#0#Z#0@0| |let#6#0#0|))) (and (and (DList.DList.DList_q |dt_update_tmp#4#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#4#Z#0@0|)) (and (DList.DList.DList_q |dt_update_tmp#4#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#4#Z#0@0|)))) (and (and (and (let ((|dt_update_tmp#4#0| |self#0@3|)) (and (and (and (DList.DList.DList_q |dt_update_tmp#4#0|) (DList.DList.DList_q |dt_update_tmp#4#0|)) (DList.DList.DList_q |dt_update_tmp#4#0|)) (DList.DList.DList_q |dt_update_tmp#4#0|))) (= |self#0@4| (let ((|dt_update_tmp#4#0@@0| |self#0@3|)) (let ((|dt_update#nodes#0#0| |call6formal@s#0@0|)) (|#DList.DList.DList| |dt_update#nodes#0#0| (DList.DList.freeStack |dt_update_tmp#4#0@@0|) (DList.DList.s |dt_update_tmp#4#0@@0|) (DList.DList.f |dt_update_tmp#4#0@@0|) (DList.DList.g |dt_update_tmp#4#0@@0|)))))) (and (DList.DList.DList_q |self#0@4|) (DList.Node.Node_q |node#0@0|))) (and (and (= |##s#2@0| (DList.DList.nodes |self#0@4|)) ($IsAlloc |##s#2@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@2)) (and (= |##i#2@0| (DList.Node.next |node#0@0|)) ($IsAlloc (int_2_U |##i#2@0|) Tclass.NativeTypes.uint64 $Heap@2))))) (and (=> (= (ControlFlow 0 99644) (- 0 269780)) (< |##i#2@0| (|Seq#Length| |##s#2@0|))) (=> (< |##i#2@0| (|Seq#Length| |##s#2@0|)) (=> (and (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |self#0@4|) (DList.Node.next |node#0@0|)) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |self#0@4|) (DList.Node.next |node#0@0|))))) (=> (and (and (and (DList.DList.DList_q |self#0@4|) (DList.Node.Node_q |node#0@0|)) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |self#0@4|) (DList.Node.next |node#0@0|))) (= |node_next#0@0| ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |self#0@4|) (DList.Node.next |node#0@0|))))) (=> (and (and (and (and (and ($Is |_inout_tmp_5#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |_inout_tmp_5#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@2)) (and (DList.DList.DList_q |self#0@4|) (DList.DList.DList_q |self#0@4|))) (and (and (= |old_s##1@0| (DList.DList.nodes |self#0@4|)) (DList.Node.Node_q |node#0@0|)) (and (DList.Node.Node_q |node#0@0|) (= |i##1@0| (DList.Node.next |node#0@0|))))) (and (and (and ($Is |dt_update_tmp#5#Z#0@0| (Tclass.DList.Node DList.DList$A@@50)) ($IsAlloc |dt_update_tmp#5#Z#0@0| (Tclass.DList.Node DList.DList$A@@50) $Heap@2)) (= |let#7#0#0| |node_next#0@0|)) (and ($Is |let#7#0#0| (Tclass.DList.Node DList.DList$A@@50)) (= |dt_update_tmp#5#Z#0@0| |let#7#0#0|)))) (and (and (and (and (<= (LitInt 0) |dt_update#prev#0#Z#0@0|) (< |dt_update#prev#0#Z#0@0| 18446744073709551616)) (= |let#8#0#0| |p'#0@2|)) (and ($Is (int_2_U |let#8#0#0|) Tclass.NativeTypes.uint64) (= |dt_update#prev#0#Z#0@0| |let#8#0#0|))) (and (and (DList.Node.Node_q |dt_update_tmp#5#Z#0@0|) (DList.Node.Node_q |dt_update_tmp#5#Z#0@0|)) (and (let ((|dt_update_tmp#5#0| |node_next#0@0|)) (and (DList.Node.Node_q |dt_update_tmp#5#0|) (DList.Node.Node_q |dt_update_tmp#5#0|))) (= |a##1@0| (let ((|dt_update_tmp#5#0@@0| |node_next#0@0|)) (let ((|dt_update#prev#0#0| |p'#0@2|)) (|#DList.Node.Node| (DList.Node.data |dt_update_tmp#5#0@@0|) (DList.Node.next |dt_update_tmp#5#0@@0|) |dt_update#prev#0#0|)))))))) (and (=> (= (ControlFlow 0 99644) (- 0 270042)) (forall (($o@@70 T@U) ($f@@47 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (= (type $o@@70) refType) (= (type $f@@47) (FieldType alpha@@54))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@70 $f@@47)))) :qid |LinearDListidfy.274:18| :skolemid |1571| :no-pattern (type $o@@70) :no-pattern (type $f@@47) :no-pattern (U_2_int $o@@70) :no-pattern (U_2_bool $o@@70) :no-pattern (U_2_int $f@@47) :no-pattern (U_2_bool $f@@47) ))) (=> (forall (($o@@71 T@U) ($f@@48 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (= (type $o@@71) refType) (= (type $f@@48) (FieldType alpha@@55))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@71 $f@@48)))) :qid |LinearDListidfy.274:18| :skolemid |1571| :no-pattern (type $o@@71) :no-pattern (type $f@@48) :no-pattern (U_2_int $o@@71) :no-pattern (U_2_bool $o@@71) :no-pattern (U_2_int $f@@48) :no-pattern (U_2_bool $f@@48) )) (=> (and (and ($Is |call6formal@s#0@@0| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@@0)) ($IsAlloc |call6formal@s#0@@0| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@@0) $Heap@@8)) (and (= call0formal@LinearSequence_i._default.mut_seq_set$A@0@@0 (Tclass.DList.Node DList.DList$A@@50)) (= |call3formal@a#0@0@@0| ($Box |a##1@0|)))) (and (=> (= (ControlFlow 0 99644) (- 0 270080)) (< |i##1@0| (|Seq#Length| |old_s##1@0|))) (=> (< |i##1@0| (|Seq#Length| |old_s##1@0|)) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and ($Is |call6formal@s#0@0@@0| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@0@@0)) ($IsAlloc |call6formal@s#0@0@@0| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@0@@0) $Heap@3)) (|Seq#Equal| |call6formal@s#0@0@@0| (|Seq#Update| |old_s##1@0| |i##1@0| |call3formal@a#0@0@@0|))) (and (forall (($o@@72 T@U) ) (!  (=> (= (type $o@@72) refType) (=> (and (not (= $o@@72 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@2 $o@@72) alloc))) (= (MapType0Select $Heap@3 $o@@72) (MapType0Select $Heap@2 $o@@72)))) :qid |LinearSequenceidfy.431:10| :skolemid |1922| :pattern ( (MapType0Select $Heap@3 $o@@72)) )) ($HeapSucc $Heap@2 $Heap@3))) (=> (and (and (and (and (and ($Is |dt_update_tmp#6#Z#0@0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |dt_update_tmp#6#Z#0@0| (Tclass.DList.DList DList.DList$A@@50) $Heap@3)) (= |let#9#0#0| |self#0@4|)) (and ($Is |let#9#0#0| (Tclass.DList.DList DList.DList$A@@50)) (= |dt_update_tmp#6#Z#0@0| |let#9#0#0|))) (and (and ($Is |dt_update#nodes#1#Z#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |dt_update#nodes#1#Z#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@3)) (= |let#10#0#0| |call6formal@s#0@0@@0|))) (and (and (and (and ($Is |let#10#0#0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) (= |dt_update#nodes#1#Z#0@0| |let#10#0#0|)) (and (DList.DList.DList_q |dt_update_tmp#6#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#6#Z#0@0|))) (and (and (DList.DList.DList_q |dt_update_tmp#6#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#6#Z#0@0|)) (and (let ((|dt_update_tmp#6#0| |self#0@4|)) (and (and (and (DList.DList.DList_q |dt_update_tmp#6#0|) (DList.DList.DList_q |dt_update_tmp#6#0|)) (DList.DList.DList_q |dt_update_tmp#6#0|)) (DList.DList.DList_q |dt_update_tmp#6#0|))) (= |self#0@5| (let ((|dt_update_tmp#6#0@@0| |self#0@4|)) (let ((|dt_update#nodes#1#0| |call6formal@s#0@0@@0|)) (|#DList.DList.DList| |dt_update#nodes#1#0| (DList.DList.freeStack |dt_update_tmp#6#0@@0|) (DList.DList.s |dt_update_tmp#6#0@@0|) (DList.DList.f |dt_update_tmp#6#0@@0|) (DList.DList.g |dt_update_tmp#6#0@@0|)))))))) (and (and (and ($Is |_inout_tmp_6#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |_inout_tmp_6#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@3)) (DList.DList.DList_q |self#0@5|)) (and (DList.DList.DList_q |self#0@5|) (= |old_s##2@0| (DList.DList.nodes |self#0@5|)))))) (and (=> (= (ControlFlow 0 99644) (- 0 270388)) (forall (($o@@73 T@U) ($f@@49 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (= (type $o@@73) refType) (= (type $f@@49) (FieldType alpha@@56))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@73 $f@@49)))) :qid |LinearDListidfy.275:18| :skolemid |1572| :no-pattern (type $o@@73) :no-pattern (type $f@@49) :no-pattern (U_2_int $o@@73) :no-pattern (U_2_bool $o@@73) :no-pattern (U_2_int $f@@49) :no-pattern (U_2_bool $f@@49) ))) (=> (forall (($o@@74 T@U) ($f@@50 T@U) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (= (type $o@@74) refType) (= (type $f@@50) (FieldType alpha@@57))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@74 $f@@50)))) :qid |LinearDListidfy.275:18| :skolemid |1572| :no-pattern (type $o@@74) :no-pattern (type $f@@50) :no-pattern (U_2_int $o@@74) :no-pattern (U_2_bool $o@@74) :no-pattern (U_2_int $f@@50) :no-pattern (U_2_bool $f@@50) )) (=> (and (and ($Is |call6formal@s#0@@1| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@@1)) ($IsAlloc |call6formal@s#0@@1| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@@1) $Heap@@8)) (and (= call0formal@LinearSequence_i._default.mut_seq_set$A@0@@1 (Tclass.DList.Node DList.DList$A@@50)) (= |call3formal@a#0@0@@1| ($Box |node'#0@0|)))) (and (=> (= (ControlFlow 0 99644) (- 0 270426)) (< |p'#0@2| (|Seq#Length| |old_s##2@0|))) (=> (< |p'#0@2| (|Seq#Length| |old_s##2@0|)) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (and (and (and (and ($Is |call6formal@s#0@0@@1| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@0@@1)) ($IsAlloc |call6formal@s#0@0@@1| (TSeq call0formal@LinearSequence_i._default.mut_seq_set$A@0@@1) $Heap@4)) (|Seq#Equal| |call6formal@s#0@0@@1| (|Seq#Update| |old_s##2@0| |p'#0@2| |call3formal@a#0@0@@1|))) (and (forall (($o@@75 T@U) ) (!  (=> (= (type $o@@75) refType) (=> (and (not (= $o@@75 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@3 $o@@75) alloc))) (= (MapType0Select $Heap@4 $o@@75) (MapType0Select $Heap@3 $o@@75)))) :qid |LinearSequenceidfy.431:10| :skolemid |1922| :pattern ( (MapType0Select $Heap@4 $o@@75)) )) ($HeapSucc $Heap@3 $Heap@4))) (and (and ($Is |dt_update_tmp#7#Z#0@0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |dt_update_tmp#7#Z#0@0| (Tclass.DList.DList DList.DList$A@@50) $Heap@4)) (= |let#11#0#0| |self#0@5|))) (and (and (and ($Is |let#11#0#0| (Tclass.DList.DList DList.DList$A@@50)) (= |dt_update_tmp#7#Z#0@0| |let#11#0#0|)) (and ($Is |dt_update#nodes#2#Z#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |dt_update#nodes#2#Z#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@4))) (and (and (= |let#12#0#0| |call6formal@s#0@0@@1|) ($Is |let#12#0#0| (TSeq (Tclass.DList.Node DList.DList$A@@50)))) (and (= |dt_update#nodes#2#Z#0@0| |let#12#0#0|) (DList.DList.DList_q |dt_update_tmp#7#Z#0@0|))))) (and (and (and (and (and (DList.DList.DList_q |dt_update_tmp#7#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#7#Z#0@0|)) (and (DList.DList.DList_q |dt_update_tmp#7#Z#0@0|) (let ((|dt_update_tmp#7#0| |self#0@5|)) (and (and (and (DList.DList.DList_q |dt_update_tmp#7#0|) (DList.DList.DList_q |dt_update_tmp#7#0|)) (DList.DList.DList_q |dt_update_tmp#7#0|)) (DList.DList.DList_q |dt_update_tmp#7#0|))))) (and (and (= |self#0@6| (let ((|dt_update_tmp#7#0@@0| |self#0@5|)) (let ((|dt_update#nodes#2#0| |call6formal@s#0@0@@1|)) (|#DList.DList.DList| |dt_update#nodes#2#0| (DList.DList.freeStack |dt_update_tmp#7#0@@0|) (DList.DList.s |dt_update_tmp#7#0@@0|) (DList.DList.f |dt_update_tmp#7#0@@0|) (DList.DList.g |dt_update_tmp#7#0@@0|))))) (DList.Node.Node_q |freeNode#0@2|)) (and (DList.Node.Node_q |freeNode#0@2|) (= |_inout_tmp_7#0@0| (DList.Node.next |freeNode#0@2|))))) (and (and (and ($Is |dt_update_tmp#8#Z#0@0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |dt_update_tmp#8#Z#0@0| (Tclass.DList.DList DList.DList$A@@50) $Heap@4)) (= |let#13#0#0| |self#0@6|)) (and ($Is |let#13#0#0| (Tclass.DList.DList DList.DList$A@@50)) (= |dt_update_tmp#8#Z#0@0| |let#13#0#0|)))) (and (and (and (and (<= (LitInt 0) |dt_update#freeStack#0#Z#0@0|) (< |dt_update#freeStack#0#Z#0@0| 18446744073709551616)) (= |let#14#0#0| |_inout_tmp_7#0@0|)) (and ($Is (int_2_U |let#14#0#0|) Tclass.NativeTypes.uint64) (= |dt_update#freeStack#0#Z#0@0| |let#14#0#0|))) (and (and (and (DList.DList.DList_q |dt_update_tmp#8#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#8#Z#0@0|)) (and (DList.DList.DList_q |dt_update_tmp#8#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#8#Z#0@0|))) (and (and (let ((|dt_update_tmp#8#0| |self#0@6|)) (and (and (and (DList.DList.DList_q |dt_update_tmp#8#0|) (DList.DList.DList_q |dt_update_tmp#8#0|)) (DList.DList.DList_q |dt_update_tmp#8#0|)) (DList.DList.DList_q |dt_update_tmp#8#0|))) (= |self#0@7| (let ((|dt_update_tmp#8#0@@0| |self#0@6|)) (let ((|dt_update#freeStack#0#0| |_inout_tmp_7#0@0|)) (|#DList.DList.DList| (DList.DList.nodes |dt_update_tmp#8#0@@0|) |dt_update#freeStack#0#0| (DList.DList.s |dt_update_tmp#8#0@@0|) (DList.DList.f |dt_update_tmp#8#0@@0|) (DList.DList.g |dt_update_tmp#8#0@@0|)))))) (and (= |self#0@8| |self#0@7|) (= (ControlFlow 0 99644) 262723))))))) GeneratedUnifiedExit_correct))))))))))))))))))))))))))))))))))))) (let ((anon47_Else_correct  (and (=> (= (ControlFlow 0 99590) (- 0 268417)) (forall ((|seqinit#1#i0#0| Int) ) (!  (=> (and (<= 0 |seqinit#1#i0#0|) (< |seqinit#1#i0#0| (+ (|Seq#Length| (DList.DList.f |self#0@0|)) 1))) (Requires1 TInt TInt $Heap@1 (Lit (AtLayer (|lambda#24| (Handle1 (|lambda#93| |index'#0@0| |p'#0@2| |index'#0@0| (DList.DList.f |self#0@0|) (DList.DList.f |self#0@0|) 1) (|lambda#84| TInt (LitInt 0) (|Seq#Length| (DList.DList.f |self#0@0|))) (|lambda#23| (SetRef_to_SetBox (|lambda#22| false))))) ($LS $LZ))) ($Box (int_2_U |seqinit#1#i0#0|)))) :qid |LinearDListidfy.266:29| :skolemid |1566| ))) (=> (and (and (and (and (DList.DList.DList_q |self#0@0|) (forall ((|$l#4#x#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#4#x#0|) (DList.DList.DList_q |self#0@0|)) (=> (and (<= (LitInt 0) |$l#4#x#0|) (<= |$l#4#x#0| (|Seq#Length| (DList.DList.f |self#0@0|)))) (=> (not (= |$l#4#x#0| |index'#0@0|)) (and (=> (< |$l#4#x#0| |index'#0@0|) (DList.DList.DList_q |self#0@0|)) (=> (<= |index'#0@0| |$l#4#x#0|) (DList.DList.DList_q |self#0@0|)))))) :qid |unknown.0:0| :skolemid |1567| ))) (= |_inout_tmp_2#0@0| (|Seq#Create| TInt $Heap@1 (+ (|Seq#Length| (DList.DList.f |self#0@0|)) 1) (Lit (AtLayer (|lambda#24| (Handle1 (|lambda#93| |index'#0@0| |p'#0@2| |index'#0@0| (DList.DList.f |self#0@0|) (DList.DList.f |self#0@0|) 1) (|lambda#84| TInt (LitInt 0) (|Seq#Length| (DList.DList.f |self#0@0|))) (|lambda#23| (SetRef_to_SetBox (|lambda#22| false))))) ($LS $LZ)))))) (and (and ($Is |dt_update_tmp#1#Z#0@0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |dt_update_tmp#1#Z#0@0| (Tclass.DList.DList DList.DList$A@@50) $Heap@1)) (and (= |let#1#0#0| |self#0@1|) ($Is |let#1#0#0| (Tclass.DList.DList DList.DList$A@@50))))) (and (and (and (= |dt_update_tmp#1#Z#0@0| |let#1#0#0|) (DList.DList.DList_q |dt_update_tmp#1#Z#0@0|)) (and (DList.DList.DList_q |dt_update_tmp#1#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#1#Z#0@0|))) (and (and (DList.DList.DList_q |dt_update_tmp#1#Z#0@0|) (let ((|dt_update_tmp#1#0| |self#0@1|)) (and (and (and (DList.DList.DList_q |dt_update_tmp#1#0|) (DList.DList.DList_q |dt_update_tmp#1#0|)) (DList.DList.DList_q |dt_update_tmp#1#0|)) (DList.DList.DList_q |dt_update_tmp#1#0|)))) (and (= |self#0@2| (let ((|dt_update_tmp#1#0@@0| |self#0@1|)) (|#DList.DList.DList| (DList.DList.nodes |dt_update_tmp#1#0@@0|) (DList.DList.freeStack |dt_update_tmp#1#0@@0|) (DList.DList.s |dt_update_tmp#1#0@@0|) |_inout_tmp_2#0@0| (DList.DList.g |dt_update_tmp#1#0@@0|)))) (DList.DList.DList_q |self#0@2|))))) (and (=> (= (ControlFlow 0 99590) (- 0 268755)) (<= 0 (|Seq#Length| (DList.DList.g |self#0@2|)))) (=> (<= 0 (|Seq#Length| (DList.DList.g |self#0@2|))) (and (=> (= (ControlFlow 0 99590) 99598) anon53_Then_correct) (=> (= (ControlFlow 0 99590) 99644) anon53_Else_correct)))))))) (let ((anon41_Else_correct  (and (=> (= (ControlFlow 0 99536) (- 0 268045)) (forall ((|seqinit#0#i0#0| Int) ) (!  (=> (and (<= 0 |seqinit#0#i0#0|) (< |seqinit#0#i0#0| (+ (|Seq#Length| (DList.DList.s |self#0@0|)) 1))) (Requires1 TInt DList.DList$A@@50 $Heap@1 (Lit (AtLayer (|lambda#24| (Handle1 (|lambda#83| |index'#0@0| |a#0@@13| |index'#0@0| (DList.DList.s |self#0@0|) (DList.DList.s |self#0@0|) 1) (|lambda#84| TInt (LitInt 0) (|Seq#Length| (DList.DList.s |self#0@0|))) (|lambda#23| (SetRef_to_SetBox (|lambda#22| false))))) ($LS $LZ))) ($Box (int_2_U |seqinit#0#i0#0|)))) :qid |LinearDListidfy.264:29| :skolemid |1564| ))) (=> (and (and (and (and (DList.DList.DList_q |self#0@0|) (forall ((|$l#1#x#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#1#x#0|) (DList.DList.DList_q |self#0@0|)) (=> (and (<= (LitInt 0) |$l#1#x#0|) (<= |$l#1#x#0| (|Seq#Length| (DList.DList.s |self#0@0|)))) (=> (not (= |$l#1#x#0| |index'#0@0|)) (and (=> (< |$l#1#x#0| |index'#0@0|) (DList.DList.DList_q |self#0@0|)) (=> (<= |index'#0@0| |$l#1#x#0|) (DList.DList.DList_q |self#0@0|)))))) :qid |unknown.0:0| :skolemid |1565| ))) (= |_inout_tmp_1#0@0| (|Seq#Create| DList.DList$A@@50 $Heap@1 (+ (|Seq#Length| (DList.DList.s |self#0@0|)) 1) (Lit (AtLayer (|lambda#24| (Handle1 (|lambda#83| |index'#0@0| |a#0@@13| |index'#0@0| (DList.DList.s |self#0@0|) (DList.DList.s |self#0@0|) 1) (|lambda#84| TInt (LitInt 0) (|Seq#Length| (DList.DList.s |self#0@0|))) (|lambda#23| (SetRef_to_SetBox (|lambda#22| false))))) ($LS $LZ)))))) (and (and ($Is |dt_update_tmp#0#Z#0@0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |dt_update_tmp#0#Z#0@0| (Tclass.DList.DList DList.DList$A@@50) $Heap@1)) (and (= |let#0#0#0| |self#0@0|) ($Is |let#0#0#0| (Tclass.DList.DList DList.DList$A@@50))))) (and (and (and (= |dt_update_tmp#0#Z#0@0| |let#0#0#0|) (DList.DList.DList_q |dt_update_tmp#0#Z#0@0|)) (and (DList.DList.DList_q |dt_update_tmp#0#Z#0@0|) (DList.DList.DList_q |dt_update_tmp#0#Z#0@0|))) (and (and (DList.DList.DList_q |dt_update_tmp#0#Z#0@0|) (let ((|dt_update_tmp#0#0| |self#0@0|)) (and (and (and (DList.DList.DList_q |dt_update_tmp#0#0|) (DList.DList.DList_q |dt_update_tmp#0#0|)) (DList.DList.DList_q |dt_update_tmp#0#0|)) (DList.DList.DList_q |dt_update_tmp#0#0|)))) (and (= |self#0@1| (let ((|dt_update_tmp#0#0@@0| |self#0@0|)) (|#DList.DList.DList| (DList.DList.nodes |dt_update_tmp#0#0@@0|) (DList.DList.freeStack |dt_update_tmp#0#0@@0|) |_inout_tmp_1#0@0| (DList.DList.f |dt_update_tmp#0#0@@0|) (DList.DList.g |dt_update_tmp#0#0@@0|)))) (DList.DList.DList_q |self#0@0|))))) (and (=> (= (ControlFlow 0 99536) (- 0 268385)) (<= 0 (+ (|Seq#Length| (DList.DList.f |self#0@0|)) 1))) (=> (<= 0 (+ (|Seq#Length| (DList.DList.f |self#0@0|)) 1)) (and (=> (= (ControlFlow 0 99536) 99544) anon47_Then_correct) (=> (= (ControlFlow 0 99536) 99590) anon47_Else_correct)))))))) (let ((anon5_correct  (=> (DList.DList.DList_q |self#0@0|) (and (=> (= (ControlFlow 0 99484) (- 0 267952)) (and (<= 0 |p#0@@30|) (< |p#0@@30| (|Seq#Length| (DList.DList.g |self#0@0|))))) (=> (and (<= 0 |p#0@@30|) (< |p#0@@30| (|Seq#Length| (DList.DList.g |self#0@0|)))) (=> (and (and (DList.DList.DList_q |self#0@0|) (= |index#0@0| (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |self#0@0|) |p#0@@30|))))) (and (= |index'#0@0| (+ |index#0@0| 1)) (DList.DList.DList_q |self#0@0|))) (and (=> (= (ControlFlow 0 99484) (- 0 268013)) (<= 0 (+ (|Seq#Length| (DList.DList.s |self#0@0|)) 1))) (=> (<= 0 (+ (|Seq#Length| (DList.DList.s |self#0@0|)) 1)) (and (=> (= (ControlFlow 0 99484) 99490) anon41_Then_correct) (=> (= (ControlFlow 0 99484) 99536) anon41_Else_correct)))))))))) (let ((anon40_Else_correct  (=> (and (not (or (= |p'#0@0| (LitInt 0)) (Options.Option.Some_q (DList.Node.data |freeNode#0@0|)))) (= |self#0@0| |old_self#0|)) (=> (and (and (= |p'#0@2| |p'#0@0|) (= |freeNode#0@2| |freeNode#0@0|)) (and (= $Heap@1 $Heap@@8) (= (ControlFlow 0 99482) 99484))) anon5_correct)))) (let ((anon40_Then_correct  (=> (or (= |p'#0@0| (LitInt 0)) (Options.Option.Some_q (DList.Node.data |freeNode#0@0|))) (=> (and ($Is |_inout_tmp_0#0_0@0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |_inout_tmp_0#0_0@0| (Tclass.DList.DList DList.DList$A@@50) $Heap@@8)) (and (=> (= (ControlFlow 0 99480) (- 0 265818)) (forall (($o@@76 T@U) ($f@@51 T@U) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (= (type $o@@76) refType) (= (type $f@@51) (FieldType alpha@@58))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@76 $f@@51)))) :qid |LinearDListidfy.253:26| :skolemid |1563| :no-pattern (type $o@@76) :no-pattern (type $f@@51) :no-pattern (U_2_int $o@@76) :no-pattern (U_2_bool $o@@76) :no-pattern (U_2_int $f@@51) :no-pattern (U_2_bool $f@@51) ))) (=> (forall (($o@@77 T@U) ($f@@52 T@U) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (= (type $o@@77) refType) (= (type $f@@52) (FieldType alpha@@59))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@77 $f@@52)))) :qid |LinearDListidfy.253:26| :skolemid |1563| :no-pattern (type $o@@77) :no-pattern (type $f@@52) :no-pattern (U_2_int $o@@77) :no-pattern (U_2_bool $o@@77) :no-pattern (U_2_int $f@@52) :no-pattern (U_2_bool $f@@52) )) (=> (and ($Is |call5formal@self#0| (Tclass.DList.DList call0formal@DList.DList$A)) ($IsAlloc |call5formal@self#0| (Tclass.DList.DList call0formal@DList.DList$A) $Heap@@8)) (and (=> (= (ControlFlow 0 99480) (- 0 265840)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (= (|Seq#Length| (DList.DList.f |old_self#0|)) (|Seq#Length| (DList.DList.s |old_self#0|)))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (= (|Seq#Length| (DList.DList.f |old_self#0|)) (|Seq#Length| (DList.DList.s |old_self#0|))))))) (and (=> (= (ControlFlow 0 99480) (- 0 265904)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (= (|Seq#Length| (DList.DList.g |old_self#0|)) (|Seq#Length| (DList.DList.nodes |old_self#0|)))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (= (|Seq#Length| (DList.DList.g |old_self#0|)) (|Seq#Length| (DList.DList.nodes |old_self#0|))))))) (and (=> (= (ControlFlow 0 99480) (- 0 265968)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (> (|Seq#Length| (DList.DList.nodes |old_self#0|)) 0)))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (> (|Seq#Length| (DList.DList.nodes |old_self#0|)) 0))))) (and (=> (= (ControlFlow 0 99480) (- 0 266029)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) (LitInt 0)))) DList.__default.sentinel)))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) (LitInt 0)))) DList.__default.sentinel))))) (and (=> (= (ControlFlow 0 99480) (- 0 266098)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (<= (LitInt 0) (DList.DList.freeStack |old_self#0|))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (<= (LitInt 0) (DList.DList.freeStack |old_self#0|)))))) (and (=> (= (ControlFlow 0 99480) (- 0 266159)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (< (DList.DList.freeStack |old_self#0|) (|Seq#Length| (DList.DList.nodes |old_self#0|)))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (< (DList.DList.freeStack |old_self#0|) (|Seq#Length| (DList.DList.nodes |old_self#0|))))))) (and (=> (= (ControlFlow 0 99480) (- 0 266221)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (forall ((|i#0@@60| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| (|Seq#Length| (DList.DList.f |old_self#0|)))) (< 0 (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#0@@60|))))) (=> (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| (|Seq#Length| (DList.DList.f |old_self#0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#0@@60|))) (|Seq#Length| (DList.DList.nodes |old_self#0|)))))) :qid |LinearDListidfy.50:16| :skolemid |1430| :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#0@@60|))) ))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (forall ((|i#0@@61| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| (|Seq#Length| (DList.DList.f |old_self#0|)))) (< 0 (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#0@@61|))))) (=> (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| (|Seq#Length| (DList.DList.f |old_self#0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#0@@61|))) (|Seq#Length| (DList.DList.nodes |old_self#0|)))))) :qid |LinearDListidfy.50:16| :skolemid |1430| :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#0@@61|))) )))))) (and (=> (= (ControlFlow 0 99480) (- 0 266369)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (forall ((|i#1@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| (|Seq#Length| (DList.DList.f |old_self#0|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#1@@7|)))))) |i#1@@7|))) :qid |LinearDListidfy.51:16| :skolemid |1431| :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#1@@7|)))))) ))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (forall ((|i#1@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| (|Seq#Length| (DList.DList.f |old_self#0|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#1@@8|)))))) |i#1@@8|))) :qid |LinearDListidfy.51:16| :skolemid |1431| :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) |i#1@@8|)))))) )))))) (and (=> (= (ControlFlow 0 99480) (- 0 266494)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (forall ((|p#0@@31| Int) ) (!  (=> true (and (and (and (and (=> (and (<= (LitInt 0) |p#0@@31|) (< |p#0@@31| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#0@@31|))))) (=> (and (<= (LitInt 0) |p#0@@31|) (< |p#0@@31| (|Seq#Length| (DList.DList.g |old_self#0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#0@@31|))) (|Seq#Length| (DList.DList.s |old_self#0|))))) (=> (and (<= (LitInt 0) |p#0@@31|) (< |p#0@@31| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#0@@31|)))))) (=> (and (<= (LitInt 0) |p#0@@31|) (< |p#0@@31| (|Seq#Length| (DList.DList.g |old_self#0|)))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#0@@31|))) (|Seq#Length| (DList.DList.g |old_self#0|))))) (=> (and (<= (LitInt 0) |p#0@@31|) (< |p#0@@31| (|Seq#Length| (DList.DList.g |old_self#0|)))) (= (>= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#0@@31|))) (LitInt 0)) (Options.Option.Some_q (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#0@@31|)))))))) :qid |LinearDListidfy.52:16| :skolemid |1432| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#0@@31|))) :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#0@@31|))) ))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (forall ((|p#0@@32| Int) ) (!  (=> true (and (and (and (and (=> (and (<= (LitInt 0) |p#0@@32|) (< |p#0@@32| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.unused (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#0@@32|))))) (=> (and (<= (LitInt 0) |p#0@@32|) (< |p#0@@32| (|Seq#Length| (DList.DList.g |old_self#0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#0@@32|))) (|Seq#Length| (DList.DList.s |old_self#0|))))) (=> (and (<= (LitInt 0) |p#0@@32|) (< |p#0@@32| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= (LitInt 0) (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#0@@32|)))))) (=> (and (<= (LitInt 0) |p#0@@32|) (< |p#0@@32| (|Seq#Length| (DList.DList.g |old_self#0|)))) (< (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#0@@32|))) (|Seq#Length| (DList.DList.g |old_self#0|))))) (=> (and (<= (LitInt 0) |p#0@@32|) (< |p#0@@32| (|Seq#Length| (DList.DList.g |old_self#0|)))) (= (>= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#0@@32|))) (LitInt 0)) (Options.Option.Some_q (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#0@@32|)))))))) :qid |LinearDListidfy.52:16| :skolemid |1432| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#0@@32|))) :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#0@@32|))) )))))) (and (=> (= (ControlFlow 0 99480) (- 0 266797)) (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (forall ((|p#1@@1| Int) ) (!  (=> true (and (and (and (and (=> (and (and (<= (LitInt 0) |p#1@@1|) (< |p#1@@1| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))) DList.__default.sentinel) (= |p#1@@1| (LitInt 0)))) (=> (and (and (<= (LitInt 0) |p#1@@1|) (< |p#1@@1| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|)))) (and (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|)))))) |p#1@@1|) (|Options.Option#Equal| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@1|))) (|#Options.Option.Some| (|Seq#Index| (DList.DList.s |old_self#0|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|)))))))))) (=> (and (and (<= (LitInt 0) |p#1@@1|) (< |p#1@@1| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))))) (= (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@1|))) (ite (< (+ (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))) 1) (|Seq#Length| (DList.DList.f |old_self#0|))) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) (+ (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))) 1)))) 0)))) (=> (and (and (<= (LitInt 0) |p#1@@1|) (< |p#1@@1| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))))) (= (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@1|))) (ite (> (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))) 0) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) (- (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))) 1)))) (ite  (or (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))) (LitInt 0)) (= (|Seq#Length| (DList.DList.f |old_self#0|)) (LitInt 0))) 0 (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) (- (|Seq#Length| (DList.DList.f |old_self#0|)) 1))))))))) (=> (and (and (<= (LitInt 0) |p#1@@1|) (< |p#1@@1| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))))) (< (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@1|))) (|Seq#Length| (DList.DList.nodes |old_self#0|)))))) :qid |LinearDListidfy.56:16| :skolemid |1433| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@1|))) :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@1|))) ))))))) (=> (=> (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (or (DList.DList.Inv DList.DList$A@@50 |old_self#0|) (=> (|DList.__default.Invs#canCall| DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (or (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|)) (forall ((|p#1@@2| Int) ) (!  (=> true (and (and (and (and (=> (and (and (<= (LitInt 0) |p#1@@2|) (< |p#1@@2| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))))) (=> (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))) DList.__default.sentinel) (= |p#1@@2| (LitInt 0)))) (=> (and (and (<= (LitInt 0) |p#1@@2|) (< |p#1@@2| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|)))) (and (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|)))))) |p#1@@2|) (|Options.Option#Equal| (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@2|))) (|#Options.Option.Some| (|Seq#Index| (DList.DList.s |old_self#0|) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|)))))))))) (=> (and (and (<= (LitInt 0) |p#1@@2|) (< |p#1@@2| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))))) (= (DList.Node.next ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@2|))) (ite (< (+ (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))) 1) (|Seq#Length| (DList.DList.f |old_self#0|))) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) (+ (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))) 1)))) 0)))) (=> (and (and (<= (LitInt 0) |p#1@@2|) (< |p#1@@2| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))))) (= (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@2|))) (ite (> (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))) 0) (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) (- (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))) 1)))) (ite  (or (= (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))) (LitInt 0)) (= (|Seq#Length| (DList.DList.f |old_self#0|)) (LitInt 0))) 0 (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.f |old_self#0|) (- (|Seq#Length| (DList.DList.f |old_self#0|)) 1))))))))) (=> (and (and (<= (LitInt 0) |p#1@@2|) (< |p#1@@2| (|Seq#Length| (DList.DList.g |old_self#0|)))) (<= DList.__default.sentinel (U_2_int ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))))) (< (DList.Node.prev ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@2|))) (|Seq#Length| (DList.DList.nodes |old_self#0|)))))) :qid |LinearDListidfy.56:16| :skolemid |1433| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |old_self#0|) |p#1@@2|))) :pattern ( ($Unbox intType (|Seq#Index| (DList.DList.g |old_self#0|) |p#1@@2|))) )))))) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (and (and ($Is |call5formal@self#0@0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |call5formal@self#0@0| (Tclass.DList.DList DList.DList$A@@50) $Heap@0)) (|DList.DList.Inv#canCall| DList.DList$A@@50 |call5formal@self#0@0|)) (and (|DList.DList.Inv#canCall| DList.DList$A@@50 |call5formal@self#0@0|) (and (and (and (and (and (and (DList.DList.Inv DList.DList$A@@50 |call5formal@self#0@0|) ($Is (DList.DList.nodes |call5formal@self#0@0|) (TSeq (Tclass.DList.Node DList.DList$A@@50)))) (and (<= (LitInt 0) (DList.DList.freeStack |call5formal@self#0@0|)) (< (DList.DList.freeStack |call5formal@self#0@0|) 18446744073709551616))) ($Is (DList.DList.s |call5formal@self#0@0|) (TSeq DList.DList$A@@50))) ($Is (DList.DList.f |call5formal@self#0@0|) (TSeq TInt))) ($Is (DList.DList.g |call5formal@self#0@0|) (TSeq TInt))) (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |call5formal@self#0@0|) (DList.DList.freeStack |call5formal@self#0@0|) (DList.DList.s |call5formal@self#0@0|) (DList.DList.f |call5formal@self#0@0|) (DList.DList.g |call5formal@self#0@0|))))) (and (and (and (DList.DList.DList_q |call5formal@self#0@0|) (DList.DList.DList_q |old_self#0|)) (|Seq#Equal| (DList.DList.s |call5formal@self#0@0|) (DList.DList.s |old_self#0|))) (and (forall ((|x#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |x#1@@0|) (< |x#1@@0| 18446744073709551616)) (and (|DList.DList.ValidPtr#canCall| DList.DList$A@@50 |old_self#0| |x#1@@0|) (=> (DList.DList.ValidPtr DList.DList$A@@50 |old_self#0| |x#1@@0|) (|DList.DList.PointerToIndexUnchanged#canCall| DList.DList$A@@50 DList.DList$A@@50 |old_self#0| |call5formal@self#0@0| |x#1@@0|)))) :qid |LinearDListidfy.193:22| :skolemid |1446| :pattern ( (DList.DList.PointerToIndexUnchanged DList.DList$A@@50 DList.DList$A@@50 |old_self#0| |call5formal@self#0@0| |x#1@@0|)) :pattern ( (DList.DList.ValidPtr DList.DList$A@@50 |old_self#0| |x#1@@0|)) )) (forall ((|x#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |x#1@@1|) (< |x#1@@1| 18446744073709551616)) (=> (DList.DList.ValidPtr DList.DList$A@@50 |old_self#0| |x#1@@1|) (DList.DList.PointerToIndexUnchanged DList.DList$A@@50 DList.DList$A@@50 |old_self#0| |call5formal@self#0@0| |x#1@@1|))) :qid |LinearDListidfy.193:22| :skolemid |1447| :pattern ( (DList.DList.PointerToIndexUnchanged DList.DList$A@@50 DList.DList$A@@50 |old_self#0| |call5formal@self#0@0| |x#1@@1|)) :pattern ( (DList.DList.ValidPtr DList.DList$A@@50 |old_self#0| |x#1@@1|)) ))))) (and (and (and (and (DList.DList.DList_q |call5formal@self#0@0|) (=> (not (= (DList.DList.freeStack |call5formal@self#0@0|) 0)) (and (and (DList.DList.DList_q |call5formal@self#0@0|) (DList.DList.DList_q |call5formal@self#0@0|)) (DList.Node.Node_q ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |call5formal@self#0@0|) (DList.DList.freeStack |call5formal@self#0@0|))))))) (not (= (DList.DList.freeStack |call5formal@self#0@0|) 0))) (and (Options.Option.None_q (DList.Node.data ($Unbox DatatypeTypeType (|Seq#Index| (DList.DList.nodes |call5formal@self#0@0|) (DList.DList.freeStack |call5formal@self#0@0|))))) (forall (($o@@78 T@U) ) (!  (=> (= (type $o@@78) refType) (=> (and (not (= $o@@78 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@@8 $o@@78) alloc))) (= (MapType0Select $Heap@0 $o@@78) (MapType0Select $Heap@@8 $o@@78)))) :qid |LinearDListidfy.189:25| :skolemid |1448| :pattern ( (MapType0Select $Heap@0 $o@@78)) )))) (and (and (and ($HeapSucc $Heap@@8 $Heap@0) (DList.DList.DList_q |call5formal@self#0@0|)) (and (DList.DList.DList_q |call5formal@self#0@0|) (= |p'#0@1| (DList.DList.freeStack |call5formal@self#0@0|)))) (and (and (DList.DList.DList_q |call5formal@self#0@0|) (= |##s#0_0@0| (DList.DList.nodes |call5formal@self#0@0|))) (and ($IsAlloc |##s#0_0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@0) ($IsAlloc (int_2_U |p'#0@1|) Tclass.NativeTypes.uint64 $Heap@0)))))) (and (=> (= (ControlFlow 0 99480) (- 0 267811)) (< |p'#0@1| (|Seq#Length| |##s#0_0@0|))) (=> (< |p'#0@1| (|Seq#Length| |##s#0_0@0|)) (=> (and (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |call5formal@self#0@0|) |p'#0@1|) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |call5formal@self#0@0|) |p'#0@1|)))) (=> (and (and (and (DList.DList.DList_q |call5formal@self#0@0|) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |call5formal@self#0@0|) |p'#0@1|)) (and (= |freeNode#0@1| ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |call5formal@self#0@0|) |p'#0@1|))) (= |self#0@0| |call5formal@self#0@0|))) (and (and (= |p'#0@2| |p'#0@1|) (= |freeNode#0@2| |freeNode#0@1|)) (and (= $Heap@1 $Heap@0) (= (ControlFlow 0 99480) 99484)))) anon5_correct))))))))))))))))))))))))))))))))) (let ((anon2_correct  (=> (=> (not (= |p'#0@0| (LitInt 0))) (DList.Node.Node_q |freeNode#0@0|)) (and (=> (= (ControlFlow 0 99478) 99480) anon40_Then_correct) (=> (= (ControlFlow 0 99478) 99482) anon40_Else_correct))))) (let ((anon39_Else_correct  (=> (and (= |p'#0@0| (LitInt 0)) (= (ControlFlow 0 99471) 99478)) anon2_correct))) (let ((anon39_Then_correct  (=> (not (= |p'#0@0| (LitInt 0))) (=> (and (DList.Node.Node_q |freeNode#0@0|) (= (ControlFlow 0 99469) 99478)) anon2_correct)))) (let ((anon0_correct  (=> (and (and (and (= $_Frame@0 (|lambda#82| null $Heap@@8 alloc false)) (DList.DList.DList_q |old_self#0|)) (and (DList.DList.DList_q |old_self#0|) (= |p'#0@0| (DList.DList.freeStack |old_self#0|)))) (and (and (DList.DList.DList_q |old_self#0|) (= |##s#0@0| (DList.DList.nodes |old_self#0|))) (and ($IsAlloc |##s#0@0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@@8) ($IsAlloc (int_2_U |p'#0@0|) Tclass.NativeTypes.uint64 $Heap@@8)))) (and (=> (= (ControlFlow 0 99467) (- 0 265647)) (< |p'#0@0| (|Seq#Length| |##s#0@0|))) (=> (< |p'#0@0| (|Seq#Length| |##s#0@0|)) (=> (and (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |old_self#0|) |p'#0@0|) (DList.Node.Node_q ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |old_self#0|) |p'#0@0|)))) (=> (and (and (DList.DList.DList_q |old_self#0|) (|LinearExtern.__default.seq_get#canCall| (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |old_self#0|) |p'#0@0|)) (and (= |freeNode#0@0| ($Unbox DatatypeTypeType (LinearExtern.__default.seq_get (Tclass.DList.Node DList.DList$A@@50) (DList.DList.nodes |old_self#0|) |p'#0@0|))) (= |newtype$check#0@0| (LitInt 0)))) (and (=> (= (ControlFlow 0 99467) (- 0 265732)) (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| 18446744073709551616)) (and (=> (= (ControlFlow 0 99467) 99469) anon39_Then_correct) (=> (= (ControlFlow 0 99467) 99471) anon39_Else_correct))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and (and (and ($IsGoodHeap $Heap@@8) ($IsHeapAnchor $Heap@@8)) (and ($Is this@@35 (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc this@@35 (Tclass.DList.DList DList.DList$A@@50) $Heap@@8))) (and (and ($Is |old_self#0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |old_self#0| (Tclass.DList.DList DList.DList$A@@50) $Heap@@8)) (|$IsA#DList.DList| |old_self#0|))) (and (and (and (<= (LitInt 0) |p#0@@30|) (< |p#0@@30| 18446744073709551616)) (and ($IsBox |a#0@@13| DList.DList$A@@50) ($IsAllocBox |a#0@@13| DList.DList$A@@50 $Heap@@8))) (and (and (<= (LitInt 0) |p'#0|) (< |p'#0| 18446744073709551616)) (and ($Is |self#0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |self#0| (Tclass.DList.DList DList.DList$A@@50) $Heap@@8))))) (and (and (and (and ($Is |freeNode#0| (Tclass.DList.Node DList.DList$A@@50)) ($IsAlloc |freeNode#0| (Tclass.DList.Node DList.DList$A@@50) $Heap@@8)) (and ($Is |_inout_tmp_0#0_0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |_inout_tmp_0#0_0| (Tclass.DList.DList DList.DList$A@@50) $Heap@@8))) (and (and ($Is |$rhs##0_0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |$rhs##0_0| (Tclass.DList.DList DList.DList$A@@50) $Heap@@8)) (and ($Is |selfBefore#0| (Tclass.DList.DList DList.DList$A@@50)) ($IsAlloc |selfBefore#0| (Tclass.DList.DList DList.DList$A@@50) $Heap@@8)))) (and (and (and ($Is |_inout_tmp_1#0| (TSeq DList.DList$A@@50)) ($IsAlloc |_inout_tmp_1#0| (TSeq DList.DList$A@@50) $Heap@@8)) (and ($Is |_inout_tmp_2#0| (TSeq TInt)) ($IsAlloc |_inout_tmp_2#0| (TSeq TInt) $Heap@@8))) (and (and ($Is |_inout_tmp_3#0| (TSeq TInt)) ($IsAlloc |_inout_tmp_3#0| (TSeq TInt) $Heap@@8)) (and ($Is |node#0| (Tclass.DList.Node DList.DList$A@@50)) ($IsAlloc |node#0| (Tclass.DList.Node DList.DList$A@@50) $Heap@@8)))))) (and (and (and (and (and ($Is |node'#0| (Tclass.DList.Node DList.DList$A@@50)) ($IsAlloc |node'#0| (Tclass.DList.Node DList.DList$A@@50) $Heap@@8)) (and ($Is |_inout_tmp_4#0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |_inout_tmp_4#0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@@8))) (and (and ($Is |$rhs##0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |$rhs##0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@@8)) (and ($Is |node_next#0| (Tclass.DList.Node DList.DList$A@@50)) ($IsAlloc |node_next#0| (Tclass.DList.Node DList.DList$A@@50) $Heap@@8)))) (and (and (and ($Is |_inout_tmp_5#0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |_inout_tmp_5#0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@@8)) (and ($Is |$rhs##1| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |$rhs##1| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@@8))) (and (and ($Is |_inout_tmp_6#0| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |_inout_tmp_6#0| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@@8)) (and ($Is |$rhs##2| (TSeq (Tclass.DList.Node DList.DList$A@@50))) ($IsAlloc |$rhs##2| (TSeq (Tclass.DList.Node DList.DList$A@@50)) $Heap@@8))))) (and (and (and (and (<= (LitInt 0) |_inout_tmp_7#0|) (< |_inout_tmp_7#0| 18446744073709551616)) (= 22 $FunctionContextHeight)) (and (|DList.DList.Inv#canCall| DList.DList$A@@50 |old_self#0|) (and (and (and (and (and (and (DList.DList.Inv DList.DList$A@@50 |old_self#0|) ($Is (DList.DList.nodes |old_self#0|) (TSeq (Tclass.DList.Node DList.DList$A@@50)))) (and (<= (LitInt 0) (DList.DList.freeStack |old_self#0|)) (< (DList.DList.freeStack |old_self#0|) 18446744073709551616))) ($Is (DList.DList.s |old_self#0|) (TSeq DList.DList$A@@50))) ($Is (DList.DList.f |old_self#0|) (TSeq TInt))) ($Is (DList.DList.g |old_self#0|) (TSeq TInt))) (DList.__default.Invs DList.DList$A@@50 (DList.DList.nodes |old_self#0|) (DList.DList.freeStack |old_self#0|) (DList.DList.s |old_self#0|) (DList.DList.f |old_self#0|) (DList.DList.g |old_self#0|))))) (and (and (|DList.DList.MaybePtr#canCall| DList.DList$A@@50 |old_self#0| |p#0@@30|) (and (DList.DList.MaybePtr DList.DList$A@@50 |old_self#0| |p#0@@30|) (or (= |p#0@@30| (LitInt 0)) (DList.DList.ValidPtr DList.DList$A@@50 |old_self#0| |p#0@@30|)))) (= (ControlFlow 0 262843) 99467))))) anon0_correct))) PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))) ))
(check-sat)
